- en: 'Object-oriented programming for data scientists: Build your ML estimator'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/08/object-oriented-programming-data-scientists-estimator.html](https://www.kdnuggets.com/2019/08/object-oriented-programming-data-scientists-estimator.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: '**UPDATE**: You will always find the latest Python script (with the linear
    regression class definition and methods) [**HERE**](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/OOP_in_ML/Class_MyLinearRegression.py).
    Use it to build further or experiment.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: What is the problem?
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists often come from a background which is quite far removed from
    traditional computer science/software engineering — physics, biology, statistics,
    economics, electrical engineering, etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/14047e07e857d9d8af0a64fd62947456.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: '**Source**: [“Where do Data Scientists Come From?”](https://medium.com/indeed-engineering/where-do-data-scientists-come-from-fc526023ace)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: But ultimately, they are expected to pick up a sufficient amount of programming/software
    engineering to be truly impactful for their organization and business.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '**[Being a Data Scientist does not make you a Software Engineer!](https://towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372?source=post_page-----7da416751f64----------------------)**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: How to build scalable Machine Learning systems — Part 1/2
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: And, what is at the heart of most modern programming languages and software
    engineering paradigms?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[Object-oriented programming (OOP).](https://www.webopedia.com/TERM/O/object_oriented_programming_OOP.html)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: But the [principles of OOP](https://realpython.com/python3-object-oriented-programming/) can
    feel little alien or even intimidating to the uninitiated at first. Consequently,
    data scientists, whose background did not include formal training in computer
    programming, may find the concepts of OOP somewhat difficult to embrace in their
    day-to-day work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: The popular MOOCs and boot camps for data science/AI/ML do not help either.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: They try to give the budding data scientists the flavor of a mixed soup of statistics,
    numerical analysis, scientific programming, machine learning (ML) algorithms,
    visualization, and perhaps even a bit of web framework to deploy those ML models.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Almost all of these can be learned and practiced even without rigorously adhering
    to the principles of OOP. In fact, young data scientists, who are hungry to learn
    the latest neural network architecture or the coolest data visualization techniques,
    may even feel suffocated if bombarded with all the nitty-gritty of the OOP programming
    paradigm. So, the MOOCs don’t generally mix or emphasize it in their data science
    curriculum.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7fd218516dbca417bf02d9ed323659c7.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
- en: A simple example (and some more…)
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let me give an example of this problem using Python, as it is the [fastest growing
    language for data science and machine learning tasks](https://stackoverflow.blog/2017/09/14/python-growing-quickly/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: The arithmetic example
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are asked to write a program to implement addition, subtraction, multiplication,
    and division involving a couple of numbers `a` and `b`, what will you most likely
    do?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: You will most likely open up a Jupyter notebook and type the following in a
    cell, hit *shift-enter* and get the result.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you like to tidy things up by working with functions, then you may do,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But will you go as far as defining (complete with an initializer method) a Calc ***class*** and
    putting these functions inside that class as ***methods***? These are all operations
    of a similar nature and they work on similar data. Why not [encapsulate](https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/) them
    within a single higher-order object then? Why not the following code?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: No, you won’t do this. It probably does not make sense to do it for this particular
    problem either. But the idea is valid —* if you have data and functions (methods
    as they are called in the parlance of OOP), which can be combined logically, then
    they should be encapsulated in a class*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: But it looks too much work just for getting quick answers to some simple numerical
    computations. So, what’s the point? Data scientists are often valued on whether
    they can get the right answer to the data problem, not on what elaborate objects
    they are using in the code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: Data scientist’s example
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If data scientists are not coding this way, is it not the case, that they really
    don’t need to use these elaborate programming constructs?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '**Wrong.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Without consciously being aware, data scientists make heavy use of the benefits
    of the OOP paradigm. **All the time**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Remember `plt.plot` after `import matplotlib.pyplot as plt`?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Those **.** symbols. You have a dash of object-oriented programming. Right there.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Or, do you remember being happy to learn the cool trick in the Jupyter notebook
    — hitting Tab after putting a DOT (.), thereby showing all the functions that
    can be associated with an *object*? Like this,
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/97c267ebc460ca2af1652a07ac458847.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: What does this example show?
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This example shows adherence to logical consistency.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Without the OOP paradigm, we would have to name those functions as `linear_model_linear_regression_fit`,`linear_model_linear_regression_predict`,
    and so on. They won’t be grouped under a common logical unit.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: Why? Because they are different functions and work on a different set of data.
    While the `fit` function expects both training features and targets, `predict`needs
    only a test data set. The `fit` function is not expected to return anything, while `predict` is
    expected to return a set of predictions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**So, why are they visible under the same drop-down**? In spite of being different,
    they have the commonality that *they can both be imagined to be essential parts
    of the overall linear regression process* — we expect a linear regression to fit
    some training data, and then be able to predict for future unseen data. We also
    expect the linear regression model to provide us some indication about how good
    the fit was — generally in the form of a single numeric quantity or score called
    coefficient of regression or R². As expected, we see a function `score`, which
    returns exactly that R² number, also hanging around `fit`and `predict`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Neat and clean, isn’t it?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Data, functions, and parameters are cohabitating inside a single logical unit.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/50eb96c8a9e886ec5e8981b520522367.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: How was it made possible?
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It was possible because **we rose above the individual differences and thought
    about the linear regression as a high-level process** and decided what essential
    actions it should serve and what critical parameters it should inform its users
    about.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: We made a high-level class called `LinearRegression` under which all those apparently
    disparate functions can be grouped together for easy book-keeping and enhanced
    usability.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Once we imported this class from the library, we just had to create an instance
    of the class — we called it `lm`. That’s it. All the functions, grouped under
    the class, became accessible to us through that newly defined instance `lm`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: If we are not satisfied with some of the internal implementation of the functions,
    we can work on them and re-attach them to the main class after modification. Only
    the code of the internal function changes, nothing else.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: See, how logical and scalable it sounds?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b574d609433e3dac521a60cf30c50316.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Create your own ML estimator
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Traditional introduction to OOP will have plenty of examples using classes such
    as — animals, sports, geometric shapes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: But for data scientists, **why not illustrate the concepts using the example
    of an object they use every day in their code — a machine learning estimator**.
    Just like the `lm` object from the Scikit-learn library, shown in the picture
    above.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: A good, old Linear Regression estimator — with a twist
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[**In this Github repo**](https://github.com/tirthajyoti/Machine-Learning-with-Python/tree/master/OOP_in_ML),
    I have shown, step-by-step, how to build a simple linear regression (single or
    multivariate) estimator class following the OOP paradigm.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it is the good old linear regression class. It has the usual `fit` and `predict`methods
    as in the `LinearRegression` class from Scikit-learn. But it has more functionalities.
    Here is a sneak peek…
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c58fd137523c1bcd9c3dd1cd79a8707.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
- en: Yes, this estimator is richer than the Scikit-learn estimator in the sense that
    it has, in addition to standard `fit`, `predict`, and R² `score` functions, **a
    host of other utilities which are essential for a linear regression modeling task**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Especially, for data scientists and statistical modeling folks — who not only
    want to predict but also would like to
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: measure the [Goodness of fit](https://blog.minitab.com/blog/adventures-in-statistics-2/regression-analysis-how-do-i-interpret-r-squared-and-assess-the-goodness-of-fit),
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: verify the [assumptions of the linear regression](https://statisticsbyjim.com/regression/ols-linear-regression-assumptions/),
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: check for [multicollinearity in the data](https://blog.minitab.com/blog/understanding-statistics/handling-multicollinearity-in-regression-analysis),
    or
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: detect [outliers](https://stattrek.com/regression/influential-points.aspx).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[How do you check the quality of your regression model in Python?](https://towardsdatascience.com/how-do-you-check-the-quality-of-your-regression-model-in-python-fa61759ff685?source=post_page-----7da416751f64----------------------)**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Linear regression is rooted strongly in statistical learning and therefore the
    model must be checked for the ‘goodness…
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: How do you start building the class?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We start with a simple code snippet to define the class. We name it — `MyLinearRegression`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Here, `self` denotes the object itself and `__init__` is a [special function
    which is invoked when an instance of the class is created](https://micropyramid.com/blog/understand-self-and-__init__-method-in-python-class/) somewhere
    in the code. As the name suggests, `__init__` can be used to initialize the class
    with necessary parameters (if any).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70c02f5518e56cd53bb6ddc03a6d9c9a.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: We can add a simple description string to keep it honest :-)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6be0608e25d1f6584625e0e2da6593ef.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: We add the core `fit` method next. Note the [**docstring**](https://www.geeksforgeeks.org/python-docstrings/) describing
    the purpose of the method, what it does and what type of data it expects. [All
    of these are part of good OOP principles](https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b0999e6f072e96e626a33d5bb4fee98f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: We can generate some random data to test our code so far. We create a linear
    function of two variables. Here are the scatter plots of the data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7f6ba261575fc70a25b26bb4a2b5df46.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Now, we can create an instance of the class `MyLinearRegression` called `mlr`.
    What happens if we try to print the regression parameters?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/050574a0011945253ffa1324d61e849f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Because the `self.coef_` was set to `None`, we get the same while trying to
    print `mlr.coef_`. Note, how the self became synonymous to the instance of the
    class — `mlr` once it is created.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: But the definition of `fit` includes setting the attributes once the fitting
    is done. Therefore, we can just call `mlr.fit()` and print out the fitted regression
    parameters.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49eef3affe2909fca466bf5317cf6d43.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: The quintessential `Predict` method
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After fitting, comes prediction. We can add that method easily to our regression
    class.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/adc25f937a8be3e2e63a7dbe181fc39e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: What if we want to add a (or a few) plotting utility function?
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, we start expanding our regression class and **add stuff which
    is not even present in the standard scikit-learn class!** For example, we always
    want to see how the fitted values compare to the ground truth. It is easy to create
    a function for that. We will call it `plot_fitted`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Note that a [method is like a normal function](https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function/29379748).
    It can take additional arguments. Here, we have an argument`reference_line` (default
    set to `False`) which draws a 45-degree reference line on the fitted vs true plot.
    Also, note the docstring description.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aa3ddeee84b3de9e4bd2fcd2c3992387.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
- en: We can test the method`plot_fitted` by simply doing the following,
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Or, we can opt to draw the reference line,
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We get the following plots!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dc458160e528deab2021214f05391f73.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Once we understood that we can add any useful methods to work on the same data
    (a training set), related to the same purpose (linear regression), there is no
    bound to our imagination! How about we add the following plots to our class?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**Pairplots** (plots pairwise relation between all features and outputs, much
    like the `pairs` function in R)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fitted vs. residual** plot (this falls under diagnostic plots for the linear
    regression i.e. to check the validity of the fundamental assumptions)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Histogram** and the **quantile-quantile (Q-Q)** plot of the residuals (this
    checks for the assumption of Normality of the error distribution)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheritance — don’t overburden your main class
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we enthusiastically plan utility methods to add to the class, we recognize
    that this approach may make the code of the main class very long and difficult
    to debug. To solve the conundrum, we can make use of another beautiful principle
    of OOP —[**inheritance**](https://www.geeksforgeeks.org/inheritance-in-python/).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '**[Inheritance in Python - GeeksforGeeks](https://www.geeksforgeeks.org/inheritance-in-python/?source=post_page-----7da416751f64----------------------)**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Inheritance is the capability of one class to derive or inherit the properties
    from some another class. The benefits of…
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: We further recognize that **all plots are not of the same type**. Pairplots
    and fitted vs. true data plots are of similar nature as they can be derived from
    the data only. Other plots are related to the goodness-of-fit and residuals.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we can create two separate classes with those plotting functions
    — `Data_plots` and `Diagnostic_plots`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: And guess what! We can define our main `MyLinearRegression` class ***in terms
    of these utility classes***. That is an instance of inheritance.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: This may seem a little different from standard parent class-child
    class inheritance practice but for the same feature of the language is used here
    for keeping the main class clean and compact while inheriting useful methods from
    other similarly constructed classes.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dbf1bccc0045c88bdf44e7a8f63f493b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
- en: Note the following code snippets are only for illustration. Please use the Github
    link above to see the actual code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/7e6d3e16ced328bdd829de63c91082f2.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: '`Data_plots` class![Figure](../Images/e7df0082a7f0bcc4978c3d4321977433.png)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '`Diagnostics_plots` class'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: And the definition of `MyLinearregression` is changed only slightly,
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By simply passing on the reference of `Data_plots` and `Diagnostics_plots` to
    the definition of `MyLinearRgression` class, we inherit all the methods and properties
    of those classes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Now, to check the Normality assumptions of the error terms, we can simply fit
    the model and run those methods.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We get,
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4c438910375e2697d073be9b2086c20b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: Again, the separation of code is at work here. You can modify and improve the
    core plotting utilities without touching the main class. Highly flexible and less
    error-prone approach!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Do more with the power of OOP
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will not elaborate further on the various utility classes and methods we
    can add to `MyLinearRegression`. You can [**check the Github repo**](https://github.com/tirthajyoti/Machine-Learning-with-Python/tree/master/OOP_in_ML).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: Additional classes added
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just for completeness, we added,
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: A class `Metrics` for computing various regression metrics — SSE, SST, MSE, *R*²,
    and Adjusted *R*².
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class `Outliers` to plot Cook’s distance, leverage, and influence plots
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A class `Multicollinearity` to compute variance inflation factors (VIF)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All in all, the grand scheme looks like following,
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c7cd17cb8c128a37c79da2a641840506.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
- en: Is this class richer than the Scikit-learn’s LinearRegression class? You decide.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Add syntactic sugar by creating grouped utilities
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have inherited other classes, they behave just like the usual Python
    module you are familiar with. So, you can add utility methods to the main class
    to execute multiple methods from a sub-class together.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: For example, the following method runs all the usual diagnostics checks at once.
    Note how we are accessing the plot methods by putting a simple **.DOT** i.e. `Diagnostics_plot.histogram_resid`.
    Just like accessing a function from Pandas or NumPy library!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/5d7eb84d02341a5bb80965d32df8a8bb.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: '`run_diagnostics` method in the main class'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: With this, we can run all the diagnostics with a single line of code after fitting
    data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/84ee9de902da24ad8cfd0c739fc0275e.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: Similarly, you can add all the outlier plots in a single utility method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Modularization — import the class as a module
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although not a canonical OOP principle, the essential advantage of following
    the OOP paradigm is to [**be able to modularize your code**](https://atomicobject.com/resources/oo-programming/encapsulation-modularity).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: You can experiment and develop all this code in a standard Jupyter notebook.
    But for maximum modularity, consider converting the Notebook into a standalone
    executable Python script (with a .py extension). As a good practice, remove all
    the unnecessary comments and test code from this file and keep only the classes
    together.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '[**Here is the link to the script**](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/OOP_in_ML/Class_MyLinearRegression.py) I
    put together for this article.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Once you do that, you can import the `MyLinearRgression` class from a completely
    different Notebook. This is often the **preferred way of testing your code** as
    this does not touch the core model but only tests it with various data samples
    and functional parameters.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8abefd0c466c96cfb71776b25f19d539.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
- en: At this point, you can consider putting this Python script on a Github, creating
    a Setup.py file, creating the proper directory structure, and [releasing it as
    a standalone linear regression package](https://towardsdatascience.com/build-your-first-open-source-python-project-53471c9942a7) which
    does fitting, prediction, plotting, diagnostics, and more.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Of course, you have to add a lot of [docstring description](https://www.geeksforgeeks.org/python-docstrings/),
    examples of usage of a function, [assertion checks](https://airbrake.io/blog/python-exception-handling/python-assertionerror),
    and [unit tests](http://softwaretestingfundamentals.com/unit-testing/) to make
    it a good package.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: But as a data scientist, now you have added a significant skill to your repertoire
    - software development following OOP principles.
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It was not so difficult, was it?
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Epilogue
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Motivation and related articles
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To write this post, I was inspired by [this fantastic article](https://dziganto.github.io/classes/data%20science/linear%20regression/machine%20learning/object-oriented%20programming/python/Understanding-Object-Oriented-Programming-Through-Machine-Learning/),
    which drills down to the concept of OOP in Python in more detail with a context
    of machine learning.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**[Understanding Object-Oriented Programming Through Machine Learning](https://dziganto.github.io/classes/data%20science/linear%20regression/machine%20learning/object-oriented%20programming/python/Understanding-Object-Oriented-Programming-Through-Machine-Learning/?source=post_page-----7da416751f64----------------------)**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Object-Oriented Programming (OOP) is not easy to wrap your head around. You
    can read tutorial after tutorial and sift…
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: I wrote a similar article, touching even more basic approaches, in the context
    of deep learning. Check it out here,
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '**[How a simple mix of object-oriented programming can sharpen your deep learning
    prototype](https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd?source=post_page-----7da416751f64----------------------)**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: By mixing simple concepts of object-oriented programming, like functionalization
    and class inheritance, you can add…
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Courses?
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I tried to look for relevant courses and found little if you are using Python.
    Most software engineering courses out there are taught using Java. Here are two
    which may be of help,
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[Software engineering for data scientists in Python](https://www.datacamp.com/courses/software-engineering-for-data-scientists-in-python)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python classes and inheritance](https://www.coursera.org/learn/python-classes-inheritance/)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com).
    Also, you can check the author’s GitHub repositoriesfor other fun code snippets
    in Python, R, or MATLAB and machine learning resources. If you are, like me, passionate
    about machine learning/data science, please feel free to [add me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/) or [follow
    me on Twitter.](https://twitter.com/tirthajyotiS)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/object-oriented-programming-for-data-scientists-build-your-ml-estimator-7da416751f64).
    Reposted with permission.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[How a simple mix of object-oriented programming can sharpen your deep learning
    prototype](/2019/08/simple-mix-object-oriented-programming-sharpen-deep-learning-prototype.html)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mathematical programming —  Key Habit to Build Up for Advancing Data Science](/2019/05/mathematical-programming-key-habit-advancing-data-science.html)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimization with Python: How to make the most amount of money with the least
    amount of risk?](/2019/06/optimization-python-money-risk.html)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立一个稳固的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
