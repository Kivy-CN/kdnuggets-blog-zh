- en: How to Use Python’s datetime
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 Python 的 datetime
- en: 原文：[https://www.kdnuggets.com/2019/06/how-use-datetime.html](https://www.kdnuggets.com/2019/06/how-use-datetime.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/06/how-use-datetime.html](https://www.kdnuggets.com/2019/06/how-use-datetime.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: For video narration and slides, as well as other data processing tutorials,
    visit the [Data Munging Tips and Tricks](https://end-to-end-machine-learning.teachable.com/p/data-munging-tips-and-tricks/) course
    page. It's free.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有关视频讲解和幻灯片，以及其他数据处理教程，请访问 [数据处理技巧与窍门](https://end-to-end-machine-learning.teachable.com/p/data-munging-tips-and-tricks/)
    课程页面。该课程免费提供。
- en: Wrangling dates and times in python
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Python 中处理日期和时间
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你在 IT 方面的组织'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[Python''s datetime package](https://docs.python.org/3/library/datetime.html) is
    a convenient set of tools for working with dates and times. With just the five
    tricks that I’m about to show you, you can handle most of your datetime processing
    needs.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python 的 datetime 包](https://docs.python.org/3/library/datetime.html) 是一个处理日期和时间的便捷工具集。通过我即将展示的五个技巧，你可以处理大多数的
    datetime 处理需求。'
- en: Before jumping in, it’s helpful to look at how datetime is put together. The
    fundamental building block is a datetime object. Not surprisingly, this is a combination
    of a date object and a time object. A date object is just a set of values for
    the year, the month, the day, and a collection of functions that knows how to
    handle them. A time object is structured in a similar way. It has values for the
    hour, the minute, the second, the microsecond, and the time zone. Any time can
    be represented by choosing these values appropriately.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解之前，了解 datetime 是如何组合在一起的会很有帮助。基本的构建块是一个 datetime 对象。不出所料，它是日期对象和时间对象的组合。日期对象仅是一组年、月、日的值，以及一组处理这些值的函数。时间对象的结构类似。它有小时、分钟、秒、微秒和时区的值。任何时间都可以通过适当地选择这些值来表示。
- en: '![](../Images/5350fa6b7fc2d13b7fbf4e4129e7bf56.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5350fa6b7fc2d13b7fbf4e4129e7bf56.png)'
- en: 1. **combine()**
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. **combine()**
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first trick for working with datetimes is to be able to create them by combining
    date and time objects. We start by creating a time, passing it the hour of 7 and
    the minute 0\. This represents 7 o’clock. Because we didn’t supply the second
    or the microsecond, these are assumed to be zero. Then we create a date by passing
    the year, month, and day.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 datetimes 的第一个技巧是通过组合日期和时间对象来创建它们。我们首先创建一个时间，传递小时 7 和分钟 0。这表示 7 点。因为我们没有提供秒或微秒，这些默认为零。然后我们通过传递年、月和日来创建一个日期。
- en: Creating a datetime is straightforward. We use the **combine()** function, and
    pass it the date object and the time object that we want to build our datetime
    out of.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 datetime 非常简单。我们使用 **combine()** 函数，并传递我们想要构建 datetime 的日期对象和时间对象。
- en: Because of the naming convention, calls to datetime can be confusing. Datetime
    is the name of the package, a module within the package, and the object. So when
    we combine our date and time, we call it with the apparently redundant **datetime.datetime** prefix.
    The first **datetime** references the package, the second **datetime** references
    the module, and **combine()** is a function within that module.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于命名约定，调用 datetime 可能会让人困惑。Datetime 是包名、包内的模块以及对象的名称。因此，当我们组合日期和时间时，我们用看似冗余的
    **datetime.datetime** 前缀来调用它。第一个 **datetime** 代表包，第二个 **datetime** 代表模块，**combine()**
    是该模块中的一个函数。
- en: 2\. timedelta
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. timedelta
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The second trick for using datetimes is a type called timedelta. This represents
    the difference between two datetimes. A timedelta has just three values: days,
    seconds and microseconds. The difference between any two datetimes can be uniquely
    represented in this way.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用日期时间的第二个技巧是称为timedelta的类型。这表示两个日期时间之间的差异。一个timedelta只有三个值：天、秒和微秒。两个日期时间之间的差异可以以这种方式唯一表示。
- en: Timedeltas are incredibly useful because they allow us to do simple addition
    and subtraction arithmetic on datetimes. They remove the need to think about things
    like how many days are in a month, how many seconds are in a day, and leap years.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: timedelta非常有用，因为它们允许我们对日期时间进行简单的加减法运算。它们免去了考虑一个月有多少天、一天有多少秒和闰年的需要。
- en: 3\. Timestamps
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 时间戳
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The third trick for getting the most out of datetimes is the use of timestamps.
    Working in days, hours, minutes, and seconds is awkward for computers. There are
    rules and corner cases to check. In order to make dates and times easier to work
    with, the notion of a [UNIX epoch](https://en.wikipedia.org/wiki/Unix_time) was
    created. This is the number of seconds that have passed since 12:00 AM, January
    1, 1970 in [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) (the
    UTC +0 time zone). This allows any date and time to be represented by a single,
    commonly interpretable, floating point number. The only drawback is that it is
    not intuitive to a human reader. The functions **timestamp()** and **fromtimestamp()** allow
    our human-interpretable datetime object to be converted to and from a UNIX epoch
    for ease of computation.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 获取日期时间最大效用的第三个技巧是使用时间戳。以天、小时、分钟和秒为单位对计算机来说很笨重。需要检查规则和边角情况。为了使日期和时间更易于处理，创建了[UNIX纪元](https://en.wikipedia.org/wiki/Unix_time)这一概念。这是自1970年1月1日12:00
    AM以来经过的秒数，使用[协调世界时](https://en.wikipedia.org/wiki/Coordinated_Universal_Time)（UTC
    +0时区）。这允许任何日期和时间被表示为一个单一的、常见可解释的浮点数。唯一的缺点是对人类读者而言并不直观。**timestamp()** 和 **fromtimestamp()**
    函数允许将我们人类可解释的日期时间对象转换为UNIX纪元，以便于计算。
- en: 4\. weekday()
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. weekday()
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Trick number four in our bag is the **weekday()** function. For any given date,
    it calculates the day of the week. To use it, call the **date()** function on
    your datetime. This isolates the date object, and ignores the time portion. And
    then call its **weekday()** function. This returns a number from 0 to 6, where
    is zero is Monday, one is Tuesday, etc., and six is Sunday. It handles all of
    the quirks of keeping track of days of the week so that you don’t have to.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们包中的第四个技巧是**weekday()**函数。对于任何给定的日期，它计算星期几。要使用它，请在你的日期时间上调用**date()**函数。这将隔离日期对象，并忽略时间部分。然后调用它的**weekday()**函数。它返回一个从0到6的数字，其中0是星期一，1是星期二，以此类推，6是星期日。它处理所有跟踪星期几的特殊情况，使你无需操心。
- en: 5\. Date strings
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 日期字符串
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Finally, we come to trick number five, which is converting a date to and from
    a string. This is particularly helpful when we are ingesting data from a text
    file, and want to turn text dates into datetime objects. It is also helpful when
    we want to expose our datetime object to a user, or export it to a text file.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们来到第五个技巧，即将日期转换为字符串或从字符串转换。这在我们从文本文件中获取数据，并想将文本日期转换为日期时间对象时特别有用。它在我们想向用户展示日期时间对象或将其导出到文本文件时也很有用。
- en: To do this, we use the **strptime()** and **strftime()** functions. When making
    a conversion in either direction, we have to supply a string that specifies the
    format. In this code snippet, '%Y' represents the year, '%m' the two digit month,
    and '%d' the two digit day.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们使用**strptime()**和**strftime()**函数。在进行任一方向的转换时，我们必须提供一个指定格式的字符串。在这个代码片段中，'%Y'表示年份，'%m'表示两位数的月份，'%d'表示两位数的日期。
- en: 'As a side note, there is actually one correct way to represent years, months,
    and days in dates: ''YYYY-MM-DD''. (An international standard, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
    established this in 1988.) In this format, for example, July 31, 2018 would be
    ''2018-07-31''. I highly recommend whenever you are given the choice to format
    your dates in this way for ease of interpretability and compatibility. However,
    be warned that there exist a multitude of a date formats in the wild. Be prepared
    to perform some twisted conversions in order to get all of the data you ingest
    into that format.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，实际上表示年份、月份和日期的正确方式是：'YYYY-MM-DD'。（这是1988年制定的国际标准，[ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)）。例如，2018年7月31日将表示为'2018-07-31'。我强烈建议你在有选择时以这种格式来格式化日期，以便于解释和兼容性。然而，要注意在实际使用中存在多种日期格式。准备好进行一些复杂的转换，以便将你获取的数据转换为这种格式。
- en: So now you are armed with the five most useful datetime tricks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了五个最有用的日期时间技巧。
- en: '**combine()**'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**combine()**'
- en: timedelta,
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: timedelta，
- en: converting to and from time stamps,
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 时间戳之间的转换，
- en: '**weekday()**, and'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**weekday()**，以及'
- en: string formatting.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串格式化。
- en: With these in your toolbox you're 90% of the way toward solving all of the date
    and time challenges in your next python project. Good luck and may it serve you
    well.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些工具，你已经完成了解决下一个Python项目中90%日期和时间挑战的工作。祝好运，希望它对你有所帮助。
- en: '[Original](https://brohrer.github.io/datetime_tricks.html). Reposted with permission.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始版本](https://brohrer.github.io/datetime_tricks.html)。经授权转载。'
- en: '**Related:**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Pandas DataFrame Indexing](/2019/04/pandas-dataframe-indexing.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pandas数据框索引](/2019/04/pandas-dataframe-indexing.html)'
- en: '[PyCharm for Data Scientists](/2019/05/pycharm-data-scientists.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyCharm为数据科学家量身定制](/2019/05/pycharm-data-scientists.html)'
- en: '[How (not) to use Machine Learning for time series forecasting: Avoiding the
    pitfalls](/2019/05/machine-learning-time-series-forecasting.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何（不）使用机器学习进行时间序列预测：避免陷阱](/2019/05/machine-learning-time-series-forecasting.html)'
- en: More On This Topic
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该知道的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[How to Use Python and Machine Learning to Predict Football Match Winners](https://www.kdnuggets.com/2023/01/python-machine-learning-predict-football-match-winners.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用Python和机器学习预测足球比赛胜者](https://www.kdnuggets.com/2023/01/python-machine-learning-predict-football-match-winners.html)'
- en: '[Learning How to Use ChatGPT to Learn Python (or anything else)](https://www.kdnuggets.com/2023/02/learn-python-chatgpt.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习如何使用ChatGPT学习Python（或其他任何东西）](https://www.kdnuggets.com/2023/02/learn-python-chatgpt.html)'
- en: '[How (Not) To Use Python''s Walrus Operator](https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何（不）使用Python的海象运算符](https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator)'
- en: '[Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止在数据科学项目中硬编码 - 使用配置文件代替](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
- en: '[Here Are the AI Tools I Use Along With My Skills to Make $10,000…](https://www.kdnuggets.com/2023/07/ai-tools-along-skills-make-10000-monthly-bs.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[这里是我使用的AI工具和技能来赚取$10,000的方式…](https://www.kdnuggets.com/2023/07/ai-tools-along-skills-make-10000-monthly-bs.html)'
