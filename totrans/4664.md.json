["```py\n\nx1 = df.loc[df['Recommended IND'] == 1, 'polarity']\nx0 = df.loc[df['Recommended IND'] == 0, 'polarity']\n\ntrace1 = go.Histogram(\n    x=x0, name='Not recommended',\n    opacity=0.75\n)\ntrace2 = go.Histogram(\n    x=x1, name = 'Recommended',\n    opacity=0.75\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay', title='Distribution of Sentiment polarity of reviews based on Recommendation')\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig, filename='overlaid histogram')\n\n```", "```py\n\nx1 = df.loc[df['Recommended IND'] == 1, 'Rating']\nx0 = df.loc[df['Recommended IND'] == 0, 'Rating']\n\ntrace1 = go.Histogram(\n    x=x0, name='Not recommended',\n    opacity=0.75\n)\ntrace2 = go.Histogram(\n    x=x1, name = 'Recommended',\n    opacity=0.75\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay', title='Distribution of Sentiment polarity of reviews based on Recommendation')\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig, filename='overlaid histogram')\n\n```", "```py\n\nx1 = df.loc[df['Recommended IND'] == 1, 'review_len']\nx0 = df.loc[df['Recommended IND'] == 0, 'review_len']\n\ntrace1 = go.Histogram(\n    x=x0, name='Not recommended',\n    opacity=0.75\n)\ntrace2 = go.Histogram(\n    x=x1, name = 'Recommended',\n    opacity=0.75\n)\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = 'group', title='Distribution of Review Lengths Based on Recommendation')\nfig = go.Figure(data=data, layout=layout)\n\niplot(fig, filename='stacked histogram')\n\n```", "```py\n\ntrace1 = go.Scatter(\n    x=df['polarity'], y=df['Rating'], mode='markers', name='points',\n    marker=dict(color='rgb(102,0,0)', size=2, opacity=0.4)\n)\ntrace2 = go.Histogram2dContour(\n    x=df['polarity'], y=df['Rating'], name='density', ncontours=20,\n    colorscale='Hot', reversescale=True, showscale=False\n)\ntrace3 = go.Histogram(\n    x=df['polarity'], name='Sentiment polarity density',\n    marker=dict(color='rgb(102,0,0)'),\n    yaxis='y2'\n)\ntrace4 = go.Histogram(\n    y=df['Rating'], name='Rating density', marker=dict(color='rgb(102,0,0)'),\n    xaxis='x2'\n)\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    showlegend=False,\n    autosize=False,\n    width=600,\n    height=550,\n    xaxis=dict(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(\n        t=50\n    ),\n    hovermode='closest',\n    bargap=0,\n    xaxis2=dict(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis2=dict(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='2dhistogram-2d-density-plot-subplots')\n\n```", "```py\n\ntrace1 = go.Scatter(\n    x=df['Age'], y=df['polarity'], mode='markers', name='points',\n    marker=dict(color='rgb(102,0,0)', size=2, opacity=0.4)\n)\ntrace2 = go.Histogram2dContour(\n    x=df['Age'], y=df['polarity'], name='density', ncontours=20,\n    colorscale='Hot', reversescale=True, showscale=False\n)\ntrace3 = go.Histogram(\n    x=df['Age'], name='Age density',\n    marker=dict(color='rgb(102,0,0)'),\n    yaxis='y2'\n)\ntrace4 = go.Histogram(\n    y=df['polarity'], name='Sentiment Polarity density', marker=dict(color='rgb(102,0,0)'),\n    xaxis='x2'\n)\ndata = [trace1, trace2, trace3, trace4]\n\nlayout = go.Layout(\n    showlegend=False,\n    autosize=False,\n    width=600,\n    height=550,\n    xaxis=dict(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis=dict(\n        domain=[0, 0.85],\n        showgrid=False,\n        zeroline=False\n    ),\n    margin=dict(\n        t=50\n    ),\n    hovermode='closest',\n    bargap=0,\n    xaxis2=dict(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    ),\n    yaxis2=dict(\n        domain=[0.85, 1],\n        showgrid=False,\n        zeroline=False\n    )\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, filename='2dhistogram-2d-density-plot-subplots')\n\n```", "```py\n\ncorpus = st.CorpusFromPandas(df, category_col='Department Name', text_col='Review Text', nlp=nlp).build()\nprint(list(corpus.get_scaled_f_scores_vs_background().index[:10]))\n```", "```py\n\nterm_freq_df = corpus.get_term_freq_df()\nterm_freq_df['Tops Score'] = corpus.get_scaled_f_scores('Tops')\npprint(list(term_freq_df.sort_values(by='Tops Score', ascending=False).index[:10]))\n\n```", "```py\nterm_freq_df['Dresses Score'] = corpus.get_scaled_f_scores('Dresses')\npprint(list(term_freq_df.sort_values(by='Dresses Score', ascending=False).index[:10]))\n```", "```py\n\nreindexed_data = df['Review Text']\ntfidf_vectorizer = TfidfVectorizer(stop_words='english', use_idf=True, smooth_idf=True)\nreindexed_data = reindexed_data.values\ndocument_term_matrix = tfidf_vectorizer.fit_transform(reindexed_data)\nn_topics = 6\nlsa_model = TruncatedSVD(n_components=n_topics)\nlsa_topic_matrix = lsa_model.fit_transform(document_term_matrix)\n\ndef get_keys(topic_matrix):\n    '''\n    returns an integer list of predicted topic \n    categories for a given topic matrix\n    '''\n    keys = topic_matrix.argmax(axis=1).tolist()\n    return keys\n\ndef keys_to_counts(keys):\n    '''\n    returns a tuple of topic categories and their \n    accompanying magnitudes for a given list of keys\n    '''\n    count_pairs = Counter(keys).items()\n    categories = [pair[0] for pair in count_pairs]\n    counts = [pair[1] for pair in count_pairs]\n    return (categories, counts)\n\nlsa_keys = get_keys(lsa_topic_matrix)\nlsa_categories, lsa_counts = keys_to_counts(lsa_keys)\n\ndef get_top_n_words(n, keys, document_term_matrix, tfidf_vectorizer):\n    '''\n    returns a list of n_topic strings, where each string contains the n most common \n    words in a predicted category, in order\n    '''\n    top_word_indices = []\n    for topic in range(n_topics):\n        temp_vector_sum = 0\n        for i in range(len(keys)):\n            if keys[i] == topic:\n                temp_vector_sum += document_term_matrix[i]\n        temp_vector_sum = temp_vector_sum.toarray()\n        top_n_word_indices = np.flip(np.argsort(temp_vector_sum)[0][-n:],0)\n        top_word_indices.append(top_n_word_indices)   \n    top_words = []\n    for topic in top_word_indices:\n        topic_words = []\n        for index in topic:\n            temp_word_vector = np.zeros((1,document_term_matrix.shape[1]))\n            temp_word_vector[:,index] = 1\n            the_word = tfidf_vectorizer.inverse_transform(temp_word_vector)[0][0]\n            topic_words.append(the_word.encode('ascii').decode('utf-8'))\n        top_words.append(\" \".join(topic_words))         \n    return top_words\n\n    top_n_words_lsa = get_top_n_words(3, lsa_keys, document_term_matrix, tfidf_vectorizer)\n\nfor i in range(len(top_n_words_lsa)):\nprint(\"Topic {}: \".format(i+1), top_n_words_lsa[i])\n\n```", "```py\n\ntop_3_words = get_top_n_words(3, lsa_keys, document_term_matrix, tfidf_vectorizer)\nlabels = ['Topic {}: \\n'.format(i) + top_3_words[i] for i in lsa_categories]\n\nfig, ax = plt.subplots(figsize=(16,8))\nax.bar(lsa_categories, lsa_counts);\nax.set_xticks(lsa_categories);\nax.set_xticklabels(labels);\nax.set_ylabel('Number of review text');\nax.set_title('LSA topic counts');\nplt.show();\n\n```"]