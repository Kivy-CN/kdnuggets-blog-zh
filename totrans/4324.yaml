- en: How to Deploy a Flask API in Kubernetes and Connect it with Other Micro-services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Kubernetes 中部署 Flask API 并将其与其他微服务连接
- en: 原文：[https://www.kdnuggets.com/2021/02/deploy-flask-api-kubernetes-connect-micro-services.html](https://www.kdnuggets.com/2021/02/deploy-flask-api-kubernetes-connect-micro-services.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/02/deploy-flask-api-kubernetes-connect-micro-services.html](https://www.kdnuggets.com/2021/02/deploy-flask-api-kubernetes-connect-micro-services.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By Rik Kraan, Vantage AI**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：Rik Kraan, Vantage AI**'
- en: 'Kubernetes is a powerful container orchestration tool that automates deployment
    and management of [containers](https://www.docker.com/resources/what-container).
    If you have a simple lightweight application that exists of one service, don’t
    bother using Kubernetes. Kubernetes’ benefits emerge if your application has a [micro-service](https://microservices.io/) architecture
    with several components working together. It is a ‘open-source system for automating
    deployment, scaling and management of containerized applications and comes with
    several benefits including:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 是一个强大的容器编排工具，自动化部署和管理[容器](https://www.docker.com/resources/what-container)。如果你有一个由单一服务组成的简单轻量级应用程序，不必使用
    Kubernetes。Kubernetes 的好处在于你的应用程序具有[微服务](https://microservices.io/)架构，多个组件协同工作时才会显现。它是一个“开源系统，用于自动化部署、扩展和管理容器化应用程序，并提供多个好处，包括：
- en: Easy (auto-)scaling based on demand
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于需求的简单（自动）扩展
- en: Ways to make your application fault tolerant by distributing workloads in a
    way that it will remain functional in case of partial failure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过以分布式工作负载的方式使应用程序具有容错能力，从而在部分故障的情况下保持功能
- en: Automated health-checks and self-healing processes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化健康检查和自我修复过程
- en: Taking care of the communication between your micro-services and balancing incoming
    traffic evenly over all your resources
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理微服务之间的通信，并将传入流量均匀地分配到所有资源上
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速入门网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT 需求'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Starting with Kubernetes may seem daunting at first, but if you grasp the main
    concepts of it and play around with the excellent tutorials on the [official website](https://www.kubernets.io/),
    you can get started fairly easily.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Kubernetes 可能会让人感到畏惧，但如果你掌握它的主要概念，并通过[官方网页](https://www.kubernets.io/)上的优秀教程进行尝试，你可以相对轻松地入门。
- en: 'In this blog I will:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本博客中，我将：
- en: Provide a quick overview of the main concepts of Kubernetes
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供 Kubernetes 主要概念的快速概述
- en: Demonstrate how to start your own local cluster
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 演示如何启动自己的本地集群
- en: Deploy a MySQL database on your cluster
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在集群上部署 MySQL 数据库
- en: Set up an Flask app that functions as REST API to communicate with the database
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个 Flask 应用程序，该应用程序充当 REST API 以与数据库进行通信
- en: '![Figure](../Images/820257ddf06ce4520b4c58d413e65d86.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/820257ddf06ce4520b4c58d413e65d86.png)'
- en: Network. Photo by [Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/network?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 网络。照片由[Alina Grubnyak](https://unsplash.com/@alinnnaaaa?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，来源于[Unsplash](https://unsplash.com/s/photos/network?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: '**Kubernetes basics**'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**Kubernetes 基础**'
- en: In this section I will cover the basics of Kubernetes without too many details;
    feel free to dive deeper by reading the official documentation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我将涵盖 Kubernetes 的基础知识，而不会过多涉及细节；你可以通过阅读官方文档深入了解。
- en: A Kubernetes cluster consists of a **master **and one or more **worker nodes. **This
    architecture is one of the main features of Kubernetes. As you will see, your
    micro-services are distributed over different nodes so they will remain healthy
    if one of the worker nodes fails. The **master** is responsible for managing the
    cluster and exposes the API via which you can communicate with your cluster. By
    default, **worker nodes** come with a few components including some pre-installed
    software that enables running containers of popular container services as *Docker* and *containerd.*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes集群由一个**主节点**和一个或多个**工作节点**组成。这种架构是Kubernetes的主要特点之一。正如你所见，你的微服务分布在不同的节点上，因此即使一个工作节点发生故障，它们也会保持健康。**主节点**负责管理集群，并通过API与集群进行通信。默认情况下，**工作节点**配备了一些组件，包括预装的软件，这些软件支持运行流行容器服务如*Docker*和*containerd*。
- en: Three main concepts are essential to deploy your own applications on a Kubernetes
    cluster: *Deployments, Pods and Services.*
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 部署你自己应用程序到Kubernetes集群的三个主要概念是：*Deployments*、*Pods* 和 *Services*。
- en: A *Deployment* is a set of instructions provided to the **master **on how to
    create and update your application. With these instructions the **master **will
    schedule and run your application on individual **worker nodes**. The deployment
    is continuously monitored by the **master**. If one of the instances of your applications
    goes down (e.g. if a **worker node **goes down), it will be automatically replaced
    by a new instance.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*Deployment*是一组提供给**主节点**的指令，用于创建和更新你的应用程序。根据这些指令，**主节点**将会在各个**工作节点**上调度和运行你的应用程序。**主节点**会持续监控部署情况。如果你的应用程序的一个实例出现故障（例如，如果一个**工作节点**出现故障），它将被自动替换为一个新的实例。
- en: '![Figure](../Images/8656266b082e8bb64801145fb1288179.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/8656266b082e8bb64801145fb1288179.png)'
- en: Kubernetes cluster with a deployment (source: [https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-intro/](https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-intro/))
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 带有部署的Kubernetes集群（来源：[https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-intro/](https://kubernetes.io/docs/tutorials/kubernetes-basics/deploy-app/deploy-intro/)）
- en: A *Pod *is the atomic unit within the Kubernetes platform. It represents a group
    of one or more containers and some shared resources for those containers (shared
    storage, a unique cluster IP address etc.). If you create a *deployment*, this
    deployment will create *pods* with containers inside them. Each *pod *is bound
    to a **worker node**. It is essential to understand that a **worker node** can
    have multiple *pods, *and all these pods will be rebuild on a different available **worker
    node** if the current **worker node** fails.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*Pod*是Kubernetes平台中的原子单元。它代表一个或多个容器以及这些容器的一些共享资源（共享存储、唯一的集群IP地址等）。如果你创建一个*deployment*，这个部署将创建包含容器的*pods*。每个*pod*都绑定到一个**工作节点**。需要理解的是，一个**工作节点**可以有多个*pods*，如果当前的**工作节点**出现故障，这些pods将会在另一个可用的**工作节点**上重新构建。
- en: '![Figure](../Images/2483f4d875e15cb72d63ea23737eda68.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/2483f4d875e15cb72d63ea23737eda68.png)'
- en: Overview of a **worker node** with several pods (source: [https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-intro/](https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-intro/))
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作节点**概述，包含多个pods（来源：[https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-intro/](https://kubernetes.io/docs/tutorials/kubernetes-basics/explore/explore-intro/)）'
- en: A *service* basically defines a logical set of *pods* and defines a policy on
    how to access them. This is necessary as* pods *can go down and be restarted (e.g.
    if a **worker node** is deleted or crashes). A *service *routes traffic across
    a set of pods and allow pods to die and replicate without impacting your application.
    When defining a service, you can specify the type of the service. By default Kubernetes
    creates a ClusterIP service, which makes your *service* only accessible from inside
    the cluster. You may want to expose some of your *services* (e.g. frontends) to
    the outside world. In this case you can create a *LoadBalancer* service, which
    creates an external load balancer and assigns a fixed external IP to it, so it
    can be accessed from outside the cluster (for example in your browser).
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 *服务* 基本上定义了一组 *pods* 的逻辑集合，并定义了访问它们的策略。这是必要的，因为 *pods* 可能会崩溃并重新启动（例如，如果一个
    **工作节点** 被删除或崩溃）。一个 *服务* 将流量路由到一组 pods，并允许 pods 失败和复制而不会影响你的应用程序。在定义服务时，你可以指定服务的类型。默认情况下，Kubernetes
    创建一个 ClusterIP 服务，这使得你的 *服务* 仅能在集群内部访问。你可能希望将一些 *服务*（例如前端）暴露给外部世界。在这种情况下，你可以创建一个
    *LoadBalancer* 服务，它会创建一个外部负载均衡器，并分配一个固定的外部 IP 地址，使其可以从集群外部访问（例如在你的浏览器中）。
- en: '![Figure](../Images/854f352441eedb040b9ea341f26ca329.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/854f352441eedb040b9ea341f26ca329.png)'
- en: A cluster with 3 **worker nodes**, several pods and two services (A & B) tying
    pods together (source: [https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/](https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/))
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含 3 个 **工作节点**、多个 pods 和两个服务（A 和 B）将 pods 连接在一起的集群（来源：[https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/](https://kubernetes.io/docs/tutorials/kubernetes-basics/expose/expose-intro/)）
- en: '**Getting started with your own cluster**'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**开始使用自己的集群**'
- en: 'If you want to get your cluster to work quickly: all the code in this blog
    (and an explanatory Readme) can be found [here](https://github.com/RikKraanVantage/kubernetes-flask-mysql).
    The application we will build consists of two micro-services:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想快速启动你的集群：本博客中的所有代码（以及说明性 Readme）可以在 [这里](https://github.com/RikKraanVantage/kubernetes-flask-mysql)
    找到。我们将构建的应用程序包括两个微服务：
- en: a MySQL database
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 MySQL 数据库
- en: a Flask app that implements an API to access and perform CRUD (create, read,
    update delete) operations on the database.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个 Flask 应用程序，它实现了一个 API 用于访问和执行对数据库的 CRUD（创建、读取、更新、删除）操作。
- en: '**Prerequisites**: *Have *`*kubectl*`*and *`*minikube*`* installed (*[*https://kubernetes.io/docs/tasks/tools/*](https://kubernetes.io/docs/tasks/tools/)*).
    And make sure your *Docker CLI *uses the *Docker deamon *in your cluster via the
    command *`*eval $(minikube docker-env)*`*. No worries: if you restart your terminal
    you will automatically use your own *Docker daemon *again. Finally start your
    local cluster via the command *`*minikube start*`*.*'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**前提条件**：*安装* `*kubectl*` *和* `*minikube*` *（*[*https://kubernetes.io/docs/tasks/tools/*](https://kubernetes.io/docs/tasks/tools/)*）。并确保你的
    *Docker CLI* 通过命令 *`*eval $(minikube docker-env)*`* 使用集群中的 *Docker 守护进程*。不用担心：如果你重启终端，你会自动再次使用自己的
    *Docker 守护进程*。最后，通过命令 *`*minikube start*`* 启动你的本地集群。'
- en: 'First things first: when setting up a MySQL database we need to take into account
    two things. 1) To access the database we need some credentials configured and
    2) we will need a persistent volume for the database so we will not lose all our
    data if the nodes will accidentally be taken down.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，设置 MySQL 数据库时需要考虑两件事。1）访问数据库需要配置一些凭证；2）我们需要一个持久卷来存储数据库数据，以免节点意外下线时丢失所有数据。
- en: '**Creating secrets**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**创建秘密**'
- en: Kubernetes has it’s own method of dealing with your sensitive information by
    configuring Kubernetes *Secrets.* This can be done with a simple YAML file. These *secrets* can
    be accessed by any *pod* in your cluster by specifying environment variables (which
    we will see later on). *Secrets* should be specified as **base64-encoded** strings.
    So first we have to get the encoded version of your password via your terminal: `echo
    -n <super-secret-passwod> | base64`. Copy the output and embed it in the following
    *secrets.yml* file at the `db_root_password` field. The *metadata.name* field
    is important as we have to specify this in a later stage, so be sure to remember
    it
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Kubernetes 有自己处理敏感信息的方法，即通过配置 Kubernetes *Secrets*。这可以通过一个简单的 YAML 文件完成。这些 *秘密*
    可以通过指定环境变量（我们稍后会看到）被集群中的任何 *pod* 访问。*Secrets* 应该以 **base64 编码** 的字符串形式指定。因此，首先我们需要通过终端获取密码的编码版本：`echo
    -n <super-secret-passwod> | base64`。复制输出并将其嵌入到以下 *secrets.yml* 文件的 `db_root_password`
    字段中。*metadata.name* 字段很重要，因为我们需要在后续阶段指定这个字段，所以一定要记住它。
- en: You can now add the secrets to your cluster via your terminal: `kubectl apply
    -f secrets.yml` . And see if it worked by checking the secrets via `kubectl get
    secrets.`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过终端将秘密添加到你的集群中：`kubectl apply -f secrets.yml`。然后通过 `kubectl get secrets`
    检查是否成功。
- en: '**Persistent volume**'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**持久卷**'
- en: A persistent volume is a storage resource with a lifecycle independent of a *Pod*.
    This means that the storage will persist if a *pod* goes down. As Kubernetes has
    the permission to restart *pods* at any time, it is a good practice to set your
    database storage to a *persistent volume*. A *persistent volume* can be a directory
    on your local filesystem, but also a storage service of a cloud provider (for
    example AWS Elastic Block Storage or Azure Disk). The type of the *persistent
    volume* can be specified when creating the *persistent* *volume.* For this tutorial
    you will use a *hostPath* type, which will create a volume on your *minikube* node.
    However, make sure to use another type ([see the documentation](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes))
    in a production environment as your data will be lost if you delete your minikube
    node when using a *hostPath* type.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 持久卷是一个存储资源，其生命周期独立于 *Pod*。这意味着如果一个 *pod* 宕机，存储仍会保留。由于 Kubernetes 有权限随时重启 *pods*，因此将数据库存储设置为 *persistent
    volume* 是一个良好的实践。持久卷可以是本地文件系统上的目录，也可以是云提供商的存储服务（例如 AWS Elastic Block Storage 或
    Azure Disk）。创建持久卷时可以指定持久卷的类型。在本教程中，你将使用 *hostPath* 类型，这将在你的 *minikube* 节点上创建一个卷。然而，在生产环境中确保使用其他类型（[查看文档](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes)），因为如果你在使用
    *hostPath* 类型时删除了 minikube 节点，数据将会丢失。
- en: 'Making your application use a *persistent volume* exists of two parts:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使你的应用程序使用 *persistent volume* 包含两个部分：
- en: Specifying the actual storage type, location, size and properties of the *volume*.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定实际的存储类型、位置、大小和 *volume* 的属性。
- en: Specify a *persistent volume claim* that requests a specific size and access
    modes of the persistent volume for your deployments.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定一个 *persistent volume claim* 来请求一个特定大小和访问模式的持久卷用于你的部署。
- en: Create a *persistent-volume.yml* file and specify the size (in this example
    2GB), access modes and the path the files will be stored. The `spec.persistentVolumeReclaimPolicy` specifies
    what should be done if the *persistent volume claim*is deleted. In the case of
    a stateful application like the *MySQL* database, you want to retain the data
    if the claim is deleted, so you can manually retrieve or backup the data. The
    default reclaim policy is inherited from the type of *persistent volume, *so it
    is good practice to always specify it in the yml file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个 *persistent-volume.yml* 文件，并指定大小（在本示例中为 2GB）、访问模式和文件存储的路径。`spec.persistentVolumeReclaimPolicy`
    指定了如果 *persistent volume claim* 被删除时应该采取的措施。对于像 *MySQL* 数据库这样的有状态应用程序，如果声明被删除，你会希望保留数据，以便你可以手动检索或备份数据。默认的回收策略继承自持久卷的类型，因此在
    yml 文件中始终指定它是一个良好的实践。
- en: Again you can add the storage via `kubectl apply -f persistent-volume.yml` .
    And see if the details of your created resources via `kubectl describe pv mysql-pv-volume` and `kubectl
    describe pvc mysql-pv-claim`. As you made a hostPath type *persistent volume*,
    you can find the data by logging into the minikube node `minikube ssh `and navigate
    to the spcified path (`/mnt/data`).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 `kubectl apply -f persistent-volume.yml` 再次添加存储。然后，通过 `kubectl describe
    pv mysql-pv-volume` 和 `kubectl describe pvc mysql-pv-claim` 查看你创建的资源的详细信息。由于你创建了一个
    *hostPath* 类型的持久卷，你可以通过登录到 minikube 节点 `minikube ssh` 并导航到指定路径（`/mnt/data`）来查找数据。
- en: '**Deploy the MySQL server**'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**部署 MySQL 服务器**'
- en: 'With our secrets and persistent volume (claim) in place, we can start building
    our application. First we will deploy a *MySQL* server. Pull the latest *mysql *image`docker
    pull mysql` and create the *mysql-deployment.yml* file. There are several things
    worth mentioning about this file. We specify that we only spin-up one pod (`spec.replicas:
    1`). The deployment will manage all pods with a label `db` specified by `spec.selector.matchLabels.app:
    db` . The `template`field and all it’s subfields specify the characteristics of
    the *pod. *It will run the image *mysql,* will be named *mysql* as well and looks
    for the db_root_password field in the `flaskapi-secrets` *secret* and will set
    the value to the `MYSQL_ROOT_PASSWORD` environment variable. Furthermore we specify
    a port that the container exposes and which path should be mounted to the persistent
    volume `spec.selector.template.spec.containers.volumeMounts.mountPath: /var/lib/mysql`.
    At the bottom we also specify a service also called mysql of the `LoadBalancer`type
    so we can access our database via this service.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '有了我们的机密和持久卷（声明）后，我们可以开始构建应用程序。首先我们将部署一个*MySQL*服务器。拉取最新的*mysql*镜像`docker pull
    mysql`并创建*mysql-deployment.yml*文件。这个文件有几个值得注意的地方。我们指定只启动一个pod（`spec.replicas:
    1`）。部署将管理所有具有标签`db`的pod，这个标签由`spec.selector.matchLabels.app: db`指定。`template`字段及其所有子字段指定了*pod*的特性。它将运行*mysql*镜像，并将被命名为*mysql*，同时查找`flaskapi-secrets`*secret*中的db_root_password字段，并将值设置为`MYSQL_ROOT_PASSWORD`环境变量。此外，我们指定了容器暴露的端口以及应该挂载到持久卷的路径`spec.selector.template.spec.containers.volumeMounts.mountPath:
    /var/lib/mysql`。最后，我们还指定了一个名为mysql的`LoadBalancer`类型的服务，以便我们可以通过该服务访问我们的数据库。'
- en: You can now deploy the MySQL server with `kubectl apply -f mysql-deployment.yml`.
    And see if a pod is running via `kubectl get pods`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以通过`kubectl apply -f mysql-deployment.yml`来部署MySQL服务器。并通过`kubectl get pods`查看pod是否在运行。
- en: Create database and table
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建数据库和表
- en: 'The last thing we have to do before implementing the API is initializing a
    database and schema on our MySQL server. We can do this using multiple methods,
    but for the sake of simplicity let’s access the MySQL server via the newly created *service. *As
    the pod running the MySQL *service *is only accessible from inside the cluster,
    you will start up a temporary pod that serves as `mysql-client`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现API之前，我们必须在MySQL服务器上初始化数据库和模式。我们可以使用多种方法来完成这项任务，但为了简单起见，我们将通过新创建的*service*访问MySQL服务器。由于运行MySQL*service*的pod仅在集群内部可访问，你将启动一个临时pod作为`mysql-client`。
- en: Set up the `mysql-client` via the terminal: `kubectl run -it --rm --image=mysql
    --restart=Never mysql-client -- mysql --host mysql --password=<your_password>`.
    Fill in the (decoded) password that you specified in the *secrets.yml* file.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过终端设置`mysql-client`：`kubectl run -it --rm --image=mysql --restart=Never mysql-client
    -- mysql --host mysql --password=<your_password>`。填写在*secrets.yml*文件中指定的（解码后的）密码。
- en: 'Create the database, table and schema. You can do whatever you like, but to
    make sure the sample Flask app will work do as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建数据库、表和模式。你可以做任何你想做的事情，但为了确保示例Flask应用程序能够正常工作，请按以下步骤操作：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Deploying the API
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署API
- en: Finally it is time to deploy your REST API. The following gist demonstrates
    an example of a Flask app that implements the API with only two endpoints. One
    for checking if the API functions and one for creating users in our database.
    In the GitHub [repo](https://github.com/RikKraanVantage/kubernetes-flask-mysql) you
    can find the python file that has endpoints for reading, updating and deleting
    entries in the database as well. The password for connecting to the database API
    is retrieved from the environment variables that were set by creating *secrets.* The
    rest of the environment variables (e.g `MYSQL_DATABASE_HOST`) is retrieved from
    the MySQL *service *that was implemented before (further on I will explain how
    to make sure the Flask app has access to this information).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是时候部署你的REST API了。以下的gist演示了一个Flask应用程序的示例，它实现了只有两个端点的API。一个是检查API功能的，另一个是创建我们数据库中的用户。在GitHub的[repo](https://github.com/RikKraanVantage/kubernetes-flask-mysql)中，你还可以找到一个Python文件，它具有读取、更新和删除数据库条目的端点。连接到数据库API的密码是从创建的*secrets*中检索的。其余的环境变量（例如`MYSQL_DATABASE_HOST`）则从之前实现的MySQL*service*中检索（稍后我将解释如何确保Flask应用程序可以访问这些信息）。
- en: To deploy this app in your Kubernetes cluster you have to make an image of this
    Flask app by creating a simple Dockerfile. Nothing special, preparing your container,
    installing requirements, copying the folder content and running the Flask app.
    Go to the [GitHub repo](https://github.com/RikKraanVantage/kubernetes-flask-mysql) to
    find the Dockerfile and the requirements.txt file that is required for building
    the image. Before you can deploy the Flask app in the Kubernetes cluster, you
    first have to build the image and name it *flask-api* via `docker build . -t flask-api`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Kubernetes 集群中部署此应用程序，您需要通过创建一个简单的 Dockerfile 来制作此 Flask 应用程序的镜像。没有特别之处，只需准备容器、安装要求、复制文件夹内容并运行
    Flask 应用程序即可。前往 [GitHub 仓库](https://github.com/RikKraanVantage/kubernetes-flask-mysql)
    查找 Dockerfile 和用于构建镜像的 requirements.txt 文件。在您可以在 Kubernetes 集群中部署 Flask 应用程序之前，首先必须构建镜像，并通过
    `docker build . -t flask-api` 命名为 *flask-api*。
- en: 'Now it is time to define the *deployment* and *service *for the Flask app that
    implements a RESTful API. The deployment will start up 3 pods (specified in the
    *flaskapp-deployment.yml* at the `spec.replicas: 3` field) Within each of these *pods* a
    container is created from the *flask-api* image you just build. To make sure Kubernetes
    uses the locally built image (instead of downloading an image from an external
    repo like Dockerhub) make sure to set the `imagePullPolicy` to `never`. To make
    sure the Flask app can communicate with the database a few environment variables
    should be set. The `db_root_password` is retrieved from your created *secrets*.
    Each container that starts up inherits environmental variables with information
    of all running *s*ervices, including `IP` and `port` addresses. So you don’t have
    to worry about having to specify the `host` and `port` of the MySQL database to
    the Flask app. Finally, you will define a *service* of the `LoadBalancer `type
    to divide the incoming traffic between the three pods.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '现在是定义 *deployment* 和 *service* 的时候了，以便为实现 RESTful API 的 Flask 应用程序进行配置。该 deployment
    将启动 3 个 pods（在 *flaskapp-deployment.yml* 文件的 `spec.replicas: 3` 字段中指定）。在这些 *pods*
    中，每个都从您刚刚构建的 *flask-api* 镜像创建一个容器。为了确保 Kubernetes 使用本地构建的镜像（而不是从外部仓库如 Dockerhub
    下载镜像），请确保将 `imagePullPolicy` 设置为 `never`。为了确保 Flask 应用程序可以与数据库通信，应设置几个环境变量。`db_root_password`
    从您创建的 *secrets* 中检索。每个启动的容器都会继承包含所有运行的 *services* 的环境变量，包括 `IP` 和 `port` 地址。因此，您不必担心将
    MySQL 数据库的 `host` 和 `port` 指定给 Flask 应用程序。最后，您将定义一个 `LoadBalancer` 类型的 *service*
    以在三个 pods 之间分配传入流量。'
- en: Making requests to the API
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 API 发出请求
- en: You are now ready to use our API and interact with your database. The last step
    is to expose the API *service* to the outside world via your terminal: `minikube
    service flask-service`. You will now see something like
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好使用我们的 API 并与数据库进行交互。最后一步是通过终端将 API *service* 暴露到外部：`minikube service
    flask-service`。您现在将看到类似于以下内容的输出：
- en: '![Image for post](../Images/ddcfcbc6118cd2addf8c0f3d02949944.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![Image for post](../Images/ddcfcbc6118cd2addf8c0f3d02949944.png)'
- en: 'Go to the provided URL and you will see the **Hello World **message, to make
    sure your API is running correctly. You can now interact with the API using your
    favorite request service like **Postman **or **curl **in your terminal. To create
    a user provide a **json** file with a name, email and pwd field. for example:`curl
    -H "Content-Type: application/json" -d ''{"name": "<user_name>", "email": "<user_email>",
    "pwd": "<user_password>"}'' <flask-service_URL>/create`. If you implemented the
    other methods of the API (as defined in the [GitHub repo](https://github.com/RikKraanVantage/kubernetes-flask-mysql))
    as well, you may now be able to query all users in the database via: `curl <flask-service_URL>/users`.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '访问提供的 URL，您将看到 **Hello World** 消息，以确保您的 API 正在正确运行。您现在可以使用您喜欢的请求服务，如 **Postman**
    或 **curl** 在终端中与 API 进行交互。要创建用户，请提供一个包含 name、email 和 pwd 字段的 **json** 文件。例如：`curl
    -H "Content-Type: application/json" -d ''{"name": "<user_name>", "email": "<user_email>",
    "pwd": "<user_password>"}'' <flask-service_URL>/create`。如果您还实现了 API 的其他方法（如 [GitHub
    仓库](https://github.com/RikKraanVantage/kubernetes-flask-mysql) 中定义的那样），您现在可能可以通过以下方式查询数据库中的所有用户：`curl
    <flask-service_URL>/users`。'
- en: Conclusion
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: '**curl **in your terminal. To create a user provide a **json** file with a
    name, email and pwd field. for example:`curl -H "Content-Type: application/json"
    -d ''{"name": "<user_name>", "email": "<user_email>", "pwd": "<user_password>"}''
    <flask-service_URL>/create`. If you implemented the other methods of the API (as
    defined in the [GitHub repo](https://github.com/RikKraanVantage/kubernetes-flask-mysql))
    as well, you may now be able to query all users in the database via: `curl <flask-service_URL>/users`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '在终端中使用**curl**。创建用户时提供一个包含姓名、电子邮件和密码字段的**json**文件。例如：`curl -H "Content-Type:
    application/json" -d ''{"name": "<user_name>", "email": "<user_email>", "pwd":
    "<user_password>"}'' <flask-service_URL>/create`。如果你也实现了API的其他方法（如[GitHub代码库](https://github.com/RikKraanVantage/kubernetes-flask-mysql)中定义的），你现在可能能够通过以下命令查询数据库中的所有用户：`curl
    <flask-service_URL>/users`。'
- en: In this hands-on tutorial you set up *deployments*, *services* and *pods, *implemented
    a RESTful API by deploying a Flask app and connected it with other micro-services
    (a MySQL database in this case). You can keep running this locally, or implement
    it on a remote server for example in the cloud and get it to production. Feel
    free to clone the [repo](https://github.com/RikKraanVantage/kubernetes-flask-mysql) and
    adjust the API as you like, or add additional micro-services.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个动手教程中，你设置了*部署*、*服务*和*容器*，通过部署Flask应用实现了一个RESTful API，并将其与其他微服务（例如MySQL数据库）连接。你可以在本地继续运行这个服务，或者在远程服务器上实现，例如在云端，并将其投入生产。可以随意克隆这个[代码库](https://github.com/RikKraanVantage/kubernetes-flask-mysql)并根据需要调整API，或添加其他微服务。
- en: Feel free to reach out to me if you have any additional questions, remarks or
    suggestions!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何额外的问题、意见或建议，请随时与我联系！
- en: '**Bio: [Rik Kraan](https://www.linkedin.com/in/rikkraan/)** is a medical doctor
    with a PhD in radiology, working as a data scientist at **Vantage AI**, a data
    science consultancy company in the Netherlands. Get in touch via [rik.kraan@vantage-ai.com](mailto:rik.kraan@vantage-ai.com)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Rik Kraan](https://www.linkedin.com/in/rikkraan/)**是一位拥有放射学博士学位的医学博士，目前在**Vantage
    AI**工作，担任数据科学家，Vantage AI是一家位于荷兰的数据科学咨询公司。如需联系，请通过[rik.kraan@vantage-ai.com](mailto:rik.kraan@vantage-ai.com)发送邮件。'
- en: '[Original](https://towardsdatascience.com/how-to-deploy-a-flask-api-in-kubernetes-and-connect-it-with-other-micro-services-af16965b67fe).
    Reposted with permission.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/how-to-deploy-a-flask-api-in-kubernetes-and-connect-it-with-other-micro-services-af16965b67fe)。经许可转载。'
- en: '**Related:**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[Kubernetes vs. Amazon ECS for Data Scientists](/2020/11/kubernetes-amazon-ecs-data-scientists.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes与Amazon ECS对数据科学家的比较](/2020/11/kubernetes-amazon-ecs-data-scientists.html)'
- en: '[Create and Deploy your First Flask App using Python and Heroku](/2020/09/flask-app-using-python-heroku.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Python和Heroku创建并部署你的第一个Flask应用](/2020/09/flask-app-using-python-heroku.html)'
- en: '[Data Science Meets Devops: MLOps with Jupyter, Git, and Kubernetes](/2020/08/data-science-meets-devops-mlops-jupyter-git-kubernetes.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学与DevOps的结合：Jupyter、Git和Kubernetes下的MLOps](/2020/08/data-science-meets-devops-mlops-jupyter-git-kubernetes.html)'
- en: More On This Topic
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Kubernetes In Action: Second Edition](https://www.kdnuggets.com/2022/03/manning-kubernetes-action-second-edition.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes实战：第二版](https://www.kdnuggets.com/2022/03/manning-kubernetes-action-second-edition.html)'
- en: '[High Availability SQL Server Docker Containers in Kubernetes](https://www.kdnuggets.com/2022/04/high-availability-sql-server-docker-containers-kubernetes.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kubernetes中高可用SQL Server Docker容器](https://www.kdnuggets.com/2022/04/high-availability-sql-server-docker-containers-kubernetes.html)'
- en: '[Connect With the Data Science Community at Rev 3 in NYC, the #1…](https://www.kdnuggets.com/2022/03/domino-connect-data-science-community-nyc-mlops-conference.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在纽约Rev 3与数据科学社区联系，排名第一…](https://www.kdnuggets.com/2022/03/domino-connect-data-science-community-nyc-mlops-conference.html)'
- en: '[How to Successfully Deploy Data Science Projects](https://www.kdnuggets.com/2022/01/successfully-deploy-data-science-projects.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何成功部署数据科学项目](https://www.kdnuggets.com/2022/01/successfully-deploy-data-science-projects.html)'
- en: '[Survey: Machine Learning Projects Still Routinely Fail to Deploy](https://www.kdnuggets.com/survey-machine-learning-projects-still-routinely-fail-to-deploy)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[调查：机器学习项目仍然经常无法部署](https://www.kdnuggets.com/survey-machine-learning-projects-still-routinely-fail-to-deploy)'
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在Heroku上部署机器学习Web应用](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
