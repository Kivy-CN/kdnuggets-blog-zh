- en: Simple Question Answering (QA) Systems That Use Text Similarity Detection in
    Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行文本相似性检测的简单问答（QA）系统
- en: 原文：[https://www.kdnuggets.com/2020/04/simple-question-answering-systems-text-similarity-python.html](https://www.kdnuggets.com/2020/04/simple-question-answering-systems-text-similarity-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/04/simple-question-answering-systems-text-similarity-python.html](https://www.kdnuggets.com/2020/04/simple-question-answering-systems-text-similarity-python.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Andrew Zola](https://www.linkedin.com/in/andrew-zola/), Content Manager
    at Artmotion**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Andrew Zola](https://www.linkedin.com/in/andrew-zola/)，Artmotion 的内容经理**'
- en: Artificial Intelligence (AI) is no longer an abstract idea that conjures up
    images from sci-fi movies. Today, AI has evolved considerably, and it’s now able
    to recognize speech, make decisions, and work alongside humans to complete tasks
    at a larger scale.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能（AI）不再是一个唤起科幻电影画面的抽象概念。今天，AI 已经有了显著的进展，现在能够识别语音、做出决策，并与人类一起完成更大规模的任务。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: So instead of robots that are trying to take over the planet, we think about
    Alexa, Siri, or a customer service chatbot. But how exactly are these smart algorithms
    able to engage and communicate with us like humans?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，与其担心试图征服地球的机器人，我们更应该关注像 Alexa、Siri 或客服聊天机器人这样的智能算法。这些智能算法究竟是如何像人类一样与我们互动和沟通的呢？
- en: The answer lies in [Question Answering (QA) systems](https://hub.packtpub.com/google-open-sources-active-question-answering-activeqa-a-reinforcement-learning-based-qa-system/)
    that are built on a foundation of Machine Learning (ML) and [Natural Language
    Processing (NLP)](https://hub.packtpub.com/spam-filtering-natural-language-processing-approach/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 答案在于 [问答（QA）系统](https://hub.packtpub.com/google-open-sources-active-question-answering-activeqa-a-reinforcement-learning-based-qa-system/)
    的基础上构建，这些系统基于机器学习（ML）和 [自然语言处理（NLP）](https://hub.packtpub.com/spam-filtering-natural-language-processing-approach/)。
- en: '**What are QA Systems?**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是 QA 系统？**'
- en: QA systems can be described as [a technology that provides the right short answer
    to a question rather than giving a list of possible answers](https://intersog.com/blog/the-basics-of-qa-systems-from-a-single-function-to-a-pre-trained-nlp-model-using-python/).
    In this scenario, QA systems are designed to be alert to text similarity and answer
    questions that are asked in natural language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: QA 系统可以被描述为 [一种提供正确简短回答的技术，而不是给出可能答案的列表](https://intersog.com/blog/the-basics-of-qa-systems-from-a-single-function-to-a-pre-trained-nlp-model-using-python/)。在这种情况下，QA
    系统被设计为对文本相似性保持警觉，并回答以自然语言提出的问题。
- en: But some also derive information from images to answer questions. For example,
    when you’re clicking on image boxes to prove that you’re not a robot, you’re actually
    teaching smart algorithms about what’s in a particular image.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但有些系统还通过图像来获取信息以回答问题。例如，当你点击图像框以证明你不是机器人时，实际上是在教导智能算法有关特定图像中的内容。
- en: This is only possible because of NLP technologies like Google’s [Bidirectional
    Encoder Representations from Transformers (BERT)](https://arxiv.org/abs/1810.04805).
    Anyone who wants to build a QA system can leverage NLP and train machine learning
    algorithms to answer domain-specific (or a defined set) or general (open-ended)
    questions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这只有得益于像谷歌的 [双向编码器表示（BERT）](https://arxiv.org/abs/1810.04805) 等 NLP 技术。任何想要构建
    QA 系统的人都可以利用 NLP 和训练机器学习算法，以回答特定领域（或定义集合）或通用（开放式）问题。
- en: There are plenty of datasets and resources online, so you can quickly start
    training smart algorithms to learn and process massive quantities of human language
    data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 网上有大量的数据集和资源，因此你可以迅速开始训练智能算法，以学习和处理海量的人类语言数据。
- en: To boost efficiency and accuracy, NLP programs also use both inference and probability
    to guess the right answer. Over time, they have become very good at it!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高效率和准确性，NLP 程序还使用推理和概率来猜测正确答案。随着时间的推移，它们在这方面变得非常擅长！
- en: For businesses, the advantage of deploying QA systems is that they are highly
    user-friendly. Once the enterprise QA system is built, anyone can use it. In fact,
    if you have engaged with Alexa or used Google Translate, you have experienced
    NLP at work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业来说，部署QA系统的好处在于它们非常用户友好。一旦企业QA系统构建完成，任何人都可以使用。实际上，如果你曾经与 Alexa 互动或使用过 Google
    Translate，你就体验过 NLP 的实际应用。
- en: 'In an enterprise setting, they can be used for much more than chatbots and
    voice assistants. For example, smart algorithms can be trained to do the following:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在企业环境中，它们可以用于远超聊天机器人和语音助手的功能。例如，可以训练智能算法执行以下任务：
- en: '**Administration** (find and contextualize information to automate the process
    of searching, modifying, and managing documents)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理**（查找并将信息上下文化，以自动化搜索、修改和管理文档的过程）'
- en: '**Customer service** (with chatbots that can engage customers as well as identify
    new leads by analyzing profiles, phrases, and other data)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户服务**（利用聊天机器人与客户互动，同时通过分析个人资料、短语和其他数据来识别潜在的新客户）'
- en: '**Marketing** (by being alert to mentions about the company or brand online)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**市场营销**（通过关注在线对公司或品牌的提及）'
- en: But circling back to the topic at hand, let’s take a look at how it works.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 但回到当前话题，让我们看看它是如何工作的。
- en: '**How Do You Build a Robust QA System?**'
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如何构建一个可靠的QA系统？**'
- en: To answer the question in a manner that can be technical and easily understood,
    I’ll show you how to build a simple QA system based on string similarity measurement,
    and sourced using a closed domain.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了以技术性和易于理解的方式回答问题，我将向你展示如何基于字符串相似度测量构建一个简单的QA系统，并使用封闭域进行数据源。
- en: The following example is based on Ojokoh and Ayokunle’s research, [Fuzzy-Based
    Answer Ranking in Question Answering Communities](https://www.researchgate.net/publication/272093801_Fuzzy-Based_Answer_Ranking_in_Question_Answering_Communities).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例基于 Ojokoh 和 Ayokunle 的研究，[基于模糊的答案排名在问答社区](https://www.researchgate.net/publication/272093801_Fuzzy-Based_Answer_Ranking_in_Question_Answering_Communities)。
- en: 'QA system with approximate match function is simple as:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 具有近似匹配功能的QA系统很简单，如下：
- en: '![Figure](../Images/16df69a55cefbfdcb50ab60bb5fbbcf0.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/16df69a55cefbfdcb50ab60bb5fbbcf0.png)'
- en: In this scenario, we’ll use a small set of data of question-answer pairs in
    a [CSV file](https://github.com/jupyter/notebook). In the real world, enterprises
    will use [highly specialized databases](https://leaderboard.techqa.us-east.containers.appdomain.cloud)
    with hundreds of thousands of samples.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用一个包含问题-答案对的小数据集，存储在一个[CSV 文件](https://github.com/jupyter/notebook)中。在实际应用中，企业将使用[高度专业化的数据库](https://leaderboard.techqa.us-east.containers.appdomain.cloud)，其中包含数十万个样本。
- en: '**Prerequisites**'
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**先决条件**'
- en: To run these examples, you need [Python 3](https://www.python.org/), [Jupyter
    Lab](https://jupyter.org/install) and [python-Levenshtein](https://github.com/ztane/python-Levenshtein)
    module.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些示例，你需要 [Python 3](https://www.python.org/)，[Jupyter Lab](https://jupyter.org/install)
    和 [python-Levenshtein](https://github.com/ztane/python-Levenshtein) 模块。
- en: 'First load the data:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 首先加载数据：
- en: '[PRE0] import pandas as pd  data = pd.read_csv(''qa.csv'')  *# this function
    is used to get printable results*  def getResults(questions, fn):      def getResult(q):          answer,
    score, prediction = fn(q)          return [q, prediction, answer, score]      return
    pd.DataFrame(list(map(getResult, questions)), columns=["Q", "Prediction", "A",
    "Score"])  test_data = [      "What is the population of Egypt?",      "What is
    the poulation of egypt",      "How long is a leopard''s tail?",      "Do you know
    the length of leopard''s tail?",      "When polar bears can be invisible?",      "Can
    I see arctic animals?",      "some city in Finland"  ]  data [PRE1]`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0] import pandas as pd  data = pd.read_csv(''qa.csv'')  *# 此函数用于获取可打印的结果*  def
    getResults(questions, fn):      def getResult(q):          answer, score, prediction
    = fn(q)          return [q, prediction, answer, score]      return pd.DataFrame(list(map(getResult,
    questions)), columns=["Q", "Prediction", "A", "Score"])  test_data = [      "埃及的人口是多少？",      "埃及的人口是多少",      "美洲豹的尾巴有多长？",      "你知道美洲豹尾巴的长度吗？",      "北极熊什么时候可以隐身？",      "我能看到北极动物吗？",      "芬兰的某个城市"  ]  data
    [PRE1]`'
- en: '| **Question** | **Answer** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **问题** | **答案** |'
- en: '| Who determined the dependence of the boiling o... | Anders Celsius |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 谁确定了沸点的依赖性？ | 安德斯·摄尔修斯 |'
- en: '| Are beetles insects? | Yes |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 甲虫是昆虫吗？ | 是的 |'
- en: '| Are Canada ''s two official languages English a... | yes |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 加拿大的两种官方语言是英语和法语吗？ | 是的 |'
- en: '| What is the population of Egypt? | more than 78 million |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 埃及的人口是多少？ | 超过7800万 |'
- en: '| What is the biggest city in Finland? | Greater Helsinki |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 芬兰最大城市是什么？ | 大赫尔辛基 |'
- en: '| What is the national currency of Liechtenstein? | Swiss franc |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 列支敦士登的国家货币是什么？ | 瑞士法郎 |'
- en: '| Can polar bears be seen under infrared photogr... | Polar bears are nearly
    invisible under infrare... |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 北极熊能在红外摄影下被看到吗？ | 北极熊在红外线下几乎不可见 |'
- en: '| When did Tesla demonstrate wireless communicat... | 1893 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 特斯拉什么时候演示了无线通信... | 1893 |'
- en: '| What are violins made of? | different types of wood |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 小提琴是用什么材料制成的？ | 不同类型的木材 |'
- en: '| How long is a leopard''s tail? | 60 to 110cm |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 豹子的尾巴有多长？ | 60 到 110 厘米 |'
- en: In its simplest form, QA systems can only answer questions if the questions
    and answers are matched perfectly.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在最简单的形式下，QA系统只能在问题和答案完全匹配时回答问题。
- en: '[PRE2] import re  def getNaiveAnswer(q):      *# regex helps to pass some punctuation
    signs*      row = data.loc[data[''Question''].str.contains(re.sub(r"[^\w''\s)]+",
    "", q),case=False)]      if len(row) > 0:          return row["Answer"].values[0],
    1, row["Question"].values[0]      return "Sorry, I didn''t get you.", 0, ""  getResults(test_data,
    getNaiveAnswer) [PRE3]`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2] 导入 re  定义 getNaiveAnswer(q):      *# 正则表达式帮助处理一些标点符号*      row = data.loc[data[''Question''].str.contains(re.sub(r"[^\w''\s)]+",
    "", q),case=False)]      如果 len(row) > 0:          返回 row["Answer"].values[0],
    1, row["Question"].values[0]      返回 "对不起，我没听懂你说的。", 0, ""  getResults(test_data,
    getNaiveAnswer) [PRE3]`'
- en: '|  | **Q** | **Prediction** | **A** | **Score** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '|  | **Q** | **预测** | **A** | **分数** |'
- en: '| 1 | What is the population of Egypt? | What is the population of Egypt? |
    more than 78 million | 1 |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 埃及的人口是多少？ | 埃及的人口是多少？ | 超过7800万 | 1 |'
- en: '| 2 | What is the population of egypt |  | Sorry, I didn''t get you. | 0 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 埃及的人口是多少 |  | 对不起，我没听懂你说的。 | 0 |'
- en: '| 3 | How long is a leopard''s tail? | How long is a leopard''s tail? | 60
    to 110cm | 1 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 豹子的尾巴有多长？ | 豹子的尾巴有多长？ | 60 到 110 厘米 | 1 |'
- en: '| 4 | Do you know the length of leopard''s tail? |  | Sorry, I didn''t get
    you. | 0 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 你知道豹子的尾巴有多长吗？ |  | 对不起，我没听懂你说的。 | 0 |'
- en: '| 5 | When polar bears can be invisible? |  | Sorry, I didn''t get you. | 0
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 北极熊什么时候可以隐形？ |  | 对不起，我没听懂你说的。 | 0 |'
- en: '| 6 | Can I see arctic animals? |  | Sorry, I didn''t get you. | 0 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 我可以看到北极动物吗？ |  | 对不起，我没听懂你说的。 | 0 |'
- en: '| 7 | some city in Finland |  | Sorry, I didn''t get you. | 0 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 芬兰的某个城市 |  | 对不起，我没听懂你说的。 | 0 |'
- en: As you can see from the above, a small grammatical mistake can quickly derail
    the whole process. It’s the same result if you use string pre-processing of source
    and query texts like punctuation symbols removal,lowercasing, etc.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，一个小小的语法错误可以迅速破坏整个过程。如果使用源文本和查询文本的字符串预处理，例如去除标点符号、转换为小写等，也会得到相同的结果。
- en: So how can we improve our results?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们如何改善我们的结果呢？
- en: To improve results, let’s switch things up a little and use [approximate string
    matching](https://github.com/topics/approximate-string-matching). In this scenario,
    our system will be enabled to accept grammatical mistakes and minor differences
    in the text.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善结果，让我们稍微改变一下，使用[近似字符串匹配](https://github.com/topics/approximate-string-matching)。在这种情况下，我们的系统将能够接受语法错误和文本中的细微差别。
- en: There are many ways to deploy approximate string matching protocols, but for
    our example, we will use one of the implementations of string metrics called Levenshtein
    distance. In this scenario, the distance between two words is the minimum number
    of single-character edits (insertions, deletions, or substitutions) that are needed
    to change one word into the other.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 部署近似字符串匹配协议有很多方法，但在我们的示例中，我们将使用一种被称为莱文斯坦距离的字符串度量实现。在这种情况下，两个词之间的距离是将一个词改变为另一个词所需的最少单字符编辑（插入、删除或替换）次数。
- en: Let’s deploy the [Levenshtein Python module](https://github.com/ztane/python-Levenshtein)
    on the system. It contains a set of approximate string matching functions that
    we can experiment with.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在系统上部署[莱文斯坦 Python 模块](https://github.com/ztane/python-Levenshtein)。它包含一组我们可以进行实验的近似字符串匹配函数。
- en: '[PRE4] from Levenshtein import ratio  def getApproximateAnswer(q):      max_score
    = 0      answer = ""      prediction = ""      for idx, row in data.iterrows():          score
    = ratio(row["Question"], q)          if score >= 0.9: *# I''m sure, stop here*              return
    row["Answer"], score, row["Question"]          elif score > max_score: *# I''m
    unsure, continue*              max_score = score              answer = row["Answer"]              prediction
    = row["Question"]      if max_score > 0.8:          return answer, max_score,
    prediction      return "Sorry, I didn''t get you.", max_score, prediction  getResults(test_data,
    getApproximateAnswer) [PRE5]`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4] 从 Levenshtein 导入 ratio  def getApproximateAnswer(q):      max_score
    = 0      answer = ""      prediction = ""      for idx, row in data.iterrows():          score
    = ratio(row["Question"], q)          if score >= 0.9: *# 我确定，停在这里*              return
    row["Answer"], score, row["Question"]          elif score > max_score: *# 我不确定，继续*              max_score
    = score              answer = row["Answer"]              prediction = row["Question"]      if
    max_score > 0.8:          return answer, max_score, prediction      return "对不起，我没听懂。",
    max_score, prediction  getResults(test_data, getApproximateAnswer) [PRE5]`'
- en: '|  | **Q** | **Prediction** | **A** | **Score** |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|  | **Q** | **预测** | **A** | **得分** |'
- en: '| 1 | What is the population of Egypt? | What is the population of Egypt? |
    more than 78 million | 1.000000 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 埃及的人口是多少？ | 埃及的人口是多少？ | 超过7800万 | 1.000000 |'
- en: '| 2 | What is the poulation of egypt | What is the population of Egypt? | more
    than 78 million | 0.935484 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 埃及的人口是多少 | 埃及的人口是多少？ | 超过7800万 | 0.935484 |'
- en: '| 3 | How long is a leopard''s tail? | How long is a leopard''s tail? | 60
    to 110cm | 1.000000 |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 豹子的尾巴有多长？ | 豹子的尾巴有多长？ | 60到110厘米 | 1.000000 |'
- en: '| 4 | Do you know the length of leopard''s tail? | How long is a leopard''s
    tail? | Sorry, I didn''t get you. | 0.657143 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 你知道豹子的尾巴长吗？ | 豹子的尾巴有多长？ | 对不起，我没听懂。 | 0.657143 |'
- en: '| 5 | When polar bears can be invisible? | Can polar bears be seen under infrared
    photogr... | Sorry, I didn''t get you. | 0.517647 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 北极熊什么时候会变得隐形？ | 北极熊在红外线摄影下能否被看到... | 对不起，我没听懂。 | 0.517647 |'
- en: '| 6 | Can I see arctic animals? | What is the biggest city in Finland? | Sorry,
    I didn''t get you. | 0.426230 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 我能看到北极动物吗？ | 芬兰的哪个城市最大？ | 对不起，我没听懂。 | 0.426230 |'
- en: '| 7 | some city in Finland | What is the biggest city in Finland? | Sorry,
    I didn''t get you. | 0.642857 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 芬兰的哪个城市最大？ | 对不起，我没听懂。 | 0.642857 |'
- en: As you can see from the above, even minor grammatical mistakes can generate
    the correct answer (and a score below 1.0 is highly acceptable).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述内容可以看出，即使是小的语法错误也能生成正确的答案（得分低于1.0也是完全可以接受的）。
- en: To make our QA system even better, go ahead and adjust max_score coefficient
    of our function to be more accommodating.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的QA系统更好，继续调整我们函数的max_score系数以便更具包容性。
- en: '[PRE6] from Levenshtein import ratio  def getApproximateAnswer2(q):      max_score
    = 0      answer = ""      prediction = ""      for idx, row in data.iterrows():          score
    = ratio(row["Question"], q)          if score >= 0.9: *# I''m sure, stop here*              return
    row["Answer"], score, row["Question"]          elif score > max_score: *# I''m
    unsure, continue*              max_score = score              answer = row["Answer"]              prediction
    = row["Question"]      if max_score > 0.3: *# threshold is lowered*          return
    answer, max_score, prediction      return "Sorry, I didn''t get you.", max_score,
    prediction  getResults(test_data, getApproximateAnswer2) [PRE7]`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE6] 从 Levenshtein 导入 ratio  def getApproximateAnswer2(q):      max_score
    = 0      answer = ""      prediction = ""      for idx, row in data.iterrows():          score
    = ratio(row["Question"], q)          if score >= 0.9: *# 我确定，停在这里*              return
    row["Answer"], score, row["Question"]          elif score > max_score: *# 我不确定，继续*              max_score
    = score              answer = row["Answer"]              prediction = row["Question"]      if
    max_score > 0.3: *# 阈值降低*          return answer, max_score, prediction      return
    "对不起，我没听懂。", max_score, prediction  getResults(test_data, getApproximateAnswer2)
    [PRE7]`'
- en: '|  | **Q** | **Prediction** | **A** | **Score** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|  | **Q** | **预测** | **A** | **得分** |'
- en: '| **0** | What is the population of Egypt? | What is the population of Egypt?
    | more than 78 million | 1.000000 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| **0** | 埃及的人口是多少？ | 埃及的人口是多少？ | 超过7800万 | 1.000000 |'
- en: '| **1** | What is the poulation of egypt | What is the population of Egypt?
    | more than 78 million | 0.935484 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **1** | 埃及的人口是多少 | 埃及的人口是多少？ | 超过7800万 | 0.935484 |'
- en: '| **2** | How long is a leopard''s tail? | How long is a leopard''s tail? |
    60 to 110cm | 1.000000 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| **2** | 豹子的尾巴有多长？ | 豹子的尾巴有多长？ | 60到110厘米 | 1.000000 |'
- en: '| **3** | Do you know the length of leopard''s tail? | How long is a leopard''s
    tail? | 60 to 110cm | 0.657143 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| **3** | 你知道豹子的尾巴长吗？ | 豹子的尾巴有多长？ | 60到110厘米 | 0.657143 |'
- en: '| **4** | When polar bears can be invisible? | Can polar bears be seen under
    infrared photogr... | Polar bears are nearly invisible under infrare... | 0.517647
    |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| **4** | 北极熊何时可以隐形？ | 北极熊在红外摄影下是否能被看到... | 北极熊在红外线下几乎看不见... | 0.517647 |'
- en: '| **5** | Can I see arctic animals? | What is the biggest city in Finland?
    | Greater Helsinki | 0.426230 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| **5** | 我能看到北极动物吗？ | 芬兰最大的城市是什么？ | 大赫尔辛基 | 0.426230 |'
- en: '| **6** | some city in Finland | What is the biggest city in Finland? | Greater
    Helsinki | 0.642857 |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| **6** | 芬兰的某个城市 | 芬兰最大的城市是什么？ | 大赫尔辛基 | 0.642857 |'
- en: The results above evidence that even when different words are used, the system
    can respond with the correct answer. But if you took a closer look, the 5th result
    looks like a false positive.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 上述结果表明，即使使用不同的词汇，系统也能给出正确的答案。但如果你仔细查看，第五个结果看起来像是一个假阳性。
- en: This means that we have to take it to the next level and leverage advanced libraries
    that have been made available by the likes of Facebook and Google to overcome
    these challenges.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们必须提升到一个新水平，并利用像 Facebook 和 Google 这样的公司提供的先进库来克服这些挑战。
- en: The example above is a simple demonstration of how this works. The code is quite
    simple and impractical to use with large volumes and iterations on a massive dataset.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子是如何工作的一个简单演示。代码相当简单，不适合处理大规模数据集上的大量数据和迭代。
- en: The well-known [BERT library](https://en.wikipedia.org/wiki/BERT_(language_model)),
    developed by Google, is better suited for enterprise tasks. AI-powered QA systems
    that you’ve already engaged with use far more advanced databases and engage in
    continuous machine learning.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Google 开发的知名[ BERT 库](https://en.wikipedia.org/wiki/BERT_(language_model))更适合企业任务。你已经接触过的
    AI 驱动的 QA 系统使用了更先进的数据库，并进行持续的机器学习。
- en: What’s your experience building enterprise QA systems? What challenges did you
    face? How did you overcome them? Share your thoughts and experiences in the **Comments**
    section below.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你在构建企业 QA 系统方面有什么经验？你遇到了哪些挑战？你是如何克服它们的？在下面的**评论**部分分享你的想法和经验。
- en: The source code for this article can be found [HERE](https://intersog.com/question-answering-system).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章的源代码可以在[这里](https://intersog.com/question-answering-system)找到。
- en: '**Bio: [Andrew Zola](https://www.linkedin.com/in/andrew-zola/)** (**[@DrewZola](https://twitter.com/DrewZola)**)
    is Content Manager at Artmotion: A bank for your data. He has many passions, but
    the main one is writing about technology. Furthermore, learning about new things
    and connecting with diverse audiences is something that has always amazed and
    excited Andrew.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介： [Andrew Zola](https://www.linkedin.com/in/andrew-zola/)** (**[@DrewZola](https://twitter.com/DrewZola)**)
    是 Artmotion 的内容经理：一个为你的数据提供银行服务的公司。他有很多兴趣爱好，但主要是写关于技术的文章。此外，学习新事物和与不同观众建立联系一直让
    Andrew 感到惊讶和兴奋。'
- en: '**Related:**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[This Microsoft Neural Network can Answer Questions About Scenic Images with
    Minimum Training](/2019/10/microsoft-neural-network-answer-questions-scenic-images-minimum-training.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[这款微软神经网络能以最少的训练回答有关风景图片的问题](/2019/10/microsoft-neural-network-answer-questions-scenic-images-minimum-training.html)'
- en: '[Salesforce Open Sources a Framework for Open Domain Question Answering Using
    Wikipedia](/2020/03/salesforce-open-sources-framework-question-answering-wikipedia.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Salesforce 开源一个使用 Wikipedia 进行开放域问答的框架](/2020/03/salesforce-open-sources-framework-question-answering-wikipedia.html)'
- en: '[Why you should NOT use MS MARCO to evaluate semantic search](/2020/04/ms-marco-evaluate-semantic-search.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么你不应该使用 MS MARCO 来评估语义搜索](/2020/04/ms-marco-evaluate-semantic-search.html)'
- en: More On This Topic
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Answering Questions with HuggingFace Pipelines and Streamlit](https://www.kdnuggets.com/2021/10/simple-question-answering-web-app-hugging-face-pipelines.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 HuggingFace Pipelines 和 Streamlit 回答问题](https://www.kdnuggets.com/2021/10/simple-question-answering-web-app-hugging-face-pipelines.html)'
- en: '[Post GPT-4: Answering Most Asked Questions About AI](https://www.kdnuggets.com/2023/04/post-gpt4-answering-asked-questions-ai.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GPT-4 后：回答关于 AI 的最常见问题](https://www.kdnuggets.com/2023/04/post-gpt4-answering-asked-questions-ai.html)'
- en: '[Evaluating Methods for Calculating Document Similarity](https://www.kdnuggets.com/evaluating-methods-for-calculating-document-similarity)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[评估计算文档相似度的方法](https://www.kdnuggets.com/evaluating-methods-for-calculating-document-similarity)'
- en: '[Using Hugging Face Transformers for Emotion Detection in Text](https://www.kdnuggets.com/using-hugging-face-transformers-for-emotion-detection-in-text)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Hugging Face Transformers 进行文本情感检测](https://www.kdnuggets.com/using-hugging-face-transformers-for-emotion-detection-in-text)'
- en: '[How to Use NumPy to Solve Systems of Nonlinear Equations](https://www.kdnuggets.com/how-to-use-numpy-to-solve-systems-of-nonlinear-equations)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 NumPy 求解非线性方程组](https://www.kdnuggets.com/how-to-use-numpy-to-solve-systems-of-nonlinear-equations)'
- en: '[How to Use ChatGPT to Convert Text into a PowerPoint Presentation](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 ChatGPT 将文本转换为 PowerPoint 演示文稿](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
