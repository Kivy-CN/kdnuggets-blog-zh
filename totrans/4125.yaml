- en: Simplifying Decision Tree Interpretability with Python & Scikit-learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/05/simplifying-decision-tree-interpretation-decision-rules-python.html](https://www.kdnuggets.com/2017/05/simplifying-decision-tree-interpretation-decision-rules-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When discussing classifiers, decision trees are often thought of as easily interpretable
    models when compared to numerous more complex classifiers, especially those of
    the blackbox variety. And this is generally true.
  prefs: []
  type: TYPE_NORMAL
- en: This is **especially** true of rather comparatively simple models created from
    simple data. This is much-less true of complex decision trees crafted from large
    amounts of (high-dimensional) data. Even otherwise straightforward decision trees
    which are of great depth and/or breadth, consisting of heavy branching, can be
    difficult to trace.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Concise, textual representations of decision trees can often nicely summarize
    decision tree models. Additionally, certain textual representations can have further
    use beyond their summary capabilities. For example, automatically generating functions
    with the ability to classify future data by passing instances to such functions
    may be of use in particular scenarios. But let's not get off course -- interpretability
    is the goal of what we are discussing here.
  prefs: []
  type: TYPE_NORMAL
- en: This post will look at a few different ways of attempting to simplify decision
    tree representation and, ultimately, interpretability. All code is in Python,
    with Scikit-learn being used for the decision tree modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Classifier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First off, let's use my favorite dataset to build a simple decision tree in
    Python using [Scikit-learn's decision tree classifier](http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html),
    specifying information gain as the criterion and otherwise using defaults. Since
    we aren't concerned with classifying unseen instances in this post, we won't bother
    with splitting our data, and instead just construct a classifier using the dataset
    in its entirety.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Representing the Model Visually
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the easiest ways to interpret a decision tree is visually, accomplished
    with Scikit-learn using these few lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Copying the contents of the created file (''dt.dot'' in our example) to a [graphviz
    rendering agent](http://webgraphviz.com/), we get the following representation
    of our decision tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Decision tree graph](../Images/99f151aa5cdb993d4ce7e211b834f70e.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual representation of our decision tree using a [graphviz rendering agent.](http://webgraphviz.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Representing the Model as a Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated at the outset of this post, we will look at a couple of different
    ways for textually representing decision trees.
  prefs: []
  type: TYPE_NORMAL
- en: The first is representing the decision tree model [as a function](http://stackoverflow.com/questions/20224526/how-to-extract-the-decision-rules-from-scikit-learn-decision-tree).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s call this function and see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Interesting. Let's see if we can improve interpretability by stripping away
    some of the "functionality," provided it is not required.
  prefs: []
  type: TYPE_NORMAL
- en: Representing the Model as Pseudocode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, [a slight reworking of the above code](http://stackoverflow.com/questions/20224526/how-to-extract-the-decision-rules-from-scikit-learn-decision-tree)
    results in the promised goal of this post''s title: a set of decision rules for
    representing a decision tree, in slightly less-Pythony pseudocode.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s test this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This looks pretty good as well, and — in my computer science-trained mind —
    the use of well-placed C-style braces makes this a bit more legible then the previous
    attempt.
  prefs: []
  type: TYPE_NORMAL
- en: These gems have made me want to modify code to get to true decision rules, which
    I plan on playing with after finishing this post. If I get anywhere of note, I
    will return here and post my findings.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Decision Tree Algorithm, Explained](https://www.kdnuggets.com/2020/01/decision-tree-algorithm-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding by Implementing: Decision Tree](https://www.kdnuggets.com/2023/02/understanding-implementing-decision-tree.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Telling a Great Data Story: A Visualization Decision Tree](https://www.kdnuggets.com/2021/02/telling-great-data-story-visualization-decision-tree.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Random Forest vs Decision Tree: Key Differences](https://www.kdnuggets.com/2022/02/random-forest-decision-tree-key-differences.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n09, Mar 2: Telling a Great Data Story: A…](https://www.kdnuggets.com/2022/n09.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Complete Guide To Decision Tree Software](https://www.kdnuggets.com/2022/08/complete-guide-decision-tree-software.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
