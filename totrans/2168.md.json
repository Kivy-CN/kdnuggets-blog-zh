["```py\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nimport matplotlib.pyplot as plt\n\ndata = {\n    'Credit_Score': [700, 650, 600, 580, 720],\n    'Income': [50000, 45000, 40000, 38000, 52000],\n    'Approved': ['Yes', 'No', 'No', 'No', 'Yes']\n}\n\ndf = pd.DataFrame(data)\n\nX = df[['Credit_Score', 'Income']]\ny = df['Approved']\n\nclf = DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\nplt.figure(figsize=(10, 8))\ntree.plot_tree(clf, feature_names=['Credit_Score', 'Income'], class_names=['No', 'Yes'], filled=True)\nplt.show()\n```", "```py\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import tree\nimport matplotlib.pyplot as plt\n\ndata = {\n    'Age': [25, 45, 35, 50, 23],\n    'Income': [50000, 100000, 75000, 120000, 60000],\n    'Purchased': ['No', 'Yes', 'No', 'Yes', 'No']\n}\n\ndf = pd.DataFrame(data)\n\nX = df[['Age', 'Income']]\ny = df['Purchased']\n\nclf = DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\nplt.figure(figsize=(10, 8))\ntree.plot_tree(clf, feature_names=['Age', 'Income'], class_names=['No', 'Yes'], filled=True)\nplt.show()\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report\nfrom sklearn.preprocessing import StandardScaler\n\nmovies_df = pd.read_csv('rotten_tomatoes_movies.csv')\nreviews_df = pd.read_csv('rotten_tomatoes_critic_reviews_50k.csv')\n\nmerged_df = pd.merge(movies_df, reviews_df, on='rotten_tomatoes_link')\n\nfeatures = ['content_rating', 'genres', 'directors', 'runtime', 'tomatometer_rating', 'audience_rating']\ntarget = 'tomatometer_status'\n\nmerged_df['content_rating'] = merged_df['content_rating'].astype('category').cat.codes\nmerged_df['genres'] = merged_df['genres'].astype('category').cat.codes\nmerged_df['directors'] = merged_df['directors'].astype('category').cat.codes\n\nmerged_df = merged_df.dropna(subset=features + [target])\n\nX = merged_df[features]\ny = merged_df[target].astype('category').cat.codes\n\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)\n\nclf = DecisionTreeClassifier(max_depth=10, min_samples_split=10, min_samples_leaf=5)\nscores = cross_val_score(clf, X_train, y_train, cv=5)\nprint(\"Cross-validation scores:\", scores)\nprint(\"Average cross-validation score:\", scores.mean())\n\nclf.fit(X_train, y_train)\n\ny_pred = clf.predict(X_test)\n\nclassification_report_output = classification_report(y_test, y_pred, target_names=['Rotten', 'Fresh', 'Certified-Fresh'])\nprint(classification_report_output)\n```"]