["```py\n\ndf = pd.read_csv('Womens Clothing E-Commerce Reviews.csv')\n\n```", "```py\n\ndf.drop('Unnamed: 0', axis=1, inplace=True)\ndf.drop('Title', axis=1, inplace=True)\ndf = df[~df['Review Text'].isnull()]\n\ndef preprocess(ReviewText):\n    ReviewText = ReviewText.str.replace(\"(\n)\", \"\")\n    ReviewText = ReviewText.str.replace('().*()', '')\n    ReviewText = ReviewText.str.replace('(&amp)', '')\n    ReviewText = ReviewText.str.replace('(&gt)', '')\n    ReviewText = ReviewText.str.replace('(&lt)', '')\n    ReviewText = ReviewText.str.replace('(\\xa0)', ' ')  \n    return ReviewText\ndf['Review Text'] = preprocess(df['Review Text'])\n\ndf['polarity'] = df['Review Text'].map(lambda text: TextBlob(text).sentiment.polarity)\ndf['review_len'] = df['Review Text'].astype(str).apply(len)\ndf['word_count'] = df['Review Text'].apply(lambda x: len(str(x).split()))\n\n```", "```py\n\nprint('5 random reviews with the highest positive sentiment polarity: \\n')\ncl = df.loc[df.polarity == 1, ['Review Text']].sample(5).values\nfor c in cl:\n    print(c[0])\n\n```", "```py\n\nprint('5 random reviews with the most neutral sentiment(zero) polarity: \\n')\ncl = df.loc[df.polarity == 0, ['Review Text']].sample(5).values\nfor c in cl:\n    print(c[0])\n\n```", "```py\n\nprint('2 reviews with the most negative polarity: \\n')\ncl = df.loc[df.polarity == -0.97500000000000009, ['Review Text']].sample(2).values\nfor c in cl:\n    print(c[0])\n\n```", "```py\n\ndf['polarity'].iplot(\n    kind='hist',\n    bins=50,\n    xTitle='polarity',\n    linecolor='black',\n    yTitle='count',\n    title='Sentiment Polarity Distribution')\n\n```", "```py\n\ndf['Rating'].iplot(\n    kind='hist',\n    xTitle='rating',\n    linecolor='black',\n    yTitle='count',\n    title='Review Rating Distribution')\n\n```", "```py\n\ndf['Age'].iplot(\n    kind='hist',\n    bins=50,\n    xTitle='age',\n    linecolor='black',\n    yTitle='count',\n    title='Reviewers Age Distribution')\n\n```", "```py\n\ndf['review_len'].iplot(\n    kind='hist',\n    bins=100,\n    xTitle='review length',\n    linecolor='black',\n    yTitle='count',\n    title='Review Text Length Distribution')\n\n```", "```py\n\ndf['word_count'].iplot(\n    kind='hist',\n    bins=100,\n    xTitle='word count',\n    linecolor='black',\n    yTitle='count',\n    title='Review Text Word Count Distribution')\n\n```", "```py\n\ndf.groupby('Division Name').count()['Clothing ID'].iplot(kind='bar', yTitle='Count', linecolor='black', opacity=0.8, title='Bar chart of Division Name', xTitle='Division Name')\n\n```", "```py\n\ndf.groupby('Department Name').count()['Clothing ID'].sort_values(ascending=False).iplot(kind='bar', yTitle='Count', linecolor='black', opacity=0.8, title='Bar chart of Department Name', xTitle='Department Name')\n\n```", "```py\n\ndf.groupby('Class Name').count()['Clothing ID'].sort_values(ascending=False).iplot(kind='bar', yTitle='Count', linecolor='black', opacity=0.8, title='Bar chart of Class Name', xTitle='Class Name')\n```", "```py\n\ndef get_top_n_words(corpus, n=None):\n    vec = CountVectorizer().fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\ncommon_words = get_top_n_words(df['Review Text'], 20)\nfor word, freq in common_words:\n    print(word, freq)\ndf1 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\ndf1.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\nkind='bar', yTitle='Count', linecolor='black', title='Top 20 words in review before removing stop words')\n\n```", "```py\n\ndef get_top_n_words(corpus, n=None):\n    vec = CountVectorizer(stop_words = 'english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\ncommon_words = get_top_n_words(df['Review Text'], 20)\nfor word, freq in common_words:\n    print(word, freq)\ndf2 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\ndf2.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\nkind='bar', yTitle='Count', linecolor='black', title='Top 20 words in review after removing stop words')\n\n```", "```py\n\ndef get_top_n_bigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\ncommon_words = get_top_n_bigram(df['Review Text'], 20)\nfor word, freq in common_words:\n    print(word, freq)\ndf3 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\ndf3.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\nkind='bar', yTitle='Count', linecolor='black', title='Top 20 bigrams in review before removing stop words')\n\n```", "```py\n\ndef get_top_n_bigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(2, 2), stop_words='english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\ncommon_words = get_top_n_bigram(df['Review Text'], 20)\nfor word, freq in common_words:\n    print(word, freq)\ndf4 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\ndf4.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\nkind='bar', yTitle='Count', linecolor='black', title='Top 20 bigrams in review after removing stop words')\n\n```", "```py\n\ndef get_top_n_trigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(3, 3)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\ncommon_words = get_top_n_trigram(df['Review Text'], 20)\nfor word, freq in common_words:\n    print(word, freq)\ndf5 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\ndf5.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\nkind='bar', yTitle='Count', linecolor='black', title='Top 20 trigrams in review before removing stop words')\n\n```", "```py\n\ndef get_top_n_trigram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(3, 3), stop_words='english').fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:n]\ncommon_words = get_top_n_trigram(df['Review Text'], 20)\nfor word, freq in common_words:\n    print(word, freq)\ndf6 = pd.DataFrame(common_words, columns = ['ReviewText' , 'count'])\ndf6.groupby('ReviewText').sum()['count'].sort_values(ascending=False).iplot(\nkind='bar', yTitle='Count', linecolor='black', title='Top 20 trigrams in review after removing stop words')\n\n```", "```py\n\nblob = TextBlob(str(df['Review Text']))\npos_df = pd.DataFrame(blob.tags, columns = ['word' , 'pos'])\npos_df = pos_df.pos.value_counts()[:20]\npos_df.iplot(\n    kind='bar',\n    xTitle='POS',\n    yTitle='count', \ntitle='Top 20 Part-of-speech tagging for review corpus')\n\n```", "```py\n\ny0 = df.loc[df['Department Name'] == 'Tops']['polarity']\ny1 = df.loc[df['Department Name'] == 'Dresses']['polarity']\ny2 = df.loc[df['Department Name'] == 'Bottoms']['polarity']\ny3 = df.loc[df['Department Name'] == 'Intimate']['polarity']\ny4 = df.loc[df['Department Name'] == 'Jackets']['polarity']\ny5 = df.loc[df['Department Name'] == 'Trend']['polarity']\n\ntrace0 = go.Box(\n    y=y0,\n    name = 'Tops',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=y1,\n    name = 'Dresses',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\ntrace2 = go.Box(\n    y=y2,\n    name = 'Bottoms',\n    marker = dict(\n        color = 'rgb(10, 140, 208)',\n    )\n)\ntrace3 = go.Box(\n    y=y3,\n    name = 'Intimate',\n    marker = dict(\n        color = 'rgb(12, 102, 14)',\n    )\n)\ntrace4 = go.Box(\n    y=y4,\n    name = 'Jackets',\n    marker = dict(\n        color = 'rgb(10, 0, 100)',\n    )\n)\ntrace5 = go.Box(\n    y=y5,\n    name = 'Trend',\n    marker = dict(\n        color = 'rgb(100, 0, 10)',\n    )\n)\ndata = [trace0, trace1, trace2, trace3, trace4, trace5]\nlayout = go.Layout(\n    title = \"Sentiment Polarity Boxplot of Department Name\"\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig, filename = \"Sentiment Polarity Boxplot of Department Name\")\n\n```", "```py\n\ny0 = df.loc[df['Department Name'] == 'Tops']['Rating']\ny1 = df.loc[df['Department Name'] == 'Dresses']['Rating']\ny2 = df.loc[df['Department Name'] == 'Bottoms']['Rating']\ny3 = df.loc[df['Department Name'] == 'Intimate']['Rating']\ny4 = df.loc[df['Department Name'] == 'Jackets']['Rating']\ny5 = df.loc[df['Department Name'] == 'Trend']['Rating']\n\ntrace0 = go.Box(\n    y=y0,\n    name = 'Tops',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=y1,\n    name = 'Dresses',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\ntrace2 = go.Box(\n    y=y2,\n    name = 'Bottoms',\n    marker = dict(\n        color = 'rgb(10, 140, 208)',\n    )\n)\ntrace3 = go.Box(\n    y=y3,\n    name = 'Intimate',\n    marker = dict(\n        color = 'rgb(12, 102, 14)',\n    )\n)\ntrace4 = go.Box(\n    y=y4,\n    name = 'Jackets',\n    marker = dict(\n        color = 'rgb(10, 0, 100)',\n    )\n)\ntrace5 = go.Box(\n    y=y5,\n    name = 'Trend',\n    marker = dict(\n        color = 'rgb(100, 0, 10)',\n    )\n)\ndata = [trace0, trace1, trace2, trace3, trace4, trace5]\nlayout = go.Layout(\n    title = \"Rating Boxplot of Department Name\"\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig, filename = \"Rating Boxplot of Department Name\")\n\n```", "```py\n\ny0 = df.loc[df['Department Name'] == 'Tops']['review_len']\ny1 = df.loc[df['Department Name'] == 'Dresses']['review_len']\ny2 = df.loc[df['Department Name'] == 'Bottoms']['review_len']\ny3 = df.loc[df['Department Name'] == 'Intimate']['review_len']\ny4 = df.loc[df['Department Name'] == 'Jackets']['review_len']\ny5 = df.loc[df['Department Name'] == 'Trend']['review_len']\n\ntrace0 = go.Box(\n    y=y0,\n    name = 'Tops',\n    marker = dict(\n        color = 'rgb(214, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=y1,\n    name = 'Dresses',\n    marker = dict(\n        color = 'rgb(0, 128, 128)',\n    )\n)\ntrace2 = go.Box(\n    y=y2,\n    name = 'Bottoms',\n    marker = dict(\n        color = 'rgb(10, 140, 208)',\n    )\n)\ntrace3 = go.Box(\n    y=y3,\n    name = 'Intimate',\n    marker = dict(\n        color = 'rgb(12, 102, 14)',\n    )\n)\ntrace4 = go.Box(\n    y=y4,\n    name = 'Jackets',\n    marker = dict(\n        color = 'rgb(10, 0, 100)',\n    )\n)\ntrace5 = go.Box(\n    y=y5,\n    name = 'Trend',\n    marker = dict(\n        color = 'rgb(100, 0, 10)',\n    )\n)\ndata = [trace0, trace1, trace2, trace3, trace4, trace5]\nlayout = go.Layout(\n    title = \"Review length Boxplot of Department Name\"\n)\n\nfig = go.Figure(data=data,layout=layout)\niplot(fig, filename = \"Review Length Boxplot of Department Name\")\n\n```"]