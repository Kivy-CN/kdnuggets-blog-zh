["```py\nfor i in range(5):\n    print(i)\n```", "```py\nOutput >>>\n\n0\n1\n2\n3\n4\n```", "```py\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor i in range(len(fruits)):\n    print(f\"Index {i}: {fruits[i]}\")\n```", "```py\nOutput >>>\n\nIndex 0: apple\nIndex 1: banana\nIndex 2: cherry\n```", "```py\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor i, fruit in enumerate(fruits):\n    print(f\"Index {i}: {fruit}\")\n```", "```py\nOutput >>>\n\nIndex 0: apple\nIndex 1: banana\nIndex 2: cherry\n```", "```py\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nscores = [95, 89, 78]\n\nfor i in range(len(names)):\n    print(f\"{names[i]} scored {scores[i]} points.\")\n```", "```py\nOutput >>>\n\nAlice scored 95 points.\nBob scored 89 points.\nCharlie scored 78 points.\n```", "```py\nnames = [\"Alice\", \"Bob\", \"Charlie\"]\nscores = [95, 89, 78]\n\nfor name, score in zip(names, scores):\n    print(f\"{name} scored {score} points.\")\n```", "```py\nOutput >>>\n\nAlice scored 95 points.\nBob scored 89 points.\nCharlie scored 78 points.\n```", "```py\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = []\n\nfor num in numbers:\n    squared_numbers.append(num ** 2)\n\nprint(squared_numbers)\n```", "```py\nOutput >>> [1, 4, 9, 16, 25]\n```", "```py\nnumbers = [1, 2, 3, 4, 5]\nsquared_numbers = [num ** 2 for num in numbers]\n\nprint(squared_numbers)\n```", "```py\nOutput >>> [1, 4, 9, 16, 25]\n```", "```py\nnumbers = [1, 2, 3, 4, 5]\nodd_numbers = [num for num in numbers if num % 2 != 0]\n\nprint(odd_numbers)\n```", "```py\nOutput >>> [1, 3, 5]\n```", "```py\nfruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nfruit_lengths = {}\n\nfor fruit in fruits:\n    fruit_lengths[fruit] = len(fruit)\n\nprint(fruit_lengths)\n```", "```py\nOutput >>> {'apple': 5, 'banana': 6, 'cherry': 6, 'date': 4}\n```", "```py\nfruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nfruit_lengths = {fruit: len(fruit) for fruit in fruits}\n\nprint(fruit_lengths)\n```", "```py\nOutput >>> {'apple': 5, 'banana': 6, 'cherry': 6, 'date': 4}\n```", "```py\nfruits = [\"apple\", \"banana\", \"cherry\", \"date\"]\nlong_fruit_names = {fruit: len(fruit) for fruit in fruits if len(fruit) > 5}\n\nprint(long_fruit_names)\n```", "```py\nOutput >>> {'banana': 6, 'cherry': 6}\n```", "```py\nfilename = 'somefile.txt'\nfile = open(filename,'w')\nfile.write('Something')\n```", "```py\nprint(file.closed)\nOutput >>> False\n```", "```py\nfilename = 'somefile.txt'\nfile = open(filename,'w')\nfile.write('Something')\nfile.close()\n```", "```py\nfilename = 'somefile.txt'\nfile = open(filename,'w')\ntry:\n    file.write('Something')\nfinally:\n    file.close()\n```", "```py\nfilename = 'somefile.txt'\nwith open(filename, 'w') as file:\n    file.write('Something')\n\nprint(file.closed)\n```", "```py\nOutput >>> True\n```", "```py\ndef countdown(n):\n    while n > 0:\n        yield n\n        n -= 1\n\n# Using the generator function\nfor num in countdown(5):\n    print(num)\n```", "```py\nOutput >>> \n\n5 \n4 \n3 \n2 \n1\n```", "```py\n# Generator expression to create a sequence of squares\nsquares = (x ** 2 for x in range(1, 6))\n\n# Using the generator expression\nfor square in squares:\n    print(square)\n```", "```py\nOutput >>> \n\n1 \n4 \n9 \n16 \n25\n```", "```py\n# 3D point tuple\ncoordinate = (1, 2, 3)\n\n# Accessing data using tuple unpacking \nx, y, z = coordinate\nprint(f\"X-coordinate: {x}, Y-coordinate: {y}, Z-coordinate: {z}\")\n```", "```py\nOutput >>> X-coordinate: 1, Y-coordinate: 2, Z-coordinate: 3\n```", "```py\nfrom collections import namedtuple\n\n# Define a Coordinate3D namedtuple\nCoordinate3D = namedtuple(\"Coordinate3D\", [\"x\", \"y\", \"z\"])\n\n# Creating a Coordinate3D object\ncoordinate = Coordinate3D(1, 2, 3)\n\nprint(coordinate)\n\n# Accessing data using named fields\nprint(f\"X-coordinate: {coordinate.x}, Y-coordinate: {coordinate.y}, Z-coordinate: {coordinate.z}\")\n```", "```py\nOutput >>>\n\nCoordinate3D(x=1, y=2, z=3)\nX-coordinate: 1, Y-coordinate: 2, Z-coordinate: 3\n```", "```py\nword = \"incomprehensibilities\"\n\n# initialize an empty dictionary to count characters\nchar_counts = {}\n\n# Count character frequencies\nfor char in word:\n    if char in char_counts:\n        char_counts[char] += 1\n    else:\n         char_counts[char] = 1\n\n# print out the char_counts dictionary\nprint(char_counts)\n\n# find the most common character\nmost_common = max(char_counts, key=char_counts.get)\n\nprint(f\"Most Common Character: '{most_common}' (appears {char_counts[most_common]} times)\")\n```", "```py\nOutput >>>\n\n{'i': 5, 'n': 2, 'c': 1, 'o': 1, 'm': 1, 'p': 1, 'r': 1, 'e': 3, 'h': 1, 's': 2, 'b': 1, 'l': 1, 't': 1}\n\nMost Common Character: 'i' (appears 5 times)\n```", "```py\nfrom collections import Counter\n\nword = \"incomprehensibilities\"\n\n# Count character frequencies using Counter\nchar_counts = Counter(word)\n\nprint(char_counts)\n\n# Find the most common character\nmost_common = char_counts.most_common(1)\n\nprint(f\"Most Common Character: '{most_common[0][0]}' (appears {most_common[0][1]} times)\")\n```", "```py\nOutput >>>\n\nCounter({'i': 5, 'e': 3, 'n': 2, 's': 2, 'c': 1, 'o': 1, 'm': 1, 'p': 1, 'r': 1, 'h': 1, 'b': 1, 'l': 1, 't': 1})\nMost Common Character: 'i' (appears 5 times)\n```"]