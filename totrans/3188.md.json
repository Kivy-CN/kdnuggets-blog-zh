["```py\nimport tensorflow as tf\nimport numpy as np\n\ndef convert(v, t=tf.float32):\n    return tf.convert_to_tensor(v, dtype=t)\n\nx = convert(\n    np.array(\n        [\n            (1, 2, 3),\n            (4, 5, 6),\n            (7, 8, 9)\n        ]), tf.int32)\n\nbool_tensor = convert([(True, False, True), (False, False, True), (True, False, False)], tf.bool)\n\nred_sum_0 = tf.reduce_sum(x)\nred_sum = tf.reduce_sum(x, axis=1)\n\nred_prod_0 = tf.reduce_prod(x)\nred_prod = tf.reduce_prod(x, axis=1)\n\nred_min_0 = tf.reduce_min(x)\nred_min = tf.reduce_min(x, axis=1)\n\nred_max_0 = tf.reduce_max(x)\nred_max = tf.reduce_max(x, axis=1)\n\nred_mean_0 = tf.reduce_mean(x)\nred_mean = tf.reduce_mean(x, axis=1)\n\nred_bool_all_0 = tf.reduce_all(bool_tensor)\nred_bool_all = tf.reduce_all(bool_tensor, axis=1)\n\nred_bool_any_0 = tf.reduce_any(bool_tensor)\nred_bool_any = tf.reduce_any(bool_tensor, axis=1)\n\nwith tf.Session() as session:\n    print \"Reduce sum without passed axis parameter: \", session.run(red_sum_0)\n    print \"Reduce sum with passed axis=1: \", session.run(red_sum)\n\n    print \"Reduce product without passed axis parameter: \", session.run(red_prod_0)\n    print \"Reduce product with passed axis=1: \", session.run(red_prod)\n\n    print \"Reduce min without passed axis parameter: \", session.run(red_min_0)\n    print \"Reduce min with passed axis=1: \", session.run(red_min)\n\n    print \"Reduce max without passed axis parameter: \", session.run(red_max_0)\n    print \"Reduce max with passed axis=1: \", session.run(red_max)\n\n    print \"Reduce mean without passed axis parameter: \", session.run(red_mean_0)\n    print \"Reduce mean with passed axis=1: \", session.run(red_mean)\n\n    print \"Reduce bool all without passed axis parameter: \", session.run(red_bool_all_0)\n    print \"Reduce bool all with passed axis=1: \", session.run(red_bool_all)\n\n    print \"Reduce bool any without passed axis parameter: \", session.run(red_bool_any_0)\n    print \"Reduce bool any with passed axis=1: \", session.run(red_bool_any)\n\n```", "```py\nReduce sum without passed axis parameter:  45\nReduce sum with passed axis=1:  [ 6 15 24]\nReduce product without passed axis parameter:  362880\nReduce product with passed axis=1:  [  6 120 504]\nReduce min without passed axis parameter:  1\nReduce min with passed axis=1:  [1 4 7]\nReduce max without passed axis parameter:  9\nReduce max with passed axis=1:  [3 6 9]\nReduce mean without passed axis parameter:  5\nReduce mean with passed axis=1:  [2 5 8]\nReduce bool all without passed axis parameter:  False\nReduce bool all with passed axis=1:  [False False False]\nReduce bool any without passed axis parameter:  True\nReduce bool any with passed axis=1:  [ True  True  True]\n\n```", "```py\n[1 + 2 + 3 = 6, 4 + 5 + 6 = 15, 7 + 8 + 9 = 24]\n\n```", "```py\n[1 + 4 + 7 = 12, 2 + 5 + 8 = 15, 3 + 6 + 9 = 18]\n\n```", "```py\n1 + 4 + 7 = 12, 2 + 5 + 8 = 15, 3 + 6 + 9 = 45\n\n```", "```py\nimport tensorflow as tf\nimport numpy as np\n\ndef convert(v, t=tf.float32):\n    return tf.convert_to_tensor(v, dtype=t)\n\nseg_ids = tf.constant([0, 0, 1, 2, 2])\ntens1 = convert(np.array([(2, 5, 3, -5), (0, 3, -2, 5), (4, 3, 5, 3), (6, 1, 4, 0), (6, 1, 4, 0)]), tf.int32)\ntens2 = convert(np.array([1, 2, 3, 4, 5]), tf.int32)\n\nseg_sum = tf.segment_sum(tens1, seg_ids)\nseg_sum_1 = tf.segment_sum(tens2, seg_ids)\n\nwith tf.Session() as session:\n    print \"Segmentation sum tens1: \", session.run(seg_sum)\n    print \"Segmentation sum tens2: \", session.run(seg_sum_1)\n\n```", "```py\nSegmentation sum tens1:  \n[[ 2  8  1  0]\n [ 4  3  5  3]\n [12  2  8  0]]\n\nSegmentation sum tens2: [3 3 9]\n\n```", "```py\nimport numpy as np\nimport tensorflow as tf\n\ndef convert(v, t=tf.float32):\n    return tf.convert_to_tensor(v, dtype=t)\n\nx = convert(np.array([\n    [2, 2, 1, 3],\n    [4, 5, 6, -1],\n    [0, 1, 1, -2],\n    [6, 2, 3, 0]\n]))\n\ny = convert(np.array([1, 2, 5, 3, 7]))\nz = convert(np.array([1, 0, 4, 6, 2]))\n\narg_min = tf.argmin(x, 1)\narg_max = tf.argmax(x, 1)\nunique = tf.unique(y)\ndiff = tf.setdiff1d(y, z)\n\nwith tf.Session() as session:\n    print \"Argmin = \", session.run(arg_min)\n    print \"Argmax = \", session.run(arg_max)\n\n    print \"Unique_values = \", session.run(unique)[0]\n    print \"Unique_idx = \", session.run(unique)[1]\n\n    print \"Setdiff_values = \", session.run(diff)[0]\n    print \"Setdiff_idx = \", session.run(diff)[1]\n\n    print session.run(diff)[1]\n\n```", "```py\nArgmin = [2 3 3 3]\nArgmax =  [3 2 1 0]\nUnique_values =  [ 1\\.  2\\.  5\\.  3\\.  7.]\nUnique_idx =  [0 1 2 3 4]\nSetdiff_values =  [ 5\\.  3\\.  7.]\nSetdiff_idx =  [2 3 4]\n\n```", "```py\nimport os\nimport numpy as np\nimport tensorflow as tf\n\nccf_train_data = \"train_dataset.csv\"\nccf_test_data = \"test_dataset.csv\"\n\ndataset_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../datasets'))\n\nccf_train_filepath = os.path.join(dataset_dir, ccf_train_data)\nccf_test_filepath = os.path.join(dataset_dir, ccf_test_data)\n\ndef load_data(filepath):\n    from numpy import genfromtxt\n\n    csv_data = genfromtxt(filepath, delimiter=\",\", skip_header=1)\n    data = []\n    labels = []\n\n    for d in csv_data:\n        data.append(d[:-1])\n        labels.append(d[-1])\n\n    return np.array(data), np.array(labels)\n\ntrain_dataset, train_labels = load_data(ccf_train_filepath)\ntest_dataset, test_labels = load_data(ccf_test_filepath)\n\ntrain_pl = tf.placeholder(\"float\", [None, 28])\ntest_pl = tf.placeholder(\"float\", [28])\n\nknn_prediction = tf.reduce_sum(tf.abs(tf.add(train_pl, tf.negative(test_pl))), axis=1)\n\npred = tf.argmin(knn_prediction, 0)\n\nwith tf.Session() as tf_session:\n    missed = 0\n\n    for i in xrange(len(test_dataset)):\n        knn_index = tf_session.run(pred, feed_dict={train_pl: train_dataset, test_pl: test_dataset[i]})\n\n        print \"Predicted class {} -- True class {}\".format(train_labels[knn_index], test_labels[i])\n\n        if train_labels[knn_index] != test_labels[i]:\n            missed += 1\n\n    tf.summary.FileWriter(\"../samples/article/logs\", tf_session.graph)\n\nprint \"Missed: {} -- Total: {}\".format(missed, len(test_dataset))\n\n```", "```py\nimport tensorflow as tf\nimport numpy as np\n\ntest_data_size = 2000\niterations = 10000\nlearn_rate = 0.005\n\ndef generate_test_values():\n    train_x = []\n    train_y = []\n\n    for _ in xrange(test_data_size):\n        x1 = np.random.rand()\n        x2 = np.random.rand()\n        x3 = np.random.rand()\n        y_f = 2 * x1 + 3 * x2 + 7 * x3 + 4\n        train_x.append([x1, x2, x3])\n        train_y.append(y_f)\n\n    return np.array(train_x), np.transpose([train_y])\n\nx = tf.placeholder(tf.float32, [None, 3], name=\"x\")\nW = tf.Variable(tf.zeros([3, 1]), name=\"W\")\nb = tf.Variable(tf.zeros([1]), name=\"b\")\ny = tf.placeholder(tf.float32, [None, 1])\n\nmodel = tf.add(tf.matmul(x, W), b)\n\ncost = tf.reduce_mean(tf.square(y - model))\ntrain = tf.train.GradientDescentOptimizer(learn_rate).minimize(cost)\n\ntrain_dataset, train_values = generate_test_values()\n\ninit = tf.global_variables_initializer()\n\nwith tf.Session() as session:\n    session.run(init)\n\n    for _ in xrange(iterations):\n\n        session.run(train, feed_dict={\n            x: train_dataset,\n            y: train_values\n        })\n\n    print \"cost = {}\".format(session.run(cost, feed_dict={\n        x: train_dataset,\n        y: train_values\n    }))\n\n    print \"W = {}\".format(session.run(W))\n    print \"b = {}\".format(session.run(b))\n\n```", "```py\ncost = 3.1083032809e-05\nW = [[ 1.99049103]\n [ 2.9887135 ]\n [ 6.98754263]]\nb = [ 4.01742554]\n\n```"]