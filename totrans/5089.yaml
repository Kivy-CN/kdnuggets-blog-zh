- en: 'Algorithmia Tested: Human vs Automated Tag Generation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2015/04/algorithmia-tested-automated-tag-generation.html](https://www.kdnuggets.com/2015/04/algorithmia-tested-automated-tag-generation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**By Grant Marshall (ASU).**'
  prefs: []
  type: TYPE_NORMAL
- en: Algorithmia is a new platform that acts as a sort of “marketplace for algorithms”.
    We’ve looked at Algorithmia from a high level [previously](/2015/04/algorithmia-marketplace-innovation.html),
    so today we’re going to get hands-on and see how Algorithmia actually works from
    an applications perspective.
  prefs: []
  type: TYPE_NORMAL
- en: Our goal is to compare KDnuggets tags on articles from 2014 (a subset of [all
    KDnuggets tags](/tags)) to the tags generated by an automatic tagging algorithm
    hosted on Algorithmia. We’ll first use Algorithmia as a client, sending scraped
    articles to the Algorithmia API and receiving generated tags. Then, we will use
    Algorithmia as a developer, writing an algorithm for frequent itemset generation
    to get multi-word tags. Then we will use this algorithm and see how the platform
    works end-to-end. Finally, we’ll look at the resulting tags and see how machine
    generated tags compare to our handmade tags.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hand-tagged word cloud](../Images/13d5f5fca84330ee92de324708ccc489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig 1: Word Cloud from KDnuggets 2014 Hand-Generated Tags'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scraping KDnuggets and Accessing Algorithmia**'
  prefs: []
  type: TYPE_NORMAL
- en: Before we can generate tags, we need documents to tag. Using `urllib2` and `beautifulsoup`,
    this is a fairly straightforward task in Python. The gist for the code used to
    do this can be found [here](https://gist.github.com/gr-a-m/9ad82833500bb7176dbf).
  prefs: []
  type: TYPE_NORMAL
- en: This code first scrapes the KDnuggets articles, and then passes the article
    to the [AutoTagUrl](https://algorithmia.com/algorithms/tags/AutoTagURL) algorithm
    on Algorithmia using `urllib2`. The same tools you use to write API-aware applications
    in Python are the same things you’d use to target Algorithmia, making this whole
    process very easy if you have any experience writing these kinds of applications.
    Once these tags are generated, a TSV file is outputted with the links, hand-made
    tags, and machine-generated tags.
  prefs: []
  type: TYPE_NORMAL
- en: '**Writing on Algorithmia**'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting tags looked good, but there was one glaring problem – they consisted
    only of single words. The `AutoTagUrl` algorithm depends on Mallet’s implementation
    of LDA, meaning that the output will take the form of the most representative
    word from each topic. What’s nice about Algorithmia is the emphasis on open source,
    which let me see that this is how the algorithm was performed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Generated-tags cloud](../Images/c9b89d483a6f9a52311742189d3ecc5c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig 2: Tag Cloud from Machine-Generated Tags'
  prefs: []
  type: TYPE_NORMAL
- en: Never fear, by using a frequent itemset algorithm, we can group together co-occurring
    terms to recover multi-word tags like “Data Mining”. To do this task, I simply
    implemented a naïve version of the Apriori algorithm in Python on Algorithmia.
    I used their online editor, which proved to be much more refined than most others
    that I’ve used previously. The way the algorithms act like `[pip](https://pip.pypa.io/en/stable/)`
    projects makes handling dependencies easy as well. You can see my resulting algorithm
    implemented on Algorithmia [here](https://algorithmia.com/algorithms/GrantMarshall/FrequentItemsets).
  prefs: []
  type: TYPE_NORMAL
- en: '![Generated-tags with itemsets cloud](../Images/20a8a782225d1bb9cb5b2818433ecad4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig 3: Tag Cloud from Machine-Generated Tags with Frequent Itemsets'
  prefs: []
  type: TYPE_NORMAL
- en: '**Adding Itemsets**'
  prefs: []
  type: TYPE_NORMAL
- en: With our freshly minted algorithm written and published on Algorithmia, we now
    must access the algorithm to add the newer tags. This works in the same way as
    accessing the API provided by `AutoTagUrl`. The script for taking the output from
    our scraping, passing it into the Apriori algorithm, and getting the new itemset-based
    tags, can be found [here](https://gist.github.com/gr-a-m/ed6327966b99dedef365).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Retrieval Augmented Generation: Where Information Retrieval Meets…](https://www.kdnuggets.com/retrieval-augmented-generation-where-information-retrieval-meets-text-generation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bark: The Ultimate Audio Generation Model](https://www.kdnuggets.com/2023/05/bark-ultimate-audio-generation-model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Future of AI: Exploring the Next Generation of Generative Models](https://www.kdnuggets.com/2023/05/future-ai-exploring-next-generation-generative-models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unveiling Midjourney 5.2: A Leap Forward in AI Image Generation](https://www.kdnuggets.com/2023/06/unveiling-midjourney-52-leap-forward.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text-2-Video Generation: Step-by-Step Guide](https://www.kdnuggets.com/2023/08/text2video-generation-stepbystep-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Retrieval Augment Generation Makes LLMs Smarter](https://www.kdnuggets.com/how-retrieval-augment-generation-makes-llms-smarter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
