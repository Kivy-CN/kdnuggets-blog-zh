- en: How to Optimize SQL Queries for Faster Data Retrieval
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/164222626d74bf6e1b3a054356161524.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: SQL (Structured Query Language), as you probably, know, helps you collect data
    from databases.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: It is specifically designed for that. In other words, it works with rows and
    columns, allowing you to manipulate data from databases using SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: What is SQL Query?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A SQL query is a bunch of instructions you give to the database to collect information
    from it.
  prefs: []
  type: TYPE_NORMAL
- en: You can collect and manipulate data from the database by using these queries.
  prefs: []
  type: TYPE_NORMAL
- en: By using them, you can create reports, perform data analysis, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Due to these queries' form and length, execution times might be significant,
    primarily if you work with larger data tables.
  prefs: []
  type: TYPE_NORMAL
- en: Why Do We Need SQL Query Optimization?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL query optimization's purpose is to make sure you efficiently use the resources.
    In plain English, it reduces execution time, saves costs, and improves performance.
    It is an important skill for developers and data analysts. It’s not only important
    to return the right data from the database. It’s also important to know how efficiently
    you do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should always ask yourself: “Is there a better way to write my query?”'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk more in-depth about the reasons for that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Resource efficiency**: Poorly optimized SQL queries would consume excessive
    system resources, like CPU and memory. This might lead to reduced overall system
    performance. Optimizing SQL queries ensures these resources are used efficiently.
    This, in turn, leads to better performance and scalability.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Reduced execution time**: If the queries run slowly, this will negatively
    impact user experience. Or on an application performance if you have an application
    running. Optimizing queries can help reduce execution time, providing faster response
    times and a better user experience.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cost savings:** Optimized queries can diminish the hardware and infrastructure
    needed to support the database system. This can lead to cost savings in hardware,
    energy, and maintenance costs.'
  prefs: []
  type: TYPE_NORMAL
- en: Check out “[Best Practices to Write SQL Queries](https://www.stratascratch.com/blog/best-practices-to-write-sql-queries-how-to-structure-your-code/?utm_source=blog&utm_medium=click&utm_campaign=kdn+optimize+sql+queries)”
    that can help you find out how your code structure can be improved, even if it
    is correct.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Query Optimization Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s the overview of the SQL query optimization techniques we’ll cover in
    this article.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/19c39f9909d480fde0965e046fa9c692.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Here's the flowchart that shows the suggested steps to follow when optimizing
    the SQL query. We will follow the same approach in our examples.  It's worth noting
    that optimization tools can also help improve query performance. So, let's explore
    these techniques by beginning with the well-known SQL command, SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/83bc85102717f9785edc955128d9e1a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Use SELECT With Specified Fields Instead of SELECT *
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you use SELECT *, it will return all the rows and all the columns from
    the table(s). You need to ask yourself whether you really need that.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of scanning the whole database, use the specific fields after SELECT.
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we will replace SELECT * with specific column names. As you
    will see, this will reduce the amount of data retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, queries run more quickly since the database must obtain and provide
    the requested columns, not all of the table's columns.
  prefs: []
  type: TYPE_NORMAL
- en: This minimizes the I/O burden on the database, which is especially helpful when
    a table includes lots of columns or plenty of data rows.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the code before the optimization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/ef37bb4735e456e630794c838950c315.png)'
  prefs: []
  type: TYPE_IMG
- en: The total query runtime is 260 msec. This can be improved.
  prefs: []
  type: TYPE_NORMAL
- en: To show you that, I will select only 3 different columns instead of selecting
    all.
  prefs: []
  type: TYPE_NORMAL
- en: You can select the column you need according to your project needs.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And this is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/7dd07451fedb7a309579844433ec465e.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, by defining the fields we want to select, we do not force the
    database to scan all data it has, so the run time is reduced from 260 to 79msec.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine what the difference would be with millions or billions of rows. Or hundreds
    of columns.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid Using SELECT DISTINCT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SELECT DISTINCT is used to return unique values in a specified column. To do
    that, the database engine must scan the entire table and remove duplicate values.
    In many cases, using an alternative approach like GROUP BY can lead to better
    performance due to reducing the number of data processed.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/7fd929898ef89a5f6a0095c009b3d362.png)'
  prefs: []
  type: TYPE_IMG
- en: Our code?? retrieves the unique values in the segment column from the customer
    table. The database engine must process all records in the table, identify duplicate
    values, and return only unique values. This can be costly in terms of time and
    resources, particularly for large tables.
  prefs: []
  type: TYPE_NORMAL
- en: In the alternative version, the following query retrieves the unique values
    in the segment column by using a GROUP BY clause. The GROUP BY clause groups the
    records based on the specified column(s) and returns one record for each group.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/0d7f498479d2c7c0f4459e52f2c1b4fc.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the GROUP BY clause effectively groups the records by the segment
    column, resulting in the same output as the SELECT DISTINCT query.
  prefs: []
  type: TYPE_NORMAL
- en: By avoiding SELECT DISTINCT and using GROUP BY instead, you can optimize SQL
    queries and reduce the total query time from 198 to 62 msec which is more than
    3 times faster.
  prefs: []
  type: TYPE_NORMAL
- en: Avoid Using Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loops might cause your query to be slower since they force the database to go
    through the records one by one.
  prefs: []
  type: TYPE_NORMAL
- en: When possible, use built-in operations and SQL functions, which can take advantage
    of database engine optimizations and process data more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s define a custom function with a loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The code above uses a loop-based approach to calculate the sum of ages for each
    country where the customer segment is 'Corporate'.
  prefs: []
  type: TYPE_NORMAL
- en: It first retrieves a list of distinct countries and then iterates through each
    country using a loop, calculating the sum of the ages of customers in that country.
    This approach can be slow and inefficient, as it processes the data row by row.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now run this function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/443a4d8bf35f207bd0056112c6d42521.png)'
  prefs: []
  type: TYPE_IMG
- en: The runtime with this approach is 198 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see our optimized SQL code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here is its output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/695c2e444db041a42254006aa023cd92.png)'
  prefs: []
  type: TYPE_IMG
- en: In general, the optimized version using a single SQL query will perform better,
    as it takes advantage of the database engine's optimization capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get the same result in our first code, we use a loop in a PL/pgSQL
    function, which is often slower and less effective than doing it with a single
    SQL query. And it forces you to write much more lines of code!
  prefs: []
  type: TYPE_NORMAL
- en: Use Wild Cards Properly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The proper use of wildcards is vital for optimizing SQL queries, especially
    when it comes to matching strings and patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Wildcards are special characters used in SQL queries to find specific patterns.
  prefs: []
  type: TYPE_NORMAL
- en: The most common wildcards in SQL are “%” and ” _”, where “%“ represents any
    sequence of characters and “_” represents a single character.
  prefs: []
  type: TYPE_NORMAL
- en: Using wildcards wisely is important because improper usage can lead to performance
    issues, especially in large databases.
  prefs: []
  type: TYPE_NORMAL
- en: However, using them efficiently can greatly improve the performance of string-matching
    and pattern-matching queries.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see our example.
  prefs: []
  type: TYPE_NORMAL
- en: This query uses the RIGHT() function to extract the last three characters of
    the customer_name column and then checks if it equals 'son'.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/50bb79f387c0bbaf207967fd6593f3ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Although this query achieves the desired result, it is not that efficient because
    the RIGHT() function has to be applied to every row in the table.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s optimize our code by using wildcards.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/1f4c7b3e2e885aea23bb8a9fe980f87f.png)'
  prefs: []
  type: TYPE_IMG
- en: This optimized SQL query uses the LIKE operator and the wildcard “%” to search
    for records where the customer_name column ends with 'son'.
  prefs: []
  type: TYPE_NORMAL
- en: This approach is more efficient because it takes advantage of the database engine's
    pattern-matching capabilities, and it can make better use of indexes if available.
  prefs: []
  type: TYPE_NORMAL
- en: And as we can see, the total query time is reduced from 436 msec to 62 msec,
    which is almost 7 times faster.
  prefs: []
  type: TYPE_NORMAL
- en: Use Top or LIMIT to Limit the Number of Sample Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using TOP or LIMIT to limit the sample results is vital for optimizing SQL queries,
    particularly when dealing with large tables.
  prefs: []
  type: TYPE_NORMAL
- en: These clauses allow you to retrieve only a specified number of records from
    a table rather than all the records, which can be beneficial for performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s retrieve all information from the customer table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/ef37bb4735e456e630794c838950c315.png)'
  prefs: []
  type: TYPE_IMG
- en: When dealing with larger tables, this operation can increase I/O and network
    latency, which might decrease your SQL query performance.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s optimize our code by limiting the output to 10.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/408c8dcaf70162f7f10082c2592ec7b7.png)'
  prefs: []
  type: TYPE_IMG
- en: By limiting output, you will reduce network latency and memory usage and improve
    response time, especially with larger tables. In our example, after SQL query
    optimization, the total query runtime decreased from 260msec to 89msec.
  prefs: []
  type: TYPE_NORMAL
- en: So our query becomes almost 3 times faster.
  prefs: []
  type: TYPE_NORMAL
- en: Use Indexes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This time, we will Identify and create appropriate indexes for the columns used
    in the WHERE, JOIN, and ORDER BY clauses to improve query performance.
  prefs: []
  type: TYPE_NORMAL
- en: By indexing frequently accessed columns, the database can quicker retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s run the following query first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/853a5aaa0d06964a4879b13bb1bdd2da.png)'
  prefs: []
  type: TYPE_IMG
- en: Our query runtime is 259 msec.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to improve on that by creating the index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Great, now let’s run our code again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/0f64e18143aa8147cafa3574a7688843.png)'
  prefs: []
  type: TYPE_IMG
- en: By using idx_segment in INDEX(), the database engine was able to efficiently
    search through the customer table based on the segment column, making the query
    run faster – it reduced the total query time from 259 msec. to 75 msec.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus Section: Use SQL Query Optimization Tools'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to the complexity of long codes and highly complex queries, you might consider
    using query optimization tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'These tools can analyze your query execution plans, identify missing indexes,
    and suggest alternative query structures to help optimize your queries. Some popular
    query optimization tools include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SolarWinds Database Performance Analyzer**: This tool helps you keep an eye
    on and improve database performance. It shows you problems with queries and how
    they are run. It works with different database systems like SQL Server, Oracle,
    and MySQL.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find it [here](https://www.solarwinds.com/database-performance-analyzer?CMP=KNC-TAD-GGL-SW_TK_X_PP_CPC_LD_EN_PBRDB_TIN-XDB&19231722695~147153297809_g_c_solarwinds%20database%20performance%20analyzer-e~640975433012~~p74562349021&s_kwcid=AL!11508!3!640975433012!e!!g!!solarwinds%20database%20performance%20analyzer&ds_cid=71700000103710951&ds_agid=58700008203730912&network=g&device=c&keyword=Solarwinds%20database%20performance%20analyzer&matchtype=e&creative=640975433012&feeditemid=&gad=1&gclid=CjwKCAjwjYKjBhB5EiwAiFdSfo-vO3O-Mg5UZXZDnWSnZS3KSBufeQBaDTkUv64FBjfdMqPoO4OtyBoC4kwQAvD_BwE&gclsrc=aw.ds).
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Query Tuner for SQL Diagnostic Manager**: This tool has advanced features
    for making queries work better, like performance tips, index checking, and showing
    how queries are run. It helps you make SQL queries better by finding and fixing
    issues.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**SQL Server Management Studio (SSMS)**: SSMS has built-in tools for checking
    performance and improving queries, like Activity Monitor, Execution Plan Analysis,
    and Index Tuning Wizard.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**EverSQL:** EverSQL is an online tool that automatically improves your queries
    by looking at the database structure and how queries are run. It gives you advice
    and rewrites your SQL queries to make them work faster.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using SQL query optimization tools and resources is vital to improving your
    queries. With these tools, you can learn how your queries work, find issues, and
    use best practices to get data faster and improve your applications.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to simplify your complex SQL queries, look at this “[How to Simplify
    Complex SQL Queries](https://www.stratascratch.com/blog/how-to-simplify-complex-sql-queries-with-examples/?utm_source=blog&utm_medium=click&utm_campaign=kdn+optimize+sql+queries)”.
  prefs: []
  type: TYPE_NORMAL
- en: Final Notes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The changes we made by optimizing the SQL queries above might seem insignificant
    due to their scale(ms). But as the amount of data you work with grows, these milliseconds
    will increase to seconds, minutes, and possibly even hours. You’ll realize then
    that these SQL query optimization techniques are highly important.
  prefs: []
  type: TYPE_NORMAL
- en: If you seek more, here are the [top 30 SQL Query Interview Questions](https://www.stratascratch.com/blog/top-30-sql-query-interview-questions/?utm_source=blog&utm_medium=click&utm_campaign=kdn+optimize+sql+queries),
    which will help those who want to also prepare for an interview when learning.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Nate Rosidi](https://www.stratascratch.com)** is a data scientist and in
    product strategy. He''s also an adjunct professor teaching analytics, and is the
    founder of [StrataScratch](https://www.stratascratch.com/), a platform helping
    data scientists prepare for their interviews with real interview questions from
    top companies. Connect with him on [Twitter: StrataScratch](https://twitter.com/StrataScratch)
    or [LinkedIn](https://www.linkedin.com/in/nathanrosidi/).'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Retrieval Augmented Generation: Where Information Retrieval Meets…](https://www.kdnuggets.com/retrieval-augmented-generation-where-information-retrieval-meets-text-generation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Optimize Dockerfile Instructions for Faster Build Times](https://www.kdnuggets.com/how-to-optimize-dockerfile-instructions-for-faster-build-times)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Retrieval Augment Generation Makes LLMs Smarter](https://www.kdnuggets.com/how-retrieval-augment-generation-makes-llms-smarter)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Useful Intermediate SQL Queries for Data Science](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
