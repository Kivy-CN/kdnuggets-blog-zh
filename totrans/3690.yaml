- en: 'LangChain 101: Build Your Own GPT-Powered Applications'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/04/langchain-101-build-gptpowered-applications.html](https://www.kdnuggets.com/2023/04/langchain-101-build-gptpowered-applications.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![LangChain 101: Build Your Own GPT-Powered Applications](../Images/0711fa973721b2a2cd780e3a29c65d3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: The success of ChatGPT and GPT-4 have shown how large language models trained
    with reinforcement can result in scalable and powerful NLP applications.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: However, the usefulness of the response depends on the prompt, which led to
    users exploring the prompt engineering space. In addition, most real-world NLP
    use cases need more sophistication than a single ChatGPT session. And here’s where
    a library like LangChain can help!
  prefs: []
  type: TYPE_NORMAL
- en: '[LangChain](https://langchain.readthedocs.io/en/latest/) is a Python library
    that helps you leverage large language models to build custom NLP applications.'
  prefs: []
  type: TYPE_NORMAL
- en: In this guide, we’ll explore what LangChain is and what you can build with it.
    We’ll also get our feet wet by building a simple question-answering app with LangChain.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: What is LangChain?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LangChain, created by [Harrison Chase](https://github.com/hwchase17), is a Python
    library that provides out-of-the-box support to build NLP applications using LLMs.
    You can connect to various data and computation sources, and build applications
    that perform NLP tasks on domain-specific data sources, private repositories,
    and much more.
  prefs: []
  type: TYPE_NORMAL
- en: As of writing this article (in March 2023), the LangChain GitHub repository
    has over 14,000 stars with more than 270 contributors from across the world.
  prefs: []
  type: TYPE_NORMAL
- en: '![LangChain 101: Build Your Own GPT-Powered Applications](../Images/7ae145ae9ae3adccf20b6b3c17f8ef45.png)'
  prefs: []
  type: TYPE_IMG
- en: LangChain Github Star History | Generated on [star-history.com](https://star-history.com/)
  prefs: []
  type: TYPE_NORMAL
- en: 'Interesting applications you can build using LangChain include (but are not
    limited to):'
  prefs: []
  type: TYPE_NORMAL
- en: Chatbots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summarization and Question answering over specific domains
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apps that query databases to fetch info and then process them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agents that solve specific like math and reasoning puzzles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Overview of LangChain Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next let''s take a look at some of the modules in LangChain:'
  prefs: []
  type: TYPE_NORMAL
- en: '![LangChain 101: Build Your Own GPT-Powered Applications](../Images/ae81ebf095966cabeafb4fcf86a501c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: LLM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LLM is the fundamental component of LangChain. It is essentially a wrapper around
    a large language model that helps use the functionality and capability of a specific
    large language model.
  prefs: []
  type: TYPE_NORMAL
- en: Chains
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned, LLM is the fundamental unit in LangChain. However, as the name
    LangChain suggests, you can chain together LLM calls depending on specific tasks.
  prefs: []
  type: TYPE_NORMAL
- en: For example, you may need to get data from a specific URL, summarize the returned
    text, and answer questions using the generated summary.
  prefs: []
  type: TYPE_NORMAL
- en: The chain can also be simple. You may need to read in user input which is then
    used to construct the prompt. Which can then be used to generate a response.
  prefs: []
  type: TYPE_NORMAL
- en: '![LangChain 101: Build Your Own GPT-Powered Applications](../Images/adb321acdc73f888f9fe26e852a544d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Prompts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Prompts are at the core of any NLP application. Even in a ChatGPT session, the
    answer is only as helpful as the prompt. To that end, LangChain provides prompt
    templates that you can use to format inputs and a lot of other utilities.
  prefs: []
  type: TYPE_NORMAL
- en: Document Loaders and Utils
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: LangChain’s **Document Loaders** and **Utils** modules facilitate connecting
    to sources of data and computation, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have a large corpus of text on economics that you'd like to build
    an NLP app over. Your corpus may be a mix of text files, PDF documents, HTML web
    pages, images, and more. Currently, document loaders leverage the Python library
    [Unstructured](https://pypi.org/project/unstructured/) to convert these raw data
    sources into text that can be processed.
  prefs: []
  type: TYPE_NORMAL
- en: The utils module provides Bash and Python interpreter sessions amongst others.
    These are suitable for applications where it’ll help to interact directly with
    the underlying system. Or when we need code snippets to compute a specific mathematical
    quantity or solve a problem instead of computing answers once.
  prefs: []
  type: TYPE_NORMAL
- en: Agents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We mentioned that “chains” can help chain together a sequence of LLM calls.
    In some tasks, however, the sequence of calls is often not deterministic. And
    the next step will likely be dependent on the user input and the response in the
    previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: For such applications, the LangChain library provides “**Agents**” that can
    take actions based on inputs along the way instead of a hardcoded deterministic
    sequence.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the above, LangChain also offers integration with vector databases
    and has memory capabilities for maintaining state between LLM calls, and much
    more.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Question-Answering App with LangChain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we’ve gained an understanding of LangChain, let’s build a question-answering
    app using LangChain in five easy steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 – Setting Up the Development Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get coding, let’s set up the development environment. I assume you
    already have Python installed in your working environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now install the LangChain library using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As we’ll be using OpenAI’s language models, we need to install the OpenAI SDK
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Step 2 – Setting the OPENAI_API_KEY as an Environment Variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, sign into your OpenAI account. Navigate to account settings > **View API
    Keys**. Generate a secret key and copy it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your Python script, use the **os** module and tap into the dictionary of
    environment variables, `os.environ`. Set the "OPENAI_API_KEY" to your to the secret
    API key that you just copied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Step 3 – Simple LLM Call Using LangChain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve installed the required libraries, let's see how to make a simple
    LLM call using LangChain.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, let’s import the OpenAI wrapper. In this example, we’ll use the text-davinci-003
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '“**text-davinci-003**: Can do any language task with better quality, longer
    output, and consistent instruction-following than the curie, babbage, or ada models.
    Also supports [inserting](https://platform.openai.com/docs/guides/completion/inserting-text)
    completions within text.” – [OpenAI Docs](https://platform.openai.com/docs/models/gpt-3-5)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let''s define a question string and generate a response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Step 4 – Creating a Prompt Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s ask another question on the top resources to learn a new programming
    language, say, Golang:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: While this works fine for starters, it quickly becomes repetitive when we’re
    trying to curate a list of resources to learn a list of programming languages
    and tech stacks.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s where prompt templates come in handy. You can create a template that
    can be formatted using one or more input variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create a simple template to get the top k resources to learn any tech
    stack. Here, we use the `k` and `this`  as `input_variables`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Step 5 – Running Our First LLM Chain
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have an LLM and a prompt template that we can reuse across multiple LLM
    calls.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s go ahead and create an LLMChain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now pass in the inputs as a dictionary and run the LLM chain as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summing Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And that’s a wrap! You know how to use LangChain to build a simple Q&A app.
    I hope you’ve gained a cursory understanding of LangChain’s capabilities. As a
    next step, try exploring LangChain to build more interesting applications. Happy
    coding!
  prefs: []
  type: TYPE_NORMAL
- en: References and Further Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[LangChain Documentation](https://langchain.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LangChain Quickstart Guide](https://langchain.readthedocs.io/en/latest/modules/prompts/getting_started.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LangChain Demo + Q&A with Harrison Chase](https://www.youtube.com/watch?v=zaYTXQFR0_s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chase, H. (2022). LangChain [Computer software]. https://github.com/hwchase17/langchain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a technical
    writer who enjoys creating long-form content. Her areas of interest include math,
    programming, and data science. She shares her learning with the developer community
    by authoring tutorials, how-to guides, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Build Your Own PandasAI with LlamaIndex](https://www.kdnuggets.com/build-your-own-pandasai-with-llamaindex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LangChain + Streamlit + Llama: Bringing Conversational AI to Your…](https://www.kdnuggets.com/2023/08/langchain-streamlit-llama-bringing-conversational-ai-local-machine.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Make Large Language Models Play Nice with Your Software…](https://www.kdnuggets.com/how-to-make-large-language-models-play-nice-with-your-software-using-langchain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Make Your Own GPTs with ChatGPT''s GPTs!](https://www.kdnuggets.com/make-your-own-gpts-with-chatgpts-gpts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LangChain Cheat Sheet](https://www.kdnuggets.com/2023/08/langchain-cheat-sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
