- en: 'Converting JSONs to Pandas DataFrames: Parsing Them the Right Way'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](../Images/4c8ffa1017679f5afc34ea6344d20936.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Diving into the world of data science and machine learning, one of the fundamental
    skills you'll encounter is the art of reading data. If you have already some experience
    with it,  you're probably familiar with JSON (JavaScript Object Notation) - a
    popular format for both storing and exchanging data.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Think of how NoSQL databases like MongoDB love to store data in JSON, or how
    REST APIs often respond in the same format.
  prefs: []
  type: TYPE_NORMAL
- en: However, JSON, while perfect for storage and exchange, isn't quite ready for
    in-depth analysis in its raw form. This is where we transform it into something
    more analytically friendly – a tabular format.
  prefs: []
  type: TYPE_NORMAL
- en: So, whether you're dealing with a single JSON object or a delightful array of
    them, in Python's terms, you're essentially handling a dict or a list of dicts.
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore together how this transformation unfolds, making our data ripe
    for analysis ????
  prefs: []
  type: TYPE_NORMAL
- en: Today I’ll be explaining a magic command that allows us to easily parse any
    JSON into a tabular format in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: And it is… pd**.**json_normalize()
  prefs: []
  type: TYPE_NORMAL
- en: So let’s see how it works with different types of JSONs.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Dealing with simple JSONs and lists of JSONs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first type of JSON that we can work with is single-leveled JSONs with a
    few keys and values. We define our first simple JSONs as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: So let’s simulate the need to work with these JSON. We all know there’s not
    much to do in their JSON format. We need to transform these JSONs into some readable
    and modifiable format… which means Pandas DataFrames!
  prefs: []
  type: TYPE_NORMAL
- en: 1.1 Dealing with simple JSON structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to import the pandas library and then we can use the command
    pd.json_normalize(), as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By applying this command to a JSON with a single record, we obtain the most
    basic table. However, when our data is a little bit more complex and presents
    a list of JSONs, we can still use the same command with no further complications
    and the output will correspond to a table with multiple records.
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](../Images/2276b03bfa4c46301c146e806f7236df.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Easy… right?
  prefs: []
  type: TYPE_NORMAL
- en: The next natural question is what happens when some of the values are missing.
  prefs: []
  type: TYPE_NORMAL
- en: 1.2 Dealing with null values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine some of the values are not informed, like for instance, the Income record
    for David is missing. When transforming our JSON into a simple pandas dataframe,
    the corresponding value will appear as NaN.
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](../Images/6f73df019796f8cd437090538bfdee19.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: And what about if I only want to get some of the fields?
  prefs: []
  type: TYPE_NORMAL
- en: 1.3 Selecting only those columns of interest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In case we just want to transform some specific fields into a tabular pandas
    DataFrame, the json_normalize() command does not allow us to choose what fields
    to transform.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, a small preprocessing of the JSON should be performed where we filter
    just those columns of interest.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So, let’s move to some more advanced JSON structure.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Dealing with multiple-level JSONs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When dealing with multiple-leveled JSONs we find ourselves with nested JSONs
    within different levels. The procedure is the same as before, but in this case,
    we can choose how many levels we want to transform. By default, the command will
    always expand all levels  and generate new columns containing the concatenated
    name of all the nested levels.
  prefs: []
  type: TYPE_NORMAL
- en: So if we normalize the following JSONs.
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'We would get the following table with 3 columns under the field skills:'
  prefs: []
  type: TYPE_NORMAL
- en: skills.python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: skills.SQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: skills.GCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and 4 columns under the field roles
  prefs: []
  type: TYPE_NORMAL
- en: roles.project manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: roles.data engineer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: roles.data scientist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: roles.data analyst
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](../Images/61d6d8f305b831a591028a14b9fc22fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: However, imagine we just want to transform our top level. We can do so by specifically
    defining the parameter max_level to 0 (the max_level we want to expand).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The pending values will be maintained within JSONs within our pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](../Images/89e11109652ab5577b6db0630ba4d993.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Dealing with a nested List JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The last case we can find is having a nested List within a JSON field. So we
    first define our JSONs to use.
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: We can effectively manage this data using Pandas in Python. The pd.json_normalize()
    function is particularly useful in this context. It can flatten the JSON data,
    including the nested list, into a structured format suitable for analysis. When
    this function is applied to our JSON data, it produces a normalized table that
    incorporates the nested list as part of its fields.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, Pandas offers the capability to further refine this process. By utilizing
    the record_path parameter in pd.json_normalize(), we can direct the function to
    specifically normalize the nested list.
  prefs: []
  type: TYPE_NORMAL
- en: This action results in a dedicated table exclusively for the list's contents.
    By default, this process will only unfold the elements within the list. However,
    to enrich this table with additional context, such as retaining an associated
    ID for each record, we can use the meta parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](../Images/034c44ebd509147c75c500ce585bf44c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In summary, the transformation of JSON data into CSV files using Python's Pandas
    library is easy and effective.
  prefs: []
  type: TYPE_NORMAL
- en: JSON is still the most common format in modern data storage and exchange, notably
    in NoSQL databases and REST APIs. However, it presents some important analytic
    challenges when dealing with data in its raw format.
  prefs: []
  type: TYPE_NORMAL
- en: The pivotal role of Pandas' pd.json_normalize() emerges as a great way to handle
    such formats and convert our data into pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this guide was useful, and next time you are dealing with JSON, you can
    do it in a more effective way.
  prefs: []
  type: TYPE_NORMAL
- en: You can go check the corresponding Jupyter Notebook in the [following GitHub
    repo.](https://github.com/rfeers/Twitter/blob/main/Python/JSON_to_CSVs.ipynb)
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/josep-ferrer-sanchez/)**[Josep Ferrer](https://www.linkedin.com/in/josep-ferrer-sanchez)****
    is an analytics engineer from Barcelona. He graduated in physics engineering and
    is currently working in the data science field applied to human mobility. He is
    a part-time content creator focused on data science and technology. Josep writes
    on all things AI, covering the application of the ongoing explosion in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Query Your Pandas DataFrames with SQL](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the apply() Method with Pandas Dataframes](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Combining Pandas DataFrames Made Simple](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/01/merge-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/03/3-ways-merge-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Merge Large DataFrames Efficiently with Pandas](https://www.kdnuggets.com/how-to-merge-large-dataframes-efficiently-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
