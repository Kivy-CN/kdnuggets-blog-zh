["```py\nfrom sklearn.datasets import load_iris\niris = load_iris()\n\n```", "```py\n>>> iris.keys()\ndict_keys([‘data’, ‘target’, ‘frame’, ‘target_names’, ‘DESCR’, ‘feature_names’, ‘filename’]) \n\n```", "```py\nfrom sklearn.model_selection import train_test_split #to split data\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.models import Sequential\n\n```", "```py\nX = pd.DataFrame(data = iris.data, columns = iris.feature_names)\nprint(X.head())\n\n```", "```py\ny = pd.DataFrame(data=iris.target, columns = [‘irisType’])\ny.head()\n\n```", "```py\ny.irisType.value_counts()\n\n```", "```py\niris.target_names #it is a key of dictionary iris\n\n```", "```py\nX.info()\n\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.1)\n\n```", "```py\nX_train.var(), X_test.var()\n\n```", "```py\n\ny_train = tf.keras.utils.to_categorical(y_train)\ny_test = tf.keras.utils.to_categorical(y_test)\n\n```", "```py\ny_train[:5,:]\n\n```", "```py\nX_train = X_train.values\n\nX_test = X_test.values\n\n```", "```py\nX_train[0]\n\n```", "```py\nmodel1 = Sequential() #Sequential Object\n\n```", "```py\nmodel1.add( Dense( 64, activation = 'relu', input_shape= X_train[0].shape))\nmodel1.add( Dense (128, activation = 'relu')\nmodel1.add( Dense (128, activation = 'relu')\nmodel1.add( Dense (128, activation = 'relu')\nmodel1.add( Dense (128, activation = 'relu')\nmodel1.add( Dense (64, activation = 'relu')\nmodel1.add( Dense (64, activation = 'relu')\nmodel1.add( Dense (64, activation = 'relu')\nmodel1.add( Dense (64, activation = 'relu')\nmodel1.add( Dense (3, activation = 'softmax')\n\n```", "```py\nmodel1.compile(optimizer='adam', loss= 'categorical_crossentropy', metrics = ['acc'])\n\n```", "```py\nhistory = model1.fit(X_train, y_train, batch_size = 40, epochs=800, validation_split = 0.1\n\n```", "```py\nplt.plot(history.history['acc'])\n\nplt.plot(history.history['val_acc'])\n\nplt.xlabel('Epochs')\n\nplt.ylabel('Acc')\n\nplt.legend(['Training', 'Validation'], loc='upper right')\n\n```", "```py\nplt.plot(history.history['loss'])\n\nplt.plot(history.history['val_loss'])\n\nplt.xlabel('Epochs')\n\nplt.ylabel('Loss')\n\nplt.legend(['Training', 'Validation'], loc='upper left')\n\n```", "```py\nmodel1.evaluate(X_test, y_test)\n\n```", "```py\nmodel2 = Sequential()\nmodel2.add(Dense(64, activation = 'relu', input_shape= X_train[0].shape))\nmodel2.add( Dense(128, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add( Dense (128, activation = 'relu',kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add(tf.keras.layers.Dropout(0.5)\nmodel2.add( Dense (128, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add(Dense(128, activation = 'relu', kernel_regularizer = tf.keras.regularizers.l2(0.001)\n\n))\nmodel2.add( Dense (64, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add( Dense (64, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add(tf.keras.layers.Dropout(0.5)\nmodel2.add( Dense (64, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add( Dense (64, activation = 'relu', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\nmodel2.add( Dense (3, activation = 'softmax', kernel_regularizer=tf.keras.regularizers.l2(0.001)\n))\n\n```", "```py\nmodel2.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['acc'])\nhistory2 = model2.fit(X_train, y_train, epochs=800, validation_split=0.1, batch_size=40)\n\n```", "```py\nmodel2.evaluate(X_test, y_test)\n\n```", "```py\nplt.plot(history2.history['acc'])\n\nplt.plot(history2.history['val_acc'])\n\nplt.title('Accuracy vs. epochs')\n\nplt.ylabel('Acc')\n\nplt.xlabel('Epoch')\n\nplt.legend(['Training', 'Validation'], loc='lower right')\n\nplt.show()\n\n```", "```py\nplt.plot(history2.history['loss'])\n\nplt.plot(history2.history['val_loss'])\n\nplt.title('Loss vs. epochs')\n\nplt.ylabel('Loss')\n\nplt.xlabel('Epoch')\n\nplt.legend(['Training', 'Validation'], loc='upper right')\n\nplt.show()\n\n```"]