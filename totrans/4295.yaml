- en: Software Engineering Best Practices for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/03/software-engineering-best-practices-data-scientists.html](https://www.kdnuggets.com/2021/03/software-engineering-best-practices-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Madison Hunter](https://madison13.medium.com/), Geoscience BSc Undergrad
    Student**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/819721409a44c604cc26e9ec52dd53e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Joonas kääriäinen](https://www.pexels.com/@joonas-kaariainen-67364?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [Pexels](https://www.pexels.com/photo/bridge-with-lights-at-night-240572/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels)
  prefs: []
  type: TYPE_NORMAL
- en: I didn't really understand why people would complain about the code that data
    scientists produce until I began writing data analysis code myself.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Coming from an education in software development, I felt that I had a good grasp
    of coding best practices and I was confident in my ability to write clean code.
    Then it came time for me to write my first data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: You guessed it.
  prefs: []
  type: TYPE_NORMAL
- en: An absence of functions, unclear variable names, spaghetti code, not a single
    hint of a unit test, and a severe lack of style ensued, leaving me with the equivalent
    of a dog’s breakfast to try to reason out after I had gotten my code to work.
  prefs: []
  type: TYPE_NORMAL
- en: At last, I finally understood what all of those engineers were complaining about.
  prefs: []
  type: TYPE_NORMAL
- en: Data science isn’t a field that naturally stems from computer science, and it’s
    reflected in the wide variety of backgrounds that data scientists hold. Many data
    scientists don’t even have a degree in computer science, as they often come from
    other unrelated fields including mathematics, the sciences, engineering, business,
    medicine, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it’s no wonder that data scientists aren’t known for always having
    the cleanest code.
  prefs: []
  type: TYPE_NORMAL
- en: I’m not saying that data scientists need to be able to write entire complex
    libraries. Instead, data scientists should be able to produce clean code that
    can be updated, debugged, and moved into a production environment with few swear
    words coming from the engineering department.
  prefs: []
  type: TYPE_NORMAL
- en: The importance of writing clean code isn’t just for the sake of others either.
    In many companies, the budget isn’t big enough to hire data scientists *and* software
    engineers, which means that data scientists are often responsible for creating
    production-ready code. Therefore, one's own sanity should count as a factor for
    maintaining and developing clean, easy-to-use, and reusable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many will argue that good code is subjective. However, there are generally
    four standards that everyone can agree on that define code written using best
    practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Good code should be efficient — this means that you squeeze every little bit
    of speed and efficiency out of your Python code, even when there is none.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good code is maintainable — this means that you can maintain the code and that
    others can easily understand and maintain your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good code is readable and well-structured — this means that anyone should be
    able to look at your code and understand what you’re trying to accomplish without
    having to try too hard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good code is reliable — clean code is good code, and good code is reliable such
    that it isn’t prone to bugs or random glitches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check out these best practices that you can implement to attain the above four
    standards.
  prefs: []
  type: TYPE_NORMAL
- en: Use descriptive variable names.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’ve often seen data analysis code written using variable names such as x, or
    y, or the English wording for any number of mathematical variables.
  prefs: []
  type: TYPE_NORMAL
- en: While this works when writing out mathematical formulas, it doesn’t come across
    as clearly when you’re reading it in someone’s code.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to data science, I like to say exactly what my variables are.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Anyone who has taken a course in statistics will be able to understand what
    my variables are, and what they are doing in my equations. These basic variables
    can then be made more descriptive when it comes to specific calculations or uses.
  prefs: []
  type: TYPE_NORMAL
- en: The trick is to try to be as descriptive as the situation allows. Of course,
    there will be instances when the computations are so complex that it wouldn’t
    make sense to write such descriptive variables. However, until that time comes,
    try to be descriptive.
  prefs: []
  type: TYPE_NORMAL
- en: Use functions.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Functions, regardless of your programming methodology (object-oriented, functional,
    etc.), are vital to keeping your code clean, concise, readable, and DRY (which
    I’ll talk about later on).
  prefs: []
  type: TYPE_NORMAL
- en: Functions aren’t always intuitive for non-computer-science-graduate-data-scientists
    because code will run correctly without them.
  prefs: []
  type: TYPE_NORMAL
- en: However, the best programmers are said to be the laziest programmers. Why? Because
    they write the least amount of code and often write the cleanest code to produce
    a solution. They work as little as possible to get their code to work and they
    often produce the most concise solutions. This involves using functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some tips on how to write great functions that keep your code clean:'
  prefs: []
  type: TYPE_NORMAL
- en: The function should only do one thing. Not 10\. Not 20\. Just one thing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions should be small. Some argue that functions should contain no more
    than 20 lines of code, but this is an arbitrary number. Try your best to keep
    your functions short and to the point.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functions should be written so you can read them and understand their logic
    in a top-to-bottom fashion — just like how you read a book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try to keep the number of function arguments to a minimum (less than 3 is preferred).
    If you’re requiring more than three function arguments, ask yourself if the function
    is only completing one task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure the logic found within functions is properly indented and that the
    code for the entire function is properly blocked. This will help others see what
    code is inside the function, and where the function starts and stops.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use descriptive names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use comments and write proper supporting documentation.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It can be easy to overlook this step when you’re in the middle of building life-altering
    models, but the fact remains that if no one else can use them, then how life-altering
    are they really?
  prefs: []
  type: TYPE_NORMAL
- en: 'My personal rule of thumb for comments:'
  prefs: []
  type: TYPE_NORMAL
- en: Write a comment at the top of the code file, giving a brief description of the
    goal of the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a comment at the top of each function describing its inputs, outputs,
    and what logic it's performing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a comment at the top of any logic that I don’t totally understand so I
    can better organize my thoughts. This helps during debugging and code refactoring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When it comes to writing proper supporting documentation, your documentation
    doesn’t have to be any more elaborate than a READme file. At its most basic, good
    documentation should include:'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instructions on how to install and use the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explain tricky parts of your code in long-form, taking time to describe exactly
    what the code does line by line, and perhaps even why you elected to write your
    code that way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screenshots to help with debugging and troubleshooting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Helpful links to external supporting documentation that can further describe
    and explain parts of your logic or code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a consistent coding style and become familiar with the syntax conventions
    for the languages you use.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I’m guilty of not always following the proper conventions for a given language.
  prefs: []
  type: TYPE_NORMAL
- en: After primarily learning to code in C# when I was in university, I became familiar
    and comfortable with its conventions and I then went on to very lazily apply those
    same conventions to every other language I came across.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t be like me. Instead, take the time to learn the syntax conventions of
    each new language, and force yourself to use those conventions properly. This
    will not only help you immerse yourself in the language, but it will also help
    you write cleaner code, and will help you communicate with other developers using
    the same language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of code that completes the same function, written using two
    different languages and the appropriate conventions for each (keep in mind that
    there is a lack of indentation caused by this formatting):'
  prefs: []
  type: TYPE_NORMAL
- en: 'C#:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This silly code doesn’t really do much of anything, but it kind of gives you
    an idea about how different the conventions are for each language.
  prefs: []
  type: TYPE_NORMAL
- en: Use libraries.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using pre-existing libraries is a huge time saver, especially when it comes
    to coding data analyses. Python is chock full of libraries that can handle every
    request a data scientist could throw at it. Not only are these libraries already
    coded for you, but they’ve already been debugged and are production-ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out this article that outlines the [top data science libraries](https://towardsdatascience.com/top-10-python-libraries-for-data-science-cd82294ec266) and
    their abilities. I’ve summarized it here, focusing on the seven libraries I’ve
    found most useful:'
  prefs: []
  type: TYPE_NORMAL
- en: NumPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Basic array operations: add, multiply, slice, flatten, reshape, index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advanced array operations: stack arrays, split into sections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linear algebra.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indexing, manipulating, renaming, sorting, and merging data frames.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic CRUD (Update, Add Delete) functionalities on columns from a data frame.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input missing files and handle missing data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create histograms or box plots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All data visualizations, including line plots, scatter plots, bar charts, histograms,
    pie charts, stem plots, and spectrograms, to name a few.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TensorFlow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Voice and sound recognition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sentiment analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Face recognition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time series.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video detection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Seaborn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Determine correlations between variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze uni-variate or bi-variate distributions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plot linear regression models for dependent variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SciPy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Common scientific computing, including linear algebra, interpolation, statistics,
    calculus, and ordinary differential equations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scikit-Learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Supervised and unsupervised learning algorithms for classification, clustering,
    regression, dimensionality, model selection, and pre-processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a good IDE.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jupyter is not meant to write production-ready code.
  prefs: []
  type: TYPE_NORMAL
- en: While there are ways to wrangle Jupyter Notebooks into creating production-ready
    code, I find that it’s just easier to use it for the early stages of data exploration
    and analysis, and then developing the production-level code in a proper IDE.
  prefs: []
  type: TYPE_NORMAL
- en: IDEs come with simple tools that help keep your code clean, such as code linting,
    auto-formatting, syntax highlighting, lookup functionality, and error catching.
    Furthermore, there are tons of extensions for IDEs that can help save you time
    while writing code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some IDEs you can check out include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Visual Studio Code](https://code.visualstudio.com/) (my personal favorite)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyCharm](https://www.jetbrains.com/pycharm/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Atom](https://ide.atom.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Spyder](https://www.spyder-ide.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep your code DRY.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DRY (Don’t Repeat Yourself) is a software engineering best practice that aims
    to keep your code clean, concise, and to the point.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is to not repeat any code. What this means, is that if you’re noticing
    that you’re writing the same lines of code over and over, you need to turn that
    code into a function that you only write once. This function can then be called
    multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re having trouble keeping your code DRY, just use [my favorite rule](https://codeburst.io/clean-code-functions-475fe755c4f1):'
  prefs: []
  type: TYPE_NORMAL
- en: If this is the first time, code it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the second time, copy it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this is the third time, make it a function or a class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write unit tests.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Unit testing](https://www.guru99.com/unit-testing-guide.html) is a type of
    software testing that involves testing individual components in the code. Unit
    tests are written to ensure that each piece of code performs as expected. The
    tests are written so that a small section of code executing a particular functionality
    is tested to ensure that it is completing its job accurately. The “units” that
    are tested could be individual functions, procedures, or entire objects.'
  prefs: []
  type: TYPE_NORMAL
- en: A great example of unit testing would be to test how a function responds upon
    receiving different argument types. The results of this test would ensure that
    you’ve planned for every eventuality and that the function won’t throw any un-explained
    errors later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out this article by Microsoft on how to write unit tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Best practices for writing unit tests - .NET**'
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous benefits to writing unit tests; they help with regression,
    provide documentation, and facilitate…](https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices)
  prefs: []
  type: TYPE_NORMAL
- en: While this article only describes how to write unit tests in C#, the lessons
    and examples apply to any language.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t become obsessed with one-liner solutions.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One-liner solutions are great if you want to impress your friends or if you
    want to write a viral article on Medium. Who doesn’t want to trade stocks using
    one line of code?
  prefs: []
  type: TYPE_NORMAL
- en: While it’s impressive to create a solution using one line of code, you’re also
    opening yourself up to a world of hurt when it comes to debugging and refactoring
    your code.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, try to keep it to one or two function calls per line, and make sure
    your logic is easily understandable to anyone reading your code. If you can’t
    explain what a line of code is doing in simple terms, you’ve probably made that
    one line too complicated.
  prefs: []
  type: TYPE_NORMAL
- en: It must be said that the number of lines of code that a developer writes is
    not a good indication of their ability or prowess — don’t listen to anyone who
    tells you otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Final thoughts.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This article highlights the most important best practices that data scientists
    can implement to make their code production-ready.
  prefs: []
  type: TYPE_NORMAL
- en: Your code is your responsibility, so it makes sense to take some time to ensure
    that you’re writing code that is efficient, simple, and easily understandable.
    While there are tons of other tips and tricks for writing clean code, the ones
    listed above are the most simple ones that you can apply starting today.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Madison Hunter](https://madison13.medium.com/)** is a Geoscience BSc
    undergrad student, Software Dev graduate. Madison produces ramblings about data
    science, the environment, and STEM.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/software-engineering-best-practices-for-data-scientists-4c199ede6e03).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Software Engineering Tips and Best Practices for Data Science](/2020/10/software-engineering-best-practices-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[15 Habits I Learned from Highly Effective Data Scientists](/2021/03/15-habits-learned-from-highly-effective-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Software engineering fundamentals for Data Scientists](/2020/06/software-engineering-fundamentals-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Software Developer vs Software Engineer](https://www.kdnuggets.com/2022/05/software-developer-software-engineer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Integrating ChatGPT Into Data Science Workflows: Tips and Best Practices](https://www.kdnuggets.com/2023/05/integrating-chatgpt-data-science-workflows-tips-best-practices.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Warehousing and ETL Best Practices](https://www.kdnuggets.com/2023/02/data-warehousing-etl-best-practices.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[11 Best Practices of Cloud and Data Migration to AWS Cloud](https://www.kdnuggets.com/2023/04/11-best-practices-cloud-data-migration-aws-cloud.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Visualization Best Practices & Resources for Effective Communication](https://www.kdnuggets.com/2023/04/data-visualization-best-practices-resources-effective-communication.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Best Practices for Data Science Team Collaboration](https://www.kdnuggets.com/2023/06/5-best-practices-data-science-team-collaboration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
