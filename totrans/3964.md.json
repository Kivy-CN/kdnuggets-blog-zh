["```py\ndata = input(\"Enter your data: \")\nwhile len(data) > 0:\n    print(\"You entered:\", data)\n    data = input(\"Enter your data: \")\n```", "```py\nwhile (data := input(\"Enter your data: \")) != \"\":\n    print(\"You entered:\", data)\n```", "```py\n# Function to compute profit\ndef compute_profit(sales, cost):\n\treturn sales - cost\n\n# Without Walrus Operator\nsales_data = [(100, 70), (200, 150), (150, 100), (300, 200)]\nprofits = [compute_profit(sales, cost) for sales, cost in sales_data if compute_profit(sales, cost) > 50]\n```", "```py\n# Function to compute profit\ndef compute_profit(sales, cost):\n\treturn sales - cost\n\n# With Walrus Operator\nsales_data = [(100, 70), (200, 150), (150, 100), (300, 200)]\nprofits = [profit for sales, cost in sales_data if (profit := compute_profit(sales, cost)) > 50]\n```", "```py\n# Function to compute profit\ndef compute_profit(sales, cost):\n    return sales - cost\n\n# Messy list comprehension with nested walrus operator\nsales_data = [(100, 70), (200, 150), (150, 100), (300, 200)]\nresults = [\n\t(sales, cost, profit, sales_ratio)\n\tfor sales, cost in sales_data\n\tif (profit := compute_profit(sales, cost)) > 50\n\tif (sales_ratio := sales / cost) > 1.5\n\tif (profit_margin := (profit / sales)) > 0.2\n]\n```", "```py\n# Example of nested walrus operators \nvalues = [5, 15, 25, 35, 45]\nthreshold = 20\nresults = []\n\nfor value in values:\n    if (above_threshold := value > threshold) and (incremented := (new_value := value + 10) > 30):\n        results.append(new_value)\n\nprint(results)\n```"]