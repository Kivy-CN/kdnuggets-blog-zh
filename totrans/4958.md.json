["```py\ndatagen = ImageDataGenerator(  # augment images\n    width_shift_range=0.1,  \n    height_shift_range=0.1, \n    horizontal_flip=True)   \n\ndatagen.fit(x_train)\n\nmodel.fit_generator(datagen.flow(x_train, y_train, batch_size=batch_size),\n    steps_per_epoch=x_train.shape[0] \n    epochs=epochs,\n    validation_data=(x_test, y_test))\n```", "```py\nt_loss = (train_samples >> augment >> rerange >> Shuffle(100) >> \n          build_batch >> network.train() >> Mean())\nprint \"training loss  :\", t_loss\n```", "```py\nrerange = TransformImage(0).by('rerange', 0, 255, 0, 1, 'float32')\n\naugment = (AugmentImage(0)\n           .by('identical', 1.0)\n           .by('brightness', 0.1, [0.7, 1.3])\n           .by('fliplr', 0.1)))\n\nbuild_batch = (BuildBatch(BATCH_SIZE)\n               .by(0, 'image', 'float32')\n               .by(1, 'one_hot', 'uint8', NUM_CLASSES))           \n\nnetwork = KerasNetwork(model)\n```", "```py\n@nut_function\ndef AdjustBrightness(image, c):\n  return image * c\n\n... images >> AdjustBrightness(1.1) >> ...  \n```"]