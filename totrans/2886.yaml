- en: 'Version Control for Data Science: Tracking Machine Learning Models and Datasets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/09/version-control-data-science-tracking-machine-learning-models-datasets.html](https://www.kdnuggets.com/2019/09/version-control-data-science-tracking-machine-learning-models-datasets.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Vipul Jain](https://www.linkedin.com/in/jnvipul/), Applied Data Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/087fa3073bbf35d2492f21ed229949b3.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Undoubtedly, GIT is the holy grail of versioning systems! Git is great in versioning
    the source code. But unlike software engineering, Data Science projects have additional
    big-ass files like datasets, trained model files, label-encodings etc. which can
    easily go to the size of a few GBs and therefore cannot be tracked using GIT.
  prefs: []
  type: TYPE_NORMAL
- en: Tell me the Solution?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The amazing bunch of people at [https://dvc.org/](https://dvc.org/) have created
    this tool called `DVC`. DVC helps us to version large data files, similar to how
    we version control source code files using `git`. Also, `DVC` works flawlessly
    on top of `GIT` which makes it even better!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bdc40ca7358e34d28a4f291c467d8203.png)'
  prefs: []
  type: TYPE_IMG
- en: Most of the time, tracking of datasets and models are ignored in Data Science
    workflows. Now with DVC we can track all the artifacts — which will make Data
    Scientists a lot more productive, as we don’t have to manually keep track of what
    we did to achieve the state, and also we don’t lose time in the processing of
    data and building models to reproduce the same state.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/bfb92778ee5471adefb6bd60f869ac2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Benefits Of DVC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tracks large files easily — which makes reusability and reproducibility a piece
    of cake
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git compatible — Works on top of git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage agnostic — Supports GCS/S3/Azure and many more to store data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s get started!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installation is quite straight-forward with the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To verify the installation, type `dvc` in the terminal and if you see a bunch
    of DVC command options, you are on the right track.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the demonstration, I will be using the repository [dvc-sample](https://github.com/jnvipul/dvc-sample) with
    the following project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The repository has a simple structure; there is an `src` folder which will have
    the python scripts(version controlled by git) and `artifacts` folder which will
    have all the datasets, model files and rest of the artifacts(which are bigger
    and need to be controlled by `dvc`).
  prefs: []
  type: TYPE_NORMAL
- en: Initializing dvc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing we have to do is to initialize `dvc` in the root of the project.
    We do it with the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: (This is very similar to git init, we only have to do it once while setting
    up the project)
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we have added dvc support to the project. But we still have
    to specify the folders which we want to version control using `dvc`. In this example,
    we will be versioning`artifacts` folder. We do it using the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The above statement did two things -:'
  prefs: []
  type: TYPE_NORMAL
- en: Specify which folder we want to track using `dvc`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (Creating a metafile `artifacts.dvc`)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Add the same folder to `.gitignore`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (As we don’t want to track the folder with git anymore)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After executing the above command, `dvc` tells us to add the above two files
    to `git`
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/411e48a22caf93a0a51ce94fba61c62c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we add these files to git using the commands below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: An important thing to note here is: the meta-files of artifacts folder
    are tracked by `git` and actual artifacts files are tracked by `dvc`. In this
    case, `artifacts.dvc` is tracked by git, and contents inside `artifacts` folder
    are tracked by dvc.'
  prefs: []
  type: TYPE_NORMAL
- en: It's okay if this is not very clear now, we will look at it closely later on.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have added `*dvc*` to our project along with git and have
    also added the folder which we want to track using dvc.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now let’s look at a typical Machine Learning workflow(simplified version):'
  prefs: []
  type: TYPE_NORMAL
- en: We have a dataset
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do some preprocessing on the above dataset using a python script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We train a model using a python script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have a model file which is the output of step #3'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Above is a repetitive process; as we use multiple datasets, with a different
    set of preprocessing pipelines, to build and test various Machine Learning models.
    And this is what we want to version control in order to easily reproduce the previous
    versions whenever required.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'For the above scenario, we are tracking #2 and #3 using `git` as these are
    smaller code files. And track #1 and #4 using `dvc`, as these could be pretty
    big in size(up to a few GBs)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Have a look at the directory structure again for more clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: For simplicity, at any given point — the content of each of the above 4 files
    will be the version they belong to.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s say we have written 1st version of the preprocessor and training scripts
    which were used on a dataset to build the model. The 4 files look like this right
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b78b9458f6458dd5d258957ba504ce3e.png)'
  prefs: []
  type: TYPE_IMG
- en: State of files at Version 1
  prefs: []
  type: TYPE_NORMAL
- en: Tracking large files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we have to commit our code and the artifacts(dataset and model files),
    we do it in 3 steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. We track changes in`artifacts` using `dvc`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: (This tracks the latest version of files inside artifacts folder and modifies
    the meta-file `artifacts.dvc`)
  prefs: []
  type: TYPE_NORMAL
- en: 2\. We track changes in code scripts and updated meta-file(artifacts.dvc) using `git`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Tag this state of the project as `experiment01`using `git`
  prefs: []
  type: TYPE_NORMAL
- en: (This will help us to roll back to a version later)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We have successfully saved version 1 of our scripts and the artifacts using `git` and `dvc` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now imagine we are running a new experiment, where we have a different dataset
    and modified scripts. The 4 files look like this right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/754d30a0a887b2bb347ffcfea3bc969a.png)'
  prefs: []
  type: TYPE_IMG
- en: State of files at Version 2
  prefs: []
  type: TYPE_NORMAL
- en: Now we repeat the same 3 steps to track Version 2.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. We track changes in`artifacts` using `dvc`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 2\. We track changes in code scripts and updated meta-file(artifacts.dvc) using `git`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Tag this state of the project as `experiment02`using `git`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: At this stage, we have tracked the scripts and the artifacts of Version 2 as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: Switching versions — Reproducing code and artifacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now comes the real test, its time to see if we can jump to any version of the
    two folders with ease. To start with — let’s see whats the current state of the
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/319bcbd802127c0ede1a329db81f2b40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Current state: Version 2'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see from the contents of the file, we are on Version 2 right now.
  prefs: []
  type: TYPE_NORMAL
- en: (We are looking at contents to for better intuition, in real life, we can look
    at git commit messages or tags)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let’s say we realized that version 1 was better and we want to rollback(the
    scripts, as well as dataset and the model) to version 1\. Let’s see how we can
    do it with just a couple of easy commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. We checkout to the `experiment01` tag
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'After executing the following command, the project state looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/93aa1e8591eb542980bd5e3e9dc6d58b.png)'
  prefs: []
  type: TYPE_IMG
- en: Did you notice anything?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Figure](../Images/271dfc07b1aecf4a8a3d693b054460ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Ref: [https://www.shutterstock.com](https://www.shutterstock.com/)
  prefs: []
  type: TYPE_NORMAL
- en: You can see that the scripts have been changed to Version 1\. Great!
  prefs: []
  type: TYPE_NORMAL
- en: But the artifacts are still on Version 2\. That’s right! This is because, as
    of now, we have checked out using `git` — which has rolled back the version of
    code scripts and the `artifacts.dvc` meta-file. Now as the meta-file is already
    rolled back to the version we want, all we have to do to checkout using `dvc`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will change the files under `artifacts` folder as per the current version(v1)
    of `artifacts.dvc` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the files again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/5e1f68a1b1d1a40500b3c949e0f1a624.png)'
  prefs: []
  type: TYPE_IMG
- en: All the files rolled back to Version1
  prefs: []
  type: TYPE_NORMAL
- en: Hurray! We have successfully rolled back from version 2 to version 1 — for the
    scripts as well as the giant dataset and model files.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/306c72e2ad3b3f97d2cdffdd059dd920.png)'
  prefs: []
  type: TYPE_IMG
- en: To make it simple, we have only looked at working and switching between 2 versions.
    The above process works exactly the same with even a few hundred experiments —
    giving us the power of iterating fast without maintaining manual logs while iterating
    or worrying about reproducing the earlier state of experiments when required.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: DVC is a great tool to version the large files such as datasets and trained
    model files, exactly how we version control source code using git. It helps us
    with the reproducibility of artifacts of different ML experiments, saving us the
    time in processing data and building models.
  prefs: []
  type: TYPE_NORMAL
- en: Other Readings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Python Basics — Classes and Objects](https://medium.com/@jnvipul/python-basics-classes-and-objects-e40cf4e77668)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Basics — Data Structures](https://blog.usejournal.com/python-basics-data-structures-d378d854df1b?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Basics — Handling Exceptions](https://blog.usejournal.com/road-to-become-a-python-ninja-handling-exceptions-afd600a762ec?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cyclical Learning Rates — The ultimate guide for setting learning rates for
    Neural Networks](https://towardsdatascience.com/cyclical-learning-rates-the-ultimate-guide-for-setting-learning-rates-for-neural-networks-3104e906f0ae)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Idiot’s Guide to Precision, Recall and Confusion Matrix](https://medium.com/swlh/idiots-guide-to-precision-recall-and-confusion-matrix-b32d36463556?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Image Recognition Vs Object Detection — The Difference](https://medium.com/swlh/micro-learnings-image-classification-vs-object-detection-the-difference-77110b592343)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Vipul Jain](https://www.linkedin.com/in/jnvipul/)** is a data scientist
    with a focus on machine learning, experience building end-to-end data products
    from ideation to production. Experience building experiment frameworks for A/B
    testing in production. Can effectively present technical concepts to non-technical
    stakeholders.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/version-control-for-data-science-tracking-your-machine-learning-models-and-datasets-aaa61f20bb45).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Automate Tasks on GitHub With Machine Learning for Fun and Profit](/2019/05/automate-tasks-github-machine-learning-fun-profit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Ways to Deal with the Lack of Data in Machine Learning](/2019/06/5-ways-lack-data-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Tips for Dealing With Small Data](/2019/07/7-tips-dealing-small-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Versioning Machine Learning Experiments vs Tracking Them](https://www.kdnuggets.com/2021/12/versioning-machine-learning-experiments-tracking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Best Tools for Machine Learning Experiment Tracking](https://www.kdnuggets.com/2023/02/7-best-tools-machine-learning-experiment-tracking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Developing an Open Standard for Analytics Tracking](https://www.kdnuggets.com/2022/07/developing-open-standard-analytics-tracking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Control Flow Cheat Sheet](https://www.kdnuggets.com/2022/11/python-control-flow-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nota AI releases beta version of NetPresso Model Search, their…](https://www.kdnuggets.com/2022/04/nota-ai-releases-beta-version-netpresso-model-search-hardwareaware-automl-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
