- en: Containerize Python Apps with Docker in 5 Easy Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Docker在5个简单步骤中容器化Python应用程序
- en: 原文：[https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)
- en: '![docker-python](../Images/fa23a3561fe5db961cfd2c366069920d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![docker-python](../Images/fa23a3561fe5db961cfd2c366069920d.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When building applications with Python, you’ll often run into dependency conflicts,
    version mismatches, and the like. With Docker, you can package applications—along
    with the required dependencies, runtime, and config—into a single portable artifact
    called the image. Which you can then use to spin up a Docker container that runs
    the app.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Python构建应用程序时，你常常会遇到依赖冲突、版本不匹配等问题。使用Docker，你可以将应用程序——连同所需的依赖、运行时和配置——打包成一个称为镜像的单一可移植工件。然后，你可以使用这个镜像启动一个运行应用程序的Docker容器。
- en: So whether it is a simple Python application or a data science application,
    Docker makes managing dependencies simpler. This is especially helpful in data
    science projects where you need different libraries and specific versions of 
    these libraries for your application to work without errors. With Docker you can
    have isolated, consistent, and reproducible environments for all your applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 无论是简单的Python应用程序还是数据科学应用程序，Docker都使得管理依赖变得更加简单。这在数据科学项目中特别有用，因为你需要不同的库和这些库的特定版本以确保应用程序没有错误地运行。使用Docker，你可以为所有应用程序创建隔离、一致和可重现的环境。
- en: As a first step in this direction, let's learn how to containerize a Python
    application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作为迈出这一步的第一步，让我们学习如何将Python应用程序容器化。
- en: 'Step 1: Get Started'
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步：开始使用
- en: First, [install Docker](https://docs.docker.com/get-docker/) on the platform
    you use. You can run Docker on Windows, Linux, and MacOs. Here are a couple of
    things you may want to do after you've installed Docker on your machine.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，[在你使用的平台上安装Docker](https://docs.docker.com/get-docker/)。你可以在Windows、Linux和MacOs上运行Docker。以下是安装Docker后你可能需要做的几件事。
- en: 'The Docker daemon binds to a Unix socket, owned by the `root` user by default.
    So you can access it only using `sudo`. To avoid prefixing all your docker commands
    with `sudo`, create a `docker` group add a user to the group like so:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Docker守护进程绑定到一个默认由`root`用户拥有的Unix套接字。因此，你只能使用`sudo`访问它。为了避免在所有Docker命令前加上`sudo`，可以创建一个`docker`组，并像这样将用户添加到该组：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For newer versions of Docker, BuildKit is the default builder. If you're using
    an older version of Docker, however, you may get deprecation warnings when you
    run the `docker build` command. This is because the legacy build client will be
    deprecated in future releases. As a workaround, you can [install buildx](https://github.com/docker/buildx),
    a CLI tool to use BuildKit's capabilities. And use the `docker buildx build` command
    to build with BuildKit.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于较新的Docker版本，BuildKit是默认的构建工具。然而，如果你使用的是较旧版本的Docker，当你运行`docker build`命令时，可能会收到弃用警告。这是因为旧版构建客户端将在未来的版本中被弃用。作为解决方法，你可以[安装buildx](https://github.com/docker/buildx)，这是一个CLI工具，用于使用BuildKit的功能。然后使用`docker
    buildx build`命令来使用BuildKit进行构建。
- en: 'Step 2: Code Your Python Application'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步：编写你的Python应用程序
- en: 'Next, code a Python application which we can containerize using Docker. Here
    we’ll containerize a simple [command-line TO-DO list app](https://github.com/balapriyac/python-projects/blob/main/command-line-app/dockerize/todo.py).
    The code for this app is [on GitHub: todo.py file](http://todo.py).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编写一个Python应用程序，我们可以使用Docker对其进行容器化。在这里，我们将容器化一个简单的[命令行待办事项列表应用程序](https://github.com/balapriyac/python-projects/blob/main/command-line-app/dockerize/todo.py)。该应用程序的代码[在GitHub上：todo.py文件](http://todo.py)。
- en: You can containerize any Python app of your choice or follow along with the
    example we use here. If you’re interested in a step-by-step tutorial on building
    the command-line TO-DO application, read [Build a Command-Line App with Python
    in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将任何你选择的 Python 应用程序容器化，或者按照我们在这里使用的示例进行操作。如果你对逐步教程构建命令行 TO-DO 应用程序感兴趣，请阅读
    [用 Python 在 7 个简单步骤中构建命令行应用程序](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)。
- en: 'Step 3: Create the Dockerfile'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 步：创建 Dockerfile
- en: 'Next, we’ll create a Dockerfile. Think of it as a recipe that defines how to
    build the Docker image for the application. Create a file named `Dockerfile` in
    your working directory with the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个 Dockerfile。把它看作是定义如何为应用程序构建 Docker 镜像的配方。在你的工作目录中创建一个名为 `Dockerfile`
    的文件，内容如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, we use Python 3.11 as the base image. We then set the working directory
    for all the following instructions with the `WORKDIR` command. We then use the
    `COPY` command to copy files from the project into the container’s file system.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 Python 3.11 作为基础镜像。然后我们使用 `WORKDIR` 命令设置所有后续指令的工作目录。接着，我们使用 `COPY`
    命令将项目中的文件复制到容器的文件系统中。
- en: Because we’re containerizing a command-line app, we specify the command to execute
    as `“/bin/bash”`. Which starts an interactive bash shell when we run the image
    and start a container.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们要将一个命令行应用容器化，我们将要执行的命令指定为 `“/bin/bash”`。这样，当我们运行镜像并启动容器时，就会启动一个交互式的 bash
    shell。
- en: 'Step 4: Build the Docker Image'
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 步：构建 Docker 镜像
- en: 'We have our todo.py file and Dockerfile ready. Next, we can build the Docker
    image with the following command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好 todo.py 文件和 Dockerfile。接下来，我们可以使用以下命令构建 Docker 镜像：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'With the `-t` option in the build command, you can specify both a name and
    a tag like so: `docker build -t name:tag .`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用构建命令中的 `-t` 选项，你可以同时指定一个名称和标签，如：`docker build -t name:tag .`
- en: This command builds a Docker image named `todo-app` based on the instructions
    in the `Dockerfile`. The `.` at the end specifies that the build context is the
    current directory.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令根据 `Dockerfile` 中的指令构建一个名为 `todo-app` 的 Docker 镜像。末尾的 `.` 指定了构建上下文为当前目录。
- en: 'The build takes a couple of minutes:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 构建过程需要几分钟：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Step 5: Run Your Docker Container'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 5 步：运行你的 Docker 容器
- en: 'Once the image is built, you can start a Docker container from the built image
    with the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像构建完成，你可以使用以下命令从构建好的镜像启动一个 Docker 容器：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `-it` option is a combination of `-i` and `-t`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`-it` 选项是 `-i` 和 `-t` 的组合：'
- en: The `-i` option is used to run containers interactively and keeps STDIN open
    even if not attached.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-i` 选项用于交互式运行容器，并且即使没有附加，也保持 STDIN 开放。'
- en: The `-t` option allocates a pseudo-TTY. So it provides a terminal interface
    within the container that you can interact with.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-t` 选项分配一个伪 TTY。因此，它在容器内提供一个可以交互的终端界面。'
- en: 'Now, our TO-DO app runs inside the Docker container, and we can interact with
    it at the command line:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 TO-DO 应用程序在 Docker 容器内运行，我们可以在命令行中与之交互：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Wrapping Up
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: And there you have it! You've successfully containerized a command-line Python
    application using Docker. In this tutorial, we looked at containerizing a simple
    Python application using Docker.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！你已经成功地使用 Docker 容器化了一个命令行 Python 应用程序。在这个教程中，我们展示了如何使用 Docker 容器化一个简单的 Python
    应用程序。
- en: We built this application in Python without using any external Python libraries.
    So we did not define a requirements.txt file. The requirements.txt file usually
    lists the various libraries and their versions, which you can install using a
    simple `pip install` command. If you want a tutorial that focuses on Docker for
    data science, check out [Docker Tutorial for Data Scientists](https://www.kdnuggets.com/2023/07/docker-tutorial-data-scientists.html).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Python 中构建了这个应用程序，没有使用任何外部 Python 库。因此我们没有定义 requirements.txt 文件。requirements.txt
    文件通常列出各种库及其版本，你可以使用简单的 `pip install` 命令安装它们。如果你对专注于数据科学的 Docker 教程感兴趣，请查看 [数据科学家的
    Docker 教程](https://www.kdnuggets.com/2023/07/docker-tutorial-data-scientists.html)。
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发者和技术写作者。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编码和喝咖啡！目前，她正在通过编写教程、指南、观点文章等来学习和分享她的知识，与开发者社区互动。Bala
    还创建了引人入胜的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 在 10 个简单步骤中构建 AI 应用](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 在 7 个简单步骤中构建命令行应用](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
- en: '[Python Vector Databases and Vector Indexes: Architecting LLM Apps](https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 向量数据库和向量索引：构建 LLM 应用的架构](https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html)'
- en: '[Beginner’s Guide to Building LLM Apps with Python](https://www.kdnuggets.com/beginners-guide-to-building-llm-apps-with-python)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 构建 LLM 应用的初学者指南](https://www.kdnuggets.com/beginners-guide-to-building-llm-apps-with-python)'
- en: '[Easy Guide To Data Preprocessing In Python](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数据预处理简单指南](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
- en: '[Tick-Tock: Using Pendulum For Easy Date And Time Management In Python](https://www.kdnuggets.com/tick-tock-using-pendulum-for-easy-date-and-time-management-in-python)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Tick-Tock：使用 Pendulum 在 Python 中轻松管理日期和时间](https://www.kdnuggets.com/tick-tock-using-pendulum-for-easy-date-and-time-management-in-python)'
