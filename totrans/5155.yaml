- en: 5 Tricky SQL Queries Solved
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个棘手的 SQL 查询解决方案
- en: 原文：[https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html](https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html](https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html)
- en: '![5 Tricky SQL Queries Solved](../Images/e41f609976ecb9e58bec1bbd218eec5d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![5 个棘手的 SQL 查询解决方案](../Images/e41f609976ecb9e58bec1bbd218eec5d.png)'
- en: '[Sql vector created by freepik - www.freepik.com](https://www.freepik.com/vectors/sql)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sql 向量由 freepik 创建 - www.freepik.com](https://www.freepik.com/vectors/sql)'
- en: SQL(Structured Query Language) is a very important tool in a data scientist’s
    toolbox. Mastering SQL is not only essential in an interview point of view, but
    a good understanding of SQL by being able to solve complex queries will keep us
    above everyone in the race.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQL（结构化查询语言）是数据科学家工具箱中的一个非常重要的工具。掌握 SQL 不仅在面试中至关重要，而且通过能够解决复杂查询的良好理解，会让我们在竞争中脱颖而出。
- en: In this article, I will talk about 5 tricky questions I found and my approaches
    to solve them.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将讨论我找到的 5 个棘手问题及其解决方法。
- en: '**Note — **Each query can be written in different ways. Try to think about
    the approach before moving on to my solutions. You can also suggest different
    approaches in the response section.'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意 —** 每个查询可以用不同的方式编写。在查看我的解决方案之前，尝试思考一下方法。你也可以在回复部分建议不同的方法。'
- en: Query 1
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询 1
- en: We are given a table consisting of two columns, **Name,** and** Profession**.
    We need to query* all the names immediately followed by the first letter in the
    profession column enclosed in parenthesis*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给定了一个包含两列的表，**名称**和**职业**。我们需要查询*所有名称后面紧跟着职业列中的第一个字母，并用括号括起来*。
- en: '![Image](../Images/820325e10e82bd2a333a08bdaad95b9c.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../Images/820325e10e82bd2a333a08bdaad95b9c.png)'
- en: '**My Solution**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的解决方案**'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since we need to combine the name and profession we can use`CONCAT`. We also
    need to have only *one letter* inside the parenthesis. Hence we will use `SUBSTR`and
    pass the column name, start index, end index. Since we need only the first letter
    we will pass 1,1(start index is inclusive and the end index is not inclusive)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要组合名称和职业，可以使用 `CONCAT`。我们还需要在括号中只包含*一个字母*。因此，我们将使用 `SUBSTR` 并传入列名、起始索引、结束索引。由于我们只需要第一个字母，我们将传入
    1,1（起始索引包含，结束索引不包含）
- en: Query 2
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询 2
- en: Tina was asked to compute the average salary of all employees from the EMPLOYEES
    table she created but realized that the zero key in her keyboard is not working
    after the result showed a very less average. She wants our help in finding out
    the difference between miscalculated average and actual average.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Tina 被要求计算她创建的 EMPLOYEES 表中所有员工的平均薪资，但结果显示的平均值非常低，发现键盘上的零键无法工作。她希望我们帮助找出计算错误的平均值与实际平均值之间的差异。
- en: We must write a query finding the error( Actual AVG — Calculated AVG).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须编写一个查询来找出错误（实际 AVG — 计算 AVG）。
- en: '![Image for post](../Images/99c74ba461c52ff24fe191cfe5f9eb34.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/99c74ba461c52ff24fe191cfe5f9eb34.png)'
- en: '**My Solution**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的解决方案**'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A point to note here is that we have only one table that consists of actual
    salary values. To create the error scenario we use `REPLACE` to replace 0’s. We
    will pass the column name, value to be replaced, and the value with which we will
    replace the `REPLACE` method. Then we find the difference in averages using the
    aggregate function `AVG`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们只有一个表，其中包含实际薪资值。为了创建错误场景，我们使用 `REPLACE` 来替换 0。我们将传入列名、要替换的值和替换值。然后，我们使用聚合函数
    `AVG` 来找出平均值的差异。
- en: Query 3
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询 3
- en: We are given a table, which is a [Binary Search Tree](https://en.wikipedia.org/wiki/Binary_search_tree) consisting
    of two columns **Node** and **Parent. **We must write a query that returns the
    node type ordered by the value of nodes in ascending order. There are 3 types.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给定了一个表格，它是一个 [二叉搜索树](https://en.wikipedia.org/wiki/Binary_search_tree)，包含两列
    **节点** 和 **父节点**。我们必须编写一个查询，根据节点值的升序返回节点类型。有 3 种类型。
- en: Root — if the node is a root
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根节点 — 如果该节点是根节点
- en: Leaf — if the node is a leaf
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 叶子节点 — 如果该节点是叶子节点
- en: Inner — if the node is neither root nor leaf.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内部节点 — 如果该节点既不是根节点也不是叶子节点。
- en: '![Image for post](../Images/44f62ec80dd7c87217a7583fb281cb28.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/44f62ec80dd7c87217a7583fb281cb28.png)'
- en: '**My Solution**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的解决方案**'
- en: Upon initial analysis, we can conclude that if a given node N has its corresponding
    P-value as NULL it is the root. And for a given Node N if it exists in the P column
    it is not an inner node. Based on this idea let us write a query.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 经过初步分析，我们可以得出结论，如果给定节点 N 的相应 P 值为 NULL，则它是根节点。如果给定节点 N 存在于 P 列中，则它不是内部节点。基于这一想法，让我们编写一个查询。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can use `CASE` which acts as a switch function. As I mentioned if P is null
    for a given node N then N is the root. Hence we used`CONCAT` for combining the
    node value and label. Similarly, if a given node N is in column P it is an inner
    node. To get all nodes from column P we wrote a subquery which returns all the
    distinct nodes in column P. Since we were asked to order the output by node values
    in ascending order we used the `ORDER BY` Clause.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`CASE`，它作为一个开关函数。正如我提到的，如果P对于给定的节点N为空，则N是根节点。因此，我们使用`CONCAT`来组合节点值和标签。同样，如果一个给定的节点N在列P中，它就是一个内部节点。为了获得列P中的所有节点，我们编写了一个子查询，返回列P中的所有不同节点。由于我们被要求按节点值的升序排序输出，我们使用了`ORDER
    BY`子句。
- en: Query 4
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询 4
- en: We are given a transaction table that consists of **transaction_id, user_id,
    transaction_date, product_id, and quantity**. We need to query the number of users
    who purchased products on multiple days(Note that a given user can purchase multiple
    products on a single day).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给定了一个交易表，包含**transaction_id、user_id、transaction_date、product_id 和 quantity**。我们需要查询那些在多个日期购买产品的用户的数量（注意，一个用户可以在同一天购买多个产品）。
- en: '![Image for post](../Images/3ae645ecd6a7862668cb13e5b007a2c9.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/3ae645ecd6a7862668cb13e5b007a2c9.png)'
- en: '**My Solution**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的解决方案**'
- en: To solve this query, we cannot directly count the occurrence of user_id’s and
    if it is more than one return that user_id because a given user can have more
    than one transaction on a single day. Hence if a given user_id has more than one
    distinct date associated with it means he purchased products on multiple days.
    Following the same approach, I wrote a query. (Inner query)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个查询，我们不能直接计算用户ID的出现次数，如果出现次数多于一个则返回该用户ID，因为一个用户在单一天内可能有多个交易。因此，如果一个用户ID与多个不同的日期相关联，意味着他在多个日期购买了产品。按照相同的方法，我编写了一个查询。（内部查询）
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Since the question asked for the number of user_ids and not the user_id’s itself
    we use `COUNT` in the outer query.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于问题询问的是用户ID的数量而不是用户ID本身，因此我们在外部查询中使用`COUNT`。
- en: Query 5
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查询 5
- en: We are given a subscription table which consists of subscription start and end
    date for each user. We need to write a query that returns true/false for each
    user based on the overlapping of dates with other users. For instance, If user1's
    subscription period overlaps with any other user the query must return **True** for
    user1.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们给定了一个订阅表，其中包含每个用户的订阅开始和结束日期。我们需要编写一个查询，根据日期与其他用户的重叠情况返回每个用户的true/false。例如，如果用户1的订阅期与其他用户重叠，查询必须返回**True**给用户1。
- en: '![Image for post](../Images/ca171480f7cbd202e9aca36df46684db.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/ca171480f7cbd202e9aca36df46684db.png)'
- en: '**My Solution**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的解决方案**'
- en: Upon initial analysis, we understand that we must compare every subscription
    against every other one. Let us consider start and end dates of **userA** as `**startA**` and `**endA**`,
    similarly for **userB**,`**startB**` and `**endB**`**.**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 初步分析后，我们了解到我们必须将每个订阅与其他所有订阅进行比较。让我们将**userA**的开始和结束日期分别记作`**startA**`和`**endA**`，同样地，对于**userB**，分别记作`**startB**`和`**endB**`**。
- en: If `**startA**`**≤**`**endB**`** and **`**endA**`**≥**`**startB**` then we can
    say the two date ranges overlap. Let us take two examples. Let us compare U1 AND
    U3 first.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`**startA**`**≤**`**endB**`**和**`**endA**`**≥**`**startB**`，那么我们可以说这两个日期范围重叠。让我们先比较U1和U3。
- en: '`startA` = 2020–01–01'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`startA` = 2020–01–01'
- en: '`endA` = 2020–01–31'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`endA` = 2020–01–31'
- en: '`startB` = 2020–01–16'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`startB` = 2020–01–16'
- en: '`endB` = 2020–01–26'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`endB` = 2020–01–26'
- en: Here we can see `**startA**`(2020–01–01) is less than `**endB**`**(**2020–01–26)
    and similarly, **endA**(2020–01–31) is greater than `**startB**`(2020–01–16) and
    hence can conclude that the dates overlap. Similarly, if you compare U1 and U4
    the above condition fails and will return false.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到`**startA**`（2020–01–01）小于`**endB**`**（2020–01–26），同样，**endA**（2020–01–31）大于`**startB**`（2020–01–16），因此可以得出日期重叠的结论。类似地，如果你比较U1和U4，上述条件不成立，将返回false。
- en: We must also ensure that a user is not compared to his own subscription. We
    also want to run a left join on itself to match a user with each other user that
    satisfies our condition. We will create two replicas s1 and s2 of the same table
    now.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须确保一个用户不会与自己的订阅进行比较。我们还希望对自身执行左连接，以匹配满足条件的每个其他用户。现在我们将创建两个副本s1和s2。
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Given the conditional join, a user_id from s2 should exist for each user_id
    in s1 on the condition where there exists an overlap between the dates.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于条件连接，s2中的一个user_id应该存在于s1中的每一个user_id上，只要存在日期重叠的情况。
- en: '**Output**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '![Image for post](../Images/85f7bf83f0e6d113639947f141b5cba6.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/85f7bf83f0e6d113639947f141b5cba6.png)'
- en: We can see there exists another user for each user in case the dates overlap.
    For user1 there are 2 rows indicating that he matches with 2 users. For user 4
    the corresponding id is null indicating that he does not match with any other
    user.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping it all together now, we can group by the s1.user_id field and just
    check if any value exists true for a user where s2.user_id IS NOT NULL.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '**Final query**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We used the `CASE` clause to label 1 and 0 depending on the s2.user_id value
    for a given user. The final output looks like this -
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/449b151ef25a57b0838a6082d5becc1b.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: Before concluding, I would like to suggest a good book on SQL which I thoroughly
    enjoyed and found very useful.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[SQL Cookbook: Query Solutions and Techniques for Database Developers (Cookbooks
    (O’Reilly))](https://www.amazon.in/gp/product/B0026OR3KI/ref=as_li_tl?ie=UTF8&camp=3638&creative=24630&creativeASIN=B0026OR3KI&linkCode=as2&tag=kurasaiteja-21&linkId=e1ca4cf824b67c4fff6865a5163712c2)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mastering SQL requires lots of practice. In this article, I took 5 tricky questions
    and explained the approaches to solve them. The specialty of SQL is that each
    query can be written in many different ways. Do feel free to share your approaches
    in the responses. I hope you learned something new today!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to get in touch, **connect with me on **[**LinkedIn**](https://www.linkedin.com/in/saiteja-kura-49803b13b/)**.**
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/towards-artificial-intelligence/5-tricky-sql-queries-solved-919266e2d524).
    Reposted with permission.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '**[Saiteja Kura](https://www.linkedin.com/in/saiteja-kura-49803b13b/)** is
    sincere, friendly, and ambitious, and is interested in Web Development, Data Science,
    and NLP.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Solving 5 Complex SQL Problems: Tricky Queries Explained](https://www.kdnuggets.com/2022/07/5-hardest-things-sql.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Useful Intermediate SQL Queries for Data Science](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Optimize SQL Queries for Faster Data Retrieval](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Speed Up SQL Queries Using Indexes [Python Edition]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用索引加速 SQL 查询 [Python 版]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
- en: '[Leveraging GPT Models to Transform Natural Language to SQL Queries](https://www.kdnuggets.com/leveraging-gpt-models-to-transform-natural-language-to-sql-queries)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[利用 GPT 模型将自然语言转换为 SQL 查询](https://www.kdnuggets.com/leveraging-gpt-models-to-transform-natural-language-to-sql-queries)'
