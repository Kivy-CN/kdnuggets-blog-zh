- en: Genetic Algorithm Key Terms, Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html](https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Genetic algorithms, inspired by natural selection, are a commonly used approach
    to approximating solutions to optimization and search problems. Their necessity
    lies in the fact that there exist problems which are too computationally complex
    to solve in any acceptable (or determinant) amount of time.
  prefs: []
  type: TYPE_NORMAL
- en: Take the well-known [travelling salesman problem](https://en.wikipedia.org/wiki/Travelling_salesman_problem),
    for example. As the number of cities involved in the problem grow, the time required
    for determining a solution quickly becomes unmanageable. Solving the problem for
    5 cities, for example, is a trivial task; solving it for 50, on the other hand,
    would take an amount of time so unreasonable as to never complete.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: It turns out that approximating such optimization problems with genetic algorithms
    is a sensible approach, resulting in reasonable approximations. Genetic algorithms
    have had a place in the machine learning repertoire for decades, but their recent
    revival as tools for optimizing machine learning hyperparameters (and traversing
    neural network architecture search spaces) has brought them to the attention of
    a new generation of machine learning researchers and practitioners.
  prefs: []
  type: TYPE_NORMAL
- en: This article presents simple definitions for 12 genetic algorithm key terms,
    in order to help better introduce the concepts to newcomers.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Genetic Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A genetic algorithm (GA) characterizes potential problem hypotheses using a
    binary string representation, and iterates a search space of potential hypotheses
    in an attempt to identify the "best hypothesis," which is that which optimizes
    a predefined numerical measure, or *fitness*. GAs are, collectively, a subset
    of evolutionary algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Evolutionary Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An evolutionary algorithm (EA) is any type of learning method motivated by their
    obvious and intentional parallels to biological evolution, including, but not
    limited to, genetic algorithms, evolutionary strategies, and genetic programming.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Genetic Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Genetic programming is a specific type of EA which leverages evolutionary learning
    strategies to optimize the crafting of computer code, resulting in programs which
    perform optimally in a predefined task or set of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Population
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a GA, each iteration, or *generation*, results in a series of possible hypotheses
    for best approximating a function, and the population refers to the complete set
    or pool of these generated hypotheses after a given iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Chromosome
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In an obvious nod to biology, a chromosome is a single hypothesis of which many
    make up a population.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Gene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a GA, potential hypotheses are made up of chromosomes, which are, in turn,
    made up of genes. Practically, in a GA, chromosomes are generally represented
    as binary strings, a series of 1s and 0s, which denote inclusion or exclusion
    of particular items represented by position in the string. A gene is a single
    bit within such a chromosome.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the *Hello World* of genetic algorithms is often considered to
    be the [knapsack problem](https://en.wikipedia.org/wiki/Knapsack_problem). In
    this problem, there would be a set of *N* items which may or may not be included
    in a thief's knapsack, and these *N* items would be represented as a binary string
    (the chromosome) *N* characters long, with each position in the string representing
    a particular item and the positional bit (1 or 0; the gene) denoting whether the
    item is included in the particular hypothesis or not.
  prefs: []
  type: TYPE_NORMAL
- en: '*Population* → all of the proposed solutions to the knapsack problem of the
    current generation (iteration of the algorithm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Chromosome* → a particular proposed solution to the knapsack problem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Gene* → positional representation of a particular item (and its inclusion
    or exclusion) in the knapsack of a particular solution to the knapsack problem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 7\. Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In GAs, new sets of hypotheses are formed from previous sets of hypotheses,
    either by selecting some full chromosome (generally of high fitness) to move forward
    to a new generation unscathed (selection), by flipping a bit of an existing full
    chromosome and moving it forward to a new generation (mutation), or, most commonly,
    by breeding child chromosomes for the new generation by using an existing set's
    genes as parents.
  prefs: []
  type: TYPE_NORMAL
- en: A generation, then, is simply the full set of the results of a GA iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Breeding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Breeding refers to what is generally the most common method of creating new
    chromosomes from an existing generation's set of hypotheses, which is using a
    pair of said chromosomes as parents and creating from them new child chromosomes,
    using the crossover method.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a nod to natural selection, the concept of selection is ensuring that the
    best performing (highest fitness) chromosomes are ensured a higher probability
    of being used for breeding the next generation. Often highest performing chromosomes
    may be selected and pushed forward into the new generation without being used
    for breeding, ensuring that subsequent generations of hypotheses will minimally
    perform at the same level of the current generation.
  prefs: []
  type: TYPE_NORMAL
- en: '![GA terms](../Images/b8fe5d206812d4ecba1598db2a8b9cbd.png)'
  prefs: []
  type: TYPE_IMG
- en: 10\. Crossover
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How are selected chromosomes used to breed subsequent generations? The crossover
    method, shown below, is the general choice. A pair of selected strings of *N*
    bits in length would be chosen, and a random integer *c* generated as point of
    crossover of some size (say, 0 < *c* < *N*). The 2 strings are then independently
    split at this crossover point *c* and reassembled using the head of one string
    and the tail of the other, forming a pair of new chromosomes. The fitness of these
    new hypotheses would then be assessed in the following generation.
  prefs: []
  type: TYPE_NORMAL
- en: '![GA terms](../Images/84a94617688092bafbef64c71b016a49.png)'
  prefs: []
  type: TYPE_IMG
- en: 11\. Mutation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like in biological terms, mutation is used in GAs in order to push hypotheses
    toward optimal. Generally used sparingly, mutation would simply flip the bit of
    a random gene and push the entire chromosome forward to the subsequent generation,
    a strategy for escaping potential local minima.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Fitness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need some metric to measure the best fit of a hypothesis. Some fitness function
    is used to evaluate each chromosome, and best fits can be identified and more
    heavily relied upon in order to create new generational chromosomes. The fitness
    function is heavily task-dependent.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Database Key Terms, Explained](https://www.kdnuggets.com/2016/07/database-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Descriptive Statistics Key Terms, Explained](https://www.kdnuggets.com/2017/05/descriptive-statistics-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Key Terms, Explained](https://www.kdnuggets.com/2016/05/machine-learning-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deep Learning Key Terms, Explained](https://www.kdnuggets.com/2016/10/deep-learning-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing Key Terms, Explained](https://www.kdnuggets.com/2017/02/natural-language-processing-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generative AI Key Terms Explained](https://www.kdnuggets.com/generative-ai-key-terms-explained)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
