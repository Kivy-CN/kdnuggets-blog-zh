- en: Pandas DataFrame Indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/04/pandas-dataframe-indexing.html](https://www.kdnuggets.com/2019/04/pandas-dataframe-indexing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: Use `loc[]` to choose rows and columns by label.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use `iloc[]` to choose rows and columns by position.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explicitly designate both rows and columns, even if it's with ":"
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[To watch the video, get the slides, and get the code, check out the course.
    It''s free ($ and CC0).](https://end-to-end-machine-learning.teachable.com/courses/516023/lectures/9460205)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The long version: Indexing a Pandas DataFrame for people who don''t like to
    remember things'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a lot of ways to pull the elements, rows, and columns from a DataFrame.
    (If you're feeling brave some time, check out Ted Petrou's [7(!)-part series](https://medium.com/dunder-data/selecting-subsets-of-data-in-pandas-6fcd0170be9c)
    on pandas indexing.) Some indexing methods appear very similar but behave very
    differently. The goal of this post is identify a single strategy for pulling data
    from a DataFrame that is straightforward to interpret and produces reliable results.
    Just a warning - these are my own thoughts only and they come with no guarantees
    of being authoritative or even accurate.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, we create a small data frame using data from Wikipedia on the
    highest mountains in the world. For each mountain, we have its name, height in
    meters, year when it was first summitted, and the range to which it belongs. If
    this is your first exposure to a pandas DataFrame, each mountain and its associated
    information is a row, and each piece of information, for instance name or height,
    is a column.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/14492dd94238e5ccda7ea5e548c7c35b.png)'
  prefs: []
  type: TYPE_IMG
- en: Each column has a name associated with it, also known as a label. The labels
    for our columns are 'name', 'height (m)', 'summitted', and 'mountain range'. In
    pandas data frames, each row also has a name. By default, this label is just the
    row number. However, you can set one of your columns to be the index of your DataFrame,
    which means that its values will be used as row labels. We set the column 'name'
    as our index.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/3176bee2931823fa39419e8dae5b6f7d.png)'
  prefs: []
  type: TYPE_IMG
- en: It is a common operation to pick out one of the DataFrame's columns to work
    on. To select a column by its label, we use the .loc[] function. One thing that
    we can do that makes our commands easy to interpret is to always include both
    the row index and the column index that we are interested in. In this case, we
    are interested in all of the rows. To show this, we use a colon. Then, to indicate
    the column that we're interested in we add its label. The command mountains.loc[:,
    'summitted'] gets us just the 'summitted' column.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/8debc2f94edf5476a94be2bf7ecdc0e9.png)'
  prefs: []
  type: TYPE_IMG
- en: It’s worth noting that it this command returns a Series, the data structure
    that pandas uses to represent a column. If instead of a Series, we just wanted
    an array of the numbers that are in the 'summitted' column, then we add '.values'
    to the end of our command. This returns a numpy array containing [1953, 1954,
    1955, and 1956].
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/a678978f6df65027448769d964476139.png)'
  prefs: []
  type: TYPE_IMG
- en: If we would only like to get a single row, then we use the .loc[] function again,
    this time specifying a row label, and putting a colon in the column position.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/fc613cac209c072f7b74ee128023a318.png)'
  prefs: []
  type: TYPE_IMG
- en: If we only want a single value, for instance the year that K2 was summitted,
    then we can specify the labels for both the row and the column. The row always
    comes first.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/c34e5e044ecef1d084f12d56682b3150.png)'
  prefs: []
  type: TYPE_IMG
- en: While it is true that you can get away with using only one argument in the .loc[]
    function, it is most straightforward to interpret if you always specify both row
    and column, even if it is with a colon.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t have to limit ourselves to a single row or single column using this
    method. Here, in the row position we pass a list of labels. This returns a set
    of rows, rather than just one.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/8e49196daaf9838f2146b09c04a6393f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also get a subset of the columns, by specifying the start and end column,
    and putting a '':'' in between. In this case, ''height'': ''summitted'' will give
    us all of the columns between and including the startpoint, ''height'', and the
    endpoint, ''summitted''. Note that this is different than numerical indexing in
    numpy, where the endpoint is omitted. Also, because we have already specified
    the name column as the index, it will also be returned in the data frame that
    we get back'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/06cfa4b73deb13154511c975b9669771.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition, we can select rows or columns where the value meets a certain condition.
    In this case, we want to find the rows where the values of the 'summitted' column
    are greater than 1954\. In the rows position, we can put any Boolean expression
    that has the same number of values as we have rows. We could do the same for columns
    if we wished.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/33d239b181c62efb58680923d23d2654.png)'
  prefs: []
  type: TYPE_IMG
- en: As an alternative to selecting rows and columns by their labels, we can also
    select them by their row and column number. The ordering of the columns, and thus
    their positions, depends on how the data frame is initialized. The index column,
    our 'name' column, doesn’t get counted.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/2975b76dd68de2814214c727392b0a0c.png)'
  prefs: []
  type: TYPE_IMG
- en: To select data by its position, we use the .iloc[] function. Again, the first
    argument is for the rows, and the second argument is for the columns. To select
    all the columns in the zeroth row, we write .iloc[0, ;]
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/e51a267517b3ecc81859fb8a3506bcce.png)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, we can select a column by position, by putting the column number
    we want in the column position of the .iloc[] function.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/554f1a6b7b170135790b36bec7f8e073.png)'
  prefs: []
  type: TYPE_IMG
- en: We can pull out a single value, by specifying both the position of the row and
    the column.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/5e2c06f34d584e175fa764674fae587f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can pass a list of positions if we want to cherry pick certain rows and/or
    certain columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/34336c177018df8d0d6d170882ad0d96.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also use the colon range operator to get a contiguous set of rows or
    columns by position. Note that unlike the .loc[] function using labels, the .iloc[]
    function using positions does not include the endpoint. In this case, it returns
    only columns zero and one, and does not return column two.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/35c98d70e09218939c5fb6a8ed4e9528.png)'
  prefs: []
  type: TYPE_IMG
- en: All of this can be summed up as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Use .loc[] for label-based indexing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use .iloc[] for position-based indexing, and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explicitly designate both the rows and the columns even if it’s with a colon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This set of guidelines will give you a consistent and straightforwardly interpretable
    way to pull the data that you need from a pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck with your data munging! Check out my [End-to-End Machine Learning
    Courses](https://end-to-end-machine-learning.teachable.com/) for more data munging
    tips and machine learning tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://brohrer.github.io/dataframe_indexing.html). Reposted with
    permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using Excel with Pandas](https://www.kdnuggets.com/2018/01/using-excel-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pandas Cheat Sheet: Data Science and Data Wrangling in Python](https://www.kdnuggets.com/2017/01/pandas-cheat-sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tidying Data in Python](https://www.kdnuggets.com/2017/01/tidying-data-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
