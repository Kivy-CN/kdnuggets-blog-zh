- en: How to Create Stunning Web Apps for your Data Science Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/09/create-stunning-web-apps-data-science-projects.html](https://www.kdnuggets.com/2021/09/create-stunning-web-apps-data-science-projects.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Murallie Thuwarakesh](https://www.linkedin.com/in/thuwarakesh/), Data
    Scientist at Stax, Inc.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transforming visualizations](../Images/47d6bf74cb792c893708957323dfd757.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Meagan Carsience](https://unsplash.com/@mcarsience_photography?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Web development isn’t a data scientist’s core competency. Most data scientists
    don’t bother to learn different technologies to do it. It’s just not their cup
    of coffee.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, most data science projects also have a software development component.
    Developers sometimes have a different understanding of the problem, and they use
    discrete technologies. It often causes problems and drains the precious time of
    both teams unproductively.
  prefs: []
  type: TYPE_NORMAL
- en: Also, visualization tools such as Tableau and Power BI focus more on data exploration.
    Yet, it’s only part of a complete data science project. If you need to integrate
    a machine learning model, they are far from perfect.
  prefs: []
  type: TYPE_NORMAL
- en: '[Streamlit](https://share.streamlit.io/) allows you to develop web apps for
    your data science projects. This open-source library’s API is entirely in python.
    Hence you don’t have to learn any other web technology to use it. Also, it’s straightforward
    to learn and flexible for modifications.'
  prefs: []
  type: TYPE_NORMAL
- en: This article is an introduction to Streamlit. We’ll build an interactive web
    app that takes user inputs, runs a K-means algorithm, and instantly plots the
    results in a web interface.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the short article, we’d have covered
  prefs: []
  type: TYPE_NORMAL
- en: installing Streamlit and testing the water;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an interactive web app;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: running K-means algorithm with user inputs;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: using cache to improve performance, and;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: deploying it on the cloud;
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is the [link](https://share.streamlit.io/thuwarakeshm/streamlit-intro/main/quickstart.py#interactive-k-means-clustering) to
    the deployed version. Check it out if you want a sneak peek.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Streamlit for development.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This extraordinary tool has an embarrassingly simple setup, and almost all Python
    users are familiar with it. Use PyPI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also use [conda](https://docs.streamlit.io/en/stable/installation.html#set-up-your-virtual-environment) and
    other popular python package managers.
  prefs: []
  type: TYPE_NORMAL
- en: Once completed, you can test it with a hello world app that comes with the installation.
    Execute the below command in a terminal window to start the development server.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The hello world app is a set of excellent visualization you can do with Streamlit.
    The above command will start a local development server and open the link in your
    default browser. You can also find the source codes on the same page. In addition,
    this sample app also has links to lots of advanced tutorials to educate yourself.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the setup is complete, let’s create an app to interact with our machine
    learning model.
  prefs: []
  type: TYPE_NORMAL
- en: Using machine learning models with a Streamlit web app.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The app below uses Pandas, Scikit-Learn, Matplotlib, Seaborn, and Streamlit.
    Before starting, make sure you have installed all the required packages. If not,
    the below command will do it for you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Creating your first web app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file named ‘quickstart.py’ with the below content.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Code snippet from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: The above file is straightforward. For illustration purposes, I’ve added sections
    to the file.
  prefs: []
  type: TYPE_NORMAL
- en: In the main app section, we have three lines. We added a title and a description
    to the page. Then we display the data frame on the page. The “st.write” function
    is an all-in-one solution. You could pass almost anything into this function,
    and Streamlit is smart enough to display the correct widget in the UI. To learn
    about different Streamlit functions, here is a [cheat sheet](https://share.streamlit.io/daniellewisdl/streamlit-cheat-sheet/app.py).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s run our initial app with the below command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Like the hello app, this command will start a new development server. On your
    browser, you’ll see the below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/328b94d06b6f4625150fbf78128dbd3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, you just created your first web app; without HTML, CSS, and
    absolutely no JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: But this is rudimentary. A web app could do lots of cool stuff. It could interact
    with the user in real-time and update its content. Let’s see how we can do it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bringing interactions in the Streamlit web app is effortless. The Streamlit
    API contains several widgets. You can use them to get the user input and store
    its value in a variable. The rest is like any other python program.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add a checkbox to toggle the dataset display. After all, no one develops
    a web app to see the raw data. Replace the data frame display (line 30) with the
    below content.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Code snippet from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: If you refresh your browser, now you can see a checkbox to toggle the data frame
    display.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b8ab87b774a80ae9143e24e5fc4662d.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: But a toggle button in the middle of the app is not pleasing. Let’s move it
    to a sidebar.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a sidebar to the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Again, another effortless action. The Streamlit API has the sidebar property.
    All the widgets you created in the main app are also available in this sidebar
    property.
  prefs: []
  type: TYPE_NORMAL
- en: Create a sidebar variable by using the ‘st.sidebar’ property. Then move the
    checkbox assignment we added in the main app section to the sidebar section. Notice
    we now use ‘st.sidebar.checkbox’ instead of ‘st.checkbox.’
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Code snippet from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In the above code, we’ve also added a slider to the sidebar. This widget will
    capture the user-selected number of clusters. Here is how the output will look.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28b966d0df8678b47bcc97ba4aa7f5cc.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Next stop, we’ll run the K means algorithm with the user-selected number of
    clusters.
  prefs: []
  type: TYPE_NORMAL
- en: Running K-Means with live inputs.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extend the imports, helper functions, and main app sections with the below code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Code snippet from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In the above code, we’ve created a function to run the K-Means algorithm. It
    takes the data frame and the number of clusters as arguments and returns a Matplotlib
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: The illustration of K-Means clustering is beyond the scope of this project.
    It’s a machine learning algorithm, and that’s what we care about. But you can
    refer to my [previous post](https://towardsdatascience.com/running-election-campaigns-with-k-means-clustering-ecc40a91135a) that
    describes it.
  prefs: []
  type: TYPE_NORMAL
- en: We use the n_clusters variable that captures the slider value in the previous
    section as the second argument to the run_forecast function.
  prefs: []
  type: TYPE_NORMAL
- en: If you refresh the page, you’ll see a dashboard that takes user input, runs
    a machine learning algorithm, and instantly updates the UI.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/adf8c6feef5981d908947bf8a0d8001e.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Even if you are an experienced developer, this level of interaction and integration
    with back-end ML is a difficult task. Especially if you are a data scientist who
    doesn’t know how to develop web apps, it might take weeks of your time.
  prefs: []
  type: TYPE_NORMAL
- en: Improving performance with caching.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some tasks in a data science pipeline are time-consuming. Yet, such tasks rarely
    produce different results for the same inputs. You can use Streamlit’s inbuilt
    caching functions to store their values for future use.
  prefs: []
  type: TYPE_NORMAL
- en: Although it might sound complicated, doing it with streamlit is simple. Your
    time-consuming task should be a function, and you wrap it with the [@ts](https://twitter.com/ts).cache
    decorator. As long as the input parameters are the same and the function’s body
    is untouched, Streamline will fetch it from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: In the app we built, we call the external URL to download data. If it’s a live
    API, you may not want to cache it. But in our case, it’s not. Therefore let’s
    cache it by replacing the line with the below code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Code snippet from [the author](https://thuwarakesh.medium.com/).
  prefs: []
  type: TYPE_NORMAL
- en: On your first reload, you may see a message “Processing load_data” on your browser.
    But subsequent reloads won’t have that note. This is because requests are fetched
    from the cache instead of downloading from the external URL.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying on the internet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’ve noticed the Streamlit console, you’ll also see a network URL. It means,
    if your firewall allows, your app can be accessible over the intranet.
  prefs: []
  type: TYPE_NORMAL
- en: But if you want to share it outside your network, we have many options. As the
    documentation says, Streamlit apps work anywhere a Python app works.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit Recommends the “Streamlit Sharing” option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can put your code on a GitHub repository and configure Streamlit Sharing
    to serve your app.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Streamlit sharing is free, but it’s currently invitation only. You can request
    an invitation for yourself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can deploy it on cloud platforms. Here is an [article](https://towardsdatascience.com/how-to-deploy-a-streamlit-app-using-an-amazon-free-ec2-instance-416a41f69dc3) that
    shows how to do it with AWS EC2 free instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can [configure a reverse proxy](https://discuss.streamlit.io/t/streamlit-docker-nginx-ssl-https/2195/5).
    Proxy servers like Nginx and Apache can be configured to serve the app and restrict
    access for specific users.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be sure to read [Streamlit’s community guide](https://discuss.streamlit.io/t/streamlit-deployment-guide-wiki/5099) about
    deployment to explore numerous options available to you.
  prefs: []
  type: TYPE_NORMAL
- en: Here is how I deployed this tutorial app on Streamlit Share. Once again, Streamlit
    didn’t fail to surprise me with its convenience.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step I: Put your code into a GitHub public repository.** I’ve added my code
    to this [GitHub repo](https://github.com/ThuwarakeshM/Streamlit-Intro.git). We
    need to make sure that it contains a requirement.txt file with all the dependencies.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step II: Log into **[**Streamlit**](https://share.streamlit.io/)** using
    your GitHub account.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step III: Create a new app on the Streamlit console.** Choose your git hub
    repo from the dropdown or past in the URL. Select the branch that you want to
    use for the deployment. Finally, pick the main filename and click deploy.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aabebfb84c2e7aae9249582ad23b4888.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In about a minute, [my app](https://share.streamlit.io/thuwarakeshm/streamlit-intro/main/quickstart.py#interactive-k-means-clustering) is
    live on Streamlit Share. But time to deployment may vary depending on the project
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that streamlit share is currently an invitation-only thing. But I didn’t
    wait too long to get it. Streamlit’s [deployment documentation](https://docs.streamlit.io/en/stable/deploy_streamlit_app.html?utm_medium=email&_hsmi=129999626&_hsenc=p2ANqtz-_XkMKRkDwyEqBo00-MhMkFZrmNwXivmqVBMHHO8pEGst6yf3fAVaz_iaUAx_6kP4h-DOmIp4iaHd0QahErWMub8ethXA&utm_content=129999626&utm_source=hs_automation) contains
    a lot more helpful information on this.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Needless to say, Streamlit solves a critical problem in data science projects.
    It gives data scientists the power to build web apps to interact with their machine
    learning models.
  prefs: []
  type: TYPE_NORMAL
- en: In this introductory article, we’ve explored how we can use Streamlit with K-Means
    clustering. Although it’s a trivial application, it illustrates the core concepts
    of this technology. Besides development, we’ve also seen how effortless managing
    cache for performance in Streamlit. Lastly, we talked about the deployment options.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit is much more than this. Please check their [official documentation](https://docs.streamlit.io/en/stable/),
    which is filled with excellent tutorials. Also, their [API cheat sheet](https://share.streamlit.io/daniellewisdl/streamlit-cheat-sheet/app.py) is
    helpful for rapid development.
  prefs: []
  type: TYPE_NORMAL
- en: A web app is a wonderful solution. But in some cases, you might have to think
    of other ways to interact with your ML models. Perhaps, building a command-line
    interface to your model could help.
  prefs: []
  type: TYPE_NORMAL
- en: '[**A Simplified Guide to Create CLIs for Your Data Science Project**](https://towardsdatascience.com/a-simplified-guide-to-create-clis-for-your-data-science-project-bf9bcaa26e1)'
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading, friend! It seems you and I have lots of common interests.
    I’d love to connect with you on [LinkedIn](https://www.linkedin.com/in/thuwarakesh/), [Twitter](https://twitter.com/Thuwarakesh),
    and Medium
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Not a Medium member yet? Please use this link to [**become a member**](https://thuwarakesh.medium.com/membership).
    You can enjoy thousands of insightful articles and support me as I earn a small
    commission for referring you.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Murallie Thuwarakesh](https://www.linkedin.com/in/thuwarakesh/)** (**[@Thuwarakesh](https://twitter.com/Thuwarakesh)**)
    is a Data Scientist at Stax, Inc., and a top writer on Medium for Analytics. Murallie
    shares what he explores in data science every day.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/how-to-create-stunning-web-apps-for-your-data-science-projects-c7791102134e).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Streamlit Tips, Tricks, and Hacks for Data Scientists](/2021/07/streamlit-tips-tricks-hacks-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Topic Modeling with Streamlit](/2021/05/topic-modeling-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build an app to generate photorealistic faces using TensorFlow and Streamlit](/2020/04/app-generate-photorealistic-faces-tensorflow-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Create Stunning Data Viz in Seconds with ChatGPT](https://www.kdnuggets.com/create-stunning-data-viz-in-seconds-with-chatgpt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
