- en: Social User Authentication in Django Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/01/social-user-authentication-django-framework.html](https://www.kdnuggets.com/2023/01/social-user-authentication-django-framework.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/93d79eb75300463d1921640150a97238.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Django is a free, open-source web framework in Python. It follows the model-view-controller
    architectural pattern and provides a built-in admin interface, Object-relational
    mapping (ORM), and a template engine, among other features. Django's primary goal
    is to make it easier for developers to build and maintain web applications by
    providing a high-level, reusable set of components for everyday tasks such as
    handling user authentication, creating and managing databases, and handling HTTP
    requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: This article will discuss how we can perform social authentication in a Django
    app using Google. Social authentication, also known as social login or sign-in,
    is a method of authenticating users using their existing social media accounts,
    such as Facebook, Google, or Twitter, instead of creating a new account specifically
    for the website or application.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of using social authentication over a traditional authentication
    system are that it eliminates the need for users to create and remember yet another
    username and password, reducing friction and increasing the likelihood of users
    signing up for the website or application. Also, it improves the user experience
    by allowing users to sign in with their existing social media accounts. Social
    authentication provides a more seamless and familiar user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the Client ID and Client Secret Key from Google Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Login to the Google Console Platform. You can use that [link](https://console.cloud.google.com/projectselector2/apis/dashboard?supportedpurview=project)
    to login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new project if you don’t have one already.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/d15defc67dea3f1a02e4da6f478d6700.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: After creating the project, we need to configure the OAuth Screen. This screen
    is shown when a client tries to authenticate your website using Google Auth. It
    contains the summary of your app and all the required policies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the button as shown below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/939b8cd4b77368d07c9286cf84fac2ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Select the User Type as External and click on Create Button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/05d3cfe0c53c91c81538bb91c75b31a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Fill in all the required details and continue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the section of Authorized Domain empty, as we are currently testing our
    app on the local server. If you host your website with a proper domain name, then
    you have to enter the domain name of your website here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/220deb1c45aeb3ef0b8d40e424749bb5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Leave the other steps, like Scops and Test Users, empty.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After configuring the OAuth Screen, navigate to `**Credentials << CREATE CREDENTIALS
    << OAuth client ID**`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/cb8f84987edb82dfb56c30801c2742d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Select the application type as **Web Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in all the required information and click Create Button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Note:** Add Authorized Redirect URLs, as we currently run our application
    on the local host. You can change the redirect URLs according to your domain name.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[http://127.0.0.1:8000/accounts/google/login/callback/](http://127.0.0.1:8000/accounts/google/login/callback/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://localhost:8000/accounts/google/login/callback/](http://localhost:8000/accounts/google/login/callback/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/2023e821f3ad250b524a22f1945a9221.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will get your Client ID and Client Secret which we will use in our
    Django App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Note:** Please do not share these credentials with anyone.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/5cf9348b2dabb3c2824c988d44a66ace.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: You will find your created credentials in the **Credentials Section**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/8ae0ead1dc2e2776436cfd570f9eba85.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Creating Django App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss how to create a Django app and how to use Social
    User Authentication. If you are new to Django, that is also completely fine. I
    will explain every step in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** We will use a Windows Machine in this tutorial.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Create a virtual environment
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** It is always recommended to create a virtual environment. It will
    help you to manage your libraries/dependencies well.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Installing required libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What is Django-allauth?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django-allauth is a library for the Django web framework that provides a set
    of all-in-one authentication views and forms, a unified user registration and
    authentication process across various third-party (social) account providers like
    Google, Facebook, etc. It allows developers to quickly and easily add authentication
    and registration functionality to their Django projects. It also provides support
    for OAuth and OpenID Connect.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Django Project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Move inside the project directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Add the apps inside the INSTALLED_APPS list in the `settings.py` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the same file `settings.py`, add the following Authentication Backends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we have to add the allauth urls in the `urls.py` file in the main project
    directory. After adding the urls your `urls.py` file looks like this.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Perform all the necessary migrations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will create a superuser (This is an admin user having all sort of access/permissions)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will run our server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By hitting this url ([http://localhost:8000/accounts/login/](http://localhost:8000/accounts/login/)),
    you will be able to see the login form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/fa77c5c06d62283adb6d4fa20ff39293.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Our Django app is now created. If you face any error while running the server,
    please check all the steps again. If you can see the above login page, your app
    works perfectly??.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Client ID and Client Secret in Django App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add the **Client ID** and the **Client Secret** in
    our app that we have created in the google console.
  prefs: []
  type: TYPE_NORMAL
- en: Open the Django Admin Panel. ([http://localhost:8000/admin/login/?next=/admin/](http://localhost:8000/admin/login/?next=/admin/))
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password you set while creating the superuser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/ae64f516cb5808dd258c8991dd3e5ff9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Social Applications** and then click on **Add Social Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/987e03cb60022c5df4227cf45991c5ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Select the provider as Google and enter your Client ID and Client Secret. And
    then finally, click on the save button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now log out from the Admin Panel, and you are all done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Steps for Login
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hit this URL ([http://localhost:8000/accounts/google/login/?process=login](http://localhost:8000/accounts/google/login/?process=login))
    to log in through your app using Google.
  prefs: []
  type: TYPE_NORMAL
- en: '![Social User Authentication in Django Framework](../Images/d20b38da884b6786a5a30c79bfde0fa0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** After login, you will be automatically redirected to the profile
    page(i.e., [http://localhost:8000/accounts/profile/](http://localhost:8000/accounts/profile/)).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Changing Redirect URLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can change the default redirect URLs by specifying your particular redirect
    URL in the `settings.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Logout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can logout from the app by hitting this URL ([http://localhost:8000/accounts/logout/](http://localhost:8000/accounts/logout/)).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we have taken a step-by-step approach to show how to integrate
    Google Authentication into a Django web application. To begin, we created a service
    on the Google Console and obtained the necessary Client ID and Client Secret.
    Then after creating the app, we entered the secret keys in the Admin Portal and
    successfully logged in to the app using Google Authentication.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that we can apply the same process to authenticate users using
    **Facebook** or **Github**. By creating the secret keys from the respective admin
    portals and entering them into the Django App's admin portal, you can also enable
    authentication through these providers.
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, I hope you have enjoyed this article and found it informative.
    If you have any suggestions or feedback, please reach out to me via LinkedIn.
  prefs: []
  type: TYPE_NORMAL
- en: Have a nice day????.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to build a model to find the most impactful paths in user journeys](https://www.kdnuggets.com/2022/09/objectiv-build-model-impactful-paths-user-journeys.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Risk Management Framework for AI/ML Models](https://www.kdnuggets.com/2022/03/risk-management-framework-aiml-models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Only Prompting Framework for Every Use](https://www.kdnuggets.com/the-only-prompting-framework-for-every-use)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
