- en: How to Use Python’s datetime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/06/how-use-datetime.html](https://www.kdnuggets.com/2019/06/how-use-datetime.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: For video narration and slides, as well as other data processing tutorials,
    visit the [Data Munging Tips and Tricks](https://end-to-end-machine-learning.teachable.com/p/data-munging-tips-and-tricks/) course
    page. It's free.
  prefs: []
  type: TYPE_NORMAL
- en: Wrangling dates and times in python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python''s datetime package](https://docs.python.org/3/library/datetime.html) is
    a convenient set of tools for working with dates and times. With just the five
    tricks that I’m about to show you, you can handle most of your datetime processing
    needs.'
  prefs: []
  type: TYPE_NORMAL
- en: Before jumping in, it’s helpful to look at how datetime is put together. The
    fundamental building block is a datetime object. Not surprisingly, this is a combination
    of a date object and a time object. A date object is just a set of values for
    the year, the month, the day, and a collection of functions that knows how to
    handle them. A time object is structured in a similar way. It has values for the
    hour, the minute, the second, the microsecond, and the time zone. Any time can
    be represented by choosing these values appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5350fa6b7fc2d13b7fbf4e4129e7bf56.png)'
  prefs: []
  type: TYPE_IMG
- en: 1. **combine()**
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first trick for working with datetimes is to be able to create them by combining
    date and time objects. We start by creating a time, passing it the hour of 7 and
    the minute 0\. This represents 7 o’clock. Because we didn’t supply the second
    or the microsecond, these are assumed to be zero. Then we create a date by passing
    the year, month, and day.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a datetime is straightforward. We use the **combine()** function, and
    pass it the date object and the time object that we want to build our datetime
    out of.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the naming convention, calls to datetime can be confusing. Datetime
    is the name of the package, a module within the package, and the object. So when
    we combine our date and time, we call it with the apparently redundant **datetime.datetime** prefix.
    The first **datetime** references the package, the second **datetime** references
    the module, and **combine()** is a function within that module.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. timedelta
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The second trick for using datetimes is a type called timedelta. This represents
    the difference between two datetimes. A timedelta has just three values: days,
    seconds and microseconds. The difference between any two datetimes can be uniquely
    represented in this way.'
  prefs: []
  type: TYPE_NORMAL
- en: Timedeltas are incredibly useful because they allow us to do simple addition
    and subtraction arithmetic on datetimes. They remove the need to think about things
    like how many days are in a month, how many seconds are in a day, and leap years.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Timestamps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The third trick for getting the most out of datetimes is the use of timestamps.
    Working in days, hours, minutes, and seconds is awkward for computers. There are
    rules and corner cases to check. In order to make dates and times easier to work
    with, the notion of a [UNIX epoch](https://en.wikipedia.org/wiki/Unix_time) was
    created. This is the number of seconds that have passed since 12:00 AM, January
    1, 1970 in [Coordinated Universal Time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time) (the
    UTC +0 time zone). This allows any date and time to be represented by a single,
    commonly interpretable, floating point number. The only drawback is that it is
    not intuitive to a human reader. The functions **timestamp()** and **fromtimestamp()** allow
    our human-interpretable datetime object to be converted to and from a UNIX epoch
    for ease of computation.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. weekday()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Trick number four in our bag is the **weekday()** function. For any given date,
    it calculates the day of the week. To use it, call the **date()** function on
    your datetime. This isolates the date object, and ignores the time portion. And
    then call its **weekday()** function. This returns a number from 0 to 6, where
    is zero is Monday, one is Tuesday, etc., and six is Sunday. It handles all of
    the quirks of keeping track of days of the week so that you don’t have to.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Date strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we come to trick number five, which is converting a date to and from
    a string. This is particularly helpful when we are ingesting data from a text
    file, and want to turn text dates into datetime objects. It is also helpful when
    we want to expose our datetime object to a user, or export it to a text file.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we use the **strptime()** and **strftime()** functions. When making
    a conversion in either direction, we have to supply a string that specifies the
    format. In this code snippet, '%Y' represents the year, '%m' the two digit month,
    and '%d' the two digit day.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a side note, there is actually one correct way to represent years, months,
    and days in dates: ''YYYY-MM-DD''. (An international standard, [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),
    established this in 1988.) In this format, for example, July 31, 2018 would be
    ''2018-07-31''. I highly recommend whenever you are given the choice to format
    your dates in this way for ease of interpretability and compatibility. However,
    be warned that there exist a multitude of a date formats in the wild. Be prepared
    to perform some twisted conversions in order to get all of the data you ingest
    into that format.'
  prefs: []
  type: TYPE_NORMAL
- en: So now you are armed with the five most useful datetime tricks.
  prefs: []
  type: TYPE_NORMAL
- en: '**combine()**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: timedelta,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: converting to and from time stamps,
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**weekday()**, and'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: string formatting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With these in your toolbox you're 90% of the way toward solving all of the date
    and time challenges in your next python project. Good luck and may it serve you
    well.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://brohrer.github.io/datetime_tricks.html). Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas DataFrame Indexing](/2019/04/pandas-dataframe-indexing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyCharm for Data Scientists](/2019/05/pycharm-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How (not) to use Machine Learning for time series forecasting: Avoiding the
    pitfalls](/2019/05/machine-learning-time-series-forecasting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use Python and Machine Learning to Predict Football Match Winners](https://www.kdnuggets.com/2023/01/python-machine-learning-predict-football-match-winners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning How to Use ChatGPT to Learn Python (or anything else)](https://www.kdnuggets.com/2023/02/learn-python-chatgpt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How (Not) To Use Python''s Walrus Operator](https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Here Are the AI Tools I Use Along With My Skills to Make $10,000…](https://www.kdnuggets.com/2023/07/ai-tools-along-skills-make-10000-monthly-bs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
