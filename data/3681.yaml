- en: What Is ChatGPT Doing and Why Does It Work?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ChatGPT 在做什么以及它为何有效？
- en: 原文：[https://www.kdnuggets.com/2023/04/chatgpt-work.html](https://www.kdnuggets.com/2023/04/chatgpt-work.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/04/chatgpt-work.html](https://www.kdnuggets.com/2023/04/chatgpt-work.html)
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/40e094be6eac621ec1e3eefb9ef1f33f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 以及它为何有效？](../Images/40e094be6eac621ec1e3eefb9ef1f33f.png)'
- en: It’s Just Adding One Word at a Time
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它只是一次添加一个词
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: That [ChatGPT](https://chat.openai.com/) can automatically generate something
    that reads even superficially like human-written text is remarkable, and unexpected.
    But how does it do it? And why does it work? My purpose here is to give a rough
    outline of what’s going on inside ChatGPT—and then to explore why it is that it
    can do so well in producing what we might consider to be meaningful text. I should
    say at the outset that I’m going to focus on the big picture of what’s going on—and
    while I’ll mention some engineering details, I won’t get deeply into them. (And
    the essence of what I’ll say applies just as well to other current “large language
    models” [LLMs] as to ChatGPT.)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[ChatGPT](https://chat.openai.com/) 能够自动生成即使在表面上也像是人类编写的文本的能力是令人惊叹的，也出乎意料。但是它是如何做到的呢？为什么它能有效地工作？我的目的在于粗略勾勒一下
    ChatGPT 内部的运作机制——然后探讨它为何能如此成功地生成我们认为有意义的文本。我一开始就要说明，我将重点关注整体情况——虽然我会提到一些工程细节，但不会深入探讨。（我将要讲述的本质同样适用于其他当前的“大型语言模型”
    [LLMs]，而不仅仅是 ChatGPT。）'
- en: The first thing to explain is that what ChatGPT is always fundamentally trying
    to do is to produce a “reasonable continuation” of whatever text it’s got so far,
    where by “reasonable” we mean “what one might expect someone to write after seeing
    what people have written on billions of webpages, etc.”
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 首先需要解释的是，ChatGPT 始终基本上试图做的是生成对目前文本的“合理延续”，其中“合理”的意思是“在看到人们在数十亿个网页上写的内容后，可能会期望某人写出的内容。”
- en: 'So let’s say we’ve got the text “*The best thing about AI is its ability to*”.
    Imagine scanning billions of pages of human-written text (say on the web and in
    digitized books) and finding all instances of this text—then seeing what word
    comes next what fraction of the time. ChatGPT effectively does something like
    this, except that (as I’ll explain) it doesn’t look at literal text; it looks
    for things that in a certain sense “match in meaning”. But the end result is that
    it produces a ranked list of words that might follow, together with “probabilities”:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设我们有一段文本“*AI 最棒的地方在于它的能力*”。想象一下扫描数十亿页人类编写的文本（比如在网上和数字化的书籍中），并找出所有出现该文本的实例——然后查看接下来哪个词出现的频率。ChatGPT
    实际上做的就是类似的事情，只不过（正如我将要解释的那样）它并不直接查看文字；它寻找在某种意义上“意义匹配”的内容。但最终的结果是，它生成了一个可能接下来的词的排名列表，以及相应的“概率”：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/a01f472455503e32a1bc337adc319aee.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 以及它为何有效？](../Images/a01f472455503e32a1bc337adc319aee.png)'
- en: And the remarkable thing is that when ChatGPT does something like write an essay
    what it’s essentially doing is just asking over and over again “given the text
    so far, what should the next word be?”—and each time adding a word. (More precisely,
    as I’ll explain, it’s adding a “token”, which could be just a part of a word,
    which is why it can sometimes “make up new words”.)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 令人惊讶的是，当 ChatGPT 写作时，它本质上在做的就是一次又一次地问“鉴于目前的文本，接下来的词应该是什么？”——每次添加一个词。（更准确地说，正如我将解释的，它是添加一个“标记”，这可能只是一个词的一部分，这就是它有时能够“创造新词”的原因。）
- en: But, OK, at each step it gets a list of words with probabilities. But which
    one should it actually pick to add to the essay (or whatever) that it’s writing?
    One might think it should be the “highest-ranked” word (i.e. the one to which
    the highest “probability” was assigned). But this is where a bit of voodoo begins
    to creep in. Because for some reason—that maybe one day we’ll have a scientific-style
    understanding of—if we always pick the highest-ranked word, we’ll typically get
    a very “flat” essay, that never seems to “show any creativity” (and even sometimes
    repeats word for word). But if sometimes (at random) we pick lower-ranked words,
    we get a “more interesting” essay.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，好吧，每一步它会得到一个带有概率的词汇列表。那么，它应该实际选择哪个词来添加到它正在写的文章中（或其他内容）呢？人们可能认为应该选择“排名最高”的词（即被分配了最高“概率”的词）。但这时一点巫术开始悄然出现。因为出于某种原因——也许有一天我们会有科学风格的理解——如果我们总是选择排名最高的词，通常会得到非常“平淡”的文章，似乎从未“展现出任何创造力”（有时甚至逐字重复）。但如果有时（随机地）选择较低排名的词，我们就会得到一篇“更有趣”的文章。
- en: The fact that there’s randomness here means that if we use the same prompt multiple
    times, we’re likely to get different essays each time. And, in keeping with the
    idea of voodoo, there’s a particular so-called “temperature” parameter that determines
    how often lower-ranked words will be used, and for essay generation, it turns
    out that a “temperature” of 0.8 seems best. (It’s worth emphasizing that there’s
    no “theory” being used here; it’s just a matter of what’s been found to work in
    practice. And for example the concept of “temperature” is there because exponential
    distributions [familiar from statistical physics](https://writings.stephenwolfram.com/2023/02/computational-foundations-for-the-second-law-of-thermodynamics/#textbook-thermodynamics) happen
    to be being used, but there’s no “physical” connection—at least so far as we know.)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的随机性意味着如果我们多次使用相同的提示，可能会得到不同的文章。而且，按照巫术的想法，有一个所谓的“温度”参数，决定了较低排名的词汇出现的频率。在文章生成中，结果显示“温度”设置为0.8似乎是最好的。（值得强调的是，这里并没有使用“理论”；这只是实践中发现有效的方法。比如“温度”概念的存在是因为使用了[来自统计物理学的指数分布](https://writings.stephenwolfram.com/2023/02/computational-foundations-for-the-second-law-of-thermodynamics/#textbook-thermodynamics)，但并没有“物理”上的联系——至少我们现在还不知道。）
- en: Before we go on I should explain that for purposes of exposition I’m mostly
    not going to use the [full system that’s in ChatGPT](https://openai.com/blog/chatgpt/);
    instead I’ll usually work with a simpler [GPT-2 system](https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/),
    which has the nice feature that it’s small enough to be able to run on a standard
    desktop computer. And so for essentially everything I show I’ll be able to include
    explicit [Wolfram Language](https://www.wolfram.com/language/) code that you can
    immediately run on your computer. (Click any picture here to copy the code behind
    it.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我应该解释一下，为了阐述的目的，我主要不会使用[ChatGPT中的完整系统](https://openai.com/blog/chatgpt/)，而是通常使用一个更简单的[GPT-2系统](https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/)，它有一个很好的特点，就是足够小可以在标准桌面计算机上运行。因此，我展示的几乎所有内容都可以包括可以立即在你电脑上运行的明确[Wolfram
    Language](https://www.wolfram.com/language/)代码。（点击任何图片可以复制其背后的代码。）
- en: 'For example, here’s how to get the table of probabilities above. First, we
    have to [retrieve the underlying “language model” neural net](https://resources.wolframcloud.com/NeuralNetRepository):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面是如何获取上述概率表的。首先，我们必须[检索底层的“语言模型”神经网络](https://resources.wolframcloud.com/NeuralNetRepository)：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/653dad073b60fc901f968e8832731421.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……它为何有效？](../Images/653dad073b60fc901f968e8832731421.png)'
- en: 'Later on, we’ll look inside this neural net, and talk about how it works. But
    for now we can just apply this “net model” as a black box to our text so far,
    and ask for the top 5 words by probability that the model says should follow:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将查看这个神经网络内部的工作原理。但现在我们可以将这个“网络模型”作为黑箱应用于到目前为止的文本，并请求模型所说的按概率排名前5的词汇：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/9fb206410b79442ce68747faf4e25bf6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……它为何有效？](../Images/9fb206410b79442ce68747faf4e25bf6.png)'
- en: 'This takes that result and makes it into an explicit formatted “[dataset](https://www.wolfram.com/language/elementary-introduction/2nd-ed/45-datasets.html)”:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这将结果转换为一个明确格式的“[数据集](https://www.wolfram.com/language/elementary-introduction/2nd-ed/45-datasets.html)”：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/655b791e66ec07400f4902c7f259d508.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/655b791e66ec07400f4902c7f259d508.png)'
- en: 'Here’s what happens if one repeatedly “applies the model”—at each step adding
    the word that has the top probability (specified in this code as the “decision”
    from the model):'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人重复“应用模型”——每一步都添加具有最高概率的单词（在此代码中指定为模型的“决策”）——会发生什么：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/473fe1bb8ed8ed96f79141519bee64a3.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/473fe1bb8ed8ed96f79141519bee64a3.png)'
- en: 'What happens if one goes on longer? In this (“zero temperature”) case what
    comes out soon gets rather confused and repetitive:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果继续下去会发生什么？在这种（“零温度”）情况下，生成的文本很快变得相当混乱和重复：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/b11d15bda3f9caa824039614e42cee63.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/b11d15bda3f9caa824039614e42cee63.png)'
- en: 'But what if instead of always picking the “top” word one sometimes randomly
    picks “non-top” words (with the “randomness” corresponding to “temperature” 0.8)?
    Again one can build up text:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果不是总是选择“最高”单词，而是有时随机选择“非最高”单词（“随机性”对应于“温度”0.8）会怎么样？同样可以生成文本：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/71051856346e681af42a5b513ebf56d6.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/71051856346e681af42a5b513ebf56d6.png)'
- en: 'And every time one does this, different random choices will be made, and the
    text will be different—as in these 5 examples:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每次这样做时，会做出不同的随机选择，文本也会不同——如下这 5 个示例：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/4779a5bc344605f10f00bf3b931c26e0.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/4779a5bc344605f10f00bf3b931c26e0.png)'
- en: 'It’s worth pointing out that even at the first step there are a lot of possible
    “next words” to choose from (at temperature 0.8), though their probabilities fall
    off quite quickly (and, yes, the straight line on this log-log plot corresponds
    to an *n*^(–1) [“power-law” decay that’s very characteristic of the general statistics
    of language](https://www.wolframscience.com/nks/notes-8-8--zipfs-law/)):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 值得指出的是，即使在第一步，有很多可能的“下一个单词”可供选择（在温度0.8下），尽管它们的概率很快就会下降（是的，这个对数-对数图上的直线对应于一种 *n*^(–1) [“幂律”衰减，这在语言的一般统计中非常有特点](https://www.wolframscience.com/nks/notes-8-8--zipfs-law/)）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0b3e82f2cd0f66c6cbd3c09107e46ed9.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/0b3e82f2cd0f66c6cbd3c09107e46ed9.png)'
- en: 'So what happens if one goes on longer? Here’s a random example. It’s better
    than the top-word (zero temperature) case, but still at best a bit weird:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如果继续下去会发生什么？这是一个随机示例。它比最高概率（零温度）情况更好，但仍然有点怪异：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/fdddb35464fab22cba81d5087a40187f.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/fdddb35464fab22cba81d5087a40187f.png)'
- en: 'This was done with the [simplest GPT-2 model](https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/) (from
    2019). With the newer and [bigger GPT-3 models](https://platform.openai.com/docs/model-index-for-researchers) the
    results are better. Here’s the top-word (zero temperature) text produced with
    the same “prompt”, but with the biggest GPT-3 model:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用 [最简单的 GPT-2 模型](https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/) （来自
    2019 年）完成的。使用更新的 [更大的 GPT-3 模型](https://platform.openai.com/docs/model-index-for-researchers)，结果会更好。这是用相同的“提示”生成的最高概率（零温度）文本，但使用的是最大的
    GPT-3 模型：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/e7dfa34ec6789205c82ef3a798e36f71.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/e7dfa34ec6789205c82ef3a798e36f71.png)'
- en: 'And here’s a random example at “temperature 0.8”:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个“温度 0.8”的随机示例：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/759db263b5f007f689cdfb7593076c33.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/759db263b5f007f689cdfb7593076c33.png)'
- en: Where Do the Probabilities Come From?
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概率从哪里来？
- en: OK, so ChatGPT always picks its next word based on probabilities. But where
    do those probabilities come from? Let’s start with a simpler problem. Let’s consider
    generating English text one letter (rather than word) at a time. How can we work
    out what the probability for each letter should be?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，ChatGPT 总是基于概率选择下一个单词。但这些概率来自哪里？让我们从一个更简单的问题开始。我们来考虑逐字生成英语文本。我们如何计算每个字母的概率？
- en: 'A very minimal thing we could do is just take a sample of English text, and
    calculate how often different letters occur in it. So, for example, [this counts
    letters in the Wikipedia article](https://www.wolfram.com/language/elementary-introduction/2nd-ed/34-associations.html#i-8) on
    “cats”:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的一个非常简单的事情是，取一段英语文本样本，计算其中不同字母的出现频率。例如，[这个工具统计了维基百科文章](https://www.wolfram.com/language/elementary-introduction/2nd-ed/34-associations.html#i-8)中“cats”一词的字母：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/c46cb5e0569986ebba1d77f5d33b9593.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/c46cb5e0569986ebba1d77f5d33b9593.png)'
- en: 'And this does the same thing for “dogs”:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这对“dogs”也做了相同的处理：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/1cf6df5eed08359b9f34acbbc5b91a07.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/1cf6df5eed08359b9f34acbbc5b91a07.png)'
- en: 'The results are similar, but not the same (“o” is no doubt more common in the
    “dogs” article because, after all, it occurs in the word “dog” itself). Still,
    if we take a large enough sample of English text we can expect to eventually get
    at least fairly consistent results:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果相似，但不完全相同（“o”在“dogs”文章中无疑更常见，因为它出现在“dog”这个单词中）。不过，如果我们取一个足够大的英语文本样本，我们可以预期最终会得到至少相当一致的结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/81ed5202f4787ff4e5a8ece66d4cdc10.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/81ed5202f4787ff4e5a8ece66d4cdc10.png)'
- en: 'Here’s a sample of what we get if we just generate a sequence of letters with
    these probabilities:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这是如果我们仅仅根据这些概率生成字母序列的一个样本：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/41bd4cc72ebb4434789de278f1250b42.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/41bd4cc72ebb4434789de278f1250b42.png)'
- en: 'We can break this into “words” by adding in spaces as if they were letters
    with a certain probability:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过添加空格，将其划分成“单词”，就像这些空格是具有一定概率的字母一样：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/76490be0c51692a3db2bef08e344c736.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/76490be0c51692a3db2bef08e344c736.png)'
- en: 'We can do a slightly better job of making “words” by forcing the distribution
    of “word lengths” to agree with what it is in English:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过强制“单词长度”的分布与英语中的实际情况相符，稍微改善一下“单词”的生成效果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/87fc4042cbbffeb370d678bb80669947.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/87fc4042cbbffeb370d678bb80669947.png)'
- en: We didn’t happen to get any “actual words” here, but the results are looking
    slightly better. To go further, though, we need to do more than just pick each
    letter separately at random. And, for example, we know that if we have a “q”,
    the next letter basically has to be “u”.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里没有生成任何“实际单词”，但结果看起来稍微好一些。不过，要进一步改进，我们需要做的不仅仅是随机挑选每个字母。例如，我们知道如果有一个“q”，下一个字母基本上必须是“u”。
- en: 'Here’s a plot of the probabilities for letters on their own:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是单个字母概率的图示：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/e0f7bb740422e6c5d82924a476635b53.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/e0f7bb740422e6c5d82924a476635b53.png)'
- en: 'And here’s a plot that shows the probabilities of pairs of letters (“2-grams”)
    in typical English text. The possible first letters are shown across the page,
    the second letters down the page:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个图示，显示了典型英语文本中字母对（“2-grams”）的概率。可能的首字母显示在页面的横向，第二个字母显示在页面的纵向：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/dd7cc7a8032a4d5eaac1d72eab99e25c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/dd7cc7a8032a4d5eaac1d72eab99e25c.png)'
- en: 'And we see here, for example, that the “q” column is blank (zero probability)
    except on the “u” row. OK, so now instead of generating our “words” a single letter
    at a time, let’s generate them looking at two letters at a time, using these “2-gram”
    probabilities. Here’s a sample of the result—which happens to include a few “actual
    words”:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到，例如，“q”列是空白的（零概率），除了在“u”行。好，现在我们不再一次生成一个字母，而是一次看两个字母，利用这些“2-gram”概率生成“单词”。下面是结果的一个样本，其中包含一些“实际单词”：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0372a97c531920b036ac620da8ecd741.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/0372a97c531920b036ac620da8ecd741.png)'
- en: 'With sufficiently much English text we can get pretty good estimates not just
    for probabilities of single letters or pairs of letters (2-grams), but also for
    longer runs of letters. And if we generate “random words” with progressively longer *n*-gram
    probabilities, we see that they get progressively “more realistic”:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 通过足够多的英语文本，我们不仅可以对单个字母或字母对（2-grams）的概率进行相当好的估计，还可以对更长的字母序列进行估计。如果我们用逐渐长的*n*-gram概率生成“随机单词”，我们会发现它们变得越来越“逼真”：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/6294df51134133db7fa94ff07136ca9e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/6294df51134133db7fa94ff07136ca9e.png)'
- en: 'But let’s now assume—more or less as ChatGPT does—that we’re dealing with whole
    words, not letters. There are about 40,000 [reasonably commonly used words in
    English](https://reference.wolfram.com/language/ref/WordList.html). And by looking
    at a large corpus of English text (say a few million books, with altogether a
    few hundred billion words), we can get an [estimate of how common each word is](https://reference.wolfram.com/language/ref/WordFrequencyData.html).
    And using this we can start generating “sentences”, in which each word is independently
    picked at random, with the same probability that it appears in the corpus. Here’s
    a sample of what we get:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们现在假设——或多或少像 ChatGPT 所做的那样——我们处理的是整个单词，而不是字母。英语中大约有 40,000 个[常用单词](https://reference.wolfram.com/language/ref/WordList.html)。通过查看大量英语文本（比如几百万本书，总共几百亿个单词），我们可以获得[每个单词的常见程度估算](https://reference.wolfram.com/language/ref/WordFrequencyData.html)。利用这些数据，我们可以开始生成“句子”，其中每个单词是独立随机挑选的，出现的概率与其在语料库中的概率相同。以下是我们得到的一个样本：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/7aed2b73c3c1de01bb7fad0096ba95ab.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/7aed2b73c3c1de01bb7fad0096ba95ab.png)'
- en: 'Not surprisingly, this is nonsense. So how can we do better? Just like with
    letters, we can start taking into account not just probabilities for single words
    but probabilities for pairs or longer *n*-grams of words. Doing this for pairs,
    here are 5 examples of what we get, in all cases starting from the word “cat”:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 不出所料，这是荒谬的。那么我们该如何做得更好？就像处理字母一样，我们可以开始考虑不仅是单词的概率，还有单词对或更长的*n*-gram 的概率。对于对，这里有
    5 个示例，所有案例都从“cat”这个词开始：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/96261d9e45f08b5d89f2b9676c62fa04.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/96261d9e45f08b5d89f2b9676c62fa04.png)'
- en: 'It’s getting slightly more “sensible looking”. And we might imagine that if
    we were able to use sufficiently long *n*-grams we’d basically “get a ChatGPT”—in
    the sense that we’d get something that would generate essay-length sequences of
    words with the “correct overall essay probabilities”. But here’s the problem:
    there just isn’t even close to enough English text that’s ever been written to
    be able to deduce those probabilities.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来略微“更有意义”。我们可以想象，如果我们能够使用足够长的*n*-gram，我们基本上会“得到一个 ChatGPT”——即我们会得到一种生成具有“正确整体论文概率”的长篇单词序列的东西。但问题是：甚至没有接近足够的英语文本来推断这些概率。
- en: In a [crawl of the web](https://commoncrawl.org/) there might be a few hundred
    billion words; in books that have been digitized there might be another hundred
    billion words. But with 40,000 common words, even the number of possible 2-grams
    is already 1.6 billion—and the number of possible 3-grams is 60 trillion. So there’s
    no way we can estimate the probabilities even for all of these from text that’s
    out there. And by the time we get to “essay fragments” of 20 words, the number
    of possibilities is larger than the number of particles in the universe, so in
    a sense they could never all be written down.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在[网络爬虫](https://commoncrawl.org/)中可能有几百亿个单词；在已数字化的书籍中可能还有另一百亿个单词。但有了 40,000
    个常用单词，即使是可能的 2-gram 的数量也已达到 16 亿——而可能的 3-gram 的数量是 60 万亿。因此，我们无法仅凭现有文本估计所有这些的概率。当我们处理“20
    个单词的论文片段”时，可能性数量已经比宇宙中的粒子还多，从某种意义上说，它们永远不可能全部被写下来。
- en: So what can we do? The big idea is to make a model that lets us estimate the
    probabilities with which sequences should occur—even though we’ve never explicitly
    seen those sequences in the corpus of text we’ve looked at. And at the core of
    ChatGPT is precisely a so-called “large language model” (LLM) that’s been built
    to do a good job of estimating those probabilities.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们可以做什么？大思路是制作一个模型，让我们估计序列应该出现的概率——即使我们从未在我们查看的文本语料库中明确见过这些序列。ChatGPT 的核心正是一个所谓的“大型语言模型”（LLM），它被构建用来很好地估计这些概率。
- en: What Is a Model?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是模型？
- en: 'Say you want to know (as [Galileo did back in the late 1500s](https://archive.org/details/bub_gb_49d42xp-USMC/page/404/mode/2up))
    how long it’s going to take a cannon ball dropped from each floor of the Tower
    of Pisa to hit the ground. Well, you could just measure it in each case and make
    a table of the results. Or you could do what is the essence of theoretical science:
    make a model that gives some kind of procedure for computing the answer rather
    than just measuring and remembering each case.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 比如你想知道（如[伽利略在 1500 年代末所做的](https://archive.org/details/bub_gb_49d42xp-USMC/page/404/mode/2up)）从比萨斜塔的每个楼层掉下的大炮弹需要多长时间才能落地。你可以在每种情况下进行测量，并制作一个结果表。或者你可以做理论科学的本质：建立一个模型，提供一些计算答案的程序，而不仅仅是测量和记住每种情况。
- en: 'Let’s imagine we have (somewhat idealized) data for how long the cannon ball
    takes to fall from various floors:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有（稍微理想化的）数据，表示大炮弹从不同楼层落下所需的时间：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/fadb9d99539bb5a4efc1e8f053dbd7b2.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 为什么它有效？](../Images/fadb9d99539bb5a4efc1e8f053dbd7b2.png)'
- en: 'How do we figure out how long it’s going to take to fall from a floor we don’t
    explicitly have data about? In this particular case, we can use known laws of
    physics to work it out. But say all we’ve got is the data, and we don’t know what
    underlying laws govern it. Then we might make a mathematical guess, like that
    perhaps we should use a straight line as a model:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何确定从一个没有明确数据的楼层落下需要多长时间？在这个特定情况下，我们可以使用已知的物理定律来计算。但假设我们只有数据，而不知道支配这些数据的基本定律。然后我们可能会做出数学猜测，比如我们应该使用直线作为模型：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/80849ff233d06906ca43e332eb9043d6.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 为什么它有效？](../Images/80849ff233d06906ca43e332eb9043d6.png)'
- en: We could pick different straight lines. But this is the one that’s on average
    closest to the data we’re given. And from this straight line we can estimate the
    time to fall for any floor.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择不同的直线。但这是与我们给定的数据平均最接近的一条直线。通过这条直线，我们可以估计任何楼层的落下时间。
- en: 'How did we know to try using a straight line here? At some level we didn’t.
    It’s just something that’s mathematically simple, and we’re used to the fact that
    lots of data we measure turns out to be well fit by mathematically simple things.
    We could try something mathematically more complicated—say *a* + *b* *x* + *c* *x*²—and
    then in this case we do better:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是如何知道在这里尝试使用直线的？在某种程度上我们并不知道。这只是一些数学上简单的东西，我们习惯于许多测量的数据会被数学上简单的东西很好地拟合。我们可以尝试更复杂的数学模型——比如 *a* + *b* *x* + *c* *x*²——这样在这种情况下，我们会做得更好：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/040642c53aef28d034c7fc8f6daed728.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 为什么它有效？](../Images/040642c53aef28d034c7fc8f6daed728.png)'
- en: 'Things can go quite wrong, though. Like here’s [the best we can do](https://reference.wolfram.com/language/ref/FindFit.html) with *a* + *b*/*x* + *c* sin(*x*):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 但事情可能会搞得很糟糕。比如这里是我们用 *a* + *b*/*x* + *c* sin(*x*) 所能做到的[最好结果](https://reference.wolfram.com/language/ref/FindFit.html)：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/c785045d470c2661d0c21894bb0f62c9.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 为什么它有效？](../Images/c785045d470c2661d0c21894bb0f62c9.png)'
- en: It is worth understanding that there’s never a “model-less model”. Any model
    you use has some particular underlying structure—then a certain set of “knobs
    you can turn” (i.e. parameters you can set) to fit your data. And in the case
    of ChatGPT, lots of such “knobs” are used—actually, 175 billion of them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的是，从来没有“没有模型的模型”。你使用的任何模型都有某种特定的基本结构——然后是一组“可以调整的旋钮”（即可以设置的参数）来拟合你的数据。在
    ChatGPT 的情况下，使用了很多这样的“旋钮”——实际上是 1750 亿个。
- en: But the remarkable thing is that the underlying structure of ChatGPT—with “just”
    that many parameters—is sufficient to make a model that computes next-word probabilities
    “well enough” to give us reasonable essay-length pieces of text.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 但值得注意的是，ChatGPT 的基本结构——即使是“仅仅”这么多参数——足以使模型计算下一个单词的概率“足够好”，以生成合理的长篇文本。
- en: Models for Human-Like Tasks
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类似人类任务的模型
- en: The example we gave above involves making a model for numerical data that essentially
    comes from simple physics—where we’ve known for several centuries that “simple
    mathematics applies”. But for ChatGPT we have to make a model of human-language
    text of the kind produced by a human brain. And for something like that we don’t
    (at least yet) have anything like “simple mathematics”. So what might a model
    of it be like?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面给出的例子涉及为数值数据创建一个模型，这些数据基本上来自简单物理学——我们已经知道几个世纪了“简单数学适用”。但对于 ChatGPT，我们需要创建一个人类大脑产生的人类语言文本的模型。对于这样的东西，我们目前（至少还）没有类似“简单数学”的东西。那么这样的模型可能是什么样的呢？
- en: 'Before we talk about language, let’s talk about another human-like task: recognizing
    images. And as a simple example of this, let’s consider images of digits (and,
    yes, this is a [classic machine learning example](https://resources.wolframcloud.com/NeuralNetRepository/resources/050b1a0a-f43a-4c28-b7e0-72607a918467/)):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论语言之前，让我们讨论另一个类似人类的任务：识别图像。作为一个简单的例子，让我们考虑数字图像（是的，这这是一个 [经典的机器学习例子](https://resources.wolframcloud.com/NeuralNetRepository/resources/050b1a0a-f43a-4c28-b7e0-72607a918467/)）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/aadbf8369c6c49fd89d0ddc5ec69607d.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/aadbf8369c6c49fd89d0ddc5ec69607d.png)'
- en: 'One thing we could do is get a bunch of sample images for each digit:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以做的一件事是为每个数字获取一组样本图像：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/bed352ddbc537362a96431ee723f3f11.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/bed352ddbc537362a96431ee723f3f11.png)'
- en: 'Then to find out if an image we’re given as input corresponds to a particular
    digit we could just do an explicit pixel-by-pixel comparison with the samples
    we have. But as humans we certainly seem to do something better—because we can
    still recognize digits, even when they’re for example handwritten, and have all
    sorts of modifications and distortions:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了找出我们输入的图像是否对应于某个特定的数字，我们可以与我们拥有的样本进行逐像素比较。但作为人类，我们显然能做得更好——因为即使这些数字例如是手写的，并且有各种修改和扭曲，我们仍然能识别出来：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/be796159b61ef630d3c35b906c792dc3.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/be796159b61ef630d3c35b906c792dc3.png)'
- en: When we made a model for our numerical data above, we were able to take a numerical
    value *x* that we were given, and just compute *a + b x* for particular *a* and *b*.
    So if we treat the gray-level value of each pixel here as some variable *x[i]* is
    there some function of all those variables that—when evaluated—tells us what digit
    the image is of? It turns out that it’s possible to construct such a function.
    Not surprisingly, it’s not particularly simple, though. And a typical example
    might involve perhaps half a million mathematical operations.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为上述数值数据创建模型时，我们能够接受一个数值 *x*，然后计算 *a + b x* 对于特定的 *a* 和 *b*。所以，如果我们将这里每个像素的灰度值视为某个变量 *x[i]*，是否存在一个所有这些变量的函数——当被评估时——能告诉我们图像的数字是什么？事实证明，构造这样的函数是可能的。不过，这并不令人惊讶，它并不是特别简单。一个典型的例子可能涉及到大约五十万次数学运算。
- en: 'But the end result is that if we feed the collection of pixel values for an
    image into this function, out will come the number specifying which digit we have
    an image of. Later, we’ll talk about how such a function can be constructed, and
    the idea of neural nets. But for now let’s treat the function as black box, where
    we feed in images of, say, handwritten digits (as arrays of pixel values) and
    we get out the numbers these correspond to:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终结果是，如果我们将图像的像素值集合输入到这个函数中，输出的将是指定我们图像中的数字的编号。稍后，我们将探讨如何构造这样的函数以及神经网络的概念。但现在我们先将函数视为一个黑箱，我们输入，例如手写数字的图像（作为像素值数组），然后输出这些图像所对应的数字：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/22f48528d1c298a84d7e4672448f5725.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/22f48528d1c298a84d7e4672448f5725.png)'
- en: 'But what’s really going on here? Let’s say we progressively blur a digit. For
    a little while our function still “recognizes” it, here as a “2”. But soon it
    “loses it”, and starts giving the “wrong” result:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里到底发生了什么？假设我们逐渐模糊一个数字。在一段时间内，我们的函数仍然“识别”它，此时为“2”。但很快它就“失效”了，开始给出“错误”的结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/b5e80068d393cb74d88e87184419980e.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/b5e80068d393cb74d88e87184419980e.png)'
- en: But why do we say it’s the “wrong” result? In this case, we know we got all
    the images by blurring a “2”. But if our goal is to produce a model of what humans
    can do in recognizing images, the real question to ask is what a human would have
    done if presented with one of those blurred images, without knowing where it came
    from.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么我们说这是“错误”的结果呢？在这种情况下，我们知道我们是通过模糊“2”的图像得到的所有图像。但如果我们的目标是制作一个能模拟人类识别图像的模型，真正的问题是如果人类面对这些模糊图像之一而不知道其来源时会做什么。
- en: And we have a “good model” if the results we get from our function typically
    agree with what a human would say. And the nontrivial scientific fact is that
    for an image-recognition task like this we now basically know how to construct
    functions that do this.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个“好的模型”是指如果我们从函数中得到的结果通常与人类的判断一致。而且有一个非平凡的科学事实是，对于像这样的图像识别任务，我们现在基本上知道如何构建执行这些任务的函数。
- en: Can we “mathematically prove” that they work? Well, no. Because to do that we’d
    have to have a mathematical theory of what we humans are doing. Take the “2” image
    and change a few pixels. We might imagine that with only a few pixels “out of
    place” we should still consider the image a “2”. But how far should that go? It’s
    a question of [human visual perception](https://www.wolframscience.com/nks/chap-10--processes-of-perception-and-analysis#sect-10-7--visual-perception).
    And, yes, the answer would no doubt be different for bees or octopuses—and potentially [utterly
    different for putative aliens](https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/#alien-views-of-the-ruliad).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能“数学证明”它们有效吗？其实不能。因为要做到这一点，我们需要对我们人类的行为有一个数学理论。拿“2”的图像来改变几个像素。我们可能会想，如果只有几个像素“错位”，我们仍然应该把这个图像视为“2”。但这种错位的范围应该有多大呢？这是一个关于[人类视觉感知](https://www.wolframscience.com/nks/chap-10--processes-of-perception-and-analysis#sect-10-7--visual-perception)的问题。没错，答案对于蜜蜂或章鱼无疑会有所不同——并且对于假设的外星生物来说可能会[完全不同](https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/#alien-views-of-the-ruliad)。
- en: Neural Nets
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经网络
- en: OK, so how do our typical models for tasks like [image recognition](https://writings.stephenwolfram.com/2015/05/wolfram-language-artificial-intelligence-the-image-identification-project/) actually
    work? The most popular—and successful—current approach uses [neural nets](https://reference.wolfram.com/language/guide/NeuralNetworks.html).
    Invented—in a form remarkably close to their use today—[in the 1940s](https://www.wolframscience.com/nks/notes-10-12--history-of-ideas-about-thinking/),
    neural nets can be thought of as simple idealizations of how [brains seem to work](https://www.wolframscience.com/nks/notes-10-12--the-brain/).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么我们常见的任务模型比如[图像识别](https://writings.stephenwolfram.com/2015/05/wolfram-language-artificial-intelligence-the-image-identification-project/)到底是如何工作的呢？目前最流行—也是最成功的—方法是使用[神经网络](https://reference.wolfram.com/language/guide/NeuralNetworks.html)。神经网络在1940年代就以与今天相似的形式被发明，[接近今天的使用形式](https://www.wolframscience.com/nks/notes-10-12--history-of-ideas-about-thinking/)，可以被视为对[大脑工作方式的简单理想化](https://www.wolframscience.com/nks/notes-10-12--the-brain/)。
- en: In human brains there are about 100 billion neurons (nerve cells), each capable
    of producing an electrical pulse up to perhaps a thousand times a second. The
    neurons are connected in a complicated net, with each neuron having tree-like
    branches allowing it to pass electrical signals to perhaps thousands of other
    neurons. And in a rough approximation, whether any given neuron produces an electrical
    pulse at a given moment depends on what pulses it’s received from other neurons—with
    different connections contributing with different “weights”.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在人类的大脑中大约有1000亿个神经元（神经细胞），每个神经元能够产生每秒高达千次的电脉冲。神经元以复杂的网络形式连接在一起，每个神经元拥有树状分支，使其能够将电信号传递给数千个其他神经元。在粗略的估计中，任何特定的神经元在某一时刻是否产生电脉冲，取决于它从其他神经元接收到的脉冲——不同的连接以不同的“权重”贡献。
- en: When we “see an image” what’s happening is that when photons of light from the
    image fall on (“photoreceptor”) cells at the back of our eyes they produce electrical
    signals in nerve cells. These nerve cells are connected to other nerve cells,
    and eventually the signals go through a whole sequence of layers of neurons. And
    it’s in this process that we “recognize” the image, eventually “forming the thought”
    that we’re “seeing a 2” (and maybe in the end doing something like saying the
    word “two” out loud).
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们“看到图像”时，发生的情况是图像中的光子落在我们眼睛后面的（“光感受器”）细胞上，这些细胞会在神经细胞中产生电信号。这些神经细胞连接到其他神经细胞，最终信号通过一系列神经元层。在这个过程中我们“识别”图像，最终“形成”我们正在“看到一个2”的“思想”（最终可能会做出类似说出“two”这个词的行为）。
- en: 'The “black-box” function from the previous section is a “mathematicized” version
    of such a neural net. It happens to have 11 layers (though only 4 “core layers”):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中的“黑箱”函数是这样一个神经网络的“数学化”版本。它恰好有 11 层（尽管只有 4 层“核心层”）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/a389bf50e95c69fbbe6d2fd6e04a8b78.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/a389bf50e95c69fbbe6d2fd6e04a8b78.png)'
- en: There’s nothing particularly “theoretically derived” about this neural net;
    it’s just something that—[back in 1998—was constructed as a piece of engineering](https://resources.wolframcloud.com/NeuralNetRepository/resources/LeNet-Trained-on-MNIST-Data/),
    and found to work. (Of course, that’s not much different from how we might describe
    our brains as having been produced through the process of biological evolution.)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个神经网络没有什么特别的“理论推导”；它只是某种在[1998 年构建的工程](https://resources.wolframcloud.com/NeuralNetRepository/resources/LeNet-Trained-on-MNIST-Data/)的一部分，并发现它有效。（当然，这与我们可能描述我们的大脑是通过生物进化过程产生的差别不大。）
- en: 'OK, but how does a neural net like this “recognize things”? The key is the [notion
    of attractors](https://www.wolframscience.com/nks/chap-6--starting-from-randomness#sect-6-7--the-notion-of-attractors).
    Imagine we’ve got handwritten images of 1’s and 2’s:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那么这样的神经网络是如何“识别事物”的？关键在于[吸引子](https://www.wolframscience.com/nks/chap-6--starting-from-randomness#sect-6-7--the-notion-of-attractors)的概念。假设我们有
    1 和 2 的手写图像：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/606ae39478e636e568156b724156abd9.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/606ae39478e636e568156b724156abd9.png)'
- en: We somehow want all the 1’s to “be attracted to one place”, and all the 2’s
    to “be attracted to another place”. Or, put a different way, if an image is somehow
    “[closer to being a 1](https://www.wolframscience.com/nks/notes-10-12--memory-analogs-with-numerical-data/)”
    than to being a 2, we want it to end up in the “1 place” and vice versa.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望所有的 1 都“被吸引到一个地方”，所有的 2 都“被吸引到另一个地方”。换句话说，如果一张图像某种程度上是“[更接近 1](https://www.wolframscience.com/nks/notes-10-12--memory-analogs-with-numerical-data/)”而不是
    2，我们希望它最终出现在“1 的地方”，反之亦然。
- en: 'As a straightforward analogy, let’s say we have certain positions in the plane,
    indicated by dots (in a real-life setting they might be positions of coffee shops).
    Then we might imagine that starting from any point on the plane we’d always want
    to end up at the closest dot (i.e. we’d always go to the closest coffee shop).
    We can represent this by dividing the plane into regions (“attractor basins”)
    separated by idealized “watersheds”:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个直接的类比，假设我们在平面上有一些由点表示的位置（在现实生活中，它们可能是咖啡店的位置）。然后我们可以想象，从平面上的任何一点开始，我们总是希望到达最近的点（即，我们总是去最近的咖啡店）。我们可以通过将平面划分为由理想化的“集水区”分隔的区域（“吸引子盆地”）来表示这一点：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/f85154147f9a0f46f796feceed09efb8.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/f85154147f9a0f46f796feceed09efb8.png)'
- en: We can think of this as implementing a kind of “recognition task” in which we’re
    not doing something like identifying what digit a given image “looks most like”—but
    rather we’re just, quite directly, seeing what dot a given point is closest to.
    (The “Voronoi diagram” setup we’re showing here separates points in 2D Euclidean
    space; the digit recognition task can be thought of as doing something very similar—but
    in a 784-dimensional space formed from the gray levels of all the pixels in each
    image.)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把这看作是实施一种“识别任务”，其中我们不是做类似于识别给定图像“最像哪个数字”的事情——而是我们只是直接查看给定点最接近哪个点。（我们在这里展示的“Voronoi
    图”设置将二维欧几里得空间中的点分开；数字识别任务可以被认为是做类似的事情——但在一个由每个图像的所有像素灰度级组成的 784 维空间中。）
- en: 'So how do we make a neural net “do a recognition task”? Let’s consider this
    very simple case:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何让神经网络“进行识别任务”？让我们考虑这个非常简单的案例：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/9c9c0a3ae63add58dfd8e024f90aa1ea.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/9c9c0a3ae63add58dfd8e024f90aa1ea.png)'
- en: 'Our goal is to take an “input” corresponding to a position {*x*,*y*}—and then
    to “recognize” it as whichever of the three points it’s closest to. Or, in other
    words, we want the neural net to compute a function of {*x*,*y*} like:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是接受一个对应于位置 {*x*,*y*} 的“输入”——然后将其“识别”为它最接近的三个点中的任意一个。换句话说，我们希望神经网络计算一个 {*x*,*y*}
    的函数，如：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/47603118013344a2ad7dea9fd994e160.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/47603118013344a2ad7dea9fd994e160.png)'
- en: 'So how do we do this with a neural net? Ultimately a neural net is a connected
    collection of idealized “neurons”—usually arranged in layers—with a simple example
    being:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何用神经网络实现这一点呢？最终，神经网络是一个理想化的“神经元”集合—通常以层的形式排列—一个简单的例子是：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/c6838ede31b4480c30248b8a9b0f4d27.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它能有效工作？](../Images/c6838ede31b4480c30248b8a9b0f4d27.png)'
- en: 'Each “neuron” is effectively set up to evaluate a simple numerical function.
    And to “use” the network, we simply feed numbers (like our coordinates *x* and *y*)
    in at the top, then have neurons on each layer “evaluate their functions” and
    feed the results forward through the network—eventually producing the final result
    at the bottom:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个“神经元”实际上被设置为评估一个简单的数值函数。要“使用”这个网络，我们只需在顶部输入数字（如我们的坐标 *x* 和 *y*），然后让每一层的神经元“评估它们的函数”并将结果向前传递，通过网络—最终在底部产生最终结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0af36f6927be2f5f23582bc1b6df7f2f.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它能有效工作？](../Images/0af36f6927be2f5f23582bc1b6df7f2f.png)'
- en: In the traditional (biologically inspired) setup each neuron effectively has
    a certain set of “incoming connections” from the neurons on the previous layer,
    with each connection being assigned a certain “weight” (which can be a positive
    or negative number). The value of a given neuron is determined by multiplying
    the values of “previous neurons” by their corresponding weights, then adding these
    up and adding a constant—and finally applying a “thresholding” (or “activation”)
    function. In mathematical terms, if a neuron has inputs *x* = {*x*[1], *x*[2] …} then
    we compute *f*[*w* . *x* + *b*], where the weights *w* and constant *b* are generally
    chosen differently for each neuron in the network; the function *f *is usually
    the same.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在传统的（生物启发的）设置中，每个神经元实际上具有一组来自前一层神经元的“输入连接”，每个连接被分配一个特定的“权重”（可以是正数或负数）。给定神经元的值通过将“前一层神经元”的值与其对应的权重相乘，然后将这些值相加并加上一个常数来确定—最后应用一个“阈值”（或“激活”）函数。用数学术语来说，如果一个神经元有输入
    *x* = {*x*[1], *x*[2] …}，那么我们计算 *f*[*w* . *x* + *b*]，其中权重 *w* 和常数 *b* 通常对网络中的每个神经元选择不同；函数
    *f* 通常是相同的。
- en: 'Computing *w* . *x* + *b* is just a matter of matrix multiplication and addition.
    The “activation function” *f* introduces nonlinearity (and ultimately is what
    leads to nontrivial behavior). Various activation functions commonly get used;
    here we’ll just use `[Ramp](http://reference.wolfram.com/language/ref/Ramp.html)` (or
    ReLU):'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 *w* . *x* + *b* 只是矩阵乘法和加法的问题。“激活函数” *f* 引入了非线性（并最终导致了非平凡行为）。各种激活函数通常被使用；这里我们将只使用
    `*[Ramp](http://reference.wolfram.com/language/ref/Ramp.html)`（或 ReLU）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/921952f50d4bb8e342905709b1ef31ee.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它能有效工作？](../Images/921952f50d4bb8e342905709b1ef31ee.png)'
- en: For each task we want the neural net to perform (or, equivalently, for each
    overall function we want it to evaluate) we’ll have different choices of weights.
    (And—as we’ll discuss later—these weights are normally determined by “training”
    the neural net using machine learning from examples of the outputs we want.)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们希望神经网络执行的每个任务（或者等效地，对于我们希望它评估的每个整体函数），我们将有不同的权重选择。（并且—正如我们稍后讨论的—这些权重通常通过使用我们期望输出的示例来“训练”神经网络来确定。）
- en: 'Ultimately, every neural net just corresponds to some overall mathematical
    function—though it may be messy to write out. For the example above, it would
    be:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，每个神经网络只对应某个整体数学函数—尽管写出来可能很麻烦。对于上面的例子，它会是：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0913a4e2f7773cccc3923479b19e123d.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它能有效工作？](../Images/0913a4e2f7773cccc3923479b19e123d.png)'
- en: The neural net of ChatGPT also just corresponds to a mathematical function like
    this—but effectively with billions of terms.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 的神经网络也只是对应于这样一个数学函数—但实际上具有数十亿项。
- en: 'But let’s go back to individual neurons. Here are some examples of the functions
    a neuron with two inputs (representing coordinates *x* and *y*) can compute with
    various choices of weights and constants (and `[Ramp](https://reference.wolfram.com/language/ref/Ramp.html)` as
    activation function):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们回到单个神经元。以下是一个具有两个输入（表示坐标 *x* 和 *y*）的神经元在不同权重和常数选择下可以计算的函数的一些示例（以及 `*[Ramp](https://reference.wolfram.com/language/ref/Ramp.html)`
    作为激活函数）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/cfdb414f02f66c4a89cf761e94a02104.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它能有效工作？](../Images/cfdb414f02f66c4a89cf761e94a02104.png)'
- en: 'But what about the larger network from above? Well, here’s what it computes:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，前面提到的更大网络呢？好吧，这是它计算的结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/7db4b6788b968aaab311059718f189dc.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么...以及它为什么有效？](../Images/7db4b6788b968aaab311059718f189dc.png)'
- en: It’s not quite “right”, but it’s close to the “nearest point” function we showed
    above.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不完全“正确”，但接近于我们上面展示的“最近点”函数。
- en: 'Let’s see what happens with some other neural nets. In each case, as we’ll
    explain later, we’re using machine learning to find the best choice of weights.
    Then we’re showing here what the neural net with those weights computes:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看其他一些神经网络会发生什么。在每种情况下，正如我们稍后会解释的，我们使用机器学习来寻找最佳权重选择。然后我们在这里展示了具有这些权重的神经网络计算结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/92fe2eab80e186279babfacccc24746e.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么...以及它为什么有效？](../Images/92fe2eab80e186279babfacccc24746e.png)'
- en: Bigger networks generally do better at approximating the function we’re aiming
    for. And in the “middle of each attractor basin” we typically get exactly the
    answer we want. But [at the boundaries](https://www.wolframscience.com/nks/notes-10-12--memory-analogs-with-numerical-data/)—where
    the neural net “has a hard time making up its mind”—things can be messier.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 更大的网络通常更擅长于逼近我们所期望的函数。在“每个吸引子盆地的中间”，我们通常会得到我们想要的确切答案。但[在边界处](https://www.wolframscience.com/nks/notes-10-12--memory-analogs-with-numerical-data/)——那里神经网络“很难做出决定”——情况可能会更加混乱。
- en: 'With this simple mathematical-style “recognition task” it’s clear what the
    “right answer” is. But in the problem of recognizing handwritten digits, it’s
    not so clear. What if someone wrote a “2” so badly it looked like a “7”, etc.?
    Still, we can ask how a neural net distinguishes digits—and this gives an indication:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个简单的数学风格的“识别任务”，什么是“正确答案”很清楚。但在识别手写数字的问题中，这就不那么清楚了。如果有人把“2”写得像“7”一样糟糕，怎么办？尽管如此，我们还是可以询问神经网络如何区分数字——这会给出一些指示：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/b421e4f25461ca98deb3f95d14ba1172.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么...以及它为什么有效？](../Images/b421e4f25461ca98deb3f95d14ba1172.png)'
- en: Can we say “mathematically” how the network makes its distinctions? Not really.
    It’s just “doing what the neural net does”. But it turns out that that normally
    seems to agree fairly well with the distinctions we humans make.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能否“数学上”说明网络如何进行区分？不完全能。它只是“做神经网络所做的事”。但结果表明，这通常与我们人类做出的区分非常一致。
- en: 'Let’s take a more elaborate example. Let’s say we have images of cats and dogs.
    And we have a [neural net that’s been trained to distinguish them](https://writings.stephenwolfram.com/2015/05/wolfram-language-artificial-intelligence-the-image-identification-project/).
    Here’s what it might do on some examples:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个更复杂的例子。假设我们有猫和狗的图像。我们有一个[经过训练以区分它们的神经网络](https://writings.stephenwolfram.com/2015/05/wolfram-language-artificial-intelligence-the-image-identification-project/)。它在一些示例中可能会这样做：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/8a48b2a02f545a59fa531e867edd0c3f.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么...以及它为什么有效？](../Images/8a48b2a02f545a59fa531e867edd0c3f.png)'
- en: 'Now it’s even less clear what the “right answer” is. What about a dog dressed
    in a cat suit? Etc. Whatever input it’s given the neural net will generate an
    answer, and in a way reasonably consistent with how humans might. As I’ve said
    above, that’s not a fact we can “derive from first principles”. It’s just something
    that’s empirically been found to be true, at least in certain domains. But it’s
    a key reason why neural nets are useful: that they somehow capture a “human-like”
    way of doing things.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，什么是“正确答案”变得更加模糊了。比如一只穿着猫装的狗？等等。无论给它什么输入，神经网络都会生成一个答案，并且在某种程度上与人类可能的方式相一致。正如我上面所说的，这不是我们可以“从第一原理推导出来的事实”。这只是经过经验发现的真实情况，至少在某些领域如此。但这也是神经网络有用的关键原因之一：它们以某种方式捕捉了“类人”的做事方式。
- en: Show yourself a picture of a cat, and ask “Why is that a cat?”. Maybe you’d
    start saying “Well, I see its pointy ears, etc.” But it’s not very easy to explain
    how you recognized the image as a cat. It’s just that somehow your brain figured
    that out. But for a brain there’s no way (at least yet) to “go inside” and see
    how it figured it out. What about for an (artificial) neural net? Well, it’s straightforward
    to see what each “neuron” does when you show a picture of a cat. But even to get
    a basic visualization is usually very difficult.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 给自己看一张猫的图片，然后问“为什么那是一只猫？”。也许你会开始说“嗯，我看到了它的尖耳朵”等等。但很难解释你是如何识别出这是一只猫的。只是你的大脑以某种方式弄明白了。但对于大脑来说，当前还没有办法（至少还没有）“进入内部”查看它是如何搞明白的。那对于（人工）神经网络呢？好吧，当你展示一张猫的图片时，查看每个“神经元”在做什么是直接的。但即使是获得基本的可视化通常也很困难。
- en: In the final net that we used for the “nearest point” problem above there are
    17 neurons. In the net for recognizing handwritten digits there are 2190\. And
    in the net we’re using to recognize cats and dogs there are 60,650\. Normally
    it would be pretty difficult to visualize what amounts to 60,650-dimensional space.
    But because this is a network set up to deal with images, many of its layers of
    neurons are organized into arrays, like the arrays of pixels it’s looking at.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们用于上述“最近点”问题的最终网络中有17个神经元。在识别手写数字的网络中有2190个。在我们用于识别猫和狗的网络中有60,650个。通常，直观地理解60,650维的空间是相当困难的。但由于这是一个处理图像的网络，它的许多神经网络层被组织成数组，就像它查看的像素数组一样。
- en: And if we take a typical cat image
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们拿一张典型的猫的图像
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/48debc63638967d033e74445202cd209.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么有效？](../Images/48debc63638967d033e74445202cd209.png)'
- en: 'then we can represent the states of neurons at the first layer by a collection
    of derived images—many of which we can readily interpret as being things like
    “the cat without its background”, or “the outline of the cat”:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们可以通过一系列衍生图像来表示第一层的神经元状态——其中许多我们可以很容易地解释为“没有背景的猫”或“猫的轮廓”等：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/079c74a49df21a11196656f036408ee7.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么有效？](../Images/079c74a49df21a11196656f036408ee7.png)'
- en: 'By the 10th layer it’s harder to interpret what’s going on:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到第十层时，解释发生了什么变得更加困难：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/fec7745128553f8413a3d72001e6ef8f.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么有效？](../Images/fec7745128553f8413a3d72001e6ef8f.png)'
- en: But in general we might say that the neural net is “picking out certain features”
    (maybe pointy ears are among them), and using these to determine what the image
    is of. But are those features ones for which we have names—like “pointy ears”?
    Mostly not.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 但一般来说，我们可以说神经网络在“提取某些特征”（也许尖耳朵在其中），并利用这些特征来确定图像的内容。但这些特征是否是我们能给出名称的——如“尖耳朵”？大多数情况下不是。
- en: Are our brains using similar features? Mostly we don’t know. But it’s notable
    that the first few layers of a neural net like the one we’re showing here seem
    to pick out aspects of images (like edges of objects) that seem to be similar
    to ones we know are picked out by the first level of visual processing in brains.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的大脑是否使用了类似的特征？大多数情况下我们并不知晓。但值得注意的是，我们在这里展示的神经网络的前几层似乎能提取图像中的某些方面（如物体的边缘），这些特征似乎与我们知道大脑视觉处理的第一层提取的特征类似。
- en: 'But let’s say we want a “theory of cat recognition” in neural nets. We can
    say: “Look, this particular net does it”—and immediately that gives us some sense
    of “how hard a problem” it is (and, for example, how many neurons or layers might
    be needed). But at least as of now we don’t have a way to “give a narrative description”
    of what the network is doing. And maybe that’s because it truly is computationally
    irreducible, and there’s no general way to find what it does except by explicitly
    tracing each step. Or maybe it’s just that we haven’t “figured out the science”,
    and identified the “natural laws” that allow us to summarize what’s going on.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但假设我们想要一个关于神经网络“猫识别”的“理论”。我们可以说：“看，这个特定的网络可以做到这一点”——这立即给了我们一些“问题有多难”的感觉（例如，需要多少神经元或层）。但至少现在我们还没有办法“给出叙述性描述”网络正在做什么。也许是因为它确实在计算上是不可简化的，除了通过明确追踪每一步之外，没有通用的方法来了解它的功能。或者可能是我们还没有“弄清楚科学”，也没有识别出“自然法则”，以便总结正在发生的事情。
- en: We’ll encounter the same kinds of issues when we talk about generating language
    with ChatGPT. And again it’s not clear whether there are ways to “summarize what
    it’s doing”. But the richness and detail of language (and our experience with
    it) may allow us to get further than with images.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论使用 ChatGPT 生成语言时，也会遇到类似的问题。而且同样不清楚是否有方法来“总结它在做什么”。但语言的丰富性和细节（以及我们对其的经验）可能使我们能够比图像更进一步。
- en: Machine Learning, and the Training of Neural Nets
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习和神经网络的训练
- en: We’ve been talking so far about neural nets that “already know” how to do particular
    tasks. But what makes neural nets so useful (presumably also in brains) is that
    not only can they in principle do all sorts of tasks, but they can be incrementally
    “trained from examples” to do those tasks.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们讨论了“已经知道”如何执行特定任务的神经网络。但神经网络如此有用的原因（也许大脑也是如此）是，它们不仅原则上可以执行各种任务，而且可以通过逐步“从例子中训练”来完成这些任务。
- en: When we make a neural net to distinguish cats from dogs we don’t effectively
    have to write a program that (say) explicitly finds whiskers; instead we just
    show lots of examples of what’s a cat and what’s a dog, and then have the network
    “machine learn” from these how to distinguish them.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们制作一个神经网络来区分猫和狗时，我们不需要编写一个程序（比如）明确地找到胡须；相反，我们只需展示大量猫和狗的示例，然后让网络“机器学习”如何区分它们。
- en: And the point is that the trained network “generalizes” from the particular
    examples it’s shown. Just as we’ve seen above, it isn’t simply that the network
    recognizes the particular pixel pattern of an example cat image it was shown;
    rather it’s that the neural net somehow manages to distinguish images on the basis
    of what we consider to be some kind of “general catness”.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 关键点在于训练后的网络从其展示的特定例子中“泛化”。正如我们上面所见，网络不仅仅是识别了它所展示的猫图像的特定像素模式，而是神经网络以某种我们认为的“通用猫性”来区分图像。
- en: So how does neural net training actually work? Essentially what we’re always
    trying to do is to find weights that make the neural net successfully reproduce
    the examples we’ve given. And then we’re relying on the neural net to “interpolate”
    (or “generalize”) “between” these examples in a “reasonable” way.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 那么神经网络训练实际上是如何工作的呢？本质上，我们始终尝试找到使神经网络成功重现我们给出的示例的权重。然后，我们依赖神经网络以“合理”的方式在这些示例之间“插值”（或“泛化”）。
- en: 'Let’s look at a problem even simpler than the nearest-point one above. Let’s
    just try to get a neural net to learn the function:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个比上面最近点问题更简单的问题。让我们尝试让神经网络学习以下函数：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/84503a9852ed9faf0efa04d8e95c9f40.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么...以及它为什么有效？](../Images/84503a9852ed9faf0efa04d8e95c9f40.png)'
- en: 'For this task, we’ll need a network that has just one input and one output,
    like:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个任务，我们需要一个只有一个输入和一个输出的网络，如下所示：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/3eff9d5b04d8c0a9a7d40c1d3edefbb5.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么...以及它为什么有效？](../Images/3eff9d5b04d8c0a9a7d40c1d3edefbb5.png)'
- en: 'But what weights, etc. should we be using? With every possible set of weights
    the neural net will compute some function. And, for example, here’s what it does
    with a few randomly chosen sets of weights:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们应该使用什么权重等呢？对于每一组可能的权重，神经网络将计算某个函数。例如，以下是它对一些随机选择的权重集的处理：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/160d886acc18ab092acf72859c181396.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么...以及它为什么有效？](../Images/160d886acc18ab092acf72859c181396.png)'
- en: And, yes, we can plainly see that in none of these cases does it get even close
    to reproducing the function we want. So how do we find weights that will reproduce
    the function?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们可以清楚地看到在这些情况下，网络都未能接近重现我们想要的函数。那么我们如何找到能够重现该函数的权重呢？
- en: 'The basic idea is to supply lots of “input ? output” examples to “learn from”—and
    then to try to find weights that will reproduce these examples. Here’s the result
    of doing that with progressively more examples:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是提供大量“输入 ? 输出”示例以“学习”，然后尝试找到能够重现这些示例的权重。以下是随着示例逐渐增多而得到的结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/1ee7e31b826edc7cfa95a25af4e6d3d4.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么...以及它为什么有效？](../Images/1ee7e31b826edc7cfa95a25af4e6d3d4.png)'
- en: At each stage in this “training” the weights in the network are progressively
    adjusted—and we see that eventually we get a network that successfully reproduces
    the function we want. So how do we adjust the weights? The basic idea is at each
    stage to see “how far away we are” from getting the function we want—and then
    to update the weights in such a way as to get closer.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种“训练”的每个阶段，网络中的权重都会逐步调整——我们看到最终得到一个成功重现我们想要的函数的网络。那么我们如何调整权重呢？基本的想法是在每个阶段查看“我们离得到我们想要的函数有多远”——然后以这种方式更新权重，以便更接近。
- en: 'To find out “how far away we are” we compute what’s usually called a “loss
    function” (or sometimes “cost function”). Here we’re using a simple (L2) loss
    function that’s just the sum of the squares of the differences between the values
    we get, and the true values. And what we see is that as our training process progresses,
    the loss function progressively decreases (following a certain “learning curve”
    that’s different for different tasks)—until we reach a point where the network
    (at least to a good approximation) successfully reproduces the function we want:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找出“我们还差多远”，我们计算通常称为“损失函数”（有时称为“成本函数”）的东西。在这里，我们使用一个简单的（L2）损失函数，它只是我们得到的值与真实值之间差异的平方和。我们看到的是，随着训练过程的进展，损失函数逐渐减少（遵循不同任务的特定“学习曲线”）——直到我们达到一个点，在这个点上网络（至少在很大程度上）成功地重现了我们想要的函数：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/7344ea079de84e03e13cf8617caaca45.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/7344ea079de84e03e13cf8617caaca45.png)'
- en: Alright, so the last essential piece to explain is how the weights are adjusted
    to reduce the loss function. As we’ve said, the loss function gives us a “distance”
    between the values we’ve got, and the true values. But the “values we’ve got”
    are determined at each stage by the current version of neural net—and by the weights
    in it. But now imagine that the weights are variables—say *w[i]*. We want to find
    out how to adjust the values of these variables to minimize the loss that depends
    on them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，最后一个关键部分是如何调整权重以减少损失函数。如我们所说，损失函数给出的是我们得到的值与真实值之间的“距离”。但“我们得到的值”是在每个阶段由当前版本的神经网络及其中的权重决定的。现在假设这些权重是变量——比如说
    *w[i]*。我们希望找出如何调整这些变量的值，以最小化依赖于它们的损失。
- en: 'For example, imagine (in an incredible simplification of typical neural nets
    used in practice) that we have just two weights *w*[1] and *w*[2]. Then we might
    have a loss that as a function of *w*[1] and *w*[2] looks like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设（在对实际中使用的典型神经网络进行极简化的情况下）我们只有两个权重 *w*[1] 和 *w*[2]。那么我们可能会有一个损失函数，它作为 *w*[1]
    和 *w*[2] 的函数看起来像这样：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/bfc3ff42bf6424919675bfac3617deb7.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/bfc3ff42bf6424919675bfac3617deb7.png)'
- en: 'Numerical analysis provides a variety of techniques for finding the minimum
    in cases like this. But a typical approach is just to progressively follow the
    path of steepest descent from whatever previous *w*[1], *w*[2] we had:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 数值分析提供了多种技术来寻找这种情况的最小值。但一种典型的方法是逐步沿着从我们之前的 *w*[1] 和 *w*[2] 开始的最陡下降路径前进：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/cb6641f8354a2e4177b4f87bc9416d51.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/cb6641f8354a2e4177b4f87bc9416d51.png)'
- en: Like water flowing down a mountain, all that’s guaranteed is that this procedure
    will end up at some local minimum of the surface (“a mountain lake”); it might
    well not reach the ultimate global minimum.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 就像水流下山一样，唯一可以保证的是这个过程将最终到达表面的某个局部最小值（“一个山间湖泊”）；它可能不会到达最终的全局最小值。
- en: It’s not obvious that it would be feasible to find the path of the steepest
    descent on the “weight landscape”. But calculus comes to the rescue. As we mentioned
    above, one can always think of a neural net as computing a mathematical function—that
    depends on its inputs, and its weights. But now consider differentiating with
    respect to these weights. It turns out that the chain rule of calculus in effect
    lets us “unravel” the operations done by successive layers in the neural net.
    And the result is that we can—at least in some local approximation—“invert” the
    operation of the neural net, and progressively find weights that minimize the
    loss associated with the output.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在“权重景观”上找到最陡下降路径并不明显是可行的。但微积分提供了帮助。正如我们之前提到的，可以将神经网络始终看作是计算一个依赖于其输入和权重的数学函数。但现在考虑对这些权重进行微分。事实证明，微积分的链式法则实际上使我们可以“解开”神经网络中各层的操作。而结果是，我们可以——至少在某种局部近似下——“逆转”神经网络的操作，并逐步找到能最小化与输出相关联的损失的权重。
- en: The picture above shows the kind of minimization we might need to do in the
    unrealistically simple case of just 2 weights. But it turns out that even with
    many more weights (ChatGPT uses 175 billion) it’s still possible to do the minimization,
    at least to some level of approximation. And in fact the big breakthrough in “deep
    learning” that occurred around 2011 was associated with the discovery that in
    some sense it can be easier to do (at least approximate) minimization when there
    are lots of weights involved than when there are fairly few.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图片展示了我们可能需要在仅有2个权重的非现实简单情况下进行的最小化。但是即使有更多的权重（ChatGPT 使用1750亿个），依然可以进行最小化，至少在某种程度的近似下是可能的。事实上，大约在2011年左右发生的“深度学习”重大突破与发现相关：在某种意义上，当涉及到许多权重时，进行（至少是近似的）最小化可能比涉及较少权重时更容易。
- en: In other words—somewhat counterintuitively—it can be easier to solve more complicated
    problems with neural nets than simpler ones. And the rough reason for this seems
    to be that when one has a lot of “weight variables” one has a high-dimensional
    space with “lots of different directions” that can lead one to the minimum—whereas
    with fewer variables it’s easier to end up getting stuck in a local minimum (“mountain
    lake”) from which there’s no “direction to get out”.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说——有些违反直觉的是——用神经网络解决更复杂的问题可能比解决简单问题更容易。其大致原因似乎是，当存在大量“权重变量”时，会有一个高维空间，其中有“许多不同的方向”可以引导我们到达最小值——而对于较少的变量，更容易陷入局部最小值（“山间湖泊”），没有“方向可以脱离”。
- en: 'It’s worth pointing out that in typical cases there are many different collections
    of weights that will all give neural nets that have pretty much the same performance.
    And usually in practical neural net training there are lots of random choices
    made—that lead to “different-but-equivalent solutions”, like these:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 值得指出的是，在典型情况下，有许多不同的权重组合都能使神经网络表现出几乎相同的性能。而在实际的神经网络训练中，通常会做出许多随机选择——这会导致“不同但等效的解决方案”，比如这些：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/67f955d878ffa4dfcd4e1080b2616da8.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/67f955d878ffa4dfcd4e1080b2616da8.png)'
- en: 'But each such “different solution” will have at least slightly different behavior.
    And if we ask, say, for an “extrapolation” outside the region where we gave training
    examples, we can get dramatically different results:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 但每个这样的“不同解决方案”将至少有略微不同的行为。如果我们要求进行例如在给定训练样本区域之外的“外推”，我们可能会得到截然不同的结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/081f18341af1ac29009f6cb8e5f0c62b.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及它为何有效？](../Images/081f18341af1ac29009f6cb8e5f0c62b.png)'
- en: But which of these is “right”? There’s really no way to say. They’re all “consistent
    with the observed data”. But they all correspond to different “innate” ways to
    “think about” what to do “outside the box”. And some may seem “more reasonable”
    to us humans than others.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这些结果中哪一个是“正确”的？实际上没有办法确定。它们都与“观察数据”一致。但它们都对应于不同的“固有”方式来“考虑”在“框外”该做什么。有些可能对我们人类来说显得“更合理”。
- en: The Practice and Lore of Neural Net Training
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 神经网络训练的实践与经验
- en: Particularly over the past decade, there’ve been many advances in the art of
    training neural nets. And, yes, it is basically an art. Sometimes—especially in
    retrospect—one can see at least a glimmer of a “scientific explanation” for something
    that’s being done. But mostly things have been discovered by trial and error,
    adding ideas and tricks that have progressively built a significant lore about
    how to work with neural nets.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是在过去十年中，神经网络训练的艺术取得了许多进展。而且，是的，这基本上是一门艺术。有时——尤其是事后看来——我们可以看到至少一点“科学解释”的闪光点。但大多数情况是通过反复试验发现的，加入了逐渐积累的想法和技巧，从而构建了关于如何使用神经网络的丰富经验。
- en: 'There are several key parts. First, there’s the matter of what architecture
    of neural net one should use for a particular task. Then there’s the critical
    issue of how one’s going to get the data on which to train the neural net. And
    increasingly one isn’t dealing with training a net from scratch: instead a new
    net can either directly incorporate another already-trained net, or at least can
    use that net to generate more training examples for itself.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个关键部分。首先，需要考虑在特定任务中应使用什么样的神经网络架构。接着，关键问题是如何获取用于训练神经网络的数据。而且，越来越多的时候，人们不再从头开始训练一个网络：新的网络可以直接融入另一个已经训练好的网络，或者至少可以利用那个网络生成更多的训练示例。
- en: One might have thought that for every particular kind of task one would need
    a different architecture of neural net. But what’s been found is that the same
    architecture often seems to work even for apparently quite different tasks. At
    some level this reminds one of the [idea of universal computation](https://www.wolframscience.com/nks/chap-11--the-notion-of-computation#sect-11-3--the-phenomenon-of-universality) (and
    my [Principle of Computational Equivalence](https://www.wolframscience.com/nks/chap-12--the-principle-of-computational-equivalence/)),
    but, as I’ll discuss later, I think it’s more a reflection of the fact that the
    tasks we’re typically trying to get neural nets to do are “human-like” ones—and
    neural nets can capture quite general “human-like processes”.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 有人可能认为每种特定类型的任务都需要不同的神经网络架构。但发现相同的架构往往对看似完全不同的任务也有效。在某种程度上，这让人想起了[通用计算的理念](https://www.wolframscience.com/nks/chap-11--the-notion-of-computation#sect-11-3--the-phenomenon-of-universality)（以及我的[计算等效原则](https://www.wolframscience.com/nks/chap-12--the-principle-of-computational-equivalence/)），但正如我稍后讨论的，我认为这更多反映了我们通常尝试让神经网络完成的任务是“类人”的，而神经网络可以捕捉到相当普遍的“类人过程”。
- en: In earlier days of neural nets, there tended to be the idea that one should
    “make the neural net do as little as possible”. For example, in [converting speech
    to text](https://reference.wolfram.com/language/ref/SpeechRecognize.html) it was
    thought that one should first analyze the audio of the speech, break it into phonemes,
    etc. But what was found is that—at least for “human-like tasks”—it’s usually better
    just to try to train the neural net on the “end-to-end problem”, letting it “discover”
    the necessary intermediate features, encodings, etc. for itself.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在早期的神经网络研究中，通常有一种观念是“让神经网络尽可能少做事情”。例如，在[语音转文本](https://reference.wolfram.com/language/ref/SpeechRecognize.html)的过程中，人们认为应该首先分析语音的音频，将其分解为音素等。但是，事实证明——至少对于“类人任务”——通常更好的是直接在“端到端问题”上训练神经网络，让它“发现”必要的中间特征、编码等。
- en: There was also the idea that one should introduce complicated individual components
    into the neural net, to let it in effect “explicitly implement particular algorithmic
    ideas”. But once again, this has mostly turned out not to be worthwhile; instead,
    it’s better just to deal with very simple components and let them “organize themselves”
    (albeit usually in ways we can’t understand) to achieve (presumably) the equivalent
    of those algorithmic ideas.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 也曾有人认为应该将复杂的个体组件引入神经网络中，以便使其“明确实现特定的算法思想”。但再一次，这通常被证明并不值得；相反，更好的做法是处理非常简单的组件，让它们“自我组织”（尽管通常以我们无法理解的方式）来实现（推测上）那些算法思想的等效结果。
- en: That’s not to say that there are no “structuring ideas” that are relevant for
    neural nets. Thus, for example, having [2D arrays of neurons with local connections](https://reference.wolfram.com/language/ref/ConvolutionLayer.html) seems
    at least very useful in the early stages of processing images. And having patterns
    of connectivity that concentrate on “looking back in sequences” seems useful—as
    we’ll see later—in dealing with things like human language, for example in ChatGPT.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说没有与神经网络相关的“结构化想法”。例如，拥有[具有局部连接的 2D 神经元数组](https://reference.wolfram.com/language/ref/ConvolutionLayer.html)在图像处理的早期阶段似乎非常有用。而拥有专注于“回顾序列”的连接模式似乎也很有用——正如我们稍后将看到的——在处理类似人类语言的任务时，例如在
    ChatGPT 中。
- en: 'But an important feature of neural nets is that—like computers in general—they’re
    ultimately just dealing with data. And current neural nets—with current approaches
    to neural net training—[specifically deal with arrays of numbers](https://reference.wolfram.com/language/guide/NetEncoderDecoder.html).
    But in the course of processing, those arrays can be completely rearranged and
    reshaped. And as an example, [the network we used for identifying digits above](https://resources.wolframcloud.com/NeuralNetRepository/resources/LeNet-Trained-on-MNIST-Data/) starts
    with a 2D “image-like” array, quickly “thickening” to many channels, but then [“concentrating
    down” into a 1D array](https://reference.wolfram.com/language/ref/AggregationLayer.html) that
    will ultimately contain elements representing the different possible output digits:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 但神经网络的一个重要特性是——像计算机一样——它们最终只处理数据。而当前的神经网络——通过当前的神经网络训练方法——[特别处理数字数组](https://reference.wolfram.com/language/guide/NetEncoderDecoder.html)。但在处理过程中，这些数组可以被完全重新排列和重塑。举个例子，[我们用于识别数字的网络](https://resources.wolframcloud.com/NeuralNetRepository/resources/LeNet-Trained-on-MNIST-Data/)
    从一个 2D “图像般”的数组开始，很快“变厚”成多个通道，但随后[“浓缩”成一个 1D 数组](https://reference.wolfram.com/language/ref/AggregationLayer.html)，最终包含表示不同可能输出数字的元素。
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/30a02d69fb132e7f6dd982e924bd9029.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及为什么它有效？](../Images/30a02d69fb132e7f6dd982e924bd9029.png)'
- en: But, OK, how can one tell how big a neural net one will need for a particular
    task? It’s something of an art. At some level the key thing is to know “how hard
    the task is”. But for human-like tasks that’s typically very hard to estimate.
    Yes, there may be a systematic way to do the task very “mechanically” by computer.
    But it’s hard to know if there are what one might think of as tricks or shortcuts
    that allow one to do the task at least at a “human-like level” vastly more easily.
    It might take [enumerating a giant game tree](https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/) to
    “mechanically” play a certain game; but there might be a much easier (“heuristic”)
    way to achieve “human-level play”.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，好吧，怎么判断一个神经网络在特定任务中需要多大呢？这有点像艺术。在某种程度上，关键是知道“任务有多难”。但对于类似人类的任务，这通常很难估计。是的，可能有一种系统化的方式，通过计算机非常“机械”地完成任务。但很难知道是否存在所谓的技巧或捷径，可以使任务至少在“类似人类的水平”上变得容易得多。可能需要[列举一个巨大的游戏树](https://writings.stephenwolfram.com/2022/06/games-and-puzzles-as-multicomputational-systems/)才能“机械地”玩某个游戏；但可能存在一种更简单的（“启发式的”）方法来实现“人类水平的游戏”。
- en: 'When one’s dealing with tiny neural nets and simple tasks one can sometimes
    explicitly see that one “can’t get there from here”. For example, here’s the best
    one seems to be able to do on the task from the previous section with a few small
    neural nets:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理微小的神经网络和简单任务时，有时可以明确看到“从这里无法到达那里”。例如，以下是似乎在前一节任务中用几个小型神经网络能做到的最佳效果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/9c79fd5d16eafe3771d123feee336497.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及为什么它有效？](../Images/9c79fd5d16eafe3771d123feee336497.png)'
- en: 'And what we see is that if the net is too small, it just can’t reproduce the
    function we want. But above some size, it has no problem—at least if one trains
    it for long enough, with enough examples. And, by the way, these pictures illustrate
    a piece of neural net lore: that one can often get away with a smaller network
    if there’s a “squeeze” in the middle that forces everything to go through a smaller
    intermediate number of neurons. (It’s also worth mentioning that “no-intermediate-layer”—or
    so-called “[perceptron](https://en.wikipedia.org/wiki/Perceptron)”—networks can
    only learn essentially linear functions—but as soon as there’s even one intermediate
    layer it’s [always in principle possible](https://en.wikipedia.org/wiki/Universal_approximation_theorem) to
    approximate any function arbitrarily well, at least if one has enough neurons,
    though to make it feasibly trainable one typically has some kind of [regularization
    or normalization](https://reference.wolfram.com/language/ref/BatchNormalizationLayer.html).)'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到的是，如果网络太小，它就无法复现我们想要的功能。但在某个大小以上，它没有问题——至少如果你为其训练足够长时间，并提供足够的示例。顺便提一下，这些图片展示了一个神经网络的知识点：如果中间有一个“挤压”部分，迫使所有内容通过一个较小的中间神经元数目，通常可以用一个较小的网络来应对。（也值得一提的是，“无中间层”——或称为“[感知机](https://en.wikipedia.org/wiki/Perceptron)”——网络只能学习本质上是线性的函数，但只要有一个中间层，就[原则上总是可能](https://en.wikipedia.org/wiki/Universal_approximation_theorem)近似任何函数，只要有足够的神经元，尽管为了使其可行地训练，通常会有某种[正则化或归一化](https://reference.wolfram.com/language/ref/BatchNormalizationLayer.html)。
- en: OK, so let’s say one’s settled on a certain neural net architecture. Now there’s
    the issue of getting data to train the network with. And many of the practical
    challenges around neural nets—and machine learning in general—center on acquiring
    or preparing the necessary training data. In many cases (“supervised learning”)
    one wants to get explicit examples of inputs and the outputs one is expecting
    from them. Thus, for example, one might want images tagged by what’s in them,
    or some other attribute. And maybe one will have to explicitly go through—usually
    with great effort—and do the tagging. But very often it turns out to be possible
    to piggyback on something that’s already been done, or use it as some kind of
    proxy. And so, for example, one might use alt tags that have been provided for
    images on the web. Or, in a different domain, one might use closed captions that
    have been created for videos. Or—for language translation training—one might use
    parallel versions of webpages or other documents that exist in different languages.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，假设一个人已经决定使用某种神经网络架构。接下来就是获取训练网络所需数据的问题。许多关于神经网络——以及机器学习总体上的实际挑战——都集中在获取或准备必要的训练数据上。在许多情况下（“监督学习”），人们希望得到输入和期望输出的明确示例。因此，例如，一个人可能希望得到标记了内容的图像或其他属性。也许需要明确地进行标记——通常需要付出很大努力。但是，往往会发现可以利用已经完成的工作，或将其作为某种代理。例如，可以使用网络上为图像提供的
    alt 标签。或者，在另一个领域中，可以使用为视频创建的字幕。又或者——对于语言翻译训练——可以使用存在于不同语言中的网页或其他文档的平行版本。
- en: How much data do you need to show a neural net to train it for a particular
    task? Again, it’s hard to estimate from first principles. Certainly the requirements
    can be dramatically reduced by using “transfer learning” to “transfer in” things
    like lists of important features that have already been learned in another network.
    But generally neural nets need to “see a lot of examples” to train well. And at
    least for some tasks it’s an important piece of neural net lore that the examples
    can be incredibly repetitive. And indeed it’s a standard strategy to just show
    a neural net all the examples one has, over and over again. In each of these “training
    rounds” (or “epochs”) the neural net will be in at least a slightly different
    state, and somehow “reminding it” of a particular example is useful in getting
    it to “remember that example”. (And, yes, perhaps this is analogous to the usefulness
    of repetition in human memorization.)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要向神经网络展示多少数据才能训练它完成特定任务？再次从基本原理估计很难。通过使用“迁移学习”将已在其他网络中学习到的重要特征列表“转移”过来，需求量可以大大减少。但通常神经网络需要“看到大量示例”才能有效训练。而且至少对于某些任务来说，神经网络的一个重要特性是示例可以非常重复。实际上，将所有的示例反复展示给神经网络是一种标准策略。在每一轮“训练”（或“时期”）中，神经网络将处于至少稍微不同的状态，并且以某种方式“提醒它”一个特定示例有助于它“记住那个示例”。（是的，也许这类似于人类记忆中重复的有效性。）
- en: But often just repeating the same example over and over again isn’t enough.
    It’s also necessary to show the neural net variations of the example. And it’s
    a feature of neural net lore that those “data augmentation” variations don’t have
    to be sophisticated to be useful. Just slightly modifying images with basic image
    processing can make them essentially “as good as new” for neural net training.
    And, similarly, when one’s run out of actual video, etc. for training self-driving
    cars, one can go on and just get data from running simulations in a model videogame-like
    environment without all the detail of actual real-world scenes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 但通常，仅仅重复相同的示例并不够。还需要向神经网络展示示例的变化。神经网络的一个特性是这些“数据增强”变化不需要复杂就能有用。仅通过基本的图像处理稍微修改图像，就能使它们对神经网络训练来说“几乎全新”。同样，当用完实际视频等来训练自动驾驶汽车的数据时，可以继续从运行模型视频游戏环境中的模拟中获取数据，而无需实际世界场景的详细信息。
- en: How about something like ChatGPT? Well, it has the nice feature that it can
    do “unsupervised learning”, making it much easier to get it examples to train
    from. Recall that the basic task for ChatGPT is to figure out how to continue
    a piece of text that it’s been given. So to get it “training examples” all one
    has to do is get a piece of text, and mask out the end of it, and then use this
    as the “input to train from”—with the “output” being the complete, unmasked piece
    of text. We’ll discuss this more later, but the main point is that—unlike, say,
    for learning what’s in images—there’s no “explicit tagging” needed; ChatGPT can
    in effect just learn directly from whatever examples of text it’s given.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 像ChatGPT这样的模型怎么样？好在它具有“无监督学习”的优点，使得获取训练示例变得容易。回想一下，ChatGPT的基本任务是弄清楚如何继续给定的文本。因此，要获得“训练示例”，只需获取一段文本，将其末尾遮蔽，然后将其作为“训练输入”——“输出”则是完整的、未遮蔽的文本。我们稍后会详细讨论，但要点是——与学习图像中的内容不同——不需要“显式标记”；ChatGPT实际上可以直接从所提供的文本示例中学习。
- en: OK, so what about the actual learning process in a neural net? In the end it’s
    all about determining what weights will best capture the training examples that
    have been given. And there are all sorts of detailed choices and “hyperparameter
    settings” (so called because the weights can be thought of as “parameters”) that
    can be used to tweak how this is done. There are different [choices of loss function](https://reference.wolfram.com/language/ref/CrossEntropyLossLayer.html) (sum
    of squares, sum of absolute values, etc.). There are different ways to do loss
    minimization (how far in weight space to move at each step, etc.). And then there
    are questions like how big a “batch” of examples to show to get each successive
    estimate of the loss one’s trying to minimize. And, yes, one can apply machine
    learning (as we do, for example, in Wolfram Language) to automate machine learning—and
    to automatically set things like hyperparameters.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么神经网络中的实际学习过程如何呢？归根结底，这一切都是关于确定哪些权重能够最好地捕捉所给定的训练示例。这里有各种详细的选择和“超参数设置”（之所以这样称呼，是因为权重可以被视作“参数”），可以用来调整这些操作的方式。有不同的[损失函数选择](https://reference.wolfram.com/language/ref/CrossEntropyLossLayer.html)（平方和、绝对值和等）。有不同的损失最小化方法（每一步在权重空间中移动多远等）。然后还有类似于每次估计损失时应该展示多大的“批次”问题。是的，可以应用机器学习（例如我们在
    Wolfram 语言中所做的）来自动化机器学习——并自动设置超参数等。
- en: 'But in the end the whole process of training can be characterized by seeing
    how the loss progressively decreases (as in this [Wolfram Language progress monitor
    for a small training](https://reference.wolfram.com/language/ref/NetTrain.html)):'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终，整个训练过程的特征是观察损失值如何逐渐减少（如在这个[Wolfram 语言小型训练进度监控器](https://reference.wolfram.com/language/ref/NetTrain.html)中所示）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/64f8e0fcafd50ae49a95a13150a960bb.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及为什么它有效？](../Images/64f8e0fcafd50ae49a95a13150a960bb.png)'
- en: And what one typically sees is that the loss decreases for a while, but eventually
    flattens out at some constant value. If that value is sufficiently small, then
    the training can be considered successful; otherwise it’s probably a sign one
    should try changing the network architecture.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，所见的是损失值在一段时间内减少，但最终会在某个常数值上趋于平稳。如果这个值足够小，那么训练可以被视为成功；否则，这可能是一个信号，表明需要尝试改变网络架构。
- en: Can one tell how long it should take for the “learning curve” to flatten out?
    Like for so many other things, there seem to be approximate [power-law scaling
    relationships](https://arxiv.org/pdf/2001.08361.pdf) that depend on the size of
    neural net and amount of data one’s using. But the general conclusion is that
    training a neural net is hard—and takes a lot of computational effort. And as
    a practical matter, the vast majority of that effort is spent doing operations
    on arrays of numbers, which is what GPUs are good at—which is why neural net training
    is typically limited by the availability of GPUs.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 能否确定“学习曲线”平稳所需的时间？就像许多其他事情一样，似乎存在近似的[幂律缩放关系](https://arxiv.org/pdf/2001.08361.pdf)，这些关系依赖于神经网络的规模和所使用的数据量。但总体结论是，训练神经网络很困难——需要大量计算资源。作为实际问题，大部分努力都花在对数字数组进行操作上，而这正是
    GPU 擅长的——这也是神经网络训练通常受限于 GPU 可用性的原因。
- en: In the future, will there be fundamentally better ways to train neural nets—or
    generally do what neural nets do? Almost certainly, I think. The fundamental idea
    of neural nets is to create a flexible “computing fabric” out of a large number
    of simple (essentially identical) components—and to have this “fabric” be one
    that can be incrementally modified to learn from examples. In current neural nets,
    one’s essentially using the ideas of calculus—applied to real numbers—to do that
    incremental modification. But it’s increasingly clear that having high-precision
    numbers doesn’t matter; 8 bits or less might be enough even with current methods.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 未来是否会有根本更好的方法来训练神经网络——或一般地做神经网络所做的事情？我认为几乎可以肯定。神经网络的基本思想是用大量简单（本质上相同）组件创建一个灵活的“计算结构”——并使这个“结构”可以逐步修改以从示例中学习。在当前的神经网络中，基本上是使用微积分的思想——应用于实数——来进行这种逐步修改。但越来越明显的是，高精度数字并不重要；即使使用当前的方法，8
    位或更少的精度也可能足够。
- en: With [computational systems like cellular automata](https://www.wolframscience.com/nks/chap-2--the-crucial-experiment#sect-2-1--how-do-simple-programs-behave) that
    basically operate in parallel on many individual bits it’s never been clear [how
    to do this kind of incremental modification](https://content.wolfram.com/uploads/sites/34/2020/07/approaches-complexity-engineering.pdf),
    but there’s no reason to think it isn’t possible. And in fact, much like with
    the “[deep-learning breakthrough of 2012](https://en.wikipedia.org/wiki/AlexNet)”
    it may be that such incremental modification will effectively be easier in more
    complicated cases than in simple ones.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 与[像细胞自动机这样的计算系统](https://www.wolframscience.com/nks/chap-2--the-crucial-experiment#sect-2-1--how-do-simple-programs-behave)基本上在许多独立的比特上并行操作一样，如何进行这种增量修改一直不清楚，[如何进行这种增量修改](https://content.wolfram.com/uploads/sites/34/2020/07/approaches-complexity-engineering.pdf)也没有理由认为它是不可能的。事实上，类似于“[2012年深度学习突破](https://en.wikipedia.org/wiki/AlexNet)”，这种增量修改在更复杂的情况下可能比在简单情况下更容易实现。
- en: Neural nets—perhaps a bit like brains—are set up to have an essentially fixed
    network of neurons, with what’s modified being the strength (“weight”) of connections
    between them. (Perhaps in at least young brains significant numbers of wholly
    new connections can also grow.) But while this might be a convenient setup for
    biology, it’s not at all clear that it’s even close to the best way to achieve
    the functionality we need. And something that involves the equivalent of progressive
    network rewriting (perhaps reminiscent of our [Physics Project](https://www.wolframphysics.org/))
    might well ultimately be better.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络—或许有点像大脑—设置为具有基本固定的神经元网络，修改的是它们之间连接的强度（“权重”）。（或许在至少年轻的大脑中，可能还会有大量全新连接的增长。）但尽管这对生物学来说可能是一个方便的设置，但目前还不清楚这是否接近实现我们所需功能的最佳方式。涉及渐进网络重写的事物（或许类似于我们的[物理项目](https://www.wolframphysics.org/)）最终可能会更好。
- en: 'But even within the framework of existing neural nets there’s currently a crucial
    limitation: neural net training as it’s now done is fundamentally sequential,
    with the effects of each batch of examples being propagated back to update the
    weights. And indeed with current computer hardware—even taking into account GPUs—most
    of a neural net is “idle” most of the time during training, with just one part
    at a time being updated. And in a sense this is because our current computers
    tend to have memory that is separate from their CPUs (or GPUs). But in brains
    it’s presumably different—with every “memory element” (i.e. neuron) also being
    a potentially active computational element. And if we could set up our future
    computer hardware this way it might become possible to do training much more efficiently.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 但即使在现有的神经网络框架内，目前也存在一个关键限制：目前的神经网络训练基本上是顺序的，每批样本的效果会被反向传播以更新权重。事实上，即便考虑到GPU，目前的大多数神经网络在训练过程中大部分时间都是“闲置”的，只有一部分在更新。从某种意义上说，这是因为我们目前的计算机往往有与CPU（或GPU）分开的内存。但在大脑中，这显然是不同的——每个“记忆元素”（即神经元）也可能是一个活动的计算元素。如果我们能将未来的计算机硬件设置成这种方式，可能会使训练变得更加高效。
- en: “Surely a Network That’s Big Enough Can Do Anything!”
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: “肯定一个足够大的网络可以做任何事情！”
- en: The capabilities of something like ChatGPT seem so impressive that one might
    imagine that if one could just “keep going” and train larger and larger neural
    networks, then they’d eventually be able to “do everything”. And if one’s concerned
    with things that are readily accessible to immediate human thinking, it’s quite
    possible that this is the case. But the lesson of the past several hundred years
    of science is that there are things that can be figured out by formal processes,
    but aren’t readily accessible to immediate human thinking.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 像ChatGPT这样的能力看起来如此令人印象深刻，以至于有人可能会想，如果能“持续进行”并训练越来越大的神经网络，那么它们最终能够“做一切”。如果关注的是那些容易被立即人类思维所接触到的事物，这可能确实是这样。但过去几百年的科学教训是，有些东西可以通过形式化过程来解决，但不容易被立即人类思维所接触。
- en: 'Nontrivial mathematics is one big example. But the general case is really computation.
    And ultimately the issue is the phenomenon of [computational irreducibility](https://www.wolframscience.com/nks/chap-12--the-principle-of-computational-equivalence#sect-12-6--computational-irreducibility).
    There are some computations which one might think would take many steps to do,
    but which can in fact be “reduced” to something quite immediate. But the discovery
    of computational irreducibility implies that this doesn’t always work. And instead
    there are processes—probably like the one below—where to work out what happens
    inevitably requires essentially tracing each computational step:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 非平凡的数学就是一个很好的例子。但一般来说，这实际上是计算的问题。最终的问题是 [计算不可简约性](https://www.wolframscience.com/nks/chap-12--the-principle-of-computational-equivalence#sect-12-6--computational-irreducibility)现象。有些计算你可能认为需要许多步骤才能完成，但实际上可以“简化”成相当直接的东西。但计算不可简约性的发现意味着这并不总是有效。相反，有些过程——可能像下面这个——在计算每一步时都必须追踪。
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/9dacf5e1226a8558506d90ecbc434358.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么……以及为什么它有效？](../Images/9dacf5e1226a8558506d90ecbc434358.png)'
- en: The kinds of things that we normally do with our brains are presumably specifically
    chosen to avoid computational irreducibility. It takes special effort to do math
    in one’s brain. And it’s in practice largely impossible to “think through” the
    steps in the operation of any nontrivial program just in one’s brain.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常用大脑做的事情大概是特别选择以避免计算不可简约性的。要在大脑中进行数学运算需要特别的努力。实际上，仅凭大脑几乎不可能“思考”任何非平凡程序的操作步骤。
- en: But of course for that we have computers. And with computers we can readily
    do long, computationally irreducible things. And the key point is that there’s
    in general no shortcut for these.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 但当然我们有计算机。借助计算机，我们可以轻松地完成长时间、计算不可简约的任务。关键点在于，对于这些任务一般没有捷径。
- en: Yes, we could memorize lots of specific examples of what happens in some particular
    computational system. And maybe we could even see some (“computationally reducible”)
    patterns that would allow us to do a little generalization. But the point is that
    computational irreducibility means that we can never guarantee that the unexpected
    won’t happen—and it’s only by explicitly doing the computation that you can tell
    what actually happens in any particular case.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们可以记住许多特定计算系统中发生的具体例子。也许我们甚至可以看到一些（“计算可简约”）的模式，这些模式可以让我们进行一些泛化。但关键是计算不可简约性意味着我们永远无法保证意外不会发生——只有通过明确的计算才能知道在任何特定情况下实际发生了什么。
- en: And in the end there’s just a fundamental tension between learnability and computational
    irreducibility. Learning involves in effect [compressing data by leveraging regularities](https://www.wolframscience.com/nks/chap-10--processes-of-perception-and-analysis/).
    But computational irreducibility implies that ultimately there’s a limit to what
    regularities there may be.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，学习能力与计算不可简约性之间存在根本性的紧张关系。学习实际上涉及到通过利用规律性来 [压缩数据](https://www.wolframscience.com/nks/chap-10--processes-of-perception-and-analysis/)。但计算不可简约性意味着最终可能存在规律性的限制。
- en: As a practical matter, one can imagine building little computational devices—like
    cellular automata or Turing machines—into trainable systems like neural nets.
    And indeed such devices can serve as good “tools” for the neural net—like [Wolfram|Alpha
    can be a good tool for ChatGPT](https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/).
    But computational irreducibility implies that one can’t expect to “get inside”
    those devices and have them learn.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们可以设想将小型计算设备——如细胞自动机或图灵机——构建到可训练系统如神经网络中。的确，这些设备可以作为神经网络的良好“工具”——就像 [Wolfram|Alpha
    可以作为 ChatGPT 的一个好工具](https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/)。但计算不可简约性意味着你不能期望“进入”这些设备并让它们进行学习。
- en: 'Or put another way, there’s an ultimate tradeoff between capability and trainability:
    the more you want a system to make “true use” of its computational capabilities,
    the more it’s going to show computational irreducibility, and the less it’s going
    to be trainable. And the more it’s fundamentally trainable, the less it’s going
    to be able to do sophisticated computation.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，能力和可训练性之间存在一种**最终的权衡**：你希望系统更好地“实际利用”其计算能力，它就会表现出更强的计算不可约性，训练起来也会更加困难。而系统本质上越可训练，它能进行复杂计算的能力就越低。
- en: (For ChatGPT as it currently is, the situation is actually much more extreme,
    because the neural net used to generate each token of output is a pure “feed-forward”
    network, without loops, and therefore has no ability to do any kind of computation
    with nontrivial “control flow”.)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: （以当前的ChatGPT为例，情况实际上更加极端，因为生成每个输出的神经网络是纯粹的“前馈”网络，没有循环，因此无法进行任何具有非平凡“控制流”的计算。）
- en: Of course, one might wonder whether it’s actually important to be able to do
    irreducible computations. And indeed for much of human history it wasn’t particularly
    important. But our modern technological world has been built on engineering that
    makes use of at least mathematical computations—and increasingly also more general
    computations. And if we look at the natural world, it’s [full of irreducible computation](https://www.wolframscience.com/nks/chap-8--implications-for-everyday-systems/)—that
    we’re slowly understanding how to emulate and use for our technological purposes.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，人们可能会想知道进行不可约计算是否真的重要。确实，在人类历史的大部分时间里，这并不特别重要。但我们现代的技术世界是建立在至少数学计算的工程基础上——并且越来越多地是更一般的计算。如果我们观察自然界，它是[充满了不可约计算](https://www.wolframscience.com/nks/chap-8--implications-for-everyday-systems/)——我们正在慢慢理解如何模拟这些计算并将其用于我们的技术目的。
- en: Yes, a neural net can certainly notice the kinds of regularities in the natural
    world that we might also readily notice with “unaided human thinking”. But if
    we want to work out things that are in the purview of mathematical or computational
    science the neural net isn’t going to be able to do it—unless it effectively “uses
    as a tool” an “ordinary” computational system.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，神经网络确实能够注意到自然界中的某些规律，这些规律我们也可以用“未经帮助的人类思维”轻易发现。但如果我们想解决数学或计算科学领域的问题，神经网络就无法做到——除非它有效地“将普通的”计算系统作为工具。
- en: But there’s something potentially confusing about all of this. In the past there
    were plenty of tasks—including writing essays—that we’ve assumed were somehow
    “fundamentally too hard” for computers. And now that we see them done by the likes
    of ChatGPT we tend to suddenly think that computers must have become vastly more
    powerful—in particular surpassing things they were already basically able to do
    (like progressively computing the behavior of computational systems like cellular
    automata).
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 但所有这些可能存在令人困惑的地方。过去有很多任务——包括写作——我们曾假设这些任务对计算机来说“根本太难”。现在看到ChatGPT等完成这些任务，我们会突然认为计算机变得强大得多——特别是超越了它们本来已经能做的事情（如逐步计算像细胞自动机这样的计算系统的行为）。
- en: But this isn’t the right conclusion to draw. Computationally irreducible processes
    are still computationally irreducible, and are still fundamentally hard for computers—even
    if computers can readily compute their individual steps. And instead what we should
    conclude is that tasks—like writing essays—that we humans could do, but we didn’t
    think computers could do, are actually in some sense computationally easier than
    we thought.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是正确的结论。计算不可约的过程仍然是计算不可约的，对计算机来说仍然是根本困难的——即使计算机可以轻松计算它们的单个步骤。我们应该得出的结论是，像写作这样的任务——我们人类能做，但我们认为计算机做不到的——实际上在某种意义上比我们想象的计算上更容易。
- en: In other words, the reason a neural net can be successful in writing an essay
    is because writing an essay turns out to be a “computationally shallower” problem
    than we thought. And in a sense this takes us closer to “having a theory” of how
    we humans manage to do things like writing essays, or in general deal with language.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，神经网络能够成功写作的原因是写作被证明是一个比我们想象的“计算上浅层”的问题。从某种意义上说，这使我们更接近于“拥有一种理论”来解释我们人类如何完成像写作这样的任务，或一般性地处理语言。
- en: If you had a big enough neural net then, yes, you might be able to do whatever
    humans can readily do. But you wouldn’t capture what the natural world in general
    can do—or that the tools that we’ve fashioned from the natural world can do. And
    it’s the use of those tools—both practical and conceptual—that have allowed us
    in recent centuries to transcend the boundaries of what’s accessible to “pure
    unaided human thought”, and capture for human purposes more of what’s out there
    in the physical and computational universe.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拥有一个足够大的神经网络，那么，是的，你可能能够做任何人类能够做的事情。但你不会捕捉到自然界通常能做的事情——或者我们从自然界中打造的工具能做的事情。正是这些工具——无论是实用的还是概念性的——使我们在最近几个世纪能够超越“纯粹无辅助的人类思维”所能接触的边界，并为人类目的捕捉到更多物理和计算宇宙中的内容。
- en: The Concept of Embeddings
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌入的概念
- en: Neural nets—at least as they’re currently set up—are fundamentally based on
    numbers. So if we’re going to to use them to work on something like text we’ll
    need a way to [represent our text with numbers](https://reference.wolfram.com/language/guide/NetEncoderDecoder.html).
    And certainly we could start (essentially as ChatGPT does) by just assigning a
    number to every word in the dictionary. But there’s an important idea—that’s for
    example central to ChatGPT—that goes beyond that. And it’s the idea of “embeddings”.
    One can think of an embedding as a way to try to represent the “essence” of something
    by an array of numbers—with the property that “nearby things” are represented
    by nearby numbers.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络——至少按照它们目前的设置——从根本上是基于数字的。因此，如果我们要使用它们处理像文本这样的内容，我们需要一种[用数字表示文本的方法](https://reference.wolfram.com/language/guide/NetEncoderDecoder.html)。当然，我们可以从（本质上就像ChatGPT做的那样）给字典中的每个单词分配一个数字开始。但有一个重要的概念——例如对ChatGPT来说至关重要——超越了这一点。那就是“嵌入”的概念。可以将嵌入视为通过一组数字来尝试表示某物的“本质”的一种方式——其特点是“相近的事物”由相近的数字表示。
- en: 'And so, for example, we can think of a word embedding as trying to [lay out
    words in a kind of “meaning space”](https://reference.wolfram.com/language/ref/FeatureSpacePlot.html) in
    which words that are somehow “nearby in meaning” appear nearby in the embedding.
    The actual embeddings that are used—say in ChatGPT—tend to involve large lists
    of numbers. But if we project down to 2D, we can show examples of how words are
    laid out by the embedding:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以将词嵌入视为尝试[在一种“意义空间”中布置单词](https://reference.wolfram.com/language/ref/FeatureSpacePlot.html)，其中在意义上“接近”的单词在嵌入中会彼此接近。实际使用的嵌入——比如在ChatGPT中——往往涉及大量的数字列表。但如果我们将其投影到二维，我们可以展示嵌入如何布置单词的示例：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/19ba90e45db7a9f6316acd975f81b6a5.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为何有效？](../Images/19ba90e45db7a9f6316acd975f81b6a5.png)'
- en: And, yes, what we see does remarkably well in capturing typical everyday impressions.
    But how can we construct such an embedding? Roughly the idea is to look at large
    amounts of text (here 5 billion words from the web) and then see “how similar”
    the “environments” are in which different words appear. So, for example, “alligator”
    and “crocodile” will often appear almost interchangeably in otherwise similar
    sentences, and that means they’ll be placed nearby in the embedding. But “turnip”
    and “eagle” won’t tend to appear in otherwise similar sentences, so they’ll be
    placed far apart in the embedding.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们看到的确实非常好地捕捉了典型的日常印象。但我们如何构建这样的嵌入呢？大致的想法是查看大量的文本（这里是来自网络的50亿个单词），然后看看不同单词出现的“环境”有多么相似。例如，“鳄鱼”和“短吻鳄”在其他相似的句子中几乎可以互换出现，这意味着它们在嵌入中会被放置得很接近。但“萝卜”和“鹰”不会在其他相似的句子中出现，因此它们在嵌入中会被放置得很远。
- en: But how does one actually implement something like this using neural nets? Let’s
    start by talking about embeddings not for words, but for images. We want to find
    some way to characterize images by lists of numbers in such a way that “images
    we consider similar” are assigned similar lists of numbers.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如何使用神经网络实际实现这样的东西呢？让我们从谈论图像的嵌入开始。我们想找到一种方法，通过数字列表来表征图像，以便“我们认为相似的图像”被分配相似的数字列表。
- en: How do we tell if we should “consider images similar”? Well, if our images are,
    say, of handwritten digits we might “consider two images similar” if they are
    of the same digit. Earlier we discussed a neural net that was trained to recognize
    handwritten digits. And we can think of this neural net as being set up so that
    in its final output it puts images into 10 different bins, one for each digit.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何判断是否应该“将图像视为相似”？如果我们的图像是手写数字，我们可能会“认为两个图像相似”如果它们是相同的数字。早些时候，我们讨论了一个训练用于识别手写数字的神经网络。我们可以将这个神经网络看作是在最终输出时将图像分到
    10 个不同的类别中，每个数字一个类别。
- en: But what if we “intercept” what’s going on inside the neural net before the
    final “it’s a ‘4’” decision is made? We might expect that inside the neural net
    there are numbers that characterize images as being “mostly 4-like but a bit 2-like”
    or some such. And the idea is to pick up such numbers to use as elements in an
    embedding.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们在做出最终的“这是‘4’”决定之前“截取”神经网络内部发生的事情呢？我们可能会期望神经网络内部存在一些数字，这些数字将图像特征描述为“主要像
    4 但有一点像 2”或类似的东西。其思路是提取这些数字，用作嵌入的元素。
- en: So here’s the concept. Rather than directly trying to characterize “what image
    is near what other image”, we instead consider a well-defined task (in this case
    digit recognition) for which we can get explicit training data—then use the fact
    that in doing this task the neural net implicitly has to make what amount to “nearness
    decisions”. So instead of us ever explicitly having to talk about “nearness of
    images” we’re just talking about the concrete question of what digit an image
    represents, and then we’re “leaving it to the neural net” to implicitly determine
    what that implies about “nearness of images”.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的概念是。与其直接尝试表征“什么图像接近什么其他图像”，我们不如考虑一个明确的任务（在这种情况下是数字识别），对于这个任务我们可以获取明确的训练数据——然后利用在执行这个任务时神经网络隐式地做出类似“接近度决策”的事实。因此，我们不必明确讨论“图像的接近度”，我们只需讨论图像表示的具体数字，然后“让神经网络”隐式地确定这对“图像接近度”意味着什么。
- en: 'So how in more detail does this work for the digit recognition network? We
    can think of the network as consisting of 11 successive layers, that we might
    summarize iconically like this (with activation functions shown as separate layers):'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这对数字识别网络的详细工作原理是什么呢？我们可以将网络视为由 11 层连续层组成，我们可以像这样用图标来总结（激活函数显示为单独的层）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/155e255d5396f59e4dfbacd7e7827907.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 它为什么有效？](../Images/155e255d5396f59e4dfbacd7e7827907.png)'
- en: At the beginning we’re feeding into the first layer actual images, represented
    by 2D arrays of pixel values. And at the end—from the last layer—we’re getting
    out an array of 10 values, which we can think of saying “how certain” the network
    is that the image corresponds to each of the digits 0 through 9.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们将实际图像输入到第一层，这些图像由二维像素值数组表示。到最后一层时，我们得到一个包含 10 个值的数组，我们可以理解为“网络对图像对应于数字
    0 到 9 的每一个数字的确定程度”。
- en: 'Feed in the image ![What Is ChatGPT Doing … and Why Does It Work?](../Images/0b7f4d12ba95197fa48689c4d6b84281.png)and
    the values of the neurons in that last layer are:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 输入图像 ![ChatGPT 在做什么 …… 它为什么有效？](../Images/0b7f4d12ba95197fa48689c4d6b84281.png)，最后一层神经元的值为：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/f8b8dad703dc517751657ef39ef1de26.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 它为什么有效？](../Images/f8b8dad703dc517751657ef39ef1de26.png)'
- en: In other words, the neural net is by this point “incredibly certain” that this
    image is a 4—and to actually get the output “4” we just have to pick out the position
    of the neuron with the largest value.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，神经网络在这一点上对这张图像是 4“非常确定”——为了实际得到输出“4”，我们只需找出具有最大值的神经元的位置。
- en: 'But what if we look one step earlier? The very last operation in the network
    is a so-called [softmax](https://reference.wolfram.com/language/ref/SoftmaxLayer.html) which
    tries to “force certainty”. But before that’s been applied the values of the neurons
    are:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们往前看一步呢？网络中的最后一个操作是所谓的 [softmax](https://reference.wolfram.com/language/ref/SoftmaxLayer.html)，它试图“强制确定性”。但在应用之前，神经元的值是：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/9641e2162f3b18ab9528305e9c1a3de8.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 …… 它为什么有效？](../Images/9641e2162f3b18ab9528305e9c1a3de8.png)'
- en: 'The neuron representing “4” still has the highest numerical value. But there’s
    also information in the values of the other neurons. And we can expect that this
    list of numbers can in a sense be used to characterize the “essence” of the image—and
    thus to provide something we can use as an embedding. And so, for example, each
    of the 4’s here has a slightly different “signature” (or “feature embedding”)—all
    very different from the 8’s:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 代表“4”的神经元仍然具有最高的数值。但其他神经元的数值中也包含信息。我们可以预期，这些数字列表在某种意义上可以用来表征图像的“本质”，从而提供一种我们可以用作嵌入的方法。例如，这里的每个“4”都有一个稍微不同的“签名”（或“特征嵌入”），与“8”有很大的不同：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/52cb7dcd2340bf29bbc3d1f0b181cf6c.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为何有效？](../Images/52cb7dcd2340bf29bbc3d1f0b181cf6c.png)'
- en: Here we’re essentially using 10 numbers to characterize our images. But it’s
    often better to use much more than that. And for example in our digit recognition
    network we can get an array of 500 numbers by tapping into the preceding layer.
    And this is probably a reasonable array to use as an “image embedding”.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们基本上使用10个数字来表征我们的图像。但通常最好使用更多的数字。例如，在我们的数字识别网络中，我们可以通过访问前一层得到一个500个数字的数组。这可能是一个合理的“图像嵌入”数组。
- en: 'If we want to make an explicit visualization of “image space” for handwritten
    digits we need to “reduce the dimension”, effectively by projecting the 500-dimensional
    vector we’ve got into, say, 3D space:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想对手写数字的“图像空间”进行明确的可视化，我们需要“降维”，实际上是将我们得到的500维向量投影到，例如，3D空间中：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/8ea7c9126783b5b895abea564b9a99ca.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为何有效？](../Images/8ea7c9126783b5b895abea564b9a99ca.png)'
- en: We’ve just talked about creating a characterization (and thus embedding) for
    images based effectively on identifying the similarity of images by determining
    whether (according to our training set) they correspond to the same handwritten
    digit. And we can do the same thing much more generally for images if we have
    a training set that identifies, say, which of 5000 common types of object (cat,
    dog, chair, …) each image is of. And in this way we can make an image embedding
    that’s “anchored” by our identification of common objects, but then “generalizes
    around that” according to the behavior of the neural net. And the point is that
    insofar as that behavior aligns with how we humans perceive and interpret images,
    this will end up being an embedding that “seems right to us”, and is useful in
    practice in doing “human-judgement-like” tasks.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚讨论了如何基于通过确定图像是否（根据我们的训练集）对应于相同的手写数字来创建图像的表征（从而进行嵌入）。如果我们有一个训练集来识别每个图像属于5000种常见对象（如猫、狗、椅子等）中的哪一种，我们可以以类似的方式处理图像。通过这种方式，我们可以制作一个由我们识别的常见对象“锚定”的图像嵌入，然后根据神经网络的行为“在此基础上进行泛化”。关键是，只要这种行为与我们人类感知和解释图像的方式一致，这将最终成为一个“对我们来说正确”的嵌入，并且在进行“类似人类判断”的任务时实用。
- en: OK, so how do we follow the same kind of approach to find embeddings for words?
    The key is to start from a task about words for which we can readily do training.
    And the standard such task is “word prediction”. Imagine we’re given “the ___
    cat”. Based on a large corpus of text (say, the text content of the web), what
    are the probabilities for different words that might “fill in the blank”? Or,
    alternatively, given “___ black ___” what are the probabilities for different
    “flanking words”?
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么我们如何按照相同的方法为词语找到嵌入？关键是从一个我们可以轻松进行训练的词语任务开始。标准的这种任务是“词语预测”。假设我们给定了“the ___
    cat”。根据大规模文本语料库（例如，网络上的文本内容），不同词汇填补空白的概率是多少？或者，给定“___ black ___”，不同“旁边词”的概率是多少？
- en: How do we set this problem up for a neural net? Ultimately we have to formulate
    everything in terms of numbers. And one way to do this is just to assign a unique
    number to each of the 50,000 or so common words in English. So, for example, “the”
    might be 914, and “ cat” (with a space before it) might be 3542\. (And these are
    the actual numbers used by GPT-2.) So for the “the ___ cat” problem, our input
    might be {914, 3542}. What should the output be like? Well, it should be a list
    of 50,000 or so numbers that effectively give the probabilities for each of the
    possible “fill-in” words. And once again, to find an embedding, we want to “intercept”
    the “insides” of the neural net just before it “reaches its conclusion”—and then
    pick up the list of numbers that occur there, and that we can think of as “characterizing
    each word”.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何为神经网络设置这个问题？最终我们必须用数字来表述一切。一种方法是为英语中大约50,000个常见单词中的每一个分配一个唯一的数字。因此，例如，“the”可能是914，而“cat”（前面有一个空格）可能是3542。（这些是GPT-2实际使用的数字。）因此，对于“the
    ___ cat”问题，我们的输入可能是{914, 3542}。输出应该是什么样的？它应该是一个包含50,000个左右数字的列表，这些数字有效地给出每个可能的“填空”单词的概率。再一次，为了找到嵌入，我们希望“拦截”神经网络的“内部”部分，正好在它“得出结论”之前——然后拿到那里的数字列表，我们可以将其视为“表征每个单词”。
- en: OK, so what do those characterizations look like? Over the past 10 years there’ve
    been a sequence of different systems developed ([word2vec](https://resources.wolframcloud.com/NeuralNetRepository/resources/ConceptNet-Numberbatch-Word-Vectors-V17.06/), [GloVe](https://resources.wolframcloud.com/NeuralNetRepository/search/?i=GloVe), [BERT](https://resources.wolframcloud.com/NeuralNetRepository/search/?i=BERT), [GPT](https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/),
    …), each based on a different neural net approach. But ultimately all of them
    take words and characterize them by lists of hundreds to thousands of numbers.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那么这些特征是什么样的？在过去的10年里，已经开发了一系列不同的系统（[word2vec](https://resources.wolframcloud.com/NeuralNetRepository/resources/ConceptNet-Numberbatch-Word-Vectors-V17.06/)，[GloVe](https://resources.wolframcloud.com/NeuralNetRepository/search/?i=GloVe)，[BERT](https://resources.wolframcloud.com/NeuralNetRepository/search/?i=BERT)，[GPT](https://resources.wolframcloud.com/NeuralNetRepository/resources/GPT2-Transformer-Trained-on-WebText-Data/)，……），每种系统基于不同的神经网络方法。但最终，它们都将单词转化为数百到数千个数字的列表。
- en: 'In their raw form, these “embedding vectors” are quite uninformative. For example,
    here’s what GPT-2 produces as the raw embedding vectors for three specific words:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始形式下，这些“嵌入向量”是相当不具信息量的。例如，以下是GPT-2为三个特定单词生成的原始嵌入向量：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/35d2556a678dd22a373a05b9d4258cdc.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及它为什么有效？](../Images/35d2556a678dd22a373a05b9d4258cdc.png)'
- en: If we do things like measure distances between these vectors, then we can find
    things like “nearnesses” of words. Later we’ll discuss in more detail what we
    might consider the “cognitive” significance of such embeddings. But for now the
    main point is that we have a way to usefully turn words into “neural-net-friendly”
    collections of numbers.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们测量这些向量之间的距离，就可以发现单词之间的“接近度”。稍后我们将更详细地讨论我们可能考虑的这种嵌入的“认知”意义。但现在主要的点是，我们有一种有用的方法将单词转换为“神经网络友好的”数字集合。
- en: But actually we can go further than just characterizing words by collections
    of numbers; we can also do this for sequences of words, or indeed whole blocks
    of text. And inside ChatGPT that’s how it’s dealing with things. It takes the
    text it’s got so far, and generates an embedding vector to represent it. Then
    its goal is to find the probabilities for different words that might occur next.
    And it represents its answer for this as a list of numbers that essentially give
    the probabilities for each of the 50,000 or so possible words.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 但实际上，我们可以更进一步，不仅仅通过数字集合来表征单词；我们还可以对单词序列，甚至整块文本进行类似处理。在ChatGPT内部，就是这样处理这些事物的。它获取到目前为止的文本，并生成一个嵌入向量来表示它。然后，它的目标是找到可能接下来出现的不同单词的概率。它将其答案表示为一个数字列表，这些数字本质上给出每个大约50,000个可能单词的概率。
- en: (Strictly, ChatGPT does not deal with words, but [rather with “tokens”](https://platform.openai.com/tokenizer)—convenient
    linguistic units that might be whole words, or might just be pieces like “pre”
    or “ing” or “ized”. Working with tokens makes it easier for ChatGPT to handle
    rare, compound and non-English words, and, sometimes, for better or worse, to
    invent new words.)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: （严格来说，ChatGPT 不处理单词，而是[处理“标记”](https://platform.openai.com/tokenizer)——方便的语言单元，可以是整个单词，也可以只是像“pre”或“ing”或“ized”这样的片段。处理标记使
    ChatGPT 更容易处理稀有、复合和非英语单词，并且有时，无论好坏，能发明新词。）
- en: Inside ChatGPT
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ChatGPT 内部
- en: OK, so we’re finally ready to discuss what’s inside ChatGPT. And, yes, ultimately,
    it’s a giant neural net—currently a version of the so-called GPT-3 network with
    175 billion weights. In many ways this is a neural net very much like the other
    ones we’ve discussed. But it’s a neural net that’s particularly set up for dealing
    with language. And its most notable feature is a piece of neural net architecture
    called a “transformer”.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们终于可以讨论 ChatGPT 的内部结构了。是的，最终，它是一个巨大的神经网络——目前是所谓的 GPT-3 网络的一个版本，拥有 1750 亿个权重。从很多方面来看，这个神经网络与我们讨论的其他网络非常相似。但它是一个特别为处理语言而设置的神经网络。而它最显著的特征是一个叫做“transformer”的神经网络架构。
- en: In the first neural nets we discussed above, every neuron at any given layer
    was basically connected (at least with some weight) to every neuron on the layer
    before. But this kind of fully connected network is (presumably) overkill if one’s
    working with data that has particular, known structure. And thus, for example,
    in the early stages of dealing with images, it’s typical to use so-called [convolutional
    neural nets](https://reference.wolfram.com/language/ref/ConvolutionLayer.html) (“convnets”)
    in which neurons are effectively laid out on a grid analogous to the pixels in
    the image—and connected only to neurons nearby on the grid.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上面讨论的第一个神经网络中，每一层的每个神经元基本上都与前一层的每个神经元连接（至少有一定权重）。但这种完全连接的网络（可能）在处理具有特定已知结构的数据时是过度的。因此，例如，在处理图像的早期阶段，通常使用所谓的[卷积神经网络](https://reference.wolfram.com/language/ref/ConvolutionLayer.html)（“convnets”），其中神经元有效地布置在类似于图像中像素的网格上，并且只与网格上附近的神经元连接。
- en: The idea of transformers is to do something at least somewhat similar for sequences
    of tokens that make up a piece of text. But instead of just defining a fixed region
    in the sequence over which there can be connections, transformers instead introduce
    the notion of “[attention](https://reference.wolfram.com/language/ref/AttentionLayer.html)”—and
    the idea of “paying attention” more to some parts of the sequence than others.
    Maybe one day it’ll make sense to just start a generic neural net and do all customization
    through training. But at least as of now it seems to be critical in practice to
    “modularize” things—as transformers do, and probably as our brains also do.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: transformer 的理念是对组成文本的标记序列做一些至少有些相似的事情。但与其仅仅定义序列中可以存在连接的固定区域，transformers 引入了“[注意力](https://reference.wolfram.com/language/ref/AttentionLayer.html)”的概念——即“更关注”序列中的某些部分。也许有一天，启动一个通用的神经网络并通过训练进行所有自定义是有意义的。但至少到目前为止，在实践中，“模块化”事物似乎至关重要——就像
    transformers 所做的那样，也可能是我们的大脑所做的那样。
- en: OK, so what does ChatGPT (or, rather, the GPT-3 network on which it’s based)
    actually do? Recall that its overall goal is to continue text in a “reasonable”
    way, based on what it’s seen from the training it’s had (which consists in looking
    at billions of pages of text from the web, etc.) So at any given point, it’s got
    a certain amount of text—and its goal is to come up with an appropriate choice
    for the next token to add.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么 ChatGPT（或者说，它所基于的 GPT-3 网络）实际做了什么？请记住，它的整体目标是基于它从训练中看到的内容，以一种“合理”的方式继续文本（训练包括查看来自网络等的数十亿页文本）。所以在任何给定时刻，它有一定量的文本——其目标是提出一个合适的下一个标记选择。
- en: It operates in three basic stages. First, it takes the sequence of tokens that
    corresponds to the text so far, and finds an embedding (i.e. an array of numbers)
    that represents these. Then it operates on this embedding—in a “standard neural
    net way”, with values “rippling through” successive layers in a network—to produce
    a new embedding (i.e. a new array of numbers). It then takes the last part of
    this array and generates from it an array of about 50,000 values that turn into
    probabilities for different possible next tokens. (And, yes, it so happens that
    there are about the same number of tokens used as there are common words in English,
    though only about 3000 of the tokens are whole words, and the rest are fragments.)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 它在三个基本阶段进行操作。首先，它获取与目前文本对应的令牌序列，并找到一个表示这些令牌的嵌入（即一个数字数组）。然后，它对这个嵌入进行操作——以“标准神经网络方式”，值在网络的连续层中“传递”——生成一个新的嵌入（即一个新的数字数组）。接着，它取出这个数组的最后部分，从中生成一个约50,000个值的数组，这些值转化为不同可能下一个令牌的概率。（是的，恰好使用的令牌数量大致与英语中的常见单词数量相同，尽管只有约3000个令牌是完整单词，其余的是片段。）
- en: A critical point is that every part of this pipeline is implemented by a neural
    network, whose weights are determined by end-to-end training of the network. In
    other words, in effect nothing except the overall architecture is “explicitly
    engineered”; everything is just “learned” from training data.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 一个关键点是，这个管道的每个部分都是由神经网络实现的，其权重由网络的端到端训练确定。换句话说，实际上除了整体架构外，没有什么是“明确设计”的；一切都是从训练数据中“学习”得来的。
- en: There are, however, plenty of details in the way the architecture is set up—reflecting
    all sorts of experience and neural net lore. And—even though this is definitely
    going into the weeds—I think it’s useful to talk about some of those details,
    not least to get a sense of just what goes into building something like ChatGPT.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，架构设置中还有很多细节——反映了各种经验和神经网络的经验法则。即使这确实是深入细节，我认为谈论一些这些细节是有用的，特别是为了了解构建像ChatGPT这样的东西所涉及的内容。
- en: 'First comes the embedding module. Here’s a schematic Wolfram Language representation
    for it for GPT-2:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是嵌入模块。这里是GPT-2的Wolfram语言示意图：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/49d67ab9fc98b4a84415bfb2d1863161.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及为什么有效？](../Images/49d67ab9fc98b4a84415bfb2d1863161.png)'
- en: The input is a [vector of *n* tokens](https://reference.wolfram.com/language/ref/netencoder/SubwordTokens.html) (represented
    as in the previous section by integers from 1 to about 50,000). Each of these
    tokens is converted (by a [single-layer neural net](https://reference.wolfram.com/language/ref/EmbeddingLayer.html))
    into an embedding vector (of length 768 for GPT-2 and 12,288 for ChatGPT’s GPT-3).
    Meanwhile, there’s a “secondary pathway” that takes the [sequence of (integer)
    positions](https://reference.wolfram.com/language/ref/SequenceIndicesLayer.html) for
    the tokens, and from these integers creates another embedding vector. And finally
    the embedding vectors from the token value and the token position are [added together](https://reference.wolfram.com/language/ref/ThreadingLayer.html)—to
    produce the final sequence of embedding vectors from the embedding module.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 输入是一个*[n]*令牌的[向量](https://reference.wolfram.com/language/ref/netencoder/SubwordTokens.html)（如前一节所示，以从1到约50,000的整数表示）。这些令牌中的每一个都通过一个[单层神经网络](https://reference.wolfram.com/language/ref/EmbeddingLayer.html)转换为一个嵌入向量（GPT-2的长度为768，ChatGPT的GPT-3为12,288）。与此同时，还有一条“次要路径”，它接收[令牌位置的（整数）序列](https://reference.wolfram.com/language/ref/SequenceIndicesLayer.html)，并从这些整数创建另一个嵌入向量。最后，将令牌值和令牌位置的嵌入向量[相加](https://reference.wolfram.com/language/ref/ThreadingLayer.html)，生成来自嵌入模块的最终嵌入向量序列。
- en: Why does one just add the token-value and token-position embedding vectors together?
    I don’t think there’s any particular science to this. It’s just that various different
    things have been tried, and this is one that seems to work. And it’s part of the
    lore of neural nets that—in some sense—so long as the setup one has is “roughly
    right” it’s usually possible to home in on details just by doing sufficient training,
    without ever really needing to “understand at an engineering level” quite how
    the neural net has ended up configuring itself.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要将令牌值和令牌位置嵌入向量相加？我认为这并没有特别的科学依据。只是尝试过各种不同的方法，这个方法似乎有效。而且神经网络的一个经验法则是——在某种意义上——只要设置“大致正确”，通常可以通过足够的训练来调整细节，而无需真正“在工程层面理解”神经网络如何配置。
- en: 'Here’s what the embedding module does, operating on the string *hello hello
    hello hello hello hello hello hello hello hello bye bye bye bye bye bye bye bye
    bye bye*:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入模块的作用是对字符串 *hello hello hello hello hello hello hello hello hello hello bye
    bye bye bye bye bye bye bye bye bye* 进行处理：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/6976274b6e5fd9f1a2cf9be082588d99.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/6976274b6e5fd9f1a2cf9be082588d99.png)'
- en: The elements of the embedding vector for each token are shown down the page,
    and across the page we see first a run of “*hello*” embeddings, followed by a
    run of “*bye*” ones. The second array above is the positional embedding—with its
    somewhat-random-looking structure being just what “happened to be learned” (in
    this case in GPT-2).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 每个令牌的嵌入向量的元素显示在页面的下方，而页面的横向则首先看到一系列的“*hello*”嵌入，然后是一系列的“*bye*”嵌入。上面的第二个数组是位置嵌入——其略显随机的结构正是“恰好被学习到”的（在这种情况下是GPT-2中的结果）。
- en: 'OK, so after the embedding module comes the “main event” of the transformer:
    a sequence of so-called “attention blocks” (12 for GPT-2, 96 for ChatGPT’s GPT-3).
    It’s all pretty complicated—and reminiscent of typical large hard-to-understand
    engineering systems, or, for that matter, biological systems. But anyway, here’s
    a schematic representation of a single “attention block” (for GPT-2):'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，嵌入模块之后是变换器的“主要事件”：一系列所谓的“注意力块”（GPT-2为12个，ChatGPT的GPT-3为96个）。这一切都非常复杂——并且让人联想到典型的大型难以理解的工程系统，或者说生物系统。无论如何，这里是单个“注意力块”（对于GPT-2）的示意图：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/5880d8eb03b792edbba01242ca3df735.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/5880d8eb03b792edbba01242ca3df735.png)'
- en: Within each such attention block there are a collection of “attention heads”
    (12 for GPT-2, 96 for ChatGPT’s GPT-3)—each of which operates independently on
    different chunks of values in the embedding vector. (And, yes, we don’t know any
    particular reason why it’s a good idea to split up the embedding vector, or what
    the different parts of it “mean”; this is just one of those things that’s been
    “found to work”.)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个这样的注意力块中，有一组“注意力头”（GPT-2为12个，ChatGPT的GPT-3为96个）——每个头独立地对嵌入向量中不同的值块进行操作。（而且，我们确实不知道为什么将嵌入向量拆分开来的具体理由，或其不同部分的“意义”是什么；这只是被“发现有效”的事情之一。）
- en: OK, so what do the attention heads do? Basically they’re a way of “looking back”
    in the sequence of tokens (i.e. in the text produced so far), and “packaging up
    the past” in a form that’s useful for finding the next token. [In the first section
    above](https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/#its-just-adding-one-word-at-a-time) we
    talked about using 2-gram probabilities to pick words based on their immediate
    predecessors. What the “attention” mechanism in transformers does is to allow
    “attention to” even much earlier words—thus potentially capturing the way, say,
    verbs can refer to nouns that appear many words before them in a sentence.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么注意力头究竟做了什么呢？基本上，它们是一种“回顾”令牌序列（即已生成的文本）并以对找出下一个令牌有用的形式“打包过去”的方法。[在上面的第一部分](https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/#its-just-adding-one-word-at-a-time)我们讨论了如何使用2-gram概率根据其直接前驱选择单词。变换器中的“注意力”机制使得对更早的单词也能进行“关注”——因此有可能捕捉到例如动词如何指向句子中许多词之前出现的名词的方式。
- en: 'At a more detailed level, what an attention head does is to recombine chunks
    in the embedding vectors associated with different tokens, with certain weights.
    And so, for example, the 12 attention heads in the first attention block (in GPT-2)
    have the following (“look-back-all-the-way-to-the-beginning-of-the-sequence-of-tokens”)
    patterns of “recombination weights” for the “*hello*, *bye*” string above:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在更详细的层面上，注意力头所做的是以某些权重重新组合与不同令牌关联的嵌入向量中的块。例如，第一注意力块（在GPT-2中）的12个注意力头对于上面的“*hello*，*bye*”字符串具有以下（“回顾到令牌序列的开始”）的“重新组合权重”模式：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0ed1f66667ccd079906ba727e8970f4d.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0ed1f66667ccd079906ba727e8970f4d.png)'
- en: 'After being processed by the attention heads, the resulting “re-weighted embedding
    vector” (of length 768 for GPT-2 and length 12,288 for ChatGPT’s GPT-3) is passed
    through a standard [“fully connected” neural net layer](https://reference.wolfram.com/language/ref/LinearLayer.html).
    It’s hard to get a handle on what this layer is doing. But here’s a plot of the
    768×768 matrix of weights it’s using (here for GPT-2):'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在经过注意力头处理后，得到的“重新加权嵌入向量”（GPT-2 的长度为 768，ChatGPT 的 GPT-3 的长度为 12,288）会传递通过一个标准的[“全连接”神经网络层](https://reference.wolfram.com/language/ref/LinearLayer.html)。很难把握这个层在做什么。但这里有一个
    768×768 权重矩阵的图（这是 GPT-2 的）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/92f6cdc193fe50f6f58d09bc614652bd.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它有效？](../Images/92f6cdc193fe50f6f58d09bc614652bd.png)'
- en: 'Taking 64×64 moving averages, some (random-walk-ish) structure begins to emerge:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 64×64 移动平均，一些（随机游走般的）结构开始显现：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/79d32a691a66755f5eadc56549356a56.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它有效？](../Images/79d32a691a66755f5eadc56549356a56.png)'
- en: What determines this structure? Ultimately it’s presumably some “neural net
    encoding” of features of human language. But as of now, what those features might
    be is quite unknown. In effect, we’re “opening up the brain of ChatGPT” (or at
    least GPT-2) and discovering, yes, it’s complicated in there, and we don’t understand
    it—even though in the end it’s producing recognizable human language.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 是什么决定了这个结构？最终，它可能是某种对人类语言特征的“神经网络编码”。但截至目前，这些特征是什么仍然不太清楚。实际上，我们是在“揭开 ChatGPT
    的大脑”（或者至少是 GPT-2 的大脑），发现里面确实很复杂，而且我们还不理解它——尽管最终它能够生成可识别的人类语言。
- en: 'OK, so after going through one attention block, we’ve got a new embedding vector—which
    is then successively passed through additional attention blocks (a total of 12
    for GPT-2; 96 for GPT-3). Each attention block has its own particular pattern
    of “attention” and “fully connected” weights. Here for GPT-2 are the sequence
    of attention weights for the “hello, bye” input, for the first attention head:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么在经过一个注意力块后，我们得到了一个新的嵌入向量——然后这个向量会依次通过额外的注意力块（GPT-2 总共 12 个；GPT-3 总共 96
    个）。每个注意力块都有其独特的“注意力”和“全连接”权重模式。这里是 GPT-2 的“hello, bye”输入的注意力权重序列，第一个注意力头：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/a6d7060fa0b5812a8d862f08b10d98d8.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它有效？](../Images/a6d7060fa0b5812a8d862f08b10d98d8.png)'
- en: 'And here are the (moving-averaged) “matrices” for the fully connected layers:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是（移动平均后的）“矩阵”，用于全连接层：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/d67b0f3522db33ccee532bd5ed7fdca1.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它有效？](../Images/d67b0f3522db33ccee532bd5ed7fdca1.png)'
- en: 'Curiously, even though these “matrices of weights” in different attention blocks
    look quite similar, the distributions of the sizes of weights can be somewhat
    different (and are not always Gaussian):'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，尽管这些不同注意力块中的“权重矩阵”看起来相似，但权重的大小分布可能会有所不同（并且不总是高斯分布）：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/4b8838c0720ceb977c46b209b4bddf59.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 为什么它有效？](../Images/4b8838c0720ceb977c46b209b4bddf59.png)'
- en: So after going through all these attention blocks what is the net effect of
    the transformer? Essentially it’s to transform the original collection of embeddings
    for the sequence of tokens to a final collection. And the particular way ChatGPT
    works is then to pick up the last embedding in this collection, and “decode” it
    to produce a list of probabilities for what token should come next.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 那么在经过所有这些注意力块后，变压器的净效果是什么？本质上，它是将序列的原始嵌入集合转变为最终集合。而 ChatGPT 的具体工作方式是从这个集合中取出最后一个嵌入，并“解码”它以生成一个关于下一个标记应该是什么的概率列表。
- en: So that’s in outline what’s inside ChatGPT. It may seem complicated (not least
    because of its many inevitably somewhat arbitrary “engineering choices”), but
    actually the ultimate elements involved are remarkably simple. Because in the
    end what we’re dealing with is just a neural net made of “artificial neurons”,
    each doing the simple operation of taking a collection of numerical inputs, and
    then combining them with certain weights.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是 ChatGPT 的大致内部结构。它可能看起来很复杂（尤其是因为它有许多不可避免的、略显任意的“工程选择”），但实际上，涉及的最终元素非常简单。因为最终我们处理的只是一个由“人工神经元”组成的神经网络，每个神经元进行的简单操作是接收一组数值输入，然后与某些权重进行组合。
- en: The original input to ChatGPT is an array of numbers (the embedding vectors
    for the tokens so far), and what happens when ChatGPT “runs” to produce a new
    token is just that these numbers “ripple through” the layers of the neural net,
    with each neuron “doing its thing” and passing the result to neurons on the next
    layer. There’s no looping or “going back”. Everything just “feeds forward” through
    the network.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 的原始输入是一个数字数组（到目前为止的令牌嵌入向量），当 ChatGPT “运行”以产生新令牌时，实际上是这些数字在神经网络的层中“波动”，每个神经元“完成其任务”并将结果传递给下一层的神经元。没有循环或“返回”。一切都只是“前馈”通过网络。
- en: It’s a very different setup from a typical computational system—like a [Turing
    machine](https://www.wolframscience.com/nks/chap-3--the-world-of-simple-/%20programs/#sect-3-4--turing-machines)—in
    which results are repeatedly “reprocessed” by the same computational elements.
    Here—at least in generating a given token of output—each computational element
    (i.e. neuron) is used only once.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 这与典型的计算系统——如[Turing machine](https://www.wolframscience.com/nks/chap-3--the-world-of-simple-/%20programs/#sect-3-4--turing-machines)——非常不同，在那种系统中，结果会被同样的计算元素重复“再处理”。在这里——至少在生成给定的输出令牌时——每个计算元素（即神经元）只使用一次。
- en: But there is in a sense still an “outer loop” that reuses computational elements
    even in ChatGPT. Because when ChatGPT is going to generate a new token, it always
    “reads” (i.e. takes as input) the whole sequence of tokens that come before it,
    including tokens that ChatGPT itself has “written” previously. And we can think
    of this setup as meaning that ChatGPT does—at least at its outermost level—involve
    a “feedback loop”, albeit one in which every iteration is explicitly visible as
    a token that appears in the text that it generates.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 但从某种意义上说，即使在 ChatGPT 中，仍然存在一个“外部循环”会重用计算元素。因为当 ChatGPT 生成新令牌时，它总是“读取”（即作为输入）之前的整个令牌序列，包括
    ChatGPT 自己之前“写”的令牌。我们可以认为这种设置意味着 ChatGPT 至少在最外层涉及了一个“反馈循环”，尽管每次迭代都明确地显示为生成文本中的一个令牌。
- en: 'But let’s come back to the core of ChatGPT: the neural net that’s being repeatedly
    used to generate each token. At some level it’s very simple: a whole collection
    of identical artificial neurons. And some parts of the network just consist of
    (“[fully connected](https://reference.wolfram.com/language/ref/LinearLayer.html)”)
    layers of neurons in which every neuron on a given layer is connected (with some
    weight) to every neuron on the layer before. But particularly with its transformer
    architecture, ChatGPT has parts with more structure, in which only specific neurons
    on different layers are connected. (Of course, one could still say that “all neurons
    are connected”—but some just have zero weight.)'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们回到 ChatGPT 的核心：被重复用于生成每个令牌的神经网络。在某种程度上，它非常简单：一整套相同的人工神经元。网络的一些部分只是由（“[全连接](https://reference.wolfram.com/language/ref/LinearLayer.html)）”的神经元层组成，其中每一层上的每个神经元都与上一层的每个神经元连接（具有某些权重）。但特别是通过其变压器架构，ChatGPT
    有更多结构的部分，其中只有不同层上的特定神经元是连接的。（当然，人们仍然可以说“所有神经元都是连接的”——但有些只是权重为零。）
- en: In addition, there are aspects of the neural net in ChatGPT that aren’t most
    naturally thought of as just consisting of “homogeneous” layers. And for example—as
    the iconic summary above indicates—inside an attention block there are places
    where “multiple copies are made” of incoming data, each then going through a different
    “processing path”, potentially involving a different number of layers, and only
    later recombining. But while this may be a convenient representation of what’s
    going on, it’s always at least in principle possible to think of “densely filling
    in” layers, but just having some weights be zero.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，ChatGPT 中的神经网络有一些方面并不完全被认为是由“同质”层组成。例如——如上面的标志性总结所示——在注意力块内部，有些地方会“制作多个副本”
    的输入数据，每个副本通过不同的“处理路径”，可能涉及不同数量的层，然后再进行组合。但虽然这可能是对发生情况的方便表示，但原则上总是可以考虑“密集填充”层，只是某些权重为零。
- en: If one looks at the longest path through ChatGPT, there are about 400 (core)
    layers involved—in some ways not a huge number. But there are millions of neurons—with
    a total of 175 billion connections and therefore 175 billion weights. And one
    thing to realize is that every time ChatGPT generates a new token, it has to do
    a calculation involving every single one of these weights. Implementationally
    these calculations can be somewhat organized “by layer” into highly parallel array
    operations that can conveniently be done on GPUs. But for each token that’s produced,
    there still have to be 175 billion calculations done (and in the end a bit more)—so
    that, yes, it’s not surprising that it can take a while to generate a long piece
    of text with ChatGPT.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查看 ChatGPT 最长的路径，大约有 400 个（核心）层涉及其中——在某种程度上，这并不是一个巨大的数字。但有数百万个神经元——总共有 1750
    亿个连接，因此有 1750 亿个权重。而且需要意识到的是，每当 ChatGPT 生成一个新标记时，它必须进行涉及每一个权重的计算。在实现上，这些计算可以按“层”组织成高度并行的数组操作，这些操作可以方便地在
    GPU 上完成。但是，对于每一个生成的标记，仍然需要进行 1750 亿次计算（最终可能更多）——因此，是的，生成一段长文本可能需要一些时间，这是不令人惊讶的。
- en: 'But in the end, the remarkable thing is that all these operations—individually
    as simple as they are—can somehow together manage to do such a good “human-like”
    job of generating text. It has to be emphasized again that (at least so far as
    we know) there’s no “ultimate theoretical reason” why anything like this should
    work. And in fact, as we’ll discuss, I think we have to view this as a—potentially
    surprising—scientific discovery: that somehow in a neural net like ChatGPT’s it’s
    possible to capture the essence of what human brains manage to do in generating
    language.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终，值得注意的是，所有这些操作——虽然它们单独看起来非常简单——能够共同完成如此出色的“类似人类”的文本生成。这一点需要再次强调的是（至少就我们目前所知），没有“终极理论上的理由”说明这样的事情会有效。实际上，正如我们将讨论的，我认为我们必须将其视为一种——可能令人惊讶的——科学发现：在像
    ChatGPT 这样的神经网络中，确实可以捕捉到人脑在生成语言时所做的本质。
- en: The Training of ChatGPT
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ChatGPT 的训练
- en: OK, so we’ve now given an outline of how ChatGPT works once it’s set up. But
    how did it get set up? How were all those 175 billion weights in its neural net
    determined? Basically they’re the result of very large-scale training, based on
    a huge corpus of text—on the web, in books, etc.—written by humans. As we’ve said,
    even given all that training data, it’s certainly not obvious that a neural net
    would be able to successfully produce “human-like” text. And, once again, there
    seem to be detailed pieces of engineering needed to make that happen. But the
    big surprise—and discovery—of ChatGPT is that it’s possible at all. And that—in
    effect—a neural net with “just” 175 billion weights can make a “reasonable model”
    of text humans write.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在已经概述了 ChatGPT 设置后的工作原理。但它是如何被设置的呢？那些 1750 亿个神经网络权重是如何确定的？基本上，它们是通过大规模训练的结果，这些训练基于由人类编写的大量文本——包括网络上的内容、书籍等。正如我们所说，即使有了所有这些训练数据，神经网络是否能成功生成“类似人类”的文本并不明显。而且，再次强调，要实现这一点似乎需要详细的工程技术。但是，ChatGPT
    的重大惊喜和发现是这完全是可能的。实际上，一个具有“仅仅” 1750 亿个权重的神经网络可以生成一个“合理的模型”来模拟人类所写的文本。
- en: In modern times, there’s lots of text written by humans that’s out there in
    digital form. The public web has at least several billion human-written pages,
    with altogether perhaps a trillion words of text. And if one includes non-public
    webpages, the numbers might be at least 100 times larger. So far, more than 5
    million digitized books have been made available (out of 100 million or so that
    have ever been published), giving another 100 billion or so words of text. And
    that’s not even mentioning text derived from speech in videos, etc. (As a personal
    comparison, [my total lifetime output of published material](https://www.stephenwolfram.com/publications/) has
    been a bit under 3 million words, and over the [past 30 years I’ve written](https://writings.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/) about
    15 million words of email, and altogether typed perhaps 50 million words—and in
    just the past couple of years I’ve spoken more than 10 million words on [livestreams](https://www.stephenwolfram.com/livestreams).
    And, yes, I’ll train a bot from all of that.)
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 在现代，存在大量以数字形式存在的人类书写文本。公共网页至少有数十亿个人书写的页面，总共可能有一万亿个词。如果包括非公开网页，这些数字可能大约大100倍。迄今为止，已经提供了超过500万本数字化的书籍（在曾经出版的约1亿本中），另外提供了大约1000亿个词。更不用提来自视频等的语音文本。（作为个人比较， [我一生出版的材料总量](https://www.stephenwolfram.com/publications/) 略低于300万字，过去的 [30年里我写了](https://writings.stephenwolfram.com/2012/03/the-personal-analytics-of-my-life/) 大约1500万字的邮件，总共打字大约5000万字——在过去几年中，我在 [直播中讲了超过1000万字](https://www.stephenwolfram.com/livestreams) 。是的，我会从所有这些内容中训练一个机器人。）
- en: But, OK, given all this data, how does one train a neural net from it? The basic
    process is very much as we discussed it in the simple examples above. You present
    a batch of examples, and then you adjust the weights in the network to minimize
    the error (“loss”) that the network makes on those examples. The main thing that’s
    expensive about “back propagating” from the error is that each time you do this,
    every weight in the network will typically change at least a tiny bit, and there
    are just a lot of weights to deal with. (The actual “back computation” is typically
    only a small constant factor harder than the forward one.)
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，鉴于所有这些数据，如何从中训练一个神经网络？基本过程与我们在上述简单示例中讨论的非常类似。你呈现一批示例，然后调整网络中的权重，以最小化网络在这些示例上的误差（“损失”）。关于“反向传播”中花费的主要部分在于，每次进行时，网络中的每个权重通常会至少改变一点，而需要处理的权重数量非常多。（实际的“反向计算”通常只是比前向计算难度增加一个小的常数因子。）
- en: With modern GPU hardware, it’s straightforward to compute the results from batches
    of thousands of examples in parallel. But when it comes to actually updating the
    weights in the neural net, current methods require one to do this basically batch
    by batch. (And, yes, this is probably where actual brains—with their combined
    computation and memory elements—have, for now, at least an architectural advantage.)
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 使用现代 GPU 硬件，从成千上万的示例中并行计算结果是非常直接的。但在实际更新神经网络的权重时，目前的方法基本上需要逐批进行。（而且，是的，这可能正是实际大脑——结合了计算和记忆元素——在架构上至少暂时具有优势的地方。）
- en: Even in the seemingly simple cases of learning numerical functions that we discussed
    earlier, we found we often had to use millions of examples to successfully train
    a network, at least from scratch. So how many examples does this mean we’ll need
    in order to train a “human-like language” model? There doesn’t seem to be any
    fundamental “theoretical” way to know. But in practice ChatGPT was successfully
    trained on a few hundred billion words of text.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在我们之前讨论的看似简单的学习数值函数的情况下，我们发现我们经常需要使用数百万个示例来成功训练一个网络，至少从零开始。那么，这意味着我们需要多少个示例来训练一个“类人语言”模型？似乎没有任何基本的“理论”方法来确定。但在实践中，ChatGPT
    是在数百亿个词的文本上成功训练的。
- en: Some of the text it was fed several times, some of it only once. But somehow
    it “got what it needed” from the text it saw. But given this volume of text to
    learn from, how large a network should it require to “learn it well”? Again, we
    don’t yet have a fundamental theoretical way to say. Ultimately—as we’ll discuss
    further below—there’s presumably a certain “total algorithmic content” to human
    language and what humans typically say with it. But the next question is how efficient
    a neural net will be at implementing a model based on that algorithmic content.
    And again we don’t know—although the success of ChatGPT suggests it’s reasonably
    efficient.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 有些文本被重复喂入了几次，有些仅被喂入了一次。但它“从它看到的文本中获得了它需要的东西”。但考虑到这个学习文本的量，应该需要多大的网络才能“学得好”？再次地，我们尚无一个基本的理论方法来说明。最终—正如我们将在下文进一步讨论的—人类语言及其通常所说内容可能存在一定的“总算法内容”。但下一个问题是神经网络在基于这些算法内容实施模型时的效率如何。我们仍然不知道—尽管
    ChatGPT 的成功表明它在效率上是相当合理的。
- en: And in the end we can just note that ChatGPT does what it does using a couple
    hundred billion weights—comparable in number to the total number of words (or
    tokens) of training data it’s been given. In some ways it’s perhaps surprising
    (though empirically observed also in smaller analogs of ChatGPT) that the “size
    of the network” that seems to work well is so comparable to the “size of the training
    data”. After all, it’s certainly not that somehow “inside ChatGPT” all that text
    from the web and books and so on is “directly stored”. Because what’s actually
    inside ChatGPT are a bunch of numbers—with a bit less than 10 digits of precision—that
    are some kind of distributed encoding of the aggregate structure of all that text.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，我们可以简单地指出，ChatGPT 是通过几个亿个权重来完成它的工作的—这个数量与它所接受的训练数据的总词数（或标记数）相当。从某种程度上来说，这或许令人惊讶（虽然在
    ChatGPT 的较小类似模型中也有观察到这种情况），即“网络的规模”与“训练数据的规模”如此相似。毕竟，肯定不是“ChatGPT 内部”直接存储了这些来自网络和书籍等的文本。因为实际上，ChatGPT
    内部是一些数字—精度略低于 10 位数字—这些数字是所有这些文本的某种分布式编码。
- en: Put another way, we might ask what the “effective information content” is of
    human language and what’s typically said with it. There’s the raw corpus of examples
    of language. And then there’s the representation in the neural net of ChatGPT.
    That representation is very likely far from the “algorithmically minimal” representation
    (as we’ll discuss below). But it’s a representation that’s readily usable by the
    neural net. And in this representation it seems there’s in the end rather little
    “compression” of the training data; it seems on average to basically take only
    a bit less than one neural net weight to carry the “information content” of a
    word of training data.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我们可以问人类语言的“有效信息内容”是什么，以及通常所说的内容是什么。有原始的语言示例语料库。然后是 ChatGPT 神经网络中的表示。这个表示很可能远非“算法上最小”的表示（如我们将在下文讨论的）。但这是一个神经网络可以直接使用的表示。在这个表示中，似乎对训练数据的“压缩”相当有限；平均而言，基本上只需少于一个神经网络权重就能承载一个训练数据词的“信息内容”。
- en: When we run ChatGPT to generate text, we’re basically having to use each weight
    once. So if there are *n* weights, we’ve got of order *n* computational steps
    to do—though in practice many of them can typically be done in parallel in GPUs.
    But if we need about *n* words of training data to set up those weights, then
    from what we’ve said above we can conclude that we’ll need about *n*² computational
    steps to do the training of the network—which is why, with current methods, one
    ends up needing to talk about billion-dollar training efforts.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 ChatGPT 生成文本时，基本上每个权重都需要被使用一次。所以如果有 *n* 个权重，我们就需要大约 *n* 步计算—尽管在实际中，许多计算步骤通常可以在
    GPU 中并行完成。但如果我们需要大约 *n* 个训练数据词来设置这些权重，那么从我们以上所说的内容可以得出结论，我们需要大约 *n*² 步计算来完成网络的训练—这就是为什么，使用当前的方法，需要谈论亿级别的训练投入。
- en: Beyond Basic Training
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础训练之外
- en: The majority of the effort in training ChatGPT is spent “showing it” large amounts
    of existing text from the web, books, etc. But it turns out there’s another—apparently
    rather important—part too.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 训练 ChatGPT 的大部分工作是“展示”大量来自网络、书籍等的现有文本。但事实证明，还有另一个—显然相当重要—部分。
- en: As soon as it’s finished its “raw training” from the original corpus of text
    it’s been shown, the neural net inside ChatGPT is ready to start generating its
    own text, continuing from prompts, etc. But while the results from this may often
    seem reasonable, they tend—particularly for longer pieces of text—to “wander off”
    in often rather non-human-like ways. It’s not something one can readily detect,
    say, by doing traditional statistics on the text. But it’s something that actual
    humans reading the text easily notice.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它完成了来自原始文本语料库的“原始训练”，ChatGPT 内部的神经网络就准备开始生成自己的文本，继续从提示中进行。但虽然这些结果可能看起来合理，它们往往——特别是对于较长的文本——会以往往相当非人类的方式“偏离”。这不是一种可以通过对文本进行传统统计轻易检测到的情况。但这是实际阅读文本的人容易注意到的。
- en: 'And a [key idea in the construction of ChatGPT](https://openai.com/blog/instruction-following/) was
    to have another step after “passively reading” things like the web: to have actual
    humans actively interact with ChatGPT, see what it produces, and in effect give
    it feedback on “how to be a good chatbot”. But how can the neural net use that
    feedback? The first step is just to have humans rate results from the neural net.
    But then another neural net model is built that attempts to predict those ratings.
    But now this prediction model can be run—essentially like a loss function—on the
    original network, in effect allowing that network to be “tuned up” by the human
    feedback that’s been given. And the results in practice seem to have a big effect
    on the success of the system in producing “human-like” output.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 [ChatGPT 构建中的关键思想](https://openai.com/blog/instruction-following/) 是在像网络这样的“被动阅读”之后再进行另一步骤：让实际的人类与
    ChatGPT 积极互动，查看它生成的内容，并实际上对其“如何成为一个优秀聊天机器人”提供反馈。但是神经网络如何利用这些反馈？第一步是让人类对神经网络的结果进行评分。但随后构建了另一个神经网络模型，试图预测这些评分。现在，这个预测模型可以运行——本质上就像一个损失函数——在原始网络上，从而使得该网络可以通过已给予的人类反馈进行“调整”。实际结果似乎对系统成功生成“类人”输出有很大影响。
- en: In general, it’s interesting how little “poking” the “originally trained” network
    seems to need to get it to usefully go in particular directions. One might have
    thought that to have the network behave as if it’s “learned something new” one
    would have to go in and run a training algorithm, adjusting weights, and so on.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，令人感兴趣的是，“最初训练过的”网络似乎只需很少的“刺激”就能在特定方向上有用地发展。人们可能会认为，要使网络表现得像是“学到了新东西”，必须进入并运行训练算法，调整权重等等。
- en: But that’s not the case. Instead, it seems to be sufficient to basically tell
    ChatGPT something one time—as part of the prompt you give—and then it can successfully
    make use of what you told it when it generates text. And once again, the fact
    that this works is, I think, an important clue in understanding what ChatGPT is
    “really doing” and how it relates to the structure of human language and thinking.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实并非如此。相反，似乎基本上只需一次告诉 ChatGPT 某些事情——作为你提供的提示的一部分——然后它就可以在生成文本时成功利用你告诉它的内容。我认为，这种有效性的事实是理解
    ChatGPT “真实做了什么”以及它如何与人类语言和思维结构相关的重要线索。
- en: 'There’s certainly something rather human-like about it: that at least once
    it’s had all that pre-training you can tell it something just once and it can
    “remember it”—at least “long enough” to generate a piece of text using it. So
    what’s going on in a case like this? It could be that “everything you might tell
    it is already in there somewhere”—and you’re just leading it to the right spot.
    But that doesn’t seem plausible. Instead, what seems more likely is that, yes,
    the elements are already in there, but the specifics are defined by something
    like a “trajectory between those elements” and that’s what you’re introducing
    when you tell it something.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实有点像人类：至少在它接受了所有那些预训练后，你可以只告诉它一次它就能“记住”——至少“足够长的时间”来使用这些信息生成一段文本。那么，在这种情况下发生了什么？可能是“你告诉它的一切已经在某个地方”——你只是引导它到正确的位置。但这似乎不太可信。相反，更可能的情况是，确实，元素已经在里面，但细节是由类似于“这些元素之间的轨迹”的东西定义的，而这就是你在告诉它某些东西时所引入的。
- en: And indeed, much like for humans, if you tell it something bizarre and unexpected
    that completely doesn’t fit into the framework it knows, it doesn’t seem like
    it’ll successfully be able to “integrate” this. It can “integrate” it only if
    it’s basically riding in a fairly simple way on top of the framework it already
    has.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，就像对人类一样，如果你告诉它一些奇怪且出乎意料的内容，这些内容完全不符合它所知道的框架，它似乎无法成功“整合”这些内容。它只能在基本上沿用其已有的框架的情况下“整合”这些内容。
- en: It’s also worth pointing out again that there are inevitably “algorithmic limits”
    to what the neural net can “pick up”. Tell it “shallow” rules of the form “this
    goes to that”, etc., and the neural net will most likely be able to represent
    and reproduce these just fine—and indeed what it “already knows” from language
    will give it an immediate pattern to follow. But try to give it rules for an actual
    “deep” computation that involves many potentially computationally irreducible
    steps and it just won’t work. (Remember that at each step it’s always just “feeding
    data forward” in its network, never looping except by virtue of generating new
    tokens.)
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得再强调一点，神经网络不可避免地存在“算法限制”，即它可以“捕捉”到的内容。告诉它一些“浅层”的规则，例如“这个去那个”，神经网络很可能能够很好地表示和再现这些规则——事实上，它从语言中“已经知道”的内容会给它一个立刻可以遵循的模式。但如果尝试给它一些实际的“深层”计算规则，这些规则涉及许多可能的计算不可约步骤，它就无法完成。
    （记住，在每一步，它总是只是在其网络中“向前传递数据”，除非通过生成新标记来循环。）
- en: Of course, the network can learn the answer to specific “irreducible” computations.
    But as soon as there are combinatorial numbers of possibilities, no such “table-lookup-style”
    approach will work. And so, yes, just like humans, it’s time then for neural nets
    to “reach out” and use actual computational tools. (And, yes, [Wolfram|Alpha](https://www.wolframalpha.com/) and [Wolfram
    Language](https://www.wolfram.com/language/) are [uniquely suitable](https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/),
    because they’ve been built to “talk about things in the world”, just like the
    language-model neural nets.)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，网络可以学习特定的“不可约”计算的答案。但一旦出现组合数目的可能性，任何这种“表查找风格”的方法都将不起作用。因此，是的，就像人类一样，神经网络也需要“伸出”并使用实际的计算工具。（而且，是的，[Wolfram|Alpha](https://www.wolframalpha.com/)
    和 [Wolfram Language](https://www.wolfram.com/language/) 是 [独特适用](https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/)
    的，因为它们被构建为“讨论世界中的事物”，就像语言模型神经网络一样。）
- en: What Really Lets ChatGPT Work?
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么真正让 ChatGPT 工作？
- en: 'Human language—and the processes of thinking involved in generating it—have
    always seemed to represent a kind of pinnacle of complexity. And indeed it’s seemed
    somewhat remarkable that human brains—with their network of a “mere” 100 billion
    or so neurons (and maybe 100 trillion connections) could be responsible for it.
    Perhaps, one might have imagined, there’s something more to brains than their
    networks of neurons—like some new layer of undiscovered physics. But now with
    ChatGPT we’ve got an important new piece of information: we know that a pure,
    artificial neural network with about as many connections as brains have neurons
    is capable of doing a surprisingly good job of generating human language.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 人类语言——以及生成它的思维过程——总是看起来代表了一种复杂性的巅峰。确实，人类的大脑——虽然只有大约 1000 亿个神经元（可能还有 100 万亿个连接）——能够负责这一点，这似乎有些令人惊讶。也许，有人可能会想象，大脑的某些东西比其神经网络更复杂——比如某种尚未发现的物理层次。但现在，凭借
    ChatGPT，我们获得了一个重要的新信息：我们知道一个纯粹的人工神经网络，其连接数量与大脑中的神经元数量相当，能够非常出色地生成类似人类的语言。
- en: And, yes, that’s still a big and complicated system—with about as many neural
    net weights as there are words of text currently available out there in the world.
    But at some level it still seems difficult to believe that all the richness of
    language and the things it can talk about can be encapsulated in such a finite
    system. Part of what’s going on is no doubt a reflection of the ubiquitous phenomenon
    (that first became evident in the [example of rule 30](https://www.wolframscience.com/nks/chap-2--the-crucial-experiment#sect-2-1--how-do-simple-programs-behave))
    that computational processes can in effect greatly amplify the apparent complexity
    of systems even when their underlying rules are simple. But, actually, as we discussed
    above, neural nets of the kind used in ChatGPT tend to be specifically constructed
    to restrict the effect of this phenomenon—and the computational irreducibility
    associated with it—in the interest of making their training more accessible.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这仍然是一个庞大而复杂的系统——其神经网络权重的数量与目前世界上可用的文本单词数量大致相当。但在某种程度上，仍然很难相信语言的所有丰富性以及它可以讨论的内容都可以被封装在这样一个有限的系统中。部分原因无疑是反映了普遍存在的现象（这一现象首次在[规则
    30 的示例](https://www.wolframscience.com/nks/chap-2--the-crucial-experiment#sect-2-1--how-do-simple-programs-behave)中显现出来），即计算过程实际上可以极大地放大系统的表观复杂性，即使其底层规则很简单。但实际上，正如我们上面讨论的那样，ChatGPT
    使用的神经网络往往被特别构造，以限制这一现象的影响——以及与之相关的计算不可简化性——以便使其训练更为可及。
- en: So how is it, then, that something like ChatGPT can get as far as it does with
    language? The basic answer, I think, is that language is at a fundamental level
    somehow simpler than it seems. And this means that ChatGPT—even with its ultimately
    straightforward neural net structure—is successfully able to “capture the essence”
    of human language and the thinking behind it. And moreover, in its training, ChatGPT
    has somehow “implicitly discovered” whatever regularities in language (and thinking)
    make this possible.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，ChatGPT 如何在语言上取得如此大的进展呢？基本的回答是，我认为语言在根本上比它看起来的要简单。这意味着，即使是具有最终简单的神经网络结构的
    ChatGPT，也能够成功地“捕捉到”人类语言及其背后的思维。此外，在其训练中，ChatGPT 不知怎么地“隐性地发现”了使这一切成为可能的语言（和思维）规律。
- en: 'The success of ChatGPT is, I think, giving us evidence of a fundamental and
    important piece of science: it’s suggesting that we can expect there to be major
    new “laws of language”—and effectively “laws of thought”—out there to discover.
    In ChatGPT—built as it is as a neural net—those laws are at best implicit. But
    if we could somehow make the laws explicit, there’s the potential to do the kinds
    of things ChatGPT does in vastly more direct, efficient—and transparent—ways.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为，ChatGPT 的成功为我们提供了一个基本且重要的科学证据：它表明我们可以期待发现一些重大的新“语言规律”——实际上是“思维规律”。在 ChatGPT
    中——尽管它是作为一个神经网络构建的——这些规律充其量只是隐含的。但如果我们能够以某种方式使这些规律显性化，就有可能以更直接、更高效——以及更透明的方式——做
    ChatGPT 所做的事情。
- en: But, OK, so what might these laws be like? Ultimately they must give us some
    kind of prescription for how language—and the things we say with it—are put together.
    Later we’ll discuss how “looking inside ChatGPT” may be able to give us some hints
    about this, and how what we know from building computational language suggests
    a path forward. But first let’s discuss two long-known examples of what amount
    to “laws of language”—and how they relate to the operation of ChatGPT.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些规律可能是什么样的呢？最终它们必须给我们一些关于语言——以及我们用它说的话——如何组合的指示。稍后我们将讨论如何“窥视 ChatGPT 内部”可能会给我们一些关于这方面的提示，以及从构建计算语言中得到的知识如何暗示前进的道路。但首先，让我们讨论两个早已为人知的“语言规律”示例——以及它们与
    ChatGPT 操作的关系。
- en: 'The first is the syntax of language. Language is not just a random jumble of
    words. Instead, there are (fairly) definite [grammatical rules](https://www.wolframscience.com/nks/notes-10-12--computer-and-human-languages/) for
    how words of different kinds can be put together: in English, for example, nouns
    can be preceded by adjectives and followed by verbs, but typically two nouns can’t
    be right next to each other. Such grammatical structure can (at least approximately)
    be captured by a set of rules that define how what amount to [“parse trees” can
    be put together](https://reference.wolfram.com/language/ref/TextStructure.html):'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是语言的语法。语言不仅仅是随机的词汇组合。相反，存在（相当）明确的[语法规则](https://www.wolframscience.com/nks/notes-10-12--computer-and-human-languages/)，规定了不同类型的词如何组合在一起：例如在英语中，名词可以被形容词修饰并由动词跟随，但通常两个名词不能紧挨在一起。这种语法结构可以（至少大致上）通过一套规则来捕捉，这些规则定义了如何将[“解析树”组合在一起](https://reference.wolfram.com/language/ref/TextStructure.html)：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/1505a76a3c53904023b06a5f75bf396e.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/1505a76a3c53904023b06a5f75bf396e.png)'
- en: ChatGPT doesn’t have any explicit “knowledge” of such rules. But somehow in
    its training it implicitly “discovers” them—and then seems to be good at following
    them. So how does this work? At a “big picture” level it’s not clear. But to get
    some insight it’s perhaps instructive to look at a much simpler example.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 并没有明确的“知识”关于这些规则。但它在训练过程中以某种方式“发现”了这些规则——然后似乎能够很好地遵循它们。那么这如何运作呢？从“大图景”层面来看，还不清楚。但为了获得一些见解，也许可以看看一个更简单的例子。
- en: 'Consider a “language” formed from sequences of (’s and )’s, with a [grammar
    that specifies](https://www.wolframscience.com/nks/notes-7-9--nested-lists/) that
    parentheses should always be balanced, as represented by a parse tree like:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个由（’和）’组成的“语言”，其[语法规定](https://www.wolframscience.com/nks/notes-7-9--nested-lists/)
    括号应始终保持平衡，如通过解析树表示：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/c12a678e99094187cf531bfe227cb655.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/c12a678e99094187cf531bfe227cb655.png)'
- en: Can we train a neural net to produce “grammatically correct” parenthesis sequences?
    There are various ways to handle sequences in neural nets, but let’s use transformer
    nets, as ChatGPT does. And given a simple transformer net, we can start feeding
    it grammatically correct parenthesis sequences as training examples. A subtlety
    (which actually also appears in ChatGPT’s generation of human language) is that
    in addition to our “content tokens” (here “(” and “)”) we have to include an “End”
    token, that’s generated to indicate that the output shouldn’t continue any further
    (i.e. for ChatGPT, that one’s reached the “end of the story”).
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以训练一个神经网络来生成“语法正确”的括号序列吗？处理序列的神经网络有多种方法，但我们使用与 ChatGPT 相同的变换器网络。给定一个简单的变换器网络，我们可以开始用语法正确的括号序列作为训练样本。一个微妙之处（实际上也出现在
    ChatGPT 的语言生成中）是，除了我们的“内容标记”（这里是“（” 和 “）”）外，我们还必须包括一个“结束”标记，用于表示输出不应该继续（即对于 ChatGPT
    来说，这表示“故事的结尾”）。
- en: If we set up a transformer net with just one attention block with 8 heads and
    feature vectors of length 128 (ChatGPT also uses feature vectors of length 128,
    but has 96 attention blocks, each with 96 heads) then it doesn’t seem possible
    to get it to learn much about parenthesis language. But with 2 attention blocks,
    the learning process seems to converge—at least after 10 million or so examples
    have been given (and, as is common with transformer nets, showing yet more examples
    just seems to degrade its performance).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们设置一个只有一个具有 8 个头的注意力块和长度为 128 的特征向量的变换器网络（ChatGPT 也使用长度为 128 的特征向量，但有 96
    个注意力块，每个具有 96 个头），那么似乎无法让它学到很多关于括号语言的知识。但有了 2 个注意力块后，学习过程似乎会收敛——至少在给出大约 1000 万个样本后（并且，正如变换器网络中常见的那样，显示更多的样本似乎只是降低了其性能）。
- en: 'So with this network, we can do the analog of what ChatGPT does, and ask for
    probabilities for what the next token should be—in a parenthesis sequence:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，使用这个网络，我们可以模拟 ChatGPT 的功能，并请求预测下一个标记应该是什么——在一个括号序列中：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/b1db22972c6053372dac09f3075745f3.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/b1db22972c6053372dac09f3075745f3.png)'
- en: And in the first case, the network is “pretty sure” that the sequence can’t
    end here—which is good, because if it did, the parentheses would be left unbalanced.
    In the second case, however, it “correctly recognizes” that the sequence can end
    here, though it also “points out” that it’s possible to “start again”, putting
    down a “(”, presumably with a “)” to follow. But, oops, even with its 400,000
    or so laboriously trained weights, it says there’s a 15% probability to have “)”
    as the next token—which isn’t right, because that would necessarily lead to an
    unbalanced parenthesis.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，网络“相当确定”序列不能在这里结束——这是好的，因为如果在这里结束，括号将会不平衡。然而，在第二个例子中，网络“正确地识别”序列可以在这里结束，尽管它也“指出”可以“重新开始”，放下一个“(”，推测会跟一个“)”
    。但，哎呀，即使拥有大约40万个经过辛苦训练的权重，它也表示有15%的概率下一个标记是“）”——这不对，因为那会导致括号不平衡。
- en: 'Here’s what we get if we ask the network for the highest-probability completions
    for progressively longer sequences of (’s:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要求网络对逐渐增长的括号序列进行最高概率的补全，我们会得到以下结果：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/bb3bf9e34391cc8fcef23843f9a12f5e.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么……以及为什么它有效？](../Images/bb3bf9e34391cc8fcef23843f9a12f5e.png)'
- en: And, yes, up to a certain length the network does just fine. But then it starts
    failing. It’s a pretty typical kind of thing to see in a “precise” situation like
    this with a neural net (or with machine learning in general). Cases that a human
    “can solve in a glance” the neural net can solve too. But cases that require doing
    something “more algorithmic” (e.g. explicitly counting parentheses to see if they’re
    closed) the neural net tends to somehow be “too computationally shallow” to reliably
    do. (By the way, even the full current ChatGPT has a hard time correctly matching
    parentheses in long sequences.)
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，对于一定长度的序列，网络表现得很好。但是，超出这个长度后，它就开始出现问题。这是一种在“精确”情况下看到的典型现象，无论是神经网络还是一般的机器学习。神经网络可以解决那些人类“可以一眼看懂”的问题。但是，对于那些需要进行“更算法化”的操作（例如，明确计算括号是否匹配）的问题，神经网络往往会变得“计算上过于浅显”，难以可靠地处理。（顺便提一下，即使是当前版本的ChatGPT，在处理长序列的括号匹配时也会遇到困难。）
- en: So what does this mean for things like ChatGPT and the syntax of a language
    like English? The parenthesis language is “austere”—and much more of an “algorithmic
    story”. But in English it’s much more realistic to be able to “guess” what’s grammatically
    going to fit on the basis of local choices of words and other hints. And, yes,
    the neural net is much better at this—even though perhaps it might miss some “formally
    correct” case that, well, humans might miss as well. But the main point is that
    the fact that there’s an overall syntactic structure to the language—with all
    the regularity that implies—in a sense limits “how much” the neural net has to
    learn. And a key “natural-science-like” observation is that the transformer architecture
    of neural nets like the one in ChatGPT seems to successfully be able to learn
    the kind of nested-tree-like syntactic structure that seems to exist (at least
    in some approximation) in all human languages.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这对像ChatGPT这样的系统以及像英语这样的语言的语法意味着什么？括号语言是“简洁的”——更像是“算法化的故事”。但在英语中，基于局部词汇选择和其他提示来“猜测”语法上会适合的内容更为现实。是的，神经网络在这方面要更好——尽管它可能会遗漏一些“形式上正确”的情况，人类也可能会遗漏。但关键点是，语言中存在整体的语法结构——所有的规则性都意味着——在某种程度上限制了“神经网络需要学习的内容”。一个关键的“自然科学”观察是，像ChatGPT中的变换器架构似乎成功地学习了那种嵌套树状的语法结构，这种结构似乎存在（至少在某种程度上）于所有人类语言中。
- en: Syntax provides one kind of constraint on language. But there are clearly more.
    A sentence like “Inquisitive electrons eat blue theories for fish” is grammatically
    correct but isn’t something one would normally expect to say, and wouldn’t be
    considered a success if ChatGPT generated it—because, well, with the normal meanings
    for the words in it, it’s basically meaningless.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 语法为语言提供了一种约束。然而，显然还有更多的约束。像“Inquisitive electrons eat blue theories for fish”这样的句子在语法上是正确的，但通常不被认为是正常的表达，如果ChatGPT生成了这样的句子，也不会被认为是成功的——因为按照这些词的正常含义，这句话基本上是毫无意义的。
- en: But is there a general way to tell if a sentence is meaningful? There’s no traditional
    overall theory for that. But it’s something that one can think of ChatGPT as having
    implicitly “developed a theory for” after being trained with billions of (presumably
    meaningful) sentences from the web, etc.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 但是否有一种通用的方法来判断句子是否有意义？对于这个问题没有传统的总体理论。但可以认为ChatGPT在用来自网络等的数十亿个（可能有意义的）句子进行训练后，隐含地“发展了一个理论”。
- en: What might this theory be like? Well, there’s one tiny corner that’s basically
    been known for two millennia, and that’s [logic](https://writings.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/).
    And certainly in the syllogistic form in which Aristotle discovered it, logic
    is basically a way of saying that sentences that follow certain patterns are reasonable,
    while others are not. Thus, for example, it’s reasonable to say “All X are Y.
    This is not Y, so it’s not an X” (as in “All fishes are blue. This is not blue,
    so it’s not a fish.”). And just as one can somewhat whimsically imagine that Aristotle
    discovered syllogistic logic by going (“machine-learning-style”) through lots
    of examples of rhetoric, so too one can imagine that in the training of ChatGPT
    it will have been able to “discover syllogistic logic” by looking at lots of text
    on the web, etc. (And, yes, while one can therefore expect ChatGPT to produce
    text that contains “correct inferences” based on things like syllogistic logic,
    it’s a quite different story when it comes to more sophisticated formal logic—and
    I think one can expect it to fail here for the same kind of reasons it fails in
    parenthesis matching.)
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这个理论可能是什么样的呢？嗯，有一个微小的角落基本上已经被了解了两千年，那就是[逻辑](https://writings.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/)。毫无疑问，在亚里士多德发现它的三段论形式中，逻辑基本上是一种说法，即遵循某些模式的句子是合理的，而其他的则不是。因此，例如，说“所有X都是Y。这不是Y，所以它不是X”是合理的（比如“所有鱼都是蓝色的。这不是蓝色的，所以它不是鱼。”）。正如可以有些异想天开地想象亚里士多德通过大量修辞例子“机器学习风格”地发现了三段论逻辑一样，也可以想象在训练ChatGPT时，它能够通过查看大量网络上的文本等来“发现三段论逻辑”。（是的，虽然因此可以期望ChatGPT生成的文本包含基于三段论逻辑的“正确推论”，但当涉及到更复杂的形式逻辑时，情况就大相径庭了——我认为可以预期它在这里会失败，原因与括号匹配失败的原因类似。）
- en: But beyond the narrow example of logic, what can be said about how to systematically
    construct (or recognize) even plausibly meaningful text? Yes, there are things
    like [Mad Libs](https://en.wikipedia.org/wiki/Mad_Libs) that use very specific
    “phrasal templates”. But somehow ChatGPT implicitly has a much more general way
    to do it. And perhaps there’s nothing to be said about how it can be done beyond
    “somehow it happens when you have 175 billion neural net weights”. But I strongly
    suspect that there’s a much simpler and stronger story.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 但超越狭义的逻辑示例，关于如何系统地构造（或识别）即使是看似有意义的文本，还能说些什么呢？是的，有像[疯狂填词](https://en.wikipedia.org/wiki/Mad_Libs)这样的东西，使用了非常具体的“短语模板”。但不知怎么的，ChatGPT隐含地有一种更为通用的方式来做到这一点。也许对于如何做到这一点，没有比“当你有1750亿个神经网络权重时它会发生”更好的说法了。但我强烈怀疑有一个更简单、更强的故事。
- en: Meaning Space and Semantic Laws of Motion
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 意义空间和语义运动定律
- en: We discussed above that inside ChatGPT any piece of text is effectively represented
    by an array of numbers that we can think of as coordinates of a point in some
    kind of “linguistic feature space”. So when ChatGPT continues a piece of text
    this corresponds to tracing out a trajectory in linguistic feature space. But
    now we can ask what makes this trajectory correspond to text we consider meaningful.
    And might there perhaps be some kind of “semantic laws of motion” that define—or
    at least constrain—how points in linguistic feature space can move around while
    preserving “meaningfulness”?
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上面讨论过，在ChatGPT内部，任何一段文本实际上都被表示为一个数字数组，我们可以将其视为某种“语言特征空间”中的一个点的坐标。因此，当ChatGPT继续一段文本时，这相当于在语言特征空间中描绘出一条轨迹。但现在我们可以问，是什么使这条轨迹对应于我们认为有意义的文本。也许存在某种“语义运动定律”，定义或至少约束语言特征空间中的点在保持“有意义性”时的移动方式？
- en: 'So what is this linguistic feature space like? Here’s an example of how single
    words (here, common nouns) might get laid out if we project such a feature space
    down to 2D:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这种语言特征空间是什么样的呢？这里有一个例子，展示了如果我们将这种特征空间投射到二维平面上，单个词（这里是常见名词）可能会如何分布：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/42217e14abaafd544033c4704c165d7a.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT在做什么…以及为什么它有效？](../Images/42217e14abaafd544033c4704c165d7a.png)'
- en: We saw another example above based on words representing plants and animals.
    But the point in both cases is that “semantically similar words” are placed nearby.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 上面我们看到的另一个例子基于代表植物和动物的词。但在这两种情况下的要点是，“语义相似的词”被放置在一起。
- en: 'As another example, here’s how words corresponding to different parts of speech
    get laid out:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 作为另一个例子，以下是不同词性对应的词的布局方式：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/07aea0f92037fd1ea81e987046ecc150.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/07aea0f92037fd1ea81e987046ecc150.png)'
- en: 'Of course, a given word doesn’t in general just have “one meaning” (or necessarily
    correspond to just one part of speech). And by looking at how sentences containing
    a word lay out in feature space, one can often “tease apart” different meanings—as
    in the example here for the word “crane” (bird or machine?):'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，一个给定的词通常并不只有“一种意义”（或必然只对应一种词性）。通过查看包含一个词的句子在特征空间中的布局，通常可以“区分”不同的意义——就像这里的“crane”（鸟或机器？）一词的例子：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/dcbef2380577de81112276aa2822306b.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/dcbef2380577de81112276aa2822306b.png)'
- en: 'OK, so it’s at least plausible that we can think of this feature space as placing
    “words nearby in meaning” close in this space. But what kind of additional structure
    can we identify in this space? Is there for example some kind of notion of “parallel
    transport” that would reflect “flatness” in the space? One way to get a handle
    on that is to look at analogies:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们至少可以合理地认为，我们可以将这个特征空间视为在此空间中将“语义相近的词”放得较近。但我们可以在这个空间中识别出什么额外的结构？例如，有没有某种“平行传输”的概念可以反映空间的“平坦性”？一种获取这种信息的方法是查看类比：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/e16bc0dfc4612deb45d2386b40e82a4c.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/e16bc0dfc4612deb45d2386b40e82a4c.png)'
- en: And, yes, even when we project down to 2D, there’s often at least a “hint of
    flatness”, though it’s certainly not universally seen.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，即使我们投影到 2D，通常也会有至少一个“平坦性的提示”，尽管这并不是普遍存在的。
- en: 'So what about trajectories? We can look at the trajectory that a prompt for
    ChatGPT follows in feature space—and then we can see how ChatGPT continues that:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 那么关于轨迹呢？我们可以查看 ChatGPT 在特征空间中跟随的提示轨迹——然后我们可以看到 ChatGPT 如何继续这一轨迹：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/03a94ecdae7ea41cb58042bac1f2b4a3.png)'
  id: totrans-356
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/03a94ecdae7ea41cb58042bac1f2b4a3.png)'
- en: There’s certainly no “geometrically obvious” law of motion here. And that’s
    not at all surprising; we fully expect this to be a [considerably more complicated
    story](https://writings.stephenwolfram.com/2021/09/multicomputation-a-fourth-paradigm-for-theoretical-science/#linguistics).
    And, for example, it’s far from obvious that even if there is a “semantic law
    of motion” to be found, what kind of embedding (or, in effect, what “variables”)
    it’ll most naturally be stated in.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显然没有“几何上显而易见”的运动定律。这并不令人惊讶；我们完全预期这会是一个[复杂得多的故事](https://writings.stephenwolfram.com/2021/09/multicomputation-a-fourth-paradigm-for-theoretical-science/#linguistics)。例如，即使发现了“语义运动定律”，它最自然的表述形式（或实际上的“变量”）也远非显而易见。
- en: 'In the picture above, we’re showing several steps in the “trajectory”—where
    at each step we’re picking the word that ChatGPT considers the most probable (the
    “zero temperature” case). But we can also ask what words can “come next” with
    what probabilities at a given point:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，我们展示了“轨迹”中的几个步骤——在每一步我们都选择 ChatGPT 认为最可能的词（“零温度”情况）。但我们也可以询问在给定点上什么词可以“接下来”出现，概率是多少：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/f04d59acdc721fb254cfeb0f0a8c7134.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/f04d59acdc721fb254cfeb0f0a8c7134.png)'
- en: 'And what we see in this case is that there’s a “fan” of high-probability words
    that seems to go in a more or less definite direction in feature space. What happens
    if we go further? Here are the successive “fans” that appear as we “move along”
    the trajectory:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们看到的是一个高概率词的“扇形”，似乎在特征空间中朝着一个或多或少明确的方向延展。如果我们进一步探索会发生什么？以下是我们“沿着”轨迹移动时出现的连续“扇形”：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/0134dc0356b767df2c1d3c809f03e2af.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/0134dc0356b767df2c1d3c809f03e2af.png)'
- en: 'Here’s a 3D representation, going for a total of 40 steps:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 3D 表示，总共有 40 步：
- en: '![What Is ChatGPT Doing … and Why Does It Work?](../Images/aec46fd9f424935d26a2d998424bfb0f.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![ChatGPT 在做什么 … 以及它为什么有效？](../Images/aec46fd9f424935d26a2d998424bfb0f.png)'
- en: And, yes, this seems like a mess—and doesn’t do anything to particularly encourage
    the idea that one can expect to identify “mathematical-physics-like” “semantic
    laws of motion” by empirically studying “what ChatGPT is doing inside”. But perhaps
    we’re just looking at the “wrong variables” (or wrong coordinate system) and if
    only we looked at the right one, we’d immediately see that ChatGPT is doing something
    “mathematical-physics-simple” like following geodesics. But as of now, we’re not
    ready to “empirically decode” from its “internal behavior” what ChatGPT has “discovered”
    about how human language is “put together”.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这看起来像一团糟——并没有特别鼓励人们相信可以通过经验研究“ChatGPT内部发生了什么”来识别“类似数学物理的” “语义运动法则”。但也许我们只是看错了“变量”（或错误的坐标系），如果我们只看对的，我们就会立即看到ChatGPT正在做一些“数学物理简单”的事情，比如遵循测地线。但截至目前，我们还没有准备好“从其内部行为中经验性解码”ChatGPT“发现”的关于人类语言如何“组合”的信息。
- en: Semantic Grammar and the Power of Computational Language
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语义语法与计算语言的力量
- en: 'What does it take to produce “meaningful human language”? In the past, we might
    have assumed it could be nothing short of a human brain. But now we know it can
    be done quite respectably by the neural net of ChatGPT. Still, maybe that’s as
    far as we can go, and there’ll be nothing simpler—or more human understandable—that
    will work. But my strong suspicion is that the success of ChatGPT implicitly reveals
    an important “scientific” fact: that there’s actually a lot more structure and
    simplicity to meaningful human language than we ever knew—and that in the end
    there may be even fairly simple rules that describe how such language can be put
    together.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 产生“有意义的人类语言”需要什么？过去，我们可能认为这只能由人脑完成。但现在我们知道，这可以由ChatGPT的神经网络相当体面地完成。尽管如此，也许这就是我们能走的最远的地方，可能没有更简单的或更易于理解的东西能够奏效。但我强烈怀疑的是，ChatGPT的成功隐含地揭示了一个重要的“科学”事实：有意义的人类语言实际上比我们知道的要有更多的结构和简单性——最终可能会有一些相当简单的规则来描述这种语言如何组合在一起。
- en: As we mentioned above, syntactic grammar gives rules for how words corresponding
    to things like different parts of speech can be put together in human language.
    But to deal with meaning, we need to go further. And one version of how to do
    this is to think about not just a syntactic grammar for language, but also a semantic
    one.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，句法语法为不同词类的词如何在自然语言中组合提供了规则。但要处理意义，我们需要更进一步。一个版本的做法是，不仅考虑语言的句法语法，还要考虑语义语法。
- en: For purposes of syntax, we identify things like nouns and verbs. But for purposes
    of semantics, we need “finer gradations”. So, for example, we might identify the
    concept of “moving”, and the concept of an “object” that “maintains its identity
    independent of location”. There are endless specific examples of each of these
    “semantic concepts”. But for the purposes of our semantic grammar, we’ll just
    have some general kind of rule that basically says that “objects” can “move”.
    There’s a lot to say about how all this might work ([some of which I’ve said before](https://writings.stephenwolfram.com/2016/10/computational-law-symbolic-discourse-and-the-ai-constitution/)).
    But I’ll content myself here with just a few remarks that indicate some of the
    potential path forward.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在语法的层面上，我们识别名词和动词等事物。但在语义层面上，我们需要“更精细的划分”。例如，我们可能会识别“移动”的概念，以及一个“在位置上保持其身份独立”的“物体”的概念。这些“语义概念”都有无尽的具体例子。但就我们的语义语法而言，我们会有一些基本的规则，大致说明“物体”可以“移动”。关于这一切如何运作，还有很多要说的（[我以前提到过一些](https://writings.stephenwolfram.com/2016/10/computational-law-symbolic-discourse-and-the-ai-constitution/)）。但我在这里只会简单提几句，指出一些可能的前进方向。
- en: It’s worth mentioning that even if a sentence is perfectly OK according to the
    semantic grammar, that doesn’t mean it’s been realized (or even could be realized)
    in practice. “The elephant traveled to the Moon” would doubtless “pass” our semantic
    grammar, but it certainly hasn’t been realized (at least yet) in our actual world—though
    it’s absolutely fair game for a fictional world.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，即使一个句子根据语义语法是完全正确的，也不意味着它已经在实践中实现（或甚至可能实现）。“大象旅行到月球”无疑会“通过”我们的语义语法，但它确实还没有在我们的实际世界中实现（至少目前还没有）——尽管它绝对是虚构世界的公平素材。
- en: When we start talking about “semantic grammar” we’re soon led to ask “What’s
    underneath it?” What “model of the world” is it assuming? A syntactic grammar
    is really just about the construction of language from words. But a semantic grammar
    necessarily engages with some kind of “model of the world”—something that serves
    as a “skeleton” on top of which language made from actual words can be layered.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始讨论“语义语法”时，我们很快会问“它底下是什么？”它假设了什么“世界模型”？句法语法实际上只是关于如何从单词构建语言。但语义语法必然涉及某种“世界模型”——这是一种“骨架”，语言可以在其上叠加。
- en: Until recent times, we might have imagined that (human) language would be the
    only general way to describe our “model of the world”. Already a few centuries
    ago there started to be formalizations of specific kinds of things, based particularly
    on mathematics. But now there’s a much more general approach to formalization: [computational
    language](https://writings.stephenwolfram.com/2019/05/what-weve-built-is-a-computational-language-and-thats-very-important/).
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 直到最近，我们可能会认为（人类）语言将是描述我们“世界模型”的唯一通用方式。早在几个世纪前，就开始对特定类型的事物进行形式化，特别是基于数学的。但现在有了一种更为通用的形式化方法：[计算语言](https://writings.stephenwolfram.com/2019/05/what-weve-built-is-a-computational-language-and-thats-very-important/)。
- en: 'And, yes, that’s been my big project over the course of more than four decades
    (as now embodied in the [Wolfram Language](https://www.wolfram.com/language/)):
    to develop a precise symbolic representation that can talk as broadly as possible
    about things in the world, as well as abstract things that we care about. And
    so, for example, we have symbolic representations for [cities](https://reference.wolfram.com/language/ref/entity/City.html) and [molecules](https://reference.wolfram.com/language/guide/MolecularStructureAndComputation.html) and [images](https://reference.wolfram.com/language/guide/ImageRepresentation.html) and [neural
    networks](https://reference.wolfram.com/language/guide/NeuralNetworkConstruction.html),
    and we have built-in knowledge about how to compute about those things.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这就是我在四十多年时间里（现在体现于[Wolfram 语言](https://www.wolfram.com/language/)）的大项目：开发一个精确的符号表示，可以尽可能广泛地谈论世界上的事物，以及我们关心的抽象事物。例如，我们有[cities](https://reference.wolfram.com/language/ref/entity/City.html)和[molecules](https://reference.wolfram.com/language/guide/MolecularStructureAndComputation.html)以及[images](https://reference.wolfram.com/language/guide/ImageRepresentation.html)和[neural
    networks](https://reference.wolfram.com/language/guide/NeuralNetworkConstruction.html)的符号表示，并且我们已经内置了关于如何计算这些事物的知识。
- en: And, after decades of work, we’ve covered a lot of areas in this way. But in
    the past, we haven’t particularly dealt with “[everyday discourse](https://writings.stephenwolfram.com/2016/10/computational-law-symbolic-discourse-and-the-ai-constitution/)”.
    In “I bought two pounds of apples” we can [readily represent](https://reference.wolfram.com/language/ref/entity/Food.html) (and
    do nutrition and other computations on) the “two pounds of apples”. But we don’t
    (quite yet) have a symbolic representation for “I bought”.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 经过几十年的工作，我们已经涵盖了很多领域。但在过去，我们没有特别处理“[日常话语](https://writings.stephenwolfram.com/2016/10/computational-law-symbolic-discourse-and-the-ai-constitution/)”。在“我买了两磅苹果”中，我们可以[轻松表示](https://reference.wolfram.com/language/ref/entity/Food.html)（并对其进行营养和其他计算）“两磅苹果”。但我们还（尚未）拥有“我买了”的符号表示。
- en: It’s all connected to the idea of semantic grammar—and the goal of having a
    generic symbolic “construction kit” for concepts, that would give us rules for
    what could fit together with what, and thus for the “flow” of what we might turn
    into human language.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都与语义语法的概念有关——以及拥有一个通用符号“构建工具”的目标，这将为我们提供关于什么可以组合在一起的规则，从而决定我们可能转化为人类语言的“流”。
- en: But let’s say we had this “symbolic discourse language”. What would we do with
    it? We could start off doing things like generating “locally meaningful text”.
    But ultimately we’re likely to want more “globally meaningful” results—which means
    “computing” more about what can actually exist or happen in the world (or perhaps
    in some consistent fictional world).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 但假设我们有了这种“符号话语语言”。我们会怎么处理它呢？我们可以先从生成“局部有意义的文本”开始。但**最终**我们可能会想要更多“全球有意义”的结果——这意味着“计算”实际存在或发生在世界上的更多内容（或者也许在某个一致的虚构世界中）。
- en: 'Right now in Wolfram Language we have a huge amount of built-in computational
    knowledge about lots of kinds of things. But for a complete symbolic discourse
    language we’d have to build in additional “calculi” about general things in the
    world: if an object moves from A to B and from B to C, then it’s moved from A
    to C, etc.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 目前在 Wolfram Language 中，我们拥有大量关于各种事物的内置计算知识。但对于一个完整的符号话语语言，我们还需要构建关于世界上普遍事物的额外“计算体系”：例如，如果一个物体从
    A 移动到 B，再从 B 移动到 C，那么它就从 A 移动到了 C，等等。
- en: Given a symbolic discourse language we might use it to make “standalone statements”.
    But we can also use it to ask questions about the world, “Wolfram|Alpha style”.
    Or we can use it to state things that we “want to make so”, presumably with some
    external actuation mechanism. Or we can use it to make assertions—perhaps about
    the actual world, or perhaps about some specific world we’re considering, fictional
    or otherwise.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 有了符号话语语言，我们可以用它来做“独立陈述”。但我们也可以用它来提出关于世界的问题，“Wolfram|Alpha 风格”。或者我们可以用它来陈述我们“希望实现的”事情，通常是通过某种外部驱动机制实现的。或者我们可以用它来做断言——也许是关于实际世界，或者关于我们考虑的某个特定世界，无论是虚构的还是其他的。
- en: Human language is fundamentally imprecise, not least because it isn’t “tethered”
    to a specific computational implementation, and its meaning is basically defined
    just by a “social contract” between its users. But computational language, by
    its nature, has a certain fundamental precision—because in the end what it specifies
    can always be “unambiguously executed on a computer”. Human language can usually
    get away with a certain vagueness. (When we say “planet” does it include exoplanets
    or not, etc.?) But in computational language we have to be precise and clear about
    all the distinctions we’re making.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 人类语言在根本上是不精确的，尤其是因为它没有“绑定”到特定的计算实现，其含义基本上只是由使用者之间的“社会契约”定义的。但计算语言本质上具有一定的基本精确性——因为最终它所指定的内容总是可以“在计算机上明确执行”。人类语言通常可以容忍一定的模糊性。（例如，当我们说“行星”时，是否包括系外行星？）但在计算语言中，我们必须对所做的所有区分保持精确和清晰。
- en: It’s often convenient to leverage ordinary human language in making up names
    in computational language. But the meanings they have in computational language
    are necessarily precise—and might or might not cover some particular connotation
    in typical human language usage.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在构造计算语言的名称时，利用普通人类语言通常很方便。但它们在计算语言中的含义必然是精确的——而且可能覆盖或不覆盖典型人类语言使用中的某些特定含义。
- en: How should one figure out the fundamental “ontology” suitable for a general
    symbolic discourse language? Well, it’s not easy. Which is perhaps why little
    has been done in these since the primitive beginnings Aristotle made more than
    two millennia ago. But it really helps that today we now know so much about how
    to think about the world computationally (and it doesn’t hurt to have a “fundamental
    metaphysics” from our [Physics Project](https://www.wolframphysics.org/) and the [idea
    of the ruliad](https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/)).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 如何确定适合一般符号话语语言的基本“本体论”？这并不容易。这或许也是为什么自从两千多年前亚里士多德的原始开端以来，这方面的研究几乎没有进展。但今天我们知道了很多关于如何以计算方式思考世界的知识（并且拥有来自我们的
    [物理学项目](https://www.wolframphysics.org/) 和 [ruliad 概念](https://writings.stephenwolfram.com/2021/11/the-concept-of-the-ruliad/)
    的“基础形而上学”也很有帮助）。
- en: But what does all this mean in the context of ChatGPT? From its training ChatGPT
    has effectively “pieced together” a certain (rather impressive) quantity of what
    amounts to semantic grammar. But its very success gives us a reason to think that
    it’s going to be feasible to construct something more complete in computational
    language form. And, unlike what we’ve so far figured out about the innards of
    ChatGPT, we can expect to design the computational language so that it’s readily
    understandable to humans.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这些在 ChatGPT 的背景下意味着什么呢？通过训练，ChatGPT 实质上“拼凑”出了一定量的语义语法（相当令人印象深刻）。但它的成功让我们有理由认为，构建一种更完整的计算语言形式是可行的。而且，与我们迄今为止对
    ChatGPT 内部结构的了解不同，我们可以期望设计一种计算语言，使其对人类容易理解。
- en: When we talk about semantic grammar, we can draw an analogy to syllogistic logic.
    At first, syllogistic logic was essentially a collection of rules about statements
    expressed in human language. But (yes, two millennia later) [when formal logic
    was developed](https://writings.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/#the-history),
    the original basic constructs of syllogistic logic could now be used to build
    huge “formal towers” that include, for example, the operation of modern digital
    circuitry. And so, we can expect, it will be with more general semantic grammar.
    At first, it may just be able to deal with simple patterns, expressed, say, as
    text. But once its whole computational language framework is built, we can expect
    that it will be able to be used to erect tall towers of “generalized semantic
    logic”, that allow us to work in a precise and formal way with all sorts of things
    that have never been accessible to us before, except just at a “ground-floor level”
    through human language, with all its vagueness.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论语义语法时，我们可以类比于三段论逻辑。一开始，三段论逻辑本质上是关于用人类语言表达的陈述的规则集合。但（是的，两千年后）[当形式逻辑被发展](https://writings.stephenwolfram.com/2018/11/logic-explainability-and-the-future-of-understanding/#the-history)时，三段论逻辑的基本构造现在可以用来构建巨大的“形式塔”，包括例如现代数字电路的操作。因此，我们可以预期，更一般的语义语法也会如此。一开始，它可能只能处理简单的模式，例如以文本形式表达。但一旦构建了整个计算语言框架，我们可以期待它能够用来建立“广义语义逻辑”的高塔，使我们能够以精确和形式化的方式处理各种以前无法接触的事物，只能通过人类语言以“地面层级”处理，带有所有的模糊性。
- en: 'We can think of the construction of computational language—and semantic grammar—as
    representing a kind of ultimate compression in representing things. Because it
    allows us to talk about the essence of what’s possible, without, for example,
    dealing with all the “turns of phrase” that exist in ordinary human language.
    And we can view the great strength of ChatGPT as being something a bit similar:
    because it too has in a sense “drilled through” to the point where it can “put
    language together in a semantically meaningful way” without concern for different
    possible turns of phrase.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以把计算语言和语义语法的构建看作是一种在表示事物时的终极压缩。因为它让我们能够讨论可能性的本质，而不需要处理普通人类语言中存在的所有“表达方式”。我们可以将
    ChatGPT 的巨大优势视为类似的东西：因为它也在某种程度上“钻透”到了能够“以语义上有意义的方式”组合语言的地步，而不必担心不同的表达方式。
- en: So what would happen if we applied ChatGPT to underlying computational language?
    The computational language can describe what’s possible. But what can still be
    added is a sense of “what’s popular”—based for example on reading all that content
    on the web. But then—underneath—operating with computational language means that
    something like ChatGPT has immediate and fundamental access to what amount to
    ultimate tools for making use of potentially irreducible computations. And that
    makes it a system that can not only “generate reasonable text”, but can expect
    to work out whatever can be worked out about whether that text actually makes
    “correct” statements about the world—or whatever it’s supposed to be talking about.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如果我们将 ChatGPT 应用到底层计算语言上会发生什么呢？计算语言可以描述什么是可能的。但可以进一步补充的是一种“什么是流行”的感觉——例如，基于读取互联网上的所有内容。但在底层——操作计算语言意味着像
    ChatGPT 这样的系统具有即时和根本的访问权限，能够使用潜在不可简化的计算的终极工具。这使得它不仅可以“生成合理的文本”，而且可以期望解决任何可以解决的内容，以确定该文本是否实际上对世界做出了“正确”的陈述——或者它应该讨论的内容。
- en: So … What Is ChatGPT Doing, and Why Does It Work?
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 那么… ChatGPT 在做什么，为什么它能有效？
- en: The basic concept of ChatGPT is at some level rather simple. Start from a huge
    sample of human-created text from the web, books, etc. Then train a neural net
    to generate text that’s “like this”. And in particular, make it able to start
    from a “prompt” and then continue with text that’s “like what it’s been trained
    with”.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 的基本概念在某种程度上相当简单。从网络、书籍等来源的大量人类创作文本开始。然后训练一个神经网络生成“像这样的”文本。特别是，让它能够从一个“提示”开始，然后继续生成“像它所训练的那样”的文本。
- en: As we’ve seen, the actual neural net in ChatGPT is made up of very simple elements—though
    billions of them. And the basic operation of the neural net is also very simple,
    consisting essentially of passing input derived from the text it’s generated so
    far “once through its elements” (without any loops, etc.) for every new word (or
    part of a word) that it generates.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所看到的，ChatGPT 的实际神经网络由非常简单的元素构成——尽管有数十亿个。而神经网络的基本操作也非常简单，本质上是将从其迄今生成的文本中派生的输入“通过其元素”处理一次（没有任何循环等），以生成每一个新词（或词的一部分）。
- en: But the remarkable—and unexpected—thing is that this process can produce text
    that’s successfully “like” what’s out there on the web, in books, etc. And not
    only is it coherent human language, it also “says things” that “follow its prompt”
    making use of content it’s “read”. It doesn’t always say things that “globally
    make sense” (or correspond to correct computations)—because (without, for example, [accessing
    the “computational superpowers” of Wolfram|Alpha](https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/))
    it’s just saying things that “sound right” based on what things “sounded like”
    in its training material.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 但令人惊讶且出乎意料的是，这个过程可以生成成功“类似”于网络、书籍等上的文本。而且，它不仅是连贯的人类语言，还会“表达”符合其提示的内容，利用它所“阅读”的内容。它并不总是说出“全球上合理”的话（或对应正确的计算）——因为（例如，没有[访问
    Wolfram|Alpha 的“计算超能力”](https://writings.stephenwolfram.com/2023/01/wolframalpha-as-the-way-to-bring-computational-knowledge-superpowers-to-chatgpt/)）它只是在根据训练材料中“听起来对的”东西说话。
- en: 'The specific engineering of ChatGPT has made it quite compelling. But ultimately
    (at least until it can use outside tools) ChatGPT is “merely” pulling out some
    “coherent thread of text” from the “statistics of conventional wisdom” that it’s
    accumulated. But it’s amazing how human-like the results are. And as I’ve discussed,
    this suggests something that’s at least scientifically very important: that human
    language (and the patterns of thinking behind it) are somehow simpler and more
    “law like” in their structure than we thought. ChatGPT has implicitly discovered
    it. But we can potentially explicitly expose it, with semantic grammar, computational
    language, etc.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 的具体工程设计使其非常引人注目。但最终（至少在它能够使用外部工具之前）ChatGPT 只是从其积累的“传统智慧统计”中“抽取出一些连贯的文本线索”。但结果的类人性令人惊叹。正如我所讨论的，这暗示了一个至少在科学上非常重要的事实：人类语言（及其背后的思维模式）在结构上比我们想象的要简单和“更具规律性”。ChatGPT
    已经隐含地发现了这一点。但我们可以通过语义语法、计算语言等方式显式地揭示它。
- en: What ChatGPT does in generating text is very impressive—and the results are
    usually very much like what we humans would produce. So does this mean ChatGPT
    is working like a brain? Its underlying artificial-neural-net structure was ultimately
    modeled on an idealization of the brain. And it seems quite likely that when we
    humans generate language many aspects of what’s going on are quite similar.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 在生成文本时的表现非常令人印象深刻——而且结果通常非常接近我们人类会产生的内容。这是否意味着 ChatGPT 像大脑一样工作？它的基础人工神经网络结构最终是基于对大脑的理想化模型。并且，似乎我们人类生成语言时，许多方面与之类似。
- en: 'When it comes to training (AKA learning) the different “hardware” of the brain
    and of current computers (as well as, perhaps, some undeveloped algorithmic ideas)
    forces ChatGPT to use a strategy that’s probably rather different (and in some
    ways much less efficient) than the brain. And there’s something else as well:
    unlike even in typical algorithmic computation, ChatGPT doesn’t internally “have
    loops” or “recompute on data”. And that inevitably limits its computational capability—even
    with respect to current computers, but definitely with respect to the brain.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在训练（即学习）大脑和当前计算机的不同“硬件”时（以及也许一些尚未开发的算法思想），ChatGPT 被迫使用一种可能与大脑相当不同（在某些方面效率更低）的策略。还有其他一些问题：即使在典型的算法计算中，ChatGPT
    也没有内部“循环”或“在数据上重新计算”。这不可避免地限制了它的计算能力——即使与当前计算机相比，也确实与大脑相比。
- en: It’s not clear how to “fix that” and still maintain the ability to train the
    system with reasonable efficiency. But to do so will presumably allow a future
    ChatGPT to do even more “brain-like things”. Of course, there are plenty of things
    that brains don’t do so well—particularly involving what amount to irreducible
    computations. And for these both brains and things like ChatGPT have to seek “outside
    tools”—like [Wolfram Language](https://www.wolfram.com/language/).
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还不清楚如何“修复”这个问题，同时仍保持合理的训练效率。但是，这样做将可能让未来的ChatGPT能够做更多“类似大脑的事情”。当然，大脑确实有很多做得不那么好的事情—特别是那些涉及到不可简化计算的任务。对于这些任务，大脑和像ChatGPT这样的系统必须寻求“外部工具”—例如[Wolfram语言](https://www.wolfram.com/language/)。
- en: But for now it’s exciting to see what ChatGPT has already been able to do. At
    some level it’s a great example of the fundamental scientific fact that large
    numbers of simple computational elements can do remarkable and unexpected things.
    But it also provides perhaps the best impetus we’ve had in two thousand years
    to understand better just what the fundamental character and principles might
    be of that central feature of the human condition that is human language and the
    processes of thinking behind it.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在看到ChatGPT已经能够做到的事情令人兴奋。在某种程度上，它是一个很好的例子，展示了大量简单计算元素可以做出非凡和意想不到的事情这一基本科学事实。但它也提供了我们在两千年来最好的动机，以更好地理解人类语言这一人类状况核心特征的基本特性和原则，以及背后的思维过程。
- en: Thanks
  id: totrans-394
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 感谢
- en: 'I’ve been following the development of neural nets now for about 43 years,
    and during that time I’ve interacted with many people about them. Among them—some
    from long ago, some from recently, and some across many years—have been: Giulio
    Alessandrini, Dario Amodei, Etienne Bernard, Taliesin Beynon, Sebastian Bodenstein,
    Greg Brockman, Jack Cowan, Pedro Domingos, Jesse Galef, Roger Germundsson, Robert
    Hecht-Nielsen, Geoff Hinton, John Hopfield, Yann LeCun, Jerry Lettvin, Jerome
    Louradour, Marvin Minsky, Eric Mjolsness, Cayden Pierce, Tomaso Poggio, Matteo
    Salvarezza, Terry Sejnowski, Oliver Selfridge, Gordon Shaw, Jonas Sjöberg, Ilya
    Sutskever, Gerry Tesauro and Timothee Verdier. For help with this piece, I’d particularly
    like to thank Giulio Alessandrini and Brad Klee.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经跟踪神经网络的发展约43年，在此期间我与许多人进行了互动。其中—有些是很久以前的，有些是最近的，还有一些是跨越多年—包括：Giulio Alessandrini,
    Dario Amodei, Etienne Bernard, Taliesin Beynon, Sebastian Bodenstein, Greg Brockman,
    Jack Cowan, Pedro Domingos, Jesse Galef, Roger Germundsson, Robert Hecht-Nielsen,
    Geoff Hinton, John Hopfield, Yann LeCun, Jerry Lettvin, Jerome Louradour, Marvin
    Minsky, Eric Mjolsness, Cayden Pierce, Tomaso Poggio, Matteo Salvarezza, Terry
    Sejnowski, Oliver Selfridge, Gordon Shaw, Jonas Sjöberg, Ilya Sutskever, Gerry
    Tesauro 和 Timothee Verdier。特别感谢Giulio Alessandrini和Brad Klee对本文的帮助。
- en: '**[Stephen Wolfram](https://www.linkedin.com/in/stephenwolfram/)** is a creator
    of Mathematica, Wolfram|Alpha and the Wolfram Language; originator of the Wolfram
    Physics Project; author of A New Kind of Science and other books; Founder & CEO
    of Wolfram Research.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**[斯蒂芬·沃尔弗拉姆](https://www.linkedin.com/in/stephenwolfram/)** 是Mathematica、Wolfram|Alpha
    和Wolfram语言的创始人；Wolfram物理学项目的发起者；《新科学》及其他书籍的作者；Wolfram Research的创始人兼首席执行官。'
- en: '[Original](https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/).
    Reposted with permission.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://writings.stephenwolfram.com/2023/02/what-is-chatgpt-doing-and-why-does-it-work/)。经许可转载。'
- en: More On This Topic
  id: totrans-398
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[What is K-Means Clustering and How Does its Algorithm Work?](https://www.kdnuggets.com/2023/05/kmeans-clustering-algorithm-work.html)'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[K-Means聚类是什么？它的算法是如何工作的？](https://www.kdnuggets.com/2023/05/kmeans-clustering-algorithm-work.html)'
- en: '[How Does Logistic Regression Work?](https://www.kdnuggets.com/2022/07/logistic-regression-work.html)'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逻辑回归是如何工作的？](https://www.kdnuggets.com/2022/07/logistic-regression-work.html)'
- en: '[What Is Data Lineage, And Why Does It Matter?](https://www.kdnuggets.com/what-is-data-lineage-and-why-does-it-matter)'
  id: totrans-401
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据血缘是什么？为什么它很重要？](https://www.kdnuggets.com/what-is-data-lineage-and-why-does-it-matter)'
- en: '[Machine learning does not produce value for my business. Why?](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习为什么没有为我的业务创造价值？](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
- en: '[Does ChatGPT Have The Potential To Become A New Chess Super Grandmaster?](https://www.kdnuggets.com/does-chatgpt-have-the-potential-to-become-a-new-chess-super-grandmaster)'
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ChatGPT是否有可能成为新的国际象棋超级大满贯大师？](https://www.kdnuggets.com/does-chatgpt-have-the-potential-to-become-a-new-chess-super-grandmaster)'
- en: '[Forget ChatGPT, This New AI Assistant Is Leagues Ahead and Will…](https://www.kdnuggets.com/2023/08/forget-chatgpt-new-ai-assistant-leagues-ahead-change-way-work-forever.html)'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[忘掉 ChatGPT，这款全新的 AI 助手远远领先，将永远改变你的工作方式](https://www.kdnuggets.com/2023/08/forget-chatgpt-new-ai-assistant-leagues-ahead-change-way-work-forever.html)'
