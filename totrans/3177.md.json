["```py\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import learning_curve\n\nfeatures = ['AT', 'V', 'AP', 'RH']\ntarget = 'PE'\n\ntrain_sizes, train_scores, validation_scores = learning_curve(\n                                                   estimator = LinearRegression(), X = electricity[features],\n                                                   y = electricity[target], train_sizes = train_sizes, cv = 5,\n                                                   scoring = 'neg_mean_squared_error')\n```", "```py\nprint('Training scores:\\n\\n', train_scores)\nprint('\\n', '-' * 70) # separator to make the output easy to read\nprint('\\nValidation scores:\\n\\n', validation_scores)\n```", "```py\nTraining scores:\n\n [[ -0\\.          -0\\.          -0\\.          -0\\.          -0\\.        ]\n [-19.71230701 -18.31492642 -18.31492642 -18.31492642 -18.31492642]\n [-18.14420459 -19.63885072 -19.63885072 -19.63885072 -19.63885072]\n [-21.53603444 -20.18568787 -19.98317419 -19.98317419 -19.98317419]\n [-20.47708899 -19.93364211 -20.56091569 -20.4150839  -20.4150839 ]\n [-20.98565335 -20.63006094 -21.04384703 -20.63526811 -20.52955609]]\n\n ----------------------------------------------------------------------\n\nValidation scores:\n\n [[-619.30514723 -379.81090366 -374.4107861  -370.03037109 -373.30597982]\n [ -21.80224219  -23.01103419  -20.81350389  -22.88459236  -23.44955492]\n [ -19.96005238  -21.2771561   -19.75136596  -21.4325615   -21.89067652]\n [ -19.92863783  -21.35440062  -19.62974239  -21.38631648  -21.811031  ]\n [ -19.88806264  -21.3183303   -19.68228562  -21.35019525  -21.75949097]\n [ -19.9046791   -21.33448781  -19.67831137  -21.31935146  -21.73778949]]\n```", "```py\ntrain_scores_mean = -train_scores.mean(axis = 1)\nvalidation_scores_mean = -validation_scores.mean(axis = 1)\n\nprint('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\nprint('\\n', '-' * 20) # separator\nprint('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))\n```", "```py\nMean training scores\n\n 1       -0.000000\n100     18.594403\n500     19.339921\n2000    20.334249\n5000    20.360363\n7654    20.764877\ndtype: float64\n\n --------------------\n\nMean validation scores\n\n 1       423.372638\n100      22.392186\n500      20.862362\n2000     20.822026\n5000     20.799673\n7654     20.794924\ndtype: float64\n```", "```py\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.style.use('seaborn')\n\nplt.plot(train_sizes, train_scores_mean, label = 'Training error')\nplt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\n\nplt.ylabel('MSE', fontsize = 14)\nplt.xlabel('Training set size', fontsize = 14)\nplt.title('Learning curves for a linear regression model', fontsize = 18, y = 1.03)\nplt.legend()\nplt.ylim(0,40)\n```", "```py\n(0, 40)\n```", "```py\n### Bundling our previous work into a function ###\n\ndef learning_curves(estimator, data, features, target, train_sizes, cv):\n    train_sizes, train_scores, validation_scores = learning_curve(\n                                                 estimator, data[features], data[target], train_sizes = train_sizes,\n                                                 cv = cv, scoring = 'neg_mean_squared_error')\n    train_scores_mean = -train_scores.mean(axis = 1)\n    validation_scores_mean = -validation_scores.mean(axis = 1)\n\n    plt.plot(train_sizes, train_scores_mean, label = 'Training error')\n    plt.plot(train_sizes, validation_scores_mean, label = 'Validation error')\n\n    plt.ylabel('MSE', fontsize = 14)\n    plt.xlabel('Training set size', fontsize = 14)\n    title = 'Learning curves for a ' + str(estimator).split('(')[0] + ' model'\n    plt.title(title, fontsize = 18, y = 1.03)\n    plt.legend()\n    plt.ylim(0,40)\n\n### Plotting the two learning curves ###\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nplt.figure(figsize = (16,5))\n\nfor model, i in [(RandomForestRegressor(), 1), (LinearRegression(),2)]:\n    plt.subplot(1,2,i)\n    learning_curves(model, electricity, features, target, train_sizes, 5)\n```", "```py\nlearning_curves(RandomForestRegressor(max_leaf_nodes = 350), electricity, features, target, train_sizes, 5)\n```"]