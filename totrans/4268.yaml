- en: Write and train your own custom machine learning models using PyCaret
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyCaret 编写和训练你自己的自定义机器学习模型
- en: 原文：[https://www.kdnuggets.com/2021/05/pycaret-write-train-custom-machine-learning-models.html](https://www.kdnuggets.com/2021/05/pycaret-write-train-custom-machine-learning-models.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/05/pycaret-write-train-custom-machine-learning-models.html](https://www.kdnuggets.com/2021/05/pycaret-write-train-custom-machine-learning-models.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Moez Ali](https://www.linkedin.com/in/profile-moez/)，PyCaret 创始人兼作者**'
- en: '![](../Images/f3d71174487d3e14feeed2b4cbb3a143.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3d71174487d3e14feeed2b4cbb3a143.png)'
- en: Photo by [Rob Lambert](https://unsplash.com/@roblambertjr?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由 [Rob Lambert](https://unsplash.com/@roblambertjr?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供的照片
- en: PyCaret
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCaret
- en: PyCaret is an open-source, low-code machine learning library and end-to-end
    model management tool built-in Python for automating machine learning workflows.
    It is incredibly popular for its ease of use, simplicity, and ability to quickly
    and efficiently build and deploy end-to-end ML prototypes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 是一个开源的低代码机器学习库和端到端模型管理工具，构建于 Python 上，用于自动化机器学习工作流。它因易用性、简洁性以及能够快速高效地构建和部署端到端
    ML 原型而受到极大的欢迎。
- en: PyCaret is an alternate low-code library that can replace hundreds of code lines
    with few lines only. This makes the experiment cycle exponentially fast and efficient.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 是一个替代性的低代码库，可以用几行代码替代数百行代码。这使得实验周期显著加快且高效。
- en: PyCaret is **simple and** **easy to use**. All the operations performed in PyCaret
    are sequentially stored in a **Pipeline** that is fully automated for **deployment. **Whether
    it’s imputing missing values, one-hot-encoding, transforming categorical data,
    feature engineering, or even hyperparameter tuning, PyCaret automates all of it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret **简单且** **易于使用**。PyCaret 中执行的所有操作都依次存储在一个 **Pipeline** 中，该 **Pipeline**
    完全自动化以 **进行部署**。无论是填补缺失值、进行独热编码、转换分类数据、特征工程，还是超参数调优，PyCaret 都会自动完成所有这些操作。
- en: 'This tutorial assumes that you have some prior knowledge and experience with
    PyCaret. If you haven’t used it before, no problem — you can get a quick headstart
    through these tutorials:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程假设你对 PyCaret 有一定的知识和经验。如果你以前没有使用过 PyCaret，也没关系——你可以通过这些教程快速入门：
- en: '[PyCaret 2.2 is here — what’s new](https://towardsdatascience.com/pycaret-2-2-is-here-whats-new-ad7612ca63b)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyCaret 2.2 已发布——新特性](https://towardsdatascience.com/pycaret-2-2-is-here-whats-new-ad7612ca63b)'
- en: '[Announcing PyCaret 2.0](https://towardsdatascience.com/announcing-pycaret-2-0-39c11014540e)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 2.0](https://towardsdatascience.com/announcing-pycaret-2-0-39c11014540e)'
- en: '[Five things you don’t know about PyCaret](https://towardsdatascience.com/5-things-you-dont-know-about-pycaret-528db0436eec)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你不知道的 PyCaret 五件事](https://towardsdatascience.com/5-things-you-dont-know-about-pycaret-528db0436eec)'
- en: Installing PyCaret
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 PyCaret
- en: Installing PyCaret is very easy and takes only a few minutes. We strongly recommend
    using a virtual environment to avoid potential conflicts with other libraries.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 PyCaret 非常简单，只需几分钟即可完成。我们强烈建议使用虚拟环境，以避免与其他库潜在的冲突。
- en: PyCaret’s default installation is a slim version of pycaret that only installs
    hard dependencies [listed here](https://github.com/pycaret/pycaret/blob/master/requirements.txt).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 的默认安装是 pycaret 的精简版，只安装了硬性依赖项，[列在这里](https://github.com/pycaret/pycaret/blob/master/requirements.txt)。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you install the full version of pycaret, all the optional dependencies
    as [listed here](https://github.com/pycaret/pycaret/blob/master/requirements-optional.txt) are
    also installed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装完整版本的 pycaret 时，所有的可选依赖项也会被安装，[列在这里](https://github.com/pycaret/pycaret/blob/master/requirements-optional.txt)。
- en: ???? Let’s get started
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 让我们开始吧
- en: Before we start talking about custom model training, let’s see a quick demo
    of how PyCaret works with out-of-the-box models. I will be using the ‘insurance’
    dataset available on [PyCaret’s Repository](https://github.com/pycaret/pycaret/tree/master/datasets).
    The goal of this dataset is to predict patient charges based on some attributes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论自定义模型训练之前，让我们先快速演示一下 PyCaret 如何与开箱即用的模型一起工作。我将使用 [PyCaret 的仓库](https://github.com/pycaret/pycaret/tree/master/datasets)
    中的“insurance”数据集。该数据集的目标是根据一些属性预测患者费用。
- en: ???? **Dataset**
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? **数据集**
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/fae3dfa9a10905b75b6f8853af494e65.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fae3dfa9a10905b75b6f8853af494e65.png)'
- en: Sample rows from insurance dataset
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 来自保险数据集的示例行
- en: ???? **Data Preparation**
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? **数据准备**
- en: Common to all modules in PyCaret, the `setup` is the first and the only mandatory
    step in any machine learning experiment performed in PyCaret. This function takes
    care of all the data preparation required before training models. Besides performing
    some basic default processing tasks, PyCaret also offers a wide array of pre-processing
    features. To learn more about all the preprocessing functionalities in PyCaret,
    you can see this [link](https://pycaret.org/preprocessing/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyCaret 的所有模块中，`setup` 是任何 PyCaret 机器学习实验中第一个也是唯一的强制步骤。此函数处理所有训练模型前所需的数据准备工作。除了执行一些基本的默认处理任务外，PyCaret
    还提供了各种预处理功能。要了解 PyCaret 中所有预处理功能的更多信息，你可以查看这个 [链接](https://pycaret.org/preprocessing/)。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/85fe7b54a3626a0d00b62f41f5db0383.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85fe7b54a3626a0d00b62f41f5db0383.png)'
- en: setup function in pycaret.regression module
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: pycaret.regression 模块中的 setup 函数
- en: Whenever you initialize the `setup` function in PyCaret, it profiles the dataset
    and infers the data types for all input features. If all data types are correctly
    inferred, you can press enter to continue.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你初始化 PyCaret 中的 `setup` 函数时，它会对数据集进行分析，并推断所有输入特征的数据类型。如果所有数据类型都被正确推断，你可以按回车键继续。
- en: '![](../Images/49ed9255c57fd3ed7f1bb7c02d87be52.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49ed9255c57fd3ed7f1bb7c02d87be52.png)'
- en: Output from setup — truncated for display
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `setup` 输出 — 输出已截断以便展示
- en: ???? Available Models
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 可用模型
- en: To check the list of all models available for training, you can use the function
    called `models` . It displays a table with model ID, name, and the reference of
    the actual estimator.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查所有可用训练模型的列表，你可以使用名为 `models` 的函数。它会显示一个包含模型 ID、名称和实际估计器参考的表格。
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/ecaedf0bb163f9a78072d41633c664a1.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ecaedf0bb163f9a78072d41633c664a1.png)'
- en: Output from models() — Output truncated for display purpose
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `models()` 输出 — 输出已截断以便展示
- en: ???? Model Training & Selection
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 模型训练与选择
- en: The most used function for training any model in PyCaret is `create_model` .
    It takes an ID for the estimator you want to train.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 中用于训练任何模型的最常用函数是 `create_model`。它接受一个你想要训练的估计器的 ID。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/22cb20e0d040a8e0edc793f817188b44.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22cb20e0d040a8e0edc793f817188b44.png)'
- en: Output from create_model(‘dt’)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `create_model('dt')` 输出
- en: The output shows the 10-fold cross-validated metrics with mean and standard
    deviation. The output from this function is a trained model object, which is essentially
    a `scikit-learn` object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出显示了 10 折交叉验证指标的均值和标准差。此函数的输出是一个训练后的模型对象，实际上是一个 `scikit-learn` 对象。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/0c1ce4f0ba7e039a693b28c7ad4cbb86.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c1ce4f0ba7e039a693b28c7ad4cbb86.png)'
- en: Output from print(dt)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `print(dt)` 输出
- en: 'To train multiple models in a loop, you can write a simple list comprehension:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要在循环中训练多个模型，你可以编写一个简单的列表推导式：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/f2b1f7f0b90b9f4ebd8acf7354ef1b64.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2b1f7f0b90b9f4ebd8acf7354ef1b64.png)'
- en: Output from print(multiple_models)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `print(multiple_models)` 输出
- en: If you want to train all the models available in the library instead of the
    few selected you can use PyCaret’s `compare_models` function instead of writing
    your own loop (*the results will be the same though*).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想训练库中所有可用的模型而不是仅仅几个选择的模型，可以使用 PyCaret 的 `compare_models` 函数，而不是编写自己的循环（*不过结果会是一样的*）。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/7c0cdf94f96072890f7952396eff0051.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7c0cdf94f96072890f7952396eff0051.png)'
- en: Output from the compare_models function
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `compare_models` 函数输出
- en: '`compare_models` returns the output which shows the cross-validated metrics
    for all models. According to this output, Gradient Boosting Regressor is the best
    model with $2,702 in Mean Absolute Error(MAE)using 10-fold cross-validation on
    the train set.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`compare_models` 返回的输出显示了所有模型的交叉验证指标。根据此输出，梯度提升回归器是最好的模型，使用 10 折交叉验证在训练集上的均值绝对误差（MAE）为
    $2,702。'
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/ec8516090da521d25b6e9d7ab052c4ee.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec8516090da521d25b6e9d7ab052c4ee.png)'
- en: Output from the print(best_model)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `print(best_model)` 输出
- en: 'The metrics shown in the above grid is cross-validation scores, to check the
    score of the `best_model`on hold-out set:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述网格中显示的指标是交叉验证得分，要查看 `best_model` 在保留集上的得分：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/e426eb5120cfa56c6097b5ea9cc3c8cd.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e426eb5120cfa56c6097b5ea9cc3c8cd.png)'
- en: Output from the predict_model(best_model) function
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `predict_model(best_model)` 函数输出
- en: 'To generate predictions on the unseen dataset you can use the same `predict_model` function
    but just pass an extra parameter `data` :'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要在未见数据集上生成预测，你可以使用相同的 `predict_model` 函数，但只需传递额外的参数 `data`：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/862cf3d9f8cd723b9b7ed0ed6bf4708b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/862cf3d9f8cd723b9b7ed0ed6bf4708b.png)'
- en: Output from predict_model(best_model, data = data2)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `predict_model(best_model, data = data2)` 输出
- en: ???? Writing and Training Custom Model
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 编写和训练自定义模型
- en: So far what we have seen is training and model selection for all the available
    models in PyCaret. However, the way PyCaret works for custom models is exactly
    the same. As long as, your estimator is compatible with `sklearn` API style, it
    will work the same way. Let’s see few examples.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们看到的是在 PyCaret 中对所有可用模型的训练和模型选择。然而，PyCaret 对自定义模型的处理方式完全相同。只要你的估计器兼容
    `sklearn` API 风格，它将以相同的方式工作。让我们看几个例子。
- en: Before I show you how to write your own custom class, I will first demonstrate
    how you can work with custom non-sklearn models (models that are not available
    in sklearn or pycaret’s base library).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我展示如何编写自定义类之前，我将首先演示如何处理自定义非-sklearn 模型（在 sklearn 或 pycaret 的基础库中不可用的模型）。
- en: ???? **GPLearn Models**
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? **GPLearn 模型**
- en: While Genetic Programming (GP) can be used to perform a [very wide variety of
    tasks](http://www.genetic-programming.org/combined.php), `gplearn` is purposefully
    constrained to solving symbolic regression problems.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然遗传编程（GP）可以用于执行[各种任务](http://www.genetic-programming.org/combined.php)，`gplearn`
    特意限制于解决符号回归问题。
- en: Symbolic regression is a machine learning technique that aims to identify an
    underlying mathematical expression that best describes a relationship. It begins
    by building a population of naive random formulas to represent a relationship
    between known independent variables and their dependent variable targets to predict
    new data. Each successive generation of programs is then evolved from the one
    that came before it by selecting the fittest individuals from the population to
    undergo genetic operations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 符号回归是一种机器学习技术，旨在识别最能描述关系的潜在数学表达式。它首先通过构建一组天真的随机公式来表示已知自变量与其因变量目标之间的关系，以预测新数据。然后，每一代程序从前一代中进化，选择适应度最好的个体进行遗传操作。
- en: 'To use models from `gplearn` you will have to first install it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `gplearn` 的模型，你必须首先安装它：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now you can simply import the untrained model and pass it in the `create_model` function:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以简单地导入未训练的模型，并将其传递给 `create_model` 函数：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/66a630f98663fa2b1d63ba0a98212b6d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66a630f98663fa2b1d63ba0a98212b6d.png)'
- en: Output from create_model(sc_trained)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从 create_model(sc_trained) 的输出
- en: '[PRE13]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/e676a570f81885915b30dc18cc24d3d4.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e676a570f81885915b30dc18cc24d3d4.png)'
- en: Output from print(sc_trained)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 从 print(sc_trained) 的输出
- en: 'You can also check the hold-out score for this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以检查这一点的持出评分：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/3757871ff51629c0fd8b13f78442af2d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3757871ff51629c0fd8b13f78442af2d.png)'
- en: Output from predict_model(sc_trained)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从 predict_model(sc_trained) 的输出
- en: ???? NGBoost Models
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? NGBoost 模型
- en: 'ngboost is a Python library that implements Natural Gradient Boosting, as described
    in [“NGBoost: Natural Gradient Boosting for Probabilistic Prediction”](https://stanfordmlgroup.github.io/projects/ngboost/).
    It is built on top of [Scikit-Learn](https://scikit-learn.org/stable/) and is
    designed to be scalable and modular with respect to the choice of proper scoring
    rule, distribution, and base learner. A didactic introduction to the methodology
    underlying NGBoost is available in this [slide deck](https://drive.google.com/file/d/183BWFAdFms81MKy6hSku8qI97OwS_JH_/view?usp=sharing).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'ngboost 是一个 Python 库，实现了自然梯度提升，如 [“NGBoost: Natural Gradient Boosting for Probabilistic
    Prediction”](https://stanfordmlgroup.github.io/projects/ngboost/) 中所述。它构建在 [Scikit-Learn](https://scikit-learn.org/stable/)
    之上，旨在根据适当的评分规则、分布和基础学习器的选择具有可扩展性和模块化。关于 NGBoost 基础方法的教学介绍可以在这个 [幻灯片文档](https://drive.google.com/file/d/183BWFAdFms81MKy6hSku8qI97OwS_JH_/view?usp=sharing)
    中找到。'
- en: 'To use models from ngboost, you will have to first install ngboost:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 ngboost 的模型，你必须首先安装 ngboost：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Once installed, you can import the untrained estimator from the ngboost library
    and use `create_model` to train and evaluate the model:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以从 ngboost 库中导入未训练的估计器，并使用 `create_model` 来训练和评估模型：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/f19311e7720b0d9f3ebc5f4e144ec2bc.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f19311e7720b0d9f3ebc5f4e144ec2bc.png)'
- en: Output from create_model(ng)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 从 create_model(ng) 的输出
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/68f00a25b30e14e6761fa8691a97c516.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/68f00a25b30e14e6761fa8691a97c516.png)'
- en: Output from print(ng_trained)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从 print(ng_trained) 的输出
- en: ???? Writing Custom Class
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 编写自定义类
- en: The above two examples `gplearn` and `ngboost` are custom models for pycaret
    as they are not available in the default library but you can use them just like
    you can use any other out-of-the-box models. However, there may be a use-case
    that involves writing your own algorithm (i.e. maths behind the algorithm), in
    which case you can inherit the base class from `sklearn` and write your own maths.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 上述两个示例 `gplearn` 和 `ngboost` 是 PyCaret 的自定义模型，因为它们在默认库中不可用，但您可以像使用任何其他现成模型一样使用它们。然而，可能会有一种使用案例涉及编写自己的算法（即算法背后的数学），在这种情况下，您可以从
    `sklearn` 继承基类并编写自己的数学。
- en: Let’s create a naive estimator which learns the mean value of `target` variable
    during `fit` stage and predicts the same mean value for all new data points, irrespective
    of X input (*probably not useful in real life, but just to make demonstrate the
    functionality*).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个朴素的估算器，它在 `fit` 阶段学习 `target` 变量的均值，并对所有新数据点预测相同的均值，不论 X 输入如何（*这在现实生活中可能没有用，但只是为了演示功能*）。
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now let’s use this estimator for training:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用这个估算器进行训练：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/c089fe6ac015fa821cee2295f480baa6.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c089fe6ac015fa821cee2295f480baa6.png)'
- en: Output from create_model(mom)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 create_model(mom) 的输出
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/6cc6e0701a9efb401a9a87a096e5b04c.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6cc6e0701a9efb401a9a87a096e5b04c.png)'
- en: Output from predict_model(mom, data=data)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 predict_model(mom, data=data) 的输出
- en: Notice that `Label` column which is essentially the prediction is the same number
    $13,225 for all the rows, that’s because we created this algorithm in such a way,
    that learns from the mean of train set and predict the same value (just to keep
    things simple).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到 `Label` 列，即预测值，对于所有行来说都是相同的数字 $13,225，这因为我们以这样的方式创建了这个算法：它从训练集的均值中学习，并预测相同的值（只是为了简单起见）。
- en: I hope that you will appreciate the ease of use and simplicity in PyCaret. In
    just a few lines, you can perform end-to-end machine learning experiments and
    write your own algorithms without adjusting any native code.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您会欣赏 PyCaret 的易用性和简洁性。仅需几行代码，您就可以进行端到端的机器学习实验，并编写自己的算法，而无需调整任何原生代码。
- en: Coming Soon!
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 敬请期待！
- en: Next week I will be writing a tutorial to advance this tutorial. We will write
    a more complex algorithm instead of just a mean prediction. I will introduce some
    complex concepts in the next tutorial. Please follow me on [Medium](https://medium.com/@moez-62905), [LinkedIn](https://www.linkedin.com/in/profile-moez/),
    and [Twitter](https://twitter.com/moezpycaretorg1) to get more updates.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 下周我将编写一个教程来推进这个教程。我们将编写一个更复杂的算法，而不仅仅是均值预测。我将在下一个教程中介绍一些复杂的概念。请关注我在 [Medium](https://medium.com/@moez-62905)、[LinkedIn](https://www.linkedin.com/in/profile-moez/)
    和 [Twitter](https://twitter.com/moezpycaretorg1) 的更新。
- en: There is no limit to what you can achieve using this lightweight workflow automation
    library in Python. If you find this useful, please do not forget to give us ⭐️
    on our GitHub repository.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个轻量级的 Python 工作流自动化库，您可以实现无限的目标。如果您觉得有用，请不要忘记在我们的 GitHub 仓库上给我们 ⭐️。
- en: To hear more about PyCaret follow us on [LinkedIn](https://www.linkedin.com/company/pycaret/) and [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 PyCaret 的信息，请关注我们的 [LinkedIn](https://www.linkedin.com/company/pycaret/)
    和 [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g)。
- en: Join us on our slack channel. Invite link [here](https://join.slack.com/t/pycaret/shared_invite/zt-p7aaexnl-EqdTfZ9U~mF0CwNcltffHg).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Slack 频道。邀请链接 [在这里](https://join.slack.com/t/pycaret/shared_invite/zt-p7aaexnl-EqdTfZ9U~mF0CwNcltffHg)。
- en: 'You may also be interested in:'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您可能还会感兴趣：
- en: '[Build your own AutoML in Power BI using PyCaret 2.0](https://towardsdatascience.com/build-your-own-automl-in-power-bi-using-pycaret-8291b64181d)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Power BI 中使用 PyCaret 2.0 构建您自己的 AutoML](https://towardsdatascience.com/build-your-own-automl-in-power-bi-using-pycaret-8291b64181d)'
- en: '[Deploy Machine Learning Pipeline on Azure using Docker](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-cloud-using-docker-container-bec64458dc01)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Docker 在 Azure 上部署机器学习管道](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-cloud-using-docker-container-bec64458dc01)'
- en: '[Deploy Machine Learning Pipeline on Google Kubernetes Engine](https://towardsdatascience.com/deploy-machine-learning-model-on-google-kubernetes-engine-94daac85108b)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Google Kubernetes Engine 上部署机器学习管道](https://towardsdatascience.com/deploy-machine-learning-model-on-google-kubernetes-engine-94daac85108b)'
- en: '[Deploy Machine Learning Pipeline on AWS Fargate](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-aws-fargate-eb6e1c50507)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 AWS Fargate 上部署机器学习管道](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-aws-fargate-eb6e1c50507)'
- en: '[Build and deploy your first machine learning web app](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[构建并部署你的第一个机器学习 web 应用](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99)'
- en: '[Deploy PyCaret and Streamlit app using AWS Fargate serverless](https://towardsdatascience.com/deploy-pycaret-and-streamlit-app-using-aws-fargate-serverless-infrastructure-8b7d7c0584c2)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 AWS Fargate 无服务器架构部署 PyCaret 和 Streamlit 应用](https://towardsdatascience.com/deploy-pycaret-and-streamlit-app-using-aws-fargate-serverless-infrastructure-8b7d7c0584c2)'
- en: '[Build and deploy machine learning web app using PyCaret and Streamlit](https://towardsdatascience.com/build-and-deploy-machine-learning-web-app-using-pycaret-and-streamlit-28883a569104)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 和 Streamlit 构建并部署机器学习 web 应用](https://towardsdatascience.com/build-and-deploy-machine-learning-web-app-using-pycaret-and-streamlit-28883a569104)'
- en: '[Deploy Machine Learning App built using Streamlit and PyCaret on GKE](https://towardsdatascience.com/deploy-machine-learning-app-built-using-streamlit-and-pycaret-on-google-kubernetes-engine-fd7e393d99cb)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 GKE 上部署使用 Streamlit 和 PyCaret 构建的机器学习应用](https://towardsdatascience.com/deploy-machine-learning-app-built-using-streamlit-and-pycaret-on-google-kubernetes-engine-fd7e393d99cb)'
- en: Important Links
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要链接
- en: '[Documentation](https://pycaret.readthedocs.io/en/latest/installation.html)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[文档](https://pycaret.readthedocs.io/en/latest/installation.html)'
- en: '[Blog](https://medium.com/@moez_62905)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[博客](https://medium.com/@moez_62905)'
- en: '[GitHub](https://www.github.com/pycaret/pycaret)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub](https://www.github.com/pycaret/pycaret)'
- en: '[StackOverflow](https://stackoverflow.com/questions/tagged/pycaret)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[StackOverflow](https://stackoverflow.com/questions/tagged/pycaret)'
- en: '[Install PyCaret](https://pycaret.readthedocs.io/en/latest/installation.html)
    [Notebook Tutorials](https://pycaret.readthedocs.io/en/latest/tutorials.html)
    [Contribute in PyCaret](https://pycaret.readthedocs.io/en/latest/contribute.html)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[安装 PyCaret](https://pycaret.readthedocs.io/en/latest/installation.html) [笔记本教程](https://pycaret.readthedocs.io/en/latest/tutorials.html)
    [为 PyCaret 做贡献](https://pycaret.readthedocs.io/en/latest/contribute.html)'
- en: Want to learn about a specific module?
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想了解某个特定模块？
- en: Click on the links below to see the documentation and working examples.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下面的链接查看文档和实际示例。
- en: '[Classification](https://pycaret.readthedocs.io/en/latest/api/classification.html)
    [Regression](https://pycaret.readthedocs.io/en/latest/api/regression.html)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[分类](https://pycaret.readthedocs.io/en/latest/api/classification.html) [回归](https://pycaret.readthedocs.io/en/latest/api/regression.html)'
- en: '[Clustering](https://pycaret.readthedocs.io/en/latest/api/clustering.html)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[聚类](https://pycaret.readthedocs.io/en/latest/api/clustering.html)'
- en: '[Anomaly Detection](https://pycaret.readthedocs.io/en/latest/api/anomaly.html)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[异常检测](https://pycaret.readthedocs.io/en/latest/api/anomaly.html)'
- en: '[Natural Language Processing](https://pycaret.readthedocs.io/en/latest/api/nlp.html)
    [Association Rule Mining](https://pycaret.readthedocs.io/en/latest/api/arules.html)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[自然语言处理](https://pycaret.readthedocs.io/en/latest/api/nlp.html) [关联规则挖掘](https://pycaret.readthedocs.io/en/latest/api/arules.html)'
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** 是一名数据科学家，也是 PyCaret
    的创始人和作者。'
- en: '[Original](https://towardsdatascience.com/write-and-train-your-own-custom-machine-learning-models-using-pycaret-8fa76237374e).
    Reposted with permission.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/write-and-train-your-own-custom-machine-learning-models-using-pycaret-8fa76237374e)。经授权转载。'
- en: '**Related:**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[Easy MLOps with PyCaret + MLflow](/2021/05/easy-mlops-pycaret-mlflow.html)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret + MLflow 进行简单的 MLOps](/2021/05/easy-mlops-pycaret-mlflow.html)'
- en: '[GitHub is the Best AutoML You Will Ever Need](/2020/08/github-best-automl-ever-need.html)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 是你所需的最佳 AutoML](/2020/08/github-best-automl-ever-need.html)'
- en: '[Deploy a Machine Learning Pipeline to the Cloud Using a Docker Container](/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Docker 容器将机器学习管道部署到云端](/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
- en: '* * *'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 3.0：开源、低代码的 Python 机器学习](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
- en: '[Tailor ChatGPT to Fit Your Needs with Custom Instructions](https://www.kdnuggets.com/2023/08/tailor-chatgpt-fit-needs-custom-instructions.html)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用自定义指令调整 ChatGPT 以满足您的需求](https://www.kdnuggets.com/2023/08/tailor-chatgpt-fit-needs-custom-instructions.html)'
- en: '[A Guide to Train an Image Classification Model Using Tensorflow](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Tensorflow 训练图像分类模型的指南](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 进行二元分类的介绍](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 在 Python 中进行聚类的介绍](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
