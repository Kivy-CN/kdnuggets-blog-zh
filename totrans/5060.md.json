["```py\nimport math\n\n# 1) given two data points, calculate the euclidean distance between them\ndef get_distance(data1, data2):\n    points = zip(data1, data2)\n    diffs_squared_distance = [pow(a - b, 2) for (a, b) in points]\n    return math.sqrt(sum(diffs_squared_distance))\n\n```", "```py\n>>> get_distance(train[0][0], train[1][0])\n\n4.052159917870962\n\n```", "```py\n>>> get_distance([1,1], [2,3])\n\n2.23606797749979\n\n```", "```py\nfrom operator import itemgetter\n\ndef get_neighbours(training_set, test_instance, k):\n    distances = [_get_tuple_distance(training_instance, test_instance) for training_instance in training_set]\n\n    # index 1 is the calculated distance between training_instance and test_instance\n    sorted_distances = sorted(distances, key=itemgetter(1))\n\n    # extract only training instances\n    sorted_training_instances = [tuple[0] for tuple in sorted_distances]\n\n    # select first k elements\n    return sorted_training_instances[:k]\n\ndef _get_tuple_distance(training_instance, test_instance):\n    return (training_instance, get_distance(test_instance, training_instance[0]))\n\n```", "```py\n>>> _get_tuple_distance(train[0], test[0][0])\n\n(array([array([ 4.8, 3.4, 1.6, 0.2]), 0], dtype=object), 1.2328828005937953)\n\n```", "```py\n>>> [_get_tuple_distance(training_instance, test[0][0]) for training_instance in train[0:3]]\n\n[(array([array([ 4.8, 3.4, 1.6, 0.2]), 0], dtype=object),\n1.2328828005937953),\n(array([array([ 5.7, 2.5, 5. , 2. ]), 2], dtype=object),\n4.465422712353221),\n(array([array([ 6.3, 2.7, 4.9, 1.8]), 2], dtype=object),\n4.264973622427225)]\n\n```", "```py\n>>> distances = [_get_tuple_distance(training_instance, test[0][0]) for training_instance in train[0:3]]\n>>> sorted_distances = sorted(distances, key=itemgetter(1))\n>>> [tuple[0] for tuple in sorted_distances]\n\n[array([array([ 4.8, 3.4, 1.6, 0.2]), 0], dtype=object),\narray([array([ 6.3, 2.7, 4.9, 1.8]), 2], dtype=object),\narray([array([ 5.7, 2.5, 5. , 2. ]), 2], dtype=object)]\n\n```"]