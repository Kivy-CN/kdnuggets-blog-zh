- en: GitHub Desktop for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/09/github-desktop-data-scientists.html](https://www.kdnuggets.com/2021/09/github-desktop-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Drew Seewald](https://realdrewdata.medium.com/), Data Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Version control is important for collaborating on code, sharing it with others,
    being able to view old versions of the code, and even deploying the code automatically.
    It can be a bit confusing at first, but is well worth your time, especially if
    you work in the open source space or on a team where you will frequently be using
    version control for projects. Here are some of the biggest features that make
    it worth using:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing file change history with comments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing multiple users editing the same project simultaneously
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitating code review procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating workflows to report issues, request improvements, and deploy code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![Relax, you don’t have to use the command line](../Images/5f68391a85d401b6be5755e36c39b571.png)'
  prefs: []
  type: TYPE_IMG
- en: Relax, you don’t have to use the command line
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Dennis van Dalen](https://unsplash.com/@dennisvandalen?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Version Control Features
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main features of version control is the file change history for every
    file in the repository. This serves as a change log for each and every file, so
    it is always possible to see what code was running at any point in the past. Every
    time someone updates a file and pushes the new version to the repository, they
    have to add a short comment. In a perfect world, this details what the changes
    were and why they were made. If there is ever a question on why something was
    changed or why, the person responsible will be tagged in the commit, along with
    the additional information they provided.
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of version control is the ability to create branches. A branch
    is a new version of the code that is kept separate. This is helpful for making
    and testing changes to the code as it doesn’t change the main branch, where the
    most up to date working version is. Branches can also be used by different users
    to work on different code or features at the same time. These branches can be
    merged back to the master when they are ready, and there is a process to reconcile
    the differences between them when merging.
  prefs: []
  type: TYPE_NORMAL
- en: Code review is a best practice when working with teams. One person may do all
    the work on a new feature in a new branch, but before blindly merging it into
    the main branch, it should be reviewed by the team. When a pull request is created
    to move code to the main branch, it also starts a discussion where team members
    can talk about the code and request changes before it gets merged to the main
    branch. This process should help improve the code that makes it into production
    to prevent bugs and breaks, improve the efficiency of the code, or even have it
    match a standard for formatting the code.
  prefs: []
  type: TYPE_NORMAL
- en: A final noteworthy benefit of using GitHub for version control is the automation
    options it offers. If there is a standard code review checklist, it can be added
    as a template that will be available when a pull request is created, ready to
    be filled out as review tasks are completed. Templates can also be used when people
    create issues so that they remember all of the details they need to input as they
    are creating an issue. GitHub also offers actions to support automation. These
    can be triggered by different events, such as merging code into the master branch.
    An action can run unit tests, build/compile package components, and even deploy
    code to production.
  prefs: []
  type: TYPE_NORMAL
- en: Version Control Flavors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few big names version control you may have heard of. Some of the
    most popular are Git and GitHub. [Git](https://git-scm.com/about) is the underlying
    technology for version control, and [GitHub](https://github.com/features) is software
    that simplifies the version control workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Git can be used locally, without any need for an external repository. You can
    do all of your version control tasks on your computer’s hard drive. Local Git
    repositories are ideal for personal projects or for when you aren’t quite ready
    to share your code with your entire team, but still want the benefits of version
    control.
  prefs: []
  type: TYPE_NORMAL
- en: The GitHub website is a repository to store code. A lot of open source projects,
    such as Python and R packages, are hosted on the GitHub website. For public repositories,
    anyone can view revision history, issues with the package, and documentation related
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: To connect to a repository on the GitHub website, we can use Git or GitHub Desktop.
    For those of you who love a command line interface (CLI), [Rebecca Vickery](https://rebecca-vickery.medium.com/) has
    a great article on [using the Git CLI for Data Science](https://towardsdatascience.com/introduction-to-github-for-data-scientists-2cf8b9b25fba).
    So why should you keep reading? **Command lines can be intimidating**. There is
    nothing wrong with wanting a graphical user interface (GUI) to manage your version
    control. GitHub Desktop provides a clear and simple interface with your repository.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Desktop Process Flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While everyone will have a slightly different process flow for their repository,
    there are a few general steps to make changes to code on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a branch
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding commits
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a new pull request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Completing code review
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Merging the pull request
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a branch makes a copy of the current production code. A developer will
    make changes to the files, committing any changes to the new branch. Next, a pull
    request will open discussion to add the new branch’s changes to the production
    code, typically in the master or main branch. Code reviewers can add comments
    and request clarification on the changes made on the pull request. Once the review
    is complete and any necessary changes made, the pull request can be merged to
    the master or main branch and closed.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s walk through these steps in more detail, looking at how to do each one
    using GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Branch (separating the new code from the old)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To make a change, first create a new branch. If you have full access to the
    repository, you can simply create a new branch on the repository’s GitHub site.
  prefs: []
  type: TYPE_NORMAL
- en: '1a. Click on Branch: main'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7a2f5a3a8e875300d915e791ef68f11e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 2a. Type the name of the new branch in the text box. There may be some branch
    naming conventions to consider from your organization to keep things organized
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4b06ee888375539073d6da2d0995beb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 3a. Click on Create branch
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bfc6ec4d3df0e70160c5b667546635f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: The new branch will now be selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9fc334b1ae45f64ce831e9fab827279a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have full access to the repository, which is common for public
    projects, you will have to fork the repository. A new branch and a fork are synonymous.
    A fork will be created in a new repository as opposed to the same one as the production
    code, typically under your personal profile. To fork:'
  prefs: []
  type: TYPE_NORMAL
- en: 1b. In the top right, click on Fork
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/aabe81e12567cf1fc0e97073fa2cb706.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 2b. Wait for the files to copy
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/630c695aff8621eea6cd0b9d1599a985.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 3b. The new fork will be selected
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1d7c3809adeb2a04cf0988553e5c71d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Adding Commits (enhancing the code/adding features)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make commits to the code, you will clone the repository to your local computer.
    This copies the code for you to work on before sending the updates back to the
    repository. To clone the repository to your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Click clone or download.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5ceaf9ad18aad68cac50c1fc848e7a60.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Click open with GitHub desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07acf88809c00832c3162bfa8664ba7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have GitHub Desktop, click download GitHub Desktop.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c8c6cca6e38fcf5a1b904b1cefa5c627.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: GitHub desktop will ask where to clone the repository to on your local machine.
    This is the Local path field.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bf04bf406e9f8bafbc1a50272752676.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Click on the branch and select the newly created branch. This will update the
    files on your local machine with any updates on that branch and make it the active
    one to add commits to.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f3202aa31e053e9bd96cb480bc43801a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: To make changes, open the directory you chose when cloning and make changes
    with your text editor or integrated development environment (IDE) as normal. Save
    the files.
  prefs: []
  type: TYPE_NORMAL
- en: Return to GitHub Desktop. GitHub Desktop is constantly scanning the repository
    folder tree and will see any changes you make. These changes will show up on the
    left pane. The right pane will preview changes to the selected file (certain file
    types won’t preview).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e9843042959d6dcb82ac53305d44bf32.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Each time you make a set of related changes, commit those changes to your repository.
    Remember to add comments to the commits so that people can easily identify what
    was changed. The upper text box is for a quick description, but if you have more
    notes to add about the commit, put them in the larger description text box.
  prefs: []
  type: TYPE_NORMAL
- en: With changes made and comments added, commit the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1ea3c17098321267a72fa0ba6c5f0e09.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Committing changes only saves them on the local files. To push the changes back
    to the GitHub server, click push origin. If there are commits made that haven’t
    been pushed back to the server, a message will appear on the right pane that says **Push
    xx commit(s) to the origin remote**. The origin is just a name for where the repository
    was cloned from.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9cc725a65a3afc5a37efc05a0025d4be.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Open a Pull Request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigate to your repository on the GitHub server. Make sure you are on the correct
    branch. If you created a new branch on the original repository, navigate there.
    If you had to fork the repository, navigate to the repository on your personal
    profile.
  prefs: []
  type: TYPE_NORMAL
- en: On the **Pull requests** tab, click on **New pull request**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a3f66c066514f4951860cd8817ced77.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Select the new branch as the one to compare, and **click create pull request**.
    In our case, the pull request is automatically populated with our commit comments.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3a5b0d3de61eeca6143b9f3fa5622809.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Code Review
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code review helps make sure that the code we are adding or changing is correct
    and has been reviewed and approved by multiple people. Whether you have access
    to a repository or not, you should always have reviewers check the changes. If
    there are any questions, go over them as a team.
  prefs: []
  type: TYPE_NORMAL
- en: Pull requests show up under the Pull request tab of the repository. Each pull
    request has a conversation, commits, and files changed tabs.
  prefs: []
  type: TYPE_NORMAL
- en: Conversation is where people can add questions or comments about the code. You
    can format your comments and tag people and issues in your comments.
  prefs: []
  type: TYPE_NORMAL
- en: Commits shows all of the commits and comments made in the pull request
  prefs: []
  type: TYPE_NORMAL
- en: Files changed shows which files were changed, added, or deleted along with line
    by line comparisons of code where available
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd0fd1d02f26feb7ac4e6ea318ca4942.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: Merge the Pull Request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In my case, my main branch was changed while I was working on the new branch.
    This is why there are messages saying that there are conflicts to resolve. Clicking
    the Resolve conflicts button opens an editor. It will show the version of the
    file from each branch, allowing you to delete one and keep the other, or create
    some version of both.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fabb8f794787fcb4b1cabde497d343aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the version from the main branch is correct. The changes from
    the other branch and the separators can be deleted. The conflict can be marked
    as resolved, and committed to the merge.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fbac7272763c6caff22817bfa1a2f691.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: With code review and conflicts out of the way, the pull request can be merged.
    Once again there will be an option to give a comment on what the merge accomplishes.
    After merging, the code will be part of the master or main branch!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/38cde93dd454a07a5b3ecbf7da8fd8d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: And there you have it, you now know how to complete the most basic version control
    tasks using GitHub and GitHub Desktop!
  prefs: []
  type: TYPE_NORMAL
- en: '*I write about data science, analytics, and programming concepts. You can connect
    with me on *[*Medium*](https://realdrewdata.medium.com/lists)*, *[*Twitter*](https://twitter.com/RealDrewData)*,
    and *[*LinkedIn*](https://www.linkedin.com/in/realdrewdata/)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[**Understanding the GitHub flow**](https://guides.github.com/introduction/flow/)'
  prefs: []
  type: TYPE_NORMAL
- en: When you're working on a project, you're going to have a bunch of different
    features or ideas in progress at any given…
  prefs: []
  type: TYPE_NORMAL
- en: '[**Version Control with Git**](https://swcarpentry.github.io/git-novice/)'
  prefs: []
  type: TYPE_NORMAL
- en: Wolfman and Dracula have been hired by Universal Missions (a space services
    spinoff from Euphoric State University) to…
  prefs: []
  type: TYPE_NORMAL
- en: '[**What is version control | Atlassian Git Tutorial**](https://www.atlassian.com/git/tutorials/what-is-version-control)'
  prefs: []
  type: TYPE_NORMAL
- en: Version control, also known as source control, is the practice of tracking and
    managing changes to software code…
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Drew Seewald](https://realdrewdata.medium.com/)** is a Data Scientist
    at Mercedes-Benz Financial Services. Follow Drew on Twitter [@RealDrewData](https://twitter.com/realdrewdata?lang=en)
    or connect on [LinkedIn](https://www.linkedin.com/in/realdrewdata/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/github-desktop-for-data-scientists-b9d8a3afc5ea).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub Copilot Open Source Alternatives](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Data Acquisition, Annotation, and Augmentation Tools](/2021/08/3-data-labeling-synthesizing-augmentation-tools.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Copilot and the Rise of AI Language Models in Programming Automation](/2021/09/github-copilot-rise-ai-language-models-programming-automation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Learn Data Science From These GitHub Repositories](https://www.kdnuggets.com/2022/12/learn-data-science-github-repositories.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn Data Engineering From These GitHub Repositories](https://www.kdnuggets.com/2023/02/learn-data-engineering-github-repositories.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub CLI for Data Science Cheat Sheet](https://www.kdnuggets.com/2023/03/github-cli-data-science-cheat-sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Data Analytics: Integrating GitHub Copilot in Databricks](https://www.kdnuggets.com/optimizing-data-analytics-integrating-github-copilot-in-databricks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Top 5 Alternatives to GitHub for Data Science Projects](https://www.kdnuggets.com/the-top-5-alternatives-to-github-for-data-science-projects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 GitHub Repositories to Master Data Engineering](https://www.kdnuggets.com/10-github-repositories-to-master-data-engineering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
