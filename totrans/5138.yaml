- en: SQL Query Optimization Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 查询优化技术
- en: 原文：[https://www.kdnuggets.com/2023/03/sql-query-optimization-techniques.html](https://www.kdnuggets.com/2023/03/sql-query-optimization-techniques.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/03/sql-query-optimization-techniques.html](https://www.kdnuggets.com/2023/03/sql-query-optimization-techniques.html)
- en: '![SQL Query Optimization Techniques](../Images/41f30feb0f08d02cc4e3508fc8274d43.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![SQL 查询优化技术](../Images/41f30feb0f08d02cc4e3508fc8274d43.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: At the beginner level, we only focus on just writing and running the SQL queries.
    We do not bother about how much time it takes to execute or whether it can handle
    millions of records. But at the intermediate level, people expect your query to
    be optimized and take minimum time to execute.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在初级阶段，我们只关注编写和运行 SQL 查询。我们不在乎执行需要多长时间或它是否能处理数百万条记录。但在中级阶段，人们期望你的查询已优化并且执行时间最小。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Writing an optimized query in large applications with millions of records, like
    e-commerce platforms or banking systems, is imperative. Suppose you own an e-commerce
    company with more than a million products, and a customer wants to search for
    a product. What if the query you wrote in the backend takes more than a minute
    to fetch that product from the database? Will you think the customers buy products
    from your website?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在大型应用程序中编写优化的查询，如电子商务平台或银行系统，是至关重要的。假设你拥有一个超过一百万个产品的电子商务公司，而客户希望搜索某个产品。如果你在后端编写的查询需要超过一分钟来从数据库中获取该产品，你认为客户还会在你的网站上购买产品吗？
- en: You have to understand the importance of SQL query optimization. In this tutorial,
    I will show you some tips and tricks to optimize your SQL queries and make them
    to execute faster. The primary pre-requisite is that you must have a basic knowledge
    of SQL.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须了解 SQL 查询优化的重要性。在本教程中，我将向你展示一些优化 SQL 查询的技巧和窍门，从而使它们执行得更快。主要前提是你必须具备基本的 SQL
    知识。
- en: 1\. Use EXIST() instead of COUNT() to find a Specific Element in the Table
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 使用 EXIST() 替代 COUNT() 来查找表中的特定元素
- en: To check whether a specific element is present in the table, use the `EXIST()`
    keyword instead of the `COUNT()` will run the query in a more optimized way.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查表中是否存在特定元素，请使用 `EXIST()` 关键字，代替 `COUNT()` 将以更优化的方式运行查询。
- en: Using `COUNT()`, the query needs to count all the occurrences of that particular
    element which may be inefficient when the database is extensive. On the other
    hand, `EXIST()` will check only the first occurrence of that element and then
    stop when it finds the first occurrence. This saves a lot of time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `COUNT()`，查询需要计算特定元素的所有出现次数，这在数据库庞大时可能效率较低。另一方面，`EXIST()` 只会检查该元素的第一次出现，然后在找到第一次出现时停止。这节省了很多时间。
- en: Also, you are only interested in finding whether a particular element is present
    or not. You are not interested in finding the number of occurrences. That’s why
    also `EXIST()` is better.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你只关心检查特定元素是否存在，而不关心出现次数。这就是为什么 `EXIST()` 更好的原因。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above query will return **1** if at least one table row contains an entry
    where a column named `myColumn` has a value equal to **val**. Otherwise, it will
    return **0**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询会返回**1**，如果至少有一行表记录包含名为 `myColumn` 的列，其值等于**val**。否则，它会返回**0**。
- en: 2\. Use of Varchar instead of Char
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 使用 Varchar 而不是 Char
- en: Both `char` and `varchar` data types are used to store character strings in
    the table. But `varchar` is much more memory efficient than `char`.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`char` 和 `varchar` 数据类型都用于在表中存储字符字符串。但 `varchar` 比 `char` 更加节省内存。'
- en: The char datatype can only store the character string of fixed length defined.
    If the length of the string is less than the fixed length, then it will pad the
    blank spaces to make its length equal to the set length. This will unnecessarily
    waste memory in padding. For example,`CHAR(100)` will take 100 bytes of memory
    even if a single character is stored.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, varchar datatype stores the character string of variable
    length having a length less than the maximum length specified. It does not pad
    the blank spaces and only takes the memory equal to the string's actual length.
    For example, `VARCHAR(100)` takes only 1 byte of memory when storing a single
    character.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above example, a table `myTable` is created having two columns, `charCol`
    and `varcharCol` having char and varchar datatypes respectively. `charCol` will
    always take 10 bytes of memory. In contrast, `varcharCol` takes memory equal to
    the actual size of the character string stored in it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Avoid Subqueries in WHERE Clause
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must avoid using subqueries inside the WHERE clause to optimize an SQL query.
    As the subqueries can be expensive and difficult to execute when they return a
    large number of rows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the subquery, you can get the same result by using a join operation
    or writing a correlated subquery. A correlated subquery is a subquery in which
    the inner query depends on the outer query. And they are very efficient as compared
    to non-correlated subquery.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Below is an example to understand the difference between the two.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the 1st example, the subquery first collects all the customer ids that belong
    to INDIA, and then the outer query will get all the orders of the selected customer
    ids. And in the 2nd example, we have achieved the same result by joining the `customers`
    and `orders` tables and then selecting only orders where the customers belong
    from INDIA.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In this way, we can optimize the query by avoiding the use of subqueries inside
    the WHERE clause and making them easier to read and understand.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Ordering JOINs from a Larger Table to a Smaller Table
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applying the `JOIN` operation from a larger table to a smaller table is a common
    SQL optimization technique. Because joining from a larger table to a smaller table
    will make your query to execute faster. If we apply a `JOIN` operation from a
    smaller table to a larger table, our SQL engine has to search in a larger table
    for matching rows. This is more resource-intensive and time-consuming. But on
    the other hand, if the `JOIN` is applied from a larger table to a smaller table,
    then the SQL engine has to search in a smaller table for matching rows.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example for your better understanding.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 5\. Use `regexp_like` instead of `LIKE` Clause
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike the `LIKE` clause, `regexp_like` is also used for pattern searching.
    The `LIKE` clause is a basic pattern-matching operator that can perform only basic
    operations like **_** or **%**, which are used to match a single character or
    any number of characters respectively. The `LIKE` clause must scan the complete
    database to find the particular pattern, which is slow for large tables.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `LIKE` 子句不同，`regexp_like` 也用于模式搜索。`LIKE` 子句是一个基本的模式匹配操作符，只能执行如 **_** 或 **%**
    这样的基本操作，用于匹配单个字符或任意数量的字符。`LIKE` 子句必须扫描整个数据库以找到特定模式，这对于大型表来说速度较慢。
- en: On the other hand, `regexp_like` is a more efficient, optimized, and powerful
    pattern-searching technique. It uses more complex regular expressions to find
    specific patterns in a character string. These regular expressions are more specific
    than simple wildcard matching because they allow you to search for the exact pattern
    that we are finding. Due to this, the amount of data that needs to be searched
    is reduced, and the query executes faster.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`regexp_like` 是一种更高效、优化和强大的模式搜索技术。它使用更复杂的正则表达式来查找字符字符串中的特定模式。这些正则表达式比简单的通配符匹配更具体，因为它们允许你搜索我们所寻找的确切模式。由于这个原因，需要搜索的数据量减少，查询执行速度更快。
- en: Please note that `regexp_like` may not be present in all database management
    systems. Its syntax and functionality may vary in other systems.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`regexp_like` 可能并非所有数据库管理系统中都存在。其语法和功能在其他系统中可能有所不同。
- en: Here is an example for your better understanding.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例帮助你更好地理解。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The above queries are used to find the elements that name starts with A or B.
    In the first example, `LIKE` is used to search all the names that start with A
    or B. `A%` means that the first character is A; after that, any number of characters
    can be present. In the second example, `regexp_like` is used. Inside `^[AB]`,
    `^` represents that the symbol will match at the beginning of the string, `[AB]`
    represents that the beginning character can be A or B, and `.*` represents all
    the characters after that.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 上述查询用于查找名称以 A 或 B 开头的元素。在第一个示例中，使用 `LIKE` 搜索所有以 A 或 B 开头的名称。`A%` 表示第一个字符是 A；之后可以有任意数量的字符。在第二个示例中，使用了
    `regexp_like`。在 `^[AB]` 内部，`^` 表示符号将匹配字符串的开头，`[AB]` 表示开头字符可以是 A 或 B，`.*` 表示之后的所有字符。
- en: Using `regexp_like`, the database can quickly filter out the rows that don’t
    match the pattern, improving performance and reducing resource usage.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `regexp_like`，数据库可以快速过滤掉不匹配模式的行，从而提高性能并减少资源使用。
- en: Conclusion
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we have discussed various methods and tips to optimize the
    SQL query. This article gives you a clear understanding of how to write efficient
    SQL queries and the importance of optimizing them. There are many more ways of
    optimizing the queries, like preferring the use of integer values rather than
    characters or using Union All instead of Union when your table doesn’t contain
    duplicates, etc.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了优化 SQL 查询的各种方法和技巧。本文让你清晰地了解了如何编写高效的 SQL 查询以及优化它们的重要性。优化查询的方法还有很多，例如偏好使用整数值而不是字符，或者在表中没有重复项时使用
    Union All 而不是 Union 等。
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** 是一名电气工程专业的
    B.Tech. 学生，目前处于本科最后一年。他的兴趣领域包括网页开发和机器学习。他已经在这些方向上有所追求，并渴望进一步深入工作。'
- en: More On This Topic
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多相关内容
- en: '[Query Your Pandas DataFrames with SQL](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 SQL 查询你的 Pandas DataFrame](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
- en: '[5 Tips for Improving SQL Query Performance](https://www.kdnuggets.com/5-tips-for-improving-sql-query-performance)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升 SQL 查询性能的 5 个技巧](https://www.kdnuggets.com/5-tips-for-improving-sql-query-performance)'
- en: '[3 Research-Driven Advanced Prompting Techniques for LLM Efficiency…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 种基于研究的高级提示技术提升 LLM 效率…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
- en: '[Can We Query a Table with T5?](https://www.kdnuggets.com/2022/05/query-table-t5.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我们可以用 T5 查询表格吗？](https://www.kdnuggets.com/2022/05/query-table-t5.html)'
- en: '[Database Optimization: Exploring Indexes in SQL](https://www.kdnuggets.com/2023/07/database-optimization-exploring-indexes-sql.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据库优化：探索 SQL 中的索引](https://www.kdnuggets.com/2023/07/database-optimization-exploring-indexes-sql.html)'
- en: '[Top 5 Free Resources for Learning Advanced SQL Techniques](https://www.kdnuggets.com/top-5-free-resources-for-learning-advanced-sql-techniques)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习高级 SQL 技巧的前 5 个免费资源](https://www.kdnuggets.com/top-5-free-resources-for-learning-advanced-sql-techniques)'
