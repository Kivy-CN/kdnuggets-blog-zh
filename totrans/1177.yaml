- en: Python Data Structures Compared
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/07/python-data-structures-compared.html](https://www.kdnuggets.com/2021/07/python-data-structures-compared.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/beb472629858f9167f198fa19ad0f9ce.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a structure for storing your data is an important part of solving programming
    tasks and implementing solutions, yet it is often not given the attention a choice
    of such potential weight deserves. Unfortunately, in Python I often see the list
    used as a catch-all data structure. The list has its advantages, of course, but
    also its drawbacks. There are lots of other data structure options as well.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at 5 different Python data structures and see how they could
    be used to store data we might be processing in our everyday tasks, as well as
    the relative memory they use for storage and time they take to create and access.
  prefs: []
  type: TYPE_NORMAL
- en: Types of Data Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, let's lay out the 5 data structures we will consider herein, and provide
    some preliminary insight.
  prefs: []
  type: TYPE_NORMAL
- en: '**Class**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case we are talking about vanilla classes (as opposed to data classes
    below), which are described at a high level in Python [documentation](https://docs.python.org/3/tutorial/classes.html)
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Classes provide a means of bundling data and functionality together. Creating
    a new class creates a new *type* of object, allowing new *instances* of that type
    to be made. Each class instance can have attributes attached to it for maintaining
    its state. Class instances can also have methods (defined by its class) for modifying
    its state.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The advantages of using classes is that they are conventional, and are well-used
    and -understood. Whether or not they are overkill in terms of relative required
    memory or time is something to look at.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Class**'
  prefs: []
  type: TYPE_NORMAL
- en: Added in Python 3.7, the [data class](https://www.python.org/dev/peps/pep-0557/)
    is a special class meant for mainly holding data, which comes with some freebie
    methods out of the box for typical functionality like instantiating and printing
    instance contents. Creating a data class is accomplished using the `@dataclass`
    decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Although they use a very different mechanism, Data Classes can be thought of
    as "mutable namedtuples with defaults". Because Data Classes use normal class
    definition syntax, you are free to use inheritance, metaclasses, docstrings, user-defined
    methods, class factories, and other Python class features. Such a class is called
    a Data Class, but there''s really nothing special about the class: the decorator
    adds generated methods to the class and returns the same class it was given.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you can see, the [automatically generated methods](https://www.python.org/dev/peps/pep-0557/#id32)
    and the related time-savings are the main reason to consider data classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Named Tuple**'
  prefs: []
  type: TYPE_NORMAL
- en: Named tuples are an [elegant implementation](https://docs.python.org/3/library/collections.html#collections.namedtuple)
    of a useful data structure, essentially tuple subclasses with named fields.
  prefs: []
  type: TYPE_NORMAL
- en: Named tuples assign meaning to each position in a tuple and allow for more readable,
    self-documenting code. They can be used wherever regular tuples are used, and
    they add the ability to access fields by name instead of position index.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At first look, named tuples appear to be the closest thing to simple C-like
    struct types natively available in Python, making them naively attractive to many.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dictionary**'
  prefs: []
  type: TYPE_NORMAL
- en: The Python [dictionary](https://python-reference.readthedocs.io/en/latest/docs/dict/)
    is a collection of key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Dictionaries](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html)
    are mutable unordered collections (they do not record element position or order
    of insertion) of key-value pairs. Keys within the dictionary must be unique and
    must be hashable. That includes types like numbers, strings and tuples. Lists
    and dicts can not be used as keys since they are mutable.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The advantage of dictionaries is that they are simple, the data within are easily
    accessible, and they are well-used and -understood.
  prefs: []
  type: TYPE_NORMAL
- en: '**List**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here it is, the one-size-fits-all Python data superstructure, or so lots of
    code would have you believe. Here is what the [list](https://python-reference.readthedocs.io/en/latest/docs/list/)
    really is:'
  prefs: []
  type: TYPE_NORMAL
- en: Lists are mutable ordered and indexed collections of objects. The items of a
    list are arbitrary Python objects. Lists are formed by placing a comma-separated
    list of expressions in square brackets.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why the widespread use of the list? It's very simple to understand and implement,
    and is usually the first structure one learns when picking up Python. Are there
    disadvantages related to speed and memory usage? Let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: Implementations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First off, let's have a look at the creation process of each of these structures
    and how they compare to one another.
  prefs: []
  type: TYPE_NORMAL
- en: The reason we might be using any of these data structures to store our data
    would vary widely, but for the unimaginative, let's imagine we are extracting
    data from a SQL database and need to store each record in one such structure in
    order to perform some processing prior to moving the data further along our pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, here is instantiation code for creating each of the five
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The creation of an instance of the built-in types dictionary and list have been
    place inside functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The difference between the class and the data class implementations, in light
    of the discussion above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The (clearly subjective) elegance and simplicity of the named tuple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at instantiation of these structures, and a comparison of
    the resources required to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Testing and Results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will create a single instance of each of the 5 structures, each housing a
    single data record. We will repeat this process using the same data fields for
    each structure 1,000,000 times to get a better sense of average time, performing
    this process on my modest Dell notebook, using an Ubuntu-derived operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/b4fba0e02b2ae02ceba2ec1d33b38e96.png)'
  prefs: []
  type: TYPE_IMG
- en: Compare the code between the 5 structure instantiations below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'And here is the output of the above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Finally, another useful piece of data would be to know the relative access times
    of values stored within our structures (in the case below, the address). The same
    retrieval will be repeated 1,000,000 times, and the average time reported below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The intent of this article is not to make a recommendation one way or another
    as to which data structure to use, nor is it to suggest that there is a universal
    best structure for every case. Instead, we wanted to have a look at some different
    options and their relative strength and weakness. As with all things, there are
    trade-offs to be made, and less quantitative considerations such as understandability,
    ease of use, etc. are to be taken into account when making these types of decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'That said, a few things do stand out from the above analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: The dictionary uses the greatest amount of storage of all the structures, in
    our case almost 3 times as much as the next greatest — though we should be careful
    about generalizing until we look at the effects of scaling and internal field
    data types
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unsurprisingly, the list is the fastest to instantiate, yet not the fastest
    from which to retrieve an element (it's almost the slowest)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In our case, the named tuple is the slowest structure from which to retrieve
    an element, yet is middle of the pack for storage space
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both classes take relatively longer to instantiate (expected), but element retrieval
    and space used, in both cases, are very competitive with the other structures
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So not only are we not looking to recommend a single structure in every case,
    there is no clear winner that could be recommended in every case. Even taking
    the caution to generalize based on our small experiment, it is clear that priorities
    will need to be taken into account for making a decision as to which structure
    you use for a particular job. At the very least, this limited experimentation
    has provided some small window of insight into the performance of data structures
    available in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Python Data Processing Tips & Code Snippets](/2021/07/python-tips-snippets-data-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Date Processing and Feature Engineering in Python](/2021/07/date-pre-processing-feature-engineering-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Super Study Guide: A Free Algorithms and Data Structures eBook](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Starter Guide to Data Structures for AI and Machine Learning](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
