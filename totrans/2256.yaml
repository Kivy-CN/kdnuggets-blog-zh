- en: 'Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rotten Tomatoes 电影评分预测的数据科学项目：第一种方法
- en: 原文：[https://www.kdnuggets.com/2023/06/data-science-project-rotten-tomatoes-movie-rating-prediction-first-approach.html](https://www.kdnuggets.com/2023/06/data-science-project-rotten-tomatoes-movie-rating-prediction-first-approach.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/06/data-science-project-rotten-tomatoes-movie-rating-prediction-first-approach.html](https://www.kdnuggets.com/2023/06/data-science-project-rotten-tomatoes-movie-rating-prediction-first-approach.html)
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/d3f12f9c00b48733d43b0fb8d5b5dde2.png)Image
    by Author'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '![Rotten Tomatoes 电影评分预测的数据科学项目：第一种方法](../Images/d3f12f9c00b48733d43b0fb8d5b5dde2.png)作者提供的图像'
- en: It's no secret that predicting the success of a movie in the entertainment industry
    can make or break a studio's financial prospects.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，预测娱乐行业中电影的成功与否可以决定一个制片厂的财务前景。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您所在组织的 IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Accurate predictions enable studios to make well-informed decisions about various
    aspects, such as marketing, distribution, and content creation.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 准确的预测使制片厂能够在营销、发行和内容创作等各个方面做出明智的决策。
- en: Best of all, these predictions can help maximize profits and minimize losses
    by optimizing the allocation of resources.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的是，这些预测可以通过优化资源配置来最大化利润和最小化损失。
- en: Fortunately, machine learning techniques provide a powerful tool to tackle this
    complex problem. No doubt about it, by leveraging data-driven insights, studios
    can significantly improve their decision-making process.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，机器学习技术提供了一个强大的工具来解决这个复杂的问题。毫无疑问，通过利用数据驱动的洞察，制片厂可以显著改善其决策过程。
- en: This data science project has been used as a take-home assignment in the recruitment
    process at Meta (Facebook). In this take-home assignment, we will discover how
    Rotten Tomatoes is making labeling as ‘Rotten’, ‘Fresh’ or  ‘Certified Fresh’.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个数据科学项目曾作为Meta（Facebook）招聘过程中的家庭作业。在这项家庭作业中，我们将了解 Rotten Tomatoes 如何将电影标记为“烂片”、“新鲜”或“认证新鲜”。
- en: To do that, we will develop two different approaches.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将制定两种不同的方法。
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/d2ba235dba50e9a968c7483d9c033db9.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Rotten Tomatoes 电影评分预测的数据科学项目：第一种方法](../Images/d2ba235dba50e9a968c7483d9c033db9.png)'
- en: Image by Author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Throughout our exploration, we will discuss data preprocessing, various classifiers,
    and potential improvements to enhance the performance of our models.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的探索过程中，我们将讨论数据预处理、各种分类器以及潜在的改进，以提高模型的性能。
- en: By the end of this post, you will have gained an understanding of how machine
    learning can be employed to predict movie success and how this knowledge can be
    applied in the entertainment industry.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 到本篇文章结束时，您将了解到如何利用机器学习来预测电影的成功以及如何将这些知识应用于娱乐行业。
- en: But before going deeper, let’s discover the data we will work on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但在深入之前，让我们先了解一下我们将要处理的数据。
- en: 'First Approach: Predicting Movie Status Based on Numerical and Categorical
    Features'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一种方法：基于数值特征和类别特征预测电影状态
- en: In this approach, we will use a combination of numerical and categorical features
    to predict the success of a movie.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，我们将结合数值特征和类别特征来预测电影的成功。
- en: The features we will consider include factors such as budget, genre, runtime,
    and director, among others.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将考虑的特征包括预算、类型、时长和导演等因素。
- en: We will employ several [machine learning algorithms](https://www.stratascratch.com/blog/machine-learning-algorithms-you-should-know-for-data-science/?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes)
    to build our models, including Decision Trees, Random Forests, and Weighted Random
    Forests with feature selection.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/ef349f80d0ea44292afd887bee532061.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Let’s read our data and take a glimpse of it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the output.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/80ab8fe1aebf46e262502dbdfd7fa2a2.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Now, let’s start with Data Preprocessing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: There are many columns in our Data set.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: To develop a better understanding of the statistical features, let’s use describe
    the () method. Here is the code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here is the output.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/83e81ed677afed0819b13a56cb93d54a.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
- en: Now, we have a quick overview of our data, let’s go to the preprocessing stage.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Data Preprocessing
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can begin building our models, it's essential to preprocess our data.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: This involves cleaning the data by handling categorical features and converting
    them into numerical representations, and scaling the data to ensure that all features
    have equal importance.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: We first examined the content_rating column to see the unique categories and
    their distribution in the dataset.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Then, we will create a bar plot to see the distribution of each content rating
    category.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is the full code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here is the output.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/cfabddab78f786c89eeb9865985442a2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 'It is essential to convert categorical features into numeric forms for our
    machine learning models which need numeric inputs. For multiple elements in this
    data science project, we are going to apply two generally accepted methods: ordinal
    encoding and one-hot encoding. Ordinal encoding is better when categories imply
    a degree of intensity, but the one-hot encoding is ideal when no magnitude representation
    is provided. For the "content_rating" assets, we will use a one-hot encoding method.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here is the output.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/5474ac96a1205c695b4644b9ff12494e.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Let's go ahead and process another feature, audience_status.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'This variable has two options: ''Spilled'' and ''Upright''.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: We did already apply one hot coding, so now it is time to transform this categorical
    variable into a numerical one by using ordinal encoding.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Because each category illustrates an order of magnitude, we will transform these
    into numerical values by using ordinal encoding.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: As we did earlier, first let’s find the unique audience status.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, let’s create a bar plot and print out the values on top of bars.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here is the full code.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is the output.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/7e9fdc231fab564dd748169fd0638186.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Okay, now it is time to do ordinal coding by using replace method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Then let’s view the first five rows by using the head() method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here is the output.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/e20360e4b3699fc6afde10925e6093b4.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Since our target variable, tomatometer_status, have three distinct categories,
    'Rotten', 'Fresh', and 'Certified-Fresh', these categories also represent an order
    of magnitude.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: That’s why we again will do ordinal encoding to transform these categorical
    variables into numerical variables.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here is the output.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/d2cede449752b53b6ee15418bfde4d03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: After changing categorial to numerical, it is now time to combine the two data
    frames. We'll use Pandas pd.concat() function for this, and the dropna() method
    to remove rows with missing values across all columns.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Following that, we'll use the head function to look at the freshly formed DataFrame.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here is the output.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/c48639fb47bbf970ccaabadfff2f9d25.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
- en: Great, now let’s inspect our numerical variables by using describe method.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here is the output.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/d6642d87f1dad3996c8d6a1d87997727.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
- en: Now let’s check the length of our DataFrame by using len method.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here is the output.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/9ffc2bbb2c40a97b36d34cc8cd90a771.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
- en: After removing rows with missing values and doing the transformation for building
    machine learning, now our data frame has 17017 rows.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now analyze the distribution of our target variables.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: As we keep constantly doing since the beginning, we will draw a bar graph and
    put the values at the top of the bar.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here is the output.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/9995c293b9ef09be88c2a22fa59776df.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
- en: Our dataset contains 7375 'Rotten,' 6475 'Fresh,' and 3167 'Certified-Fresh'
    films, indicating a class imbalance issue.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: The problem will be addressed at a later time.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: For the time being, let’s split our dataset into testing and training sets using
    an 80% to 20% split.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here is the output.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/cf106f5eb38848b0de88509d8f86a48c.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
- en: Decision Tree Classifier
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will look at the Decision Tree Classifier, a machine learning
    technique that is commonly used for classification problems and sometimes for
    [regression](https://www.stratascratch.com/blog/overview-of-machine-learning-algorithms-regression/?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The classifier works by dividing data points into branches, each of which has
    an inner node (which includes a set of conditions) and a leaf node (which has
    the predicted value).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Following these branches and considering the conditions (True or False), data
    points are separated into the proper categories. The process is seen below.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/52392afd9add822e7801f26a62f64ddb.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: When we apply a Decision Tree Classifier, we can alter multiple hyperparameters,
    like the maximum depth of the tree and the maximum number of leaf nodes.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: For our first attempt, we will limit the number of leaf nodes to three in order
    to make the tree simple and understandable.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: To begin, we will create a Decision Tree Classifier with a maximum of three
    leaf nodes. This classifier will then be trained on our training data and used
    to generate predictions on the test data. Finally, we will examine the accuracy,
    precision, and recall metrics to assess the performance of our limited Decision
    Tree Classifier.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s implement the Decision Tree algorithm with sci-kit learn step by step.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s define a Decision Tree Classifier object with a maximum of three
    leaf nodes, using the DecisionTreeClassifier() function from the scikit-learn
    library.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: The random_state parameter is used to ensure that the same results are produced
    each time the code is run.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Then it is time to train the Decision Tree Classifier on the training data (X_train
    and y_train), using the .fit() method.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Next, we make predictions on the test data(X_test) using the trained classifier
    with the predict method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here we print the accuracy score and classification report of the predicted
    values compared to the actual target values of the test data. We use the accuracy_score()
    and classification_report() functions from the scikit-learn library.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Finally, we will plot the confusion matrix to visualize the performance of the
    Decision Tree Classifier on the test data. We use the plot_confusion_matrix()
    function from the scikit-learn library.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here is the code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here is the output.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/71d216300278a3de9a1c1c7c4ce567bc.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: It can be clearly seen from the output, our Decision Tree works well, especially
    taking into consideration that we limited it to three leaf nodes. One of the advantages
    of having a simple classifier is that the decision tree can be visualized and
    understandable.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Now, to understand how the decision tree makes decisions, let’s visualize the
    decision tree classifier by using the plot_tree method from sklearn.tree.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here is the output.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/22869d2d8fcb0fdfd7540eae9d6307b6.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
- en: Now let’s analyze this decision tree, and find out how it carries out the decision-making
    process.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, the algorithm uses the 'tomatometer_rating' feature as the primary
    determinant of each test data point's classification.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: If the 'tomatometer_rating' is less than or equal to 59.5, the data point is
    assigned a label of 0 ('Rotten'). Otherwise, the classifier progresses to the
    next branch.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the second branch, the classifier uses the 'tomatometer_fresh_critics_count'
    feature to classify the remaining data points.
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the value of this feature is less than or equal to 35.5, the data point is
    labeled as 1 ('Fresh').
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If not, it is labeled as 2 ('Certified-Fresh').
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This decision-making process closely aligns with the rules and criteria that
    Rotten Tomatoes use to assign movie statuses.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: According to the Rotten Tomatoes website, movies are classified as
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: ‘Fresh' if their tomatometer_rating is 60% or higher.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '''Rotten'' if it falls below 60%.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our Decision Tree Classifier follows a similar logic, classifying movies as
    'Rotten' if their tomatometer_rating is below 59.5 and 'Fresh' otherwise.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: However, when distinguishing between 'Fresh' and 'Certified-Fresh' movies, the
    classifier must consider several more features.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'According to Rotten Tomatoes, films must meet specific criteria to be classified
    as ''Certified-Fresh'', such as:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Having a consistent Tomatometer score of at least 75%
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At least five reviews from top critics.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minimum of 80 reviews for wide-release films.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our limited Decision Tree model only takes into account the number of reviews
    from top critics to differentiate between 'Fresh' and 'Certified-Fresh' movies.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Now, we understand the logic behind the Decision Tree. So to increase its performance,
    let’s follow the same steps but this time, we will not add the max-leaf nodes
    argument.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Here is the step-by-step explanation of our code. This time I won't expand the
    code too much as we did before.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Define the decision tree classifier.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Train the classifier on the training data.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Predict the test data with a trained tree classifier.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Print the accuracy and classification report.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Plot confusion matrix.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Great now, let’s see them together.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Here's the whole code.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here is the output.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/59551a1c7379f5b49c358f22a8ba7773.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: The accuracy, precision, and recall values of our classifier have increased
    as a result of removing the maximum leaf nodes limitation. The classifier now
    reaches 99% accuracy, up from 94% previously.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: This displays that when we allow our classifier to pick the optimal number of
    leaf nodes on its own, it performs better.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Although the current result appears to be outstanding, more tuning to reach
    even better accuracy is still possible. In the next part, we'll look into this
    option.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Random Forest Classifier
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Random Forest is an ensemble of Decision Tree Classifiers that have been combined
    into a single algorithm. It uses a bagging strategy to train each Decision Tree,
    which includes randomly picking training data points. Each tree is trained on
    a separate subset of the training data as a result of this technique.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The bagging method has become known for using a bootstrap methodology to sample
    data points, allowing the same data point to be picked for several Decision Trees.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/8d92b624046c6ea940b8819d9547404a.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: By using scikit learn, it is really easy to apply a Random forest classifier.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Using Scikit-learn to set up the [Random Forest algorithm](https://www.stratascratch.com/blog/decision-tree-and-random-forest-algorithm-explained/?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes)
    is an easy process.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: The algorithm's performance, like the performance of the Decision Tree Classifier,
    may be increased through changing hyperparameter values such as the number of
    Decision Tree Classifiers, maximum leaf nodes, and maximum tree depth.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: We will use default options here first.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see the code step-by-step again.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s instantiate a Random Forest Classifier object using the RandomForestClassifier()
    function from the scikit-learn library, with a random_state parameter set to 2
    for reproducibility.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Then, train the Random Forest Classifier on the training data (X_train and y_train),
    using the .fit() method.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Next, use the trained classifier to make predictions on the test data (X_test),
    using the .predict() method.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Then, print the accuracy score and classification report of the predicted values
    compared to the actual target values of the test data.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: We use the accuracy_score() and classification_report() functions from the scikit-learn
    library again.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Finally, let’s plot a confusion matrix to visualize the performance of the Random
    Forest Classifier on the test data. We use the plot_confusion_matrix() function
    from the scikit-learn library.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Here is the whole code.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Here is the output.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/060d5686be6ad07d748f462fcfa37337.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
- en: The accuracy and confusion matrix results show that the Random Forest algorithm
    outperforms the Decision Tree Classifier. This shows the advantage of ensemble
    approaches such as Random Forest over individual [classification algorithms](https://www.stratascratch.com/blog/overview-of-machine-learning-algorithms-classification/?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes).
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, tree-based machine learning methods allow us to identify the significance
    of each feature once the model has been trained. For this reason, Scikit-learn
    provides the feature_importances_ function.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，基于树的方法允许我们在模型训练后识别每个特征的重要性。因此，Scikit-learn提供了feature_importances_函数。
- en: Great, once again, let’s see the code step by step to understand it.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，再次让我们一步步查看代码以理解它。
- en: First, the feature_importances_ attribute of the Random Forest Classifier object
    is used to obtain the importance score of each feature in the dataset.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，使用Random Forest Classifier对象的feature_importances_属性来获取数据集中每个特征的重要性分数。
- en: The importance score indicates how much each feature contributes to the prediction
    performance of the model.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 重要性分数表示每个特征对模型预测性能的贡献程度。
- en: '[PRE35]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Next, the feature importances are printed out in descending order of importance,
    along with their corresponding feature names.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，特征重要性按重要性降序打印出来，以及对应的特征名称。
- en: '[PRE36]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Then to visualize features from the most important to least important, let’s
    use argsort() method from the numpy.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了从最重要到最不重要的特征进行可视化，让我们使用numpy中的argsort()方法。
- en: '[PRE37]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Finally, a horizontal bar chart is created to visualize the feature importances,
    with features ranked from most to least important on the y-axis and the corresponding
    importance scores on the x-axis.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建一个水平条形图来可视化特征重要性，y轴上从最重要到最不重要排列特征，x轴上显示对应的重要性分数。
- en: This chart allows us to easily identify the most important features in the dataset
    and to determine which features have the greatest impact on the model's performance.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表让我们可以轻松识别数据集中最重要的特征，并确定哪些特征对模型性能的影响最大。
- en: '[PRE38]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Here is the whole code.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的代码。
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Here is the output.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/c3065a1fd4ff864dabcf536e0cf9eede.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学项目：烂番茄电影评分预测：第一种方法](../Images/c3065a1fd4ff864dabcf536e0cf9eede.png)'
- en: By seeing this graph, it is clear that NR, PG-13, R, and runtime did not consider
    important by the model for predicting unseen data points. In the next section,
    whether let’s see addressing this issue can increase our model's performance or
    not.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个图中可以看出，模型在预测未见数据点时没有考虑NR、PG-13、R和runtime这些特征。在下一部分，我们将看看解决这个问题是否能提高模型的性能。
- en: Random Forest Classifier with Feature Selection
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机森林分类器与特征选择
- en: Here is the code.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: In the last section, we discovered that some of our features were considered
    less significant by our Random forest model, in making predictions.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一部分，我们发现一些特征被我们的随机森林模型认为在预测中不太重要。
- en: As a result, to enhance the model’s performance, let’s exclude these less relevant
    features including NR, runtime, PG-13, R, PG, G, and NC17.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了提升模型的性能，让我们排除这些不太相关的特征，包括NR、runtime、PG-13、R、PG、G和NC17。
- en: In the following code, we will get the feature importance first, then we will
    split to train and test set, but inside the code block we dropped these less significant
    features. Then we will print out the train and test set size.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将首先获取特征重要性，然后将数据集拆分为训练集和测试集，但在代码块内部我们去除了这些不太重要的特征。然后我们将打印出训练集和测试集的大小。
- en: Here is the code.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。
- en: '[PRE40]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Here is the output.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/ef5a3e2489296672855aa3bffc3c20ed.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学项目：烂番茄电影评分预测：第一种方法](../Images/ef5a3e2489296672855aa3bffc3c20ed.png)'
- en: Great, since we dropped these less significant features, let’s see whether our
    performance increased or not.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，由于我们去除了这些不太重要的特征，让我们看看性能是否有所提升。
- en: Because we did this too many times, I quickly explain the following codes.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们做了太多次这个，所以我快速解释一下以下代码。
- en: In the following code, we first initialize a random forest classifier and then
    train the random forest on the training data.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们首先初始化一个随机森林分类器，然后在训练数据上训练随机森林。
- en: '[PRE41]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Then we calculate the accuracy score and classification report by using test
    data and print them out.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用测试数据计算准确性分数和分类报告并打印出来。
- en: '[PRE42]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Finally, we plot the confusion matrix.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们绘制混淆矩阵。
- en: '[PRE43]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here is the whole code.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的代码。
- en: '[PRE44]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Here is the output.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出。
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/61a3a53b741f51ca254241f03236c745.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学项目：烂番茄电影评分预测：第一种方法](../Images/61a3a53b741f51ca254241f03236c745.png)'
- en: It looks like our new approach works quite well.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来我们新的方法效果相当好。
- en: After doing feature selection, accuracy has increased to 99.1 %.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Our model's false positive and false negative rates have also lowered marginally
    when compared to the prior model.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: This indicates that having more characteristics does not always imply a better
    model. Some insignificant characteristics may create noise which might be the
    reason for lowering the model's prediction accuracy.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Now since our model’s performance has increased that far, let’s discover other
    methods to check if we can increase more.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: Weighted Random Forest Classifier with Feature Selection
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first section, we realized that our features were a little imbalanced.
    We have three different values, Rotten' (represented by 0), 'Fresh' (represented
    by 1), and 'Certified-Fresh' (represented by 2).
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s see the distribution of our features.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Here's the code for visualizing the label distribution.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Here is the output.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/9995c293b9ef09be88c2a22fa59776df.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
- en: It is clear that the amount of data with the ‘Certified Fresh’ feature is much
    less than the others.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: To solve the issue of data imbalance, we can use approaches such as the SMOTE
    algorithm to oversample the minority class or provide class weight information
    to the model during the training phase.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Here we will use the second approach.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: To compute class weight, we will use the compute_class_weight() function from
    the scikit-learn library.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Inside this function, the class_weight parameter is set to 'balanced' to account
    for imbalanced classes, and the classes parameter is set to the unique values
    in the tomatometer_status column of df_feature.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: The y parameter is set to the values of the tomatometer_status column in df_feature.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: Then, the dictionary is created to map the class weights to their respective
    indices.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: This is done by converting the class weight list to a dictionary using the dict()
    function and zip() function.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: The range() function is used to generate a sequence of integers corresponding
    to the length of the class weight list, which is then used as the keys for the
    dictionary.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Finally, let’s see our dictionary.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Here is the whole code.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Here is the output.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/bb3a71287eb61694de069b7487357223.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
- en: Class 0 ('Rotten') has the least weight, while class 2 ('Certified-Fresh') has
    the highest weight.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: When we apply our Random Forest classifier, we can now include this weight information
    as an argument.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: The remaining code is the same as we did earlier many times.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Let's build a new Random Forest model with class weight data, train it on the
    training set, predict the test data, and display the accuracy score and confusion
    matrix.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Here is the output.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: First Approach](../Images/969b2ef7332d5a76357b1a70a7b80632.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: Our model's performance increased when we added class weights, and it now has
    an accuracy of 99.2%.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们添加类别权重时，模型的性能有所提升，现在准确率达到99.2%。
- en: The number of correct predictions for the “Fresh “ label also increased by one.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: “Fresh”标签的正确预测数量也增加了一次。
- en: Using class weights to address the data imbalance problem is a useful method
    since it encourages our model to pay more attention to labels with higher weights
    throughout the training phase.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类别权重来解决数据不平衡问题是一种有效的方法，因为它鼓励我们的模型在训练阶段更加关注权重较高的标签。
- en: '**Link to this data science project:** [https://platform.stratascratch.com/data-projects/rotten-tomatoes-movies-rating-prediction](https://platform.stratascratch.com/data-projects/rotten-tomatoes-movies-rating-prediction?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**该数据科学项目链接：** [https://platform.stratascratch.com/data-projects/rotten-tomatoes-movies-rating-prediction](https://platform.stratascratch.com/data-projects/rotten-tomatoes-movies-rating-prediction?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes)'
- en: '**[Nate Rosidi](https://www.stratascratch.com)** is a data scientist and in
    product strategy. He''s also an adjunct professor teaching analytics, and is the
    founder of [StrataScratch](https://www.stratascratch.com/), a platform helping
    data scientists prepare for their interviews with real interview questions from
    top companies. Connect with him on [Twitter: StrataScratch](https://twitter.com/StrataScratch)
    or [LinkedIn](https://www.linkedin.com/in/nathanrosidi/).'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Nate Rosidi](https://www.stratascratch.com)** 是一名数据科学家，专注于产品策略。他也是一位讲授分析学的兼职教授，并且是[StrataScratch](https://www.stratascratch.com/)，一个帮助数据科学家准备顶级公司面试真实问题的平台的创始人。在[Twitter:
    StrataScratch](https://twitter.com/StrataScratch)或[LinkedIn](https://www.linkedin.com/in/nathanrosidi/)上与他联系。'
- en: More On This Topic
  id: totrans-283
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Data Science Project of Rotten Tomatoes Movie Rating Prediction:…](https://www.kdnuggets.com/2023/07/data-science-project-rotten-tomatoes-movie-rating-prediction-second-approach.html)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[烂番茄电影评分预测数据科学项目：…](https://www.kdnuggets.com/2023/07/data-science-project-rotten-tomatoes-movie-rating-prediction-second-approach.html)'
- en: '[KDnuggets News, July 5: A Rotten Data Science Project • 10 AI…](https://www.kdnuggets.com/2023/n24.html)'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets新闻，7月5日：一个糟糕的数据科学项目 • 10个AI…](https://www.kdnuggets.com/2023/n24.html)'
- en: '[311 Call Centre Performance: Rating Service Levels](https://www.kdnuggets.com/2023/03/boxplot-outlier-311-call-center-performance.html)'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[311呼叫中心绩效：评级服务水平](https://www.kdnuggets.com/2023/03/boxplot-outlier-311-call-center-performance.html)'
- en: '[Multivariate Time-Series Prediction with BQML](https://www.kdnuggets.com/2023/07/multivariate-timeseries-prediction-bqml.html)'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用BQML进行多变量时间序列预测](https://www.kdnuggets.com/2023/07/multivariate-timeseries-prediction-bqml.html)'
- en: '[A Guide On How To Become A Data Scientist (Step By Step Approach)](https://www.kdnuggets.com/2021/05/guide-become-data-scientist.html)'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何逐步成为数据科学家指南](https://www.kdnuggets.com/2021/05/guide-become-data-scientist.html)'
- en: '[Support Vector Machines: An Intuitive Approach](https://www.kdnuggets.com/2022/08/support-vector-machines-intuitive-approach.html)'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[支持向量机：直观的方法](https://www.kdnuggets.com/2022/08/support-vector-machines-intuitive-approach.html)'
