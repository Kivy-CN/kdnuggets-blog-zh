- en: Introduction to Data Visualization Using Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/12/introduction-data-visualization-matplotlib.html](https://www.kdnuggets.com/2022/12/introduction-data-visualization-matplotlib.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/5f3bae23e6bb8870e327a022e594b0e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Numerous organizations collect vast amounts of data for making their business
    decisions. **Data Visualization** is the process of presenting this information
    in form of various charts and graphs. It simplifies complex data making it easier
    to identify patterns, analyze trends and discover actionable insights. **Matplotlib**
    is a multi-platform data visualization library in python. It was initially created
    to emulate MATLAB’s plotting capabilities but is robust and easy to use. Some
    of the pros of Matplotlib are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Easier to customize
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simpler for getting started
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High-quality output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Readily accessible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides good control to various elements of a figure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Matplotlib
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the Matplotlib, run the following command in the terminal for Windows,
    Mac os, and Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'For Jupyter notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For anaconda environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Importing Libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Matplotlib Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two approaches to creating the plots in matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: 1) Functional Approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: They are simple to use but do not allow a very high degree of control. It makes
    use of **py.plot(x,y)** function. We will not be using this anywhere else in the
    tutorial but you should know how it works so let's have a look at one of its examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/3224d824cc68dde2f9b252b939ab1787.png)'
  prefs: []
  type: TYPE_IMG
- en: 2) OOP Approach
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OOP Approach is the recommended way to create the plots. It makes use of creating
    the figure objects and then the axes are added to it. Figure objects are not visible
    unless you add the axes to them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/be077195dd3f8c14a8e01889b8424fd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we draw the axis let us understand its syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Here a,b refers to the position of origin. (0,0) means the bottom left corner
    and c,d sets the width and height of the plot. Both values range from 0 - 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/5ab228762f37982900d167d8f11dca16.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure objects can take in some additional parameters like dpi and figure size.
    Dpi refers to dots per inch and increases the resolution of the figure if it's
    blurry. While figure size controls the size of the figure in inches.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/1bb8204614cdd768c65f416a7d97b4e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also add multiple axes to the figure object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/b68a4a4d6621a4883eece7b778aa93d1.png)'
  prefs: []
  type: TYPE_IMG
- en: We can use the subplots() function to create multiple plots instead of manually
    managing the different axes in the figure object. Let's examine its syntax,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: It returns a tuple containing the figure object along with the numpy array holding
    all the axes objects. We have to specify the number of rows and columns that we
    want in the actual set of axis. Each axes object is returned separately that can
    be accessed independently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/f1be44504eb8baf10b4cf93d76fad54d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Subplots spacing can be manually adjusted by using the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: left =  Left side of the subplots of the figure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: right = Right side of the subplots of the figure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bottom = Bottom of the subplots of the figure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: top = Top of the subplots of the figure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: wspace = Amount of width reserved for space between subplots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hspace = Amount of height reserved for space between subplots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Apply this to the above plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/1457edadc3c3504bfa5c9c54d480f437.png)'
  prefs: []
  type: TYPE_IMG
- en: Customizing Plots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1) Legend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we are creating multiple plots in a figure object, it may become confusing
    to identify which plot is representing what. So, we add the **label= “text”**
    attribute in the **axes.plot()** function and then, later on, call the **axes.legend()**
     function to display the key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: axes.legend() also have an argument loc that decides where to place it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/64703666988b9facc91623c110fc48cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 2) Line Styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Matplotlib gives a lot of customization options. Let's analyze the syntax to
    change the line color, width, and style.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**color:** We can define the color using their names or RGB values or use the
    Matlab type syntax where r means red etc. We can also set the transparency using
    the alpha attribute'
  prefs: []
  type: TYPE_NORMAL
- en: '**linestyle:** Custom styles can also be created but as we are concerned mainly
    with the visualization so simple styles would work for us. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**linewidth:** The default value is 1 but we can change it as per our need.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/ca11dcfaee3d1f0bef81746bb7897a0b.png)'
  prefs: []
  type: TYPE_IMG
- en: 3) Marker Styling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In matplotlib, all the plotted points are called markers. By default, we only
    see the final line but we can set the marker type and its size as per our own
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Markers are of numerous types that are mentioned [here](https://matplotlib.org/stable/api/markers_api.html)
    but we will discuss only the major ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/16d5a0eca0c2ef69a5a92dfb5081b48b.png)'
  prefs: []
  type: TYPE_IMG
- en: Types of Plots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Matplotlib offers a wide variety of special plots because all types of data
    do not require the same format of representation. The choice of the plot depends
    on the problem under analysis. For example, a pie chart can be used if you are
    interested in part to the whole relationship, bar charts for comparing the values
    or groups, scatter plots for observing correspondence between different variables,
    etc. For this tutorial, we will walk through the examples and discuss only the
    5 most frequently used plots. Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 1) Line Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is the simplest form of representing data. They are mostly used to analyze
    the data concerning time and therefore, are also known as the time series plot.
    The upward trend represents the positive correlation between the variables and
    vice versa. It has a wide range of applications from weather forecasting and stock
    market predictions to monitoring daily customers or sales etc.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/bf1029e8f33405f2a38e13deefac2392.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that there is an exponential rise in the population of Asia since
    1980.
  prefs: []
  type: TYPE_NORMAL
- en: 2) Pie Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The pie chart divides the circle into proportional segments that represent the
    part-whole relationship. Each portion combines to a total of 100%. The area of
    the slices is also known as the wedges.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: data = array of values that you want to plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: explode =  separate the wedges of the plot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: labels = string that represents different slices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: colors = fill the wedge with mentioned colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: autopct = label numerical value on wedge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shadow = adds shadows to wedges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/08c8a5d0327f0ba793e49572605ee2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 3) Scatter Plot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Scatter plots also called XY plots are used to observe the relationship between
    the dependent and the independent variables. It plots the individual data points
    for trend analysis. Outlier detection and correlational relationship can be easily
    detected using scatter plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: (x,y) = data positions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: s= size of the marker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: c= sequence of marker colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: marker= marker style
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: alpha= transparency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: linewidth= line width of marker edges
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: edgecolors= color of marker edge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/552a7dd6feb888c87a6dbdf00e95c8be.png)'
  prefs: []
  type: TYPE_IMG
- en: 4) Bar Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A bar chart is used to visualize the categorical data with rectangular bars
    placed vertically or horizontally. The length or height of the bar depending on
    whether it is a column chart or horizontal bar plot represents its numerical value.
    Bar charts are extremely useful when you want to compare certain groups.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: x= categorical variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: height= corresponding numerical values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: width= width of bar chart (Default value is 0.8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bottom= initial point for the base of the bar (Default value is 0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: align= alignment of the category name (Default value is center)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note:** color, edgecolor, and linewidth can also be customized.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/a68c3b5474b2789a61e094eaaf3960d7.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also stack the categories by adjusting the bottom attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/a73709d24be49e8876110d533d82b74b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also stack the categories by adjusting the bottom attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/dd0dd32576ee7f82d149d26caf0a63bb.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also plot multiple bars by playing with the thickness and position of
    the bars.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/f9ab079ea878665d6e54fd2a29c4d0a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 5) Histogram
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many people often confuse it with the bar chart due to its resemblance but it
    is different in terms of the information it represents. It organizes the group
    of data points into ranges known as bins plotted across the X-axis while Y-axis
    contains the information regarding the frequency. Unlike a bar chart, it is used
    to only represent numerical data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: bins = if int then equal-width bins else depends on the sequence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: cumulative = last bin will give total data points (Based on cumulative frequency)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bottom = position of the bin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: range = To cut the data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: histtype= bar,barstacked, step,stepfilled (Default= bar)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: rwidth= relative width of bins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: stacked= Multiple data are stacked on top of each other if True
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'data = np.random.normal(140, 10,100) # Generating height of 100 people'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: bins = 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/6a58dd5813a19d10aee4f1da2133c099.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Data Visualization Using Matplotlib](../Images/cfc90b1e8829bac9b968c6264efc103e.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you enjoyed reading the article and that you are now capable enough to
    perform different visualizations using Matplotlib. Please feel free to share your
    thoughts or feedback in the comment section. Here is the link to [Matplotlib Documentation](https://matplotlib.org/stable/index.html),
    if you are interested to dig even deeper.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1)** is an aspiring
    software developer with a keen interest in data science and applications of AI
    in medicine. Kanwal was selected as the Google Generation Scholar 2022 for the
    APAC region. Kanwal loves to share technical knowledge by writing articles on
    trending topics, and is passionate about improving the representation of women
    in tech industry.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Python Matplotlib Cheat Sheets](https://www.kdnuggets.com/2023/01/python-matplotlib-cheat-sheets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating Visuals with Matplotlib and Seaborn](https://www.kdnuggets.com/creating-visuals-with-matplotlib-and-seaborn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 38 Python Libraries for Data Science, Data Visualization &…](https://www.kdnuggets.com/2020/11/top-python-libraries-data-science-data-visualization-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News 22:n16, Apr 20: Top YouTube Channels for Learning…](https://www.kdnuggets.com/2022/n16.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plotting and Data Visualization for Data Science](https://www.kdnuggets.com/2022/06/plotting-data-visualization-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL for Data Visualization: How to Prepare Data for Charts and Graphs](https://www.kdnuggets.com/sql-for-data-visualization-how-to-prepare-data-for-charts-and-graphs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
