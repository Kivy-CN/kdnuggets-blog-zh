- en: How to Manage Multiple Inheritance in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何管理 Python 中的多重继承
- en: 原文：[https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html](https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html](https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html)
- en: '![How to Manage Multiple Inheritance in Python](../Images/113c4ec2bfab26d5c9db691de1e5d6ba.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何管理 Python 中的多重继承](../Images/113c4ec2bfab26d5c9db691de1e5d6ba.png)'
- en: Photo by [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/python-code?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    在 [Unsplash](https://unsplash.com/s/photos/python-code?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供
- en: High-level [object-oriented programming languages](/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
    such as C# and Java do not support multiple inheritance. For a good reason too.
    It prevents ambiguation and facilitates strong typing and encapsulation. This
    ultimately results in cleaner code and less confusing class/object model structures.
    However, multiple inheritance allows for more flexible design patterns.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 高级 [面向对象编程语言](/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
    如 C# 和 Java 不支持多重继承。这也是有原因的。它避免了模糊性，促进了强类型和封装。这最终导致了更清晰的代码和更少令人困惑的类/对象模型结构。然而，多重继承允许更多灵活的设计模式。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It can also be very convenient, allowing programmers to write less code and
    push to production quicker. Nevertheless, when you're working with large, complicated
    applications (especially ones that pertain to machine learning), multiple inheritance
    can be difficult to manage and maintain. In this guide, we'll learn how to use
    multiple inheritance and make it sustainable.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以非常方便，让程序员编写更少的代码，更快地推向生产。然而，当你处理大型、复杂的应用程序（特别是与机器学习相关的应用程序）时，多重继承可能会很难管理和维护。在本指南中，我们将学习如何使用多重继承并使其可持续。
- en: Multiple Inheritance in Python
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的多重继承
- en: 'Much like C++, classes in Python can be derived from multiple classes (instead
    of just one). The deriving class inherits all the parent classes'' features (variables
    and methods/functions). In actuality, defining a class with multiple inheritances
    is really no different from defining one with single inheritance. Here is an example
    to help illustrate this fact:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 与 C++ 类似，Python 中的类可以从多个类派生（而不仅仅是一个）。派生类继承所有父类的特性（变量和方法/函数）。实际上，定义一个具有多重继承的类与定义一个具有单一继承的类没有什么不同。以下是一个示例来帮助说明这一点：
- en: '**Single Inheritance**'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**单一继承**'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Multiple Inheritance**'
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**多重继承**'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Since the Child class is derived from two classes, it inherits features from
    both classes. Of course, you can inherit from more than two classes. Theoretically,
    there is no limit to the number of classes you can use to construct a child class.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 由于子类从两个类派生，它继承了这两个类的特性。当然，你可以从多个类继承。从理论上讲，构建子类时可以使用的类数没有限制。
- en: Multi-level Inheritance
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多级继承
- en: As with most object-oriented programming languages, [Python features multi-level
    inheritance](https://www.educba.com/multilevel-inheritance-in-python/). If your
    child class is derived from a class that inherits its features from another class,
    it will inherit all features from both classes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数面向对象编程语言一样，[Python 具有多级继承](https://www.educba.com/multilevel-inheritance-in-python/)。如果你的子类是从一个继承了另一个类特性的类派生的，它将继承两个类的所有特性。
- en: '![How to Manage Multiple Inheritance in Python](../Images/23d1cbf53e3b8b7ffe9b841e11e26732.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![如何管理 Python 中的多重继承](../Images/23d1cbf53e3b8b7ffe9b841e11e26732.png)'
- en: Diagram 1
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1
- en: As you can see from the above diagram, the class lowest on the class hierarchy
    inherits all the functions/methods and variables from the two classes above it.
    Combined with multiple inheritance, multi-level inheritance can offer developers
    flexible design options. They can also increase code reusability. However, they
    can also make class structures more complicated.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图示可以看出，类层次结构中最低的类继承了两个上层类的所有函数/方法和变量。结合多重继承，多层继承可以为开发者提供灵活的设计选项。它们还可以增加代码的重用性。然而，它们也可能使类结构变得更复杂。
- en: For instance, if you're using a feature (method or variable) with an identical
    name and structure to a method in a superclass or base class, which method will
    be called first from the subclass? Your class hierarchy may have functions and
    variables with the same names and signatures. How does Python handle this?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你使用一个与超类或基类中的方法具有相同名称和结构的特性（方法或变量），那么从子类中将首先调用哪个方法？你的类层次结构中可能有相同名称和签名的函数和变量。Python
    是如何处理这种情况的？
- en: Method Resolution Order
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法解析顺序
- en: Again, as with most OO programming languages, all classes are derived from a
    singular class. In Python, [this is known](https://www.tutorialspoint.com/python/python_classes_objects.htm)
    as the object class. Thus, by default, every class you create is a child/deriving/subclass
    of the Object class. When we're trying to understand the call order of methods
    and variables in Python, you must always remember this information when trying
    to map out the method call order of your program.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，与大多数面向对象（OO）编程语言一样，所有类都派生自一个单一的类。在 Python 中，[这被称为](https://www.tutorialspoint.com/python/python_classes_objects.htm)对象类。因此，默认情况下，你创建的每一个类都是
    Object 类的子类/派生类/子类。在尝试理解 Python 中方法和变量的调用顺序时，你必须始终记住这些信息，以便绘制程序的方法调用顺序图。
- en: 'Again because Python features multiple and multi-level inheritance, it requires
    a system to resolve inheritance conflicts where the same property has different
    definitions in multiple base/superclasses. The best way to understand this is
    by looking at a coding example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 特性包括多重和多层继承，它需要一个系统来解决继承冲突，其中相同的属性在多个基类/超类中具有不同的定义。理解这一点的最佳方式是查看一个编码示例：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Class A inherits from the Object class (as all classes in Python do). Class
    B uses Class A as a base class. It has no features of its own. However, it does
    inherit the num class object attribute from class A (as well as other features
    from the object class).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 类 A 继承自 Object 类（正如 Python 中的所有类一样）。类 B 使用类 A 作为基类。它没有自己的特性。然而，它确实从类 A 继承了 num
    类对象属性（以及来自对象类的其他特性）。
- en: 'Class C is also a subclass of Class A and defines a class object attribute
    that shares a name with one defined in Class A. Class D inherits from D and C
    but defines no attributes of its own. The relationship looks a lot like this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 类 C 也是类 A 的子类，并定义了一个类对象属性，该属性与类 A 中定义的一个属性同名。类 D 从 D 和 C 继承，但没有定义自己的属性。关系看起来像这样：
- en: '![How to Manage Multiple Inheritance in Python](../Images/0ca1e3b46acfce3a54a96978ba6ffa86.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何管理 Python 中的多重继承](../Images/0ca1e3b46acfce3a54a96978ba6ffa86.png)'
- en: Diagram 2
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2
- en: The above diagram illustrates what is [referred to as the diamond problem](https://phioro.com/jeweler/how-diamond-problem-is-handled-in-python.html)
    (or deadly diamond of death) in computing. Method resolution order (MRO) is a
    rule to solve this problem. It uses MRO to organize the method and attribute calls.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的图示说明了[所谓的钻石问题](https://phioro.com/jeweler/how-diamond-problem-is-handled-in-python.html)（或致命的钻石问题）。方法解析顺序（MRO）是一种解决这个问题的规则。它使用
    MRO 来组织方法和属性的调用。
- en: '*Note: Diagram 2 isn’t a strict dependency chart. Rather, it illustrates the
    flow of inheritance.*'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：图 2 不是严格的依赖图。它展示了继承的流程。*'
- en: Let's add a method that references the num attribute inherited by the D class.
    This method should be called outside all of the classes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个引用 D 类继承的 num 属性的方法。这个方法应该在所有类之外被调用。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If we run it along with our previous code, it should return the number 1 as
    our output. You may be able to tell that it is the value of the num attribute
    in Class C. But why would it return that specific attribute and value?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其与之前的代码一起运行，它应该返回数字 1 作为输出。你可能会发现它是类 C 中 num 属性的值。但为什么会返回这个特定的属性和值呢？
- en: 'MRO conducts a property search starting from the current class before moving
    to the parent classes. If there are multiple parent classes, MRO will search them
    from left to right. So in our example the search will be conducted as follows:
    D -> B -> C -> A -> object class.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: MRO 从当前类开始进行属性搜索，然后移动到父类。如果有多个父类，MRO 将从左到右进行搜索。因此，在我们的示例中，搜索将按照以下顺序进行：D -> B
    -> C -> A -> object 类。
- en: While it would be helpful to meticulously construct a dependency graph or class
    diagram as you would a [business plan](https://www.waveapps.com/blog/entrepreneurship/importance-of-a-business-plan),
    it's unnecessary. You can simply use Python’s built-in *mro()* method to find
    the resolution order.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然像构建[商业计划](https://www.waveapps.com/blog/entrepreneurship/importance-of-a-business-plan)那样详细构建一个依赖图或类图会很有帮助，但这并非必要。你可以简单地使用
    Python 内置的*mro()*方法来查找解析顺序。
- en: 'If we run the mro() method on the D class and print out the output (i.e. print(D.mro())),
    the console should display these results:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对 D 类运行 mro() 方法并打印输出（即 print(D.mro())），控制台应显示以下结果：
- en: '`[<class ''__main__.D''>, <class ''__main__.B''>, <class ''__main__.C''>, <class
    ''__main__.A''>, <class ''object''>]`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`[<class ''__main__.D''>, <class ''__main__.B''>, <class ''__main__.C''>, <class
    ''__main__.A''>, <class ''object''>]`'
- en: 'Once again, it can be translated as: D -> B -> C -> A -> object class. Nevertheless,
    this is easy to understand for simple diamond problems such as the one above.
    However, what if you get:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 再次翻译为：D -> B -> C -> A -> object 类。然而，对于如上所述的简单钻石问题，这很容易理解。然而，如果你得到：
- en: '![How to Manage Multiple Inheritance in Python](../Images/5a13f2b6f70969e01118ee4cbea21812.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![如何管理 Python 中的多重继承](../Images/5a13f2b6f70969e01118ee4cbea21812.png)'
- en: 'Diagram 3 (Source: [Wikimedia Commons (CC) license](https://upload.wikimedia.org/wikipedia/commons/4/47/C3_linearization_example.svg))'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3（来源：[维基媒体公用领域 (CC) 许可](https://upload.wikimedia.org/wikipedia/commons/4/47/C3_linearization_example.svg)）
- en: MRO uses an algorithm called Depth First Search to resolve all method and attribute
    calls. The latest version of Python revised how MRO works. It's uncertain if Python's
    classpath rules and MRO will be refined in future versions too. Therefore, many
    developers (including) myself advise that you stay away from constructing programs
    or algorithms with too much multiple and multi-level inheritance.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: MRO 使用称为深度优先搜索的算法来解析所有方法和属性调用。Python 的最新版本修订了 MRO 的工作方式。目前还不确定 Python 的类路径规则和
    MRO 是否会在未来的版本中得到完善。因此，许多开发者（包括我自己）建议你避免构建过多的多重和多层次继承的程序或算法。
- en: If you're writing code that has a dependency structure similar to the diagram
    above, it can be argued that you've written [bad code](/2019/02/4-reasons-machine-learning-code-probably-bad.html).
    Essentially, the examples in this guide hardly had any real functional code between
    the classes. Yet, the structures were still confusing. Now, imagine if you defined
    methods and attributes with identical structures and began calling them...
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写的代码具有类似于上述图示的依赖结构，可以认为你写了[坏代码](/2019/02/4-reasons-machine-learning-code-probably-bad.html)。实际上，这个指南中的示例几乎没有类之间的真实功能代码。然而，这些结构仍然令人困惑。现在，假设你定义了具有相同结构的方法和属性并开始调用它们……
- en: Conclusion
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: While MRO exists and every Python developer should understand it, your code
    should not be structured like Diagram 3 is. However, as a developer (especially
    one working with machine learning), you're bound to run into class structures
    with complicated dependencies. Using the *mro()* method should help you debug,
    untangle and understand code that you may not have written.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 MRO 存在并且每个 Python 开发者都应该理解它，但你的代码不应该像图 3 那样结构化。然而，作为开发者（特别是从事机器学习的开发者），你很可能会遇到具有复杂依赖关系的类结构。使用*mro()*方法应有助于你调试、解开和理解你可能没有编写的代码。
- en: Python's main advantage over other OO programming languages is its flexibility
    and freedom. However, its fluidity can be seen as a disadvantage too. There is
    too much room for error and inefficient code. Thus, programmers, especially those
    working with machine learning and deep learning, should learn and apply the most
    [optimal design patterns](/2020/11/deep-learning-design-patterns.html). Notwithstanding,
    to be safe, you may elect to avoid using multiple inheritance in your code altogether.
    However, if you decide to implement it, do it mindfully and sparingly.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Python 相对于其他面向对象编程语言的主要优势在于其灵活性和自由度。然而，这种流动性也可能被视为一个劣势。错误和低效代码的空间过大。因此，程序员，特别是那些从事机器学习和深度学习的程序员，应学习和应用最[优化的设计模式](/2020/11/deep-learning-design-patterns.html)。尽管如此，为了安全起见，你可以选择完全避免在代码中使用多重继承。然而，如果你决定实现它，请谨慎且节俭地使用。
- en: '**[Nahla Davies](http://nahlawrites.com/)** is a software developer and tech
    writer. Before devoting her work full time to technical writing, she managed —
    among other intriguing things — to serve as a lead programmer at an Inc. 5,000
    experiential branding organization whose clients include Samsung, Time Warner,
    Netflix, and Sony.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Nahla Davies](http://nahlawrites.com/)** 是一位软件开发者和技术写作专家。在全职投入技术写作之前，她曾担任一家
    Inc. 5000 体验品牌组织的首席程序员，该组织的客户包括三星、时代华纳、Netflix 和索尼。'
- en: More On This Topic
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Too Many Python Versions to Manage? Pyenv to the Rescue](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[管理过多的 Python 版本？Pyenv 来拯救你](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue)'
- en: '[Be prepared to manage the threat with an MS in Cybersecurity from…](https://www.kdnuggets.com/2022/07/baypath-prepared-manage-threat-ms-cybersecurity.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备好通过…的网络安全硕士学位来管理威胁](https://www.kdnuggets.com/2022/07/baypath-prepared-manage-threat-ms-cybersecurity.html)'
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化和管理机器学习生命周期的前 10 个 MLOps 工具](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
- en: '[Be prepared to manage the threat with an MS in Cybersecurity from…](https://www.kdnuggets.com/2022/12/baypath-prepared-manage-threat-ms-cybersecurity.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备好通过…的网络安全硕士学位来管理威胁](https://www.kdnuggets.com/2022/12/baypath-prepared-manage-threat-ms-cybersecurity.html)'
- en: '[How to Manage Files and Directories in Bash](https://www.kdnuggets.com/how-to-manage-files-and-directories-in-bash)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Bash 中管理文件和目录](https://www.kdnuggets.com/how-to-manage-files-and-directories-in-bash)'
- en: '[How to Manage Your Complex IT Landscape with AIOps](https://www.kdnuggets.com/2022/05/manage-complex-landscape-aiops.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何通过 AIOps 管理复杂的 IT 生态系统](https://www.kdnuggets.com/2022/05/manage-complex-landscape-aiops.html)'
