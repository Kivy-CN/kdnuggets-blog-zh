- en: Introduction to Binary Classification with PyCaret
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyCaret 的二分类介绍
- en: 原文：[https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Moez Ali](https://www.linkedin.com/in/profile-moez/)，PyCaret 创始人及作者**'
- en: '![](../Images/48f8e698fa3c51848935be2eaccf13c0.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48f8e698fa3c51848935be2eaccf13c0.png)'
- en: Photo by [Mike U](https://unsplash.com/@roguewild?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Mike U](https://unsplash.com/@roguewild?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 1.0 Introduction
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.0 介绍
- en: '[PyCaret](https://www.pycaret.org/) is an open-source, low-code machine learning
    library in Python that automates machine learning workflows. It is an end-to-end
    machine learning and model management tool that speeds up the experiment cycle
    exponentially and makes you more productive.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyCaret](https://www.pycaret.org/) 是一个开源的低代码机器学习库，旨在自动化机器学习工作流。它是一个端到端的机器学习和模型管理工具，能显著加快实验周期，提高生产力。'
- en: In comparison with the other open-source machine learning libraries, PyCaret
    is an alternate low-code library that can be used to replace hundreds of lines
    of code with few lines only. This makes experiments exponentially fast and efficient.
    PyCaret is essentially a Python wrapper around several machine learning libraries
    and frameworks such as scikit-learn, XGBoost, LightGBM, CatBoost, spaCy, Optuna,
    Hyperopt, Ray, and a few more.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 相较于其他开源机器学习库，PyCaret 是一个替代的低代码库，可以用少量代码替代数百行代码。这使得实验变得极快且高效。PyCaret 实质上是围绕多个机器学习库和框架（如
    scikit-learn、XGBoost、LightGBM、CatBoost、spaCy、Optuna、Hyperopt、Ray 等）构建的 Python
    封装库。
- en: The design and simplicity of PyCaret are inspired by the emerging role of citizen
    data scientists, a term first used by Gartner. Citizen Data Scientists are power
    users who can perform both simple and moderately sophisticated analytical tasks
    that would previously have required more technical expertise.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 的设计和简洁性受到了公民数据科学家新兴角色的启发，这一术语最初由 Gartner 提出。公民数据科学家是那些可以执行简单和中等复杂度分析任务的高级用户，这些任务以前需要更多的技术专长。
- en: To learn more about PyCaret, you can check the official [website](https://www.pycaret.org/) or [GitHub](https://www.github.com/pycaret/pycaret).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 PyCaret 的信息，可以查看官方 [网站](https://www.pycaret.org/) 或 [GitHub](https://www.github.com/pycaret/pycaret)。
- en: 2.0 Tutorial Objective
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.0 教程目标
- en: 'In this tutorial we will learn:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习：
- en: '**Getting Data:** How to import data from the PyCaret repository'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取数据：** 如何从 PyCaret 库中导入数据'
- en: '**Setting up Environment:** How to set up an experiment in PyCaret and get
    started with building classification models'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境设置：** 如何在 PyCaret 中设置实验并开始构建分类模型'
- en: '**Create Model:** How to create a model, perform stratified cross-validation
    and evaluate classification metrics'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建模型：** 如何创建模型，进行分层交叉验证并评估分类指标'
- en: '**Tune Model:** How to automatically tune the hyper-parameters of a classification
    model'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整模型：** 如何自动调整分类模型的超参数'
- en: '**Plot Model:** How to analyze model performance using various plots'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绘图模型：** 如何使用各种图表分析模型性能'
- en: '**Finalize Model:** How to finalize the best model at the end of the experiment'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定模型：** 如何在实验结束时确定最佳模型'
- en: '**Predict Model:** How to make predictions on unseen data'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预测模型：** 如何对未见数据进行预测'
- en: '**Save / Load Model:** How to save/load a model for future use'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保存/加载模型：** 如何保存/加载模型以备将来使用'
- en: 3.0 Installing PyCaret
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3.0 安装 PyCaret
- en: Installation is easy and will only take a few minutes. PyCaret’s default installation
    from pip only installs hard dependencies as listed in the [requirements.txt](https://github.com/pycaret/pycaret/blob/master/requirements.txt) file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 安装很简单，只需几分钟。PyCaret 从 pip 的默认安装仅安装`requirements.txt`文件中列出的硬依赖项。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install the full version:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装完整版本：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 4.0 What is Binary Classification?
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4.0 什么是二分类？
- en: 'Binary classification is a supervised machine learning technique where the
    goal is to predict categorical class labels which are discrete and unordered such
    as Pass/Fail, Positive/Negative, Default/Not-Default, etc. A few real-world use
    cases for classification are listed below:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 二分类是一种监督式机器学习技术，其目标是预测离散且无序的类别标签，如通过/失败、正面/负面、违约/未违约等。以下是一些分类的实际应用场景：
- en: Medical testing to determine if a patient has a certain disease or not — the
    classification property is the presence of the disease.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 医疗测试以确定患者是否患有某种疾病——分类属性是疾病的存在。
- en: A “pass or fail” test method or quality control in factories, i.e. deciding
    if a specification has or has not been met — a go/no-go classification.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种“通过或不通过”的测试方法或工厂质量控制，即决定一个规范是否满足——一种“通过/不通过”分类。
- en: Information retrieval, namely deciding whether a page or an article should be
    in the result set of a search or not — the classification property is the relevance
    of the article or the usefulness to the user.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信息检索，即决定某个页面或文章是否应该出现在搜索结果集中——分类属性是文章的相关性或对用户的有用性。
- en: 5.0 Overview of the Classification Module in PyCaret
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5.0 PyCaret 分类模块概述
- en: PyCaret’s [classification module](https://pycaret.readthedocs.io/en/latest/api/classification.html) (`pycaret.classification`)
    is a supervised machine learning module that is used for classifying the elements
    into a binary group based on various techniques and algorithms. Some common use
    cases of classification problems include predicting customer default (yes or no),
    customer churn (customer will leave or stay), disease found (positive or negative).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 的 [分类模块](https://pycaret.readthedocs.io/en/latest/api/classification.html)（`pycaret.classification`）是一个监督式机器学习模块，用于基于各种技术和算法将元素分类到二进制组中。一些常见的分类问题使用场景包括预测客户违约（是或否）、客户流失（客户会离开还是留下）、疾病发现（阳性或阴性）。
- en: The PyCaret classification module can be used for Binary or Multi-class classification
    problems. It has over 18 algorithms and 14 plots to analyze the performance of
    models. Be it hyper-parameter tuning, ensembling, or advanced techniques like
    stacking, PyCaret’s classification module has it all.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 的分类模块可以用于二分类或多分类问题。它包含超过 18 种算法和 14 种图表，用于分析模型的性能。不论是超参数调整、集成，还是像堆叠这样的高级技术，PyCaret
    的分类模块应有尽有。
- en: 6.0 Dataset for the Tutorial
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.0 教程数据集
- en: 'For this tutorial, we will use a dataset from UCI called [**Default of Credit
    Card Clients Dataset**](https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients).
    This dataset contains information on default payments, demographic factors, credit
    data, payment history, and billing statements of credit card clients in Taiwan
    from April 2005 to September 2005\. There are 24,000 samples and 25 features.
    Short descriptions of each column are as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将使用来自 UCI 的数据集，称为 [**信用卡客户违约数据集**](https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients)。该数据集包含有关违约支付、人口统计因素、信用数据、支付历史和信用卡客户账单的信
    息，数据时间范围从 2005 年 4 月到 2005 年 9 月，共有 24,000 个样本和 25 个特征。每一列的简短描述如下：
- en: '**ID:** ID of each client'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID：** 每个客户的 ID'
- en: '**LIMIT_BAL:** Amount of given credit in NT dollars (includes individual and
    family/supplementary credit)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信用额度：** 以新台币为单位的信用额度（包括个人和家庭/附加信用）'
- en: '**SEX:** Gender (1=male, 2=female)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性别：** 性别（1=男性，2=女性）'
- en: '**EDUCATION:** (1=graduate school, 2=university, 3=high school, 4=others, 5=unknown,
    6=unknown)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**教育背景：** （1=研究生院，2=大学，3=高中，4=其他，5=未知，6=未知）'
- en: '**MARRIAGE:** Marital status (1=married, 2=single, 3=others)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**婚姻状况：** 婚姻状况（1=已婚，2=单身，3=其他）'
- en: '**AGE:** Age in years'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**年龄：** 年龄（以年为单位）'
- en: '**PAY_0 to PAY_6:** Repayment status by n months ago (PAY_0 = last month …
    PAY_6 = 6 months ago) (Labels: -1=pay duly, 1=payment delay for one month, 2=payment
    delay for two months, … 8=payment delay for eight months, 9=payment delay for
    nine months and above)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PAY_0 到 PAY_6：** 过去 n 个月的偿还状态（PAY_0 = 上个月 … PAY_6 = 6 个月前）（标签：-1=按时支付，1=延迟一个月付款，2=延迟两个月付款，…
    8=延迟八个月付款，9=延迟九个月及以上）'
- en: '**BILL_AMT1 to BILL_AMT6:** Amount of bill statement by n months ago ( BILL_AMT1
    = last_month .. BILL_AMT6 = 6 months ago)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**BILL_AMT1 到 BILL_AMT6：** 过去 n 个月的账单金额（BILL_AMT1 = 上个月 .. BILL_AMT6 = 6 个月前）'
- en: '**PAY_AMT1 to PAY_AMT6:** Amount of payment by n months ago ( BILL_AMT1 = last_month
    .. BILL_AMT6 = 6 months ago)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PAY_AMT1 到 PAY_AMT6：** 过去 n 个月的支付金额（BILL_AMT1 = 上个月 .. BILL_AMT6 = 6 个月前）'
- en: '**default:** Default payment (1=yes, 0=no) `Target Column`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认值：** 默认支付（1=是，0=否） `Target Column`'
- en: 'Dataset Acknowledgement:'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据集致谢：
- en: 'Lichman, M. (2013). UCI Machine Learning Repository. Irvine, CA: University
    of California, School of Information and Computer Science.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Lichman, M. (2013). UCI 机器学习库。加利福尼亚州欧文：加州大学信息与计算机科学学院。
- en: 7.0 Getting the Data
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7.0 获取数据
- en: You can download the data from the original source [**found here**](https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients) and
    load it using pandas [**(learn how)**](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html) or
    you can use PyCaret’s data repository to load the data using the `get_data()` function
    (This will require an internet connection).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从原始来源 [**找到这里**](https://archive.ics.uci.edu/ml/datasets/default+of+credit+card+clients)
    下载数据，并使用 pandas [**（了解如何）**](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.read_csv.html)
    加载，或者你可以使用 PyCaret 的数据库，通过 `get_data()` 函数加载数据（这需要互联网连接）。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![png](../Images/15c6708db0c28339c5fa0fff910992c8.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/15c6708db0c28339c5fa0fff910992c8.png)'
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In order to demonstrate the use of the `predict_model` function on unseen data,
    a sample of 1200 records (~5%) has been withheld from the original dataset to
    be used for predictions at the end. This should not be confused with a train-test-split,
    as this particular split is performed to simulate a real-life scenario. Another
    way to think about this is that these 1200 customers are not available at the
    time of training of machine learning models.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 `predict_model` 函数在未见数据上的使用，从原始数据集中保留了 1200 条记录（约 5%）以便在最后进行预测。这不应与训练-测试-分割混淆，因为这种特定的分割是为了模拟实际场景。另一种理解方式是，这
    1200 位客户在机器学习模型训练时并不可用。
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 8.0 Setting up Environment in PyCaret
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 8.0 在 PyCaret 中设置环境
- en: 'The `setup` function in PyCaret initializes the environment and creates the
    transformation pipeline for modeling and deployment. `setup` must be called before
    executing any other function in pycaret. It takes two mandatory parameters: a
    pandas dataframe and the name of the target column. All other parameters are optional
    can be used to customize the preprocessing pipeline.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 中的 `setup` 函数初始化环境并创建用于建模和部署的转换管道。`setup` 必须在执行任何其他 pycaret 函数之前调用。它需要两个强制参数：一个
    pandas 数据框和目标列的名称。所有其他参数都是可选的，可以用来定制预处理管道。
- en: When `setup` is executed, PyCaret's inference algorithm will automatically infer
    the data types for all features based on certain properties. The data type should
    be inferred correctly but this is not always the case. To handle this, PyCaret
    displays a prompt, asking for data types confirmation, once you execute the `setup`.
    You can press enter if all data types are correct or type `quit` to exit the setup.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `setup` 执行时，PyCaret 的推断算法将根据某些属性自动推断所有特征的数据类型。数据类型应该被正确推断，但这并非总是如此。为了解决这个问题，PyCaret
    会在执行 `setup` 后显示一个提示，要求确认数据类型。如果所有数据类型正确，你可以按 Enter 键，或输入 `quit` 退出设置。
- en: Ensuring that the data types are correct is really important in PyCaret as it
    automatically performs multiple type-specific preprocessing tasks which are imperative
    for machine learning models.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 确保数据类型正确在 PyCaret 中非常重要，因为它会自动执行多种特定类型的预处理任务，这对于机器学习模型至关重要。
- en: Alternatively, you can also use `numeric_features` and `categorical_features` parameters
    in the `setup` to pre-define the data types.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你还可以在 `setup` 中使用 `numeric_features` 和 `categorical_features` 参数来预定义数据类型。
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![png](../Images/f5680fa7ac99aa4cf1de46adb02b05af.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/f5680fa7ac99aa4cf1de46adb02b05af.png)'
- en: 'Once the setup has been successfully executed it displays the information grid
    which contains some important information about the experiment. Most of the information
    is related to the pre-processing pipeline which is constructed when `setup` is
    executed. The majority of these features are out of scope for this tutorial, however,
    a few important things to note are:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置成功执行，它会显示包含实验重要信息的信息网格。大部分信息与在执行`setup`时构建的预处理管道相关。大多数功能超出了本教程的范围，但需要注意一些重要的事项：
- en: '**session_id:** A pseudo-random number distributed as a seed in all functions
    for later reproducibility. If no `session_id` is passed, a random number is automatically
    generated that is distributed to all functions. In this experiment, the `session_id` is
    set as `123` for later reproducibility.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**session_id：** 作为种子分配到所有函数中的伪随机数，以便后续可重复性。如果未传递`session_id`，会自动生成一个随机数分配给所有函数。在本实验中，`session_id`
    被设置为 `123` 以便后续可重复性。'
- en: '**Target Type:** Binary or Multiclass. The Target type is automatically detected
    and shown. There is no difference in how the experiment is performed for Binary
    or Multiclass problems. All functionalities are identical.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标类型：** 二分类或多分类。目标类型会自动检测并显示。对于二分类或多分类问题，实验的执行没有区别。所有功能是相同的。'
- en: '**Label Encoded:** When the Target variable is of type string (i.e. ‘Yes’ or
    ‘No’) instead of 1 or 0, it automatically encodes the label into 1 and 0 and displays
    the mapping (0: No, 1: Yes) for reference. In this experiment, no label encoding
    is required since the target variable is of type numeric.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签编码：** 当目标变量是字符串类型（即 ‘Yes’ 或 ‘No’）时，而不是 1 或 0，它会自动将标签编码为 1 和 0，并显示映射（0:
    No, 1: Yes）以供参考。在这个实验中，由于目标变量是数字类型，因此不需要标签编码。'
- en: '**Original Data:** Displays the original shape of the dataset. In this experiment
    (22800, 24) means 22,800 samples and 24 features including the target column.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始数据：** 显示数据集的原始形状。在这个实验中，(22800, 24) 意味着 22,800 个样本和 24 个特征，包括目标列。'
- en: '**Missing Values:** When there are missing values in the original data this
    will show as True. For this experiment, there are no missing values in the dataset.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺失值：** 当原始数据中存在缺失值时，这将显示为 True。在本实验中，数据集中没有缺失值。'
- en: '**Numeric Features:** The number of features inferred as numeric. In this dataset,
    14 out of 24 features are inferred as numeric.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数值特征：** 推断为数值的特征数量。在这个数据集中，24 个特征中有 14 个被推断为数值特征。'
- en: '**Categorical Features:** The number of features inferred as categorical. In
    this dataset, 9 out of 24 features are inferred as categorical.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类特征：** 推断为分类的特征数量。在这个数据集中，24 个特征中有 9 个被推断为分类特征。'
- en: '**Transformed Train Set:** Displays the shape of the transformed training set.
    Notice that the original shape of (22800, 24) is transformed into (15959, 91)
    for the transformed train set and the number of features has increased to 91 from
    24 due to one-hot-encoding.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变换后的训练集：** 显示了变换后的训练集的形状。注意到原始形状 (22800, 24) 被变换为 (15959, 91)，由于独热编码，特征数量从
    24 增加到 91。'
- en: '**Transformed Test Set:** Displays the shape of the transformed test/hold-out
    set. There are 6841 samples in the test/hold-out set. This split is based on the
    default value of 70/30 that can be changed using the `train_size` parameter in
    the setup.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变换后的测试集：** 显示了变换后的测试/保留集的形状。测试/保留集中有 6841 个样本。这个拆分是基于默认值 70/30，可以通过`train_size`参数在设置中更改。'
- en: Notice how a few tasks that are imperative to perform modeling are automatically
    handled such as missing value imputation (in this case there are no missing values
    in the training data, but we still need imputers for unseen data), categorical
    encoding, etc. Most of the parameters in the `setup` are optional and used for
    customizing the pre-processing pipeline. These parameters are out of scope for
    this tutorial but we will cover them in future tutorials.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些对建模至关重要的任务会被自动处理，如缺失值插补（在这种情况下训练数据中没有缺失值，但我们仍然需要插补器用于未见数据）、分类编码等。`setup`中的大部分参数是可选的，用于自定义预处理管道。这些参数超出了本教程的范围，但我们将在未来的教程中进行讲解。
- en: 9.0 Comparing All Models
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 9.0 比较所有模型
- en: Comparing all models to evaluate performance is the recommended starting point
    for modeling once the setup is completed (unless you exactly know what kind of
    model you need, which is often not the case). This function trains all models
    in the model library and scores them using stratified cross-validation for metric
    evaluation. The output prints a scoring grid that shows average Accuracy, AUC,
    Recall, Precision, F1, Kappa, and MCC across the folds (10 by default) along with
    training times.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 比较所有模型以评估性能是设置完成后建模的推荐起点（除非你确切知道需要什么类型的模型，这种情况往往不多）。此函数训练模型库中的所有模型，并使用分层交叉验证对指标进行评估。输出打印了一个得分网格，显示了折叠（默认10折）中的平均准确度、AUC、召回率、精度、F1、Kappa和MCC，以及训练时间。
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/f55c8b9473ff0d8d18ea4fbad477ffea.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f55c8b9473ff0d8d18ea4fbad477ffea.png)'
- en: The scoring grid printed above highlights the highest performing metric for
    comparison purposes only. The grid by default is sorted using `Accuracy `(highest
    to lowest) which can be changed by passing the `sort` parameter. For example `compare_models(sort
    = 'Recall')` will sort the grid by recall instead of accuracy.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上面打印的得分网格仅用于比较目的，突出显示了表现最好的指标。网格默认按`Accuracy`（从高到低）排序，可以通过传递`sort`参数进行更改。例如，`compare_models(sort
    = 'Recall')`将按召回率而不是准确度对网格进行排序。
- en: If you want to change the fold parameter from the default value of `10` to a
    different value then you can use the `fold` parameter. For example `compare_models(fold
    = 5)` will compare all models on 5 fold cross-validation. Reducing the number
    of folds will improve the training time. By default, `compare_models` return the
    best performing model based on default sort order but can be used to return a
    list of top N models by using `n_select` parameter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将折叠参数从默认值`10`更改为其他值，可以使用`fold`参数。例如，`compare_models(fold = 5)`将比较所有模型在5折交叉验证中的表现。减少折叠数将提高训练时间。默认情况下，`compare_models`根据默认排序顺序返回表现最佳的模型，但也可以通过使用`n_select`参数返回前N个模型的列表。
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 10.0 Create a Model
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.0 创建模型
- en: '`create_model` is the most granular function in PyCaret and is often the foundation
    behind most of the PyCaret functionalities. As the name suggests this function
    trains and evaluates a model using cross-validation that can be set with `fold` parameter.
    The output prints a scoring grid that shows Accuracy, AUC, Recall, Precision,
    F1, Kappa, and MCC by fold.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_model`是PyCaret中最基本的函数，通常是大多数PyCaret功能的基础。顾名思义，这个函数使用可以通过`fold`参数设置的交叉验证来训练和评估模型。输出打印了一个得分网格，显示了按折叠计算的准确度、AUC、召回率、精度、F1、Kappa和MCC。'
- en: For the remaining part of this tutorial, we will work with the below models
    as our candidate models. The selections are for illustration purposes only and
    do not necessarily mean they are the top-performing or ideal for this type of
    data.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程的剩余部分，我们将使用下面的模型作为候选模型。选择仅为示例目的，并不一定意味着它们是最优或适合这种数据的模型。
- en: Decision Tree Classifier (‘dt’)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 决策树分类器（‘dt’）
- en: K Neighbors Classifier (‘knn’)
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: K 近邻分类器（‘knn’）
- en: Random Forest Classifier (‘rf’)
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机森林分类器（‘rf’）
- en: There are 18 classifiers available in the model library of PyCaret. To see a
    list of all classifiers either check the documentation or use `models` function
    to see the library.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret的模型库中提供了18种分类器。要查看所有分类器的列表，可以查看文档或使用`models`函数查看库。
- en: '[PRE8]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/34973a5648847757697f30db20a4cd38.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/34973a5648847757697f30db20a4cd38.png)'
- en: 10.1 Decision Tree Classifier
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.1 决策树分类器
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/0968d4d67efa271f3665869ca1bd65ec.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0968d4d67efa271f3665869ca1bd65ec.png)'
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 10.2 K Neighbors Classifier
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.2 K 近邻分类器
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/c99040f56cd8529088616aa3c46a2897.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c99040f56cd8529088616aa3c46a2897.png)'
- en: 10.3 Random Forest Classifier
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10.3 随机森林分类器
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/54259896a7c5696c43f0c0dbf4fc3cdc.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/54259896a7c5696c43f0c0dbf4fc3cdc.png)'
- en: Notice that the mean score of all models matches with the score printed in `compare_models`.
    This is because the metrics printed in the `compare_models` score grid are the
    average scores across all CV folds. Similar to the`compare_models`, if you want
    to change the fold parameter from the default value of 10 to a different value
    then you can use the `fold` parameter. For Example: `create_model('dt', fold =
    5)` will create a Decision Tree Classifier using 5 fold stratified CV.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有模型的平均得分与`compare_models`中打印的得分一致。这是因为在`compare_models`得分网格中打印的指标是所有CV折叠的平均得分。类似于`compare_models`，如果你想将折叠参数从默认值10更改为其他值，可以使用`fold`参数。例如：`create_model('dt',
    fold = 5)`将使用5折分层交叉验证创建一个决策树分类器。
- en: 11.0 Tune a Model
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.0 调优模型
- en: When a model is created using the `create_model` function it uses the default
    hyperparameters to train the model. In order to tune hyperparameters, the `tune_model` function
    is used. This function automatically tunes the hyperparameters of a model using
    random grid search on a pre-defined search space. The output prints a scoring
    grid that shows Accuracy, AUC, Recall, Precision, F1, Kappa, and MCC by fold for
    the best model. To use the custom search grid, you can pass `custom_grid` parameter
    in the `tune_model` function (see 11.2 KNN tuning below).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`create_model`函数创建模型时，它使用默认的超参数来训练模型。为了调整超参数，使用`tune_model`函数。该函数使用预定义的搜索空间上的随机网格搜索自动调整模型的超参数。输出打印一个评分网格，显示了最佳模型的准确性、AUC、召回率、精确度、F1、Kappa和MCC。要使用自定义搜索网格，可以在`tune_model`函数中传递`custom_grid`参数（请参见下面的11.2
    KNN调优）。
- en: 11.1 Decision Tree Classifier
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.1 决策树分类器
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/74b345f9e28f7da429e4226b8c01ec64.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74b345f9e28f7da429e4226b8c01ec64.png)'
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 11.2 K Neighbors Classifier
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.2 K 最近邻分类器
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/bf1f90c108efa7e4fefe9b04c9e40744.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bf1f90c108efa7e4fefe9b04c9e40744.png)'
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 11.3 Random Forest Classifier
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 11.3 随机森林分类器
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/bc41a57e4365ed095755adfc837fa15c.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc41a57e4365ed095755adfc837fa15c.png)'
- en: By default, `tune_model` optimizes `Accuracy` but this can be changed using `optimize` parameter.
    For example: `tune_model(dt, optimize = 'AUC')` will search for the hyperparameters
    of a Decision Tree Classifier that results in the highest `AUC` instead of `Accuracy`.
    For the purposes of this example, we have used the default metric `Accuracy` only
    for the sake of simplicity. Generally, when the dataset is imbalanced (such as
    the credit dataset we are working with) `Accuracy` is not a good metric for consideration.
    The methodology behind selecting the right metric to evaluate a classifier is
    beyond the scope of this tutorial but if you would like to learn more about it,
    you can [**click here**](https://medium.com/@MohammedS/performance-metrics-for-classification-problems-in-machine-learning-part-i-b085d432082b) to
    read an article on how to choose the right evaluation metric.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`tune_model`优化`Accuracy`，但这可以通过`optimize`参数进行更改。例如：`tune_model(dt, optimize
    = 'AUC')`将寻找使`AUC`最高的决策树分类器的超参数，而不是`Accuracy`。为了简化示例，我们仅使用了默认的`Accuracy`指标。通常，当数据集不平衡（如我们正在使用的信用数据集）时，`Accuracy`不是一个好的评估指标。选择正确的评估指标来评估分类器的方法超出了本教程的范围，但如果你想了解更多，可以[**点击这里**](https://medium.com/@MohammedS/performance-metrics-for-classification-problems-in-machine-learning-part-i-b085d432082b)阅读关于如何选择正确评估指标的文章。
- en: Metrics alone are not the only criteria you should consider when finalizing
    the best model for production. Other factors to consider include training time,
    the standard deviation of kfolds, etc. As you progress through the tutorial series
    we will discuss those factors in detail at the intermediate and expert levels.
    For now, let’s move forward considering the Tuned Random Forest Classifier `tuned_rf`,
    as our best model for the remainder of this tutorial.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 仅依靠指标并不是确定生产中最佳模型的唯一标准。其他需要考虑的因素包括训练时间、k折的标准偏差等。随着你在教程系列中的进展，我们将在中级和高级阶段详细讨论这些因素。现在，让我们继续考虑将调优后的随机森林分类器`tuned_rf`作为本教程剩余部分的最佳模型。
- en: 12.0 Plot a Model
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.0 绘制模型
- en: Before model finalization, the `plot_model` function can be used to analyze
    the performance across different aspects such as AUC, confusion_matrix, decision
    boundary, etc. This function takes a trained model object and returns a plot based
    on the test set.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型最终确定之前，可以使用`plot_model`函数来分析不同方面的性能，例如AUC、混淆矩阵、决策边界等。此函数接受一个训练好的模型对象，并基于测试集返回一个图表。
- en: There are 15 different plots available, please see the `plot_model` documentation
    for the list of available plots.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 提供了15种不同的图表，请参见`plot_model`文档以获取可用图表的列表。
- en: 12.1 AUC Plot
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.1 AUC图
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![png](../Images/260e900d7f7ce14e00835b8521e2e381.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/260e900d7f7ce14e00835b8521e2e381.png)'
- en: 12.2 Precision-Recall Curve
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.2 精确度-召回率曲线
- en: '[PRE19]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![png](../Images/b42330e418d905c9b44d8537032eec66.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/b42330e418d905c9b44d8537032eec66.png)'
- en: 12.3 Feature Importance Plot
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.3 特征重要性图
- en: '[PRE20]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![png](../Images/98cf38d13d31e60982e9a3d7e7ab8583.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/98cf38d13d31e60982e9a3d7e7ab8583.png)'
- en: 12.4 Confusion Matrix
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 12.4 混淆矩阵
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![png](../Images/03e51f3afc86070b952151346c2d1346.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/03e51f3afc86070b952151346c2d1346.png)'
- en: '*Another* way to analyze the performance of models is to use the `evaluate_model()` function
    which displays a user interface for all of the available plots for a given model.
    It internally uses the `plot_model()` function.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '*另一种* 分析模型性能的方法是使用`evaluate_model()`函数，该函数显示了给定模型所有可用绘图的用户界面。它内部使用了`plot_model()`函数。'
- en: '[PRE22]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '![](../Images/c4072017a375237f83ce3b8b5dfce2e7.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4072017a375237f83ce3b8b5dfce2e7.png)'
- en: 13.0 Predict on test / hold-out Sample
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 13.0 在测试/保留样本上预测
- en: Before finalizing the model, it is advisable to perform one final check by predicting
    the test/hold-out set and reviewing the evaluation metrics. If you look at the
    information grid in Section 8 above, you will see that 30% (6,841 samples) of
    the data has been separated out as a test/hold-out sample. All of the evaluation
    metrics we have seen above are cross-validated results based on the training set
    (70%). Now, using our final trained model stored in the `tuned_rf` we will predict
    the test / hold-out sample and evaluate the metrics to see if they are materially
    different than the CV results.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在最终化模型之前，建议通过预测测试/保留集并查看评估指标来进行最后的检查。如果你查看第8节的信息网格，你会看到30%（6,841个样本）的数据已经被分离出来作为测试/保留样本。我们在上面看到的所有评估指标都是基于训练集（70%）的交叉验证结果。现在，使用我们存储在`tuned_rf`中的最终训练模型，我们将预测测试/保留样本并评估指标，以查看它们是否与CV结果有实质性差异。
- en: '[PRE23]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '![](../Images/b75a08012005a33bb198eef510c49c6b.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b75a08012005a33bb198eef510c49c6b.png)'
- en: The accuracy on the test/hold-out set is `**0.8116**` compared to `**0.8203**` achieved
    on the `tuned_rf` CV results (in section 11.3 above). This is not a significant
    difference. If there is a large variation between the test/hold-out and CV results,
    then this would normally indicate over-fitting but could also be due to several
    other factors and would require further investigation. In this case, we will move
    forward with finalizing the model and predicting on unseen data (the 5% that we
    had separated in the beginning and never exposed to PyCaret).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试/保留集上的准确率是`**0.8116**`，相比于在`tuned_rf` CV结果中达到的`**0.8203**`（在第11.3节上）。这并不是一个显著的差异。如果测试/保留集和CV结果之间存在较大差异，这通常表明过拟合，但也可能由于其他几个因素，需要进一步调查。在这种情况下，我们将继续完成模型并对未见数据进行预测（即我们在开始时分离出的5%，并且从未暴露于PyCaret）。
- en: '(TIP: It’s always good to look at the standard deviation of CV results when
    using `create_model`)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: （提示：使用`create_model`时，查看CV结果的标准差总是好的）
- en: 14.0 Finalize Model for Deployment
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 14.0 部署前的模型最终化
- en: Model finalization is the last step in the experiment. A normal machine learning
    workflow in PyCaret starts with `setup`, followed by comparing all models using
    the `compare_models` and shortlisting a few candidate models (based on the metric
    of interest) to perform several modeling techniques such as hyperparameter tuning,
    ensembling, stacking, etc. This workflow will eventually lead you to the best
    model for use in making predictions on new and unseen data. The `finalize_model` function
    fits the model onto the complete dataset including the test/hold-out sample (30%
    in this case). The purpose of this function is to train the final model on the
    complete dataset before it is deployed in production. (This is optional, you may
    or may not use finalize_model).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 模型最终化是实验中的最后一步。PyCaret中的正常机器学习工作流从`setup`开始，随后使用`compare_models`比较所有模型，并根据感兴趣的指标筛选出一些候选模型，以执行多个建模技术，如超参数调优、集成、堆叠等。这一工作流将最终引导你找到最佳模型，以用于对新数据和未见数据进行预测。`finalize_model`函数将模型拟合到包括测试/保留样本在内的完整数据集上（在这种情况下为30%）。该函数的目的是在模型投入生产前在完整数据集上训练最终模型。（这是可选的，你可以选择是否使用finalize_model）。
- en: '[PRE24]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Caution:** One final word of caution. Once the model is finalized, the entire
    dataset including the test/hold-out set is used for training. As such, if the
    model is used for predictions on the hold-out set after `finalize_model` is used,
    the information grid printed will be misleading as you are trying to predict on
    the same data that was used for modeling. In order to demonstrate this point only,
    we will use `final_rf` under `predict_model` to compare the information grid with
    the one above in section 13.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告：** 最后的警告。一旦模型完成，整个数据集，包括测试/保留集，都将用于训练。因此，如果在`finalize_model`之后使用模型对保留集进行预测，打印的信息网格将会误导，因为你尝试在用于建模的相同数据上进行预测。为了仅演示这一点，我们将在`predict_model`下使用`final_rf`来比较信息网格与第13节上面的网格。'
- en: '[PRE25]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/a013e2bd953b01eed34d01815befc639.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a013e2bd953b01eed34d01815befc639.png)'
- en: Notice how the AUC in `final_rf` has increased to `**0.7526**` from `**0.7407**`,
    even though the model is the same. This is because the `final_rf` variable has
    been trained on the complete dataset including the test/hold-out set.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使模型相同，`final_rf`中的 AUC 也从`**0.7407**`提高到了`**0.7526**`。这是因为`final_rf`变量在包含测试/持出集的完整数据集上进行了训练。
- en: 15.0 Predict on unseen data
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 15.0 对未见数据进行预测
- en: The `predict_model` function is also used to predict on the unseen dataset.
    The only difference from section 13 above is that this time we will pass the `data_unseen`.
    It is the variable created at the beginning of this tutorial and contains 5% (1200
    samples) of the original dataset which was never exposed to PyCaret. (see section
    7 for explanation)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`predict_model`函数也用于对未见数据集进行预测。与第 13 节的唯一区别在于这次我们将传递`data_unseen`。这是在本教程开始时创建的变量，包含了原始数据集中从未暴露给
    PyCaret 的 5%（1200 个样本）。（见第 7 节以获取解释）'
- en: '[PRE26]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![png](../Images/9bc7878a2506ae2f4784b4f9100094d2.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/9bc7878a2506ae2f4784b4f9100094d2.png)'
- en: 'The `Label` and `Score` columns are added onto the `data_unseen` set. The label
    is the prediction and the score is the probability of the prediction. Notice that
    predicted results are concatenated to the original dataset while all the transformations
    are automatically performed in the background. You can also check the metrics
    on this since you have an actual target column `default` available. To do that
    we will use `pycaret.utils` module. See the example below:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`Label`和`Score`列已添加到`data_unseen`数据集中。标签是预测结果，分数是预测的概率。请注意，预测结果已附加到原始数据集中，而所有转换都会在后台自动执行。你还可以检查这些指标，因为你有实际的目标列`default`可用。为此，我们将使用`pycaret.utils`模块。请看下面的示例：'
- en: '[PRE27]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 16.0 Saving the model
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 16.0 保存模型
- en: 'We have now finished the experiment by finalizing the `tuned_rf` model which
    is now stored in `final_rf` variable. We have also used the model stored in `final_rf` to
    predict `data_unseen`. This brings us to the end of our experiment, but one question
    is still to be asked: What happens when you have more new data to predict? Do
    you have to go through the entire experiment again? The answer is no, PyCaret''s
    inbuilt function `save_model()` allows you to save the model along with the entire
    transformation pipeline for later use.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在通过将` tuned_rf`模型最终化并存储在`final_rf`变量中来完成实验。我们还使用存储在`final_rf`中的模型对`data_unseen`进行了预测。这标志着我们的实验结束，但仍有一个问题需要询问：如果你有更多新数据需要预测怎么办？是否需要重新进行整个实验？答案是否定的，PyCaret
    的内置函数`save_model()`允许你保存模型以及整个转换管道以供以后使用。
- en: '[PRE28]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 17.0 Loading the saved model
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 17.0 加载已保存的模型
- en: To load a saved model at a future date in the same or an alternative environment,
    we would use PyCaret’s `load_model()` function and then easily apply the saved
    model on new unseen data for prediction.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 要在将来某个日期在相同或其他环境中加载已保存的模型，我们将使用 PyCaret 的`load_model()`函数，然后轻松地将已保存的模型应用于新未见数据进行预测。
- en: '[PRE29]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Once the model is loaded in the environment, you can simply use it to predict
    on any new data using the same `predict_model()` function. Below we have applied
    the loaded model to predict the same `data_unseen` that we used in section 13
    above.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦模型加载到环境中，你可以简单地使用相同的`predict_model()`函数对任何新数据进行预测。下面我们应用加载的模型来预测与第 13 节中相同的`data_unseen`。
- en: '[PRE30]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![png](../Images/9bc7878a2506ae2f4784b4f9100094d2.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![png](../Images/9bc7878a2506ae2f4784b4f9100094d2.png)'
- en: Notice that the results of `unseen_predictions` and `new_prediction` are identical.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`unseen_predictions`和`new_prediction`的结果是相同的。
- en: '[PRE31]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 18.0 Wrap-up / Next Steps?
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 18.0 总结 / 下一步？
- en: This tutorial has covered the entire machine learning pipeline from data ingestion,
    pre-processing, training the model, hyperparameter tuning, prediction, and saving
    the model for later use. We have completed all of these steps in less than 10
    commands which are naturally constructed and very intuitive to remember such as `create_model()`, `tune_model()`, `compare_models()`.
    Re-creating the entire experiment without PyCaret would have taken well over 100
    lines of code in most libraries.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程涵盖了整个机器学习流程，从数据摄取、预处理、训练模型、超参数调优、预测到保存模型以供后续使用。我们在不到 10 个命令中完成了所有这些步骤，这些命令自然构建且非常直观，易于记忆，例如`create_model()`、`tune_model()`、`compare_models()`。如果没有
    PyCaret，重新创建整个实验在大多数库中将需要超过 100 行代码。
- en: We have only covered the basics of `pycaret.classification`. In the future tutorials
    we will go deeper into advanced pre-processing, ensembling, generalized stacking,
    and other techniques that allow you to fully customize your machine learning pipeline
    and are must know for any data scientist.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只介绍了`pycaret.classification`的基础知识。在未来的教程中，我们将深入探讨高级预处理、集成方法、广义堆叠以及其他技术，这些技术能够让你完全自定义你的机器学习管道，是任何数据科学家必须掌握的。
- en: Thank you for reading [????](https://emojipedia.org/folded-hands/)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读 [????](https://emojipedia.org/folded-hands/)
- en: Important Links
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要链接
- en: ⭐ [Tutorials](https://github.com/pycaret/pycaret/tree/master/tutorials) New
    to PyCaret? Check out our official notebooks!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ⭐ [教程](https://github.com/pycaret/pycaret/tree/master/tutorials) 刚接触 PyCaret？查看我们的官方笔记本！
- en: ???? [Example Notebooks](https://github.com/pycaret/pycaret/tree/master/examples) created
    by the community.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ???? [示例笔记本](https://github.com/pycaret/pycaret/tree/master/examples) 由社区创建。
- en: ???? [Blog](https://github.com/pycaret/pycaret/tree/master/resources) Tutorials
    and articles by contributors.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ???? [博客](https://github.com/pycaret/pycaret/tree/master/resources) 贡献者的教程和文章。
- en: ???? [Documentation](https://pycaret.readthedocs.io/en/latest/index.html) The
    detailed API docs of PyCaret
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ???? [文档](https://pycaret.readthedocs.io/en/latest/index.html) PyCaret 的详细 API
    文档
- en: ???? [Video Tutorials](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g) Our
    video tutorial from various events.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: ???? [视频教程](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g) 我们在各种活动中的视频教程。
- en: ???? [Discussions](https://github.com/pycaret/pycaret/discussions) Have questions?
    Engage with community and contributors.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ???? [讨论](https://github.com/pycaret/pycaret/discussions) 有问题？与社区和贡献者互动。
- en: ????️ [Changelog](https://github.com/pycaret/pycaret/blob/master/CHANGELOG.md) Changes
    and version history.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: ????️ [更新日志](https://github.com/pycaret/pycaret/blob/master/CHANGELOG.md) 变更和版本历史。
- en: ???? [Roadmap](https://github.com/pycaret/pycaret/issues/1756) PyCaret’s software
    and community development plan.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ???? [路线图](https://github.com/pycaret/pycaret/issues/1756) PyCaret 的软件和社区发展计划。
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** writes about
    PyCaret and its use-cases in the real world, If you would like to be notified
    automatically, you can follow Moez on [Medium](https://medium.com/@moez-62905),
    [LinkedIn](https://www.linkedin.com/in/profile-moez/), and [Twitter](https://twitter.com/moezpycaretorg1).'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** 撰写关于 PyCaret
    及其在现实世界中的应用。如果你想自动获取通知，可以关注 Moez 在 [Medium](https://medium.com/@moez-62905)、[LinkedIn](https://www.linkedin.com/in/profile-moez/)
    和 [Twitter](https://twitter.com/moezpycaretorg1)。'
- en: '[Original](https://towardsdatascience.com/introduction-to-binary-classification-with-pycaret-a37b3e89ad8d).
    Reposted with permission.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/introduction-to-binary-classification-with-pycaret-a37b3e89ad8d).
    经许可转载。'
- en: '**Related:**'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[A Beginner’s Guide to End to End Machine Learning](/2021/12/beginner-guide-end-end-machine-learning.html)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新手指南：端到端的机器学习](/2021/12/beginner-guide-end-end-machine-learning.html)'
- en: '[PyCaret 2.3.5 Is Here! Learn What’s New](/2021/11/pycaret-here-learn-new.html)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyCaret 2.3.5 已发布！了解新特性](/2021/11/pycaret-here-learn-new.html)'
- en: '[Using PyCaret’s New Time Series Module](/2021/12/pycaret-new-time-series-module.html)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 的新时间序列模块](/2021/12/pycaret-new-time-series-module.html)'
- en: More On This Topic
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 中使用 PyCaret 的聚类入门](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
- en: '[Multilabel Classification: An Introduction with Python''s Scikit-Learn](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多标签分类：使用 Python 的 Scikit-Learn 入门](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 3.0：开源、低代码的 Python 机器学习](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
- en: '[Getting Started with PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyCaret 入门](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多分类问题的性能评估指标](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
- en: '[Fine-Tuning BERT for Tweets Classification with HuggingFace](https://www.kdnuggets.com/2022/01/finetuning-bert-tweets-classification-ft-hugging-face.html)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 HuggingFace 微调 BERT 进行推文分类](https://www.kdnuggets.com/2022/01/finetuning-bert-tweets-classification-ft-hugging-face.html)'
