- en: What is Machine Learning on Code?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是代码上的机器学习？
- en: 原文：[https://www.kdnuggets.com/2019/11/machine-learning-code-mloncode.html](https://www.kdnuggets.com/2019/11/machine-learning-code-mloncode.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/11/machine-learning-code-mloncode.html](https://www.kdnuggets.com/2019/11/machine-learning-code-mloncode.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Vadim Markovtsev](https://www.linkedin.com/in/vmarkovtsev/), Lead Machine
    Learning Engineer at [source{d}](https://sourced.tech/)**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Vadim Markovtsev](https://www.linkedin.com/in/vmarkovtsev/)，[source{d}](https://sourced.tech/)
    的首席机器学习工程师**'
- en: As IT organizations grow, so does the size of their codebases and the complexity
    of their ever-changing developer toolchain. Engineering leaders have very limited
    visibility into the state of their codebases, software development processes,
    and teams. By applying modern data science and machine learning techniques to
    software development, large enterprises have the opportunity to significantly
    improve their software delivery performance and engineering effectiveness.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 IT 组织的发展，其代码库的规模和不断变化的开发工具链的复杂性也在增加。工程领导者对其代码库、软件开发过程和团队的状态了解非常有限。通过将现代数据科学和机器学习技术应用于软件开发，大型企业有机会显著提升其软件交付性能和工程效率。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In the last few years, a number of large companies such as Google, Microsoft,
    Facebook and smaller companies such as Jetbrains and source{d} have been collaborating
    with academic researchers to lay the foundation for Machine Learning on Code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年里，包括谷歌、微软、脸书等大型公司以及 Jetbrains 和 source{d} 等小型公司在内，已与学术研究人员合作，为机器学习在代码上的应用奠定基础。
- en: What is Machine Learning on Code?
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是代码上的机器学习？
- en: Machine Learning on Code (MLonCode) is a new interdisciplinary field of research
    related to Natural Language Processing, Programming Language Structure, and Social
    and History analysis such contributions graphs and commit time series. MLonCode
    aims to learn from large scale source code datasets in order to automatically
    perform software engineering tasks such as assisted code reviews, code deduplication,
    software expertise assessment, etc.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码上的机器学习（MLonCode）是一个新兴的跨学科研究领域，涉及自然语言处理、编程语言结构以及社会和历史分析（如贡献图谱和提交时间序列）。MLonCode
    旨在从大规模源代码数据集中学习，以自动执行软件工程任务，如辅助代码审查、代码去重、软件专业知识评估等。
- en: '![Figure](../Images/50847a8c9480de4781435a9618f8121f.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/50847a8c9480de4781435a9618f8121f.png)'
- en: What is Machine Learning on Source Code?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是源代码上的机器学习？
- en: Why is MLonCode hard?
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么 MLonCode 很难？
- en: Some MLonCode problems require zero error rate, such as those related to code
    generation; automatic program repair is one particular example. A tiny, single
    misprediction may lead to the whole program's compilation failure.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 MLonCode 问题要求零错误率，比如代码生成相关的问题；自动程序修复就是一个具体例子。一个微小的错误预测可能会导致整个程序编译失败。
- en: In some other cases, the error rate must be low enough. An ideal model should
    make as few mistakes as that the signal-to-noise ratio for the users - software
    developers - stays bearable and trustworthy. Thus the model can be used the same
    way as traditional static code analysis tools. A great example of this is best
    practices mining.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，错误率必须足够低。理想的模型应该尽可能少地出错，以确保用户 - 软件开发人员 - 的信号噪声比保持在可承受和可信赖的水平。因此，该模型可以像传统静态代码分析工具一样使用。一个很好的例子是最佳实践挖掘。
- en: Finally, the vast majority of MLonCode problems are unsupervised or at most
    weakly supervised. It can be very costly to manually label datasets, so researchers
    typically have to develop correlated heuristics. For example, there are numerous
    similarity grouping tasks, such as showing similar developers or helping to compile
    teams based on areas of expertise. Our own experience in this topic lies in [mining
    code formatting rules and applying them to fix faults](https://github.com/src-d/style-analyzer),
    similarly to what linters do but completely unsupervised. There is a related academic
    competition to predict formatting problems called [CodRep](https://github.com/KTH/codrep-2019).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，绝大多数MLonCode问题是无监督的，最多是弱监督的。手动标记数据集可能非常昂贵，因此研究人员通常必须开发相关的启发式方法。例如，有许多相似性分组任务，如展示类似的开发者或根据专业领域帮助编排团队。我们在这个主题上的经验包括[挖掘代码格式规则并应用于修复错误](https://github.com/src-d/style-analyzer)，类似于linters的功能，但完全无监督。还有一个相关的学术竞赛，预测格式问题，称为[CodRep](https://github.com/KTH/codrep-2019)。
- en: MLonCode problems include a variety of data mining tasks that may be trivial
    from the theoretical point of view but still challenging technically due to the
    scale or required attention to the details. Examples are code clone detection
    and similar developer clustering. Solutions of such problems are presented at
    the annual academic conference [Mining Software Repositories](http://www.msrconf.org/).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: MLonCode问题包括多种数据挖掘任务，这些任务在理论上可能很简单，但由于规模或对细节的关注，技术上仍然具有挑战性。例如，代码克隆检测和类似的开发者聚类。这些问题的解决方案在每年的学术会议[Mining
    Software Repositories](http://www.msrconf.org/)上展示。
- en: '![Figure](../Images/ceff6ab1470844a142806db0139039b6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/ceff6ab1470844a142806db0139039b6.png)'
- en: Mining Software Repositories conference logo.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Mining Software Repositories会议的标志。
- en: 'While solving an MLonCode problem, one typically represents source code in
    one of the following ways:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决MLonCode问题时，通常有以下几种方式来表示源代码：
- en: 'A frequency dictionary (weighted bag-of-words, BOW). Examples: identifiers
    inside a function; graphlets in a file; dependencies of a repository. The frequencies
    can be weighted by TF-IDF. This representation is the simplest and the most scalable.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个频率词典（加权的词袋模型，BOW）。例如：函数内的标识符；文件中的图元；库的依赖关系。频率可以通过TF-IDF加权。这个表示是最简单和最具可扩展性的。
- en: '![Figure](../Images/433065b836a4e9db00c8c92273ed618b.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/433065b836a4e9db00c8c92273ed618b.png)'
- en: A sequential token stream (TS), which corresponds to the source code parsing
    sequence. That stream is often augmented with the links to the corresponding Abstract
    Syntax Tree nodes. This representation is friendly to conventional Natural Language
    Processing algorithms, including sequence-to-sequence deep learning models.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个顺序的标记流（TS），对应于源代码的解析序列。该流通常会增强与相应的抽象语法树节点的链接。这个表示对传统的自然语言处理算法友好，包括序列到序列的深度学习模型。
- en: '![Figure](../Images/80d96a8278350c038a87686813e3231c.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/80d96a8278350c038a87686813e3231c.png)'
- en: A tree, which naturally comes out from an Abstract Syntax Tree. We perform various
    transformations after, e.g. irreversible simplification or identifier posterization.
    This is the most powerful representation, and also the most difficult to work
    with. The relevant ML models include various graph embeddings and Gated Graph
    Neural Networks.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个树结构，自然地从抽象语法树中派生出来。我们在进行各种转换后，例如不可逆简化或标识符的海报化。这是最强大的表示方式，也是最难处理的。相关的机器学习模型包括各种图嵌入和门控图神经网络。
- en: '![Figure](../Images/42857597c1d4c649978d72244aaa7415.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/42857597c1d4c649978d72244aaa7415.png)'
- en: 'Many of the approaches to MLonCode problems ground on the so-called Naturalness
    Hypothesis ([Hindle et.al.](https://people.inf.ethz.ch/suz/publications/natural.pdf)):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 许多MLonCode问题的方法基于所谓的自然性假设（[Hindle等](https://people.inf.ethz.ch/suz/publications/natural.pdf)）：
- en: “Programming languages, in theory, are complex, flexible and powerful, but the
    programs that real people actually write are mostly simple and rather repetitive,
    and thus they have usefully predictable statistical properties that can be captured
    in statistical language models and leveraged for software engineering tasks.”
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “理论上，编程语言复杂、灵活且强大，但实际编写的程序大多简单且重复，因此它们具有可预测的统计特性，可以在统计语言模型中捕捉并用于软件工程任务。”
- en: 'This statement justifies the usefulness of Big Code: the more source code is
    analyzed, the stronger the statistical properties emphasized, and the better the
    achieved metrics of a trained machine learning model. The underlying relations
    are the same as in e.g. the current state-of-the-art Natural Language Processing
    models: XLNet, ULMFiT, etc. Likewise, universal MLonCode models can be trained
    and leveraged in downstream tasks.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这一声明证明了大规模代码的有用性：源代码分析越多，强调的统计特性越强，训练出的机器学习模型的指标越好。其基本关系与当前最先进的自然语言处理模型，如 XLNet、ULMFiT
    等相同。同样，通用的 MLonCode 模型也可以在下游任务中进行训练和利用。
- en: There are such big code datasets. The current ultimate source is open source
    repositories on GitHub. There can be technical problems with cloning hundreds
    of thousands of Git repositories, so there are downstream datasets such as [Public
    Git Archive](https://github.com/src-d/datasets/tree/master/PublicGitArchive),
    [GHTorrent](http://ghtorrent.org/), and [Software Heritage Graph](https://zenodo.org/record/2583978#.Xac1fuczb5Y).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 存在这样的大规模代码数据集。目前的终极来源是 GitHub 上的开源仓库。克隆数十万个 Git 仓库可能存在技术问题，因此还存在下游数据集，如 [Public
    Git Archive](https://github.com/src-d/datasets/tree/master/PublicGitArchive)、[GHTorrent](http://ghtorrent.org/)
    和 [Software Heritage Graph](https://zenodo.org/record/2583978#.Xac1fuczb5Y)。
- en: '**Conclusion**'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: As software continues to eat the world, we’re accumulating billions of lines
    of code, millions of applications built from great variety of programming languages,
    frameworks, and infrastructure. Not only can MLonCode help companies streamline
    their codebase and software delivery processes, but it also helps organizations
    better understand and manage their engineering talents. By treating software artifacts
    as data and applying modern data science and machine learning techniques to software
    engineering, organizations have a unique opportunity to gain a competitive edge.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件继续吞噬世界，我们积累了数十亿行代码、由各种编程语言、框架和基础设施构建的数百万个应用程序。MLonCode 不仅可以帮助公司简化其代码库和软件交付流程，还能帮助组织更好地理解和管理其工程人才。通过将软件工件视为数据，并将现代数据科学和机器学习技术应用于软件工程，组织有机会获得竞争优势。
- en: '**Bio: [Vadim Markovtsev](https://www.linkedin.com/in/vmarkovtsev/)** ([**@vadimlearning**](https://twitter.com/vadimlearning))
    is a Google Developer Expert in Machine Learning and a Lead Machine Learning Engineer
    at **[source{d}](https://sourced.tech/)** where he works with "big" and "natural"
    code. His academic background is compiler technologies and system programming.
    He is an open-source zealot and an open data knight. Vadim is one of the creators
    of the historical distributed deep learning platform Veles (https://velesnet.ml)
    while working at Samsung. Afterward, Vadim was responsible for the machine learning
    efforts to fight email spam at Mail.Ru - the largest email service in Russia.
    In the past, Vadim was also a visiting associate professor at Moscow Institute
    of Physics and Technology, teaching about new technologies and conducting ACM-like
    internal coding competitions.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历: [Vadim Markovtsev](https://www.linkedin.com/in/vmarkovtsev/)** ([**@vadimlearning**](https://twitter.com/vadimlearning))
    是谷歌机器学习领域的专家，同时也是**[source{d}](https://sourced.tech/)**的首席机器学习工程师，他在这里处理“大规模”和“自然”的代码。他的学术背景包括编译技术和系统编程。他是一名开源热衷者和开放数据骑士。Vadim
    是历史性分布式深度学习平台 Veles（https://velesnet.ml）的创始人之一，曾在三星工作。此后，Vadim 负责在俄罗斯最大邮箱服务 Mail.Ru
    上的机器学习项目以对抗电子邮件垃圾邮件。过去，Vadim 还曾担任莫斯科物理技术学院的访问副教授，教授新技术并主持类似 ACM 的内部编程竞赛。'
- en: '**Related:**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Object-oriented programming for data scientists: Build your ML estimator](/2019/08/object-oriented-programming-data-scientists-estimator.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[面向数据科学家的面向对象编程：构建你的 ML 估算器](/2019/08/object-oriented-programming-data-scientists-estimator.html)'
- en: '[10 Great Python Resources for Aspiring Data Scientists](/2019/09/10-great-python-resources-aspiring-data-scientists.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10 个适合有志数据科学家的 Python 资源](/2019/09/10-great-python-resources-aspiring-data-scientists.html)'
- en: '[Why is Machine Learning Deployment Hard?](/2019/10/machine-learning-deployment-hard.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么机器学习部署很困难？](/2019/10/machine-learning-deployment-hard.html)'
- en: More On This Topic
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 3.0：Python 中的开源、低代码机器学习](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
- en: '[KDnuggets News, April 27: A Brief Introduction to Papers With Code;…](https://www.kdnuggets.com/2022/n17.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，4 月 27 日：论文与代码简要介绍；…](https://www.kdnuggets.com/2022/n17.html)'
- en: '[Multi-modal deep learning in less than 15 lines of code](https://www.kdnuggets.com/2023/01/predibase-multi-modal-deep-learning-less-15-lines-code.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[不到 15 行代码的多模态深度学习](https://www.kdnuggets.com/2023/01/predibase-multi-modal-deep-learning-less-15-lines-code.html)'
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家管理你的可重用 Python 代码](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[3 Tools to Track and Visualize the Execution of Your Python Code](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[跟踪和可视化你的 Python 代码执行的 3 个工具](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)'
