- en: Using NLP to improve your Resume
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/02/nlp-improve-resume.html](https://www.kdnuggets.com/2021/02/nlp-improve-resume.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [David Moore](https://www.linkedin.com/in/mooredvd/), Specialist in Finance
    Technology implementation**'
  prefs: []
  type: TYPE_NORMAL
- en: Recruiters are using increasingly complicated Software and tools to scan and
    match Resumes to posted job positions and job specifications. If your Resume (CV)
    is generic, or the job specification is vague and/or generic, these tools will
    work against you. AI really is working against your job application, and I am
    not sure you know it or will accept it! But let me demonstrate some techniques
    that can help you **balance up the odds**. Naturally, we will use NLP (Natural
    Language Processing), Python, and some Altair visuals. Are you ready to fight
    back?
  prefs: []
  type: TYPE_NORMAL
- en: Consider that you are interested in a good position that you noticed online.
    How many others would have seen the same job? Have roughly the same experience
    and qualifications as you? How many applicants might have applied, do you think?
    Could it be less than 10 or less than 1,000?
  prefs: []
  type: TYPE_NORMAL
- en: Further, consider that the interview panel might be only 5 strong candidates.
    So how do you ‘weed’ out 995 applications to refine and deliver just 5 strong
    candidates? This is why I say you need to balance up the odds or be thrown out
    with the weeds!
  prefs: []
  type: TYPE_NORMAL
- en: Processing 1,000 Resumes (CV)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I suppose, first off, you could divide up those Resumes into a stack of 3 or
    5\. Print them off and assign them to human readers. Each reader provides one
    selection from their pile. With 5 readers that is a bunch of 200 Resumes — go
    pick the best one or two. Reading those would take a long time and probably only
    serve to yield an answer in the end. We can use Python to read all those Resumes
    in minutes!
  prefs: []
  type: TYPE_NORMAL
- en: Reading the article ‘[How I used NLP (Spacy) to screen Data Science Resume](https://towardsdatascience.com/do-the-keywords-in-your-resume-aptly-represent-what-type-of-data-scientist-you-are-59134105ba0d)’
    here on Medium demonstrates that just two code lines will collect up the file
    names of those 1,000 Resumes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The variable ‘onlyfiles’ is a Python list that contains the file names of all
    those Resumes got using the Python os library. If you study the article, you will
    also see how your resume can be ranked and eliminated almost automatically based
    on keyword analysis. Since we are trying to even up the odds, we need to focus
    on your desired job specification and your current resume. Do they match?
  prefs: []
  type: TYPE_NORMAL
- en: Matching the Resume and Job Description
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To even up the odds, we want to scan a job description, the Resume, and measure
    the match. Ideally, we do it so that the output is useful to tune in the game
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the documents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since it is your Resume, you likely have that in either PDF or DOCX. There are
    Python modules available to read most data formats. Figure 1 demonstrates how
    to read the documents having saved the contents into a text file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/4306a58db78e77c080f98e53e6550bd5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Reading text files from disk and make a text object. Image taken
    by the author from Visual studio Code — Jupyter Notebook'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is always to open the file and read the lines. The following
    step is to convert from a list of strings to a single text, doing some cleaning
    along the way. Figure 1 creates the variables ‘jobContent’, and ‘cvContent’ and
    these represent a string object that includes all the text. The next code snippet
    shows how to read a Word document directly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The variable ‘text_resume’ is a string object that holds all the text from the
    Resume, just like before. You can also use PyPDF2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Suffice it to say that a range of options exists for the practitioner to read
    the documents converting them to a clean treated text. Those documents could be
    extensive, hard to read, and frankly dull. You could start with a summary.
  prefs: []
  type: TYPE_NORMAL
- en: Processing the text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I love Gensim and use it frequently.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We created the variable ‘resume_text’ by reading a Word file. Let’s make a summary
    of the Resume and job posting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Gensim.summarization.summarizer.summarize will create a concise summary for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now you can read an overall summary of the job role and your existing Resume!
    Did you miss anything about the job role that is being highlighted in summary?
    Small nuanced details can help you sell yourself. Does your summarized document
    make sense and bring out your essential qualities?
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps a concise summary alone is not sufficient. Next, let us measure how
    similar your Resume is to a job specification. Figure 2 provides the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/cb8d354f49f7dceacc7834fe7253417c.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2 — code to match two documents and give a similarity score. Image by
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Broadly we make a list of our text objects then create an instance of the sklearn
    CountVectorizer() class. We also import the cosine_similarity metric, which helps
    us measure the similarity of the two documents. ‘**Your resume matches about 69.44%
    of the job description**’. That sounds wonderful, but I won’t get carried away.
    Now you can read a summary of the documents and get a similarity measurement.
    The odds are improving.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we can look at the job description keywords and see which ones are matched
    in the Resume. Did we miss out on a few keywords that could strengthen the match
    towards 100%? Over to spacy now. It’s quite a journey so far. Gensim, sklearn
    and now spacy! I hope you aren’t dizzy!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We will use the PhraseMatcher feature of spacy to match critical phrases from
    the job description to the Resume. Gensim keywords can help to provide those phrases
    to match. Figure 3 shows how to run the match.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ff153c9f6609ddbf2b7c57810b71f9f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: using Keywords and Phrase matching to cross-reference the documents.
    Image by author.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the snippet, in Figure 3, provides a list of matched keywords. Figure
    4 shows a method to summarize those keyword matches. Using the Counter dictionary
    from Collections.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/474218adfafd8597caabf2ce2dbe0710.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4 — using Collections. Counter to make a count of the keyword hits. Image
    by author.
  prefs: []
  type: TYPE_NORMAL
- en: The term ‘reporting’ is contained in the job description, and the Resume has
    3 hits. What phrases or keywords are in the job posting but aren’t on the CV (resume)?
    Could we add more? I used Pandas to answer this question — you can see the output
    in Figure 5.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/68fe3f1342f36a1d7a62a4f3846a67b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5 — keywords in the job description not mentioned on the Resume. Image
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: If this is true, it is also strange. The match was 69.44% at the document level
    but look at that long list of keywords that aren’t mentioned on the Resume. Figure
    6 shows the keywords that are mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b15b7316b64ba6626de340dfc823ccef.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6 keywords matched using Pandas. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, there are very few keyword matches against the job specification,
    which leads to my scepticism about the cosine similarity measure of 69.44%. Still,
    the odds are improving because we can see keywords in the job specification that
    aren’t in the Resume. Fewer keyword matches mean that you are more likely to wash
    out with the weeds. Looking at the missing keywords, you could go right ahead,
    strengthen the Resume, and re-run the analysis. Just peppering your resume with
    keywords will have a negative consequence, though, and you have to be extremely
    careful with your art. You might get through an initial automated screening, but
    you will be eliminated because of a perceived lack of writing skill. We really
    need to rank phrases and focus on the essential topics or words in the job specification.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at ranked phrases next. For this exercise, I will use my own NLP
    class and some methods I used previously.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using my own class, I recovered the ranked phrases from the job and Resume objects
    we created earlier. The snippet below provides you with the method definition.
    We are now using the rake module to extract ranked_phrases and scores.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Figure 7 provides an illustration of the output of the method call.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/2ad796cdb63bc1024c598298c8be6077.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7 — ranked phrases from the job posting. Image by the author using his
    own code.
  prefs: []
  type: TYPE_NORMAL
- en: ‘project management methodology — project management’ is ranked as 31.2, so
    this is the most crucial topic in the job posting. The critical phrases in the
    Resume can also be printed with a minor variation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Reading the top phrases from both the Resume and the job posting, we can ask
    ourselves is there a match or the degree of the similarity? We can certainly run
    a sequence to find out! The following code creates a cross-reference between the
    ranked phrases on the job posting and from the Resume.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using fuzzy-wuzzy as the match engine. The code also has a
    Levenshtein ratio and jaccard_similarity function. Figure 8 provides an illustration
    of what this can look like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/9fc309d648c7e6e1186f7dec58de93bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8 key words cross-referenced between the job description and the Resume.
  prefs: []
  type: TYPE_NORMAL
- en: The ‘importance’ variable is the ranked phrase score from the resume. The ‘similarity’
    variable is the ratio score from fuzzy-wuzzy. The term ‘project management methodology’
    is ranked 31.2 but cross-referencing the rated Resume phrases only scores 22.5
    on average. Whilst project management is the top priority for the job, the Resume
    scores more decisively on different technical items. You see how AI works against
    your application by doing a similar exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/de97a1c49299de6aae4368ffbb712cdb.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9 term importance versus influence in the Resume. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9 shows another perspective. Working with tokens (words) shows each word’s
    importance in the job description versus the number of hits in the Resume — the
    more occurrences of a specific word in the document, the greater the influence.
    The phrase finance is of low importance to the job description but highly influential
    in the Resume. Is this a Finance guy looking for an IT job? Words can betray you
    with the AI!
  prefs: []
  type: TYPE_NORMAL
- en: I am sure by now that you have the picture. Using NLP tools and libraries can
    help to really understand a job description and measure the relative match. It
    certainly isn’t robust or gospel, but it does tend to even the odds. Your words
    matter, but you cannot pepper keywords in a Resume. You really have to write a
    strong resume and apply for roles that suit you. Text processing and text mining
    is a big topic, and we only scratch the surface of what can be done. I find text
    mining and text-based machine learning models to be deadly accurate. Let’s look
    at some visuals using Altair and then conclude.
  prefs: []
  type: TYPE_NORMAL
- en: Altair visuals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I have been using Altair a lot recently and much more so that Seaborn or Matplotlib.
    The grammar in Altair just clicks with me. I made three visuals to help with the
    discussion — figure 10 shows keyword importance and influence within the Resume.
    Using a colour scale, we can see that words like adoption appear twice in the
    CV but lower priority on the job posting.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/e8dcbd2bf65809e41b4da6a8abb5a7ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10 an Altair visual. Image by the author. Words plotted against importance
    and influence in the Resume.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11 shows the cross-reference of ranked topics found on the job posting
    and those found on the Resume. The most important phrase is ‘project management..’
    but that scores weakly in the ranked terms from the CV.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/eee9c33eb18d02b18eeaa2022fec416d.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11\. A stacked bar chart showing ranked phrases and correlation between
    Resume and job posting.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 12 plots similar words. Finance is used 10 times on the Resume but not
    mentioned at all in the job posting. The word project is mentioned on the Resume(CV)
    and also appears in the job posting.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/9be28d669e055ed510a63abddb2e3d17.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12 analysis of the overlap of keywords between documents. Image by the
    author.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the charts, it seems to me that the Resume and job description are
    not a good match. Very few shared keywords and the ranked phrases look very different.
    This is what gets your resume washed out with the weeds!
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reading this article might seem more like a big-budget “**shoot ’em dead CGI
    Hollywood**” movie. All the big-name actors generally appear in those blockbusters.
    The big NLP libraries had a starring role in this article, and we even had cameo
    appearances by many more, perhaps older and more mature names such as NLTK. We
    used libraries such as Gensim, Spacy, sklearn and demonstrated their use. With
    my own class making a guest appearance, wrapping NLTK, rake, textblob and a heap
    of other modules, all performing and surfacing insights into text analytics,showing
    you how you could be separated from that opportunity to land your dream job.
  prefs: []
  type: TYPE_NORMAL
- en: Landing that dream job requires a clear and unrelenting focus on detail and
    careful preparation of the job application, the CV, and cover letter. Using Natural
    Language processing is not going to change you into the best overall candidate.
    That is up to you! But it can improve your chances of beating the early rounds
    powered by AI.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/fc3c5e44f24d4616960335eb92478811.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Vidar Nordli-Mathisen](https://unsplash.com/@vidarnm?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Every fisher man knows that you need good bait!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [David Moore](https://www.linkedin.com/in/mooredvd/)** ([@CognitiveDave](https://twitter.com/CognitiveDave))
    is a Specialist in Finance Technology implementation. David is interested in developing
    good Enterprise services that empower users, frees them from unnecessary work,
    and surfaces relevant insights.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/ai-is-working-against-your-job-application-bec65d496d22).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Get Data Science Interviews: Finding Jobs, Reaching Gatekeepers, and
    Getting Referrals](/2021/02/data-science-interviews-finding-jobs-reaching-gatekeepers-getting-referrals.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with 5 Essential Natural Language Processing Libraries](/2021/02/getting-started-5-essential-nlp-libraries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 NLP Techniques Every Data Scientist Should Know](/2021/02/6-nlp-techniques.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Must-haves on Your Data Science Resume](https://www.kdnuggets.com/2022/06/musthaves-data-science-resume.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Machine Learning Portfolio Projects to Boost the Resume](https://www.kdnuggets.com/2022/09/7-machine-learning-portfolio-projects-boost-resume.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, September 21: 7 Machine Learning Portfolio Projects…](https://www.kdnuggets.com/2022/n37.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Things Students Are Missing in a Data Science Resume](https://www.kdnuggets.com/7-things-students-are-missing-in-a-data-science-resume)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 AI Portfolio Projects to Boost the Resume](https://www.kdnuggets.com/7-ai-portfolio-projects-to-boost-the-resume)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use ChatGPT to Improve Your Data Science Skills](https://www.kdnuggets.com/2023/03/chatgpt-improve-data-science-skills.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
