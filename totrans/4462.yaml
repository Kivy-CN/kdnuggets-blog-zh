- en: Simplified Mixed Feature Type Preprocessing in Scikit-Learn with Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/06/simplifying-mixed-feature-type-preprocessing-scikit-learn-pipelines.html](https://www.kdnuggets.com/2020/06/simplifying-mixed-feature-type-preprocessing-scikit-learn-pipelines.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s say we want to perform mixed feature type preprocessing in Python. For
    our purposes, let''s say this includes:'
  prefs: []
  type: TYPE_NORMAL
- en: '*scaling* of numeric values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*transforming* of categorical values to one-hot encoded'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*imputing* all missing values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's further say that we want this to be as painless, automated, and integrated
    into our machine learning workflow as possible.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In a Python machine learning ecosystem, previously this could have been accomplished
    with a mix of directly manipulating Pandas DataFrames and/or using Numpy ndarray
    operations, perhaps alongside some Scikit-learn modules, depending on one's preferences.
    While these would still be perfectly acceptable approaches, this can now also
    all be done in Scikit-learn alone. With this approach, it can be almost fully
    automated, and it can be integrated into a Scikit-learn pipeline for seamless
    implementation and easier reproducibility.
  prefs: []
  type: TYPE_NORMAL
- en: So let's see how we can use Scikit-learn to accomplish all of the above with
    ease.
  prefs: []
  type: TYPE_NORMAL
- en: '![Header](../Images/bb9d35929f5f6574d6948a51e40aa9ec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, the imports of everything we will need throughout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For demonstration purposes, let's use the Titanic dataset. I know, I know...
    boring. But it has a mix of numeric and categorical variables, it is easy to understand,
    and most people have some familiarity with it. So let's fetch the data, read it
    in, and have a quick look at it to understand how our feature preprocessing relates
    to our specific data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's see the feature data types, as a refresher.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note the numeric and non-numeric feature types. We will perform our preprocessing
    on these different types seamlessly and in a somewhat automated manner.
  prefs: []
  type: TYPE_NORMAL
- en: Introduced in version 0.20, the [ColumnTransformer](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html)
    is meant to apply Scikit-learn transformers to a single dataset column, be that
    column housed in a Numpy array or Pandas DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: This estimator allows different columns or column subsets of the input to be
    transformed separately and the features generated by each transformer will be
    concatenated to form a single feature space. This is useful for heterogeneous
    or columnar data, to combine several feature extraction mechanisms or transformations
    into a single transformer.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This means that you are able to apply individual transformers to individual
    columns. This could mean that, specific to the Titanic dataset, perhaps we would
    like to scale numeric columns and one-hot encode categorical columns. It might
    also make sense to fill missing numeric values with its column's median value
    and fill in categorical missing values with a constant immediately prior to our
    feature scaling and encoding.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, let's crate a pair of `Pipeline` objects, one each for the numeric
    and categorical transformations described.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now let's add these transformers to a `ColumnTransfer` object. We could either
    specify which columns to apply these transformations to specifically, or we could
    use a column selector to automate this process. Note the line
  prefs: []
  type: TYPE_NORMAL
- en: '`from sklearn.compose import make_column_selector as selector`'
  prefs: []
  type: TYPE_NORMAL
- en: from the imports above. In the code below, we are creating a `num_transformer`
    and a `cat_transformer` and directing them to be applied to all columns of type
    `float64` all columns of type `category`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want this added into a more complete machine learning pipeline which
    includes a classifier, try something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/c49ad275d70e5ba4534bc39f2b5cb01f.png)'
  prefs: []
  type: TYPE_IMG
- en: And off you go. Automated preprocessing in the form of feature scaling, one-hot
    encoding, and missing value imputation as part of your Scikit-learn pipeline with
    minimal effort. I leave the actual transformations and training of the classifier
    (the pipeline execution, if you will) as an exercise for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the easier reproducibility, automated application of preprocessing
    to training and subsequently testing data in the proper manner, and pipeline integration,
    this approach also allows for easy preprocessing tweaking and modification without
    having to redo earlier sections of a task outright.
  prefs: []
  type: TYPE_NORMAL
- en: This won't negate the necessity for thoughtful feature selection, extraction,
    and engineering, but the combination of column transformers and column selectors
    can help easily automate some of the more mundane aspects of your data preprocessing
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: You can [find more here](https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html)
    on the Scikit-learn website.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Notes on Feature Preprocessing: The What, the Why, and the How](/2018/10/notes-feature-preprocessing-what-why-how.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dataset Splitting Best Practices in Python](/2020/05/dataset-splitting-best-practices-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Centroid Initialization Methods for k-means Clustering](/2020/06/centroid-initialization-k-means-clustering.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Type I and Type II Errors: What''s the Difference?](https://www.kdnuggets.com/2022/08/type-type-ii-errors-difference.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[European AI Act: The Simplified Breakdown](https://www.kdnuggets.com/2022/06/european-ai-act-simplified-breakdown.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL Simplified: Crafting Modular and Understandable Queries with CTEs](https://www.kdnuggets.com/sql-simplified-crafting-modular-and-understandable-queries-with-ctes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unify Batch and ML Systems with Feature/Training/Inference Pipelines](https://www.kdnuggets.com/2023/09/hopsworks-unify-batch-ml-systems-feature-training-inference-pipelines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Feature Store Summit 2022: A free conference on Feature Engineering](https://www.kdnuggets.com/2022/10/hopsworks-feature-store-summit-2022-free-conference-feature-engineering.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easy Guide To Data Preprocessing In Python](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
