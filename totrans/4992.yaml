- en: Great Collection of Minimal and Clean Implementations of Machine Learning Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/01/great-collection-clean-machine-learning-algorithms.html](https://www.kdnuggets.com/2017/01/great-collection-clean-machine-learning-algorithms.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Want to implement machine learning algorithms from scratch?
  prefs: []
  type: TYPE_NORMAL
- en: A recent KDnuggets poll asked "[Which methods/algorithms you used in the past
    12 months for an actual Data Science-related application?](/2016/08/new-poll-data-science-methods-algorithms-used.html)"
    with results [found here](/2016/09/poll-algorithms-used-data-scientists.html).
    The results are analyzed by industry employment sector and region, but the main
    take away for the uninitiated is that there are a wide array of algorithms covered.
  prefs: []
  type: TYPE_NORMAL
- en: '![Top 10 algorithms](../Images/f40f1e7b92b0e89bcbbd0b5980c159b2.png)And let''s
    be clear: this is not a complete representation of available [machine learning
    algorithms](https://www.kdnuggets.com/2016/08/10-algorithms-machine-learning-engineers.html),
    but rather a subset of the most-used algorithms (as per our readers). **There
    are lots of machine learning algorithms in existence today.** But with so many
    machine learning [libraries, projects, programs, and other projects](/2016/11/top-20-python-machine-learning-open-source-updated.html)
    out there, covering so many of these algorithms, for a variety of programming
    languages and different platforms and environments, why on Earth would you ever
    want to implement an algorithm from scratch?'
  prefs: []
  type: TYPE_NORMAL
- en: '[Sebastian Raschka](https://twitter.com/rasbt), noted machine learning enthusiast,
    "data scientist" (his quotes, note mine), PhD candidate, and author of [Python
    Machine Learning](https://www.amazon.com/Python-Machine-Learning-Sebastian-Raschka/dp/1783555130)
    has this to say about [implementing machine learning algorithms from scratch](/2016/05/implement-machine-learning-algorithms-scratch.html):'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different reasons why implementing algorithms from scratch
    can be useful:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: it can help us to understand the inner works of an algorithm
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: we could try to implement an algorithm more efficiently
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: we can add new features to an algorithm or experiment with different variations
    of the core idea
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: we circumvent licensing issues (e.g., Linux vs. Unix) or platform restrictions
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: we want to invent new algorithms or implement algorithms no one has implemented/shared
    yet
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: we are not satisfied with the API and/or we want to integrate it more "naturally"
    into an existing software library
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
- en: So, let's say you have a reason to implement machine learning algorithms from
    scratch. Or, alternatively, let's say you simply want a better understanding of
    how machine learning algorithms work (#1), or want to add new features to an algorithm
    (#3), or something else entirely. Locating a collection of independently-implemented
    algorithms, preferably from the same author in order to make the code easier to
    follow from one algorithm to the next, and (especially) implemented in minimal,
    clean code, can be a challenging undertaking.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the [MLAlgorithms Github Repository](https://github.com/rushter/MLAlgorithms),
    by [rushter](https://github.com/rushter), described via the repo README as:'
  prefs: []
  type: TYPE_NORMAL
- en: A collection of minimal and clean implementations of machine learning algorithms.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And that's actually a very good description of the included code. As someone
    who has both implemented numerous machine learning algorithms from scratch --
    having had to look through textbooks, papers, blog post, and code for direction
    -- and investigated algorithm code in order to understand how particular implementations
    worked in order to make modifications, I can say from experience that the code
    in this code is quite easy to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'More from the README:'
  prefs: []
  type: TYPE_NORMAL
- en: This project is targeting people who want to learn internals of ml algorithms
    or implement them from scratch. The code is much easier to follow than the optimized
    libraries and easier to play with. All algorithms are implemented in Python, using
    numpy, scipy and autograd.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'So, important points: algorithms are not optimized, so probably not good for
    production; algorithms implemented in Python with only a few common scientific
    computing libraries. As long as you are good with these points, and are interested
    in learning how to implement algorithms or simply understand them better, this
    code is for you.'
  prefs: []
  type: TYPE_NORMAL
- en: As of writing, rushter has implemented algorithms of various task types, including
    clustering, classification, regression, dimensionality reduction, and a variety
    of deep neural network algorithms. In an attempt to help you coordinate learning
    by implementing, what follows is a partial list of implemented algorithm links
    as well as some supporting material. Note that all credit for these implemented
    algorithms goes to the repo's owner, [rushter](https://github.com/rushter), whose
    Github profile indicates that he is available for hire. I would suspect this repo
    would be a well-received resume.
  prefs: []
  type: TYPE_NORMAL
- en: '**Deep Learning (MLP, CNN, RNN, LSTM)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deep learning](../Images/35cca5c97cb4d4033c23fdadcb5820b8.png)Start here:
    [7 Steps to Understanding Deep Learning](/2016/01/seven-steps-deep-learning.html)'
  prefs: []
  type: TYPE_IMG
- en: '*Go from vague understanding of deep neural networks to knowledgeable practitioner
    in 7 steps!*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s neuralnet module](https://github.com/rushter/MLAlgorithms/tree/master/mla/neuralnet)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear Regression/Logistic Regression**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear regression](../Images/9ad77abc2d73c45236832b6f4edf7c6c.png)Start here:
    [Linear Regression, Least Squares & Matrix Multiplication: A Concise Technical
    Overview](/2016/11/linear-regression-least-squares-matrix-multiplication-concise-technical-overview.html)'
  prefs: []
  type: TYPE_IMG
- en: '*Linear regression is a simple algebraic tool which attempts to find the “best”
    line fitting 2 or more attributes.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s linear_models.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/linear_models.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Random Forests**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Random Forests](../Images/d7df51ea9647f66d47d5ac3397320dda.png)Start here:
    [Random Forest: A Criminal Tutorial](/2016/09/reandom-forest-criminal-tutorial.html)'
  prefs: []
  type: TYPE_IMG
- en: '*Get an overview of Random Forest here, one of the most used algorithms by
    KDnuggets readers according to a recent poll.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s linear_models.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/ensemble/random_forest.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Support Vector Machines**'
  prefs: []
  type: TYPE_NORMAL
- en: '![SVMs](../Images/d5f9a91b5d6ed87326db5bc95500daf4.png)Start here: [Support
    Vector Machines: A Concise Technical Overview](/2016/09/support-vector-machines-concise-technical-overview.html)'
  prefs: []
  type: TYPE_IMG
- en: '*Support Vector Machines remain a popular and time-tested classification algorithm.
    This post provides a high-level concise technical overview of their functionality.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s svm.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/svm/svm.py),
    and [rushter''s kernels.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/svm/kernerls.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '**K-nearest Neighbors**'
  prefs: []
  type: TYPE_NORMAL
- en: '![KNN](../Images/4322b5f9ae66be35375b65bec3b6c05f.png)Start here: [Implementing
    Your Own k-Nearest Neighbour Algorithm Using Python](/2016/01/implementing-your-own-knn-using-python.html)'
  prefs: []
  type: TYPE_IMG
- en: '*A detailed explanation of one of the most used machine learning algorithms,
    k-Nearest Neighbors.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s knn.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/knn.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Naive Bayes**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bayesian](../Images/4bbaac39ca24078ff088ace99cc9b745.png)Start here: [Bayesian
    Machine Learning, Explained](/2016/07/bayesian-machine-learning-explained.html)'
  prefs: []
  type: TYPE_IMG
- en: '*Get a great introductory Bayesian machine learning explanation here, as well
    as suggestions where to go for further study.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s naive_bayes.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/naive_bayes.py)'
  prefs: []
  type: TYPE_NORMAL
- en: '**K-Means Clustering**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Clustering](../Images/a4235ade8eec2481aba75af7b5189ef6.png)Start here: [Comparing
    Clustering Techniques: A Concise Technical Overview](/2016/09/comparing-clustering-techniques-concise-technical-overview.html)'
  prefs: []
  type: TYPE_IMG
- en: '*A wide array of clustering techniques are in use today. Given the widespread
    use of clustering in everyday data mining, this post provides a concise technical
    overview of 2 such exemplar techniques.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code: [rushter''s kmeans.py](https://github.com/rushter/MLAlgorithms/blob/master/mla/kmeans.py)'
  prefs: []
  type: TYPE_NORMAL
- en: 'All implemented algorithms come with example code, which is helpful for understanding
    the APIs. An example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The above algorithm implementations are a sample of what is included in the
    repo, so be sure to have a look at the following implementations as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Gaussian Mixture Model**](https://github.com/rushter/MLAlgorithms/blob/master/mla/gaussian_mixture.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Principal Component Analysis (PCA)**](https://github.com/rushter/MLAlgorithms/blob/master/mla/pca.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Factorization Machines**](https://github.com/rushter/MLAlgorithms/blob/master/mla/fm.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Restricted Boltzmann Machine (RBM)**](https://github.com/rushter/MLAlgorithms/blob/master/mla/rbm.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**t-Distributed Stochastic Neighbor Embedding (t-SNE)**](https://github.com/rushter/MLAlgorithms/blob/master/mla/tsne.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Gradient Boosting Machines**](https://github.com/rushter/MLAlgorithms/blob/master/mla/ensemble/gbm.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have found these code examples helpful, I'm sure [the author](https://github.com/rushter)
    would be happy to hear from you.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Why Implement Machine Learning Algorithms From Scratch?](/2016/05/implement-machine-learning-algorithms-scratch.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Great Algorithm Tutorial Roundup](/2016/09/great-algorithm-tutorial-roundup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 10 Algorithms Machine Learning Engineers Need to Know](/2016/08/10-algorithms-machine-learning-engineers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Data Science to Make Clean Energy More Equitable](https://www.kdnuggets.com/2022/03/data-science-make-clean-energy-equitable.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Create Minimal Docker Images for Python Applications](https://www.kdnuggets.com/how-to-create-minimal-docker-images-for-python-applications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Collection of Free Courses to Learn Data Science, Data Engineering,…](https://www.kdnuggets.com/collection-of-free-courses-to-learn-data-science-data-engineering-machine-learning-mlops-and-llmops)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, May 25: The 6 Python Machine Learning Tools Every…](https://www.kdnuggets.com/2022/n21.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n06, Feb 9: Data Science Programming…](https://www.kdnuggets.com/2022/n06.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
