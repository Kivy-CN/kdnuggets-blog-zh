["```py\nimport pandas as pd\n\ndef load_data(path):\n    return pd.read_csv(path)\n\ndef data_cleaning(data):\n    data = data.drop_duplicates()\n    data = data.dropna()\n    data = data.reset_index(drop=True)\n    return data\n\ndef convert_dtypes(data, types_dict=None):\n    data = data.astype(dtype=types_dict)\n    ## convert the date column to datetime\n    data[\"Date\"] = pd.to_datetime(data[\"Date\"])\n    return data\n\ndef data_analysis(data):\n    data[\"month\"] = data[\"Date\"].dt.month\n    new_df = data.groupby(\"month\")[\"Units Sold\"].mean()\n    return new_df\n\ndef data_visualization(new_df, vis_type=\"bar\"):\n    new_df.plot(kind=vis_type, figsize=(10, 5), title=\"Average Units Sold by Month\")\n    return new_df\n\npath = \"Online Sales Data.csv\"\ndf = (\n    pd.DataFrame()\n    .pipe(lambda x: load_data(path))\n    .pipe(data_cleaning)\n    .pipe(convert_dtypes, {\"Product Category\": \"str\", \"Product Name\": \"str\"})\n    .pipe(data_analysis)\n    .pipe(data_visualization, \"line\")\n)\n```", "```py\n$ pip install prefect\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prefect import task, flow\n\n@task\ndef load_data(path):\n    return pd.read_csv(path)\n\n@task\ndef data_cleaning(data):\n    data = data.drop_duplicates()\n    data = data.dropna()\n    data = data.reset_index(drop=True)\n    return data\n\n@task\ndef convert_dtypes(data, types_dict=None):\n    data = data.astype(dtype=types_dict)\n    data[\"Date\"] = pd.to_datetime(data[\"Date\"])\n    return data\n\n@task\ndef data_analysis(data):\n    data[\"month\"] = data[\"Date\"].dt.month\n    new_df = data.groupby(\"month\")[\"Units Sold\"].mean()\n    return new_df\n\n@task\ndef data_visualization(new_df, vis_type=\"bar\"):\n\n    new_df.plot(kind=vis_type, figsize=(10, 5), title=\"Average Units Sold by Month\")\n    plt.savefig(\"average_units_sold_by_month.png\")\n    return new_df\n\n@flow(name=\"Data Pipeline\")\ndef data_pipeline(path: str):\n    df = load_data(path)\n    df_cleaned = data_cleaning(df)\n    df_converted = convert_dtypes(\n        df_cleaned, {\"Product Category\": \"str\", \"Product Name\": \"str\"}\n    )\n    analysis_result = data_analysis(df_converted)\n    new_df = data_visualization(analysis_result, \"line\")\n    return new_df\n\n# Run the flow!\nif __name__ == \"__main__\":\n    new_df = data_pipeline(\"Online Sales Data.csv\")\n    print(new_df)\n```", "```py\n14:18:48.649 | INFO    | prefect.engine - Created flow run 'enlightened-dingo' for flow 'Data Pipeline'\n14:18:48.816 | INFO    | Flow run 'enlightened-dingo' - Created task run 'load_data-0' for task 'load_data'\n14:18:48.822 | INFO    | Flow run 'enlightened-dingo' - Executing 'load_data-0' immediately...\n14:18:48.990 | INFO    | Task run 'load_data-0' - Finished in state Completed()\n14:18:49.052 | INFO    | Flow run 'enlightened-dingo' - Created task run 'data_cleaning-0' for task 'data_cleaning'\n14:18:49.053 | INFO    | Flow run 'enlightened-dingo' - Executing 'data_cleaning-0' immediately...\n14:18:49.226 | INFO    | Task run 'data_cleaning-0' - Finished in state Completed()\n14:18:49.283 | INFO    | Flow run 'enlightened-dingo' - Created task run 'convert_dtypes-0' for task 'convert_dtypes'\n14:18:49.288 | INFO    | Flow run 'enlightened-dingo' - Executing 'convert_dtypes-0' immediately...\n14:18:49.441 | INFO    | Task run 'convert_dtypes-0' - Finished in state Completed()\n14:18:49.506 | INFO    | Flow run 'enlightened-dingo' - Created task run 'data_analysis-0' for task 'data_analysis'\n14:18:49.510 | INFO    | Flow run 'enlightened-dingo' - Executing 'data_analysis-0' immediately...\n14:18:49.684 | INFO    | Task run 'data_analysis-0' - Finished in state Completed()\n14:18:49.753 | INFO    | Flow run 'enlightened-dingo' - Created task run 'data_visualization-0' for task 'data_visualization'\n14:18:49.760 | INFO    | Flow run 'enlightened-dingo' - Executing 'data_visualization-0' immediately...\n14:18:50.087 | INFO    | Task run 'data_visualization-0' - Finished in state Completed()\n14:18:50.144 | INFO    | Flow run 'enlightened-dingo' - Finished in state Completed()\n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom prefect import task, flow\n\n@task\ndef load_data(path: str) -> pd.DataFrame:\n    return pd.read_csv(path)\n\n@task\ndef data_cleaning(data: pd.DataFrame) -> pd.DataFrame:\n    data = data.drop_duplicates()\n    data = data.dropna()\n    data = data.reset_index(drop=True)\n    return data\n\n@task\ndef convert_dtypes(data: pd.DataFrame, types_dict: dict = None) -> pd.DataFrame:\n    data = data.astype(dtype=types_dict)\n    data[\"Date\"] = pd.to_datetime(data[\"Date\"])\n    return data\n\n@task\ndef data_analysis(data: pd.DataFrame) -> pd.DataFrame:\n    data[\"month\"] = data[\"Date\"].dt.month\n    new_df = data.groupby(\"month\")[\"Units Sold\"].mean()\n    return new_df\n\n@task\ndef data_visualization(new_df: pd.DataFrame, vis_type: str = \"bar\") -> pd.DataFrame:\n    new_df.plot(kind=vis_type, figsize=(10, 5), title=\"Average Units Sold by Month\")\n    plt.savefig(\"average_units_sold_by_month.png\")\n    return new_df\n\n@task\ndef save_to_csv(df: pd.DataFrame, filename: str):\n    df.to_csv(filename, index=False)\n    return filename\n\n@flow(name=\"Data Pipeline\")\ndef run_pipeline(path: str):\n    df = load_data(path)\n    df_cleaned = data_cleaning(df)\n    df_converted = convert_dtypes(\n        df_cleaned, {\"Product Category\": \"str\", \"Product Name\": \"str\"}\n    )\n    analysis_result = data_analysis(df_converted)\n    data_visualization(analysis_result, \"line\")\n    save_to_csv(analysis_result, \"average_units_sold_by_month.csv\")\n\n# Run the flow\nif __name__ == \"__main__\":\n    run_pipeline.serve(\n        name=\"pass-params-deployment\",\n        parameters=dict(path=\"Online Sales Data.csv\"),\n    )\n```", "```py\n$ python data_pipe.py \n```", "```py\n$ prefect deployment run 'Data Pipeline/pass-params-deployment'\n```", "```py\n$ prefect server start \n```"]