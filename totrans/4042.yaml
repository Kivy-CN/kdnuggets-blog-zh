- en: Introduction to Multithreading and Multiprocessing in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的多线程和多进程介绍
- en: 原文：[https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python](https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python](https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python)
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/cb420b3a256c558e26a8195c8f8b8f19.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python中的多线程和多进程介绍](../Images/cb420b3a256c558e26a8195c8f8b8f19.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: This tutorial will discuss leveraging Python’s capability to execute multithreading
    and multiprogramming tasks. They offer a gateway to perform concurrent operations
    within a single process or across multiple processes. Parallel and concurrent
    execution increases the speed and efficiency of the systems. After discussing
    the basics of multithreading and multiprogramming, we will also discuss their
    practical implementation using Python libraries. Let’s first briefly discuss the
    benefits of parallel systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将讨论如何利用Python执行多线程和多进程任务。它们提供了一种在单个进程或多个进程中执行并发操作的途径。并行和并发执行可以提高系统的速度和效率。我们将首先讨论多线程和多进程的基础知识，然后讨论如何使用Python库实现这些功能。首先，我们简要讨论并行系统的好处。
- en: '**Improved Performance:** With the capability to perform tasks concurrently,
    we can reduce the execution time and improve the system''s overall performance.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**性能提升：** 通过并发执行任务，我们可以减少执行时间，提高系统的整体性能。'
- en: '**Scalability:** We can divide a large task into various smaller sub-tasks
    and assign a separate core or thread to them for their independent execution.
    It can be helpful in large-scale systems.'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可扩展性：** 我们可以将一个大型任务拆分成多个较小的子任务，并为每个子任务分配一个独立的核心或线程进行独立执行。这在大规模系统中非常有用。'
- en: '**Efficient I/O Operations:** With the help of concurrency, the CPU doesn’t
    have to wait for a process to complete its I/O operations. The CPU can immediately
    start executing the following process until the previous process is busy with
    its I/O.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**高效的I/O操作：** 借助并发，CPU无需等待进程完成其I/O操作。CPU可以立即开始执行下一个进程，直到之前的进程忙于其I/O操作。'
- en: '**Resource Optimization:** By dividing the resources, we can prevent a single
    process from taking up all the resources. This can avoid the problem of [Starvation](https://unstop.com/blog/starvation-in-os)
    for smaller processes.'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**资源优化：** 通过分配资源，我们可以防止单个进程占用所有资源。这可以避免[资源饥饿](https://unstop.com/blog/starvation-in-os)问题，确保较小的进程也能获得资源。'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大推荐课程
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织的IT需求'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/f451d0f072135ea807e674af48b2f151.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Python中的多线程和多进程介绍](../Images/f451d0f072135ea807e674af48b2f151.png)'
- en: Benefits of Parallel Computing | Image by Author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 并行计算的好处 | 作者提供的图片
- en: These are some common reasons for which you require concurrent or parallel executions.
    Now, move back to the main topics, i.e., Multithreading and Multiprogramming,
    and discuss their primary differences.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是需要并发或并行执行的一些常见原因。现在，回到主要主题，即多线程和多进程，并讨论它们的主要区别。
- en: What is Multithreading?
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多线程？
- en: Multithreading is one of the ways to achieve parallelism in a single process
    and able to execute simultaneous tasks. Multiple threads can be created inside
    a single process and perform smaller tasks parallel within that process.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程是实现单个进程中并行性的方式之一，能够同时执行多个任务。可以在单个进程中创建多个线程，并在该进程内并行执行较小的任务。
- en: The threads present inside a single process share a common memory space, but
    their stack traces and registers are separate. They are less computationally expensive
    due to this shared memory.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 单个进程内的线程共享一个公共内存空间，但它们的堆栈跟踪和寄存器是分开的。由于共享内存，它们的计算开销较小。
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/c8f8774c7606708d2d0b57d88e162529.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Python中的多线程和多进程简介](../Images/c8f8774c7606708d2d0b57d88e162529.png)'
- en: Single Threaded & Multi Threaded Env. | Image by [GeeksForGeeks](https://www.geeksforgeeks.org/multithreading-python-set-1/)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 单线程与多线程环境 | 图片来自[GeeksForGeeks](https://www.geeksforgeeks.org/multithreading-python-set-1/)
- en: Multithreading is primarily used in performing I/O operations, i.e., if some
    part of the program is busy in I/O operations, then the remaining program can
    be responsive. However, in Python’s implementation, multithreading cannot achieve
    true parallelism due to Global Interpreter Lock (GIL).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 多线程主要用于执行I/O操作，即如果程序的某部分在忙于I/O操作，剩余的程序仍然可以响应。然而，在Python的实现中，由于全局解释器锁（GIL），多线程无法实现真正的并行。
- en: In short, GIL is a mutex lock that allows only one thread at a time to interact
    with the Python bytecode, i.e., even in the multithreaded mode, only one thread
    can execute the bytecode at a time.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，GIL是一个互斥锁，只允许一个线程在任何时间与Python字节码交互，即使在多线程模式下，也只能有一个线程同时执行字节码。
- en: It is done to maintain thread safety in CPython, but this limits the performance
    benefits of multithreading. To address this issue, python has a separate multiprocessing
    library, which we will discuss afterward.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是为了在CPython中保持线程安全，但这限制了多线程的性能优势。为了解决这个问题，Python有一个单独的多进程库，我们将在之后讨论。
- en: '**What are Daemon Threads?**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是守护线程？**'
- en: The threads which constantly run in the background are called the demon threads.
    Their main job is to support the main thread or the non-daemon threads. The daemon
    thread does not block the main thread from execution and even keeps running if
    it has completed its execution.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台不断运行的线程称为守护线程。它们的主要工作是支持主线程或非守护线程。守护线程不会阻塞主线程的执行，即使它已经完成了执行，仍然会继续运行。
- en: In Python, the daemon threads are mainly used as a garbage collector. It will
    destroy all the useless objects and free the memory by default so that the main
    thread can be used and executed properly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，守护线程主要用作垃圾回收器。它将默认销毁所有无用的对象并释放内存，以便主线程可以正常使用和执行。
- en: What is Multiprocessing?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是多进程？
- en: Multiprocessing is used to perform the parallel execution of multiple processes.
    It helps us achieve true parallelism, as we execute separate processes simultaneously,
    having their own memory space. It uses separate cores of the CPU and is also helpful
    in performing inter-process communication to exchange data between multiple processes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 多进程用于同时执行多个进程。它帮助我们实现真正的并行，因为我们同时执行独立的进程，这些进程有自己的内存空间。它使用CPU的不同核心，并且在进行进程间通信以在多个进程之间交换数据时也很有帮助。
- en: Multiprocessing is more computationally expensive as compared to multithreading,
    as we are not using a shared memory space. Still, it allows us for independent
    execution and overcomes Global Interpreter Lock's limitations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 与多线程相比，多进程计算开销更大，因为我们不使用共享内存空间。尽管如此，它允许我们独立执行，并克服了全局解释器锁的限制。
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/7c416ec2fca38d97f879cfd44bbbb45c.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Python中的多线程和多进程简介](../Images/7c416ec2fca38d97f879cfd44bbbb45c.png)'
- en: Multiprocessing Environment | Image by [GeeksForGeeks](https://www.geeksforgeeks.org/multiprocessing-python-set-1/)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 多进程环境 | 图片来自[GeeksForGeeks](https://www.geeksforgeeks.org/multiprocessing-python-set-1/)
- en: The above figure demonstrates a multi-processing environment in which a main
    process creates two separate processes and assigns separate work to them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 上图演示了一个多进程环境，其中一个主进程创建了两个独立的进程，并将不同的工作分配给它们。
- en: Multithreading Implementation
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多线程实现
- en: It’s time to implement a basic example of multithreading using Python. Python
    has an inbuilt module `threading` used for the multithreading implementation.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候使用Python实现一个基本的多线程示例了。Python有一个内置的`threading`模块，用于多线程实现。
- en: '**Importing Libraries:**'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入库：**'
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Function to Calculate the Squares:**'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计算平方的函数：**'
- en: This is a simple function used to find the square of numbers. A list of numbers
    is given as input, and it outputs the square of each number of the list along
    with the name of the thread used and the process ID associated with that thread.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于计算数字平方的简单函数。输入的是一组数字列表，它输出列表中每个数字的平方，以及使用的线程名称和与该线程相关的进程 ID。
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Main Function:**'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主函数：**'
- en: We have a list of numbers and we will divide that list equally and name them
    as fisrt_half and `second_half` respectively. Now we will assign two separate
    threads `t1` and `t2` to these lists.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一组数字，我们将把这个列表平均分成两个部分，并分别命名为 fisrt_half 和 `second_half`。现在我们将为这些列表分配两个独立的线程
    `t1` 和 `t2`。
- en: '`Thread` function creates a new thread, which takes a function with a list
    of arguments to that function. You can also assign a separate name to a thread.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Thread` 函数创建一个新线程，该线程接受一个带有参数列表的函数。你也可以为线程指定一个单独的名称。'
- en: '`.start()` function will start executing these threads and `.join()` function
    will block the execution of the main thread until the given thread is not executed
    completely.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`.start()` 函数将开始执行这些线程，而 `.join()` 函数会阻塞主线程的执行，直到给定线程完全执行完毕。'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Note:** All the threads created above are non-daemon threads. To create a
    daemon thread, you need to write `t1.setDaemon(True)` to make the thread `t1`
    a daemon thread.'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 上述创建的所有线程都是非守护线程。要创建一个守护线程，你需要写 `t1.setDaemon(True)` 来使线程 `t1` 成为守护线程。'
- en: Now, we will understand the output generated by the above code. We can observe
    that the process ID (i.e., PID) will remain the same for both threads, which means
    that these two threads are part of the same process.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将了解上述代码生成的输出。我们可以观察到进程 ID（即 PID）对于两个线程是相同的，这意味着这两个线程是同一进程的一部分。
- en: You can also observe that the output is not generated sequentially. In the first
    line, you will see the output generated by thread1, then in the 3rd line, the
    output generated by thread2, then again by thread1 in the fourth line. This clearly
    signifies that these threads work together concurrently.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以观察到输出不是顺序生成的。在第一行，你会看到线程1生成的输出，然后在第3行看到线程2生成的输出，然后在第四行再次看到线程1的输出。这清楚地表明这些线程是并发工作的。
- en: Concurrency doesn’t mean these two threads are executed parallelly, as only
    one thread is executed at a time. It doesn’t reduce the execution time. It takes
    the same time as sequential execution. CPU starts executing a thread but leaves
    it midway and moves to another thread, and after some time, comes back to the
    main thread and starts its execution from the same point it left last time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 并发并不意味着这两个线程是并行执行的，因为每次只有一个线程在执行。这并不会减少执行时间。它需要与顺序执行相同的时间。CPU 开始执行一个线程，但在中途离开它并转到另一个线程，过一段时间后，返回到主线程，并从上次离开的点继续执行。
- en: Multiprocessing Implementation
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多进程实现
- en: I hope you have a basic understanding of multithreading with its implementation
    and its limitations. Now, it’s time to learn about multiprocessing implementation
    and how we can overcome those limitations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你对多线程及其实现和局限性有了基本了解。现在，是时候学习多进程实现以及如何克服这些局限性了。
- en: We will follow the same example, but instead of creating two separate threads,
    we will create two independent processes and discuss the observations.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用相同的例子，但这次不是创建两个独立的线程，而是创建两个独立的进程，并讨论观察结果。
- en: '**Importing Libraries:**'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**导入库：**'
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We will use the `multiprocessing` module to create independent processes.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `multiprocessing` 模块来创建独立的进程。
- en: '**Function to Calculate the Squares:**'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计算平方的函数：**'
- en: That function will remain the same. We have just removed the print statement
    of threading information.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数将保持不变。我们只是去除了线程信息的打印语句。
- en: '[PRE5]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Main Function:**'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主函数：**'
- en: There are a few modifications in the main function. We have just created a separate
    process instead of a thread.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 主函数有一些修改。我们只是创建了一个独立的进程，而不是线程。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Output:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We have observed that a separate process executes each list. Both have different
    process IDs. To check whether our processes have been executed parallelly, we
    need to create a separate environment, which we will discuss below.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到每个列表都由一个单独的进程执行。这两个进程有不同的进程 ID。为了检查我们的进程是否是并行执行的，我们需要创建一个独立的环境，我们将在下面讨论。
- en: Calculating Runtime With and Without Multiprocessing
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算有无多进程的运行时间
- en: To check whether we get a true parallelism, we will calculate the algorithm's
    runtime with and without multiprocessing.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查我们是否实现了真正的并行性，我们将计算算法在使用和不使用多进程情况下的运行时间。
- en: For this, we will require an extensive list of integers that contain more than
    10^6 integers. We can generate a list using `random` library. We will use the
    `time` module of Python to calculate the runtime. Below is the implementation
    for this. The code is self-explanatory, although you can always look at the code
    comments.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要一个包含超过10^6个整数的广泛整数列表。我们可以使用`random`库生成一个列表。我们将使用Python的`time`模块来计算运行时间。下面是实现代码。代码本身已经很清晰，尽管你可以随时查看代码注释。
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You can observe that the time with multiprocessing is almost half as compared
    to without multiprocessing. This shows that these two processes are executed simultaneously
    at a time and show a behavior of true parallelism.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以观察到，使用多进程的时间几乎是没有使用多进程时间的一半。这表明这两个过程同时执行，表现出真正的并行性。
- en: You can also read this article [Sequential vs Concurrent vs Parallelism](https://blog.bitsrc.io/sequential-vs-concurrent-vs-parallelism-87d1907e5be0)
    from Medium, which will help you to understand the basic difference between these
    Sequential, Concurrent and Parallel processes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以阅读这篇文章[顺序与并发与并行](https://blog.bitsrc.io/sequential-vs-concurrent-vs-parallelism-87d1907e5be0)来自Medium，这将帮助你理解这些顺序、并发和并行过程之间的基本区别。
- en: '**[](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)****
    is a B.Tech. Electrical Engineering student, currently in the final year of his
    undergrad. His interest lies in the field of Web Development and Machine Learning.
    He have pursued this interest and am eager to work more in these directions.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)****
    是一名B.Tech. 电气工程专业的学生，目前在本科的最后一年。他的兴趣领域在于Web开发和机器学习。他已经追求了这一兴趣，并渴望在这些方向上进一步发展。'
- en: More On This Topic
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用PyCaret进行Python聚类简介](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
- en: '[Multilabel Classification: An Introduction with Python''s Scikit-Learn](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多标签分类：使用Python的Scikit-Learn简介](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
- en: '[Introduction to Memory Profiling in Python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的内存分析简介](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)'
- en: '[Duck, Duck, Code: An Introduction to Python''s Duck Typing](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[鸭子、鸭子、代码：Python的鸭子类型简介](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)'
- en: '[Introduction to __getitem__: A Magic Method in Python](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[__getitem__简介：Python中的魔法方法](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
- en: '[Introduction to Python Libraries for Data Cleaning](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python数据清洗库简介](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
