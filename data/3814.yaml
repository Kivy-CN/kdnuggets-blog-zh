- en: What is a Function?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是函数？
- en: 原文：[https://www.kdnuggets.com/2022/11/function.html](https://www.kdnuggets.com/2022/11/function.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/11/function.html](https://www.kdnuggets.com/2022/11/function.html)
- en: '![What is a Function](../Images/5970e99bf476df110baed7f39348bd07.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![什么是函数](../Images/5970e99bf476df110baed7f39348bd07.png)'
- en: Image by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑者提供的图片
- en: The very first high-level functional programming, LISP, was developed in the
    1950s. It introduced concepts that we still use in programming today. For instance,
    Lambda functions and expressions. Even object-oriented languages such as JAVA
    and C# have borrowed notations and features from functional programming languages.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最早的高级函数式编程语言 LISP 于 1950 年代开发。它引入了我们今天编程中仍在使用的概念，例如 Lambda 函数和表达式。即使是像 JAVA
    和 C# 这样的面向对象语言，也借鉴了函数式编程语言的符号和特性。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: While LISP still exists today as a family of different programming languages,
    none of them are as popular as JavaScript or Python - which are generally used
    as functional programming languages (among their other paradigms). And as the
    label suggests, functional programming languages revolve around functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 LISP 作为一种编程语言家族至今仍在存在，但没有一种像 JavaScript 或 Python 那样流行——这些语言通常被用作函数式编程语言（除了其他范式之外）。正如名称所示，函数式编程语言围绕函数展开。
- en: But what is a function and how is it different from a method? Since JavaScript
    is the most popular [programming language globally](https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/)
    (at least at the time of this guide’s inception), we’ll use it as an example.
    Ultimately, the concepts you will learn here are transferable to other programming
    languages that follow a functional paradigm.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么函数是什么，它与方法有什么不同？由于 JavaScript 是全球最受欢迎的 [编程语言](https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/)（至少在本指南创建时如此），我们将以它作为示例。最终，你将在这里学到的概念可以转移到其他遵循函数式范式的编程语言中。
- en: The Nature of JavaScript and why Functions Matter
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript 的本质及函数的重要性
- en: Despite introducing classes in the ECMAScript 2015 specification (ES6), JavaScript
    still isn’t considered a class-based object-oriented language. That’s largely
    because you don’t have to define classes or class files to build a JavaScript
    project. You can define and call functions outside the context of classes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 ECMAScript 2015 规范（ES6）中引入了类，JavaScript 仍然不被视为基于类的面向对象语言。这主要是因为你不必定义类或类文件就能构建
    JavaScript 项目。你可以在类的上下文之外定义和调用函数。
- en: In fact, before the release of the ECMAScript 2015 specification, JavaScript
    functions followed simple but loose rules. Thus, they were straightforward to
    use compared to functions (or methods) in OO programming languages like C# and
    JAVA. As the last few annual ECMAScript specifications brought more functionality
    to JavaScript, they also made the language far more complex.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，在 ECMAScript 2015 规范发布之前，JavaScript 函数遵循简单但松散的规则。因此，它们使用起来比 C# 和 JAVA 等面向对象编程语言中的函数（或方法）要直接得多。随着近年来
    ECMAScript 规范的增加，JavaScript 的功能也不断增强，使得语言变得更加复杂。
- en: Regardless, JavaScript still stands as the most widely used programming language
    in the world due to its extensibility and portability. You can use it for client-side
    web development and server-side and desktop applications when paired with the
    right runtime and frameworks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，JavaScript 仍然是全球使用最广泛的编程语言，这要归功于它的可扩展性和可移植性。你可以在客户端网页开发以及服务器端和桌面应用中使用它，只要配合合适的运行时和框架。
- en: We can only see JavaScript adoption increase in the future as more cloud-database
    platforms (DBaaS) have begun to offer native JavaScript SDKs. Thus, programmers
    are no longer restricted to using SQL drivers for [MSSQL and MySQL](https://www.atlantic.net/hipaa-compliant-hosting/mysql-and-ms-sql-and-hipaa-compliance/)
    or their associated libraries and functions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 未来我们只会看到JavaScript的应用增加，因为越来越多的云数据库平台（DBaaS）已开始提供原生的JavaScript SDK。因此，程序员不再被限制于使用[SQL驱动程序（MSSQL和MySQL）](https://www.atlantic.net/hipaa-compliant-hosting/mysql-and-ms-sql-and-hipaa-compliance/)或其相关的库和函数。
- en: JavaScript is worth learning and mastering – now more than ever. Functions make
    JavaScript tick, and your usage of them will determine the ultimate quality of
    your code and projects. But the behavior and structures of functions (especially
    Lambda/Arrow functions) can be difficult to grasp for beginners.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript值得学习和掌握——现在比以往任何时候都更加重要。函数使得JavaScript运转，你对它们的使用将决定你代码和项目的**最终**质量。但函数的行为和结构（尤其是Lambda/Arrow函数）对于初学者来说可能很难理解。
- en: 'The syntax can be particularly off-putting when JavaScript code is embedded
    in HTML. Nevertheless, if you hope to progress from a beginner to an expert, you
    must be able to construct and utilize functions effectively. And the first step
    is answering the question: “What are functions?”'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当JavaScript代码嵌入HTML中时，其语法可能特别令人困惑。然而，如果你希望从初学者成长为专家，你必须能够有效地构建和利用函数。而第一步就是回答这个问题：“什么是函数？”
- en: What are Functions?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是函数？
- en: JavaScript functions are [a set of instructions](https://www.w3schools.com/js/js_functions.asp)
    contained in a labeled code block. They’re important because they allow you to
    refer to these sets of instructions using a label instead of repeatedly writing
    them out every time. A call or invocation describes the process of using or referring
    to a function in your code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript函数是一组包含在标记代码块中的[指令](https://www.w3schools.com/js/js_functions.asp)。它们很重要，因为它们允许你使用标签来引用这些指令，而不是每次都重复编写它们。调用或调用描述了在代码中使用或引用函数的过程。
- en: 'As a functional programming language, JavaScript has what is known as first-class
    functions. This means that functions can be treated as objects or first-class
    citizens. They can be passed through the arguments of other functions, included
    in data structures, and assigned to variables/objects. While this adds some extensibility
    to JavaScript, it can make code harder to read and follow. Regardless, its functional
    nature is [what makes it suitable](/2022/02/data-science-programming-languages.html)
    for data science. The basic structure of a function declaration is as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种函数式编程语言，JavaScript拥有所谓的**一等函数**。这意味着函数可以被视为对象或一等公民。它们可以通过其他函数的参数传递，包含在数据结构中，并赋值给变量/对象。虽然这增加了JavaScript的扩展性，但也可能使代码更难阅读和跟随。不过，它的函数式特征是[使其适合数据科学](https://2022/02/data-science-programming-languages.html)的原因之一。函数声明的基本结构如下：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here’s a simple function that returns the sum of two variables:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的函数，返回两个变量的和：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The function is defined using the “*function”* keyword followed by the name
    of the function (the signature), a parameter list separated by commas and placed
    between round parentheses, and a code block. Unlike, (older versions) of C# and
    Java, you don’t have to specify a return type when defining your function. This
    also speaks to JavaScript’s loosely typed nature.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是通过“*function*”关键字定义的，后面跟着函数名称（签名）、由逗号分隔并放置在圆括号之间的参数列表，以及一个代码块。与（旧版本的）C#和Java不同，你在定义函数时不需要指定返回类型。这也体现了JavaScript的松散类型特性。
- en: 'The function’s name/label can be a combination of alphanumeric characters,
    underscores (_), and dollar signs ($). You can invoke the above function to assign
    a value to a variable/attribute like so:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的名称/标签可以是字母数字字符、下划线（_）和美元符号（$）的组合。你可以通过如下方式调用上述函数来给变量/属性赋值：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The values in between the rounded parentheses in an invocation are called arguments.
    Not all JavaScript functions are defined or declared by the programmer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 调用中的圆括号之间的值称为参数。并非所有JavaScript函数都是由程序员定义或声明的。
- en: JavaScript has a set of built-in functions for essential tasks such as manipulating
    strings and arrays, working with HTML wrappers, handling dates, etc. JavaScript’s
    [standard library](https://devdocs.io/javascript/) isn’t as rich or fully featured
    as most General-Purpose Programming Languages (GPL). This can be advantageous
    as it lowers the learning curve and streamlines coding as you don’t have to worry
    about using the right object or data type.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 有一组内置函数，用于处理基本任务，如操作字符串和数组、处理 HTML 包装器、处理日期等。JavaScript 的[标准库](https://devdocs.io/javascript/)没有大多数通用编程语言（GPL）那么丰富或功能齐全。这可能是一个优势，因为它降低了学习曲线，并简化了编码，因为你不必担心使用正确的对象或数据类型。
- en: Again, if you’re familiar with [OO programming languages](/2019/08/object-oriented-programming-data-scientists-estimator.html),
    you may be slightly confused. You may have noticed that JavaScript functions are
    structured and behave similarly to methods. But is there a distinction between
    methods and functions, and does JavaScript have methods?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，如果你熟悉[面向对象编程语言](/2019/08/object-oriented-programming-data-scientists-estimator.html)，你可能会感到有些困惑。你可能已经注意到，JavaScript
    函数的结构和行为类似于方法。但方法和函数之间是否存在区别，JavaScript 是否有方法？
- en: Functions vs. Methods
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数与方法
- en: Methods and functions are synonymous in many programming languages. However,
    JavaScript defines these terms differently; thus, functions and methods are two
    slightly different concepts. The differences are minor because they have identical
    structures and similar usages but are defined and called from different contexts.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多编程语言中，方法和函数是同义的。然而，JavaScript 对这些术语的定义不同，因此函数和方法是两个略有不同的概念。这些差异很小，因为它们有相同的结构和类似的用法，但在不同的上下文中定义和调用。
- en: 'Methods are object functions as they are constructed as part of an object’s
    property list. The main difference between functions and methods is that methods
    are tied to specific objects, while functions are not. Essentially, the property
    list (including methods) gives objects class-like functionality. The syntax of
    JavaScript methods is as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是对象的函数，因为它们作为对象属性列表的一部分被构造。函数和方法的主要区别在于方法绑定到特定对象，而函数则不是。从本质上讲，属性列表（包括方法）赋予对象类似类的功能。JavaScript
    方法的语法如下：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here’s a simple example of a method that returns the sum of two numbers:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的返回两个数字和的方法示例：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The “*this”* keyword is used to prevent [variable shadowing/hiding](https://www.wikiwand.com/en/Variable_shadowing),
    ultimately helping you control and maintain scope. You use it to reference other
    properties within the scope of the object’s declaration.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: “*this*”关键字用于防止[变量遮蔽/隐藏](https://www.wikiwand.com/en/Variable_shadowing)，最终帮助你控制和维护作用域。你可以用它来引用对象声明范围内的其他属性。
- en: 'You can call the method by using the object like so:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过如下方式使用对象调用方法：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Function Expressions (Anonymous Functions)
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数表达式（匿名函数）
- en: 'As mentioned previously, you can store functions in variables or properties.
    Function expressions allow you to declare anonymous functions that assign their
    return values to variables. As you’ll see, they’re quite similar to object methods.
    The basic syntax of a function expression is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，你可以将函数存储在变量或属性中。函数表达式允许你声明匿名函数，将它们的返回值分配给变量。正如你将看到的，它们与对象方法非常相似。函数表达式的基本语法如下：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A simple example of a function expression is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 函数表达式的一个简单示例如下：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can then call the function using the variable label:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以使用变量标签来调用该函数：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Arrow Functions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箭头函数
- en: 'Arrow functions were first introduced in the ECMAScript 2015 standard (ES6).
    They’re akin to [Lambda expressions](/2020/07/3-advanced-python-features.html)
    in Python and C# as they allow you to create more concise declarations and function
    calls (and they both use arrows). However, they can be a little tricky to use
    at first. The basic syntax of an arrow function is:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数首次在 ECMAScript 2015 标准（ES6）中引入。它们类似于[Lambda 表达式](/2020/07/3-advanced-python-features.html)
    在 Python 和 C# 中，因为它们允许你创建更简洁的声明和函数调用（并且它们都使用箭头）。然而，起初使用它们可能有些棘手。箭头函数的基本语法是：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When put into action, it looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实际应用时，它看起来是这样的：
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Or like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 或者这样：
- en: '[PRE11]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can also anonymize arrow expressions by negating the function signature
    like so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过否定函数签名来匿名化箭头表达式，如下所示：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Another advantage of arrow functions is how they handle the “*this”* keyword
    and scoping. If a normal function is defined outside the scope of an object, it
    refers to the object that invokes it. In a web browser environment, this could
    be a button, window, document, etc. Contrastingly, when “*this”* is used with
    arrow functions, it always references the object in which it is declared/defined.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数的另一个优点是它们处理“*this*”关键字和作用域的方式。如果正常函数在对象的作用域之外定义，它指向调用它的对象。在网页浏览器环境中，这可能是一个按钮、窗口、文档等。相比之下，当“*this*”与箭头函数一起使用时，它始终引用定义/声明它的对象。
- en: Summary
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: One of the most compelling reasons why JavaScript is beloved is its flexibility,
    although some surmise that tighter constraints and rules may simplify the coding
    experience.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 受欢迎的一个重要原因是其灵活性，尽管有些人认为更严格的约束和规则可能会简化编码体验。
- en: Because of its multi-paradigm nature, it embraces [various coding styles](/2022/01/r-python-human-factor-perspective.html),
    as evidenced by how it allows you to declare and use functions. This looseness
    makes it easier for developers to obfuscate their code somewhat naturally, so
    they don’t have to restrict themselves to a particular style of function.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其多范式特性，它接受 [各种编码风格](/2022/01/r-python-human-factor-perspective.html)，这从它允许你声明和使用函数的方式中可以看出。这种宽松性使得开发者可以更自然地混淆代码，因此他们不必局限于某种特定的函数风格。
- en: As a beginner, if you’re not comfortable with using arrow functions yet, stick
    to simple declarations and calls. How fast you master a skill or language is highly
    dependent on your understanding of the basics.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 作为初学者，如果你还不习惯使用箭头函数，可以坚持使用简单的声明和调用。你掌握一项技能或语言的速度很大程度上取决于你对基础知识的理解。
- en: '**[Nahla Davies](http://nahlawrites.com/)** is a software developer and tech
    writer. Before devoting her work full time to technical writing, she managed —
    among other intriguing things — to serve as a lead programmer at an Inc. 5,000
    experiential branding organization whose clients include Samsung, Time Warner,
    Netflix, and Sony.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Nahla Davies](http://nahlawrites.com/)** 是一名软件开发者和技术作家。在全职从事技术写作之前，她曾担任一家公司（在《Inc.
    5000》中排名前 5,000）的首席程序员，该公司服务于包括三星、时代华纳、Netflix 和索尼在内的客户。'
- en: More On This Topic
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Concepts You Should Know About Gradient Descent and Cost Function](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你需要了解的 5 个梯度下降和成本函数概念](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
- en: '[3 More SQL Aggregate Function Interview Questions for Data Science](https://www.kdnuggets.com/2023/01/3-sql-aggregate-function-interview-questions-data-science.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的 3 个 SQL 聚合函数面试问题](https://www.kdnuggets.com/2023/01/3-sql-aggregate-function-interview-questions-data-science.html)'
- en: '[Python Function Arguments: A Definitive Guide](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 函数参数：权威指南](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
- en: '[Multi-label NLP: An Analysis of Class Imbalance and Loss Function…](https://www.kdnuggets.com/2023/03/multilabel-nlp-analysis-class-imbalance-loss-function-approaches.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多标签 NLP：类别不平衡和损失函数的分析…](https://www.kdnuggets.com/2023/03/multilabel-nlp-analysis-class-imbalance-loss-function-approaches.html)'
- en: '[How to Use the pivot_table Function for Advanced Data Summarization…](https://www.kdnuggets.com/how-to-use-the-pivot_table-function-for-advanced-data-summarization-in-pandas)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 pivot_table 函数进行高级数据汇总…](https://www.kdnuggets.com/how-to-use-the-pivot_table-function-for-advanced-data-summarization-in-pandas)'
- en: '[A Beginner''s Guide to Pandas Melt Function](https://www.kdnuggets.com/2023/03/beginner-guide-pandas-melt-function.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初学者指南：Pandas Melt 函数](https://www.kdnuggets.com/2023/03/beginner-guide-pandas-melt-function.html)'
