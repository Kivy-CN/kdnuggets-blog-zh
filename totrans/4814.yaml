- en: 5 Quick and Easy Data Visualizations in Python with Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/07/5-quick-easy-data-visualizations-python-code.html](https://www.kdnuggets.com/2018/07/5-quick-easy-data-visualizations-python-code.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Data Visualization is a big part of a data scientist’s jobs. In the early stages
    of a project, you’ll often be doing an Exploratory Data Analysis (EDA) to gain
    some insights into your data. Creating visualizations really helps make things
    clearer and easier to understand, especially with larger, high dimensional datasets.
    Towards the end of your project, it’s important to be able to present your final
    results in a clear, concise, and compelling manner that your audience, whom are
    often non-technical clients, can understand.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib is a popular Python library that can be used to create your Data
    Visualizations quite easily. However, setting up the data, parameters, figures,
    and plotting can get quite messy and tedious to do every time you do a new project.
    In this blog post, we’re going to look at 6 data visualizations and write some
    quick and easy functions for them with Python’s Matplotlib. In the meantime, here’s
    a great chart for selecting the right visualization for the job!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eef25e9517f17d752d40709640e45b00.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: A chart for selecting the proper data visualization technique for a given situation
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter Plots**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Scatter plots are great for showing the relationship between two variables since
    you can directly see the raw distribution of the data. You can also view this
    relationship for different groups of data simple by colour coding the groups as
    seen in the first figure below. Want to visualize the relationship between three
    variables? No problemo! Just use another parameters, like point size, to encode
    that third variable as we can see in the second figure below.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/15137017f760bf8908a94d17f1522ab9.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
- en: Scatter plot with colour groupings![](../Images/9f33455dc00799634d8f0c53533a92cf.png)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Scatter plot with colour groupings and size encoding for the third variable
    of country size
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Now for the code. We first import Matplotlib’s pyplot with the alias “plt”.
    To create a new plot figure we call `plt.subplots()` . We pass the x-axis and
    y-axis data to the function and then pass those to `ax.scatter()` to plot the
    scatter plot. We can also set the point size, point color, and alpha transparency.
    You can even set the y-axis to have a logarithmic scale. The title and axis labels
    are then set specifically for the figure. That’s an easy to use function that
    creates a scatter plot end to end!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是代码部分。我们首先导入Matplotlib的pyplot，别名为“plt”。要创建新的图形，我们调用`plt.subplots()`。我们将x轴和y轴数据传递给函数，然后传递给`ax.scatter()`来绘制散点图。我们还可以设置点的大小、颜色和透明度。甚至可以将y轴设置为对数尺度。然后为图形设置标题和轴标签。这是一个易于使用的函数，从头到尾创建散点图！
- en: '**Line Plots**'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**折线图**'
- en: Line plots are best used when you can clearly see that one variable varies greatly
    with another i.e they have a high covariance. Lets take a look at the figure below
    to illustrate. We can clearly see that there is a large amount of variation in
    the percentages over time for all majors. Plotting these with a scatter plot would
    be extremely cluttered and quite messy, making it hard to really understand and
    see what’s going on. Line plots are perfect for this situation because they basically
    give us a quick summary of the covariance of the two variables (percentage and
    time). Again, we can also use grouping by colour encoding.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你可以清楚地看到一个变量随着另一个变量的变化而变化很大，即它们具有较高的协方差时，折线图最为适用。我们来看看下面的图示。我们可以清楚地看到所有专业的百分比随时间的变化量很大。用散点图绘制这些数据会非常混乱且杂乱无章，使得很难真正理解和看到发生了什么。折线图在这种情况下非常适合，因为它们基本上为我们提供了两个变量（百分比和时间）协方差的快速总结。同样，我们也可以使用颜色编码进行分组。
- en: '![](../Images/b8fa0297a7effc76060a527165a9fbce.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b8fa0297a7effc76060a527165a9fbce.png)'
- en: Example line plot
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 示例折线图
- en: Here’s the code for the line plot. It’s quite similar to the scatter above.
    with just some minor variations in variables.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是折线图的代码。它与上面的散点图非常相似，只是变量有一些小的变化。
- en: '**Histograms**'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**直方图**'
- en: Histograms are useful for viewing (or really discovering)the distribution of
    data points. Check out the histogram below where we plot the frequency vs IQ histogram.
    We can clearly see the concentration towards the center and what the median is.
    We can also see that it follows a Gaussian distribution. Using the bars (rather
    than scatter points, for example) really gives us a clearly visualization of the
    relative difference between the frequency of each bin. The use of bins (discretization)
    really helps us see the “bigger picture” where as if we use all of the data points
    without discrete bins, there would probably be a lot of noise in the visualization,
    making it hard to see what is really going on.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图对于查看（或真正发现）数据点的分布非常有用。查看下面的直方图，我们绘制了频率与智商的直方图。我们可以清楚地看到中心的集中情况以及中位数。我们还可以看到它遵循高斯分布。使用条形图（例如，而不是散点图）确实可以清晰地可视化每个箱子的频率之间的相对差异。使用箱子（离散化）真的帮助我们看到“大局”，而如果我们使用所有数据点而没有离散箱子，可能会有很多噪音在可视化中，使得很难看到实际情况。
- en: '![](../Images/6bf5eabc9429ff934a4ae6453f9b071c.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6bf5eabc9429ff934a4ae6453f9b071c.png)'
- en: Histogram example
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 直方图示例
- en: The code for the histogram in Matplotlib is shown below. There are two parameters
    to take note of. Firstly, the `n_bins` parameters controls how many discrete bins
    we want for our histogram. More bins will give us finer information but may also
    introduce noise and take us away from the bigger picture; on the other hand, less
    bins gives us a more “birds eye view” and a bigger picture of what’s going on
    without the finer details. Secondly, the `cumulative` parameter is a boolean which
    allows us to select whether our histogram is cumulative or not. This is basically
    selecting either the Probability Density Function (PDF) or the Cumulative Density
    Function (CDF).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib中的直方图代码如下。需要注意两个参数。首先，`n_bins`参数控制我们希望为直方图设置多少个离散的箱子。更多的箱子将提供更精细的信息，但也可能引入噪音并使我们偏离大局；另一方面，较少的箱子则能给我们一个更“宏观的视角”，并提供事件的整体图像，而没有细节。其次，`cumulative`参数是一个布尔值，允许我们选择直方图是否为累积的。这基本上是在选择概率密度函数（PDF）或累积分布函数（CDF）。
- en: 'Imagine we want to compare the distribution of two variables in our data. One
    might think that you’d have to make two separate histograms and put them side-by-side
    to compare them. But, there’s actually a better way: we can overlay the histograms
    with varying transparency. Check out the figure below. The Uniform distribution
    is set to have a transparency of 0.5 so that we can see what’s behind it. This
    allows use to directly view the two distributions on the same figure.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下我们要比较数据中两个变量的分布。可能有人会认为你需要制作两个单独的直方图并将它们并排放置以进行比较。但是，实际上有一个更好的方法：我们可以将直方图叠加，并改变透明度。查看下图。均匀分布的透明度设置为0.5，以便我们可以看到其背后的内容。这使我们能够在同一图上直接查看两个分布。
- en: '![](../Images/fccd5a3a4f137d0086914c063faa36bb.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fccd5a3a4f137d0086914c063faa36bb.png)'
- en: Overlaid Histogram
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 叠加直方图
- en: There are a few things to set up in code for the overlaid histograms. First,
    we set the horizontal range to accommodate both variable distributions. According
    to this range and the desired number of bins we can actually computer the width
    of each bin. Finally, we plot the two histograms on the same plot, with one of
    them being slightly more transparent.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为叠加直方图设置代码有几个步骤。首先，我们设置水平范围以适应两个变量分布。根据这个范围和所需的箱数，我们可以计算每个箱的宽度。最后，我们将两个直方图绘制在同一图上，其中一个稍微更透明。
- en: '**Bar Plots**'
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**条形图**'
- en: 'Bar plots are most effective when you are trying to visualize categorical data
    that has few (probably < 10) categories. If we have too many categories then the
    bars will be very cluttered in the figure and hard to understand. They’re nice
    for categorical data because you can easily see the difference between the categories
    based on the size of the bar (i.e magnitude); categories are also easily divided
    and colour coded too. There are 3 different types of bar plots we’re going to
    look at: regular, grouped, and stacked. Check out the code below the figures as
    we go along.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你试图可视化分类数据且分类较少（可能<10）时，条形图最为有效。如果分类过多，则条形图会在图中显得非常杂乱且难以理解。条形图对于分类数据很有用，因为你可以很容易地根据条形的大小（即幅度）看到分类之间的差异；分类也很容易分割和颜色编码。我们将要查看三种不同类型的条形图：普通、分组和堆积。查看下方的代码。
- en: The regular barplot is in the first figure below. In the `barplot()` function, `x_data` represents
    the tickers on the x-axis and `y_data` represents the bar height on the y-axis.
    The error bar is an extra line centered on each bar that can be drawn to show
    the standard deviation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正常的条形图在下图的第一个图中。在`barplot()`函数中，`x_data`表示x轴上的刻度线，`y_data`表示y轴上的条形高度。误差条是在每个条形中心绘制的额外线条，用于显示标准差。
- en: Grouped bar plots allow us to compare multiple categorical variables. Check
    out the second bar plot below. The first variable we are comparing is how the
    scores vary by group (groups G1, G2, ... etc). We are also comparing the genders
    themselves with the colour codes. Taking a look at the code, the `y_data_list` variable
    is now actually a list of lists, where each sublist represents a different group.
    We then loop through each group, and for each group we draw the bar for each tick
    on the x-axis; each group is also colour coded.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 分组条形图允许我们比较多个分类变量。查看下图中的第二个条形图。我们比较的第一个变量是分数如何按组（G1、G2、... 等）变化。我们还通过颜色编码比较性别本身。查看代码，`y_data_list`变量现在实际上是一个列表的列表，每个子列表代表一个不同的组。然后我们遍历每个组，对于每个组，我们为x轴上的每个刻度绘制条形；每个组也有颜色编码。
- en: Stacked bar plots are great for visualizing the categorical make-up of different
    variables. In the stacked bar plot figure below we are comparing the server load
    from day-to-day. With the colour coded stacks, we can easily see and understand
    which servers are worked the most on each day and how the loads compare to the
    other servers on all days. The code for this follows the same style as the grouped
    bar plot. We loop through each group, except this time we draw the new bars on
    top of the old ones rather than beside them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 堆积条形图非常适合可视化不同变量的分类组成。在下面的堆积条形图中，我们比较了从一天到另一天的服务器负载。通过颜色编码的堆积条形图，我们可以轻松地看到和理解哪些服务器在每一天工作最多，以及这些负载如何与其他服务器在所有天数上的负载进行比较。其代码遵循与分组条形图相同的风格。我们遍历每个组，只是这一次我们将新条形绘制在旧条形上方，而不是旁边。
- en: '![](../Images/78023abfdbdb84c01535503adb0ba437.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78023abfdbdb84c01535503adb0ba437.png)'
- en: Regular Bar Plot![](../Images/b5d77008e065c243a231e7852537ddcb.png)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 普通条形图![](../Images/b5d77008e065c243a231e7852537ddcb.png)
- en: Grouped Bar Plot![](../Images/0c46029383b5aea7ca0f9d7d296f9829.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 分组条形图！[](../Images/0c46029383b5aea7ca0f9d7d296f9829.png)
- en: Stacked Bar Plot
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 堆积条形图
- en: '**Box Plots**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**箱型图**'
- en: We previously looked at histograms which were great for visualizing the distribution
    of variables. But what if we need more information than that? Perhaps we want
    a clearer view of the standard deviation? Perhaps the median is quite different
    from the mean and thus we have many outliers? What if there is so skew and many
    of the values are concentrated to one side?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前看过直方图，它们对于可视化变量的分布非常有用。但如果我们需要更多的信息呢？也许我们想更清楚地看到标准差？也许中位数与均值差异很大，从而出现许多异常值？如果有偏斜，且许多值集中在一侧呢？
- en: That’s where boxplots come in. Box plots give us all of the information above.
    The bottom and top of the solid-lined box are always the first and third quartiles
    (i.e 25% and 75% of the data), and the band inside the box is always the second [quartile](https://en.wikipedia.org/wiki/Quartile) (the [median](https://en.wikipedia.org/wiki/Median)).
    The whiskers (i.e the dashed lines with the bars on the end) extend from the box
    to show the range of the data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是箱型图的用武之地。箱型图为我们提供了上述所有信息。箱子的底部和顶部始终是第一个和第三个四分位数（即数据的 25% 和 75%），箱子内部的带子始终是第二个
    [四分位数](https://en.wikipedia.org/wiki/Quartile)（即 [中位数](https://en.wikipedia.org/wiki/Median)）。须状线（即带有末端条的虚线）从箱子延伸以显示数据的范围。
- en: Since the box plot is drawn for each group/variable it’s quite easy to set up.
    The `x_data` is a list of the groups/variables. The Matplotlib function `boxplot()` makes
    a box plot for each column of the `y_data` or each vector in sequence `y_data`;
    thus each value in `x_data` corresponds to a column/vector in `y_data`. All we
    have to set then are the aesthetics of the plot.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于箱型图是为每个组/变量绘制的，所以设置起来非常简单。`x_data` 是一个包含组/变量的列表。Matplotlib 函数 `boxplot()`
    为 `y_data` 的每一列或 `y_data` 中的每个向量绘制箱型图；因此，`x_data` 中的每个值对应于 `y_data` 中的一列/向量。我们需要设置的只是图表的美学。
- en: '![](../Images/485a21c9085303e8c3ba807392c33560.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/485a21c9085303e8c3ba807392c33560.png)'
- en: Box plot example
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 箱型图示例
- en: '**Conclusion**'
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: There are your 5 quick and easy data visualizations using Matplotlib. Abstracting
    things into functions always makes your code easier to read and use! I hope you
    enjoyed this post and learned something new and useful. If you did, feel free
    to give it some claps.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用 Matplotlib 制作的 5 个快速且简单的数据可视化。将内容抽象成函数总能使你的代码更易读、更易用！希望你喜欢这篇文章并学到了新的有用的知识。如果是这样，请随意点赞。
- en: Cheers!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 干杯！
- en: '**Bio: [George Seif](https://towardsdatascience.com/@george.seif94)** is a
    Certified Nerd and AI / Machine Learning Engineer.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[George Seif](https://towardsdatascience.com/@george.seif94)** 是一位认证极客及人工智能/机器学习工程师。'
- en: '[Original](https://towardsdatascience.com/5-quick-and-easy-data-visualizations-in-python-with-code-a2284bae952f).
    Reposted with permission.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始](https://towardsdatascience.com/5-quick-and-easy-data-visualizations-in-python-with-code-a2284bae952f)。已获得许可转载。'
- en: '**Related:**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[The 5 Clustering Algorithms Data Scientists Need to Know](/2018/06/5-clustering-algorithms-data-scientists-need-know.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家需要了解的 5 种聚类算法](/2018/06/5-clustering-algorithms-data-scientists-need-know.html)'
- en: '[7 Simple Data Visualizations You Should Know in R](/2018/06/7-simple-data-visualizations-should-know-r.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该了解的 7 种 R 中的简单数据可视化](/2018/06/7-simple-data-visualizations-should-know-r.html)'
- en: '[5 of Our Favorite Free Visualization Tools](/2018/07/5-favorite-open-source-visualization-tools.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我们最喜欢的 5 个免费可视化工具](/2018/07/5-favorite-open-source-visualization-tools.html)'
- en: More On This Topic
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应了解的三个 R 库（即使你使用 Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让 Python 成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目的，寻找目的来…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[90亿美元的人工智能失败，深度解析](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
