- en: Search Millions of Documents for Thousands of Keywords in a Flash
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一瞬间搜索数百万份文档中的数千个关键词
- en: 原文：[https://www.kdnuggets.com/2017/09/search-millions-documents-thousands-keywords.html](https://www.kdnuggets.com/2017/09/search-millions-documents-thousands-keywords.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2017/09/search-millions-documents-thousands-keywords.html](https://www.kdnuggets.com/2017/09/search-millions-documents-thousands-keywords.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png)[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png)[评论](#comments)'
- en: '**By [Vikash Singh](https://medium.com/@vi3k6i5), Belong.co**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Vikash Singh](https://medium.com/@vi3k6i5)，Belong.co**。'
- en: '![](../Images/5241db5938fde65ba36e10d1a424d7e7.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5241db5938fde65ba36e10d1a424d7e7.png)'
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Say you have a document and you want to know if it talks about python (a term
    you care for)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一份文档，你想知道它是否谈论 python（这是你关心的术语）
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You want to check if the document contains the word python or not. So you open
    the document, press ctr+f and search for ‘python’. And you find it :)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你想检查文档是否包含“python”这个词。因此，你打开文档，按下 `ctrl+f` 并搜索“python”。然后你找到了它 :)
- en: 'Now say you have 100 such terms: [python, java, github, medium, etc.]'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你有 100 个这样的术语：[python, java, github, medium, etc.]
- en: You will open the document with a simple python code. Loop through each term,
    and see if the term is present or not.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用简单的 python 代码打开文档。遍历每个术语，查看该术语是否存在。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now say you have a 100 documents. Well you can open each document in a loop.
    Per document you search for each term in the document.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你有 100 份文档。你可以在循环中打开每份文档。每份文档中，你搜索每个术语。
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now say **java** should match **Java** but not **javascript**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设 **java** 应该匹配 **Java** 但不匹配 **javascript**。
- en: Better yet, **java** should match **j2ee** and **Java** both, but not **java
    script**.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的是，**java** 应该匹配 **j2ee** 和 **Java**，但不匹配 **java script**。
- en: '*(j2ee and java are synonyms, and did you notice the space in java script?)*'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*(j2ee 和 java 是同义词，你注意到“java script”中的空格了吗？)*'
- en: Now it’s getting interesting. How do you do that?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在事情变得有趣了。你怎么做呢？
- en: We ran into this problem last year @[Belong.co](https://medium.com/@BelongCo).
    We noticed that people talk about the same terms in multiple ways. *Big apple* could
    be either a *big apple*or *New York*. Luckily for us, we had some context. When
    our documents talk about *Python,* they 99.99 % of the times mean the programming
    language, not the animal.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们去年遇到了这个问题 @[Belong.co](https://medium.com/@BelongCo)。我们注意到人们用多种方式谈论相同的术语。*Big
    apple* 可能是 *big apple* 或 *New York*。幸运的是，我们有一些上下文。当我们的文档谈论 *Python* 时，它 99.99%
    的情况下指的是编程语言，而不是动物。
- en: But this didn’t simplify our problem. **Java** and **j2ee** are the same thing
    for us, but not **java script**. So how to extract this information from millions
    of documents?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并没有简化我们的问题。**Java** 和 **j2ee** 对我们来说是同一个东西，但 **java script** 不是。那么，如何从数百万份文档中提取这些信息呢？
- en: As you can imagine we wrote a *regex* based code. For 1 million documents and
    2K keywords the code took 24 hours to run. And life was good :)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所想，我们写了一段基于 *regex* 的代码。对于 100 万份文档和 2000 个关键词，代码运行了 24 小时。生活很美好 :)
- en: But soon we expanded to multi million documents with 10K+ keywords. And the
    same code was now going to take 10+ days to run. So we set out to find a better
    way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但不久后我们扩展到多百万文档和 10K+ 关键词。而相同的代码现在需要 10 多天才能运行。所以我们开始寻找更好的方法。
- en: I asked around in my office and [Vinay](https://www.linkedin.com/in/vinay-pande-54810813/) suggested
    I should take a look at Trie dictionary based approach. [Suresh](https://www.linkedin.com/in/suresh-lakshmanan/) suggested [Aho
    Corasick algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm).
    Got similar suggestions on [Stack overflow](https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我在办公室里问了一下，[Vinay](https://www.linkedin.com/in/vinay-pande-54810813/) 建议我看看基于
    Trie 字典的方法。[Suresh](https://www.linkedin.com/in/suresh-lakshmanan/) 建议使用 [Aho
    Corasick 算法](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm)。在 [Stack
    overflow](https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster)
    上也收到了类似的建议。
- en: Turns out, Aho Corasick algorithm can simultaneously search all keywords in
    one pass over the document. Now that is something.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现，Aho Corasick 算法可以在对文档进行一次扫描时同时搜索所有关键字。这确实很厉害。
- en: '[https://youtu.be/NQ8GeVCEgBs](https://youtu.be/NQ8GeVCEgBs)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://youtu.be/NQ8GeVCEgBs](https://youtu.be/NQ8GeVCEgBs)'
- en: Demo of flashtext on a sample input.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个样本输入上的 flashtext 演示。
- en: I wrote a custom implementation based on Trie data structure to suit our use
    case. It worked quite well. The keyword extraction process takes 15 mins with
    this algorithm. Down from 10+ days with the *regex* based approach.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我基于 Trie 数据结构编写了一个自定义实现以适应我们的用例。它运行得非常好。这个算法的关键字提取过程需要 15 分钟。比基于 *regex* 的方法缩短了
    10 多天。
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now Keyword extraction was working well. So I also added the capability to replace
    keyword with synonyms within the document.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在关键字提取效果很好。所以我还添加了在文档中用同义词替换关键字的功能。
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We were able to take advantage of this library in multiple projects. That’s
    when we decided to **open source** it. So here is a link to the code :) [https://github.com/vi3k6i5/flashtext](https://github.com/vi3k6i5/flashtext)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够在多个项目中利用这个库。这时我们决定 **开源** 它。所以这里是代码的链接 :) [https://github.com/vi3k6i5/flashtext](https://github.com/vi3k6i5/flashtext)
- en: It’s really simple to use: *[Python code coming up]*
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用起来非常简单： *[Python 代码即将发布]*
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And keyword replacement:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以及关键字替换：
- en: '[PRE14]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This is really useful because it helps in term expansion. Say you want to replace ***RC
    car***as ***Remote Control car***in product catalogue. Or say you want to extract ***Electrocardiogram*** as ***ECG. ***Both
    are easily doable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常有用，因为它有助于术语扩展。比如你想在产品目录中将 ***RC car*** 替换为 ***遥控车***。或者说你想将 ***Electrocardiogram***
    提取为 ***ECG***。这两者都很容易实现。
- en: '* * *'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you know someone who works on Entity recognition or NER or NLP or Word2vec,
    please share this blog with them. This library has been really useful for us in
    these areas. I am sure it would be useful to others also.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认识从事实体识别或 NER、NLP 或 Word2vec 的人，请与他们分享这个博客。这个库在这些领域对我们非常有用。我相信对其他人也会有帮助。
- en: Cheers :)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 干杯 :)
- en: '[Original](https://medium.com/@vi3k6i5/search-millions-of-documents-for-thousands-of-keywords-in-a-flash-b39e5d1e126a).
    Reposted with permission.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://medium.com/@vi3k6i5/search-millions-of-documents-for-thousands-of-keywords-in-a-flash-b39e5d1e126a)。经允许转载。'
- en: '**Bio: [Vikash Singh](https://medium.com/@vi3k6i5)** is a data scientist at belong.co,
    dealing with large volumes of text and multiple projects based on word embeddings.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历： [Vikash Singh](https://medium.com/@vi3k6i5)** 是 belong.co 的数据科学家，处理大量文本以及基于词嵌入的多个项目。'
- en: '**Related:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Python overtakes R, becomes the leader in Data Science, Machine Learning platforms](/2017/08/python-overtakes-r-leader-analytics-data-science.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 超越 R，成为数据科学、机器学习平台的领导者](/2017/08/python-overtakes-r-leader-analytics-data-science.html)'
- en: '[5 Free Resources for Getting Started with Deep Learning for Natural Language
    Processing](/2017/07/5-free-resources-getting-started-deep-learning-nlp.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个免费的深度学习资源，用于自然语言处理入门](/2017/07/5-free-resources-getting-started-deep-learning-nlp.html)'
- en: '[Text Mining 101: Mining Information From A Resume](/2017/05/text-mining-information-resume.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文本挖掘基础：从简历中挖掘信息](/2017/05/text-mining-information-resume.html)'
- en: More On This Topic
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How to Process a DataFrame with Millions of Rows in Seconds](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在几秒钟内处理具有百万行的数据框](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
- en: '[Hyperparameter Tuning Using Grid Search and Random Search in Python](https://www.kdnuggets.com/2022/10/hyperparameter-tuning-grid-search-random-search-python.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用网格搜索和随机搜索进行超参数调优的 Python 方法](https://www.kdnuggets.com/2022/10/hyperparameter-tuning-grid-search-random-search-python.html)'
- en: '[Elevate Your Search Engine Skills with Uplimit''s Search with ML Course!](https://www.kdnuggets.com/2023/10/uplimit-elevate-your-search-engine-skills-search-with-ml-course)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过Uplimit的机器学习搜索课程提升你的搜索引擎技能！](https://www.kdnuggets.com/2023/10/uplimit-elevate-your-search-engine-skills-search-with-ml-course)'
- en: '[Building a Visual Search Engine - Part 2: The Search Engine](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建视觉搜索引擎 - 第2部分：搜索引擎](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
- en: '[Classifying Long Text Documents Using BERT](https://www.kdnuggets.com/2022/02/classifying-long-text-documents-bert.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用BERT对长文本进行分类](https://www.kdnuggets.com/2022/02/classifying-long-text-documents-bert.html)'
- en: '[GPT4All is the Local ChatGPT for your Documents and it is Free!](https://www.kdnuggets.com/2023/06/gpt4all-local-chatgpt-documents-free.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GPT4All是你文档的本地ChatGPT，并且是免费的！](https://www.kdnuggets.com/2023/06/gpt4all-local-chatgpt-documents-free.html)'
