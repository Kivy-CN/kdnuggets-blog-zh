- en: Object-Oriented Programming Explained Simply for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html](https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/96e2f31dc1eaa9686d222cb562061d96.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Jelleke Vanooteghem](https://unsplash.com/@ilumire?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Object-Oriented Programming or OOP can be a tough concept to understand for
    beginners. And that’s mainly because it is not really explained in the right way
    in a lot of places. Normally a lot of books start by explaining OOP by talking
    about the three big terms — **Encapsulation, Inheritance and Polymorphism**. But
    the time the book can explain these topics, anyone who is just starting would
    already feel lost.
  prefs: []
  type: TYPE_NORMAL
- en: So, I thought of making the concept a little easier for fellow programmers,
    Data Scientists and Pythonistas. The way I intend to do is by removing all the
    Jargon and going through some examples. I would start by explaining classes and
    objects. Then I would explain why classes are important in various situations
    and how they solve some fundamental problems. In this way, the reader would also
    be able to understand the three big terms by the end of the post.
  prefs: []
  type: TYPE_NORMAL
- en: In this series of posts named[ **Python Shorts**](https://towardsdatascience.com/tagged/python-shorts),
    I will explain some simple but very useful constructs provided by Python, some
    essential tips, and some use cases I come up with regularly in my Data Science
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '***This post is about explaining OOP the laymen way.***'
  prefs: []
  type: TYPE_NORMAL
- en: What are Objects and Classes?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Put simply, everything in Python is an object and classes are a blueprint of
    objects. So when we write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We are creating an object `a` of class `int` holding the value 2 and object `b` of
    class `str` holding the value “Hello!”. In a way, these two particular classes
    are provided to us by default when we use numbers or strings.
  prefs: []
  type: TYPE_NORMAL
- en: Apart from these a lot of us end up working with classes and objects without
    even realizing it. For example, you are actually using a class when you use any
    Scikit-Learn model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here your classifier `clf` is an object and fit is a method defined in the class `RandomForestClassifier`
  prefs: []
  type: TYPE_NORMAL
- en: But Why Classes?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, we use them a lot when we are working with Python. But why really. What
    is it with classes? I could do the same with functions?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you can. But classes really provide you with a lot of power compared to
    functions. To quote an example, the `str` class has a lot of functions defined
    for the object which we can access just by pressing tab. One could also write
    all these functions, but that way, they would not be available to use just by
    pressing the tab button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/f2e2a1c598d8cac648f0e27713f03d01.png)'
  prefs: []
  type: TYPE_IMG
- en: This property of classes is called **encapsulation. **From [Wikipedia](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)) — ***encapsulation**** refers
    to the bundling of data with the methods that operate on that data, or the restricting
    of direct access to some of an object’s components*.
  prefs: []
  type: TYPE_NORMAL
- en: So here the `str` class bundles the data(“Hello!”) with all the methods that
    would operate on our data. I would explain the second part of that statement by
    the end of the post. In the same way, the `RandomForestClassifier` class bundles
    all the classifier methods (`fit`, `predict` etc.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Apart from this, Class usage can also help us to make the code much more modular
    and easy to maintain. So say we were to create a library like Scikit-Learn. We
    need to create many models, and each model will have a fit and predict method.
    If we don’t use classes, we will end up with a lot of functions for each of our
    different models like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This sort of a code structure is just a nightmare to work with, and hence Scikit-Learn
    defines each of the models as a class having the `fit` and `predict` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'So, now we understand why to use classes and how they are so important, how
    do we really go about using them? So, creating a class is pretty simple. Below
    is a boilerplate code for any class you will end up writing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We see a lot of new keywords here. The main ones are `class`,`__init__` and `self`.
    So what are these? Again, it is easily explained by some example.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you are working at a bank that has many accounts. We can create a class
    named account that would be used to work with any account. For example, below
    I create an elementary toy class `Account` which stores data for a user — namely `account_name` and `balance`.
    It also provides us with two methods to `deposit`/`withdraw` money to/from the
    bank account. Do read through it. It follows the same structure as the code above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create an account with a name Rahul and having an amount of 100 using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We can access the data for this account using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/ab17d66ae51505be847d46b6329a25ef.png)'
  prefs: []
  type: TYPE_IMG
- en: But, how are these attributes `balance` and `account_name` already set to 100,
    and “Rahul” respectively? We never did call the `__init__` method, so why did
    the object gets these attribute? The answer here is that `__init__` is a **magic
    method**(There are a lot of other magic methods which I would expand on in my
    next post on Magic Methods), which gets run whenever we create the object. So
    when we create `myAccount` , it automatically also runs the function `__init__`
  prefs: []
  type: TYPE_NORMAL
- en: 'So now we understand `__init__`, let us try to deposit some money into our
    account. We can do this by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/7d8f316ef9630bcc6180621607155e23.png)'
  prefs: []
  type: TYPE_IMG
- en: And our balance rose to 200\. But did you notice that our function `deposit` needed
    two arguments namely `self` and `amount,` yet we only provided one, and still,
    it works.
  prefs: []
  type: TYPE_NORMAL
- en: '**So, what is this **`**self**`**? ** The way I like to explain self is by
    calling the same function in an albeit different way. Below, I call the same function
    deposit belonging to the class `account` and provide it with the `myAccount` object
    and the `amount`. And now the function takes two arguments as it should.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/e6fc0a58d32132bee7048b4e8e53d64d.png)'
  prefs: []
  type: TYPE_IMG
- en: And our `myAccount` balance increases by 100 as expected. So it is the same
    function we have called. Now, that could only happen if `self` and `myAccount` are
    exactly the same object. When I call `myAccount.deposit(100)` Python provides
    the same object `myAccount` to the function call as the argument `self`. And that
    is why `self.balance` in the function definition really refers to `myAccount.balance`.
  prefs: []
  type: TYPE_NORMAL
- en: But, still, some problems remain
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/cf04bc78e16f04728298a8bdfeb0e9d0.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: We know how to create classes, but still, there is another important problem
    that I haven’t touched upon yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, suppose you are working with Apple iPhone Division, and you have to create
    a different Class for each iPhone model. For this simple example, let us say that
    our iPhone’s first version currently does a single thing only — Makes a call and
    has some memory. We can write the class as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, Apple plans to launch `iPhone1` and this `iPhone` Model introduces a new
    functionality — The ability to take a pic. One way to do this is to copy-paste
    the above code and create a new class `iPhone1` like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'But as you can see that is a lot of unnecessary duplication of code (shown
    in bold above) and Python has a solution for removing that code duplication. One
    good way to write our iPhone1 class is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And that is the concept of inheritance. As per [Wikipedia](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)): **Inheritance** is
    the mechanism of basing an object or class upon another object or class retaining
    similar implementation. Simply put, `iPhone1` has access to all the variables
    and methods defined in class `iPhone` now.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we don’t have to do any code duplication as we have inherited(taken)
    all the methods from our parent class iPhone. Thus we don’t have to define the `call` function
    again. Also, we don’t set the mobile_id and memory in the `__init__` function
    using super.
  prefs: []
  type: TYPE_NORMAL
- en: '**But what is this **`**super().__init__(memory,user_id)**`**?**'
  prefs: []
  type: TYPE_NORMAL
- en: In real life, your `__init__` functions won’t be these nice two-line functions.
    You would need to define a lot of variables/attributes in your class and copying
    pasting them for the child class (here iphone1) becomes cumbersome. Thus there
    exists super(). Here`**super().__init__()**`actually calls the `**__init__**`method
    of the parent `iPhone` Class here. So here when the `__init__` function of class `iPhone1` runs
    it automatically sets the `memory` and `user_id` of the class using the `__init__` function
    of the parent class.
  prefs: []
  type: TYPE_NORMAL
- en: '***Where do we see this in ML/DS/DL?*** Below is how we create a [PyTorch](https://mlwhiz.com/blog/2020/09/09/pytorch_guide/) model.
    This model inherits everything from the `nn.Module` class and calls the `__init__` function
    of that class using the `super` call.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**But what is Polymorphism? **We are getting better at understanding how classes
    work so I guess I would try to explain Polymorphism now. Look at the below class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here we have our base `class Shape` and the other derived classes — `Rectangle` and `Circle`.
    Also, see how we use multiple levels of inheritance in the `Square` class which
    is derived from `Rectangle` which in turn is derived from `Shape`. Each of these
    classes has a function called `area` which is defined as per the shape. So the
    concept that a function with the same name can do multiple things is made possible
    through **Polymorphism** in Python. ***In fact, that is the literal meaning of
    Polymorphism: “Something that takes many forms”. ***So here our function `area`
    takes multiple forms.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way that Polymorphism works with Python is with the `isinstance` of
    method. So using the above class, if we do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/38955b28a6cae5d8f7f03bb8724618cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, the instance type of the object `mySquare` is `Square`,
  prefs: []
  type: TYPE_NORMAL
- en: '`Rectangle` and `Shape`. And hence the object is polymorphic. This has a lot
    of good properties. For example, We can create a function that works with an `Shape` object,
    and it will totally work with any of the derived classes (`Square`, `Circle`, `Rectangle` etc.)
    by making use of Polymorphism.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/479a55964aa987ef1806f878a927ac55.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Some More Info:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Why do we see function names or attribute names starting with **Single and Double
    Underscores? **Sometimes we want to make our attributes and functions in classes
    private and not allow the user to see them. This is a part of **Encapsulation** where
    we want to “*restrict the direct access to some of an object’s components”.* For
    instance, let’s say, we don’t want to allow the user to see the memory(RAM) of
    our iPhone once it is created. In such cases, we create an attribute using underscores
    in variable names.
  prefs: []
  type: TYPE_NORMAL
- en: So when we create the `iPhone` Class in the below way, you won’t be able to
    access your phone `memory` or the `privatefunc` using Tab in your ipython notebooks
    because the attribute is made private now using _.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/d1853feefd419827342a8318a29d0cd4.png)'
  prefs: []
  type: TYPE_IMG
- en: But you would still be able to change the variable value using (Though not recommended)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/5bee417978dd83037a2eddd0405ddaef.png)'
  prefs: []
  type: TYPE_IMG
- en: You would also be able to use the method _privatefunc using `myphone._privatefunc()`.
    If you want to avoid that you can use double underscores in front of the variable
    name. For example, below the call to `print(myphone.__memory)` throws an error.
    Also, you are not able to change the internal data of an object by using `myphone.__memory
    = 1`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/c05f87c2f2ddd2dbfdb981150c7c9762.png)'
  prefs: []
  type: TYPE_IMG
- en: But, as you see you can access and modify these `self.__memory` values in your
    class definition in the function `setMemory` for instance.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/7a29c9ef2303425720d307e8d75a9347.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jeshoots.com](https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: 'I hope this has been useful for you to understand classes. There is still so
    much to classes that remain that I would cover in my next post on magic methods.
    Stay Tuned. Also, to summarize, in this post, we learned about OOP and creating
    classes along with the various fundamentals of OOP:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Encapsulation**: Object contains all the data for itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inheritance**: We can create a class hierarchy where methods from parent
    classes pass on to child classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Polymorphism**: A function takes many forms, or the object might have multiple
    types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To end this post, I would be giving an exercise for you to implement as I think
    it might clear some concepts for you. ***Create a class that lets you manage 3d
    objects(sphere and cube) with volumes and surface areas***. The basic boilerplate
    code is given below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: I will put the ***answer in the comments for this article.***
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn more about [Python](https://amzn.to/2XPSiiG), I would like
    to call out an excellent course on Learn [**Intermediate level Python**](https://bit.ly/2XshreA)
    from the University of Michigan. Do check it out.
  prefs: []
  type: TYPE_NORMAL
- en: I am going to be writing more of such posts in the future too. Let me know what
    you think about the series. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX) to be informed about them.
    As always, I welcome feedback and constructive criticism and can be reached on
    Twitter [@mlwhiz](https://twitter.com/MLWhiz).
  prefs: []
  type: TYPE_NORMAL
- en: Also, a small disclaimer — There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is Senior
    Statistical Analyst at WalmartLabs. Follow him on Twitter [@mlwhiz](https://twitter.com/MLWhiz).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[10 Underrated Python Skills](/2020/10/10-underrated-python-skills.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 bits of advice for Data Scientists](/2019/09/advice-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Classification Evaluation Metrics Every Data Scientist Must Know](/2019/10/5-classification-evaluation-metrics-every-data-scientist-must-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
