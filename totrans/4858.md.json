["```py\ndef hash_function(k):\n    *\"\"\"Hashes our transaction.\"\"\"* if type(k) is not str:\n        k = json.dumps(k, sort_keys=True)\n\n    return hashlib.sha256(k).hexdigest()\n```", "```py\ndef update_state(transaction, state):\n    state = state.copy()\n\n    for key in transaction:\n        if key in state.keys():\n            state[key] += transaction[key]\n        else:\n            state[key] = transaction[key]\n\n    return state\n```", "```py\n{‘transaction’: {‘Tom’: 9, ‘Medium’: 1}}\n```", "```py\ndef valid_transaction(transaction, state):\n    *\"\"\"A valid transaction must sum to 0.\"\"\"* if sum(transaction.values()) is not 0:\n        return False\n\n    for key in transaction.keys():\n        if key in state.keys():\n            account_balance = state[key]\n        else:\n            account_balance = 0\n\n        if account_balance + transaction[key] < 0:\n            return False\n\n    return True\n```", "```py\ndef make_block(transactions, chain):\n    *\"\"\"Make a block to go into the chain.\"\"\"* parent_hash = chain[-1]['hash']\n    block_number = chain[-1]['contents']['block_number'] + 1\n\n    block_contents = {\n        'block_number': block_number,\n        'parent_hash': parent_hash,\n        'transaction_count': block_number + 1,\n        'transaction': transactions\n    }\n\n    return {'hash': hash_function(block_contents), 'contents': block_contents}\n```", "```py\ndef check_block_hash(block):\n    expected_hash = hash_function(block['contents'])\n\n    if block['hash'] is not expected_hash:\n        raise\n\n    return\n```", "```py\ndef check_block_validity(block, parent, state):\n    parent_number = parent['contents']['block_number']\n    parent_hash = parent['hash']\n    block_number = block['contents']['block_number']\n\n    for transaction in block['contents']['transaction']:\n        if valid_transaction(transaction, state):\n            state = update_state(transaction, state)\n        else:\n            raise\n\n    check_block_hash(block)  # Check hash integrity\n\n    if block_number is not parent_number + 1:\n        raise\n\n    if block['contents']['parent_hash'] is not parent_hash:\n        raise\n\n    return state\n```", "```py\ndef check_chain(chain):\n    *\"\"\"Check the chain is valid.\"\"\"* if type(chain) is str:\n        try:\n            chain = json.loads(chain)\n            assert (type(chain) == list)\n        except ValueError:\n            # String passed in was not valid JSON\n            return False\n    elif type(chain) is not list:\n        return False\n\n    state = {}\n\n    for transaction in chain[0]['contents']['transaction']:\n        state = update_state(transaction, state)\n\n    check_block_hash(chain[0])\n    parent = chain[0]\n\n    for block in chain[1:]:\n        state = check_block_validity(block, parent, state)\n        parent = block\n\n    return state\n```", "```py\ndef add_transaction_to_chain(transaction, state, chain):\n    if valid_transaction(transaction, state):\n        state = update_state(transaction, state)\n    else:\n        raise Exception('Invalid transaction.')\n\n    my_block = make_block(state, chain)\n    chain.append(my_block)\n\n    for transaction in chain:\n        check_chain(transaction)\n\n    return state, chain\n```", "```py\ngenesis_block = {\n    'hash': hash_function({\n        'block_number': 0,\n        'parent_hash': None,\n        'transaction_count': 1,\n        'transaction': [{'Tom': 10}]\n    }),\n    'contents': {\n        'block_number': 0,\n        'parent_hash': None,\n        'transaction_count': 1,\n        'transaction': [{'Tom': 10}]\n    },\n}\n\nblock_chain = [genesis_block]\nchain_state = {'Tom': 10}\n```", "```py\nchain_state, block_chain = add_transaction_to_chain(transaction={'Tom': -1, 'Medium': 1}, state=chain_state, chain=block_chain)\n```", "```py\n{'Medium': 1, 'Tom': 9}\n```", "```py\n[{'contents': {'block_number': 0,\n               'parent_hash': None,\n               'transaction': [{'Tom': 10}],\n               'transaction_count': 1},\n  'hash': '064d0b480b3b92761f31831d30ae9f01954efaa62371b4b44f11465ec22abe93'},\n {'contents': {'block_number': 1,\n               'parent_hash': '064d0b480b3b92761f31831d30ae9f01954efaa62371b4b44f11465ec22abe93',\n               'transaction': {'Medium': 1, 'Tom': 9},\n               'transaction_count': 2},\n  'hash': 'b4ae25f0cc0ee0b0caa66b9a3473e9a108652d53b1dc22a40962fef5c8c0f08c'}]\n```"]