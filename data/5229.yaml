- en: 'SQL Case Study: Helping a Startup CEO Manage His Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 案例研究：帮助创业公司 CEO 管理数据
- en: 原文：[https://www.kdnuggets.com/2018/09/sql-case-study-helping-startup-ceo-manage-data.html](https://www.kdnuggets.com/2018/09/sql-case-study-helping-startup-ceo-manage-data.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/09/sql-case-study-helping-startup-ceo-manage-data.html](https://www.kdnuggets.com/2018/09/sql-case-study-helping-startup-ceo-manage-data.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/09/sql-case-study-helping-startup-ceo-manage-data.html?page=2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2018/09/sql-case-study-helping-startup-ceo-manage-data.html?page=2#comments)'
- en: '**By [Ezz El Din Abdullah](https://www.linkedin.com/in/ezzeddinabdullah/),
    Former Data Scientist Intern & Programming Tutor**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Ezz El Din Abdullah](https://www.linkedin.com/in/ezzeddinabdullah/)，前数据科学实习生及编程导师**'
- en: You may have heard that if you know English, you can mostly write queries with
    SQL. This is almost right, because SQL is very intuitive, and it is really like
    plain English.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过，如果你懂英语，你可以用 SQL 编写查询。这几乎是正确的，因为 SQL 非常直观，确实像普通英语。
- en: In this tutorial, you will learn how to create a table, insert values into it,
    use and understand some data types, use SELECT statements, UPDATE records, use
    some aggregate functions like COUNT(), MIN(), SUM(), use WHERE clause, remove
    a character from a string, cast a string to numeric values, write subquery, retrieve
    the top and bottom candidates, add a column, do a for loop, and make a histogram.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你将学习如何创建表格、插入值、使用和理解一些数据类型、使用 SELECT 语句、更新记录、使用一些聚合函数如 COUNT()、MIN()、SUM()、使用
    WHERE 子句、从字符串中删除字符、将字符串转换为数字值、编写子查询、检索顶端和底部候选项、添加列、做循环以及制作直方图。
- en: '![Image](../Images/64f8ef0e434222d28b74b283fc6e77f2.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/64f8ef0e434222d28b74b283fc6e77f2.png)'
- en: Though, if you love videos more than articles while learning, I have published
    this article as a practical course at Udemy “[**Intuitive SQL Database Case Study**](https://www.udemy.com/intuitive-sql-databases-case-study)”.
    This course includes all the snippets of codes written here and more in an interactive
    way on a SQL shell.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，如果你在学习时更喜欢视频而非文章，我在 Udemy 发布了这篇文章作为一个实践课程 “[**直观 SQL 数据库案例研究**](https://www.udemy.com/intuitive-sql-databases-case-study)”
    。这个课程包括了这里写的所有代码片段，以及在 SQL shell 上以互动方式展示的更多内容。
- en: All the previous tasks can be done by showing a case study to help you find
    some guidance to play with data in a practical way. The best thing to do while
    reading this tutorial is to write the codes I write and please do yourself a favor
    and make your hands dirty especially if you are a beginner because this is what
    makes you brilliant in this language (actually true for almost anything you learn).
    If you know some SQL, I hope you find this article useful as well and see some
    other things might add to your knowledge.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所有之前的任务都可以通过展示案例研究来完成，以帮助你找到一些指导，以实际的方式处理数据。在阅读这个教程时，最好做的是编写我写的代码，并且请给自己一个机会，让你的双手动起来，特别是如果你是初学者，因为这使你在这门语言中变得出色（实际上对于你学习的几乎所有东西都适用）。如果你知道一些
    SQL，希望你也能觉得这篇文章对你有用，并且发现一些其他可以增加你知识的东西。
- en: I’m working with PostgreSQL which is a general-purpose database management system,
    but you can still do all the codes for MySQL, Oracle, DB2, etc. If you just happen
    to find that a piece of code does not work, please ask google about the syntax
    of the database management system you use.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用 PostgreSQL，这是一个通用数据库管理系统，但你仍然可以使用 MySQL、Oracle、DB2 等数据库的所有代码。如果你发现某段代码不起作用，请询问谷歌关于你使用的数据库管理系统的语法。
- en: 'Let’s say, we would like to have this table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们想要这样的表：
- en: '| Id | name | age | city | salary |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| Id | 名字 | 年龄 | 城市 | 工资 |'
- en: '| 1 | Wael | 23 | Cairo | 800$ |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Wael | 23 | 开罗 | 800$ |'
- en: '| 2 | Ragab | 24 | Giza | 900$ |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Ragab | 24 | 吉萨 | 900$ |'
- en: '| 3 | Ali | 24 | Giza | 1500$ |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 3 | Ali | 24 | 吉萨 | 1500$ |'
- en: '| 4 | Othman | 25 | Giza | 2000$ |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 4 | Othman | 25 | 吉萨 | 2000$ |'
- en: '| 5 | Waleed | 26 | Cairo | 2100$ |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Waleed | 26 | 开罗 | 2100$ |'
- en: '| 6 | Abdo | 23 | Alex | 900$ |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| 6 | Abdo | 23 | 亚历克斯 | 900$ |'
- en: '| 7 | Moetaz | 22 | Cairo | 800$ |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| 7 | Moetaz | 22 | 开罗 | 800$ |'
- en: '**Creating a table:**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建表格：**'
- en: 'We can create such a table using the following query:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下查询创建这样的表：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s see in more detail what happened for what we wrote. We created a table
    using create(). The table is called startup and it includes the id city with the
    data type integer with no possible NULL values; we’ll see why later. The second
    column is ‘name’ whose data type is a varchar(10) which is a variable-length character
    of 10 characters i.e. ‘Ali’ will take 3 character-size in memory while ‘Othman’
    will take 6 character-size in memory. This column can also be stored as a char
    which is a fixed-length character of 10 but in this case ‘Ali’ will take 10 character-size
    in memory while ‘Othman’ will take also 10 character-size in memory. The ‘name’
    column can also be stored as a text which is not very wise for storage because
    text can take up to 2GB of text data in memory. When writing queries, you should
    put storage into consideration because your table can contain large amounts of
    data and retrieving them may not be as fast as you desire.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地看看我们写的内容。我们使用 `create()` 创建了一个表。这个表叫做 startup，它包括了一个名为 id 的城市列，其数据类型为整数，并且不允许
    NULL 值；稍后我们将解释原因。第二列是 ‘name’，其数据类型为 varchar(10)，这是一个可变长度的字符类型，最大为 10 个字符，即 ‘Ali’
    在内存中占用 3 个字符的空间，而 ‘Othman’ 占用 6 个字符的空间。这个列也可以存储为 char，它是一个固定长度的字符类型为 10，但在这种情况下，‘Ali’
    会在内存中占用 10 个字符的空间，而 ‘Othman’ 也会占用 10 个字符的空间。‘name’ 列也可以存储为 text，这对于存储来说不是很明智，因为
    text 类型可以在内存中占用最多 2GB 的数据。在编写查询时，你应该考虑存储，因为你的表可能包含大量数据，检索这些数据可能没有你希望的那么快。
- en: Back to the query, the ‘name’ column cannot be NULL (i.e. should contain a name
    not nothing). The ‘age’ column contains integer values and only the positive numbers
    are allowed. The ‘city’ and ‘salary’ contain variable-length character of 10 and
    5 characters respectively. Finally, the ‘id’ column contain unique values (a primary
    key). This means it cannot contain duplicate values (integers in our case). This
    syntax could be done when defining id as int, so it can be done as such ‘id int
    primary key not null’.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 回到查询中，‘name’ 列不能为 NULL（即应该包含一个名字而不是空值）。‘age’ 列包含整数值，并且只允许正数。‘city’ 和 ‘salary’
    分别包含可变长度的字符类型 10 和 5 个字符。最后，‘id’ 列包含唯一值（主键）。这意味着它不能包含重复的值（在我们的例子中是整数）。这种语法可以在定义
    id 为 int 时完成，因此可以这样做：‘id int primary key not null’。
- en: Notice that SQL is case insensitive, so any key words from the above query can
    be lower case, but it’s a good practice to make them in upper case.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 SQL 不区分大小写，因此上述查询中的任何关键字都可以使用小写字母，但使用大写字母是一种好的实践。
- en: '**Retrieving the data:**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**检索数据：**'
- en: 'Now, we can retrieve what we have so far through:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过以下方式检索到目前为止的内容：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The SELECT clause is the most used key word in SQL. This query simply can retrieve
    all the data from the startup table. As we can use from the result, it includes
    all the columns we created with 0 rows in it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT 子句是 SQL 中最常用的关键字。这个查询简单地从 startup 表中检索所有数据。正如我们从结果中看到的，它包括我们创建的所有列，且目前没有行数据。
- en: '**Inserting values into a table:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**向表中插入值：**'
- en: 'Let’s fill the first row in this table:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们填充这个表中的第一行：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now the first row is done:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在第一行已经完成：
- en: '| Id | name | age | city | salary |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| Id | name | age | city | salary |'
- en: '| 1 | Wael | 23 | Cairo | 800$ |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Wael | 23 | Cairo | 800$ |'
- en: 'Let’s write the previous query again and see what happens:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新写一遍之前的查询，看看会发生什么：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We see an error telling us:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到一个错误提示我们：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That’s because the id is a primary key and can only contain unique values not
    duplicates like the id = 1.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那是因为 id 是主键，只能包含唯一值，不能有像 id = 1 这样的重复值。
- en: 'If you made a mistake and enter a negative number for the age like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你犯了一个错误，并为年龄输入了负数，例如这样：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will get an error:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会得到一个错误：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That’s because you already made a constraint with a CHECK clause to include
    only the positive numbers.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那是因为你已经通过 CHECK 子句设置了一个约束，只允许正数。
- en: 'Let’s do another query to form the second row:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一个查询来形成第二行：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let’s see what will happen if I do the following to fill the third row:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如果我这样做来填充第三行会发生什么：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There is an error telling us:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 会有一个错误提示我们：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That’s because the column ‘name’ which contains ‘Ali’ is not appearing as a
    string so we need to put it between single quotes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那是因为包含 ‘Ali’ 的 ‘name’ 列没有以字符串形式出现，所以我们需要将其放在单引号之间。
- en: 'When forming the fourth row:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在形成第四行时：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s fill the rest of the columns:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们填充其余的列：
- en: '[PRE11]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the last row, I made a mistake and put the salary 2000$ not 800$. We can
    fix this by an updating query:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一行，我犯了一个错误，把薪水填成了 2000$ 而不是 800$。我们可以通过一个更新查询来修复这个问题：
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The UPDATE clause is used followed by the name of the table setting the salary
    to 800$ for a condition where we do know that it defines the row of interest like
    the id = 7.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: UPDATE 子句被使用，后跟表名，将薪资设置为 800$，条件是我们知道它定义了感兴趣的行，例如 id = 7。
- en: '**Inserting into specific columns:**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**插入到特定列中：**'
- en: 'Let’s try to add another row with specific columns; id and salary values:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试添加另一行，包含特定列；例如 id 和薪资值：
- en: '[PRE13]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will introduce an error telling us:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将引发一个错误，提示我们：
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This means you must fill the column ‘name’ because we defined it as NOT NULL
    which means we can NOT let it empty; it must take value.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你必须填写‘name’列，因为我们将其定义为 NOT NULL，这意味着我们不能让它为空；它必须有值。
- en: 'So, we can fix this by adding the name column to the query:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们可以通过在查询中添加名称列来解决这个问题：
- en: '[PRE15]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: More On This Topic
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Automated Machine Learning with Python: A Case Study](https://www.kdnuggets.com/2023/04/automated-machine-learning-python-case-study.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 进行自动化机器学习：一个案例研究](https://www.kdnuggets.com/2023/04/automated-machine-learning-python-case-study.html)'
- en: '[12 Tips: From Data Analyst to Startup Co-Founder](https://www.kdnuggets.com/2021/12/12-tips-data-analyst-to-co-founder.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[12 个建议：从数据分析师到初创公司联合创始人](https://www.kdnuggets.com/2021/12/12-tips-data-analyst-to-co-founder.html)'
- en: '[10 Hurdles of Building a Deep Tech Startup in the Age of ChatGPT](https://www.kdnuggets.com/2023/04/10-hurdles-building-deep-tech-startup-age-chatgpt.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 ChatGPT 时代建立深科技初创公司的 10 个障碍](https://www.kdnuggets.com/2023/04/10-hurdles-building-deep-tech-startup-age-chatgpt.html)'
- en: '[KDnuggets News, August 31: The Complete Data Science Study Roadmap…](https://www.kdnuggets.com/2022/n35.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，8月31日：完整的数据科学学习路线图…](https://www.kdnuggets.com/2022/n35.html)'
- en: '[Super Study Guide: A Free Algorithms and Data Structures eBook](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超级学习指南：免费的算法与数据结构电子书](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
- en: '[The Complete Data Science Study Roadmap](https://www.kdnuggets.com/2022/08/complete-data-science-study-roadmap.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[完整的数据科学学习路线图](https://www.kdnuggets.com/2022/08/complete-data-science-study-roadmap.html)'
