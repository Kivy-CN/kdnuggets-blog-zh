["```py\n#Importing libraries for data management\n\nimport gzip\nimport json\nimport pandas as pd\nfrom tqdm import tqdm_notebook as tqdm\n\n#Importing libraries for feature engineering\nimport nltk\nimport re\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.metrics.pairwise import cosine_similarity\n```", "```py\n#Creating an empty list\ndata = []\n\n#Decoding the gzip file\ndef parse(path):\n  g = gzip.open(path, 'r')\n  for l in g:\n    yield json.dumps(eval(l))\n\n#Defining f as the file that will contain json data\nf = open(\"output_strict.json\", 'w')\n\n#Defining linebreak as '\\n' and writing one at the end of each line\nfor l in parse(\"meta_Electronics.json.gz\"):\n  f.write(l + '\\n')\n\n#Appending each json element to the empty 'data' list\nwith open('output_strict.json', 'r') as f:\n    for l in tqdm(f):\n        data.append(json.loads(l))\n\n#Reading 'data' as a pandas dataframe\nfull = pd.DataFrame(data)\n```", "```py\nprint(data[0])\n\noutput: \n{\n'asin': '0132793040', \n'imUrl': 'http://ecx.images-amazon.com/images/I/31JIPhp%2BGIL.jpg', \n'description': 'The Kelby Training DVD Mastering Blend Modes in Adobe Photoshop CS5 with Corey Barker is a useful tool for...and confidence you need.', \n'categories': [['Electronics', 'Computers & Accessories', 'Cables & Accessories', 'Monitor Accessories']], \n'title': 'Kelby Training DVD: Mastering Blend Modes in Adobe Photoshop CS5 By Corey Barker'\n}\n```", "```py\n| asin   | imUrl   | description   | categories   |\n|--------|---------|---------------|--------------|\n| price   | salesRank   | related   | brand   |\n|---------|-------------|-----------|---------|\n```", "```py\n#Dropping each row containing a NaN value within selected columns\ndf = full.dropna(subset=['categories', 'title', 'brand'])\n\n#Resetting index count\ndf = df.reset_index()\n```", "```py\n#Creating datasoup made of selected columns\ndf['ensemble'] = df['title'] + ' ' + \ndf['categories'].astype(str) + ' ' + \ndf['brand']\n\n#Printing record at index 0\ndf['ensemble'].iloc[0]\n\noutput: \n\"Barnes & Noble NOOK Power Kit in Carbon BNADPN31 \n[['Electronics', 'eBook Readers & Accessories', 'Power Adapters']] \nBarnes & Noble\"\n```", "```py\n#Defining text cleaning function\ndef text_cleaning(text):\n    forbidden_words = set(stopwords.words('english'))\n    text = re.sub(r'amp','',text)\n    text = re.sub(r'\\s+', ' ', re.sub('[^A-Za-z0-9]', ' ', \n           text.strip().lower())).strip()\n    text = [word for word in text.split() if word not in forbidden_words]\n    return ' '.join(text)\n```", "```py\n#Applying text cleaning function to each row\ndf['ensemble'] = df['ensemble'].apply(lambda text: text_cleaning(text))\n\n#Printing line at Index 10000\ndf['ensemble'].iloc[10000]\n\noutput:\n'vcool vga cooler electronics computers accessories \ncomputer components fans cooling case fans antec'\n```", "```py\n#Selecting first 35000 rows\ndf = df.head(35000)\n\n#creating count_vect object\ncount_vect = CountVectorizer()\n\n#Create Matrix\ncount_matrix = count_vect.fit_transform(df['ensemble'])\n\n# Compute the cosine similarity matrix\ncosine_sim = cosine_similarity(count_matrix, count_matrix)\n```", "```py\n#Creating a Pandas Series from df's index\nindices = pd.Series(df.index, index=df['title']).drop_duplicates()\n```", "```py\n# Function that takes in product title as input and gives recommendations\ndef content_recommender(title, cosine_sim=cosine_sim, df=df,\nindices=indices):\n\n    # Obtain the index of the product that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all products with that product\n    # And convert it into a list of tuples as described above\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the products based on the cosine similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 30 most similar products. Ignore the first product.\n    sim_scores = sim_scores[1:30]\n\n    # Get the product indices\n    product_indices = [i[0] for i in sim_scores]\n\n    # Return the top 30 most similar products\n    return df['title'].iloc[product_indices]\n```", "```py\n#Define the product we want to recommend other items from\nproduct_title = 'Vcool VGA Cooler'\n\n#Launching the content_recommender function\nrecommendations = content_recommender(product_title)\n\n#Associating titles to recommendations\nasin_recommendations = df[df['title'].isin(recommendations)]\n\n#Merging datasets\nrecommendations = pd.merge(recommendations, \n                           asin_recommendations, \n                           on='title', \n                           how='left')\n\n#Showing top 5 recommended products\nrecommendations['title'].head()\n```", "```py\n1    Antec Big Boy 200 - 200mm Tricool Computer Case Fan                                                            \n2    Antec Cyclone Blower, Expansion Slot Cooling Fan                                                               \n3    StarTech.com 90x25mm High Air Flow Dual Ball Bearing Computer Case Fan with TX3 Cooling Fan FAN9X25TX3H (Black)\n4    Antec 120MM BLUE LED FAN Case Fan (Clear)                                                                      \n5    Antec PRO 80MM 80mm Case Fan Pro with 3-Pin & 4-Pin Connector (Discontinued by Manufacturer)\n```", "```py\n#Selecting the 'related' column of the product we computed recommendations for\nrelated = pd.DataFrame.from_dict(df['related'].iloc[10000], orient='index').transpose()\n\n#Printing first 10 records of the dataset\nrelated.head(10)\n```", "```py\n|    | also_bought   | bought_together   | buy_after_viewing   |\n|---:|:--------------|:------------------|:--------------------|\n|  0 | B000051299    | B000233ZMU        | B000051299          |\n|  1 | B000233ZMU    | B000051299        | B00552Q7SC          |\n|  2 | B000I5KSNQ    |                   | B000233ZMU          |\n|  3 | B00552Q7SC    |                   | B004X90SE2          |\n|  4 | B000HVHCKS    |                   |                     |\n|  5 | B0026ZPFCK    |                   |                     |\n|  6 | B009SJR3GS    |                   |                     |\n|  7 | B004X90SE2    |                   |                     |\n|  8 | B001NPEBEC    |                   |                     |\n|  9 | B002DUKPN2    |                   |                     |\n| 10 | B00066FH1U    |                   |                     |\n```", "```py\n#Checking if recommended products are in the 'also_bought' column for\n#final evaluation of the recommender\n\nrelated['also_bought'].isin(recommendations['asin'])\n```", "```py\n[True False  True False False False False False False False  True False False False False False False  True False False False False False False False False  True False False False False False False False False False False False False False False False False False]\n```"]