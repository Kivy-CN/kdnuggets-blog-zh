["```py\n!nvcc --version\n```", "```py\nnvcc: NVIDIA (R) Cuda compiler driver\nCopyright (c) 2005-2022 NVIDIA Corporation\nBuilt on Wed_Sep_21_10:33:58_PDT_2022\nCuda compilation tools, release 11.8, V11.8.89\nBuild cuda_11.8.r11.8/compiler.31833905_0\n```", "```py\npip install cupy-cuda11x\n```", "```py\nconda install -c conda-forge cupy\n```", "```py\nimport cupy as cp\nimport numpy as np\n\nx = [3, 4, 5]\n\nx_np = np.array(x)\nx_cp = cp.array(x)\n\nl2_np = np.linalg.norm(x_np)\nl2_cp = cp.linalg.norm(x_cp)\n\nprint(\"Numpy: \", l2_np)\nprint(\"Cupy: \", l2_cp)\n```", "```py\nNumpy:  7.0710678118654755\nCupy:  7.0710678118654755\n```", "```py\nx_array = np.array([10, 22, 30])\nx_cp_array = cp.asarray(x_array)\ntype(x_cp_array)\n```", "```py\ncupy.ndarray\n```", "```py\nx_np_array = x_cp_array.get()\ntype(x_np_array)\n```", "```py\nnumpy.ndarray\n```", "```py\nimport time\n\n# NumPy and CPU Runtime\ns = time.time()\nx_cpu = np.ones((1000, 100, 1000))\nnp_result = np.sqrt(np.sum(x_cpu**2, axis=-1))\ne = time.time()\nnp_time = e - s\nprint(\"Time consumed by NumPy: \", np_time)\n```", "```py\nTime consumed by NumPy: 0.5474584102630615\n```", "```py\n# CuPy and GPU Runtime\ns = time.time()\nx_gpu = cp.ones((1000, 100, 1000))\ncp_result = cp.sqrt(cp.sum(x_gpu**2, axis=-1))\ne = time.time()\ncp_time = e - s\nprint(\"\\nTime consumed by CuPy: \", cp_time)\n```", "```py\nTime consumed by CuPy: 0.001028299331665039\n```", "```py\ndiff = np_time/cp_time\nprint(f'\\nCuPy is {diff: .2f} X time faster than NumPy')\n```", "```py\nCuPy is 532.39 X time faster than NumPy\n```"]