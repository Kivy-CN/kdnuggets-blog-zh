- en: Artificial Neural Network Implementation using NumPy and Image Classification
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumPy和图像分类的人工神经网络实现
- en: 原文：[https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html/2](https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html/2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html/2](https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html/2)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html?page=2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html?page=2#comments)'
- en: ANN Implementation
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ANN 实现
- en: The next figure visualizes the target ANN structure. There is an input layer
    with 102 inputs, 2 hidden layers with 150 and 60 neurons, and an output layer
    with 4 outputs (one for each fruit class).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下一图展示了目标ANN结构。输入层有102个输入，2个隐藏层分别有150个和60个神经元，以及一个有4个输出（每个水果类别一个）的输出层。
- en: '![](../Images/713689ba5ab8a28eaf6a6aad078bdfe1.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/713689ba5ab8a28eaf6a6aad078bdfe1.png)'
- en: The input vector at any layer is multiplied (matrix multiplication) by the weights
    matrix connecting it to the next layer to produce an output vector. Such an output
    vector is again multiplied by the weights matrix connecting its layer to the next
    layer. The process continues until reaching the output layer. Summary of the matrix
    multiplications is in the next figure.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 任意层的输入向量都通过与下一层连接的权重矩阵进行乘法运算（矩阵乘法）以生成输出向量。该输出向量再次通过连接其层与下一层的权重矩阵进行乘法运算。该过程持续进行，直到到达输出层。矩阵乘法的总结在下图中。
- en: '![](../Images/5877059b505795d9234a289831d0fbb4.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5877059b505795d9234a289831d0fbb4.png)'
- en: The input vector of size 1x102 is to be multiplied by the weights matrix of
    the first hidden layer of size 102x150\. Remember it is matrix multiplication.
    Thus, the output array shape is 1x150\. Such output is then used as the input
    to the second hidden layer, where it is multiplied by a weights matrix of size
    150x60\. The result size is 1x60\. Finally, such output is multiplied by the weights
    between the second hidden layer and the output layer of size 60x4\. The result
    finally has a size of 1x4\. Every element in such resulted vector refers to an
    output class. The input sample is labeled according to the class with the highest
    score.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 输入向量的大小为1x102，将与第一隐藏层的权重矩阵（大小为102x150）相乘。记住这是矩阵乘法。因此，输出数组的形状为1x150。此输出随后作为第二隐藏层的输入，其中与大小为150x60的权重矩阵相乘。结果的大小为1x60。最后，这种输出与第二隐藏层和输出层之间的权重（大小为60x4）相乘。最终结果的大小为1x4。每个元素代表一个输出类别。输入样本根据得分最高的类别进行标记。
- en: The Python code for implementing such multiplications is in listed below.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 实现这些乘法的Python代码列在下面。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After reading the previously saved features and their output labels and filtering
    the features, the weights matrices of the layers are defined. They are randomly
    given values from -0.1 to 0.1\. For example, the variable **"input_HL1_weights"**
    holds the weights matrix between the input layer and the first hidden layer. Size
    of such matrix is defined according to the number of feature elements and the
    number of neurons in the hidden layer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取之前保存的特征及其输出标签并过滤特征后，层的权重矩阵被定义。这些矩阵的值在-0.1到0.1之间随机分配。例如，变量**"input_HL1_weights"**保存了输入层和第一个隐藏层之间的权重矩阵。这种矩阵的大小根据特征元素的数量和隐藏层神经元的数量来定义。
- en: After creating the weights matrices, next is to apply matrix multiplications.
    For example, the variable **"H1_outputs"** holds the output of multiplying the
    feature vector of a given sample to the weights matrix between the input layer
    and the first hidden layer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建权重矩阵之后，接下来是应用矩阵乘法。例如，变量**"H1_outputs"**保存了将给定样本的特征向量与输入层和第一个隐藏层之间的权重矩阵相乘的输出。
- en: Usually, an activation function is applied to the outputs of each hidden layer
    to create a non-linear relationship between the inputs and the outputs. For example,
    outputs of the matrix multiplications are applied to the sigmoid activation function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，激活函数被应用于每个隐藏层的输出，以在输入和输出之间创建非线性关系。例如，矩阵乘法的输出应用于sigmoid激活函数。
- en: After generating the output layer outputs, prediction takes place. The predicted
    class label is saved into the **"predicted_label"** variable. Such steps are repeated
    for each input sample. The complete code that works across all samples is given
    below.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成输出层输出后，进行预测。预测的类别标签被保存到**"predicted_label"**变量中。这样的步骤对每个输入样本重复进行。完整的代码如下所示。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The **"weights"** variables hold all weights across the entire network. Based
    on the size of each weight matrix, the network structure is dynamically specified.
    For example, if the size of the **"input_HL1_weights"** variable is 102x80, then
    we can deduce that the first hidden layer has 80 neurons.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**"weights"**变量保存了整个网络的所有权重。根据每个权重矩阵的大小，网络结构会动态指定。例如，如果**"input_HL1_weights"**变量的大小是102x80，那么我们可以推断出第一个隐藏层有80个神经元。'
- en: The **"train_network"** is the core function as it trains the network by looping
    through all samples. For each sample, the steps discussed in listing 3-6 are applied.
    It accepts the number of training iterations, feature, output labels, weights,
    learning rate, and the activation function. There are two options for the activation
    functions which are either ReLU or sigmoid. ReLU is a thresholding function that
    returns the same input as long as it is greater than zero. Otherwise, it returns
    zero.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**"train_network"**是核心函数，因为它通过循环遍历所有样本来训练网络。对于每个样本，都会应用在列表3-6中讨论的步骤。它接受训练迭代次数、特征、输出标签、权重、学习率和激活函数。激活函数有两个选项：ReLU或sigmoid。ReLU是一个阈值函数，只要输入大于零，就返回相同的输入。否则，它返回零。'
- en: If the network made a false prediction for a given sample, then weights are
    updated using the **"update_weights"** function. No optimization algorithm is
    used to update the weights. Weights are simply updated according to the learning
    rate. The accuracy does not exceed 45%. For achieving better accuracy, an optimization
    algorithm is used for updating the weights. For example, you can find the gradient
    descent technique in the ANN implementation of the scikit-learn library.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果网络对给定样本做出了错误预测，那么权重将通过**"update_weights"**函数进行更新。更新权重时不使用优化算法。权重仅根据学习率进行更新。准确率不会超过45%。为了获得更好的准确率，会使用优化算法来更新权重。例如，你可以在scikit-learn库的ANN实现中找到梯度下降技术。
- en: 'In my book, you can find a guide for optimizing the ANN weights using the genetic
    algorithm (GA) optimization technique which increases the classification accuracy.
    You can read more about GA from the following resources I prepared:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的书中，你可以找到使用遗传算法（GA）优化技术来优化ANN权重的指南，这可以提高分类准确率。你可以从我准备的以下资源中了解更多关于GA的内容：
- en: Introduction to Optimization with Genetic Algorithm
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遗传算法优化介绍
- en: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
- en: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
- en: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
- en: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
- en: Genetic Algorithm (GA) Optimization - Step-by-Step Example
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遗传算法（GA）优化 - 步骤示例
- en: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
- en: Genetic Algorithm Implementation in Python
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 遗传算法在Python中的实现
- en: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
- en: '[https://www.kdnuggets.com/2018/07/genetic-algorithm-implementation-python.html](/2018/07/genetic-algorithm-implementation-python.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ahmedfgad/GeneticAlgorithmPython](https://github.com/ahmedfgad/GeneticAlgorithmPython)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For contacting the author
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'LinkedIn: [https://www.linkedin.com/in/ahmedfgad](https://www.linkedin.com/in/ahmedfgad)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Facebook: [https://www.facebook.com/ahmed.f.gadd](https://www.facebook.com/ahmed.f.gadd)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter: [https://twitter.com/ahmedfgad](https://twitter.com/ahmedfgad)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Towards Data Science: [https://towardsdatascience.com/@ahmedfgad](https://towardsdatascience.com/@ahmedfgad)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'KDnuggets: [https://www.kdnuggets.com/author/ahmed-gad](/author/ahmed-gad)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E-mail: ahmed.f.gad@gmail.com'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Original](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad/).
    Reposted with permission.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[Neural Networks - an Intuition](https://www.kdnuggets.com/2019/02/neural-networks-intuition.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Create a Simple Neural Network in Python](https://www.kdnuggets.com/2018/10/simple-neural-network-python.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Convolutional Neural Network using NumPy from Scratch](https://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Image Classification with Convolutional Neural Networks (CNNs)](https://www.kdnuggets.com/2022/05/image-classification-convolutional-neural-networks-cnns.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
