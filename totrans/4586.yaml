- en: The 5 Graph Algorithms That Data Scientists Should Know
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家应该知道的5种图算法
- en: 原文：[https://www.kdnuggets.com/2019/09/5-graph-algorithms-data-scientists-know.html](https://www.kdnuggets.com/2019/09/5-graph-algorithms-data-scientists-know.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/09/5-graph-algorithms-data-scientists-know.html](https://www.kdnuggets.com/2019/09/5-graph-algorithms-data-scientists-know.html)
- en: '[comments](#comments)![Figure](../Images/4b410eb2ecdf09cf1fc254d5fdae2a0d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图](../Images/4b410eb2ecdf09cf1fc254d5fdae2a0d.png)'
- en: We as data scientists have gotten quite comfortable with Pandas or SQL or any
    other relational database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，我们对 Pandas、SQL 或任何其他关系型数据库都已经相当熟悉。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织 IT 工作'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: We are used to seeing our users in rows with their attributes as columns. But
    does the real world really behave like that?
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们习惯于将用户按行显示，属性作为列。但现实世界真的这样吗？
- en: In a connected world, users cannot be considered as independent entities. They
    have got certain relationships between each other and we would sometimes like
    to include such relationships while building our machine learning models.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个连通的世界中，用户不能被视为独立的实体。他们之间存在某些关系，我们有时希望在构建机器学习模型时包括这些关系。
- en: Now while in a relational database, we cannot use such relations between different
    rows(users), in a graph database it is fairly trivial to do that.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在关系型数据库中，我们无法在不同的行（用户）之间使用这样的关系，而在图数据库中，这相当简单。
- en: '***In this post, I am going to be talking about some of the most important
    graph algorithms you should know and how to implement them using Python.***'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '***在这篇文章中，我将讨论一些你应该了解的重要图算法以及如何使用 Python 实现它们。***'
- en: Also, here is a [Graph Analytics for Big Data course on Coursera by UC San Diego](https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&utm_content=2&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0) which
    I highly recommend to learn the basics of graph theory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这里有一个 [由加州大学圣地亚哥分校提供的Coursera上的图分析课程](https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&utm_content=2&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0)，我强烈推荐学习图论基础。
- en: 1\. Connected Components
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 连通分量
- en: '![Figure](../Images/f227f7e9ec2a5381e321bfe86830c792.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/f227f7e9ec2a5381e321bfe86830c792.png)'
- en: A graph with 3 connected components
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含3个连通分量的图
- en: We all know how clustering works?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道聚类是如何工作的？
- en: '*You can think of Connected Components in very layman’s terms as a sort of
    a hard clustering algorithm which finds clusters/islands in related/connected
    data.*'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*你可以把连通分量看作是一种硬聚类算法，它在相关/连接的数据中找到簇/岛屿。*'
- en: '*As a concrete example: ****Say you have data about roads joining any two cities
    in the world. And you need to find out all the continents in the world and which
    city they contain.***'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '*举个具体的例子：****假设你有关于全球各个城市间道路的数据。你需要找出所有大洲以及这些大洲包含哪些城市。***'
- en: How will you achieve that? Come on give some thought.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你将如何实现这一点？来想一想吧。
- en: The connected components algorithm that we use to do this is based on a special
    case of **BFS/DFS**. I won’t talk much about how it works here, but we will see
    how to get the code up and running using `Networkx`.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来实现这一点的连通分量算法基于 **BFS/DFS** 的特殊情况。我在这里不会详细讨论它的工作原理，但我们将看到如何使用 `Networkx`
    运行代码。
- en: Applications
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用
- en: 'From a **Retail Perspective**: Let us say, we have a lot of customers using
    a lot of accounts. One way in which we can use the Connected components algorithm
    is to find out distinct families in our dataset.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从**零售角度**看：假设我们有很多客户使用很多账户。我们可以使用连通组件算法的一种方式是找出数据集中不同的家庭。
- en: We can assume edges(roads) between CustomerIDs based on same credit card usage,
    or same address or same mobile number, etc. Once we have those connections, we
    can then run the connected component algorithm on the same to create individual
    clusters to which we can then assign a family ID.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据相同的信用卡使用、相同的地址或相同的手机号码等，假设在CustomerID之间有边（道路）。一旦有了这些连接，我们可以在其上运行连通组件算法，以创建独立的簇，然后可以为每个簇分配一个家庭ID。
- en: We can then use these family IDs to provide personalized recommendations based
    on family needs. We can also use this family ID to fuel our classification algorithms
    by creating grouped features based on family.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这些家庭ID提供基于家庭需求的个性化推荐。我们还可以使用这些家庭ID通过基于家庭创建分组特征来推动分类算法。
- en: 'From a **Finance Perspective**: Another use case would be to capture fraud
    using these family IDs. If an account has done fraud in the past, it is highly
    probable that the connected accounts are also susceptible to fraud.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从**金融角度**看：另一个用例是使用这些家庭ID捕捉欺诈行为。如果一个账户过去曾发生过欺诈，那么与之连接的账户也很可能会受到欺诈的影响。
- en: The possibilities are only limited by your own imagination.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可能性只受限于你的想象力。
- en: Code
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码
- en: We will be using the `Networkx` module in Python for creating and analyzing
    our graphs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`Networkx`模块在Python中创建和分析我们的图。
- en: Let us start with an example graph which we are using for our purpose. Contains
    cities and distance information between them.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个示例图开始，该图用于我们的目的。包含城市及其之间的距离信息。
- en: '![Figure](../Images/0f9a5ab2c75434fd56b2f1054431e5dc.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/0f9a5ab2c75434fd56b2f1054431e5dc.png)'
- en: Graph with Some random distances
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图带有一些随机距离
- en: 'We first start by creating a list of edges along with the distances which we
    will add as the weight of the edge:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先开始创建一个包含边及其距离的列表，这些距离将作为边的权重添加：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let us create a graph using `Networkx`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用`Networkx`创建一个图：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now ***we want to find out distinct continents and their cities from this graph.***
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在***我们想要找出图中的不同大陆及其城市。***
- en: 'We can now do this using the connected components algorithm as:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用连通组件算法来实现：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see we are able to find distinct components in our data. Just by
    using Edges and Vertices. This algorithm could be run on different data to satisfy
    any use case that I presented above.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我们能够在数据中找到不同的组件。仅使用边和顶点就能实现。这种算法可以在不同的数据上运行，以满足我之前提出的任何用例。
- en: 2\. Shortest Path
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2. 最短路径
- en: '![](../Images/fb28cd8bcd9912a10eeca6e986a6a1a7.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fb28cd8bcd9912a10eeca6e986a6a1a7.png)'
- en: Continuing with the above example only, we are given a graph with the cities
    of Germany and the respective distance between them.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 继续以上示例，我们得到一个包含德国城市及其间距离的图。
- en: '**You want to find out how to go from Frankfurt (The starting node) to Muenchen
    by covering the shortest distance**.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**你想找出如何从法兰克福（起始节点）到慕尼黑，以覆盖最短距离**。'
- en: 'The algorithm that we use for this problem is called **Dijkstra**. In Dijkstra’s
    own words:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用来解决这个问题的算法叫做**Dijkstra**。用Dijkstra的话来说：
- en: 'What is the shortest way to travel from [Rotterdam](https://en.wikipedia.org/wiki/Rotterdam) to [Groningen](https://en.wikipedia.org/wiki/Groningen),
    in general: from given city to given city. [It is the algorithm for the shortest
    path](https://en.wikipedia.org/wiki/Shortest_path_problem), which I designed in
    about twenty minutes. One morning I was shopping in [Amsterdam](https://en.wikipedia.org/wiki/Amsterdam) with
    my young fiancée, and tired, we sat down on the café terrace to drink a cup of
    coffee and I was just thinking about whether I could do this, and I then designed
    the algorithm for the shortest path. As I said, it was a twenty-minute invention.
    In fact, it was published in ’59, three years later. The publication is still
    readable, it is, in fact, quite nice. One of the reasons that it is so nice was
    that I designed it without pencil and paper. I learned later that one of the advantages
    of designing without pencil and paper is that you are almost forced to avoid all
    avoidable complexities. Eventually that algorithm became, to my great amazement,
    one of the cornerstones of my fame.'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — Edsger Dijkstra, in an interview with Philip L. Frana, Communications of the
    ACM, 2001[[3]](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#cite_note-Dijkstra_Interview-3)
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Applications
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Variations of the Dijkstra algorithm is used extensively in Google Maps to find
    the shortest routes.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are in a Walmart Store. You have different Aisles and distance between all
    the aisles. You want to provide the shortest pathway to the customer from Aisle
    A to Aisle D.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/0c5ad8c169957881384dc7569124e8ea.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
- en: You have seen how LinkedIn shows up 1st-degree connections, 2nd-degree connections.
    What goes on behind the scenes?
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/091b0f441ab50491d95c8dbb8a60c49d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Code
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can also find Shortest paths between all pairs using:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 3\. Minimum Spanning Tree
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/b1c0422c0bda13b46391bdfefab29c8b.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Now we have another problem. We work for a water pipe laying company or an internet
    fiber company.*** We need to connect all the cities in the graph we have using
    the minimum amount of wire/pipe. ***How do we do this?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/677a92f263dd0a398551eac6d666666a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: An Undirected Graph and its MST on the right.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Minimum spanning trees have direct applications in the design of networks, including
    computer networks, telecommunications networks, transportation networks, water
    supply networks, and electrical grids (which they were first invented for)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MST is used for approximating the traveling salesman problem
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clustering — First construct MST and then determine a threshold value for breaking
    some edges in the MST using Intercluster distances and Intracluster distances.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image Segmentation — It was used for Image segmentation where we first construct
    an MST on a graph where pixels are nodes and distances between pixels are based
    on some similarity measure(color, intensity, etc.)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure](../Images/63f765d13c6868568be507c058a2a57f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: The MST of our graph.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: As you can see the above is the wire we gotta lay.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Pagerank
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/59eaabe2b166f762b0b574d3739a17c3.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: This is the page sorting algorithm that powered google for a long time. It assigns
    scores to pages based on the number and quality of incoming and outgoing links.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pagerank can be used anywhere where we want to estimate node importance in any
    network.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: It has been used for finding the most influential papers using citations.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has been used by Google to rank pages
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be used to rank tweets- User and Tweets as nodes. Create Link between
    user if user A follows user B and Link between user and Tweets if user tweets/retweets
    a tweet.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendation engines
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For this exercise, we are going to be using Facebook data. We have a file of
    edges/links between facebook users. We first create the FB graph using:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This is how it looks:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure](../Images/a66ef34f848ca9e7a05d55f67fde7989.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
- en: FB User Graph
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: Now we want to find the users having high influence capability.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Intuitively, the Pagerank algorithm will give a higher score to a user who has
    a lot of friends who in turn have a lot of FB Friends.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can get the sorted PageRank or most influential users using:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The above IDs are for the most influential users.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see the subgraph for the most influential user:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Figure](../Images/65588b2ba8f7f2fbfdf7deadaa850856.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Our most influential user(Yellow)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 5. **Centrality Measures**
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a lot of centrality measures which you can use as features to your
    machine learning models. I will talk about two of them. You can look at other
    measures [here](https://networkx.github.io/documentation/networkx-1.10/reference/algorithms.centrality.html#current-flow-closeness).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '**Betweenness Centrality: **It is not only the users who have the most friends
    that are important, the users who connect one geography to another are also important
    as that lets users see content from diverse geographies. ***Betweenness centrality
    quantifies how many times a particular node comes in the shortest chosen path
    between two other nodes.***'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**Degree Centrality:** It is simply the number of connections for a node.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Centrality measures can be used as a feature in any machine learning model.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Code
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is the code for finding the Betweenness centrality for the subgraph.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/f099b9fa5e8842ff2778748973ef73a7.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
- en: You can see the nodes sized by their betweenness centrality values here. They
    can be thought of as information passers. Breaking any of the nodes with a high
    betweenness Centrality will break the graph into many parts.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***In this post, I talked about some of the most influential graph algorithms
    that have changed the way we live.***'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: With the advent of so much social data, network analysis could help a lot in
    improving our models and generating value.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '***And even understanding a little more about the world.***'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: There are a lot of graph algorithms out there, but these are the ones I like
    the most. Do look into the algorithms in more detail if you like. In this post,
    I just wanted to get the required breadth into the area.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多图算法，但这些是我最喜欢的。如果你喜欢的话，可以更详细地了解这些算法。在这篇文章中，我只是想介绍这一领域的基本知识。
- en: Let me know if you feel I have left your favorite algorithm in the comments.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得我遗漏了你最喜欢的算法，请在评论中告诉我。
- en: Here is the [Kaggle Kernel](https://www.kaggle.com/mlwhiz/top-graph-algorithms) with
    the whole code.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是包含完整代码的 [Kaggle Kernel](https://www.kaggle.com/mlwhiz/top-graph-algorithms)。
- en: If you want to read up more on Graph Algorithms here is a [Graph Analytics for
    Big Data course on Coursera by UCSanDiego](https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&utm_content=2&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0) which
    I highly recommend to learn the basics of graph theory.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想深入了解图算法，这里有一个由UCSanDiego提供的[大数据图分析课程](https://www.coursera.org/learn/big-data-graph-analytics?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&siteID=lVarvwc5BD0-uD3tAFL0mCUdzcfwDd6FTQ&utm_content=2&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0)，我强烈推荐学习图论基础。
- en: Thanks for the read. I am going to be writing more beginner-friendly posts in
    the future too. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal?source=post_page---------------------------) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX?source=post_page---------------------------) to
    be informed about them. As always, I welcome feedback and constructive criticism
    and can be reached on Twitter [@mlwhiz](https://twitter.com/MLWhiz?source=post_page---------------------------).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。我将来还会写更多适合初学者的文章。关注我在 [**Medium**](https://medium.com/@rahul_agarwal?source=post_page---------------------------)
    或订阅我的 [**博客**](http://eepurl.com/dbQnuX?source=post_page---------------------------)
    以获取相关信息。像往常一样，我欢迎反馈和建设性的批评，可以通过Twitter联系我 [@mlwhiz](https://twitter.com/MLWhiz?source=post_page---------------------------)。
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is a Data
    Scientist at Walmart Labs.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** 是沃尔玛实验室的数据科学家。'
- en: '[Original](https://towardsdatascience.com/data-scientists-the-five-graph-algorithms-that-you-should-know-30f454fa5513).
    Reposted with permission.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/data-scientists-the-five-graph-algorithms-that-you-should-know-30f454fa5513)。经许可转载。'
- en: '**Related:**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[10 Great Python Resources for Aspiring Data Scientists](/2019/09/10-great-python-resources-aspiring-data-scientists.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10个适合有抱负的数据科学家的Python资源](/2019/09/10-great-python-resources-aspiring-data-scientists.html)'
- en: '[Coding Random Forests in 100 lines of code*](/2019/08/coding-random-forests.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用100行代码编写随机森林*](/2019/08/coding-random-forests.html)'
- en: '[Populating a GRAKN.AI Knowledge Graph with the World](/2017/07/populating-grakn-ai-knowledge-graph.html)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用世界填充GRAKN.AI知识图谱](/2017/07/populating-grakn-ai-knowledge-graph.html)'
- en: More On This Topic
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该知道的三大R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并通过找到目标来…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个90亿美元的AI失败，经过审视](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
