["```py\n## Code Block\nresponse = chatgpt_call(\"Teach me about optimism. Keep it short.\")\nprint(response)\n```", "```py\n## Code Block\nresponse = chatgpt_call(\"Teach me about optimism. Keep it short. Try to create a poetic definition.\")\nprint(response)\n```", "```py\n## Code Block\nprompt = \"\"\"\n\nYour task is to answer in a consistent style aligned with the following style. \n\n<user>: Teach me about resilience.\n\n<system>: Resilience is like a tree that bends with the wind but never breaks. \nIt is the ability to bounce back from adversity and keep moving forward.\n\n<user>: Teach me about optimism.\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)</user></system></user>\n```", "```py\n## Code Block\nuser_input = \"\"\"\nAssuming I have both product and order tables, could you generate a single table that contained all the info \nof every product together with how many times has it been sold?\n\"\"\"\n\nprompt = f\"\"\"\nGiven the following natural language prompt, generate a hypothetical query that fulfills the required task in SQL.\n{user_input}\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)\n```", "```py\n## Code Block\nuser_input = \"\"\"\nWhat model of TV has been sold the most in the store?\n\"\"\"\n\nprompt = f\"\"\"\nGiven the following SQL tables, your job is to provide the required SQL queries to fulfil any user request.\n\nTables: <{sql_tables}>\n\nUser request: ```", "```py\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)\n```", "```py\n## Few_shot examples\n\nfewshot_examples = \"\"\"\n-------------- FIRST EXAMPLE\nUser: What model of TV has been sold the most in the store when considering all issued orders. \nSystem: You first need to join both orders and products tables, filter only those orders that correspond to TVs \nand count the number of orders that have been issued: \n\nSELECT P.product_name AS model_of_tv, COUNT(*) AS total_sold\nFROM products AS P\nJOIN orders   AS O ON P.product_id = O.product_id\nWHERE P.product_type = 'TVs'\nGROUP BY P.product_name\nORDER BY total_sold DESC\nLIMIT 1;\n\n-------------- SECOND EXAMPLE\nUser: What's the sold product that has been already delivered the most?\nSystem: You first need to join both orders and products tables, count the number of orders that have \nbeen already delivered and just keep the first one: \n\nSELECT P.product_name AS model_of_tv, COUNT(*) AS total_sold\nFROM products AS P\nJOIN orders   AS O ON P.product_id = O.product_id\nWHERE P.order_status = 'Delivered'\nGROUP BY P.product_name\nORDER BY total_sold DESC\nLIMIT 1;\n\"\"\"\n```", "```py\n## Code Block\nuser_input = \"\"\"\nWhat model of TV has been sold the most in the store?\n\"\"\"\n\nprompt = f\"\"\"\nGiven the following SQL tables, your job is to provide the required SQL tables\nto fulfill any user request.\n\nTables: <{sql_tables}>. Follow those examples the generate the answer, paying attention to both\nthe way of structuring queries and its format:\n<{fewshot_examples}>\n\nUser request: ```", "```py\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)\n```", "```py\n## Code Block\n\npysqldf(\"\"\"\nSELECT P.product_name AS model_of_tv, COUNT(*) AS total_sold\nFROM PRODUCTS AS P\nJOIN ORDERS AS O ON P.product_id = O.product_id\nWHERE P.product_type = 'TVs'\nGROUP BY P.product_name\nORDER BY total_sold DESC\nLIMIT 1;\n\"\"\")\n```", "```py\n## Code Block\nfewshot_examples = \"\"\"\n---- EXAMPLE 1\nUser: What model of TV has been sold the most in the store when considering all issued orders. \nSystem: You first need to join both orders and products tables, filter only those orders that correspond to TVs \nand count the number of orders that have been issued: \n\nSELECT \n       P.product_name AS model_of_tv, \n       COUNT(*)       AS total_sold\nFROM products AS P\nJOIN orders   AS O\n  ON P.product_id = O.product_id\n\nWHERE P.product_type = 'TVs'\nGROUP BY P.product_name\nORDER BY total_sold DESC\nLIMIT 1;\n\n---- EXAMPLE 2\nUser: What is the latest order that has been issued?\nSystem: You first need to join both orders and products tables and filter by the latest order_creation datetime: \n\nSELECT \n      P.product_name AS model_of_tv\nFROM products AS P\nJOIN orders AS O \n  ON P.product_id = O.product_id\n\nWHERE O.order_creation = (SELECT MAX(order_creation) FROM orders)\nGROUP BY p.product_name\nLIMIT 1;\n\"\"\"\n```", "```py\n## Code Block\n\nuser_input = \"\"\"\nWhat is the most popular product model of the store?\n\"\"\"\n\nprompt = f\"\"\"\nGiven the following SQL tables, your job is to provide the required SQL tables\nto fulfill any user request.\n\nTables: <{sql_tables}>. Follow those examples the generate the answer, paying attention to both\nthe way of structuring queries and its format:\n<{fewshot_examples}>\n\nUser request: ```", "```py\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)\n```", "```py\n## Code Block\n\nuser_input = \"\"\"\nWhat product is the one that takes longer to deliver?\n\"\"\"\n\nprompt = f\"\"\"\nGiven the following SQL tables, your job is to provide the required SQL tables\nto fulfill any user request.\n\nTables: <{sql_tables}>. Follow those examples the generate the answer, paying attention to both\nthe way of structuring queries and its format:\n<{fewshot_examples}>\n\nUser request: ```", "```py\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)\n```", "```py\n## Adding one more example\nfewshot_examples += \"\"\"\n------ EXAMPLE 4\nUser: Compute the time that it takes to delivery every product?\nSystem: You first need to join both orders and products tables, filter only those orders that have \nbeen delivered and compute the difference between both order_creation and delivery_date.: \n\nSELECT \n    P.product_name AS product_with_longest_delivery,\n    julianday(O.delivery_date) - julianday(O.order_creation) AS TIME_DIFF\n\nFROM \n    products AS P\nJOIN \n    orders AS O ON P.product_id = O.product_id\nWHERE \n    O.order_status = 'Delivered';\n\"\"\"\n```", "```py\n## Code Block\n\nuser_input = \"\"\"\nWhat product is the one that takes longer to deliver?\n\"\"\"\n\nprompt = f\"\"\"\nGiven the following SQL tables, your job is to provide the required SQL tables\nto fulfill any user request.\n\nTables: <{sql_tables}>. Follow those examples the generate the answer, paying attention to both\nthe way of structuring queries and its format:\n<{fewshot_examples}>\n\nUser request: ```", "```py\n\"\"\"\nresponse = chatgpt_call(prompt)\nprint(response)\n```", "```py\n## SQL TABLES\n\nsql_tables = \"\"\"\nCREATE TABLE PRODUCTS (\n    product_name VARCHAR(100),\n    price DECIMAL(10, 2),\n    discount DECIMAL(5, 2),\n    product_type VARCHAR(50),\n    rating DECIMAL(3, 1),\n    product_id VARCHAR(100)\n);\n\nINSERT INTO PRODUCTS (product_name, price, discount, product_type, rating, product_id)\nVALUES\n    ('UltraView QLED TV', 2499.99, 15, 'TVs', 4.8, 'K5521'),\n    ('ViewTech Android TV', 799.99, 10, 'TVs', 4.6, 'K5522'),\n    ('SlimView OLED TV', 3499.99, 5, 'TVs', 4.9, 'K5523'),\n    ('PixelMaster Pro DSLR', 1999.99, 20, 'Cameras and Camcorders', 4.7, 'K5524'),\n    ('ActionX Waterproof Camera', 299.99, 15, 'Cameras and Camcorders', 4.4, 'K5525'),\n    ('SonicBlast Wireless Headphones', 149.99, 10, 'Audio and Headphones', 4.8, 'K5526'),\n    ('FotoSnap DSLR Camera', 599.99, 0, 'Cameras and Camcorders', 4.3, 'K5527'),\n    ('CineView 4K TV', 599.99, 10, 'TVs', 4.5, 'K5528'),\n    ('SoundMax Home Theater', 399.99, 5, 'Audio and Headphones', 4.2, 'K5529'),\n    ('GigaPhone 12X', 1199.99, 8, 'Smartphones and Accessories', 4.9, 'K5530');\n\nCREATE TABLE ORDERS (\n    order_number INT PRIMARY KEY,\n    order_creation DATE,\n    order_status VARCHAR(50),\n    product_id VARCHAR(100)\n);\n\nINSERT INTO ORDERS (order_number, order_creation, order_status, delivery_date, product_id)\nVALUES\n    (123456, '2023-07-01', 'Shipped','', 'K5521'),\n    (789012, '2023-07-02', 'Delivered','2023-07-06', 'K5524'),\n    (345678, '2023-07-03', 'Processing','', 'K5521'),\n    (901234, '2023-07-04', 'Shipped','', 'K5524'),\n    (567890, '2023-07-05', 'Delivered','2023-07-15', 'K5521'),\n    (123789, '2023-07-06', 'Processing','', 'K5526'),\n    (456123, '2023-07-07', 'Shipped','', 'K5529'),\n    (890567, '2023-07-08', 'Delivered','2023-07-12', 'K5522'),\n    (234901, '2023-07-09', 'Processing','', 'K5528'),\n    (678345, '2023-07-10', 'Shipped','', 'K5530');\n\"\"\"\n```"]