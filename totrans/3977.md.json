["```py\nfrom typing import List\n\nclass Product:\n    def __init__(self, _id: int, name: str, price: float):\n    \tself._id = _id\n    \tself.name = name\n    \tself.price = price\n\nclass Customer:\n    def __init__(self, _id: int, name: str):\n    \tself._id = _id\n    \tself.name = name\n\nclass Order:\n    def __init__(self, _id: int, customer: Customer, products: List[Product]):\n    \tself._id = _id\n    \tself.customer = customer\n    \tself.products = products\n```", "```py\npip install -U marshmallow\n```", "```py\npip install -U git+https://github.com/marshmallow-code/marshmallow.git@dev\n```", "```py\nfrom marshmallow import Schema, fields\n\nclass ProductSchema(Schema):\n    _id = fields.Int(required=True)\n    name = fields.Str(required=True)\n    price = fields.Float(required=True)\n```", "```py\nproduct = Product(_id=4, name=\"Test Product\", price=10.6)\nschema = ProductSchema()\n\n# For Python Dictionary object\nresult = schema.dump(product)\n\n**# type(dict) -> {'_id': 4, 'name': 'Test Product', 'price': 10.6}**\n\n# For JSON-serializable string\nresult = schema.dumps(product)\n\n**# type(str) -> {\"_id\": 4, \"name\": \"Test Product\", \"price\": 10.6}**\n```", "```py\nproduct_data = {\n    \"_id\": 4,\n    \"name\": \"Test Product\",\n    \"price\": 50.4,\n}\nresult = schema.load(product_data)\nprint(result)  \t\n\n**# type(dict) -> {'_id': 4, 'name': 'Test Product', 'price': 50.4}**\n\nfaulty_data = {\n    \"_id\": 5,\n    \"name\": \"Test Product\",\n    \"price\": \"ABCD\" # Wrong input datatype\n}\nresult = schema.load(faulty_data) \n\n**# Raises validation error**\n```", "```py\nfrom marshmallow import Schema, fields, post_load\n\nclass ProductSchema(Schema):\n  _id = fields.Int(required=True)\n  name = fields.Str(required=True)\n  price = fields.Float(required=True)\n\n  @post_load\n  def create_product(self, data, **kwargs):\n      return Product(**data)\n```", "```py\nfrom marshmallow import Schema, fields, validates, ValidationError, post_load\n\nclass ProductSchema(Schema):\n    _id = fields.Int(required=True)\n    name = fields.Str(required=True)\n    price = fields.Float(required=True)\n\n    @post_load\n    def create_product(self, data, **kwargs):\n        return Product(**data)\n\n    @validates('price')\n    def validate_price(self, value):\n        if value <= 0:\n            raise ValidationError('Price must be greater than zero.')\n\n    @validates('name')\n    def validate_name(self, value):\n        if len(value) < 3 or len(value) > 128:\n            raise ValidationError('Name of Product must be between 3 and 128 letters.')\n```", "```py\nclass CustomerSchema(Schema):\n    _id = fields.Int(required=True)\n    name = fields.Int(required=True)\n```", "```py\nclass OrderSchema(Schema):\n    _id = fields.Int(require=True)\n    customer = fields.Nested(CustomerSchema, required=True)\n    products = fields.List(fields.Nested(ProductSchema), required=True)\n```"]