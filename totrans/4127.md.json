["```py\nimg_gray = cv2.cvtColor(img, cv2.COLOR_RGB2LAB)[:, :, 0]\n\nimg_blur = cv2.GaussianBlur(img_gray, (9, 9), 0)\n```", "```py\nimg_canny = feature.canny(img_blur) * 1\n\n```", "```py\ntested_angles = np.linspace(-1.6, 1.6, 410)\nh, theta, d = transform.hough_line(img_canny, theta=tested_angles)\n_, angles, dists = transform.hough_line_peaks(h, theta, d)\n```", "```py\nplt.figure(figsize=(10, 10))\nplt.imshow(img_gray, cmap=\"gray\")\n\nx = np.array((0, img_gray.shape[1]))\nys = []\nfor angle, dist in zip(angles, dists):    \n    y0, y1 = (dist - x * np.cos(angle)) / np.sin(angle)\n    y = int(np.mean([y0, y1]))\n    ys += [y]\n    plt.plot(x, [y, y])\n\nys = np.array(ys)\nplt.axis(\"off\");\n```", "```py\nprops = {\n    \"white_limit\": 230,\n    \"black_limit\": 35,\n    \"percent_limit\": 0.8\n}\n\nareas_h = []\nfor y in ys:\n  percent_up = np.sum((img[:y] > props['white_limit']) + (img[:y] < props['black_limit'])) / (y * img.shape[1] * 3)\n  percent_down = np.sum((img[y:] > props['white_limit']) + (img[y:] < props['black_limit'])) / ((img.shape[0] - y) * img.shape[1] * 3)\n  areas_h += [-1 * (percent_up > props['percent_limit']) + (percent_down > props['percent_limit']) * 1]\n```", "```py\ncut_threshold = 0.6\ny0 = np.max(ys[areas_h == -1])\nif y0 > cut_threshold * img.shape[0]:\n    y0 = 0\ny1 = np.min(ys[areas_h == 1])\nif y1 < (1 - cut_threshold) * img.shape[0]:\n    y1 = img.shape[0]\n```"]