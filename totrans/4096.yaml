- en: 3 Tools to Track and Visualize the Execution of Your Python Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Motivation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Have you ever seen an error output like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: and wish the output can be a little bit easier to understand as shown here?
  prefs: []
  type: TYPE_NORMAL
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/962accaf97a22ca097cf2d14df1e8603.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'You might also want to visualize which lines of code are being executed and
    how many times they are executed in real-time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/25971c2f33939d70ea82d74d5f274160.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'If so, this article will give you the tools to do exactly the above. Those
    3 tools are:'
  prefs: []
  type: TYPE_NORMAL
- en: Loguru — print better exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: snoop — print the lines of code being executed in a function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: heartrate — visualize the execution of a Python program in real-time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And all it takes to use these tools is one line of code!
  prefs: []
  type: TYPE_NORMAL
- en: Loguru — Print Better Exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Loguru](https://github.com/Delgan/loguru) is a library that aims to make logging
    in Python enjoyable. Loguru provides many interesting functionalities, but one
    functionality that I found to be the most helpful is the ability to **catch unexpected
    errors** and **display which value of a variable causes your code to fail**.'
  prefs: []
  type: TYPE_NORMAL
- en: To install Loguru, type
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: To understand how Loguru can be useful, imagine that you have 2 functions `division` and `divide_numbers`and
    the function `divide_numbers` is executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that `combinations([2,1,0], 2)` returns `[(2, 1), (2, 0), (1, 0)]` . After
    running the code above, we get this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'From the output, we know that the line `return num1/num2` is where the error
    occurs, but we don’t know which values of `num1` and `num2` cause the error. Luckily,
    this can be easily tracked by adding Loguru’s `logger.catch` decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/ce4f69f8803361d1611d2677959da0ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: By adding `logger.catch`, the exceptions are much easier to understand! It turns
    out that the error occurs when dividing `2` by `0`.
  prefs: []
  type: TYPE_NORMAL
- en: snoop — Print the Lines of Code being Executed in a Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if there is no error in the code, but we want to figure out what is going
    on in the code? That is when snoop comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: '[snoop](https://github.com/alexmojaki/snoop) is a Python package that prints
    the lines of code being executed along with the values of each variable by adding
    only one decorator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install snoop, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Let’s imagine we have a function called`factorial` that [finds the factorial
    of an integer](https://www.programiz.com/python-programming/recursion).
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To understand why the output of `factorial(5)` is `20` , we can add `snoop` decorator
    to the function `factorial` .
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/c35264b221cf1e5eaf66c3a639bf5ca0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In the output above, we can view the values of the variables and which lines
    of code are executed. Now we can understand how recursion works much better!
  prefs: []
  type: TYPE_NORMAL
- en: heartrate — Visualize the Execution of a Python Program in Real-Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to visualize which lines are executed and how many times they are
    executed, try heartrate.
  prefs: []
  type: TYPE_NORMAL
- en: '[heartrate](https://github.com/alexmojaki/heartrate) is also created by the
    creator of snoop. To install heartrate, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s add `heartrate.trace(browser=True)` to our previous code. This will
    open a browser window displaying the visualization of the file where `trace()` was
    called.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new browser should pop up when you run the code above. If not, go to [http://localhost:9999](http://localhost:9999/file/?filename=heartrate_example.py).
    You should see the output like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/cf6f9946252fc1264116a11f4fb7f19f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Cool! The bars show the lines that have been hit. The longer bars mean more
    hits, lighter colors mean more recent.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the output above, we can see that the program executes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`if x==1` 5 times'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return 1` once'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`return (x * factorial(x-1))` 4 times'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The output makes sense since the initial value of `x` is 5 and the function
    is called repetitively until `x` equals to `1` .
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s see what it is like to visualize the execution of a Python program
    in real-time using heartrate. Let’s add `sleep(0.5)` so that the program runs
    a little bit slower and increase `num` to `20` .
  prefs: []
  type: TYPE_NORMAL
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/25971c2f33939d70ea82d74d5f274160.png)'
  prefs: []
  type: TYPE_IMG
- en: GIF by Author
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! We can see which lines of code are being executed and how many times
    each of them has been executed in real-time.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned 3 tools to track and visualize the execution
    of your Python code. I hope debugging will be less painful for you when using
    these 3 tools. Since these tools only require one line of code, why not give them
    a try to see how helpful they are?
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to play and fork the [source code of this article here](https://github.com/khuyentran1401/Data-science/tree/master/python/debug_tools).
  prefs: []
  type: TYPE_NORMAL
- en: Star [this repo](https://github.com/khuyentran1401/Data-science).
  prefs: []
  type: TYPE_NORMAL
- en: '**[Khuyen Tran](https://www.linkedin.com/in/khuyen-tran-1401/)** is a prolific
    data science writer, and has written [an impressive collection of useful data
    science topics along with code and articles](https://github.com/khuyentran1401/Data-science).
    Khuyne is currently looking for a machine learning engineer role, a data scientist
    role, or a developer advocate role in Bay Area after May 2022, so please reach
    out if you are looking for someone with her set of skills.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/3-tools-to-track-and-visualize-the-execution-of-your-python-code-666a153e435e).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n01, Jan 5: 3 Tools to Track and Visualize…](https://www.kdnuggets.com/2022/n01.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Essential Guide to SQL’s Execution Order](https://www.kdnuggets.com/the-essential-guide-to-sql-execution-order)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fast-track your next move with in-demand data skills](https://www.kdnuggets.com/2023/01/datacamp-fast-track-next-move-indemand-data-skills.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Track the Location of an IP Address using Python](https://www.kdnuggets.com/2023/01/track-location-ip-address-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
