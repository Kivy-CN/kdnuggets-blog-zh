- en: Getting Started with PyCaret
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/11/getting-started-pycaret.html](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/b403b58cba8bf7b381305dbaec25bc74.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: Any AI model training and deployment goes through a long data journey. Some
    of these steps are standard and can be automated thereby enabling fast model development
    and deployment. PyCaret is one of the packages developed in pursuit of churning
    out machine-learning models at a factory scale. Let's get started with learning
    about it.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What is PyCaret?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyCaret is an open-source, low-code data science package in Python that speeds
    up the experiment cycle by automating ML workflows. It replaces hundreds of lines
    of code with only a few lines, facilitating faster and more efficient experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: It's a wrapper around multiple ML libraries and frameworks such as scikit-learn,
    boosting libraries like LightGBM/XGBoost/CatBoost, spaCy, Hyperopt, Ray, etc,
    providing seamless and flexible development.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/9ae4aad3f147edd95c9ae591d61bacce.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Pycaret](https://pycaret.gitbook.io/docs/)
  prefs: []
  type: TYPE_NORMAL
- en: PyCaret is simple and easy to use wherein the operations are sequentially stored
    in a pipeline ready for deployment. PyCaret automates preprocessing, feature engineering,
    as well as hyperparameter tuning all out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/47c78bf95dd7850540cf6c3c735836b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Moez Ali](https://moez-62905.medium.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Its model collection has over 70 untrained models for tasks like classification,
    regression, clustering, etc with an exceptional spread of modules including supervised
    and unsupervised methods.
  prefs: []
  type: TYPE_NORMAL
- en: PyCaret has everything covered – whether it is integration with the SHAP framework
    for explainability or with MLFlow for experiment tracking.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pycaret can be installed using pip. The default installation installs only the
    hard dependencies as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To install the full version run the below command in your terminal/command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Hands On!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pycaret offers some standard [datasets](https://github.com/pycaret/pycaret/tree/master/datasets)
    out of the box. We will use the “Boston Housing Prices” dataset ([boston.csv](https://github.com/pycaret/pycaret/blob/master/datasets/boston.csv))
    for this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's import libraries such as “get_data” from PyCaret for loading the
    data into the Jupyter environment and “plotly express” for charting/plotting.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In case you witness any error while importing the libraries, then it might be
    because of dependency issues that need to be resolved first. Please note that
    PyCaret is not yet compatible with Python 3.9\. For this demo, Python 3.7 is used
    on [Google Colab](https://colab.research.google.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Load the dataset into the Jupyter Notebook using the get_data function imported
    previously from pycaret.datasets. The get_data function returns a data frame that
    can be stored as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: PyCaret shows the top five rows of the data frame by default. Therefore you
    do not need to call dataframe.head() function explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/08babd7779196ddbccc92c12e0a203ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Each row in the dataset represents a suburb or a town in the Boston region.
    The data is originally drawn from the Boston Standard Metropolitan Statistical
    Area (SMSA) in the year 1970 with a data dictionary sourced from [here](https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.names).
  prefs: []
  type: TYPE_NORMAL
- en: We are solving a regression problem given the continuous nature of the target
    variable, MEDV.
  prefs: []
  type: TYPE_NORMAL
- en: 'The below chart represents one of the interesting scatter plots with the following
    characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Bivariate distribution between the Median value of owner-occupied homes in $1000s
    (MEDV) and the percentage of the lower status of the population (LSTAT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An index of accessibility to radial highways (RAD) to the equation as a faceted
    column (equivalent to “hue” in Seaborn)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A trendline using the trendline argument with value as “OLS” representing Ordinary
    Least Squares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The color of the trendline is chosen to be red for easy visibility using the
    argument trendline_color_override
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The plot shows a strong negative relationship between median housing prices
    and the lower status of the population. This means that the weaker the financial
    status of the population, the lower the disposable income, and thus the lower
    would be the housing prices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/288f1fd6211a27752247578bad4b05fa.png)'
  prefs: []
  type: TYPE_IMG
- en: The RAD value of 24 fits the data well excluding a few outliers and has decent
    support with respect to the number of records.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the distribution of the target variable i.e. MEDV, it appears to
    be fairly normally distributed barring a few outliers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting Started with PyCaret](../Images/20394f59f0207bef5c8af3a5be666bc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a PyCaret experiment is quite easy using the setup function. The
    function uses the following arguments as input – the data frame, target variable
    name, a boolean to log the experiment results, and the name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As evident from the PyCaret output, it does a gamut of things automatically
    including but not limited to identifying missing values, continuous and categorical
    features, the cardinality of variables, splits train and test sets and performs
    cross-validation that would otherwise take considerable time and resources.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/998f4ad330e5a5284d1145995f28434b.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the experiment is set up, you need to run compare_models() in order to
    experiment with a multitude of algorithms for a particular problem. The below
    code stores the best model in a variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The above code trains and tests the model on different algorithms and arranges
    them in the ascending order of the error. It also displays the training time in
    seconds which is denoted by ‘TT (Sec)’ in the last column.
  prefs: []
  type: TYPE_NORMAL
- en: Notably, the training time is based on using all CPU cores in this particular
    example and might differ on different machines.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting Started with PyCaret](../Images/3aa9118b971fb14bb1483ea5a18ef80d.png)'
  prefs: []
  type: TYPE_IMG
- en: The “get_params()” method is used to retrieve the hyperparameters of the best
    model which is the Extra Tree Regressor in our example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Feature importances can be plotted using the below code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Getting Started with PyCaret](../Images/c74b2a7788393bba5583faa47506b922.png)'
  prefs: []
  type: TYPE_IMG
- en: The visualization makes it easier to identify the top n features, with the most
    important feature at the top.
  prefs: []
  type: TYPE_NORMAL
- en: Model predictions are generated using the predict_model() function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The save_model() function is used to save the trained model for easy deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, you learned about how PyCaret makes the life of many data scientists
    and machine learning engineers easier by automating a lot of mundane tasks. The
    post also demonstrated how to automate the standard steps in a machine-learning
    pipeline using the PyCaret package.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Vidhi Chugh](https://vidhi-chugh.medium.com/)** is an AI strategist and
    a digital transformation leader working at the intersection of product, sciences,
    and engineering to build scalable machine learning systems. She is an award-winning
    innovation leader, an author, and an international speaker. She is on a mission
    to democratize machine learning and break the jargon for everyone to be a part
    of this transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started Cleaning Data](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
