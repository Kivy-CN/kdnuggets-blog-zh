["```py\n$ git clone https://github.com/kingabzpro/GitHub-Actions-For-Machine-Learning-Beginners.git\n\n$ cd .\\GitHub-Actions-For-Machine-Learning-Beginners\\\n\n$ code . \n```", "```py\npandas\nscikit-learn\nnumpy\nmatplotlib\nskops\nblack\n```", "```py\n$ git lfs install\n$ git lfs track train.csv\n```", "```py\nimport pandas as pd\n\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import MinMaxScaler, OrdinalEncoder\n\nfrom sklearn.metrics import accuracy_score, f1_score\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix\n\nimport skops.io as sio\n\n# loading the data\nbank_df = pd.read_csv(\"train.csv\", index_col=\"id\", nrows=1000)\nbank_df = bank_df.drop([\"CustomerId\", \"Surname\"], axis=1)\nbank_df = bank_df.sample(frac=1)\n\n# Splitting data into training and testing sets\nX = bank_df.drop([\"Exited\"], axis=1)\ny = bank_df.Exited\n\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=125\n)\n\n# Identify numerical and categorical columns\ncat_col = [1, 2]\nnum_col = [0, 3, 4, 5, 6, 7, 8, 9]\n\n# Transformers for numerical data\nnumerical_transformer = Pipeline(\n    steps=[(\"imputer\", SimpleImputer(strategy=\"mean\")), (\"scaler\", MinMaxScaler())]\n)\n\n# Transformers for categorical data\ncategorical_transformer = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer(strategy=\"most_frequent\")),\n        (\"encoder\", OrdinalEncoder()),\n    ]\n)\n\n# Combine pipelines using ColumnTransformer\npreproc_pipe = ColumnTransformer(\n    transformers=[\n        (\"num\", numerical_transformer, num_col),\n        (\"cat\", categorical_transformer, cat_col),\n    ],\n    remainder=\"passthrough\",\n)\n\n# Selecting the best features\nKBest = SelectKBest(chi2, k=\"all\")\n\n# Random Forest Classifier\nmodel = RandomForestClassifier(n_estimators=100, random_state=125)\n\n# KBest and model pipeline\ntrain_pipe = Pipeline(\n    steps=[\n        (\"KBest\", KBest),\n        (\"RFmodel\", model),\n    ]\n)\n\n# Combining the preprocessing and training pipelines\ncomplete_pipe = Pipeline(\n    steps=[\n        (\"preprocessor\", preproc_pipe),\n        (\"train\", train_pipe),\n    ]\n)\n\n# running the complete pipeline\ncomplete_pipe.fit(X_train, y_train)\n\n## Model Evaluation\npredictions = complete_pipe.predict(X_test)\naccuracy = accuracy_score(y_test, predictions)\nf1 = f1_score(y_test, predictions, average=\"macro\")\n\nprint(\"Accuracy:\", str(round(accuracy, 2) * 100) + \"%\", \"F1:\", round(f1, 2))\n\n## Confusion Matrix Plot\npredictions = complete_pipe.predict(X_test)\ncm = confusion_matrix(y_test, predictions, labels=complete_pipe.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=complete_pipe.classes_)\ndisp.plot()\nplt.savefig(\"model_results.png\", dpi=120)\n\n## Write metrics to file\nwith open(\"metrics.txt\", \"w\") as outfile:\n    outfile.write(f\"\\nAccuracy = {round(accuracy, 2)}, F1 Score = {round(f1, 2)}\\n\\n\")\n\n# saving the pipeline\nsio.dump(complete_pipe, \"bank_pipeline.skops\")\n```", "```py\n$ python train.py\nAccuracy: 88.0% F1: 0.77\n```", "```py\n$ .gitignore\n```", "```py\nmetrics.txt\nmodel_results.png\nbank_pipeline.skops\n```", "```py\ngit add .\ngit commit -m \"new changes\"\ngit push origin main\n```", "```py\nname: ML Workflow\non:\n  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n  workflow_dispatch:\n\npermissions: write-all\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          lfs: true\n      - uses: iterative/setup-cml@v2\n      - name: Install Packages\n        run: pip install --upgrade pip && pip install -r requirements.txt\n      - name: Format\n        run: black *.py\n      - name: Train\n        run: python train.py\n      - name: Evaluation\n        env:\n          REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: | \n          echo \"## Model Metrics\" > report.md\n          cat metrics.txt >> report.md\n\n          echo '## Confusion Matrix Plot' >> report.md\n          echo '![Confusion Matrix](model_results.png)' >> report.md\n\n          cml comment create report.md \n```"]