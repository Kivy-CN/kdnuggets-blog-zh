- en: Machine Learning in Power BI using PyCaret
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/05/machine-learning-power-bi-pycaret.html](https://www.kdnuggets.com/2020/05/machine-learning-power-bi-pycaret.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/3f5a4a9efcba98dab013359395156933.png)'
  prefs: []
  type: TYPE_IMG
- en: Machine Learning Meets Business Intelligence
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**PyCaret 1.0.0**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Last week we announced [PyCaret](https://www.pycaret.org/), an open source machine
    learning library in Python that trains and deploys machine learning models in
    a **low-code** environment. In our [previous post](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46) we
    demonstrated how to use PyCaret in Jupyter Notebook to train and deploy machine
    learning models in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In this post we present a **step-by-step tutorial** on how PyCaret can be integrated
    within [Power BI](https://powerbi.microsoft.com/en-us/), thus allowing analysts
    and data scientists to add a layer of machine learning to their Dashboards and
    Reports without any additional license or software costs. PyCaret is an open source
    and **free to use **Python library that comes with a wide range of functions that
    are exclusively built to work within Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this article you will learn how to implement the following in
    Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Clustering** — Group data points with similar characteristics.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Anomaly Detection **— Identify rare observations / outliers in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Natural Language Processing **— Analyze text data *via* topic modeling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association Rule Mining **— Find interesting relationships in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Classification **— Predict categorical class labels that are binary (1 or
    0).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regression **— Predict continuous value such as Sales, Price etc'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “PyCaret is democratizing machine learning and the use of advanced analytics
    by providing **free, open source, and low-code** machine learning solution for
    business analysts, domain experts, citizen data scientists, and experienced data
    scientists”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Microsoft Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Power BI is a business analytics solution that lets you visualize your data
    and share insights across your organization, or embed them in your app or website.
    In this tutorial, we will use [Power BI Desktop](https://powerbi.microsoft.com/en-us/downloads/) for
    machine learning by importing the PyCaret library into Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: Before we start
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have used Python before, it is likely that you already have Anaconda
    Distribution installed on your computer. If not, [click here](https://www.anaconda.com/distribution/) to
    download Anaconda Distribution with Python 3.7 or greater.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/163b0f04e24139d2b34cd6ee02ab9391.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://www.anaconda.com/distribution/](https://www.anaconda.com/distribution/)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we start using PyCaret’s machine learning capabilities in Power BI we
    have to create a virtual environment and install pycaret. It’s a three-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: ✅ **Step 1 — Create an anaconda environment**
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Anaconda Prompt **from start menu and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/3bd6efcfa61251f8c40a82ef295b22e6.png)'
  prefs: []
  type: TYPE_IMG
- en: Anaconda Prompt — Creating an environment
  prefs: []
  type: TYPE_NORMAL
- en: ✅ **Step 2 — Install PyCaret**
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following code in Anaconda Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installation may take 10 – 15 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: ✅ **Step 3 — Set Python Directory in Power BI**
  prefs: []
  type: TYPE_NORMAL
- en: 'The virtual environment created must be linked with Power BI. This can be done
    using Global Settings in Power BI Desktop (File → Options → Global → Python scripting).
    Anaconda Environment by default is installed under:'
  prefs: []
  type: TYPE_NORMAL
- en: C:\Users\***username***\AppData\Local\Continuum\anaconda3\envs\myenv
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/e3fdb4e0cc8d5ace7873bd23993fd46d.png)'
  prefs: []
  type: TYPE_IMG
- en: File → Options → Global → Python scripting
  prefs: []
  type: TYPE_NORMAL
- en: ???? Example 1 — Clustering in Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Clustering is a machine learning technique that groups data points with similar
    characteristics. These groupings are useful for exploring data, identifying patterns
    and analyzing a subset of data. Some common business use cases for clustering
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Customer segmentation for the purpose of marketing.
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Customer purchasing behavior analysis for promotions and discounts.
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Identifying geo-clusters in an epidemic outbreak such as COVID-19.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will use **‘jewellery.csv’** file that is available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/jewellery.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  prefs: []
  type: TYPE_NORMAL
- en: '**Link to csv File: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/jewellery.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/jewellery.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/5edc725e8cd55d215ef4c071db06b9a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Power BI Desktop → Get Data → Other → Web![Figure](../Images/ff97b38f2726e72632995c3d0f8be0bc.png)
  prefs: []
  type: TYPE_NORMAL
- en: '*Sample data points from jewellery.csv*'
  prefs: []
  type: TYPE_NORMAL
- en: '**K-Means Clustering**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To train a clustering model we will execute Python script in Power Query Editor
    (Power Query Editor → Transform → Run python script).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/4b25a7feba15824c05ba67abecc26150.png)'
  prefs: []
  type: TYPE_IMG
- en: Ribbon in Power Query Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following code as a Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/7f86b0448df2bda96c4cc68ef0543abf.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query Editor (Transform → Run python script)
  prefs: []
  type: TYPE_NORMAL
- en: '**Output:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Clustering Results (after execution of code)![Figure](../Images/4146b95c76aa1ba15323aa20d9d16f89.png)
  prefs: []
  type: TYPE_NORMAL
- en: Final Output (after clicking on Table)
  prefs: []
  type: TYPE_NORMAL
- en: A new column **‘Cluster’ **containing label is attached to the original table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you apply the query (Power Query Editor → Home → Close & Apply), Here
    is how you can visualize the clusters in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d14f4b5e3aa036b0135d90551263d569.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, PyCaret trains a **K-Means** clustering model with 4 clusters (*i.e.
    all the data points in the table are categorized into 4 groups*). Default values
    can be changed easily:'
  prefs: []
  type: TYPE_NORMAL
- en: To change the number of clusters you can use ***num_clusters***parameter within **get_clusters(
    ) **function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To change model type use ***model ***parameter within **get_clusters( )**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the following example code of training K-Modes model with 6 clusters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'There are 9 ready-to-use clustering algorithms available in PyCaret:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/899f72d5dd7f2a4f89b2e0e40fd3c9d8.png)'
  prefs: []
  type: TYPE_IMG
- en: All the preprocessing tasks necessary to train a clustering model such as [missing
    value imputation](https://pycaret.org/missing-values/) (if table has any missing
    or *null* values), or [normalization](https://www.pycaret.org/normalization),
    or [one-hot-encoding](https://pycaret.org/one-hot-encoding/), they all are automatically
    performed before training a clustering model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: ???? In this example we have used the **get_clusters( ) **function to assign
    cluster labels in the original table. Every time the query is refreshed, clusters
    are recalculated. An alternate way to implement this would be to use the **predict_model(
    )** function to predict cluster labels using a **pre-trained model **in Python
    or in Power BI (*see Example 5 below to see how to train machine learning models
    in Power BI environment*).
  prefs: []
  type: TYPE_NORMAL
- en: ???? If you want to learn how to train a clustering model in Python using Jupyter
    Notebook, please see our [Clustering 101 Beginner’s Tutorial](https://www.pycaret.org/clu101). *(no
    coding background needed).*
  prefs: []
  type: TYPE_NORMAL
- en: ???? Example 2 — Anomaly Detection in Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Anomaly Detection is a machine learning technique used for identifying **rare
    items**, **events,** **or observations **by checking for rows in the table that
    differ significantly from the majority of the rows. Typically, the anomalous items
    will translate to some kind of problem such as bank fraud, a structural defect,
    medical problem or error. Some common business use cases for anomaly detection
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Fraud detection (credit cards, insurance, etc.) using financial data.
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Intrusion detection (system security, malware) or monitoring for network traffic
    surges and drops.
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Identifying multivariate outliers in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will use **‘anomaly.csv’** file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/anomaly.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  prefs: []
  type: TYPE_NORMAL
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/anomaly.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/anomaly.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/471fa1bd43faf4234bb72f168b363b6e.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Sample data points from anomaly.csv*'
  prefs: []
  type: TYPE_NORMAL
- en: K-Nearest Neighbors Anomaly Detector
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to clustering, we will run Python script from Power Query Editor (Transform
    → Run python script) to train an anomaly detection model. Run the following code
    as a Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/3a0f137e42ed28bad716d735c66bf2d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query Editor (Transform → Run python script)
  prefs: []
  type: TYPE_NORMAL
- en: '**Output:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Anomaly Detection Results (after execution of code)![Figure](../Images/e158a6347c29c8bcc68a298b983b4051.png)
  prefs: []
  type: TYPE_NORMAL
- en: Final Output (after clicking on Table)
  prefs: []
  type: TYPE_NORMAL
- en: Two new columns are attached to the original table. Label (1 = outlier, 0 =
    inlier) and Score (data points with high scores are categorized as outlier).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you apply the query, here is how you can visualize the results from anomaly
    detection in Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f19ffddcfedac07e646344f23f5b6f9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, PyCaret trains a **K-Nearest Neighbors Anomaly Detector** with
    5% fraction (i.e. 5% of the total number of rows in the table will be flagged
    as outlier). Default values can be changed easily:'
  prefs: []
  type: TYPE_NORMAL
- en: To change the fraction value you can use ***fraction ***parameter within **get_outliers(
    ) **function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To change model type use ***model ***parameter within **get_outliers( )**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the following code for training an **Isolation Forest** model with 0.1
    fraction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There are over 10 ready-to-use anomaly detection algorithms in PyCaret:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/60f99e849a1c82050db0cbb2700f2311.png)'
  prefs: []
  type: TYPE_IMG
- en: All the preprocessing tasks necessary to train an anomaly detection model such
    as [missing value imputation](https://pycaret.org/missing-values/) (if table has
    any missing or *null* values), or [normalization](https://www.pycaret.org/normalization),
    or [one-hot-encoding](https://pycaret.org/one-hot-encoding/), they all are automatically
    performed before training an anomaly detection model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: ???? In this example we have used the **get_outliers( ) **function to assign
    outlier label and score for analysis. Every time the query is refreshed, outliers
    are recalculated. An alternate way to implement this would be to use the **predict_model(
    )** function to predict outliers using a pre-trained model in Python or in Power
    BI (*see Example 5 below to see how to train machine learning models in Power
    BI environment*).
  prefs: []
  type: TYPE_NORMAL
- en: ???? If you want to learn how to train an anomaly detector in Python using Jupyter
    Notebook, please see our [Anomaly Detection 101 Beginner’s Tutorial](https://www.pycaret.org/ano101). *(no
    coding background needed).*
  prefs: []
  type: TYPE_NORMAL
- en: ???? Example 3 — Natural Language Processing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Several techniques are used to analyze text data among which **Topic Modeling **is
    a popular one. A topic model is a type of statistical model for discovering the
    abstract topics in a collection of documents. Topic modeling is a frequently used
    text-mining tool for the discovery of hidden semantic structures in a text data.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will usethe** ‘kiva.csv’ **file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/kiva.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  prefs: []
  type: TYPE_NORMAL
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/kiva.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/kiva.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Latent Dirichlet Allocation**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Run the following code as a Python script in Power Query Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/702fe793104164afbd7fe70ed7ed5321.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query Editor (Transform → Run python script)
  prefs: []
  type: TYPE_NORMAL
- en: '**‘en’** is the name of the column containing text in the table **‘kiva’**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Topic Modeling Results (after execution of code)![Figure](../Images/b94268f345e68e888a64c3205e01d7e4.png)
  prefs: []
  type: TYPE_NORMAL
- en: Final Output (after clicking on Table)
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the code is executed, new columns with weight of topics and dominant topic
    are attached to the original table. There are many ways to visualize the output
    of Topic Models in Power BI. See an example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/62689e5bc6adca6e229d5b3480a0898c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By default, PyCaret trains a Latent Dirichlet Allocation model with 4 topics.
    Default values can be changed easily:'
  prefs: []
  type: TYPE_NORMAL
- en: To change the number of topics you can use the ***num_topics ***parameter within **get_topics(
    ) **function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To change model type use the ***model ***parameter within the **get_topics(
    )**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'See the example code for training a **Non-Negative Matrix Factorization Model** with
    10 topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'PyCaret has following ready-to-use algorithms for topic modeling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2939021fb3471a663f521e5373968128.png)'
  prefs: []
  type: TYPE_IMG
- en: ???? Example 4— Association Rule Mining in Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Association Rule Miningis a **rule-based machine learning **technique for discovering
    interesting relations between variables in a database. It is intended to identify
    strong rules using measures of interestingness. Some common business use cases
    for association rule mining are:'
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Market Basket Analysis to understand items frequently bought together.
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Medical Diagnosis to assist physicians in determining occurrence probability
    of illness given factors and symptoms.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will use the **‘france.csv’** file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/france.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  prefs: []
  type: TYPE_NORMAL
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/france.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/france.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/bf78797a41f6371b4558a21e94597fcc.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Sample data points from france.csv*'
  prefs: []
  type: TYPE_NORMAL
- en: Apriori Algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It should be clear by now that all PyCaret functions are executed as Python
    script in Power Query Editor (Transform → Run python script). Run the following
    code to train an association rule model using the Apriori algorithm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/0b92da4796521d4ed23ae963558ca542.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query Editor (Transform → Run python script)
  prefs: []
  type: TYPE_NORMAL
- en: '**‘InvoiceNo’** is the column containing transaction id and **‘Description’** contains
    the variable of interest i.e. the Product name.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Output:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Association Rule Mining Results (after execution of code)![Figure](../Images/b90d6b13f0e3251dd796f4f77a0cb442.png)
  prefs: []
  type: TYPE_NORMAL
- en: Final Output (after clicking on Table)
  prefs: []
  type: TYPE_NORMAL
- en: It returns a table with antecedents and consequents with related metrics such
    as support, confidence, lift etc. [Click here](https://www.pycaret.org/association-rule) to
    learn more about Association Rules Mining in PyCaret.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Example 5 — Classification in Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Classification is a supervised machine learning technique used to predict the
    categorical **class labels** (also known as binary variables). Some common business
    use case of classification are:'
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Predicting customer loan / credit card default.
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Predicting customer churn (whether the customer will stay or leave)
  prefs: []
  type: TYPE_NORMAL
- en: ✔ Predicting patient outcome (whether patient has disease or not)
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will use** ‘employee.csv’ **file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/employee.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  prefs: []
  type: TYPE_NORMAL
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/employee.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/employee.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective: **The table **‘employee’** contains information of 15,000 active
    employees in a company such as time spent at the company, average monthly hours
    worked, promotion history, department etc. Based on all of these columns (also
    known as *features* in machine learning terminology) the objective is to predict
    whether the employee will leave the company or not, represented by the column
    **‘left’** (1 means yes, 0 means no).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike Clustering, Anomaly Detection, and NLP examples which fall under the
    umbrella of unsupervised Machine Learning, Classification is a **supervised **technique
    and hence it is implemented in two parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Part 1: Training a Classification Model in Power BI**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step is to create a duplicate of the table **‘employee’** in Power
    Query Editor which will be used for training a model.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/12d72c5edb34e2a1b1adc63f6852db3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query Editor → Right Click ‘employee’ → Duplicate
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following code in the newly created duplicate table **‘employee (model
    training)’** to train a classification model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/ff70a0c29e6419e5655f0a35f125fbcc.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query Editor (Transform → Run python script)
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output of this script will be a **pickle file **saved at the defined location.
    The pickle file contains the entire data transformation pipeline as well as trained
    model object.
  prefs: []
  type: TYPE_NORMAL
- en: ???? An alternate to this would be to train a model in Jupyter notebook instead
    of Power BI. In this case, Power BI will only be used to generate predictions
    on the front-end using a pre-trained model in Jupyter notebook that will be imported
    as a pickle file into Power BI (follow Part 2 below). To learn more about using
    PyCaret in Python, [click here](https://www.pycaret.org/tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: ???? If you want to learn how to train a classification model in Python using
    Jupyter Notebook, please see our [Binary Classification 101 Beginner’s Tutorial](https://www.pycaret.org/clf101). *(no
    coding background needed).*
  prefs: []
  type: TYPE_NORMAL
- en: 'There are 18 ready-to-use classification algorithms available in PyCaret:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0a844304999676480f56c42c145ec52f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Part 2: Generate Predictions using Trained Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can now use the trained model on the original **‘employee’ **table to predict
    whether the employee will leave the company or not (1 or 0) and the probability
    %. Run the following code as python script to generate predictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Classification Predictions (after execution of code)![Figure](../Images/e1ffb5e9076607e39ac8a591a04da35f.png)
  prefs: []
  type: TYPE_NORMAL
- en: Final Output (after clicking on Table)
  prefs: []
  type: TYPE_NORMAL
- en: Two new columns are attached to the original table. The **‘Label’** column indicates
    the prediction and **‘Score’** column is the probability of outcome.
  prefs: []
  type: TYPE_NORMAL
- en: In this example we have predicted on the same data that we have used for training
    the model for demonstration purpose only. In a real setting, the **‘Left’** column
    is the actual outcome and is unknown at the time of prediction.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we have trained an **Extreme Gradient Boosting** **(‘xgboost’)** model
    and used it to generate predictions. We have done this for simplicity only. Practically,
    you can use PyCaret to predict any type of model or chain of models.
  prefs: []
  type: TYPE_NORMAL
- en: PyCaret’s **predict_model( )** function can work seamlessly with the pickle
    file created using PyCaret as it contains the entire transformation pipeline along
    with trained model object. [Click here](https://www.pycaret.org/predict-model) to
    learn more about the **predict_model **function.
  prefs: []
  type: TYPE_NORMAL
- en: ???? All the preprocessing tasks necessary to train a classification model such
    as [missing value imputation](https://pycaret.org/missing-values/) (if table has
    any missing or *null* values), or [one-hot-encoding](https://pycaret.org/one-hot-encoding/),
    or [target encoding](https://www.pycaret.org/one-hot-encoding), they all are automatically
    performed before training a model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Example 6— Regression in Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Regression **is a supervised machine learning technique used to predict the
    a continuous outcome in the best possible way given the past data and its corresponding
    past outcomes. Unlike Classification which is used for predicting a binary outcome
    such as Yes or No (1 or 0), Regression is used for predicting continuous values
    such as Sales, Price, quantity etc.'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial we will use the **‘boston.csv’** file available on pycaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/boston.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  prefs: []
  type: TYPE_NORMAL
- en: '**Link to csv file:** [https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/boston.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/boston.csv)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Objective: **The table **‘boston’** contains information on 506 houses in
    Boston such as average number of rooms, property tax rates, population etc. Based
    on these columns (also known as *features* in machine learning terminology) the
    objective is to predict the median value of house, represented by column **‘medv’**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 1: Training a Regression Model in Power BI'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step is to create a duplicate of the **‘boston’** table in Power Query
    Editor that will be used for training a model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following code in the new duplicate table as python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The output of this script will be a **pickle file **saved at the defined location.
    The pickle file contains the entire data transformation pipeline as well as trained
    model object.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are over 20 ready-to-use regression algorithms available in PyCaret:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/05cae57d061b18adfa6fbdba17dec7a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Part 2: Generate Predictions using Trained Model'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can now use the trained model to predict the median value of houses. Run
    the following code in the original table **‘boston’**as a python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: Regression Predictions (after execution of code)![Figure](../Images/87868f1bf6988f82d052fd39e65428a3.png)
  prefs: []
  type: TYPE_NORMAL
- en: Final Output (after clicking on Table)
  prefs: []
  type: TYPE_NORMAL
- en: A new column** ‘Label’** that contains predictions are attached to the original
    table.
  prefs: []
  type: TYPE_NORMAL
- en: In this example we have predicted on the same data that we have used for training
    the model for demonstration purpose only. In a real setting, the **‘medv’** column
    is the actual outcome and is unknown at the time of prediction.
  prefs: []
  type: TYPE_NORMAL
- en: ???? All the preprocessing tasks necessary to train a regression model such
    as [missing value imputation](https://pycaret.org/missing-values/) (if table has
    any missing or *null* values), or [one-hot-encoding](https://pycaret.org/one-hot-encoding/),
    or [target transformation](https://pycaret.org/transform-target/), they all are
    automatically performed before training a model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Next Tutorial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the next tutorial of **Machine Learning in Power BI using PyCaret **series,
    we will go in more depth and explore advanced preprocessing features in PyCaret.
    We will also see how to productionalize a machine learning solution in Power BI
    and leverage the power of [PyCaret](https://www.pycaret.org/) on the front-end
    of Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to learn more on this please stay connected.
  prefs: []
  type: TYPE_NORMAL
- en: Follow us on our [Linkedin](https://www.linkedin.com/company/pycaret/) page
    and subscribe to our [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g) channel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also see:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Beginner level Python notebooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Clustering](https://www.pycaret.org/clu101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://www.pycaret.org/anom101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://www.pycaret.org/nlp101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Association Rule Mining](https://www.pycaret.org/arul101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regression](https://www.pycaret.org/reg101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Classification](https://www.pycaret.org/clf101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What’s in the development pipeline?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are actively working on improving PyCaret. Our future development pipeline
    includes a new **Time Series Forecasting **module, integration with **TensorFlow, **and
    major improvements on the scalability of PyCaret. If you would like to share your
    feedback and help us improve further, you may [fill this form](https://www.pycaret.org/feedback) on
    the website or leave a comment on our [Github ](https://www.github.com/pycaret/)or [LinkedIn](https://www.linkedin.com/company/pycaret/) page.
  prefs: []
  type: TYPE_NORMAL
- en: Want to learn about a specific module?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of the first release 1.0.0, PyCaret has the following modules available for
    use. Click on the links below to see the documentation and working examples in
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[Classification](https://www.pycaret.org/classification)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regression](https://www.pycaret.org/regression)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Clustering](https://www.pycaret.org/clustering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://www.pycaret.org/anomaly-detection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://www.pycaret.org/nlp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Association Rule Mining](https://www.pycaret.org/association-rules)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[User Guide / Documentation](https://www.pycaret.org/guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Github Repository](https://www.github.com/pycaret/pycaret)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Install PyCaret](https://www.pycaret.org/install)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Notebook Tutorials](https://www.pycaret.org/tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contribute in PyCaret](https://www.pycaret.org/contribute)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Please give us ⭐️ on our [github repo](https://www.github.com/pycaret/pycaret) if
    you like PyCaret.
  prefs: []
  type: TYPE_NORMAL
- en: Follow me on Medium: [https://medium.com/@moez_62905/](https://medium.com/@moez_62905/machine-learning-in-power-bi-using-pycaret-34307f09394a)
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 1.0.0](/2020/04/announcing-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Key Missing Part of the Machine Learning Stack](/2020/04/missing-part-machine-learning-stack.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sharing your machine learning models through a common API](/2020/02/sharing-machine-learning-models-common-api.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unlock the Power of AI - A Special Release by KDnuggets and Machine…](https://www.kdnuggets.com/2023/07/mlm-unlock-power-ai-special-release-kdnuggets-machine-learning-mastery.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Steps for Harnessing the Power of Data](https://www.kdnuggets.com/2022/05/3-steps-harnessing-power-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
