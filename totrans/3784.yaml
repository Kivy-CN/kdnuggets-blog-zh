- en: A Starter Guide to Data Structures for AI and Machine Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AI和机器学习的数据结构入门指南
- en: 原文：[https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)
- en: '![A Guide to Data Structures for AI and Machine Learning](../Images/54546439d60a71686a2119c44b07541a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![AI和机器学习的数据结构指南](../Images/54546439d60a71686a2119c44b07541a.png)'
- en: Image created by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者创建
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Data structures are, in a sense, the building blocks of algorithms, and are
    critical for the effective functioning of any AI or ML algorithm. These structures,
    while often thought of as simple containers for data, are more than that: they
    are incredibly rich tools in their own right, and can have a greater effect on
    the performance, efficiency, and overall computational complexity of algorithms
    than has been given credit. Choosing a data structure is therefore a task that
    requires careful thought, and can be determinate of the speed with which data
    can be processed, the scale to which an ML model can operate, or even of the feasibility
    of a given computational problem.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构在某种意义上是算法的构建块，对于任何AI或ML算法的有效运行至关重要。这些结构，虽然常被视为数据的简单容器，但实际上它们是非常丰富的工具，并且对算法的性能、效率和总体计算复杂度的影响远比人们所认为的要大。因此，选择数据结构是一个需要深思熟虑的任务，它可以决定数据处理的速度、ML模型的操作规模，甚至是特定计算问题的可行性。
- en: This article will introduce some data structures of importance in the fields
    of AI and ML and is aimed at both practictioners and students, as well as AI and
    ML enthusiasts. It is our hope in writing this article to supply some knowledge
    of important data structures in the AI and ML realms, as well as to provide some
    guidelines as to when and how these structures can be used effectively to their
    best advantage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将介绍一些在AI和ML领域中重要的数据结构，旨在服务于从业者、学生以及AI和ML爱好者。我们希望通过撰写这篇文章，提供关于AI和ML领域中重要数据结构的一些知识，并提供如何有效使用这些结构以发挥最佳优势的指南。
- en: 'As we go through each of a series of data structures, examples will be given
    of AI and ML scenarios in which they might be employed, each structure possessing
    its own set of strengths and weaknesses. Any implementations will be given in
    Python, a language of enormous popularity in the data science field, and are suitable
    for a variety of tasks in AI and ML. Mastering these core building blocks is essential
    for a variety of tasks that data scientists might face: sorting large data sets,
    creating high-performing algorithms that are both fast and light on memory, and
    maintaining data structures in a logical and efficient way to name but a few.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在逐一介绍这些数据结构时，将举例说明它们在AI和ML场景中的应用，每种结构都有其独特的优缺点。任何实现都会用Python给出，这是一种在数据科学领域中极受欢迎的语言，适用于AI和ML中的各种任务。掌握这些核心构建块对于数据科学家可能面临的各种任务至关重要：排序大型数据集、创建既快速又节省内存的高性能算法，以及以逻辑和高效的方式维护数据结构，仅举几例。
- en: After starting with the basics of simple arrays and dynamic arrays, we will
    move on to more advanced structures, such as linked lists and binary search trees,
    before wrapping up with hash tables, a structure that is both very useful and
    can provide an excellent return on the investment of learning. We cover both the
    mechanical production of these structures, as well as their real-world use in
    AI and ML applications, a combination of theory and practice that provides the
    reader with the understanding needed to decide which is best for a particular
    problem, and to implement those structures in a robust AI system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在从简单数组和动态数组的基础开始后，我们将继续讨论更高级的数据结构，如链表和二叉搜索树，最后介绍哈希表，这是一种非常有用的结构，并且学习投入的回报极高。我们将涵盖这些结构的机械生产，以及它们在AI和ML应用中的实际使用，这种理论与实践的结合为读者提供了决定哪种结构最适合特定问题的理解，并在强健的AI系统中实施这些结构。
- en: In this article we will dive into the various data structures pivotal for AI
    and machine learning, starting with arrays and dynamic arrays. By understanding
    the characteristics, advantages, and limitations of each data structure, practitioners
    can make informed choices that enhance the efficiency and scalability of their
    AI systems.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将深入探讨对AI和机器学习至关重要的各种数据结构，从数组和动态数组开始。通过了解每种数据结构的特点、优点和局限性，实践者可以做出明智的选择，从而提升其AI系统的效率和可扩展性。
- en: 1\. Arrays and Dynamically-Sizing Arrays
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 数组与动态数组
- en: Perhaps the most basic of computer science data structures, an array is a collection
    of elements of the same type stored in adjacent memory locations, allowing direct
    random access to each element. Dynamic arrays, like the lists in Python, build
    on simple arrays, but adding automatic resizing, where additional memory is allocated
    as elements are added or removed. This auto-memory-allocating ability is at the
    heart of dynamic arrays. A few basic suggestions as to when arrays are best to
    use might include problems with a seemingly linear traversing of data or where
    the number of elements does not fluctuate in the slightest, such as datasets of
    unchangeable sizes that Machine Learning algorithms might ingest.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可能是计算机科学中最基本的数据结构，它是存储在相邻内存位置的同一类型元素的集合，允许直接随机访问每个元素。动态数组，如Python中的列表，基于简单数组，但添加了自动调整大小的功能，当元素添加或删除时会分配额外的内存。这种自动内存分配能力是动态数组的核心。数组最佳使用的一些基本建议可能包括数据的线性遍历问题或元素数量完全不波动的情况，例如机器学习算法可能处理的不可变数据集。
- en: 'Let’s first discuss the upsides:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先讨论优点：
- en: 'Easy access to elements by index: Quick retrieval operations, which is crucial
    in many AI and ML scenarios where time efficiency is key'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过索引轻松访问元素：快速检索操作，这在许多AI和ML场景中至关重要，因为时间效率是关键。
- en: 'Good for known or fixed-size problems: Ideal for when the number of elements
    is predetermined or changes infrequently'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 适用于已知或固定大小的问题：当元素数量是预先确定的或变化不频繁时效果最佳。
- en: 'And the downsides:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 缺点：
- en: 'Fixed size (for static arrays): Requires knowing the maximum number of elements
    in advance, which can be limiting'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 固定大小（对于静态数组）：需要提前知道最大元素数量，这可能会有一定限制。
- en: 'Costly insertions and deletions (for static arrays): Each insertion or deletion
    potentially requires shifting elements, which is computationally expensive'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入和删除成本高（对于静态数组）：每次插入或删除可能需要移动元素，这在计算上是昂贵的。
- en: Arrays, possibly because they are simple to grasp and their utility, can be
    found nearly anywhere in computer science education; they are a natural classroom
    subject. Having O(1), or constant, time-complexity when accessing a random element
    from a computer memory location endears it to systems where runtime efficiency
    reigns supreme.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数组，可能因为它们易于理解和实用性，几乎无处不在计算机科学教育中；它们是自然的课堂主题。由于在从计算机内存位置访问随机元素时具有O(1)的时间复杂度，使得它们在运行时效率至上的系统中受到青睐。
- en: In the world of ML, the array and dynamic array are crucial for being able to
    handle datasets and, usually, to arrange feature vectors and matrices. High-performance
    numerical libraries like NumPy use arrays in concert with routines that efficiently
    perform task across datasets, allowing for rapid processing and transformation
    of numerical data required for training models and using them for predictions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ML 的世界里，数组和动态数组对于处理数据集以及通常安排特征向量和矩阵至关重要。像 NumPy 这样的高性能数值库使用数组与高效执行跨数据集任务的例程相结合，允许快速处理和转换训练模型所需的数值数据并进行预测。
- en: 'A few fundamental operations performed with Python’s pre-built dynamic array
    data structure, the list, include:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 内置的动态数组数据结构列表执行的一些基本操作包括：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Linked Lists
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 链表
- en: Linked lists are another basic data structure, one consisting of a sequence
    of nodes. Each node in the list contains both some data along with a pointer to
    the next node in the list. A singly linked list is one that each node in the list
    has a reference to just the next node in the list, allowing for forward traversal
    only; a doubly linked list, on the other hand, has a reference to both the next
    and previous nodes, capable of forward and backward traversal. This makes linked
    lists a flexible option for some tasks where arrays may not be the best choice.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 链表是另一种基本的数据结构，由一系列节点组成。列表中的每个节点都包含一些数据以及指向下一个节点的指针。单向链表是指列表中的每个节点只引用下一个节点，只允许向前遍历；而双向链表则引用下一个和前一个节点，能够进行前向和后向遍历。这使得链表在某些任务中比数组更具灵活性。
- en: 'The good:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 优点：
- en: 'They are: dynamic expansions or contractions of linked lists occur with no
    additional overhead of reallocating and moving the entire structure'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是：链表的动态扩展或收缩不会增加重新分配和移动整个结构的额外开销。
- en: They facilitate fast insertions and deletions of nodes without requiring further
    node shifting, as an array might necessitate
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们能够快速插入和删除节点，而不需要像数组那样进行额外的节点移动。
- en: 'The bad:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不利之处：
- en: The unpredictability of the storage locations of elements creates poor caching
    situations, especially in contrast to arrays
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素存储位置的不确定性会造成缓存效果差，尤其是与数组相比。
- en: The linear or worse access times required to locate an element by index, needing
    full traversal from head to find, are less efficient
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过索引定位元素所需的线性或更差的访问时间，需要从头开始完全遍历，效率较低。
- en: They are especially useful for structures where the number of elements is unclear,
    and frequent insertions or deletions are required. Such applications make them
    useful for situations that require dynamic data, where changes are frequent. Indeed,
    the dynamic sizing capability of linked lists is one of their strong points; they
    are clearly a good fit where the number of elements cannot be predicted well in
    advance and where considerable waste could occur as a result. Being able to tweak
    a linked list structure without the major overhead of a wholesale copy or rewrite
    is an obvious benefit, particularly where routine data structure adjustments are
    likely to be required.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它们对于元素数量不明确且需要频繁插入或删除的结构尤其有用。这种应用使得它们在需要动态数据、频繁变化的情况下变得有用。的确，链表的动态调整能力是它们的强项之一；它们显然适用于那些元素数量无法提前准确预测并且可能产生大量浪费的情况。能够在没有大量复制或重写的主要开销的情况下调整链表结构是一项明显的好处，特别是当例行的数据结构调整可能是必需的。
- en: Though they have less utility than arrays in the realm of AI and ML, linked
    lists do find specific applications wherein highly mutable data structures with
    rapid modifications are needed, such as for managing data pools in genetic algorithms
    or other situations where operations on individual elements are performed regularly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在 AI 和 ML 领域的实用性不如数组，但链表确实在需要高度可变数据结构和快速修改的特定应用中找到了用处，例如在遗传算法中管理数据池或其他需要对单个元素进行常规操作的情况。
- en: Shall we have a simple Python implementation of linked list actions? Sure, why
    not. Note that the following basic linked list implementation includes a Node
    class to represent each list element, and a LinkedList class to handle the operations
    on the list, including appending and deleting nodes.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来一个简单的 Python 链表操作实现吧？当然可以。请注意，以下基本链表实现包括一个 Node 类来表示每个列表元素，还有一个 LinkedList
    类来处理列表上的操作，包括追加和删除节点。
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here is an explanation of the above code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是上述代码的解释：
- en: This LinkedList class is responsible for managing the linked list, which includes
    creation, appending data, deleting nodes, and displaying the list, and when initialized
    creates the head pointer, head, marks an empty linked list by default
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个 LinkedList 类负责管理链表，包括创建、追加数据、删除节点和显示链表，并且在初始化时会创建头指针 head，默认标记为空链表。
- en: The append method appends data to the end of a linked list, creating a new node
    either at the head of the list when it's empty, or traversing to the end of a
    non-empty list to add the new node
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: append 方法将数据追加到链表的末尾，当链表为空时，会在链表头部创建一个新节点；否则，会遍历到非空链表的末尾添加新节点。
- en: 'The delete_node method removes a node with a given key (data) by considering
    these three cases: target key is in the head node; target key is in another node
    in the list; no node holds the key'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: delete_node 方法通过考虑以下三种情况来删除具有给定键（数据）的节点：目标键在头节点中；目标键在链表的其他节点中；没有节点包含该键。
- en: By setting pointers correctly, it is able to take out a node without sacrificing
    the order of remaining nodes
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过正确设置指针，能够在不破坏剩余节点顺序的情况下移除一个节点。
- en: The print_list method walks the list starting at the head, printing the contents
    of each node, in sequence, allowing for a simple means of understanding the list
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: print_list 方法从头节点开始遍历链表，按顺序打印每个节点的内容，提供了一种简单的理解链表的方式。
- en: 'Here is an example of the above LinkedList code being used:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是上述 LinkedList 代码的一个使用示例：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 3\. Trees, particularly Binary Search Trees (BST)
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 树，特别是二叉搜索树（BST）
- en: Trees are an example of a non-linear data structure (compare with arrays) in
    which parent-child relationships exist between nodes. Each tree has a root node,
    and nodes may contain zero or more child nodes, in a hierarchical structure. A
    Binary Search Tree (BST) is a kind of tree that allows each node to contain up
    to two children, generally referred to as the left child and right child. In this
    type of tree, keys contained in a node must, respectively, either be greater than
    or equal to all nodes contained within its left subtree, or less than or equal
    to all nodes contained in its right subtree. These properties of BSTs can facilitate
    more efficient search, insert, and remove operations, provided that the tree remains
    balanced.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 树是一种非线性数据结构（与数组比较），其中节点之间存在父子关系。每棵树都有一个根节点，节点可以包含零个或多个子节点，形成层次结构。二叉搜索树（BST）是一种树，其中每个节点最多可以包含两个子节点，通常称为左子节点和右子节点。在这种树中，节点中包含的键必须分别大于或等于其左子树中所有节点的键，或小于或等于其右子树中所有节点的键。这些
    BST 的属性可以促进更高效的搜索、插入和删除操作，前提是树保持平衡。
- en: 'BST pros:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: BST 优点：
- en: With respect to more commonly used data structures such as arrays or linked
    lists, BSTs facilitate quicker access, insertion and deletion
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 相对于更常用的数据结构，如数组或链表，BST 促进了更快速的访问、插入和删除操作。
- en: 'And BST cons:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: BST 缺点：
- en: However, previously mentioned that BSTs will provide decreased performance when
    unbalanced/skewed
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然而，前面提到过，当 BST 不平衡或偏斜时，会导致性能下降。
- en: This can cause operation time complexity to degrade to O(n) in the worst case
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这可能会导致操作的时间复杂度在最坏情况下降到 O(n)。
- en: BSTs are particularly effective when many search, insert, or delete operations
    are required with respect to the dataset they are handling. They are certainly
    more appropriate when the data is accessed frequently in a dataset that undergoes
    frequent changes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当需要对数据集进行大量搜索、插入或删除操作时，BST 特别有效。对于频繁访问的数据集，它们确实更为合适。
- en: Moreover, trees represent an ideal structure for describing hierarchical data
    in a way creating a tree-like relationships between data, like files system or
    organizational chart. This makes them particularly useful in applications where
    this sort of hierarchical data structuring is of interest.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，树是一种理想的结构，用于以树状关系描述层次数据，比如文件系统或组织结构图。这使得它们在需要这种层次数据结构的应用中特别有用。
- en: BSTs are able to assure search operations are quick due to their average O(log
    n) time complexity for access, insert, and delete operations. This makes them
    of particular interest for applications where swift data access and updates are
    necessary.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉搜索树（BST）能够确保搜索操作快速，因为它们的平均时间复杂度为 O(log n)，适用于访问、插入和删除操作。这使得它们在需要快速数据访问和更新的应用中尤其重要。
- en: Decision trees, a type of tree data structure widely used for classification
    and regression tasks in machine learning, enable models to be constructed which
    predict the based off target variable from rules determined by the features. Trees
    also see wide use in AI, such as game programming; particularly in the case of
    games of strategy such as chess, trees are used to simulate scenarios and determine
    constraints which dictate optimal moves.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 决策树，一种广泛用于机器学习分类和回归任务的树形数据结构，使模型能够基于由特征确定的规则预测目标变量。树在 AI 中也有广泛应用，例如游戏编程；尤其在策略游戏如国际象棋中，树用于模拟场景并确定决定最优移动的约束。
- en: 'Here is an overview of how you can implement a basic BST, including insert,
    search and delete methods, using Python:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用 Python 实现基本 BST 的概述，包括插入、搜索和删除方法：
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Explanation of the above code:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的解释：
- en: The foundation of a Binary Search Tree is the TreeNode class, which houses the
    node's value (val) and its left and right child node pointers (left and right)
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二叉搜索树的基础是 TreeNode 类，它包含节点的值（val）以及其左子节点和右子节点的指针（left 和 right）。
- en: 'The insert function is an implementation of the recursive strategy of inserting
    a value into the BST: in the base case in which no root exists it creates a new
    TreeNode, and otherwise it puts keys larger than itself to its right subtree,
    and smaller nodes to the left, preserving the BST''s structure'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插入函数是将值插入 BST 的递归策略的实现：在没有根节点的基本情况下创建一个新的 TreeNode，否则将比自身大的键放入右子树，将较小的节点放入左子树，保持
    BST 的结构。
- en: The search function handles the base cases of no node with the specified value
    being found and not finding the specified root's value, and then searches recursively
    in the correct subtree based on the value of the key being compared to the current
    node
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索函数处理没有找到指定值的节点和没有找到指定根的值的基本情况，然后根据键的值与当前节点比较，在正确的子树中递归搜索。
- en: 'The delete_node method can be split into three cases: like a delete call for
    a key without children (replaced by the right child); one without a right child
    (replaced by the left child); and delete on a node with two children (replaced
    by its ''inorder successor'', the smallest value in its right subtree), making
    the recursive node deletions and maintaining BST structure'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: delete_node 方法可以分为三种情况：如没有子节点的键的删除调用（由右子节点替代）；没有右子节点的（由左子节点替代）；以及删除具有两个子节点的节点（由其“中序后继”，即右子树中的最小值替代），使递归节点删除并保持
    BST 结构。
- en: A helper function is that of finding the minimum-value node (i.e. the leftmost
    node) of a subtree, which is utilized during the deletion of a node with two children
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 辅助函数是查找子树的最小值节点（即最左侧节点），它在删除具有两个子节点的节点时使用。
- en: Here is an example of the above BST code implementation being used.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是上述 BST 代码实现的一个示例。
- en: '[PRE4]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 4\. Hash Tables
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 哈希表
- en: Hash tables are a data structure well-suited to rapid data access. They harness
    a hash function to compute an index into a series of slots or buckets, out of
    which the desired value is returned. Hash tables can deliver almost instant data
    access thanks to these hash functions, and can be used to scale to large datasets
    with no decrease in access speed. The efficiency of hash tables relies heavily
    on a hash function, which evenly distributes entries across an array of buckets.
    This distribution helps to avoid key collisions, which is when different keys
    resolve to the same slot; proper key collision resolution is a core concern of
    hash table implementations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表是一种适合快速数据访问的数据结构。它们利用哈希函数计算索引到一系列槽或桶中，从中返回所需的值。由于这些哈希函数，哈希表能够提供几乎即时的数据访问，并且可以扩展到大型数据集而不降低访问速度。哈希表的效率在很大程度上依赖于哈希函数，该函数将条目均匀地分布在桶数组中。这种分布有助于避免键冲突，即不同的键解析到相同的槽；正确的键冲突解决是哈希表实现的核心问题。
- en: 'Pros of hash tables:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表的优点：
- en: 'Rapid data retrieval: Provides average-case constant time complexity (O(1))
    for lookups, insertions, and deletions'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速数据检索：提供平均情况下常数时间复杂度（O(1)）用于查找、插入和删除。
- en: 'Average time complexity efficiency: Mostly consistently swift, which makes
    hash tables suited to real-time data handling in general'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均时间复杂度效率：大多数情况下迅速，这使得哈希表适合一般实时数据处理。
- en: 'Cons of hash tables:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表的缺点：
- en: 'Worst-case time complexity not great: Can degrade to O(n) if there are many
    items hashing to the same bucket'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最坏情况下时间复杂度不佳：如果有很多项哈希到相同的桶，则可能退化为 O(n)。
- en: 'Reliant on a good hash function: The importance of the hash function to hash
    table performance is significant, as it has a direct influence on how well the
    data is distributed amongst the buckets'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于良好的哈希函数：哈希函数对哈希表性能的重要性显著，因为它直接影响数据在桶中的分布效果。
- en: Hash tables are most often used when rapid lookups, insertions, and deletions
    are required, without any need for ordered data. They are particularly useful
    when quick access to items via their keys is necessary to make operations more
    rapid. The constant time complexity property of hash tables for their basic operations
    makes them extremely useful when high performance operation is a requirement,
    especially in situations where time is of the essence.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希表通常在需要快速查找、插入和删除操作时使用，而不需要有序的数据。当通过键快速访问项是必要的，以使操作更加迅速时，它们特别有用。哈希表在基本操作上的常数时间复杂度特性使它们在需要高性能操作时非常有用，尤其是在时间至关重要的情况下。
- en: They are great for dealing with massive data, since they provide a high speed
    way for data lookup, with no performance degredation as the size of the data grows.
    AI often needs to handle huge amounts of data, where hash tables for retrieval
    and lookup make a lot of sense.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它们非常适合处理大量数据，因为它们提供了一种高速的数据查找方式，数据量增加时不会出现性能退化。AI通常需要处理大量数据，在这种情况下，哈希表用于检索和查找非常有意义。
- en: Within machine learning, hash tables help with feature indexing large data collections
    - in preprocessing and model training, quick access and data manipulation facilitated
    via hash tables. They can also make certain algorithms perform more efficiently
    - in some cases, during k-nearest neighbors calculation, they can store already
    computed distances and recall them from a hash table to make large dataset calculations
    quicker.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器学习中，哈希表帮助对大型数据集合进行特征索引——在预处理和模型训练中，通过哈希表促进了快速访问和数据操作。它们还可以使某些算法更高效——在某些情况下，在k最近邻计算中，它们可以存储已经计算的距离，并从哈希表中调用这些距离，以加快大数据集计算的速度。
- en: 'In Python, the dictionary type is an implementation of hash tables. How to
    make use of Python dictionaries is explained below, with a collision handling
    strategy as well:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，字典类型是哈希表的一种实现。如何使用Python字典以及处理冲突的策略将在下文中解释：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: An investigation of a few of the data structures underpinning AI and machine
    learning models can show us what some of these rather simple building blocks of
    the underlying technology are capable of. The inherent linearity of arrays, the
    adaptability of linked lists, the hierarchical organization of trees, and the
    O(1) search time of hash tables each offer different benefits. This understanding
    can inform the engineer as to how they can best leverage these structures %mdash;
    not only in the machine learning models and training sets they put together, but
    in the reasoning behind their choices and implementations.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对支撑AI和机器学习模型的一些数据结构进行调查，可以让我们了解这些相对简单的基础技术块的能力。数组的固有线性、链表的适应性、树的层次组织以及哈希表的O(1)查找时间各自提供了不同的好处。这种理解可以帮助工程师更好地利用这些结构——不仅在他们组建的机器学习模型和训练集里，而且在他们选择和实施的推理过程中。
- en: 'Becoming proficient in elementary data structures with relevance to machine
    learning and AI is a skill that has implications. There are lots of places to
    learn this skill-set, from university to workshops to online courses. Even open
    source code can be an invaluable asset in getting familiar with the disciplinary
    tools and best practices. The practical ability to work with data structures is
    not one to be overlooked. So to the data scientists and AI engineers of today,
    tomorrow, and thereafter: practice, experiment, and learn from the data structure
    materials available to you.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 精通与机器学习和AI相关的基本数据结构是一项具有实际意义的技能。有很多地方可以学习这一技能，从大学到研讨会再到在线课程。即使是开源代码也可以是熟悉学科工具和最佳实践的重要资产。处理数据结构的实际能力不容忽视。因此，对今天、明天以及未来的数据科学家和AI工程师们：实践、实验，并从可用的数据结构材料中学习。
- en: '[](https://www.linkedin.com/in/mattmayo13/)****[Matthew Mayo](https://www.kdnuggets.com/wp-content/uploads/./profile-pic.jpg)****
    ([**@mattmayo13**](https://twitter.com/mattmayo13)) holds a master''s degree in
    computer science and a graduate diploma in data mining. As managing editor of
    [KDnuggets](https://www.kdnuggets.com/) & [Statology](https://www.statology.org/),
    and contributing editor at [Machine Learning Mastery](https://machinelearningmastery.com/),
    Matthew aims to make complex data science concepts accessible. His professional
    interests include natural language processing, language models, machine learning
    algorithms, and exploring emerging AI. He is driven by a mission to democratize
    knowledge in the data science community. Matthew has been coding since he was
    6 years old.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.linkedin.com/in/mattmayo13/)****[Matthew Mayo](https://www.kdnuggets.com/wp-content/uploads/./profile-pic.jpg)****
    ([**@mattmayo13**](https://twitter.com/mattmayo13)) 拥有计算机科学硕士学位和数据挖掘研究生文凭。作为[KDnuggets](https://www.kdnuggets.com/)和[Statology](https://www.statology.org/)的执行编辑，以及[Machine
    Learning Mastery](https://machinelearningmastery.com/)的贡献编辑，Matthew致力于使复杂的数据科学概念变得易于理解。他的专业兴趣包括自然语言处理、语言模型、机器学习算法和探索新兴AI。他的使命是使数据科学社区的知识民主化。Matthew从6岁起就开始编程。'
- en: More On This Topic
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[OpenAI API for Beginners: Your Easy-to-Follow Starter Guide](https://www.kdnuggets.com/openai-api-for-beginners-your-easy-to-follow-starter-guide)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI API初学者指南：你的易于跟随的入门指南](https://www.kdnuggets.com/openai-api-for-beginners-your-easy-to-follow-starter-guide)'
- en: '[Super Study Guide: A Free Algorithms and Data Structures eBook](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超级学习指南：免费的算法与数据结构电子书](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python基础：语法、数据类型和控制结构](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步开始学习Python数据结构](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
- en: '[Beginner’s Guide to Careers in AI and Machine Learning](https://www.kdnuggets.com/beginners-guide-to-careers-in-ai-and-machine-learning)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI和机器学习职业入门指南](https://www.kdnuggets.com/beginners-guide-to-careers-in-ai-and-machine-learning)'
- en: '[How to MLOps like a Boss: A Guide to Machine Learning without Tears](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何像老板一样进行MLOps：无泪机器学习指南](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
