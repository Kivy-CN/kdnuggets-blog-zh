["```py\nfrom dt_auto import read_csv\ndf=read_csv('myfile.csv')\n```", "```py\nfrom pandas import read_csv\ndf=read_csv('myfile.csv')\ndf.info()\n```", "```py\nimport pandas as pd\ndef dt_inplace(df):\n    \"\"\"Automatically detect and convert (in place!) each\n    dataframe column of datatype 'object' to a datetime just\n    when ALL of its non-NaN values can be successfully parsed\n    by pd.to_datetime().  Also returns a ref. to df for\n    convenient use in an expression.\n    \"\"\"\n    from pandas.errors import ParserError\n    for c in df.columns[df.dtypes=='object']: #don't cnvt num\n        try:\n            df[c]=pd.to_datetime(df[c])\n        except (ParserError,ValueError): #Can't cnvrt some\n            pass # ...so leave whole column as-is unconverted\n    return df\ndef read_csv(*args, **kwargs):\n    \"\"\"Drop-in replacement for Pandas pd.read_csv. It invokes\n    pd.read_csv() (passing its arguments) and then auto-\n    matically detects and converts each column whose datatype\n    is 'object' to a datetime just when ALL of the column's\n    non-NaN values can be successfully parsed by\n    pd.to_datetime(), and returns the resulting dataframe.\n    \"\"\"\n    return dt_inplace(pd.read_csv(*args, **kwargs))\n```"]