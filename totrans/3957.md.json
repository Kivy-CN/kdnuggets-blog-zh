["```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Generate random data\nnp.random.seed(42)\ndata = pd.DataFrame({\n    'value': np.random.normal(0, 1, 1000)\n})\n```", "```py\n# Function to detect outliers using IQR\ndef detect_outliers_iqr(data):\n    Q1 = data.quantile(0.25)\n    Q3 = data.quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    return (data < lower_bound) | (data > upper_bound)\n\n# Detect outliers\noutliers = detect_outliers_iqr(data['value'])\n\nprint(f\"Number of outliers detected: {sum(outliers)}\")\n```", "```py\n# Visualize the data with outliers using scatter plot and box plot\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Scatter plot\nax1.scatter(range(len(data)), data['value'], c=['blue' if not x else 'red' for x in outliers])\nax1.set_title('Dataset with Outliers Highlighted (Scatter Plot)')\nax1.set_xlabel('Index')\nax1.set_ylabel('Value')\n\n# Box plot\nsns.boxplot(x=data['value'], ax=ax2)\nax2.set_title('Dataset with Outliers (Box Plot)')\nax2.set_xlabel('Value')\n\nplt.tight_layout()\nplt.show()\n```", "```py\n# Remove outliers\ndata_cleaned = data[~outliers]\n\nprint(f\"Original dataset size: {len(data)}\")\nprint(f\"Cleaned dataset size: {len(data_cleaned)}\")\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Scatter plot\nax1.scatter(range(len(data_cleaned)), data_cleaned['value'])\nax1.set_title('Dataset After Removing Outliers (Scatter Plot)')\nax1.set_xlabel('Index')\nax1.set_ylabel('Value')\n\n# Box plot\nsns.boxplot(x=data_cleaned['value'], ax=ax2)\nax2.set_title('Dataset After Removing Outliers (Box Plot)')\nax2.set_xlabel('Value')\n\nplt.tight_layout()\nplt.show()\n```", "```py\ndef cap_outliers(data, lower_percentile=5, upper_percentile=95):\n    lower_limit = np.percentile(data, lower_percentile)\n    upper_limit = np.percentile(data, upper_percentile)\n    return np.clip(data, lower_limit, upper_limit)\n\ndata['value_capped'] = cap_outliers(data['value'])\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Scatter plot\nax1.scatter(range(len(data)), data['value_capped'])\nax1.set_title('Dataset After Capping Outliers (Scatter Plot)')\nax1.set_xlabel('Index')\nax1.set_ylabel('Value')\n\n# Box plot\nsns.boxplot(x=data['value_capped'], ax=ax2)\nax2.set_title('Dataset After Capping Outliers (Box Plot)')\nax2.set_xlabel('Value')\n\nplt.tight_layout()\nplt.show()\n```", "```py\ndata['value_imputed'] = data['value'].copy()\nmedian_value = data['value'].median()\ndata.loc[outliers, 'value_imputed'] = median_value\n\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n# Scatter plot\nax1.scatter(range(len(data)), data['value_imputed'])\nax1.set_title('Dataset After Imputing Outliers (Scatter Plot)')\nax1.set_xlabel('Index')\nax1.set_ylabel('Value')\n\n# Box plot\nsns.boxplot(x=data['value_imputed'], ax=ax2)\nax2.set_title('Dataset After Imputing Outliers (Box Plot)')\nax2.set_xlabel('Value')\n\nplt.tight_layout()\nplt.show()\n```", "```py\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Generate right-skewed data\nnp.random.seed(42)\ndata = np.random.exponential(scale=2, size=1000)\ndf = pd.DataFrame(data, columns=['value'])\n\n# Apply Log Transformation (shifted to avoid log(0))\ndf['log_value'] = np.log1p(df['value'])\n\nfig, axes = plt.subplots(2, 2, figsize=(15, 10))\n\n# Original Data - Scatter Plot\naxes[0, 0].scatter(range(len(df)), df['value'], alpha=0.5)\naxes[0, 0].set_title('Original Data (Scatter Plot)')\naxes[0, 0].set_xlabel('Index')\naxes[0, 0].set_ylabel('Value')\n\n# Original Data - Box Plot\nsns.boxplot(x=df['value'], ax=axes[0, 1])\naxes[0, 1].set_title('Original Data (Box Plot)')\naxes[0, 1].set_xlabel('Value')\n\n# Log Transformed Data - Scatter Plot\naxes[1, 0].scatter(range(len(df)), df['log_value'], alpha=0.5)\naxes[1, 0].set_title('Log Transformed Data (Scatter Plot)')\naxes[1, 0].set_xlabel('Index')\naxes[1, 0].set_ylabel('Log(Value)')\n\n# Log Transformed Data - Box Plot\nsns.boxplot(x=df['log_value'], ax=axes[1, 1])\naxes[1, 1].set_title('Log Transformed Data (Box Plot)')\naxes[1, 1].set_xlabel('Log(Value)')\n\nplt.tight_layout()\nplt.show() \n```"]