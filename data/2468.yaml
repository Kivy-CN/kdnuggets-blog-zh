- en: Effective Testing for Machine Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习的有效测试
- en: 原文：[https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)
- en: We presented a shorter version of this blog series at [PyData Global 2021](https://www.youtube.com/watch?v=Oc5x0qrB0FA).
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们在[PyData Global 2021](https://www.youtube.com/watch?v=Oc5x0qrB0FA)上展示了这个博客系列的简短版本。
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的捷径。'
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的IT需求'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Click here for Part II](https://ploomber.io/blog/ml-testing-ii), [here for
    Part III](https://ploomber.io/blog/ml-testing-iii).'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[点击这里查看第二部分](https://ploomber.io/blog/ml-testing-ii)，[点击这里查看第三部分](https://ploomber.io/blog/ml-testing-iii)。'
- en: '![Effective Testing for Machine Learning](../Images/dc6875e133c8813b839b431613eab46a.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![机器学习的有效测试](../Images/dc6875e133c8813b839b431613eab46a.png)'
- en: This blog post series describes a strategy I’ve developed over the last couple
    of years to test Machine Learning projects effectively. Given how uncertain ML
    projects are, this is an incremental strategy that you can adopt as your project
    matures; it includes test examples to provide a clear idea of how these tests
    look in practice, and a complete project implementation is [available on GitHub](https://github.com/edublancas/ml-testing).
    By the end of the post, you’ll be able to develop more robust ML pipelines.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本博客系列描述了一种我在过去几年中开发的策略，用于有效测试机器学习项目。鉴于机器学习项目的不确定性，这是一种逐步的策略，你可以随着项目的成熟而采纳；它包括测试示例，以提供这些测试在实践中的清晰概念，并且完整的项目实现[可在
    GitHub 上获取](https://github.com/edublancas/ml-testing)。到文章末尾，你将能够开发出更强健的机器学习管道。
- en: Challenges when testing ML projects
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试机器学习项目的挑战
- en: 'Testing Machine Learning projects is challenging. Training a model is a long-running
    task that may take hours to run and has a non-deterministic output, which is the
    opposite we need to test software: quick and deterministic procedures. One year
    ago, I published a [post](https://ploomber.io/posts/ci-for-ds/) on testing data-intensive
    projects to make Continuous Integration feasible. I later turned that blog post
    into a talk and presented it at [PyData 2020](https://www.youtube.com/watch?v=zvnjOzvsvXw).
    But such previous work only covered generic aspects of testing data pipelines
    and left out testing ML models.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 测试机器学习项目是具有挑战性的。训练一个模型是一个长时间运行的任务，可能需要数小时，并且具有非确定性的输出，这与我们测试软件所需的快速和确定性过程正好相反。一年前，我发布了一篇关于测试数据密集型项目的[帖子](https://ploomber.io/posts/ci-for-ds/)，以使持续集成成为可能。我后来将这篇博客文章转化为演讲，并在[PyData
    2020](https://www.youtube.com/watch?v=zvnjOzvsvXw)上进行了展示。但之前的工作仅涵盖了数据管道测试的通用方面，并没有涉及机器学习模型的测试。
- en: It’s important to clarify that *testing and monitoring are two different things*.
    Testing is an offline process that allows us to evaluate whether our code does
    what it’s supposed to do (i.e., produce a high-quality model). In contrast, monitoring
    involves inspecting a *deployed* model to ensure it works correctly. Thus, *testing
    happens before deployment; monitoring occurs after deployment.*
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 需要明确的是，*测试和监控是两回事*。测试是一个离线过程，允许我们评估代码是否按预期工作（即，生成高质量的模型）。相反，监控涉及检查*已部署*的模型，以确保它正常工作。因此，*测试发生在部署之前；监控发生在部署之后*。
- en: I use the terms *pipeline* and *task* throughout the post. A task is a unit
    of work (usually a function or a script); for example, one task can be a script
    that downloads the raw data, and another could clean such data. On the other hand,
    a pipeline is just a series of tasks executed in a pre-defined order. The motivation
    for building pipelines made of small tasks is to make our code more maintainable
    and easier to test; that lines up with the goal of our [open-source framework](https://github.com/ploomber/ploomber) to
    help data scientists build more maintainable projects using Jupyter. In the following
    sections, you’ll see some sample Python code; we use [pytest](https://pytest.org/),
    pandas, and [Ploomber](https://github.com/ploomber/ploomber).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我在本文中使用了*pipeline* 和 *task* 这两个术语。任务是一个工作单元（通常是一个函数或脚本）；例如，一个任务可以是下载原始数据的脚本，另一个任务可以是清理这些数据。另一方面，管道只是按预定义顺序执行的一系列任务。构建由小任务组成的管道的动机是使我们的代码更具可维护性和更易于测试；这与我们[开源框架](https://github.com/ploomber/ploomber)的目标一致，旨在帮助数据科学家使用
    Jupyter 构建更具可维护性的项目。在接下来的部分中，你将看到一些示例 Python 代码；我们使用[pytest](https://pytest.org/)、pandas
    和[Ploomber](https://github.com/ploomber/ploomber)。
- en: Parts of a Machine Learning pipeline
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习管道的各个部分
- en: 'Before we describe the testing strategy, let’s analyze how a typical ML pipeline
    looks. By analyzing each part separately, we can clearly state its role in the
    project and design a testing strategy accordingly. A standard ML pipeline has
    the following components:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们描述测试策略之前，让我们分析一个典型的 ML 管道的样子。通过分别分析每个部分，我们可以清楚地阐明其在项目中的作用，并相应地设计测试策略。一个标准的
    ML 管道具有以下组件：
- en: '**Feature generation pipeline.** A series of computations to process *raw data* and
    map each data point to a feature vector. Note that we use this component at training
    and serving time.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**特征生成管道。** 一系列计算，用于处理*原始数据*并将每个数据点映射到特征向量。请注意，我们在训练和服务时都会使用这个组件。'
- en: '**Training task.** Takes a training set and produces a model file.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**训练任务。** 接收训练集并生成模型文件。'
- en: '**Model file.** The output from the training task. It’s a single file that
    contains a model with learned parameters. In addition, it may include pre-processors
    such as scaling or one-hot encoding.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模型文件。** 来自训练任务的输出。它是一个包含学习到的参数的单一文件。此外，它可能包括预处理程序，如缩放或独热编码。'
- en: '**Training pipeline.** Encapsulates the training logic: get raw data, generate
    features, and train models.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**训练管道。** 封装了训练逻辑：获取原始数据，生成特征，并训练模型。'
- en: '**Serving pipeline.** (also known as inference pipeline) Encapsulates the serving
    logic: gets a new observation, generates features, passes features through the
    model, and returns a prediction.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**服务管道。**（也称为推理管道）封装了服务逻辑：获取新观察值，生成特征，通过模型传递特征，并返回预测结果。'
- en: '![Effective Testing for Machine Learning](../Images/e20b64e84f020e07a8eaf02fdb14ec45.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![有效的机器学习测试](../Images/e20b64e84f020e07a8eaf02fdb14ec45.png)'
- en: What can go wrong?
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可能会出什么问题？
- en: 'To motivate our testing strategy, let’s enumerate what could go wrong with
    each part:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了激励我们的测试策略，让我们列举每个部分可能出现的问题：
- en: Feature generation pipeline
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特征生成管道
- en: Cannot run the pipeline (e.g., setup problems, broken code).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法运行管道（例如，设置问题、代码损坏）。
- en: Cannot reproduce a previously generated training set.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法重现之前生成的训练集。
- en: Pipeline produces low-quality training data.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管道生成低质量的训练数据。
- en: Training task
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练任务
- en: Cannot train a model (e.g., missing dependencies, broken code).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法训练模型（例如，缺少依赖项、代码损坏）。
- en: Running the training task with high-quality data produces low-quality models.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用高质量数据运行训练任务生成低质量模型。
- en: Model file
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型文件
- en: The generated model has a lower quality than our current model in production.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的模型质量低于我们当前生产中的模型。
- en: The model file does not integrate correctly with the serving pipeline.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模型文件与服务管道集成不正确。
- en: Serving pipeline
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务管道
- en: Cannot serve predictions (e.g., missing dependencies, broken code).
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无法提供预测（例如，缺少依赖项、代码损坏）。
- en: Mismatch between preprocessing at training and serving time (aka [training-serving
    skew](https://ploomber.io/blog/train-serve-skew/)).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练和服务时的预处理不匹配（即[训练-服务偏差](https://ploomber.io/blog/train-serve-skew/)）。
- en: Outputs a prediction when passing invalid raw data.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传入无效原始数据时输出预测。
- en: Crashes when passed valid data.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 传入有效数据时崩溃。
- en: Note that this isn’t an exhaustive list, but it covers the most common problems.
    Depending on your use case, you may have other potential issues, and it’s vital
    to list them to customize your testing strategy accordingly.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这不是一个详尽的列表，但涵盖了最常见的问题。根据你的使用情况，可能还有其他潜在问题，重要的是列出它们以便定制你的测试策略。
- en: Testing strategy
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试策略
- en: 'When developing ML models, the faster we iterate, the higher the chance of
    success. Unlike traditional software engineering projects where it’s clear what
    we should build (e.g., a sign-up form), ML projects have a lot of uncertainty:
    Which datasets to use? What features to try? What models to use? Since we don’t
    know the answer to those questions in advance, we must try a few experiments and
    evaluate whether they yield better results. Because of this uncertainty, we have
    to balance iteration speed with testing quality. If we iterate *too fast*, we
    risk writing sloppy code; if we spend too much time thoroughly testing every line
    of code, we won’t improve our models fast enough.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发机器学习模型时，我们迭代的速度越快，成功的机会就越大。与传统的软件工程项目不同（例如，注册表单），机器学习项目存在很多不确定性：使用哪些数据集？尝试哪些特征？使用什么模型？由于我们事先不知道这些问题的答案，我们必须尝试一些实验并评估它们是否产生更好的结果。由于这种不确定性，我们必须在迭代速度和测试质量之间取得平衡。如果我们迭代
    *太快*，可能会编写粗糙的代码；如果我们花太多时间彻底测试每一行代码，就无法足够快地改进我们的模型。
- en: This framework steadily increases the quality of your tests. The strategy consists
    of five levels; when reaching the last level, you have robust enough testing that
    allows you to push new model versions to production confidently.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个框架稳步提高你的测试质量。策略包括五个层级；当达到最后一层时，你的测试已经足够健壮，可以自信地将新的模型版本推送到生产环境。
- en: Testing levels
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试层级
- en: '**Smoke testing.** We ensure our code works by running it on each `git push`.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**冒烟测试。** 我们通过在每次 `git push` 时运行代码来确保其正常工作。'
- en: '**Integration testing and unit testing.** Test task’s output and data transformations.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集成测试和单元测试。** 测试任务的输出和数据转换。'
- en: '**Distribution changes and serving pipeline.** Test changes in data distributions
    and test we can load a model file and predict.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**分布变化和服务管道。** 测试数据分布的变化以及测试我们能否加载模型文件并进行预测。'
- en: '**Training-serving skew.** Test that the training and serving logic is consistent.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**训练与服务偏差。** 测试训练和服务逻辑的一致性。'
- en: '**Model quality.** Test model quality.'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模型质量。** 测试模型质量。'
- en: Quick introduction to testing in with `pytest`
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简要介绍如何使用 `pytest` 进行测试
- en: '*If you’ve used `pytest` before, you may skip this section.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果你之前使用过 `pytest`，可以跳过此部分。*'
- en: 'Tests are short programs that check whether our code is working. For example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是检查我们的代码是否正常工作的短程序。例如：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A test is a function that runs some code, and *asserts* its output. For example,
    the previous file has two tests: `test_add` and `test_substract`, organized in
    a file called `test_math.py`; it’s usual to have one file per module (e.g., `test_math.py` tests
    all functions in a `math.py` module). Testing files usually go under a `tests/` directory:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是一个运行一些代码并 *断言* 其输出的函数。例如，上一个文件有两个测试：`test_add` 和 `test_substract`，组织在一个名为
    `test_math.py` 的文件中；通常每个模块一个文件（例如，`test_math.py` 测试 `math.py` 模块中的所有函数）。测试文件通常放在
    `tests/` 目录下：
- en: '[PRE1]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Testing frameworks such as [pytest](https://pytest.org/) allow you to collect
    all your tests, execute them and report which ones fail and which ones succeed:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 测试框架如 [pytest](https://pytest.org/) 允许你收集所有测试，执行它们并报告哪些测试失败，哪些测试成功：
- en: '[PRE2]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A typical project structure looks like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的项目结构如下：
- en: '[PRE3]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`src/` contains your project’s pipeline’s tasks and other utility functions. `exploratory/` includes
    exploratory notebooks and your tests go into the `tests/` directory. The code
    in `src/` must be importable from the other two directories. The easiest way to
    achieve this is to [package your project](https://ploomber.io/posts/packaging/).
    Otherwise, you have to fiddle with `sys.path` or `PYTHONPATH`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/` 包含你项目的管道任务和其他实用函数。`exploratory/` 包含探索性笔记本，你的测试放在 `tests/` 目录中。`src/`
    中的代码必须可以从其他两个目录中导入。实现这一点的最简单方法是 [打包你的项目](https://ploomber.io/posts/packaging/)。否则，你需要处理
    `sys.path` 或 `PYTHONPATH`。'
- en: How to navigate the sample code
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何导航示例代码
- en: Sample code is available [here](https://github.com/edublancas/ml-testing). The
    repository has five branches, each implementing the testing levels I’ll describe
    in upcoming sections. Since this is a progressive strategy, you can see the evolution
    of the project by starting from the [first branch](https://github.com/edublancas/ml-testing/tree/1-smoke-testing) and
    moving up to the following branches.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 示例代码可在 [这里](https://github.com/edublancas/ml-testing)找到。该仓库有五个分支，每个分支实现了我将在接下来的部分中描述的测试级别。由于这是一种渐进策略，你可以通过从 [第一个分支](https://github.com/edublancas/ml-testing/tree/1-smoke-testing)开始，逐步查看项目的演变。
- en: The project implements the pipeline using [Ploomber, our open-source framework](https://github.com/ploomber/ploomber).
    Hence, you can see the pipeline specification in the `pipeline.yaml` file. To
    see which commands we’re using to test the pipeline, open [`.github/workflows/ci.yml`](https://github.com/edublancas/ml-testing/blob/1-smoke-testing/.github/workflows/ci.yml),
    this is a GitHub actions configuration file that tells GitHub to run certain commands
    on each `git push`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目使用了 [Ploomber，我们的开源框架](https://github.com/ploomber/ploomber)来实现管道。因此，你可以在`pipeline.yaml`文件中查看管道规格。要查看我们用于测试管道的命令，请打开 [`.github/workflows/ci.yml`](https://github.com/edublancas/ml-testing/blob/1-smoke-testing/.github/workflows/ci.yml)，这是一个GitHub
    Actions配置文件，用于告诉GitHub在每次`git push`时运行特定的命令。
- en: While not strictly necessary, you may want to check out our [Ploomber introductory
    tutorial](https://docs.ploomber.io/en/latest/get-started/spec-api-python.html) to
    understand the basic concepts.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是严格必要的，但你可能会想查看我们的 [Ploomber入门教程](https://docs.ploomber.io/en/latest/get-started/spec-api-python.html)以了解基本概念。
- en: Note that the code snippets displayed in this blog post are generic (they don’t
    use any specific pipeline framework) because we want to explain the concept in
    general terms; however, the sample code in the [repository](https://github.com/edublancas/ml-testing) uses
    Ploomber.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，本博客文章中显示的代码片段是通用的（它们不使用任何特定的管道框架），因为我们想要用一般术语解释概念；然而，仓库中的示例代码使用了Ploomber。
- en: 'Level 1: Smoke testing'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一级：冒烟测试
- en: '**[Sample code available here.](https://github.com/edublancas/ml-testing/tree/1-smoke-testing)**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**[示例代码可在这里找到。](https://github.com/edublancas/ml-testing/tree/1-smoke-testing)**'
- en: Smoke testing is the most basic level of testing and should be implemented as
    soon as you start a project. Smoke testing does not check the output of your code
    but only ensures that it runs. While it may seem too simplistic, it’s much better
    than not having tests at all.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 冒烟测试是最基本的测试级别，应在你开始项目时立即实施。冒烟测试不会检查代码的输出，只会确保它能够运行。虽然这看起来过于简单，但比完全没有测试要好得多。
- en: Documenting dependencies
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 记录依赖项
- en: 'Listing external dependencies is step zero when starting any software project,
    so ensure you document all the dependencies needed to run your project when creating
    your [virtual environment](https://ploomber.io/posts/python-envs/). For example,
    if using `pip`, your `requirements.txt` file may look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 列出外部依赖项是启动任何软件项目的第一步，因此在创建你的 [虚拟环境](https://ploomber.io/posts/python-envs/)时，确保记录运行项目所需的所有依赖项。例如，如果使用`pip`，你的`requirements.txt`文件可能如下所示：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After creating your virtual environment, create another file (`requirements.lock.txt`)
    to register installed versions of all dependencies. You can do so with the `pip
    freeze > requirements.lock.txt` command (execute it after running `pip install
    -r requirements.txt`), which generates something like this:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟环境后，创建另一个文件（`requirements.lock.txt`）来记录所有依赖项的已安装版本。你可以使用`pip freeze > requirements.lock.txt`命令（在运行`pip
    install -r requirements.txt`后执行）生成类似如下内容的文件：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Recording specific dependency versions ensures that changes from any of those
    packages do not break your project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 记录具体的依赖项版本可以确保这些包的更改不会破坏你的项目。
- en: Another important consideration is to keep your list of dependencies as short
    as possible. There’s usually a set of dependencies you need at development time
    but not in production. For example, you may use `matplotlib` for model evaluation
    plots, but you don’t need it to make predictions. Splitting your development and
    deployment dependencies is highly recommended. Projects with a lot of dependencies
    increase the risk of running into version conflicts.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的考虑因素是将你的依赖列表保持尽可能简短。通常，你在开发时需要一组依赖项，但在生产环境中不需要。例如，你可能会使用`matplotlib`进行模型评估图，但在进行预测时不需要它。强烈建议将开发和部署的依赖项分开。依赖项过多的项目增加了遇到版本冲突的风险。
- en: Testing feature generation pipelines
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试特性生成管道
- en: 'One of the first milestones in your project must be to get an end-to-end feature
    generation pipeline. Write some code to get the raw data, perform some basic cleaning,
    and generate some features. Once you have an end-to-end process working, you must
    ensure that it is reproducible: delete the raw data and check that you can re-run
    the process and get the same training data.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你项目的第一个里程碑必须是获得一个端到端的特征生成管道。编写一些代码来获取原始数据，进行一些基本清洗，并生成一些特征。一旦你有了一个完整的端到端流程，你必须确保它是可重复的：删除原始数据，并检查你是否可以重新运行该流程并获得相同的训练数据。
- en: 'Once you have this, it’s time to implement our first test; run the pipeline
    with a sample of the raw data (say, 1%). The objective is to make this test run
    fast (no more than a few minutes). Your test would look like this:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了这个，就可以实施第一个测试；用原始数据的一个样本（比如1%）运行管道。目标是使这个测试运行快速（不超过几分钟）。你的测试应如下所示：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that this is a basic test; we’re not checking the output of the pipeline!
    However, this simple test allows us to check whether the code runs. It’s essential
    to run this test whenever we execute `git push`. If you’re using GitHub, you can
    do so with [GitHub Actions](https://github.com/features/actions), other git platforms
    have similar features.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这只是一个基本测试；我们没有检查管道的输出！然而，这个简单的测试允许我们检查代码是否运行。每当我们执行`git push`时，运行此测试是至关重要的。如果你使用GitHub，可以通过[GitHub
    Actions](https://github.com/features/actions)完成，其他git平台也有类似功能。
- en: Testing the training task
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试训练任务
- en: 'After generating features, you train a model. The training task takes a training
    set as an input and outputs a model file. Testing the model training procedure
    is challenging because we cannot easily define an expected output (model file)
    given some input (training set) – mainly because our training set changes rapidly
    (i.e., add, remove features). So, at this stage, our first test only checks whether
    the task runs. Since we disregard the output (for now), we can train a model with
    a sample of the data; remember that this smoke test must execute on every push.
    So let’s extend our previous example to cover feature generation *and* model training:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在生成特征后，你会训练一个模型。训练任务接受一个训练集作为输入，并输出一个模型文件。测试模型训练过程具有挑战性，因为我们不能轻易定义给定某些输入（训练集）的期望输出（模型文件）——主要因为我们的训练集变化迅速（即添加、删除特征）。因此，在这个阶段，我们的第一个测试只检查任务是否运行。由于我们暂时忽略输出，我们可以使用数据样本来训练模型；记住，这个冒烟测试必须在每次推送时执行。因此，让我们扩展之前的示例，以涵盖特征生成*和*模型训练：
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**In the sample repository, we are using Ploomber, so we test the feature pipeline
    and training task by calling [`ploomber build`](https://github.com/edublancas/ml-testing/blob/1-smoke-testing/.github/workflows/ci.yml#L20),
    which executes all tasks in our pipeline.**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**在示例代码库中，我们使用Ploomber，因此我们通过调用[`ploomber build`](https://github.com/edublancas/ml-testing/blob/1-smoke-testing/.github/workflows/ci.yml#L20)来测试功能管道和训练任务，这会执行管道中的所有任务。**'
- en: 'Level 2: Integration testing and unit testing'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二级：集成测试和单元测试
- en: '**[Sample code available here.](https://github.com/edublancas/ml-testing/tree/2-integration-and-unit)**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**[示例代码可在此处查看。](https://github.com/edublancas/ml-testing/tree/2-integration-and-unit)**'
- en: 'It’s essential to modularize the pipeline in small tasks to allow us to test
    outputs separately. After implementing this second testing level, you achieve
    two things:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 将管道模块化为小任务，以便我们可以单独测试输出，这一点至关重要。在实现了第二个测试级别后，你将实现两件事：
- en: Ensure that the data used to train the model meets a minimum quality level.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保用于训练模型的数据达到最低质量水平。
- en: Separately test the portions of your code that have a precisely defined behavior.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别测试代码中行为定义明确的部分。
- en: Let’s discuss the first objective.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论第一个目标。
- en: Integration testing
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集成测试
- en: Testing data processing code is complicated because its goal is subjective.
    For example, imagine I ask you to test a function that takes a data frame and *cleans
    it*. How would you test it? The idea of data cleaning is to improve data quality.
    However, such a concept depends on the specifics of the data and your project.
    Hence, it’s up to you to define the *clean data* concept and translate that into *integration
    tests*, although in this case, we can use the term *data quality tests* to be
    more precise.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 测试数据处理代码是复杂的，因为其目标是主观的。例如，假设我让你测试一个接受数据框并*清洗它*的函数。你会如何测试？数据清洗的目的是提高数据质量。然而，这样的概念依赖于数据的具体情况和你的项目。因此，你需要定义*清洁数据*的概念，并将其转化为*集成测试*，尽管在这种情况下，我们可以使用*数据质量测试*这一术语来更精确。
- en: 'The idea of integration testing applies to all stages in your pipeline: from
    downloading data to generating features: it’s up to you to define the expectations
    at each stage. We can see a graphical representation of integration testing in
    the following diagram:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试的理念适用于管道中的所有阶段：从下载数据到生成特征：你需要定义每个阶段的期望。我们可以在下图中看到集成测试的图形表示：
- en: '![Effective Testing for Machine Learning](../Images/a310c41357c27f8145b89ad4e2c73dbe.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![机器学习的有效测试](../Images/a310c41357c27f8145b89ad4e2c73dbe.png)'
- en: 'For example, to add integration tests to a data cleaning function (let’s call
    it `clean`), we run a few checks at the end of the function’s body to verify its
    output quality. Common checks include no empty values, numerical columns within
    expected ranges or categorical values within a pre-defined set of values:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要为数据清理函数（我们称之为`clean`）添加集成测试，我们在函数体的末尾运行一些检查来验证其输出质量。常见的检查包括没有空值、数值列在预期范围内或分类值在预定义的值集合中：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This form of testing is different than the one we introduced in the first section. *Unit
    tests exist in the `tests/` folder and can run independently, but integration
    tests run when you execute your training pipeline.* Failing tests mean your data
    assumptions do not hold, and data assumptions must be re-defined (which implies
    updating your tests accordingly), or your cleaning procedure should change to
    ensure your tests pass.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这种测试形式与我们在第一部分介绍的测试有所不同。*单元测试存在于`tests/`文件夹中并可以独立运行，但集成测试在你执行训练管道时运行。* 失败的测试意味着你的数据假设不成立，需要重新定义数据假设（这意味着需要相应地更新测试），或者你的清理程序应更改以确保测试通过。
- en: You can write integration tests without any extra framework by adding assert
    statements at the end of each task. However, some libraries can help. For example, [Ploomber](https://github.com/ploomber/ploomber) supports
    running a function when a task finishes.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在每个任务结束时添加断言语句来编写集成测试，而不需要额外的框架。然而，一些库可以提供帮助。例如，[Ploomber](https://github.com/ploomber/ploomber)
    支持在任务完成时运行一个函数。
- en: '**[Here’s the implementation](https://github.com/edublancas/ml-testing/blob/2-integration-and-unit/tests/quality.py) of
    an integration test in our sample repository.**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**[这是实现示例](https://github.com/edublancas/ml-testing/blob/2-integration-and-unit/tests/quality.py)的集成测试在我们的样本代码库中。**'
- en: Unit testing
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单元测试
- en: Within each task in your pipeline (e.g., inside `clean`), you’ll likely have
    smaller routines; such parts of your code should be written as separate functions
    and unit tested (i.e., add tests in the `tests/` directory).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的每个任务中（例如，`clean`内部），你可能会有更小的例程；这些代码部分应作为独立函数编写并进行单元测试（即，在`tests/`目录中添加测试）。
- en: 'A good candidate for writing unit tests is when applying transformations to
    individual values in a column. For example, say that you’re using the [heart disease](https://archive.ics.uci.edu/ml/datasets/heart+disease) dataset
    and create a function to map the `chest_pain_type` categorical column from integers
    to their corresponding human-readable values. Your `clean` function may look like
    this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 编写单元测试的一个良好候选场景是对列中的单个值进行转换。例如，假设你正在使用[心脏病](https://archive.ics.uci.edu/ml/datasets/heart+disease)数据集，并创建一个函数将`chest_pain_type`分类列中的整数映射到其对应的可读值。你的`clean`函数可能如下所示：
- en: '[PRE9]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Unlike the general `clean` procedure, `transform.chest_pain_type` has an explicit,
    objectively defined behavior: it should map integers to the corresponding human-readable
    values. We can translate this into a unit test by specifying the inputs and the
    expected outputs.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 与一般的`clean`过程不同，`transform.chest_pain_type`具有明确的、客观定义的行为：它应将整数映射到对应的可读值。我们可以通过指定输入和预期输出将其转化为单元测试。
- en: '[PRE10]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Unit testing must be a continuous stream of work on all upcoming testing levels.
    Therefore, whenever you encounter a piece of logic with a precise objective, abstract
    it into a function and test it separately.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试必须在所有即将到来的测试级别上持续进行。因此，每当你遇到具有明确目标的逻辑时，将其抽象成函数并单独测试。
- en: '**[Here’s an implementation](https://github.com/edublancas/ml-testing/blob/2-integration-and-unit/tests/test_transform.py) of
    a unit test in the sample repository.**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**[这是一个实现示例](https://github.com/edublancas/ml-testing/blob/2-integration-and-unit/tests/test_transform.py)的单元测试在样本代码库中。**'
- en: Up next
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 接下来
- en: 'So far, we’ve implemented a basic strategy that ensures that our feature generation
    pipeline produces data with a minimum level of quality (integration tests or data
    quality tests) and verifies the correctness of our data transformations (unit
    tests). In the next part of this series, we’ll add more robust tests: test for
    distribution changes, ensure that our training and serving logic is consistent,
    and check that our pipeline produces high-quality models.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经实施了一种基本策略，确保我们的特征生成管道生成的数据具有最低质量标准（集成测试或数据质量测试），并验证数据转换的正确性（单元测试）。在本系列的下一部分中，我们将添加更强大的测试：测试分布变化，确保我们的训练和服务逻辑一致，并检查我们的管道是否生成高质量的模型。
- en: If you’d like to know when the second part is out, subscribe to our [newsletter](https://www.getrevue.co/profile/ploomber),
    follow us on [Twitter](https://twitter.com/ploomber) or [LinkedIn](https://https//linkedin.com/company/ploomber/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道第二部分何时发布，请订阅我们的 [新闻通讯](https://www.getrevue.co/profile/ploomber)，关注我们的
    [Twitter](https://twitter.com/ploomber) 或 [LinkedIn](https://https//linkedin.com/company/ploomber/)。
- en: '**[Eduardo Blancas](https://www.linkedin.com/in/edublancas/)** is one of the
    Ploomber co-founders. Ploomber is a Y Combinator-backed company that helps data
    scientists build data pipelines FAST. We do that by allowing them to develop modular
    pipelines and deploy them anywhere. Before that, he was a Data Scientist at Fidelity
    Investments, where he deployed the first customer-facing Machine Learning model
    for asset management. Eduardo holds an M.S. in Data Science from Columbia University
    and a B.S. in Mechatronics Engineering from Tecnológico de Monterrey.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**[爱德华多·布兰卡斯](https://www.linkedin.com/in/edublancas/)** 是 Ploomber 的联合创始人之一。Ploomber
    是一家获得 Y Combinator 资助的公司，帮助数据科学家快速构建数据管道。我们通过允许他们开发模块化管道并在任何地方部署它们来实现这一目标。在此之前，他是
    Fidelity Investments 的数据科学家，负责部署首个面向客户的资产管理机器学习模型。爱德华多拥有哥伦比亚大学的数据科学硕士学位和蒙特雷科技大学的机电工程学士学位。'
- en: '[Original](https://ploomber.io/blog/ml-testing-i/). Reposted with permission.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://ploomber.io/blog/ml-testing-i/)。经许可转载。'
- en: More On This Topic
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Hypothesis Testing and A/B Testing](https://www.kdnuggets.com/hypothesis-testing-and-ab-testing)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[假设检验与 A/B 测试](https://www.kdnuggets.com/hypothesis-testing-and-ab-testing)'
- en: '[The Difference Between Training and Testing Data in Machine Learning](https://www.kdnuggets.com/2022/08/difference-training-testing-data-machine-learning.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习中训练数据与测试数据的区别](https://www.kdnuggets.com/2022/08/difference-training-testing-data-machine-learning.html)'
- en: '[Beginner’s Guide to Machine Learning Testing With DeepChecks](https://www.kdnuggets.com/beginners-guide-to-machine-learning-testing-with-deepchecks)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习测试初学者指南：使用 DeepChecks](https://www.kdnuggets.com/beginners-guide-to-machine-learning-testing-with-deepchecks)'
- en: '[A/B Testing: A Comprehensive Guide](https://www.kdnuggets.com/ab-testing-a-comprehensive-guide)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[A/B 测试：综合指南](https://www.kdnuggets.com/ab-testing-a-comprehensive-guide)'
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[像专家一样测试：Python Mock 库的逐步指南](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
- en: '[Hypothesis Testing Explained](https://www.kdnuggets.com/2021/09/hypothesis-testing-explained.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[假设检验详解](https://www.kdnuggets.com/2021/09/hypothesis-testing-explained.html)'
