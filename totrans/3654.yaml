- en: 'Python Vector Databases and Vector Indexes: Architecting LLM Apps'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html](https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python Vector Databases and Vector Indexes: Architecting LLM Apps](../Images/98929da7efaaff613b06428c080125f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Christina Morillo](https://www.pexels.com/photo/man-standing-infront-of-white-board-1181345/)
  prefs: []
  type: TYPE_NORMAL
- en: Because of Generative AI applications created using their hardware, Nvidia has
    experienced significant growth. Another software innovation, the vector database,
    is also riding the Generative AI wave.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Developers are building AI-powered applications in Python on Vector Databases.
    By encoding data as vectors, they can leverage the mathematical properties of
    vector spaces to achieve fast similarity search across very large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the basics!
  prefs: []
  type: TYPE_NORMAL
- en: Vector Database Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A vector database stores data as numeric vectors in a coordinate space. This
    allows similarities between vectors to be calculated via operations like cosine
    similarity.
  prefs: []
  type: TYPE_NORMAL
- en: The closest vectors represent the most similar data points. Unlike scalar databases,
    vector databases are optimized for similarity searches rather than complex queries
    or transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving similar vectors takes milliseconds versus minutes, even across billions
    of data points.
  prefs: []
  type: TYPE_NORMAL
- en: Vector databases build indexes to efficiently query vectors by proximity. This
    is somewhat analogous to how text search engines index documents for fast full-text
    search.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Vector Search Over Traditional Databases for Developers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For developers, vector databases provide:'
  prefs: []
  type: TYPE_NORMAL
- en: Fast similarity search - Find similar vectors in milliseconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for dynamic data - Continuously update vectors with new data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability - Scale vector search across multiple machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexible architectures - Vectors can be stored locally, in cloud object stores,
    or managed databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High dimensionality - Index thousands of dimensions per vector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: APIs - If you go for a managed vector database, it usually comes with clean
    query APIs and integrations with some existing data science toolkits or platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The example of popular use cases supported by the vector searches (the key
    feature offering of a vector database) are:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual search - Find similar product images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommendations - Suggest content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Chatbots - Match queries to intent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search - Surface relevant documents from text vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use cases where vector searches are starting to gain traction are :'
  prefs: []
  type: TYPE_NORMAL
- en: Anomaly detection - Identify outlier vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drug discovery - Relate molecules by property vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a Python Vector Database?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Vector database which includes Python libraries that supports a full lifecycle
    of a vector database is a Python vector database.  The database itself does not
    need to be built in Python.
  prefs: []
  type: TYPE_NORMAL
- en: What Should be Supported by these Python Vector Database Libraries?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The calls to a vector database can be separated into two categories - **Data
    related** and **Management related**.  The good news here is that they follow
    similar patterns as a traditional database.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data related functions which libraries should support**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Vector Databases and Vector Indexes: Architecting LLM Apps](../Images/ba01fe739413d52def0874e7ec45b89f.png)'
  prefs: []
  type: TYPE_IMG
- en: Standard management related functions which libraries should support
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Vector Databases and Vector Indexes: Architecting LLM Apps](../Images/f6af30a16edc73f25c8958765157f192.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s now move on to a little more advanced concept where we talk about building
    LLM Apps on  top of these databases
  prefs: []
  type: TYPE_NORMAL
- en: Architecting LLM Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s understand what is involved from a workflow perspective before we go deeper
    into the architecture of vector search powered LLM Apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical ***workflow*** involves:'
  prefs: []
  type: TYPE_NORMAL
- en: Enriching or cleaning the data. This is a lightweight data transformation step
    to help with data quality and consistent content formatting. It is also where
    data may need to be enriched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Encoding data as vectors via models. The models have some transformers included
    (e.g. sentence transformers)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inserting vectors into a vector database or vector index (something which we
    will explain shortly)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exposing search via a Python API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Document orchestrating workflow
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing and visualizing results in apps and UIs (e.g. Chat UI)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let’s see how we enable different parts of this workflow using different
    architecture components.
  prefs: []
  type: TYPE_NORMAL
- en: For 1) you might need to start getting metadata from other source systems (including
    relational databases or content management systems.
  prefs: []
  type: TYPE_NORMAL
- en: Pretrained models are almost always preferred for step  2) above.  OpenAI models
    are the most well-liked models offered through hosted offerings. You might host
    local models for privacy and security reasons.
  prefs: []
  type: TYPE_NORMAL
- en: For 3), you need a vector database or vector index if you need to perform large
    similarity searches, such as in datasets with more than one billion records. From
    an enterprise standpoint, you typically have a little more context before you
    conduct the "search".
  prefs: []
  type: TYPE_NORMAL
- en: 'For 4) above, the good news is that the exposed search typically follows a
    similar pattern.  Something along the lines of the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: From [Pinecone](https://docs.pinecone.io/docs/metadata-filtering#:~:text=eq%22%3A%20%5B%22comedy%22%2C%20%22documentary%22%5D%7D%7D-,Inserting%20metadata%20into%20an%20index,-Metadata%20can%20be)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'An interesting line here is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It really filters the results to vectors near the ‘genre’ and ‘year’.  You can
    also filter vectors by concepts or themes.
  prefs: []
  type: TYPE_NORMAL
- en: The challenge now, in an enterprise setting, is that it includes other business
    filters. It is important to address the lack of modeling for data coming from
    data sources (think table structure and metadata). It would be important to improve
    text fidelity with fewer incorrect expressions that contradict the structured
    data. . A "data pipelining" strategy is required in this situation, and enterprise
    "content matching" starts to matter.
  prefs: []
  type: TYPE_NORMAL
- en: For 5) Other than the usual challenges of scaling ingest, a changing corpus
    has its own challenges. New documents may require re-encoding and re-indexing
    of the entire corpus to keep vectors relevant.
  prefs: []
  type: TYPE_NORMAL
- en: For 6) This is a completely new area and a human in the loop approach is required
    on top of testing similarity levels to ensure there is quality across the spectrum
    of search.
  prefs: []
  type: TYPE_NORMAL
- en: Automated search scoring along with different types of context scoring is not
    an easily accomplished task.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Vector Index: a simpler vector search alternative for your existing
    database.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **vector database** is a complex system that enables contextual search as
    in the above examples plus all the additional database functionalities (create,
    insert, update, delete, manage, …).
  prefs: []
  type: TYPE_NORMAL
- en: Examples of vector databases include Weaviate and Pinecone. Both of these expose
    Python API’s.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, a simpler setup is enough. As a lighter alternative, you can use
    whatever storage you were already using, and add a **vector index** based on it.
    This vector index is used for retrieving only your search queries with context,
    for example, for your generative AI use.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a vector index setup, you have:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your usual data storage (e.g. PostgreSQL or disk directory with files) provides
    the basic operations you need: create, insert, update, delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your vector index which enables fast context-based search on your data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standalone Python libraries which implement vector indices for you include FAISS,
    Pathway LLM, Annoy.
  prefs: []
  type: TYPE_NORMAL
- en: The good news is that the LLM application workflow for vector databases and
    Vector indexes is the same. The main difference is that in addition to the Python
    Vector Index library, you continue to also use your existing data library for
    “normal” data operations and for data management. For example, this could be Psycopg
    if you are using PostgreSQL, or the standard Python “fs” module if you are storing
    data in files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Proponents of vector indexes focus on the following advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Data Privacy: Keeps original data secure and undisturbed, minimizing data exposure
    risk.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cost-Efficiency: Lessens costs associated with extra storage, compute power,
    and licensing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scalability: Simplifies scaling by decreasing the number of components to manage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use Vector Databases vs Vector Indexes?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vector Databases are useful when one or more of the following is true
  prefs: []
  type: TYPE_NORMAL
- en: You have a specialized need for working with vector data at scale
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You are creating a standalone purpose-built application for vectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You do not expect other types of use for your stored data in other types of
    applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector Indexes are useful when one or more of the following is true
  prefs: []
  type: TYPE_NORMAL
- en: You do not want to trust new technology for your data storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your existing storage is easy to access from Python.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your similarity search is just one capability among other larger enterprise
    BI and database  needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need the ability to attach vectors to existing scalar records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need one unified way of dealing with pipelines for your data engineering
    team
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need index and graph structures on the data to help with your [LLM apps](https://github.com/pathwaycom/llm-app)
    or tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need augmented output or augmented context coming from other sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to create rules from your corpus which can apply to your transactional
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Future of Enterprise Vector Search
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vector search unlocks game-changing capabilities for developers. As models and
    techniques improve, expect vector databases or vector indexes to become an integral
    part of the application stack.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this overview provides a solid starting point for exploring vector databases
    and vector indexes  in Python. If you are curious about a recently developed vector
    index please check this [open source project](https://github.com/pathwaycom/llm-app).
  prefs: []
  type: TYPE_NORMAL
- en: '**[Anup Surendran](https://www.linkedin.com/in/anupsurendran/)** is a VP of
    Product and Product Marketing who specializes in bringing AI products to market.
    He has worked with startups that have had two successful exits (to SAP and Kroll)
    and enjoys teaching others about how AI products can improve productivity within
    an organization.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Vector Databases in AI and LLM Use Cases](https://www.kdnuggets.com/vector-databases-in-ai-and-llm-use-cases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Speed Up SQL Queries Using Indexes [Python Edition]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Database Optimization: Exploring Indexes in SQL](https://www.kdnuggets.com/2023/07/database-optimization-exploring-indexes-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beginner’s Guide to Building LLM Apps with Python](https://www.kdnuggets.com/beginners-guide-to-building-llm-apps-with-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are Vector Databases and Why Are They Important for LLMs?](https://www.kdnuggets.com/2023/06/vector-databases-important-llms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Honest Comparison of Open Source Vector Databases](https://www.kdnuggets.com/an-honest-comparison-of-open-source-vector-databases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
