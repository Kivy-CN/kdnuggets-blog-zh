- en: 10 Python Tips and Tricks You Should Learn Today
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html](https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/1ef0f4e1d43dc885d3291909d85ff6ef.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Rifqi Ali Ridho](https://unsplash.com/@rifqialiridho?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/paintbrush?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: According to Stack Overflow, Python is the fastest growing programming language.
    The latest [report from Forbes](https://www.whatech.com/development/press-release/442278-why-developers-vote-python-as-the-best-application-programming-language) states
    that Python showed a 456-percent growth in last year. Netflix uses Python, IBM
    uses Python, and hundreds of other companies all use Python. Let’s not forget
    Dropbox. Dropbox is also created in Python. According to [research by Dice](https://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/) Python
    is also one of the hottest skills to have and also the most popular programming
    language in the world based on the [Popularity of Programming Language Index](https://pypl.github.io/PYPL.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the advantages Python offers when compared to other programming languages
    are:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Compatible with major platforms and operating systems
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many open-source frameworks and tools
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Readable and maintainable code
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Robust standard library
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standard test-driven development
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python Tips and Tricks
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this piece, I’ll present 10 useful code tips and tricks that can help you
    in your day-to-day tasks. So without further ado, let’s get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Concatenating Strings
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need to concatenate a list of strings, you can do this using a *for
    loop* by adding each element one by one. However, this would be very inefficient,
    especially if the list is long. In Python, strings are immutable, and thus the
    left and right strings would have to be copied into the new string for every pair
    of concatenation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'A better approach is to use the `join()` function as shown below:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Using List Comprehensions
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: List comprehensions are used for creating new lists from other iterables. As
    list comprehensions returns lists, they consist of brackets containing the expression,
    which is executed for each element along with the for loop to iterate over each
    element. List comprehension is faster because it is optimized for the Python interpreter
    to spot a predictable pattern during looping.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: As an example let’s find the squares of the first five whole numbers using list
    comprehensions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now let’s find the common numbers from two list using list comprehension
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 3\. Iterate With `enumerate()`
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enumerate() method adds a counter to an iterable and returns it in a form of
    enumerate object.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Let’s solve the classic coding interview question named popularly as the Fizz
    Buzz problem.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that prints the numbers in a list, for multiples of ‘3’ print
    “fizz” instead of the number, for the multiples of ‘5’ print “buzz” and for multiples
    of both 3 and 5 it prints “fizzbuzz”.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 编写一个程序，打印列表中的数字，对于‘3’的倍数，打印“fizz”代替数字，对于‘5’的倍数，打印“buzz”，对于3和5的倍数，打印“fizzbuzz”。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 4\. Using ZIP When Working with Lists
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 在处理列表时使用ZIP
- en: 'Suppose you were given a task to combine several lists with the same length
    and print out the result? Again, here is a more generic way to get the desired
    result by utilizing `zip()` as shown in the code below:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你被要求将几个相同长度的列表合并并打印结果？这里有一个利用`zip()`的通用方法来获取所需结果，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 5\. Using itertools
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 使用itertools
- en: The Python `itertools` module is a collection of tools for handling iterators. `itertools` has
    multiple tools for generating iterable sequences of input data. Here I will be
    using `itertools.combinations()` as an example. `itertools.combinations()` is
    used for building combinations. These are also the possible groupings of the input
    values.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`itertools`模块是处理迭代器的工具集合。`itertools`有多个工具用于生成可迭代的输入数据序列。这里我将以`itertools.combinations()`为例。`itertools.combinations()`用于构建组合。这些组合也是输入值的所有可能分组。
- en: Let’s take a real world example to make the above point clear.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用一个实际的例子来说明上述观点。
- en: Suppose there are four teams playing in a tournament. In the league stages every
    team plays against every other team. Your task is to generate all the possible
    teams that would compete against each other.
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设有四支队伍参加比赛。在联赛阶段，每支队伍都要与其他每支队伍比赛。你的任务是生成所有可能的比赛对阵。
- en: 'Let’s take a look at the code below:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下面的代码：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The important thing to notice is that order of the values doesn’t matter. Because `('Team
    1', 'Team 2')` and `('Team 2', 'Team 1')` represent the same pair, only one of
    them would be included in the output list. Similarly we can use `itertools.permutations()` as
    well as other functions from the module. For a more complete reference, check
    out [this amazing tutorial](https://medium.com/@jasonrigden/a-guide-to-python-itertools-82e5a306cdf8).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的一点是，值的顺序并不重要。因为`('Team 1', 'Team 2')`和`('Team 2', 'Team 1')`表示的是相同的组合，输出列表中只会包含其中一个。类似地，我们还可以使用`itertools.permutations()`以及模块中的其他函数。作为更完整的参考，请查看[这个精彩的教程](https://medium.com/@jasonrigden/a-guide-to-python-itertools-82e5a306cdf8)。
- en: 6\. Using Python Collections
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 使用Python集合
- en: Python collections are container data types, namely lists, sets, tuples, dictionary.
    The collections module provides high-performance datatypes that can enhance your
    code, making things much cleaner and easier. There are a lot of functions provided
    by the collections module. For this demonstration, I will be using `Counter()` function.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Python集合是容器数据类型，包括列表、集合、元组和字典。collections模块提供了高性能的数据类型，可以增强你的代码，使其更加简洁易懂。collections模块提供了很多函数。为了演示，我将使用`Counter()`函数。
- en: The `Counter()` function takes an iterable, such as a list or tuple, and returns
    a Counter Dictionary. The dictionary’s keys will be the unique elements present
    in the iterable, and the values for each key will be the count of the elements
    present in the iterable.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`Counter()`函数接受一个可迭代对象，如列表或元组，并返回一个Counter字典。字典的键将是可迭代对象中存在的唯一元素，而每个键的值将是可迭代对象中该元素的计数。'
- en: To create a `counter` object, pass an iterable (list) to `Counter()` function
    as shown in the code below.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`counter`对象，将一个可迭代对象（列表）传递给`Counter()`函数，如下面的代码所示。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For a more complete reference, check out my [python collections tutorial](https://towardsdatascience.com/a-hands-on-guide-to-python-collections-aa350cb399e3).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为更完整的参考，请查看我的[python collections tutorial](https://towardsdatascience.com/a-hands-on-guide-to-python-collections-aa350cb399e3)。
- en: 7\. Convert Two Lists Into a Dictionary
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7\. 将两个列表转换为字典
- en: 'Let’s say we have two lists, one list contains names of the students and second
    contains marks scored by them. Let’s see how we can convert those two lists into
    a single dictionary. Using the zip function, this can be done using the code below:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个列表，一个列表包含学生的名字，另一个列表包含他们的分数。让我们看看如何将这两个列表转换为一个字典。使用zip函数，可以通过下面的代码完成：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 8\. Using Python Generators
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8\. 使用Python生成器
- en: Generator functions allow you to declare a function that behaves like an iterator.
    They allow programmers to make an iterator in a fast, easy, and clean way. Let’s
    take an example to explain this concept.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器函数允许你声明一个像迭代器一样工作的函数。它们允许程序员以一种快速、简单、清晰的方式创建迭代器。让我们举一个例子来解释这个概念。
- en: Suppose you’ve been given to find the sum of the first 100000000 perfect squares,
    starting with 1.
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 假设你需要计算前 100000000 个完美平方数的和，从 1 开始。
- en: 'Looks easy right? This can easily be done using list comprehension but the
    problem is the large inputs size. As an example let’s take a look at the below
    code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来很简单，对吧？这可以使用列表推导式轻松完成，但问题是输入数据量很大。例如，我们来看下面的代码：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'On increasing the perfect numbers we need to sum over, we realize that this
    method is not feasible due to higher computation time. Here’s where Python Generators
    come to the rescue. On replacing the brackets with parentheses we change the list
    comprehension into a generator expression. Now let’s calculate the time taken:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们增加需要求和的完美数字时，我们会发现由于计算时间较长，这种方法不可行。此时，Python 生成器可以派上用场。通过将方括号替换为圆括号，我们将列表推导式改为生成器表达式。现在让我们计算所需的时间：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As we can see, time taken has been reduced quite a bit. This effect will be
    even more pronounced for larger inputs.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，所需的时间已大大减少。对于更大的输入，这种效果会更加明显。
- en: For a more complete reference, check out my article [Reduce Memory Usage and
    Make Your Python Code Faster Using Generators](https://towardsdatascience.com/reduce-memory-usage-and-make-your-python-code-faster-using-generators-bd79dbfeb4c).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更全面的参考资料，请查看我的文章 [使用生成器减少内存使用并加快 Python 代码速度](https://towardsdatascience.com/reduce-memory-usage-and-make-your-python-code-faster-using-generators-bd79dbfeb4c)。
- en: 9\. Return Multiple Values From a Function
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9\. 从函数返回多个值
- en: 'Python has the ability to return multiple values from a function call, something
    missing from many other popular programming languages. In this case the return
    values should be a comma-separated list of values and Python then constructs a *tuple* and
    returns this to the caller. As an example see the code below:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python 能够从函数调用中返回多个值，这是许多其他流行编程语言所缺乏的。在这种情况下，返回值应该是一个用逗号分隔的值列表，Python 会构建一个
    *元组* 并将其返回给调用者。以下代码为示例：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 10\. Using sorted() Function
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10\. 使用 `sorted()` 函数
- en: Sorting any sequence is very easy in Python using the built-in method `sorted()`which
    does all the hard work for you. `sorted()`sorts any sequence (list, tuple) and
    always returns a list with the elements in sorted manner. Let’s take an example
    to sort a list of numbers in ascending order.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，使用内置方法 `sorted()` 排序任何序列非常简单，`sorted()` 会为你完成所有的繁重工作。`sorted()` 可以对任何序列（列表、元组）进行排序，并始终返回一个元素按排序顺序排列的列表。我们来看一个示例，将数字列表按升序排序。
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Taking another example, let’s sort a list of strings in descending order.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以另一个示例为例，我们将一个字符串列表按降序排序。
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Conclusions
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, I’ve presented 10 Python tips and tricks that can be used as
    a reference in your day-to-day work. I hope you enjoyed this article. Stay tuned
    for my next piece, “Tips and Tricks to Speed Up Your Python Code”.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我介绍了 10 个 Python 技巧和窍门，可以作为你日常工作的参考。希望你喜欢这篇文章。敬请关注我的下一篇文章，“加速 Python
    代码的技巧与窍门”。
- en: References/Further Readings
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考文献/进一步阅读
- en: '[30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python)'
- en: Curated collection of useful Python snippets that you can understand in 30 seconds
    or less. Contributions welcome…
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 精选有用的 Python 代码片段，你可以在 30 秒或更短时间内理解。欢迎贡献…
- en: '[50+ Python 3 Tips & Tricks](https://medium.com/towards-artificial-intelligence/50-python-3-tips-tricks-e5dbe05212d7)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[50+ Python 3 技巧与窍门](https://medium.com/towards-artificial-intelligence/50-python-3-tips-tricks-e5dbe05212d7)'
- en: These Python Gems Will Make Your Code Beautiful and Elegant
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Python 精华将使你的代码变得美观而优雅
- en: '[A Guide to Python Itertools](https://medium.com/@jasonrigden/a-guide-to-python-itertools-82e5a306cdf8)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[Python Itertools 指南](https://medium.com/@jasonrigden/a-guide-to-python-itertools-82e5a306cdf8)'
- en: Those iterables are more powerful than you can possibly imagine.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可迭代对象比你想象的要强大得多。
- en: Contacts
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 联系方式
- en: 'If you want to keep updated with my latest articles and projects [follow me
    on Medium](https://medium.com/@abhinav.sagar). These are some of my contacts details:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想保持更新我的最新文章和项目，请 [在 Medium 上关注我](https://medium.com/@abhinav.sagar)。以下是我的一些联系方式：
- en: '[Personal Website](https://abhinavsagar.github.io/)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[个人网站](https://abhinavsagar.github.io/)'
- en: '[Linkedin](https://in.linkedin.com/in/abhinavsagar4)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Linkedin](https://in.linkedin.com/in/abhinavsagar4)'
- en: '[Medium Profile](https://medium.com/@abhinav.sagar)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Medium Profile](https://medium.com/@abhinav.sagar)'
- en: '[GitHub](https://github.com/abhinavsagar)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub](https://github.com/abhinavsagar)'
- en: '[Kaggle](https://www.kaggle.com/abhinavsagar)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kaggle](https://www.kaggle.com/abhinavsagar)'
- en: Happy reading, happy learning, and happy coding!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 祝阅读愉快，学习愉快，编码愉快！
- en: '**Bio: [Abhinav Sagar](https://www.linkedin.com/in/abhinavsagar4)** is a senior
    year undergrad at VIT Vellore. He is interested in data science, machine learning
    and their applications to real-world problems.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[Abhinav Sagar](https://www.linkedin.com/in/abhinavsagar4)** 是VIT Vellore的四年级本科生。他对数据科学、机器学习及其在实际问题中的应用感兴趣。'
- en: '[Original](https://towardsdatascience.com/10-python-tips-and-tricks-you-should-learn-today-a05c23a39dc5).
    Reposted with permission.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[原创](https://towardsdatascience.com/10-python-tips-and-tricks-you-should-learn-today-a05c23a39dc5)。经授权转载。'
- en: '**Related:**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[Python Lists and List Manipulation](/2019/11/python-lists-list-manipulation.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python列表和列表操作](/2019/11/python-lists-list-manipulation.html)'
- en: '[Python Dictionary and Dictionary Methods](/2019/12/python-dictionary-methods.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python字典和字典方法](/2019/12/python-dictionary-methods.html)'
- en: '[Why Python is One of the Most Preferred Languages for Data Science?](/2020/01/python-preferred-languages-data-science.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么Python是数据科学中最受欢迎的语言之一？](/2020/01/python-preferred-languages-data-science.html)'
- en: '* * *'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行IT管理'
- en: '* * *'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并寻找目标以……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创企业理想的编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分析$9B AI失败案例](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计的最佳资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
