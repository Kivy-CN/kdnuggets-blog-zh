- en: 5 Python Tips for Data Efficiency and Speed
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提升数据效率和速度的 5 个 Python 小技巧
- en: 原文：[https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)
- en: '![f-img](../Images/b9aace080bf31cb205834a05d2f462c2.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![f-img](../Images/b9aace080bf31cb205834a05d2f462c2.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: '[Writing efficient Python code](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)
    is important for optimizing performance and resource usage, whether you’re working
    on data science projects, building web apps, or working on other programming tasks.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[编写高效的 Python 代码](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)
    对于优化性能和资源使用非常重要，无论你是在进行数据科学项目、构建 web 应用程序，还是在进行其他编程任务。'
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Using Python’s powerful features and best practices, you can reduce computation
    time and improve the responsiveness and maintainability of your applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 Python 强大的功能和最佳实践，你可以减少计算时间，提高应用程序的响应速度和可维护性。
- en: In this tutorial, we’ll explore five essential tips to help you write more efficient
    Python code by coding examples for each. Let’s get started.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将探讨五个重要的技巧，通过每个例子的编码来帮助你编写更高效的 Python 代码。让我们开始吧。
- en: 1\. Use List Comprehensions Instead of Loops
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 使用列表推导式代替循环
- en: You can use list comprehensions to create lists from existing lists and other
    iterables like strings and tuples. They are generally more concise and faster
    than regular loops for list operations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用列表推导式从现有列表和其他可迭代对象（如字符串和元组）中创建列表。它们通常比普通循环在列表操作中更简洁和更快。
- en: Let's say we have a dataset of user information, and we want to extract the
    names of users who have a score greater than 85.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个用户信息的数据集，我们想提取那些分数大于 85 的用户的姓名。
- en: Using a Loop
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用循环
- en: 'First, let''s do this using a for loop and if statement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用 for 循环和 if 语句来完成这个任务：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get the following output:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到以下输出：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using a List Comprehension
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用列表推导式
- en: 'Now, let''s rewrite using a list comprehension. You can use the generic syntax
    `[output for input in iterable if condition]` like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用列表推导式重新编写。你可以使用通用语法 `[output for input in iterable if condition]` 来实现：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Which should give you the same output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该会给你相同的输出：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As seen, the list comprehension version is more concise and easier to maintain.
    You can try out other examples and [profile your code](https://www.kdnuggets.com/profiling-python-code-using-timeit-and-cprofile)
    with timeit to compare the execution times of loops vs. list comprehensions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，列表推导式版本更简洁，更易于维护。你可以尝试其他示例并 [对你的代码进行性能分析](https://www.kdnuggets.com/profiling-python-code-using-timeit-and-cprofile)
    使用 timeit 比较循环和列表推导式的执行时间。
- en: List comprehensions, therefore, let you write more readable and efficient Python
    code, especially in transforming lists and filtering operations. But be careful
    not to overuse them. Read [Why You Should Not Overuse List Comprehensions in Python](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)
    to learn why overusing them may become too much of a good thing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，列表推导式让你编写更具可读性和高效的 Python 代码，特别是在转换列表和过滤操作时。但要小心不要过度使用它们。阅读 [为什么你不应该过度使用
    Python 中的列表推导式](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)
    来了解过度使用它们可能会变成一种过度的好事。
- en: 2\. Use Generators for Efficient Data Processing
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 使用生成器进行高效的数据处理
- en: You can use generators in Python to iterate over large datasets and sequences
    without storing them all in memory up front. This is particularly useful in applications
    where memory efficiency is important.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Python 中使用生成器来迭代大型数据集和序列，而无需一开始就将它们全部存储在内存中。这在内存效率重要的应用程序中特别有用。
- en: Unlike regular Python functions that use the `return` keyword to return the
    entire sequence, generator functions yield a generator object. Which you can then
    loop over to get the individual items—on demand and one at a time.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规 Python 函数使用 `return` 关键字返回整个序列不同，生成器函数返回一个生成器对象。你可以对其进行循环，以按需逐个获取单独的项。
- en: Suppose we have a large CSV file with user data, and we want to process each
    row—one at a time—without loading the entire file into memory at once.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个大型 CSV 文件，其中包含用户数据，我们想逐行处理每一行——一次处理一行——而不是一次将整个文件加载到内存中。
- en: 'Here’s the generator function for this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是生成器函数的示例：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Note**: Remember to replace ‘large_data.csv’ with the path to your file in
    the above snippet.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：请记得在上述代码片段中将‘large_data.csv’替换为你文件的路径。'
- en: As you can already tell, using generators is especially helpful when working
    with streaming data or when the dataset size exceeds available memory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在处理流数据或数据集大小超出可用内存时，使用生成器尤其有用。
- en: For a more detailed review of generators, read [Getting Started with Python
    Generators](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解生成器，请阅读 [开始使用 Python 生成器](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)。
- en: 3\. Cache Expensive Function Calls
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 缓存昂贵的函数调用
- en: Caching can significantly improve performance by storing the results of expensive
    function calls and reusing them when the function is called with the same inputs
    again.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存可以通过存储昂贵函数调用的结果并在函数再次调用相同输入时重用这些结果，从而显著提高性能。
- en: 'Suppose you’re coding k-means clustering algorithm from scratch and want to
    cache the Euclidean distances computed. Here''s how you can cache function calls
    with the `@cache` decorator:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在从头开始编写 k-means 聚类算法并希望缓存计算出的欧几里得距离。以下是如何使用 `@cache` 装饰器缓存函数调用：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let''s take the following sample function call:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看以下示例函数调用：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Which outputs:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 其输出为：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To learn more, read [How To Speed Up Python Code with Caching](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息，请阅读 [如何通过缓存加速 Python 代码](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching)。
- en: 4\. Use Context Managers for Resource Handling
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 使用上下文管理器进行资源处理
- en: In Python, [context managers](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)
    ensure that resources—such as files, database connections, and subprocesses—are
    properly managed after use.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，[上下文管理器](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)
    确保资源——如文件、数据库连接和子进程——在使用后得到适当管理。
- en: 'Say you need to query a database and want to ensure the connection is properly
    closed after use:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要查询数据库并希望在使用后确保连接被正确关闭：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can now try running queries against the database:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以尝试对数据库运行查询：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: To learn more about the uses of context managers, read [3 Interesting Uses of
    Python’s Context Managers](https://www.kdnuggets.com/3-interesting-uses-of-python-context-managers).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于上下文管理器的使用，请阅读 [Python 上下文管理器的 3 种有趣用途](https://www.kdnuggets.com/3-interesting-uses-of-python-context-managers)。
- en: 5\. Vectorize Operations Using NumPy
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 使用 NumPy 向量化操作
- en: NumPy allows you to perform element-wise operations on arrays—as operations
    on vectors—without the need for explicit loops. This is often significantly faster
    than loops because NumPy uses C under the hood.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 允许你对数组执行逐元素操作——如对向量的操作——而无需显式循环。这通常比循环要快得多，因为 NumPy 在底层使用 C。
- en: 'Say we have two large arrays representing scores from two different tests,
    and we want to calculate the average score for each student. Let''s do it using
    a loop:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有两个大型数组，分别表示来自两个不同测试的分数，我们想为每个学生计算平均分。让我们使用循环来完成这个任务：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here’s how you can rewrite them with NumPy''s vectorized operations:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用 NumPy 的向量化操作重写它们的示例：
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Loops vs. Vectorized Operations
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 循环与向量化操作
- en: 'Let''s measure the execution times of the loop and the NumPy versions using
    timeit:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 timeit 测量循环和 NumPy 版本的执行时间：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As seen vectorized operations with Numpy are much faster than the loop version:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，使用 Numpy 的向量化操作比循环版本要快得多：
- en: '[PRE13]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wrapping Up
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: That’s all for this tutorial!
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程到此为止！
- en: We reviewed the following tips—using list comprehensions over loops, leveraging
    generators for efficient processing, caching expensive function calls, managing
    resources with context managers, and vectorizing operations with NumPy—that can
    help optimize your code's performance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾了以下技巧——使用列表推导代替循环、利用生成器进行高效处理、缓存昂贵的函数调用、使用上下文管理器管理资源以及利用NumPy进行向量化操作——这些都能帮助优化代码性能。
- en: If you’re looking for tips specific to data science projects, read [5 Python
    Best Practices for Data Science](https://www.kdnuggets.com/5-python-best-practices-for-data-science).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在寻找针对数据科学项目的技巧，请阅读 [5个Python数据科学最佳实践](https://www.kdnuggets.com/5-python-best-practices-for-data-science)。
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是一位来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇点上工作。她的兴趣和专长领域包括DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编码和喝咖啡！目前，她正在通过编写教程、操作指南、意见文章等方式，学习并与开发者社区分享她的知识。Bala还制作了引人入胜的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关话题
- en: '[3 Research-Driven Advanced Prompting Techniques for LLM Efficiency…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3种基于研究的高级提示技术提升LLM效率……](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
- en: '[Efficiency Spells the Difference Between Biological Neurons and…](https://www.kdnuggets.com/2022/11/efficiency-spells-difference-biological-neurons-artificial-counterparts.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[效率决定生物神经元与……的区别](https://www.kdnuggets.com/2022/11/efficiency-spells-difference-biological-neurons-artificial-counterparts.html)'
- en: '[Calculate Computational Efficiency of Deep Learning Models with…](https://www.kdnuggets.com/2023/06/calculate-computational-efficiency-deep-learning-models-flops-macs.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[计算深度学习模型的计算效率……](https://www.kdnuggets.com/2023/06/calculate-computational-efficiency-deep-learning-models-flops-macs.html)'
- en: '[Maximizing Efficiency in Data Analysis with ChatGPT](https://www.kdnuggets.com/maximizing-efficiency-in-data-analysis-with-chatgpt)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[利用ChatGPT最大化数据分析效率](https://www.kdnuggets.com/maximizing-efficiency-in-data-analysis-with-chatgpt)'
- en: '[How To Calculate Algorithm Efficiency](https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何计算算法效率](https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html)'
- en: '[Elevate Math Efficiency: Navigating Numpy Array Operations](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升数学效率：驾驭Numpy数组操作](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
