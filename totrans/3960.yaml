- en: 'Pip Install YOU: A Beginner’s Guide to Creating Your Python Library'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Beginner''s Guide to Creating Your Python Library](../Images/17334bd5288d4384279ba35d611305ed.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Image by Author | Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: As programmers, we often rely on various external libraries to solve different
    problems. These libraries are created by skillful developers and provide solutions
    that save us time and effort. But have you ever thought, *“Can I create my custom
    libraries too?”* The answer is yes! This article explains the necessary steps
    to help you accomplish that, whether you are a professional developer or just
    starting out. From writing and structuring your code to documentation and publishing,
    this guide covers it all.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-Step Guide to Create A Library
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Step 1: Initialize Your Project'
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Start by creating a root directory for your project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Step 2: Create a Directory for Your Package'
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next step is to create a directory for your package within your project’s
    directory.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Step 3: Add `__init.py__`'
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, add the `__init.py__` within your package’s directory. This file is the
    primary indicator to Python that the directory it resides in is a package. It
    consists of initialization code if any and executes automatically when a package
    or any of its modules are imported.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Step 4: Add Modules'
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Now, you need to add modules to the package’s directory. These modules typically
    consist of classes and functions. It is a good practice to give each module a
    meaningful name describing its purpose.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Step 5: Write into the Modules'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In this step, you''ll define the functionality of each module. For example,
    in my case:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Module: multiple_of_two.py**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Module: multiple_of_five.py**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Step 6: Add setup.py'
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The next step is to add another file called setup.py to your package’s directory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This file contains metadata about your package, such as its name, dependencies,
    author, version, description, and more. It also defines which modules to include
    and provides instructions for building and installing the package.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Step 7: Add Tests & Other Files [Optional]'
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'This step is not necessary, but it is a good practice if you want to build
    an error-free and professional library. At this step, the project structure is
    final and looks somewhat like this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now I will explain to you what is the purpose of optional files and folders
    which are mentioned in the root directory:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**tests/:** Contains test cases for your library to ensure it behaves as expected.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**docs/:** Contains documentation for your library.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**LICENSE.txt:** Contains the licensing terms under which others can use your
    code.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CHANGES.txt:** Records changes to the library.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**README.md:** Contains the description of your package, and installation instructions.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'requirements.txt: Lists the external dependencies required by your library,
    and you can install these packages with a single command (`pip install -r requirements.txt`).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These descriptions are pretty straightforward and you will get the purpose of
    the optional files and folders in no time. However, I would like to discuss the
    optional tests directory a little to clarify its usage.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**tests/ directory**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that you can add a tests directory within your root
    directory, i.e., `\multiples_library`, or within your package’s directory, i.e.,
    `\multiples`. The choice is yours; however, I like to keep it at the top level
    within the root directory as I think it is a better way to modularize your code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Several libraries help you write test cases. I will use the most famous one
    and my personal favorite “unittest.”
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**Unit Test/s for is_multiple_of_two**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: The test case/s for this module is included inside the `test_is_multiple_of_two.py`
    file.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Unit Test/s for is_multiple_of_five**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The test case/s for this module is included inside the `test_is_multiple_of_five.py`
    file.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The unit tests above are pretty straightforward but I will explain two functions
    for further clarification.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '`self.assertTrue(expression)` checks whether the expression evaluates to “True.”
    The test will only pass if the result of the expression is “True.”'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`unittest.main()` function is called to run all the test cases defined in the
    file.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 8: Distribute Your Package Using PyPI'
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To make your library easily accessible to others, you can upload it to PyPI.
    Follow these steps to distribute your package:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Create an account on [PyPI](https://pypi.org/) and enable two-factor authentication.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create an [API token](https://pypi.org/manage/account/token/) by giving a token
    name and selecting scope to the “Entire account.” Then, copy it carefully as it
    only appears once.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, you need to create a .pypirc file.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For **MacOS/Linux**, open the terminal and run the following command:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For **Windows**, open the command prompt and run the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The file is created and resides at ~/.pypirc in the case of MacOS/Linux and
    %USERPROFILE%/.pypirc in the case of Windows.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit **.pypirc** file by copying and pasting the following configuration:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Replace **<your-api-token></your-api-token>**with the actual API token you generated
    from PyPI. Do not forget to include the pypi- prefix.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 将**<your-api-token></your-api-token>**替换为你从PyPI生成的实际API令牌。不要忘记包括pypi-前缀。
- en: 'Ensure you have a setup.py file in your project’s root directory. Run the following
    command to create distribution files:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你的项目根目录中有一个setup.py文件。运行以下命令以创建分发文件：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Twine is a tool that is used to upload packages to PyPI. Install twine by running
    the following command:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Twine是一个用于将包上传到PyPI的工具。通过运行以下命令来安装twine：
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now upload your package to PyPI by running the following command:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在通过运行以下命令将你的包上传到PyPI：
- en: '[PRE16]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Step 9: Install and Use the Library'
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 第9步：安装并使用库
- en: 'You can install the library by the following command:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令安装该库：
- en: '[PRE17]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In my case:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下：
- en: '[PRE18]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, you can use the library as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以如下使用该库：
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Wrapping Up
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In short, creating a Python library is very interesting, and distributing it
    makes it useful for others. I have tried to cover everything you need to create
    a library in Python as clearly as possible. However, if you get stuck or confused
    at any point, please don’t hesitate to ask questions in the comments section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，创建一个Python库非常有趣，而将其分发则使其他人能够使用它。我尽量将创建Python库所需的内容解释得尽可能清晰。然而，如果你在任何环节遇到困难或困惑，请随时在评论区提问。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal是一位机器学习工程师和技术作家，对数据科学以及人工智能与医学的交汇处充满热情。她共同编写了电子书《利用 ChatGPT 最大化生产力》。作为2022年亚太地区的Google
    Generation Scholar，她倡导多样性和学术卓越。她还被认可为Teradata技术多样性奖学金获得者、Mitacs Globalink Research奖学金获得者以及哈佛WeCode奖学金获得者。Kanwal是变革的坚定倡导者，创办了FEMCodes，以赋能女性在STEM领域的发展。'
- en: More On This Topic
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Managing Python Dependencies with Poetry vs Conda & Pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Poetry与Conda和Pip管理Python依赖关系](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[忘记PIP、Conda和requirements.txt！改用Poetry，之后会感激的…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[像专家一样测试：Python Mock库的逐步指南](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
- en: '[Creating a Web Application to Extract Topics from Audio with Python](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Python创建一个从音频中提取主题的Web应用程序](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
- en: '[The Challenges of Creating Features for Machine Learning](https://www.kdnuggets.com/2022/02/challenges-creating-features-machine-learning.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为机器学习创建特征的挑战](https://www.kdnuggets.com/2022/02/challenges-creating-features-machine-learning.html)'
- en: '[Winning The Room: Creating and Delivering an Effective Data-Driven…](https://www.kdnuggets.com/2022/04/franks-winning-room-creating-delivering-effective-data-driven-presentation.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[赢得房间：创建和传递有效的数据驱动演示文稿…](https://www.kdnuggets.com/2022/04/franks-winning-room-creating-delivering-effective-data-driven-presentation.html)'
