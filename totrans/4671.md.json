["```py\no = {'sunny': 1, 'overcast': 2, 'rainy': 3}\ndata.outlook = [o[item] for item in data.outlook.astype(str)]\n\nt = {'hot': 1, 'mild': 2, 'cool': 3}\ndata.temp = [t[item] for item in data.temp.astype(str)]\n\nh = {'high': 1, 'normal': 2}\ndata.humidity = [h[item] for item in data.humidity.astype(str)]\n\nw = {'True': 1, 'False': 2}\ndata.windy = [w[item] for item in data.windy.astype(str)]\n\n```", "```py\nx = tennis.iloc[:,0:-1] # X is the features in our dataset\ny = tennis.iloc[:,-1]   # y is the Labels in our dataset\n\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)\n\n```", "```py\nmodelM = MultinomialNB().fit(X_train, y_train)\npredM = model.predict(X_test)\npredM\n\n```", "```py\n array(['yes', 'yes', 'yes', 'yes', 'yes'], dtype='<U3') \n```", "```py\npd.crosstab(y_test, predy, rownames=['Actual'], colnames=['Predicted'], margins=True)\n\n```", "```py\n Predicted \tyes All\nActual\nno \t         2  2\nyes \t         3  3\nAll \t         5  5 \n```", "```py\naccuracy_score = accuracy_score(y_test, predy)\nprint('The accuracy of the Multinomial model is ', accuracy_score)\n\n```", "```py\n The accuracy of the Multinomial model is 0.6 \n```", "```py\ndiabetes = pd.read_csv('diabetes.csv')\n\n```", "```py\ndiabetes.dtypes\n\n```", "```py\n Pregnancies                   int64\n  Glucose                       int64\n  BloodPressure                 int64\n  SkinThickness                 int64\n  Insulin                       int64\n  BMI                         float64\n  DiabetesPedigreeFunction    float64\n  Age                           int64\n  Outcome                       int64\n  dtype: object \n```", "```py\n  for i in range(0,9):\n      stat,p = shapiro(diabetes[diabetes.columns[i]])\n      print(diabetes.columns[i], 'Test-Statistic=%.3f, p-value=%.3f' % (stat, p));\n      alpha = 0.05\n      if p > alpha:\n          print(diabetes.columns[i], 'looks Gaussian (fail to reject H0)')\n          print('---------------------------------------')\n      else:\n          print(diabetes.columns[i],'does not look Gaussian (reject H0)')\n          print('---------------------------------------')\n\n```", "```py\n Pregnancies Test-Statistic=0.904, p-value=0.000\n  Pregnancies does not look Gaussian (reject H0)\n  ---------------------------------------\n  Glucose Test-Statistic=0.970, p-value=0.000\n  Glucose does not look Gaussian (reject H0)\n  ---------------------------------------\n  BloodPressure Test-Statistic=0.819, p-value=0.000\n  BloodPressure does not look Gaussian (reject H0)\n  ---------------------------------------\n  SkinThickness Test-Statistic=0.905, p-value=0.000\n  SkinThickness does not look Gaussian (reject H0)\n  ---------------------------------------\n  Insulin Test-Statistic=0.722, p-value=0.000\n  Insulin does not look Gaussian (reject H0)\n  ---------------------------------------\n  BMI Test-Statistic=0.950, p-value=0.000\n  BMI does not look Gaussian (reject H0)\n  ---------------------------------------\n  DiabetesPedigreeFunction Test-Statistic=0.837, p-value=0.000\n  DiabetesPedigreeFunction does not look Gaussian (reject H0)\n  ---------------------------------------\n  Age Test-Statistic=0.875, p-value=0.000\n  Age does not look Gaussian (reject H0)\n  ---------------------------------------\n  Outcome Test-Statistic=0.603, p-value=0.000\n  Outcome does not look Gaussian (reject H0)\n  --------------------------------------- \n```", "```py\ndiabetes.hist(figsize=(20, 10));\n\n```", "```py\n  xG = diabetes.iloc[:,0:-1] # X is the features in our dataset\n  yG = diabetes.iloc[:,-1]   # y is the Labels in our dataset\n\n  X_trainG, X_testG, y_trainG, y_testG = train_test_split(xG, yG, test_size=0.33, random_state=42)\n\n```", "```py\nmodelG = GaussianNB().fit(X_trainG, y_trainG)\npredG = modelG.predict(X_testG)\n\n```", "```py\npd.crosstab(y_testG, predG, rownames=['Actual'], colnames=['Predicted'], margins=True)\n\n```", "```py\n Predicted \t0 \t1 \tAll\nActual\n0 \t        136 \t32 \t168\n1             \t33 \t53 \t86\nAll \t        169 \t85 \t254 \n```", "```py\nrecall = recall_score(y_testG, predG, average='binary')\nprint('The Recall of the Gaussian model is', recall)\n\n```", "```py\n The Recall of the Gaussian model is 0.6162790697674418 \n```", "```py\ntn, fn, fp, tp = confusion_matrix(y_testG, predG).ravel()\naccuracy = (tp + tn) /(tp+fp+tn+fn)\nprint('The accuracy of the Gaussian model is', accuracy)\n\n```", "```py\n The accuracy of the Gaussian model is 0.7440944881889764 \n```"]