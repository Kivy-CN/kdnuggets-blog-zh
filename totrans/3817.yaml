- en: 7 Tips To Produce Readable Data Science Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/11/7-tips-produce-readable-data-science-code.html](https://www.kdnuggets.com/2022/11/7-tips-produce-readable-data-science-code.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![7 Tips To Produce Readable Data Science Code](../Images/2d92303704dd6bf8eee0b9ed4b0f0f8c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image by svstudioart](https://www.freepik.com/free-vector/programmer-working-web-development-code-engineer-programming-python-php-java-script-computer_14723893.htm#query=python%20code&position=4&from_view=search&track=sph)
    on Freepik'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to write readable code is something developers refer to as a form
    of art. Although I partially agree with that statement, writing code, especially
    readable one, is a skill that can be developed.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The only way to improve the readability of your code is to practice writing
    more quality code. Therefore, I recommend reading code written by other developers
    known for writing high-quality code.
  prefs: []
  type: TYPE_NORMAL
- en: In general, readable code is an essential outcome that becomes even more critical
    the more complex your code gets. In data science, in particular, writing readable
    code is extremely important because data science applications can be pretty tricky
    to understand, so an extra complexity added by not very well-written code is not
    preferable.
  prefs: []
  type: TYPE_NORMAL
- en: I assume you agree that writing readable code is essential. Still, how do I
    make my code more readable?
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will go over a few steps that you can take to produce readable,
    high-quality code.
  prefs: []
  type: TYPE_NORMAL
- en: Have a Structure in Mind before you Start Coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you open your editor and start coding your way through a problem, try
    to plan out your code structure. Make a structure, as detailed as possible, of
    your variables, functions, classes, and modules and how they all connect to solve
    the problem.
  prefs: []
  type: TYPE_NORMAL
- en: Doing that will save a lot of time later when you implement the code, expand,
    and deploy it. I recommend you add that structure to the documentation of your
    code or make it available on GitHub if you're planning to make your code open-source.
  prefs: []
  type: TYPE_NORMAL
- en: Name your Variables Descriptively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I know we all get tempted sometimes to name our variables X, Y, and Z. But then
    we get baffled when we read our code months later, trying to figure out what exactly
    is stored in variable X! Naming your variables descriptive names will not only
    help strangers reading your code, but also future you reading the code.
  prefs: []
  type: TYPE_NORMAL
- en: When naming your variables, aim for exact names rather than short ones. For
    example, if you're calculating the average of a list of values, don't name your
    variable ave or av; sometimes, like average_height or average_time. Today, many
    code editors offer autocompletion, so using longer names will not make your code-writing
    process slower.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, keep the variable's names related to that source if your code implements
    an algorithm introduced in a specific paper or book. Remember to include that
    source at the top of your code files.
  prefs: []
  type: TYPE_NORMAL
- en: Use Functions Wisely
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functions can be a great tool to have an organized, concise code. That is, if
    used correctly. Use functions for tasks that can be packaged into a function,
    for example, applying an operation over different data points or implementing
    an algorithm step. When you name your functions, use the same logic we covered
    when naming your variables.
  prefs: []
  type: TYPE_NORMAL
- en: Collect functions with related functionalities in one code file and make it
    a module if possible. That makes it easier to find, expand and use the function.
  prefs: []
  type: TYPE_NORMAL
- en: Try to be clear about the specific type of the function's attributes and make
    your functions secure and expandable.
  prefs: []
  type: TYPE_NORMAL
- en: Target Clear and Concise Docstrings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documenting your code is an essential step, whether it be complete documentation
    or in-code one (docstrings). Docstrings are strings at the start of a code file,
    after a function/ class definition, that tell the reader the purpose of the code/
    function or class.
  prefs: []
  type: TYPE_NORMAL
- en: Docstrings are meant to be a short hint of what your code is and how it works.
    For example, when used at the beginning of a function (right below the function
    header), it should include the expected types of attributes and their role in
    the function, the output of the function, and a sentence or two about how that
    output is calculated.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a class, the docstring should include the class attributes and
    methods and how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Don't Reinvent the Wheel (unless you can do it better)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a function you need is already implemented by a supported package or a third-party
    developer, use it rather than implementing it all over. When you use a package,
    ensure you know all the functions it includes so you save time trying to implement
    something you can use.
  prefs: []
  type: TYPE_NORMAL
- en: The few scenarios where I recommend implementing a functionality by yourself
    are when you're new to programming and trying to learn how everything works or
    if you can implement a function better with less complexity. Otherwise, it's simpler
    for you and others to use your code to use what's already implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Aim for Simple, Longer Steps than Short, Complex Ones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you try to implement an idea presented in a paper or a book, or an algorithm,
    aim for clear steps rather than trying to group multiple steps together to have
    shorter code.
  prefs: []
  type: TYPE_NORMAL
- en: Yes, shorter code may show how good you are at using the idioms of a programming
    language. Still, it can also make your code unnecessarily complex. Complex to
    read, test, debug and expand. Especially when the algorithm you're implementing
    is complex by itself, adding this extra layer of complexity by grouping several
    steps together will lead to a not-very-flexible code.
  prefs: []
  type: TYPE_NORMAL
- en: Stay Consistent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consistency is excellent for code readability. When planning your code structure,
    decide on a style to use throughout your code. That includes determining a system
    to name your variables, functions, and classes. How you will use comments, address
    the different mathematical steps in this algorithm, modulize your code and use
    existing packages.
  prefs: []
  type: TYPE_NORMAL
- en: Following and understanding your code will be much faster when you have a consistent
    style and pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the unavoidable things about being a data scientist is using code written
    by someone else. And although reading and understanding codes written by other
    people will always be a time-consuming task, there are a couple of steps you can
    follow to make your code easier to follow and use for those who are going to use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Although the tips covered in this article can be used by anyone who writes code
    and not only data scientists, it is, in my opinion, extra crucial for data scientists
    to produce readable code to overcome some of the difficulties that already exist
    due to the math behind most data science algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you want to start writing better, more readable code, this article would
    be a good place to start. Remember, writing better code is a skill; just like
    any other skill, it improves with practice.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Sara Metwalli](https://www.linkedin.com/in/sara-a-metwalli/)** is a Ph.D.
    candidate at Keio University researching ways to test and debug quantum circuits.
    I am an IBM research intern and Qiskit advocate helping build a more quantum future.
    I am also a writer on Medium, Built-in, She Can Code, and KDN writing articles
    about programming, data science, and tech topics. I am also a lead in the Woman
    Who Code Python international chapter, a train enthusiast, a traveler, and a photography
    lover.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Machine learning does not produce value for my business. Why?](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ChatGPT Code Interpreter: Do Data Science in Minutes](https://www.kdnuggets.com/2023/07/chatgpt-code-interpreter-data-science-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Ways You Can Use ChatGPT''s Code Interpreter For Data Science](https://www.kdnuggets.com/2023/08/5-ways-chatgpt-code-interpreter-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Drag, Drop, Analyze: The Rise of No-Code Data Science](https://www.kdnuggets.com/drag-drop-analyze-the-rise-of-nocode-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Comment Your Python Code as a Data Scientist](https://www.kdnuggets.com/how-to-comment-your-python-code-as-a-data-scientist)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
