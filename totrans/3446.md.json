["```py\n#  GRAPH CODE\n# ============\n\n# Import Tensorflow and Numpy\nimport Tensorflow as tf\nimport numpy as np\n\n# ======================\n# Define the Graph\n# ======================\n\n# Define the Placeholders\nX = tf.placeholder(\"float\", [10, 10], name=\"X\")\nY1 = tf.placeholder(\"float\", [10, 20], name=\"Y1\")\nY2 = tf.placeholder(\"float\", [10, 20], name=\"Y2\")\n\n# Define the weights for the layers\n\ninitial_shared_layer_weights = np.random.rand(10,20)\ninitial_Y1_layer_weights = np.random.rand(20,20)\ninitial_Y2_layer_weights = np.random.rand(20,20)\n\nshared_layer_weights = tf.Variable(initial_shared_layer_weights, name=\"share_W\", dtype=\"float32\")\nY1_layer_weights = tf.Variable(initial_Y1_layer_weights, name=\"share_Y1\", dtype=\"float32\")\nY2_layer_weights = tf.Variable(initial_Y2_layer_weights, name=\"share_Y2\", dtype=\"float32\")\n\n# Construct the Layers with RELU Activations\nshared_layer = tf.nn.relu(tf.matmul(X,shared_layer_weights))\nY1_layer = tf.nn.relu(tf.matmul(shared_layer,Y1_layer_weights))\nY2_layer = tf.nn.relu(tf.matmul(shared_layer,Y2_layer_weights))\n\n# Calculate Loss\nY1_Loss = tf.nn.l2_loss(Y1-Y1_layer)\nY2_Loss = tf.nn.l2_loss(Y2-Y2_layer)\n\n# optimisers\nY1_op = tf.train.AdamOptimizer().minimize(Y1_Loss)\nY2_op = tf.train.AdamOptimizer().minimize(Y2_Loss)\n\n```", "```py\n# Calculation (Session) Code\n# ==========================\n\n# open the session\n\nwith tf.Session() as session:\n    session.run(tf.initialize_all_variables())\n    for iters in range(10):\n        if np.random.rand() < 0.5:\n            _, Y1_loss = session.run([Y1_op, Y1_Loss],\n                            {\n                              X: np.random.rand(10,10)*10,\n                              Y1: np.random.rand(10,20)*10,\n                              Y2: np.random.rand(10,20)*10\n                              })\n            print(Y1_loss)\n        else:\n            _, Y2_loss = session.run([Y2_op, Y2_Loss],\n                            {\n                              X: np.random.rand(10,10)*10,\n                              Y1: np.random.rand(10,20)*10,\n                              Y2: np.random.rand(10,20)*10\n                              })\n            print(Y2_loss)\n\n```", "```py\n#  GRAPH CODE\n# ============\n\n# Import Tensorflow and Numpy\nimport Tensorflow as tf\nimport numpy as np\n\n# ======================\n# Define the Graph\n# ======================\n\n# Define the Placeholders\nX = tf.placeholder(\"float\", [10, 10], name=\"X\")\nY1 = tf.placeholder(\"float\", [10, 20], name=\"Y1\")\nY2 = tf.placeholder(\"float\", [10, 20], name=\"Y2\")\n\n# Define the weights for the layers\n\ninitial_shared_layer_weights = np.random.rand(10,20)\ninitial_Y1_layer_weights = np.random.rand(20,20)\ninitial_Y2_layer_weights = np.random.rand(20,20)\n\nshared_layer_weights = tf.Variable(initial_shared_layer_weights, name=\"share_W\", dtype=\"float32\")\nY1_layer_weights = tf.Variable(initial_Y1_layer_weights, name=\"share_Y1\", dtype=\"float32\")\nY2_layer_weights = tf.Variable(initial_Y2_layer_weights, name=\"share_Y2\", dtype=\"float32\")\n\n# Construct the Layers with RELU Activations\nshared_layer = tf.nn.relu(tf.matmul(X,shared_layer_weights))\nY1_layer = tf.nn.relu(tf.matmul(shared_layer,Y1_layer_weights))\nY2_layer = tf.nn.relu(tf.matmul(shared_layer,Y2_layer_weights))\n\n# Calculate Loss\nY1_Loss = tf.nn.l2_loss(Y1-Y1_layer)\nY2_Loss = tf.nn.l2_loss(Y2-Y2_layer)\nJoint_Loss = Y1_Loss + Y2_Loss\n\n# optimisers\nOptimiser = tf.train.AdamOptimizer().minimize(Joint_Loss)\nY1_op = tf.train.AdamOptimizer().minimize(Y1_Loss)\nY2_op = tf.train.AdamOptimizer().minimize(Y2_Loss)\n\n# Joint Training\n# Calculation (Session) Code\n# ==========================\n\n# open the session\n\nwith tf.Session() as session:\n    session.run(tf.initialize_all_variables())\n    _, Joint_Loss = session.run([Optimiser, Joint_Loss],\n                    {\n                      X: np.random.rand(10,10)*10,\n                      Y1: np.random.rand(10,20)*10,\n                      Y2: np.random.rand(10,20)*10\n                      })\n    print(Joint_Loss)\n\n```"]