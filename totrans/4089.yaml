- en: 'Optimizing Python Code Performance: A Deep Dive into Python Profilers'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化 Python 代码性能：深入了解 Python 性能分析工具
- en: 原文：[https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)
- en: '![Optimizing Python Code Performance: A Deep Dive into Python Profilers](../Images/3f0cd6354634d9283392f4e057c0025d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![优化 Python 代码性能：深入了解 Python 性能分析工具](../Images/3f0cd6354634d9283392f4e057c0025d.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT 需求'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Although Python is one of the most widely used programming languages, when it
    comes to large data sets it often suffers from poor execution times. Profiling
    is one of the methods to dynamically monitor the performance of your code and
    identify the pitfalls. These pitfalls may indicate the presence of bugs or poorly
    written code that is consuming a lot of system resources. Using Profilers will
    provide detailed statistics of your program that you can use to optimize your
    code for better performance. Let's take a look at some of the Python Profilers
    along with their examples.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python 是最广泛使用的编程语言之一，但在处理大数据集时，它往往会遭遇较差的执行时间。性能分析是动态监控代码性能并识别缺陷的方法之一。这些缺陷可能表示存在错误或编写不当的代码，这些代码消耗了大量的系统资源。使用性能分析工具可以提供程序的详细统计信息，你可以利用这些信息来优化代码以提高性能。让我们来看看一些
    Python 性能分析工具及其示例。
- en: 1\. cProfile
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. cProfile
- en: cProfile is a built-in profiler in Python that traces every function call in
    your program. It provides detailed information about how frequently a function
    was called, and its average execution times. As it comes with the standard Python
    library so we do not need to install it explicitly. However, it is not suitable
    for profiling live data as it traps every single function call and generates a
    lot of statistics by default.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: cProfile 是 Python 内置的性能分析工具，它跟踪程序中的每个函数调用。它提供了有关函数被调用频率及其平均执行时间的详细信息。由于它是标准
    Python 库的一部分，因此我们不需要显式安装。然而，它不适合用于实时数据分析，因为它会捕捉每一个函数调用，并默认生成大量统计信息。
- en: Example
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| ncalls | tottime | percall | cumtime | percall | percall filename:lineno(function)
    |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| ncalls | tottime | percall | cumtime | percall | percall 文件名:行号(函数) |'
- en: '| 1 | 0.000 | 0.000 | 0.002 | 0.002 | <string>:1(<module>) |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.000 | 0.000 | 0.002 | 0.002 | <string>:1(<module>) |'
- en: '| 1 | 0.002 | 0.002 | 0.002 | 0.002 | cprofile.py:3(sum_) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.002 | 0.002 | 0.002 | 0.002 | cprofile.py:3(sum_) |'
- en: '| 1 | 0.000 | 0.000 | 0.002 | 0.002 | {built-in method builtins.exec} |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.000 | 0.000 | 0.002 | 0.002 | {built-in method builtins.exec} |'
- en: '| 1 | 0.000 | 0.000 | 0.000 | 0.000 | {method ''disable'' of ''_lsprof.Profiler''
    objects} |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 0.000 | 0.000 | 0.000 | 0.000 | {method ''disable'' of ''_lsprof.Profiler''
    objects} |'
- en: As you can see from the output, the cProfile module provides a lot of information
    about the function's performance.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，cProfile 模块提供了大量关于函数性能的信息。
- en: ncalls =  Number of times the function was called
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ncalls =  函数被调用的次数
- en: tottime =  Total time spent in the function
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: tottime =  函数中花费的总时间
- en: percall = Total time spent per call
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: percall = 每次调用中花费的总时间
- en: cumtime =  Cumulative time spent in this and all sub-functions
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: cumtime =  在此函数及所有子函数中花费的累计时间
- en: percall = Cumulative time spent per call.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: percall = 每次调用中花费的累计时间。
- en: 2\. Line Profiler
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 行分析器
- en: 'Line Profiler is a powerful python module that performs line-by-line profiling
    of your code. Sometimes, the hotspot in your code may be a single line and it
    is not easy to locate it from the source code directly.  Line Profiler is valuable
    in identifying how much time is taken by each line to execute and which sections
    need the most attention for optimization. However, it does not come with the standard
    python library and needs to be installed using the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Line Profiler 是一个强大的 Python 模块，可逐行分析代码性能。有时，代码中的热点可能只是单行，直接从源代码中定位并不容易。Line
    Profiler 对于识别每行执行所花费的时间以及需要特别关注的优化区域非常有价值。然而，它不包含在标准 Python 库中，需要使用以下命令进行安装：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Example
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| Line # | Hits | Time | Per Hit | % Time | Line Contents |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 行号 | 点击次数 | 时间 | 每次点击 | % 时间 | 行内容 |'
- en: '| 2 |  |  |  |  | def sum_arrays(): |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 2 | | | | | def sum_arrays(): |'
- en: '| 3 |  |  |  |  | # creating large arrays   |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 3 | | | | | # 创建大型数组 |'
- en: '| 4 | 1 | 168563.0  | 168563.0  | 30.0 | arr1 = [1] * (10 ** 6)  |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 1 | 168563.0 | 168563.0 | 30.0 | arr1 = [1] * (10 ** 6) |'
- en: '| 5 | 1 | 3583.0 | 3583.0 | 0.6 | arr2 = [2] * (2 * 10 ** 7) |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 1 | 3583.0 | 3583.0 | 0.6 | arr2 = [2] * (2 * 10 ** 7) |'
- en: '| 6 | 1 | 389997.0  | 389997.0  | 69.4 | return arr1 + arr2 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 1 | 389997.0 | 389997.0 | 69.4 | return arr1 + arr2 |'
- en: 'Line #  = Line number in your code file'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行号 = 代码文件中的行号
- en: Hits  = No of times it was executed
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击次数 = 执行的次数
- en: Time  = Total time spent to execute the line
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间 = 执行该行所花费的总时间
- en: Per Hit = Average time spent per hit
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次点击 = 每次点击的平均时间
- en: '% Time = Percentage of time spent on the line relative to the total time of
    function'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '% 时间 = 相对于函数总时间的每行时间占比'
- en: Line Contents = Actual Source Code
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行内容 = 实际源代码
- en: 3\. Memory Profiler
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 内存分析器
- en: 'Memory profiler is a python profiler that tracks the memory allocation of your
    code. It can also generate flame graphs to help analyze memory usage and identify
    the memory leaks in your code. It is also useful to identify the hotspot regions
    that are causing a lot of allocations because python applications are often prone
    to memory management issues. Memory profilers profile the line-by-line statistics
    about the memory consumption and it needs to be installed using the following
    command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 内存分析器是一个 Python 分析器，跟踪代码的内存分配。它还可以生成火焰图，以帮助分析内存使用情况并识别代码中的内存泄漏。它还可以帮助识别导致大量分配的热点区域，因为
    Python 应用程序通常容易出现内存管理问题。内存分析器逐行分析内存消耗的统计信息，需要使用以下命令进行安装：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Example
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| Line # | Mem usage | Increment | Occurrences | Line Contents |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 行号 | 内存使用 | 增量 | 出现次数 | 行内容 |'
- en: '| 4 | 21.7 MiB  | 21.7 MiB  | 1 | def avg_marks(): |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 21.7 MiB | 21.7 MiB | 1 | def avg_marks(): |'
- en: '| 5 |  |  |  | # Genrating Random marks for 50 students for each section |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 5 | | | | # 为每个部分生成 50 个随机分数 |'
- en: '| 6 | 21.8 MiB | 0.0 MiB  | 1 | sec_a = random.sample(range(0, 100), 50) |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 21.8 MiB | 0.0 MiB | 1 | sec_a = random.sample(range(0, 100), 50) |'
- en: '| 7 | 21.8 MiB | 0.0 MiB  | 1 | sec_b = random.sample(range(0, 100), 50) |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 21.8 MiB | 0.0 MiB | 1 | sec_b = random.sample(range(0, 100), 50) |'
- en: '| 8 |  |  |  |  |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 8 | | | | |'
- en: '| 9 |  |  |  | # combined average marks of two sections |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 9 | | | | # 两个部分的综合平均分 |'
- en: '| 10 | 21.8 MiB | 0.0 MiB  | 1 | avg_a = sum(sec_a) / len(sec_a) |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 21.8 MiB | 0.0 MiB | 1 | avg_a = sum(sec_a) / len(sec_a) |'
- en: '| 11 | 21.8 MiB | 0.0 MiB  | 1 | avg_b =  sum(sec_b) / len(sec_b) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 21.8 MiB | 0.0 MiB | 1 | avg_b = sum(sec_b) / len(sec_b) |'
- en: '| 12 | 21.8 MiB | 0.0 MiB  | 1 | combined_avg = (avg_a + avg_b)/2 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 12 | 21.8 MiB | 0.0 MiB | 1 | combined_avg = (avg_a + avg_b)/2 |'
- en: '| 13 | 21.8 MiB | 0.0 MiB  | 1 | return combined_avg |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 13 | 21.8 MiB | 0.0 MiB | 1 | return combined_avg |'
- en: 'Line #  = Line number in your code file'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行号 = 代码文件中的行号
- en: Mem usage = Memory usage of Python Interpreter
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存使用 = Python 解释器的内存使用情况
- en: Increment  =  Difference in memory consumed of the current line to previous
    one
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增量 = 当前行与上一行的内存消耗差
- en: Occurences = No of times the code line was executed
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出现次数 = 代码行执行的次数
- en: Line Contents = Actual Source Code
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行内容 = 实际源代码
- en: 4\. Timeit
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. Timeit
- en: Timeit is a built-in Python library that is specifically designed for evaluating
    the performance of small code snippets. It is a powerful tool that can help you
    identify and optimize the performance bottlenecks in your code, allowing you to
    write faster and more efficient code. Different implementations of an algorithm
    can also be compared using the timeit module but the downside is that only the
    individual lines of blocks of code can be analyzed using it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Timeit是一个内置的Python库，专门用于评估小代码片段的性能。它是一个强大的工具，可以帮助你识别和优化代码中的性能瓶颈，使你的代码更快、更高效。虽然可以使用timeit模块比较算法的不同实现，但缺点是只能分析代码块的单独行。
- en: Example
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Its usage is limited to only evaluating the smaller code snippets. One important
    thing to note is that it displays different times each time the code snippet is
    run. This is because you may have other processes running on your computer and
    the allocation of the resources may vary from one run to the other, making it
    difficult to control all the variables and achieve the same processing time for
    each run.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 它的使用限制在于只评估较小的代码片段。需要注意的是，它每次运行代码片段时显示的时间不同。这是因为你的计算机上可能运行着其他进程，资源分配可能在不同的运行中有所变化，使得控制所有变量并实现相同的处理时间变得困难。
- en: 5\. Yappi
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. Yappi
- en: Yappi is a python profiler that allows you to easily identify performance bottlenecks.
    It is written in C, making it one of the most efficient profilers available. It
    has a customizable API that lets you profile only the specific parts of your code
    that you need to focus on, giving you more control over the profiling process.
    Its ability to profile concurrent coroutines provides an in-depth understanding
    of how your code is functioning.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Yappi是一个Python性能分析器，允许你轻松识别性能瓶颈。它用C语言编写，是最有效的分析器之一。它拥有一个可定制的API，允许你仅分析代码中需要关注的特定部分，从而对分析过程有更多控制。它能够分析并发协程，提供对代码运行情况的深入理解。
- en: Example
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Note:** Install yappi using this command: `pip install yappi`'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 使用以下命令安装yappi: `pip install yappi`'
- en: '**Output**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| name | ncall | tsub | ttot | tavg |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| name | ncall | tsub | ttot | tavg |'
- en: '| ..lers\yappiProfiler.py:4 sum_arrays | 1 | 0.109375 | 0.109375 | 0.109375
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| ..lers\yappiProfiler.py:4 sum_arrays | 1 | 0.109375 | 0.109375 | 0.109375
    |'
- en: '| builtins. next | 1 | 0.000000 | 0.000000 | 0.000000 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| builtins. next | 1 | 0.000000 | 0.000000 | 0.000000 |'
- en: '| .. _GeneratorContextManager.__exit__ | 1 | 0.000000 | 0.000000 | 0.000000
    |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| .. _GeneratorContextManager.__exit__ | 1 | 0.000000 | 0.000000 | 0.000000
    |'
- en: '--------- Thread Stats -----------'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '--------- 线程统计 ---------'
- en: '| name | id | tid | ttot | scnt |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| name | id | tid | ttot | scnt |'
- en: '| _MainThread | 0 | 15148 | 0.187500  | 1 |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| _MainThread | 0 | 15148 | 0.187500 | 1 |'
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Remember to name your modules differently for the built-in modules. Otherwise,
    the import will import your module(i.e your python file) instead of the real built-in
    modules.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 记得为内置模块起不同的名称。否则，导入将导入你的模块（即你的Python文件），而不是实际的内置模块。
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: By using these profilers, developers can identify bottlenecks in their code
    and decide which implementation is best. With the right tools and a little bit
    of know-how, anyone can take their Python code to the next level of performance.
    So, get ready to optimize your Python performance optimization and watch it soar
    to new heights!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用这些分析工具，开发者可以识别代码中的瓶颈，并决定哪种实现方式最佳。使用合适的工具和一点技巧，任何人都能将他们的Python代码性能提升到新的高度。所以，准备好优化你的Python性能，看看它如何腾飞到新高度吧！
- en: I am glad that you decided to read this article and I hope it has been a valuable
    experience for you.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴你决定阅读这篇文章，希望它对你是一次有价值的体验。
- en: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1)** is an aspiring
    software developer with a keen interest in data science and applications of AI
    in medicine. Kanwal was selected as the Google Generation Scholar 2022 for the
    APAC region. Kanwal loves to share technical knowledge by writing articles on
    trending topics, and is passionate about improving the representation of women
    in tech industry.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1)** 是一位有志的软件开发者，对数据科学和人工智能在医学中的应用充满兴趣。Kanwal被选为2022年亚太地区的Google
    Generation Scholar。Kanwal喜欢通过撰写关于热门话题的文章来分享技术知识，并热衷于改善女性在科技行业中的代表性。'
- en: More On This Topic
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[A Deep Dive into GPT Models: Evolution & Performance Comparison](https://www.kdnuggets.com/2023/05/deep-dive-gpt-models.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深入探讨GPT模型：演变与性能比较](https://www.kdnuggets.com/2023/05/deep-dive-gpt-models.html)'
- en: '[Optimizing Your LLM for Performance and Scalability](https://www.kdnuggets.com/optimizing-your-llm-for-performance-and-scalability)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化您的LLM以提高性能和可扩展性](https://www.kdnuggets.com/optimizing-your-llm-for-performance-and-scalability)'
- en: '[Strategies for Optimizing Performance and Costs When Using Large…](https://www.kdnuggets.com/strategies-for-optimizing-performance-and-costs-when-using-large-language-models-in-the-cloud)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用大型语言模型优化性能和成本的策略](https://www.kdnuggets.com/strategies-for-optimizing-performance-and-costs-when-using-large-language-models-in-the-cloud)'
- en: '[Unveiling Neural Magic: A Dive into Activation Functions](https://www.kdnuggets.com/unveiling-neural-magic-a-dive-into-activation-functions)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[揭开神经魔法的面纱：深入探讨激活函数](https://www.kdnuggets.com/unveiling-neural-magic-a-dive-into-activation-functions)'
- en: '[Dive into the Future with Kaggle''s AI Report 2023 – See What''s Hot](https://www.kdnuggets.com/dive-into-the-future-with-kaggle-ai-report-2023-see-what-hot)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深入了解Kaggle的2023年AI报告——了解最新动态](https://www.kdnuggets.com/dive-into-the-future-with-kaggle-ai-report-2023-see-what-hot)'
- en: '[Optimizing Genes with a Genetic Algorithm](https://www.kdnuggets.com/2022/04/optimizing-genes-genetic-algorithm.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用遗传算法优化基因](https://www.kdnuggets.com/2022/04/optimizing-genes-genetic-algorithm.html)'
