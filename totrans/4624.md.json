["```py\nimport os\n\nimport speech_recognition as sr\n\nfrom pydub import AudioSegment\nfrom pydub.playback import play\nfrom gtts import gTTS as tts\n\n```", "```py\ndef capture():\n    \"\"\"Capture audio\"\"\"\n\n    rec = sr.Recognizer()\n\n    with sr.Microphone() as source:\n        print('I\\'M LISTENING...')\n        audio = rec.listen(source, phrase_time_limit=5)\n\n    try:\n        text = rec.recognize_google(audio, language='en-US')\n        return text\n\n    except:\n        speak('Sorry, I could not understand what you said.')\n        return 0\n\n```", "```py\ndef process_text(name, input):\n    \"\"\"Process what is said\"\"\"\n\n    speak(name + ', you said: \"' + input + '\".')\n    return\n\n```", "```py\ndef speak(text):\n    \"\"\"Say something\"\"\"\n\n    # Write output to console\n    print(text)\n\n    # Save audio file\n    speech = tts(text=text, lang='en')\n    speech_file = 'input.mp3'\n    speech.save(speech_file)\n\n    # Play audio file\n    sound = AudioSegment.from_mp3(speech_file)\n    play(sound)\n    os.remove(speech_file)\n\n```", "```py\nif __name__ == \"__main__\":\n\n    # First get name\n    speak('What is your name?')\n    name = capture()\n    speak('Hello, ' + name + '.')\n\n    # Then just keep listening & responding\n    while 1:\n        speak('What do you have to say?')\n        captured_text = capture().lower()\n\n        if captured_text == 0:\n            continue\n\n        if 'quit' in str(captured_text):\n            speak('OK, bye, ' + name + '.')\n            break\n\n        # Process captured text\n        process_text(name, captured_text)\n\n```", "```py` ```", "```py    ```", "```py    Pretty cool. Of course, it could be way cooler if it actually *did* something. So let's turn our attention to that next.    For next time, let's ease into something more complex like integrating spaCy into our code and trying some simple NLP tasks, such as spoken sentence classification, sentiment analysis, and named entity recognition.    We can then look at something more practically useful such as making a personal voice assistant, which will require some additional tweaks to our interface. But one thing at a time...      **Related**:    *   [Comparison of the Top Speech Processing APIs](/2018/12/activewizards-comparison-speech-processing-apis.html) *   [Build Your First Chatbot Using Python & NLTK](/2019/05/build-chatbot-python-nltk.html) *   [Building NLP Classifiers Cheaply With Transfer Learning and Weak Supervision](/2019/03/building-nlp-classifiers-cheaply-transfer-learning-weak-supervision.html)     ### More On This Topic    *   [The Evolution of Speech Recognition Metrics](https://www.kdnuggets.com/2022/10/evolution-speech-recognition-metrics.html) *   [Build a Text-to-Speech Converter with Python in 5 Minutes](https://www.kdnuggets.com/2022/09/build-texttospeech-converter-python-5-minutes.html) *   [Transfer Learning for Image Recognition and Natural Language Processing](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html) *   [5 IT Jobs That Are High in Demand But Don’t Get Enough Recognition](https://www.kdnuggets.com/5-it-jobs-that-are-high-in-demand-but-dont-get-enough-recognition) *   [Free eBook: 10 Practical Python Programming Tricks](https://www.kdnuggets.com/2023/04/free-ebook-10-practical-python-programming-tricks.html) *   [Customer Segmentation in Python: A Practical Approach](https://www.kdnuggets.com/customer-segmentation-in-python-a-practical-approach) ```"]