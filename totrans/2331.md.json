["```py\n%pip install imbalanced-learn\n```", "```py\nfrom collections import Counter\nfrom sklearn.datasets import make_classification\nfrom imblearn.over_sampling import SMOTE\nimport matplotlib.pyplot as plt\n\n# create a binary classification dataset\nX, y = make_classification(\n    n_samples=1000,\n    n_features=2,\n    n_redundant=0,\n    n_clusters_per_class=1,\n    weights=[0.98],\n    random_state=125,\n)\n\nlabels = Counter(y)\nprint(\"y labels after oversampling\")\nprint(labels)\n```", "```py\ny labels after oversampling\nCounter({0: 970, 1: 30})\n```", "```py\nplt.scatter(X[:, 0], X[:, 1], marker=\"o\", c=y, s=50, edgecolor=\"k\");\n```", "```py\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.tree import DecisionTreeClassifier\n\nmodel = DecisionTreeClassifier()\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nresult = cross_val_score(model, X, y, scoring=\"roc_auc\", cv=cv, n_jobs=-1)\nprint(\"Mean AUC: %.3f\" % np.mean(result))\n```", "```py\nMean AUC: 0.626\n```", "```py\nover = SMOTE()\n\nX, y = over.fit_resample(X, y)\n\nlabels = Counter(y)\nprint(\"y labels after oversampling\")\nprint(labels)\n```", "```py\ny labels after oversampling\nCounter({0: 970, 1: 970})\n```", "```py\nplt.scatter(X[:, 0], X[:, 1], marker=\"o\", c=y, s=50, edgecolor=\"k\");\n```", "```py\nmodel = DecisionTreeClassifier()\n\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nresult = cross_val_score(model, X, y, scoring=\"roc_auc\", cv=cv, n_jobs=-1)\n\nprint(\"Mean AUC: %.3f\" % np.mean(result))\n```", "```py\nMean AUC: 0.834\n```"]