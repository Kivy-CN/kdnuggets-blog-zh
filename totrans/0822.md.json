["```py\nimport numpy as np\nl = [[1,2,3],[4,5,6],[7,8,9]]\nnumpy_array = np.array(l)\nnumpy_array\n```", "```py\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n```", "```py\nzeros_array = np.zeros((3,4))\nzeros_array\n```", "```py\narray([[0., 0., 0., 0.],\n       [0., 0., 0., 0.],\n       [0., 0., 0., 0.]])\n```", "```py\nones_array = np.ones((3,4))\nones_array\n```", "```py\narray([[1., 1., 1., 1.],\n       [1., 1., 1., 1.],\n       [1., 1., 1., 1.]])\n```", "```py\nidentity_array = np.identity(3)\nidentity_array\n```", "```py\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n```", "```py\nrandom_array = np.random.rand(3,4)\nrandom_array\n```", "```py\narray([[0.84449279, 0.71146992, 0.48159787, 0.04927379],\n       [0.03428534, 0.26851667, 0.65718662, 0.52284251],\n       [0.1380207 , 0.91146148, 0.74171469, 0.57325424]])\n```", "```py\nrandn_array = np.random.randn(10)\nrandn_array\n```", "```py\narray([-0.68398432, -0.25466784,  0.27020797,  0.29632334, -0.20064897,\n        0.7988508 ,  1.34759319, -0.41418478, -0.35223377, -0.10282884])\n```", "```py\nrandint_array = np.random.randint(1,20,20)\nrandint_array\n```", "```py\narray([14,  3,  1,  2, 17, 15,  5, 17, 18,  9,  4, 19, 14, 14,  1, 10, 17,\n       19,  4,  6])\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\na1[0]\n```", "```py\narray([1, 2, 3])\n```", "```py\nprint(a1[0,2]) #3\n```", "```py\nprint(a1[0,0:2]) \n```", "```py\n[1 2]\n```", "```py\nprint(a1[:,0])\n```", "```py\n[1 4]\n```", "```py\na1>5\n```", "```py\narray([[False, False, False],\n       [False, False,  True]])\n```", "```py\na1[a1>5]\n```", "```py\narray([6])\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\nprint(a1)\nprint('Shape of Array: ',a1.shape)\n```", "```py\n[[1 2 3]\n [4 5 6]]\nShape of Array:  (2, 3)\n```", "```py\na1 = a1.reshape(3,2)\nprint(a1)\nprint('Shape of Array: ',a1.shape)\n```", "```py\n[[1 2]\n [3 4]\n [5 6]]\nShape of Array:  (3, 2)\n```", "```py\na1 = a1.reshape(-1)\nprint(a1)\nprint('Shape of Array: ',a1.shape)\n```", "```py\n[1 2 3 4 5 6]\nShape of Array:  (6,)\n```", "```py\na1 = np.array([[1,2,3,4,5,6]])\nprint('Before shape of Array: ',a1.shape)\na1 = a1.T\nprint(a1)\nprint('After shape of Array: ',a1.shape)\n```", "```py\nBefore shape of Array:  (1, 6)\n[[1]\n [2]\n [3]\n [4]\n [5]\n [6]]\nAfter shape of Array:  (6, 1)\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\na2 = np.array([[1,2],[4,5],[7,8]])\nprint('Shape of Array a1: ',a1.shape)\nprint('Shape of Array a2: ',a2.shape)\na3 = np.matmul(a1,a2) \n# a3 = a1 @ a2\nprint(a3)\nprint('Shape of Array a3: ',a3.shape)\n```", "```py\nShape of Array a1:  (2, 3)\nShape of Array a2:  (3, 2)\n[[30 36]\n [66 81]]\nShape of Array a3:  (2, 2)\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\na3 = np.dot(a1,2)\n# a3 = a1 * 2\nprint(a3)\nprint('Shape of Array a3: ',a3.shape)\n```", "```py\n[[ 2  4  6]\n [ 8 10 12]]\nShape of Array a3:  (2, 3)\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\nprint(np.exp(a1))\n```", "```py\n[[  2.71828183   7.3890561   20.08553692]\n [ 54.59815003 148.4131591  403.42879349]]\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\nprint(np.log(a1))\n```", "```py\n[[0\\.         0.69314718 1.09861229]\n [1.38629436 1.60943791 1.79175947]]\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\nprint(np.min(a1),np.max(a1))  # 1 6\n```", "```py\na1 = np.array([[1,2,3],[4,5,6]])\nprint(np.sqrt(a1))\n```", "```py\n[[1\\.         1.41421356 1.73205081]\n [2\\.         2.23606798 2.44948974]]\n```", "```py\nimport pandas as pd\ntype_house = pd.Series(['Loft','Villa'])\ntype_house\n```", "```py\n0     Loft\n1    Villa\ndtype: object\n```", "```py\ndf = pd.DataFrame({'Price': [100000, 300000], 'date_construction': [1960, 2010]})\ndf.head()\n```", "```py\ntype(df.Price),type(df.date_construction)\n```", "```py\n(pandas.core.series.Series, pandas.core.series.Series)\n```", "```py\ndf = pd.read_csv('/kaggle/input/bike-sharing-demand/train.csv')\ndf.head()\n```", "```py\ndf.tail(4)\n```", "```py\ndf.shape                    #(10886, 12)\n```", "```py\ndf.columns\n```", "```py\ndf.info()\n```", "```py\ndf.describe()\n```", "```py\ndf.season.unique(),df.season.nunique()\n```", "```py\n(array([1, 2, 3, 4]), 4)\n```", "```py\ndf.season.value_counts()\n```", "```py\ndf.isnull().sum()\n```", "```py\ndf.iloc[0]\n```", "```py\ndf.iloc[:,1]\n```", "```py\ndf.iloc[0:3,[0,1,2,5]]\n```", "```py\ndf.loc[0:3,['datetime','season','holiday','temp']]\n```", "```py\ndf[df.weather==1]\n```", "```py\ndf.loc[df.weather==1,['season','holiday']]\n```", "```py\ndf['workingday_c'] = df['workingday'].apply(lambda x: 'work' if x==1 else 'relax')\ndf[['workingday','workingday_c']].head()\n```", "```py\ndiz_season = {1:'winter',2:'spring',3:'summer',4:'fall'}\ndf['season_c'] = df['season'].map(lambda x: diz_season[x])\ndf[['season','season_c']].head()\n```", "```py\ndf.groupby('season_c').agg({'count':['median','max']})\n```", "```py\ndf.groupby('season_c').agg({'count':['median','max']}).reset_index().sort_values(by=('count', 'median'),ascending=False)\n```"]