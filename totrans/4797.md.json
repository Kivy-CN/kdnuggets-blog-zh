["```py\n$ sudo apt-get update\n$ sudo apt-get install cmake build-essential libboost-all-dev -y\n$ conda env create -n fraud -f conda.yaml\n$ source activate fraud\n(fraud)$ python -m ipykernel install --user --name fraud --display-name \"Python (fraud)\"\n```", "```py\n\nimport numpy as np\nimport sys\nimport os\nimport json\nimport pandas as pd\nfrom collections import Counter\nimport requests\nfrom IPython.core.display import display, HTML\nimport lightgbm as lgb\nimport sklearn\nimport aiohttp\nimport asyncio\nfrom utils import (split_train_test, classification_metrics_binary, classification_metrics_binary_prob,\n                   binarize_prediction, plot_confusion_matrix, run_load_test, read_from_sqlite)\nfrom utils import BASELINE_MODEL, PORT, TABLE_FRAUD, TABLE_LOCATIONS, DATABASE_FILE\n\nprint(\"System version: {}\".format(sys.version))\nprint(\"Numpy version: {}\".format(np.__version__))\nprint(\"Pandas version: {}\".format(pd.__version__))\nprint(\"LightGBM version: {}\".format(lgb.__version__))\nprint(\"Sklearn version: {}\".format(sklearn.__version__))\n\n%load_ext autoreload\n%autoreload 2\n\n```", "```py\n\nSystem version: 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 13:19:00) [GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)]\n\nNumpy version: 1.13.3\n\nPandas version: 0.22.0\n\nLightGBM version: 2.1.1\n\nSklearn version: 0.19.1\n\n```", "```py\n\nquery = 'SELECT * FROM ' + TABLE_FRAUD\ndf = read_from_sqlite(DATABASE_FILE, query)\n\n```", "```py\n\nprint(\"Shape: {}\".format(df.shape))\ndf.head() \n\n```", "```py\n\nShape: (284807, 31)\n\n```", "```py\n\ndf['Class'].value_counts()\n\n```", "```py\n\n0    284315\n1       492\nName: Class, dtype: int64\n\n```", "```py\n\ndf['Class'].value_counts(normalize=True)\n```", "```py\n\n0    0.998273\n1    0.001727\nName: Class, dtype: float64\n\n```", "```py\nX_train, X_test, y_train, y_test = split_train_test(df.drop('Class', axis=1), df['Class'], test_size=0.2)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n```", "```py\n\n(227845, 30)\n(56962, 30)\n(227845,)\n(56962,)\n\n```", "```py\n\nprint(y_train.value_counts())\nprint(y_train.value_counts(normalize=True))\nprint(y_test.value_counts())\nprint(y_test.value_counts(normalize=True))\n\n```", "```py\n\n0    227451\n1       394\nName: Class, dtype: int64\n0    0.998271\n1    0.001729\nName: Class, dtype: float64\n0    56864\n1       98\nName: Class, dtype: int64\n0    0.99828\n1    0.00172\nName: Class, dtype: float64\n\n```", "```py\n\nlgb_train = lgb.Dataset(X_train, y_train, free_raw_data=False)\nlgb_test = lgb.Dataset(X_test, y_test, reference=lgb_train, free_raw_data=False)\n\n```", "```py\nparameters = {'num_leaves': 2**8,\n              'learning_rate': 0.1,\n              'is_unbalance': True,\n              'min_split_gain': 0.1,\n              'min_child_weight': 1,\n              'reg_lambda': 1,\n              'subsample': 1,\n              'objective':'binary',\n              #'device': 'gpu', # comment this line if you are not using GPU\n              'task': 'train'\n              }\nnum_rounds = 300\n```", "```py\n\n%%time\nclf = lgb.train(parameters, lgb_train, num_boost_round=num_rounds)\n\n```", "```py\n\nCPU times: user 45.1 s, sys: 7.68 s, total: 52.8 s\nWall time: 11.9 s\n\n```", "```py\n\ny_prob = clf.predict(X_test)\ny_pred = binarize_prediction(y_prob, threshold=0.5)\n\n```", "```py\n\nmetricsmetrics  ==  classification_metrics_binaryclassifi (y_test, y_pred)\nmetrics2 = classification_metrics_binary_prob(y_test, y_prob)\nmetrics.update(metrics2)\ncm = metrics['Confusion Matrix']\nmetrics.pop('Confusion Matrix', None)\n\n```", "```py\n\narray([[55773,  1091],\n       [   11,    87]])\n\n```", "```py\n\nprint(json.dumps(metrics, indent=4, sort_keys=True))\nplot_confusion_matrix(cm, ['no fraud (negative class)', 'fraud (positive class)'])\n\n```", "```py\n\n{\n    \"AUC\": 0.9322482105532139,\n    \"Accuracy\": 0.980653769179453,\n    \"F1\": 0.13636363636363638,\n    \"Log loss\": 0.6375216445628125,\n    \"Precision\": 0.07385398981324279,\n    \"Recall\": 0.8877551020408163\n}\n\n```", "```py\n\nclf.save_model(BASELINE_MODEL)\n\n```", "```py\n\n# You can also run the api from inside the notebook (even though I find it more difficult for debugging).\n# To do it, just uncomment the next two lines:\n#%%bash --bg --proc bg_proc\n#python api.py\n\n```", "```py\n\n#server_name = 'http://the-name-of-your-server'\nserver_name = 'http://localhost'\nroot_url = '{}:{}'.format(server_name, PORT)\nres = requests.get(root_url)\ndisplay(HTML(res.text))\n\n```", "```py\n\nvals = y_test[y_test == 1].index.values\nX_target = X_test.loc[vals[0]]\ndict_query = X_target.to_dict()\nprint(dict_query)\n\n```", "```py\n{'Time': 57007.0, 'V1': -1.2712441917143702, 'V2': 2.46267526851135, 'V3': -2.85139500331783, 'V4': 2.3244800653477995, 'V5': -1.37224488981369, 'V6': -0.948195686538643, 'V7': -3.06523436172054, 'V8': 1.1669269478721105, 'V9': -2.2687705884481297, 'V10': -4.88114292689057, 'V11': 2.2551474887046297, 'V12': -4.68638689759229, 'V13': 0.652374668512965, 'V14': -6.17428834800643, 'V15': 0.594379608016446, 'V16': -4.8496923870965185, 'V17': -6.53652073527011, 'V18': -3.11909388163881, 'V19': 1.71549441975915, 'V20': 0.560478075726644, 'V21': 0.652941051330455, 'V22': 0.0819309763507574, 'V23': -0.22134783119833895, 'V24': -0.5235821592333061, 'V25': 0.224228161862968, 'V26': 0.756334522703558, 'V27': 0.632800477330469, 'V28': 0.25018709275719697, 'Amount': 0.01}\n```", "```py\n\nheaders = {'Content-type':'application/json'}\nend_point = root_url + '/predict'\nres = requests.post(end_point, data=json.dumps(dict_query), headers=headers)\nprint(res.ok)\nprint(json.dumps(res.json(), indent=2))\n\n```", "```py\n\nTrue\n{\n  \"fraud\": 1.0\n}\n\n```", "```py\n\nvar mapLocations = [];\n// Location updated emitted by the server via websockets\nsocket.on(\"map_update\", function (msg) {\n    var message = \"New event in \" + msg.title + \" (\" + msg.latitude\n        + \",\" + msg.longitude + \")\";\n    console.log(message);\n    var newLocation = new Location(msg.title, msg.latitude, msg.longitude);\n    mapLocations.push(newLocation);\n\n    clear the markers before redrawing\n    mapLocations.forEach(function (location) {\n      if (location.externalElement) {\n        location.externalElement = undefined;\n      }\n    });\n\n    map.dataProvider.images = mapLocations;\n    map.validateData(); //call to redraw the map with new data\n});\n\n```", "```py\n\nheaders = {'Content-type':'application/json'}\nend_point_map = root_url + '/predict_map'\nres = requests.post(end_point_map, data=json.dumps(dict_query), headers=headers)\nprint(res.text)\n\n```", "```py\n\nTrue\n{\n  \"fraud\": 1.0\n}\n\n```", "```py\n\nnum = 10\nconcurrent = 2\nverbose = True\npayload_list = [dict_query]*num\n\n```", "```py\n\n%%time\nwith aiohttp.ClientSession() as session:  # We create a persistent connection\n    loop = asyncio.get_event_loop()\n    calc_routes = loop.run_until_complete(run_load_test(end_point, payload_list, session, concurrent, verbose))\n\n```", "```py\nERROR:asyncio:Creating a client session outside of coroutine\nclient_session: aiohttp.client.ClientSession object at 0x7f16847333c8\n\n```", "```py\n\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\nResponse status: 200\n{'fraud': 7.284115783035928e-06}\nCPU times: user 14.8 ms, sys: 15.8 ms, total: 30.6 ms\nWall time: 296 ms\n\n```", "```py\n\n*# If you run the API from the notebook, you can uncomment the following two lines to kill the process\n#%%bash\n#ps aux | grep 'api.py' | grep -v 'grep' | awk '{print $2}' | xargs kill*\n\n```"]