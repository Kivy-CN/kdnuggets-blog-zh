- en: Introduction to Pandas for Data Science
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学的 Pandas 介绍
- en: 原文：[https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)
- en: '![Introduction to Pandas for Data Science](../Images/7c932944c4b641a632fd107fd28bf1f3.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学的 Pandas 介绍](../Images/7c932944c4b641a632fd107fd28bf1f3.png)'
- en: '[Image by benzoix](https://www.freepik.com/free-vector/panda-mascot-logo-esport-gaming_11760508.htm#query=pandas&position=23&from_view=search&track=sph)
    on Freepik'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[由 benzoix 提供的图像](https://www.freepik.com/free-vector/panda-mascot-logo-esport-gaming_11760508.htm#query=pandas&position=23&from_view=search&track=sph)
    来自 Freepik'
- en: What is Pandas actually, and why is it so famous? Think of Pandas as an Excel
    sheet, but a next-level Excel sheet with more features and flexibility than Excel.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 实际上是什么？为什么它如此著名？把 Pandas 想象成一个 Excel 表，但它比 Excel 更高级，具有更多的功能和灵活性。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Why Pandas
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Pandas
- en: There are a lot of reasons to choose pandas, some of them are
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 pandas 的原因有很多，其中一些包括
- en: Open Source
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开源
- en: Easy to Learn
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易学习
- en: Great Community
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优秀的社区
- en: Built on Top of Numpy
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于 Numpy 之上
- en: Easy to Analyze and pre-process data in it
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容易分析和预处理数据
- en: Built-in Data Visualization
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置数据可视化
- en: A lot of Built-in functions to help in Exploratory Data Analysis
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多内置函数帮助进行探索性数据分析
- en: Built-in support for CSV, SQL, HTML, JSON, pickle, excel, clipboard and a lot
    more
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置支持 CSV、SQL、HTML、JSON、pickle、excel、剪贴板等
- en: and a lot more
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还有很多其他功能
- en: Installing Pandas
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Pandas
- en: If you are using Anaconda, you will automatically have pandas in it, but for
    some reason, if you do not have it, just run this command
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Anaconda，你将自动拥有 pandas，但如果由于某种原因没有它，只需运行以下命令
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you are not using Anaconda, install via pip by
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 Anaconda，通过 pip 安装
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Importing
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入
- en: To import pandas, use
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入 pandas，请使用
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It is better to import numpy with pandas to have access to more numpy features,
    which helps us in Exploratory Data Analysis (EDA).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最好与 pandas 一起导入 numpy，以便访问更多 numpy 功能，这有助于我们进行探索性数据分析（EDA）。
- en: Pandas Data Structures
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas 数据结构
- en: Pandas has two main data structures.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 有两个主要的数据结构。
- en: Series
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Series
- en: Data Frames
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据框
- en: Series
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Series
- en: Think of Series as a single column in an Excel sheet. You can also think of
    it as a 1d Numpy array. The only thing that differentiates it from 1d Numpy array
    is that we can have Index Names.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Series 视为 Excel 表中的一列。你也可以将其视为一个一维的 Numpy 数组。唯一的不同之处在于，我们可以为其设置索引名称。
- en: 'The basic syntax to create a pandas Series is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 pandas Series 的基本语法如下：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Data can be of Any type from Python’s dictionary to list or tuple. It can also
    be a numpy array.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可以是从 Python 字典到列表或元组的任何类型。它也可以是一个 numpy 数组。
- en: 'Let’s build a series from Python List:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Python 列表中创建一个 Series：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/314cccf6adc18392f9bf86ed3f9b5237.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/314cccf6adc18392f9bf86ed3f9b5237.png)'
- en: Output of newSeries.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: newSeries 的输出。
- en: It is not necessary to add an index in a pandas Series. In that case, it will
    automatically start index from 0.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pandas Series 中添加索引不是必须的。在这种情况下，它会自动从 0 开始索引。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/db6ab16b2ad6fb7298c5e767599f1d2b.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db6ab16b2ad6fb7298c5e767599f1d2b.png)'
- en: Here we can see that the index starts from 0 and goes on till the Series end.
    Now let’s see how we can create a Series using a [Python Dictionary](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html),
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到索引从 0 开始，一直到 Series 结束。现在让我们看看如何使用 [Python 字典](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html)
    创建 Series，
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/8cc86f7cf20db2ad2512282c3c880f1c.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8cc86f7cf20db2ad2512282c3c880f1c.png)'
- en: Here we can see that we do not have to explicitly pass the index values as they
    are automatically assigned from the keys in the dictionary.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到，我们不需要显式地传递索引值，因为它们会从字典的键中自动分配。
- en: Accessing data from Series
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问Series中的数据
- en: The normal pattern to access the data from Pandas Series is
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 访问Pandas Series中的数据的常见模式是：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Let’s take the example of mySeries we created earlier. To get the value of Name,
    Age, and Career, all we have to do is
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以之前创建的mySeries为例。要获取Name、Age和Career的值，我们只需：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/731668986bd3ec59bc1b4ffe05466651.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/731668986bd3ec59bc1b4ffe05466651.png)'
- en: Basic Operations on Pandas Series
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas Series 的基本操作
- en: Let’s create two new series to perform operations on them
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建两个新系列来对它们进行操作。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/66bad4155f568f5d8de191d9271209a6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66bad4155f568f5d8de191d9271209a6.png)'
- en: Basic Arithmetic operations include +-*/ operations. These are done over-index,
    so let’s perform them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的算术操作包括+-*/操作。这些操作是针对索引的，因此我们来执行它们。
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/c360748cc9c2a747e56e176141fe6bdf.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c360748cc9c2a747e56e176141fe6bdf.png)'
- en: Here we can see that since London and NEWYORK index are present in both Series,
    so it has added the value of both and output of rest is NaN (Not a number).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到，由于伦敦和NEWYORK索引在两个Series中都存在，因此它将两个值相加，其他的输出为NaN（不是一个数字）。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/41100455557a3b9362ef33bdaf33a8b8.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41100455557a3b9362ef33bdaf33a8b8.png)'
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/c9f8567d040d3e456cd94f1999196aea.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c9f8567d040d3e456cd94f1999196aea.png)'
- en: Element Wise Operations/Broadcasting
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元素级操作/广播
- en: If you are familiar with Numpy, you must be aware of the Broadcasting concept.
    Refer to [this link](https://www.geeksforgeeks.org/python-broadcasting-with-numpy-arrays/) if
    you are not familiar with the concept of broadcasting.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对Numpy很熟悉，你一定听说过广播的概念。如果你不熟悉广播的概念，请参考 [this link](https://www.geeksforgeeks.org/python-broadcasting-with-numpy-arrays/)。
- en: Now using our newSeries Series, we will see operations performed using the broadcasting
    concept.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用我们的newSeries Series，我们将看到使用广播概念进行的操作。
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/bb9f77aafeade733e05820e62036069e.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bb9f77aafeade733e05820e62036069e.png)'
- en: Here, it added 5 to every single element in Series newSeries. This is also known
    as element-wise operations. Similarly, for other operations such as *, /, -, **,
    and other operators as well. We will see only ** operator, and you should try
    it for other operators too.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，它给Series newSeries中的每个元素加上了5。这也被称为逐元素操作。类似地，其他操作如*、/、-、**及其他运算符也是如此。我们只会看到**运算符，你也应该尝试其他运算符。
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/e9f736d264dc48221607416762b416d5.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9f736d264dc48221607416762b416d5.png)'
- en: Here, we take the element-wise square root of each number. Remember, the square
    root is any number raised to power 1/2.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们对每个数字进行逐元素的平方根计算。记住，平方根是任何数字的1/2次方。
- en: Pandas DataFrame
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pandas 数据框
- en: Dataframe is indeed the most commonly used and important data structure of Pandas.
    Think of a data frame as an excel sheet.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 数据框确实是Pandas中最常用和最重要的数据结构。可以将数据框看作是一个Excel表格。
- en: Main ways to create Data Frame are
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据框的主要方法有：
- en: Reading a CSV/Excel File
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取 CSV/Excel 文件
- en: Python Dictionary
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 字典
- en: ndarray
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ndarray
- en: Let’s take an example of how to create a data frame using a dictionary.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子，看看如何使用字典创建数据框。
- en: We can create a data frame by passing in a dictionary where each value of the
    dictionary is a list.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过传递一个字典来创建数据框，其中字典的每个值都是一个列表。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To convert this dictionary into a data frame, we simply have to call the dataframe
    function on this dictionary.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这个字典转换为数据框，我们只需对这个字典调用dataframe函数即可。
- en: '[PRE16]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/d872e788d8650798f50112d4cd77d76f.png)df1'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/d872e788d8650798f50112d4cd77d76f.png)df1'
- en: Getting Values from a Column
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从列中获取值
- en: To get values from a column, we can use this syntax
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要从列中获取值，我们可以使用这种语法：
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Both of these syntaxes are correct, but we have to be careful about choosing
    one. If our column name has space in it, then definitely we can not use the 2nd
    method. We have to use the first method. We can only use the 2nd method when there
    is no space in the column name.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种语法都是正确的，但我们需要小心选择。如果我们的列名中有空格，那么肯定不能使用第二种方法。我们必须使用第一种方法。只有当列名中没有空格时，我们才可以使用第二种方法。
- en: '[PRE18]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![](../Images/68ef167ed2e8a38a5e2ad5ebc29e806d.png)df1.Name'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/68ef167ed2e8a38a5e2ad5ebc29e806d.png)df1.Name'
- en: Here we can see the values of the column, their index number, name of the column,
    and datatype of the column.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到列的值、它们的索引号、列名和列的数据类型。
- en: '[PRE19]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![](../Images/51feecdbad37e6d507cbf7501fd8db96.png)df1[‘Age’]'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/51feecdbad37e6d507cbf7501fd8db96.png)df1[‘Age’]'
- en: We can see that using both syntaxes returns the column of the data frame where
    we can analyze it.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，使用这两种语法都会返回数据框的列，我们可以对其进行分析。
- en: Values of Multiple Columns
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多列的值
- en: To get values of Multiple columns in a data frame, pass the name of columns
    as a list.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取数据框中多个列的值，可以将列名作为列表传递。
- en: '[PRE20]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![](../Images/f3e2df68cdcf0a5fe482caf94d6c0b4c.png)df1[[“Name”,”Age”]]'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/f3e2df68cdcf0a5fe482caf94d6c0b4c.png)df1[[“Name”,”Age”]]'
- en: We can see that it returned the dataframe with two columns Name and Age.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它返回了包含 Name 和 Age 两列的数据框。
- en: Important functions of Dataframe in Pandas
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas 中 DataFrame 的重要函数
- en: Let’s explore important functions of DataFrame by using a dataset known as ‘Titanic’.
    This data set is commonly Available online, or you can get it at [Kaggle](https://www.kaggle.com/c/titanic/data).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用一个名为‘Titanic’的数据集来深入探讨 DataFrame 的重要函数。这个数据集通常可以在线获得，或者你可以在 [Kaggle](https://www.kaggle.com/c/titanic/data)
    找到它。
- en: Reading Data
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取数据
- en: Pandas has good built-in support to read data of various types, including CSV,
    fether, excel, HTML, JSON, pickle, SAS, SQL, and many more.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 对读取各种类型的数据提供了良好的内置支持，包括 CSV、fether、excel、HTML、JSON、pickle、SAS、SQL 等。
- en: The common syntax to read data is
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 读取数据的常用语法是
- en: '[PRE21]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: CSV
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSV
- en: To read data from a CSV file, all you have to do is to use pandas read_csv function.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 CSV 文件中读取数据，你只需使用 pandas 的 read_csv 函数。
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Since titanic is also available in CSV format, so we will read it using read_csv
    function. When you download the dataset, you will have two files named train.csv
    and test.csv, which will help in testing machine learning models, so we will only
    focus on the train_csv file.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Titanic 数据集也以 CSV 格式提供，所以我们将使用 read_csv 函数读取它。当你下载数据集时，你会得到两个名为 train.csv
    和 test.csv 的文件，这些文件将帮助测试机器学习模型，所以我们将只关注 train_csv 文件。
- en: '[PRE23]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now df is automatically a data frame. Let’s explore some of its functions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 df 自动成为一个数据框。让我们探索它的一些函数。
- en: head()
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: head()
- en: If you print your dataset normally, it will show a complete dataset, which may
    have a million rows or columns, which is hard to see and analyze. df.head() function
    allows us to see the first ’n’ rows of the data set (by default 5) so that we
    can make a rough estimate of our dataset, and what important functions to apply
    on it next.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正常打印你的数据集，它会显示一个完整的数据集，可能有百万行或列，这很难查看和分析。df.head() 函数允许我们查看数据集的前 ’n’ 行（默认
    5 行），以便我们可以对数据集做一个粗略估计，并确定接下来要应用的关键函数。
- en: '[PRE24]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '![](../Images/6809138a901745575a553a2a32df58e9.png)df.head()'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6809138a901745575a553a2a32df58e9.png)df.head()'
- en: Now we can see our columns in the data set, & their values for the first 5 rows.
    Since we haven’t passed any value, so it is showing the first 5 rows.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到数据集中的列及其前 5 行的值。由于我们没有传递任何值，因此它显示的是前 5 行。
- en: tail()
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: tail()
- en: Similar to the head function, we have a tail function that shows last *n* values.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 head 函数，我们还有一个 tail 函数，它显示最后 *n* 个值。
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '![](../Images/21eb4f5febca316bff45b34bfbd128d4.png)df.tail(3)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21eb4f5febca316bff45b34bfbd128d4.png)df.tail(3)'
- en: We can see the last 3 rows from our data set, as we passed df.tail(3).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到数据集的最后 3 行，因为我们传递了 df.tail(3)。
- en: shape()
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: shape()
- en: The shape() is one another important function to analyze the shape of the dataset,
    which is pretty helpful when we are making our machine learning models, and we
    want our dimensions to be exact.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: shape() 是另一个重要的函数，用于分析数据集的形状，这在我们制作机器学习模型时非常有用，并且我们希望我们的维度是精确的。
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '![](../Images/82749010f211e57a998c104bfa3c5599.png)df.shape()'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82749010f211e57a998c104bfa3c5599.png)df.shape()'
- en: Here we can see that our output is (891,12), which is equal to 891 rows and
    12 columns, which means that in total, we have 12 features or 12 columns and 891
    rows or 891 examples.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到我们的输出是 (891,12)，这等于 891 行和 12 列，这意味着我们总共有 12 个特征或 12 列和 891 行或 891
    个样本。
- en: Previously when we used the df.tail() function, the index number of our last
    column was 890 because our index started from 0, not from 1\. If the index number
    started from 1, then we would have an index number of the last column as 891.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们使用 df.tail() 函数时，最后一列的索引号是 890，因为我们的索引是从 0 开始的，而不是从 1 开始的。如果索引号是从 1 开始的，那么最后一列的索引号将是
    891。
- en: isnull()
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: isnull()
- en: This is another important function that is used to find the null values in a
    dataset. We can see in previous outputs that some values are NaN, which means
    “Not a Number”, and we have to deal with these missing values to get good results.
    isnull() is an important function to deal with these null values.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个重要的函数，用于查找数据集中为空的值。我们可以在之前的输出中看到一些值是 NaN，这意味着“不是数字”，我们必须处理这些缺失值以获得良好的结果。isnull()
    是处理这些空值的重要函数。
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: I am using the head function so that we can see the first 5 examples, not the
    whole data set.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在使用head函数，以便我们可以看到前5个示例，而不是整个数据集。
- en: '![](../Images/83de576c429ae703321b77b4484fa58e.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83de576c429ae703321b77b4484fa58e.png)'
- en: df.isnull().head()
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: df.isnull().head()
- en: Here, we can see that some values in “Cabin” columns are True. True means that
    the value is NaN or missing. We can see that this is unclear to see and understand,
    so we can use the sum() function to get more detailed info.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到“Cabin”列中的一些值为True。True表示该值为NaN或缺失。我们可以看到这不容易理解，因此我们可以使用sum()函数来获取更详细的信息。
- en: sum()
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: sum()
- en: The sum function is used to sum all the values in a data frame. Remember that
    True meaning 1 and False meaning 0, so to get all the True values returned by
    isnull() function, we can use sum() function. Let’s check it out.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: sum函数用于计算数据框中所有值的总和。记住True表示1，False表示0，因此为了获取isnull()函数返回的所有True值，我们可以使用sum()函数。让我们检查一下。
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '![](../Images/a56bed68de5735aba3c0809c8b4146bf.png)df.isnull().sum()'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a56bed68de5735aba3c0809c8b4146bf.png)df.isnull().sum()'
- en: Here, we can see that only missing values are in columns of “Age”, “Cabin”,
    & “Embarked”.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到只有“Age”、“Cabin”和“Embarked”列中有缺失值。
- en: info()
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: info()
- en: The info function is also a commonly used pandas function, which “Prints a concise
    summary of a DataFrame.”
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: info函数也是一个常用的pandas函数，它“打印DataFrame的简洁摘要。”
- en: '[PRE29]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '![](../Images/c20d616c8ff237b204f0ba62b0a457d1.png)df.info()'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c20d616c8ff237b204f0ba62b0a457d1.png)df.info()'
- en: Here, we can see that it tells us how many non-null entities we have, such as
    in-case of Age, we have 714 Non-Null float64 type entities. It also tells us about
    memory usage, which is 83.6 KB in this case.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到它告诉我们有多少个非空实体，例如在年龄字段中，我们有714个非空的float64类型实体。它还告诉我们内存使用情况，在这个例子中是83.6
    KB。
- en: describe()
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: describe()
- en: Describe is also a super useful function to analyze the data. It tells us about
    the descriptive statistics of a data frame, including those that summarize the
    central tendency, dispersion, and shape of a dataset’s distribution, excluding
    values.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: describe()也是一个非常有用的函数来分析数据。它告诉我们数据框的描述统计信息，包括那些总结数据集分布的中心趋势、离散程度和形状的统计信息，排除值。
- en: '[PRE30]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '![](../Images/3aa801ab8f71ceab689c9250d04e3708.png)df.describe()'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3aa801ab8f71ceab689c9250d04e3708.png)df.describe()'
- en: Here we can see some important statistical analysis of each column, including
    the mean, standard deviation, minimum value, and much more. Read more about it
    in its [documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到每一列的一些重要统计分析，包括均值、标准差、最小值等。更多信息请参见其[文档](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html)。
- en: Boolean Indexing
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔索引
- en: This is also one of the important and widely used concepts both in Numpy and
    Pandas.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是Numpy和Pandas中一个重要且广泛使用的概念。
- en: As the name suggests, we index using boolean variables, i.e., True and False.
    If the index is True, show that row, and if the Index is False, do not show that
    row.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 正如名称所示，我们使用布尔变量进行索引，即True和False。如果索引为True，则显示该行；如果索引为False，则不显示该行。
- en: It helps us a lot when we are trying to extract important features from our
    dataset. Let’s take an example where we only want to see the entries where “Sex”
    is “male”. Let’s see how we are going to approach this.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们尝试从数据集中提取重要特征时，它对我们很有帮助。让我们以“Sex”为“male”的条目为例，看看我们如何解决这个问题。
- en: '[PRE31]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This is going to return a Series of Boolean values True and False, where True
    is the row where “Sex” is “male” else False.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个布尔值为True和False的Series，其中True表示“Sex”为“male”的行，否则为False。
- en: In order to see the first 10 results only, I can use the head function as
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 为了只查看前10个结果，我可以使用head函数，如下所示。
- en: '[PRE32]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '![](../Images/508840d2a0fe27bcd0c66b643c8dfb88.png)(df[“sex”]==”male”).head(10)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/508840d2a0fe27bcd0c66b643c8dfb88.png)(df[“sex”]==”male”).head(10)'
- en: Now, in order to see the complete dataframe with only those rows where “Sex”
    is “male”, we should pass df[“Sex”]==”male” in dataframe to get all the results
    where “Sex” is “male”.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了查看完整的数据框，只包含“Sex”为“male”的行，我们应该在数据框中传递df[“Sex”]==”male”以获取所有“Sex”为“male”的结果。
- en: '[PRE33]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '![](../Images/63c60b477e7170ef67fba61dc0a8a9e5.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/63c60b477e7170ef67fba61dc0a8a9e5.png)'
- en: Here, we can see that all the results we have are those where Sex is Male.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到所有的结果都是“Sex”为Male的行。
- en: Now let’s derive some useful information using Boolean indexing.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过布尔索引提取一些有用的信息。
- en: In order to get rows based on multiple conditions, we use parenthesis “()” and
    “&,|,!=” signs between multiple conditions.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 为了基于多个条件获取行，我们使用括号“()”和“&,|,!=”符号来连接多个条件。
- en: Let’s find out what is the percentage of all the male passengers who have survived.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出所有幸存男性乘客的百分比。
- en: '[PRE34]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '![](../Images/a6d01eb337b12de53bb73107aafbf734.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6d01eb337b12de53bb73107aafbf734.png)'
- en: Give this code a second to read and understand what is happening. We are collecting
    all the rows from the dataframe where df[“Sex”] == “male” and df[“Survived”]==1\.
    The returned value is a dataframe with all the rows of male passengers who survived.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 给这段代码一点时间，理解发生了什么。我们正在收集所有行，其中df[“Sex”] == “male”并且df[“Survived”]==1\. 返回值是一个包含所有幸存男性乘客的dataframe。
- en: Let’s find out the percentage of male passengers survived.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们找出幸存的男性乘客的百分比。
- en: Now, the formula for the percentage of male passengers who survived is Total
    Number of Male Survived / Total Number of Male Passengers
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，幸存男性乘客的百分比公式是：幸存男性总数 / 男性乘客总数
- en: '![](../Images/a3309603d8f6718e8642122df0f8de1a.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a3309603d8f6718e8642122df0f8de1a.png)'
- en: In pandas, we can write this as
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在pandas中，我们可以这样写
- en: '[PRE35]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Let’s break this code step by step.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步解析这段代码。
- en: df[‘Sex’]==’male’ will return a boolean Series of examples where sex is male.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: df[‘Sex’]==’male’将返回一个布尔Series，其中性别为男性。
- en: df[df[“Sex”]==”male”] will return the complete data frame with all examples
    where “Sex” is “male”.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: df[df[“Sex”]==”male”]将返回所有“Sex”为“male”的示例的完整数据框。
- en: men = df[df[‘Sex’]==’male’][‘Survived’] will return the “Survived” column of
    data frame of all the passengers who are male.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: men = df[df[‘Sex’]==’male’][‘Survived’]将返回所有男性乘客的“Survived”列。
- en: sum(men) will sum all the men who survived. As it is a Series of 0 and 1\. len(men)
    will return the Number of Total men.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: sum(men)将计算所有幸存男性的总和。由于这是一个由0和1组成的Series，len(men)将返回男性的总数。
- en: Now put these in the formula given above and we will find the percentage of
    all the men survived in Titanic which is
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将这些放入上面的公式中，我们将找到在Titanic上幸存的所有男性的百分比。
- en: '![](../Images/ff899cef506259b24ce2800648fb5efd.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff899cef506259b24ce2800648fb5efd.png)'
- en: 18%!!!!!. Yes, only 18% of men in our data set have survived the Titanic disaster.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 18%!!!!! 是的，我们的数据集中只有18%的男性幸存者。
- en: Similarly, we can code it for females, which I won’t, but it is your task, we
    find out that 74 % of female passengers have survived this disaster.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以为女性编写代码，我不这样做，但这是你的任务，我们发现74%的女性乘客幸存于这次灾难。
- en: This brings us to the end of this article. Now obviously there are tons of other
    important functions in Pandas which are very important such as groupby, apply,
    iloc, rename, replace etc. I recommend you to check the [“Python for Data Analysis”](https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/ref=sr_1_1?crid=2YVHIUW4AOLTD&dchild=1&keywords=python+for+data+analysis&qid=1590067346&sprefix=Python+for+Data+ANa%2Caps%2C348&sr=8-1) book
    by Wes, who is the creator of this Pandas library.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章到此结束。显然，Pandas中还有许多其他重要功能，如groupby、apply、iloc、rename、replace等。我建议你查看Wes编写的[《Python
    数据分析》](https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/ref=sr_1_1?crid=2YVHIUW4AOLTD&dchild=1&keywords=python+for+data+analysis&qid=1590067346&sprefix=Python+for+Data+ANa%2Caps%2C348&sr=8-1)书籍，他是这个Pandas库的创始人。
- en: Also, check out [this cheat sheet](https://www.dataquest.io/blog/pandas-cheat-sheet/) by
    Dataquest for quick reference.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，查看一下[这个备忘单](https://www.dataquest.io/blog/pandas-cheat-sheet/)以便快速参考。
- en: '**[Ahmad](https://twitter.com/AhmadMustafaAn1)** is interested in Machine Learning,
    Deep Learning, and Computer Vision. Currently working as a Jr. Machine Learning
    engineer at Redbuffer.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Ahmad](https://twitter.com/AhmadMustafaAn1)** 对机器学习、深度学习和计算机视觉感兴趣。目前担任Redbuffer的初级机器学习工程师。'
- en: More On This Topic
  id: totrans-191
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关阅读
- en: '[Introduction to Numpy and Pandas](https://www.kdnuggets.com/introduction-to-numpy-and-pandas)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Numpy和Pandas入门](https://www.kdnuggets.com/introduction-to-numpy-and-pandas)'
- en: '[Building Data Science Pipelines Using Pandas](https://www.kdnuggets.com/building-data-science-pipelines-using-pandas)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Pandas构建数据科学管道](https://www.kdnuggets.com/building-data-science-pipelines-using-pandas)'
- en: '[Essential Math for Data Science: Visual Introduction to Singular…](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学的基本数学：奇异值分解的可视化介绍](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
- en: '[Introduction to Data Science: A Beginner''s Guide](https://www.kdnuggets.com/2023/07/introduction-data-science-beginner-guide.html)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学入门：初学者指南](https://www.kdnuggets.com/2023/07/introduction-data-science-beginner-guide.html)'
- en: '[Introduction to Databases in Data Science](https://www.kdnuggets.com/introduction-to-databases-in-data-science)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的数据库简介](https://www.kdnuggets.com/introduction-to-databases-in-data-science)'
- en: '[Introduction to Cloud Computing for Data Science](https://www.kdnuggets.com/introduction-to-cloud-computing-for-data-science)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的云计算简介](https://www.kdnuggets.com/introduction-to-cloud-computing-for-data-science)'
