- en: Understanding Boxplots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/11/understanding-boxplots.html](https://www.kdnuggets.com/2019/11/understanding-boxplots.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/), Data
    Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/47112087370820577dde8c44d5592839.png)'
  prefs: []
  type: TYPE_IMG
- en: Different parts of a boxplot
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The image above is a boxplot**. **A boxplot is a standardized way of displaying
    the distribution of data based on a five number summary (“minimum”, first quartile
    (Q1), median, third quartile (Q3), and “maximum”). It can tell you about your
    outliers and what their values are. It can also tell you if your data is symmetrical,
    how tightly your data is grouped, and if and how your data is skewed.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tutorial will include:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a boxplot?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the anatomy of a boxplot by comparing a boxplot against the probability
    density function for a normal distribution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How do you make and interpret boxplots using Python?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As always, the code used to make the graphs is available on my [github](https://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/box_plot.ipynb).
    With that, let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: What is a Boxplot?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For some distributions/datasets, you will find that you need more information
    than the measures of central tendency (median, mean, and mode).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/c06e4a4d70f8b04400847dae5dc97c96.png)'
  prefs: []
  type: TYPE_IMG
- en: There are times when mean, median, and mode aren’t enough to describe a dataset
    (taken from [here](https://www.coursera.org/lecture/basic-statistics/1-05-range-interquartile-range-and-box-plot-RbWIZ)).
  prefs: []
  type: TYPE_NORMAL
- en: You need to have information on the variability or dispersion of the data. A
    boxplot is a graph that gives you a good indication of how the values in the data
    are spread out. Although boxplots may seem primitive in comparison to a [histogram](https://datavizcatalogue.com/methods/histogram.html) or [density
    plot](https://datavizcatalogue.com/methods/density_plot.html), they have the advantage
    of taking up less space, which is useful when comparing distributions between
    many groups or datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/47112087370820577dde8c44d5592839.png)'
  prefs: []
  type: TYPE_IMG
- en: Different parts of a boxplot
  prefs: []
  type: TYPE_NORMAL
- en: Boxplots are a standardized way of displaying the distribution of data based
    on a five number summary (“minimum”, first quartile (Q1), median, third quartile
    (Q3), and “maximum”).
  prefs: []
  type: TYPE_NORMAL
- en: '**median (Q2/50th Percentile)**: the middle value of the dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '**first quartile (Q1/25th Percentile)**: the middle number between the smallest
    number (not the “minimum”) and the median of the dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '**third quartile (Q3/75th Percentile)**: the middle value between the median
    and the highest value (not the “maximum”) of the dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: '**interquartile range (IQR)**: 25th to the 75th percentile.'
  prefs: []
  type: TYPE_NORMAL
- en: '**whiskers (shown in blue)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**outliers (shown as green circles)**'
  prefs: []
  type: TYPE_NORMAL
- en: '**“maximum”**: Q3 + 1.5*IQR'
  prefs: []
  type: TYPE_NORMAL
- en: '**“minimum”**: Q1 -1.5*IQR'
  prefs: []
  type: TYPE_NORMAL
- en: What defines an outlier, “minimum”, or“maximum” may not be clear yet. The next
    section will try to clear that up for you.
  prefs: []
  type: TYPE_NORMAL
- en: Boxplot on a Normal Distribution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/d4dcf99a1f745f7668a16694db8fd8ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparison of a boxplot of a nearly normal distribution and a probability density
    function (pdf) for a normal distribution
  prefs: []
  type: TYPE_NORMAL
- en: The image above is a comparison of a boxplot of a nearly normal distribution
    and the probability density function (pdf) for a normal distribution. The reason
    why I am showing you this image is that looking at a statistical distribution
    is more commonplace than looking at a box plot. In other words, it might help
    you understand a boxplot.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section will cover many things including:'
  prefs: []
  type: TYPE_NORMAL
- en: How outliers are (for a normal distribution) .7% of the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What a “minimum” and a “maximum” are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Probability Density Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This part of the post is very similar to the [68–95–99.7 rule article](https://towardsdatascience.com/understanding-the-68-95-99-7-rule-for-a-normal-distribution-b7b7cbf760c2),
    but adapted for a boxplot. To be able to understand where the percentages come
    from, it is important to know about the probability density function (PDF). A
    PDF is used to specify the probability of the [random variable](https://en.wikipedia.org/wiki/Random_variable) falling *within
    a particular range of values*, as opposed to taking on any one value. This probability
    is given by the [integral](https://en.wikipedia.org/wiki/Integral) of this variable’s
    PDF over that range — that is, it is given by the area under the density function
    but above the horizontal axis and between the lowest and greatest values of the
    range. This definition might not make much sense so let’s clear it up by graphing
    the probability density function for a normal distribution. The equation below
    is the probability density function for a normal distribution
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/09eeca96a87d12120e91f7cc9e1ddabd.png)'
  prefs: []
  type: TYPE_IMG
- en: PDF for a Normal Distribution
  prefs: []
  type: TYPE_NORMAL
- en: Let’s simplify it by assuming we have a mean (μ) of 0 and a standard deviation
    (σ) of 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/3b472349b88842f047b49f1be317e1de.png)'
  prefs: []
  type: TYPE_IMG
- en: PDF for a Normal Distribution
  prefs: []
  type: TYPE_NORMAL
- en: This can be graphed using anything, but I choose to graph it using Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e3dfb136ebe88de0c72380c26ad23b06.png)'
  prefs: []
  type: TYPE_IMG
- en: The graph above does not show you the *probability* of events but their *probability
    density. *To get the probability of an event within a given range we will need
    to integrate. Suppose we are interested in finding the probability of a random
    data point landing within the interquartile range .6745 standard deviation of
    the mean, we need to integrate from -.6745 to .6745\. This can be done with SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/e4638042ef4598e841d94a6af2249fe1.png)'
  prefs: []
  type: TYPE_IMG
- en: The same can be done for “minimum” and “maximum”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fe651816b3ea0fd6286da10fac9b713b.png)'
  prefs: []
  type: TYPE_IMG
- en: As mentioned earlier, outliers are the remaining .7% percent of the data.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that for any PDF, the area under the curve must be 1
    (the probability of drawing any number from the function’s range is always 1).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1568441562294a441f29ac55e7c98f0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Graphing and Interpreting a Boxplot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Free preview [video](https://youtu.be/BE8CVGJuftI) from the [Using Python for
    Data Visualization course](https://www.linkedin.com/learning/python-for-data-visualization/effectively-present-data-with-python)
  prefs: []
  type: TYPE_NORMAL
- en: This section is largely based on a free preview [video](https://youtu.be/BE8CVGJuftI) from
    my [Python for Data Visualization course](https://www.linkedin.com/learning/python-for-data-visualization/effectively-present-data-with-python).
    In the last section, we went over a boxplot on a normal distribution, but as you
    obviously won’t always have an underlying normal distribution, let’s go over how
    to utilize a boxplot on a real dataset. To do this, we will utilize the [Breast
    Cancer Wisconsin (Diagnostic) Dataset](https://www.kaggle.com/uciml/breast-cancer-wisconsin-data#data.csv).
    If you don’t have a Kaggle account, you can download the dataset from [my github](https://raw.githubusercontent.com/mGalarnyk/Python_Tutorials/master/Kaggle/BreastCancerWisconsin/data/data.csv).
  prefs: []
  type: TYPE_NORMAL
- en: Read in the data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code below reads the data into a pandas dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Graph Boxplot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A boxplot is used below to analyze the relationship between a categorical feature
    (malignant or benign tumor) and a continuous feature (area_mean).
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple ways to graph a boxplot through Python. You can graph a boxplot
    through seaborn, pandas, or seaborn.
  prefs: []
  type: TYPE_NORMAL
- en: '**seaborn**'
  prefs: []
  type: TYPE_NORMAL
- en: The code below passes the pandas dataframe `df` into seaborn’s `boxplot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a99940d31fbd36c8c56d13b5abe3206e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**matplotlib**'
  prefs: []
  type: TYPE_NORMAL
- en: The boxplots you have seen in this post were made through matplotlib. This approach
    can be far more tedious, but can give you a greater level of control.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/d62c0379fccfc8185ddb90e71a1b3562.png)'
  prefs: []
  type: TYPE_IMG
- en: You can make this a lot prettier with a little bit of work
  prefs: []
  type: TYPE_NORMAL
- en: '**pandas**'
  prefs: []
  type: TYPE_NORMAL
- en: You can plot a boxplot by invoking `.boxplot()` on your DataFrame. The code
    below makes a boxplot of the `area_mean` column with respect to different diagnosis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/fcc94f79b65927e164818a3330f428f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Notched Boxplot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The notched boxplot allows you to evaluate confidence intervals (by default
    95% confidence interval) for the medians of each boxplot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/09cf8854a17d6a05fa8e65de9c304d99.png)'
  prefs: []
  type: TYPE_IMG
- en: Not the prettiest yet.
  prefs: []
  type: TYPE_NORMAL
- en: Interpreting a Boxplot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data science is about communicating results so keep in mind you can always make
    your boxplots a bit prettier with a little bit of work (code [here](https://github.com/mGalarnyk/Python_Tutorials/blob/master/Statistics/boxplot/Box_plot_interpretation.ipynb)).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e0786f7f6c4560be8d441ec508f2687c.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the graph, we can compare the range and distribution of the area_mean
    for malignant and benign diagnosis. We observe that there is a greater variability
    for malignant tumor area_mean as well as larger outliers.
  prefs: []
  type: TYPE_NORMAL
- en: Also, since the notches in the boxplots do not overlap, you can conclude that
    with 95% confidence, that the true medians do differ.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few other things to keep in mind about boxplots:'
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that you can always [pull out the data from the boxplot](https://stackoverflow.com/questions/33518472/getting-data-of-a-boxplot-pandas) in
    case you want to know what the numerical values are for the different parts of
    a boxplot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Matplotlib does **not** estimate a normal distribution first and calculates
    the quartiles from the estimated distribution parameters. The median and the quartiles
    are calculated directly from the data. In other words, your boxplot may look different
    depending on the distribution of your data and the size of the sample, e.g., asymmetric
    and with more or less outliers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hopefully this wasn’t too much information on boxplots. Future tutorials will
    take some this knowledge and go over how to apply it to understanding confidence
    intervals. My next tutorial goes over [How to Use and Create a Z Table (standard
    normal table)](https://towardsdatascience.com/how-to-use-and-create-a-z-table-standard-normal-table-240e21f36e53).
    If you any questions or thoughts on the tutorial, feel free to reach out in the
    comments below, through the [YouTube video page](https://youtu.be/BE8CVGJuftI),
    or through [Twitter](https://twitter.com/GalarnykMichael).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** is
    a Data Scientist and Corporate Trainer. He currently works at Scripps Translational
    Research Institute. You can find him on Twitter (https://twitter.com/GalarnykMichael),
    Medium (https://medium.com/@GalarnykMichael), and GitHub (https://github.com/mGalarnyk).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/understanding-boxplots-5e2df7bcbd51).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[The 4 Quadrants of Data Science Skills and 7 Principles for Creating a Viral
    Data Visualization](/2019/10/4-quadrants-data-science-skills-data-visualization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Build a Data Science Portfolio](/2018/07/build-data-science-portfolio.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Decision Trees for Classification in Python](/2019/08/understanding-decision-trees-classification-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
