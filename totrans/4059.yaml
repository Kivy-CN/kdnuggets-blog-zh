- en: 'Python Basics: Syntax, Data Types, and Control Structures'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/0df4813999f547470284c7df34c49b9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Are you a beginner looking to learn programming with Python? If so, this beginner-friendly
    tutorial is for you to familiarize yourself with the basics of the language.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will introduce you to Python’s—rather English-friendly—syntax.
    You’ll also learn to work with different data types, conditional statements, and
    loops in Python.
  prefs: []
  type: TYPE_NORMAL
- en: If you already have Python installed in your development and environment, start
    a Python REPL and code along. Or if you want to skip the installation—and start
    coding right away—I recommend heading over to [Google Colab](https://colab.google/)
    and coding along.
  prefs: []
  type: TYPE_NORMAL
- en: Hello, Python!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we write the classic “Hello, world!” program in Python, here’s a bit
    about the language. Python is an *interpreted language*. What does this mean?
  prefs: []
  type: TYPE_NORMAL
- en: In any programming language, all source code that you write should be translated
    into machine language. While compiled languages like C and C++ need the entire
    machine code before the program is run, an *interpreter* parses the source code
    and interprets it on the fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Python script, type in the following code, and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To print out *Hello, World!*, we've used the `print()` function, one of the
    many built-in functions in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In this super simple example, notice that "Hello, World!" is a sequence—a string
    of characters. Python strings are delimited by a pair of single or double quotes.
    So to print out any message string, you can use `print("<message_string>")`.
  prefs: []
  type: TYPE_NORMAL
- en: Reading in User Input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now let's go a step further and read in some input from the user using the `input()`
    function. You should always prompt the user to let them know *what* they should
    input.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s a simple program that takes in the user’s name as input and greets them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comments help improve readability of your code by providing additional context
    to the user. Single-line comments in Python start with a #.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that the string in the code snippet below is preceded by an `f`. Such
    strings are called *formatted strings or f-strings*. To replace the value of a
    variable in an f-string, specify name of the variable within a pair of curly braces
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the program, you’ll be prompted for the input first, and then
    the greeting message will be printed out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let's move on to learning about variables and data types in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Variables and Data Types in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables, in any programming language, are like *containers* that store information.
    In the code that we’ve written so far, we’ve already created a variable `user_name`.
    When the user inputs their name (a string), it is stored in the `user_name` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Data Types in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go through the basic data types in Python: `int`, `float`, `str`, and
    `bool`, using simple examples that build on each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Integer** (`int`): Integers are whole numbers without a decimal point. You
    can create integers and assign them to variables like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'These are assignment statements that assign a value to the variable. In languages
    like C, you’ll have to specify the data type when declaring variables, but Python
    is a **dynamically typed language**. It infers data type from the value. So you
    can re-assign a variable to hold a value of a totally different data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the data type of any variable in Python using the `type` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`number` is an integer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We’re now assigning a string value to `number`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Floating-Point Number** (`float`): Floating-point numbers represent real
    numbers with a decimal point. You can create variables of `float` data type like
    so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You can perform various operations—addition, subtraction, floor division, exponentiation,
    and more—on numeric data types. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**String** (`str`): Strings are sequences of characters, enclosed in single
    or double quotes.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Boolean** (`bool`): Booleans represent either `True` or `False`, indicating
    the truth value of a condition.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Python's flexibility in working with different data types allows you to store,
    perform a wide range of operations, and manipulate data effectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example putting together all the data types we’ve learned so far:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Beyond the Basic Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Say you're managing information about students in a classroom. It’d help to
    create a collection—to store info for all students—than to repeatedly define variables
    for each student.
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lists are ordered collections of items—enclosed within a pair of square brackets.
    The items in a list can all be of the same or different data types. Lists are
    *mutable*, meaning you can change their content after creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `student_names` contains the names of students:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Tuples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tuples are ordered collections similar to lists, but they are *immutable*, meaning
    you cannot change their content after creation.
  prefs: []
  type: TYPE_NORMAL
- en: Say you want `student_scores` to be an immutable collection that contains the
    exam scores of students.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dictionaries are collections of key-value pairs. The keys of a dictionary should
    be unique, and they map to corresponding values. They are mutable and allow you
    to associate information with specific keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `student_info` contains information about each student—names and scores—as
    key-value pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: But wait, there’s a more elegant way to create dictionaries in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re about to learn a new concept: **dictionary comprehension**. Don''t worry
    if it''s not clear right away. You can always learn more and work on it later.'
  prefs: []
  type: TYPE_NORMAL
- en: 'But comprehensions are pretty intuitive to understand. If you want the `student_info`
    dictionary to have student names as keys and their corresponding exam scores as
    values, you can create the dictionary like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we’ve used the [`zip()` function](https://www.freecodecamp.org/news/the-zip-function-in-python-explained-with-examples/)
    to iterate through both `student_names` list and `student_scores` tuple simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the dictionary comprehension directly pairs each student name
    from the `student_names` list with the corresponding exam score from the `student_scores`
    tuple to create the `student_info` dictionary with names as keys and scores as
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you’re familiar with the primitive data types and some sequences/iterables,
    let''s move on to the next part of the discussion: **control structures**.'
  prefs: []
  type: TYPE_NORMAL
- en: Control Structures in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run a Python script, the code execution occurs—sequentially—in the
    same order in which they occur in the script.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, you’d need to implement logic to control the flow of execution based
    on certain conditions or loop through an iterable to process the items in it.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll learn how the if-else statements facilitate branching and conditional
    execution. We’ll also learn how to iterate over sequences using loops and the
    loop control statements break and continue.
  prefs: []
  type: TYPE_NORMAL
- en: If Statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you need to execute a block of code only if a particular condition is true,
    you can use the `if` statement. If the condition evaluates to false, the block
    of code is not executed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/49d1d18138bc08a5de338721c2ee7a51.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the code inside the `if` block will be executed only if the
    `score` is greater than or equal to 60\. Since the `score` is 75, the message
    "Congratulations! You passed the exam." will be printed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If-else Conditional Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `if-else` statement allows you to execute one block of code if the condition
    is true, and a different block if the condition is false.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/6bc9a8173d76b970abae3f5f9781951b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build on the test scores example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, if the `score` is less than 60, the code inside the `else` block will
    be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: If-elif-else Ladder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `if-elif-else` statement is used when you have multiple conditions to check.
    It allows you to test multiple conditions and execute the corresponding block
    of code for the first true condition encountered.
  prefs: []
  type: TYPE_NORMAL
- en: If the conditions in the `if` and all `elif` statements evaluate to false, the
    `else` block is executed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/6ce428852aa600f21cd1d49810f58463.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the program checks the `score` against multiple conditions.
    The code inside the first true condition''s block will be executed. Since the
    `score` is 82, we get:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Nested If Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nested `if` statements are used when you need to check multiple conditions within
    another condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In this example, there is a nested `if` statement. First, the program checks
    if `name` is "Alice". If true, it checks the `score`. Since the `score` is 78,
    the inner `else` block is executed, printing "Good effort, Alice! Keep it up."
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Python offers several loop constructs to iterate over collections or perform
    repetitive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: For Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Python, the `for` loop provides a concise syntax to let us iterate over
    existing iterables. We can iterate over `student_names` list like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The above code outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: While Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to execute a piece of code as long as a condition is true, you can
    use a `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the same `student_names` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we have a list `student_names` containing the names of students.
    We use a `while` loop to iterate through the list by keeping track of the `index`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: The loop continues as long as the `index` is less than the length of the list.
    Inside the loop, we print each student's name and increment the `index` to move
    to the next student. Notice the use of `len()` function to get the length of the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'This achieves the same result as using a `for` loop to iterate over the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s use a `while` loop that pops elements from a list until the list is
    empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The list method `pop` removes and returns the last element present in the list.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the `while` loop continues as long as there are elements in
    the `student_names` list. Inside the loop, the `pop()` method is used to remove
    and return the last element from the list, and the name of the current student
    is printed.
  prefs: []
  type: TYPE_NORMAL
- en: The loop continues until all students have been processed, and a final message
    is printed outside the loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `for` loop is generally more concise and easier to read for iterating over
    existing iterables like lists. But the `while` loop can offer more control when
    the looping condition is more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Loop Control Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`break` exits the loop prematurely, and `continue` skips the rest of the current
    iteration and moves to the next one.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The control breaks out of the loop when the `name` is Charlie, giving us the
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Emulating Do-While Loop Behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Python, there is no built-in `do-while` loop like in some other programming
    languages. However, you can achieve the same behavior using a `while` loop with
    a `break` statement. Here''s how you can emulate a `do-while` loop in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the loop will continue running indefinitely until the user
    enters 'exit'. The loop runs at least once because the condition is initially
    set to `True`, and then the user's input is checked inside the loop. If the user
    enters 'exit', the `break` statement is executed, which exits the loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note that this approach is similar to a `do-while` loop in other languages,
    where the loop body is guaranteed to execute at least once before the condition
    is checked.
  prefs: []
  type: TYPE_NORMAL
- en: Wrap-up and Next Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you were able to code along to this tutorial without any difficulty.
    Now that you’ve gained an understanding of the basics of Python, it's time to
    start coding some super simple projects applying all the concepts that you’ve
    learned.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a developer
    and technical writer from India. She likes working at the intersection of math,
    programming, data science, and content creation. Her areas of interest and expertise
    include DevOps, data science, and natural language processing. She enjoys reading,
    writing, coding, and coffee! Currently, she''s working on learning and sharing
    her knowledge with the developer community by authoring tutorials, how-to guides,
    opinion pieces, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Python Control Flow Cheat Sheet](https://www.kdnuggets.com/2022/11/python-control-flow-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python String Matching Without Complex RegEx Syntax](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Data Storage: Exploring Data Types and Normalization in SQL](https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Types of Visualization Frameworks](https://www.kdnuggets.com/types-of-visualization-frameworks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Back to Basics Week 1: Python Programming & Data Science Foundations](https://www.kdnuggets.com/back-to-basics-week-1-python-programming-data-science-foundations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
