- en: 5 Things You Are Doing Wrong in PyCaret
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/11/5-things-doing-wrong-pycaret.html](https://www.kdnuggets.com/2020/11/5-things-doing-wrong-pycaret.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/6fd3bbe1eed3087171efe5233e63e86b.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Ben White](https://unsplash.com/@benwhitephotography?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: PyCaret
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyCaret is an open-source, low-code machine learning library in Python that
    automates machine learning workflows. It is an end-to-end machine learning and
    model management tool that speeds up the machine learning experiment cycle and
    makes you more productive.
  prefs: []
  type: TYPE_NORMAL
- en: In comparison with the other open-source machine learning libraries, PyCaret
    is an alternate low-code library that can be used to replace hundreds of lines
    of code with few words only. This makes experiments exponentially fast and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Official: [https://www.pycaret.org](https://www.pycaret.org/)
  prefs: []
  type: TYPE_NORMAL
- en: Docs: [https://pycaret.readthedocs.io/en/latest/](https://pycaret.readthedocs.io/en/latest/)
  prefs: []
  type: TYPE_NORMAL
- en: Git: [https://www.github.com/pycaret/pycaret](https://www.github.com/pycaret/pycaret)
  prefs: []
  type: TYPE_NORMAL
- en: ???? compare_models does more than what you think
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we had released version 1.0 of PyCaret in Apr 2020, **compare_models **function
    was comparing all the models in the library to return the averaged cross-validated
    performance metrics. Based on which you would use **create_model **to train the
    best performing model and get the trained model output that you can use for predictions.
  prefs: []
  type: TYPE_NORMAL
- en: This behavior was later changed in version 2.0. **compare_models **now returns
    the best model based on the **n_select** parameter which by default is set to
    1 which means that it will return the best model (by default).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/2f64f64a52336071f10bd0aa449bc957.png)'
  prefs: []
  type: TYPE_IMG
- en: compare_models(n_select = 1)
  prefs: []
  type: TYPE_NORMAL
- en: 'By changing the default **n_select **parameter to 3, you can get a list of
    top 3 models. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/1e8aa7356f9bd812c66f347418a27077.png)'
  prefs: []
  type: TYPE_IMG
- en: compare_models(n_select = 3)
  prefs: []
  type: TYPE_NORMAL
- en: 'The returned objects are trained models, you really don’t need to call **create_model **again
    to train them. You can use these models to generate diagnostic plots or to even
    use them for predictions, if you would like. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/561308d029c10707f2b8796d963a5e44.png)'
  prefs: []
  type: TYPE_IMG
- en: predict_model function
  prefs: []
  type: TYPE_NORMAL
- en: ????You think you are limited to scikit-learn models only
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We recieve a lot of requests to include non *scikit-learn* models in the model
    library. Many people don’t realize that you are not limited to the default models
    only. **create_model **function also accepts untrained model object in addition
    to the ID’s of models available in the model library. As long as your object is
    compatible with *scikit-learn* fit/predict API, it will work just fine. For example,
    here we have trained and evaluated ***NGBClassifier*** from [ngboost](https://github.com/stanfordmlgroup/ngboost) library
    by simply importing untrained NGBClassifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f7e2bf067b1dd47cf059ecbc8a29f37f.png)'
  prefs: []
  type: TYPE_IMG
- en: create_model with external models
  prefs: []
  type: TYPE_NORMAL
- en: You can also pass the untrained models in the **include **parameter of the **compare_models **and
    it will just work normally.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/dd119e114d11c91320af98c831c196f2.png)'
  prefs: []
  type: TYPE_IMG
- en: compare_models with untrained object
  prefs: []
  type: TYPE_NORMAL
- en: Notice that include parameters include ID’s for three untrained model from the
    model library i.e. Logistic Regression, Decision Tree and K Neighbors and one
    untrained object from ngboost library. Also, notice that the index represents
    the position of the model entered in the include parameter.
  prefs: []
  type: TYPE_NORMAL
- en: ????You don’t know about the pull( ) function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'All training functions (create_model, tune_model, ensemble_model, etc.) in
    PyCaret displays a score grid but it doesn’t return the score grid. Hence you
    cannot store the score grid in an object like pandas.DataFrame. However, there
    is a function called **pull **that allows you to do that. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/8f33d9987a20793c5236c7ae391a2a72.png)'
  prefs: []
  type: TYPE_IMG
- en: pull function with create_model
  prefs: []
  type: TYPE_NORMAL
- en: This will also work for holdout score grid when you use **predict_model **function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f976d7fe434f039d8400949177f29d1b.png)'
  prefs: []
  type: TYPE_IMG
- en: pull function with predict_model
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you can access metrics as pandas.DataFrame, you can do wonders. For
    example, you can create a loop to train a model with different parameters and
    create a comparison table with this simple code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d4cf0da30cc625e0751b2652c1326950.png)'
  prefs: []
  type: TYPE_IMG
- en: create_model and pull function
  prefs: []
  type: TYPE_NORMAL
- en: ???? You think PyCaret is a black-box, it is not.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another common confusion is that all the preprocessing is happening behind the
    scenes and is not accessible to users. As such, you cannot audit what happens
    when you ran the **setup **function. This is not True.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two functions in PyCaret **get_config **and **set_config **that allows
    you to access and change everything in the background, from your training set
    to the random state of your model. You can check the documentation of **get_config **function
    by simply calling **help(get_config)** to see which variables are accessible to
    you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/0d548afe8b03e65615731b5a1f30fcb3.png)'
  prefs: []
  type: TYPE_IMG
- en: help(get_config)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access the variable by calling it inside the **get_config** function.
    For example to access **X_train** transformed dataset, you will write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/7ed5d7408642944630557ab823afdb22.png)'
  prefs: []
  type: TYPE_IMG
- en: get_config(‘X_train’)
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the **set_config **function to change the environment variables.
    With what you know so far about **pull, get_config,** and **set_config **function,you
    can create some pretty sophisticated workflows. For example, you can resample
    holdout set ***N times*** to evaluate averaged performance metrics instead of
    relying on one holdout set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ????You are not logging your experiments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are not logging your experiments, you should start logging them now.
    Whether you want to use MLFlow backend server or not, you should still log all
    your experiments. When you perform any experiment, you generate a lot of meta
    data which is impossible to keep track of manually.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyCaret’s logging functionality will generate a nice, light-weight, easy to
    understand excel spreadsheet when you use **get_logs** function. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/7f9e5823e3551fa6be2cd756b1b4f324.png)'
  prefs: []
  type: TYPE_IMG
- en: get_logs()
  prefs: []
  type: TYPE_NORMAL
- en: In this very short experiment we have generated over 3,000 meta data points
    (metrics, hyperparameters, runtime, etc.). Imagine how you would have manually
    kept track of these datapoints? Perhaps, it’s not practically possible. Fortunately,
    PyCaret provides a simple way to do it. Simply set **log_experiment** to True
    in the **setup **function**.**
  prefs: []
  type: TYPE_NORMAL
- en: There is no limit to what you can achieve using the lightweight workflow automation
    library in Python. If you find this useful, please do not forget to give us ⭐️
    on our [GitHub repo](https://www.github.com/pycaret/pycaret/).
  prefs: []
  type: TYPE_NORMAL
- en: To hear more about PyCaret follow us on [LinkedIn](https://www.linkedin.com/company/pycaret/) and [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g).
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about all the updates in PyCaret 2.2, please see the [release
    notes](https://github.com/pycaret/pycaret/releases) or read this [announcement](https://towardsdatascience.com/pycaret-2-2-is-here-whats-new-ad7612ca63b).
  prefs: []
  type: TYPE_NORMAL
- en: Important Links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[User Guide](https://www.pycaret.org/guide)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Documentation](https://pycaret.readthedocs.io/en/latest/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Official Tutorials](https://github.com/pycaret/pycaret/tree/master/tutorials)
    [Example Notebooks](https://github.com/pycaret/pycaret/tree/master/examples)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Other Resources](https://github.com/pycaret/pycaret/tree/master/resources)'
  prefs: []
  type: TYPE_NORMAL
- en: Want to learn about a specific module?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click on the links below to see the documentation and working examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[Classification](https://pycaret.readthedocs.io/en/latest/api/classification.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Regression](https://pycaret.readthedocs.io/en/latest/api/regression.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Clustering](https://pycaret.readthedocs.io/en/latest/api/clustering.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://pycaret.readthedocs.io/en/latest/api/anomaly.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://pycaret.readthedocs.io/en/latest/api/nlp.html)
    [Association Rule Mining](https://pycaret.readthedocs.io/en/latest/api/arules.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/5-things-you-are-doing-wrong-in-pycaret-e01981575d2a).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 Things You Don’t Know About PyCaret](/2020/07/5-things-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a Machine Learning Pipeline to the Cloud Using a Docker Container](/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub is the Best AutoML You Will Ever Need](/2020/08/github-best-automl-ever-need.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Phi-2: Small LMs that are Doing Big Things](https://www.kdnuggets.com/phi-2-small-lms-that-are-doing-big-things)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
