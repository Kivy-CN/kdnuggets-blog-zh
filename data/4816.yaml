- en: Basic Image Data Analysis Using Numpy and OpenCV – Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Numpy 和 OpenCV 的基础图像数据分析 – 第一部分
- en: 原文：[https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '![Image data analysis](../Images/127e44de481e6450fcc1ee887c8f133c.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![图像数据分析](../Images/127e44de481e6450fcc1ee887c8f133c.png)'
- en: '**Introduction: A Little Bit About Pixel**'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：关于像素的一点点信息**'
- en: Computer store images as a mosaic of tiny squares. This is like the ancient
    art form of tile mosaic, or the melting bead kits kids play with today. Now, if
    these square tiles are too big, it’s then hard to make smooth edges and curves.
    The more and smaller tiles we use, the smoother or as we say less pixelated, image
    will be. These sometimes gets referred to as resolution of the images.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机将图像存储为微小方块的马赛克。这类似于古老的马赛克艺术形式，或今天孩子们玩耍的熔化珠子套件。如果这些方块瓷砖太大，就很难制作平滑的边缘和曲线。我们使用的方块越多且越小，图像就会越平滑，或者说像素化程度越低。这有时被称为图像的分辨率。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Vector graphics are somewhat different method of storing images that aims to
    avoid pixel related issues. But even vector images, in the end, are displayed
    as a mosaic of pixels. The word pixel means a **picture element**. A simple way
    to describe each pixel is using a combination of three colors, namely **Red, Green,
    Blue**. This is what we call an **RGB** image.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 矢量图形是一种不同的图像存储方法，旨在避免像素相关问题。但即便是矢量图像，最终也是作为像素的马赛克显示。像素这个词意味着**图像元素**。描述每个像素的一种简单方法是使用三种颜色，即**红色、绿色、蓝色**。这就是我们所称的**RGB**图像。
- en: In an RGB image, each pixel is represented by three **8 bit** numbers associated
    to the values for **Red, Green, Blue** respectively. Eventually using a magnifying
    glass, if we zoom a picture, we’ll see the picture is made up of tiny dots of
    little light or more specifically the pixels and what more interesting is to see
    that those tiny dots of little light are actually multiple tiny dots of little
    light of different colors which are nothing but **Red, Green, Blue** channels.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 RGB 图像中，每个像素由三个**8位**数字表示，分别对应**红色、绿色、蓝色**的值。最终，通过放大镜查看，如果我们放大一张图片，我们会看到这张图片由微小的光点组成，或者更具体地说，就是这些像素，而更有趣的是看到这些微小的光点实际上是不同颜色的小光点，这些颜色无非就是**红色、绿色、蓝色**通道。
- en: Pixel together from far away, create an image and upfront they’re just little
    lights that are **ON and OFF**. The combination of those create images and basically
    what we see on screen every single day.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 像素从远处来看，组成一幅图像，而近看它们只是**开和关**的小光点。这些光点的组合创建了图像，基本上就是我们每天在屏幕上看到的。
- en: Every photograph, in digital form, is made up of pixels. They are the smallest
    unit of information that makes up a picture. Usually round or square, they are
    typically arranged in a 2-dimensional grid.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每一张数字照片都由像素组成。它们是构成图像的最小信息单元。通常是圆形或方形，通常排列在二维网格中。
- en: Now, if all three values are at full intensity, that means they’re 255, it then
    shows as white and if all three colors are muted, or has the value of 0, the color
    shows as black. The combination of these three will, in turn, give us a specific
    shade of the pixel color. Since each number is an **8-bit** number, the values
    range from 0-255.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果所有三个值都是最大强度，即255，它们显示为白色；如果所有三个颜色都被抑制，或值为0，颜色则显示为黑色。这三者的组合将产生特定的像素颜色的阴影。由于每个数字是一个**8位**数字，其值范围从0到255。
- en: '![Green RGB values](../Images/5495121edd0709f182bd817a0875f02a.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![绿色RGB值](../Images/5495121edd0709f182bd817a0875f02a.png)'
- en: Combination of these three color will possess tends to the highest value among
    them. Since each value can have 256 different intensity or brightness value, it
    makes **16.8** million total shades.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这三种颜色的组合将趋向于它们之间的最高值。由于每个值可以有256种不同的强度或亮度值，因此总共形成了**1680**万种色调。
- en: Here, we'll observe some following stuffs which is very basic fundamental image
    data analysis with Numpy and some concern Python packages, like `imageio , matplotlib`
    etc.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将观察一些基本的图像数据分析内容，使用Numpy和一些相关的Python包，如`imageio`、`matplotlib`等。
- en: '**Importing images and observe its properties**'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导入图像并观察其属性**'
- en: '**Splitting the layers**'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分离层**'
- en: '**Grey scale**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灰度图**'
- en: '**Using Logical Operator on pixel values**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对像素值使用逻辑运算符**'
- en: '**Masking using Logical Operator**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用逻辑运算符进行掩膜处理**'
- en: '**Satellite Image Data Analysis**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**卫星图像数据分析**'
- en: '**Importing Image**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入图像**'
- en: Now let’s load an image and observe its various properties in general.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们加载一张图像，并观察其各种属性。
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Image figure 1](../Images/e149c127896ae68cfb96020745d71da7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图1](../Images/e149c127896ae68cfb96020745d71da7.png)'
- en: '**Observe Basic Properties of Image**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**观察图像的基本属性**'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The shape of the ndarray is a three layered matrix. The first two numbers here
    are length and width, and the third number (i.e. 3) is for the three layers: **Red,
    Green, Blue**. So, if we calculate the size of a RGB image, the total size will
    be counted as **height x width x 3**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ndarray的形状是一个三层矩阵。这里的前两个数字是长度和宽度，第三个数字（即3）代表三层：**红色、绿色、蓝色**。因此，如果我们计算RGB图像的大小，总大小将被计算为**高度
    x 宽度 x 3**
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: These values are important to verify since the eight-bit color intensity is,
    cannot be outside of the 0 to 255 range.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些值很重要，因为八位色彩强度不能超出0到255的范围。
- en: Now, using the picture assigned variable we can also access any particular pixel
    value of an image and further can access each **RGB** channel separately.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用分配给图片的变量，我们还可以访问图像中的任何特定像素值，并进一步分别访问每个**RGB**通道。
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In these case: R = 109; G = 143 ; B = 46 and we can realize that this particular
    pixel has a lot of GREEN in it. And now we could have also selected one of this
    number specifically by giving the index value of these three channel. Now we know
    for this'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下：R = 109；G = 143；B = 46，我们可以看出这个特定的像素中有很多绿色。现在，我们也可以通过提供这三个通道的索引值来专门选择其中一个。现在我们知道了
- en: '**0**index value for **Red** channel'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**0**索引值对应于**红色**通道'
- en: '**1**index value for **Green** channel'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**1**索引值对应于**绿色**通道'
- en: '**2**index value for **Blue** channel'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**2**索引值对应于**蓝色**通道'
- en: But good to know that in OpenCV, Images takes as not RGB but BGR. **imageio.imread**
    loads image as RGB (or RGBA), but OpenCV assumes the image to be [BGR or BGRA](https://docs.opencv.org/trunk/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce)
    (BGR is the default OpenCV colour format).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但值得注意的是，在OpenCV中，图像采用的是BGR而不是RGB。**imageio.imread**加载图像为RGB（或RGBA），但OpenCV假设图像为[BGR或BGRA](https://docs.opencv.org/trunk/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce)（BGR是OpenCV的默认颜色格式）。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: OK, now let’s take a quick view of each channels in the whole image.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们快速查看整张图像中的每个通道。
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Image figure 2](../Images/c3c792d1b09ae6817ec777205dfe4160.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图2](../Images/c3c792d1b09ae6817ec777205dfe4160.png)'
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Image figure 3](../Images/bb7721ebe0b2d2c41528a9e1373f32c9.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图3](../Images/bb7721ebe0b2d2c41528a9e1373f32c9.png)'
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Image figure 4](../Images/c288831fa64474147057f24bc963d2e5.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图4](../Images/c288831fa64474147057f24bc963d2e5.png)'
- en: Now, here we can also able to change the number of RGB values. As an example,
    let’s set the Red, Green, Blue layer for following Rows values to full intensity.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们还可以更改RGB值的数量。例如，让我们将以下行的红色、绿色、蓝色层设置为完全强度。
- en: 'R channel: Row- 100 to 110'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: R通道：行- 100 到 110
- en: 'G channel: Row- 200 to 210'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: G通道：行- 200 到 210
- en: 'B channel: Row- 300 to 310'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: B通道：行- 300 到 310
- en: We’ll load the image once, so that we can visualize each change simultaneously
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将加载图像一次，以便我们可以同时可视化每个变化。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Image figure 5](../Images/a94e6429f1f8d7934a41a99977a101cf.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图5](../Images/a94e6429f1f8d7934a41a99977a101cf.png)'
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Image figure 6](../Images/fad38515e49e778ae04cfbeb906febf0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图6](../Images/fad38515e49e778ae04cfbeb906febf0.png)'
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Image figure 7](../Images/a4aae040b8720f289720f51659b527e5.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片 图7](../Images/a4aae040b8720f289720f51659b527e5.png)'
- en: To make it more clear let’s change the column section too and this time we’ll
    change the RGB channel simultaneously.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚，我们还会更改列部分，这次我们将同时更改RGB通道。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Image figure 8](../Images/d7b5fa4a32e786a613144bb96f79f818.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图像图例 8](../Images/d7b5fa4a32e786a613144bb96f79f818.png)'
- en: '**Splitting Layers**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**分离层**'
- en: Now, we know that each pixel of the image is represented by three integers.
    Splitting the image into separate color components is just a matter of pulling
    out the correct slice of the image array.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道每个像素由三个整数表示。将图像分成单独的颜色组件只是提取图像数组中正确切片的问题。
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Image figure 9](../Images/368694b99a95b272d3c34e785aa9ba94.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图像图例 9](../Images/368694b99a95b272d3c34e785aa9ba94.png)'
- en: '**Greyscale**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**灰度**'
- en: 'Black and white images are stored in 2-Dimentional arrays. There’re two types
    of Black and White images:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 黑白图像存储在二维数组中。黑白图像有两种类型：
- en: '**Greyscale**: Ranges of shades of grey: **0**~ **255**'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灰度**：灰度范围：**0**~ **255**'
- en: '**Binary**: Pixel are either black or white: **0**or **255**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二值化**：像素要么是黑色，要么是白色：**0** 或 **255**'
- en: 'Now, Greyscaling is such process by which an image is converted from a full
    color to shades of grey. In image processing tools, for example: in OpenCV, many
    functions uses gray scale images before processing and this is done because it
    simplifies the image, acting almost as a noise reduction and increasing processing
    time as there’s less information in the images.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，灰度化是将图像从全色彩转换为灰度阴影的过程。在图像处理工具中，例如：在 OpenCV 中，许多函数在处理之前使用灰度图像，这是因为它简化了图像，几乎起到噪声减少的作用，并且由于图像中的信息较少而增加了处理时间。
- en: There are a couple of ways to do this in python to [convert image to grayscale](https://stackoverflow.com/a/45338831/9215780).
    But a straight forward way using matplotlib is to take the weighted mean of the
    RGB value of original image using [this](https://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale)
    formula.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以在 Python 中 [将图像转换为灰度](https://stackoverflow.com/a/45338831/9215780)。但使用
    matplotlib 的直接方法是使用 [这个](https://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale)
    公式计算原始图像的 RGB 值的加权平均值。
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Image figure 10](../Images/5736a928c4b75d5ed525a79e22bfbb00.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图像图例 10](../Images/5736a928c4b75d5ed525a79e22bfbb00.png)'
- en: However, the [GIMP](https://docs.gimp.org/2.6/en/gimp-tool-desaturate.html)
    converting color to grayscale image software has three algorithms to do the task.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，[GIMP](https://docs.gimp.org/2.6/en/gimp-tool-desaturate.html) 将颜色转换为灰度图像的软件有三种算法来完成这个任务。
- en: '**Lightness** The graylevel will be calculated as'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**明度** 灰度将被计算为'
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Luminosity** The gray level will be calculated as'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**亮度** 灰度将被计算为'
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Average** The gray level will be calculated as'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**平均值** 灰度将被计算为'
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let’s give a try one of their algorithm, what about Luminosity.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下他们的一个算法，比如亮度。
- en: '[PRE17]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here is [the second part](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 [第二部分](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)。
- en: '**Bio: [Mohammed Innat](https://twitter.com/innat_2k14)** is currently a fourth
    year undergraduate student majoring in electronics and communication. He is passionate
    about applying his knowledge of machine learning and data science to areas in
    healthcare and crime forecast where better solutions can be engineered in medical
    sector and security department.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Mohammed Innat](https://twitter.com/innat_2k14)** 目前是电子与通信专业的四年级本科生。他热衷于将自己的机器学习和数据科学知识应用于医疗保健和犯罪预测领域，以便在医疗行业和安全部门工程更好的解决方案。'
- en: '**Related:**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[DIY Deep Learning Projects](https://www.kdnuggets.com/2018/06/diy-deep-learning-projects.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DIY 深度学习项目](https://www.kdnuggets.com/2018/06/diy-deep-learning-projects.html)'
- en: '[Unleash a faster Python on Your Data.](https://www.kdnuggets.com/2018/05/intel-unleash-faster-python.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在您的数据上释放更快的 Python。](https://www.kdnuggets.com/2018/05/intel-unleash-faster-python.html)'
- en: '[Top 20 Python Libraries for Data Science in 2018](https://www.kdnuggets.com/2018/06/top-20-python-libraries-data-science-2018.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2018 年数据科学的 20 大 Python 库](https://www.kdnuggets.com/2018/06/top-20-python-libraries-data-science-2018.html)'
- en: More On This Topic
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[发现计算机视觉的世界：介绍 MLM 的最新…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，6 月 29 日：数据科学的 20 个基本 Linux 命令…](https://www.kdnuggets.com/2022/n26.html)'
- en: '[NumPy for Image Processing](https://www.kdnuggets.com/numpy-for-image-processing)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于图像处理的 NumPy](https://www.kdnuggets.com/numpy-for-image-processing)'
- en: '[A Guide to Train an Image Classification Model Using Tensorflow](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Tensorflow 训练图像分类模型指南](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
- en: '[How I Did Automatic Image Labeling Using Grounding DINO](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我如何使用 Grounding DINO 实现自动图像标注](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
- en: '[It''s alive! Build your first robots with Python and some cheap,…](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[它活过来了！使用 Python 和一些便宜的基础组件构建你的第一个机器人](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
