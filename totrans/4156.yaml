- en: Managing Your Reusable Python Code as a Data Scientist
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作为数据科学家管理可重用的 Python 代码
- en: 原文：[https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)
- en: '![Figure](../Images/5a1e4b21f5d0290742182eb6a088e3ec.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/5a1e4b21f5d0290742182eb6a088e3ec.png)'
- en: Photo by [Chris Ried](https://unsplash.com/@cdr6934?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Chris Ried](https://unsplash.com/@cdr6934?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，出处 [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: There are lots of different approaches to managing your own code, which will
    differ depending on your requirements, personality, technical know-how, role,
    and numerous other factors. While a highly-experienced developer may have an incredibly
    regimented method of organizing their code across multiple languages, projects,
    and use cases, a data analyst that rarely writes their own code may be much more
    *ad hoc* and lackadaisical out of lack of necessity. There really is no right
    or wrong, it's simply a matter of what works — and is appropriate — for you.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 管理自己代码的方法有很多，这些方法会根据你的需求、个性、技术水平、角色和其他许多因素有所不同。虽然一位经验丰富的开发者可能会有一种极其规范的代码组织方法，适用于多种语言、项目和用例，但一位很少编写代码的数据分析师可能会因为没有必要而采用更加*临时*和随意的方法。实际上，没有对错之分，这只是看什么对你来说有效——并且合适。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 支持'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To be specific, what I'm referring to by "managing code" is how you organize,
    store, and recall different pieces of code you, yourself, have written and found
    useful as long-term additions to your programming toolbox. Programming is all
    about automating, and so if, as someone who writes code, you find that you are
    performing similar tasks repetitively, it's only makes sense that you somehow
    automated the recalling of the code associated with that task.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我所说的“管理代码”是指你如何组织、存储和回忆你自己编写并作为长期补充添加到编程工具箱中的不同代码。编程的核心在于自动化，因此，如果你作为代码编写者发现自己重复执行相似任务，那么自动化回忆与该任务相关的代码是很有意义的。
- en: This is why you are already using third-party libraries. No need to re-implement
    a support vector machine code base from scratch every time you want to use it;
    instead, you make use of a library — perhaps Scikit-learn — and take advantage
    of the collective work of numerous folks perfecting some code over time.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你为什么已经在使用第三方库的原因。每次想使用时都不需要从头实现一个支持向量机代码库；相反，你可以利用一个库——比如 Scikit-learn——并利用众多专家对某些代码的不断完善。
- en: Extending this idea to the personal programming sphere only makes sense. You
    may already be doing this (I hope you are), but if not, here are a few approaches
    that I have settled on for managing my own reusable Python code as a data scientist,
    presented from most to least general code use.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将这一思想扩展到个人编程领域也是合情合理的。你可能已经在这样做了（我希望你在做），但如果没有，这里有一些我为管理自己可重用的 Python 代码所确定的方法，按代码使用的从最一般到最具体的顺序呈现。
- en: Full-blown libraries
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完整的库
- en: This is the most general approach there is, and what could be argued is the
    most "professional"; however, this alone does not make it the right choice all
    the time.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种最通用的方法，也可以说是最“专业”的方法；然而，这本身并不意味着它总是最合适的选择。
- en: If you find that you are using the same functionality in numerous use cases,
    and doing so regularly, this is the way to go. This also makes sense if the functionality
    you want to reuse is easily parameterizable; that is, the task can be handled
    over and over again by writing and calling a generalized function with variables
    you can define each time you call.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己在多个使用场景中频繁使用相同的功能，并且经常这样做，那么这就是最佳方法。如果你想重用的功能容易参数化，即可以通过编写并调用一个带有每次调用时可以定义的变量的通用函数来反复处理任务，那么这也很合理。
- en: For example, I often find that I want to find the nth occurrence of some substring
    in a string, and there is no Python standard library function for this. Thus,
    I have a simple piece of code that accepts a string, and substring, and the nth
    occurrence I am looking for as input, and returns the position in the string which
    this nth occurrence begins (lifted long ago from [here](https://stackoverflow.com/questions/1883980/find-the-nth-occurrence-of-substring-in-a-string)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我经常发现需要查找字符串中某个子串的第n次出现，而Python标准库中没有这样的函数。因此，我有一段简单的代码，它接受一个字符串、一个子串和我要查找的第n次出现作为输入，并返回字符串中第n次出现的起始位置（很久以前从[这里](https://stackoverflow.com/questions/1883980/find-the-nth-occurrence-of-substring-in-a-string)借鉴的）。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Since I deal with a lot of text processing, I have collected this with numerous
    other text processing functions I regularly use and created a library that resides
    on my computer as any other Python library would, and am able to import this library
    as any other. The steps for creating the library are somewhat lengthy, though
    straightforward, and so I will not cover them here, but [this article](https://medium.com/analytics-vidhya/how-to-create-a-python-library-7d5aea80cc3f)
    is one of very many that does so well.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我处理大量文本处理工作，我收集了许多我经常使用的文本处理函数，并创建了一个库，就像其他Python库一样存在于我的计算机上，我能够像使用其他库一样导入它。创建库的步骤虽然有点长，但很简单，因此我不会在这里详细说明，但[这篇文章](https://medium.com/analytics-vidhya/how-to-create-a-python-library-7d5aea80cc3f)是众多讲解得很好的文章之一。
- en: So now that I have a `textproc` library, I can import and use my `find_nth`
    function easily, and as often as I like, without having to copy and paste the
    function into each and every program I write that I use it in.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有了一个`textproc`库，我可以轻松地导入并使用我的`find_nth`函数，而且可以随意使用，而不必将函数复制并粘贴到每个使用它的程序中。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Also, if I want to extend the library to add more functions, or change the existing
    `find_nth` code, I can do so in one spot and just re-import.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想扩展库以添加更多功能，或更改现有的`find_nth`代码，我可以在一个地方进行修改，然后重新导入。
- en: Project-specific shared scripts
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 项目特定的共享脚本
- en: Perhaps you don't need a full-blown library, as the code you want to reuse doesn't
    seem to have a use beyond the project you are currently working on, but you do
    need to reuse it within a specific project. In this case, you can place the functions
    together in one script, and simply import that script by name. It's the poor woman's
    library, but it is often just what is needed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你不需要一个全面的库，因为你要重用的代码似乎只在你当前工作的项目中有用，但你确实需要在特定项目中重用它。在这种情况下，你可以将这些函数放在一个脚本中，然后按名称导入该脚本。这是简易版的库，但通常正是所需的。
- en: In my graduate work I had to write a lot of code related to unsupervised learning,
    specifically k-means clustering. I wrote what became functions for initializing
    centroids, computing distances between data points and centroids, recalculating
    centroids, etc., and doing numerous of these tasks using different algorithms.
    I soon found that keeping a separate script with copies of some of these algorithm
    functions was not optimal, and so moved them out into their own scripts to be
    imported. It worked nearly the same way as a library, but the process was path-specific,
    and was meant for this project only.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的研究生工作中，我需要编写大量与无监督学习相关的代码，特别是k均值聚类。我编写了一些函数，用于初始化质心、计算数据点与质心之间的距离、重新计算质心等，并使用不同的算法执行这些任务。我很快发现将这些算法函数的副本保存在单独的脚本中并不是最优的，因此将它们移到自己的脚本中以供导入。它的工作方式几乎与库相同，但过程是特定路径的，仅用于该项目。
- en: Soon I had scripts for different centroid initialization functions and distance
    computation functions, and for data-loading and processing functions as well.
    As this code all became more and more parameterized and generally useful, the
    code eventually made its way into a legitimate library.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'This seems to be how things usually progress, at least in my experience: You
    write a function in your script that you need to use now, and you use it. The
    project expands, or you move on to a similar project, and you realize that same
    function would be handy to have now. So that function gets dropped down to a script
    of its own, and you import it to use. If this usefulness continues beyond the
    near term, and you find that function having more general and longer term use,
    that function now gets added to an existing library, or is the basis for a new
    one.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: However, another specific useful aspect of importing simple scripts is when
    using Jupyter notebooks. Given the ad hoc, exploratory, and experimental nature
    of much of what goes on in Jupyter notebooks, I'm not a fan of importing notebooks
    into other notebooks as modules. If I find that more than one notebook is making
    regular use of some code excerpt, that code goes gets dropped down into a script
    stored in the same folder which then gets imported into the notebook(s). This
    approach makes much more sense to me, and provides more stability by knowing that
    one notebook another notebook relies on is not being edited in a harmful manner.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Task-specific templates
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I find that I often perform some of the same tasks over and over again which
    do not lend well to being parameterized, or are tasks which could be parameterized
    but with more effort than it is worth. In such cases, I employ code templating,
    or boiler-plating. This is much more the copying and pasting of code that I wanted
    to avoid in all cases at the outset of this article, but sometimes it's the right
    choice.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: For example, I often need to "listify," for lack of a better word, the contents
    of a Pandas DataFrame, and while writing a function that could determine the number
    of columns, could accept as input the columns to use, etc., often the output also
    needs to be tweaked, all of which points to writing a function being far too time
    consuming.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I just write up a script template that can easily be changed,
    and keep it handy in a folder of similar templates. Here's an excerpt of `listify_df`,
    which goes from CSV file to Pandas DataFrame, to the desired HTML output.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, clear filenames and folder organization are helpful for managing
    these often useful snippets.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Short one-liners and blocks
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lastly, there are a lot of repetitive snippets you probably type regularly.
    So why do you do that?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: You should be making use of a text expansion tool to insert short "phrases"
    when needed. I use [AutoKey](https://github.com/autokey/autokey) to manage such
    short phrases, which are associated with trigger keywords and then inserted when
    those keywords are typed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, do you import a lot of the same libraries for all of your projects
    of a particular type? I do. For instance, you could set up all of the imports
    you would need for working on a particular task by typing, say, `#nlpimport` which,
    once typed, is recognized as a trigger keyword and is replaced with the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It should be noted that some IDEs have these capabilities. I, myself, generally
    use glorified text editors to code, and so AutoKey is necessary (and incredibly
    useful) in my case. If you have an IDE which takes care of this, great. The point
    is, you shouldn't need to be typing these over and over all the time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: This has been an overview of approaching the management of your reusable Python
    code as a data scientist. I hope that you have found it useful.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Managing Python Dependencies with Poetry vs Conda & Pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Steps for Managing a Data Science Project](https://www.kdnuggets.com/2022/05/4-steps-managing-data-science-project.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Tips for Managing Data Science Teams](https://www.kdnuggets.com/5-tips-for-managing-data-science-teams)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A New Way of Managing Deep Learning Datasets](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Model Drift in Production with MLOps](https://www.kdnuggets.com/2023/05/managing-model-drift-production-mlops.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI in FinTech: Managing the Finance of the Future](https://www.kdnuggets.com/2022/10/ai-fintech-managing-finance-future.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
