["```py\n\nfrom pyspark.sql.functions import udf\n\n```", "```py\n\ndef apply_blob(sentence):\n    temp = TextBlob(sentence).sentiment[0]\n    if temp == 0.0:\n        return 0.0 # Neutral\n    elif temp >= 0.0:\n        return 1.0 # Positive\n    else:\n        return 2.0 # Negative\n\n```", "```py\n\nsentiment = udf(apply_blob)\n\n```", "```py\n\nclean_tweets.withColumn(\"sentiment\", sentiment(clean_tweets['tweet'])).show()\n\n```", "```py\n\n%load_ext autoreload\n%autoreload 2\n\n# Import twint\nimport sys\nsys.path.append(\"twint/\")\n\n# Set up TWINT config\nimport twint\nc = twint.Config()\n\n# Other imports\nimport seaborn as sns\nimport os\nfrom optimus import Optimus\nop = Optimus()\n\n# Solve compatibility issues with notebooks and RunTime errors.\nimport nest_asyncio\nnest_asyncio.apply()\n\n# Disable annoying printing\n\nclass HiddenPrints:\n    def __enter__(self):\n        self._original_stdout = sys.stdout\n        sys.stdout = open(os.devnull, 'w')\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        sys.stdout.close()\n        sys.stdout = self._original_stdout\n\n```", "```py\n\nfrom textblob import TextBlob\nfrom pyspark.sql.functions import udf\nfrom pyspark.sql.types import DoubleType\n\n# Function to get sentiment\ndef apply_blob(sentence):\n    temp = TextBlob(sentence).sentiment[0]\n    if temp == 0.0:\n        return 0.0 # Neutral\n    elif temp >= 0.0:\n        return 1.0 # Positive\n    else:\n        return 2.0 # Negative\n\n# UDF to write sentiment on DF\nsentiment = udf(apply_blob, DoubleType())\n\n# Transform result to pandas\ndef twint_to_pandas(columns):\n    return twint.output.panda.Tweets_df[columns]\n\ndef tweets_sentiment(search, limit=1):\n    c.Search = search\n    # Custom output format\n    c.Format = \"Username: {username} |  Tweet: {tweet}\"\n    c.Limit = limit\n    c.Pandas = True\n    with HiddenPrints():\n        print(twint.run.Search(c))\n\n    # Transform tweets to pandas DF\n    df_pd = twint_to_pandas([\"date\", \"username\", \"tweet\", \"hashtags\", \"nlikes\"])\n\n    # Transform Pandas DF to Optimus/Spark DF\n    df = op.create.data_frame(pdf= df_pd)\n\n    # Clean tweets\n    clean_tweets = df.cols.remove_accents(\"tweet\") \\\n                 .cols.remove_special_chars(\"tweet\")\n\n    # Add sentiment to final DF\n    return clean_tweets.withColumn(\"sentiment\",    sentiment(clean_tweets['tweet']))\n\n```", "```py\ndf_result = tweets_sentiment(\"data science\", limit=1)\n```", "```py\ndf_result.show()\n```", "```py\n\ndf_res_pandas = df_result.toPandas()\nsns.distplot(df_res_pandas['sentiment'])\nsns.set(rc={'figure.figsize':(11.7,8.27)})\n\n```", "```py\n\ndef get_tweets(search, limit=100):\n    c = twint.Config()\n    c.Search = search\n    c.Limit = limit\n    c.Pandas = True\n    c.Pandas_clean = True\n\nwith HiddenPrints():\n        print(twint.run.Search(c))\n    return twint.output.panda.Tweets_df[[\"username\",\"tweet\"]]\n```", "```py\n\ntweets = get_tweets(\"data science\", limit=10000)\n\ntweets.count() # 10003\n```", "```py\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntext = tweets.tweet.values\n\n# adding movie script specific stopwords\nstopwords = set(STOPWORDS)\nstopwords.add(\"https\")\nstopwords.add(\"xa0\")\nstopwords.add(\"xa0'\")\nstopwords.add(\"bitly\")\nstopwords.add(\"bit\")\nstopwords.add(\"ly\")\nstopwords.add(\"twitter\")\nstopwords.add(\"pic\")\n\nwordcloud = WordCloud(\n    background_color = 'black',\n    width = 1000,\n    height = 500,\n    stopwords = stopwords).generate(str(text))\n```", "```py\n\nplt.imshow(wordcloud, interpolation=’bilinear’)\nplt.axis(“off”)\nplt.rcParams[‘figure.figsize’] = [10, 10]\n\n```", "```py\n\ndef generate_word_cloud(tweets):\n\n    # Getting the text out of the tweets\n    text = tweets.tweet.values\n\n    # adding movie script specific stopwords\n    stopwords = set(STOPWORDS)\n    stopwords.add(\"https\")\n    stopwords.add(\"xa0\")\n    stopwords.add(\"xa0'\")\n    stopwords.add(\"bitly\")\n    stopwords.add(\"bit\")\n    stopwords.add(\"ly\")\n    stopwords.add(\"twitter\")\n    stopwords.add(\"pic\")\n\nwordcloud = WordCloud(\n        background_color = 'black',\n        width = 1000,\n        height = 500,\n        stopwords = stopwords).generate(str(text))\n\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.rcParams['figure.figsize'] = [10, 10]\n\n```", "```py\n\ntweets = get_tweets(\"artificial intelligence\", limit=1000)\ngenerate_word_cloud(tweets)\n\n```", "```py\n\npip3 install --upgrade -e git+https://github.com/twintproject/twint.git@origin/master#egg=twint\n\n```", "```py\n\ncd src/twint\n\n```", "```py\n\ntwint -u TDataScience --since 2019-01-01 --o TDS.csv --csv\n\n```", "```py\n\ndf_result = tweets_sentiment(\"data science\", limit=100000)\n\ndf_result.show()\n```", "```py\ndf_results.count()\n```"]