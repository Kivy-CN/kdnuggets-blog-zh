- en: 'Support Vector Machine (SVM) Tutorial: Learning SVMs From Examples'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/08/support-vector-machines-learning-svms-examples.html/2](https://www.kdnuggets.com/2017/08/support-vector-machines-learning-svms-examples.html/2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Non-linearly Separable Data**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have seen how Support Vector Machines systematically handle perfectly/almost
    linearly separable data. How does it handle the cases where the data is absolutely
    not linearly separable? Afterall, a lot of real-world data falls in this category.
    Surely, finding a hyperplane can’t work anymore. This seems unfortunate given
    that SVMs excel at this task.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of non-linearly separable data (this is a variant of the
    famous [XOR dataset](http://www.ece.utep.edu/research/webfuzzy/docs/kk-thesis/kk-thesis-html/node19.html)),
    shown with the linear classifier SVMs find:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1762042cf4625e35939e2393246648ce.png)'
  prefs: []
  type: TYPE_IMG
- en: You’d agree this doesn’t look great. We have only 75% accuracy on the training
    data — the best possible with a line. And more so, the line passes very close
    to some of the data. The best accuracy is not great, and to get even there, the
    line nearly straddles a few points.
  prefs: []
  type: TYPE_NORMAL
- en: We need to do better.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where one of my favorite bits about SVMs come in. Here’s what we have
    so far: we have a technique that is really good at finding hyperplanes. But then
    we also have data that is not linearly separable. So what do we do? Project the
    data into a space where it *is* linearly separable and find a hyperplane in this
    space!'
  prefs: []
  type: TYPE_NORMAL
- en: I’ll illustrate this idea one step at a time.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with the dataset in the above figure, and project it into a three-dimensional
    space where the new coordinates are:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/120a96bf55dc688b8f8d9b92f30b67ee.png)'
  prefs: []
  type: TYPE_IMG
- en: This is what the projected data looks like. Do you see a place where we just
    might be able to slip in a plane?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dd530ca54f0cdf41d7e5c761885a511b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s run our SVM on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c388a96eff09336ed5e0bc472305604b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Bingo! We have perfect label separation! Lets project the plane back to the
    original two-dimensional space and see what the separation boundary looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/67b03248b5a3f5f2eb1e2ef030fca8ab.png)'
  prefs: []
  type: TYPE_IMG
- en: 100% accuracy on the training data *and* a separating boundary that doesn’t
    run too close to the data! Yay!
  prefs: []
  type: TYPE_NORMAL
- en: The shape of the separating boundary in the original space depends on the projection.
    In the projected space, this is *always* a hyperplane.
  prefs: []
  type: TYPE_NORMAL
- en: '*Remember the primary goal of projecting the data was to put the hyperplane-finding
    superpowers of SVMs to use.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: When you map it back to the original space, the separating boundary is not a
    line anymore. This is also true for the margin and support vectors. As far as
    our visual intuition goes, they make sense in the projected space.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at what they look like in the projected space, and then in the original
    space. The 3D margin is the region (not shaded to avoid visual clutter) between
    the planes above and below the separating hyperplane.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2f76478a7f13efda4d2825728d0e4860.png)'
  prefs: []
  type: TYPE_IMG
- en: There are 4 support vectors in the projected space, which seems reasonable.
    They sit on the two planes that identify the margin. In the original space, they
    are still on the margin, but there doesn’t seem to be enough of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s step back and analyze what happened:'
  prefs: []
  type: TYPE_NORMAL
- en: '****1\. How did I know what space to project the data onto?****'
  prefs: []
  type: TYPE_NORMAL
- en: It seems I was being utterly specific — there is a square root of 2 in there
    somewhere!
  prefs: []
  type: TYPE_NORMAL
- en: In this case, I wanted to show how projections to higher dimensions work, so
    I picked a very specific projection. In general, this is hard to know. However,
    what we do know is data is more *likely* to be linearly separable when projected
    onto higher dimensions, thanks to [Cover’s theorem](https://en.wikipedia.org/wiki/Cover%27s_theorem).
  prefs: []
  type: TYPE_NORMAL
- en: In practice, we try out a few high-dimensional projections to see what works.
    In fact, we can project data onto *infinite *dimensions and that often works pretty
    well. This deserves going into some detail and that’s what the next section is
    about.
  prefs: []
  type: TYPE_NORMAL
- en: '****2\. So I project the data first and then run the SVM?****'
  prefs: []
  type: TYPE_NORMAL
- en: No. To make the above example easy to grasp I made it sound like we need to
    project the data first. The fact is you ask the SVM to do the projection for you.
    This has some benefits. For one, SVMs use something called *kernels* to do these
    projections, and these are pretty fast (for reasons we shall soon see).
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember I mentioned projecting to infinite dimensions in the previous
    point? If you project the data yourself, how do you represent or store infinite
    dimensions? It turns out SVMs are very clever about this, courtesy of kernels
    again.
  prefs: []
  type: TYPE_NORMAL
- en: It’s about time we looked at kernels.
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Support Vector Machines: An Intuitive Approach](https://www.kdnuggets.com/2022/08/support-vector-machines-intuitive-approach.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to Support Vector Machines](https://www.kdnuggets.com/2023/07/gentle-introduction-support-vector-machines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Semantic Vector Search Transforms Customer Support Interactions](https://www.kdnuggets.com/how-semantic-vector-search-transforms-customer-support-interactions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Vector Databases and Vector Indexes: Architecting LLM Apps](https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Picking Examples to Understand Machine Learning Model](https://www.kdnuggets.com/2022/11/picking-examples-understand-machine-learning-model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ensemble Learning with Examples](https://www.kdnuggets.com/2022/10/ensemble-learning-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
