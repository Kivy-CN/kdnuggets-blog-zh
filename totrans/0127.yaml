- en: 'GPT-Engineer: Your New AI Coding Assistant'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/07/gpt-engineer-ai-coding-assistant.html](https://www.kdnuggets.com/2023/07/gpt-engineer-ai-coding-assistant.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/6b94e9e2a86562b8155251594d79954d.png)'
  prefs: []
  type: TYPE_IMG
- en: Created by author using Midjourney
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn't it be great to have a coding partner that never tires, works around
    the clock, and can generate an entire codebase from a single project description.
    This is the intent of a new project called **GPT-Engineer**, one of a number of
    emerging AI-powered coders. It's an AI-powered application builder that uses the
    power of GPT to help you build applications. Developed by Anton Osika, GPT-Engineer
    is a game-changer in the world of AI-assisted development. You can check out the
    [GPT-Engineer GitHub repository here](https://github.com/AntonOsika/gpt-engineer)
    to see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: GPT-Engineer is not just another AI tool; it's your coding assistant. Whether
    building a simple application or something more complex, such as a game, GPT-Engineer
    can help. It's like having a junior developer by your side, asking clarifying
    questions to ensure it fully understands your project requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Getting GPT-Engineer Up and Running
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start coding with GPT-Engineer, you'll need to install it. To do
    so, clone the GPT-Engineer repository from [the project's GitHub page](https://github.com/AntonOsika/gpt-engineer).
    Next, create a new environment with a recent version of Python, and install the
    necessary modules. For a step-by-step guide, head over to the [GPT-Engineer GitHub
    page](https://github.com/AntonOsika/gpt-engineer).
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging GPT-4 for Design Documentation Prompts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GPT-Engineer prompting is based on feeding it design documents. But how does
    one draft a useful design document? Why not use GPT-4 to help create them?!?
  prefs: []
  type: TYPE_NORMAL
- en: Let's use GPT-4 to generate detailed project design descriptions, which can
    then be fed into GPT-Engineer. This way, you can ensure that your AI coding buddy
    has all the information it needs to build your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, let''s create a design document with GPT-4 to prompt GPT-Engineer
    with. It really doesn''t take much to get ChatGPT to produce a useful design document
    — though they **can** be more complex, as you will see below. Here is our prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: I want to implement a game of snake in Python, using the game's classic rules
    and gameplay. It can use external libraries to accomplish this. Generate a design
    document for this project.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here are the first several lines of the generated design document, which I can
    assure you, in total, does a good job of outlining what needs to be done.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The purpose of this design document is to outline the implementation details
    for creating a classic Snake game in Python. The game will adhere to the traditional
    rules and gameplay, where the player controls a snake that grows in length by
    eating food while avoiding collisions with itself and the game boundaries. The
    game will be developed using external libraries to facilitate graphics and user
    input.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Game Components
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The Snake game will consist of the following components:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'a) Snake: A movable object that grows in length when it eats food and loses
    the game if it collides with itself or the game boundaries.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'b) Food: A randomly placed object that the snake can eat to increase its length
    and score.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now that we have a design document prompt, we can use it with GPT-Engineer.
  prefs: []
  type: TYPE_NORMAL
- en: Building a Design Document with ChatGPT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the great things about GPT-Engineer is its versatility. It can implement
    a simple snake game, just as it can help you build a wide range of applications,
    including a simple key-value database using only Python's standard library modules.
    Just describe the project in the `main.prompt` file, and GPT-Engineer will ask
    you for any necessary clarifications. Once you've provided the details, sit back
    and watch as GPT-Engineer generates your codebase.
  prefs: []
  type: TYPE_NORMAL
- en: First, let's generate a design document with ChatGPT-4\. Remember, you don't
    need to use ChatGPT to accomplish this. If you have a detailed description of
    the software you are looking to build you are able to use it. But for a comprehensive
    conversion of your design notes to something that is easily ingestible by GPT-Engineer,
    this is a logical route to take.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the prompt the author used with ChatGPT-4 to generate a design document:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a high quality design document that can be used by our project team
    to design the software described below. It should be complete and usable as the
    sole design documentation to get our team to complete our project.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '---'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Simple key-value database engine written in Python using only standard library
    modules (except those mentioned below).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The basic interaction with the database engine when it is running should be
    via imported Python module with a clear and concise library API.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There should also be a separate console that can be run to act as a command
    line REPL for interacting with the database engine and databases.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Additional methods of interaction should include an API created with Fast API
    (external library).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Design specifications:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A key-value database is a type of NoSQL database that stores data as a collection
    of key-value pairs. Unlike traditional relational databases, key-value databases
    do not enforce a rigid schema, providing flexibility and scalability for certain
    use cases. Designing a key-value database involves considering several important
    specifications.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Commands that should be accessible:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- connect to database'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- delete database'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- get key'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- insert data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- update data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- delete data'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- search for existence of both keys and values'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Data Model: Each record consists of a unique key and an associated value. The
    value can be a simple scalar value or a complex data structure (such as JSON or
    XML).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Key Structure: The key serves as the primary identifier for each data entry
    and must be unique within the database. Keys can be alphanumeric strings, integers,
    or even composite keys (multiple values combined to form a single key).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Value Structure: The value associated with each key can be of any data type.
    It can range from basic data types (strings, numbers, booleans) to more complex
    structures like nested objects or arrays.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Performance and Caching: In-memory caching techniques should be employed to
    speed up read operations and reduce latency.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'And here is the design document that ChatGPT-4 produced:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
- en: The main goal of this project is to design and develop a lightweight key-value
    database engine written in Python, using only standard library modules, and FastAPI
    for the HTTP interface. The application will provide the essential features of
    a key-value database, including connecting to the database, data insertion, update,
    deletion, and retrieval, along with search functionality for keys and values.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The database will be interfaced via three methods:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. A Python module that can be imported by other Python programs.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2\. A command line REPL console for manual interaction.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. An API created with FastAPI for remote interactions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The database engine will have the following main components:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '1\. **Data Store**: The actual storage for the key-value pairs. As a simple
    Python implementation, this could be a dictionary where keys are unique identifiers
    and values can be of any datatype. The data store should have efficient methods
    for accessing, adding, updating, and deleting data.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '2\. **Database Engine**: The engine that provides the methods to interact with
    the data store. This will include methods to connect to a database, insert, update,
    and delete data, as well as fetch a value by key. It should also include a method
    to check the existence of a particular key or value in the data store.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '3\. **In-Memory Cache**: A cache layer that holds frequently accessed data
    to improve read speed and reduce latency. This can be implemented using Python''s
    `functools.lru_cache` decorator or a custom caching solution.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '4\. **CLI**: A command-line interface for manual interaction with the database
    engine. This would use the `cmd` or `argparse` module from the Python standard
    library to create a REPL interface.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '5\. **HTTP API**: A FastAPI application that exposes the database engine methods
    as a HTTP API. This will allow remote interaction with the database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data Model
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
- en: The database engine will follow a simple key-value data model. Each record in
    the database will consist of a unique key and an associated value.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Key Structure
  prefs:
  - PREF_BQ
  - PREF_H3
  type: TYPE_NORMAL
- en: Keys can be alphanumeric strings, integers, or composite keys. They must be
    unique within the database and will serve as the primary identifier for each data
    entry.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Value Structure
  prefs:
  - PREF_BQ
  - PREF_H3
  type: TYPE_NORMAL
- en: The value associated with each key can be of any Python data type. It can range
    from basic data types (strings, numbers, booleans) to more complex structures
    like nested objects or arrays.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: API Design
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Python library API, CLI, and FastAPI should provide the following functions:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `connect(database_name: str)`: Connect to a database. Creates the database
    if it does not exist.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `delete_database(database_name: str)`: Deletes a database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `insert(key: str, value: Any)`: Inserts a new key-value pair into the database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `update(key: str, value: Any)`: Updates the value of an existing key.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `delete(key: str)`: Deletes a key-value pair from the database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `get(key: str)`: Fetches the value of a key from the database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `exists_key(key: str)`: Checks if a key exists in the database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '- `exists_value(value: Any)`: Checks if a value exists in the database.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Performance and Caching
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
- en: In-memory caching techniques will be employed to speed up read operations and
    reduce latency. The `functools.lru_cache` decorator or a custom caching solution
    could be used for this purpose. The cache should have a maximum size to prevent
    excessive memory usage.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
- en: This document provides a high-level design for a simple key-value database engine
    using Python and FastAPI. By adhering to this design, we can ensure that the database
    will be flexible and scalable, meeting the needs of various applications.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And that's it. The only thing left to do was run GPT-Engineer and direct it
    to these criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So what now? How do we fix the issues that were present in the generated code?
    Well, recently and up to a few days ago, the author was using GPT-Engineer in
    conjunction with Aider, another capable GPT-backed software generating project
    to try and tweak the results. However, with the recent public availability of
    the ChatGPT Code Generator plugin, it seems that trying it out for both generating
    and fixing code would be a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: In sum it up, GPT-Engineer is more than just a tool, it's a potential revolution
    in how we build applications. It's a testament to the power of AI, LLMs, and perhaps
    a glimpse into the future of coding. Regardless of whether you are an experienced
    developer or just starting out, GPT-Engineer is definitely worth a look.
  prefs: []
  type: TYPE_NORMAL
- en: Happy ~~coding~~ prompting!
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[StarCoder: The Coding Assistant That You Always Wanted](https://www.kdnuggets.com/2023/05/starcoder-coding-assistant-always-wanted.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unveiling StableCode: A New Horizon in AI-Assisted Coding](https://www.kdnuggets.com/2023/08/unveiling-stablecode-new-horizon-ai-assisted-coding)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Forget ChatGPT, This New AI Assistant Is Leagues Ahead and Will…](https://www.kdnuggets.com/2023/08/forget-chatgpt-new-ai-assistant-leagues-ahead-change-way-work-forever.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Enhance Your Python Coding Style with Ruff](https://www.kdnuggets.com/enhance-your-python-coding-style-with-ruff)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Answer Data Science Coding Interview Questions](https://www.kdnuggets.com/2022/01/answer-data-science-coding-interview-questions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
