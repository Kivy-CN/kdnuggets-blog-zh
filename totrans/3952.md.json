["```py\n# Define matrices\nA = np.array([[1, 2], [3, 4]])\nB = np.array([[5, 6], [7, 8]])\n# Matrix multiplication\nC = np.dot(A, B)\nprint(\"Matrix Multiplication:\\n\", C)\n\n# Output:\n# [[19 22]\n# [43 50]] \n```", "```py\n# Define a square matrix\nA = np.array([[1, 2], [3, 4]])\n# Matrix inversion\nA_inv = np.linalg.inv(A)\nprint(\"Matrix Inversion:\\n\", A_inv)\n\n# Output:\n# [[-2\\.   1.]\n# [ 1.5 -0.5]] \n```", "```py\n# Define a square matrix\nA = np.array([[1, 2], [3, 4]])\n# Compute the determinant\ndet_A = np.linalg.det(A)\nprint(\"Determinant of the Matrix:\", det_A)\n\n# Output: -2.0000000000000004 \n```", "```py\n# Define a square matrix\nA = np.array([[1, 2], [3, 4]])\n# Compute the trace of the matrix\ntrace_A = np.trace(A)\nprint(\"Trace of the Matrix:\", trace_A)\n\n# Output: 5 \n```", "```py\n# Define a matrix\nA = np.array([[1, 2, 3], [4, 5, 6]])\n\n# Compute the transpose of the matrix\nA_T = np.transpose(A)\nprint(\"Transpose of the Matrix:\\n\", A_T)\n\n# Output:\n# [[1 4]\n# [2 5]\n# [3 6]] \n```", "```py\n# Define a square matrix\nA = np.array([[1, 2], [3, 4]])\n# Compute eigenvalues and eigenvectors\neigenvalues, eigenvectors = np.linalg.eig(A)\nprint(\"Eigenvalues:\", eigenvalues)\nprint(\"Eigenvectors:\\n\", eigenvectors)\n\n# Output:\n# Eigenvalues: [-0.37228132  5.37228132]\n# Eigenvectors:\n# [[-0.82456484 -0.41597356]\n# [ 0.56576746 -0.90937671]] \n```", "```py\nimport numpy as np\nfrom scipy.linalg import lu\n\n# Define a matrix\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# LU Decomposition\nP, L, U = lu(A)\n# Display results\nprint(\"LU Decomposition:\")\nprint(\"P matrix:\\n\", P)\nprint(\"L matrix:\\n\", L)\nprint(\"U matrix:\\n\", U)\n\n# Output\n# LU Decomposition:\n# P matrix:\n# [[0\\. 1\\. 0.]\n#  [0\\. 0\\. 1.]\n#  [1\\. 0\\. 0.]]\n# L matrix:\n# [[ 1\\.          0\\.          0\\.        ]\n#  [ 0.33333333  1\\.          0\\.        ]\n#  [ 0.66666667 -0.5         1\\.        ]]\n# U matrix:\n# [[ 7\\.          8\\.          9\\.        ]\n#  [ 0\\.          0.33333333  0.66666667]\n#  [ 0\\.          0\\.          0\\.        ]] \n```", "```py\nimport numpy as np\nfrom scipy.linalg import qr\n# Define a matrix\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# QR Decomposition\nQ, R = qr(A)\n# Display results\nprint(\"QR Decomposition:\")\nprint(\"Q matrix:\\n\", Q)\nprint(\"R matrix:\\n\", R)\n\n# Output\n# QR Decomposition:\n# Q matrix:\n# [[-0.26726124 -0.78583024  0.55708601]\n#  [-0.53452248 -0.08675134 -0.83125484]\n#  [-0.80178373  0.6172134   0.08122978]]\n# R matrix:\n# [[-7.41619849 -8.48528137 -9.55445709]\n#  [ 0\\.         -0.90453403 -1.80906806]\n#  [ 0\\.          0\\.          0\\.        ]] \n```", "```py\nimport numpy as np\nfrom scipy.linalg import svd\n# Define a matrix\nA = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n# Singular Value Decomposition\nU, s, Vh = svd(A)\n# Display results\nprint(\"SVD Decomposition:\")\nprint(\"U matrix:\\n\", U)\nprint(\"Singular values:\\n\", s)\nprint(\"Vh matrix:\\n\", Vh)\n\n# Output\n# SVD Decomposition:\n# U matrix:\n# [[-0.21483724  0.88723069  0.40824829]\n#  [-0.52058739  0.24964395 -0.61237224]\n#  [-0.82633755 -0.38794279  0.61237224]]\n# Singular values:\n# [16.84810335  1.06836951  0\\.        ]\n# Vh matrix:\n# [[-0.47967118 -0.57236779 -0.66506439]\n#  [ 0.77669099  0.07568647 -0.62531812]\n#  [-0.40824829  0.81649658 -0.40824829]] \n```", "```py\n# Define matrix A and vector B\nA = np.array([[3, 1], [1, 2]])\nB = np.array([9, 8])\n# Solve the system of linear equations Ax = B\nx = np.linalg.solve(A, B)\nprint(\"Solution to Ax = B:\", x)\n\n# Output: [2\\. 3.] \n```", "```py\n# Define matrix A and vector B\nA = np.array([[1, 1], [1, 2], [1, 3]])\nB = np.array([1, 2, 2])\n# Solve the linear least-squares problem\nx, residuals, rank, s = np.linalg.lstsq(A, B, rcond=None)\nprint(\"Least Squares Solution:\", x)\nprint(\"Residuals:\", residuals)\nprint(\"Rank of the matrix:\", rank)\nprint(\"Singular values:\", s)\n\n# Output:\n# Least Squares Solution: [0.66666667 0.5]\n# Residuals: [0.33333333]\n# Rank of the matrix: 2\n# Singular values: [4.07914333 0.60049122] \n```", "```py\n# Define a matrix\nA = np.array([[1, 2], [3, 4]])\n# Compute various norms\nfrobenius_norm = np.linalg.norm(A, 'fro')\none_norm = np.linalg.norm(A, 1)\ninfinity_norm = np.linalg.norm(A, np.inf)\nprint(\"Frobenius Norm:\", frobenius_norm)\nprint(\"1-Norm:\", one_norm)\nprint(\"Infinity Norm:\", infinity_norm)\n\n# Output:\n# Frobenius Norm: 5.477225575051661\n# 1-Norm: 6.0\n# Infinity Norm: 7.0 \n```", "```py\n# Define a matrix\nA = np.array([[1, 2], [3, 4]])\n# Compute the condition number of the matrix\ncondition_number = np.linalg.cond(A)\nprint(\"Condition Number:\", condition_number)\n\n# Output: 14.933034373659268 \n```", "```py\n# Define a matrix\nA = np.array([[1, 2], [3, 4]])\n# Compute the rank of the matrix\nrank_A = np.linalg.matrix_rank(A)\nprint(\"Matrix Rank:\", rank_A)\n\n# Output: 2 \n```"]