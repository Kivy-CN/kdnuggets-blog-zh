- en: Data Scientist’s Guide to Efficient Coding in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家高效编码指南
- en: 原文：[https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html](https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html](https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[comments](#comments)'
- en: '**By [Dr. Varshita Sher](https://varshitasher.medium.com/), Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由[Dr. Varshita Sher](https://varshitasher.medium.com/)，数据科学家**'
- en: In this article, I wanted to share a few tips for writing cleaner codes that
    I have absorbed in the last year — mainly from pair programming. Generally speaking,
    including them as part of my everyday coding routine has helped me generate supreme
    quality Python scripts, that are easily maintainable and scalable over time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我想分享一些我在过去一年中吸收的编写更干净代码的技巧——主要是通过配对编程。一般来说，将这些技巧纳入我的日常编码例程中，帮助我生成高质量的Python脚本，这些脚本随着时间的推移容易维护和扩展。
- en: Ever thought why **senior developer’s code look so much better in comparison
    to a junior developer**. Read on to bridge the gap….
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 是否曾经想过**高级开发人员的代码为何比初级开发人员的代码好得多**？继续阅读以弥合差距……
- en: Rather than giving generic examples on how to use these techniques, I will be
    giving real-life coding scenarios where I have *actually* used them! Here is the [Jupyter
    Colab Notebook](https://colab.research.google.com/drive/1gSIJd_HY88A_bq-Z0zMMzFYb1hjRI8DO?usp=sharing) if
    you’d like to follow along!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 与其给出如何使用这些技巧的通用示例，不如提供我*实际*使用这些技巧的真实编码场景！如果你想跟着一起操作，这里是[Jupyter Colab Notebook](https://colab.research.google.com/drive/1gSIJd_HY88A_bq-Z0zMMzFYb1hjRI8DO?usp=sharing)。
- en: 1\. Use `tqdm` when working with `for `loops.
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 在使用`for`循环时使用`tqdm`。
- en: Imagine looping over a *large* iterable (list, dictionary, tuple, set), and
    not knowing whether the code has finished running! *Bummer*, *right*! In such
    scenarios make sure to use `tqdm` construct to display a progress bar alongside.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下遍历一个*大型*可迭代对象（列表、字典、元组、集合），却不知道代码是否已经运行完！*真糟糕*，*对吧*！在这种情况下，确保使用`tqdm`构造来显示进度条。
- en: 'For instance, to display the progress as I read through all the files present
    in 44 different directories (whose paths I have already stored in a list called `fpaths`):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了在读取44个不同目录中的所有文件时显示进度（这些目录的路径已经存储在名为`fpaths`的列表中）：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/9bcd861ff49e3bd8b0e25a728332679a.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9bcd861ff49e3bd8b0e25a728332679a.png)'
- en: Using tqdm with “for“ loop
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`tqdm`与“for”循环
- en: '*Note: Use the *`*desc*`* argument to specify a small description for the loop.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：使用`*desc*`参数为循环指定一个简短的描述。*'
- en: 2\. Use `type hinting when writing functions.`
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 在编写函数时使用`type hinting`。
- en: In simple terms, it means explicitly stating the type of all the arguments in
    your Python function definition.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这意味着在你的Python函数定义中明确声明所有参数的类型。
- en: I wish there were specific use cases I could provide to emphasize *when* I use
    type hinting for my work, but the truth is, I use them more often than not.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望能够提供一些具体的用例来强调*何时*我使用类型提示，但事实是，我使用它们的频率远高于不使用。
- en: Here’s a hypothetical example of a function `update_df()`. It updates a given
    data frame by appending a row containing useful information from a simulation
    run — such as classifier used, accuracy scored, train-test split size, and additional
    remarks for that particular run.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个假设的函数示例`update_df()`。它通过追加一行包含模拟运行中有用信息的数据来更新给定的数据框——例如使用的分类器、准确度评分、训练-测试分割大小，以及该特定运行的附加备注。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/930d1b32e90748482182847e086597d5.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/930d1b32e90748482182847e086597d5.png)'
- en: 'Few things to note:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项：
- en: The datatype following the `->` symbol in the function definition (`def update_df(.......) **->** pd.DataFrame`)
    indicates the type of the value returned by the functions, i.e. a Pandas’s dataframe
    in this case.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数定义中的`->`符号后面的数据类型（例如`def update_df(.......) **->** pd.DataFrame`）指示函数返回值的类型，即在这种情况下为Pandas的数据框。
- en: 'The default value, if any, can be specified as usual in the form `param:type
    = value` . (For example: `split: float = 0.5`)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '默认值（如果有的话）可以像往常一样以`param:type = value`的形式指定。（例如：`split: float = 0.5`）'
- en: 'In case a function does not return anything, feel free to use `None`. For example
    : `def func(a: str, b: int) -> None: print(a,b)`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果函数没有返回任何内容，可以使用`None`。例如：`def func(a: str, b: int) -> None: print(a,b)`'
- en: 'To return values of mixed types, for example, say a function could either print
    a statement if a flag `option`was set OR return an `int`if the flag was not set:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要返回混合类型的值，例如，一个函数可以在设置了`option`标志时打印语句，或者在标志未设置时返回一个`int`：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Note: As of Python 3.10, *`*Union*`* is not required, so you can simply do:*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：从 Python 3.10 开始，*`*Union*`* 已不再必需，因此你可以简单地使用：*'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can go as specific as you’d like while defining the types of parameters,
    as we have done for `remarks: List[str]`. Not only do we specify it should be
    a `List`, but it should be a list of `str` only.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在定义参数类型时，你可以尽可能具体，就像我们对 `remarks: List[str]` 的定义一样。我们不仅指定它应该是一个 `List`，而且应该是一个只包含
    `str` 的列表。'
- en: For fun, try passing a list of integers to `remarks`while calling the function.
    You’ll see no error returned! *Why is that? *Because Python interpreter doesn’t
    enforce any type checking based on your type-hints.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了趣味，尝试在调用函数时将一个整数列表传递给 `remarks`。你会发现没有错误返回！ *这是为什么呢？* 因为 Python 解释器不会根据类型提示强制执行任何类型检查。
- en: '[Type-hints have no impact on your code other than adding documentation](https://www.pythonlikeyoumeanit.com/Module5_OddsAndEnds/Writing_Good_Code.html#What-is-It-Good-For?-(Absolutely-Nothing)).'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[类型提示对代码的影响仅在于增加文档](https://www.pythonlikeyoumeanit.com/Module5_OddsAndEnds/Writing_Good_Code.html#What-is-It-Good-For?-(Absolutely-Nothing)).'
- en: It’s still good practice, though, to include it! I feel it lends more clarity
    to oneself when writing a function. In addition, when someone makes a call to
    such a function, they get to see nice prompts for the arguments it would take
    as inputs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，包含它仍然是一个好习惯！我觉得这能在编写函数时让自己更清楚。此外，当有人调用这样的函数时，他们可以看到该函数需要哪些参数的友好提示。
- en: '![](../Images/9f1d83d3b0fc37b952d7bfb93d64ea76.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f1d83d3b0fc37b952d7bfb93d64ea76.png)'
- en: Prompts when calling a function with type hinting
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 带有类型提示的函数调用提示
- en: '3\. Use args and kwargs for functions with unknown # of arguments`.`'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用 args 和 kwargs 处理具有不确定参数数量的函数`。`
- en: 'Imagine this: you want to write a function that takes as input *some* directory
    paths and prints the number of files within each. The problem is, we do not know *how* many
    paths the user would input! Could be 2 could be 20! So we are unsure how many
    parameters should we define in our function definition. Clearly, writing a function
    like `def count_files(file1, file2, file3, …..file20)`would be silly. In such
    cases, `args` and (sometimes `kwargs`) come handy!'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下：你想编写一个函数，该函数接收 *一些* 目录路径作为输入，并打印每个目录中的文件数量。问题是，我们不知道用户会输入 *多少* 个路径！可能是
    2 也可能是 20！所以我们不确定在函数定义中应定义多少个参数。显然，编写一个像 `def count_files(file1, file2, file3,
    …..file20)` 这样的函数会很愚蠢。在这种情况下，`args` 和（有时 `kwargs`）就非常有用！
- en: '**Args** is used for specifying an unknown number of **positional** arguments.'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Args** 用于指定不确定数量的 **位置** 参数。'
- en: '**Kwargs** is used for specifying an unknown number of **keyword** arguments.'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Kwargs** 用于指定不确定数量的 **关键字** 参数。'
- en: Args
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Args
- en: Here’s an example of a function `count_files_in_dir()`that takes in `project_root_dir` and
    an arbitrary number of folder paths within it (using `*fpaths` in the function
    definition). As an output, it prints the number of files within each of these
    folders.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个函数 `count_files_in_dir()` 的示例，它接收 `project_root_dir` 和其中任意数量的文件夹路径（在函数定义中使用
    `*fpaths`）。作为输出，它打印每个文件夹中的文件数量。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/8e8c20d0e9910db055928a7971a3ff0a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e8c20d0e9910db055928a7971a3ff0a.png)'
- en: 'Counting the # of files in Google Colab directories'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 Google Colab 目录中文件的数量
- en: In the function call, we pass in 5 arguments. As the function definition expects
    one *required* positional arguments i.e. `project_root_dir`, it automatically
    knows `"../usr"` must be it. All the remaining arguments (four in this case) are
    “soaked up” by `*fpaths`and are used for counting the files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数调用中，我们传入了 5 个参数。由于函数定义期望一个 *必需* 的位置参数，即 `project_root_dir`，因此它自动知道 `"../usr"`
    必须是这个参数。所有其余的参数（在这种情况下是四个）都被 `*fpaths` “吸收”，用于计算文件数量。
- en: '*Note: The proper terminology for this soaking up technique is “argument packing”
    i.e. remaining arguments are packed into *`**fpaths*`*.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：这种“吸收”技术的正确术语是“参数打包”，即剩余的参数被打包到*`**fpaths*`*中。*'
- en: Kwargs
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kwargs
- en: 'Let’s look at functions that must take an unknown number of *keyword* arguments.
    In such scenarios, we must use `kwargs` instead of `args`. Here’s a short (useless)
    example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看那些必须接收不确定数量的 *关键字* 参数的函数。在这种情况下，我们必须使用 `kwargs` 而不是 `args`。这里有一个简短（无用）的示例：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/25cd205f9fd4647a869c6dfc99d2f52b.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25cd205f9fd4647a869c6dfc99d2f52b.png)'
- en: The usage is quite similar to `*args` but now we are able to pass an arbitrary
    number of *keyword* arguments to a function. These arguments get stored as key-value
    pairs in `**results`dictionary. From hereon, it is easy to access the items within
    this dictionary using `.items()`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 用法与`*args`非常相似，但现在我们可以将任意数量的*关键字*参数传递给函数。这些参数作为键值对存储在`**results`字典中。从此以后，可以使用`.items()`轻松访问该字典中的项目。
- en: 'I have found two main applications for `kwargs` in my work:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我在工作中发现了`kwargs`的两个主要应用：
- en: merging dictionaries (*useful but less interesting*)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并字典（*有用但不太有趣*）
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: extending an existing method (*more interesting*)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展现有方法（*更有趣*）
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Note: Checkout *[*matplotlib’s plot function using *](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`[*kwargs*](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`* to
    specify optional embellishments for a plot such as linewidth and label.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：查看*[*matplotlib的绘图函数使用*](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`[*kwargs*](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`*来指定绘图的可选装饰，如线宽和标签。*'
- en: 'Here’s a real practical use-case for extending methods using `**kwargs` from
    one of my recent projects:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我最近一个项目中使用`**kwargs`扩展方法的一个实际用例：
- en: We often use Sklearn’s `train_test_split()` for splitting `X` and `y`. While
    working on one of the GANs projects, I had to split the generated synthetic images
    into the *same* train-test split that is used for splitting real images and their
    respective labels. In addition, I also wanted to be able to pass any other arguments
    that one would normally pass to the `train_test_split()`. Finally, `stratify` must
    always be passed because I was working on a face recognition problem (and wanted
    all labels to be present in both train and test set).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常使用Sklearn的`train_test_split()`来拆分`X`和`y`。在处理一个GAN项目时，我需要将生成的合成图像拆分成与拆分真实图像及其相应标签相同的训练集和测试集。此外，我还希望能够传递通常传递给`train_test_split()`的任何其他参数。最后，由于我在处理人脸识别问题（并且希望所有标签都出现在训练集和测试集中），因此`stratify`必须始终传递。
- en: To achieve this, we created a function called `custom_train_test_split()`. I’ve
    included a bunch of print statements to show what exactly is happening under the
    hood (and omitted some snippets for brevity).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们创建了一个名为`custom_train_test_split()`的函数。我包含了一些打印语句以展示底层发生的具体情况（为了简洁，省略了一些片段）。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Note: While calling this function, instead of using the actual image vectors
    and labels (see figure below), I have replaced them with dummy data for ease of
    understanding. The code, however, should work for real images as well!*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：在调用此函数时，为了便于理解，我用虚拟数据替代了实际的图像向量和标签（见下图）。不过，这段代码也适用于真实图像！*'
- en: '![](../Images/5c62be74580ff4d94753b0667954be87.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c62be74580ff4d94753b0667954be87.png)'
- en: Figure A Calling a function with kwargs in function definition
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A 在函数定义中调用带有kwargs的函数
- en: 'Bunch of things to note:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的几点：
- en: All the *keyword* arguments (**except **`stratify`), used in the function call
    statement (such as `train_size` and `random_state`) will be stored as a key-value
    pair in the `**split_args` dictionary. (To verify, check out the output in Blue.)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的*关键字*参数（**除了**`stratify`），在函数调用语句中使用（如`train_size`和`random_state`），将作为键值对存储在`**split_args`字典中。（要验证，请查看蓝色输出。）
- en: Why not `stratify`, you might ask? This is because according to the function
    definition, it is a *required *keyword-onlyargument and not an *optional* one.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会问，为什么不使用`stratify`？这是因为根据函数定义，它是一个*必需*的关键字参数，而不是*可选*的。
- en: All the *non-keyword *(i.e. positional)arguments passed in the function call
    (such as `"SVM"`, `labels`, etc.) would be stored in the first three parameters
    in function definition i.e.`clf`, `y` and `*X`, (and yes the order in which they
    are passed matters). However, we have *four* arguments in function call i.e. `"SVM"`, `labels`, `ims` ,
    and `synthetic_ims`. *Where do we store the fourth one?*
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的*非关键字*（即位置）参数（如`"SVM"`、`labels`等）会存储在函数定义中的前三个参数中，即`clf`、`y`和`*X`（是的，传递的顺序很重要）。然而，我们在函数调用中有*四个*参数，即`"SVM"`、`labels`、`ims`和`synthetic_ims`。*我们将第四个参数存储在哪里？*
- en: Remember that we used `*X` as the third parameter in the function definition,
    hence all arguments passed to the function after the first two arguments are *packed *(soaked)
    into `*X`. (To verify, check output in Green).
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住我们在函数定义中使用了 `*X` 作为第三个参数，因此传递给函数的所有参数在前两个参数之后都被 *打包*（浸泡）到 `*X` 中。（要验证，请查看绿色的输出）。
- en: When calling `train_test_split()` method within our function, we are essentially *unpacking* the `X` and `split_args` arguments
    using the `*` operator,(`*X` and `**split_args`), so that all elements of it can
    be passed as different parameters.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的函数中调用 `train_test_split()` 方法时，我们实际上是在使用 `*` 操作符解包 `X` 和 `split_args` 参数（`*X`
    和 `**split_args`），以便将它的所有元素作为不同的参数传递。
- en: That is,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: is equivalent to writing
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于编写
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When storing the results from the `train_test_split()` method, we again *pack* the `synthetic_train` and `synthetic_test` sets
    into a single `*synthetic` variable.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当存储来自 `train_test_split()` 方法的结果时，我们再次 *打包* `synthetic_train` 和 `synthetic_test`
    集合到一个单独的 `*synthetic` 变量中。
- en: '![](../Images/eff64186647cd1a947a83aabcbda8884.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eff64186647cd1a947a83aabcbda8884.png)'
- en: To check what’s inside it, we can unpack it again using `*` operator (see the
    output in Pink).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查里面的内容，我们可以使用 `*` 操作符再次解包它（参见粉色的输出）。
- en: '*Note: For those of you who’d like a deep dive into packing & unpacking using *`***`* operator,
    do check out this *[*article*](https://realpython.com/python-kwargs-and-args/)*.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：如果你想深入了解使用 *`***`* 操作符进行打包和解包，请查看这篇 *[*文章*](https://realpython.com/python-kwargs-and-args/)*。*'
- en: 4\. Use pre-commit hooks`.`
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4. 使用 pre-commit hooks`。`
- en: The code we write is often messy and lacks proper formatting such as trailing
    whitespaces, trailing commas, unsorted import statements, spaces in indentation,
    etc.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的代码通常很混乱，缺乏适当的格式，比如多余的空格、多余的逗号、未排序的导入语句、缩进中的空格等。
- en: While it is possible to fix all this manually, you will be saving yourself a
    great deal of time with [pre-commit hooks](https://pre-commit.com/). In simpler
    terms, these hooks can perform auto-formatting for you with one line of command
    — `pre-commit run`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以手动修复所有这些问题，但使用 [pre-commit hooks](https://pre-commit.com/) 你将节省大量时间。简单来说，这些
    hooks 只需一行命令 — `pre-commit run` 即可进行自动格式化。
- en: Here are some [simple steps](https://pre-commit.com/#install) from the official
    documentation to get started and [create a ](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`[.pre-commit-config.yaml](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`[ file](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration).
    It will contain [hooks](https://pre-commit.com/hooks.html) for all the formatting
    issues that you care about!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是来自官方文档的一些 [简单步骤](https://pre-commit.com/#install)，以帮助你入门并 [创建一个](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)
    `[.pre-commit-config.yaml](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`
    [文件](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)。它将包含所有你关心的
    [hooks](https://pre-commit.com/hooks.html)！
- en: As a purely personal preference, I tend to keep my `.pre-commit-config.yaml` configuration
    file simple and stick with [Black’s](https://black.readthedocs.io/en/stable/integrations/source_version_control.html) pre-commit
    configuration.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为个人偏好，我倾向于保持我的 `.pre-commit-config.yaml` 配置文件简单，并使用 [Black 的](https://black.readthedocs.io/en/stable/integrations/source_version_control.html)
    pre-commit 配置。
- en: '*Note: One thing to remember is that files must be staged i.e. *`*git add .*`* before
    you do *`*pre-commit run*`* , otherwise, you’ll see all the files will be Skipped
    :*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：需要记住的一点是，文件必须被暂存，即 *`*git add .*`*，然后才能执行 *`*pre-commit run*`*，否则，你会看到所有文件将被跳过：*'
- en: '![](../Images/74bb1092d28f8ab78b952edfb55eebad.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74bb1092d28f8ab78b952edfb55eebad.png)'
- en: 5\. Use .yml config files to store constants`.`
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5. 使用 .yml 配置文件来存储常量`。`
- en: If your project contains a lot of config variables such as database hostname,
    passwords, AWS credentials, etc. use a `.yml` file to keep track of all of them.
    You can later use this file in any Jupyter Notebook or script that you wish.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目包含很多配置变量，如数据库主机名、密码、AWS 凭证等，请使用 `.yml` 文件来跟踪它们。你可以在任何 Jupyter Notebook
    或脚本中使用此文件。
- en: Given most of my work is aimed at providing a model framework to clients so
    they can train it again on their own dataset, I usually use config files for storing
    paths to folders and files. It is also a nice way to make sure the client has
    to make changes to only one file when running your script at their end.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我的大部分工作旨在为客户提供模型框架，以便他们可以在自己的数据集上重新训练，我通常使用配置文件来存储文件夹和文件的路径。这也是确保客户在运行脚本时只需更改一个文件的好方法。
- en: Let’s go ahead and create a `fpaths.yml` file in the project directory. We will
    be storing the root directory where images must be stored. Additionally, the paths
    to the file names, labels, attributes, etc. Finally, we also store the paths to
    synthetic images.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们在项目目录中创建一个`fpaths.yml`文件。我们将存储必须存放图片的根目录。此外，还包括文件名、标签、属性等的路径。最后，我们也会存储合成图像的路径。
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can read this file like:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样阅读这个文件：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Note: If you’d like to dig deeper, here’s a brilliant *[*tutorial*](https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started)* to
    get you started with yaml.*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：如果你想深入了解，这里有一个精彩的*[*教程*](https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started)*，可以帮助你入门
    YAML。*'
- en: '6\. Bonus: Useful VS-Code Extensions`.`'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6. 附加：有用的 VS-Code 扩展`.
- en: 'While there are certainly many nice choices for Python editors, I must say
    VSCode is hands-down the best I have seen so far (*sorry, Pycharm*). To get even
    more use of it, consider installing these extensions from the marketplace:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然对于 Python 编辑器有许多不错的选择，但我必须说 VSCode 是我迄今为止见过的最好的编辑器（*对不起，Pycharm*）。为了更好地利用它，考虑从市场中安装以下扩展：
- en: '[Bracket Pair Colorizer ](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)—
    allows matching brackets to be identified with colors.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)
    — 允许通过颜色识别匹配的括号。'
- en: '![](../Images/22f7c332c972b0d391e893eca83873db.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22f7c332c972b0d391e893eca83873db.png)'
- en: '[Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) —
    allows autocompleting filenames.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)
    — 允许自动完成文件名。'
- en: '![](../Images/bc298c53b24cd3daaed9de47e1e6b762.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc298c53b24cd3daaed9de47e1e6b762.png)'
- en: '[Python Dockstring generator](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring) —
    allows generating docstrings for Python functions.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Docstring generator](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring)
    — 允许为 Python 函数生成文档字符串。'
- en: '![](../Images/85c8b32707fe9632374d81b585627221.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85c8b32707fe9632374d81b585627221.png)'
- en: Generating docstrings using VScode extension
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VSCode 扩展生成文档字符串
- en: '*Pro-tip: Generate the docstring (using *`*"""*`*) ****after**** you’ve written
    the function using type hinting. This way, the docstring generated will be even
    richer in information such as default value, argument types, etc. (See image on
    right above).*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*小贴士：在使用类型提示编写函数之后（使用*`*"""*`*），生成文档字符串。这样生成的文档字符串将包含更多信息，如默认值、参数类型等（见右侧图片）。*'
- en: '[Python Indent](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent) —
    (*my favorite; published by *by [Kevin Rose](https://marketplace.visualstudio.com/publishers/KevinRose))
    allows proper indentation of code/brackets that runs on multiple lines.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Indent](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent)
    — (*我最喜欢的；由* [Kevin Rose](https://marketplace.visualstudio.com/publishers/KevinRose)
    *发布*) 允许对多行代码/括号进行正确的缩进。'
- en: '![](../Images/eee5fbeebed8adbf8634e945e0bf7d3d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eee5fbeebed8adbf8634e945e0bf7d3d.png)'
- en: Source: [VSCode Extensions Marketplace](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[VSCode 扩展市场](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent)
- en: '[Python Type Hint](https://marketplace.visualstudio.com/items?itemName=njqdev.vscode-python-typehint) —
    allows auto-completion for type hints when writing functions.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Type Hint](https://marketplace.visualstudio.com/items?itemName=njqdev.vscode-python-typehint)
    — 允许在编写函数时自动完成类型提示。'
- en: '![](../Images/92497f3d02c0316705bc33017a00d027.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92497f3d02c0316705bc33017a00d027.png)'
- en: '[TODO tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree):
    (*second favorite*) keeps track of ALL the `TODO`''s at one place that were inserted
    while writing scripts.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TODO tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)：（*第二喜欢的*）跟踪所有插入的`TODO`，集中在一个地方，方便管理脚本中的
    TODO 注释。'
- en: '![](../Images/495629a719138e57c940c0da96e57c0b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/495629a719138e57c940c0da96e57c0b.png)'
- en: Keep track of all TODO comments inserted in your project
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪项目中插入的所有 TODO 注释
- en: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) —
    allows code completion, parameter suggestions (and a loootttt more for writing
    code faster).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
    — 允许代码自动完成、参数建议（以及更多功能，帮助更快地编写代码）。'
- en: Congrats on being one step closer to a professional Python developer. I intend
    to keep updating this article as and when I learn more cool tricks. As always,
    if there’s an easier way to do some of the things I mentioned in this article,
    please do let me know.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你距离成为专业 Python 开发者又近了一步。我打算在学习到更多有趣的技巧时继续更新这篇文章。像往常一样，如果你知道有更简单的方法来完成我在文章中提到的一些事情，请告诉我。
- en: Until next time :)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下次见 :)
- en: Step by step guide to explaining your ML project during a data science interview.
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于如何在数据科学面试中解释你的 ML 项目的逐步指南。
- en: Interviewer’s favorite question- How would you “scale your ML model?”
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面试官最喜欢的问题 - 你如何“扩展你的 ML 模型？”
- en: Time Series Analysis using Pandas in Python
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Pandas 进行时间序列分析
- en: 'Podurama: Podcast player'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Podurama: 播客播放器'
- en: Read every story from Dr. Varshita Sher (and thousands of other writers on Medium)
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Varshita Sher 博士的所有故事（以及 Medium 上其他成千上万的作者的故事）
- en: '**Bio: [Dr. Varshita Sher](https://varshitasher.medium.com/)** is a Data Scientist
    at Alan Turing Institute, and an Oxford & SFU Alumni.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介： [Varshita Sher 博士](https://varshitasher.medium.com/)** 是艾伦·图灵研究所的数据科学家，同时也是牛津大学和
    SFU 的校友。'
- en: '[Original](https://towardsdatascience.com/data-scientists-guide-to-efficient-coding-in-python-670c78a7bf79).
    Reposted with permission.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/data-scientists-guide-to-efficient-coding-in-python-670c78a7bf79)。获得许可后转载。'
- en: '**Related:**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[5 Tips for Writing Clean R Code](/2021/08/5-tips-writing-clean-r-code.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写干净 R 代码的 5 个技巧](/2021/08/5-tips-writing-clean-r-code.html)'
- en: '[Python Data Structures Compared](/2021/07/python-data-structures-compared.html)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数据结构比较](/2021/07/python-data-structures-compared.html)'
- en: '[GitHub Copilot Open Source Alternatives](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub Copilot 开源替代品](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
- en: '* * *'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[KDnuggets News, May 4: 9 Free Harvard Courses to Learn Data…](https://www.kdnuggets.com/2022/n18.html)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，5 月 4 日：9 门免费哈佛课程学习数据…](https://www.kdnuggets.com/2022/n18.html)'
- en: '[15 Python Coding Interview Questions You Must Know For Data Science](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[15 个数据科学必须知道的 Python 编程面试问题](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)'
- en: '[3 Hard Python Coding Interview Questions For Data Science](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 个困难的 Python 编程面试问题数据科学](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
- en: '[Free Python Project Coding Course](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[免费 Python 项目编码课程](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
- en: '[7 Must-Know Python Tips for Coding Interviews](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 个编程面试中必须知道的 Python 技巧](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)'
- en: '[Enhance Your Python Coding Style with Ruff](https://www.kdnuggets.com/enhance-your-python-coding-style-with-ruff)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过 Ruff 提升你的 Python 编码风格](https://www.kdnuggets.com/enhance-your-python-coding-style-with-ruff)'
