- en: 3 Advanced Python Features You Should Know
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3个你应该知道的高级Python特性
- en: 原文：[https://www.kdnuggets.com/2020/07/3-advanced-python-features.html](https://www.kdnuggets.com/2020/07/3-advanced-python-features.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/07/3-advanced-python-features.html](https://www.kdnuggets.com/2020/07/3-advanced-python-features.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '![](../Images/3558bedbb897e8956c59a41112d451d0.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3558bedbb897e8956c59a41112d451d0.png)'
- en: '*Photo by [David Clode](https://unsplash.com/@davidclode?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral).*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*照片由[David Clode](https://unsplash.com/@davidclode?utm_source=medium&utm_medium=referral)提供，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。*'
- en: In this article, I will discuss 3 important features of Python that comes in
    handy for a data scientist and saves a lot of time. Let’s begin without wasting
    any time.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将讨论Python的3个重要特性，这些特性对数据科学家非常实用，并且节省了大量时间。让我们开始吧，不浪费时间。
- en: List & Dict Comprehensions
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表和字典推导式
- en: List & Dict Comprehensions are a very powerful tool in Python that comes in
    handy to make lists. It saves time, easy in syntax, and makes the logic easier
    as compared to making a list using normal Python for-loop.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和字典推导式是Python中非常强大的工具，能够方便地制作列表。它节省时间，语法简单，相比于使用普通Python for循环制作列表，逻辑更清晰。
- en: Basically, these are used instead of an explicit for-loop with simple logic
    inside it that appends or does something with a list or dictionary. These are
    single line and makes the code more readable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这些用来代替显式的for循环，并在其中执行简单逻辑，将元素添加到列表或字典中。它们是一行代码，使代码更具可读性。
- en: '**List Comprehensions**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表推导式**'
- en: Will will see a normal python example first and then will see it’s equivalent
    using *list comprehensions*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将看到一个普通的Python示例，然后看到它用*列表推导式*的等效写法。
- en: '**Scenario**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: Let’s say we have a simple dataframe in Pandas with students results in 3 subjects.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们在Pandas中有一个简单的数据框，包含3门科目的学生成绩。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And if we print it,
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印它，
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now let’s say we want to make a list with maximum marks of each subject, i.e.,
    that list should be equal to [10,8,9] because these are maximum marks of each
    subject.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想要制作一个包含每门科目最高分的列表，即，该列表应为[10,8,9]，因为这些是每门科目的最高分。
- en: '**Python Code**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 代码**'
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: And, if we print it,
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印它，
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Using List Comprehensions**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用列表推导式**'
- en: The basic syntax for a list comprehension is
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导式的基本语法是
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here we can do anything with *varname *to modify it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以对*varname*做任何修改。
- en: In our case, our list comprehension would be
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们的列表推导式将是
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: And our output would be
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的输出将是
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Do you see how it resembles our Python code? We were appending *max(results[i])* in *maxlist*
    inside the loop in normal Python code, here we are not appending it, but anything
    you want to append should the first argument in the list comprehension. So now
    I can rewrite the basic syntax as
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到它如何与我们的Python代码相似吗？我们在普通Python代码中将*max(results[i])*添加到*maxlist*中，这里我们没有添加它，而是将你想要添加的内容放在列表推导式的第一个参数中。所以现在我可以将基本语法重写为
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Hence, in our examples, we wanted to append the maximum of each row in a dataframe,
    i.e., *max(results[i])* so we used
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在我们的例子中，我们想将数据框中每一行的最大值附加到列表中，即*max(results[i])*，所以我们使用了
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Dictionary Comprehension**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**字典推导式**'
- en: Similarly, we use the same idea for dictionary comprehension. Basic syntax normally
    used is
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们对字典推导式使用相同的思想。通常使用的基本语法是
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: For example, let’s say that I have a dummy table for the English alphabet,
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，假设我有一个英文字母的虚拟表格，
- en: '[PRE10]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, if we want to use numbers (0–25) as our values of the dictionary because
    a machine learning model can only process numbers, and we want to feed the dictionary
    values, w need to swap the keys and values of a dictionary. The easiest way to
    swap the keys and values in the dictionary is using *dict comprehension*.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想用数字（0–25）作为字典的值，因为机器学习模型只能处理数字，并且我们要填充字典的值，我们需要交换字典的键和值。交换字典的键和值的最简单方法是使用*字典推导式*。
- en: '[PRE11]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: If you focus on it for a second, it will start making sense that how it is reversing
    a dictionary, that we are looping *alphabet* and *number *which is the normal
    order of dictionary but what we want to insert is in reverse order so we are using *number:alphabet* instead
    of *alphaber:number*.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你稍微关注一下，它会开始变得明白它如何反转字典，我们在循环*alphabet*和*number*，这是字典的正常顺序，但我们想插入的是相反的顺序，所以我们使用*number:alphabet*而不是*alphabet:number*。
- en: Lambda Expressions
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Lambda 表达式
- en: Lambda Expressions are a very powerful tool for data scientists. They come in
    very handy especially when used with *DataFrame.apply()*, *map()*, *filter()*
    or *reduce()*. They provide an easy way to avoid manually defined functions and
    to write them in a single line making code more clearer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 表达式是数据科学家非常强大的工具。它们特别方便，尤其是当与 *DataFrame.apply()*、*map()*、*filter()*
    或 *reduce()* 一起使用时。它们提供了一种简单的方法来避免手动定义函数，并将其写成一行代码，使代码更加清晰。
- en: Let’s see the basic syntax of Lambda Expression, where we return the next number
    of any number passed in any function.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下 Lambda 表达式的基本语法，其中我们返回任何传入函数的下一个数字。
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, our function argument is *functionArgument1,* and we are returning *functionArgument1*
    +1 which is the next number.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们的函数参数是 *functionArgument1*，我们返回 *functionArgument1* +1，即下一个数字。
- en: So to use it,
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以要使用它，
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: See, it is that simple. Let’s see a real-world example where we have a dataframe
    of names (taken from the titanic dataset), and we want to make a feature where
    we want to extract the title (Mr, Miss, Sir etc.) from the name.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 看，这就是这么简单。我们来看一个实际的例子，我们有一个包含名字的数据框（取自泰坦尼克号数据集），我们想要创建一个特征，从名字中提取称谓（如 Mr, Miss,
    Sir 等）。
- en: So, the code for our data frame is
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我们的数据框代码是
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: and the dataframe is
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 而数据框是
- en: '![](../Images/a116a91303482d66adce66321b2f3da7.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a116a91303482d66adce66321b2f3da7.png)'
- en: Now, if we notice that we find a specific pattern here, which is that we have
    a comma after the first name and ‘full stop’ after the title that we want to extract.
    So we can use *list slicing* to extract from the comma until the full stop.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们注意到，我们发现一个特定的模式，那就是我们在名字后面有一个逗号，在我们想要提取的称谓后面有一个“句号”。所以我们可以使用 *list slicing*
    从逗号到句号进行提取。
- en: We want to slice from 2 indexes next to a comma because we don't want to include
    a comma and space after comma so our starting index will be *str.find(',')+2*,
    and we want to slice to the full stop (not included), so we will slice until *str.find('.')*.
    Luckily, the last index is not included, so we do not need to do -1 explicitly
    from the index. Let’s use a lambda expression to solve this problem.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想从逗号后面两个索引的位置开始切片，因为我们不想包含逗号和逗号后的空格，所以我们的起始索引将是 *str.find(',')+2*，而我们要切片到句号（不包括），所以我们将切片到
    *str.find('.')*。幸运的是，最后一个索引没有包含，因此我们不需要显式地从索引中减去 -1。让我们用 Lambda 表达式来解决这个问题。
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here we are using the *.apply* function from pandas on df[0], which is the column
    having all the names. Inside it, we are passing a lambda expression that takes
    in each name and returns the sliced version of that name. This sliced version
    is the title of that name. The output of our dataframe now is
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用的是 pandas 的 *.apply* 函数，作用于 df[0]，这是包含所有名字的列。在其中，我们传递了一个 Lambda 表达式，它接受每个名字并返回该名字的切片版本。这个切片版本就是那个名字的称谓。我们数据框的输出现在是
- en: '![](../Images/ce7ed4504840075602bc1fc09d34eb27.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce7ed4504840075602bc1fc09d34eb27.png)'
- en: And here, we can see that how we extracted the titles from the name using this
    pretty clear trick.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们是如何使用这个非常简单的技巧从名字中提取称谓的。
- en: Lambda expressions are very useful when applied with *map*, *reduce *or *filter *in
    Python.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当与*map*、*reduce* 或 *filter* 一起使用时，Lambda 表达式非常有用。
- en: Map Function
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Map 函数
- en: In Python, Map functions are very commonly used functions, which makes our work
    very easier. The idea of *map *is that when passed a function and an iterable
    in *map*, it performs that function on every single entity of that iterable.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，Map 函数是非常常用的函数，它使我们的工作变得更轻松。*map* 的思想是，当传入一个函数和一个可迭代对象时，它会对该可迭代对象的每一个实体执行该函数。
- en: What does it mean?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是什么意思？
- en: Let’s say that I have an iterable that is a list with the following data *[0,
    5, 10, 15, 20, 25, 30]*, and a custom function *isEven(anyInteger)* that tells
    if *anyInteger *passed into it is even or not. If we pass this function and the
    iterable into *map*, then it will automatically apply this function to all the
    entities in the list and return the *map *object, which we can convert into a
    list or tuple or dictionary.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个可迭代对象，它是一个包含以下数据的列表 *[0, 5, 10, 15, 20, 25, 30]*，以及一个自定义函数 *isEven(anyInteger)*，它用于判断
    *anyInteger* 是否为偶数。如果我们将这个函数和可迭代对象传递给 *map*，它将自动将这个函数应用于列表中的所有实体，并返回 *map* 对象，我们可以将其转换为列表、元组或字典。
- en: '**Example**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例**'
- en: Let’s say our function is
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们的函数是
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: and our iterable is
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 而我们的可迭代对象是
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If we want to use the traditional approach, then we would have to loop our list
    and apply the function to individual items.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用传统方法，则需要遍历我们的列表并将函数应用于每个项目。
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will return us a new list *isEvenList *with having True for Even and False
    for odd numbers.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个新的列表*isEvenList*，其中偶数为 True，奇数为 False。
- en: To use it with *map *it will make our task much easier. Our code would be
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用*map*可以让我们的任务变得更加轻松。我们的代码如下
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: and our code is done!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码完成了！
- en: Here, what we are doing is that inside the *map *function, we are passing in
    our function *isEven* and our iterable *myList*, which is returning a *map *object
    which we are casting into *list*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们所做的是在*map*函数内部，传入我们的函数*isEven*和我们的可迭代对象*myList*，返回一个*map*对象，我们将其转换为*list*。
- en: So basic syntax for the map function is
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 所以 map 函数的基本语法是
- en: '[PRE20]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Luckily, Pandas offer *map*, *apply*, and *applymap *as built-in functions.
    They are very commonly used and are very helpful. The basic idea behind all these
    3 functions is the same as Python’s built-in map function. You can learn more
    about these functions in the official documentation of Pandas [here](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.map.html).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Pandas 提供了*map*、*apply*和*applymap*作为内置函数。它们非常常用，也非常有用。这三种函数的基本思想与 Python
    的内置 map 函数相同。你可以在 Pandas 的官方文档中了解更多关于这些函数的信息[这里](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.map.html)。
- en: '**Related:**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Python For Everybody: The Free eBook](https://www.kdnuggets.com/2020/05/python-everybody-free-ebook.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[面向每个人的 Python：免费电子书](https://www.kdnuggets.com/2020/05/python-everybody-free-ebook.html)'
- en: '[10 Python Tips and Tricks You Should Learn Today](https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[今天你应该学习的 10 个 Python 技巧和窍门](https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html)'
- en: '[Stop Hurting Your Pandas!](https://www.kdnuggets.com/2020/04/stop-hurting-pandas.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止伤害你的 Pandas！](https://www.kdnuggets.com/2020/04/stop-hurting-pandas.html)'
- en: '* * *'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 维护'
- en: '* * *'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[KDnuggets News, April 13: Python Libraries Data Scientists Should…](https://www.kdnuggets.com/2022/n15.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，4月13日：数据科学家应该了解的 Python 库…](https://www.kdnuggets.com/2022/n15.html)'
- en: '[Top 10 Advanced Data Science SQL Interview Questions You Must Know…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你必须了解的 10 个高级数据科学 SQL 面试问题…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
- en: '[What You Should Know About Python Decorators And Metaclasses](https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该了解的 Python 装饰器和元类](https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个 R 库（即使你使用 Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多分类问题的性能评估指标](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
- en: '[5 Concepts You Should Know About Gradient Descent and Cost Function](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该了解的关于梯度下降和成本函数的 5 个概念](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
