["```py\nimport geopandas as gpd\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn')\n\n%matplotlib inline\n```", "```py\n# Make sure you read postal codes as strings, otherwise \n# the postal code 01110 will be parsed as the number 1110\\. \nplz_shape_df = gpd.read_file('../Data/plz-gebiete.shp', dtype={'plz': str})\n\nplz_shape_df.head()\n```", "```py\nplt.rcParams['figure.figsize'] = [16, 11]\n\n# Get lat and lng of Germany's main cities. \ntop_cities = {\n    'Berlin': (13.404954, 52.520008), \n    'Cologne': (6.953101, 50.935173),\n    'Düsseldorf': (6.782048, 51.227144),\n    'Frankfurt am Main': (8.682127, 50.110924),\n    'Hamburg': (9.993682, 53.551086),\n    'Leipzig': (12.387772, 51.343479),\n    'Munich': (11.576124, 48.137154),\n    'Dortmund': (7.468554, 51.513400),\n    'Stuttgart': (9.181332, 48.777128),\n    'Nuremberg': (11.077438, 49.449820),\n    'Hannover': (9.73322, 52.37052)\n}\n\nfig, ax = plt.subplots()\n\nplz_shape_df.plot(ax=ax, color='orange', alpha=0.8)\n\n# Plot cities. \nfor c in top_cities.keys():\n    # Plot city name.\n    ax.text(\n        x=top_cities[c][0], \n        # Add small shift to avoid overlap with point.\n        y=top_cities[c][1] + 0.08, \n        s=c, \n        fontsize=12,\n        ha='center', \n    )\n    # Plot city location centroid.\n    ax.plot(\n        top_cities[c][0], \n        top_cities[c][1], \n        marker='o',\n        c='black', \n        alpha=0.5\n    )\n\nax.set(\n    title='Germany', \n    aspect=1.3, \n    facecolor='lightblue'\n);\n```", "```py\n# Create feature.\nplz_shape_df = plz_shape_df \\\n    .assign(first_dig_plz = lambda x: x['plz'].str.slice(start=0, stop=1))\n```", "```py\nfig, ax = plt.subplots()\n\nplz_shape_df.plot(\n    ax=ax, \n    column='first_dig_plz', \n    categorical=True, \n    legend=True, \n    legend_kwds={'title':'First Digit', 'loc':'lower right'},\n    cmap='tab20',\n    alpha=0.9\n)\n\nfor c in top_cities.keys():\n\n    ax.text(\n        x=top_cities[c][0], \n        y=top_cities[c][1] + 0.08, \n        s=c, \n        fontsize=12,\n        ha='center', \n    )\n\n    ax.plot(\n        top_cities[c][0], \n        top_cities[c][1], \n        marker='o',\n        c='black', \n        alpha=0.5\n    )\n\nax.set(\n    title='Germany First-Digit-Postal Codes Areas', \n    aspect=1.3,\n    facecolor='white'\n);\n```", "```py\nplz_region_df = pd.read_csv(\n    '../Data/zuordnung_plz_ort.csv', \n    sep=',', \n    dtype={'plz': str}\n)\n\nplz_region_df.drop('osm_id', axis=1, inplace=True)\n\nplz_region_df.head()\n```", "```py\n# Merge data.\ngermany_df = pd.merge(\n    left=plz_shape_df, \n    right=plz_region_df, \n    on='plz',\n    how='inner'\n)\n\ngermany_df.drop(['note'], axis=1, inplace=True)\n\ngermany_df.head()\n```", "```py\nfig, ax = plt.subplots()\n\ngermany_df.plot(\n    ax=ax, \n    column='bundesland', \n    categorical=True, \n    legend=True, \n    legend_kwds={'title':'Bundesland', 'bbox_to_anchor': (1.35, 0.8)},\n    cmap='tab20',\n    alpha=0.9\n)\n\nfor c in top_cities.keys():\n\n    ax.text(\n        x=top_cities[c][0], \n        y=top_cities[c][1] + 0.08, \n        s=c, \n        fontsize=12,\n        ha='center', \n    )\n\n    ax.plot(\n        top_cities[c][0], \n        top_cities[c][1], \n        marker='o',\n        c='black', \n        alpha=0.5\n    )\n\nax.set(\n    title='Germany - Bundesländer', \n    aspect=1.3, \n    facecolor='white'\n);\n```", "```py\nplz_einwohner_df = pd.read_csv(\n    '../Data/plz_einwohner.csv', \n    sep=',', \n    dtype={'plz': str, 'einwohner': int}\n)\n\nplz_einwohner_df.head()\n```", "```py\n# Merge data.\ngermany_df = pd.merge(\n    left=germany_df, \n    right=plz_einwohner_df, \n    on='plz',\n    how='left'\n)\n\ngermany_df.head()\n```", "```py\nfig, ax = plt.subplots()\n\ngermany_df.plot(\n    ax=ax, \n    column='einwohner', \n    categorical=False, \n    legend=True, \n    cmap='autumn_r',\n    alpha=0.8\n)\n\nfor c in top_cities.keys():\n\n    ax.text(\n        x=top_cities[c][0], \n        y=top_cities[c][1] + 0.08, \n        s=c, \n        fontsize=12,\n        ha='center', \n    )\n\n    ax.plot(\n        top_cities[c][0], \n        top_cities[c][1], \n        marker='o',\n        c='black', \n        alpha=0.5\n    )\n\nax.set(\n    title='Germany: Number of Inhabitants per Postal Code', \n    aspect=1.3, \n    facecolor='lightblue'\n);\n```", "```py\nmunich_df = germany_df.query('ort == \"München\"')\n\nfig, ax = plt.subplots()\n\nmunich_df.plot(\n    ax=ax, \n    column='einwohner', \n    categorical=False, \n    legend=True, \n    cmap='autumn_r',\n)\n\nax.set(\n    title='Munich: Number of Inhabitants per Postal Code', \n    aspect=1.3, \n    facecolor='lightblue'\n);\n```", "```py\nberlin_df = germany_df.query('ort == \"Berlin\"')\n\nfig, ax = plt.subplots()\n\nberlin_df.plot(\n    ax=ax, \n    column='einwohner', \n    categorical=False, \n    legend=True, \n    cmap='autumn_r',\n)\n\nax.set(\n    title='Berlin: Number of Inhabitants per Postal Code', \n    aspect=1.3,\n    facecolor='lightblue'\n);\n```", "```py\nberlin_plz_area_df = pd.read_excel(\n    '../Data/ZuordnungderBezirkezuPostleitzahlen.xls', \n    sheet_name='plz_bez_tidy',\n    dtype={'plz': str}\n)\n\nberlin_plz_area_df.head()\n```", "```py\nberlin_plz_area_df \\\n    [berlin_plz_area_df['plz'].duplicated(keep=False)] \\\n    .sort_values('plz')\n```", "```py\nberlin_neighbourhoods_df = gpd.read_file('../Data/neighbourhoods.geojson')\n\nberlin_neighbourhoods_df = berlin_neighbourhoods_df \\\n    [~ berlin_neighbourhoods_df['neighbourhood_group'].isnull()]\n\nberlin_neighbourhoods_df.head()\n```", "```py\nfig, ax = plt.subplots()\n\nberlin_df.plot(\n    ax=ax, \n    alpha=0.2\n)\n\nberlin_neighbourhoods_df.plot(\n    ax=ax, \n    column='neighbourhood_group',\n    categorical=True, \n    legend=True, \n    legend_kwds={'title': 'Neighbourhood', 'loc': 'upper right'},\n    cmap='tab20', \n    edgecolor='black'\n)\n\nax.set(\n    title='Berlin Neighbourhoods', \n    aspect=1.3\n);\n```", "```py\nfrom geopy import Nominatim\n\nlocator = Nominatim(user_agent='myGeocoder')\n\nlocation = locator.geocode('Humboldt Universität zu Berlin')\n\nprint(location)\n```", "```py\ndef lat_lng_from_string_loc(x):\n\n    locator = Nominatim(user_agent='myGeocoder')\n\n    location = locator.geocode(x)\n\n    if location is None:\n        None\n    else:\n        return location.longitude, location.latitude\n```", "```py\n# Define some well-known Berlin locations.\nberlin_locations = [\n    'Alexander Platz', \n    'Zoo Berlin', \n    'Berlin Tegel', \n    'Berlin Schönefeld',\n    'Berlin Adlershof',\n    'Olympia Stadium Berlin',\n    'Berlin Südkreuz', \n    'Frei Universität Berlin',\n    'Mauerpark', \n    'Treptower Park',\n]\n\n# Get geodata.\nberlin_locations_geo = {\n    x: lat_lng_from_string_loc(x) \n    for x in berlin_locations \n}\n\n# Remove None.\nberlin_locations_geo = {\n    k: v \n    for k, v in berlin_locations_geo.items()\n    if v is not None\n}\n```", "```py\nberlin_df = germany_df.query('ort == \"Berlin\"')\n\nfig, ax = plt.subplots()\n\nberlin_df.plot(\n    ax=ax, \n    color='orange', \n    alpha=0.8\n)\n\nfor c in berlin_locations_geo.keys():\n\n    ax.text(\n        x=berlin_locations_geo[c][0], \n        y=berlin_locations_geo[c][1] + 0.005, \n        s=c, \n        fontsize=12,\n        ha='center', \n    )\n\n    ax.plot(\n        berlin_locations_geo[c][0], \n        berlin_locations_geo[c][1], \n        marker='o',\n        c='black', \n        alpha=0.5\n    )\n\nax.set(\n    title='Berlin - Some Relevant Locations', \n    aspect=1.3,\n    facecolor='lightblue'\n);\n```", "```py\nimport requests\n\n# GET request.\nresponse = requests.get(\n    'https://www.berlin.de/sen/web/service/maerkte-feste/weihnachtsmaerkte/index.php/index/all.json?q='\n)\n\nresponse_json = response.json()\n```", "```py\nberlin_maerkte_raw_df = pd.DataFrame(response_json['index'])\n```", "```py\nberlin_maerkte_df = berlin_maerkte_raw_df[['name', 'bezirk', 'plz_ort', 'lat', 'lng']]\n\nberlin_maerkte_df = berlin_maerkte_df \\\n    .query('lat != \"\"') \\\n    .assign(plz = lambda x: x['plz_ort'].str.split(' ').apply(lambda x: x[0]).astype(str)) \\\n    .drop('plz_ort', axis=1)\n\n# Convert to float.\nberlin_maerkte_df['lat'] = berlin_maerkte_df['lat'].str.replace(',', '.').astype(float)\nberlin_maerkte_df['lng'] = berlin_maerkte_df['lng'].str.replace(',', '.').astype(float)\n\nberlin_maerkte_df.head()\n```", "```py\nfig, ax = plt.subplots()\n\nberlin_df.plot(ax=ax, color= 'green', alpha=0.4)\n\nfor c in berlin_locations_geo.keys():\n\n    ax.text(\n        x=berlin_locations_geo[c][0], \n        y=berlin_locations_geo[c][1] + 0.005, \n        s=c, \n        fontsize=12,\n        ha='center', \n    )\n\n    ax.plot(\n        berlin_locations_geo[c][0], \n        berlin_locations_geo[c][1], \n        marker='o',\n        c='black', \n        alpha=0.5\n    )\n\nberlin_maerkte_df.plot(\n    kind='scatter', \n    x='lng', \n    y='lat', \n    c='r', \n    marker='*',\n    s=50,\n    label='Christmas Market',  \n    ax=ax\n)\n\nax.set(\n    title='Berlin Christmas Markets (2019)', \n    aspect=1.3, \n    facecolor='white'\n);\n```", "```py\nimport mplleaflet\n\nfig, ax = plt.subplots()\n\nberlin_df.plot(\n    ax=ax, \n    alpha=0.2\n)\n\nberlin_neighbourhoods_df.plot(\n    ax=ax, \n    column='neighbourhood_group',\n    categorical=True, \n    cmap='tab20',\n)\n\nmplleaflet.display(fig=fig)\n```", "```py\nfig, ax = plt.subplots()\n\nberlin_df.plot(ax=ax, color= 'green', alpha=0.4)\n\nberlin_maerkte_df.plot(\n    kind='scatter', \n    x='lng', \n    y='lat', \n    c='r', \n    marker='*',\n    s=30,\n    ax=ax\n)\n\nmplleaflet.display(fig=fig)\n```"]