["```py\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.ensemble import RandomForestRegressorX = df.drop(columns = 'price')\n# One-hot encode color for sklearn\nX['color'] = (X['color'] == 'red')\ny = df.price# Train Test Split\nX_train, X_test, y_train, y_test = train_test_split(X, y,\n                                                    test_size=0.33, \n                                                    random_state=42)# Instantiate a Random Forest Regressor\nregr = RandomForestRegressor(max_depth=100, random_state=0)# Fit a random forest regressor\nregr.fit(X_train, y_train)\n```", "```py\nfrom sklearn.metrics import mean_squared_errorrmse_full_mod = mean_squared_error(regr.predict(X_test), y_test, squared = False)\n```", "```py\n# Initialize a list of results\nresults = []# Iterate through each predictor\nfor predictor in X_test:\n\n    # Create a copy of X_test\n    X_test_copy = X_test.copy()\n\n    # Scramble the values of the given predictor\n    X_test_copy[predictor] = X_test[predictor].sample(frac=1).values\n\n    # Calculate the new RMSE\n    new_rmse = mean_squared_error(regr.predict(X_test_copy), y_test,\n                                  squared = False)\n\n    # Append the increase in MSE to the list of results \n    results.append({'pred': predictor,\n                    'score': new_rmse - rmse_full_mod })# Convert to a pandas dataframe and rank the predictors by score\nresultsdf = pd.DataFrame(results).sort_values(by = 'score',\n                                              ascending = False)\n```"]