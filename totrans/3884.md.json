["```py\ndef baz(a, b=2, c =3, d=4): return a + b + c\n\ndef foo(c, a, **kwargs):\n    return c + baz(a, **kwargs)\n\ninspect.signature(foo) \n```", "```py\n<Signature (c, a, **kwargs)>\n```", "```py\ndef baz(a, b=2, c =3, d=4): return a + b + c\n\n@delegates(baz) # this decorator will pass down keyword arguments from baz\ndef foo(c, a, **kwargs):\n    return c + baz(a, **kwargs)\n\ninspect.signature(foo) \n```", "```py\n<Signature (c, a, b=2, d=4)>\n```", "```py\n@delegates(baz, keep=True)\ndef foo(c, a, **kwargs):\n    return c + baz(a, **kwargs)\n\ninspect.signature(foo) \n```", "```py\n<Signature (c, a, b=2, d=4, **kwargs)>\n```", "```py\ndef basefoo(a, b=2, c =3, d=4): pass\n\n@delegates(basefoo, but= ['d']) # exclude `d`\ndef foo(c, a, **kwargs): pass\n\ninspect.signature(foo) \n```", "```py\n<Signature (c, a, b=2)>\n```", "```py\nclass BaseFoo:\n    def __init__(self, e, c=2): pass\n\n@delegates()# since no argument was passsed here we delegate to the superclass\nclass Foo(BaseFoo):\n    def __init__(self, a, b=1, **kwargs): super().__init__(**kwargs)\n\ninspect.signature(Foo) \n```", "```py\n<Signature (a, b=1, c=2)>\n```", "```py\nclass Test:\n    def __init__(self, a, b ,c): \n        self.a, self.b, self.c = a, b, c \n```", "```py\nclass Test:\n    def __init__(self, a, b, c): \n        store_attr()\n\nt = Test(5,4,3)\nassert t.b == 4 \n```", "```py\nclass Test:\n    def __init__(self, a, b, c): \n        store_attr(but=['c'])\n\nt = Test(5,4,3)\nassert t.b == 4\nassert not hasattr(t, 'c') \n```", "```py\nclass ParentClass:\n    def __init__(self): self.some_attr = 'hello'\n\nclass ChildClass(ParentClass):\n    def __init__(self):\n        super().__init__()\n\ncc = ChildClass()\nassert cc.some_attr == 'hello' # only accessible b/c you used super \n```", "```py\nclass NewParent(ParentClass, metaclass=PrePostInitMeta):\n    def __pre_init__(self, *args, **kwargs): super().__init__()\n\nclass ChildClass(NewParent):\n    def __init__(self):pass\n\nsc = ChildClass()\nassert sc.some_attr == 'hello' \n```", "```py\ncollide_with(x::Asteroid, y::Asteroid) = ... \n# deal with asteroid hitting asteroid\n\ncollide_with(x::Asteroid, y::Spaceship) = ... \n# deal with asteroid hitting spaceship\n\ncollide_with(x::Spaceship, y::Asteroid) = ... \n# deal with spaceship hitting asteroid\n\ncollide_with(x::Spaceship, y::Spaceship) = ... \n# deal with spaceship hitting spaceship \n```", "```py\n@typedispatch\ndef f(x:str, y:str): return f'{x}{y}'\n\n@typedispatch\ndef f(x:np.ndarray): return x.sum()\n\n@typedispatch\ndef f(x:int, y:int): return x+y \n```", "```py\nf('Hello ', 'World!') \n```", "```py\n'Hello World!'\n```", "```py\nf(2,3) \n```", "```py\n5\n```", "```py\nf(np.array([5,5,5,5])) \n```", "```py\n20\n```", "```py\ntest_input = [1,2,3,4,5,6]\ndef f(arr, val): \n    \"Filter a list to remove any values that are less than val.\"\n    return [x for x in arr if x >= val]\n\nf(test_input, 3) \n```", "```py\n[3, 4, 5, 6]\n```", "```py\nfilter5 = partial(f, val=5)\nfilter5(test_input) \n```", "```py\n[5, 6]\n```", "```py\nfilter5.__doc__ \n```", "```py\n'partial(func, *args, **keywords) - new function with partial application\\n    of the given arguments and keywords.\\n'\n```", "```py\nfilter5 = partialler(f, val=5)\nfilter5.__doc__ \n```", "```py\n'Filter a list to remove any values that are less than val.'\n```", "```py\ndef add(arr, val): return [x + val for x in arr]\ndef arrsum(arr): return sum(arr)\n\n# See the previous section on partialler\nadd2 = partialler(add, val=2)\n\ntransform = compose(filter5, add2, arrsum)\ntransform([1,2,3,4,5,6]) \n```", "```py\n15\n```", "```py\narrsum(add2(filter5([1,2,3,4,5,6]))) \n```", "```py\ndef fit(x, transforms:list):\n    \"fit a model after performing transformations\"\n    x = compose(*transforms)(x)\n    y = [np.mean(x)] * len(x) # its a dumb model.  Don't judge me\n    return y\n\n# filters out elements < 5, adds 2, then predicts the mean\nfit(x=[1,2,3,4,5,6], transforms=[filter5, add2]) \n```", "```py\n[7.5, 7.5]\n```", "```py\nclass Test:\n    def __init__(self, a, b=2, c=3): store_attr() # `store_attr` was discussed previously\n\nTest(1) \n```", "```py\n<__main__.Test at 0x7ffcd766cee0>\n```", "```py\nclass Test:\n    def __init__(self, a, b=2, c=3): store_attr() \n    __repr__ = basic_repr('a,b,c')\n\nTest(2) \n```", "```py\nTest(a=2, b=2, c=3)\n```", "```py\nclass MyClass(int): pass  \n\n@patch\ndef func(self:MyClass, a): return self+a\n\nmc = MyClass(3) \n```", "```py\nmc.func(10) \n```", "```py\n13\n```", "```py\nfrom fastcore.utils import *\nfrom pathlib import Path\np = Path('.')\np.ls() # you don't get this with vanilla Pathlib.Path!! \n```", "```py\n(#7) [Path('2020-09-01-fastcore.ipynb'),Path('README.md'),Path('fastcore_imgs'),Path('2020-02-20-test.ipynb'),Path('.ipynb_checkpoints'),Path('2020-02-21-introducing-fastpages.ipynb'),Path('my_icons')]\n```", "```py\n@patch\ndef fun(self:Path): return \"This is fun!\"\n\np.fun() \n```", "```py\n'This is fun!'\n```", "```py\narr=np.array([5,4,3,2,1])\nf = lambda a: a.sum()\nassert f(arr) == 15 \n```", "```py\nf = Self.sum()\nassert f(arr) == 15 \n```", "```py\nimport pandas as pd\ndf=pd.DataFrame({'Some Column': ['a', 'a', 'b', 'b', ], \n                 'Another Column': [5, 7, 50, 70]})\n\nf = Self.groupby('Some Column').mean()\nf(df) \n```", "```py\nfrom fastcore.imports import in_notebook, in_colab, in_ipython\nin_notebook(), in_colab(), in_ipython() \n```", "```py\n(True, False, True)\n```", "```py\nL(1,2,3) \n```", "```py\n(#3) [1,2,3]\n```", "```py\np = L.range(20).shuffle()\np \n```", "```py\n(#20) [8,7,5,12,14,16,2,15,19,6...]\n```", "```py\np[2,4,6] \n```", "```py\n(#3) [5,14,2]\n```", "```py\n1 + L(2,3,4) \n```", "```py\n(#4) [1,2,3,4]\n```"]