- en: Naive Bayes from Scratch using Python only – No Fancy Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/10/naive-bayes-from-scratch-python.html](https://www.kdnuggets.com/2018/10/naive-bayes-from-scratch-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/10/naive-bayes-from-scratch-python.html/2#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Aisha Javed](https://towardsdatascience.com/@aisha.jv70)** .'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2ad3a747bf9c8c8e67cdfb4deec57050.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Unfolding Naive Bayes from Scratch! Take-2 ****????**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: So in my previous blog post of [**Unfolding Naive Bayes from Scratch! Take-1**](https://www.kdnuggets.com/2018/09/unfolding-naive-bayes.html)????,
    I tried to decode the rocket science behind the working of The [Naive Bayes](https://www.kdnuggets.com/2020/06/naive-bayes-algorithm-everything.html)
    (NB) ML algorithm, and after going through it’s algorithmic insights, you too
    must have realized that it’s quite a painless algorithm. In this blog post, we
    will walk-through it’s complete step by step pythonic implementation ( using basic
    python only) and it will be quite evident that *how easy it is to code NB from
    scratch* and that NB is *not that Naive at classifying !*
  prefs: []
  type: TYPE_NORMAL
- en: '**Who’s the Target Audience?** **????** **????** **????****ML Beginners** **????****????????**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since I always wanted to decipher ML for absolute beginners and as it is said
    that if you can’t explain it, you probably didn't understand it, so yeah this
    blog post too is especially intended for *ML beginners looking for humanistic
    ML resources for an in depth yet without any gibberish jargon of those creepy
    Greek mathematical formulas *( honestly that scary looking math never made any
    sense to me too ! )
  prefs: []
  type: TYPE_NORMAL
- en: '**Outcome of this Tutorial — A Hands-On Pythonic Implementation of NB**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As I just mentioned above, a complete walk-through of NB pythonic implementation
  prefs: []
  type: TYPE_NORMAL
- en: '*Once you reach the end of this blog post, you will be done completely with
    90% of understanding & implementing NB and only 10% will be remaining to master
    it from application point of view!*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d107ef572d935909b0b62daf11e48e7a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**ML Little Birdy Transforming from Zero to Hero !!!**'
  prefs: []
  type: TYPE_NORMAL
- en: Defining The Roadmap….. ????
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Milestone # 1: **[**Data Preprocessing Function**](https://towardsdatascience.com/na%C3%AFve-bayes-from-scratch-using-python-only-no-fancy-frameworks-a1904b37222d#6154)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Milestone # 2: **[**Implementation of NaiveBayes Class****—****Defining Functions
    for Training & Testing**](https://towardsdatascience.com/na%C3%AFve-bayes-from-scratch-using-python-only-no-fancy-frameworks-a1904b37222d#fc37)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Milestone # 3: **[**Training NB Model on Training Dataset**](https://towardsdatascience.com/na%C3%AFve-bayes-from-scratch-using-python-only-no-fancy-frameworks-a1904b37222d#0287)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Milestone # 4: **[**Testing Using Trained NB Model**](https://towardsdatascience.com/na%C3%AFve-bayes-from-scratch-using-python-only-no-fancy-frameworks-a1904b37222d#a15f)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Milestone # 5: **[**Proving that the Code for NaiveBayes Class is Absolutely
    Generic!**](https://towardsdatascience.com/na%C3%AFve-bayes-from-scratch-using-python-only-no-fancy-frameworks-a1904b37222d#02f4)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we begin writing code for Naive Bayes in python, I assume you are familiar
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: Python Lists
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Numpy & just a tad bit of vectorized code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dictionaries
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Regex
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Let’s Begin the with the Pythonic Implementation !*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Defining Data Preprocessing Function**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s begin with a few imports that we would need while implementing Naive Bayes
  prefs: []
  type: TYPE_NORMAL
- en: '**Milestone # 1 Achieved** ????'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Implementation of NaiveBayes Class — Defining Functions for Training & Testing**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***The Bonus Part ***: We will be writing a a fully generic code for the NB
    Classifier! No matter how many classes come into the training dataset and whatever
    text dataset is given — it will still be able to train a fully working model ????
    ???? ????'
  prefs: []
  type: TYPE_NORMAL
- en: The code for NaiveBayes is just a *little extensive **—*but we just to need
    to spend a maximum of 10–15 minutes to grasp it! After that, you can surely technically
    call yourself a “NB Guru” ????
  prefs: []
  type: TYPE_NORMAL
- en: What is this code doing ??
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'There are in total four functions defined in the NaiveBayes Class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And the code is divided into two major functions i.e train & test functions.
    Once you understand the statements defined inside these two functions, you will
    surely get to know what the code is actually doing and in what order the other
    two functions are being called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The other two functions are defined to supplement these two major functions
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can view the above code in this [**Jupyter Notebook**](https://github.com/aishajv/Unfolding-Naive-Bayes-from-Scratch/blob/master/%23%20Unfolding%20Na%C3%AFve%20Bayes%20from%20Scratch!%20Take-2%20%F0%9F%8E%AC.ipynb) too
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is much much more easier to organize and reuse the code if we define a class
    of NB rather than use the traditional structured programming approach. That’s
    the reason of defining a NB class and all it’s relevant functions inside it.
  prefs: []
  type: TYPE_NORMAL
- en: We don’t just want to write code, rather we want to write beautiful, neat &
    clean, handy, and reusable code . Yes that’s right - we want to possess all the
    traits that a good data scientist could possibly have !
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And guess what? Whenever we will be dealing with a text classification problem
    that we intend to solve using NB, we will simply instantiate its object and by
    using the same programming interface, we will be able to train a NB classifier.
    Plus, as its the general principle of Object Oriented Programming that we only
    define functions relevant to a class inside that class, so all functions that
    are not relevant to NB class will be defined separately
  prefs: []
  type: TYPE_NORMAL
- en: '**Milestone # 2 Achieved** ???? ????'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets News, April 13: Python Libraries Data Scientists Should…](https://www.kdnuggets.com/2022/n15.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Gaussian Naive Bayes, Explained](https://www.kdnuggets.com/2023/03/gaussian-naive-bayes-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Naïve Bayes Algorithm: Everything You Need to Know](https://www.kdnuggets.com/2020/06/naive-bayes-algorithm-everything.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways Understanding Bayes Theorem Will Improve Your Data Science](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Frameworks for Approaching the Machine Learning Process](https://www.kdnuggets.com/2018/05/general-approaches-machine-learning-process.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chip Huyen shares frameworks and case studies for implementing ML systems](https://www.kdnuggets.com/2023/02/sphere-chip-huyen-shares-frameworks-case-studies-implementing-ml-systems.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
