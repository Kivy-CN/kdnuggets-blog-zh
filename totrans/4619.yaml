- en: 'Computer Vision for Beginners: Part 1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/07/computer-vision-beginners.html](https://www.kdnuggets.com/2019/07/computer-vision-beginners.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Jiwon Jeong](https://jjone36.github.io/), Data Science Researcher at
    Yonsei University and Project Instructor at DataCamp**'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/5007e1d7405109ae8a4dc2d54a52f3ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Computer Vision is one of the hottest topics in artificial intelligence. It
    is making tremendous advances in self-driving cars, robotics as well as in various
    photo correction apps. Steady progress in object detection is being made every
    day. GANs is also a thing researchers are putting their eyes on these days. Vision
    is showing us the future of technology and we can’t even imagine what will be
    the end of its possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'So do you want to take your first step in Computer Vision and participate in
    this latest movement? Welcome you are at the right place. From this article, we’re
    going to have a series of tutorials on the basics of image processing and object
    detection. This is the first part of OpenCV tutorial for beginners and the complete
    set of the series is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Understanding color models and drawing figures on images***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[The basics of image processing with filtering](https://towardsdatascience.com/computer-vision-for-beginners-part-2-29b3f9151874)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[From feature detection to face detection](https://towardsdatascience.com/computer-vision-for-beginners-part-3-79de62dbeef7)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Contour detection and having a little bit of fun](https://towardsdatascience.com/computer-vision-for-beginners-part-4-64a8d9856208)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first story of this series will be about installing OpenCV, explaining color
    models and drawing figures on images. The complete code for this tutorial is also
    available on [**Github**](https://github.com/jjone36/vision_4_beginners/blob/master/part1_introduction.ipynb).
    Now let’s get it started.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to OpenCV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[**Image processing**](https://en.wikipedia.org/wiki/Digital_image_processing) is
    performing some operations on images to get an intended manipulation. Think about
    what we do when we start a new data analysis. We do some data preprocessing and
    feature engineering. It’s the same with image processing. We do image processing
    to manipulate the pictures for extracting some useful information from them. We
    can reduce noises, control the brightness and color contrast. To learn detailed
    image processing fundamentals, visit [**this video**](https://www.youtube.com/watch?v=QMLbTEQJCaI)**.**'
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV stands for [***Open Source Computer Vision***](https://opencv.org/) library
    and it’s invented by Intel in 1999\. It’s first written in C/C++ so you may see
    tutorials more in C languages than Python. But now it’s also getting commonly
    used in Python for computer vision as well. First things first, let’s set up a
    proper environment for using OpenCV. The installation can be processed as follows
    but you can also find the detailed description [**here**](https://pypi.org/project/opencv-python/)**.**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After you finish the installation, try importing the package to see if it works
    well. If you get the return without any errors, then you’re now ready to go!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first step we’re going to do with OpenCV is importing an image and it can
    be done as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/5ad18b325ea14b7b12dc6d4d9ab0a8d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Have you ever been to [Burano](https://en.wikipedia.org/wiki/Burano)? It’s one
    of the most beautiful islands in Italy. If you haven’t been there, you should
    definitely check this place for your next holidays. But if you already know this
    island, you’d probably notice there’s something different in this picture. It’s
    a little bit different from the pictures we usually see from Burano. It should
    be more delightful than this!
  prefs: []
  type: TYPE_NORMAL
- en: This is because the default setting of the color mode in OpenCV comes in the
    order of BGR, which is different from that of Matplotlib. Therefore to see the
    image in RGB mode, we need to convert it from BGR to RGB as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/c769820a7097aa5f0f97a50047f590a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, this is Burano! Such a lovely island in Italy!
  prefs: []
  type: TYPE_NORMAL
- en: More than just RGB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s talk about color modes a little bit more. [***A color model***](https://www.designersinsights.com/designer-resources/understanding-color-models/)is
    a system for creating a full range of colors using the primary colors. There are
    two different color models here: ***additive color models ***and ***subtractive
    color models***. Additive models use light to represent colors in computer screens
    while subtractive models use inks to print those digital images on papers. The
    primary colors are red, green and blue (RGB) for the first one and cyan, magenta,
    yellow and black (CMYK) for the latter one. All the other colors we see on images
    are made by combining or mixing these primary colors. So the pictures can be depicted
    a little bit differently when they are represented in RGB and CMYK.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/17b953b15aad988f3ba2669a62d4a533.png)([Source](https://www.kinkos.co.kr/bbs/board.php?bo_table=k_magazine&wr_id=9&page=2))'
  prefs: []
  type: TYPE_IMG
- en: You would be pretty accustomed to these two kinds of models. In the world of
    color models, however, there are more than two kinds of models. Among them, ***grayscale,
    HSV ***and ***HLS ***are the ones you’re going to see quite often in computer
    vision.
  prefs: []
  type: TYPE_NORMAL
- en: A grayscale is simple. It represents images and morphologies by the intensity
    of black and white, which means it has only one channel. To see images in grayscale,
    we need to convert the color mode into gray just as what we did with the BGR image
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/3aac07bc0481921b78e5c9c40a8d7211.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Actually, RGB images are made up by stacking three channels: R, G, and B. So
    if we take each channel and depict them one by one, we can comprehend how the
    color channels are structured.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/64bd3365de212fee1b86604e14e60e5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Take a look at the images above. The three images show you how each channel
    is composed of. In the R channel picture, the part with the high saturation of
    red colors looks white. Why is that? This is because the values in the red color
    parts will be near 255\. And in grayscale mode, the higher the value is, the whiter
    the color becomes. You can also check this with G or B channels and compare how
    certain parts differ one from another.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/b1729b10ba99c22ed72bca22ca8e0374.png)'
  prefs: []
  type: TYPE_IMG
- en: HSV and HLS take a bit different aspect. As you can see above, they have a three-dimensional
    representation, and it’s more similar to the way of human perception. ***HSV ***stands
    for hue, saturation and value. ***HSL ***stands for hue, saturation and lightness.
    The center axis for HSV is the value of colors while that for HSL is the amount
    of light. Along the angles from the center axis, there is hue, the actual colors.
    And the distance from the center axis belongs to saturation. Transforming the
    color mode can be done as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/fb6826753e3e9e9e1ab340e93c462c71.png)'
  prefs: []
  type: TYPE_IMG
- en: But why do we have to transform the colors? What are these for? One example
    that can give the answer is lane detection. Please take a look at the picture
    below. See how the lanes are detected in different color modes. During the computer
    vision task, we do multiple color mode transformation along with masking. If you’d
    like to find more about how image processing is applied in the lane detection
    task, feel free to check out [**this post**](https://towardsdatascience.com/finding-lane-lines-simple-pipeline-for-lane-detection-d02b62e7572b) by [nachiket
    tanksale](https://towardsdatascience.com/u/26a6ee15a5c5).
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/c2ac8d7d19ecde6eebb7b5c59510ee32.png)[RGB vs Grayscale
    (darkened) vs HSV vs HSL](https://towardsdatascience.com/finding-lane-lines-simple-pipeline-for-lane-detection-d02b62e7572b)'
  prefs: []
  type: TYPE_IMG
- en: Now I believe you get the idea. Image processing is ‘data preprocessing.’ It’s
    reducing noises and extracting useful patterns to make classification and detection
    tasks easier. Therefore all these techniques including the ones we’ll discuss
    later, are for helping the model to detect the patterns easier.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing on images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s bring some figures on the image. Now, we’re going to Paris. Have you ever
    heard of [the wall of love](https://en.wikipedia.org/wiki/Wall_of_Love)? It’s
    a wall which is filled with the words “I love you” in all kinds of international
    languages. What we’re going to do is finding the words in our language and marking
    them with a rectangle. As I’m from South Korea, I’ll look up for ‘I love you’
    in Korean. First, I’ll make a copy of the original image and then draw a rectangle
    with `cv2.rectangle()`We need to give the coordinates values for the upper left
    point and the lower right point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/4ef02ff84e85b9b46ba6337d092e0631.png)'
  prefs: []
  type: TYPE_IMG
- en: Great! I think I caught the right position. Let’s try again. I can see one more
    Korean word from the image so I’ll make a circle this time. With `cv2.circle()` ,
    we need to specify the point of its center and the length of its radius.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/94488ee3f81ceb9af5f97d188da32fdf.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also put text data on the image. Why don’t we write the name of this
    wall this time? With `cv2.putText()` , we can designate the position and the font
    style and size of the text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/206a3dd32322e441f68653601a9e92a2.png)'
  prefs: []
  type: TYPE_IMG
- en: This is really a “lovely” wall, isn’t it? Try this yourself and find “I love
    you” in your language! ????
  prefs: []
  type: TYPE_NORMAL
- en: More than images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we’ve been to Italy and France. Where would you like to go next? Why don’t
    we put a map and mark the places? We’re going to create a window and draw figures
    not by designating the points but by clicking directly on the window. Let’s try
    a circle first. We first create a function which will draw a circle with the data
    for the position and clicking of the mouse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With `cv2.EVENT_LBUTTONDOWN` or `cv2.EVENT_RBUTTONDOWN` , we can bring the data
    for the position when we press the buttons of the mouse. The position of the mouse
    will be `(x, y)` and we’ll draw a circle whose center is at that point.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: We’ll set a map as the background of the window and name the window as *my_drawing*.
    The name of the window can be anything, but it should be the same because this
    acts like the id of the window. Using the `cv2.setMouseCallback()` , we make a
    connection between the window and the function `draw_circle` we made at step 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now we execute the window using while loop. Don’t forget to set the break unless
    you are making an infinite loop. The condition of the if clause is setting the
    window to be shut down when we press ESC on the keyboard. Save this as a file
    and import it on your terminal. If you’re to use jupyter lab, put the codes in
    one cell and execute. Now, tell me! Where do you want to go?
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/da5b0ca41e398dbd74c9dcb12c99aca8.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s try a rectangle. As a rectangle requires two points for **pt1** and **pt2** in `cv2.rectangle()` ,
    we need an additional step to set the first click point as **pt1** and the last
    point as **pt2**. And we’re going to detect the movement of the mouse with `cv2.EVENT_MOUSEMOVE` and `cv2.EVENT_LBUTTONUP` .
  prefs: []
  type: TYPE_NORMAL
- en: We first define `drawing = False` as a default. When the left button is pressed, `drawing` becomes
    true and we give that first position as **pt1**. If drawing is on, it’ll take
    the current point as **pt2 **and keep drawing rectangles while we move the mouse.
    It’s like overlapping the figures. When the left button is up, `drawing` becomes
    false and it takes the last position of the mouse as its final point of **pt2**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Replace `draw_circle` function to `draw_rectangle` in step 1\. Please don’t
    forget to make a change inside the callback function, `cv2.setMouseCallback()` as
    well. So the whole code script will be as follows. Save this script file and run
    it on the terminal or the jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: What’s next?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Did you enjoy the first time with OpenCV? You can also try other functions such
    as drawing a line or a polygon. Feel free to check the documentation for it, which
    can be found [**here**](https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html).
    Next time, we’re going to talk about more advanced technologies such as attaching
    two different images, image contour and object detection.
  prefs: []
  type: TYPE_NORMAL
- en: Are there errors you would love to correct? Please share your insight with us.
    I’m always open to talk, so feel free to leave comments below and share your thoughts.
    I also share interesting and useful resources on[ LinkedIn](https://www.linkedin.com/in/jiwon-jeong/) so
    feel free to follow or reach out to me. I’ll be back again with another interesting
    story next time!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Jiwon Jeong](https://jjone36.github.io/)**, is a Data Scientist currently
    undertaking a Master''s degree in Industrial Engineering and is a Project Instructor
    for DataCamp.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/computer-vision-for-beginners-part-1-7cca775f58ef).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[End-to-End Machine Learning: Making videos from images](/2019/05/making-videos-from-images.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Preprocessing for Deep Learning: From covariance matrix to image whitening](/2018/10/preprocessing-deep-learning-covariance-matrix-image-whitening.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Basic Image Data Analysis Using Numpy and OpenCV – Part 1](/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[TensorFlow for Computer Vision - Transfer Learning Made Easy](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Applications of Computer Vision](https://www.kdnuggets.com/2022/03/5-applications-computer-vision.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Things You Need To Know About Data Management And Why It Matters…](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DINOv2: Self-Supervised Computer Vision Models by Meta AI](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
