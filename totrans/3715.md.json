["```py\npip install spacy \n```", "```py\npython -m spacy download en_core_web_sm \npython -m spacy download en_core_web_md \n```", "```py\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\") \n```", "```py\ntext = \"KDNuggets is a wonderful website to learn machine learning with python\" \n```", "```py\ndoc = nlp(text)\n```", "```py\nfor token in doc:\n\tprint(token.text)\n```", "```py\nKDNuggets\nis\na\nwonderful\nwebsite\nto\nlearn\nmachine\nlearning\nwith\npython\n```", "```py\nfor token in doc:\n\tif token.is_stop == True:\n\t\tprint(token)\n```", "```py\nis \na \nto \nwith \n```", "```py\nfor token in doc:\n\tprint(token.lemma_)\n```", "```py\nkdnugget \nbe \na \nwonderful \nwebsite \nto \nlearn \nmachine \nlearning \nwith \npython\n```", "```py\nfor token in doc:\n\tprint(token.text,':',token.pos_)\n```", "```py\nKDNuggets : NOUN\nis : AUX\na : DET\nwonderful : ADJ\nwebsite : NOUN\nto : PART\nlearn : VERB\nmachine : NOUN\nlearning : NOUN\nwith : ADP\npython : NOUN\n```", "```py\nfor token in doc:\n\tprint(token.text, '-->', token.dep_) \n```", "```py\nKDNuggets --> nsubj\nis --> ROOT\na --> det\nwonderful --> amod\nwebsite --> attr\nto --> aux\nlearn --> relcl\nmachine --> compound\nlearning --> dobj\nwith --> prep\npython --> pobj\n```", "```py\nfor ent in doc.ents: \n\tprint(ent.text, ent.start_char, ent.end_char, ent.label_)\n```", "```py\nKDNuggets 0 9 ORG\n```", "```py\nnlp = spacy.load(\"en_core_web_md\") \n\ndoc1 = nlp(\"Summers in India are extremely hot.\") \ndoc2 = nlp(\"During summers a lot of regions in India experience severe temperatures.\")\ndoc3 = nlp(\"People drink lemon juice and wear shorts during summers.\")\n\nprint(\"Similarity score of doc1 and doc2:\", doc1.similarity(doc2)) \nprint(\"Similarity score of doc1 and doc3:\", doc1.similarity(doc3))\n```", "```py\nSimilarity score of doc1 and doc2: 0.7808246189842116\nSimilarity score of doc1 and doc3: 0.6487306770376172 \n```", "```py\nfrom spacy.matcher import Matcher\nmatcher = Matcher(nlp.vocab)\n\ndoc = nlp(\"cold drinks help to deal with heat in summers\")\npattern = [{'TEXT': 'cold'}, {'TEXT': 'drinks'}]\n\nmatcher.add('rule_1', [pattern], on_match=None)\nmatches = matcher(doc) \n\nfor _, start, end in matches:\n    matched_segment = doc[start:end]\n    print(matched_segment.text)\n```", "```py\ncold drinks\nLet's also look at another example wherein we attempt to find the word 'book' but only when it is a 'noun'.\n```", "```py\nfrom spacy.matcher import Matcher\nmatcher = Matcher(nlp.vocab)\n\ndoc1 = nlp(\"I am reading the book called Huntington.\")\ndoc2 = nlp(\"I wish to book a flight ticket to Italy.\")\n\npattern2 = [{'TEXT': 'book', 'POS': 'NOUN'}]\n\nmatcher.add('rule_2', [pattern2], on_match=None)\n\nmatches = matcher(doc1)\nprint(doc1[matches[0][1]:matches[0][2]])\n\nmatches = matcher(doc2)\nprint(matches)\n```", "```py\nbook\n[]\n```"]