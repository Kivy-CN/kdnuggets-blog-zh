- en: Stop Hard Coding in a Data Science Project – Use Config Files Instead
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Problem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In your data science project, certain values tend to change frequently, such
    as file names, selected features, train-test split ratio, and hyperparameters
    for your model.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/cefba5d985ec134fe74d605c3ce2058e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is okay to hard-code these values when writing ad-hoc code for hypothesis
    testing or demonstration purposes. However, as your code base and team expand,
    it becomes essential to avoid hard-coding because it can give rise to various
    issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maintainability**: If values are scattered throughout the codebase, updating
    them consistently becomes harder. This can lead to errors or inconsistencies when
    values must be updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/a819e669d53b3efcbcdd3bc1098bacaa.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Reusability**: Hardcoding values limits the reusability of code for different
    scenarios.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/75cfa4101df5d9f497bdb8971e892093.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Security concerns**: Hardcoding sensitive information like passwords or API
    keys directly into the code can be a security risk. If the code is shared or exposed,
    it could lead to unauthorized access or data breaches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/d1028157ab86b81b450243c9e11bd062.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Testing and debugging**: Hardcoded values can make testing and debugging
    more challenging. If values are hard-wired into the code, it becomes difficult
    to simulate different scenarios or test edge cases effectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/c15f80670f1e33cb1f7cc2762e9dfe23.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution – Configuration Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Configuration files solve these problems by offering the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Separation of configuration from code**: A config file allows you to store
    parameters separately from the code, which improves code maintainability and readability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/3a2cf21b8c9a7c7b6db102109c10aef0.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Flexibility and modifiability**: With a config file, you can easily modify
    project configurations without modifying the code itself. This flexibility allows
    for quick experimentation, parameter tuning, and adapting the project to different
    scenarios or environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/e3ef1c96c129aa9ed89b90a2df361bc4.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Version control**: Storing the config file in version control allows you
    to track changes to the configuration over time. This helps maintain a historical
    record of the project’s configurations and facilitates collaboration among team
    members.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/3b50a337a4b2b05a514700daa767d06b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Deployment and productionization**: When deploying a data science project
    to a production environment, a config file enables easy customization of settings
    specific to the production environment without the need for code modifications.
    This separation of configuration from code simplifies the deployment process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Among the numerous Python libraries available for creating configuration files, [Hydra](https://hydra.cc/) stands
    out as my preferred configuration management tool because of its impressive set
    of features, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Convenient parameter access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Command-line configuration override
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composition of configurations from multiple sources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execution of multiple jobs with different configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dig deeper into each of these features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Feel free to play and fork the source code of this article here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[View on GitHub](https://github.com/khuyentran1401/hydra-demo)'
  prefs: []
  type: TYPE_NORMAL
- en: Convenient parameter access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose all configuration files are stored under the `conf` folder and all Python
    scripts are stored under the `src` folder.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And the `main.yaml` file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/dd2082f71143219ff4241c390c733574.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing a configuration file within a Python script is as simple as applying
    a single decorator to your Python function.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/365163d28b5863e81258ebe08c4dec98.png)'
  prefs: []
  type: TYPE_IMG
- en: To access a specific parameter from the configuration file, we can use the dot
    notation (.e.g., `config.process.cols_to_drop`), which is a cleaner and more intuitive
    way compared to using brackets (e.g., `config['process']['cols_to_drop']`).
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/d0b832c5320a36999a8d2b811b449441.png)'
  prefs: []
  type: TYPE_IMG
- en: This straightforward approach allows you to effortlessly retrieve the desired
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line configuration override
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s say you are experimenting with different `test_size`. It is time-consuming
    to repeatedly open your configuration file and modify the `test_size` value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/092d6c03e28cdd7e3241243fa909eb84.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily, Hydra makes it easy to directly overwrite configuration from the command
    line. This flexibility allows for quick adjustments and fine-tuning without modifying
    the underlying configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/c149dc88b1784ab4a7b39e90812ba3ba.png)'
  prefs: []
  type: TYPE_IMG
- en: Composition of configurations from multiple sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine you want to experiment with various combinations of data processing
    methods and model hyperparameters. While you could manually edit the configuration
    file each time you run a new experiment, this approach can be time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/342d72099529870736080ee9e9259ef6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Hydra enables the composition of configurations from multiple sources with
    config groups. To create a config group for data processing, create a directory
    called `process` to hold a file for each processing method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/a657e1e81facaa957ff2e82307a16410.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to use the `process1.yaml` file by default, add it to Hydra’s default
    list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/c6e0ebfe72a906ffc1587f5e3e5b37c5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Follow the same procedures to create a config group for training hyperparameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/3004a5a767edfdaeb9d9c2683b32f402.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set `train1` as the default config file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/20d582a2dff3abcb68e37f6f61e5d037.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now running the application will use the parameters in `process1.yaml` file
    and `model1.yaml` file by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/1636d5af64af907827b84a8a37ffab6c.png)'
  prefs: []
  type: TYPE_IMG
- en: This capability is particularly useful when different configuration files need
    to be combined seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-run
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Suppose you want to conduct experiments with multiple processing methods, applying
    each configuration one by one can be a time-consuming task.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/6f006115d6aa0ce5f9d08a11fc317f43.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily, Hydra allows you to run the same application with different configurations
    simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '![Stop Hard Coding in a Data Science Project - Use Config Files Instead](../Images/4caa4645b70b6c8c6381d3b1073444a1.png)'
  prefs: []
  type: TYPE_IMG
- en: This approach streamlines the process of running an application with various
    parameters, ultimately saving valuable time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! You have just learned about the importance of using configuration
    files and how to create ones using Hydra. I hope this article will give you the
    knowledge needed to create your own configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Khuyen Tran](https://www.linkedin.com/in/khuyen-tran-1401/)** is a prolific
    data science writer, and has written [an impressive collection of useful data
    science topics along with code and articles](https://github.com/khuyentran1401/Data-science).
    Khuyne is currently looking for a machine learning engineer role, a data scientist
    role, or a developer advocate role in Bay Area after May 2022, so please reach
    out if you are looking for someone with her set of skills.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://mathdatasimplified.com/2023/05/25/stop-hard-coding-in-a-data-science-project-use-configuration-files-instead/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[3 Hard Python Coding Interview Questions For Data Science](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Free Python Project Coding Course](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Want to Become a Data Scientist? Part 1: 10 Hard Skills You Need](https://www.kdnuggets.com/want-to-become-a-data-scientist-part-1-10-hard-skills-you-need)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Hard is it to Get into FAANG Companies](https://www.kdnuggets.com/2023/05/hard-get-faang-companies.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
