- en: Customize Your Data Frame Column Names in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/08/customize-data-frame-column-names-python.html](https://www.kdnuggets.com/2022/08/customize-data-frame-column-names-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/870b0ab6c500f79158301a70882fd8c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: Be it any profession in data science apart from the regular data cleaning and
    model pipeline building, an individual is also required to produce results in
    a way which is easily interpretable to the business. In this tutorial we will
    explore four scenarios in which you can apply different transformations to all
    Data Frame columns simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Before deep diving into the scenarios lets import pandas library and create
    a Data Frame named df with the following column names:**'
  prefs: []
  type: TYPE_NORMAL
- en: week_one_attendance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: week_two_attendance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: week_three_attendance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: week_four_attendance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/09b34401e88dbc1af33bcd7e19633c95.png)'
  prefs: []
  type: TYPE_IMG
- en: '**LET’S GET KICKSTARTED WITH THE SCENARIOS**'
  prefs: []
  type: TYPE_NORMAL
- en: Scenario 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the code below a [for loop](https://www.programiz.com/python-programming/for-loop)
    is used to iterate over all the columns of the Data Frame, where in every iteration
    each column is converted to upper case using the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html)
    method
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/6fd09eeff594fd3192843055a83cf9a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Scenario2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the code below we will be declaring an empty [dictionary](https://www.w3schools.com/python/python_dictionaries.asp)
    named **columnnames** and then declare another **variable** named **count to 0**
  prefs: []
  type: TYPE_NORMAL
- en: We would then be using [for loop](https://www.programiz.com/python-programming/for-loop)
    to iterate over all the columns of the Data Frame, where in every iteration the
    count variable would be incremented by 1\. The incremented value would then be
    used inside the [fstring](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)
    to generate a new column name. The original and new column names will be added
    to the dictionary as key, value pairs in every iteration.
  prefs: []
  type: TYPE_NORMAL
- en: After constructing the dictionary columnnames with the original and new column
    names we will then passing the dictionary to the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) 
    method
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/01e7f112fa72eef5530e7a50ca151d7e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/73b0babe14a5b32c3a0d1ca52d0bb993.png)'
  prefs: []
  type: TYPE_IMG
- en: Scenario 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the code below we will declare an empty [dictionary](https://www.w3schools.com/python/python_dictionaries.asp)
    named **columnnames**
  prefs: []
  type: TYPE_NORMAL
- en: We would then be using [for loop](https://www.programiz.com/python-programming/for-loop) 
    to iterate over all the columns of the Data Frame, where in every iteration the
    first occurrence of the underscore will be replaced by no space. The original
    and new column names will be added to the dictionary as key, value pairs in every
    iteration.
  prefs: []
  type: TYPE_NORMAL
- en: After constructing the dictionary columnnames with the original and new column
    names, we will then passing the dictionary to the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) 
    method
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/4b99f216a947e92c7f0c2b9c60f7ef9f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/f6b74516170f875b804d8b6e35969ffd.png)'
  prefs: []
  type: TYPE_IMG
- en: Scenario 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the code below we will be declaring an empty [dictionary](https://www.w3schools.com/python/python_dictionaries.asp)
    named **columnnames** and then declare another **variable** named **count to 0**
  prefs: []
  type: TYPE_NORMAL
- en: We would then be using [for loop](https://www.programiz.com/python-programming/for-loop)
    to iterate over all the columns of the Data Frame, where in every iteration the
    count variable would be incremented by 1\. The incremented value would then be
    used inside the [fstring](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)
    to generate a new column name having the positions of the first and last word
    swapped. The original and new column names will be added to the dictionary as
    key, value pairs in every iteration.
  prefs: []
  type: TYPE_NORMAL
- en: After constructing the dictionary column names with the original and new column
    names we will then passing the dictionary to the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) 
    method
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/8ef393a9428224fe5b830f4192d2f893.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customize Your Data Frame Column Names in Python](../Images/2971a94c297be8f98d7951ad060fb7a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than manually updating every column name one by one, by using for loops
    and different methods available with Python Strings we were able to update the
    values of all the columns of a Data Frame simultaneously hence saving an ample
    amount of time
  prefs: []
  type: TYPE_NORMAL
- en: '**[Priya Sengar](https://www.linkedin.com/in/priya-sengar/)** (**Medium**,
    **Github**) is a Data Scientist with Old Dominion University. Priya is passionate
    about solving problems in data and converting them into solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Best Architecture for Your Text Classification Task: Benchmarking…](https://www.kdnuggets.com/2023/04/best-architecture-text-classification-task-benchmarking-options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Comment Your Python Code as a Data Scientist](https://www.kdnuggets.com/how-to-comment-your-python-code-as-a-data-scientist)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n01, Jan 5: 3 Tools to Track and Visualize…](https://www.kdnuggets.com/2022/n01.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Novice to Ninja: Why Your Python Skills Matter in Data Science](https://www.kdnuggets.com/novice-to-ninja-why-your-python-skills-matter-in-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
