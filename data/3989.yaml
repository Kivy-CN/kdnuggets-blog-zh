- en: Managing Python Dependencies with Poetry vs Conda & Pip
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理 Python 依赖项与 Poetry 对比 Conda 和 Pip
- en: 原文：[https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)
- en: '![Managing Python Dependencies with Poetry vs Conda & Pip](../Images/515a1e0530e130942288a0c92f095f58.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Managing Python Dependencies with Poetry vs Conda & Pip](../Images/515a1e0530e130942288a0c92f095f58.png)'
- en: Effectively managing dependencies, including libraries, functions, and packages
    crucial for project functionality, is facilitated by utilizing a package manager.
    Pip, a widely adopted classic, serves as a go-to for many developers, enabling
    the seamless installation of Python packages from the Python Package Index (PyPI).
    Conda, recognized not only as a package manager but also as an environment manager,
    extends its capabilities to handle both Python and non-Python dependencies, making
    it a versatile tool. For our purposes, we will focus on using it mainly for Python-only
    environments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地管理依赖项，包括对项目功能至关重要的库、函数和包，可以通过使用包管理器来实现。Pip 是一种被广泛采用的经典工具，为许多开发者提供了从 Python
    包索引 (PyPI) 无缝安装 Python 包的能力。Conda 不仅作为包管理器被认可，还作为环境管理器，扩展了处理 Python 和非 Python
    依赖项的能力，使其成为一个多功能的工具。就我们的目的而言，我们将主要关注用于纯 Python 环境。
- en: Pip and Conda stand out as reliable tools, extensively used and trusted by the
    developer community. However, as projects expand, maintaining organization amid
    a growing number of dependencies becomes a challenge. In this context, Poetry
    emerges as a modern and organized solution for dependency management.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Pip 和 Conda 是值得信赖的工具，在开发者社区中被广泛使用和信任。然而，随着项目的扩展，在不断增加的依赖项中保持组织变得具有挑战性。在这种背景下，Poetry
    作为一种现代化和有序的依赖管理解决方案应运而生。
- en: Poetry, built on top of Pip, introduces a contemporary approach to managing
    dependencies. It extends beyond being a simple fusion of Pip and a virtual environment
    serving as a comprehensive tool that encompasses dependency management, project
    packaging, and build processes. The comparison to Conda is nuanced; Poetry aims
    to simplify the packaging and distribution of Python projects, offering a distinct
    set of features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 基于 Pip 构建，提出了一种现代化的依赖管理方法。它不仅仅是 Pip 和虚拟环境的简单结合，而是一个涵盖依赖管理、项目打包和构建过程的全面工具。与
    Conda 的比较则更为细致；Poetry 旨在简化 Python 项目的打包和分发，提供了一套独特的功能。
- en: Pip and Conda remain valuable choices for managing dependencies, with Conda's
    versatility in handling diverse dependencies. Poetry, on the other hand, provides
    a modernized and comprehensive solution, offering simplicity in managing Python
    projects and their dependencies. Choosing the appropriate tool depends on the
    specific requirements of the project and the preferences of the developer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Pip 和 Conda 仍然是管理依赖项的宝贵选择，Conda 在处理多样化依赖项方面具有灵活性。另一方面，Poetry 提供了一种现代化且全面的解决方案，简化了
    Python 项目及其依赖项的管理。选择合适的工具取决于项目的具体需求和开发者的偏好。
- en: Package Management
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 包管理
- en: 'Poetry uses a pyproject.toml file to specify the configuration for your project
    accompanied by an automatically generated lockfile. The pyproject.toml file looks
    like this:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 使用 pyproject.toml 文件来指定项目的配置，并附带一个自动生成的锁定文件。pyproject.toml 文件的样子如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Like other dependency managers, Poetry diligently keeps track of package versions
    in the current environment through a lockfile. This lockfile contains project
    metadata, package version parameters, and more, ensuring consistency across different
    environments. Developers can intelligently separate dependencies into dev-based
    and prod-based categories within the toml files, streamlining deployment environments
    and reducing the risk of conflicts, especially on different operating systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 和其他依赖管理工具一样，Poetry 通过锁定文件认真跟踪当前环境中的包版本。这个锁定文件包含项目元数据、包版本参数等，确保在不同环境中的一致性。开发者可以在
    toml 文件中智能地将依赖项分为 dev 和 prod 类别，从而简化部署环境并减少冲突的风险，尤其是在不同的操作系统上。
- en: Poetry's pyproject.toml file is designed to address certain limitations found
    in Pip's requirement.txt and Conda's environment.yaml files. Unlike Pip and Conda,
    which often produce lengthy dependency lists without metadata in a separate file,
    Poetry aims for a more organized and concise representation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 的 `pyproject.toml` 文件旨在解决 Pip 的 `requirement.txt` 和 Conda 的 `environment.yaml`
    文件中发现的某些限制。与常常生成冗长依赖列表而没有单独文件中的元数据的 Pip 和 Conda 不同，Poetry 追求更有组织且简洁的表现形式。
- en: While it's true that Pip and Conda, by default, lack a lock feature, it's important
    to note that recent versions offer options for generating lockfiles via installed
    libraries like pip-tools and conda-lock. This functionality ensures that different
    users can install the intended library versions specified in the requirements.txt
    file, promoting reproducibility.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Pip 和 Conda 默认缺乏锁定功能，但需要注意的是，最近版本提供了通过像 `pip-tools` 和 `conda-lock` 这样的已安装库生成锁文件的选项。这种功能确保不同用户可以安装
    `requirements.txt` 文件中指定的目标库版本，从而促进了可重复性。
- en: Poetry emerges as a modern and organized solution for Python dependency management,
    offering improved organization, version control, and flexibility compared to traditional
    tools like Pip and Conda.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 作为一个现代且有组织的 Python 依赖管理解决方案，相比于传统工具如 Pip 和 Conda，提供了改进的组织、版本控制和灵活性。
- en: Updating, Installing, and Removing Dependencies
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新、安装和移除依赖
- en: With Poetry, updating libraries is simple and accounts for other dependencies
    to ensure they are up to date accordingly. Poetry has a mass update command that
    will update your dependencies (according to your toml file) while keeping all
    dependencies still compatible with one another and maintaining package version
    parameters inside found in the lock file. This will simultaneously update your
    lock file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Poetry 更新库非常简单，并会考虑其他依赖以确保它们也相应更新。Poetry 有一个批量更新命令，会根据你的 `toml` 文件更新依赖，同时保持所有依赖之间的兼容性，并维护锁文件中的包版本参数。这将同时更新你的锁文件。
- en: As for installation, it could not get any simpler. To install dependencies with
    Poetry you can use the poetry add function that you can either specify the version,
    use logic to specify version parameters (greater than less than), or use flags
    like @latest which will install the most recenter version of the package from
    PyPI. You can even group multiple packages in the same add function. Any newly
    installed package is automatically resolved to maintain the correct dependencies.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 至于安装，操作简单至极。要使用 Poetry 安装依赖，你可以使用 `poetry add` 函数，你可以指定版本，使用逻辑指定版本参数（大于、小于），或使用类似
    `@latest` 的标志，它将从 PyPI 安装该包的最新版本。你甚至可以在同一个添加函数中组合多个包。任何新安装的包都会自动解决以维持正确的依赖关系。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As for the classic dependency managers, let's test to see what happens when
    we try to install an older incompatible version. Pip installed packages will output
    errors and conflicts but will ultimately still install the package which can lead
    to development that is not ideal. Conda does have a solver for errors in compatibility
    and will notify the user, but immediately goes into search mode to solve the compatibility
    issue outputting a secondary error when it cannot find a solution.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 至于经典的依赖管理工具，我们来测试一下当尝试安装一个较旧的不兼容版本时会发生什么。Pip 安装的包将输出错误和冲突，但最终仍会安装该包，这可能导致开发情况不理想。Conda
    确实有一个解决器来处理兼容性错误并会通知用户，但在找不到解决方案时会立即进入搜索模式，输出次级错误。
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Poetry has an immediate response to dependency compatibility errors for fast
    and early notice of conflicts. It refuses to continue the installation, so the
    user is now in charge of either finding a different version of the new package
    or existing package. We feel that this allows more control as opposed to Conda’s
    immediate action.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 对依赖兼容性错误有即时响应，能快速并早期通知冲突。它拒绝继续安装，因此用户需要负责寻找不同版本的新包或现有包。我们认为这比 Conda 的即时行动提供了更多控制。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Last but not least is Poetry’s uninstallation of packages. Some packages require
    more dependencies that are installed. For Pip, its removal of a package will only
    uninstall the defined package and nothing else. Conda will remove some packages
    but not all dependencies. Poetry on the other hand will remove the package and
    all its dependencies to keep your list of dependencies clutter free.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是 Poetry 的包卸载。一些包需要更多的依赖项。对于 Pip，它的包卸载只会卸载定义的包，而不会影响其他包。Conda 会删除一些包，但不是所有的依赖项。另一方面，Poetry
    会删除包及其所有依赖项，以保持依赖项列表的整洁。
- en: Is Poetry Compatible with Existing Pip or Conda Projects?
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Poetry 是否兼容现有的 Pip 或 Conda 项目？
- en: Yes, Poetry is compatible with existing projects managed by Pip or Conda. Just
    initialize your code using Poetry's Poetry.toml format and run it to grab the
    library of packages and its dependencies, allowing for a seamless transition.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，Poetry 兼容现有的由 Pip 或 Conda 管理的项目。只需使用 Poetry 的 `Poetry.toml` 格式初始化你的代码并运行它，即可获取包库及其依赖项，实现无缝过渡。
- en: 'If you have an existing project that uses Pip or Conda, you can migrate it
    to Poetry without much difficulty. Poetry uses its own pyproject.toml file to
    manage project dependencies and settings. To start using Poetry in your project,
    you can follow these steps:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个使用 Pip 或 Conda 的现有项目，你可以毫不费力地将其迁移到 Poetry。Poetry 使用自己的 `pyproject.toml`
    文件来管理项目的依赖项和设置。要在你的项目中开始使用 Poetry，你可以按照以下步骤进行：
- en: 1\. Install Poetry either by curling and piping or using Pip
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 1\. 通过 curl 和管道或者使用 Pip 安装 Poetry
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 2\. Navigate to the root directory of your existing project.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 导航到你现有项目的根目录。
- en: '3\. Initialize Poetry in your project directory:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 在你的项目目录中初始化 Poetry：
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This command will guide you through a series of prompts to set up the initial
    configuration for your project.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令将引导你通过一系列提示来设置你项目的初始配置。
- en: 4\. Once the initialization is complete, Poetry will create the pyproject.toml
    in your project director. Open the toml file to add or modify your project's dependencies
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 初始化完成后，Poetry 会在你的项目目录中创建 `pyproject.toml` 文件。打开这个 toml 文件以添加或修改你的项目依赖项。
- en: 5\. To install the existing dependencies in your project to
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 安装项目中的现有依赖项到
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will create a virtual environment and install the project dependencies
    within it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个虚拟环境，并在其中安装项目的依赖项。
- en: 6\. You can now use the Poetry run command to execute your project's scripts,
    similar to how you would use Python or Conda commands.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 现在你可以使用 Poetry 的 run 命令来执行你项目的脚本，类似于你使用 Python 或 Conda 命令的方式。
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Poetry manages the virtual environment and dependency resolution for your project,
    making it compatible with existing Pip or Conda projects. It simplifies the management
    of dependencies and allows for consistent package installations across different
    environments.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 管理你的项目的虚拟环境和依赖项解析，使其兼容现有的 Pip 或 Conda 项目。它简化了依赖项管理，并允许在不同环境中进行一致的包安装。
- en: 'Note: It''s always a good practice to back up your project before making any
    significant changes to its configuration or dependency management tools.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在对项目的配置或依赖项管理工具进行任何重大更改之前，备份项目始终是一个好习惯。
- en: Closing Thoughts
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束语
- en: Making sure the right versions of the packages are in your code environment
    is essential for getting the right results every time. Slight changes to the backend
    of your code can alter the outcome. But also, keeping those packages and libraries
    up to date is just as important, to leverage the innovations each patch provides
    the next.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确保包的正确版本在你的代码环境中是至关重要的，以便每次都能获得正确的结果。代码后端的轻微变化可能会改变结果。同时，保持这些包和库的更新同样重要，以利用每个补丁提供的创新。
- en: To manage these dependencies in your code, Poetry is a great tool for those
    working with more complex and diverse projects with a higher number of dependencies.
    While Pip and Conda are still viable options, they are more suited for smaller
    environments that are less complex. Not everyone might use Poetry, but since Pip
    has been around forever, it may be worth the ease of use to just use Pip.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于处理更多复杂和多样化项目、依赖项较多的情况，Poetry 是一个很好的工具来管理这些依赖项。虽然 Pip 和 Conda 仍然是可行的选项，但它们更适合较小的、不那么复杂的环境。不是每个人都可能使用
    Poetry，但由于 Pip 存在已久，使用 Pip 的便利性可能值得考虑。
- en: But if your project and your workload value the importance of organization and
    are willing to explore new tools to improve your process, Poetry is a tool you
    should consider. The extended functionality from Pip to Poetry really makes a
    difference. We encourage you to try Poetry out for yourself.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你的项目和工作负载重视组织的重要性，并愿意探索新工具以改善你的流程，Poetry是你应该考虑的工具。从Pip到Poetry的扩展功能确实带来了变化。我们鼓励你亲自试用Poetry。
- en: '[Original](https://www.exxactcorp.com/blog/Deep-Learning/managing-python-dependencies-with-poetry-vs-conda-pip).
    Republished with permission.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.exxactcorp.com/blog/Deep-Learning/managing-python-dependencies-with-poetry-vs-conda-pip)。经许可转载。'
- en: '**[Kevin Vu](https://blog.exxactcorp.com/)** manages [Exxact Corp blog](https://blog.exxactcorp.com/)
    and works with many of its talented authors who write about different aspects
    of Deep Learning.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Kevin Vu](https://blog.exxactcorp.com/)** 管理着 [Exxact Corp博客](https://blog.exxactcorp.com/)，并与许多才华横溢的作者合作，他们撰写关于深度学习不同方面的内容。'
- en: More On This Topic
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[忘掉PIP、Conda和requirements.txt！改用Poetry，感谢以后…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家的可重用Python代码管理](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[A New Way of Managing Deep Learning Datasets](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[管理深度学习数据集的新方法](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
- en: '[4 Steps for Managing a Data Science Project](https://www.kdnuggets.com/2022/05/4-steps-managing-data-science-project.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学项目管理的4个步骤](https://www.kdnuggets.com/2022/05/4-steps-managing-data-science-project.html)'
- en: '[Managing Model Drift in Production with MLOps](https://www.kdnuggets.com/2023/05/managing-model-drift-production-mlops.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在生产中管理模型漂移与MLOps](https://www.kdnuggets.com/2023/05/managing-model-drift-production-mlops.html)'
- en: '[AI in FinTech: Managing the Finance of the Future](https://www.kdnuggets.com/2022/10/ai-fintech-managing-finance-future.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[金融科技中的人工智能：管理未来的金融](https://www.kdnuggets.com/2022/10/ai-fintech-managing-finance-future.html)'
