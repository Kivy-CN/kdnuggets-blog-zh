["```py\nclass sklearn.impute.SimpleImputer(*, missing_values=nan, strategy='mean', fill_value=None, verbose='deprecated', copy=True, add_indicator=False)\n```", "```py\n# Imports\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\n\n# Using the mean value of the columns\nimp = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp.fit([[1, 3], [5, 6], [8, 4], [11,2], [9, 3]])\n\n# Replace missing values, encoded as np.nan\nX = [[np.nan, 3], [5, np.nan], [8, 4], [11,2], [np.nan, 3]]\nprint(imp.transform(X))\n```", "```py\n[[ 6.8  3\\. ]\n [ 5\\.   3.6]\n [ 8\\.   4\\. ]\n [11\\.   2\\. ]\n [ 6.8  3\\. ]] \n```", "```py\n# Imports\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\n\n# Using the most frequent value of the columns\nimp = SimpleImputer(missing_values=np.nan, strategy='most_frequent')\nimp.fit([[1, 3], [5, 6], [8, 4], [11,2], [9, 3]])\n\n# Replace missing values, encoded as np.nan\nX = [[np.nan, 3], [5, np.nan], [8, 4], [11,2], [np.nan, 3]]\nprint(imp.transform(X))\n```", "```py\n[[ 1\\.  3.]\n [ 5\\.  3.]\n [ 8\\.  4.]\n [11\\.  2.]\n [ 1\\.  3.]] \n```", "```py\nn = 4\narr = np.random.uniform(high=5, size=(n, n))\nfor _ in range(3):\n arr[np.random.randint(n), np.random.randint(n)] = np.nan\nprint(arr)\n```", "```py\n[[       nan 3.14058295 2.2712381  0.92148091]\n [       nan 3.24750479 1.35688761 2.54943751]\n [4.47019496 0.79944618 3.61855558 3.12191146]\n [3.09645292        nan 0.43638625 4.05435414]] \n```", "```py\nimport impyute as impy\nprint(impy.mean(arr))\n```", "```py\n[[3.78332394 3.14058295 2.2712381  0.92148091]\n [3.78332394 3.24750479 1.35688761 2.54943751]\n [4.47019496 0.79944618 3.61855558 3.12191146]\n [3.09645292 2.39584464 0.43638625 4.05435414]] \n```"]