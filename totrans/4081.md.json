["```py\ndef common_steps(func):\n    def wrapper():\n        print(\"Preparing baking pans...\")\n        print(\"Pre-heating the oven...\")\n        result = func()\n        print(\"Baking the cake...\")\n        print(\"Removing the cake from the oven...\")\n        return result\n\n    return wrapper\n\n@common_steps\ndef chocolate_cake():\n    print(\"Mixing the chocolate...\")\n    return \"Chocolate cake is ready!\"\n\n@common_steps\ndef strawberry_cake():\n    print(\"Mixing the strawberries...\")\n    return \"Strawberry cake is ready!\"\n\n@common_steps\ndef pineapple_cake():\n    print(\"Mixing the pineapples...\")\n    return \"Pineapple cake is ready!\"\n\nprint(pineapple_cake())\n```", "```py\nPreparing baking pans...\nPre-heating the oven...\nMixing the pineapples...\nBaking the cake...\nRemoving the cake from the oven...\nPineapple cake is ready!\n```", "```py\ndef pineapple_cake():\n    print(\"Mixing the pineapples...\")\n    return \"Pineapple cake is ready!\"\n\npineapple_cake = common_steps(pineapple_cake)\n\nprint(pineapple_cake())\n```", "```py\nclass College:\n    pass\n\nobj = College()\nprint(type(obj))\nprint(type(College))\n```", "```py\n<class '__main__.College>\n<class 'type'>\n```", "```py\nclass College(type):\n    pass\n\nclass Student(metaclass=College):\n    pass\n\nprint(type(Student))\nprint(type(College))\n```", "```py\n<class '__main__.College'>\n<class 'type'>\n```", "```py\n# This is the basic way of defining a class.\nclass MyClass:\n    pass\n\n# Dynamic creation of classes.\nmyclass = type(\"MyClass\", (), {})\n```", "```py\nCollege = type(\"College\", (), {\"clgName\": \"MIT University\"})\nStudent = type(\"Student\", (College,), {\"stuName\": \"Kevin Peterson\"})\nobj = Student()\nprint(obj.stuName, \"-\", obj.clgName)\n```", "```py\nKevin Peterson - MIT University\n```"]