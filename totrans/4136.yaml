- en: Using the apply() Method with Pandas Dataframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/bdab73235e89186d9bf8ffdafc25d699.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Pakata Goh](https://unsplash.com/@pakata?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/python?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '**In this tutorial we will cover the following:**'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 1) Understanding apply() method in Python and when it is used
  prefs: []
  type: TYPE_NORMAL
- en: 2) Implementing apply() method on a Pandas Series
  prefs: []
  type: TYPE_NORMAL
- en: 3) Implementing apply() method on a Pandas Data Frame
  prefs: []
  type: TYPE_NORMAL
- en: 4) Implementing apply() method to solve four use cases on a Pandas Data Frame
  prefs: []
  type: TYPE_NORMAL
- en: 5) Conclusion
  prefs: []
  type: TYPE_NORMAL
- en: Understanding apply() Method in Python and When it is Used?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The apply() method is mostly used for data cleaning where it focusses on applying
    the method on every element in a pandas Series and for every row/column of a pandas
    Data Frame.
  prefs: []
  type: TYPE_NORMAL
- en: Let us get started
  prefs: []
  type: TYPE_NORMAL
- en: Implementing apply() Method on a Pandas Series
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Series are one-dimensional arrays which have axis labels named indices and consist
    data of different types such as strings, integers and other Python objects too.
  prefs: []
  type: TYPE_NORMAL
- en: Let's implement a Series object having two lists which contain planets as indices
    and their diameter in kilometers as data
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/9a7f2a827fa2cec4497baf13f9217b3f.png)'
  prefs: []
  type: TYPE_IMG
- en: The code above returns a planetinfo object and its corresponding data type.
    Since the data type of object is series, let's see how we can convert the diameter
    in km of every planet to miles using the apply() method
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/ac2b104bbbf30948b526e42cb26ddf73.png)'
  prefs: []
  type: TYPE_IMG
- en: The above code returned the conversion of every planet's diameter from km to
    miles. In order to do that, we first defined a function named km_to_miles(), then
    we passed the function without any parenthesis to the apply() method. The apply()
    method then took every data point in the series and applied the km_to_miles()
    function on it.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing apply() Method on a Pandas Data Frame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will now create a dummy Data Frame in order to understand how we can use
    the apply () method for row and column manipulation in Data Frame. The dummy Data
    Frame which we are going to create contains the details of students using the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/8c479cf71e5ab4ad02b2dcaae6d7e7ee.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have created a dummy Data Frame named studentinfo and will learn how
    to implement the apply() method by exploring 4 different use cases. Every use
    case will be new and will be solved by using the apply() method
  prefs: []
  type: TYPE_NORMAL
- en: Usecase_1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a part of the data cleaning check we will be inspecting whether all the values
    in column STUDENT_NAME are only alphabets. In order to do that we will define
    a function named datacheck() that gets the STUDENT_NAME column and returns True
    or False by using the [isalpha()](https://www.programiz.com/python-programming/methods/string/isalpha)
    method. The result's True or False will be then returned inside a new column named
    IS_ALPHABET in the studentinfo Data Frame
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we will apply the datacheck() function on the STUDENT_NAME column of the
    studentinfo Data Frame by implementing the apply() method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/d11c98b2baee53bdcb4d8e091c36b24d.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see how the datacheck() function is applied on each row of the STUDENT_NAME
    column and the results returned are stored in a new column named IS_ALPHABET
  prefs: []
  type: TYPE_NORMAL
- en: Usecase_2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a part of another data cleaning check we will be reducing the cardinality
    of the column ACADEMIC_STANDING where we will label the Category Good to ACADEMIC_STANDING_GOOD
    and rest of the categories to ACADEMIC_STANDING_BAD.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this use case we will define a function named reduce_cardinality()
    which gets the column ACADEMIC_STANDING. Inside the function, [ifstatement](https://www.programiz.com/python-programming/if-elif-else)
    is going to be used for comparison check hence returning the results ACADEMIC_STANDING_GOOD
    and ACADEMIC_STANDING_BAD to the ACADEMIC_STANDING column.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now we will apply the reduce_cardinality() function on the ACADEMIC_STANDING
    column of the studentinfo Data Frame by implementing the apply() method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/07b348738f08149597017900019ad215.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see how the reduce_cardinality() function is applied on each row of the
    ACADEMIC_STANDING column where the original values inside the ACADEMIC_STANDING
    column have now been modified to two distinct categories which are ACADEMIC_STANDING_BAD
    and ACADEMIC_STANDING_GOOD hence reducing the cardinality in the data
  prefs: []
  type: TYPE_NORMAL
- en: Usecase_3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this use case again we will be reducing the cardinality of the column MID_TERM
    where we will label the grades starting with A,B,C as Corhigher and grades starting
    with D,F,W as Dorlower
  prefs: []
  type: TYPE_NORMAL
- en: To implement this use case we will define a function named reduce_cardinality_grade()
    which gets the column MID_TERM_GRADE. Inside the function , [ifstatement](https://www.programiz.com/python-programming/if-elif-else)
    and [()startswith](https://www.w3schools.com/python/ref_string_startswith.asp)
    method are going to be used for comparison check hence returning the results Corhigher
    and Dorlower to the MID_TERM_GRADE column.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Now we will apply the reduce_cardinality_grade() function on the MID_TERM_GRADE
    column of the studentinfo Data Frame by implementing the apply() method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/5682a00e27fd4d72c0a62a4be3fed0fa.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see how the reduce_cardinality_grade() function is applied on each row
    of the MID_TERM_GRADE column where the original values inside the MID_TERM_GRADE
    column have now been modified to two distinct categories which are Corhigher and
    Dorlower hence reducing the cardinality
  prefs: []
  type: TYPE_NORMAL
- en: Usecase_4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this use will be creating a new column named FINAL_GRADE_STATUS inside
    the function check() where the values inside the FINAL_GRADE_STATUS will be determined
    on the following two conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: 1) If the student's ATTENDANCE_PERCENTAGE is >= 0.6 and MID_TERM_GRADE is Corhigher
    than the FINAL_GRADE_STATUS will be flagged as High_Chance_Of_Passing
  prefs: []
  type: TYPE_NORMAL
- en: 2) If the student's ATTENDANCE_PERCENTAGE is < 0.6 and MID_TERM_GRADE is Dorlower
    than the FINAL_GRADE_STATUS will be flagged as Low_Chance_Of_Passing
  prefs: []
  type: TYPE_NORMAL
- en: Inside the function the comparison check will be done by using the [ifstatement](https://www.programiz.com/python-programming/if-elif-else),
    [and operator](https://www.programiz.com/python-programming/operators) in Python
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now we will apply the checking function on the ATTENDANCE_PERCENTAGE, MID_TERM_GRADE
    columns of the studentinfo Data Frame by implementing the apply() method. The
    axis=1 argument means to iterate over rows in the Data Frame.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the apply() Method with Pandas Dataframes](../Images/cb0d6e3d60dd470186140dbeceb17282.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see how the check() function is applied on each row of the MID_TERM_GRADE
    and ATTENDANCE_PERCENTAGE columns hence returning a new column named FINAL_GRADE_STATUS
    with values Corhigher and Dorlower .
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we understood how to use the apply() method by exploring different
    use cases. apply() method gives user the ability to perform different types of
    data manipulation on every value of a Series or pandas Data Frame
  prefs: []
  type: TYPE_NORMAL
- en: '**[Priya Sengar](https://www.linkedin.com/in/priya-sengar/)** (**Medium**,
    **Github**) is a Data Scientist with Old Dominion University. Priya is passionate
    about solving problems in data and converting them into solutions.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Query Your Pandas DataFrames with SQL](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Combining Pandas DataFrames Made Simple](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/01/merge-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/03/3-ways-merge-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Merge Large DataFrames Efficiently with Pandas](https://www.kdnuggets.com/how-to-merge-large-dataframes-efficiently-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
