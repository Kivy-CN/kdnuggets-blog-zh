- en: Working with Python APIs For Data Science Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python API 进行数据科学项目
- en: 原文：[https://www.kdnuggets.com/2021/09/python-apis-data-science-project.html](https://www.kdnuggets.com/2021/09/python-apis-data-science-project.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/09/python-apis-data-science-project.html](https://www.kdnuggets.com/2021/09/python-apis-data-science-project.html)
- en: '[comments](#comments)<picture>![Working with Python APIs For Data Science Project](../Images/70890df2bdfc855812b2da3ffefaaaf6.png)</picture>
    * * *'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)<picture>![使用 Python API 进行数据科学项目](../Images/70890df2bdfc855812b2da3ffefaaaf6.png)</picture>
    * * *'
- en: Our Top 3 Course Recommendations
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的 IT 需求'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Working with APIs for data science is a necessary [skill set for all data scientists](https://www.stratascratch.com/blog/most-in-demand-data-science-technical-skills/) and
    should be incorporated into your data science projects. In our previous blog - [data
    analytics project ideas](https://www.stratascratch.com/blog/data-analytics-project-ideas-that-will-get-you-the-job/),
    we outlined the only data science project you’ll ever need and talked about how
    important it is to work with APIs to collect your data for your data science project.
    So in this article, we want to show you how to pull data from an API specifically [using
    python](https://www.stratascratch.com/blog/how-much-python-is-required-for-data-science/) to
    pull data from the YouTube API and the request library that's found in python.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 API 进行数据科学是所有数据科学家必备的[技能](https://www.stratascratch.com/blog/most-in-demand-data-science-technical-skills/)，应纳入你的数据科学项目中。在我们之前的博客
    - [数据分析项目创意](https://www.stratascratch.com/blog/data-analytics-project-ideas-that-will-get-you-the-job/)，我们概述了你所需的唯一数据科学项目，并讨论了使用
    API 收集数据的重要性。因此，在这篇文章中，我们想展示如何[使用 Python](https://www.stratascratch.com/blog/how-much-python-is-required-for-data-science/)
    从 YouTube API 中提取数据，并使用 Python 中的请求库。
- en: So let's understand how to work with an API for data science. We'll pull the
    data and look through the JSON response that we get and then we'll save all of
    this data into a Pandas DataFrame.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们深入了解如何使用 API 进行数据科学。我们将提取数据并查看 JSON 响应，然后将所有这些数据保存到 Pandas DataFrame 中。
- en: <picture>![How to work with an API for data science](../Images/84584c537b252fc875798a0a958762df.png)</picture>
    We'll do this all programmatically with good software engineering skills so your
    code looks clean and concise, and not like some 10 years old wrote it. This article
    isn’t about how to work with the Youtube API but it’s about how to work with APIs
    in general, so we’ll make sure to use libraries and techniques that can be used
    for any API service.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![如何使用 API 进行数据科学](../Images/84584c537b252fc875798a0a958762df.png)</picture>
    我们将使用良好的软件工程技能以编程方式完成所有工作，以使你的代码看起来简洁清晰，而不是像某个 10 岁的小孩写的那样。本文并非关于如何使用 YouTube
    API，而是如何一般性地使用 API，因此我们会确保使用可适用于任何 API 服务的库和技术。
- en: Why collect data from an API?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么要从 API 收集数据？
- en: 'You might be thinking that why we don''t just use a CSV or pull data from a
    database? There are two reasons why you should learn APIs:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，为什么我们不直接使用 CSV 或从数据库中提取数据？你应该学习 API 的原因有两个：
- en: '**1.** An API is a very common industry, professional way of collecting data
    and so if you ever work as a data scientist, you’ll be required to learn how to
    do this.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**1.** API 是一种非常常见的行业、专业数据收集方式，因此如果你将来从事数据科学工作，你需要学习如何使用它。'
- en: '**2.** It’s the more complicated and advanced way to collect data compared
    to pulling data from a database. So, just another reason to learn APIs and to
    impress your colleagues and hiring manager.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.** 与从数据库提取数据相比，这是一种更复杂和高级的数据收集方式。因此，这也是学习 API 的另一个理由，可以给你的同事和招聘经理留下深刻印象。'
- en: Tools and Platforms
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 工具和平台
- en: '**Platform**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**平台**'
- en: We’re going to use Google Colabs which is basically Jupyter notebooks. You can
    use Jupyter notebooks if you want but we will use Colabs because it’s easy to
    spin up and get saved our work in Google drive.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Google Colabs，它基本上是 Jupyter notebooks。如果你愿意，可以使用 Jupyter notebooks，但我们将使用
    Colabs，因为它容易启动并将工作保存到 Google 云端硬盘中。
- en: '**Imports**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**导入**'
- en: Now the first thing is to import and the libraries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在第一步是导入库。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <picture>![Import APIs](../Images/5d35319068d540d42e3a2e39ed8dc9f4.png)</picture>
    The request library is a library that is going to allow us to make API calls.
    You can use this library to make a request to any API so depending on what API
    you want to grab data from, the techniques covered here will be the same. If you
    want to learn more about the requests library, here’s a link - https://realpython.com/python-requests/.
    Then we have the Pandas library because we're going to save our data into a Pandas
    DataFrame and then there's a time library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![导入 APIs](../Images/5d35319068d540d42e3a2e39ed8dc9f4.png)</picture>
    requests 库是一个允许我们进行 API 调用的库。你可以使用这个库向任何 API 发出请求，因此根据你想从哪个 API 获取数据，所覆盖的技术将是相同的。如果你想了解更多关于
    requests 库的信息，下面是一个链接 - https://realpython.com/python-requests/。然后我们有 Pandas 库，因为我们将把数据保存到
    Pandas DataFrame 中，还有一个时间库。
- en: '**API Key**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**API 密钥**'
- en: The next step is to get an API key. We’re going to grab data from the Youtube
    API, specifically, going to grab data from our channel here. In order to access
    our channel information via API, we need to apply for an API key. You can do so
    by going to this link - https://www.slickremix.com/docs/get-api-key-for-youtube/.
    We don’t want to make this article specifically about how to work with the Youtube
    API so we’ll leave you to getting the API key yourself. But in general, whenever
    you’re working with an API, you’ll always need a key. And the way to get a key
    is different for each API service. So let’s say you went through the process and
    got your API key.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是获取 API 密钥。我们将从 Youtube API 获取数据，特别是从我们的频道中获取数据。为了通过 API 访问我们的频道信息，我们需要申请一个
    API 密钥。你可以通过访问这个链接 - https://www.slickremix.com/docs/get-api-key-for-youtube/
    来完成。我们不想在这篇文章中详细讲解如何使用 Youtube API，所以我们将留给你自己去获取 API 密钥。但一般来说，每当你使用 API 时，你总是需要一个密钥。获取密钥的方法因每个
    API 服务而异。所以假设你完成了这个过程并获得了你的 API 密钥。
- en: 'Now we will grab all the videos that we have in our channel and then we will
    grab the metrics from each video:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将获取我们频道中的所有视频，然后从每个视频中获取指标：
- en: '**List of Videos from Channel**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**频道中的视频列表**'
- en: Video ID
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频 ID
- en: Video Title
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频标题
- en: Publish Date
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布日期
- en: '**Video Metrics**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**视频指标**'
- en: View Count
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观看次数
- en: Link Count
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 链接数量
- en: Dislike Count
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不喜欢次数
- en: Comment Count
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评论数量
- en: Now what we need is our channel ID. So these two parameters will be used to
    make our API call.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要的是我们的频道 ID。这两个参数将用于进行 API 调用。
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Testing With The requests Library
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 requests 库进行测试
- en: Let’s quickly test out an API call. Using the request library, you can make
    a call just by putting the URL of the API in the get() method.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速测试一下 API 调用。使用 requests 库，你可以通过将 API 的 URL 放入 get() 方法中来进行调用。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <picture>![Testing With The requests Library](../Images/da5cc43a29478a7fa00970e07ad9ec96.png)</picture>
    To grab some data, we are using the get() method. The data is located at api.github.com.
    We're passing the URL to the get() method and add the json() method which will
    return a JSON object in the response.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![使用 requests 库进行测试](../Images/da5cc43a29478a7fa00970e07ad9ec96.png)</picture>
    要获取一些数据，我们使用 get() 方法。数据位于 api.github.com。我们将 URL 传递给 get() 方法，并添加 json() 方法，它将在响应中返回一个
    JSON 对象。
- en: '**What''s a JSON file?**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是 JSON 文件？**'
- en: It's a popular data file sent over as a JS object and contains your data usually
    as attribute-value pairs or in an array. And save the data in a variable called
    response.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一种常见的数据文件，以 JS 对象形式发送，并通常以属性-值对或数组的形式包含你的数据。并将数据保存在一个叫做 response 的变量中。
- en: 'Now let’s view the data:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看数据：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <picture>![Testing With The requests Library](../Images/5f42c9380dea80a3243c3e192fa6fc83.png)</picture>
    As you can see in the output, the entire result is encapsulated in curly braces
    and each line has an attribute or key and each key has a value. This is a list
    of URLs that you can access for specific information from Github.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![使用 requests 库进行测试](../Images/5f42c9380dea80a3243c3e192fa6fc83.png)</picture>
    正如你在输出中看到的，整个结果被括在大括号中，每一行都有一个属性或键，每个键都有一个值。这是一个你可以访问的特定信息的 URL 列表，来自 Github。
- en: For example, if you want to find user emails, you’d use the email_url in your
    get() method.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想查找用户的电子邮件，你可以在 get() 方法中使用 email_url。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We were just testing out the request library and quickly testing out its functionality.
    Let’s now make a call to the Youtube API and grab some data.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚测试了请求库，并快速测试了其功能。现在让我们调用 Youtube API 并抓取一些数据。
- en: Working With The YouTube API
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 与 YouTube API 的协作
- en: So the hardest part of making an API call is figuring out how to structure the
    URL, mainly what parameters to add into the URL. We currently have a root URL
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以进行 API 调用最困难的部分是弄清楚如何构建 URL，主要是要在 URL 中添加哪些参数。我们目前有一个根 URL。
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is the location of our data. We just need to define what type of data we
    want to collect. In order to do that we now need to add parameters to the URL
    to get specific video information from our specific channel.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们数据的位置。我们只需要定义要收集的数据类型。为此，我们现在需要将参数添加到 URL 中，以从特定频道获取特定的视频信息。
- en: The hardest part is figuring out which parameters and properties to add to the
    URL? How do you figure that out? The best way is to read the official documentation.
    https://developers.google.com/youtube/v3/docs/search
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最困难的部分是弄清楚要在 URL 中添加哪些参数和属性？你如何弄清楚这一点？最佳的方法是阅读官方文档。[YouTube API 官方文档](https://developers.google.com/youtube/v3/docs/search)
- en: We’re going to make a “search” and include several parameters like “part”, “channelID”
    and my API key. And within the “parts” parameter, we’ll add the id and snippet
    properties to grab ID data which includes videoID and information about the video
    itself as you see here in the list.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将进行一次“搜索”，并包含多个参数，如“part”、“channelID”和我的 API 密钥。在“parts”参数中，我们将添加 id 和 snippet
    属性，以抓取包含 videoID 和有关视频本身的信息的 ID 数据，如你在列表中看到的。
- en: <picture>![Working With The YouTube API](../Images/ca0756b2d7890b238e54ad0319065ca8.png)</picture>
    Now we’re going to write the entire URL with the parameters which will give us
    all the data we want to collect. Again, this article isn’t about YouTube specifically
    so we won’t go into how we figured out which parameters to use and all that. Lots
    of it was trial and error. But let us guide you on how we're structuring this
    URL.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![与 YouTube API 的协作](../Images/ca0756b2d7890b238e54ad0319065ca8.png)</picture>
    现在我们将编写包含参数的整个 URL，这将给我们提供我们想要收集的所有数据。再说一次，这篇文章并非专门关于 YouTube，所以我们不会深入讨论我们如何弄清楚使用哪些参数等等。很多都是试错的过程。但让我们指导你如何构建这个
    URL。
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We’re performing a “search” through the YouTube API. Everything to the right
    of the '?' is parameters we add to request specific information.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过 YouTube API 执行“搜索”。所有位于“？”右侧的部分是我们添加的参数，用于请求特定的信息。
- en: First, we add our API key that’s stored in the API_KEY variable in this key
    parameter.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，我们在这个 key 参数中添加存储在 API_KEY 变量中的 API 密钥。
- en: We specify the channel ID we want to collect information from.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定要收集信息的频道 ID。
- en: Next is the part parameter where we’re specifying that we want snippet and ID
    data. From the documentation, it tells us what data we can expect to get when
    we ask for snippet and ID data.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是 part 参数，我们指定要获取 snippet 和 ID 数据。从文档中可以看到，当我们请求 snippet 和 ID 数据时，可以期待获得哪些数据。
- en: Order the data by date and then we want the maxResults of 10000 videos in our
    API call.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按日期排序数据，然后我们希望 API 调用中的 maxResults 为 10000 个视频。
- en: Lastly, the pageToken is a token, which is a code, that is needed to get to
    the next page of the search results. We’ll deal with this later when we try to
    extract all the data.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，pageToken 是一个令牌，即一个代码，它用于获取搜索结果的下一页。我们将在稍后尝试提取所有数据时处理它。
- en: Building this can be hard and it’s a lot of trial and error. But once you play
    around with it and get the data you want, you won't have to worry about it again.
    So this entire URL is saved in our URL variable.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 构建这个可能很困难，而且需要很多试错。但是一旦你玩弄它并获取到所需的数据，你就不必再担心了。所以整个 URL 被保存在我们的 URL 变量中。
- en: Response From Making API Call
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: API 调用的响应
- en: We make the API call in the exact same way we did for the Github example.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以与 GitHub 示例相同的方式进行 API 调用。
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: And here’s the output of the API call.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 API 调用的输出。
- en: <picture>![Response From Making API Call](../Images/1ded876e6225f683eb6564a7c923c1ee.png)</picture>
    As you can see we have the same JSON object saved in the response variable. You’ll
    see all the properties for id and snippet.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![API 调用的响应](../Images/1ded876e6225f683eb6564a7c923c1ee.png)</picture>
    如你所见，我们在响应变量中保存了相同的 JSON 对象。你会看到所有 id 和 snippet 的属性。
- en: Parsing Through The Data
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据解析
- en: How do you make heads or tails out of this data? First, let’s identify what
    we’re interested in? We see the etag key at the top and then the items key as
    the 2nd key in the response. The items key starts with a square brace and then
    basically is listing all the videos in our channel. If we go to the end of the
    response, we finally see the last video in our channel and the closing square
    bracket for the items key. Then we see the other keys kind, nextPageToken, and
    so forth.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何理解这些数据？首先，让我们确定我们感兴趣的内容是什么？我们看到响应顶部的 `etag` 键，然后是响应中的第二个键 `items` 键。`items`
    键以方括号开始，然后基本上列出了我们频道中的所有视频。如果我们查看响应的末尾，我们最终会看到频道中的最后一个视频以及 `items` 键的结束方括号。然后我们会看到其他的键，如
    `kind`、`nextPageToken` 等等。
- en: You can also see that we have 95 results but only retrieved 50\. The nextPageToken
    key will help us with getting the videos on the next page of the search. But we’ll
    cover that later.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以看到我们有 95 个结果但只检索了 50 个。`nextPageToken` 键将帮助我们获取搜索结果的下一页视频。但我们稍后会讨论这一点。
- en: So our API call gave us a search result of all of our videos and some information
    about the video. All this information is stored in the items key. So let’s just
    grab that data and filter out the rest.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的 API 调用给我们提供了所有视频的搜索结果以及一些关于视频的信息。所有这些信息都存储在 `items` 键中。所以让我们只抓取这些数据并过滤掉其他的。
- en: You can do that easily by specifying just the items key.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过指定 `items` 键来轻松完成这一操作。
- en: '[PRE8]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <picture>![Parsing Through The Data](../Images/533342403610eb0fb029f7312a1c7e93.png)</picture>
    You see that the output starts with the square brackets and it lists all the videos
    we have on our channel. In order to isolate one video, we can specify the position.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![解析数据](../Images/533342403610eb0fb029f7312a1c7e93.png)</picture> 你会看到输出以方括号开始，并列出了我们频道上的所有视频。为了孤立一个视频，我们可以指定位置。
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <picture>![isolate one video using python api for data science](../Images/16f99992a89b0e2af2fb1ff5d8bd2e61.png)</picture>
    So, this is our latest video.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![使用 Python API 进行数据科学的孤立视频](../Images/16f99992a89b0e2af2fb1ff5d8bd2e61.png)</picture>
    所以，这是我们最新的视频。
- en: Parsing through the output and saving it to variables
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 解析输出并将其保存到变量中
- en: It’s obvious that what we need to do is loop through all the videos in the items
    key and save specific pieces of information. Let’s save the information into variables
    first and build the loop last.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显，我们需要做的是遍历 `items` 键中的所有视频并保存特定的信息。让我们先将信息保存到变量中，然后最后构建循环。
- en: Let’s save the video ID. In order to do that, we need to call the response variable,
    item key, and 1st position. Then once we have that, we are selecting the id key
    and then the videoID key. We can save that value in the video_id variable. That’s
    basically how you will navigate through the array and save the data you want.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保存视频 ID。为此，我们需要调用 `response` 变量、`item` 键和第一个位置。然后一旦我们得到这个，我们选择 `id` 键和 `videoID`
    键。我们可以将该值保存在 `video_id` 变量中。这基本上是你如何遍历数组并保存你想要的数据。
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Let’s do the same with the video title. Here we're also replacing any & (ampersand)
    symbols with a blank)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对视频标题做相同的操作。这里我们还将任何 `&` 符号替换为空白
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then let’s grab the upload date
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我们抓取上传日期
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We want to grab just the date and leave out the timestamp.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只想抓取日期，省略时间戳。
- en: <picture>![Parsing through the output and saving it to variables](../Images/524aaef64e8fc910d9e5f5813a1f0056.png)</picture>
    To do that we can split on the T and grab the left side of the output.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![解析输出并将其保存到变量中](../Images/524aaef64e8fc910d9e5f5813a1f0056.png)</picture>
    为了做到这一点，我们可以在 `T` 上拆分，并抓取输出的左侧部分。
- en: '[PRE13]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: So that’s how you save all the information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是你如何保存所有信息。
- en: Creating the Loop
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建循环
- en: Let’s create a Loop to go through all the videos collected in the API call and
    save the information.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个循环，遍历在 API 调用中收集的所有视频并保存信息。
- en: We’ll be going through the response[‘items’] array so our 'for Loop' starts
    with
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将遍历 `response['items']` 数组，所以我们的 `for loop` 从
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Next, we have to add some logic that ensures we’re only going to collect video
    information. So in order to ensure this logic, we need to make sure that we’re
    looking only at videos. If you check the response, you’ll see
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加一些逻辑，确保我们只收集视频信息。因此，为了确保这一点，我们需要确保只关注视频。如果你查看响应，你会看到
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So we’ll add an if statement just to ensure we’re saving video information.
    As you can also see instead of response['items'] we’re using the video variable
    because we’re in the 'for loop'.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将添加一个 `if` 语句来确保我们保存的是视频信息。正如你所看到的，我们不是使用 `response['items']` 而是使用 `video`
    变量，因为我们在 `for loop` 中。
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And lastly, all the variables that we built out to collect the information from
    the response, we’ll use those again but we’ll just need to change the variable
    name to video. Your end result will look like this.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们构建的所有用于收集响应信息的变量，我们将再次使用这些变量，但只需将变量名更改为 video。你的最终结果将如下所示。
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Making A Second API Call
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进行第二次 API 调用
- en: Collecting this information is great but it’s not interesting. We also want
    to collect the view count, likes and dislikes for each of our videos. That’s not
    in the first API call. What we need to do is now make a second API call to collect
    this information because we need to use the video_id that we collected from the
    first API call to then make a second API call to grab the view, like, dislike,
    and comment counts.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 收集这些信息是很好的，但这还不够有趣。我们还希望收集每个视频的观看次数、点赞和点踩次数。这些不在第一次 API 调用中。我们需要做的是进行第二次 API
    调用来收集这些信息，因为我们需要使用从第一次 API 调用中收集到的 video_id，然后进行第二次 API 调用以获取观看次数、点赞、点踩和评论数。
- en: 'As we''ve shown you exactly how to make an API call, we suggest figuring out
    a way to make this second API call yourself. And if you''re successful in making
    the second API call, it should look something like this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经向你展示了如何进行 API 调用，我们建议你尝试自己完成第二次 API 调用。如果你成功完成了第二次 API 调用，它应该类似于下面的样子：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now, we have to add it to the ''for loop''. And we''ll get something like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将其添加到 'for loop' 中。我们会得到类似这样的结果：
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Saving To A Pandas DataFrame
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存到 Pandas DataFrame
- en: Now let’s build out a Pandas DataFrame so that we can save all of this information.
    Since we already know all the information we want to save, we’ll create a blank
    Pandas DataFrame with the column headers above the 'for loop'.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们构建一个 Pandas DataFrame，以便保存所有这些信息。由于我们已经知道了所有要保存的信息，我们将创建一个空白的 Pandas DataFrame，并在
    'for loop' 之前添加列标题。
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next, we will append the data we’ve saved in the variables in the 'for loop'
    to that Pandas DataFrame. Let's use the append() method to do this inside the
    'for loop'.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将把在 'for loop' 中保存到变量的数据追加到这个 Pandas DataFrame 中。我们将在 'for loop' 内部使用
    append() 方法来实现这一点。
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The entire ''for loop'' will look like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 'for loop' 看起来是这样的：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: <picture>![Python API for data science output of a pandas dataframe](../Images/f9b80b8229a1758b4ae90efb2a56d39c.png)</picture>
    Now we have all of our data in this Pandas DataFrame and the output should be
    a Pandas DataFrame with all the video statistics.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <picture>![Python API for data science output of a pandas dataframe](../Images/f9b80b8229a1758b4ae90efb2a56d39c.png)</picture>
    现在我们在这个 Pandas DataFrame 中拥有了所有数据，输出应该是一个包含所有视频统计信息的 Pandas DataFrame。
- en: '<picture>![Saving APIs to a Pandas DataFrame](../Images/aa980dab7b66f759a42ca8122dd6ba55.png)</picture>
    ### Creating the Functions'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '<picture>![Saving APIs to a Pandas DataFrame](../Images/aa980dab7b66f759a42ca8122dd6ba55.png)</picture>
    ### 创建函数'
- en: The code we’ve written so far works perfectly but there are some things that
    can be improved. The main part to improve is to separate the API call that grabs
    video information from the main part because the logic for the 2nd API call doesn’t
    need to be mixed into the logic of saving the data.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们目前编写的代码运行得非常好，但仍有一些可以改进的地方。主要需要改进的是将抓取视频信息的 API 调用与主部分分开，因为第二次 API 调用的逻辑不需要与保存数据的逻辑混合。
- en: So we can separate the 2nd API call into its own function and just pass the
    video_id we collected from the 1st API call.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以将第二次 API 调用分离到自己的函数中，只需传递我们从第一次 API 调用中收集到的 video_id。
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We can then wrap the main work into its function.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以将主要工作封装到一个函数中。
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Lastly, we can call the functions in this way.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以以这种方式调用函数。
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Let's see our final output, where we get a Pandas DataFrame, video_id, video_title,
    upload_date, view_count, like_count, dislike_count, and comment_count.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看最终的输出，我们得到一个 Pandas DataFrame，其中包括 video_id、video_title、upload_date、view_count、like_count、dislike_count
    和 comment_count。
- en: '<picture>![Youtube Python APIs for Data Science final output](../Images/0052acefeb78e9123f9c90ce0cc6fc02.png)</picture>
    ### **Conclusion**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '<picture>![Youtube Python APIs for Data Science final output](../Images/0052acefeb78e9123f9c90ce0cc6fc02.png)</picture>
    ### **结论**'
- en: 'This is how you can work with Python API for your data science project and
    grab data from an API and save it to a Pandas DataFrame. As a data scientist,
    you’ll be expected to know how to grab data from APIs. Let''s break down the steps
    we performed:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你可以在数据科学项目中使用 Python API 的方法，从 API 中获取数据并将其保存到 Pandas DataFrame 中。作为数据科学家，你应该知道如何从
    API 中抓取数据。让我们来分解一下我们所执行的步骤：
- en: Learned the request library to make an API call
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学会了使用 request 库进行 API 调用
- en: 'Made API call to YouTube API: We passed a URL to the API that specified what
    data we want. We had to read the documentation carefully to build the URL.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 YouTube API 发出了 API 调用：我们向 API 传递了一个 URL，指定了我们想要的数据。我们必须仔细阅读文档来构建 URL。
- en: 'Collected data as JSON: We collected the data as a JSON object and parsed through
    the data saving it as variables first.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据收集为 JSON：我们将数据作为 JSON 对象收集，并首先将其解析为变量。
- en: Saved the data as a Pandas DataFrame
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据保存为 Pandas DataFrame
- en: Lastly, we just added some error handling logic and cleaned up the code
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们添加了一些错误处理逻辑并清理了代码
- en: '*Find some exciting [Python interview questions for data scientist position](https://www.stratascratch.com/blog/python-interview-questions-for-data-scientist-position/) that
    are for beginners or someone who is looking for more challenging tasks.*'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '*找到一些令人兴奋的 [Python 数据科学家职位面试问题](https://www.stratascratch.com/blog/python-interview-questions-for-data-scientist-position/)，这些问题适合初学者或寻找更具挑战性的任务的人。*'
- en: '**Bio: Nathan Rosidi** (**[@StrataScratch](https://twitter.com/StrataScratch)**)
    is a data scientist and in product strategy. He''s also an adjunct professor teaching
    analytics, and is the founder of [StrataScratch](https://www.stratascratch.com/),
    a platform helping data scientists prepare for their interviews with real interview
    questions from top companies.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：Nathan Rosidi** (**[@StrataScratch](https://twitter.com/StrataScratch)**)
    是一名数据科学家和产品策略专家。他还是一名兼职教授，教授分析课程，并且是 [StrataScratch](https://www.stratascratch.com/)
    的创始人，该平台帮助数据科学家准备顶级公司的真实面试问题。'
- en: '**Related:**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[Production-Ready Machine Learning NLP API with FastAPI and spaCy](/2021/04/production-ready-machine-learning-nlp-api-fastapi-spacy.html)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[生产就绪的机器学习 NLP API 使用 FastAPI 和 spaCy](/2021/04/production-ready-machine-learning-nlp-api-fastapi-spacy.html)'
- en: '[Building RESTful APIs using Flask](/2021/05/building-restful-apis-flask.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Flask 构建 RESTful API](/2021/05/building-restful-apis-flask.html)'
- en: '[Build Your First Data Science Application](/2021/02/build-first-data-science-application.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建你的第一个数据科学应用程序](/2021/02/build-first-data-science-application.html)'
- en: More On This Topic
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[A Guide to Working with SQLite Databases in Python](https://www.kdnuggets.com/a-guide-to-working-with-sqlite-databases-in-python)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中使用 SQLite 数据库的指南](https://www.kdnuggets.com/a-guide-to-working-with-sqlite-databases-in-python)'
- en: '[FastAPI Tutorial: Build APIs with Python in Minutes](https://www.kdnuggets.com/fastapi-tutorial-build-apis-with-python-in-minutes)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FastAPI 教程：几分钟内用 Python 构建 API](https://www.kdnuggets.com/fastapi-tutorial-build-apis-with-python-in-minutes)'
- en: '[Getting Deep Learning working in the wild: A Data-Centric Course](https://www.kdnuggets.com/2022/04/corise-deep-learning-wild-data-centric-course.html)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在实际应用中实现深度学习：以数据为中心的课程](https://www.kdnuggets.com/2022/04/corise-deep-learning-wild-data-centric-course.html)'
- en: '[6 Soft Skills for Data Scientists Working Remotely](https://www.kdnuggets.com/2022/05/6-soft-skills-data-scientists-working-remotely.html)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[远程工作的数据科学家必备的 6 项软技能](https://www.kdnuggets.com/2022/05/6-soft-skills-data-scientists-working-remotely.html)'
- en: '[Working with Big Data: Tools and Techniques](https://www.kdnuggets.com/working-with-big-data-tools-and-techniques)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[处理大数据：工具和技术](https://www.kdnuggets.com/working-with-big-data-tools-and-techniques)'
- en: '[Getting Deep Learning working in the wild: A Data-Centric Course](https://www.kdnuggets.com/2022/11/corise-deep-learning-wild-data-centric-course.html)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在实际应用中实现深度学习：以数据为中心的课程](https://www.kdnuggets.com/2022/11/corise-deep-learning-wild-data-centric-course.html)'
