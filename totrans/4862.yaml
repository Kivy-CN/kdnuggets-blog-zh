- en: Python Regular Expressions Cheat Sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html](https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Alex Yang](https://twitter.com/alexalexyang), Dataquest**'
  prefs: []
  type: TYPE_NORMAL
- en: 'This cheat sheet is based on Python 3’s [documentation on regular expressions](https://docs.python.org/3/library/re.html).
    If you''re interested in learning Python, we have a free [Python Programming:
    Beginner](https://www.dataquest.io/course/python-programming-beginner) course
    for you to try out.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[![python-regular-expressions-cheatsheet_pic](../Images/bf77777d0f58aa462437128796d1ca94.png)](https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Download the cheat sheet here](https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Special Characters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`^` | Matches the expression to its right at the start of a string. It matches
    every such instance before each `\n` in the string.'
  prefs: []
  type: TYPE_NORMAL
- en: '`$` | Matches the expression to its left at the end of a string. It matches
    every such instance before each `\n` in the string.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.` | Matches any character except line terminators like `\n`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\` | Escapes special characters or denotes character classes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`A|B` | Matches expression `A` or `B`. If `A` is matched first, `B` is left
    untried.'
  prefs: []
  type: TYPE_NORMAL
- en: '`+` | Greedily matches the expression to its left 1 or more times.'
  prefs: []
  type: TYPE_NORMAL
- en: '`*` | Greedily matches the expression to its left 0 or more times.'
  prefs: []
  type: TYPE_NORMAL
- en: '`?` | Greedily matches the expression to its left 0 or 1 times. But if `?` is
    added to qualifiers (`+`, `*`, and `?` itself) it will perform matches in a non-greedy
    manner.'
  prefs: []
  type: TYPE_NORMAL
- en: '`{m}` | Matches the expression to its left `m` times, and not less.'
  prefs: []
  type: TYPE_NORMAL
- en: '`{m,n}` | Matches the expression to its left `m` to `n` times, and not less.'
  prefs: []
  type: TYPE_NORMAL
- en: '`{m,n}?` | Matches the expression to its left `m` times, and ignores `n`. See `?` above.'
  prefs: []
  type: TYPE_NORMAL
- en: Character Classes (a.k.a. Special Sequences)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`\w` | Matches alphanumeric characters, which means `a-z`, `A-Z`, and `0-9`.
    It also matches the underscore, `_`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\d` | Matches digits, which means `0-9`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\D` | Matches any non-digits.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\s` | Matches whitespace characters, which include the `\t`, `\n`, `\r`, and
    space characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\S` | Matches non-whitespace characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\b` | Matches the boundary (or empty string) at the start and end of a word,
    that is, between `\w` and `\W`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\B` | Matches where `\b` does not, that is, the boundary of `\w` characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\A` | Matches the expression to its right at the absolute start of a string
    whether in single or multi-line mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`\Z` | Matches the expression to its left at the absolute end of a string whether
    in single or multi-line mode.'
  prefs: []
  type: TYPE_NORMAL
- en: Sets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`[ ]` | Contains a set of characters to match.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[amk]` | Matches either `a`, `m`, or `k`. It does not match `amk`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[a-z]` | Matches any alphabet from `a` to `z`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[a\-z]` | Matches `a`, `-`, or `z`. It matches `-` because `\` escapes it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[a-]` | Matches `a` or `-`, because `-` is not being used to indicate a series
    of characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[-a]` | As above, matches `a` or `-`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[a-z0-9]` | Matches characters from `a` to `z` and also from `0` to `9`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[(+*)]` | Special characters become literal inside a set, so this matches `(`, `+`, `*`,
    and `)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[^ab5]` | Adding `^` excludes any character in the set. Here, it matches characters
    that are not `a`, `b`, or `5`.'
  prefs: []
  type: TYPE_NORMAL
- en: Groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`( )` | Matches the expression inside the parentheses and groups it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(? )` | Inside parentheses like this, `?` acts as an extension notation. Its
    meaning depends on the character immediately to its right.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(?PAB)` | Matches the expression `AB`, and it can be accessed with the group
    name.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(?aiLmsux)` | Here, `a`, `i`, `L`, `m`, `s`, `u`, and `x` are flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a` — Matches ASCII only'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`i` — Ignore case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`L` — Locale dependent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m` — Multi-line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s` — Matches all'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`u` — Matches unicode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x` — Verbose'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(?:A)` | Matches the expression as represented by `A`, but unlike `(?PAB)`,
    it cannot be retrieved afterwards.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(?#...)` | A comment. Contents are for us to read, not for matching.'
  prefs: []
  type: TYPE_NORMAL
- en: '`A(?=B)` | Lookahead assertion. This matches the expression `A` only if it
    is followed by `B`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`A(?!B)` | Negative lookahead assertion. This matches the expression `A` only
    if it is not followed by `B`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(?<=B)A` | Positive lookbehind assertion. This matches the expression `A` only
    if `B` is immediately to its left. This can only matched fixed length expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(?<!B)A` | Negative lookbehind assertion. This matches the expression `A` only
    if `B` is not immediately to its left. This can only matched fixed length expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(?P=name)` | Matches the expression matched by an earlier group named “name”.'
  prefs: []
  type: TYPE_NORMAL
- en: '`(...)\1` | The number `1` corresponds to the first group to be matched. If
    we want to match more instances of the same expresion, simply use its number instead
    of writing out the whole expression again. We can use from `1` up to `99` such
    groups and their corresponding numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: Popular Python re module Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`re.findall(A, B)` | Matches all instances of an expression `A` in a string `B` and
    returns them in a list.'
  prefs: []
  type: TYPE_NORMAL
- en: '`re.search(A, B)` | Matches the first instance of an expression `A` in a string `B`,
    and returns it as a re match object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`re.split(A, B)` | Split a string B into a list using the delimiter `A`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`re.sub(A, B, C)` | Replace `A` with `B` in the string `C`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Useful Regular Expressions Sites for Python users**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python 3 re module documentation](https://docs.python.org/3/library/re.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Online regex tester and debugger](https://regex101.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Alex Yang](https://twitter.com/alexalexyang)** is a writer fascinated
    by the things code can do. He also enjoys citizen science and new media art.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://www.dataquest.io/blog/regex-cheatsheet/?utm_source=kdnuggets&utm_medium=blog).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[30 Essential Data Science, Machine Learning & Deep Learning Cheat Sheets](/2017/09/essential-data-science-machine-learning-deep-learning-cheat-sheets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Functional Programming in Python](/2018/02/introduction-functional-programming-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text Data Preprocessing: A Walkthrough in Python](/2018/03/text-data-preprocessing-walkthrough-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Mastering Regular Expressions with Python](https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Tips for Using Regular Expressions in Data Cleaning](https://www.kdnuggets.com/5-tips-for-using-regular-expressions-in-data-cleaning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
