- en: Using FastAPI for Building ML-Powered Web Apps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/using-fastapi-for-building-ml-powered-web-apps](https://www.kdnuggets.com/using-fastapi-for-building-ml-powered-web-apps)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Using FastAPI for Building ML-Powered Web Apps](../Images/5b448008c0130c7f814d58853423007f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | Canva
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will learn a little bit about FastAPI and use it to build
    an API for Machine Learning (ML) model inference. We will then use Jinja2 templates
    to create a proper web interface. This is a short but fun project that you can
    build on your own with limited knowledge about APIs and web development.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What is FastAPI?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[FastAPI](https://fastapi.tiangolo.com/#installation) is a popular and modern
    web framework used for building APIs with Python. It is designed to be fast and
    efficient, leveraging Python''s standard type hints to provide the best development
    experience. It is easy to learn and requires only a few lines of code to develop
    high-performance APIs. FastAPI is widely used by companies such as Uber, Netflix,
    and Microsoft to build APIs and applications. Its design makes it particularly
    suitable for creating API endpoints for machine learning model inference and testing.
    We can even build a proper web application by integrating Jinja2 templates.'
  prefs: []
  type: TYPE_NORMAL
- en: Model Training
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will train the Random Forest classifier on the most popular Iris dataset.
    After training is complete, we will display model evaluation metrics and save
    the model in pickle format.
  prefs: []
  type: TYPE_NORMAL
- en: '**train_model.py:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Building the ML API using the FastAPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we will install FastAPI and the Unicorn library, which we are going to
    use to build a model inference API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `app.py` file, we will:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the saved model from the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the Python class for inputs and prediction. Make sure you specify the
    dtype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, we will create the predict function and use the `@app.post` decorator.
    The decorator defines a POST endpoint at the URL path `/predict`. The function
    will be executed when a client sends a POST request to this endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The predict function takes the values from the `IrisInput` class and returns
    them as the `IrisPrediction` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the app using the `uvicorn.run` function and provide it with the host IP
    and port number as shown below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**app.py: **'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Run the Python file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The FastAPI server is running, and we can access it by clicking on the link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It will take us to the browsers with the index page. We have nothing on the
    index page, just on the `/predict` POST request. That’s why nothing is shown.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FastAPI for Building ML-Powered Web Apps](../Images/63ba9e5daeb413a42543816bf9c46e5c.png)'
  prefs: []
  type: TYPE_IMG
- en: We can test our API by using the SwaggerUI interface. We can access it by adding
    “/docs” after the link.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FastAPI for Building ML-Powered Web Apps](../Images/15c7f9263685e74877f042bb2f24a4a1.png)'
  prefs: []
  type: TYPE_IMG
- en: We can click the “/predict” option, edit the value, and run the prediction.
    In the end, we will get the response in the response body section. As we can see,
    we got “Virginica” as a result. We can test our model with direct values within
    the SwaggerUI and ensure it is working properly before deploying it to production.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FastAPI for Building ML-Powered Web Apps](../Images/7328411b610ea66be27e54d1ed066fad.png)'
  prefs: []
  type: TYPE_IMG
- en: Build a UI for the Web Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of using Swagger UI, we will create our own user interface that is simple
    and displays results like any other web application. To achieve this, we need
    to integrate Jinja2Templates within our app. Jinja2Templates allows us to build
    a proper web interface using HTML files, enabling us to customize various components
    of the webpage.
  prefs: []
  type: TYPE_NORMAL
- en: Initiate Jinja2Templates by providing it the directory where HTML files will
    be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define an asynchronous route that serves the "index.html" template as an HTML
    response for the root URL ("/").
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Making changes to the input argument of the `predict` function using Request
    and Form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defines an asynchronous POST endpoint "/predict" that accepts form data for
    iris flower measurements, uses a machine learning model to predict the iris species,
    and returns the prediction results rendered in "result.html" using TemplateResponse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The rest of the code is similar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create a directory named `templates` in the same directory as
    `app.py`. Inside the `templates` directory, create two HTML files: `index.html`
    and `result.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: If you are a web developer, you will easily understand the HTML code. For beginners,
    I will explain what is happening. This HTML code creates a web page with a form
    for predicting iris flower species. It allows users to input "Sepal" and "Petal"
    measurements and submit them via a POST request to the "/predict" endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: '**index.html:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `result.html` code defines a web page that displays the prediction results,
    showing the inputted sepal and petal measurements and the predicted iris species.
    It also displays the prediction class name with class ID and has a button that
    will take you to the index page.
  prefs: []
  type: TYPE_NORMAL
- en: '**result.html:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run the Python app file again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When you click on the link, you won't see the empty screen; instead, you will
    see the user interface where you can enter the "Sepal" and "Petal" length and
    width.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FastAPI for Building ML-Powered Web Apps](../Images/d5a557758d45dd147d7fed0798c59073.png)'
  prefs: []
  type: TYPE_IMG
- en: After clicking the "Predict" button, you will be taken to the next page, where
    the results will be displayed. You can click on the "Predict Again" button to
    test your model with different values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using FastAPI for Building ML-Powered Web Apps](../Images/3ea7ae08af0ae0c1b872a15a209ae326.png)'
  prefs: []
  type: TYPE_IMG
- en: All the source code, data, model, and information are available at the [kingabzpro/FastAPI-for-ML](https://github.com/kingabzpro/FastAPI-for-ML)
    GitHub repository. Please don't forget to star ⭐ it.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many large companies are now using FastAPI to create endpoints for their models,
    allowing them to deploy and integrate these models seamlessly across their systems.
    FastAPI is fast, easy to code, and comes with a variety of features that meet
    the demands of the modern data stack. The key to landing a job in this area is
    to build and document as many projects as possible. This will help you gain the
    experience and knowledge necessary for the initial screening sessions. Recruiters
    will evaluate your profile and portfolio to determine if you are a good fit for
    their team. So, why not start building projects using FastAPI today?
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.polywork.com/kingabzpro)****[Abid Ali Awan](https://www.polywork.com/kingabzpro)****
    ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan)) is a certified data
    scientist professional who loves building machine learning models. Currently,
    he is focusing on content creation and writing technical blogs on machine learning
    and data science technologies. Abid holds a Master''s degree in technology management
    and a bachelor''s degree in telecommunication engineering. His vision is to build
    an AI product using a graph neural network for students struggling with mental
    illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Meet MetaGPT: The ChatGPT-Powered AI Assistant That Turns Text Into…](https://www.kdnuggets.com/meet-metagpt-the-chatgptpowered-ai-assistant-that-turns-text-into-web-apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Data Pipelines to Create Apps with Large Language Models](https://www.kdnuggets.com/building-data-pipelines-to-create-apps-with-large-language-models)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beginner’s Guide to Building LLM Apps with Python](https://www.kdnuggets.com/beginners-guide-to-building-llm-apps-with-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Web Scraping Using Python](https://www.kdnuggets.com/2022/10/beginner-guide-web-scraping-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[FastAPI Tutorial: Build APIs with Python in Minutes](https://www.kdnuggets.com/fastapi-tutorial-build-apis-with-python-in-minutes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Vector Databases and Vector Indexes: Architecting LLM Apps](https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
