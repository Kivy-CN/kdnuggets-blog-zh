["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\n```", "```py\n# Load the dataset from UCI repository\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00352/Online%20Retail.xlsx\"\ndata = pd.read_excel(url)\n```", "```py\ndata.head()\n```", "```py\ndata.describe()\n```", "```py\ndata.info()\n```", "```py\n# Check for missing values in each column\nmissing_values = data.isnull().sum()\nprint(missing_values)\n```", "```py\n# Drop rows with missing CustomerID\ndata.dropna(subset=['CustomerID'], inplace=True)\n```", "```py\n# Remove rows with negative Quantity and Price\ndata = data[(data['Quantity'] > 0) & (data['UnitPrice'] > 0)]\n```", "```py\ndata['CustomerID'] = data['CustomerID'].astype(int)\n\n# Verify the data type conversion\nprint(data.dtypes)\n```", "```py\nsnapshot_date = max(data['InvoiceDate']) + pd.DateOffset(days=1)\n```", "```py\ndata['Total'] = data['Quantity'] * data['UnitPrice']\n```", "```py\nrfm = data.groupby('CustomerID').agg({\n    'InvoiceDate': lambda x: (snapshot_date - x.max()).days,\n    'InvoiceNo': 'nunique',\n    'Total': 'sum'\n})\n```", "```py\nrfm.rename(columns={'InvoiceDate': 'Recency', 'InvoiceNo': 'Frequency', 'Total': 'MonetaryValue'}, inplace=True)\nrfm.head()\n```", "```py\nrfm.describe()\n```", "```py\n# Calculate custom bin edges for Recency, Frequency, and Monetary scores\nrecency_bins = [rfm['Recency'].min()-1, 20, 50, 150, 250, rfm['Recency'].max()]\nfrequency_bins = [rfm['Frequency'].min() - 1, 2, 3, 10, 100, rfm['Frequency'].max()]\nmonetary_bins = [rfm['MonetaryValue'].min() - 3, 300, 600, 2000, 5000, rfm['MonetaryValue'].max()]\n```", "```py\n# Calculate Recency score based on custom bins \nrfm['R_Score'] = pd.cut(rfm['Recency'], bins=recency_bins, labels=range(1, 6), include_lowest=True)\n\n# Reverse the Recency scores so that higher values indicate more recent purchases\nrfm['R_Score'] = 5 - rfm['R_Score'].astype(int) + 1\n\n# Calculate Frequency and Monetary scores based on custom bins\nrfm['F_Score'] = pd.cut(rfm['Frequency'], bins=frequency_bins, labels=range(1, 6), include_lowest=True).astype(int)\nrfm['M_Score'] = pd.cut(rfm['MonetaryValue'], bins=monetary_bins, labels=range(1, 6), include_lowest=True).astype(int)\n```", "```py\n# Print the first few rows of the RFM DataFrame to verify the scores\nprint(rfm[['R_Score', 'F_Score', 'M_Score']].head(10))\n```", "```py\n# Extract RFM scores for K-means clustering\nX = rfm[['R_Score', 'F_Score', 'M_Score']]\n```", "```py\n# Calculate inertia (sum of squared distances) for different values of k\ninertia = []\nfor k in range(2, 11):\n    kmeans = KMeans(n_clusters=k, n_init= 10, random_state=42)\n    kmeans.fit(X)\n    inertia.append(kmeans.inertia_)\n\n# Plot the elbow curve\nplt.figure(figsize=(8, 6),dpi=150)\nplt.plot(range(2, 11), inertia, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('Inertia')\nplt.title('Elbow Curve for K-means Clustering')\nplt.grid(True)\nplt.show()\n```", "```py\n# Perform K-means clustering with best K\nbest_kmeans = KMeans(n_clusters=4, n_init=10, random_state=42)\nrfm['Cluster'] = best_kmeans.fit_predict(X)\n```", "```py\n# Group by cluster and calculate mean values\ncluster_summary = rfm.groupby('Cluster').agg({\n    'R_Score': 'mean',\n    'F_Score': 'mean',\n    'M_Score': 'mean'\n}).reset_index()\n```", "```py\nprint(cluster_summary)\n```", "```py\ncolors = ['#3498db', '#2ecc71', '#f39c12','#C9B1BD']\n\n# Plot the average RFM scores for each cluster\nplt.figure(figsize=(10, 8),dpi=150)\n\n# Plot Avg Recency\nplt.subplot(3, 1, 1)\nbars = plt.bar(cluster_summary.index, cluster_summary['R_Score'], color=colors)\nplt.xlabel('Cluster')\nplt.ylabel('Avg Recency')\nplt.title('Average Recency for Each Cluster')\n\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(bars, cluster_summary.index, title='Clusters')\n\n# Plot Avg Frequency\nplt.subplot(3, 1, 2)\nbars = plt.bar(cluster_summary.index, cluster_summary['F_Score'], color=colors)\nplt.xlabel('Cluster')\nplt.ylabel('Avg Frequency')\nplt.title('Average Frequency for Each Cluster')\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(bars, cluster_summary.index, title='Clusters')\n\n# Plot Avg Monetary\nplt.subplot(3, 1, 3)\nbars = plt.bar(cluster_summary.index, cluster_summary['M_Score'], color=colors)\nplt.xlabel('Cluster')\nplt.ylabel('Avg Monetary')\nplt.title('Average Monetary Value for Each Cluster')\nplt.grid(True, linestyle='--', alpha=0.5)\nplt.legend(bars, cluster_summary.index, title='Clusters')\n\nplt.tight_layout()\nplt.show()\n```", "```py\ncluster_counts = rfm['Cluster'].value_counts()\n\ncolors = ['#3498db', '#2ecc71', '#f39c12','#C9B1BD']\n# Calculate the total number of customers\ntotal_customers = cluster_counts.sum()\n\n# Calculate the percentage of customers in each cluster\npercentage_customers = (cluster_counts / total_customers) * 100\n\nlabels = ['Champions(Power Shoppers)','Loyal Customers','At-risk Customers','Recent Customers']\n\n# Create a pie chart\nplt.figure(figsize=(8, 8),dpi=200)\nplt.pie(percentage_customers, labels=labels, autopct='%1.1f%%', startangle=90, colors=colors)\nplt.title('Percentage of Customers in Each Cluster')\nplt.legend(cluster_summary['Cluster'], title='Cluster', loc='upper left')\n\nplt.show()\n```"]