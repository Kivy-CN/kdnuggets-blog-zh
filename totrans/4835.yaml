- en: The Keras 4 Step Workflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Keras 4 步骤工作流程
- en: 原文：[https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html](https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html](https://www.kdnuggets.com/2018/06/keras-4-step-workflow.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: Francois Chollet, in his book "[Deep Learning with Python](https://www.amazon.com/Deep-Learning-Python-Francois-Chollet/dp/1617294438),"
    outlines early on an overview for developing neural networks with Keras. Generalizing
    from a simple MNIST example earlier in the book, Chollet simplifies the network
    building process, as relates directly to Keras, to 4 main steps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Francois Chollet 在他的书《[使用 Python 的深度学习](https://www.amazon.com/Deep-Learning-Python-Francois-Chollet/dp/1617294438)》中，早早地概述了使用
    Keras 开发神经网络的总体概况。从书中早期的一个简单的 MNIST 示例出发，Chollet 简化了与 Keras 直接相关的网络构建过程，将其总结为
    4 个主要步骤。
- en: '![Image](../Images/18ac70fa7c1744a26764009b05f2135f.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/18ac70fa7c1744a26764009b05f2135f.png)'
- en: 'This is not a machine learning workflow, nor is it a complete framework for
    approaching a problem to solve with deep learning. These 4 steps pertain solely
    to the portion of your overall neural network machine learning workflow where
    Keras comes into play. These steps are as follows:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个机器学习工作流程，也不是一个完整的深度学习问题解决框架。这四个步骤仅涉及你整体神经网络机器学习工作流程中 Keras 相关的部分。这些步骤如下：
- en: Define the training data
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义训练数据
- en: Define a neural network model
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个神经网络模型
- en: Configure the learning process
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置学习过程
- en: Train the model
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 训练模型
- en: '[![Image](../Images/61726ecd071b690280edc20163c2a3b8.png)](https://www.kdnuggets.com/wp-content/uploads/keras-4-step-workflow.png)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '[![图像](../Images/61726ecd071b690280edc20163c2a3b8.png)](https://www.kdnuggets.com/wp-content/uploads/keras-4-step-workflow.png)'
- en: While Chollet then spends the rest of his book sufficiently filling in the necessary
    details to utilize it, let's take a preliminary look at the workflow by way of
    an example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Chollet 接下来花费了他书中的其余部分来充分填充使用这些数据所需的详细信息，但让我们通过一个示例初步了解工作流程。
- en: '**1\. Define the training data**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 定义训练数据**'
- en: 'This first step is straightforward: you must define your input and target tensors.
    The more difficult data-related aspect -- which falls outside of the Keras-specific
    workflow -- is actually finding or curating, and then cleaning and otherwise preprocessing
    some data, which is a concern for **any** machine learning task. This is the one
    step of the model which does not generally concern tuning model hyperparameters.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步很简单：你必须定义你的输入和目标张量。更困难的数据相关方面——这超出了 Keras 特定的工作流程——实际上是寻找或策划数据，然后进行清理和其他预处理，这对于**任何**机器学习任务来说都是一个问题。这是模型中的一个步骤，通常不涉及调整模型超参数。
- en: 'While our contrived example randomly generates some data to use, it captures
    the singular aspect of this step: define your input (X_train) and target (y_train)
    tensors.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们构造的示例随机生成了一些数据供使用，但它捕捉了此步骤的一个独特方面：定义你的输入（X_train）和目标（y_train）张量。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**2\. Define a neural network model**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 定义一个神经网络模型**'
- en: 'Keras has 2 ways to define a neural network: the Sequential model class and
    the Functional API. Both share the goal of defining a neural network, but take
    different approach.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Keras 有两种定义神经网络的方法：Sequential 模型类和 Functional API。两者的目标都是定义一个神经网络，但采用了不同的方法。
- en: The [Sequential class](https://keras.io/getting-started/sequential-model-guide/)
    is used to define a linear stack of network layers which then, collectively, constitute
    a model. In our example below, we will use the Sequential constructor to create
    a model, which will then have layers added to it using the `add()` method.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sequential 类](https://keras.io/getting-started/sequential-model-guide/)用于定义一系列网络层，这些层共同构成一个模型。在下面的示例中，我们将使用
    Sequential 构造函数创建一个模型，然后使用 `add()` 方法向其添加层。'
- en: The alternative manner for creating a model is via the [Functional API](https://keras.io/getting-started/functional-api-guide/).
    As opposed to the Sequential model's limitation of defining a network solely constructed
    of layers in a linear stack, the Functional API provides the flexibility required
    for more complex models. This complexity is best exemplified in the use cases
    of multi-input models, multi-output models, and the definition of graph-like models.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模型的另一种方式是通过 [Functional API](https://keras.io/getting-started/functional-api-guide/)。与
    Sequential 模型只能定义由层线性堆叠构成的网络的限制不同，Functional API 提供了更多灵活性，适用于更复杂的模型。这种复杂性在多输入模型、多输出模型以及图状模型的定义使用中得到了最佳体现。
- en: The code in our example uses the Sequential class. It first calls the constructor,
    after which calls are made to the `add()` method to add layers to the model. The
    first such call adds a layer of type [Dense](https://keras.io/layers/core/#dense)
    ("Just your regular densely-connected NN layer"). The Dense layer has an output
    of size 16, and an input of size INPUT_DIM, which is 32 in our case (check the
    above code snippet to confirm). Note that only the first layer of the model requires
    the input dimension to be explicitly stated; the following layers are able to
    infer from the previous linear stacked layer. Following standard practice, the
    rectified linear unit activation function is used for this layer.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们示例中的代码使用了 Sequential 类。首先调用构造函数，然后调用 `add()` 方法将层添加到模型中。第一次调用添加了一个类型为 [Dense](https://keras.io/layers/core/#dense)
    的层（“只是你常规的密集连接 NN 层”）。Dense 层的输出大小为 16，输入大小为 INPUT_DIM，在我们的例子中为 32（请检查上面的代码片段以确认）。请注意，只有模型的第一层需要明确说明输入维度；后续层可以从前面的线性堆叠层中推断。按照标准做法，此层使用修正线性单元激活函数。
- en: The next line of code defines the next Dense layer of our model. Note that the
    input size is not specified here. The output size of 5 is specified, however,
    which matches our number of presumed classes in our toy multi-class classification
    problem (check the above code snippet, again, to confirm). Since it is a multi-class
    classification problem we are solving with our network, the activation function
    for this layer is set to softmax.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 下一行代码定义了我们模型的下一个 Dense 层。请注意，此处未指定输入大小。然而，输出大小为 5，这与我们假设的多类分类问题中的类别数量相匹配（请再次查看上面的代码片段以确认）。由于我们正在解决的是一个多类分类问题，因此这一层的激活函数设置为
    softmax。
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With those few lines, our Keras model is defined. The Sequential class'' `summary()`
    method provides the following insight into our model:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些几行代码，我们的 Keras 模型已定义。Sequential 类的 `summary()` 方法提供了对我们模型的以下洞察：
- en: '![Image](../Images/8691ad64fbe304b926ac0671b5dad127.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/8691ad64fbe304b926ac0671b5dad127.png)'
- en: '**3\. Configure the learning process**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 配置学习过程**'
- en: 'With both the training data defined and model defined, it''s time configure
    the learning process. This is accomplished with a call to the `[compile()](https://keras.io/getting-started/sequential-model-guide/#compilation)`
    method of the Sequential model class. Compilation requires 3 arguments: an [optimizer](https://keras.io/optimizers/),
    a [loss function](https://keras.io/losses/), and a list of [metrics](https://keras.io/metrics/).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义了训练数据和模型之后，是时候配置学习过程了。这通过调用 Sequential 模型类的 `[compile()](https://keras.io/getting-started/sequential-model-guide/#compilation)`
    方法来完成。编译需要 3 个参数：一个 [优化器](https://keras.io/optimizers/)、一个 [损失函数](https://keras.io/losses/)，以及一个
    [指标](https://keras.io/metrics/) 列表。
- en: In our example, set up as a multi-class classification problem, we will use
    the Adam optimizer, the categorical crossentropy loss function, and include solely
    the accuracy metric.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，设定为多类分类问题，我们将使用 Adam 优化器、类别交叉熵损失函数，并仅包括准确率指标。
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The with the call made to `compile()` with these arguments, our model now has
    its learning process configured.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些参数调用 `compile()` 后，我们的模型现在已经配置好了学习过程。
- en: '**4\. Train the model**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 训练模型**'
- en: At this point we have training data and a fully configured neural network to
    train with said data. All that is left is to pass the data to the model for the
    training process to commence, a process which is completed by iterating on the
    training data. Training begins by calling the `fit()` method.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我们有了训练数据和一个完全配置的神经网络用于训练这些数据。剩下的就是将数据传递给模型以开始训练过程，该过程通过对训练数据的迭代完成。训练从调用 `fit()`
    方法开始。
- en: 'At minimum, `fit()` requires 2 arguments: input and target tensors. If nothing
    more is provided, a single iteration of the training data is performed, which
    generally won''t do you any good. Therefore, it would be more conventional to,
    at a practical minimum, define a pair of additional arguments: batch_size and
    epochs. Our example includes these 4 total arguments.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最少情况下，`fit()` 需要 2 个参数：输入和目标张量。如果没有提供更多参数，则只会执行一次训练数据的迭代，这通常没有什么用。因此，更常见的做法是，至少定义一对额外的参数：batch_size
    和 epochs。我们的示例包括这 4 个总参数。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Image](../Images/7d31c85a14ad387591639acb14695904.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/7d31c85a14ad387591639acb14695904.png)'
- en: Note that the epoch accuracies are not particularly admirable, which makes sense
    given the random data which was used.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，epoch 准确率并不特别令人满意，这也很合理，因为使用了随机数据。
- en: Hopefully this has shed some light on the manner in which Keras can be used
    to solve plain old classification problems by using a straightforward 4 step process
    prescribed by the library's author and outlined herein.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这能帮助你了解Keras如何通过库作者规定的简单4步过程解决传统分类问题。
- en: '**Related:**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Frameworks for Approaching the Machine Learning Process](/2018/05/general-approaches-machine-learning-process.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[接近机器学习过程的框架](/2018/05/general-approaches-machine-learning-process.html)'
- en: '[7 Steps to Mastering Deep Learning with Keras](/2017/10/seven-steps-deep-learning-keras.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握Keras深度学习的7个步骤](/2017/10/seven-steps-deep-learning-keras.html)'
- en: '[Using Genetic Algorithm for Optimizing Recurrent Neural Networks](/2018/01/genetic-algorithm-optimizing-recurrent-neural-network.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用遗传算法优化递归神经网络](/2018/01/genetic-algorithm-optimizing-recurrent-neural-network.html)'
- en: '* * *'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的IT工作'
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目的，然后找到目的去…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[9亿美元AI失败的审视](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学学习统计学的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
