- en: 'Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/07/data-science-project-rotten-tomatoes-movie-rating-prediction-second-approach.html](https://www.kdnuggets.com/2023/07/data-science-project-rotten-tomatoes-movie-rating-prediction-second-approach.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This data science project has been used as a take-home assignment in the recruitment
    process at Meta (Facebook). In this take-home assignment, we will discover how
    Rotten Tomatoes is making labeling as ‘Rotten’, ‘Fresh’ or  ‘Certified Fresh’.
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to this data science project: [https://platform.stratascratch.com/data-projects/rotten-tomatoes-movies-rating-prediction](https://platform.stratascratch.com/data-projects/rotten-tomatoes-movies-rating-prediction?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: To do that, we will develop two different approaches.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/d79afba4c7ed2b547c017515ca1b08f0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Throughout our exploration, we will discuss data preprocessing, various classifiers,
    and potential improvements to enhance the performance of our models.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this post, you will have gained an understanding of how machine
    learning can be employed to predict movie success and how this knowledge can be
    applied in the entertainment industry.
  prefs: []
  type: TYPE_NORMAL
- en: But before going deeper, let’s discover the data we will work on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second Approach: Predicting Movie Status Based on Review Sentiment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the second approach, we plan to predict the movie's success by assessing
    the sentiment of its reviews. We will specifically apply sentiment analysis to
    evaluate the overall sentiment of the review and classify the film as 'Fresh'
    or 'Rotten' based on this sentiment.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, before we start the sentiment analysis, we must first prepare our dataset.
    In contrast to the preceding strategy, this one entails dealing with text data
    (reviews) rather of numerical and categorical variables. For this challenge, we
    will continue to employ the Random Forest model. Let's take a closer look at our
    data before we go on.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s read the data.
  prefs: []
  type: TYPE_NORMAL
- en: Here's the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/749cb085c1d57e200b7a99de6fa6e80e.png)![Data
    Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/3f049646d350b280b0e4cce693543493.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Great, let’s start with the Data Preprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: Data Preprocessing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this dataset, we do not have the movie names and corresponding statuses.
    For this dataset, we have review_content and review_type variables.
  prefs: []
  type: TYPE_NORMAL
- en: That’s why we will merge this dataset with our previous one, on rotten_tomatoes_link,
    and select the necessary features with index bracketing as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/819de42e235cdfb7eeea13722a570404.png)'
  prefs: []
  type: TYPE_IMG
- en: In this approach, we will use only the review_content column as the input feature
    and review_type as the ground truth label.
  prefs: []
  type: TYPE_NORMAL
- en: To ensure that the data is usable, we need to filter out any missing values
    in the review_content column since empty reviews cannot be used in the sentiment
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After filtering out missing values, we will visualize the distribution of review_type
    to gain a better understanding of the distribution of data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This visualization will help us determine whether there are any class imbalances
    in the data and will guide us in selecting an appropriate evaluation metric for
    our model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s the whole code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/696df7516e1530102fb86bbcabe412ab.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks like we have an imbalance problem between our features.
  prefs: []
  type: TYPE_NORMAL
- en: And also, we have too many data points, which might decrease our speed.
  prefs: []
  type: TYPE_NORMAL
- en: So, we will pick 5000 entries from the original dataset first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Then we will do the ordinal encoding.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we will create a data frame, that contains the encoded labels with
    review content by using the concat() method in Python and view the first 5 rows
    by using the head() method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here's the whole code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/4546f8377d91a7bbad2aadab16a6ad20.png)'
  prefs: []
  type: TYPE_IMG
- en: Great, now as a final step for this section, let’s split our dataset into trainset
    and test set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Default Random Forest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the text reviews in our DataFrame for machine learning methods, we must
    transform them into a format that can be processed. In Natural Language Processing,
    this is known as tokenization, where we translate text or words into n-dimensional
    vectors and then use these vector representations as training data for our machine
    learning algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we are going to use scikit-learn's CountVectorizer class to turn
    the text reviews into a matrix of token counts. We begin by creating a dictionary
    of unique terms from the input text.
  prefs: []
  type: TYPE_NORMAL
- en: For example, based on the two reviews "This movie is good" and "The movie is
    bad," the algorithm would create a dictionary of unique phrases such as ;
  prefs: []
  type: TYPE_NORMAL
- en: Then, based on the input text, we calculate the number of times of each word
    in the dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '["this", "movie", "is", "a", "good", "the", "bad"].'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the input "This movie is a good movie" would result in a vector
    of [1, 2, 1, 1, 1, 0, 0]
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we input the generated vector into our Random Forest model.
  prefs: []
  type: TYPE_NORMAL
- en: We can predict the sentiment of the reviews and classify the movie as 'Fresh'
    or 'Rotten' by training our Random Forest classifier on the vectorized text data.
  prefs: []
  type: TYPE_NORMAL
- en: The following code instantiates a CountVectorizer class that transforms text
    data into numerical vectors, and specifies that a word must appear in at least
    one document to be included in the vocabulary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we are going to transform the training data into vectors using the instantiated
    CountVectorizer object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Then, we instantiate a RandomForestClassifier object with a specified random
    state and fit the random forest model using the training data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now it is time to predict by using the trained model and transformed test data.
  prefs: []
  type: TYPE_NORMAL
- en: Then we will print out the classification report that contains evaluation metrics
    such as precision, recall, and f1-score.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Finally, let’s create a new figure with a specified size for the confusion matrix
    plot and plot the confusion matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here is the whole code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/5f1de493df13d2aeaf572daaedffcc82.png)'
  prefs: []
  type: TYPE_IMG
- en: Weighted Random Forest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we can see from our latest confusion matrix, the performance of our model
    is not good enough.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, this might be expected due to working with a limited number of data points.(5000
    instead of 100000).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see if we can increase the performance by solving the imbalance issue
    with class weights.
  prefs: []
  type: TYPE_NORMAL
- en: Here's the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/24cfa8796c7db9e130b3a194681aa333.png)'
  prefs: []
  type: TYPE_IMG
- en: We now train our Random Forest classifier on the vectorized text input, but
    this time including the class weight information to increase the evaluation metrics.
  prefs: []
  type: TYPE_NORMAL
- en: We first create the CountVectorizer class and, like previously, turn our text
    input into vectors.
  prefs: []
  type: TYPE_NORMAL
- en: And transform our text data into a vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Then we will define a random forest with calculated class weight and train it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now it is time to make a prediction by using test data and printing out the
    classification report.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In final step, we set the figure size and plot the confusion matrix.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here is the whole code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/add1c22409040bb1eb38f42b80aa6b02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now our model’s accuracy is slightly better than the one without class weights.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, because the weight of class 0 ('Rotten') is greater than the weight
    of class 1 ('Fresh,' the model now performs better in predicting 'Rotten' movie
    reviews but worse in predicting 'Fresh' movie reviews.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the model pays more attention to the data classed as 'Rotten'.
  prefs: []
  type: TYPE_NORMAL
- en: Movie Status Prediction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s use our Random Forest model to predict movie status now that we''ve
    trained it to predict the sentiment of a movie review. We''ll go through the following
    stages to determine a movie''s status:'
  prefs: []
  type: TYPE_NORMAL
- en: Collect all of the reviews for a certain film.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make use of our Random Forest model to estimate the state of each review (for
    example, 'Fresh' or 'Rotten').
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To classify the final status of a movie based on the total review status, use
    the rule-based approach given on the Rotten Tomatoes website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here in the following code, we first create a function name predict_movie_statust,
    which take a prediction as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Then, depending on the positive_percentage value, we identify the movie status,
    assigning either 'Fresh' or 'Rotten' to the prediction variable.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, it will output the positive review percentage with the movie status.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we''ll predict the status of three films: Body of Lies, Angel
    Heart, and The Duchess. Let us begin with Body of Lies.'
  prefs: []
  type: TYPE_NORMAL
- en: '''Body of Lies'' Prediction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now as it stated above, first let’s collect all of the reviews of Body of Lies
    movie.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/997a30ce9ecd213bf0d9b65717f229bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Great, at this stage let’s apply a weighted random forest algorithm to predict
    status. Then we use this in the custom function we defined earlier, which takes
    a prediction as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/18908c0362d7de3784801139be380238.png)'
  prefs: []
  type: TYPE_IMG
- en: And here is our result, let’s check our result whether it is valid or not by
    comparing it with ground_truth status.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/d681f9bdd39e3cd79513d900d693a6a4.png)'
  prefs: []
  type: TYPE_IMG
- en: It looks like our prediction is pretty valid because the status of this movie
    is Rotten as we predict.
  prefs: []
  type: TYPE_NORMAL
- en: '''Angel Heart'' Prediction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here we will repeat all steps.
  prefs: []
  type: TYPE_NORMAL
- en: Gather all of the reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make prediction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s first gather all of the reviews for Anna Karenina's movie.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/50a607e97a05bfe7228b92d989082558.png)'
  prefs: []
  type: TYPE_IMG
- en: Now it is time to make a prediction by using random forest and our custom function.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/c43d69b0d86a15ef24d7f635f836a1a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s make a comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/d681f9bdd39e3cd79513d900d693a6a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Our model predicts correct again.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s try one more time.
  prefs: []
  type: TYPE_NORMAL
- en: '''The Duchess'' Prediction'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First let’s collect all reviews.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/ab6cc352f6fa8be8df43e19b58ee2563.png)'
  prefs: []
  type: TYPE_IMG
- en: Then now it is time to make a prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/4afdc0278cd0b83d3149c868ec77513c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s compare our prediction with the ground truth.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Here is the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data Science Project of Rotten Tomatoes Movie Rating Prediction: Second Approach](../Images/68020877ddebd9867658c3fdf8f1cb5b.png)'
  prefs: []
  type: TYPE_IMG
- en: And the movie's ground-truth label is 'Fresh,' indicating that our model's forecast
    is incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: Yet, it can be noticed that our model's predicted is very close to the 60% threshold,
    indicating that a minor tweak to the model might alter its prediction from 'Rotten'
    to 'Fresh'.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, the Random Forest model that we trained above is not the best model,
    since there is still potential for improvement. In the next part, we will provide
    many suggestions for improving the performance of our model.
  prefs: []
  type: TYPE_NORMAL
- en: Suggestions for Performance Improvement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Increase the amount of data you have.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set different hyperparameters of the random forest model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply different machine learning models to find the best.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adjust the method used to represent the text data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this article, we explored two different approaches to predict movie status
    based on numerical and categorical features.
  prefs: []
  type: TYPE_NORMAL
- en: We first performed data preprocessing and then applied a decision tree classifier
    and random forest classifier to train our model.
  prefs: []
  type: TYPE_NORMAL
- en: We also experimented with feature selection and a weighted random forest classifier.
  prefs: []
  type: TYPE_NORMAL
- en: In the second approach, we used the default random forest and weighted random
    forest to predict the movie status of three different films.
  prefs: []
  type: TYPE_NORMAL
- en: We provided suggestions for improving the performance of our models. We hope
    this article has been informative and helpful.
  prefs: []
  type: TYPE_NORMAL
- en: If you want some beginner level projects, check out our post “[Data Science
    Project Ideas for Beginners](https://www.stratascratch.com/blog/19-data-science-project-ideas-for-beginners/?utm_source=blog&utm_medium=click&utm_campaign=kdn+rotten+tomatoes)”.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Nate Rosidi](https://www.stratascratch.com)** is a data scientist and in
    product strategy. He''s also an adjunct professor teaching analytics, and is the
    founder of [StrataScratch](https://www.stratascratch.com/), a platform helping
    data scientists prepare for their interviews with real interview questions from
    top companies. Connect with him on [Twitter: StrataScratch](https://twitter.com/StrataScratch)
    or [LinkedIn](https://www.linkedin.com/in/nathanrosidi/).'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Data Science Project of Rotten Tomatoes Movie Rating Prediction:…](https://www.kdnuggets.com/2023/06/data-science-project-rotten-tomatoes-movie-rating-prediction-first-approach.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, July 5: A Rotten Data Science Project • 10 AI…](https://www.kdnuggets.com/2023/n24.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[311 Call Centre Performance: Rating Service Levels](https://www.kdnuggets.com/2023/03/boxplot-outlier-311-call-center-performance.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kubernetes In Action: Second Edition](https://www.kdnuggets.com/2022/03/manning-kubernetes-action-second-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deep Learning with Python: Second Edition by François Chollet](https://www.kdnuggets.com/2022/01/manning-deep-learning-python-second-edition-francois-chollet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Digest 15 Billion Logs Per Day and Keep Big Queries Within 1 Second](https://www.kdnuggets.com/how-to-digest-15-billion-logs-per-day-and-keep-big-queries-within-1-second)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
