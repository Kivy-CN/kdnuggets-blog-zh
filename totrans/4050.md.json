["```py\nimport pandas as pd\nimport seaborn as sns\nimport datetime as dt\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as ticker\n```", "```py\ndf = pd.read_csv('F:\\\\KDNuggets\\\\KDN Mastering the Art of Data Cleaning in Python\\\\property.csv', delimiter= ';')\n```", "```py\n# Look at all the rows of the dataframe\ndisplay(df)\n```", "```py\n# Get a concise summary of the dataframe\nprint(df.info())\n```", "```py\ndf.drop('buyer', axis = 1, inplace = True)\n```", "```py\ndf.drop('location', axis = 1, inplace = True)\n```", "```py\ndf = df.drop(['buyer', 'location'], axis=1)\n```", "```py\n# Detecting duplicates\nduplicates = df[df.duplicated()]\nduplicates\n```", "```py\n# Detecting duplicates\nduplicates = df[df.duplicated()]\nduplicates\n```", "```py\ndf = df.reset_index(drop=True)\n```", "```py\n# Converting advertisement_date column to datetime\ndf['advertisement_date'] = pd.to_datetime(df['advertisement_date'], dayfirst = True)\n\n# Converting sale_date column to datetime\ndf['sale_date'] = pd.to_datetime(df['sale_date'], dayfirst = True)\n```", "```py\n# Converting advertisement_date and sale_date columns to datetime\ndf[['advertisement_date', 'sale_date']] = df[['advertisement_date', 'sale_date']].apply(pd.to_datetime, dayfirst =  True)\n```", "```py\n# Get a concise summary of the dataframe\nprint(df.info())\n```", "```py\ndf = df.drop(8)\n```", "```py\n# Imputing values for numerical columns\ndf['advertisement_date'] = df['advertisement_date'].fillna(df['advertisement_date'].mean())\ndf['sale_date'] = df['sale_date'].fillna(df['sale_date'].mean())\n```", "```py\n# Imputing values for multiple numerical columns\ndf[['advertisement_date', 'sale_date']] = df[['advertisement_date', 'sale_date']].apply(lambda x: x.fillna(x.mean()))\n```", "```py\ndf['sale_date'] = df['sale_date'].dt.strftime('%Y-%m-%d')\n```", "```py\ndf[['date1_formatted', 'date2_formatted']] = df[['date1', 'date2']].apply(lambda x: x.dt.strftime('%Y-%m-%d'))\n```", "```py\n# For categorical columns\ndf['property_category'] = df['property_category'].fillna(df['property_category'].mode()[0])\n```", "```py\nplt.figure(figsize=(10, 6))\nsns.boxplot(data=df[['advertised_price', 'sale_price']])\n```", "```py\nplt.xlabel('Prices')\nplt.ylabel('USD')\nplt.ticklabel_format(style='plain', axis='y')\nformatter = ticker.FuncFormatter(lambda x, p: format(x, ',.2f'))\nplt.gca().yaxis.set_major_formatter(formatter)\n```", "```py\nQ1 = df['advertised_price'].quantile(0.25)\nQ3 = df['advertised_price'].quantile(0.75)\nIQR = Q3 - Q1\ndf = df[~((df['advertised_price'] < (Q1 - 1.5 * IQR)) |(df['advertised_price'] > (Q3 + 1.5 * IQR)))]\n```", "```py\nQ1 = df['sale_price'].quantile(0.25)\nQ3 = df['sale_price'].quantile(0.75)\nIQR = Q3 - Q1\ndf = df[~((df['sale_price'] < (Q1 - 1.5 * IQR)) |(df['sale_price'] > (Q3 + 1.5 * IQR)))]\n```", "```py\nfor column in ['advertised_price', 'sale_price']:\n    Q1 = df[column].quantile(0.25)\n    Q3 = df[column].quantile(0.75)\n    IQR = Q3 - Q1\n    df = df[~((df[column] < (Q1 - 1.5 * IQR)) |(df[column] > (Q3 + 1.5 * IQR)))]\n```", "```py\nplt.figure(figsize=(10, 6))\nsns.boxplot(data=df[['advertised_price', 'sale_price']])\nplt.xlabel('Prices')\nplt.ylabel('USD')\nplt.ticklabel_format(style='plain', axis='y')\nformatter = ticker.FuncFormatter(lambda x, p: format(x, ',.2f'))\nplt.gca().yaxis.set_major_formatter(formatter)\n```"]