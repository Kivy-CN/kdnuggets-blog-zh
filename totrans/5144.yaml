- en: 4 Useful Intermediate SQL Queries for Data Science
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学的 4 个有用的中级 SQL 查询
- en: 原文：[https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)
- en: '![4 Useful Intermediate SQL Queries for Data Science](../Images/44aeb01bc678cfb6066fcc2941b03b98.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学的 4 个有用的中级 SQL 查询](../Images/44aeb01bc678cfb6066fcc2941b03b98.png)'
- en: Photo by [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/data-science?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Shubham Dhage](https://unsplash.com/@theshubhamdhage?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/s/photos/data-science?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: So in this post, we will discuss some of the essential intermediate SQL queries
    for data professionals. We will discuss 4 SQL queries, and the question is, why
    learn these 4 SQL queries?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这篇文章中，我们将讨论一些数据专业人员必备的中级 SQL 查询。我们将讨论 4 个 SQL 查询，问题是，为什么要学习这 4 个 SQL 查询？
- en: We all are familiar with making a database in **SQL, **but more important is
    knowing how to clean and filter data effectively according to our needs. That's
    how these queries help us, so let's see what these queries are
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都熟悉在 **SQL 中创建数据库**，但更重要的是知道如何根据我们的需要有效地清理和筛选数据。这些查询就是帮助我们的方法，让我们来看看这些查询是什么。
- en: '**Trigger in SQL, **and how to use it in our query?'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SQL 中的触发器**，以及如何在查询中使用它？'
- en: '**Partition By** in SQL'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SQL 中的 Partition By**'
- en: '**Limit in SQL, **and how do we use** LIMIT **syntax to limit our query in
    a SQL table?'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SQL 中的 LIMIT**，以及我们如何使用 **LIMIT** 语法限制 SQL 表中的查询？'
- en: '**COALESCE function **in the SQL, and how it helps us to get rid of **NULL **values?'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SQL 中的 COALESCE 函数**，以及它如何帮助我们去除 **NULL** 值？'
- en: 1\. Trigger in SQL
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. SQL 中的触发器
- en: '![4 Useful Intermediate SQL Queries for Data Science](../Images/0fae18dd20bd6da1e32b8b1281f52e4a.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学的 4 个有用的中级 SQL 查询](../Images/0fae18dd20bd6da1e32b8b1281f52e4a.png)'
- en: 'TRIGGER in SQL | Source: Image by author'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的触发器 | 来源：作者提供的图片
- en: In this post, we will talk about the power of **triggers in SQL.**
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论 **SQL 中触发器的强大功能**。
- en: '**What is a Trigger in SQL?**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是 SQL 中的触发器？**'
- en: 'The trigger is a SQL code that runs automatically when an event is performed.
    for example: In the below query, our trigger runs when the user tries to Insert
    values in the table.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器是当事件发生时自动运行的 SQL 代码。例如：在下面的查询中，当用户尝试向表中插入值时，我们的触发器会运行。
- en: The trigger is mainly divided into three parts
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器主要分为三个部分。
- en: '**1\. Trigger_Time**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 触发器时间**'
- en: 2\. Trigger_Event
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 2\. 触发器事件
- en: 3\. Table_name
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 3\. 表名
- en: '**1\. Trigger_Time:** Trigger time means when you want this trigger to run,
    for example, before or after an event.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 触发器时间：** 触发器时间指的是你希望这个触发器运行的时间，例如，事件之前或之后。'
- en: In our below query, we used before why? Because we want our code to run before
    the code is inserted into our table.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的查询中，我们使用了 before，为什么？因为我们希望我们的代码在插入到表中之前运行。
- en: '**2\. Trigger_Event:** The trigger event is when we want to run this trigger,
    such as **INSERT**, **UPDATE**, and **DELETE**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 触发器事件：** 触发器事件是指我们希望触发器运行的时机，例如 **INSERT**、**UPDATE** 和 **DELETE**'
- en: In the above example, we use INSERT because we want to run our trigger when
    the INSERT event is performed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们使用 INSERT，因为我们希望在执行 INSERT 事件时运行我们的触发器。
- en: '**3\. Table_name:** table name is the name of our table'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 表名：** 表名就是我们表的名称。'
- en: '**So let''s discuss the trigger syntax in detail with a proper practical explanation**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**所以让我们详细讨论触发器的语法，并进行适当的实际解释**'
- en: of the code between **BEGIN **and **END **is whenever we insert a value in the
    Voter table, the trigger checks the age, whether it is less than 18 or greater
    than 18\. Nothing happens if it is greater than or equal to 18, but if it is less
    than 18, the trigger will show an error, and we set the message.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **BEGIN** 和 **END** 之间的代码是每当我们在选民表中插入值时，触发器检查年龄，是否小于 18 或大于 18。如果年龄大于或等于 18，则不会发生任何事情，但如果小于
    18，则触发器会显示错误，并设置消息。
- en: For example, see the above image, **we set message_text = ' age must be >=18',** so
    whenever we try to **insert the value less than 18, this error message shows**.
    In the output section, when we try to insert Andrew, 17, the query shows an error,
    which contains our **custom message**. So that's what triggers in SQL and how
    to use them in your query.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，参见上面的图片，**我们设置 message_text = ' age must be >=18'，** 以便每当我们尝试 **插入小于 18 的值时，都会显示此错误消息**。在输出部分，当我们尝试插入
    Andrew, 17 时，查询显示了包含我们 **自定义消息** 的错误。这就是 SQL 中的触发器以及如何在查询中使用它们。
- en: '**Check the below code for a more practical understanding**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看下面的代码以获得更实际的理解**'
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Partition by in SQL
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. SQL 中的分区
- en: '![4 Useful Intermediate SQL Queries for Data Science](../Images/26b5951da96782fef7329530dce67219.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![4 Useful Intermediate SQL Queries for Data Science](../Images/26b5951da96782fef7329530dce67219.png)'
- en: 'PARTITION BY in SQL | Source: Image by author'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'PARTITION BY in SQL | 来源: 作者插图'
- en: This post will discuss **partition **and how to use it in SQL.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将讨论 **分区** 及其在 SQL 中的使用方法。
- en: So the first question is, what is a **partition in SQL**?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以第一个问题是，**SQL 中的分区是什么**？
- en: '**The work of a partition is to group the rows with similar values but without
    limiting the rows.**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**分区的作用是将具有相似值的行分组，但不限制行数。**'
- en: Let's take an example for more clarity.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举个例子以便更清楚。
- en: '**Please see the second image above.**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**请参见上面的第二张图片。**'
- en: There are five rows in the table in which there is a column named gender with
    three male candidates and two female candidates, so what if we want a new column
    that shows the number of males and females?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 表中有五行，其中有一列名为性别，包含三名男性候选人和两名女性候选人，那么如果我们想要一个新列来显示男性和女性的数量呢？
- en: The partition syntax group the rows according to a similar value, which means
    that in our query, we use partition by gender. It means that we want to group
    our rows according to gender, so there are only two unique values in the gender
    column first is M and the second is F, so it divides the rows into two groups.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 分区语法根据相似的值对行进行分组，这意味着在我们的查询中，我们使用 `partition by` 按性别进行分组。这意味着我们希望按性别对行进行分组，因此性别列中只有两个唯一值，第一个是
    M，第二个是 F，因此将行分为两个组。
- en: 1 The rows which contain M in the gender column
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 1 性别列中包含 M 的行
- en: 2 The rows have F in the gender column, so that's the work of partition in SQL,
    and we use the count function to count several rows in the group.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 2 性别列中包含 F 的行，这就是 SQL 中分区的作用，我们使用计数函数来统计组中的行数。
- en: In the output, you can see that the new column is built whose name is no_of_male_female,
    and this column contains the number of rows in the group. For example, there are
    two rows in the F group, so it shows 2, and there are three rows in the M group,
    so it shows 3.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在输出中，你可以看到新建了一个名为 no_of_male_female 的列，这列包含了组中的行数。例如，F 组中有两行，所以显示为 2，M 组中有三行，所以显示为
    3。
- en: '**Some might wonder**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**有些人可能会想知道**'
- en: what the difference is between group by and partition by in SQL because both
    works are similar. So the answer is that if you use a group, your five rows convert
    only into two rows. Why?
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 中的 `group by` 和 `partition by` 有什么区别，因为这两者的作用相似。那么答案是，如果你使用 `group by`，你的五行数据仅会转换为两行。为什么？
- en: Because the group by shows the number of groups, in our above query, our table
    is divided into two groups, M and F, so the group by only shows the first row
    of every group, which means that if the group contains ten rows but it shows only
    1 rowin the output because it shows 1 row of every group.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 `group by` 显示的是组的数量，在我们上述的查询中，表被分为两个组，M 和 F，所以 `group by` 只显示每组的第一行，这意味着即使组包含十行数据，它只会显示每组的
    1 行。
- en: But if you use partition by then, your number of rows remains unchanged as you
    see the number of rows in the output and the number of rows in the table remains
    the same.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果使用 `partition by`，则行数保持不变，你会发现输出中的行数和表中的行数保持一致。
- en: '**Partition in SQL shows all rows.**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL 中的分区显示所有行。**'
- en: Both have advantages and disadvantages you can use them according to your requirements.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都有优点和缺点，你可以根据需求选择使用。
- en: '**Check the below code if you need it**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果你需要，请查看下面的代码**'
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3\. Limit query
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 限制查询
- en: '![4 Useful Intermediate SQL Queries for Data Science](../Images/1b465a57842324bc9cc1f741dd091e87.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![4 Useful Intermediate SQL Queries for Data Science](../Images/1b465a57842324bc9cc1f741dd091e87.png)'
- en: 'LIMIT in SQL | Source: Image by author'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'LIMIT in SQL | 来源: 作者插图'
- en: '**LIMIT in SQL and How it works, although LIMIT is not supported in some SQL
    databases, such as SQL servers and MS access.**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL 中的 LIMIT 及其工作原理，尽管 LIMIT 在某些 SQL 数据库中不受支持，例如 SQL 服务器和 MS access。**'
- en: LIMIT clause is widely used in SQL databases and primarily to limit the row.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: LIMIT 子句在 SQL 数据库中广泛使用，主要用于限制行数。
- en: 'For example: If we want to find the top 10 or worst ten albums from the database,
    then the limit is beneficial. We use LIMIT 10 in the last of the query, and our
    work is done.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：如果我们想从数据库中找到前 10 或最差的 10 张专辑，那么 LIMIT 就很有用。我们在查询末尾使用 LIMIT 10，工作就完成了。
- en: But here is a question how does LIMIT work, and how can we use it effectively?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里有一个问题，LIMIT 是如何工作的，我们如何有效地使用它？
- en: '**We can use LIMIT in two types**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们可以用两种方式使用 LIMIT**'
- en: '**1\. LIMIT ( any constant value )**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**1. LIMIT（任何常量值）**'
- en: For example, the below code selects the first eight rows from the table
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的代码选择了表中的前八行
- en: '**SELECT * FROM table_name LIMIT 8;**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**SELECT * FROM table_name LIMIT 8;**'
- en: '**2\. LIMIT(x, y)**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**2. LIMIT(x, y)**'
- en: It's a more precise way to limit our tables.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种更精确地限制表格的方法。
- en: The x argument is used to eliminate several rows from the top.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: x 参数用于从顶部消除几行。
- en: The y argument shows the number of rows you want after elimination.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: y 参数显示你在消除后想要的行数。
- en: 'For example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '**Select * FROM table_name LIMIT 3,2;**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**选择 * FROM table_name LIMIT 3,2;**'
- en: this query eliminates three rows from the top and then shows the two rows after
    eliminating the three rows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询从顶部消除三行，然后在消除三行后显示两行。
- en: '**Check the below code.**'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看下面的代码。**'
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 4\. COALESCE function
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. COALESCE 函数
- en: '![4 Useful Intermediate SQL Queries for Data Science](../Images/3a5f300f8b55ce8a616c85e3bb05afb2.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![4 个有用的中级 SQL 查询用于数据科学](../Images/3a5f300f8b55ce8a616c85e3bb05afb2.png)'
- en: 'COALESCE function in SQL | Source: Image by author'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'COALESCE 函数在 SQL 中 | 来源: 作者提供的图片'
- en: Do you know that there are some great functions in SQL which save you time?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道 SQL 中有一些很棒的函数可以节省你的时间吗？
- en: Here I am talking about the **COALESCE function,** and this function amazes
    you, so please read the full post.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我谈论的是**COALESCE 函数**，这个函数会让你感到惊讶，所以请阅读完整的帖子。
- en: '**The COALESCE function takes n number of values.**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**COALESCE 函数接受 n 个值。**'
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So let's understand this; please see the above 4th image. You see that there
    is an EMPLOYEE table that contains a column whose name is located, and in that
    column, there are 3 NULL values. So what if we want to replace that NULL value
    with a meaningful word? So as in the above image, we want to replace all the NULL
    values with the word Missing_value.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们了解一下；请参见上面的第4张图片。你会看到有一个 EMPLOYEE 表，其中包含一个名为 location 的列，在该列中有 3 个 NULL
    值。那么如果我们想用有意义的词替换这些 NULL 值呢？所以如上图所示，我们想用词 Missing_value 替换所有 NULL 值。
- en: We can do that with COALESCE function simply by seeing the code in the above
    image. The COALESCE function replaces all the NULL values with the word Missing_value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看上面图片中的代码来实现这一点。COALESCE 函数将所有 NULL 值替换为 Missing_value。
- en: Let's understand COALESCE function step by step.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步了解 COALESCE 函数。
- en: '**Step 1: **The first argument we pass in the COALESCE function is the column
    name in which we want to find NULL values. That''s why we use location.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1:** 我们在 COALESCE 函数中传递的第一个参数是我们想要查找 NULL 值的列名。这就是为什么我们使用 location。'
- en: '**Step 2**: If it found some values, then nothing happens; as you will see
    in the output of the code in the image, the value remains the same, but if it
    found NULL values, then what it does that it simply replaces that NULL values
    with the word we give as the second argument in COALESCE function and we gave
    Missing_value as a second argument, and that''s why it replaces all NULL value
    present in the location column with Missing_value.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2:** 如果找到了某些值，则不会发生任何变化；正如你在图像中的代码输出所看到的，值保持不变，但如果找到 NULL 值，它会用我们在 COALESCE
    函数中作为第二个参数提供的词来替换这些 NULL 值，我们给出的第二个参数是 Missing_value，这就是为什么它用 Missing_value 替换了
    location 列中所有的 NULL 值。'
- en: So that's how to COALESCE function work in SQL. We were given the example of
    using a single column. We also do the same thing if we want to replace NULL values
    in multiple columns; we can also do that by following the above syntax.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 COALESCE 函数在 SQL 中的工作原理。我们给出了一个使用单列的示例。如果我们想在多个列中替换 NULL 值，我们也可以通过遵循上述语法来实现。
- en: '**Check the below code.**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看下面的代码。**'
- en: '[PRE4]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I hope this post will briefly explain how you use these essential queries in
    SQL and what are the benefits of using it. If you have any questions, feel free
    to ask in the comment section.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能简要说明如何使用这些 SQL 中的重要查询及其好处。如果你有任何问题，请随时在评论区提问。
- en: '**[Ashbab Khan](https://www.linkedin.com/in/ashbabkhan/)** is a data scientist,
    SQL expert, and creative tech writer.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Ashbab Khan](https://www.linkedin.com/in/ashbabkhan/)** 是一位数据科学家、SQL 专家和富有创意的技术写作者。'
- en: '[Original](https://medium.com/@ashbabkhan12/useful-intermediate-sql-queries-for-data-science-408c724b67d0).
    Reposted with permission.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://medium.com/@ashbabkhan12/useful-intermediate-sql-queries-for-data-science-408c724b67d0)。经许可转载。'
- en: More On This Topic
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，12 月 7 日：破解数据科学十大误区 • 4…](https://www.kdnuggets.com/2022/n47.html)'
- en: '[Free Intermediate Python Programming Crash Course](https://www.kdnuggets.com/2022/12/free-intermediate-python-programming-crash-course.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[免费中级 Python 编程速成课程](https://www.kdnuggets.com/2022/12/free-intermediate-python-programming-crash-course.html)'
- en: '[How to Optimize SQL Queries for Faster Data Retrieval](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何优化 SQL 查询以加快数据检索速度](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)'
- en: '[Top SQL Queries for Data Scientists](https://www.kdnuggets.com/top-sql-queries-for-data-scientists)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家必备的 SQL 查询](https://www.kdnuggets.com/top-sql-queries-for-data-scientists)'
- en: '[5 Tricky SQL Queries Solved](https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解决 5 个棘手 SQL 查询](https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html)'
- en: '[Solving 5 Complex SQL Problems: Tricky Queries Explained](https://www.kdnuggets.com/2022/07/5-hardest-things-sql.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解决 5 个复杂 SQL 问题：棘手查询解析](https://www.kdnuggets.com/2022/07/5-hardest-things-sql.html)'
