- en: 'Optimizing Data Storage: Exploring Data Types and Normalization in SQL'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 优化数据存储：探索SQL中的数据类型和规范化
- en: 原文：[https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql](https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql](https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql)
- en: '![Optimizing Data Storage: Exploring Data Types and Normalization in SQL](../Images/08d332ab1a0acff45d43157373a84d57.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![优化数据存储：探索数据类型和规范化](../Images/08d332ab1a0acff45d43157373a84d57.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In the present century, data is the new oil. Optimizing this data storage is
    always critical for getting a good performance from it. Opting for suitable data
    types and applying the correct normalization process is essential in deciding
    its performance.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今世纪，数据是新的石油。优化数据存储对获取良好的性能始终至关重要。选择合适的数据类型并应用正确的规范化过程对于决定其性能至关重要。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This article will study the most important and commonly used datatypes and understand
    the normalization process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将研究最重要且常用的数据类型，并了解规范化过程。
- en: Data Types in SQL
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL中的数据类型
- en: 'There are mainly two data types in SQL: String and Numeric. Other than this,
    there are additional data types like Boolean, Date and Time, Array, Interval,
    XML, etc.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中主要有两种数据类型：字符串和数值。除此之外，还有布尔型、日期和时间、数组、区间、XML等额外的数据类型。
- en: String Data Types
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串数据类型
- en: These data types are used to store character strings. The string is often implemented
    as an array data type and contains a sequence of elements, typically characters.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据类型用于存储字符字符串。字符串通常作为数组数据类型实现，包含一个元素序列，通常是字符。
- en: '**CHAR(n): **'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CHAR(n):**'
- en: It is a fixed-length string that can contain characters, numbers, and special
    characters. `n` denotes the maximum length of the string in characters it can
    hold.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个固定长度的字符串，可以包含字符、数字和特殊字符。`n`表示它可以容纳的字符串的最大长度。
- en: Its maximum range is from 0 to 255 characters, and the problem with this data
    type is that it takes the full space specified, even if the actual length of the
    string is less than then. The extra string length is padded with extra memory
    space.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 它的最大范围是从0到255个字符，问题在于这种数据类型会占用指定的全部空间，即使字符串的实际长度少于指定长度。额外的字符串长度会用额外的内存空间填充。
- en: '**VARCHAR(n):**'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**VARCHAR(n):**'
- en: Varchar is similar to Char but can support strings of variable size, and there
    is no padding. The storage size of this data type is equal to the actual length
    of the string.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Varchar类似于Char，但可以支持可变大小的字符串，没有填充。该数据类型的存储大小等于字符串的实际长度。
- en: It can store up to a maximum of 65535 characters. Due to its variable size nature,
    its performance is not as good as the CHAR data type.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它最多可以存储65535个字符。由于其可变长度特性，其性能不如CHAR数据类型。
- en: '**BINARY(n): **'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BINARY(n):**'
- en: It is similar to the CHAR data type but only accepts binary strings or binary
    data. It can be used to store images, files, or any serialized objects. There
    is another data type `VARBINARY(n)` which is similar to the VARCHAR data type
    but also accepts only binary strings or binary data.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它类似于CHAR数据类型，但只接受二进制字符串或二进制数据。它可以用于存储图像、文件或任何序列化对象。还有一种数据类型`VARBINARY(n)`，类似于VARCHAR数据类型，但也只接受二进制字符串或二进制数据。
- en: '**TEXT(n):**'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**TEXT(n):**'
- en: This data type is also used to store the strings but has a maximum size of 65535
    bytes.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这种数据类型也用于存储字符串，但其最大尺寸为65535字节。
- en: '**BLOB(n):** Stands for Binary Large Object and hold data up to 65535 bytes.'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BLOB(n):** 代表二进制大型对象，存储数据最多可达65535字节。'
- en: Other than these are other data types, like LONGTEXT and LONGBLOB, which can
    store even more characters.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除这些之外，还有其他数据类型，如 LONGTEXT 和 LONGBLOB，它们可以存储更多的字符。
- en: Numeric Data Types
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值数据类型
- en: '**INT():**'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**INT():**'
- en: It can store a numeric integer, which is 4 bytes (32bit). Here `n` denotes the
    display width, which can be a maximum of up to 255\. It specifies the minimum
    number of characters used to display the integer values.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以存储一个 4 字节（32 位）的数字整数。这里的 `n` 表示显示宽度，最大可以达到 255。它指定用于显示整数值的最小字符数。
- en: 'Range:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 范围：
- en: a)  -2147483648 <= Signed INT <= 2147483647
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a)  -2147483648 <= 有符号 INT <= 2147483647
- en: b)  0 <= Unsigned INT <= 4294967295
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b)  0 <= 无符号 INT <= 4294967295
- en: '**BIGINT():**'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BIGINT():**'
- en: It can store a large integer of size up to 64 bits.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以存储最大为 64 位的大整数。
- en: 'Range:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 范围：
- en: a)  -9223372036854775808 <= Signed BIGINT <= 9223372036854775807
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: a)  -9223372036854775808 <= 有符号 BIGINT <= 9223372036854775807
- en: b)  0 <= Unsigned BIGINT <= 18446744073709551615
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: b)  0 <= 无符号 BIGINT <= 18446744073709551615
- en: '**FLOAT():**'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**FLOAT():**'
- en: It can store floating point numbers with decimal places approximated with a
    certain precision. It has some small rounding errors, so because of this, it is
    not suitable where exact precision is required.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以存储带有小数位的浮点数，精度有一定的近似。它存在一些小的舍入误差，因此在需要精确度的情况下不适合使用。
- en: '**DOUBLE():**'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DOUBLE():**'
- en: This data type represents double-precision floating-point numbers. It can store
    decimal values with a higher precision as compared to the FLOAT data type.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据类型表示双精度浮点数。与 FLOAT 数据类型相比，它可以存储更高精度的十进制值。
- en: '**DECIMAL(n, d):**'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DECIMAL(n, d)：**'
- en: This data type represents exact decimal numbers with a fixed precision denoted
    by d. The parameter `d` specifies the number of digits after the decimal point,
    and the parameter `n` denotes the size of the number. The maximum value for `d`
    is 30, and its default value is 0.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据类型表示具有固定精度的确切十进制数字，精度由 d 表示。参数 `d` 指定小数点后的位数，参数 `n` 表示数字的大小。`d` 的最大值为 30，默认值为
    0。
- en: Some other Data Types
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他数据类型
- en: '**BOOLEAN:**'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BOOLEAN：**'
- en: This data type stores only two states which are True or False. It is used to
    perform logical operations.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据类型仅存储两个状态：真或假。它用于执行逻辑操作。
- en: '**ENUM:**'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**ENUM：**'
- en: It stands for Enumeration. It allows you to choose one value from the list of
    predefined options. It also ensures that the stored value is only from the specified
    options.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它代表枚举类型。它允许你从预定义选项列表中选择一个值。它还确保存储的值仅来自指定的选项。
- en: For example, consider an attribute `color` that can only be `'Red,' 'Green,'
    or 'Blue'`. When we put these values in ENUM, then the value of the `color` can
    only be from these specified colors only.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个属性 `color`，它只能是 `'Red'、'Green' 或 'Blue'`。当我们将这些值放入 ENUM 时，`color` 的值只能是这些指定的颜色。
- en: '**XML:**'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**XML：**'
- en: XML stands for eXtensible Markup Language. This data type is used to store XML
    data which is used for structured data representation.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: XML 代表可扩展标记语言。此数据类型用于存储用于结构化数据表示的 XML 数据。
- en: '**AutoNumber:**'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自动编号：**'
- en: It is an integer that automatically increments its value when each record is
    added. It is used in generating unique or sequential numbers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个整数，每当添加记录时，值会自动递增。它用于生成唯一或顺序的数字。
- en: '**Hyperlink:**'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**超链接：**'
- en: It can store the hyperlinks of files and web pages.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以存储文件和网页的超链接。
- en: This completes our discussion on SQL Data Types. There are many more data types,
    but the data types that we have discussed are the most commonly used ones.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们关于 SQL 数据类型的讨论。还有许多其他数据类型，但我们讨论的数据类型是最常用的。
- en: Normalization In SQL
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL 中的归一化
- en: Normalization is the process of removing redundancies, inconsistencies, and
    anomalies from the database. Redundancy means the presence of duplicate values
    of the same piece of data, whereas inconsistencies in the database represent the
    same data exists in multiple formats in multiple tables.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 归一化是从数据库中去除冗余、不一致和异常的过程。冗余指的是相同数据的重复值存在，而数据库中的不一致性指的是相同的数据在多个表中以不同格式存在。
- en: Database anomalies can be defined as any sudden change or discrepancies in the
    database that are not supposed to exist. These changes can be due to various reasons,
    such as data corruption, hardware failure, software bugs, etc. Anomalies can lead
    to severe consequences, such as data loss or inconsistency, so detecting and fixing
    them as soon as possible is essential. There are mainly three types of anomalies.
    We will briefly discuss each but refer to this [article](https://www.geeksforgeeks.org/anomalies-in-relational-model/)
    if you want to read more.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库异常可以定义为数据库中任何突然出现或不应存在的变化或差异。这些变化可能由于各种原因，如数据损坏、硬件故障、软件漏洞等。异常可能导致严重后果，如数据丢失或不一致，因此尽快检测和修复异常至关重要。主要有三种类型的异常。我们将简要讨论每一种，但如果你想了解更多，请参考这篇[文章](https://www.geeksforgeeks.org/anomalies-in-relational-model/)。
- en: '**Insertion Anomaly:**'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**插入异常：**'
- en: When the newly inserted row creates, inconsistency in the table leads to an
    insertion anomaly. For example, we want to add an employee to an organization,
    but his department is not allocated to him. Then we cannot add that employee to
    the table, which creates an insertion anomaly.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当新插入的行在表中创建不一致时，会导致插入异常。例如，我们想将一个员工添加到组织中，但他的部门尚未分配给他。那么我们无法将该员工添加到表中，这就产生了插入异常。
- en: '**Deletion Anomaly:**'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除异常：**'
- en: Deletion anomaly occurs when we want to delete some rows from the table, and
    some other data is required to be deleted from the database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 删除异常发生在我们想从表中删除某些行时，需要从数据库中删除其他数据。
- en: '**Update Anomaly:**'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更新异常：**'
- en: This anomaly occurs when we want to update some rows and which leads to inconsistency
    in the database.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想更新某些行时，会发生这种异常，这会导致数据库中的不一致。
- en: The normalization process contains a series of guidelines that make the design
    of the database efficient, optimized, and free from redundancies and anomalies.
    There are several types of normal forms like 1NF, 2NF, 3NF, BCNF, etc.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 规范化过程包含一系列准则，使数据库设计高效、优化且不含冗余和异常。存在多种类型的范式，如1NF、2NF、3NF、BCNF等。
- en: 1\. First Normal Form (1NF)
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 第一范式（1NF）
- en: The first normal form ensures that the table contains no composite or multi-valued
    attributes. It means that only one value is present in a single attribute. A relation
    is in first normal form if every attribute is only single-valued.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第一范式确保表中不包含复合属性或多值属性。这意味着单一属性中只能存在一个值。如果每个属性都是单值的，则关系处于第一范式。
- en: For Ex-
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 例如
- en: '![Optimizing Data Storage: Exploring Data Types and Normalization in SQL](../Images/45bb998a8b9b422745c44f5b8e3f6fba.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![优化数据存储：探索SQL中的数据类型和规范化](../Images/45bb998a8b9b422745c44f5b8e3f6fba.png)'
- en: Image by [GeeksForGeeks](https://geeksforgeeks.org/normal-forms-in-dbms/)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[GeeksForGeeks](https://geeksforgeeks.org/normal-forms-in-dbms/)提供
- en: In Table 1, the attribute `STUD_PHONE` contains more than one phone number.
    But in Table 2, this attribute is decomposed into 1st normal form.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在表1中，属性`STUD_PHONE`包含多个电话号码。但是在表2中，该属性被分解为第一范式。
- en: 2\. Second Normal Form
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 第二范式
- en: The table must be in the first normal form, and there must not be any partial
    dependencies in the relations. Partial dependency means that the non-prime attribute
    (attributes which are not part of the candidate key) is partially dependent or
    depends on any proper subset of the candidate key. For the relations to be in
    the second normal form, the non-prime attributes must be fully functional and
    dependent on the entire candidate key.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 表必须处于第一范式，并且关系中不得存在任何部分依赖。部分依赖意味着非主属性（即不属于候选键的属性）部分依赖于候选键的任何适当子集。为了使关系处于第二范式，非主属性必须完全依赖于整个候选键。
- en: For example, consider a table named `Employees` having the following attributes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个名为`Employees`的表，具有以下属性。
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here the EmployeeID and the ProjectID together form the primary key. However,
    you can notice a partial dependency between EmployeeName and EmployeeID. It means
    that the EmployeeName is dependent only on the part of the primary key (i.e.,
    EmployeeID). For complete dependency, the EmployeeName must depend on both EmployeeID
    and the ProjectID. So, this violates the principle of the second normal form.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，EmployeeID和ProjectID一起构成主键。然而，你可以注意到EmployeeName和EmployeeID之间存在部分依赖。这意味着EmployeeName仅依赖于主键的一部分（即EmployeeID）。为了完全依赖，EmployeeName必须依赖于EmployeeID和ProjectID。因此，这违反了第二范式的原则。
- en: To make this relation in the second normal form, we must split the tables into
    two separate tables. The first table contains all the employee details, and the
    second contains all the project details.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 要使该关系处于第二范式，我们必须将表拆分为两个独立的表。第一个表包含所有员工详细信息，第二个表包含所有项目详细信息。
- en: Therefore, the `Employee` table has the following attributes,
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`Employee` 表具有以下属性，
- en: '[PRE1]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And the `Project` table has the following attributes,
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 并且 `Project` 表具有以下属性，
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now you can see that the partial dependency is removed by creating two independent
    tables. And the non-prime attributes of both tables depend on the complete set
    of the primary key.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到，通过创建两个独立的表，部分依赖关系被消除了。而两个表中的非主属性依赖于主键的完整集合。
- en: 3\. Third Normal Form
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 第三范式
- en: After 2NF, still, the relations can have update anomalies. It may happen if
    we update only one tuple and not the other. That would lead to inconsistency in
    the database.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二范式之后，关系仍可能存在更新异常。如果我们仅更新一个元组而不更新另一个，则可能导致数据库中的不一致。
- en: The condition for the third normal form is that the table should be in the 2NF,
    and there is no transitive dependency for the non-prime attributes. Transitive
    dependency happens when a non-prime attribute depends on another non-prime attribute
    instead of directly depending on the primary attribute. Prime attributes are the
    attributes that are part of the candidate key.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第三范式的条件是表应处于第二范式（2NF），并且非主属性之间没有传递依赖关系。传递依赖关系发生在非主属性依赖于另一个非主属性时，而不是直接依赖于主属性。主属性是候选键的一部分。
- en: Consider a relation R(A, B, C), where A is the primary key and B & C are the
    non-prime attributes. Let A→B and B→C be two **Functional Dependencies**, then
    A→C will be the transitive dependency. It means that attribute C is not directly
    determined by A. B acts as a middleman between them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个关系 R(A, B, C)，其中 A 是主键，B 和 C 是非主属性。假设 A→B 和 B→C 是两个**函数依赖**，则 A→C 将是传递依赖关系。这意味着属性
    C 并不是由 A 直接决定的。B 在它们之间充当中介。
- en: If a table consists of a transitive dependency, then we can bring the table
    into 3NF by splitting the table into separate independent relations.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个表包含传递依赖关系，我们可以通过将表拆分成独立的关系来将其转换为第三范式（3NF）。
- en: 4\. Boyce-Codd Normal Form
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 博伊斯-科得范式
- en: Although 2NF and 3NF remove most of the redundancies, still the redundancies
    are not 100% removed. Redundancy can occur if the LHS of the functional dependency
    is not a candidate or super key. A **Candidate Key** forms from the prime attributes,
    and the **Super Key** is a superset of the candidate key. To overcome this issue,
    another type of functional dependency is available named Boyce Codd Normal Form
    (BCNF).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管第二范式（2NF）和第三范式（3NF）消除了大部分冗余，但冗余仍未完全消除。如果函数依赖关系的左侧不是候选键或超键，则可能会发生冗余。**候选键**
    由主属性形成，而 **超键** 是候选键的超集。为了解决这个问题，还有另一种函数依赖关系类型，称为博伊斯-科得范式（BCNF）。
- en: For a table to be in BCNF, the left-hand side of a functional dependency must
    be a candidate key or a super key. A. For example, for a functional dependency
    X→Y, X must be a candidate or super key.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要使表处于 BCNF，函数依赖关系的左侧必须是候选键或超键。例如，对于函数依赖 X→Y，X 必须是候选键或超键。
- en: Consider an Employee Table that contains the following attributes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含以下属性的员工表。
- en: Employee ID (primary key)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 员工ID（主键）
- en: Employee Name
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 员工姓名
- en: Department
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部门
- en: Department Head
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部门主管
- en: '![Optimizing Data Storage: Exploring Data Types and Normalization in SQL](../Images/926dacca3258d85bb4d6ba9c37b626ad.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![优化数据存储：探索 SQL 中的数据类型和规范化](../Images/926dacca3258d85bb4d6ba9c37b626ad.png)'
- en: The EmployeeID is the primary key that uniquely identifies each row. The Department
    attribute represents the department of a particular employee, and the Department
    Head attribute represents the Employee ID of the employee who is the head of that
    specific department.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 员工ID是唯一标识每一行的主键。部门属性表示特定员工的部门，部门主管属性表示该特定部门的主管员工的员工ID。
- en: Now we will check if this table is in the BCNF. The condition is that the LHS
    of the functional dependency must be a super key. Below are the two functional
    dependencies of that table.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将检查此表是否符合 BCNF。条件是函数依赖关系的左侧必须是超键。以下是该表的两个函数依赖关系。
- en: 'Functional Dependency 1: Employee ID → Employee Name, Department, Department
    Head'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '函数依赖 1: 员工ID → 员工姓名、部门、部门主管'
- en: 'Functional Dependency 2: Department → Department Head'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '函数依赖 2: 部门 → 部门主管'
- en: For the FD1, the EmployeeID is the primary key, which is also a super key. But
    for FD2, `Department` is not the super key because multiple employees can be in
    the same department.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 FD1，EmployeeID 是主键，也是超键。但对于 FD2，`Department` 不是超键，因为多个员工可以在同一个部门。
- en: 'Therefore this table violates the condition of BCNF. To satisfy the property
    of BCNF, we need to split that table into two separate tables: `Employees` and
    `Departments`. The Employees table contains the EmployeeID, EmployeeName, and
    Department, and the Department table will have the Department and the Department
    Head.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这个表违反了 BCNF 的条件。为了满足 BCNF 的属性，我们需要将该表拆分为两个独立的表：`Employees` 和 `Departments`。Employees
    表包含 EmployeeID、EmployeeName 和 Department，而 Department 表将包含 Department 和 Department
    Head。
- en: '![Optimizing Data Storage: Exploring Data Types and Normalization in SQL](../Images/3bde6b5cb3aae4fd63f49059c4c82943.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![优化数据存储：探索 SQL 中的数据类型和标准化](../Images/3bde6b5cb3aae4fd63f49059c4c82943.png)'
- en: '![Optimizing Data Storage: Exploring Data Types and Normalization in SQL](../Images/d4b437505fec1f31f07be3aa099329f6.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![优化数据存储：探索 SQL 中的数据类型和标准化](../Images/d4b437505fec1f31f07be3aa099329f6.png)'
- en: Now we can see in both tables that all the functional dependencies are dependent
    on the primary keys, i.e., there are no non-trivial dependencies.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到在两个表中，所有的功能依赖都依赖于主键，即没有非平凡的依赖。
- en: We have covered all the famous normalization techniques, but other than these,
    there are two more normal forms, namely 4NF and 5NF. If you want to read more
    about them, refer to this [article](https://www.geeksforgeeks.org/difference-between-4nf-and-5nf/)
    from GeeksForGeeks.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经涵盖了所有著名的标准化技术，但除此之外，还有两种标准范式，即 4NF 和 5NF。如果你想了解更多，可以参考这篇 [文章](https://www.geeksforgeeks.org/difference-between-4nf-and-5nf/)。
- en: Wrapping it Up
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have discussed the most commonly used data types in SQL and the significant
    Normalization techniques in database management systems. While designing a database
    system, we aim to make it scalable, minimizing redundancy and ensuring data integrity.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了 SQL 中最常用的数据类型以及数据库管理系统中重要的标准化技术。在设计数据库系统时，我们的目标是使其可扩展，最小化冗余并确保数据完整性。
- en: We can create a delicate balance between storage, precision, and memory consumption
    by selecting appropriate data types. Also, the normalization process helps eliminate
    data anomalies and make the schema more organized.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择合适的数据类型，我们可以在存储、精度和内存消耗之间创建一个微妙的平衡。此外，标准化过程有助于消除数据异常，使模式更加有序。
- en: It is all for today. Until then, keep reading and keep learning.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 今天就到这里。直到下次，继续阅读和学习吧。
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** 是一名电气工程专业的
    B.Tech. 学生，目前在本科最后一年。他的兴趣在于网页开发和机器学习，他已经追求了这一兴趣，并渴望在这些方向上进一步工作。'
- en: More On This Topic
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Data Transformation: Standardization vs Normalization](https://www.kdnuggets.com/2020/04/data-transformation-standardization-normalization.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据转换：标准化与归一化](https://www.kdnuggets.com/2020/04/data-transformation-standardization-normalization.html)'
- en: '[Does the Random Forest Algorithm Need Normalization?](https://www.kdnuggets.com/2022/07/random-forest-algorithm-need-normalization.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[随机森林算法需要标准化吗？](https://www.kdnuggets.com/2022/07/random-forest-algorithm-need-normalization.html)'
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 基础：语法、数据类型和控制结构](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
- en: '[Database Optimization: Exploring Indexes in SQL](https://www.kdnuggets.com/2023/07/database-optimization-exploring-indexes-sql.html)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据库优化：探索 SQL 中的索引](https://www.kdnuggets.com/2023/07/database-optimization-exploring-indexes-sql.html)'
- en: '[Types of Visualization Frameworks](https://www.kdnuggets.com/types-of-visualization-frameworks)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可视化框架类型](https://www.kdnuggets.com/types-of-visualization-frameworks)'
- en: '[Optimizing Your LLM for Performance and Scalability](https://www.kdnuggets.com/optimizing-your-llm-for-performance-and-scalability)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化你的 LLM 的性能和可扩展性](https://www.kdnuggets.com/optimizing-your-llm-for-performance-and-scalability)'
