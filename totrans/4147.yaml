- en: 5 Different Ways to Load Data in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中加载数据的5种不同方法
- en: 原文：[https://www.kdnuggets.com/2020/08/5-different-ways-load-data-python.html](https://www.kdnuggets.com/2020/08/5-different-ways-load-data-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/08/5-different-ways-load-data-python.html](https://www.kdnuggets.com/2020/08/5-different-ways-load-data-python.html)
- en: '![](../Images/0a347571eee0ed768118961a39020925.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a347571eee0ed768118961a39020925.png)'
- en: As a beginner, you might only know a single way to load data (normally in CSV)
    which is to read it using *p**andas.read_csv* function. It is one of the most
    mature and strong functions, but other ways are a lot helpful and will definitely
    come in handy sometimes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个初学者，你可能只知道一种加载数据的方法（通常是CSV），那就是使用*pandas.read_csv*函数读取它。这是一个最成熟和强大的函数，但其他方法也非常有用，有时会派上用场。
- en: 'The ways that I am going to discuss are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我将要讨论的方法有：
- en: '**Manual **function'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动**函数'
- en: '**loadtxt **function'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**loadtxt**函数'
- en: '**genfromtxt** function'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**genfromtxt**函数'
- en: '**read_csv **function'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**read_csv**函数'
- en: '**Pickle**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pickle**'
- en: The dataset that we are going to use to load data can be found [**here**](http://eforexcel.com/wp/downloads-18-sample-csv-files-data-sets-for-testing-sales/).
    It is named as 100-Sales-Records.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的数据集可以在[**这里**](http://eforexcel.com/wp/downloads-18-sample-csv-files-data-sets-for-testing-sales/)找到。它被命名为100-Sales-Records。
- en: '**Imports**'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**导入**'
- en: We will use Numpy, Pandas, and Pickle packages so import them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Numpy、Pandas和Pickle包，所以要导入它们。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 1\. Manual Function
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1. 手动函数
- en: This is the most difficult, as you have to design a custom function, which can
    load data for you. You have to deal with Python’s normal filing concepts and using
    that you have to read a *.csv* file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最困难的，因为你必须设计一个自定义函数来加载数据。你需要处理Python的常规文件概念，并使用这些概念来读取*.csv*文件。
- en: Let’s do that on 100 Sales Records file.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对100销售记录文件进行操作。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Hmmm, What is this????? Seems a bit complex code!!!! Let’s break it step by
    step so you know what is happening and you can apply similar logic to read a *.csv* file
    of your own.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，这是什么？？？看起来有点复杂的代码！！让我们一步步解析，以便你了解发生了什么，并可以应用类似的逻辑来读取自己的*.csv*文件。
- en: Here, I have created a *load_csv* a function that takes in as an argument the
    path of the file you want to read.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我创建了一个*load_csv*函数，它接受一个参数，即你想读取的文件路径。
- en: I have a list named as *data *which is going to have my data of CSV file, and
    another list *col *which is going to have my column names. Now after inspecting
    the csv manually, I know that my column names are in the first row, so in my first
    iteration, I have to store the data of the first row in *col *and rest rows in *data*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一个名为*data*的列表，它将包含我的CSV文件数据，还有另一个名为*col*的列表，它将包含我的列名。现在在手动检查CSV文件后，我知道我的列名在第一行，所以在第一次迭代中，我需要将第一行的数据存储在*col*中，其余的行存储在*data*中。
- en: To check the first iteration, I have used a Boolean Variable named as *checkcol *which
    is False, and when it is false in the first iteration, it stores the data of first-line
    in *col *and then it sets *checkcol *to True, so we will deal with *data* list
    and store rest of values in *data* list.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查第一次迭代，我使用了一个名为*checkcol*的布尔变量，它的值为False，当第一次迭代中它的值为False时，它会将第一行的数据存储在*col*中，然后将*checkcol*设置为True，这样我们就会处理*data*列表，并将其余的值存储在*data*列表中。
- en: Logic
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 逻辑
- en: The main logic here is that I have iterated in the file, using *readlines()* a
    function in Python. This function returns a list that contains all the lines inside
    a file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的主要逻辑是，我使用*readlines()*函数遍历文件。这个函数返回一个包含文件中所有行的列表。
- en: When reading through headlines, it detects a new line as *\n* character, which
    is line terminating character, so in order to remove it, I have used *str.replace* function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取标题时，它将新行检测为*\n*字符，这是一种行终止字符，因此为了去除它，我使用了*str.replace*函数。
- en: As it is a *.csv* file, so I have to separate things based on *commas *so I
    will split the string on a *,* using *string.split(',')*. For the first iteration,
    I will store the first row, which contains the column names in a list known as *col*.
    And then I will append all my data in my list known as *data*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是一个*.csv*文件，所以我必须根据*逗号*来分隔内容，因此我将使用*string.split(',')*来分割字符串。在第一次迭代中，我将把包含列名的第一行存储在一个名为*col*的列表中。然后，我将把所有数据追加到名为*data*的列表中。
- en: To read the data more beautifully, I have returned it as a dataframe format
    because it is easier to read a dataframe as compared to a numpy array or python’s
    list.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更优雅地读取数据，我将其返回为数据框格式，因为数据框比numpy数组或Python列表更易于阅读。
- en: '**Output**'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![XXXXX](../Images/f03b047096fbdb9279487fda55df4680.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![XXXXX](../Images/f03b047096fbdb9279487fda55df4680.png)'
- en: Data from Custom Function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义函数中的数据。
- en: '**Pros and Cons**'
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**优点与缺点**'
- en: The important benefit is that you have all the flexibility and control over
    the file structure and you can read in whatever format and way you want and store
    it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 其重要好处是你对文件结构有全部的灵活性和控制权，可以按照你想要的格式和方式读取并存储数据。
- en: You can also read the files which do not have a standard structure using your
    own logic.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用自己的逻辑读取没有标准结构的文件。
- en: Important drawbacks of it are that it is complex to write especially for standard
    types of files because they can easily be read. You have to hard code the logic
    which requires trial and error.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 其重要缺点是编写复杂，特别是对于标准类型的文件，因为它们可以很容易地被读取。你必须硬编码逻辑，这需要反复试验。
- en: You should only use it when the file is not in a standard format or you want
    flexibility and reading the file in a way that is not available through libraries.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该仅在文件格式非标准或你需要灵活性并以库无法提供的方式读取文件时使用它。
- en: 2\. Numpy.loadtxt function
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. Numpy.loadtxt 函数
- en: This is a built-in function in Numpy, a famous numerical library in Python.
    It is a really simple function to load the data. It is very useful for reading
    data which is of the same datatype.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Numpy库中的一个内置函数，Numpy是Python中的一个著名数值库。这个函数非常简单，适合加载数据。它对于读取相同数据类型的数据非常有用。
- en: When data is more complex, it is hard to read using this function, but when
    files are easy and simple, this function is really powerful.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据更复杂时，使用这个函数很难读取，但当文件简单易读时，这个函数确实非常强大。
- en: To get the data of a single type, you can download [this](https://docs.google.com/spreadsheets/d/16mgiYbNz-XaW_r6GXUy2cJ0hy2E-lxwFLaVXAYIAOj0/edit?usp=sharing) dummy
    dataset. Let’s jump to code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取单一类型的数据，你可以下载[this](https://docs.google.com/spreadsheets/d/16mgiYbNz-XaW_r6GXUy2cJ0hy2E-lxwFLaVXAYIAOj0/edit?usp=sharing)虚拟数据集。让我们跳到代码部分。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here we simply used the *loadtxt *function as passed in *delimeter *as *','* because
    this is a CSV file.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们简单地使用了*loadtxt*函数，并将*delimeter*设置为*','*，因为这是一个CSV文件。
- en: Now if we print *df*, we will see our data in pretty decent numpy arrays that
    are ready to use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果我们打印*df*，我们会看到我们的数据以相当不错的numpy数组形式呈现，准备好使用。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/935fd87bb21b2d7076aaa36908b7c53a.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/935fd87bb21b2d7076aaa36908b7c53a.png)'
- en: We have just printed the first 5 rows due to the big size of data.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据量大，我们只打印了前5行。
- en: '**Pros and Cons**'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**优点与缺点**'
- en: An important aspect of using this function is that you can quickly load in data
    from a file into numpy arrays.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个函数的一个重要方面是你可以快速地将数据从文件加载到numpy数组中。
- en: Drawbacks of it are that you can not have different data types or missing rows
    in your data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 它的缺点是你不能在数据中拥有不同的数据类型或缺失的行。
- en: 3\. Numpy.genfromtxt()
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. Numpy.genfromtxt()
- en: We will use the dataset, which is ‘100 Sales Records.csv’ which we used in our
    first example to demonstrate that we can have multiple data types in it.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用数据集‘100 Sales Records.csv’，这是我们在第一个例子中使用的，以演示我们可以在其中拥有多种数据类型。
- en: Let’s jump to code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们跳到代码部分。
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: and to see it more clearly, we can just see it in a dataframe format, i.e.,
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地看到这一点，我们可以以数据框格式查看，即：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/93ddc725447b2fa270c1266adf649ede.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/93ddc725447b2fa270c1266adf649ede.png)'
- en: Wait? What is this? Oh, It has skipped all the columns with string data types.
    How to deal with it?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 等等？这是什么？哦，它跳过了所有包含字符串数据类型的列。怎么处理这个问题？
- en: Just add another *dtype *parameter and set *dtype *to None which means that
    it has to take care of datatypes of each column itself. Not to convert whole data
    to single dtype.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 只需添加另一个*dtype*参数并将*dtype*设置为None，这意味着它必须自行处理每一列的数据类型，而不是将整个数据转换为单一的数据类型。
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And then for output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后输出为：
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/3247ba2a7d4a9375df900b0bbdd56566.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3247ba2a7d4a9375df900b0bbdd56566.png)'
- en: Quite better than the first one, but here our Columns titles are Rows, to make
    them column titles, we have to add another parameter which is *names *and set
    it to *True *so it will take the first row as the Column Titles.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 比第一个更好，但是这里我们的列标题变成了行，要将它们设置为列标题，我们必须添加另一个参数，即*names*，并将其设置为*True*，这样它会将第一行作为列标题。
- en: i.e.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 即
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'and we can print it as:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其打印为：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/879d28bfba1322bb92bff7c200cdd2fe.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/879d28bfba1322bb92bff7c200cdd2fe.png)'
- en: And here we can see that It has successfully added the names of columns in the
    dataframe.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们可以看到，它成功地将列名添加到了数据框中。
- en: Now the last problem is that the columns which are of string data types are
    not the actual strings, but they are in *bytes *format. You can see that before
    every string, we have a *b'* so to encounter them, we have to decode them in utf-8
    format.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在最后一个问题是那些数据类型为字符串的列实际上并不是字符串，而是以*字节*格式存储的。你可以看到每个字符串前面都有一个*b'*，所以为了处理它们，我们需要将它们解码为utf-8格式。
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will return our dataframe in the desired form.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回我们所需格式的数据框。
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/7538bc624a1120c71dda7e8a2ea65797.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7538bc624a1120c71dda7e8a2ea65797.png)'
- en: 4\. Pandas.read_csv()
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. Pandas.read_csv()
- en: Pandas is a very popular data manipulation library, and it is very commonly
    used. One of it’s very important and **mature **functions is *read_csv()* which
    can read any **.csv **file very easily and help us manipulate it. Let’s do it
    on our 100-Sales-Record dataset.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas是一个非常流行的数据处理库，而且使用非常广泛。它非常重要且**成熟**的一个函数是*read_csv()*，它可以非常容易地读取任何**.csv**文件，并帮助我们处理它。让我们在我们的100-Sales-Record数据集上做这个。
- en: This function is very popular due to its ease of use. You can compare it with
    our previous codes, and you can check it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数因其易用性而非常受欢迎。你可以将它与我们之前的代码进行比较，并检查它。
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/a1f2478cfae283ced2691eff19112fe5.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a1f2478cfae283ced2691eff19112fe5.png)'
- en: 'And guess what? We are done. This was actually so simple and easy to use. Pandas.read_csv
    definitely offers a lot of other parameters to tune in our data set, for example
    in our *convertcsv.csv* file, we had no column names so we can read it as:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你猜怎么着？我们完成了。这实际上是非常简单和易于使用的。Pandas.read_csv确实提供了许多其他参数来调整我们的数据集，例如在我们的*convertcsv.csv*文件中，我们没有列名，所以我们可以这样读取它：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/36f53da09649fd35f12d2f84d3bf7dec.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/36f53da09649fd35f12d2f84d3bf7dec.png)'
- en: And we can see that it has read the *csv *file without the header. You can explore
    all other parameters in the official docs [here](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到它读取了没有标题的*csv*文件。你可以在官方文档中探索所有其他参数[这里](https://pandas.pydata.org/docs/reference/api/pandas.read_csv.html#pandas.read_csv)。
- en: 5\. Pickle
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. Pickle
- en: When your data is not in a good, human-readable format, you can use pickle to
    save it in a binary format. Then you can easily reload it using the pickle library.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的数据不是以良好的、可读的格式存在时，你可以使用pickle将其保存为二进制格式。然后你可以使用pickle库轻松重新加载它。
- en: We will take our 100-Sales-Record CSV file and first save it in a pickle format
    so we can read it.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将取出我们的100-Sales-Record CSV文件，并首先将其保存为pickle格式，以便我们可以读取它。
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will create a new file *test.pkl* which has inside it our *pdDf *from **Pandas** heading.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个新的文件*test.pkl*，其中包含我们来自**Pandas**标题的*pdDf*。
- en: Now to open it using pickle, we just have to use *pickle.load* function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要使用pickle打开它，我们只需使用*pickle.load*函数。
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/196bc7ff09954d29f60e934e5f3dbc18.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/196bc7ff09954d29f60e934e5f3dbc18.png)'
- en: And here we have successfully loaded data from a pickle file in *pandas.DataFrame *format.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们成功地从pickle文件中加载了数据，格式为*pandas.DataFrame*。
- en: You are now aware of 5 different ways to load data files in Python, which can
    help you in different ways to load a data set when you are working in your day-to-day
    projects.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道了5种在Python中加载数据文件的方法，这可以帮助你在日常项目中以不同的方式加载数据集。
- en: '* * *'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 在IT方面支持你的组织'
- en: '* * *'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Automated Machine Learning with Python: A Comparison of Different…](https://www.kdnuggets.com/2023/03/automated-machine-learning-python-comparison-different-approaches.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Python进行自动化机器学习：不同方法的比较…](https://www.kdnuggets.com/2023/03/automated-machine-learning-python-comparison-different-approaches.html)'
- en: '[How is Data Mining Different from Machine Learning?](https://www.kdnuggets.com/2022/06/data-mining-different-machine-learning.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据挖掘如何不同于机器学习？](https://www.kdnuggets.com/2022/06/data-mining-different-machine-learning.html)'
- en: '[Learn How Different Data Visualizations Work](https://www.kdnuggets.com/2022/09/datacamp-learn-different-data-visualizations-work.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习不同的数据可视化是如何工作的](https://www.kdnuggets.com/2022/09/datacamp-learn-different-data-visualizations-work.html)'
- en: '[How to Transition into Data Science from a Different Background?](https://www.kdnuggets.com/2023/05/transition-data-science-different-background.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何从不同背景过渡到数据科学？](https://www.kdnuggets.com/2023/05/transition-data-science-different-background.html)'
- en: '[Interview Kickstart Data Science Interview Course — What Makes It…](https://www.kdnuggets.com/2022/10/interview-kickstart-data-science-interview-course-makes-different.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Interview Kickstart 数据科学面试课程—它的独特之处](https://www.kdnuggets.com/2022/10/interview-kickstart-data-science-interview-course-makes-different.html)'
- en: '[The Ultimate Guide To Different Word Embedding Techniques In NLP](https://www.kdnuggets.com/2021/11/guide-word-embedding-techniques-nlp.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[终极指南：NLP中的不同词嵌入技术](https://www.kdnuggets.com/2021/11/guide-word-embedding-techniques-nlp.html)'
