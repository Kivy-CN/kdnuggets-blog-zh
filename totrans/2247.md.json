["```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n```", "```py\ndf = pd.read_csv('student_clustering.csv')\nprint(\"The shape of data is\",df.shape)\ndf.head()\n```", "```py\n# Scatter plot of the dataset\nimport matplotlib.pyplot as plt\nplt.scatter(df['cgpa'],df['iq'])\n```", "```py\nfrom sklearn.cluster import KMeans\n```", "```py\n# create an empty list for store residuals\nwcss = [] \n\nfor i in range(1,11): \n    # create an object of K-Means class\n    km = KMeans(n_clusters=i) \n    # pass the dataframe to fit the algorithm \n    km.fit_predict(df) \n    # append inertia value to wcss list\n    wcss.append(km.inertia_) \n```", "```py\n# Plot of WCSS vs. K to check the optimal value of K\nplt.plot(range(1,11),wcss)\n```", "```py\nX = df.iloc[:,:].values # complete data is used for model building\nkm = KMeans(n_clusters=4)\ny_means = km.fit_predict(X)\ny_means\n```", "```py\nX[y_means == 3,1]\n```", "```py\nkm_new = KMeans(n_clusters=4, init='random')\ny_means_new = km_new.fit_predict(X)\ny_means_new\n```", "```py\nsum(y_means == y_means_new)\n```", "```py\nplt.scatter(X[y_means == 0,0],X[y_means == 0,1],color='blue')\nplt.scatter(X[y_means == 1,0],X[y_means == 1,1],color='red')  \nplt.scatter(X[y_means == 2,0],X[y_means == 2,1],color='green') \nplt.scatter(X[y_means == 3,0],X[y_means == 3,1],color='yellow')\n```", "```py\n# Create a synthetic dataset from sklearn\nfrom sklearn.datasets import make_blobs # make synthetic dataset\ncentroids = [(-5,-5,5),(5,5,-5),(3.5,-2.5,4),(-2.5,2.5,-4)]\ncluster_std = [1,1,1,1]\nX,y = make_blobs(n_samples=200,cluster_std=cluster_std,centers=centroids,n_features=3,random_state=1)\n```", "```py\n# Scatter plot of the dataset\nimport plotly.express as px\nfig = px.scatter_3d(x=X[:,0], y=X[:,1], z=X[:,2])\nfig.show()\n```", "```py\nwcss = []\nfor i in range(1,21):\n    km = KMeans(n_clusters=i)\n    km.fit_predict(X)\n    wcss.append(km.inertia_)\n\nplt.plot(range(1,21),wcss)\n```", "```py\n# Fit the K-Means algorithm with the optimal value of K\nkm = KMeans(n_clusters=4)\ny_pred = km.fit_predict(X)\n```", "```py\n# Analyse the different clusters formed\ndf = pd.DataFrame()\ndf['col1'] = X[:,0]\ndf['col2'] = X[:,1]\ndf['col3'] = X[:,2]\ndf['label'] = y_pred\n\nfig = px.scatter_3d(df,x='col1', y='col2', z='col3',color='label')\nfig.show()\n```"]