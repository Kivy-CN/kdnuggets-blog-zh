["```py\ndef analyze(text):   experience_year=[]\n   experience_skills=[]\n   diploma=[]\n   diploma_major=[]   for doc in nlp.pipe(text, disable=[**\"tagger\"**]):\n      skills = [e.text for e in doc.ents if e.label_ == **'SKILLS'**]\n   for name, proc in nlp2.pipeline:\n         doc = proc(doc)\n   for value, rel_dict in doc._.rel.items():\n      for e in doc.ents:\n         for b in doc.ents:\n            if e.start == value[0] and b.start == value[1]:\n               if rel_dict[**'EXPERIENCE_IN'**] >= 0.9:\n                  experience_skills.append(b.text)\n                  experience_year.append(e.text)\n               if rel_dict[**'DEGREE_IN'**] >= 0.9:\n                  diploma_major.append(b.text)\n                  diploma.append(e.text)\n   return skills, experience_skills, experience_year, diploma, diploma_majordef analyze_jobs(item):\n      with open(**'./path_to_job_descriptions'**, **'w'**, encoding=**'utf-8'**) as file:\n         file.write(**'['**)\n         for i,row in enumerate(item[**'Description'**]):\n               try:\n                  skill, experience_skills, experience_year, diploma, diploma_major=analyze([row])\n                  data=json.dumps({**'Job ID'**:item[**'JOBID'**[i],**'Title'**:item[**'Title'**[i],**'Location'**:item[**'Location'**][i],**'Link'**:item[**'Link'**][i],**'Category'**:item[**'Category'**[i],**'document'**:row, **'skills'**:skill, **'experience skills'**:experience_skills, **'experience years'**: experience_year, **'diploma'**:diploma, **'diploma_major'**:diploma_major}, ensure_ascii=False)\n                  file.write(data)\n                  file.write(**','**)\n\n               except:\n                  continue\n         file.write(**']'**)analyze_jobs(path)\n```", "```py\n#Diploma\n('Master', 54), ('PHD', 49),('Bachelor', 19)#Diploma major:\n('Computer Science', 36),('engineering', 12), ('Machine Learning', 9),('Statistics', 8),('AI', 6)\n```", "```py\njob_net = Network(height=**'1000px'**, width=**'100%'**, bgcolor=**'#222222'**, font_color=**'white'**)\n\njob_net.barnes_hut()\nsources = data_graph[**'Job ID'**]\ntargets = data_graph[**'skills'**]\nvalues=data_graph[**'years skills'**]\nsources_resume = data_graph_resume[**'document'**]\ntargets_resume = data_graph_resume[**'skills'**]\n\nedge_data = zip(sources, targets, values )\nresume_edge=zip(sources_resume, targets_resume)\nfor j,e in enumerate(edge_data):\n    src = e[0]\n    dst = e[1]\n    w = e[2]\n    job_net.add_node(src, src, color=**'#dd4b39'**, title=src)\n    job_net.add_node(dst, dst, title=dst)\n    if str(w).isdigit():\n        if w is None:\n\n            job_net.add_edge(src, dst, value=w, color=**'#00ff1e'**, label=w)\n        if 1<w<=5:\n            job_net.add_edge(src, dst, value=w, color=**'#FFFF00'**, label=w)\n        if w>5:\n            job_net.add_edge(src, dst, value=w, color=**'#dd4b39'**, label=w)\n\n    else:\n        job_net.add_edge(src, dst, value=0.1, dashes=True)for j,e in enumerate(resume_edge):\n    src = **'resume'** dst = e[1]\n\n    job_net.add_node(src, src, color=**'#dd4b39'**, title=src)\n    job_net.add_node(dst, dst, title=dst)\n    job_net.add_edge(src, dst, color=**'#00ff1e'**)neighbor_map = job_net.get_adj_list()for node in job_net.nodes:\n    node[**'title'**] += **' Neighbors:<br>'** + **'<br>'**.join(neighbor_map[node[**'id'**]])\n    node[**'value'**] = len(neighbor_map[node[**'id'**]])# add neighbor data to node hover data\njob_net.show_buttons(filter_=[**'physics'**])\njob_net.show(**'job_knolwedge_graph.html'**)\n```", "```py\n# JOB ID            #Connections\nGO4919194241794048      7\nGO5957370192396288      7\nGO5859529717907456      7\nGO5266284713148416      7\nFB189313482022978       7\nFB386661248778231       7\n```"]