- en: Artificial Neural Networks Optimization using Genetic Algorithm with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python的人工神经网络优化及遗传算法
- en: 原文：[https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html](https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html](https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html?page=2#comments)![practical-computer-vision-applications-deepl-learning](../Images/2d2eba3f4293703bd96266e9008105f8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html?page=2#comments)![practical-computer-vision-applications-deepl-learning](../Images/2d2eba3f4293703bd96266e9008105f8.png)'
- en: 'In a previous tutorial titled "**Artificial Neural Network Implementation using
    NumPy and Classification of the Fruits360 Image Dataset**" available in my LinkedIn
    profile at this link [https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad),
    an artificial neural network (ANN) is created for classifying 4 classes of the
    Fruits360 image dataset. The source code used in this tutorial is available in
    my GitHub page here: [https://github.com/ahmedfgad/NumPyANN](https://github.com/ahmedfgad/NumPyANN)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在我LinkedIn个人资料中的之前一篇教程标题为“**使用NumPy实现人工神经网络和Fruits360图像数据集分类**”，链接为[https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad)，该教程中创建了一个人工神经网络（ANN）来分类Fruits360图像数据集中的4个类别。本教程中使用的源代码可以在我的GitHub页面找到，链接为：[https://github.com/ahmedfgad/NumPyANN](https://github.com/ahmedfgad/NumPyANN)
- en: A quick summary of this tutorial is extracting the feature vector (360 bins
    hue channel histogram) and reducing it to just 102 element by using a filter-based
    technique using the standard deviation. Later, the ANN is built from scratch using
    NumPy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的简要总结是提取特征向量（360个 bin 的色调通道直方图），并通过使用标准差的滤波技术将其减少到仅102个元素。然后，从头开始使用NumPy构建ANN。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织的IT需求'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The ANN was not completely created as just the forward pass was made ready but
    there is no backward pass for updating the network weights. This is why the accuracy
    is very low and not exceeds 45%. The solution to this problem is using an optimization
    technique for updating the network weights. This tutorial extends the previous
    one to use the genetic algorithm (GA) for optimizing the network weights.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 人工神经网络（ANN）并未完全创建，只完成了前向传播的准备工作，但没有进行反向传播来更新网络权重。因此，准确率非常低，未能超过45%。解决这个问题的方法是使用优化技术来更新网络权重。本教程在之前的基础上扩展，使用遗传算法（GA）来优化网络权重。
- en: 'It is worth-mentioning that both the previous and this tutorial are based on
    my 2018 book cited as "**Ahmed Fawzy Gad ''Practical Computer Vision Applications
    Using Deep Learning with CNNs''. Dec. 2018, Apress, 978-1-4842-4167-7** ". The
    book is available at Springer at this link: [https://springer.com/us/book/9781484241660](https://springer.com/us/book/9781484241660).
    You can find all details within this book.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，之前和本教程均基于我2018年的书籍，书名为“**Ahmed Fawzy Gad《使用CNN进行深度学习的实用计算机视觉应用》。2018年12月，Apress，978-1-4842-4167-7**”。该书在Springer的链接为：[https://springer.com/us/book/9781484241660](https://springer.com/us/book/9781484241660)。您可以在书中找到所有详细信息。
- en: 'The source code used in this tutorial is available in my GitHub page here:
    [https://github.com/ahmedfgad/NeuralGenetic](https://github.com/ahmedfgad/NeuralGenetic)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的源代码可在我的 GitHub 页面找到，链接为：[https://github.com/ahmedfgad/NeuralGenetic](https://github.com/ahmedfgad/NeuralGenetic)
- en: Read More about Genetic Algorithm
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多关于遗传算法的信息
- en: 'Before starting this tutorial, I recommended reading about how the genetic
    algorithm works and its implementation in Python using NumPy from scratch based
    on my previous tutorials found at these links:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本教程之前，建议阅读有关遗传算法如何工作及其在 Python 中的实现（使用 NumPy 从零开始）的内容，相关教程可以在以下链接找到：
- en: Introduction to Optimization with Genetic Algorithm
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法优化介绍
- en: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
- en: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
- en: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
- en: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
- en: Genetic Algorithm (GA) Optimization - Step-by-Step Example
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法（GA）优化 - 步骤示例
- en: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
- en: Genetic Algorithm Implementation in Python
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法在 Python 中的实现
- en: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
- en: '[/2018/07/genetic-algorithm-implementation-python.html](/2018/07/genetic-algorithm-implementation-python.html)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[/2018/07/genetic-algorithm-implementation-python.html](/2018/07/genetic-algorithm-implementation-python.html)'
- en: '[https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)'
- en: '[https://github.com/ahmedfgad/GeneticAlgorithmPython](https://github.com/ahmedfgad/GeneticAlgorithmPython)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ahmedfgad/GeneticAlgorithmPython](https://github.com/ahmedfgad/GeneticAlgorithmPython)'
- en: After understanding how GA works based on numerical examples in addition to
    implementation using Python, we can start using GA to optimize the ANN by updating
    its weights (parameters).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过数值示例和 Python 实现理解了遗传算法的工作原理后，我们可以开始使用 GA 来优化 ANN，方法是更新其权重（参数）。
- en: Using GA with ANN
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用遗传算法与人工神经网络
- en: GA creates multiple solutions to a given problem and evolves them through a
    number of generations. Each solution holds all parameters that might help to enhance
    the results. For ANN, weights in all layers help achieve high accuracy. Thus,
    a single solution in GA will contain all weights in the ANN. According to the
    network structure discussed in the previous tutorial and given in the figure below,
    the ANN has 4 layers (1 input, 2 hidden, and 1 output). Any weight in any layer
    will be part of the same solution. A single solution to such network will contain
    a total number of weights equal to 102x150+150x60+60x4=24,540\. If the population
    has 8 solutions with 24,540 parameters per solution, then the total number of
    parameters in the entire population is 24,540x8=196,320.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 遗传算法（GA）为给定问题生成多个解，并通过多代进化这些解。每个解包含所有可能有助于提升结果的参数。对于人工神经网络（ANN），各层中的权重有助于实现高准确度。因此，GA
    中的单个解将包含 ANN 中的所有权重。根据前一个教程中讨论的网络结构及下图所示，ANN 有 4 层（1 输入层、2 隐藏层和 1 输出层）。任何一层中的权重都将是同一解的一部分。这样网络的单个解将包含总数为
    102x150+150x60+60x4=24,540 的权重。如果种群中有 8 个解，每个解有 24,540 个参数，则整个种群的参数总数为 24,540x8=196,320。
- en: '![artificial-neural-network](../Images/d3ee8682d9b41f4e59bad5b79e948a75.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![artificial-neural-network](../Images/d3ee8682d9b41f4e59bad5b79e948a75.png)'
- en: Looking at the above figure, the parameters of the network are in matrix form
    because this makes calculations of ANN much easier. For each layer, there is an
    associated weights matrix. Just multiply the inputs matrix by the parameters matrix
    of a given layer to return the outputs in such layer. Chromosomes in GA are 1D
    vectors and thus we have to convert the weights matrices into 1D vectors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的图中可以看出，网络的参数是以矩阵形式存在的，因为这使得 ANN 的计算更为简便。对于每一层，都有一个关联的权重矩阵。只需将输入矩阵乘以给定层的参数矩阵即可返回该层的输出。遗传算法中的染色体是
    1D 向量，因此我们需要将权重矩阵转换为 1D 向量。
- en: Because matrix multiplication is a good option to work with ANN, we will still
    represent the ANN parameters in the matrix form when using the ANN. Thus, matrix
    form is used when working with ANN and vector form is used when working with GA.
    This makes us need to convert the matrix to vector and vice versa. The next figure
    summarizes the steps of using
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 由于矩阵乘法是处理 ANN 的一个好选择，我们在使用 ANN 时仍将 ANN 参数表示为矩阵形式。因此，在处理 ANN 时使用矩阵形式，而在处理 GA
    时使用向量形式。这使我们需要在矩阵与向量之间进行转换。下图总结了使用的步骤。
- en: GA with ANN. This figure is referred to as the **main figure**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: GA 与 ANN。此图被称为**主图**。
- en: '![figure-name](../Images/57ce8711167885fdd567d24b6587d7b0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/57ce8711167885fdd567d24b6587d7b0.png)'
- en: Weights Matrices to 1D Vector
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权重矩阵转为 1D 向量
- en: Each solution in the population will have two representations. First is a 1D
    vector for working with GA and second is a matrix to work with ANN. Because there
    are 3 weights matrices for the 3 layers (2 hidden + 1 output), there will be 3
    vectors, one for each matrix. Because a solution in GA is represented as a single
    1D vector, such 3 individual 1D vectors will be concatenated into a single 1D
    vector. Each solution will be represented as a vector of length 24,540\. The next
    Python code creates a function named **mat_to_vector()** that converts the parameters
    of all solutions within the population from matrix to vector.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 人口中的每个解将有两种表示方式。首先是用于遗传算法（GA）的 1D 向量，其次是用于人工神经网络（ANN）的矩阵。由于有 3 个权重矩阵对应 3 层（2
    层隐藏层 + 1 层输出层），因此会有 3 个向量，每个矩阵对应一个。由于 GA 中的解表示为单个 1D 向量，因此这 3 个 1D 向量将被连接成一个单一的
    1D 向量。每个解将表示为长度为 24,540 的向量。接下来的 Python 代码创建了一个名为**mat_to_vector()**的函数，将种群中所有解的参数从矩阵转换为向量。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The function accepts an argument representing the population of all solutions
    in order to loop through them and return their vector representation. At the beginning
    of the function, an empty list variable named **pop_weights_vector** is created
    to hold the result (vectors of all solutions). For each solution in matrix form,
    there is an inner loop that loops through its three matrices. For each matrix,
    it is converted into a vector using the **numpy.reshape()** function which accepts
    the input matrix and the output size to which the matrix will be reshaped. The
    variable **curr_vector** accepts all vectors for a single solution. After all
    vectors are generated, they get appended into the **pop_weights_vector** variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个表示所有解种群的参数，以便循环遍历并返回其向量表示。在函数开始时，创建一个空列表变量**pop_weights_vector**来存放结果（所有解的向量）。对于矩阵形式的每个解，有一个内部循环遍历其三个矩阵。对于每个矩阵，使用**numpy.reshape()**函数将其转换为向量，该函数接受输入矩阵和要重塑的输出大小。变量**curr_vector**接受单个解的所有向量。生成所有向量后，它们会被附加到**pop_weights_vector**变量中。
- en: Note that we used the **numpy.extend()** function for vectors belonging to the
    same solution and **numpy.append()** for vectors belonging to different solutions.
    The reason is that **numpy.extend()** takes the numbers within the 3 vectors belonging
    to the same solution and concatenate them together. In other words, calling this
    function for two lists returns a new single list with numbers from both lists.
    This is suitable in order to create just a 1D chromosome for each solution. But
    **numpy.append()** will return three lists for each solution. Calling it for two
    lists, it returns a new list which is split into two sub-lists. This is not our
    objective. Finally, the function **mat_to_vector()** returns the population solutions
    as a NumPy array for easy manipulation later.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用**numpy.extend()**函数来处理属于同一解的向量，而**numpy.append()**函数来处理属于不同解的向量。原因是**numpy.extend()**将同一解中的
    3 个向量中的数字连接在一起。换句话说，对两个列表调用此函数会返回一个新的单一列表，其中包含两个列表中的数字。这适用于为每个解创建一个 1D 染色体。但**numpy.append()**将返回每个解的三个列表。对两个列表调用时，它会返回一个新的列表，并将其拆分为两个子列表。这不是我们的目标。最后，**mat_to_vector()**函数将种群解作为
    NumPy 数组返回，以便后续操作。
- en: Implementing GA Steps
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现 GA 步骤
- en: After converting all solutions from matrices to vectors and concatenated together,
    we are ready to go through the GA steps discussed in the tutorial titled **"Introduction
    to Optimization with Genetic Algorithm"**. The steps are presented in the **main
    figure** and also summarized in the next figure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在将所有解从矩阵转换为向量并拼接在一起后，我们准备好进行教程中讨论的 GA 步骤，该教程标题为**"基因算法优化介绍"**。这些步骤在**主要图**中展示，并在下一个图中进行了总结。
- en: '![genetic-algorithm-steps](../Images/6ab6d32f52e77336c2e67f65d9e0058b.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![genetic-algorithm-steps](../Images/6ab6d32f52e77336c2e67f65d9e0058b.png)'
- en: Remember that GA uses a fitness function to returns a fitness value for each
    solution. The higher the fitness value the better the solution. The best solutions
    are returned as parents in the **parents selection** step.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，GA 使用适应度函数来返回每个解的适应度值。适应度值越高，解越好。在**父代选择**步骤中，最佳解会作为父代返回。
- en: One of the common fitness functions for a classifier such as ANN is the accuracy.
    It is the ratio between the correctly classified samples and the total number
    of samples. It is calculated according to the next equation. The classification
    accuracy of each solution is calculated according to steps in the **main figure**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像 ANN 这样的分类器，常见的适应度函数之一是准确率。它是正确分类样本与样本总数之间的比率。准确率按照下述方程计算。每个解的分类准确率根据**主要图**中的步骤计算。
- en: '![Equation](../Images/e8768f7eb7deeb08cb4bd8ca72e54f27.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Equation](../Images/e8768f7eb7deeb08cb4bd8ca72e54f27.png)'
- en: The single 1D vector of each solution is converted back into 3 matrices, one
    matrix for each layer (2 hidden and 1 output). Conversion takes place using a
    function called **vector_to_mat()**. It is defined in the next code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个解的单个 1D 向量被转换回 3 个矩阵，每层一个矩阵（2 个隐藏层和 1 个输出层）。转换通过一个名为**vector_to_mat()**的函数进行。其定义见下方代码。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It reverses the work done previously. But there is an important question. If
    the vector of a given solution is just one piece, how we can split into three
    different parts, each part represents a matrix? The size of the first parameters
    matrix between the input layer and the hidden layer is 102x150\. When being converted
    into a vector, its length will be 15,300\. Because it is the first vector to be
    inserted in the **curr_vector** variable according to the **mat_to_vector()**
    function, then its indices start from index 0 and end at index 15,299\. The **mat_pop_weights**
    is used as an argument for the **vector_to_mat()** function in order to know the
    size of each matrix. We are not interested in using the weights from the **mat_pop_weights**
    variable but just the matrices sizes are used from it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这会逆转之前的工作。但有一个重要问题。如果给定解的向量只是一个整体，我们如何将其拆分成三个不同的部分，每部分代表一个矩阵？输入层与隐藏层之间的第一个参数矩阵的大小是
    102x150。转换为向量后，其长度将为 15,300。由于这是根据**mat_to_vector()**函数插入到**curr_vector**变量中的第一个向量，因此其索引从
    0 开始，到 15,299 结束。**mat_pop_weights**被用作**vector_to_mat()**函数的参数，以了解每个矩阵的大小。我们不关注使用**mat_pop_weights**变量中的权重，仅使用矩阵的大小。
- en: For the second vector in the same solution, it will be the result of converting
    a matrix of size 150x60\. Thus the vector length is 9,000\. Such a vector is inserted
    into the **curr_vector** variable just before the previous vector of length 15,300\.
    As a result, it will start from index 15,300 and ends at index 15,300+9,000-1=24,299\.
    The -1 is used because Python starts indexing at 0\. For the last vector created
    from the parameters matrix of size 60x4, its length is 240\. Because it is added
    into the **curr_vector** variable exactly after the previous vector of length
    9,000, then its index will start after it. That is its start index is 24,300 and
    its end index is 24,300+240-1=24,539\. So, we can successfully restore the vector
    into the original 3 matrices.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同一解中的第二个向量，它将是将150x60的矩阵转换后的结果。因此，向量长度为9,000。这样的向量插入到**curr_vector**变量中，紧接在之前长度为15,300的向量之前。因此，它将从索引15,300开始，到索引15,300+9,000-1=24,299结束。-1的原因是Python从0开始索引。最后，从60x4的参数矩阵创建的向量长度为240。因为它在长度为9,000的前一个向量之后添加到**curr_vector**变量中，所以它的起始索引是在其之后的，即起始索引为24,300，结束索引为24,300+240-1=24,539。因此，我们可以成功地将向量恢复到原始的3个矩阵中。
- en: The matrices returned for each solution are used to predict the class label
    for each of the 1,962 samples in the used dataset to calculate the accuracy. This
    is done using 2 functions which are **predict_outputs()** and **fitness()** according
    to the next code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的矩阵用于预测所用数据集中1,962个样本的类别标签，以计算准确性。这是通过**predict_outputs()**和**fitness()**两个函数来完成的，具体代码如下。
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The **predict_outputs()** function accepts the weights of a single solution,
    inputs, and outputs of the training data, and an optional parameter that specifies
    which activation function to use. It returns the accuracy of just one solution
    not all solutions within the population. It order to return the fitness value
    (i.e. accuracy) of all solutions within the population, the **fitness()** function
    loops through each solution, pass it to the **predict_outputs()** function, store
    the accuracy of all solutions into the **accuracy** array, and finally return
    such an array.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**predict_outputs()**函数接受单个解的权重、输入和训练数据的输出，以及一个可选参数来指定使用哪个激活函数。它仅返回一个解的准确性，而不是种群中的所有解。为了返回种群中所有解的适应度值（即准确性），**fitness()**函数遍历每个解，将其传递给**predict_outputs()**函数，将所有解的准确性存储到**accuracy**数组中，最后返回该数组。'
- en: After calculating the fitness value (i.e. accuracy) for all solutions, the remaining
    steps of GA in the main figure are applied the same way done previously. The best
    parents are selected, based on their accuracy, into the mating pool. Then mutation
    and crossover variants are applied in order to produce the offspring. The population
    of the new generation is created using both offspring and parents. These steps
    are repeated for a number of generations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 计算所有解的适应度值（即准确性）后，主图中的GA其余步骤按之前的方式应用。根据其准确性选择最佳父代，进入交配池。然后应用变异和交叉变体以产生后代。新一代的种群通过后代和父代一起创建。这些步骤在多代中重复进行。
- en: More On This Topic
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的Python代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建一个强大的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创企业理想的编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并通过寻找目标来…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为出色数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
