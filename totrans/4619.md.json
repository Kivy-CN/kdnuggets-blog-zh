["```py\npip install opencv-python==3.4.2\npip install opencv-contrib-python==3.3.1\n```", "```py\nimport cv2\ncv2.__version__\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline# Import the image\nimg = cv2.imread('burano.jpg')\nplt.imshow(img)\n```", "```py\n# Convert the image into RGB\nimg_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\nplt.imshow(img_rgb)\n```", "```py\n# Convert the image into gray scale\nimg_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nplt.imshow(img_gray, cmap = 'gray')\n```", "```py\n# Plot the three channels of the image\nfig, axs = plt.subplots(nrows = 1, ncols = 3, figsize = (20, 20))\nfor i in range(0, 3):\n    ax = axs[i]\n    ax.imshow(img_rgb[:, :, i], cmap = 'gray')\nplt.show()\n```", "```py\n# Transform the image into HSV and HLS models\nimg_hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\nimg_hls = cv2.cvtColor(img, cv2.COLOR_BGR2HLS)# Plot the converted images\nfig, (ax1, ax2) = plt.subplots(nrows = 1, ncols = 2, figsize = (20, 20))\nax1.imshow(img_hsv)\nax2.imshow(img_hls)\nplt.show()\n```", "```py\n# Copy the image\nimg_copy = img.copy()# Draw a rectangle\ncv2.rectangle(img_copy, pt1 = (800, 470), pt2 = (980, 530),\n              color = (255, 0, 0), thickness = 5)\nplt.imshow(img_copy)\n```", "```py\n# Draw a circle\ncv2.circle(img_copy, center = (950, 50), radius = 50,\n           color = (0, 0, 255), thickness = 5)\nplt.imshow(img_copy)\n```", "```py\n# Add text\ncv2.putText(img_copy, text = \"the Wall of Love\",\n            org = (250, 250),\n            fontFace = cv2.FONT_HERSHEY_DUPLEX,\n            fontScale = 2,\n            color = (0, 255, 0),\n            thickness = 2,\n            lineType = cv2.LINE_AA)\nplt.imshow(img_copy)\n```", "```py\n# Step 1\\. Define callback function\ndef draw_circle(event, x, y, flags, param):\nif event == cv2.EVENT_LBUTTONDOWN:\n            cv2.circle(img, center = (x, y), radius = 5,\n                       color = (87, 184, 237), thickness = -1)\nelif event == cv2.EVENT_RBUTTONDOWN:\n            cv2.circle(img, center = (x, y), radius = 10,\n                       color = (87, 184, 237), thickness = 1)\n```", "```py\n# Step 2\\. Call the window\nimg = cv2.imread('map.png')cv2.namedWindow(winname = 'my_drawing')\ncv2.setMouseCallback('my_drawing', draw_circle)\n```", "```py\n# Step 3\\. Execution\nwhile True:\n    cv2.imshow('my_drawing',img)\n    if cv2.waitKey(10) & 0xFF == 27:\n        break\ncv2.destroyAllWindows()\n```", "```py\n# Initialization\ndrawing = False\nix = -1\niy = -1# create a drawing function\ndef draw_rectangle(event, x, y, flags, params):\n\n    global ix, iy, drawing    \n    if event == cv2.EVENT_LBUTTONDOWN:\n        drawing = True\n        ix, iy = x, y\n\n    elif event == cv2.EVENT_MOUSEMOVE:\n        if drawing == True:\n            cv2.rectangle(img, pt1=(ix, iy), pt2=(x, y),\n                          color = (87, 184, 237), thickness = -1)\n\n    elif event == cv2.EVENT_LBUTTONUP:\n        drawing = False\n        cv2.rectangle(img, pt1=(ix, iy), pt2=(x, y),\n                     color = (87, 184, 237), thickness = -1)\n```"]