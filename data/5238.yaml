- en: 'Event Processing: Three Important Open Problems'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理：三大重要开放问题
- en: 原文：[https://www.kdnuggets.com/2018/05/event-processing-important-open-problems.html](https://www.kdnuggets.com/2018/05/event-processing-important-open-problems.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/05/event-processing-important-open-problems.html](https://www.kdnuggets.com/2018/05/event-processing-important-open-problems.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**By [Miyuru Dayarathna](https://wso2.com/about/team/miyuru-dayarathna), WSO2**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Miyuru Dayarathna](https://wso2.com/about/team/miyuru-dayarathna)，WSO2**'
- en: '**Introduction**'
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**简介**'
- en: Event Processing (EP) is a paradigm which analyzes streams of events to extract
    useful insights of real world events. As shown in Figure 1, we can divide EP into
    two [main areas](http://miyurud.github.io/papers/2018/event-processing-survey.pdf)
    called *Event Stream processing* and *Complex Event Processing (CEP)*. The first
    area, [stream (i.e., event) processing](https://medium.com/@srinathperera/what-is-stream-processing-1eadfca11b97)
    supports many kinds of continuous analytics such as filter, aggregation, enrichment,
    classification, joining, etc. The second area, CEP uses patterns over sequences
    of simple events to detect and report composite events.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理（EP）是一种分析事件流以提取现实世界事件有用见解的范式。如图 1 所示，我们可以将 EP 分为两个 [主要领域](http://miyurud.github.io/papers/2018/event-processing-survey.pdf)，即
    *事件流处理* 和 *复杂事件处理（CEP）*。第一个领域，[流（即事件）处理](https://medium.com/@srinathperera/what-is-stream-processing-1eadfca11b97)
    支持多种连续分析，例如过滤、聚合、丰富、分类、连接等。第二个领域，CEP 使用简单事件序列上的模式来检测和报告复合事件。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![Events Processing Fig1](../Images/153bbf20a110c795a9aa4387bfdc83f2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![事件处理图1](../Images/153bbf20a110c795a9aa4387bfdc83f2.png)'
- en: '**Figure 1: Difference between event processing terminologies**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1：事件处理术语的区别**'
- en: Based on a recent [survey](http://miyurud.github.io/papers/2018/event-processing-survey.pdf)
    and using multiple analysis conducted on the trends in the industry we identify
    three most important open problems in event processing as follows,
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 基于最近的 [调查](http://miyurud.github.io/papers/2018/event-processing-survey.pdf)
    和对行业趋势的多项分析，我们识别出事件处理领域的三大重要开放问题，如下所示，
- en: How to develop and debug event processing applications?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何开发和调试事件处理应用程序？
- en: How to tackle the system scalability issue?
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何解决系统可扩展性问题？
- en: How to manage the system state?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理系统状态？
- en: '**How to develop and debug event processing applications?**'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何开发和调试事件处理应用程序？**'
- en: First, we need to address key issues of how the event processing applications
    get developed. There are two key sub-issues as follows,
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要解决事件处理应用程序开发的关键问题。主要有两个关键子问题，如下所示，
- en: '**2.1 Can we use a single programming language across different stream processors?**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.1 我们可以在不同的流处理器之间使用一种编程语言吗？**'
- en: Event processing applications are developed following three main techniques.
    First, via the use of an API written using a standard programming language such
    as Java/C++/Python. Some examples for such event processing platforms (all of
    which are Apache projects) are [Flink](https://flink.apache.org/), [Samza](http://samza.apache.org/),
    [Apex](https://apex.apache.org/), [Storm](http://storm.apache.org/), [Heron](https://github.com/apache/incubator-heron),
    etc. Figure 2 shows a breakdown of the usage of programming languages by event
    processing software.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理应用程序的开发遵循三种主要技术。首先，通过使用用标准编程语言（如 Java/C++/Python）编写的 API。此类事件处理平台的一些示例（全部为
    Apache 项目）包括 [Flink](https://flink.apache.org/)、[Samza](http://samza.apache.org/)、[Apex](https://apex.apache.org/)、[Storm](http://storm.apache.org/)、[Heron](https://github.com/apache/incubator-heron)
    等。图 2 展示了事件处理软件使用编程语言的情况。
- en: '![Events Processing Fig2a, aggregated view ](../Images/187ade037749247ce144027e09060876.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![事件处理图2a，汇总视图](../Images/187ade037749247ce144027e09060876.png)'
- en: '![Events Processing Fig2, breakdown of the programming languages](../Images/8f81f056e5594c04a288ca8fab6552ee.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![事件处理图2，编程语言的分类](../Images/8f81f056e5594c04a288ca8fab6552ee.png)'
- en: '**Figure 2: Event Processing Software Programming Language usage. (a) aggregated
    view (b) breakdown of the programming languages used in different event processing
    systems.**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2：事件处理软件编程语言的使用情况。（a）汇总视图（b）不同事件处理系统中使用的编程语言的分类。**'
- en: Second, they can be developed using a custom (i.e., domain specific) language.
    For example, IBM Infosphere [Stream’s Stream Processing Language](https://www.ibm.com/support/knowledgecenter/en/SSCRJU_4.0.0/com.ibm.streams.ref.doc/doc/spl-container.html)
    (SPL), [Software AG’s Apama](https://www.softwareag.com/corporate/products/apama_webmethods/analytics/default),
    etc. The program statements written in the custom language get translated to intermediary
    languages such as C/C++/Perl, etc. and then they get compiled into application
    executables.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第二，它们可以使用自定义（即领域特定）语言开发。例如，IBM Infosphere [Stream 的流处理语言](https://www.ibm.com/support/knowledgecenter/en/SSCRJU_4.0.0/com.ibm.streams.ref.doc/doc/spl-container.html)（SPL），[Software
    AG 的 Apama](https://www.softwareag.com/corporate/products/apama_webmethods/analytics/default)
    等。用自定义语言编写的程序语句会被翻译成中间语言，如 C/C++/Perl 等，然后被编译成应用程序可执行文件。
- en: Third, event processing applications can be developed using SQL or SQL like
    languages. Examples include WSO2 [Siddhi](https://wso2.github.io/siddhi/) ([WSO2
    Stream Processor](https://wso2.com/analytics)), Confluent’s [KSQL](https://www.confluent.io/product/ksql/),
    [FlinkSQL](https://data-artisans.com/blog/flink-streaming-sql-ksql-stream-processing),
    [SparkSQL](https://spark.apache.org/sql/), [BeamSQL](https://beam.apache.org/documentation/dsls/sql/),
    etc. The SQL like languages (also known as [Streaming SQL](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/))
    provide familiar syntax for application developers with relational database background.
    Streaming SQL provides core operations which [cover 90% of the use cases](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 第三，事件处理应用程序可以使用 SQL 或类似 SQL 的语言开发。例如，WSO2 的 [Siddhi](https://wso2.github.io/siddhi/)
    ([WSO2 流处理器](https://wso2.com/analytics))，Confluent 的 [KSQL](https://www.confluent.io/product/ksql/)，[FlinkSQL](https://data-artisans.com/blog/flink-streaming-sql-ksql-stream-processing)，[SparkSQL](https://spark.apache.org/sql/)，[BeamSQL](https://beam.apache.org/documentation/dsls/sql/)，等等。类似
    SQL 的语言（也称为[流式 SQL](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/)）为具有关系数据库背景的应用开发者提供了熟悉的语法。流式
    SQL 提供的核心操作[覆盖了 90% 的用例](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/)。
- en: The diversity of the programming languages has created the need to follow a
    common syntax so that [usability and portability issues](https://player.vimeo.com/video/264663504)
    prevalent across event stream processors could be addressed. In doing so the third
    approach described above ([Streaming SQL](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/))
    has significant potential of becoming the standard for specifying event stream
    processing applications. The ideal scenario would be to create a streaming SQL
    system which is ANSI SQL compliant. Currently, there are bits and pieces missing
    such as supporting set operations in Streaming SQL ([see](https://player.vimeo.com/video/264663504)).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言的多样性产生了需要遵循通用语法的需求，以解决在事件流处理器中普遍存在的[可用性和移植性问题](https://player.vimeo.com/video/264663504)。在这样做的过程中，上述第三种方法（[流式
    SQL](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/)）有可能成为指定事件流处理应用程序的标准。理想的情况是创建一个符合
    ANSI SQL 的流式 SQL 系统。目前，还存在一些缺失的部分，例如在流式 SQL 中支持集合操作（[见](https://player.vimeo.com/video/264663504)）。
- en: '**2.2 Query Writing and Debugging Environment**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**2.2 查询编写与调试环境**'
- en: Most of the stream processors express business logic using programming language
    code such as [Streaming SQL](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/),
    Scala, Java, etc. Hence it is useful to have right set of tools for developing
    stream processing applications. To develop large complex applications most of
    the time non-programmers prefer graphical user interface (GUI) based environments
    over command line interface (CLI) for application development. Large portion of
    the stream processor users are non-programmers such as data scientists. Hence
    not having a proper query writing and debugging environment makes the life of
    non-programmers a very difficult one. [Data analytics notebooks](http://miyurud.github.io/papers/2017/stream-processing-notebook.pdf)
    are emerging as a query writing environment for stream processor applications.
    Almost all the event stream processors have some kind of application debugging
    support. Yet, the depth of debugging support varies significantly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数流处理器使用编程语言代码来表达业务逻辑，例如 [流式 SQL](https://wso2.com/library/articles/2018/02/stream-processing-101-from-sql-to-streaming-sql-in-ten-minutes/)、Scala、Java
    等。因此，拥有正确的工具集对于开发流处理应用程序非常有用。为了开发大型复杂的应用程序，大多数非程序员更倾向于使用基于图形用户界面（GUI）的环境，而不是命令行界面（CLI）。大量的流处理器用户是非程序员，例如数据科学家。因此，缺乏适当的查询编写和调试环境使非程序员的工作非常困难。[数据分析笔记本](http://miyurud.github.io/papers/2017/stream-processing-notebook.pdf)正在成为流处理应用程序的查询编写环境。几乎所有的事件流处理器都有某种应用调试支持。然而，调试支持的深度差异很大。
- en: '**How can the system scalability issue be solved?**'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何解决系统可扩展性问题？**'
- en: System scalability and performance are important metrics which measure the ability
    of a stream processor to handle large workloads. A scalable stream processor can
    expand its operational scale. The traditional scaling approaches are based on
    adding more resources and they are called vertical scaling (adding more resources
    to the same server) and horizontal scaling (adding multiple servers). However,
    some other techniques such as [elastic scaling](http://miyurud.github.io/papers/2017/ElasticCEP_ICPE2017-web.pdf),
    [approximate computing](https://www.infoq.com/articles/WSO2-algorithms-applied)
    could also be used to address the issues of system scalability.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 系统可扩展性和性能是衡量流处理器处理大工作负载能力的重要指标。一个可扩展的流处理器可以扩展其操作规模。传统的扩展方法基于增加更多资源，称为垂直扩展（向同一服务器添加更多资源）和水平扩展（添加多个服务器）。然而，一些其他技术如
    [弹性扩展](http://miyurud.github.io/papers/2017/ElasticCEP_ICPE2017-web.pdf)、[近似计算](https://www.infoq.com/articles/WSO2-algorithms-applied)
    也可以用来解决系统可扩展性问题。
- en: '**How to manage the system state effectively?**'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**如何有效管理系统状态？**'
- en: State of an event processor is the set of values being repeatedly accessed during
    the processing of the events from the incoming data stream. State has three types
    called Application state, User state, and System state. Application state refers
    to the values being created and maintained while running the application. This
    can be for example, state required to detect conditions such as patterns or content
    of a length window. Application state resides in the ephemeral store (See Figure
    2) such as main memory and periodically gets flushed to the permanent store. User
    state is the user data which is accessed by the application to make runtime decisions.
    For example, a permanent store such as a RDBMS can contain information of user’s
    credit history. System state refers to everything else the framework provides
    to make sure that if the stream processor crashes, it is recoverable back to its
    normal operations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理器的状态是处理来自输入数据流的事件期间反复访问的值集合。状态有三种类型：应用程序状态、用户状态和系统状态。应用程序状态是指在运行应用程序时创建和维护的值。例如，检测模式或长度窗口内容所需的状态。应用程序状态驻留在短期存储器（见图
    2）中，例如主内存，并定期刷新到长期存储器。用户状态是应用程序访问的用户数据，用于做出运行时决策。例如，像 RDBMS 这样的长期存储器可以包含用户的信用历史信息。系统状态指框架提供的其他所有内容，以确保如果流处理器崩溃，它可以恢复到正常操作状态。
- en: '![Events Processing Fig3, A typical data stream processor ](../Images/6a72ace515156012bdadce8ee7756745.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![事件处理图3，典型数据流处理器](../Images/6a72ace515156012bdadce8ee7756745.png)'
- en: '**Figure 3: A typical data stream processor with state management functionalities**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3：具有状态管理功能的典型数据流处理器**'
- en: Reliable and fault tolerant state management is important for a stream processor
    to provide highly available service. Traditionally, reliability and fault tolerance
    of the stream processors have been achieved by checkpointing their operator states
    into distributed file system, or to a Relational Database Management System (RDBMS)
    or to a distributed message queue (such as Apache Kafka). However, checkpointing
    introduces latency penalty since we need to stop execution of stream application
    before taking the checkpoint. Several techniques have been introduced to reduce
    the time taken for saving checkpoints. E.g., Incremental checkpointing keeps a
    log of changes made to the state and recovers using the log rather than taking
    full checkpoints of the application state every time. Hence this technique is
    only beneficial in use cases where the snapshot recovery cost can be subdued by
    the performance gain made by taking incremental checkpoints. Another approach
    would be instead of separating out computation layer and database layer into two,
    they can be merged into one layer and have the other tier as the storage layer
    for streams and snapshots ([see for details](https://www.infoq.com/presentations/distributed-stream-processing-flink)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 可靠且容错的状态管理对流处理器提供高可用服务至关重要。传统上，流处理器的可靠性和容错性通过将其操作员状态检查点保存到分布式文件系统、关系数据库管理系统（RDBMS）或分布式消息队列（如Apache
    Kafka）来实现。然而，检查点引入了延迟，因为我们需要在进行检查点之前停止流应用程序的执行。已经提出了几种技术来减少保存检查点所需的时间。例如，增量检查点保持对状态所做更改的日志，并使用日志进行恢复，而不是每次都对应用程序状态进行完整检查点。因此，该技术仅在快照恢复成本可以通过增量检查点带来的性能提升来弥补时才有用。另一种方法是将计算层和数据库层合并为一个层，将另一层作为流和快照的存储层
    ([详细信息请参见](https://www.infoq.com/presentations/distributed-stream-processing-flink))。
- en: '**Conclusion**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**结论**'
- en: How an event processing application can be programmed, how it can be scaled,
    and how to manage its state are three main issues to be solved in event processing
    paradigm. Finding effective solutions for the above three questions may lead us
    to the next generation stream processors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理应用程序如何编程、如何扩展以及如何管理其状态是事件处理范式中需要解决的三个主要问题。找到有效的解决方案可能会引导我们进入下一代流处理器。
- en: '**Bio:** [Miyuru Dayarathna](https://wso2.com/about/team/miyuru-dayarathna)
    is a Senior Technical Lead at WSO2\. He is a computer scientist with multiple
    research interests and contributions in stream computing, graph data management
    and mining, cloud computing, performance engineering, IoT, etc.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：** [Miyuru Dayarathna](https://wso2.com/about/team/miyuru-dayarathna)
    是WSO2的高级技术主管。他是一名计算机科学家，在流计算、图数据管理和挖掘、云计算、性能工程、物联网等方面有多个研究兴趣和贡献。'
- en: '**Related:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[The Executive Guide to Data Science and Machine Learning](https://www.kdnuggets.com/2018/05/executive-guide-data-science-machine-learning.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学与机器学习的执行指南](https://www.kdnuggets.com/2018/05/executive-guide-data-science-machine-learning.html)'
- en: '[Data Science vs Machine Learning vs Data Analytics vs Business Analytics](https://www.kdnuggets.com/2018/05/data-science-machine-learning-business-analytics.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学与机器学习与数据分析与业务分析的区别](https://www.kdnuggets.com/2018/05/data-science-machine-learning-business-analytics.html)'
- en: '[Actionable Insights: Obliterating BI, Data Warehousing as We Know It](https://www.kdnuggets.com/2017/10/actionable-insights-bi-data-warehousing.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可操作的洞察：消除BI和数据仓库的现状](https://www.kdnuggets.com/2017/10/actionable-insights-bi-data-warehousing.html)'
- en: More On This Topic
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多分类问题的性能评估指标](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
- en: '[Common Data Problems (and Solutions)](https://www.kdnuggets.com/2022/02/common-data-problems-solutions.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[常见数据问题（及解决方案）](https://www.kdnuggets.com/2022/02/common-data-problems-solutions.html)'
- en: '[4 Factors to Identify Machine Learning Solvable Problems](https://www.kdnuggets.com/2022/04/4-factors-identify-machine-learning-solvable-problems.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[识别机器学习可解决问题的4个因素](https://www.kdnuggets.com/2022/04/4-factors-identify-machine-learning-solvable-problems.html)'
- en: '[Want to Use Your Data Skills to Solve Global Problems? Here’s What…](https://www.kdnuggets.com/2022/04/jhu-want-data-skills-solve-global-problems.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[想用你的数据技能解决全球问题？这里有一些建议…](https://www.kdnuggets.com/2022/04/jhu-want-data-skills-solve-global-problems.html)'
- en: '[Solving 5 Complex SQL Problems: Tricky Queries Explained](https://www.kdnuggets.com/2022/07/5-hardest-things-sql.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解决 5 个复杂的 SQL 问题：棘手查询解析](https://www.kdnuggets.com/2022/07/5-hardest-things-sql.html)'
