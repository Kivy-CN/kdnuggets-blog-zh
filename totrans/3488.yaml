- en: 'Amazon Machine Learning: Nice and Easy or Overly Simple?'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2016/02/amazon-machine-learning-nice-easy-simple.html](https://www.kdnuggets.com/2016/02/amazon-machine-learning-nice-easy-simple.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**By Alex Perrier, [@alexip](https://twitter.com/alexip)**, (originally published
    on the [Open Data Science blog](http://www.opendatascience.com/blog/amazon-machine-learning-nice-and-easy-or-overly-simple/))'
  prefs: []
  type: TYPE_NORMAL
- en: '**Machine Learning as a Service (MLaaS) promises to put data science within
    the reach of companies. In that context, Amazon Machine Learning is a predictive
    analytics service with binary/multiclass classification and linear regression
    features. The service offers a simple workflow but lacks model selection features
    and has slow execution times. Predictive performances are satisfying.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![AmazonWebservices_Logo.svg](../Images/76dc4722bfa89125a95988a8f65108c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Data science is hot and sexy, but it is complex. Building and maintaining a
    data science infrastructure can be expensive. Experienced data scientists are
    scarce and in-house development of algorithms, building predictive analytics applications,
    and creating production-ready APIs, requires specific know-how and resources.
    Even though companies may anticipate the benefits of a data science service, they
    may not be ready to make the necessary investments without testing the waters
    first.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is where Machine Learning-as-a-Service comes in with a promise to simplify
    and democratize Machine Learning: reap the benefits of Machine Learning within
    a short timeframe while keeping costs low.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Several key players have entered that field: [Google Predictive Analytics](https://cloud.google.com/prediction/),
    [Microsoft Azure Machine Learning](https://azure.microsoft.com/en-us/services/machine-learning/),
    [IBM Watson](http://www.ibm.com/analytics/watson-analytics/), [Big ML](https://bigml.com/)
    and [many others](http://www.butleranalytics.com/10-machine-learning-as-a-service-platforms/).
    Some offer a simplified Prediction Analytics service while others offer a more
    specialized interface and data science services beyond prediction.'
  prefs: []
  type: TYPE_NORMAL
- en: One relatively new entrant is AWS with its [Amazon Machine Learning](https://aws.amazon.com/machine-learning/)
    service. Launched in April 2015, less than a year ago, at the AWS 2015 summit,
    Amazon Machine Learning aims at simplifying predictive analytics by focusing on
    the data workflow and keeping the more involved and challenging technical details
    under the hood. By removing an important part of the technical details from the
    sight of the user, Amazon Machine Learning brings data science to a much broader
    audience. It significantly lowers the barrier of entry for companies wishing to
    experiment with predictive analytics by making powerful Machine Learning tools
    available and operational in a very short timeframe.
  prefs: []
  type: TYPE_NORMAL
- en: A large portion of the Internet already runs on AWS many services. AWS move
    to add a Machine Learning offering to the mix will allow engineers to include
    predictive analytics capabilities into their existing applications.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Machine Learning enables companies to experiment with data science and
    assess its business value without commiting significant resources and investments.
    In that regard, Amazon Machine Learning is [Predictive Analytics 101](http://docs.aws.amazon.com/machine-learning/latest/dg/machine-learning-concepts.html)
    for companies wishing to board the data science train.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pistons, Carburetors and Filters: What’s Under the Hood?'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One important trait of Amazon Machine Learning is its simplified approach to
    Machine Learning. It “[dumbs down machine learning for the rest of us [InfoWorld]](http://www.infoworld.com/article/2908498/amazon-web-services/amazon-machine-learning-for-the-rest-us.html)“;
    it “[puts Machine Learning In Reach Of Any Developer [Techcrunch]](http://techcrunch.com/2015/04/09/aws-wants-to-put-machine-learning-in-reach-of-any-developer/#.mdrfnlu:aFbV).”
  prefs: []
  type: TYPE_NORMAL
- en: But predictive analytics is a complex field. Tasks such as data munging, feature
    engineering, parameter tuning, and model selection take time and follow a well
    established set of protocols, methods and techniques. Can Amazon Machine Learning’s
    simplified service still deliver performance at the expense of this complexity?
    Can you still reap the benefits of predictive analytics with a simplified Machine
    Learning pipeline?
  prefs: []
  type: TYPE_NORMAL
- en: '**1 Model, 1 Algorithm, 3 Different Tasks, Easy Pipeline Setup, Wizards, and
    Smart Defaults**'
  prefs: []
  type: TYPE_NORMAL
- en: According to the [documentation](https://aws.amazon.com/documentation/machine-learning/),
    Amazon Machine Learning is based on linear models trained via [Stochastic Gradient
    Descent](https://en.wikipedia.org/wiki/Stochastic_gradient_descent) (SGD for short).
    That’s it. No Random Forests or Boosted trees, no Kernel SVM, Bayes classifiers
    or Clustering. This may appear to be a drastic limitation. However the Stochastic
    Gradient Descent algorithm developed by [Leon Bottou](http://leon.bottou.org/papers)
    is a very stable and resilient algorithm. This algorithm has been around for a
    long time with many improved versions over the years.
  prefs: []
  type: TYPE_NORMAL
- en: This simple predictive setup will most probably be sufficient to address a large
    portion of real world business prediction problems. As we will see it also presents
    decent performances.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tasks**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Amazon Machine Learning platform gives you a choice of three supervised
    learning tasks, each with their associated models and loss functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**binary classification** with logistic regression (logistic loss function
    + SGD)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**multiclass classification** with multinomial logistic regression (multinomial
    logistic loss + SGD)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and **regression** with linear regression (squared loss function + SGD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For binary classifier, the scoring function is the [F1-measure](https://en.wikipedia.org/wiki/F1_score);
    for multiclass classifier, scoring is the macro average F1-measure which averages
    the F1-measure of each class; and for regression the RMSE metric is used. Commonly
    used in information retrieval, the F1-measure is the harmonic mean of precision
    and recall. It is a robust classification measure somewhat insensitive to multiclass
    imbalance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Feature Engineering with Recipes**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the Amazon Machine Learning pipeline is the possibility to transform
    your variables with [Recipes](http://docs.aws.amazon.com/machine-learning/latest/dg/feature-processing.html).
    Several transformations are available through JSON formatted instructions: replacing
    missing values, Cartesian products, binning categorical variables into numerical
    ones, or forming n-grams for text data.'
  prefs: []
  type: TYPE_NORMAL
- en: For instance here is one of the recipe that was automatically generated to transform
    categorical values into numeric ones when working on the [iris](https://archive.ics.uci.edu/ml/datasets/Iris)
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Training vs Validation Sets**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Amazon Machine Learning splits your training dataset into 70/30
    chunks. Here again Amazon Machine Learning simplifies rich techniques into very
    simple and limited choices. Splitting your data into training and validation could
    be done in a myriad ways which Amazon Machine Learning boils down to randomizing
    the samples or not. You can of course still split your data as you wish outside
    of Amazon Machine Learning, create a new datasource for an held-out set, and evaluate
    the performance of your model on this held-out dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**SGD Parameter Tuning**'
  prefs: []
  type: TYPE_NORMAL
- en: 'A reduced number of parameters are available for tuning your model: the number
    of passes, the regularization type (None, L1, L2), and the regularization parameter.
    It is not possible to set up the learning rate of the algorithm and no information
    is given on how this important parameter is set.'
  prefs: []
  type: TYPE_NORMAL
- en: But Where Do You Start?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With over 50 different services with cool names like Elastic Beanstalk, Kinesis,
    RedShift, or Route 53, the AWS console home page can definitely be intimidating.
    However, thanks to good [documentation](http://docs.aws.amazon.com/machine-learning/latest/dg/what-is-amazon-machine-learning.html)
    and a set of well conceived wizards, creating your first project is a fast and
    pleasant experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have your data set in a properly formatted csv file on S3, the whole
    process is composed of four steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a **datasource**: Telling Amazon Machine Learning where your data
    is and what schema it follows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating a **model**: The task is inferred from the data type of your target
    (numeric => regression, binary => classification or categorical for multinomial
    classification) and you can set some custom parameters to the model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Training** and evaluating the model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing batch **predictions**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The best strategy to get started is to follow the well written and detailed
    [Amazon Machine Learning’s tutorial](http://docs.aws.amazon.com/machine-learning/latest/dg/tutorial.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'These resources are also available:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Cloud Academy Course on AWS Machine Learning](https://cloudacademy.com/amazon-web-services/amazon-machine-learning-course/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Amazon Machine Learning: use cases and a real example in Python](http://cloudacademy.com/blog/aws-machine-learning/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and this excellent YouTube video [Your first week on Amazon AWS](https://www.youtube.com/watch?v=7CiHBcqw6zc),
    by Miles Ward for EC2 setup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And in Practice?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Cross Validation**'
  prefs: []
  type: TYPE_NORMAL
- en: There is no cross-validation methods, per se, in Amazon Machine Learning. The
    suggested way is to create your data files following a K-fold cross validation
    scheme, create the data sources for each fold, and train models on each datasource.
    For instance, in order to perform a four-fold cross-validation you would need
    to create four datasources, four models and four evaluations. You can then average
    the four evaluation scores to obtain the final cross-validated score of your model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Overfitting**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Overfitting](http://docs.aws.amazon.com/machine-learning/latest/dg/model-fit-underfitting-vs-overfitting.html)
    happens when your model adheres so closely to the training data that it loses
    its ability to predict new data. Detecting overfitting is important to make sure
    your model has any predictive power. It can be done via a [Learning Curve](https://class.coursera.org/ml-005/lecture/64),
    by comparing [error curves](http://scikit-learn.org/stable/modules/learning_curve.html)
    between training sets and validation sets for different sample sizes.'
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Machine Learning offers two classic regularization methods (L1 Lasso
    and L2 Ridge) to reduce overfitting but no overfitting detection methods. To check
    if your model is overfitting your training data, you would need to create different
    datasets and models and evaluate each of them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Costs**'
  prefs: []
  type: TYPE_NORMAL
- en: Feature engineering and feature selection is a rinse-and-repeat process that
    requires creating and evaluating many of datasets. Each time a new data source
    is created, Amazon Machine Learning carries out a statistical analysis of the
    data which can add significantly to the overall cost of a project. While researching
    for this article, 95% of the costs were due to creating data statistics for each
    new datasources I tried. And it took Amazon Machine Learning around 15 hours to
    process approximately 400,000 samples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Alternative to the Console**'
  prefs: []
  type: TYPE_NORMAL
- en: Building a fast test/fail loop is primordial to any data science project. Back
    and forth processes between data files, models and validations need to happen
    in order to build a resilient model with strong predictive powers.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Amazon Machine Learning through the UI quickly becomes tedious
    especially if you’re already comfortable with the command line. A brand new Data-Model-Evaluation
    process involves about eight to ten pages, fields, and clicks. All this UI goodness
    takes time. Furthermore each new entity can take a few minutes to be available.
    You end up with a very slow process compared to a scripting based flow (command
    line, R studio, Jupyter notebooks, …).
  prefs: []
  type: TYPE_NORMAL
- en: Using recipes, uploading predefined schemas for your data sources, and using
    AWS CLI to manage S3 will help speed things up.
  prefs: []
  type: TYPE_NORMAL
- en: AWS offers SDKs in many languages including methods for Amazon Machine Learning.
    You can drive your Amazon Machine Learning projects in Python, Java or Scala.
    See for instance this github repo of[Amazon Machine Learning code samples](https://github.com/awslabs/machine-learning-samples).
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with Amazon Machine Learning through scripting is probably the most
    efficient way to interact with the service. But if you’re going to be writing
    scripts in Python anyway, the advantage of using Amazon Machine Learning becomes
    less obvious. You might as well use a dedicated data science toolkit such as Scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: Case Study
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By being limited to linear models and the Stochastic Gradient Descent algorithm,
    one may wonder about the service’s performances. In the rest of this article,
    I will compare Scikit-learn and Amazon Machine Learning performances for binary
    and multiclass classification.
  prefs: []
  type: TYPE_NORMAL
- en: Iris Dataset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s start with a simple and very easy multi-class classification dataset,
    the [Iris dataset](http://scikit-learn.org/stable/modules/generated/sklearn.datasets.load_iris.html),
    and compare performances of Scikit-learn’s [SGDClassifier](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDClassifier.html)
    with the Amazon Machine Learning multi-class classification .
  prefs: []
  type: TYPE_NORMAL
- en: 'The SGDClassifier is set up similarly to the Amazon Machine Learning SGD parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: L2 regularization (alpha = 10^(-6) )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: optimal learning rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: log loss function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 10 iterations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The training set is split 70/30 for training and evaluation with random sample
    selection. The macro-averaged F1-score is used both with Scikit and Amazon Machine
    Learning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final evaluation score on the held-out set is very similar between Scikit-learn
    and Amazon Machine Learning with:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scikit-learn: 0.93'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon Machine Learning: 0.94'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far so good. Now for a more complex dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Kaggle Airbnb Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The recent [Airbnb New User Bookings](https://www.kaggle.com/c/airbnb-recruiting-new-user-bookings)
    Kaggle competition consists in predicting the country destination of Airbnb users
    given a series of datasets (country, age gender info, users and sessions).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will simplify the dataset and only consider the user training data which
    is composed of features such as: gender, age, affiliate, browser, date of registration,
    etc. The data set is freely available on the competition page, and only requires
    registration to Kaggle.'
  prefs: []
  type: TYPE_NORMAL
- en: In this dataset, about 40% of all users have not made any bookings. Instead
    of trying to predict the country of destination (if any), we will try to predict
    whether a user has booked a reservation or not, therefore solving a binary classification
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using 100k rows for a training dataset and the AUC score we get the following
    performance results on the training dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Amazon Machine Learning SGD : 0.71'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'scikit SGD : 0.61'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'scikit RandomForest: 0.70'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XGboost: 0.74'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Note: This is by no means intended to be a benchmark. The results above are
    only intended as illustration.*'
  prefs: []
  type: TYPE_NORMAL
- en: We tried several settings for SGD in scikit and could not get much closer to
    Amazon Machine Learning score. The scores were averaged over the initial validation
    30k samples created by Amazon Machine Learning and another heldout set of 50k
    samples.
  prefs: []
  type: TYPE_NORMAL
- en: No grid search was used for the Random Forest of the XGBoost classifiers. We
    used the default settings whenever possible.
  prefs: []
  type: TYPE_NORMAL
- en: What these results illustrate is that Amazon Machine Learning’s performances
    are as good as they can get when using a SGD classifier. The Amazon Machine Learning
    SGD outperforms Scikit-learn’s SGD. It is in the same ballpark as Random forest
    and is outperformed by XGboost. Similar performances have been observed in this
    [blog post](http://lenguyenthedat.com/minimal-data-science-2-avazu/#comment-2451032447).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In conclusion Amazon Machine Learning is a great way for companies to quickly
    start data science projects. The service is performant and easy to use. But it
    is missing important model selection features, has a very restricted set of algorithms
    and long execution times.
  prefs: []
  type: TYPE_NORMAL
- en: Amazon Machine Learning’s simplified approach enables engineers to quickly implement
    predictive analytics services. Which in turns allows companies to experiment and
    assess the business value of Data science.
  prefs: []
  type: TYPE_NORMAL
- en: It is also an excellent platform to learn and practice machine learning concepts
    without worrying about algorithms and models. A good way for aspiring data scientist
    to experience a real although simplified, data science project workflow.
  prefs: []
  type: TYPE_NORMAL
- en: The console-based workflow is slow. Using [SDKs](https://aws.amazon.com/sdk-for-python/)
    and [AWS CLI](http://docs.aws.amazon.com/cli/latest/reference/machinelearning/index.html)
    quickly becomes necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Tuning the model to address under-fitting and overfitting issues is possible
    through regularization. However, there is no easy way to detect the presence of
    overfitting or under-fitting. Adding classic visualization such as learning curves
    would greatly facilitate model selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bio: [Alex Perrier, Ph. D.](https://twitter.com/alexip) , is a Data Scientist,
    Software Engineer at Berklee Online and Contributor to ODSC. You can read more
    on his [Machine Learning blog](http://alexperrier.github.io).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](http://www.opendatascience.com/blog/amazon-machine-learning-nice-and-easy-or-overly-simple/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 Best Machine Learning APIs for Data Science](/2015/11/machine-learning-apis-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Standardizing the World of Machine Learning Web Service APIs](/2015/07/psi-machine-learning-web-service-apis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cloud Machine Learning Wars: Amazon vs IBM Watson vs Microsoft Azure](/2015/04/cloud-machine-learning-amazon-ibm-watson-microsoft-azure.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Make Large Language Models Play Nice with Your Software…](https://www.kdnuggets.com/how-to-make-large-language-models-play-nice-with-your-software-using-langchain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Easy Guide to Choose the Right Machine Learning Algorithm](https://www.kdnuggets.com/2020/05/guide-choose-right-machine-learning-algorithm.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn how to design, measure and implement trustworthy A/B tests…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Recommender System for Amazon Products with Python](https://www.kdnuggets.com/2023/02/building-recommender-system-amazon-products-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Free Amazon Courses to Learn Generative AI: For All Levels](https://www.kdnuggets.com/free-amazon-courses-to-learn-generative-ai-for-all-levels)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tick-Tock: Using Pendulum For Easy Date And Time Management In Python](https://www.kdnuggets.com/tick-tock-using-pendulum-for-easy-date-and-time-management-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
