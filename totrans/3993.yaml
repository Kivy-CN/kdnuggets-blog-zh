- en: Beginner’s Guide to Data Cleaning with Pyjanitor
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pyjanitor 数据清理初学者指南
- en: 原文：[https://www.kdnuggets.com/beginners-guide-to-data-cleaning-with-pyjanitor](https://www.kdnuggets.com/beginners-guide-to-data-cleaning-with-pyjanitor)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/beginners-guide-to-data-cleaning-with-pyjanitor](https://www.kdnuggets.com/beginners-guide-to-data-cleaning-with-pyjanitor)
- en: '![Data Cleaning with PyJanitor](../Images/9fe5bbb5c146b54a62f4af26d2c242c8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![使用 PyJanitor 进行数据清理](../Images/9fe5bbb5c146b54a62f4af26d2c242c8.png)'
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供 | DALLE-3 & Canva
- en: Have you ever dealt with messy datasets? They are one of the biggest hurdles
    in any data science project. These datasets can contain inconsistencies, missing
    values, or irregularities that hinder analysis. Data cleaning is the essential
    first step that lays the foundation for accurate and reliable insights, but it's
    lengthy and time-consuming.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾处理过混乱的数据集？它们是任何数据科学项目中最大的障碍之一。这些数据集可能包含不一致、缺失值或不规则性，妨碍分析。数据清理是打下准确可靠洞察基础的必要第一步，但它既漫长又耗时。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 加入网络安全职业的快速通道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 支持'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Fear not! Let me introduce you to Pyjanitor, a fantastic Python library that
    can save the day. It is a convenient Python package, providing a simple remedy
    to these data-cleaning challenges. In this article, I am going to discuss the
    importance of Pyjanitor along with its features and practical usage.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不用担心！让我向你介绍 Pyjanitor，一个可以拯救你的出色 Python 库。它是一个方便的 Python 包，提供了一个简单的解决方案来应对这些数据清理挑战。在这篇文章中，我将讨论
    Pyjanitor 的重要性以及它的功能和实际使用。
- en: By the end of this article, you will have a clear understanding of how Pyjanitor
    simplifies data cleaning and its application in everyday data-related tasks.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文结束时，你将清楚了解 Pyjanitor 如何简化数据清理及其在日常数据相关任务中的应用。
- en: What is Pyjanitor?
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Pyjanitor？
- en: Pyjanitor is an extended R package of Python, built on top of pandas that simplifies
    data cleaning and preprocessing tasks. It extends its functionality by offering
    a variety of useful functions that refine the process of cleaning, transforming,
    and preparing datasets. Think of it as an upgrade to your data-cleaning toolkit.
    Are you eager to learn about Pyjanitor? Me too. Let’s start.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Pyjanitor 是一个扩展的 R 包，基于 pandas 构建，简化了数据清理和预处理任务。它通过提供各种有用的功能来扩展其功能，优化数据清理、转换和准备的过程。可以把它看作是你数据清理工具包的升级版。你是否迫不及待想了解
    Pyjanitor 了？我也是。让我们开始吧。
- en: Getting Started
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门指南
- en: 'First things first, you need to install Pyjanitor. Open your terminal or command
    prompt and run the following command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你需要安装 Pyjanitor。打开你的终端或命令提示符并运行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The next step is to import Pyjanitor and Pandas into your Python script. This
    can be done by:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将 Pyjanitor 和 Pandas 导入你的 Python 脚本。可以通过以下方式完成：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now, you are ready to use Pyjanitor for your data cleaning tasks. Moving forward,
    I will cover some of the most useful features of Pyjanitor which are:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好使用 Pyjanitor 进行数据清理任务。接下来，我将介绍 Pyjanitor 一些最有用的功能，包括：
- en: 1\. Cleaning Column Names
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 清理列名称
- en: Raise your hand if you have ever been frustrated by inconsistent column names.
    Yup, me too. With Pyjanitor's `clean_names()` function, you can quickly standardize
    your column names making them uniform and consistent with just a simple call.
    This powerful function replaces spaces with underscores, converts all characters
    to lowercase, strips leading and trailing whitespace, and even replaces dots with
    underscores. Let’s understand it with a basic example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 举手如果你曾因列名称不一致而感到沮丧。没错，我也是。使用 Pyjanitor 的 `clean_names()` 函数，你可以迅速标准化列名称，使其统一且一致，只需简单调用即可。这个强大的函数将空格替换为下划线，将所有字符转换为小写，去除前后空格，甚至将点替换为下划线。让我们通过一个基本的例子来理解它。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 2\. Renaming Columns
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 重命名列
- en: 'At times, renaming columns not only enhances our understanding of the data
    but also improves its readability and consistency. Thanks to the `rename_column()`
    function, this task becomes effortless. A simple example showcasing the usability
    of this function is as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，重命名列不仅能提升我们对数据的理解，还能改善数据的可读性和一致性。感谢 `rename_column()` 函数，这项任务变得轻而易举。一个展示该函数实用性的简单例子如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 3\. Handling Missing Values
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 处理缺失值
- en: Missing values are a real headache when dealing with datasets. Fortunately,
    the `fill_empty()` comes in handy for addressing these issues. Let's explore how
    to handle missing values using Pyjanitor with a practical example. First, we will
    create a dummy data frame and populate it with some missing values.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 处理缺失值确实是处理数据集时的一个难题。幸运的是，`fill_empty()` 函数可以用来解决这些问题。让我们通过一个实际例子来探索如何使用 Pyjanitor
    处理缺失值。首先，我们将创建一个虚拟数据框，并填充一些缺失值。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, let''s see how Pyjanitor can assist in filling up these missing values:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看 Pyjanitor 如何帮助填补这些缺失值：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this example, the department of employee **‘James’** is substituted with
    ‘**Unknown'**, and the salary of **‘Alicia’** is substituted with the average
    of **‘Unknown’** and **‘James’** salaries. You can use various strategies for
    handling missing values like forward pass, backward pass, or, filling with a specific
    value.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，员工**‘詹姆斯’**的部门被替换为‘**未知**’，**‘艾莉西亚’**的工资则被替换为**‘未知’**和**‘詹姆斯’**工资的平均值。你可以使用各种策略来处理缺失值，如前向填充、后向填充或填入特定值。
- en: 4\. Filtering Rows & Selecting Columns
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 过滤行和选择列
- en: Filtering rows and columns is a crucial task in data analysis. Pyjanitor simplifies
    this process by providing functions that allow you to select columns and filter
    rows based on specific conditions. Suppose you have a data frame containing student
    records, and you want to filter out students(rows) whose marks are less than 60\.
    Let’s explore how Pyjanitor helps us in achieving this.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤行和列是数据分析中的一个关键任务。Pyjanitor 通过提供允许你根据特定条件选择列和过滤行的函数，简化了这一过程。假设你有一个包含学生记录的数据框，你想要过滤出成绩低于
    60 分的学生（行）。让我们探索 Pyjanitor 如何帮助实现这一点。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output:**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now suppose you also want to output only specific columns, such as only the
    name and ID, rather than their entire data. Pyjanitor can also help in doing this
    as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你还希望只输出特定的列，比如仅输出姓名和ID，而不是所有数据。Pyjanitor 也可以通过以下方式来实现这一点：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 5\. Chaining Methods
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 方法链
- en: 'With Pyjanitor''s method chaining feature, you can perform multiple operations
    in a single line. This capability stands out as one of its best features. To illustrate,
    let''s consider a data frame containing data about cars:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 利用 Pyjanitor 的方法链功能，你可以在一行中执行多个操作。这一能力被认为是其最优秀的特性之一。举例来说，假设有一个包含汽车数据的数据框：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Output:**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now that we see the data frame contains missing values and inconsistent column
    names. We can solve this by performing operations sequentially, such as `clean_names()`,
    `rename_column()`, and, `dropna()`, etc. in multiple lines. Alternatively, we
    can chain these methods together– performing multiple operations in a single line
    –for a fluent workflow and cleaner code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到数据框包含缺失值和不一致的列名。我们可以通过按顺序执行操作来解决这个问题，例如 `clean_names()`、`rename_column()`
    和 `dropna()` 等。或者，我们可以将这些方法链在一起——在一行中执行多个操作——以获得流畅的工作流程和更简洁的代码。
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Output:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In this pipeline, the following operations have been performed:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个流程中，执行了以下操作：
- en: '`clean_names()` function cleans out the column names.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean_names()` 函数清理列名。'
- en: '`dropna()` function drops the rows with missing values.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dropna()` 函数丢弃缺失值所在的行。'
- en: '`select_columns()` function selects specific columns which are ‘car_id’, ‘car_model’
    and ‘price’.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`select_columns()` 函数选择特定的列，即 ‘car_id’、‘car_model’ 和 ‘price’。'
- en: '`rename_column()` function renames the column ‘price’ with ‘price_usd’.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rename_column()` 函数将列名 ‘price’ 重命名为 ‘price_usd’。'
- en: Wrapping Up
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: So, to wrap up, Pyjanitor proves to be a magical library for anyone working
    with data. It offers many more features than discussed in this article, such as
    encoding categorical variables, obtaining features and labels, identifying duplicate
    rows, and much more. All of these advanced features and methods can be explored
    in its [documentation](https://pyjanitor-devs.github.io/pyjanitor/api/functions/).
    The deeper you delve into its features, the more you will be surprised by its
    powerful functionality. Lastly, enjoy manipulating your data with Pyjanitor.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结来说，Pyjanitor 证明了它是一个对任何数据工作者来说都很神奇的库。它提供了比本文中讨论的更多功能，如编码分类变量、获取特征和标签、识别重复行等等。所有这些高级功能和方法都可以在其[文档](https://pyjanitor-devs.github.io/pyjanitor/api/functions/)中进行探索。你对其功能的了解越深入，你会对它强大的功能感到越惊讶。最后，享受使用
    Pyjanitor 操作数据的乐趣吧。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一位机器学习工程师和技术作家，对数据科学及人工智能与医学的交叉领域充满热情。她共同编写了电子书《利用 ChatGPT 最大化生产力》。作为
    2022 年 APAC 地区的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认可为 Teradata 多样性技术学者、Mitacs
    Globalink 研究学者和哈佛 WeCode 学者。Kanwal 是变革的热心倡导者，她创立了 FEMCodes，旨在赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题
- en: '[A Beginner''s Guide to Anomaly Detection Techniques in Data Science](https://www.kdnuggets.com/2023/05/beginner-guide-anomaly-detection-techniques-data-science.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的异常检测技术入门指南](https://www.kdnuggets.com/2023/05/beginner-guide-anomaly-detection-techniques-data-science.html)'
- en: '[A Beginner’s Guide to Data Engineering](https://www.kdnuggets.com/2023/07/beginner-guide-data-engineering.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据工程入门指南](https://www.kdnuggets.com/2023/07/beginner-guide-data-engineering.html)'
- en: '[Introduction to Data Science: A Beginner''s Guide](https://www.kdnuggets.com/2023/07/introduction-data-science-beginner-guide.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学入门指南](https://www.kdnuggets.com/2023/07/introduction-data-science-beginner-guide.html)'
- en: '[A Beginner''s Guide to End to End Machine Learning](https://www.kdnuggets.com/2021/12/beginner-guide-end-end-machine-learning.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[端到端机器学习入门指南](https://www.kdnuggets.com/2021/12/beginner-guide-end-end-machine-learning.html)'
- en: '[Essential Machine Learning Algorithms: A Beginner''s Guide](https://www.kdnuggets.com/2021/05/essential-machine-learning-algorithms-beginners.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[必备的机器学习算法：初学者指南](https://www.kdnuggets.com/2021/05/essential-machine-learning-algorithms-beginners.html)'
- en: '[A Beginner''s Guide to Q Learning](https://www.kdnuggets.com/2022/06/beginner-guide-q-learning.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Q 学习入门指南](https://www.kdnuggets.com/2022/06/beginner-guide-q-learning.html)'
