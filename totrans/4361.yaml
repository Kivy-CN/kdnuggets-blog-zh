- en: Object-Oriented Programming Explained Simply for Data Scientists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家简明易懂的面向对象编程解释
- en: 原文：[https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html](https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html](https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
- en: '[comments](#comments)![Figure](../Images/96e2f31dc1eaa9686d222cb562061d96.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图示](../Images/96e2f31dc1eaa9686d222cb562061d96.png)'
- en: Photo by [Jelleke Vanooteghem](https://unsplash.com/@ilumire?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Jelleke Vanooteghem](https://unsplash.com/@ilumire?utm_source=medium&utm_medium=referral)在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上提供
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行IT工作'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Object-Oriented Programming or OOP can be a tough concept to understand for
    beginners. And that’s mainly because it is not really explained in the right way
    in a lot of places. Normally a lot of books start by explaining OOP by talking
    about the three big terms — **Encapsulation, Inheritance and Polymorphism**. But
    the time the book can explain these topics, anyone who is just starting would
    already feel lost.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）对于初学者来说可能是一个难以理解的概念。这主要是因为很多地方并没有以正确的方式解释它。通常，很多书籍从讲解OOP的三个重要术语开始——**封装、继承和多态**。但当书本能够解释这些主题时，任何刚开始学习的人可能已经感到迷茫了。
- en: So, I thought of making the concept a little easier for fellow programmers,
    Data Scientists and Pythonistas. The way I intend to do is by removing all the
    Jargon and going through some examples. I would start by explaining classes and
    objects. Then I would explain why classes are important in various situations
    and how they solve some fundamental problems. In this way, the reader would also
    be able to understand the three big terms by the end of the post.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我考虑了让这个概念对其他程序员、数据科学家和Python爱好者更容易理解的方法。我打算通过去掉所有术语，并通过一些例子来实现。我会从解释类和对象开始。然后我会解释在各种情况下类为什么重要以及它们如何解决一些基本问题。这样，读者也能在文章结束时理解这三个重要术语。
- en: In this series of posts named[ **Python Shorts**](https://towardsdatascience.com/tagged/python-shorts),
    I will explain some simple but very useful constructs provided by Python, some
    essential tips, and some use cases I come up with regularly in my Data Science
    work.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个名为[**Python Shorts**](https://towardsdatascience.com/tagged/python-shorts)的系列帖子中，我将解释一些由Python提供的简单但非常有用的构造、一些必备技巧以及我在数据科学工作中经常想到的一些使用案例。
- en: '***This post is about explaining OOP the laymen way.***'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '***这篇文章是以通俗的方式解释面向对象编程。***'
- en: What are Objects and Classes?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是对象和类？
- en: 'Put simply, everything in Python is an object and classes are a blueprint of
    objects. So when we write:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，Python中的一切都是对象，而类是对象的蓝图。所以当我们写：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We are creating an object `a` of class `int` holding the value 2 and object `b` of
    class `str` holding the value “Hello!”. In a way, these two particular classes
    are provided to us by default when we use numbers or strings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个值为2的`int`类对象`a`，和一个值为“Hello！”的`str`类对象`b`。在某种程度上，当我们使用数字或字符串时，这两个特定的类是默认提供给我们的。
- en: Apart from these a lot of us end up working with classes and objects without
    even realizing it. For example, you are actually using a class when you use any
    Scikit-Learn model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们中的许多人实际上在使用类和对象时甚至没有意识到这一点。例如，当你使用任何Scikit-Learn模型时，你实际上是在使用一个类。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here your classifier `clf` is an object and fit is a method defined in the class `RandomForestClassifier`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你的分类器`clf`是一个对象，而fit是定义在类`RandomForestClassifier`中的一个方法。
- en: But Why Classes?
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但是为什么要使用类？
- en: So, we use them a lot when we are working with Python. But why really. What
    is it with classes? I could do the same with functions?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在使用 Python 时经常使用它们。但究竟是什么原因呢？类有什么特别之处？我可以用函数做到同样的事吗？
- en: Yes, you can. But classes really provide you with a lot of power compared to
    functions. To quote an example, the `str` class has a lot of functions defined
    for the object which we can access just by pressing tab. One could also write
    all these functions, but that way, they would not be available to use just by
    pressing the tab button.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以。但是，与函数相比，类确实为你提供了很多强大的功能。举个例子，`str` 类为对象定义了很多函数，我们可以通过按下 tab 键直接访问这些函数。虽然也可以编写所有这些函数，但那样的话，它们就不会通过按下
    tab 键直接使用。
- en: '![Image for post](../Images/f2e2a1c598d8cac648f0e27713f03d01.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Image for post](../Images/f2e2a1c598d8cac648f0e27713f03d01.png)'
- en: This property of classes is called **encapsulation. **From [Wikipedia](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)) — ***encapsulation**** refers
    to the bundling of data with the methods that operate on that data, or the restricting
    of direct access to some of an object’s components*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 类的这一特性被称为**封装**。从 [维基百科](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming))
    —— ***封装*** 指的是将数据与操作这些数据的方法捆绑在一起，或者限制对某些对象组件的直接访问。
- en: So here the `str` class bundles the data(“Hello!”) with all the methods that
    would operate on our data. I would explain the second part of that statement by
    the end of the post. In the same way, the `RandomForestClassifier` class bundles
    all the classifier methods (`fit`, `predict` etc.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`str` 类将数据（“Hello!”）与操作数据的所有方法捆绑在一起。我将在文章结束时解释该语句的第二部分。以同样的方式，`RandomForestClassifier`
    类将所有分类器方法（`fit`、`predict` 等）捆绑在一起。
- en: 'Apart from this, Class usage can also help us to make the code much more modular
    and easy to maintain. So say we were to create a library like Scikit-Learn. We
    need to create many models, and each model will have a fit and predict method.
    If we don’t use classes, we will end up with a lot of functions for each of our
    different models like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，类的使用还可以帮助我们使代码更加模块化和易于维护。假设我们要创建一个类似于 Scikit-Learn 的库。我们需要创建很多模型，每个模型都将具有
    fit 和 predict 方法。如果我们不使用类，我们将不得不为每个不同的模型创建很多函数，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This sort of a code structure is just a nightmare to work with, and hence Scikit-Learn
    defines each of the models as a class having the `fit` and `predict` methods.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代码结构工作起来简直是一场噩梦，因此 Scikit-Learn 将每个模型定义为一个具有 `fit` 和 `predict` 方法的类。
- en: Creating a Class
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个类
- en: 'So, now we understand why to use classes and how they are so important, how
    do we really go about using them? So, creating a class is pretty simple. Below
    is a boilerplate code for any class you will end up writing:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了为什么要使用类以及它们的重要性，那么我们如何真正开始使用它们呢？创建一个类非常简单。下面是你将编写的任何类的基本代码：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We see a lot of new keywords here. The main ones are `class`,`__init__` and `self`.
    So what are these? Again, it is easily explained by some example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到很多新关键字。主要的有 `class`、`__init__` 和 `self`。这些是什么？通过一些示例可以很容易地解释。
- en: Suppose you are working at a bank that has many accounts. We can create a class
    named account that would be used to work with any account. For example, below
    I create an elementary toy class `Account` which stores data for a user — namely `account_name` and `balance`.
    It also provides us with two methods to `deposit`/`withdraw` money to/from the
    bank account. Do read through it. It follows the same structure as the code above.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在一个拥有许多账户的银行工作。我们可以创建一个名为 account 的类，用于处理任何账户。例如，下面我创建了一个基础的玩具类 `Account`，它存储用户的数据——即
    `account_name` 和 `balance`。它还提供了两个方法来 `deposit`/`withdraw` 银行账户中的钱。请仔细阅读，它遵循与上面相同的结构。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can create an account with a name Rahul and having an amount of 100 using:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式创建一个名为 Rahul 的账户，并设置金额为 100：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can access the data for this account using:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式访问这个账户的数据：
- en: '![Image for post](../Images/ab17d66ae51505be847d46b6329a25ef.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Image for post](../Images/ab17d66ae51505be847d46b6329a25ef.png)'
- en: But, how are these attributes `balance` and `account_name` already set to 100,
    and “Rahul” respectively? We never did call the `__init__` method, so why did
    the object gets these attribute? The answer here is that `__init__` is a **magic
    method**(There are a lot of other magic methods which I would expand on in my
    next post on Magic Methods), which gets run whenever we create the object. So
    when we create `myAccount` , it automatically also runs the function `__init__`
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这些属性 `balance` 和 `account_name` 是如何已经分别设置为 100 和 “Rahul” 的？我们从未调用 `__init__`
    方法，那么为什么对象会获得这些属性？答案是 `__init__` 是一个**魔法方法**（还有许多其他魔法方法，我会在下一个关于魔法方法的帖子中扩展），每当我们创建对象时它都会运行。所以当我们创建
    `myAccount` 时，它会自动运行函数 `__init__`。
- en: 'So now we understand `__init__`, let us try to deposit some money into our
    account. We can do this by:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了`__init__`，让我们尝试向账户中存入一些钱。我们可以通过以下方式实现：
- en: '![Image for post](../Images/7d8f316ef9630bcc6180621607155e23.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/7d8f316ef9630bcc6180621607155e23.png)'
- en: And our balance rose to 200\. But did you notice that our function `deposit` needed
    two arguments namely `self` and `amount,` yet we only provided one, and still,
    it works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的余额上升到 200。但是你有没有注意到，我们的函数 `deposit` 需要两个参数，即 `self` 和 `amount`，但我们只提供了一个，仍然能正常工作。
- en: '**So, what is this **`**self**`**? ** The way I like to explain self is by
    calling the same function in an albeit different way. Below, I call the same function
    deposit belonging to the class `account` and provide it with the `myAccount` object
    and the `amount`. And now the function takes two arguments as it should.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**那么，`**self**`** 是什么？** 我喜欢通过以不同的方式调用相同的函数来解释 self。下面，我调用了属于 `account` 类的同一个函数
    deposit，并为其提供了 `myAccount` 对象和 `amount`。现在，函数接受两个参数，这是它应该有的。'
- en: '![Image for post](../Images/e6fc0a58d32132bee7048b4e8e53d64d.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/e6fc0a58d32132bee7048b4e8e53d64d.png)'
- en: And our `myAccount` balance increases by 100 as expected. So it is the same
    function we have called. Now, that could only happen if `self` and `myAccount` are
    exactly the same object. When I call `myAccount.deposit(100)` Python provides
    the same object `myAccount` to the function call as the argument `self`. And that
    is why `self.balance` in the function definition really refers to `myAccount.balance`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `myAccount` 余额如预期增加了 100。所以我们调用的是同一个函数。现在，这只有在 `self` 和 `myAccount` 完全相同的对象时才会发生。当我调用
    `myAccount.deposit(100)` 时，Python 将相同的对象 `myAccount` 作为参数 `self` 提供给函数调用。这就是为什么函数定义中的
    `self.balance` 实际上指代 `myAccount.balance`。
- en: But, still, some problems remain
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但仍然存在一些问题
- en: '![Figure](../Images/cf04bc78e16f04728298a8bdfeb0e9d0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/cf04bc78e16f04728298a8bdfeb0e9d0.png)'
- en: Photo by [Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: We know how to create classes, but still, there is another important problem
    that I haven’t touched upon yet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何创建类，但仍然有另一个重要的问题我还没有触及。
- en: 'So, suppose you are working with Apple iPhone Division, and you have to create
    a different Class for each iPhone model. For this simple example, let us say that
    our iPhone’s first version currently does a single thing only — Makes a call and
    has some memory. We can write the class as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在苹果 iPhone 部门工作，并且需要为每个 iPhone 型号创建一个不同的类。在这个简单的示例中，我们假设我们 iPhone 的第一个版本目前只做一件事——打电话并具有一些内存。我们可以将这个类写成：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, Apple plans to launch `iPhone1` and this `iPhone` Model introduces a new
    functionality — The ability to take a pic. One way to do this is to copy-paste
    the above code and create a new class `iPhone1` like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，苹果计划推出 `iPhone1`，这个 `iPhone` 型号引入了一项新功能——拍照功能。实现这一功能的一种方法是复制粘贴上述代码，创建一个新的类
    `iPhone1`，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But as you can see that is a lot of unnecessary duplication of code (shown
    in bold above) and Python has a solution for removing that code duplication. One
    good way to write our iPhone1 class is:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如你所见，上面显示的（加粗的部分）代码重复过多，而 Python 提供了一个解决代码重复的问题的方法。编写我们 iPhone1 类的一个好方法是：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that is the concept of inheritance. As per [Wikipedia](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)): **Inheritance** is
    the mechanism of basing an object or class upon another object or class retaining
    similar implementation. Simply put, `iPhone1` has access to all the variables
    and methods defined in class `iPhone` now.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是继承的概念。根据[维基百科](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming))：**继承**是基于另一个对象或类创建一个对象或类的机制，从而保留类似的实现。简单来说，`iPhone1`现在可以访问类`iPhone`中定义的所有变量和方法。
- en: In this case, we don’t have to do any code duplication as we have inherited(taken)
    all the methods from our parent class iPhone. Thus we don’t have to define the `call` function
    again. Also, we don’t set the mobile_id and memory in the `__init__` function
    using super.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不需要进行代码重复，因为我们已经从父类 iPhone 继承（获取）了所有方法。因此，我们不必再次定义`call`函数。此外，我们没有使用
    super 在`__init__`函数中设置 mobile_id 和 memory。
- en: '**But what is this **`**super().__init__(memory,user_id)**`**?**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**但这`**`super().__init__(memory,user_id)`**`是什么？**'
- en: In real life, your `__init__` functions won’t be these nice two-line functions.
    You would need to define a lot of variables/attributes in your class and copying
    pasting them for the child class (here iphone1) becomes cumbersome. Thus there
    exists super(). Here`**super().__init__()**`actually calls the `**__init__**`method
    of the parent `iPhone` Class here. So here when the `__init__` function of class `iPhone1` runs
    it automatically sets the `memory` and `user_id` of the class using the `__init__` function
    of the parent class.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，你的`__init__`函数不会是这样简洁的两行函数。你需要在类中定义很多变量/属性，而将它们复制到子类（这里是 iphone1）中会变得麻烦。因此存在
    super()。这里`**super().__init__()**`实际上调用了父类`iPhone`的`**__init__**`方法。所以在这里，当`iPhone1`类的`__init__`函数运行时，它会自动使用父类的`__init__`函数设置`memory`和`user_id`。
- en: '***Where do we see this in ML/DS/DL?*** Below is how we create a [PyTorch](https://mlwhiz.com/blog/2020/09/09/pytorch_guide/) model.
    This model inherits everything from the `nn.Module` class and calls the `__init__` function
    of that class using the `super` call.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '***我们在 ML/DS/DL 中哪里可以看到这个？*** 下面是我们如何创建一个[PyTorch](https://mlwhiz.com/blog/2020/09/09/pytorch_guide/)模型。该模型从`nn.Module`类继承了所有内容，并使用`super`调用了该类的`__init__`函数。'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**But what is Polymorphism? **We are getting better at understanding how classes
    work so I guess I would try to explain Polymorphism now. Look at the below class.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**但什么是多态？** 我们对类的理解越来越好，所以我想我现在会尝试解释多态。看下面的类。'
- en: 'Here we have our base `class Shape` and the other derived classes — `Rectangle` and `Circle`.
    Also, see how we use multiple levels of inheritance in the `Square` class which
    is derived from `Rectangle` which in turn is derived from `Shape`. Each of these
    classes has a function called `area` which is defined as per the shape. So the
    concept that a function with the same name can do multiple things is made possible
    through **Polymorphism** in Python. ***In fact, that is the literal meaning of
    Polymorphism: “Something that takes many forms”. ***So here our function `area`
    takes multiple forms.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有基础`class Shape`和其他派生类——`Rectangle`和`Circle`。还要注意我们在`Square`类中如何使用多层继承，它是从`Rectangle`派生的，而`Rectangle`又从`Shape`派生。每个这些类都有一个名为`area`的函数，根据形状定义。因此，通过**多态**，一个同名函数可以做多种事情。***实际上，这就是多态的字面意思：“具有多种形式的东西”。***因此，我们的函数`area`具有多种形式。
- en: 'Another way that Polymorphism works with Python is with the `isinstance` of
    method. So using the above class, if we do:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多态在 Python 中的另一种实现方式是使用`isinstance`方法。使用上面的类，如果我们这样做：
- en: '![Image for post](../Images/38955b28a6cae5d8f7f03bb8724618cf.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/38955b28a6cae5d8f7f03bb8724618cf.png)'
- en: Thus, the instance type of the object `mySquare` is `Square`,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对象`mySquare`的实例类型是`Square`，
- en: '`Rectangle` and `Shape`. And hence the object is polymorphic. This has a lot
    of good properties. For example, We can create a function that works with an `Shape` object,
    and it will totally work with any of the derived classes (`Square`, `Circle`, `Rectangle` etc.)
    by making use of Polymorphism.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rectangle` 和 `Shape`。因此对象是多态的。这具有许多优良的属性。例如，我们可以创建一个与`Shape`对象一起工作的函数，它将完全适用于任何派生类（`Square`、`Circle`、`Rectangle`等），通过利用多态。'
- en: '![Image for post](../Images/479a55964aa987ef1806f878a927ac55.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/479a55964aa987ef1806f878a927ac55.png)'
- en: 'Some More Info:'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多信息：
- en: Why do we see function names or attribute names starting with **Single and Double
    Underscores? **Sometimes we want to make our attributes and functions in classes
    private and not allow the user to see them. This is a part of **Encapsulation** where
    we want to “*restrict the direct access to some of an object’s components”.* For
    instance, let’s say, we don’t want to allow the user to see the memory(RAM) of
    our iPhone once it is created. In such cases, we create an attribute using underscores
    in variable names.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们会看到以**单下划线和双下划线**开头的函数名或属性名？有时我们想让类中的属性和函数保持私有，不让用户看到它们。这是**封装**的一部分，我们希望“*限制对对象某些组件的直接访问*”。例如，假设我们不想让用户在创建后看到我们iPhone的内存（RAM）。在这种情况下，我们通过在变量名中使用下划线来创建属性。
- en: So when we create the `iPhone` Class in the below way, you won’t be able to
    access your phone `memory` or the `privatefunc` using Tab in your ipython notebooks
    because the attribute is made private now using _.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我们以以下方式创建`iPhone`类时，你将无法在你的ipython笔记本中使用Tab访问你的`memory`或`privatefunc`，因为该属性现在被用_标记为私有。
- en: '![Image for post](../Images/d1853feefd419827342a8318a29d0cd4.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/d1853feefd419827342a8318a29d0cd4.png)'
- en: But you would still be able to change the variable value using (Though not recommended)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但你仍然可以通过（虽然不推荐）更改变量值。
- en: '![Image for post](../Images/5bee417978dd83037a2eddd0405ddaef.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/5bee417978dd83037a2eddd0405ddaef.png)'
- en: You would also be able to use the method _privatefunc using `myphone._privatefunc()`.
    If you want to avoid that you can use double underscores in front of the variable
    name. For example, below the call to `print(myphone.__memory)` throws an error.
    Also, you are not able to change the internal data of an object by using `myphone.__memory
    = 1`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用方法_privatefunc，通过`myphone._privatefunc()`。如果你想避免这种情况，可以在变量名前使用双下划线。例如，`print(myphone.__memory)`的调用会引发错误。此外，你不能通过`myphone.__memory
    = 1`来更改对象的内部数据。
- en: '![Image for post](../Images/c05f87c2f2ddd2dbfdb981150c7c9762.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图片](../Images/c05f87c2f2ddd2dbfdb981150c7c9762.png)'
- en: But, as you see you can access and modify these `self.__memory` values in your
    class definition in the function `setMemory` for instance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但如你所见，你可以在你的类定义中通过`setMemory`函数访问和修改这些`self.__memory`值。
- en: Conclusion
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: '![Figure](../Images/7a29c9ef2303425720d307e8d75a9347.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/7a29c9ef2303425720d307e8d75a9347.png)'
- en: Photo by [Jeshoots.com](https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由[Jeshoots.com](https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral)拍摄，发布在[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)上
- en: 'I hope this has been useful for you to understand classes. There is still so
    much to classes that remain that I would cover in my next post on magic methods.
    Stay Tuned. Also, to summarize, in this post, we learned about OOP and creating
    classes along with the various fundamentals of OOP:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这对你理解类有所帮助。关于类的内容还有很多，我将在下一篇关于魔术方法的帖子中讨论。敬请关注。此外，总结一下，这篇文章中我们学习了OOP和创建类以及OOP的各种基础知识：
- en: '**Encapsulation**: Object contains all the data for itself.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装**：对象包含所有属于自己的数据。'
- en: '**Inheritance**: We can create a class hierarchy where methods from parent
    classes pass on to child classes'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继承**：我们可以创建一个类层次结构，其中父类的方法传递给子类。'
- en: '**Polymorphism**: A function takes many forms, or the object might have multiple
    types.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多态性**：一个函数有多种形式，或者对象可能有多种类型。'
- en: 'To end this post, I would be giving an exercise for you to implement as I think
    it might clear some concepts for you. ***Create a class that lets you manage 3d
    objects(sphere and cube) with volumes and surface areas***. The basic boilerplate
    code is given below:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这篇文章，我将给你一个练习，我认为这可能会帮助你理清一些概念。***创建一个类来管理三维对象（球体和立方体），包括体积和表面积***。基本的代码框架如下：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I will put the ***answer in the comments for this article.***
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我会把***答案放在这篇文章的评论中。***
- en: If you want to learn more about [Python](https://amzn.to/2XPSiiG), I would like
    to call out an excellent course on Learn [**Intermediate level Python**](https://bit.ly/2XshreA)
    from the University of Michigan. Do check it out.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于[Python](https://amzn.to/2XPSiiG)的知识，我推荐你查看来自密歇根大学的[**中级Python课程**](https://bit.ly/2XshreA)。千万不要错过。
- en: I am going to be writing more of such posts in the future too. Let me know what
    you think about the series. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX) to be informed about them.
    As always, I welcome feedback and constructive criticism and can be reached on
    Twitter [@mlwhiz](https://twitter.com/MLWhiz).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我将来也会写更多这样的文章。请告诉我你对这个系列的看法。关注我在[**Medium**](https://medium.com/@rahul_agarwal)上的动态，或订阅我的[**博客**](http://eepurl.com/dbQnuX)以获取相关信息。正如往常一样，我欢迎反馈和建设性的批评，可以通过Twitter联系我[@mlwhiz](https://twitter.com/MLWhiz)。
- en: Also, a small disclaimer — There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，小免责声明——这篇文章中可能包含一些关联链接到相关资源，因为分享知识从来不是一件坏事。
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is Senior
    Statistical Analyst at WalmartLabs. Follow him on Twitter [@mlwhiz](https://twitter.com/MLWhiz).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** 是WalmartLabs的高级统计分析师。关注他在Twitter上的动态[@mlwhiz](https://twitter.com/MLWhiz)。'
- en: '[Original](https://towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d).
    Reposted with permission.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d)。经授权转载。'
- en: '**Related:**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[10 Underrated Python Skills](/2020/10/10-underrated-python-skills.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10个被低估的Python技能](/2020/10/10-underrated-python-skills.html)'
- en: '[6 bits of advice for Data Scientists](/2019/09/advice-data-scientists.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家需要注意的6条建议](/2019/09/advice-data-scientists.html)'
- en: '[The 5 Classification Evaluation Metrics Every Data Scientist Must Know](/2019/10/5-classification-evaluation-metrics-every-data-scientist-must-know.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都必须知道的5种分类评估指标](/2019/10/5-classification-evaluation-metrics-every-data-scientist-must-know.html)'
- en: More On This Topic
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为一名出色的数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家都应该掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创企业的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并找到目标后...](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立一个稳固的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
