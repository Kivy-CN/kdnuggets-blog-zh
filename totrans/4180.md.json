["```py\nimport boto3\nimport json\n\ndef lambda_handler(event, context):\n    # Connect to DynamoDB\n    dynamodb = boto3.resource('dynamodb')\n\n    # Get table\n    table = dynamodb.Table('rss_feeds')\n\n    # Get all records from the table\n    data = table.scan()['Items']\n    rss = [y['rss'] for y in data]\n\n    # Connect to SNS\n    client = boto3.client('sns')\n\n    # Send messages to the queue\n    for item in rss:\n        client.publish(TopicArn=\"arn:aws:sns:eu-west-1:802099603194:rss_to-parse\",  Message = item)\n```", "```py\npip install feedparser -t .\n```", "```py\nsam build --use-container\n```", "```py\nimport boto3\nimport feedparser\nfrom datetime import datetime\n\ndef lambda_handler(event, context):\n\n    #Connect to DynamoDB\n    dynamodb = boto3.resource('dynamodb')\n\n    # Get table\n    table = dynamodb.Table('news')\n\n    # Get a url from from event\n    url = event['Records'][0]['Sns']['Message']\n\n    # Parse the rss feed\n    feed = feedparser.parse(url)\n\n    for item in feed['entries']:\n        result = {\n            \"news_url\": item['link'],\n            \"title\": item['title'],\n            \"created_at\": datetime.now().strftime('%Y-%m-%d') # so that dynamodb will be ok with our date\n        }\n\n        # Save the result to dynamodb\n        table.put_item(Item=result, ConditionExpression='attribute_not_exists(news_url)') # store only unique urls\n```", "```py\nfrom sagemaker.huggingface import HuggingFaceModel\nimport sagemaker\n\nrole = sagemaker.get_execution_role()\n\nhub = {\n    'HF_MODEL_ID':'facebook/bart-large-cnn',\n     'HF_TASK':'summarization'\n}\n\n# Hugging Face Model Class\nhuggingface_model = HuggingFaceModel(\n    transformers_version='4.6.1',\n    pytorch_version='1.7.1',\n    py_version='py36',\n    env=hub,\n    role=role, \n)\n\n# deploy model to SageMaker Inference\npredictor = huggingface_model.deploy(\n    initial_instance_count=1, # number of instances\n    instance_type='ml.m5.xlarge' # ec2 instance type\n)\n```", "```py\nimport json\nimport boto3 \nfrom goose3 import Goose\nfrom datetime import datetime\n\ndef lambda_handler(event, context):\n    # Get url from DynamoDB record creation event\n    url =  event['Records'][0]['dynamodb']['Keys']['news_url']['S']\n\n    # fetch article full text\n    g = Goose()\n    article = g.extract(url=url)\n\n    body = article.cleaned_text # clean article text\n\n    published_date = article.publish_date # from meta desc\n\n    # Create a summary using our HuggingFace text summary model\n    ENDPOINT_NAME = \"your_model_endpoint\"\n    runtime= boto3.client('runtime.sagemaker')\n\n    response = runtime.invoke_endpoint(EndpointName=ENDPOINT_NAME, ContentType='application/json', Body=json.dumps(data))\n\n    #extract a summary\n    summary = json.loads(response['Body'].read().decode())\n\n    #Connect to DynamoDB\n    dynamodb = boto3.resource('dynamodb')\n\n    # Get table\n    table = dynamodb.Table('news')\n\n    # Update item stored in dynamoDB\n    update = table.update_item(\n        Key = { \"news_url\": url  }\n        ,\n        ConditionExpression= 'attribute_exists(news_url) ', \n        UpdateExpression='SET summary = :val1, published_date = :val2'\n        ExpressionAttributeValues={\n            ':val1': summary,\n            ':val2': published_date\n        }\n    )\n\n```"]