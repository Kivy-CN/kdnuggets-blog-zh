- en: Speed up your Numpy and Pandas with NumExpr Package
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NumExpr包加速你的Numpy和Pandas
- en: 原文：[https://www.kdnuggets.com/2020/07/speed-up-numpy-pandas-numexpr-package.html](https://www.kdnuggets.com/2020/07/speed-up-numpy-pandas-numexpr-package.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/07/speed-up-numpy-pandas-numexpr-package.html](https://www.kdnuggets.com/2020/07/speed-up-numpy-pandas-numexpr-package.html)
- en: '[comments](#comments)![Figure](../Images/07d9b21986edd14fe9e3deee4350911d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图示](../Images/07d9b21986edd14fe9e3deee4350911d.png)'
- en: Image source: [Pixabay](https://pixabay.com/vectors/cheetah-wildcat-fast-speed-spotted-40986/) and
    author made collage
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Pixabay](https://pixabay.com/vectors/cheetah-wildcat-fast-speed-spotted-40986/)和作者制作的拼贴图
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Numpy and Pandas are probably the two most widely used core Python libraries
    for data science (DS) and machine learning (ML)tasks. Needless to say, the speed
    of evaluating numerical expressions is critically important for these DS/ML tasks
    and these two libraries do not disappoint in that regard.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy和Pandas可能是数据科学（DS）和机器学习（ML）任务中最广泛使用的两个核心Python库。不用多说，评估数值表达式的速度对这些DS/ML任务至关重要，这两个库在这方面表现也不负众望。
- en: Under the hood, they use fast and optimized [vectorized](https://www.pythonlikeyoumeanit.com/Module3_IntroducingNumpy/VectorizedOperations.html) operations
    (as much as possible) to speed up the mathematical operations. Plenty of articles
    have been written about how Numpy is much superior (especially when you can vectorize
    your calculations) over plain-vanilla Python loops or list-based operations.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，它们使用快速且优化的[向量化](https://www.pythonlikeyoumeanit.com/Module3_IntroducingNumpy/VectorizedOperations.html)操作（尽可能多）来加速数学运算。许多文章已经讨论了Numpy如何比普通的Python循环或基于列表的操作要优越得多（尤其是当你可以向量化你的计算时）。
- en: '[**How Fast Numpy Really is and Why?**](https://towardsdatascience.com/how-fast-numpy-really-is-e9111df44347)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Numpy到底有多快？为何如此？**](https://towardsdatascience.com/how-fast-numpy-really-is-e9111df44347)'
- en: A comparison with standard Python Lists
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准Python列表的比较
- en: '[**Data science with Python: Turn your conditional loops to Numpy vectors**](https://towardsdatascience.com/data-science-with-python-turn-your-conditional-loops-to-numpy-vectors-9484ff9c622e)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[**使用Python进行数据科学：将你的条件循环转为Numpy向量**](https://towardsdatascience.com/data-science-with-python-turn-your-conditional-loops-to-numpy-vectors-9484ff9c622e)'
- en: It pays to even vectorize conditional loops for speeding up the overall data
    transformation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至对条件循环进行向量化，以加速整体数据转换，是值得的。
- en: In this article, we show, how using a simple extension library, called ‘**NumExpr**’,
    one can improve the speed of the mathematical operations, which the core Numpy
    and Pandas yield.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们展示了如何使用一个名为‘**NumExpr**’的简单扩展库来提升数学运算的速度，这些运算由核心的Numpy和Pandas生成。
- en: Let’s see it in the action
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们看看它的实际效果
- en: The example Jupyter notebook can be found [here in my Github repo](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/Pandas%20and%20Numpy/Speed-up-Numpy-Pandas-with-Numexpr.ipynb).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 示例Jupyter笔记本可以在[我的Github仓库中找到](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/Pandas%20and%20Numpy/Speed-up-Numpy-Pandas-with-Numexpr.ipynb)。
- en: Install the NumExpr library
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装NumExpr库
- en: First, we need to make sure we have the library `numexpr`. So, as expected,
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保我们拥有`numexpr`库。所以，正如预期的那样，
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The project is hosted [here](https://github.com/pydata/numexpr) on Github. It
    is from the [PyData](https://pydata.org/) stable, the organization under NumFocus,
    which also gave rise to Numpy and Pandas.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目托管在[这里](https://github.com/pydata/numexpr)的Github上。它来自[PyData](https://pydata.org/)稳定版，这是一个隶属于NumFocus的组织，也促成了Numpy和Pandas的诞生。
- en: As per the source, “*NumExpr is a fast ****numerical expression evaluator**** for
    NumPy. With it, expressions that operate on arrays, are ****accelerated**** and
    use ****less memory**** than doing the same calculation in Python. In addition,
    its ****multi-threaded capabilities**** can make use of all your cores — which
    generally results in substantial performance scaling compared to NumPy.*” ([source](https://github.com/pydata/numexpr))
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 根据源信息，“*NumExpr 是一个快速的****数值表达式求值器****，用于 NumPy。使用它，操作数组的表达式会得到****加速****，并且使用的****内存更少****，相比于在
    Python 中进行相同的计算。此外，它的****多线程能力****可以利用所有核心——这通常会导致相比于 NumPy 有显著的性能提升。*” ([source](https://github.com/pydata/numexpr))
- en: Here is the [detailed documentation](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/) for
    the library and examples of various use cases.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[详细文档](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/)和各种用例示例。
- en: A simple vector-scalar operation
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简单的向量-标量操作
- en: We start with the simple mathematical operation — adding a scalar number, say
    1, to a Numpy array. For using the NumExpr package, all we have to do is to wrap
    the same calculation under a special method `evaluate` in a symbolic expression.
    The following code will illustrate the usage clearly,
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从简单的数学操作开始——将标量数字（比如 1）添加到 Numpy 数组。为了使用 NumExpr 包，我们只需将相同的计算包裹在符号表达式中的特殊方法
    `evaluate` 下。以下代码将清楚地说明使用方法，
- en: '![](../Images/9151358f63997517985321a60910702c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9151358f63997517985321a60910702c.png)'
- en: Wow! That was magical! All we had to do was to write the familiar `a+1` Numpy
    code in the form of a symbolic expression `"a+1"` and pass it on to the `ne.evaluate()` function.
    And we got a significant speed boost — **from 3.55 ms to 1.94 ms on average**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这真是太神奇了！我们只需将熟悉的 `a+1` Numpy 代码写成符号表达式 `"a+1"` 的形式，并传递给 `ne.evaluate()` 函数。我们得到了显著的速度提升——**从
    3.55 毫秒到 1.94 毫秒，平均值**。
- en: Note that we ran the same computation 200 times in a 10-loop test to calculate
    the execution time. Now, of course, **the exact results are somewhat dependent
    on the underlying hardware**. You are welcome to evaluate this on your machine
    and see what improvement you got.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在 10 次循环测试中运行了相同的计算 200 次，以计算执行时间。当然，**结果的准确性在一定程度上取决于底层硬件**。欢迎你在你的机器上进行评估，看看你得到了什么改进。
- en: Arithmetic involving two arrays
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 涉及两个数组的算术运算
- en: Let’s dial it up a little and involve two arrays, shall we? Here is the code
    to evaluate a simple linear expression using two arrays,
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再提升一点，涉及两个数组，可以吗？以下是使用两个数组评估简单线性表达式的代码，
- en: '![](../Images/2fb3d0e17369e442cfc07efc77c58aa7.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2fb3d0e17369e442cfc07efc77c58aa7.png)'
- en: That is a big improvement in the compute time from **11.7 ms to 2.14 ms, on
    the average**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是计算时间的显著提升，从**11.7 毫秒到 2.14 毫秒，平均值**。
- en: A somewhat complex operation involving more arrays
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 涉及更多数组的稍微复杂的操作
- en: Now, let’s notch it up further involving more arrays in a somewhat complicated
    rational function expression. Suppose, we want to evaluate the following involving **five
    Numpy arrays, each with a million random numbers **(drawn from a Normal distribution),
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进一步提升，涉及更多数组在稍微复杂的有理函数表达式中。假设，我们想评估以下表达式，涉及**五个 Numpy 数组，每个数组有一百万个随机数**（从正态分布中抽取），
- en: '![](../Images/4f5a0970dab28c7eb22af18247ceb198.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4f5a0970dab28c7eb22af18247ceb198.png)'
- en: Here is the code. We create a Numpy array of the shape (1000000, 5) and extract
    five (1000000,1) vectors from it to use in the rational function. Also note, how
    the symbolic expression in the NumExpr method understands ‘**sqrt**’ natively
    (we just write `sqrt`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是代码。我们创建了一个形状为（1000000, 5）的 Numpy 数组，并从中提取了五个（1000000,1）向量以用于有理函数。此外，请注意 NumExpr
    方法中的符号表达式如何本地理解‘**sqrt**’（我们只需写`sqrt`）。
- en: '![](../Images/f5b8b997d60404918e425a18c47cce92.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f5b8b997d60404918e425a18c47cce92.png)'
- en: Whoa! That shows a huge speed boost **from 47 ms to ~ 4 ms**, on average. In
    fact, this is a trend that you will notice that **the more complicated the expression
    becomes and the more number of arrays it involves, the higher the speed boost
    becomes with Numexpr**!
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！这显示了一个巨大的速度提升**从 47 毫秒到 ~ 4 毫秒**，平均值。事实上，你会发现**表达式越复杂，涉及的数组越多，Numexpr 的速度提升越显著**！
- en: Logical expressions/ Boolean filtering
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑表达式/布尔过滤
- en: As it turns out, we are not limited to the simple arithmetic expression, as
    shown above. One of the most useful features of Numpy arrays is to use them directly
    in an expression involving logical operators such as `>` or `<` to create Boolean
    filters or masks.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们不仅限于简单的算术表达式，如上所示。Numpy 数组的一个最有用的特性是将它们直接用于涉及逻辑运算符如 `>` 或 `<` 的表达式中，以创建布尔过滤器或掩码。
- en: We can do the same with NumExpr and speed up the filtering process. Here is
    an example where we check whether the Euclidean distance measure involving 4 vectors
    is greater than a certain threshold.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 NumExpr 来加速筛选过程。这里是一个示例，我们检查涉及 4 个向量的欧几里得距离度量是否大于某个阈值。
- en: '![](../Images/a859e7ef111b52dcd51605795a8530e9.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a859e7ef111b52dcd51605795a8530e9.png)'
- en: This kind of filtering operation appears all the time in a data science/machine
    learning pipeline, and you can imagine how much compute time can be saved by strategically
    replacing Numpy evaluations by NumExpr expressions.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这种筛选操作在数据科学/机器学习管道中随处可见，你可以想象通过战略性地将 Numpy 评估替换为 NumExpr 表达式可以节省多少计算时间。
- en: Complex numbers!
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复数！
- en: We can make the jump from the real to the imaginary domain pretty easily. NumExpor
    works equally well with the complex numbers, which is natively supported by Python
    and Numpy. Here is an example, which also illustrates the use of a transcendental
    operation like a logarithm.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以很容易地从实数域跳到虚数域。NumExpr 对复数同样有效，复数是 Python 和 Numpy 原生支持的。这里是一个示例，也展示了对数等超越操作的使用。
- en: '![](../Images/96ff385600bb92277827d427a71f5798.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96ff385600bb92277827d427a71f5798.png)'
- en: Impact of the array size
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数组大小的影响
- en: Next, we examine the impact of the size of the Numpy array over the speed improvement.
    For this, we choose a simple conditional expression with two arrays like `2*a+3*b
    < 3.5` and plot the relative execution times (after averaging over 10 runs) for
    a wide range of sizes. The code is in the Notebook and the final result is shown
    below,
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们检查 Numpy 数组大小对速度提升的影响。为此，我们选择一个简单的条件表达式，如 `2*a+3*b < 3.5` 并绘制各种大小下的相对执行时间（在
    10 次运行后取平均值）。代码在 Notebook 中，最终结果如下所示，
- en: '![Figure](../Images/8857e6ead9bf9dc48c62d85461792e88.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/8857e6ead9bf9dc48c62d85461792e88.png)'
- en: 'Image source: Author code generated'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图像来源：作者代码生成
- en: Pandas “eval” method
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pandas “eval” 方法
- en: This is a Pandas method that evaluates a Python symbolic expression (as a string). **By
    default, it uses the NumExpr engine** for achieving significant speed-up. Here
    is an excerpt of from the [official doc](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.eval.html),
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个 Pandas 方法，它评估一个 Python 符号表达式（作为字符串）。**默认情况下，它使用 NumExpr 引擎**以实现显著的加速。以下是来自 [官方文档](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.eval.html)的摘录，
- en: '![](../Images/1f6511b840664f4a696b3fc9a2be3994.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f6511b840664f4a696b3fc9a2be3994.png)'
- en: We show a simple example with the following code, where we construct four DataFrames
    with 50000 rows and 100 columns each (filled with uniform random numbers) and
    evaluate a nonlinear transformation involving those DataFrames — in one case with
    native Pandas expression, and in other case using the `pd.eval()` method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用以下代码展示一个简单示例，其中我们构造了四个各有 50000 行和 100 列的 DataFrame（填充了均匀随机数），并对这些 DataFrame
    进行非线性变换——一种使用原生 Pandas 表达式，另一种使用 `pd.eval()` 方法。
- en: '![](../Images/09bde7b98a72d185e11a17f783413f79.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09bde7b98a72d185e11a17f783413f79.png)'
- en: Impact of the DataFrame size
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DataFrame 大小的影响
- en: We do a similar analysis of the impact of the size (number of rows, while keeping
    the number of columns fixed at 100) of the DataFrame on the speed improvement.
    The result is shown below,
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 DataFrame 的大小（行数，列数固定为 100）对速度改进的影响进行了类似的分析。结果如下所示，
- en: '![Figure](../Images/70354a3d16de2fd2df65fb2ce214c53c.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/70354a3d16de2fd2df65fb2ce214c53c.png)'
- en: 'Image source: Author code generated'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图像来源：作者代码生成
- en: How it works and supported operators
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 它的工作原理和支持的运算符
- en: The details of the manner in which Numexpor works are somewhat complex and involve
    optimal use of the underlying compute architecture. You can [**read about it here**](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/intro.html).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: NumExpr 的工作方式的细节有些复杂，涉及到对底层计算架构的优化使用。你可以 [**在这里阅读**](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/intro.html)。
- en: A short explanation
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简短说明
- en: Basically, the expression is compiled using Python `compile` function, variables
    are extracted and a parse tree structure is built. This tree is then compiled
    into a Bytecode program, which describes the element-wise operation flow using
    something called ‘**vector registers**’ (each 4096 elements wide). The key to
    speed enhancement is Numexpr’s **ability to handle chunks of elements at a time**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，表达式是使用Python的`compile`函数编译的，变量被提取并建立了一个解析树结构。然后将该树编译成一个字节码程序，描述了使用所谓的‘**向量寄存器**’（每个寄存器宽4096个元素）的逐元素操作流。速度提升的关键是Numexpr的**一次处理一块元素的能力**。
- en: '![Figure](../Images/60845f55358c0a70b6c5736506a98e8d.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/60845f55358c0a70b6c5736506a98e8d.png)'
- en: 'NumExpr evaluation flow, Source: Author made with Google Drawing'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: NumExpr评估流程，来源：作者使用Google Drawing制作
- en: It **skips the Numpy’s practice of using temporary arrays**, which waste memory
    and cannot be even fitted into cache memory for large arrays.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它**跳过了Numpy使用临时数组的做法**，这会浪费内存，并且对于大数组无法放入缓存内存。
- en: Also, the **virtual machine is written entirely in C** which makes it faster
    than native Python. It is also **multi-threaded** allowing faster parallelization
    of the operations on suitable hardware.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**虚拟机完全用C语言编写**，使其比原生Python更快。它还**支持多线程**，允许在合适的硬件上更快地并行处理操作。
- en: Supported operators
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持的操作符
- en: NumExpr supports a wide array of mathematical operators to be used in the expression
    but not conditional operators like `if` or `else`. The [**full list of operators
    can be found here**](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/user_guide.html#supported-operators).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: NumExpr支持广泛的数学操作符，但不支持条件操作符，如`if`或`else`。[**完整的操作符列表可以在这里找到**](https://numexpr.readthedocs.io/projects/NumExpr3/en/latest/user_guide.html#supported-operators)。
- en: Threadpool configuration
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线程池配置
- en: You can also control the number of threads that you want to spawn for parallel
    operations with large arrays by setting the environment variable `NUMEXPR_MAX_THREAD`.
    Currently, the maximum possible number of threads is 64 but there is no real benefit
    of going higher than the number of virtual cores available on the underlying CPU
    node.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过设置环境变量`NUMEXPR_MAX_THREAD`来控制用于大数组并行操作的线程数量。目前，最大可能的线程数为64，但超过底层CPU节点上可用的虚拟核心数并没有实际的好处。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we show how to take advantage of the special virtual machine-based
    expression evaluation paradigm for speeding up mathematical calculations in Numpy
    and Pandas. Although this method may not be applicable for all possible tasks,
    a large fraction of data science, data wrangling, and statistical modeling pipeline
    can take advantage of this with minimal change in the code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们展示了如何利用基于虚拟机的特殊表达式评估范式来加速Numpy和Pandas中的数学计算。虽然这种方法可能不适用于所有任务，但数据科学、数据处理和统计建模管道的很大一部分可以在代码变化最小的情况下受益于此。
- en: Also, you can check the author’s [**GitHub**](https://github.com/tirthajyoti?tab=repositories)** repositories **for
    code, ideas, and resources in machine learning and data science. If you are, like
    me, passionate about AI/machine learning/data science, please feel free to [add
    me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/) or [follow
    me on Twitter](https://twitter.com/tirthajyotiS).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你可以查看作者的[**GitHub**](https://github.com/tirthajyoti?tab=repositories)** 代码库**以获取机器学习和数据科学的代码、想法和资源。如果你像我一样，对AI/机器学习/数据科学充满热情，请随时[在LinkedIn上添加我](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)或[在Twitter上关注我](https://twitter.com/tirthajyotiS)。
- en: '**Bio: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    is Sr Principal Engineer at ON Semiconductor.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    是ON Semiconductor的高级首席工程师。'
- en: '[Original](https://towardsdatascience.com/speed-up-your-numpy-and-pandas-with-numexpr-package-25bd1ab0836b).
    Reposted with permission.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/speed-up-your-numpy-and-pandas-with-numexpr-package-25bd1ab0836b)。已获许可转载。'
- en: '**Related:**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[Build Pipelines with Pandas Using pdpipe](/2019/12/build-pipelines-pandas-pdpipe.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用pdpipe构建Pipelines](/2019/12/build-pipelines-pandas-pdpipe.html)'
- en: '[Machine Learning in Dask](/2020/06/machine-learning-dask.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Dask中的机器学习](/2020/06/machine-learning-dask.html)'
- en: '[Google’s New Explainable AI Service](/2019/12/googles-new-explainable-ai-service.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Google的新解释性AI服务](/2019/12/googles-new-explainable-ai-service.html)'
- en: More On This Topic
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为一名出色数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家都应掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并找到目标以…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个90亿美元的人工智能失败案例，深度剖析](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立一个稳固的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
