- en: 7 Must-Know Python Tips for Coding Interviews
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![7 Must-Know Python Tips for Coding Interviews](../Images/2e1736bec8cafa934e833c784efe7d3f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Almost all interviews for data science roles include up to two rounds of coding
    to test a candidate’s problem solving skills. So even if you have an impressive
    project portfolio, you’ll have to clear the initial coding interview rounds to
    progress further.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a language like Python—to tackle coding interviews—can be very helpful
    as it's much simpler to learn and use than languages like C++ and Java. In this
    guide, we'll go over useful Python tips for coding interviews.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll cover reversing and sorting arrays, customizing array sorts, list and
    dictionary comprehensions, unpacking iterables, and more. Let’s dive right in!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Reverse an Array in Place
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In any coding interview, you’ll have questions on arrays. In Python, lists
    provide the same functionality as arrays. You can do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Look up the element at a particular index in constant time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Append to the end of the list and  remove items from the end of the list in
    constant time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert an element at a particular index in O(n) time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you need to reverse a list in place, without creating a new list, you can
    call the `reverse()` method on the list. Here, we initialize the `nums` list and
    call the `reverse()` method on it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that the original list has been reversed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Sort Arrays and Customize Sorts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another common array operation is sorting. When you need to sort a list in place,
    you can call the `sort()` method on the list object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `nums` is also a list of numbers, and calling the `sort()` method on
    `nums` sorts the list in place in ascending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As seen, the `sort()` method sorts the list in **ascending order** by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sort the list in descending order, you can set `reverse` to `True` in the
    `sort()` method call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: For a list of strings (such as ["plums","cherries","grapes"]) the
    default sorting is in alphabetical order. Setting `reverse = True` sorts the list
    of strings in reverse alphabetical order.'
  prefs: []
  type: TYPE_NORMAL
- en: Customize Sort with Lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, you need more customized sorting beyond the trivial ascending and
    descending order sorts. You can customize the list `sort()` by setting the `key`
    parameter to a callable.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let’s sort the `nums` list based on the remainder obtained on
    dividing by 7.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To check if the output is correct, let’s create a list of remainders `rem_list`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that 1 and 5 occur twice in `rem_list`. Let’s parse what this means:'
  prefs: []
  type: TYPE_NORMAL
- en: Both 13 and 78 leave a remainder of one when divided by 7\. But 13 appears before
    78 in the sorted list because it appears before 78 in the original `nums` list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, both 47%7 and 12%7 evaluate to 5\. And 47 appears before 12 in the
    sorted list because it appears before 12 in the original list, too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, `sort()` method performs a stable sort where the order of the elements
    in the original list is preserved—if two or more elements are equal under a given
    sorting criterion. In this case, the criterion is `num%7`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can also customize the sorting of lists of strings. Here, we sort the list
    `str_list` based on the number of occurrences of ''p'':'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 3\. List and Dictionary Comprehensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comprehensions are one of the powerful features of Python that let you write
    idiomatic code. They let you create new iterables from existing ones and can often
    be a *concise alternative to for loops*.
  prefs: []
  type: TYPE_NORMAL
- en: List Comprehension Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Suppose we have the `nums` list. We’d now like to get the list of all numbers
    in `nums` that are divisible by 3\. To do so, we can use list comprehension expressions
    of the form: `[output for item in iterable if condition]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we filter the `nums` based on the condition `num%3==0` to get the `div_by_3`
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Dictionary Comprehension Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dictionary comprehension is helpful when you need to create a new dictionary
    from existing iterables instead of using for loops.
  prefs: []
  type: TYPE_NORMAL
- en: 'These expressions are generally of the form: `{key:value for key in some_iterable}`.
    Meaning we can access the keys and create the values on the go (from the keys)!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to create a Python dictionary containing the numbers 1 to 10
    as the keys and the squares of those numbers as the values. We can do it using
    dictionary comprehension like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that we have the numbers and the squares of the numbers as key-value
    pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s another example. From the `strings` list, we construct the `str_len`
    dictionary, where keys are the strings and values are the length of these strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Unpacking Iterables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, you can unpack iterables into one or more variables depending on
    how you’d like to use them. This is especially helpful when you need to use only
    a subset of the elements for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a list `list1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to use all the four elements in `list1`, we simply assign it to
    four different variables as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want only the first elements in the list in a variable, say, `num1`
    and the remaining elements (sublist) in another variable, say, `num2`, you can
    use * before the variable name so it’ll capture the remaining elements in `list1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, if you want the first and the last elements in the list, you can
    unpack as shown below. The elements 2 and 4 are subsumed in the variable `num2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Join a List of Strings on a Separator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose you have a list of strings and the task is to join them into a single
    string using a separator.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `join()` string method like so: `separator.join(list)` will
    join the elements in the list using the separator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few examples. Consider the `fruits` list shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To join the strings in the `fruits` list using **--** as the separator,  specify
    ''--'' as the separator string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To join the strings without any white space, use an empty string as the separator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To join the strings using a single white space, specify '' '' as the separator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Loop Using enumerate()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s use the previous `fruits` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use the `range` function and list index to get the items and index
    simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it’s convenient to use the `enumerate()` function. You can loop through
    both the index and the item at the index, simultaneously, using the `enumerate()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that we get the indices 0 to 4 along with the elements are those indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the index starts at zero. Sometimes you may want to start at a
    non-zero index. To do this, you can specify the start index as the second position
    argument as the second position argument in the `enumerate()` function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the index starts at 1 index instead of zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Because `enumerate()` allows you to loop through iterables, you can use it inside
    list and dictionary comprehensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can store the index and the items as keys and values in the
    dictionary using the `enumerate()` function in the dictionary comprehension expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Useful Math Functions to Know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python’s built-in math module comes with out-of-the-box support for common
    mathematical operations. Here are some functions that will come in handy:'
  prefs: []
  type: TYPE_NORMAL
- en: math.ceil() and math.floor()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You’ll often have to round down and round up numbers to the nearest integers;
    the `floor()` and `ceil()` functions in the built-in math module help you do this:'
  prefs: []
  type: TYPE_NORMAL
- en: The `floor()` function rounds down a given number to the greatest integer that
    is less than or equal to the given number. and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ceil()` function rounds up the given number to the smallest integer that
    is greater than or equal to the given number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![7 Must-Know Python Tips for Coding Interviews](../Images/3c1ad7374ba4967b3093d11508a86469.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'As 3 is the smallest integer greater than 2.47, ceil(2.47) gives 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And as 3 is the greatest integer less than 3.97 so floor(3.97) also gives 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: math.sqrt() and List Comprehension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get the square root of a number, you can use the `sqrt()` function from the
    math module. You can use it in conjunction with comprehensions to extend functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we use the `sqrt()` function in a list comprehension expression to generate
    the s
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'For a more easily readable output, let’s round the numbers to two decimal places
    using the built-in `round()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And that's a wrap! I hope you found a few useful tips to add to your Python
    toolbox.
  prefs: []
  type: TYPE_NORMAL
- en: If you're looking to learn and practice Python, and are interested in integrating
    ChatGPT into your learning workflow, check out this guide on how to use [ChatGPT
    as a Python Programming Assistant](/2023/01/chatgpt-python-programming-assistant.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a technical
    writer who enjoys creating long-form content. Her areas of interest include math,
    programming, and data science. She shares her learning with the developer community
    by authoring tutorials, how-to guides, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Free University Courses to Ace Coding Interviews](https://www.kdnuggets.com/5-free-university-courses-to-ace-coding-interviews)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tips for Successfully Navigating Beginner Data Science Job Interviews](https://www.kdnuggets.com/tips-for-successfully-navigating-beginner-data-science-job-interviews)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[More Tips for Successfully Navigating Beginner Data Science Job Interviews](https://www.kdnuggets.com/more-tips-for-successfully-navigating-beginner-data-science-job-interviews)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deliver a Killer Presentation in Data Science Interviews](https://www.kdnuggets.com/2022/01/deliver-killer-presentation-data-science-interviews.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What it takes to crack Machine Learning Engineer interviews](https://www.kdnuggets.com/2022/10/interview-kickstart-crack-machine-learning-engineer-interviews.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL Interviews Preparations Material Resources](https://www.kdnuggets.com/2023/02/sql-interviews-preparations-material-resources.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
