- en: Monitor Your File System With Python’s Watchdog
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的监控程序监控你的文件系统
- en: 原文：[https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog](https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog](https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog)
- en: '![Monitor Your File System With Python’s Watchdog](../Images/659033c9f0e281fee72294fc54fb68bb.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 的监控程序监控你的文件系统](../Images/659033c9f0e281fee72294fc54fb68bb.png)'
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供 | DALLE-3 & Canva
- en: Python’s watchdog library makes it easy to monitor your file system and respond
    to these changes automatically. Watchdog is a cross-platform API that allows you
    to run commands in response to any changes in the file system being monitored.
    We can set triggers on multiple events such as file creation, modification, deletion,
    and movement, and then respond to these changes with our custom scripts.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的监控程序库使得监控你的文件系统并自动响应这些变化变得容易。监控程序是一个跨平台的 API，允许你在监控的文件系统中发生任何变化时运行命令。我们可以对文件创建、修改、删除和移动等多个事件设置触发器，然后用自定义脚本响应这些变化。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的 top 3 课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT 需求'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Setup for Watchdog
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控程序设置
- en: 'You''ll need two modules to begin:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 开始时你需要两个模块：
- en: '**Watchdog:** Run this command below in the terminal to install the watchdog.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控程序：** 在终端中运行以下命令以安装监控程序。'
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Logging:** It is a built-in Python module, so there is no need to externally
    install it.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录：** 这是一个内置的 Python 模块，因此无需外部安装。'
- en: Basic Usage
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本使用
- en: Let's create a simple script ‘main.py’ that monitors a directory and prints
    a message whenever a file is created, modified, or deleted.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的脚本 ‘main.py’，它监控一个目录，并在文件被创建、修改或删除时打印一条消息。
- en: 'Step 1: Import Required Modules'
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 1：导入所需模块
- en: 'First, import the necessary modules from the watchdog library:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，从监控程序库中导入必要的模块：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Step 2: Define Event Handler Class'
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 2：定义事件处理程序类
- en: We define a class MyHandler that inherits from FileSystemEventHandler. This
    class overrides methods like on_modified, on_created, and on_deleted to specify
    what to do when these events occur. The event handler object will be notified
    when any changes happen in the file system.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个 MyHandler 类，继承自 FileSystemEventHandler。这个类重写了 on_modified、on_created
    和 on_deleted 等方法，以指定这些事件发生时的操作。事件处理程序对象将在文件系统发生任何变化时被通知。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Some useful methods of `FileSystemEventHandler` are explained below.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileSystemEventHandler` 的一些有用方法如下所示。'
- en: '**on_any_event:** Executed for any event.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on_any_event：** 对任何事件执行。'
- en: '**on_created:** Executed upon creation of a new file or directory.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on_created：** 在创建新文件或目录时执行。'
- en: '**on_modified:** Executed upon modification of a file or when a directory is
    renamed.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on_modified：** 在文件被修改或目录被重命名时执行。'
- en: '**on_deleted:** Triggered upon the deletion of a file or directory.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on_deleted：** 在文件或目录被删除时触发。'
- en: '**on_moved:** Triggered when a file or directory is relocated.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on_moved：** 当文件或目录被重新定位时触发。'
- en: 'Step 3: Initialize and Run the Observer'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 3：初始化并运行 Observer
- en: The Observer class is responsible for tracking the file system for any changes
    and subsequently notifying the event handler. It continuously tracks file system
    activities to detect any updates.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Observer 类负责跟踪文件系统中的任何变化，并随后通知事件处理程序。它持续跟踪文件系统活动，以检测任何更新。
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We start the observer and use a loop to keep it running. When you want to stop
    it, you can interrupt with a keyboard signal `(Ctrl+C)`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们启动观察者并使用循环使其持续运行。当你想停止它时，可以通过键盘信号 `(Ctrl+C)` 中断。
- en: 'Step 4: Run the Script'
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤 4：运行脚本
- en: Finally, run the script with the following command.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令运行脚本。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The above code will log all the changes in the directory to the terminal if
    any file/folder is created, modified, or deleted.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码会在终端记录目录中所有的更改，如果有任何文件/文件夹被创建、修改或删除。
- en: Advanced Usage
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级用法
- en: In the following example, we will explore how to set up a system that detects
    any change in Python files and run tests for it automatically. We need to install
    pytest with the following command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，我们将探讨如何设置一个系统，以检测 Python 文件中的任何更改并自动运行测试。我们需要使用以下命令安装 pytest。
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Step 1: Create a Simple Python Project With Tests'
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第一步：创建一个简单的 Python 项目及测试
- en: 'First, set up the basic structure of your project:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，设置项目的基本结构：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Step 2: Write Code in Example Python File'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第二步：在示例 Python 文件中编写代码
- en: 'Create a simple Python module in src/example.py:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 src/example.py 中创建一个简单的 Python 模块：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Step 3: Write the Test Cases'
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第三步：编写测试用例
- en: 'Next, write the test cases for functions in tests/test_example.py:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为 tests/test_example.py 中的函数编写测试用例：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Step 4: Write the Watchdog Script'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第四步：编写 Watchdog 脚本
- en: 'Now, create the watchdog_test_runner.py script to monitor changes in Python
    files and automatically run tests:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建 watchdog_test_runner.py 脚本以监控 Python 文件中的更改并自动运行测试：
- en: '[PRE10]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Step 5: Run the Watchdog Script'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第五步：运行 Watchdog 脚本
- en: 'In the end, open a terminal, navigate to your project directory (my_project),
    and run the watchdog script:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，打开终端，导航到项目目录（my_project），并运行 watchdog 脚本：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output:**'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This output shows that all the test cases are passed after changes were made
    to example.py file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 该输出显示在对 example.py 文件进行更改后，所有测试用例均已通过。
- en: Summing Up
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Python’s watchdog library is a powerful tool for monitoring your file system.
    Whether you're automating tasks, syncing files, or building more responsive applications,
    watchdog makes it easy to react to file system changes in real time. With just
    a few lines of code, you can start monitoring directories and handling events
    to streamline your workflow.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 watchdog 库是监控文件系统的强大工具。无论你是在自动化任务、同步文件，还是构建更响应的应用程序，watchdog 使实时响应文件系统更改变得容易。只需几行代码，你就可以开始监控目录和处理事件，从而简化工作流程。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一名机器学习工程师和技术作家，对数据科学以及 AI 与医学的交集有深厚的热情。她共同撰写了电子书《利用 ChatGPT 最大化生产力》。作为2022年APAC地区的
    Google Generation 学者，她倡导多样性和学术卓越。她还被认定为 Teradata 多样性技术学者、Mitacs Globalink 研究学者和哈佛
    WeCode 学者。Kanwal 是变革的热心倡导者，创立了 FEMCodes，旨在赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多内容
- en: '[Monitor Model Performance in the MLOps Pipeline with Python](https://www.kdnuggets.com/2023/05/monitor-model-performance-mlops-pipeline-python.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 MLOps 管道中使用 Python 监控模型性能](https://www.kdnuggets.com/2023/05/monitor-model-performance-mlops-pipeline-python.html)'
- en: '[Parallel Processing Large File in Python](https://www.kdnuggets.com/2022/07/parallel-processing-large-file-python.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 中的并行处理大文件](https://www.kdnuggets.com/2022/07/parallel-processing-large-file-python.html)'
- en: '[KDnuggets News, July 20: Machine Learning Algorithms Explained in…](https://www.kdnuggets.com/2022/n29.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，7月20日：机器学习算法解释…](https://www.kdnuggets.com/2022/n29.html)'
- en: '[Building a Recommender System for Amazon Products with Python](https://www.kdnuggets.com/2023/02/building-recommender-system-amazon-products-python.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 为 Amazon 产品构建推荐系统](https://www.kdnuggets.com/2023/02/building-recommender-system-amazon-products-python.html)'
- en: '[How a Level System can Help Forecast AI Costs](https://www.kdnuggets.com/2022/03/level-system-help-forecast-ai-costs.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[等级系统如何帮助预测 AI 成本](https://www.kdnuggets.com/2022/03/level-system-help-forecast-ai-costs.html)'
- en: '[Learning System Design: Top 5 Essential Reads](https://www.kdnuggets.com/learning-system-design-top-5-essential-reads)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习系统设计：前 5 本必读书籍](https://www.kdnuggets.com/learning-system-design-top-5-essential-reads)'
