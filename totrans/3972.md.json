["```py\nimport numpy as np\nfrom PIL import Image\nimport matplotlib.pyplot as plt\n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Define the cropping coordinates\ny1, x1 = 1000, 1000  # Top-left corner of ROI\ny2, x2 = 2500, 2000  # Bottom-right corner of ROI\ncropped_img = img_array[y1:y2, x1:x2]\n\n# Display the original image and the cropped image\nplt.figure(figsize=(10, 5))\n\n# Display the original image\nplt.subplot(1, 2, 1)\nplt.imshow(img_array)\nplt.title('Original Image')\nplt.axis('off')\n\n# Display the cropped image\nplt.subplot(1, 2, 2)\nplt.imshow(cropped_img)\nplt.title('Cropped Image')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Rotate the image by 90 degrees counterclockwise\nrotated_img = np.rot90(img_array)\n\n# Display the original image and the rotated image\nplt.figure(figsize=(10, 5))\n\n# Display the original image\nplt.subplot(1, 2, 1)\nplt.imshow(img_array)\nplt.title('Original Image')\nplt.axis('off')\n\n# Display the rotated image\nplt.subplot(1, 2, 2)\nplt.imshow(rotated_img)\nplt.title('Rotated Image (90 degrees)')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Flip the image horizontally\nflipped_img = np.fliplr(img_array)\n\n# Display the original image and the flipped image\nplt.figure(figsize=(10, 5))\n\n# Display the original image\nplt.subplot(1, 2, 1)\nplt.imshow(img_array)\nplt.title('Original Image')\nplt.axis('off')\n\n# Display the flipped image\nplt.subplot(1, 2, 2)\nplt.imshow(flipped_img)\nplt.title('Flipped Image')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Check if the image is grayscale or RGB\nis_grayscale = len(img_array.shape) < 3\n\n# Function to create negative of an image\ndef create_negative(image):\n    if is_grayscale:\n        # For grayscale images\n        negative_image = 255 - image\n    else:\n        # For color images (RGB)\n        negative_image = 255 - image\n    return negative_image\n\n# Create negative of the image\nnegative_img = create_negative(img_array)\n\n# Display the original and negative images\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(img_array)\nplt.title('Original Image')\nplt.axis('off')\n\nplt.subplot(1, 2, 2)\nplt.imshow(negative_img)\nplt.title('Negative Image')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to grayscale\nimg_gray = img.convert('L')\n\n# Convert the grayscale image to a NumPy array\nimg_array = np.array(img_gray)\n\n# Binarize the image using a threshold\nthreshold = 128\nbinary_img = np.where(img_array < threshold, 0, 255).astype(np.uint8)\n\n# Display the original and binarized images\nplt.figure(figsize= (10, 5))\n\nplt.subplot(1, 2, 1)\nplt.imshow(img_array, cmap='gray')\nplt.title('Original Grayscale Image')\nplt.axis('off')\n\nplt.subplot(1, 2, 2)\nplt.imshow(binary_img, cmap='gray')\nplt.title('Binarized Image (Threshold = 128)')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Grayscale conversion formula: Y = 0.299*R + 0.587*G + 0.114*B\ngray_img = np.dot (img_array[..., :3], [0.299, 0.587, 0.114])\n\n# Display the original RGB image\nplt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(img_array)\nplt.title('Original RGB Image')\nplt.axis('off')\n\n# Display the converted grayscale image\nplt.subplot(1, 2, 2)\nplt.imshow(gray_img, cmap='gray')\nplt.title('Grayscale Image')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Compute the histogram of the image\nhist, bins = np.histogram(img_array.flatten(), bins=256, range= (0, 256))\n\n# Plot the histogram\nplt.figure(figsize=(10, 5))\nplt.hist(img_array.flatten(), bins=256, range= (0, 256), density=True, color='gray')\nplt.xlabel('Pixel Intensity')\nplt.ylabel('Normalized Frequency')\nplt.title('Histogram of Grayscale Image')\nplt.grid(True)\nplt.show() \n```", "```py\n# Load the image using PIL (Python Imaging Library)\nimg = Image.open('cat.jpg')\n\n# Convert the image to a NumPy array\nimg_array = np.array(img)\n\n# Create a binary mask\nmask = np.zeros_like(img_array[:, :, 0], dtype=np.uint8)\ncenter = (img_array.shape[0] // 2, img_array.shape[1] // 2)\nradius = min(img_array.shape[0], img_array.shape[1]) // 2  # Increase radius for a bigger circle\nrr, cc = np.meshgrid(np.arange(img_array.shape[0]), np.arange(img_array.shape[1]), indexing='ij')\ncircle_mask = (rr - center [0]) ** 2 + (cc - center [1]) ** 2 < radius ** 2\nmask[circle_mask] = 1\n\n# Apply the mask to the image\nmasked_img = img_array.copy()\nfor i in range(img_array.shape[2]):  # Apply to each color channel\n    masked_img[:,:,i] = img_array[:,:,i] * mask\n\n# Displaying the original image and the masked image\nplt.figure(figsize=(10, 5))\n\nplt.subplot(1, 2, 1)\nplt.imshow(img_array)\nplt.title('Original Image')\nplt.axis('off')\n\nplt.subplot(1, 2, 2)\nplt.imshow(masked_img)\nplt.title('Masked Image')\nplt.axis('off')\n\nplt.tight_layout()\nplt.show() \n```"]