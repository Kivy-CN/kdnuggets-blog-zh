["```py\nfrom flink.plan.Environment import get_environment\nfrom flink.plan.Constants import INT, STRING, WriteMode\nfrom flink.functions.GroupReduceFunction \\\nimport GroupReduceFunction\n\nclass Adder(GroupReduceFunction):\n    def reduce(self, iterator, collector):\n        count, word = iterator.next()\n        count += sum([x[0] for x in iterator])\n        collector.collect((count, word))\n\nif __name__ == \"__main__\":\n    output_file = 'file:///.../flink-examples/out.txt'\n    print('logging results to: %s' % (output_file, ))\n\n    env = get_environment()\n    data = env.from_elements(\"Who's there? I think \\\n         I hear them. Stand, ho! Who's there?\")\n\n    data \\\n        .flat_map(lambda x, c: [(1, word) for word in \\\n         x.lower().split()], (INT, STRING)) \\\n        .group_by(1) \\\n        .reduce_group(Adder(), (INT, STRING), combinable=True) \\\n        .map(lambda y: 'Count: %s Word: %s' % (y[0], y[1]), STRING) \\\n        .write_text(output_file, write_mode=WriteMode.OVERWRITE)\n\n    env.execute(local=True)\n```"]