- en: Handling Trees in Data Science Algorithmic Interview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/01/handling-trees-data-science-algorithmic-interview.html](https://www.kdnuggets.com/2020/01/handling-trees-data-science-algorithmic-interview.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: Algorithms and data structures are an integral part of data science. While most
    of us data scientists don't take a proper algorithms course while studying, they
    are crucial all the same.
  prefs: []
  type: TYPE_NORMAL
- en: Many companies ask data structures and algorithms as part of their interview
    process for hiring data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Now the question that many people ask here is what is the use of asking a data
    scientist such questions. ***The way I like to describe it is that a data structure
    question may be thought of as a coding aptitude test.***
  prefs: []
  type: TYPE_NORMAL
- en: '*We all have given aptitude tests at various stages of our life, and while
    they are not a perfect proxy to judge someone, almost nothing ever really is. So,
    why not a standard algorithm test to judge people''s coding ability.'
  prefs: []
  type: TYPE_NORMAL
- en: But let's not kid ourselves, they will require the same zeal to crack as your
    Data Science interviews, and thus, you might want to give some time for the study
    of algorithms and Data structure questions.
  prefs: []
  type: TYPE_NORMAL
- en: '***This post is about fast-tracking this study and explaining tree concepts
    for the data scientists so that you breeze through the next time you get asked
    these in an interview.***'
  prefs: []
  type: TYPE_NORMAL
- en: But First, Why are Trees important for Data Science?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To data scientists, Trees mean a different thing than they mean for a Software
    Engineer.
  prefs: []
  type: TYPE_NORMAL
- en: For a software engineer, a tree is just a simple Data Structure they can use
    to manage hierarchical relationships while for a Data Scientists trees form the
    basis of some of the most useful classification and regression algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: So where do these two meet?
  prefs: []
  type: TYPE_NORMAL
- en: They are necessarily the same thing. Don't be surprised. Below is how data scientists
    and software engineer's look at trees.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/0d6ea80e7c5eea532c15d9487cfa0855.png)'
  prefs: []
  type: TYPE_IMG
- en: They are essentially the same
  prefs: []
  type: TYPE_NORMAL
- en: The only difference is that Data science tree nodes keep much more information
    that helps us in identifying how to traverse the tree. For example, in the case
    of Data science tree for prediction, we will look at the feature in the node and
    determine which way we want to move based on the split value.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to write your decision tree from scratch, you might need to understand
    how trees work from a software engineering perspective too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Types of Trees:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this post, I will only be talking about two kinds of trees that get asked
    a lot in Data Science interview questions. Binary Trees(BT) and an extension of
    Binary Trees called Binary Search Trees(BST).
  prefs: []
  type: TYPE_NORMAL
- en: '1\. Binary Trees:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A binary tree is simply a tree in which each node has up to two children. A
    decision tree is an example we see in our day to day lives.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/c6f04dde60176a1efe6b381cc205829f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Binary Tree: Each Node has up to 2 children'
  prefs: []
  type: TYPE_NORMAL
- en: '2\. Binary Search Tree(BST):'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A binary search tree is a binary tree in which:'
  prefs: []
  type: TYPE_NORMAL
- en: All left descendants of a node are less than or equal to the node, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All right descendants of the node are greater than the node.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are variations to this definition when it comes to equalities. Sometimes
    the equalities are on the right-hand side or either side. Sometimes only distinct
    values are allowed in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/27b84aad70fd2e4011f509de90c91a5a.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://www.freecodecamp.org/news/data-structures-101-binary-search-tree-398267b6bff0/)'
  prefs: []
  type: TYPE_NORMAL
- en: 8 is greater than all the elements in the left subtree and smaller than all
    elements in the right subtree. The same could be said for any node in the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a Simple Tree:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So How do we construct a simple tree?
  prefs: []
  type: TYPE_NORMAL
- en: By definition, a tree is made up of nodes. So we start by defining the `node` class
    which we will use to create nodes. Our node class is pretty simple as it holds
    value for a node, the location of the left child and the location of the right
    child.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a simple tree now as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now I have noticed that we cannot really get the hang of Tree-based questions
    without doing some coding ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: '***So let us get a little deeper into the coding part with some problems I
    found most interesting when it comes to trees.***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inorder Tree Traversal:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a variety of ways to traverse a tree, but I find the inorder traversal
    to be most intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: When we do an inorder traversal on the root node on a Binary Search tree, it
    visits/prints the node in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This above method is pretty important as it allows us to visit all the nodes.
  prefs: []
  type: TYPE_NORMAL
- en: So if we want to search for a node in any binary tree, we might try to use inorder
    tree traversal.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Binary Search Tree from a Sorted array
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What kind of coders will we be if we need to create a tree piece by piece manually
    as we did above?
  prefs: []
  type: TYPE_NORMAL
- en: '***So can we create a BST from a sorted array of unique elements?***'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Trees are inherently recursive, and so we use recursion here. We take the mid
    element of the array and assign it as the node. We then apply the `create_bst` function
    to the left part of the array and assign it to `node.left` and do the same with
    the right part of the array.
  prefs: []
  type: TYPE_NORMAL
- en: And we get our BST.
  prefs: []
  type: TYPE_NORMAL
- en: Have we done it right? We can check it by creating the BST and then doing an
    inorder traversal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Seems Right!
  prefs: []
  type: TYPE_NORMAL
- en: Let's check if our tree is a Valid BST
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/380b0d1a2fed9cfe40b8371b528cdea1.png)'
  prefs: []
  type: TYPE_IMG
- en: Think Recursion!!!
  prefs: []
  type: TYPE_NORMAL
- en: But again what sort of coders are we if we need to print all the elements and
    check manually for the BST property being satisfied?
  prefs: []
  type: TYPE_NORMAL
- en: Here is a simple code to check if our BST is valid or not. We assume strict
    inequality in our Binary Search Tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We check the subtrees recursively if they satisfy the Binary Search tree property
    or not. At each recursive call, we change the `minval` or `maxval` for the call
    to provide the function with the range of allowed values for the subtree.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***In this post, I talked about Trees from a software engineering perspective.
    If you want to see trees from a data science perspective, you might take a look
    at this post.***'
  prefs: []
  type: TYPE_NORMAL
- en: '[**The Simple Math behind 3 Decision Tree Splitting criterions**](https://towardsdatascience.com/the-simple-math-behind-3-decision-tree-splitting-criterions-85d4de2a75fe)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Splitting Criterions
  prefs: []
  type: TYPE_NORMAL
- en: Trees form the basis of some of the most asked questions in Data Science algorithmic
    interviews. I used to despair such tree-based questions in the past, but now I
    have grown to like the mental exercise involved in them. And I love the recursive
    structure involved in such problems.
  prefs: []
  type: TYPE_NORMAL
- en: And while you can go a fair bit in data science without learning them, you can
    learn them just for a little bit of fun and maybe to improve your programming
    skills.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a small [notebook](https://www.kaggle.com/mlwhiz/tree-data-structure-and-algorithms) for
    you where I have put all these small concepts for you to try and run.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at my other posts in the [Algorithmic Interviews Series](https://towardsdatascience.com/tagged/algorithms-interview),
    if you want to learn about [Recursion](https://towardsdatascience.com/three-programming-concepts-for-data-scientists-c264fc3b1de8), [Dynamic
    Programming](https://towardsdatascience.com/dynamic-programming-for-data-scientists-bb7154b4298b) or [Linked
    Lists](https://towardsdatascience.com/a-simple-introduction-of-linked-lists-for-data-scientists-a71f0eb31d87).
  prefs: []
  type: TYPE_NORMAL
- en: Continue Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to read up more on Algorithms and Data structures, here is an [**Algorithm
    Specialization on Coursera by UCSanDiego**](https://click.linksynergy.com/deeplink?id=lVarvwc5BD0&mid=40328&murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fdata-structures-algorithms)**, **which
    I highly recommend.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for the read. I am going to be writing more beginner-friendly posts in
    the future too. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal?source=post_page---------------------------) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX?source=post_page---------------------------) to
    be informed about them. As always, I welcome feedback and constructive criticism
    and can be reached on Twitter [@mlwhiz](https://twitter.com/MLWhiz?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, a small disclaimer: There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is Senior
    Statistical Analyst at WalmartLabs. Follow him on Twitter [@mlwhiz](https://twitter.com/MLWhiz).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/handling-trees-in-data-science-algorithmic-interview-ea14dd1b6236).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[6 bits of advice for Data Scientists](/2019/09/advice-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Good Feature Building Techniques and Tricks for Kaggle](/2018/12/feature-building-techniques-tricks-kaggle.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Hitchhiker’s Guide to Feature Extraction](/2019/06/hitchhikers-guide-feature-extraction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How Has the Adoption of AI in Algorithmic Trading Affected the…](https://www.kdnuggets.com/2022/04/adoption-ai-algorithmic-trading-affected-finance-industry.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Handling Missing Values in Time-series with SQL](https://www.kdnuggets.com/2022/09/handling-missing-values-timeseries-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning from Scratch: Decision Trees](https://www.kdnuggets.com/2022/11/machine-learning-scratch-decision-trees.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decision Trees vs Random Forests, Explained](https://www.kdnuggets.com/2022/08/decision-trees-random-forests-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Demystifying Decision Trees for the Real World](https://www.kdnuggets.com/demystifying-decision-trees-for-the-real-world)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generalized and Scalable Optimal Sparse Decision Trees(GOSDT)](https://www.kdnuggets.com/2023/02/generalized-scalable-optimal-sparse-decision-treesgosdt.html)*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
