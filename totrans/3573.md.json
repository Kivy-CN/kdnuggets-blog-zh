["```py\nimport pandas as pd\nglass_df = pd.read_csv(\"glass.csv\")\nglass_df = glass_df.sample(frac = 1)\nglass_df.head(3)\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\nX = glass_df.drop(\"Type\",axis=1)\ny = glass_df.Type\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=125)\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\n\npipe = Pipeline(\n    steps=[\n        (\"imputer\", SimpleImputer()),\n        (\"scaler\", StandardScaler()),\n        (\"model\", RandomForestClassifier(n_estimators=100, random_state=125)),\n    ]\n)\npipe.fit(X_train, y_train)\n\npipe.score(X_test, y_test)\n>>> 0.7538461538461538\n```", "```py\nfrom sklearn.metrics import classification_report\n\ny_pred = pipe.predict(X_test)\nprint(classification_report(y_test,y_pred))\n```", "```py\nprecision    recall  f1-score   support\n\n           1       0.65      0.73      0.69        15\n           2       0.82      0.79      0.81        29\n           3       0.40      0.50      0.44         4\n           5       1.00      0.80      0.89         5\n           6       1.00      0.67      0.80         3\n           7       0.78      0.78      0.78         9\n\n    accuracy                           0.75        65\n   macro avg       0.77      0.71      0.73        65\nweighted avg       0.77      0.75      0.76        65\n```", "```py\nimport skops.io as sio\nsio.dump(pipe, \"glass_pipeline.skops\")\n```", "```py\nsio.load(\"glass_pipeline.skops\", trusted=True)\n```", "```py\nimport gradio as gr\nimport skops.io as sio\n\npipe = sio.load(\"glass_pipeline.skops\", trusted=True)\n\nclasses = [\n    \"None\",\n    \"Building Windows Float Processed\",\n    \"Building Windows Non Float Processed\",\n    \"Vehicle Windows Float Processed\",\n    \"Vehicle Windows Non Float Processed\",\n    \"Containers\",\n    \"Tableware\",\n    \"Headlamps\",\n]\n\ndef classifier(RI, Na, Mg, Al, Si, K, Ca, Ba, Fe):\n    pred_glass = pipe.predict([[RI, Na, Mg, Al, Si, K, Ca, Ba, Fe]])[0]\n    label = f\"Predicted Glass label: **{classes[pred_glass]}**\"\n    return label\n\ninputs = [\n    gr.Slider(1.51, 1.54, step=0.01, label=\"Refractive Index\"),\n    gr.Slider(10, 17, step=1, label=\"Sodium\"),\n    gr.Slider(0, 4.5, step=0.5, label=\"Magnesium\"),\n    gr.Slider(0.3, 3.5, step=0.1, label=\"Aluminum\"),\n    gr.Slider(69.8, 75.4, step=0.1, label=\"Silicon\"),\n    gr.Slider(0, 6.2, step=0.1, label=\"Potassium\"),\n    gr.Slider(5.4, 16.19, step=0.1, label=\"Calcium\"),\n    gr.Slider(0, 3, step=0.1, label=\"Barium\"),\n    gr.Slider(0, 0.5, step=0.1, label=\"Iron\"),\n]\noutputs = [gr.Label(num_top_classes=7)]\n\ntitle = \"Glass Classification\"\ndescription = \"Enter the details to correctly identify glass type?\"\n\ngr.Interface(\n    fn=classifier,\n    inputs=inputs,\n    outputs=outputs,\n    title=title,\n    description=description,\n).launch()\n```"]