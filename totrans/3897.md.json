["```py\n# random array with 10 million points\na = np.random.normal(500, 30, 10000000)\n\n# iterating and checking for values < 500\nt0 = time.time()\ntotal = 0\nfor each in a:\n    if each < 500:\n    total += each\nt1 = time.time()\nprint(t1-t0) \n\n```", "```py\n# same operation only using numpy\nt0 = time.time()\ntotal = a[a<500].sum()\nt1 = time.time()\nprint(t1-t0) \n\n```", "```py\n# random 2d array with 1m rows and 20 columnn\n# we’ll use the same in following examples\na = np.random.random(size=(1000000,20))\n\n# sum all values greater than 0.30\n(a * (a>0.30)).sum(axis=1)\n\n```", "```py\n# obtain the number of columns in the matrix to be used as index of the new one to be placed at the end\nnew_index = a.shape[1]\n\n# set the new column using the array created in the previous example\na = np.insert(a, new_index, (a * (a>0.30)).sum(axis=1), axis=1)\n\n# check new shape of a\na.shape\n\n```", "```py\n# filter if the new last column is greater than 10 and first column is less than 0.30\nb = a[(a[:,0]<0.30)&(a[:,-1]>10)]\n\nb.shape\n\n```", "```py\n# change to 100 all values less than 0.30\na[a<0.3] = 100\n\n```", "```py\ndef my_func(a,b):\n\n   c=(a+b)/2*1.5\n\n   return c\n\n```", "```py\ndef test_func(function, output):\n    out = function\n    if output == out:\n        print(‘Worked as expected!’)\n    else:\n        print(‘Error! Expected {} output was {}’.format(output,out))\n\n```", "```py\ntest_func(my_func(4,2),4.5)\n\n```", "```py\nimport pytest\n%%writefile test_function.py\n\ndef my_func(a,b):\n    c=(a+b)/2*1.5\n    return c\n\ndef test_func_4_2():\n    assert(my_func(4,2)==4.5)\n\ndef test_func_5_5():\n    assert(my_func(5,5)==7.5)\n\ndef test_func_4_8():\n    assert(my_func(4,8)==9.0)\n\n```", "```py\n!pytest test_function.py\n\n```"]