- en: How to Make Python Code Run Incredibly Fast
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How to Make Python Code Run Incredibly Fast](../Images/cf09bbaf063f4212ca4ecc13d7713603.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image by brgfx](https://www.freepik.com/free-vector/young-boy-laptop-python-concept_3576656.htm#query=Python&position=5&from_view=search&track=sph)
    on Freepik'
  prefs: []
  type: TYPE_NORMAL
- en: Python is one of the most popular programming languages among developers. It
    is used everywhere, whether it’s web development or machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: There are many reasons for its popularity, such as its community support, its
    amazing libraries, its wide usage in Machine Learning and Big Data, and its easy
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Despite having these many qualities, python has one drawback, which is it's
    *slow* speed. Being an interpreted language, python is slower than other programming
    languages. Still, we can overcome this problem using some tips.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will share some python tricks using which we can make our
    python code run faster than usual. Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Proper Algorithm & Data Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each data structure has a significant effect on runtime. There are many built-in
    data structures such as list, tuple, set, and dictionary in python. Most people
    use a list data structure in all cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In python, sets and dictionaries have O(1) lookup performance as they use hash
    tables for that. You can use sets and dictionaries instead of lists in the following
    cases:'
  prefs: []
  type: TYPE_NORMAL
- en: You do not have duplicate items in the collection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You need to search items repeatedly in the collection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The collection contains a large number of items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see the time complexity of different data structures in python here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Time Complexity via Python Wiki**](https://wiki.python.org/moin/TimeComplexity)'
  prefs: []
  type: TYPE_NORMAL
- en: This page documents the time-complexity (aka "Big O" or "Big Oh") of various
    operations in current CPython...
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Using Built-in Functions and Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s built-in functions are one of the best ways to speed up your code.
    You must use built-in python functions whenever needed. These built-in functions
    are well tested and optimized.
  prefs: []
  type: TYPE_NORMAL
- en: The reason these built-in functions are fast is that python’s built-in functions,
    such as min, max, all, map, etc., are implemented in the C language.
  prefs: []
  type: TYPE_NORMAL
- en: You should use these built-in functions instead of writing manual functions
    that will help you execute your code faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A better way to write this code is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here we are using the built-in **map** function, which is written in C. Therefore,
    it is much faster than using a loop.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use Multiple Assignments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to assign the values of multiple variables, then do not assign them
    line by line. Python has an elegant and better way to assign multiple variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'A better way to assign these variables is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This assignment of variables is much cleaner and elegant than the above one.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Prefer List Comprehension Over Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: List comprehension is an elegant and better way to create a new list based on
    the elements of an existing list in just a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: List comprehension is considered a more Pythonic way to create a new list than
    defining an empty list and adding elements to that empty list.
  prefs: []
  type: TYPE_NORMAL
- en: Another advantage of list comprehension is that it is faster than using the
    append method to add elements to a python list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using list append method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A better way using list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Code looks cleaner when using list comprehensions.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Proper Import
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should avoid importing unnecessary modules and libraries until and unless
    you need them. You can specify the module name instead of importing the complete
    library.
  prefs: []
  type: TYPE_NORMAL
- en: Importing the unnecessary libraries will result in slowing down your code performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you need to find out the square root of a number. Instead of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 6\. String Concatenation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In python, we concatenate strings using the ‘+’ operator. But another way to
    concatenate the strings in python is using the **join** method.
  prefs: []
  type: TYPE_NORMAL
- en: Join method is a more pythonic way to concatenate strings, and it is also faster
    than concatenating strings with the ‘+’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: The reason why the join() method is faster is that the ‘**+’** operator creates
    a new string and then copies the old string at each step, whereas the join() method
    does not work that way.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Using join method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The output of both methods will be the same. The only difference is that the
    join() method is faster than the ‘+’ operator.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That’s all from this article. In this article, we have discussed some tricks
    that can be used to make your code run faster. These tips can be used especially
    with competitive programming where the time limit is everything.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you liked this article. Thanks for reading!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Pralabh Saxena](https://www.linkedin.com/in/pralabh-saxena-7a82b5124/)**
    is a software developer with 1 year of experience. Pralabh [writes articles](https://pralabhsaxena.medium.com/)
    on topics such as Python, Machine Learning, Data Science, and SQL.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Getting Started with PyTest: Effortlessly Write and Run Tests in Python](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Make Documenting Code Easier](https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Schedule & Run ETLs with Jupysql and GitHub Actions](https://www.kdnuggets.com/2023/05/schedule-run-etls-jupysql-github-actions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn How to Run Alpaca-LoRA on Your Device in Just a Few Steps](https://www.kdnuggets.com/2023/05/learn-run-alpacalora-device-steps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Run an LLM Locally with LM Studio](https://www.kdnuggets.com/run-an-llm-locally-with-lm-studio)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
