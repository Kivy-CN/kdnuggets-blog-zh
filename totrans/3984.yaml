- en: Generating Random Data with NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/generating-random-data-with-numpy](https://www.kdnuggets.com/generating-random-data-with-numpy)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Generating Random Data with NumPy](../Images/b2812e23ca1b57b27f25f46ef1875f2d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor | Ideogram
  prefs: []
  type: TYPE_NORMAL
- en: Random data consists of values generated through various tools without predictable
    patterns. The occurrence of values depends on the probability distribution from
    which they are drawn because they are unpredictable.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: There are many benefits to using Random Data in our experiments, including real-world
    data simulation, synthetic data for machine learning training, or statistical
    sampling purposes.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy is a powerful package that supports many mathematical and statistical
    computations, including random data generation. From simple data to complex multi-dimensional
    arrays and matrices, NumPy could help us facilitate the need for random data generation.
  prefs: []
  type: TYPE_NORMAL
- en: This article will discuss further how we could generate Random data with Numpy.
    So, let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: Random Data Generation with NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to have the NumPy package installed in your environment. If you haven’t
    done that, you can use pip to install them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When the package has been successfully installed, we will move on to the main
    part of the article.
  prefs: []
  type: TYPE_NORMAL
- en: First, we would set the seed number for reproducibility purposes. When we perform
    random occurrences with the computer, we must remember that what we do is pseudo-random.
    The pseudo-random concept is when data seems random but is deterministic if we
    know where the starting points which we call seed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the seed in NumPy, we will use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can give any positive integer numbers as the seed number, which would become
    our starting point. Also, the `.random` method from the NumPy would become our
    main function for this article.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have set the seed, we will try to generate random number data with NumPy.
    Let’s try to generate five different float numbers randomly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It's possible to get the multi-dimensional array using NumPy. For example, the
    following code would result in 3x3 array filled with random float numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we could generate an integer random number from certain range. We can
    do that with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: All the data generated by random sampling previously followed the uniform distribution.
    It means that all the data have a similar chance to occur. If we iterate the data
    generation process to infinity times, all the number taken frequency would be
    close to equal.
  prefs: []
  type: TYPE_NORMAL
- en: We can generate random data from various distributions. Here, we try to generate
    ten random data from the standard normal distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code above takes the Z-score value from the normal distribution with mean
    zero and STD one.
  prefs: []
  type: TYPE_NORMAL
- en: We can generate random data following other distributions. Here is how we use
    the Poisson distribution to generate random data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The random sample data from Poisson Distribution in the code above would simulate
    random events at a specific average rate (5), but the number generated could vary.
  prefs: []
  type: TYPE_NORMAL
- en: We could generate random data following the binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The code above simulates the experiments we perform following the Binomial distribution.
    Just imagine that we perform coin flips ten times (first parameter ten and second
    parameter probability 0.5); how many times does it show heads? As shown in the
    output above, we did the experiment ten times (the third parameter).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try the exponential distribution. With this code, we can generate data
    following the exponential distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Exponential distribution explains the time between events. For example, the
    code above can be said to be waiting for the bus to enter the station, which takes
    a random amount of time but, on average, takes 1 minute.
  prefs: []
  type: TYPE_NORMAL
- en: For an advanced generation, you can always combine the distribution results
    to create sample data following a custom distribution. For example, 70% of the
    generated random data below follows a normal distribution, while the rest follows
    an exponential distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: These custom distributions are much more powerful, especially if we want to
    simulate our data to follow actual case data (which is usually more messy).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy is a powerful Python package for mathematical and statistical computation.
    It generates random data that can be used for many events, such as data simulations,
    synthetic data for machine learning, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have discussed how we can generate random data with NumPy,
    including methods that could improve our data generation experience.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**[Cornellius Yudha
    Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**** is a data science
    assistant manager and data writer. While working full-time at Allianz Indonesia,
    he loves to share Python and data tips via social media and writing media. Cornellius
    writes on a variety of AI and machine learning topics.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Fake It Till You Make It: Generating Realistic Synthetic Customer Datasets](https://www.kdnuggets.com/2022/01/fake-realistic-synthetic-customer-datasets-projects.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are Moment-Generating Functions?](https://www.kdnuggets.com/2022/12/momentgenerating-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use GPT for Generating Creative Content with Hugging Face…](https://www.kdnuggets.com/how-to-use-gpt-for-generating-creative-content-with-hugging-face-transformers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Random Forest vs Decision Tree: Key Differences](https://www.kdnuggets.com/2022/02/random-forest-decision-tree-key-differences.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Does the Random Forest Algorithm Need Normalization?](https://www.kdnuggets.com/2022/07/random-forest-algorithm-need-normalization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decision Trees vs Random Forests, Explained](https://www.kdnuggets.com/2022/08/decision-trees-random-forests-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
