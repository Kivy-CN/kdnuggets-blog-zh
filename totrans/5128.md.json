["```py\nSHOW DATABASES;\n```", "```py\nCREATE DATABASE sql_tutorial;\nUSE sql_tutorial;\nCREATE TABLE customers (\n  id INT PRIMARY KEY AUTO_INCREMENT, \n  name VARCHAR(50),\n  email VARCHAR(50)\n);\n```", "```py\nCREATE TABLE employees (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    first_name VARCHAR(50) NOT NULL,\n    last_name VARCHAR(50) NOT NULL,\n    birth_date DATE,\n    email VARCHAR(50) UNIQUE,\n    salary FLOAT CHECK (salary > 0)\n  );\n```", "```py\n-- Employees Table\nCREATE TABLE Employees (\n  id INT PRIMARY KEY,\n  name VARCHAR(50),\n  department_id INT\n);\n\nINSERT INTO Employees (id, name, department_id) VALUES\n(1, 'Winifred', 1),\n(2, 'Francisco', 2),\n(3, 'Englebert', NULL);\n\n-- Departments Table\nCREATE TABLE Departments (\n  id INT PRIMARY KEY,\n  name VARCHAR(50)\n);\n\nINSERT INTO Departments (id, name) VALUES\n(1, 'R&D'),\n(2, 'Engineering'),\n(3, 'Sales'); \n```", "```py\n-- INNER JOIN\n-- Returns records that have matching values in both tables\n\nSELECT E.name, D.name \nFROM Employees E\nINNER JOIN Departments D ON E.department_id = D.id;\n\n-- LEFT JOIN (or LEFT OUTER JOIN)\n-- Returns all records from the left table,\n-- and the matched records from the right table\n\nSELECT E.name, D.name \nFROM Employees E\nLEFT JOIN Departments D ON E.department_id = D.id;\n\n-- RIGHT JOIN (or RIGHT OUTER JOIN)\n-- Returns all records from the right table\n-- and the matched records from the left table\n\nSELECT E.name, D.name \nFROM Employees E\nRIGHT JOIN Departments D ON E.department_id = D.id; \n```", "```py\nSELECT *\n  FROM customers\n  WHERE id IN (\n    SELECT customer_id\n    FROM orders\n    WHERE orderdate > '2023-01-01'\n  );\n```", "```py\nBEGIN;\n  UPDATE accounts SET balance = balance - 500 WHERE id = 1;\n  UPDATE accounts SET balance = balance + 500 WHERE id = 2;\n  COMMIT;\n```", "```py\nSELECT customers.name, COUNT(orders.id) AS total_orders\n  FROM customers\n  JOIN orders ON customers.id = orders.customer_id\n  GROUP BY customers.name\n  HAVING orders > 2;\n```", "```py\nSELECT id, name \nFROM customers \nWHERE EXISTS (\n    SELECT 1 \n    FROM orders \n    WHERE customer_id = customers.id\n);\n```", "```py\n-- Using a parameterized query to both optimize\n-- performance and prevent SQL injection\n\nPREPARE secureQuery FROM 'SELECT * FROM users WHERE age > ? AND age < ?';\nSET @min_age = 18, @max_age = 35;\nEXECUTE secureQuery USING @min_age, @max_age; \n```"]