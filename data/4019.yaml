- en: Build a Command-Line App with Python in 7 Easy Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 Python 轻松构建命令行应用程序的 7 个步骤
- en: 原文：[https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/adfbc1490240615cbb4432af75a24c12.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![用 Python 轻松构建命令行应用程序的 7 个步骤](../Images/adfbc1490240615cbb4432af75a24c12.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Building simple projects is a great way to learn Python and any programming
    language in general. You can learn the syntax to write for loops, use built-in
    functions, read files, and much more. But it’s only when you start building something
    that you actually “learn”.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 构建简单项目是学习 Python 和任何编程语言的绝佳方式。你可以学习写 for 循环的语法、使用内置函数、读取文件等等。但是，只有当你开始构建某些东西时，你才会真正“学习”。
- en: Following the “learning by building” approach, let’s code a simple TO-DO list
    app that we can run at the command line. Along the way we’ll explore concepts
    like parsing command-line arguments and working with files and file paths. We’ll
    as well revisit basics like defining custom functions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 采用“通过构建学习”的方法，让我们编码一个可以在命令行中运行的简单待办事项应用程序。在此过程中，我们将探索诸如解析命令行参数、处理文件和文件路径等概念。我们还将重新审视定义自定义函数等基础知识。
- en: So let’s get started!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们开始吧！
- en: What You’ll Build
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你将构建的内容
- en: By coding along to this tutorial, you’ll be able to build a TO-DO list app you
    can run at the command line. Okay, so what would you like the app to do?
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 通过跟随本教程进行编码，你将能够构建一个可以在命令行中运行的待办事项应用程序。好吧，那么你希望这个应用程序具备什么功能呢？
- en: Like TO-DO lists on paper, you need to be able to add tasks, look up all tasks,
    and remove tasks (yeah, strikethrough or mark them done on paper) after you’ve
    completed them, yes? So we’ll build an app that lets us do the following.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 像纸上的待办事项列表一样，你需要能够添加任务、查看所有任务，并在完成后删除任务（是的，在纸上划掉或标记完成）。所以我们将构建一个可以实现以下功能的应用程序。
- en: 'Add tasks to the list:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将任务添加到列表中：
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/30e5521fc97f097d0038bc3e4fe3c4f3.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![用 Python 轻松构建命令行应用程序的 7 个步骤](../Images/30e5521fc97f097d0038bc3e4fe3c4f3.png)'
- en: Image by Author
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Get a list of all tasks on the list:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 获取列表中所有任务的清单：
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/122c08c7195318e0e83e01aa44bd4882.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![用 Python 轻松构建命令行应用程序的 7 个步骤](../Images/122c08c7195318e0e83e01aa44bd4882.png)'
- en: Image by Author
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'And also remove a task (using its index) after you’ve finished it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 以及在完成后使用索引删除任务：
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/85939a9a2447db626be2653cf89a2e53.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![用 Python 轻松构建命令行应用程序的 7 个步骤](../Images/85939a9a2447db626be2653cf89a2e53.png)'
- en: Image by Author
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Now let’s start coding!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始编码吧！
- en: 'Step 1: Get Started'
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 步：开始
- en: First, create a directory for your project. And inside the project directory,
    create a Python script file. This will be the main file for our to-do list app.
    Let's call it `todo.py`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为你的项目创建一个目录。在项目目录中，创建一个 Python 脚本文件。这将是我们的待办事项列表应用程序的主要文件。我们称之为 `todo.py`。
- en: You don't need any third-party libraries for this project. So only make sure
    you’re using a recent version of Python. This tutorial uses Python 3.11.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目不需要任何第三方库。因此，只需确保你使用的是最新版本的 Python。本教程使用 Python 3.11。
- en: 'Step 2: Import Necessary Modules'
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 步：导入必要的模块
- en: 'In the `todo.py` file, start by importing the required modules. For our simple
    to-do list app, we''ll need the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `todo.py` 文件中，首先导入所需的模块。对于我们的简单待办事项列表应用程序，我们需要以下模块：
- en: '[argparse](https://docs.python.org/3/library/argparse.html) for command-line
    argument parsing'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[argparse](https://docs.python.org/3/library/argparse.html) 用于命令行参数解析'
- en: '[os](https://docs.python.org/3/library/os.html) for file operations'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[os](https://docs.python.org/3/library/os.html) 用于文件操作'
- en: 'So let’s import them both:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们导入这两个模块：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Step 3: Set Up the Argument Parser'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 步：设置参数解析器
- en: 'Recall that we’ll use command-line flags to add, list, and remove tasks. We
    can use both short and long options for each argument. For our app, let’s use
    the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们将使用命令行标志来添加、列出和删除任务。对于每个参数，我们可以使用短选项和长选项。对于我们的应用程序，使用如下选项：
- en: '`-a` or `--add` to add tasks'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-a` 或 `--add` 用于添加任务'
- en: '`-l` or `--list` to list all tasks'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-l` 或 `--list` 用于列出所有任务'
- en: '`-r` or `--remove` to remove tasks using index'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-r` 或 `--remove` 用于通过索引删除任务'
- en: 'Here’s where we’ll use the argparse module to parse the arguments provided
    at the command line. We define the `create_parser()` function that does the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们将使用 argparse 模块来解析在命令行提供的参数。我们定义了`create_parser()`函数，完成以下操作：
- en: Initializes an `ArgumentParser` object (let’s call it `parser`).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化一个`ArgumentParser`对象（我们称之为`parser`）。
- en: Adds arguments for adding, listing, and removing tasks by calling the `add_argument()`
    method on the parser object.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为添加、列出和删除任务添加参数，通过在解析器对象上调用`add_argument()`方法。
- en: 'When adding arguments we add both the short and long options as well as the
    corresponding help message. So here’s the `create_parser()` function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 添加参数时，我们添加了短选项和长选项以及相应的帮助信息。所以这是`create_parser()`函数：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Step 4: Add Task Management Functions'
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 步：添加任务管理函数
- en: 'We now need to define functions to perform the following task management operations:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要定义函数来执行以下任务管理操作：
- en: Adding a task
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加任务
- en: Listing all tasks
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出所有任务
- en: Removing a task by its index
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据索引移除任务
- en: 'The following function `add_task` interacts with a simple text file to manage
    items on the TO-DO list. It opens the file in the ‘append’ mode and adds the task
    to the end of the list:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数`add_task`与一个简单的文本文件交互，以管理 TO-DO 列表中的项目。它以‘追加’模式打开文件，并将任务添加到列表末尾：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Notice how we’ve used the `with` statement to manage the file. Doing so ensures
    that the file is closed after the operation—even if there’s an error—minimizing
    resource leaks.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何使用`with`语句来管理文件。这样可以确保文件在操作后关闭——即使发生错误——从而最小化资源泄漏。
- en: To learn more, read the section on context managers for efficient resource handling
    in [this tutorial on writing efficient Python code](/how-to-write-efficient-python-code-a-tutorial-for-beginners).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多信息，请阅读[本教程中的上下文管理器章节，以高效处理资源](/how-to-write-efficient-python-code-a-tutorial-for-beginners)。
- en: 'The `list_tasks` function lists all the tasks by checking if the file exists.
    The file is created only when you add the first task. We first check if the file
    exists and then read and print out the tasks. If there are currently no tasks,
    we get a helpful message. :'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_tasks`函数通过检查文件是否存在来列出所有任务。文件仅在你添加第一个任务时创建。我们首先检查文件是否存在，然后读取并打印任务。如果当前没有任务，我们会得到一条有用的信息：'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We also implement a `remove_task` function to remove tasks by index. Opening
    the file in the ‘write’ mode overwrites the existing file. So we remove the task
    corresponding to the index and write the updated TO-DO list to the file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还实现了一个`remove_task`函数来根据索引删除任务。以‘写入’模式打开文件会覆盖现有文件。所以我们删除对应索引的任务，并将更新后的 TO-DO
    列表写入文件：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Step 5: Parse Command-Line Arguments'
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 步：解析命令行参数
- en: We’ve set up the parser to parse command-line arguments. And we’ve also defined
    the functions to perform the tasks of adding, listing, and removing tasks. So
    what’s next?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经设置了解析器来解析命令行参数。同时，我们也定义了执行添加、列出和删除任务的函数。那么接下来是什么？
- en: You probably guessed it. We only need to call the correct function based on
    the command-line argument received. Let’s define a `main()` function to parse
    the command-line arguments using the `ArgumentParser` object we’ve created in
    step 3.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经猜到了。我们只需根据接收到的命令行参数调用正确的函数。让我们定义一个`main()`函数，使用我们在第 3 步创建的`ArgumentParser`对象来解析命令行参数。
- en: 'Based on the provided arguments, call the appropriate task management functions.
    This can be done using a simple if-elif-else ladder like so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据提供的参数，调用相应的任务管理函数。这可以通过一个简单的 if-elif-else 梯形结构来完成，如下所示：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Step 6: Run the App'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 步：运行应用程序
- en: 'You can now run the TO-DO list app from the command line. Use the short option
    `h` or the long option `help` to get information on the usage:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以从命令行运行 TO-DO 列表应用程序。使用短选项`h`或长选项`help`来获取使用信息：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Initially, there are no tasks in the list, so using `--list` to list all tasks
    print out “No tasks found.”:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，列表中没有任务，因此使用`--list`列出所有任务时会打印“未找到任务。”：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now we add an item to the TO-DO list like so:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以这样向 TO-DO 列表中添加一项：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you list the items now,  you should be able to see the task added:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在列出项目时，你应该能看到添加的任务：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Because we’ve added the first item the tasks.txt file has been created (Refer
    to the definition of the `list_tasks` function in step 4):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们添加了第一个项目，tasks.txt 文件已被创建（请参阅第 4 步中`list_tasks`函数的定义）：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s add another task to the list:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在列表中再添加一个任务：
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And another:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个：
- en: '[PRE12]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'And now let’s get the list of all tasks:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们获取所有任务的列表：
- en: '[PRE13]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now let''s remove a task by its index. Say we’re done with evening coffee (and
    hopefully for the day), so we remove it as shown:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按索引删除一个任务。假设我们完成了晚间咖啡（希望今天就此结束），所以按如下方式将其删除：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The modified TO-DO list is as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的待办事项列表如下：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Step 7: Test, Improve, and Repeat'
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 步：测试、改进和重复
- en: 'Okay, the simplest version of our app is ready. So how do we take this further?
    Here are a few things you can try:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们的应用程序的最简单版本已经准备好了。那么如何进一步发展呢？这里有几个你可以尝试的事项：
- en: What happens when you use an invalid command-line option (say `-w` or `--wrong`)?
    The default behavior (if you recall from the if-elif-else ladder) is to print
    out the help message but there’ll be an exception, too. Try implementing error
    handling using try-except blocks.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你使用无效的命令行选项（比如 `-w` 或 `--wrong`）时会发生什么？默认行为（如果你记得 if-elif-else 结构）是打印帮助信息，但也会有异常。尝试使用
    try-except 块实现错误处理。
- en: Test your app by defining test cases that include edge cases. To start, you
    can use the built-in unittest module.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过定义包括边界情况的测试用例来测试你的应用程序。你可以首先使用内置的 unittest 模块。
- en: Improve the existing version by adding an option to specify the priority for
    each task. Also try to sort and retrieve tasks by priority.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过添加一个选项来指定每个任务的优先级来改进现有版本。还可以尝试按优先级对任务进行排序和检索。
- en: ▶️ [The code for this tutorial is on GitHub](https://github.com/balapriyac/python-projects/tree/main/command-line-app).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ▶️ [本教程的代码在 GitHub 上](https://github.com/balapriyac/python-projects/tree/main/command-line-app)。
- en: Wrapping Up
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, we built a simple command-line TO-DO list app. In doing so,
    we learned how to use the built-in argparse module to parse command-line arguments.
    We also used the command-line inputs to perform corresponding operations on a
    simple text file under the hood.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们构建了一个简单的命令行待办事项列表应用程序。在此过程中，我们学会了如何使用内置的 argparse 模块解析命令行参数。我们还使用命令行输入在后台对简单的文本文件执行相应操作。
- en: So where do we go next? Well, Python libraries like [Typer](https://typer.tiangolo.com/)
    make building command-line apps a breeze. And we’ll build one using Typer in an
    upcoming Python tutorial. Until then, keep coding!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们接下来该做什么呢？好吧，像 [Typer](https://typer.tiangolo.com/) 这样的 Python 库使构建命令行应用程序变得轻而易举。我们将在即将到来的
    Python 教程中使用 Typer 构建一个。在此之前，继续编程吧！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发者和技术写作者。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专长包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过编写教程、操作指南、评论文章等与开发者社区分享她的知识。Bala
    还创建引人入胜的资源概述和编码教程。'
- en: '* * *'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 工作'
- en: '* * *'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 构建 AI 应用程序的 10 个简单步骤](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
- en: '[Build a Machine Learning Web App in 5 Minutes](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 5 分钟内构建机器学习网络应用](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻 2022年3月9日：在 5 分钟内构建机器学习网络应用](https://www.kdnuggets.com/2022/n10.html)'
- en: '[Containerize Python Apps with Docker in 5 Easy Steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Docker 容器化 Python 应用的 5 个简单步骤](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)'
- en: '[How Data Science Can Transform Mobile App Development?](https://www.kdnuggets.com/2023/03/data-science-transform-mobile-app-development.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学如何改变移动应用开发？](https://www.kdnuggets.com/2023/03/data-science-transform-mobile-app-development.html)'
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Heroku 部署机器学习网络应用](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
