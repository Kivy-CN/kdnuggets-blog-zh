- en: How a simple mix of object-oriented programming can sharpen your deep learning
    prototype
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/08/simple-mix-object-oriented-programming-sharpen-deep-learning-prototype.html](https://www.kdnuggets.com/2019/08/simple-mix-object-oriented-programming-sharpen-deep-learning-prototype.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/639dd33fb84f100e7f6a32b3beae256d.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This post is not meant for seasoned software engineers. **This is geared towards
    data scientists and machine learning (ML) practitioners**, who like me, do not
    come from a software engineering background.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: We use Python a lot for our work. Why? Because it’s awesome for ML and data
    science community.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: It is on the way to becoming the [fastest growing major language for modern
    data-driven analytics and artificial intelligence (AI) apps](https://stackoverflow.blog/2017/09/14/python-growing-quickly/?source=post_page---------------------------).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: However, it is also used for simple scripting purpose, to [automate stuff](https://automatetheboringstuff.com/?source=post_page---------------------------),
    to [test a hypothesis](https://machinelearningmastery.com/statistical-hypothesis-tests-in-python-cheat-sheet/?source=post_page---------------------------),
    create [interactive plots for brainstorming](https://mode.com/blog/python-interactive-plot-libraries?source=post_page---------------------------),
    to [control lab instruments](https://hackaday.com/2016/11/16/how-to-control-your-instruments-from-a-computer-its-easier-than-you-think/?source=post_page---------------------------),
    etc.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: But here is the thing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '**Python for software development and Python for scripting is not exactly the
    same beast — at least in the domain of data science.**'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Scripting is (mostly) the code you write for yourself. Software is the assemblage
    of code you (and other teammates) write for others.
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It will be wise to admit that, when (a majority of) data scientists, who do
    not come from a software engineering background, write Python programs for AI/Ml
    models and statistical analysis, they tend to write such code *for themselves*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: They just want to get to the heart of the pattern, hidden in the data. Fast.
    Without thinking deeply about normal mortals - *users*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: They write a block of code to produce a rich and beautiful plot. But they don’t
    create a ***function*** out of it, to use later.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: They import lots of ***methods*** and ***classes*** from standard libraries.
    But they don’t create a ***subclass*** of their own by ***inheritance*** and add
    methods to it for extending the functionality.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '***Functions, inheritance, methods, classes ***— these are at the heart of
    robust **object-oriented programming (OOP)**, but they are somewhat avoidable
    if all you want to do is to create a Jupyter notebook with your data analysis
    and plots.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: You can avoid the initial pain of using OOP principles, but that, almost always,
    renders your Notebook code non-reusable and non-extensible.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In short, that piece of code serves only you (until you forget what logic exactly
    you coded) and no one else.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: But [**readability (and thereby re-useability) is critically important**](https://devblogs.microsoft.com/oldnewthing/20070406-00/?p=27343&source=post_page---------------------------).
    That is the true test of the merit of what you produced. Not for yourself. But
    for others.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: In fact, data scientist [Will Koehrsen](https://towardsdatascience.com/u/e2f299e30cb9?source=post_page---------------------------) just
    wrote a wonderful piece on this idea.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**[Notes on Software Construction from Code Complete](https://towardsdatascience.com/notes-on-software-construction-from-code-complete-8d2a8a959c69?source=post_page---------------------------)**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: 'Lessons from “Code Complete: A Practical Handbook of Software Constructions”
    with applications for data science'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: To top it off, the **hundreds of popular MOOC or online courses on data science
    and AI/ML also do not emphasize this aspect of coding, because it feels like a
    burden for a young, enthusiastic learner**. He/She is here to learn cool algorithms
    and neural network optimizations, not OOP in Python. Consequently, this aspect
    remains neglected.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: So, what can you do?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: A simple mix of OOP can sharpen your deep learning (DL) code
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I am not a software engineer, never had been in my life. So, when I started
    exploring ML and data science, I wrote a great many amounts of sloppy, non-reusable
    code.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Gradually, I am trying to become better and using simple enhancements to my
    coding style to make them more useful (for anybody in the world).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: And, I have discovered that it does not take much to start mixing OOP principles
    in your data science code.
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Even if you never took a software engineering course in your life, some ideas
    may come naturally to you. **All you have to do is to put yourself in someone
    else’s shoe and think about how that person will take and use your code in a constructive
    manner**.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: If you have a code block that appears more than once in your analysis (in the
    exact same form or in slight variations), can you make a function out of it?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you make such a function, what parameters will be passing on? [Which one
    of them can be optional? What will be the default values](https://www.programiz.com/python-programming/function-argument?source=post_page---------------------------)?
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you encounter a situation where you don’t know how many parameters will need
    to be passed on, [are you using the *args, **kwargs that Python offers](https://www.geeksforgeeks.org/args-kwargs-python/?source=post_page---------------------------)?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did you write a [docstring for that function](https://www.geeksforgeeks.org/python-docstrings/?source=post_page---------------------------) to
    let others know what the function does and what parameters it expects, an example
    perhaps?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you have collected a bunch of such utility functions, are you still working
    on the same notebook, or [switching over to a new, clean notebook and just calling](http://web.cs.iastate.edu/~smkautz/cs127f16/notes/chapter07/?source=post_page---------------------------) “from *my_utility_script* import *func1,
    func2, func3*” (Did you create a *my_utility_script* as a simple Python file rather
    than a Jupyter notebook)?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Did you put the *my_utility_script* in a directory, [put an *__init__.py* file
    (even a blank one) in the same directory and make it a Python module](https://timothybramlett.com/How_to_create_a_Python_Package_with___init__py.html?source=post_page---------------------------)to
    be importable just like NumPy or Pandas?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are you thinking about not merely importing classes and methods from great packages
    like NumPy and TensorFlow but [adding your own methods to them and extending their
    functionality](https://stackoverflow.com/questions/25458433/how-to-extend-class-method?source=post_page---------------------------)?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What do I even mean by all of these? Let’s demonstrate using a simple case —
    a DL image classification problem with the [fashion MNIST](https://github.com/zalandoresearch/fashion-mnist?source=post_page---------------------------) dataset.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'Case illustration with a DL classification task:'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The approach
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [detailed notebook is given here in my Github repo](https://github.com/tirthajyoti/Deep-learning-with-Python/blob/master/Notebooks/OOP_principle_deep_learning.ipynb?source=post_page---------------------------).
    You are encouraged to go through it and fork it for your own use and extension.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Code is essential for building great software but not necessarily suitable for
    a Medium article, which you are reading to gain insights, and not practicing a
    debugging or refactoring exercise.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, I will just pick up chosen code snippets and try to point out how
    I tried to encode some of the principles, detailed earlier, in this Notebook.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: The core ML task and the higher-order business problem
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The core ML task is simple — building a deep learning classifier for the [**fashion
    MNIST**](https://github.com/zalandoresearch/fashion-mnist?source=post_page---------------------------) dataset,
    which is a fun spin on the original famous MNIST hand-written digit dataset. Fashion
    MNIST consists of 60,000 training images of 28 x 28 pixel size — of objects related
    to fashion e.g. hat, shoe, trouser, t-shirt, dresses, etc. It also consists of
    10,000 test images for model validation and testing.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/70adab23bb60dcdfb43ae1c220a47516.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: '**Fashion MNIST (**[**https://github.com/zalandoresearch/fashion-mnist**](https://github.com/zalandoresearch/fashion-mnist?source=post_page---------------------------)**)**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: But what if there is a higher-order optimization or visual analytics question
    around this core ML task —***how the model architecture complexity impacts the
    minimum epochs it takes to reach the desired accuracy***?
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: It should be clear to the reader, why we even bother about such a question. **Because
    this is related to the overall business optimization**. [Training a neural net
    is not a trivial computational matter](https://www.technologyreview.com/s/613630/training-a-single-ai-model-can-emit-as-much-carbon-as-five-cars-in-their-lifetimes/?source=post_page---------------------------).
    Therefore, it makes sense to investigate **what minimum training effort must be
    spent to achieve a target performance metric and how the choice of architecture
    impacts that**.
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this example, we will not even use a convolutional net, as a simple densely
    connected neural net can accomplish reasonably high accuracy, and, in fact, a
    somewhat sub-optimal performance is required to illustrate the main point of the
    higher-order optimization question we posed above.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Our solution
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, we have to solve two problems -
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: How to determine what the minimum number of epochs is for reaching the desired
    accuracy target?
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How the specific architecture of the model impacts this number or training behavior?
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To achieve the goals, we will use two simple OOP principles,
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Creating an [inherited class from a base class object](https://www.digitalocean.com/community/tutorials/understanding-class-inheritance-in-python-3?source=post_page---------------------------)
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create utility functions and call them from a compact code block which can be
    presented to an external user for higher order optimization and analytics
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code snippets to show the good practices
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here we show some code snippets to illustrate how simple OOP principles have
    been utilized to achieve our solution. The snippets are marked with comments for
    easy understanding.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '*First, we inherit a Keras class and write our own subclass adding a method
    for checking training accuracy and taking an action based on that value.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd4010a9987717834876f7f1c5552bfd.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: This [simple callback](http://keras.io/callbacks/?source=post_page---------------------------) results
    in **dynamic control of the epochs** — the training stops automatically when the
    accuracy reaches the desired threshold.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/257b65d8deecbf013ad98cd406f9182a.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: We put the Keras model construction codes in a utility function so that **a
    model of an arbitrary number of layers and architecture (as long as they are densely
    connected) can be generated** using simple user input in the form of some function
    arguments.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/89ad51c5f979024fb921cffb7c4b97f8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: We can even put the compilation and training code into a utility function to **use
    those hyperparameters in a higher-order optimization loop**conveniently.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30056cdf2206d15d4c48d431e76dbf4c.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Next, it’s time for visualization. Again here, we go by the practice of functionalization.
    Generic plot functions take raw data as input. However, if we have a specific
    purpose of plotting the evolution of training set accuracy and showing how it
    compares to the target, then our **plot function should just take the deep learning
    model as the input** and generate the desired plot.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b64701031704a27e0a3bd626167ddf5.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: A typical result looks like following,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bdfd3c2e031522e8a65b82f7a7d4e94.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: Final analytics code — super compact and simple
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: And, now we can take advantage of all the functions and classes, we defined
    earlier, and bring them all together to accomplish the higher-order task.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Consequently, our final code will be super compact but it will generate the
    same interesting plots of loss and accuracy over epochs, that we show above, for
    a variety of accuracy threshold values and neural network architectures.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: This will give a user the ability to to use a minimal amount of code to produce
    visual analytics about the choice of performance metric (accuracy in this case),
    and neural network architecture. **This is the first step towards building an
    optimized machine learning system.**
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: We generate a few cases for investigation,
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d80a17328c8bc26cc0bc355ca2dce3bb.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Our final analytics/optimization code is succinct and easy to follow for a high-level
    user, **who does not need to know the complexity of Keras model building or callbacks
    classes**.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: This is the core principle behind OOP — the abstraction of the layers of complexity,
    which we are able to accomplish for our deep learning task.
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note, how we pass on the `print_msg=False` to the class instance. While we needed
    basic printing of status for initial check/debug, we should execute the analysis
    silently for the optimization task. If we did not have this argument in our class
    definition, then we would not have a way to stop printing debugging messages.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: We show some of the representative results which are automatically generated
    from executing the code block above. It clearly shows, how with a minimal amount
    of high-level code, we are able to generate visual analytics to judge the relative
    performance of various neural architectures for various levels of performance
    metrics. This gives a user, without tweaking the lower-level functions, easily
    make a judgment on the choice of a model as per his/her performance demand.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3231e01d1652f36248138eddf1eb779.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: Also, note the custom titles for each plot. These titles clearly enunciate the
    target performance and the complexity of the neural net, thereby making the analytics
    easy.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: It was a small addition to the plotting utility function but this shows the
    need for careful planning while creating such functions. If we had not planned
    for such an argument to the function, it would not have been possible to generate
    a custom title for each plot. **This careful planning of API (application program
    interface) is part and parcel of good OOP**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Finally, turn the scripts into a simple Python module
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, you may be working with a Jupyter notebook, but you may want to turn
    this exercise into a neat Python module, which you can import from any time you
    want.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Just like you write “*from matplotlib import pyplot*”, you can import these
    utility functions (Keras model build, train, and plotting) anywhere.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/30ffeea0a36dbac4577c113acf61caec.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
- en: Summary and conclusions
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We showed some simple good practices, borrowed from OOP, to apply to a DL analysis
    task. Almost all of them may seem trivial to seasoned software developers but **this
    post is for budding data scientists who may not have that background but should
    understand the importance of imbuing these good practices in their machine learning
    workflow**.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '[The notebook is here](https://github.com/tirthajyoti/Deep-learning-with-Python/blob/master/Notebooks/OOP_principle_deep_learning.ipynb?source=post_page---------------------------).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: At the risk of repeating myself one too many times, let me summarize the good
    practices, again here,
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Whenever get a chance, **turn repetitive code blocks into utility functions**
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Think very carefully about the API of the function** i.e. what minimal set
    of arguments is required and how they will serve a purpose for a higher level
    programming task'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don’t forget to **write a docstring** for a function, even if it is a one-liner
    description
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you start accumulating many utility functions related to the same object,
    consider **turning that object to a class** and putting the utility functions
    as methods
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extend class functionality** whenever you get a chance for accomplishing
    complex analysis using inheritance'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Don’t stop at Jupyter notebooks**. Turn them into **executable scripts**and
    put them in a **small module**. Build the **habit of modularizing your work** so
    that it can be easily reused and extended by anyone, anywhere.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who knows, you may be able to release a utility package on the Python package
    repository (PyPi server) when you accumulate enough of useful classes and sub-modules.
    You will have the bragging right of releasing an original open-source package
    then :-)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com?source=post_page---------------------------).
    Also, you can check the author’s [**GitHub**](https://github.com/tirthajyoti?tab=repositories&source=post_page---------------------------)
    **repositories **for other fun code snippets in Python, R, or MATLAB and machine
    learning resources. If you are, like me, passionate about machine learning/data
    science, please feel free to [add me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/?source=post_page---------------------------) or [follow
    me on Twitter.](https://twitter.com/tirthajyotiS?source=post_page---------------------------)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    is the Senior Principal Engineer at ON Semiconductor working on Deep Learning/Machine
    Learning based design automation projects.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd).
    Reposted with permission.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[Optimization with Python: How to make the most amount of money with the least
    amount of risk?](/2019/06/optimization-python-money-risk.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How do you check the quality of your regression model in Python?](/2019/07/check-quality-regression-model-python.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mathematical programming —  Key Habit to Build Up for Advancing Data Science](/2019/05/mathematical-programming-key-habit-advancing-data-science.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part 5: Biological Neurons…](https://www.kdnuggets.com/2022/07/machine-learning-like-brain-part-5-biological-neurons-cant-summation-inputs.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python: The programming language of machine learning](https://www.kdnuggets.com/2022/06/mlm-python-programming-language-machine-learning.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personalized AI Made Simple: Your No-Code Guide to Adapting GPTs](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Llama, Llama, Llama: 3 Simple Steps to Local RAG with Your Content](https://www.kdnuggets.com/3-simple-steps-to-local-rag-with-your-content)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Generative AI Can Help You Improve Your Data Visualization Charts](https://www.kdnuggets.com/how-generative-ai-can-help-you-improve-your-data-visualization-charts)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[生成式 AI 如何帮助你改善数据可视化图表](https://www.kdnuggets.com/how-generative-ai-can-help-you-improve-your-data-visualization-charts)'
