["```py\nimport openai\n\nopenai.api_key = \"\"\n\nres = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    max_tokens=100,\n    temperature=0.7,\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"\"\"\n\n          When I ask to explain something, bring it in a way that teacher \n          would explain it to students in every paragraph.\n\n          \"\"\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"\"\"\n\n         What is golden globe award and what is the criteria for this award? Summarize them in 2 paragraphs.\n\n          \"\"\",\n        },\n    ],\n)\n```", "```py\nres = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    max_tokens=100,\n    temperature=0.7,\n    messages=[\n        {\n            \"role\": \"system\",\n            \"content\": \"Answer in a consistent style.\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"Teach me about Love\",\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Love can be sweet, can be sour, can be grand, can be low, and can be anything you want to be\",\n        },\n        {\n            \"role\": \"user\",\n            \"content\": \"Teach me about Fear\",\n        },\n    ],\n)\n```", "```py\nres = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        max_tokens=100,\n        temperature=0.7,\n        messages= [\n            {\n          \"role\": \"system\",\n          \"content\": \"\"\"\n          Use the following step-by-step instructions to respond to user inputs.\n\n        step 1 - Explain the question input by the user in 2 paragraphs or less with the prefix \"Explanation: \".\n\n        Step 2 - Translate the Step 1 into Indonesian, with a prefix that says \"Translation: \".\n\n          \"\"\",\n         },\n         {\n          \"role\": \"user\",\n          \"content\":\"What is heaven?\",\n         },\n        ])\n```", "```py\nres = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        max_tokens=100,\n        temperature=0.7,\n        messages= [\n            {\n          \"role\": \"system\",\n          \"content\": \"\"\"\n\n        Work on your solution to the problem, then compare your solution to the user and evaluate\n        if the solution is correct or not. Only decide if the solution is correct once you have done the problem yourself.\n\n          \"\"\",\n         }, \n         {\n          \"role\": \"user\",\n          \"content\":\"1 + 1 = 3\",\n         },\n        ])\n```", "```py\nres = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        max_tokens=100,\n        temperature=0.7,\n        messages= [\n            {\n          \"role\": \"system\",\n          \"content\": \"\"\"\n\n      Write and execute Python code by enclosing it in triple backticks,\n       e.g. ```", "```py. Use this to perform calculations.\n\n          \"\"\",\n         }, \n         {\n          \"role\": \"user\",\n          \"content\":\"\"\"\n\n          Find all real-valued roots of the following polynomial equation: 2*x**5 - 3*x**8- 2*x**3 - 9*x + 11.\n\n          \"\"\",\n         },\n        ])\n```"]