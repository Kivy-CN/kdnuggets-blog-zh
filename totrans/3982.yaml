- en: How to Use Conditional Formatting in Pandas to Enhance Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization](https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Conditional Formatting in Pandas](../Images/83a5bcdbfe20e5be1658c142e925ff1f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: While pandas is mainly used for data manipulation and analysis, it can also
    provide basic data visualization capabilities. However, plain dataframes can make
    the information look cluttered and overwhelming. So, what can be done to make
    it better? If you've worked with Excel before, you know that you can highlight
    important values with different colors, font styles, etc. The idea of using these
    styles and colors is to communicate the information in an effective way. You can
    do similar work with pandas dataframes too, using conditional formatting and the
    Styler object.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will see what conditional formatting is and how to use it
    to enhance your data readability.
  prefs: []
  type: TYPE_NORMAL
- en: Conditional Formatting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conditional formatting is a feature in pandas that allows you to format the
    cells based on some criteria. You can easily highlight the outliers, visualize
    trends, or emphasize important data points using it. The Styler object in pandas
    provides a convenient way to apply conditional formatting. Before covering the
    examples, let's take a quick look at how the Styler object works.
  prefs: []
  type: TYPE_NORMAL
- en: What is the Styler Object & How Does It Work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can control the visual representation of the dataframe by using the `property.
    This property returns a Styler object, which is responsible for styling the dataframe.
    The Styler object allows you to manipulate the CSS properties of the dataframe
    to create a visually appealing and informative display. The generic syntax is
    as follows:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0] df.style.<method>(<arguments>) [PRE1] import pandas as pd  import numpy
    as np    data = {''Date'': [''2024-03-05'', ''2024-03-06'', ''2024-03-07'', ''2024-03-08'',
    ''2024-03-09'', ''2024-03-10''],          ''Cost Price'': [100, 120, 110, 1500,
    1600, 1550],          ''Satisfaction Score'': [90, 80, 70, 95, 85, 75],          ''Sales
    Amount'': [1000, 800, 1200, 900, 1100, None]}    df = pd.DataFrame(data)  df [PRE2]
    # Highlighting Maximum and Minimum Values  df.style.highlight_max(color=''green'',
    axis=0 , subset=[''Cost Price'', ''Satisfaction Score'', ''Sales Amount'']).highlight_min(color=''red'',
    axis=0 , subset=[''Cost Price'', ''Satisfaction Score'', ''Sales Amount'']) [PRE3]
    # Applying Color Gradients  df.style.background_gradient(cmap=''viridis'', subset=[''Satisfaction
    Score'']) [PRE4] # Highlighting Null or Missing Values  df.style.highlight_null(''yellow'',
    subset=[''Sales Amount'']) [PRE5] import pandas as pd  import numpy as np    #
    House prices dataset  df = pd.DataFrame({     ''Neighborhood'': [''H1'', ''H2'',
    ''H3'', ''H4'', ''H5'', ''H6'', ''H7''],     ''Price'': [50, 300, 360, 390, 420,
    450, 1000],  })    # Calculate Q1 (25th percentile), Q3 (75th percentile) and
    Interquartile Range (IQR)  q1 = df[''Price''].quantile(0.25)  q3 = df[''Price''].quantile(0.75)  iqr
    = q3 - q1    # Bounds for outliers  lower_bound = q1 - 1.5 * iqr  upper_bound
    = q3 + 1.5 * iqr    # Custom function to highlight outliers  def highlight_outliers(val):     if
    val < lower_bound or val > upper_bound:        return ''background-color: yellow;
    font-weight: bold; color: black''     else:        return ''''    df.style.applymap(highlight_outliers,
    subset=[''Price''])  [PRE6] import pandas as pd    # Dataset of Company''s Sales  data
    = {''date'': [''2024-02-10'', ''2024-02-11'', ''2024-02-12'', ''2024-02-13'',
    ''2024-02-14''],          ''sales'': [100, 105, 110, 115, 125]}    df = pd.DataFrame(data)    #
    Daily percentage change  df[''pct_change''] = df[''sales''].pct_change() * 100    #
    Highlight the day if sales increased by more than 5%  def highlight_trend(row):      return
    [''background-color: green; border: 2px solid black; font-weight: bold'' if row[''pct_change'']
    > 5 else '''' for _ in row]    df.style.apply(highlight_trend, axis=1) [PRE7]
    import pandas as pd    # Dataset of people  data = {      ''age'': [30, 35, 40,
    45, 50],      ''income'': [60000, 66000, 70000, 75000, 100000],      ''spending'':
    [10000, 15000, 20000, 18000, 12000]  }    df = pd.DataFrame(data)    # Calculate
    the correlation matrix  corr_matrix = df.corr()    # Highlight highly correlated
    columns  def highlight_corr(val):      if val != 1.0 and abs(val) > 0.5:   # Exclude
    self-correlation          return ''background-color: blue; text-decoration: underline''      else:          return
    ''''    corr_matrix.style.applymap(highlight_corr) [PRE8]`'
  prefs: []
  type: TYPE_NORMAL
