- en: Easy MLOps with PyCaret + MLflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyCaret + MLflow 进行简单的 MLOps
- en: 原文：[https://www.kdnuggets.com/2021/05/easy-mlops-pycaret-mlflow.html](https://www.kdnuggets.com/2021/05/easy-mlops-pycaret-mlflow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/05/easy-mlops-pycaret-mlflow.html](https://www.kdnuggets.com/2021/05/easy-mlops-pycaret-mlflow.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Moez Ali](https://www.linkedin.com/in/profile-moez/)，PyCaret 创始人及作者**'
- en: PyCaret
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCaret
- en: PyCaret is an open-source, low-code machine learning library and end-to-end
    model management tool built-in Python for automating machine learning workflows.
    It is known for its ease of use, simplicity, and ability to quickly and efficiently
    build and deploy end-to-end ML prototypes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 是一个开源的低代码机器学习库和内置的端到端模型管理工具，旨在 Python 中自动化机器学习工作流。它以易用性、简单性以及快速高效地构建和部署端到端机器学习原型而著称。
- en: PyCaret is an alternate low-code library that can replace hundreds of code lines
    with few lines only. This makes the experiment cycle exponentially fast and efficient.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 是一个替代的低代码库，可以用少量代码替代成百上千行代码。这使得实验周期变得极快且高效。
- en: '![](../Images/48d26d1892bf6f19a4e20b29cf8128a7.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48d26d1892bf6f19a4e20b29cf8128a7.png)'
- en: PyCaret — An open-source, low-code machine learning library in Python
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret — 一个开源的低代码 Python 机器学习库
- en: To learn more about PyCaret, you can check out their [GitHub](https://www.github.com/pycaret/pycaret).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于 PyCaret 的信息，你可以查看他们的[GitHub](https://www.github.com/pycaret/pycaret)。
- en: MLflow
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MLflow
- en: 'MLflow is an open-source platform to manage the ML lifecycle, including experimentation,
    reproducibility, deployment, and a central model registry. MLflow currently offers
    four components:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 是一个开源平台，用于管理机器学习生命周期，包括实验、可重复性、部署以及中央模型注册。MLflow 目前提供四个组件：
- en: '![](../Images/5a119b2d388f3596808e1616d53c3332.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5a119b2d388f3596808e1616d53c3332.png)'
- en: MLflow is an open-source platform to manage ML lifecycle
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: MLflow 是一个开源平台，用于管理机器学习生命周期
- en: To learn more about MLflow, you can check out [GitHub](https://github.com/mlflow/mlflow).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于 MLflow 的信息，你可以查看[GitHub](https://github.com/mlflow/mlflow)。
- en: Installing PyCaret
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 PyCaret
- en: Installing PyCaret is very easy and takes only a few minutes. We strongly recommend
    using a virtual environment to avoid potential conflicts with other libraries.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 PyCaret 非常简单，只需几分钟即可完成。我们强烈建议使用虚拟环境，以避免与其他库潜在的冲突。
- en: PyCaret’s default installation is a slim version of pycaret that only installs
    hard dependencies [listed here](https://github.com/pycaret/pycaret/blob/master/requirements.txt).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 的默认安装是一个精简版本，只安装硬性依赖项，[列表见此](https://github.com/pycaret/pycaret/blob/master/requirements.txt)。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you install the full version of pycaret, all the optional dependencies
    as [listed here](https://github.com/pycaret/pycaret/blob/master/requirements-optional.txt) are
    also installed. MLflow is part of PyCaret’s dependency and hence does not need
    to be installed separately.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你安装 PyCaret 的完整版本时，所有可选的依赖项都将按照[此处列出](https://github.com/pycaret/pycaret/blob/master/requirements-optional.txt)也会被安装。MLflow
    是 PyCaret 的一个依赖项，因此不需要单独安装。
- en: ???? Let’s get started
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 让我们开始吧
- en: 'Before I talk about MLOps, let’s talk a little bit about the machine learning
    lifecycle at a high level:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 MLOps 之前，让我们先高层次地了解一下机器学习生命周期：
- en: '![](../Images/574b97366435d88f6dca131eb00130bc.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/574b97366435d88f6dca131eb00130bc.png)'
- en: Machine Learning Life Cycle — Image by Author (Read from left-to-right)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习生命周期 — 作者提供的图片（从左到右阅读）
- en: '**Business Problem — **This is the first step of the machine learning workflow.
    It may take from few days to a few weeks to complete, depending on the use case
    and complexity of the problem. It is at this stage, data scientists meet with
    subject matter experts (SME’s) to gain an understanding of the problem, interview
    key stakeholders, collect information, and set the overall expectations of the
    project.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**业务问题 —** 这是机器学习工作流的第一步。根据用例和问题的复杂性，这个阶段可能需要几天到几周的时间。在这一阶段，数据科学家会与主题专家（SME）会面，以了解问题、访谈关键利益相关者、收集信息，并设定项目的总体期望。'
- en: '**Data Sourcing & ETL — **Once the problem understanding is achieved, it then
    comes to using the information gained during interviews to source the data from
    the enterprise database.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据源获取与 ETL —** 一旦问题理解到位，就需要利用在访谈中获得的信息，从企业数据库中获取数据。'
- en: '**Exploratory Data Analysis (EDA) — **Modeling hasn’t started yet. EDA is where
    you analyze the raw data. Your goal is to explore the data and assess the quality
    of the data, missing values, feature distribution, correlation, etc.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**探索性数据分析（EDA）—** 模型尚未开始。这是你分析原始数据的阶段。你的目标是探索数据并评估数据的质量、缺失值、特征分布、相关性等。'
- en: '**Data Preparation — **Now it’s time to prepare the data model training. This
    includes things like dividing data into a train and test set, imputing missing
    values, one-hot-encoding, target encoding, feature engineering, feature selection,
    etc.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据准备 —** 现在是准备数据进行模型训练的时候了。这包括将数据划分为训练集和测试集、填补缺失值、独热编码、目标编码、特征工程、特征选择等。'
- en: '**Model Training & Selection — **This is the step everyone is excited about.
    This involves training a bunch of models, tuning hyperparameters, model ensembling,
    evaluating performance metrics, model analysis such as AUC, Confusion Matrix,
    Residuals, etc, and finally selecting one best model to be deployed in production
    for business use.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型训练与选择 —** 这是大家都非常期待的步骤。包括训练多个模型、调整超参数、模型集成、评估性能指标、模型分析如AUC、混淆矩阵、残差等，最后选择一个最佳模型进行生产部署以供业务使用。'
- en: '**Deployment & Monitoring — **This is the final step which is mostly about
    MLOps. This includes things like packaging your final model, creating a docker
    image, writing the scoring script, and then making it all work together, and finally
    publish it as an API that can be used to obtain predictions on the new data coming
    through the pipeline.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署与监控 —** 这是最后一步，主要涉及MLOps。这包括打包最终模型、创建docker镜像、编写评分脚本、使所有内容协同工作，最终将其发布为API，以便对新数据进行预测。'
- en: The old way of doing all this is pretty cumbersome, long, and requires a lot
    of technical know-how and I possibly cannot cover it in one tutorial. However,
    in this tutorial, I will use PyCaret to demonstrate how easy it has become for
    a data scientist to do all this very efficiently. Before we get to the practical
    part, let’s talk a little bit more about MLOps.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以前做这些事情的方式非常繁琐、耗时，并且需要大量的技术知识，可能一篇教程无法涵盖。不过，在这篇教程中，我将使用PyCaret演示数据科学家如何高效地完成所有这些工作。在进入实际部分之前，让我们多谈一点关于MLOps的内容。
- en: ???? **What is MLOps?**
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? **什么是MLOps？**
- en: MLOps is an engineering discipline that aims to combine machine learning development
    i.e. experimentation (model training, hyperparameter tuning, model ensembling,
    model selection, etc.), normally performed by Data Scientist with ML engineering
    and operations in order to standardize and streamline the continuous delivery
    of machine learning models in production.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MLOps是一门工程学科，旨在将机器学习开发（如实验（模型训练、超参数调整、模型集成、模型选择等），通常由数据科学家执行）与机器学习工程和操作相结合，以标准化和简化机器学习模型在生产中的持续交付。
- en: 'If you are an absolute beginner, chances are you have no idea what I am talking
    about. No worries. Let me give you a simple, non-technical definition:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是绝对初学者，可能完全不知道我在讲什么。没关系。让我给你一个简单的非技术性定义：
- en: '*MLOps are bunch of technical engineering and operational tasks that allows
    your machine learning model to be used by other users and applications accross
    the organization. Basically, it’s a way through which your work i.e. *machine
    learning models* are published online, so other people can use them and satisfy
    some business objectives.*'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*MLOps是一系列技术工程和操作任务，允许你的机器学习模型被组织中的其他用户和应用程序使用。基本上，它是通过这种方式来发布你的工作，即*机器学习模型*，以便其他人可以使用它们并满足某些业务目标。*'
- en: This is a very toned-down definition of MLOps. In reality, it involved a little
    more work and benefits than this but it’s a good start for you if you are new
    to all this.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对MLOps的一个非常简化的定义。实际上，它涉及的工作和好处要多得多，但如果你对这些是新手，这个定义是一个很好的起点。
- en: Now let’s follow the same workflow as shown in the diagram above to do a practical
    demo, make sure you have pycaret installed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们按照上图所示的相同步骤进行实际演示，确保你已经安装了pycaret。
- en: ???? Business Problem
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 业务问题
- en: For this tutorial, I will be using a very popular case study by Darden School
    of Business, published in [Harvard Business](https://hbsp.harvard.edu/product/UV0869-PDF-ENG).
    The case is regarding the story of two people who are going to be married in the
    future. The guy named *Greg *wanted to buy a ring to propose to a girl named *Sarah*.
    The problem is to find the ring Sarah will like, but after a suggestion from his
    close friend, Greg decides to buy a diamond stone instead so that Sarah can decide
    her choice. Greg then collects data of 6000 diamonds with their price and attributes
    like cut, color, shape, etc.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我将使用由达顿商学院发布的一个非常流行的案例研究，该案例研究发表在[哈佛商业评论](https://hbsp.harvard.edu/product/UV0869-PDF-ENG)上。这个案例讲述了两个人将来要结婚的故事。名为*Greg*的男士想买一枚戒指向名为*Sarah*的女孩求婚。问题在于找出Sarah喜欢的戒指，但在他的好友建议下，Greg决定购买一颗钻石，以便Sarah能决定她的选择。Greg随后收集了6000颗钻石的数据，包括它们的价格和切工、颜色、形状等属性。
- en: ???? Data
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 数据
- en: In this tutorial, I will be using a dataset from a very popular case study by
    the Darden School of Business, published in [Harvard Business](https://hbsp.harvard.edu/product/UV0869-PDF-ENG).
    The goal of this tutorial is to predict the diamond price based on its attributes
    like carat weight, cut, color, etc. You can download the dataset from [PyCaret’s
    repository](https://github.com/pycaret/pycaret/tree/master/datasets).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我将使用达顿商学院发布的一个非常流行的案例研究的数据集，该数据集发表在[哈佛商业评论](https://hbsp.harvard.edu/product/UV0869-PDF-ENG)上。本教程的目标是根据钻石的属性如克拉重量、切工、颜色等预测钻石价格。你可以从[PyCaret的仓库](https://github.com/pycaret/pycaret/tree/master/datasets)下载数据集。
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/1bbc59a2d6702dd81534c9c427e52c4d.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1bbc59a2d6702dd81534c9c427e52c4d.png)'
- en: Sample rows from data
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 数据样本行
- en: ???? Exploratory Data Analysis
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 探索性数据分析
- en: Let’s do some quick visualization to assess the relationship of independent
    features (weight, cut, color, clarity, etc.) with the target variable i.e. `Price`
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速进行一些可视化，以评估独立特征（重量、切工、颜色、净度等）与目标变量即`Price`之间的关系。
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/0486a3f02669c1a23e0d30691c1233da.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0486a3f02669c1a23e0d30691c1233da.png)'
- en: Sarah gets a diamond case study
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Sarah获得了一个钻石案例研究
- en: Let’s check the distribution of the target variable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查目标变量的分布情况。
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/a3d15e5315a513dc501fd5ab2f0aa2f7.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a3d15e5315a513dc501fd5ab2f0aa2f7.png)'
- en: Notice that distribution of `Price` is right-skewed, we can quickly check to
    see if log transformation can make `Price` approximately normal to give fighting
    chance to algorithms that assume normality.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到`Price`的分布是右偏的，我们可以快速检查一下对数变换是否能使`Price`接近正态分布，从而为假设正态性的算法提供机会。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/299bdf04ca0020b55f4120689c1d1b9d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/299bdf04ca0020b55f4120689c1d1b9d.png)'
- en: This confirms our hypothesis. The transformation will help us to get away with
    skewness and make the target variable approximately normal. Based on this, we
    will transform the `Price` variable before training our models.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这证实了我们的假设。变换将帮助我们消除偏斜，使目标变量接近正态分布。因此，我们将在训练模型之前对`Price`变量进行变换。
- en: ???? Data Preparation
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 数据准备
- en: Common to all modules in PyCaret, the `setup` is the first and the only mandatory
    step in any machine learning experiment using PyCaret. This function takes care
    of all the data preparation required prior to training models. Besides performing
    some basic default processing tasks, PyCaret also offers a wide array of pre-processing
    features. To learn more about all the preprocessing functionalities in PyCaret,
    you can see this [link](https://pycaret.org/preprocessing/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret中所有模块的共同点是，`setup`是使用PyCaret进行任何机器学习实验时第一个也是唯一的必需步骤。这个函数负责训练模型之前所需的所有数据准备工作。除了执行一些基本的默认处理任务外，PyCaret还提供了广泛的数据预处理功能。要了解更多关于PyCaret中所有预处理功能的信息，你可以查看这个[链接](https://pycaret.org/preprocessing/)。
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/c4b6ef208abe74f5d368e297b87a1caa.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c4b6ef208abe74f5d368e297b87a1caa.png)'
- en: setup function in pycaret.regression module
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: pycaret.regression模块中的setup函数
- en: When you initialize the `setup` function in PyCaret, it profiles the dataset
    and infers the data types for all input features. If all data types are correctly
    inferred, you can press enter to continue.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当你初始化PyCaret中的`setup`函数时，它会对数据集进行分析，并推断所有输入特征的数据类型。如果所有数据类型都正确推断出来，你可以按回车键继续。
- en: 'Notice that:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: I have passed `log_experiment = True` and `experiment_name = 'diamond'` , this
    will tell PyCaret to automatically log all the metrics, hyperparameters, and model
    artifacts behind the scene as you progress through the modeling phase. This is
    possible due to integration with [MLflow](https://www.mlflow.org/).
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我传递了`log_experiment = True`和`experiment_name = 'diamond'`，这将告诉PyCaret自动记录所有的指标、超参数和模型工件，因为你在建模阶段进展。这是由于与[MLflow](https://www.mlflow.org/)的集成实现的。
- en: Also, I have used `transform_target = True` inside the `setup`. PyCaret will
    transform the `Price` variable behind the scene using box-cox transformation.
    It affects the distribution of data in a similar way as log transformation *(technically
    different)*. If you would like to learn more about box-cox transformations, you
    can refer to this [link](https://onlinestatbook.com/2/transformations/box-cox.html).
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我在`setup`中使用了`transform_target = True`。PyCaret将在后台使用box-cox变换转换`Price`变量。它以类似于对数变换的方式影响数据的分布（*技术上不同*）。如果你想了解更多关于box-cox变换的信息，可以参考这个[链接](https://onlinestatbook.com/2/transformations/box-cox.html)。
- en: '![](../Images/f6aa688f11e00b54c059f25ab6843484.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f6aa688f11e00b54c059f25ab6843484.png)'
- en: Output from setup — truncated for display
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 输出来自 setup — 为显示而截断
- en: ???? Model Training & Selection
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 模型训练与选择
- en: Now that data is ready for modeling, let’s start the training process by using `compare_models` function.
    It will train all the algorithms available in the model library and evaluates
    multiple performance metrics using k-fold cross-validation.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在数据已经准备好进行建模，让我们通过使用`compare_models`函数来开始训练过程。它将训练模型库中的所有算法，并使用k折交叉验证评估多个性能指标。
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/41baf2d435d40f90de71f5b91cd2bfde.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/41baf2d435d40f90de71f5b91cd2bfde.png)'
- en: Output from compare_models
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出来自 compare_models
- en: '[PRE7]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/c49ca96d21bd91b035cedc2744d024ba.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c49ca96d21bd91b035cedc2744d024ba.png)'
- en: Residuals and QQ-Plot of the best model
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳模型的残差和QQ图
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/8c94f981a80372937c05792703bb4e8c.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c94f981a80372937c05792703bb4e8c.png)'
- en: Finalize and Save Pipeline
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 完成并保存管道
- en: Let’s now finalize the best model i.e. train the best model on the entire dataset
    including the test set and then save the pipeline as a pickle file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们最终确定最佳模型，即在包括测试集的整个数据集上训练最佳模型，然后将管道保存为pickle文件。
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`save_model` function will save the entire pipeline (including the model) as
    a pickle file on your local disk. By default, it will save the file in the same
    folder as your Notebook or script is in but you can pass the complete path as
    well if you would like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_model`函数将整个管道（包括模型）保存为pickle文件在你的本地磁盘上。默认情况下，它将文件保存在与你的笔记本或脚本所在的同一文件夹中，但如果你愿意，你也可以传递完整路径：'
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: ???? Deployment
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 部署
- en: 'Remember we passed `log_experiment = True` in the setup function along with `experiment_name
    = ''diamond''` . Let’s see the magic PyCaret has done with the help of MLflow
    behind the scene. To see the magic let’s initiate the MLflow server:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们在setup函数中传递了`log_experiment = True`以及`experiment_name = 'diamond'`。让我们看看PyCaret在MLflow的帮助下做了什么。要查看效果，让我们启动MLflow服务器：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now open your browser and type “localhost:5000”. It will open a UI like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开浏览器，输入“localhost:5000”。它将打开一个类似这样的用户界面：
- en: '![](../Images/1e2e7957f01c5bbd2c9740e76846633f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e2e7957f01c5bbd2c9740e76846633f.png)'
- en: https://localhost:5000
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: https://localhost:5000
- en: 'Each entry in the table above represents a training run resulting in a trained
    Pipeline and a bunch of metadata such as DateTime of a run, performance metrics,
    model hyperparameters, tags, etc. Let’s click on one of the models:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 表格中的每一项代表一次训练运行，结果是一个训练好的管道及一系列元数据，例如运行的日期时间、性能指标、模型超参数、标签等。点击其中一个模型：
- en: '![](../Images/e040d08c4a600f7e57204c385dfbd2f1.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e040d08c4a600f7e57204c385dfbd2f1.png)'
- en: Part I — CatBoost Regressor
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分 — CatBoost 回归器
- en: '![](../Images/e8add025c91932275b9b8cc072c9c54c.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8add025c91932275b9b8cc072c9c54c.png)'
- en: Part II — CatBoost Regressor (continued)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分 — CatBoost 回归器（续）
- en: '![](../Images/4187074323f4bacb809ba5e2800c3cf9.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4187074323f4bacb809ba5e2800c3cf9.png)'
- en: Part II — CatBoost Regressor (continued)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 第二部分 — CatBoost 回归器（续）
- en: Notice that you have an address path for the `logged_model`. This is the trained
    Pipeline with Catboost Regressor. You can read this Pipeline using the `load_model` function.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意你有一个`logged_model`的地址路径。这是使用Catboost回归器训练的管道。你可以使用`load_model`函数读取这个管道。
- en: '[PRE12]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/6eab8c9fade1aba3516d78e43d2b540b.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6eab8c9fade1aba3516d78e43d2b540b.png)'
- en: Output from print(pipeline)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 输出来自 print(pipeline)
- en: Let’s now use this Pipeline to generate predictions on the new data
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用这个管道对新数据生成预测
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/d379a560bd8216bfdfa7c0ec0cc9a2be.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d379a560bd8216bfdfa7c0ec0cc9a2be.png)'
- en: Predictions generated from Pipeline
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从管道生成的预测
- en: Woohoo! We now have inference from our trained Pipeline. Congrats, if this is
    your first one. Notice that all the transformations such as target transformation,
    one-hot-encoding, missing value imputation, etc. happened behind the scene automatically.
    You get a data frame with prediction in actual scale, and this is what you care
    about.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 哇哦！我们现在已经有了来自我们训练管道的推理。如果这是你的第一个管道，恭喜你。注意所有的变换，如目标变换、独热编码、缺失值填充等，都是在幕后自动发生的。你会得到一个具有实际规模预测的数据框，这才是你关注的。
- en: Coming Soon!
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 即将推出！
- en: What I have shown today is one out of many ways you can serve trained Pipelines
    from PyCaret in production with the help of MLflow. In the next tutorial, I plan
    to show how you can using MLflow native serving functionalities to register your
    models, version them and serve as an API.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我今天展示的只是通过 MLflow 从 PyCaret 提供训练管道的一种方式。在下一个教程中，我计划展示如何使用 MLflow 的原生服务功能来注册你的模型、对其进行版本控制，并作为
    API 提供服务。
- en: There is no limit to what you can achieve using this lightweight workflow automation
    library in Python. If you find this useful, please do not forget to give us ⭐️
    on our GitHub repository.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个轻量级的 Python 工作流自动化库，你可以实现无限的目标。如果你觉得这个有用，请不要忘记在我们的 GitHub 仓库上给我们 ⭐️。
- en: To hear more about PyCaret follow us on [LinkedIn](https://www.linkedin.com/company/pycaret/) and [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 PyCaret 的信息，请关注我们的 [LinkedIn](https://www.linkedin.com/company/pycaret/) 和 [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g)。
- en: Join us on our slack channel. Invite link [here](https://join.slack.com/t/pycaret/shared_invite/zt-p7aaexnl-EqdTfZ9U~mF0CwNcltffHg).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的 Slack 频道。邀请链接 [在这里](https://join.slack.com/t/pycaret/shared_invite/zt-p7aaexnl-EqdTfZ9U~mF0CwNcltffHg)。
- en: 'You may also be interested in:'
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你也可能感兴趣：
- en: '[Build your own AutoML in Power BI using PyCaret 2.0](https://towardsdatascience.com/build-your-own-automl-in-power-bi-using-pycaret-8291b64181d)'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Power BI 中使用 PyCaret 2.0 构建你自己的 AutoML](https://towardsdatascience.com/build-your-own-automl-in-power-bi-using-pycaret-8291b64181d)'
- en: '[Deploy Machine Learning Pipeline on Azure using Docker](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-cloud-using-docker-container-bec64458dc01)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Docker 在 Azure 上部署机器学习管道](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-cloud-using-docker-container-bec64458dc01)'
- en: '[Deploy Machine Learning Pipeline on Google Kubernetes Engine](https://towardsdatascience.com/deploy-machine-learning-model-on-google-kubernetes-engine-94daac85108b)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 Google Kubernetes Engine 上部署机器学习管道](https://towardsdatascience.com/deploy-machine-learning-model-on-google-kubernetes-engine-94daac85108b)'
- en: '[Deploy Machine Learning Pipeline on AWS Fargate](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-aws-fargate-eb6e1c50507)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 AWS Fargate 上部署机器学习管道](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-aws-fargate-eb6e1c50507)'
- en: '[Build and deploy your first machine learning web app](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '[构建并部署你的第一个机器学习网页应用](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99)'
- en: '[Deploy PyCaret and Streamlit app using AWS Fargate serverless](https://towardsdatascience.com/deploy-pycaret-and-streamlit-app-using-aws-fargate-serverless-infrastructure-8b7d7c0584c2)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 AWS Fargate 无服务器基础设施部署 PyCaret 和 Streamlit 应用](https://towardsdatascience.com/deploy-pycaret-and-streamlit-app-using-aws-fargate-serverless-infrastructure-8b7d7c0584c2)'
- en: '[Build and deploy machine learning web app using PyCaret and Streamlit](https://towardsdatascience.com/build-and-deploy-machine-learning-web-app-using-pycaret-and-streamlit-28883a569104)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 和 Streamlit 构建并部署机器学习网页应用](https://towardsdatascience.com/build-and-deploy-machine-learning-web-app-using-pycaret-and-streamlit-28883a569104)'
- en: '[Deploy Machine Learning App built using Streamlit and PyCaret on GKE](https://towardsdatascience.com/deploy-machine-learning-app-built-using-streamlit-and-pycaret-on-google-kubernetes-engine-fd7e393d99cb)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[在 GKE 上部署使用 Streamlit 和 PyCaret 构建的机器学习应用](https://towardsdatascience.com/deploy-machine-learning-app-built-using-streamlit-and-pycaret-on-google-kubernetes-engine-fd7e393d99cb)'
- en: Important Links
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要链接
- en: '[Documentation](https://pycaret.readthedocs.io/en/latest/installation.html)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[文档](https://pycaret.readthedocs.io/en/latest/installation.html)'
- en: '[Blog](https://medium.com/@moez_62905)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[博客](https://medium.com/@moez_62905)'
- en: '[GitHub](https://www.github.com/pycaret/pycaret)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub](https://www.github.com/pycaret/pycaret)'
- en: '[StackOverflow](https://stackoverflow.com/questions/tagged/pycaret)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[StackOverflow](https://stackoverflow.com/questions/tagged/pycaret)'
- en: '[Install PyCaret](https://pycaret.readthedocs.io/en/latest/installation.html)
    [Notebook Tutorials](https://pycaret.readthedocs.io/en/latest/tutorials.html)
    [Contribute in PyCaret](https://pycaret.readthedocs.io/en/latest/contribute.html)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[安装 PyCaret](https://pycaret.readthedocs.io/en/latest/installation.html) [笔记本教程](https://pycaret.readthedocs.io/en/latest/tutorials.html)
    [在 PyCaret 中贡献](https://pycaret.readthedocs.io/en/latest/contribute.html)'
- en: Want to learn about a specific module?
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想了解特定模块吗？
- en: Click on the links below to see the documentation and working examples.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下面的链接查看文档和示例。
- en: '[Classification](https://pycaret.readthedocs.io/en/latest/api/classification.html)
    [Regression](https://pycaret.readthedocs.io/en/latest/api/regression.html)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[分类](https://pycaret.readthedocs.io/en/latest/api/classification.html) [回归](https://pycaret.readthedocs.io/en/latest/api/regression.html)'
- en: '[Clustering](https://pycaret.readthedocs.io/en/latest/api/clustering.html)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[聚类](https://pycaret.readthedocs.io/en/latest/api/clustering.html)'
- en: '[Anomaly Detection](https://pycaret.readthedocs.io/en/latest/api/anomaly.html)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[异常检测](https://pycaret.readthedocs.io/en/latest/api/anomaly.html)'
- en: '[Natural Language Processing](https://pycaret.readthedocs.io/en/latest/api/nlp.html)
    [Association Rule Mining](https://pycaret.readthedocs.io/en/latest/api/arules.html)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[自然语言处理](https://pycaret.readthedocs.io/en/latest/api/nlp.html) [关联规则挖掘](https://pycaret.readthedocs.io/en/latest/api/arules.html)'
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[Moez Ali](https://www.linkedin.com/in/profile-moez/)** 是一名数据科学家，同时是
    PyCaret 的创始人和作者。'
- en: '[Original](https://towardsdatascience.com/easy-mlops-with-pycaret-mlflow-7fbcbf1e38c6).
    Reposted with permission.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/easy-mlops-with-pycaret-mlflow-7fbcbf1e38c6)。经许可转载。'
- en: '**Related:**'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Multiple Time Series Forecasting with PyCaret](/2021/04/multiple-time-series-forecasting-pycaret.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 进行多时间序列预测](/2021/04/multiple-time-series-forecasting-pycaret.html)'
- en: '[Deploy a Machine Learning Pipeline to the Cloud Using a Docker Container](/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Docker 容器将机器学习管道部署到云端](/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
- en: '[GitHub is the Best AutoML You Will Ever Need](/2020/08/github-best-automl-ever-need.html)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 是你所需的最佳 AutoML](/2020/08/github-best-automl-ever-need.html)'
- en: '* * *'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT 工作'
- en: '* * *'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[How to Package and Distribute Machine Learning Models with MLFlow](https://www.kdnuggets.com/2022/08/package-distribute-machine-learning-models-mlflow.html)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 MLFlow 打包和分发机器学习模型](https://www.kdnuggets.com/2022/08/package-distribute-machine-learning-models-mlflow.html)'
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 进行二分类入门](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 在 Python 中进行聚类入门](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 3.0：Python 中的开源低代码机器学习](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
- en: '[Getting Started with PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
- en: '[TensorFlow for Computer Vision - Transfer Learning Made Easy](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TensorFlow 计算机视觉 - 轻松实现迁移学习](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
