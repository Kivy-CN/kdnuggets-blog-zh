["```py\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2) \n```", "```py\nfrom functools import cache\n\n@cache\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2) \n```", "```py\nfrom functools import lru_cache\n\n@lru_cache(maxsize=7)  # Cache up to 7 most recent results\ndef fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nfibonacci(5)  # Computes Fibonacci(5) and caches intermediate results\nfibonacci(3)  # Retrieves Fibonacci(3) from the cache \n```", "```py\nfrom functools import cache, lru_cache\nimport timeit\n\n# without caching\ndef fibonacci_no_cache(n):\n    if n <= 1:\n        return n\n    return fibonacci_no_cache(n-1) + fibonacci_no_cache(n-2)\n\n# with cache\n@cache\ndef fibonacci_cache(n):\n    if n <= 1:\n        return n\n    return fibonacci_cache(n-1) + fibonacci_cache(n-2)\n\n# with LRU cache\n@lru_cache\ndef fibonacci_lru_cache(n):\n    if n <= 1:\n        return n\n    return fibonacci_lru_cache(n-1) + fibonacci_lru_cache(n-2) \n```", "```py\n# Compute the n-th Fibonacci number\nn = 35  \n\nno_cache_time = timeit.timeit(lambda: fibonacci_no_cache(n), number=1)\ncache_time = timeit.timeit(lambda: fibonacci_cache(n), number=1)\nlru_cache_time = timeit.timeit(lambda: fibonacci_lru_cache(n), number=1)\n\nprint(f\"Time without cache: {no_cache_time:.6f} seconds\")\nprint(f\"Time with cache: {cache_time:.6f} seconds\")\nprint(f\"Time with LRU cache: {lru_cache_time:.6f} seconds\") \n```", "```py\nOutput >>>\nTime without cache: 2.373220 seconds\nTime with cache: 0.000029 seconds\nTime with LRU cache: 0.000017 seconds \n```"]