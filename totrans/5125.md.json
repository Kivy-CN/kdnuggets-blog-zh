["```py\nSELECT experience_level, AVG(salary_in_usd) AS avg_salary\nFROM salary_data\nGROUP BY experience_level;\n```", "```py\n# Import required libraries for plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Set up the style for the graphs\nsns.set(style=\"whitegrid\")\n\n# Initialize the list for storing graphs\ngraphs = []\n\nplt.figure(figsize=(10, 6))\nsns.barplot(x='experience_level', y='salary_in_usd', data=df, estimator=lambda x: sum(x) / len(x))\nplt.title('Average Salary by Experience Level')\nplt.xlabel('Experience Level')\nplt.ylabel('Average Salary (USD)')\nplt.xticks(rotation=45)\ngraphs.append(plt.gcf())\nplt.show()\n```", "```py\n# Filter the data for Entry_Level and Experienced levels\nentry_experienced = df[df['experience_level'].isin(['Entry_Level', 'Experienced'])]\n\n# Filter the data for Mid-Level and Senior levels\nmid_senior = df[df['experience_level'].isin(['Mid-Level', 'Senior'])]\n\n# Plotting the Entry_Level vs Experienced graph\nplt.figure(figsize=(10, 6))\nsns.barplot(x='experience_level', y='salary_in_usd', data=entry_experienced, estimator=lambda x: sum(x) / len(x) if len(x) != 0 else 0)\nplt.title('Average Salary: Entry_Level vs Experienced')\nplt.xlabel('Experience Level')\nplt.ylabel('Average Salary (USD)')\nplt.xticks(rotation=45)\ngraphs.append(plt.gcf())\nplt.show() \n```", "```py\n# Plotting the Mid-Level vs Senior graph\nplt.figure(figsize=(10, 6))\nsns.barplot(x='experience_level', y='salary_in_usd', data=mid_senior, estimator=lambda x: sum(x) / len(x) if len(x) != 0 else 0)\nplt.title('Average Salary: Mid-Level vs Senior')\nplt.xlabel('Experience Level')\nplt.ylabel('Average Salary (USD)')\nplt.xticks(rotation=45)\ngraphs.append(plt.gcf())\nplt.show() \n```", "```py\nSELECT job_title, COUNT(*) AS job_count\nFROM salary_data\nGROUP BY job_title\nORDER BY job_count DESC\nLIMIT 10;\n```", "```py\nplt.figure(figsize=(12, 8))\nsns.countplot(y='job_title', data=df, order=df['job_title'].value_counts().index[:10])\nplt.title('Most Common Job Titles in Data Science')\nplt.xlabel('Job Count')\nplt.ylabel('Job Title')\ngraphs.append(plt.gcf())\nplt.show()\n```", "```py\nSELECT company_size, AVG(salary_in_usd) AS avg_salary, MIN(salary_in_usd) AS min_salary, MAX(salary_in_usd) AS max_salary\nFROM salary_data\nGROUP BY company_size;\n```", "```py\nplt.figure(figsize=(12, 8))\nsns.barplot(x='company_size', y='salary_in_usd', data=df, estimator=lambda x: sum(x) / len(x) if len(x) != 0 else 0, order=['Small', 'Medium', 'Large'])\nplt.title('Salary Distribution by Company Size')\nplt.xlabel('Company Size')\nplt.ylabel('Average Salary (USD)')\nplt.xticks(rotation=45)\ngraphs.append(plt.gcf())\nplt.show()\n```", "```py\nSELECT company_location, COUNT(*) AS job_count\nFROM salary_data\nGROUP BY company_location\nORDER BY job_count DESC\nLIMIT 10;\n```", "```py\nplt.figure(figsize=(12, 8))\nsns.countplot(y='company_location', data=df, order=df['company_location'].value_counts().index[:10])\nplt.title('Geographical Distribution of Data Science Jobs')\nplt.xlabel('Job Count')\nplt.ylabel('Company Location')\ngraphs.append(plt.gcf())\nplt.show()\n```", "```py\nSELECT job_title, AVG(salary_in_usd) AS avg_salary\nFROM salary_data\nGROUP BY job_title\nORDER BY avg_salary DESC\nLIMIT 10;\n```", "```py\n<SQL Query here>\n\nCreate a Python graph to visualize the top 10 highest-paying job titles in Data Science, similar to the insights gathered from the given SQL query above.\n```"]