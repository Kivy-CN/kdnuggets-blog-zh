["```py\nimport cProfile\n\ndef sum_():\n    total_sum = 0\n    # sum of numbers till 10000\n    for i in range(0,10001):\n        total_sum += i \n    return total_sum\n\ncProfile.run('sum_()')\n```", "```py\n4 function calls in 0.002 seconds\nOrdered by: standard name\n```", "```py\npip install line_profiler\n```", "```py\nfrom line_profiler import LineProfiler\ndef sum_arrays():\n    # creating large arrays\n    arr1 = [3] * (5 ** 10)\n    arr2 = [4] * (3 ** 11)\n    return arr1 + arr2\n\nlp = LineProfiler()\nlp.add_function(sum_arrays)\nlp.run('sum_arrays()')\nlp.print_stats()\n```", "```py\nTimer unit: 1e-07 s\nTotal time: 0.0562143 s\nFile: e:\\KDnuggets\\Python_Profilers\\lineprofiler.py\nFunction: sum_arrays at line 2\n```", "```py\npip install memory_profiler\n```", "```py\nimport memory_profiler\nimport random\n\ndef avg_marks():\n    # Genrating Random marks for 50 students for each section\n    sec_a = random.sample(range(0, 100), 50)\n    sec_b = random.sample(range(0, 100), 50)\n\n    # combined average marks of two sections\n    avg_a = sum(sec_a) / len(sec_a)\n    avg_b =  sum(sec_b) / len(sec_b)\n    combined_avg = (avg_a + avg_b)/2\n    return combined_avg\n\nmemory_profiler.profile(avg_marks)()\n```", "```py\nFilename: e:\\KDnuggets\\Python_Profilers\\memoryprofiler.py\n```", "```py\nimport timeit\ncode_to_test = \"\"\"\n# creating large arrays\narr1 = [3] * (5 ** 10)\narr2 = [4] * (3 ** 11)\narr1 + arr2\n\"\"\"\nelapsed_time = timeit.timeit(code_to_test, number=10)\nprint(f'Elapsed time: {elapsed_time}')\n```", "```py\nElapsed time: 1.3809973997995257\n```", "```py\nimport yappi\ndef sum_arrays():\n     # creating large arrays\n    arr1 = [3] * (5 ** 10)\n    arr2 = [4] * (3 ** 11)\n    return arr1 + arr2\n\nwith yappi.run(builtins=True):\n    final_arr = sum_arrays()\n\nprint(\"\\n--------- Function Stats -----------\")\nyappi.get_func_stats().print_all()\n\nprint(\"\\n--------- Thread Stats -----------\")\nyappi.get_thread_stats().print_all()\n\nprint(\"\\nYappi Backend Types: \",yappi.BACKEND_TYPES)\nprint(\"Yappi Clock Types: \", yappi.CLOCK_TYPES)\n```", "```py\n--------- Function Stats -----------\n\nClock type: CPU\nOrdered by: totaltime, desc\n```", "```py\nYappi Backend Types:  {'NATIVE_THREAD': 0, 'GREENLET': 1}\nYappi Clock Types:  {'WALL': 0, 'CPU': 1}\n```"]