["```py\npip install pandasai\n```", "```py\nfrom pandasai.llm import OpenAI\n\nllm = OpenAI(api_token=\"Your OpenAI API Key\")\n```", "```py\nimport seaborn as sns\nfrom pandasai import SmartDataframe\n\ndata = sns.load_dataset('titanic')\ndf = SmartDataframe(data, config = {'llm': llm})\n```", "```py\nresponse = df.chat(\"\"\"Return the survived class in percentage\"\"\")\n\nresponse\n```", "```py\n#Data Summary\nsummary = df.chat(\"\"\"Can you get me the statistical summary of the dataset\"\"\")\n\n#Class percentage\nsurv_pclass_perc = df.chat(\"\"\"Return the survived in percentage breakdown by pclass\"\"\")\n\n#Missing Data\nmissing_data_perc = df.chat(\"\"\"Return the missing data percentage for the columns\"\"\")\n\n#Outlier Data\noutlier_fare_data = response = df.chat(\"\"\"Please provide me the data rows that\ncontains outlier data based on fare column\"\"\")\n```", "```py\nresponse = df.chat('Please provide me the fare data distribution visualization')\n\nresponse\n```", "```py\nkde_plot = df.chat(\"\"\"Please plot the kde distribution of age column and separate them with survived column\"\"\")\n\nbox_plot = df.chat(\"\"\"Return me the box plot visualization of the age column separated by sex\"\"\")\n\nheat_map = df.chat(\"\"\"Give me heat map plot to visualize the numerical columns correlation\"\"\")\n\ncount_plot = df.chat(\"\"\"Visualize the categorical column sex and survived\"\"\")\n```", "```py\nimport pandasai as pai\npai.clear_cache()\n```", "```py\ndf = SmartDataframe(data, {\"enable_cache\": False})\n```", "```py\nfrom pandasai import SmartDataframe\nimport pandas as pd\n\n# head df\nhead_df = data.sample(5)\n\ndf = SmartDataframe(data, config={\n    \"custom_head\": head_df,\n    'llm': llm\n})\n```", "```py\nimport pandas as pd\nfrom pandasai import Agent\nfrom pandasai.skills import skill\n\nemployees_data = {\n    \"EmployeeID\": [1, 2, 3, 4, 5],\n    \"Name\": [\"John\", \"Emma\", \"Liam\", \"Olivia\", \"William\"],\n    \"Department\": [\"HR\", \"Sales\", \"IT\", \"Marketing\", \"Finance\"],\n}\n\nsalaries_data = {\n    \"EmployeeID\": [1, 2, 3, 4, 5],\n    \"Salary\": [5000, 6000, 4500, 7000, 5500],\n}\n\nemployees_df = pd.DataFrame(employees_data)\nsalaries_df = pd.DataFrame(salaries_data)\n\n# Function doc string to give more context to the model for use of this skill\n@skill\ndef plot_salaries(names: list[str], salaries: list[int]):\n    \"\"\"\n    Displays the bar chart  having name on x-axis and salaries on y-axis\n    Args:\n        names (list[str]): Employees' names\n        salaries (list[int]): Salaries\n    \"\"\"\n    # plot bars\n    import matplotlib.pyplot as plt\n\n    plt.bar(names, salaries)\n    plt.xlabel(\"Employee Name\")\n    plt.ylabel(\"Salary\")\n    plt.title(\"Employee Salaries\")\n    plt.xticks(rotation=45)\n\n    # Adding count above for each bar\n    for i, salary in enumerate(salaries):\n        plt.text(i, salary + 1000, str(salary), ha='center', va='bottom')\n    plt.show()\n\nagent = Agent([employees_df, salaries_df], config = {'llm': llm})\nagent.add_skills(plot_salaries)\n\nresponse = agent.chat(\"Plot the employee salaries against names\")\n```"]