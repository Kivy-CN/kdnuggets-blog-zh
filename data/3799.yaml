- en: Forget PIP, Conda, and requirements.txt! Use Poetry Instead And Thank Me Later
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忘记 PIP、Conda 和 requirements.txt！改用 Poetry，稍后感谢我
- en: 原文：[https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)
- en: '![Forget PIP, Conda, and requirements.txt! Use Poetry Instead And Thank Me
    Later](../Images/884ed43e371c84d662e8cb34e29d8451.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![忘记 PIP、Conda 和 requirements.txt！改用 Poetry，稍后感谢我](../Images/884ed43e371c84d662e8cb34e29d8451.png)'
- en: Image by me with Midjourney
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由我使用 Midjourney 制作
- en: Library A requires Python 3.6\. Library B relies on Library A but needs Python
    3.9, and Library C depends on Library B but requires the specific version of Library
    A that is compatible with Python 3.6.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 库 A 需要 Python 3.6。库 B 依赖于库 A，但需要 Python 3.9，库 C 依赖于库 B，但需要与 Python 3.6 兼容的库
    A 的特定版本。
- en: Welcome to dependency hell!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到依赖地狱！
- en: Since native Python is rubbish without external packages for data science, data
    scientists can often find themselves trapped in catch-22 dependency situations
    like the one above.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 由于没有外部数据科学包的原生 Python 很差劲，数据科学家经常发现自己陷入如上所示的两难依赖情况。
- en: Tools like PIP, Conda, or the laughable requirements.txt files can’t solve this
    problem. Actually, dependency nightmares exist largely *because of them*. So,
    to end their suffering, the Python open-source community developed the charming
    tool known as Poetry.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 像 PIP、Conda 或可笑的 requirements.txt 文件这样的工具无法解决这个问题。实际上，依赖地狱在很大程度上*正是由于它们*的存在。因此，为了结束这些痛苦，Python
    开源社区开发了名为 Poetry 的迷人工具。
- en: Poetry is an all-in-one project and dependency management framework with over
    25k stars on GitHub. This article will introduce Poetry and list the problems
    it solves for data scientists.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 是一个集成的项目和依赖管理框架，在 GitHub 上拥有超过 25k 星标。本文将介绍 Poetry，并列出它为数据科学家解决的问题。
- en: Let’s get started.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧。
- en: Installation
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: 'While Poetry can be installed as a library with PIP, it is recommended to install
    it system-wide so you can call `poetry` on the CLI anywhere you like. Here is
    the command that runs the installation script for Unix-like systems, including [Windows
    WSL2](https://towardsdatascience.com/how-to-create-perfect-machine-learning-development-environment-with-wsl2-on-windows-10-11-2c80f8ea1f31):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Poetry 可以通过 PIP 安装为库，但建议将其系统范围内安装，以便你可以在任何地方的 CLI 上调用 `poetry`。以下是适用于 Unix
    类系统的安装脚本命令，包括 [Windows WSL2](https://towardsdatascience.com/how-to-create-perfect-machine-learning-development-environment-with-wsl2-on-windows-10-11-2c80f8ea1f31)：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If, for some weird reason, you use Windows Powershell, here is the suitable
    command:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果因为某些奇怪的原因，你使用 Windows Powershell，以下是适用的命令：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To check if Poetry is installed correctly, you can run:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 Poetry 是否正确安装，你可以运行：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Poetry also supports tab completion for a variety of shells like Bash, Fish,
    Zsh, etc. Learn more about it [here](https://python-poetry.org/docs/#enable-tab-completion-for-bash-fish-or-zsh).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 还支持各种 Shell（如 Bash、Fish、Zsh 等）的 Tab 补全。了解更多信息 [在这里](https://python-poetry.org/docs/#enable-tab-completion-for-bash-fish-or-zsh)。
- en: 1\. Consistent structure for all projects
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 所有项目的结构一致
- en: Since Poetry is an all-in-one tool, you can use it from the start to the very
    end of your project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Poetry 是一款集成工具，你可以从项目开始到结束都使用它。
- en: 'When starting a fresh project, you can run `poetry new project_name`. It will
    create a default directory structure that is almost ready to build and publish
    to PyPI as a Python package:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当开始一个新项目时，你可以运行 `poetry new project_name`。它将创建一个几乎准备好构建和发布到 PyPI 的默认目录结构：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But we, data scientists, rarely create Python packages, so it is recommended
    to start the project yourself and call `poetry init` inside:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们数据科学家很少创建 Python 包，因此建议你自己开始项目，并在其中调用 `poetry init`：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The CLI will ask you a series of questions for setup, but you can leave most
    of them blank as they can be updated later:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 会询问你一系列设置问题，但你可以将大多数留空，因为它们可以稍后更新：
- en: '![Forget PIP, Conda, and requirements.txt! Use Poetry Instead And Thank Me
    Later](../Images/cf5f618e50562be15c569838ab5606cc.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![忘记 PIP、Conda 和 requirements.txt！改用 Poetry，稍后感谢我](../Images/cf5f618e50562be15c569838ab5606cc.png)'
- en: GIF. Mine.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: GIF. 由我制作。
- en: 'The `init` command will produce the most critical file of Poetry - `pyproject.toml`.
    The file contains some project metadata, but most importantly, it lists the dependencies:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`init` 命令会生成 Poetry 的最重要文件 - `pyproject.toml`。该文件包含一些项目元数据，但最重要的是，它列出了依赖项：'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Right now, the only dependency under `tool.poetry.dependencies` is Python 3.9
    (we will learn what `^` is later). Let's populate it with more libraries.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，`tool.poetry.dependencies` 下唯一的依赖项是 Python 3.9（我们稍后将了解 `^` 的含义）。让我们添加更多库。
- en: If you want to learn what all the fields in `pyproject.toml` file do, jump over [here](https://python-poetry.org/docs/pyproject/).
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果你想了解 `pyproject.toml` 文件中的所有字段的作用，请跳转到 [这里](https://python-poetry.org/docs/pyproject/)。
- en: 2\. Dependency specification
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 依赖项规格说明
- en: To install dependencies for your project, you will no longer have to use PIP
    or Conda, at least directly. Instead, you will start using `poetry add library_name` commands.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要为你的项目安装依赖项，你不再需要直接使用 PIP 或 Conda。相反，你将开始使用 `poetry add library_name` 命令。
- en: 'Here is an example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Adding the `@latest` flag installs the most recent version of Sklearn from
    PyPI. It is also possible to add multiple dependencies without any flags (constraints):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `@latest` 标志会从 PyPI 安装 Sklearn 的最新版本。也可以在没有任何标志（约束）的情况下添加多个依赖项：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The beauty of `add` is that if the specified packages don't have any version
    constraints, it will find the versions of all packages that resolve, i.e., not
    throw any errors when installed together. It will also check against the dependencies
    already specified in the `pyproject.toml`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`add` 的美妙之处在于，如果指定的包没有任何版本约束，它会找到所有包的版本，使其能够解决，即在一起安装时不会抛出任何错误。它还会检查 `pyproject.toml`
    中已经指定的依赖项。'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Let’s try downgrading `numpy` to v1.24 and see what happens:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试将 `numpy` 降级到 v1.24，看看会发生什么：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Poetry won’t let it happen because the downgraded version would conflict with
    Seaborn. If this was PIP or conda, they would gladly install Numpy 1.24 and would
    grin back at us as the nightmare starts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 不会允许这种情况发生，因为降级版本会与 Seaborn 冲突。如果这是 PIP 或 conda，它们会很乐意安装 Numpy 1.24，然后对我们露出笑容，随着噩梦的开始。
- en: In addition to standard installations, Poetry provides a versatile syntax for
    defining version constraints. This syntax allows you to specify exact versions,
    set boundaries for version ranges (greater than, less than, or in between), and
    pin down major, minor, or patch versions. The following tables, taken from the
    Poetry documentation (MIT License), serve as examples.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准安装，Poetry 提供了一种多功能的语法来定义版本约束。这种语法允许你指定确切版本，设置版本范围的边界（大于、小于或介于之间），并固定主版本、次版本或补丁版本。以下表格取自
    Poetry 文档（MIT 许可证），作为示例。
- en: 'Caret requirements:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本要求：
- en: '![Forget PIP, Conda, and requirements.txt! Use Poetry Instead And Thank Me
    Later](../Images/4c88c9190cfd2197d076b74cc427097e.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![忘记 PIP、Conda 和 requirements.txt！改用 Poetry 并感谢我](../Images/4c88c9190cfd2197d076b74cc427097e.png)'
- en: 'Tilde requirements:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 波浪号要求：
- en: '![Forget PIP, Conda, and requirements.txt! Use Poetry Instead And Thank Me
    Later](../Images/94eccfa6a6659400d3f4f4afffe22f71.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![忘记 PIP、Conda 和 requirements.txt！改用 Poetry 并感谢我](../Images/94eccfa6a6659400d3f4f4afffe22f71.png)'
- en: 'Wildcard requirements:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符要求：
- en: '![Forget PIP, Conda, and requirements.txt! Use Poetry Instead And Thank Me
    Later](../Images/67b0640c3ce181e6844938ed6ff4a493.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![忘记 PIP、Conda 和 requirements.txt！改用 Poetry 并感谢我](../Images/67b0640c3ce181e6844938ed6ff4a493.png)'
- en: For even more advanced constraint specifications, visit [this page](https://python-poetry.org/docs/dependency-specification/) of
    the Poetry docs.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 欲了解更多高级约束规格说明，请访问 Poetry 文档的 [这个页面](https://python-poetry.org/docs/dependency-specification/)。
- en: 3\. Environment management
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 环境管理
- en: One of the core features of Poetry is isolating the project environment from
    the global namespace in the most efficient way possible.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Poetry 的核心特性之一是以最有效的方式将项目环境与全局命名空间隔离。
- en: 'When you run the `poetry add library` command, here is what happens:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行 `poetry add library` 命令时，发生的情况如下：
- en: If you initialized Poetry inside an existing project with a virtual environment
    already activated, the `library` will be installed into that environment (it can
    be any environment manager like Conda, venv, etc.).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你在已经激活虚拟环境的现有项目中初始化了 Poetry，`library` 将被安装到该环境中（它可以是任何环境管理器，如 Conda、venv 等）。
- en: If you created a blank project with `poetry new` or initialized Poetry with `init` when
    no virtual environment is activated, Poetry will create a new virtual environment
    for you.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你创建了一个空项目，使用 `poetry new` 或在没有激活虚拟环境时使用 `init` 初始化 Poetry，Poetry 会为你创建一个新的虚拟环境。
- en: When case 2 happens, the resulting environment will be under `/home/user/.cache/pypoetry/virtualenvs/` folder.
    The Python executable will be there somewhere as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当情况 2 发生时，结果环境将位于 `/home/user/.cache/pypoetry/virtualenvs/` 文件夹下。Python 可执行文件也会在某处。
- en: 'To see which Poetry-created env is active, you can run `poetry env list`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看当前激活的Poetry创建的环境，你可以运行`poetry env list`：
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To switch between Poetry-created environments, you can run `poetry env use` command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Poetry创建的环境之间切换，你可以运行`poetry env use`命令：
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can learn more about environment management from [here](https://python-poetry.org/docs/managing-environments/).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[这里](https://python-poetry.org/docs/managing-environments/)了解更多关于环境管理的知识。
- en: 4\. Fully reproducible projects
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 完全可复现的项目
- en: When you run the `add` command, Poetry will generate a `poetry.lock` file. Rather
    than specifying version constraints, like `1.2.*`, it will lock the exact versions
    of libraries you are using, like `1.2.11`. All subsequent runs of `poetry add` or `poetry
    update` will modify the lock file to reflect the changes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行`add`命令时，Poetry会生成一个`poetry.lock`文件。它不会像`1.2.*`那样指定版本约束，而是锁定你使用的库的确切版本，比如`1.2.11`。所有后续的`poetry
    add`或`poetry update`运行将修改锁定文件以反映变化。
- en: Using such lock files ensures that people who are using your project can fully
    reproduce the environment on their machines.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的锁定文件可以确保使用你项目的人能够在他们的机器上完全复现环境。
- en: People have long used alternatives like `requirements.txt` but its format is
    very loose and error-prone. A typical human-created `requirements.txt` is not
    thorough as developers don't usually bother with listing the exact library versions
    they are using and just state version ranges or worse, simply write the library
    name.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 人们长期以来使用像`requirements.txt`这样的替代品，但其格式非常松散且容易出错。一个典型的人为创建的`requirements.txt`并不全面，因为开发人员通常不愿意列出他们使用的确切库版本，只是说明版本范围，或者更糟糕的是，简单地写下库名称。
- en: Then, when others try to reproduce the environment with `pip install -r requirements.txt`,
    PIP itself tries to resolve the version constraints, and that's how you quietly
    end up in dependency hell.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，当其他人尝试用`pip install -r requirements.txt`复现环境时，PIP自身尝试解决版本约束，这就是为什么你最终可能会遇到依赖地狱的原因。
- en: 'When using Poetry and lock files, none of that happens. So, if you are initializing
    Poetry in a project with `requirements.txt` already present, you can add the dependencies
    inside with:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Poetry和锁定文件时，这种情况不会发生。因此，如果你在一个已经存在`requirements.txt`的项目中初始化Poetry，你可以通过以下方式将依赖添加进去：
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: and delete the `requirements.txt`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 并删除`requirements.txt`。
- en: 'But, please note that some services like Streamlit or Heroku still require
    old `requirements.txt` files for deployment. When using those, you can export
    your `poetry.lock` file to a text format with:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，像Streamlit或Heroku这样的服务仍然需要旧的`requirements.txt`文件用于部署。在使用这些服务时，你可以通过以下命令将你的`poetry.lock`文件导出为文本格式：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The workflow to follow
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要遵循的工作流程
- en: I want to leave the article with a step-by-step workflow to integrate Poetry
    into any data project.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望留下这篇文章，提供一个将Poetry集成到任何数据项目中的逐步工作流程。
- en: Step 0: [Install Poetry](https://python-poetry.org/docs/) for your system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '步骤 0: [安装 Poetry](https://python-poetry.org/docs/) 以适配你的系统。'
- en: 'Step 1: Create a new project with `mkdir` and call `` [poetry init](https://python-poetry.org/docs/cli/#init) inside
    to initialize Poetry. If you want to convert your project into a Python package
    later, create the project with `[poetry new project_name](https://python-poetry.org/docs/cli/#new).`
    ``'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '步骤 1: 使用`mkdir`创建一个新项目，然后在其中调用`` [poetry init](https://python-poetry.org/docs/cli/#init)来初始化Poetry。如果你想将项目转换为Python包，可以使用`[poetry
    new project_name](https://python-poetry.org/docs/cli/#new)`创建项目。``'
- en: '[PRE14] Step 2: Install and add dependencies with `poetry add lib_name`. It
    is also possible to manually edit `pyproject.toml` and add the dependencies under
    the `[tool.poetry.dependencies]` section. In this case, you have to run `[poetry
    install](https://python-poetry.org/docs/cli/#install) to resolve the version constraints
    and install the libraries.`   ``After this step, Poetry creates a virtual environment
    for the project and generates a `poetry.lock` file.    Step 3: Initialize Git
    and other tools such as [DVC](https://medium.com/towards-data-science/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88) and
    start tracking the appropriate files. Put `pyproject.toml` and `poetry.lock` files
    under Git.    Step 4: Develop your code and models. To run Python scripts, you
    must use `poetry run python script.py` so that Poetry''s virtual environment is
    used.    Step 5: Test your code and make any necessary adjustments. Iterate on
    your data analysis or machine learning algorithms, experiment with different techniques,
    and refine your code as needed.    Optional steps:    1.  To update already-installed
    dependencies, use the `poetry update library` command. `update` only works within
    the constraints inside `pyproject.toml` so, check [the caveats here](https://python-poetry.org/docs/managing-dependencies/).
    2.  If you are starting from a project with requirements.txt, use poetry add cat
    requirements.txt to automatically add and install the dependencies. 3.  If you
    want to export your poetry.lock file, you can use `poetry export --output requirements.txt`.
    4.  If you chose a package structure for your project (`poetry add`), you can
    build the package with `poetry build` and it will be ready to push to PyPI. 5.  Switch
    between virtual environments with `poetry env use other_env`.    With these steps,
    you will ensure that you are never in dependency hell again.    Thank you for
    reading!        **[Bex Tuychiev](https://www.linkedin.com/in/bextuychiev/)** is
    a Top 10 AI writer on Medium and a Kaggle Master with over 15k followers. He loves
    writing detailed guides, tutorials, and notebooks on complex data science and
    machine learning topics with a bit of a sarcastic style.      [Original](https://medium.com/towards-artificial-intelligence/forget-pip-conda-requirements-txt-use-poetry-instead-and-thank-me-later-226a0bc38a56).
    Reposted with permission.       * * *      ## Our Top 3 Course Recommendations      ![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png)
    1\. [Google Cybersecurity Certificate](https://www.kdnuggets.com/google-cybersecurity)
    - Get on the fast track to a career in cybersecurity.    ![](../Images/e225c49c3c91745821c8c0368bf04711.png)
    2\. [Google Data Analytics Professional Certificate](https://www.kdnuggets.com/google-data-analytics)
    - Up your data analytics game    ![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png)
    3\. [Google IT Support Professional Certificate](https://www.kdnuggets.com/google-itsupport)
    - Support your organization in IT    * * *      ### More On This Topic    *   [Managing
    Python Dependencies with Poetry vs Conda & Pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)
    *   [Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)
    *   [3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)
    *   [Forget ChatGPT, This New AI Assistant Is Leagues Ahead and Will…](https://www.kdnuggets.com/2023/08/forget-chatgpt-new-ai-assistant-leagues-ahead-change-way-work-forever.html)
    *   [Pip Install YOU: A Beginner''s Guide to Creating Your Python Library](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)
    *   [KDnuggets™ News 22:n06, Feb 9: Data Science Programming…](https://www.kdnuggets.com/2022/n06.html)``
    [PRE15]`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE14] 第2步：使用 `poetry add lib_name` 安装并添加依赖项。也可以手动编辑 `pyproject.toml` 文件，将依赖项添加到
    `[tool.poetry.dependencies]` 部分。在这种情况下，你需要运行 [`poetry install`](https://python-poetry.org/docs/cli/#install)
    来解决版本约束并安装库。``完成这一步后，Poetry 会为项目创建一个虚拟环境，并生成一个 `poetry.lock` 文件。   第3步：初始化 Git
    和其他工具，如 [DVC](https://medium.com/towards-data-science/data-version-control-for-the-modern-data-scientist-7-dvc-concepts-you-cant-ignore-bb2433ccec88)，并开始跟踪相关文件。将
    `pyproject.toml` 和 `poetry.lock` 文件放到 Git 下。   第4步：开发你的代码和模型。要运行 Python 脚本，必须使用
    `poetry run python script.py`，以便使用 Poetry 的虚拟环境。   第5步：测试你的代码并进行必要的调整。对数据分析或机器学习算法进行迭代，尝试不同的技术，并根据需要优化你的代码。   可选步骤：   1.
    要更新已安装的依赖项，请使用 `poetry update library` 命令。`update` 仅在 `pyproject.toml` 内的约束条件下工作，因此请查看
    [这里的警告](https://python-poetry.org/docs/managing-dependencies/)。 2. 如果你从带有 requirements.txt
    的项目开始，可以使用 poetry add cat requirements.txt 来自动添加和安装依赖项。 3. 如果你想导出 `poetry.lock`
    文件，可以使用 `poetry export --output requirements.txt`。 4. 如果你为项目选择了包结构 (`poetry add`)，可以使用
    `poetry build` 构建包，准备好推送到 PyPI。 5. 使用 `poetry env use other_env` 在虚拟环境之间切换。   通过这些步骤，你将确保不会再次陷入依赖地狱。   感谢阅读！   **[Bex
    Tuychiev](https://www.linkedin.com/in/bextuychiev/)** 是 Medium 上的前10名 AI 作者和 Kaggle
    大师，拥有超过 15k 的关注者。他喜欢撰写详细的指南、教程和笔记本，涉及复杂的数据科学和机器学习主题，风格略带讽刺。   [原文](https://medium.com/towards-artificial-intelligence/forget-pip-conda-requirements-txt-use-poetry-instead-and-thank-me-later-226a0bc38a56)。转载许可。   *
    * *      ## 我们的前3个课程推荐      ![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png)
    1. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全职业的快车道。    ![](../Images/e225c49c3c91745821c8c0368bf04711.png)
    2. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics) - 提升你的数据分析技能    ![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png)
    3. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport) - 支持你的组织 IT    *
    * *      ### 更多相关主题    *   [用 Poetry 与 Conda 和 Pip 管理 Python 依赖项](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)
    *   [停止在数据科学项目中硬编码 - 改用配置文件](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)
    *   [你应该使用线性回归模型的 3 个理由，而不是…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)
    *   [忘记 ChatGPT，这个新 AI 助手领先数倍，将…](https://www.kdnuggets.com/2023/08/forget-chatgpt-new-ai-assistant-leagues-ahead-change-way-work-forever.html)
    *   [Pip 安装 YOU：创建 Python 库的初学者指南](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)
    *   [KDnuggets™ 新闻 22:n06，2 月 9 日：数据科学编程…](https://www.kdnuggets.com/2022/n06.html)``
    [PRE15]'
