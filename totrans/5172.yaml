- en: Most Common SQL Mistakes on Data Science Interviews
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学面试中的最常见 SQL 错误
- en: 原文：[https://www.kdnuggets.com/2021/11/common-sql-mistakes-data-science-interviews.html](https://www.kdnuggets.com/2021/11/common-sql-mistakes-data-science-interviews.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/11/common-sql-mistakes-data-science-interviews.html](https://www.kdnuggets.com/2021/11/common-sql-mistakes-data-science-interviews.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '![](../Images/c43d8e46ee83bd41246ce4db2f52d87d.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c43d8e46ee83bd41246ce4db2f52d87d.png)'
- en: These mistakes concern concepts that frequently appear in [data science coding
    interview questions](https://www.stratascratch.com/blog/data-science-coding-interview-questions-with-5-technical-concepts/) and
    can render your interview unsuccessful, so it’s important to know how to avoid
    them and the ways in which we can correct them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误涉及到在 [数据科学编程面试问题](https://www.stratascratch.com/blog/data-science-coding-interview-questions-with-5-technical-concepts/) 中经常出现的概念，这些概念可能会导致你的面试失败，因此了解如何避免它们以及如何纠正它们非常重要。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持组织的
    IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Mistake 1: LIMIT for maximum/minimum'
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '错误 1: LIMIT 用于最大值/最小值'
- en: Probably the most common mistake has to do with finding records in a data set
    with the highest or the lowest values. This sounds like a straightforward problem,
    but because of how SQL works, we frequently can’t simply use the MAX or MIN functions.
    Instead, we need to devise another way to output the relevant rows. When doing
    it, there is one commonly used approach that logically seems correct and, what’s
    worse, it often produces an expected result. The problem is that the solution
    doesn’t account for all the possibilities and skips some important edge cases.
    Let’s see an example to understand this mistake.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最常见的错误与在数据集中查找最高或最低值的记录有关。这听起来是一个简单的问题，但由于 SQL 的工作方式，我们通常不能简单地使用 MAX 或 MIN
    函数。相反，我们需要设计另一种方法来输出相关的行。在这样做时，有一种常用的方法在逻辑上似乎是正确的，更糟糕的是，它经常产生预期的结果。问题在于这种解决方案没有考虑所有可能性，并跳过了一些重要的边缘情况。让我们看一个例子来理解这个错误。
- en: '![](../Images/163f3659d0e8283a035e890259544add.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/163f3659d0e8283a035e890259544add.png)'
- en: '*Link: [https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries](https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries)*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*链接: [https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries](https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries)*'
- en: 'This question comes from an actual interview for a data scientist position
    at DoorDash. We are being asked to find the titles of workers that earn the highest
    salary given the datasets of employees and their titles. A common and probably
    the simplest solution to this problem looks like this:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题来源于 DoorDash 数据科学家职位的实际面试。我们需要在员工和他们的职位数据集中找到薪资最高的职位名称。一个常见且可能是最简单的解决方案如下：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We need to merge two tables because the column worker_title comes from one dataset
    and the column ‘salary from another, but that’s not the part we should focus on.
    The rest of the code is a pretty straightforward way of returning a row with the
    highest value. We select the columns to return, order the table by some value
    in descending order, and only output the first row by using LIMIT 1\. Can you
    see what the problem is with this solution?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要合并两个表，因为列 worker_title 来自一个数据集，而列 'salary 来自另一个，但这不是我们应该关注的部分。其余的代码是一种相当直接的方式来返回具有最高值的行。我们选择要返回的列，按某个值降序排列表格，并仅通过使用
    LIMIT 1 输出第一行。你能看到这个解决方案的问题吗？
- en: In many cases, using this approach will produce the expected output, but the
    issue is that it skips an important and common edge case. Namely, what if there
    is a tie in the data? What if two rows have the same highest value? As you can
    see in this example, this solution is marked as incorrect, and that’s because
    there are, in fact, two job titles with the same salary, which also happens to
    be the highest salary. Using the LIMIT statement requires us to know how many
    rows share the highest value, and in most cases, we don’t know it, and so this
    approach is incorrect.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，使用这种方法会产生预期的输出，但问题是它忽略了一个重要且常见的边界情况。也就是说，如果数据中存在并列怎么办？如果两行有相同的最高值怎么办？正如你在这个例子中看到的，这个解决方案被标记为不正确，因为实际上有两个职位的薪资相同，而且还是最高薪资。使用
    LIMIT 语句要求我们知道多少行共享最高值，而在大多数情况下，我们不知道，因此这种方法是不正确的。
- en: 'How to correct this solution? There are actually multiple ways to find the
    rows with maximum or minimum value in a robust way. One approach is to use a subquery
    in which we find the value of interest and then to use it as a filter in the main
    query. In our example, we can leave the first three lines of the code but instead
    of the ORDER BY and LIMIT statements, let’s add a WHERE clause. In it, we want
    to tell the engine to only leave these rows where the column ‘salary’ is equal
    to the highest salary of the entire dataset. In SQL, this will look something
    like that:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如何纠正这个解决方案？实际上，有多种方法可以以稳健的方式找到具有最大或最小值的行。一种方法是使用一个子查询，在其中找到感兴趣的值，然后在主查询中使用它作为过滤条件。在我们的例子中，我们可以保留前三行代码，但将
    ORDER BY 和 LIMIT 语句替换为 WHERE 子句。在其中，我们要告诉引擎只留下那些“薪资”列等于整个数据集最高薪资的行。在 SQL 中，这看起来是这样的：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the WHERE clause, there’s a subquery that only returns a single value - the
    highest salary. Then we use this number to filter the dataset, outputting only
    the rows where salary is equal to the number.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 WHERE 子句中，有一个子查询只返回一个值——最高薪资。然后我们使用这个数字来过滤数据集，只输出薪资等于该数字的行。
- en: Another common approach is to use the window function RANK() to add a new column
    with a ranking of the job titles based on their salaries.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的方法是使用窗口函数 RANK() 添加一个新的列，以根据职位薪资进行排名。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the RANK() function accounts for ties in the results because
    here, two job titles have the same salary, and they’re both given the first place.
    We can then use this ranking as an inner query and add the main query in which
    we only leave these titles where the rank number is equal to 1.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，RANK() 函数考虑了结果中的并列情况，因为在这里，两个职位的薪资相同，它们都被赋予了第一名。然后我们可以将这个排名用作内部查询，并添加主查询，只留下排名等于
    1 的这些职位。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Mistake 2: Row_Number() vs Rank() vs Dense_Rank()'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误 2：Row_Number() 与 Rank() 与 Dense_Rank()
- en: '![](../Images/96c1aac0a09f342759de1f3fd8cfb24e.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/96c1aac0a09f342759de1f3fd8cfb24e.png)'
- en: '*Link: [https://platform.stratascratch.com/coding/10062-fans-vs-opposition](https://platform.stratascratch.com/coding/10062-fans-vs-opposition)*​'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*链接: [https://platform.stratascratch.com/coding/10062-fans-vs-opposition](https://platform.stratascratch.com/coding/10062-fans-vs-opposition)*​'
- en: Speaking of RANK() and window functions in general, there is a common mistake
    related to them. Look at one of the [SQL interview questions](https://www.stratascratch.com/blog/sql-interview-questions-you-must-prepare-the-ultimate-guide/) from
    Facebook above. Here Facebook says that they ran a survey among their employees
    to quantify the popularity of some new programming languages. Now they want to
    match the people who love it most to the ones who hate it most. The biggest fan
    gets paired with the biggest opposition, the second biggest fan with the second-biggest
    opposition, and so on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 说到 RANK() 和窗口函数，常见的一个错误与它们有关。看看上面 Facebook 的 [SQL 面试问题](https://www.stratascratch.com/blog/sql-interview-questions-you-must-prepare-the-ultimate-guide/)。这里
    Facebook 说他们对员工进行了调查，以量化一些新编程语言的受欢迎程度。现在他们希望将最喜欢它的人与最讨厌它的人匹配。最大的粉丝与最大的反对者配对，第二大的粉丝与第二大的反对者配对，以此类推。
- en: 'Even though this interview question is long and seems difficult, the solution
    isn’t particularly complicated. We can simply take the dataset and order it by
    the popularity in descending order, then take it again, the order in ascending
    order, and put the two tables next to each other, or in technical terms, merge
    them. The solution may look something like that:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个面试问题很长且看起来很难，但解决方案并不特别复杂。我们可以简单地将数据集按受欢迎程度降序排序，然后再按升序排序，将这两张表放在一起，或者用技术术语说，合并它们。解决方案可能是这样的：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The key parts of this solution are the two subqueries on two sides of this ‘INNER
    JOIN’ statement. They return the same table but are sorted in opposite ways. To
    merge these tables together and to create the matching, the easiest way in SQL
    is to give employees subsequent numbers based on these orderings and match these
    numbers together so, the biggest fan will get number 1 and will be matched with
    the biggest opposition who also gets number 1 in the ‘opposition’ table.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个解决方案的关键部分是这个 ‘INNER JOIN’ 语句两边的两个子查询。它们返回相同的表，但排序方式相反。为了将这些表合并在一起并创建匹配，SQL
    中最简单的方法是根据这些排序方式给员工分配连续的编号，并将这些编号匹配在一起。因此，最受欢迎的粉丝将得到编号 1，并与在 ‘opposition’ 表中也得到编号
    1 的最大对手匹配。
- en: But when we run this code, there is a problem. From the top of the results,
    we can see that employee 17 is paired with both employees 13 and 2\. What’s more,
    the same employees 13 and 2 are also paired with an employee 5\. And then again
    with an employee 8\. Something is clearly wrong. Let’s modify the SELECT clause
    to show the rankings.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但当我们运行这段代码时，出现了问题。从结果的顶部可以看到，员工 17 与员工 13 和 2 都配对了。更有甚者，相同的员工 13 和 2 也与员工 5
    配对了。然后再次与员工 8 配对。显然有什么地方出错了。让我们修改 SELECT 子句以显示排名。
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What happened here? It seems like there are employees with the same score from
    the survey. In other words, there are ties in data. And as you may remember from
    the previous mistake, the RANK() function gives the same score to all rows that
    share the same value. So here, employees 17, 5, and 8 all had the same highest
    popularity score while employees 13 and 2 had the same lowest score. That’s why
    these five got matched together in all possible combinations. But if only 13 and
    2 shared the same worst score, then there must have been an opposition employee
    with a rank of 3\. But since there was no fan with rank 3, they didn’t get matched
    with anyone.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？似乎调查中有得分相同的员工。换句话说，数据中存在并列的情况。正如你可能还记得之前的错误，RANK() 函数会给所有具有相同值的行分配相同的分数。所以在这里，员工
    17、5 和 8 都得到了相同的最高人气分数，而员工 13 和 2 则得到了相同的最低分数。这就是为什么这五个人在所有可能的组合中都被匹配在一起。但是，如果只有
    13 和 2 共享了相同的最低分数，那么本应有一个排名为 3 的对手员工。然而，由于没有排名为 3 的粉丝，他们没有与任何人匹配。
- en: How to fix this? Some would say that if the RANK() function doesn’t work, we
    can try replacing it with DENSE_RANK(). The difference between the two is in how
    they handle ties. If we have four values and the first two are the same, then
    RANK() will give them ranks 1, 1, 3, and 4\. Meanwhile, DENSE_RANK() would rank
    them as 1, 1, 2, and 3\. But is it the right solution in this case?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解决这个问题？有些人可能会说，如果 RANK() 函数不起作用，我们可以尝试用 DENSE_RANK() 替换它。这两者的区别在于处理并列的方式。如果我们有四个值，其中前两个相同，那么
    RANK() 会给它们分配排名 1、1、3 和 4。与此同时，DENSE_RANK() 会将它们排名为 1、1、2 和 3。但在这种情况下这是正确的解决方案吗？
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We solved the problem with employee 10 not being matched with anyone like before,
    but the other issues are still there. The DENSE_RANK() still gives the same ranking
    to rows with the same value, so there are still some employees paired with more
    than one person. So what’s the correct solution here? There is a third similar
    window function called ROW_NUMBER(). Some disregard it as being ‘basic’ because
    it simply counts the rows without dealing with tied values. But that’s exactly
    the feature that makes this function perfect in this case.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解决了员工 10 之前没有与任何人匹配的问题，但其他问题仍然存在。DENSE_RANK() 仍然对具有相同值的行给予相同的排名，因此仍然有一些员工与多于一个人配对。那么正确的解决方案是什么呢？有一个叫做
    ROW_NUMBER() 的类似窗口函数。有人认为它“基础”是因为它只是计数行而不处理并列值。但这正是使这个函数在这种情况下完美的特性。
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: All employees are now given unique ranks and so the pairing can be done without
    duplicates and skipping anyone. And while this problem of pairing fans with the
    opposition is not the most common at data science interviews, but based on this
    example, we wanted to show you how important it is to understand the difference
    between RANK(), DENSE_RANK(), and ROW_NUMBER() - all very similar [window functions](https://www.stratascratch.com/blog/types-of-window-functions-in-sql-and-questions-asked-by-airbnb-netflix-twitter-and-uber/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有员工都被赋予了唯一的排名，因此可以在不重复和不遗漏任何人的情况下进行配对。虽然在数据科学面试中，粉丝与对手配对的问题并不是最常见的，但基于这个例子，我们想展示一下理解
    RANK()、DENSE_RANK() 和 ROW_NUMBER() 之间的区别有多么重要——它们都是非常相似的 [窗口函数](https://www.stratascratch.com/blog/types-of-window-functions-in-sql-and-questions-asked-by-airbnb-netflix-twitter-and-uber/)。
- en: 'Mistake 3: Aliases in quotation marks'
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误 3：引号中的别名
- en: '![](../Images/c1299e21f58af834d8d60e89fc46e5f1.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c1299e21f58af834d8d60e89fc46e5f1.png)'
- en: In this example, we gave names to some subqueries, like ‘fans’ and ‘opposition’,
    and to some columns as well. These are so-called aliases and are very popular
    in SQL but are also a source of some common mistakes. Let’s switch to an easier
    example to see them.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们给一些子查询和列命名，如‘fans’和‘opposition’。这些是所谓的别名，在SQL中非常流行，但也是一些常见错误的来源。让我们换个简单的例子来看一下这些错误。
- en: '![](../Images/fa25d424331eee091f4e873c3ccf5a9c.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fa25d424331eee091f4e873c3ccf5a9c.png)'
- en: '*Link: [https://platform.stratascratch.com/coding/2061-users-with-many-searches?python=](https://platform.stratascratch.com/coding/2061-users-with-many-searches?python=)*​'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*链接: [https://platform.stratascratch.com/coding/2061-users-with-many-searches?python=](https://platform.stratascratch.com/coding/2061-users-with-many-searches?python=)*​'
- en: 'In this recent data science interview question, Facebook asked to count the
    number of users who made more than five searches in August 2021, based on some
    database of searches. The solution looks like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个最近的数据科学面试问题中，Facebook要求根据某些搜索数据库计算2021年8月进行过超过五次搜索的用户数量。解决方案如下：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There is an inner query in which we count the number of searches for each user
    in the required timeframe and then an outer query in which we only consider users
    who made more than five searches, and we count them. But when we try to run it,
    there’s an error. It says that ‘*column "augustsearches" does not exist’*. How
    is it possible? After all, we gave the alias ‘AugustSearches’ to one of the columns
    in the inner query, so we should be able to use it in the WHERE clause of the
    outer query, right? Well, yes, but unfortunately, we made a mistake when assigning
    the alias. Can you see it? The simplest way to fix it is to remove the quotation
    marks from the alias:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部查询中，我们统计了每个用户在所需时间框架内的搜索次数，然后在外部查询中，我们只考虑进行过超过五次搜索的用户，并对他们进行计数。但是，当我们尝试运行时，出现了错误。它说‘*列
    "augustsearches" 不存在*’。这怎么可能呢？毕竟，我们在内部查询中将别名赋予了‘AugustSearches’，所以我们应该可以在外部查询的WHERE子句中使用它，对吗？是的，但不幸的是，我们在分配别名时犯了一个错误。你能看出来吗？修复它的最简单方法是去掉别名中的引号：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'It is a common mistake because we use quotation marks when writing strings
    in SQL, and an alias feels like a string. But the reason for it not working actually
    originates elsewhere and has to do with the capital letters. To save memory, SQL
    always forces the column names to small letters. So even if we write ‘WHERE AugustSearches’,
    SQL will interpret it as ‘WHERE augustsearches’. But when we define an alias in
    quotation marks, SQL keeps all the capitalized letters but then when we compare
    the alias to an alias written without quotation marks, it causes the problem.
    In theory, we could always use the aliases in quotation marks:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个常见错误，因为我们在SQL中使用引号来书写字符串，而别名感觉像是字符串。但实际上，这个问题起因于其他地方，涉及到大写字母。为了节省内存，SQL总是将列名转换为小写字母。所以即使我们写‘WHERE
    AugustSearches’，SQL也会将其解释为‘WHERE augustsearches’。但当我们在引号中定义别名时，SQL保留所有的大写字母，但当我们将别名与不带引号的别名进行比较时，会导致问题。理论上，我们可以始终使用带引号的别名：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This code will run, but this will take much longer to compute, will consume
    more memory, and may cause some confusion. And we need to remember quotation marks
    every time when using an alias. So the lesson here is not to use them for aliases.
    And to only use small letters for aliases.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码会运行，但计算时间会更长，消耗更多内存，并可能造成一些混淆。我们需要记住每次使用别名时都要加上引号。因此这里的教训是不使用别名，并且只使用小写字母作为别名。
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Mistake 4: Inconsistency in aliases'
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 错误4：别名的不一致性
- en: '![](../Images/163f3659d0e8283a035e890259544add.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/163f3659d0e8283a035e890259544add.png)'
- en: '*Link: [https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries](https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries)*​'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*链接: [https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries](https://platform.stratascratch.com/coding/10353-workers-with-the-highest-salaries)*​'
- en: 'Another common problem is inconsistency in using aliases. It’s not a huge mistake,
    and as long as we don’t have the same column names in different tables, it won’t
    cause major problems. But this is a detail that can decide about the success or
    a failure of your data science interview. Let’s get back for a moment to the question
    from the beginning, the one about highest-earning job titles. This is another
    possible and correct solution for this question:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的问题是别名使用的不一致。这不是一个重大错误，只要不同表中没有相同的列名，它不会造成主要问题。但这是一个可以决定你的数据科学面试成功与否的细节。让我们回到开始的问题，即关于最高收入职位的那个。这是另一个可能的正确解决方案：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Can you see the issue with aliases? First of all, we define the aliases for
    the two tables. In this case, it’s letters ‘w’ and ‘t’. We then say ‘t.worker_title’,
    but why in the WHERE clause do we have ‘salary’ without any alias? Why does the
    column ‘worker_title’ in the ORDER BY clause has no alias suddenly? And look at
    the subquery: we give aliases to the tables only to not use them when selecting
    the only column in this query. Another issue is using the same aliases in the
    inner and outer queries, but since, in this case, it’s always for the same tables,
    we can let it slide. This solution will look much cleaner and clearer if we stay
    consistent when using aliases.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到别名的问题吗？首先，我们为两个表定义了别名。在这种情况下，是字母 ‘w’ 和 ‘t’。然后我们说 ‘t.worker_title’，但为什么在
    WHERE 子句中 ‘salary’ 没有任何别名？为什么 ‘worker_title’ 列在 ORDER BY 子句中突然没有别名？再看看子查询：我们为表指定了别名，但在选择这个查询中的唯一列时没有使用它们。另一个问题是内外查询中使用了相同的别名，但由于在这种情况下它们总是用于相同的表，我们可以忽略。保持一致地使用别名，这个解决方案会显得更加干净和清晰。
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Mistake 5: Unnecessary JOINs'
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '错误 5: 不必要的 JOIN'
- en: But we’re not quite done yet. There is one more mistake in this solution. Yes,
    it still works and produces an expected result, but we can’t say it’s efficient.
    Can you see why? Look at the inner query. In it, we only select one column, salary.
    This column comes from a table ‘worker’. It’s especially clear now that we fixed
    the aliases. But if this is the case, then why do we merge the two tables in the
    inner query? It’s not necessary, and it makes the solution less efficient. After
    all, each JOIN operation takes some time to compute, and if the tables are large,
    this time may be considerable. We know that frequently when we see that a question
    comes with several tables, the logical first step is to merge them together. But
    as this example shows, we should only do it when it’s necessary.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没有完全解决问题。这个解决方案还有一个错误。是的，它仍然有效并产生预期结果，但我们不能说它是高效的。你能看到为什么吗？看看内层查询。在其中，我们只选择了一列，salary。这个列来自于一个名为‘worker’的表。现在我们已经修复了别名，这一点尤为清晰。但如果是这种情况，那我们为什么在内层查询中合并这两个表呢？这并不必要，并且使得解决方案的效率降低。毕竟，每次
    JOIN 操作都需要一些计算时间，如果表很大，这个时间可能会很可观。我们知道，当问题涉及多个表时，逻辑上的第一步是将它们合并在一起。但正如这个例子所示，我们应该仅在必要时才这样做。
- en: '[PRE14]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Mistake 6: JOIN on columns with NULL values'
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '错误 6: 在包含 NULL 值的列上进行 JOIN'
- en: '![](../Images/2b82ad2a07c716522a58e9548ee991a9.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2b82ad2a07c716522a58e9548ee991a9.png)'
- en: '*Link: [https://platform.stratascratch.com/coding/9627-3-bed-minimum](https://platform.stratascratch.com/coding/9627-3-bed-minimum)*​'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '*链接: [https://platform.stratascratch.com/coding/9627-3-bed-minimum](https://platform.stratascratch.com/coding/9627-3-bed-minimum)*'
- en: 'Let us show you one more common mistake, again related to the JOIN statements.
    Look at this question in which Airbnb asks to find the average number of beds
    in each neighbourhood that has at least three beds in total. While there exist
    less complicated solutions, one valid approach is to merge the original table
    with itself but in an aggregated way so that we already have the number of beds
    per neighbourhood given that it’s at least three beds. We could do it using a
    subquery or with a JOIN statement like in this solution:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再展示一个常见的错误，同样与 JOIN 语句有关。看看这个问题，Airbnb 要求找出每个至少有三个床的邻里中的平均床数。虽然存在更简单的解决方案，但一种有效的方法是将原始表与自身合并，但以汇总的方式，这样我们就已经得到每个邻里的床数，前提是床数至少为三个。我们可以通过子查询或像这个解决方案中的
    JOIN 语句来实现：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When we run this code, it looks nice at first glance, but what is this space
    here on top? And when we compare this output with the expected results, it turns
    out our code is not correct. So what happened? Let’s run only the inner query
    to look for clues.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行这段代码时，乍一看还不错，但顶部的这个空白是什么？当我们将输出与预期结果进行比较时，发现我们的代码不正确。那么发生了什么？让我们仅运行内层查询以寻找线索。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Can you see this first row? It turns out there are 33 beds that are not assigned
    to any neighbourhood. Instead, the value for the neighbourhood is ‘NULL’. Why
    does it cause problems? Because back in our main query, we JOIN the two tables
    ON the neighbourhood columns - both of which contain NULL values. And in SQL,
    if we use the operator ‘=’ between NULL values, the engine won’t be able to match
    them correctly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看到这一行吗？结果显示有 33 张床没有分配到任何邻里。相反，邻里的值为‘NULL’。为什么这会造成问题？因为在我们的主要查询中，我们在邻里列上对两个表进行了
    JOIN - 这两个列都包含 NULL 值。而在 SQL 中，如果我们在 NULL 值之间使用操作符‘=’，引擎将无法正确匹配它们。
- en: 'How to fix this problem? If we really need to merge two tables based on a column
    that contains NULL values, we need to explicitly tell the engine how to deal with
    them. So we can start as we did before, saying ‘anb.neighbourhood = fil_anb.neighbourhood’
    and then continue by adding a second case: if a value in anb.neighbourhood is
    NULL, a value in fil_anb.neighbourhood should also be ‘NULL’. In code, it’ll look
    like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解决这个问题？如果我们确实需要基于包含 NULL 值的列合并两个表，我们需要明确告诉引擎如何处理它们。因此，我们可以像之前一样开始，写下‘anb.neighbourhood
    = fil_anb.neighbourhood’，然后继续添加第二种情况：如果 anb.neighbourhood 中的值为 NULL，则 fil_anb.neighbourhood
    中的值也应为‘NULL’。在代码中，它看起来像这样：
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Conclusion
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: These are all the examples we have prepared for you in this article. We have
    shown you a number of different coding mistakes, some more and some less catastrophic
    but all equally important, especially in an interview setting. There it’s not
    only about whether a solution works but also how it’s written and if you as a
    candidate have attention to detail. If you remember these few most common mistakes
    and try to avoid them in the future, this will improve your chances of succeeding
    in a [data science interview](https://www.stratascratch.com/blog/data-science-interview-guide-questions-from-80-different-companies/)!
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就是我们为你准备的所有示例。我们展示了不同的编码错误，有的更严重，有的较轻，但都同样重要，特别是在面试环境中。在那里，不仅是解决方案是否有效，还有它的书写方式以及你作为候选人是否注重细节。如果你记住这些最常见的错误，并在未来尽量避免它们，这将提高你在[data
    science interview](https://www.stratascratch.com/blog/data-science-interview-guide-questions-from-80-different-companies/)中成功的机会！
- en: '[Original](https://www.stratascratch.com/blog/most-common-coding-mistakes-on-data-science-interviews/).
    Reposted with permission.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.stratascratch.com/blog/most-common-coding-mistakes-on-data-science-interviews/)。已获许可转载。'
- en: '**Related:**'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[How to Ace Data Science Interview by Working on Portfolio Projects](https://www.kdnuggets.com/2021/10/ace-data-science-interview-portfolio-projects.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何通过进行作品集项目来在数据科学面试中脱颖而出](https://www.kdnuggets.com/2021/10/ace-data-science-interview-portfolio-projects.html)'
- en: '[Data science SQL interview questions from top tech firms](https://www.kdnuggets.com/2021/10/data-science-sql-interview-questions.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[顶级科技公司提出的数据科学 SQL 面试问题](https://www.kdnuggets.com/2021/10/data-science-sql-interview-questions.html)'
- en: '[Most Common Data Science Interview Questions and Answers](https://www.kdnuggets.com/2021/08/common-data-science-interview-questions-answers.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[最常见的数据科学面试问题及答案](https://www.kdnuggets.com/2021/08/common-data-science-interview-questions-answers.html)'
- en: More On This Topic
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的 5 项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家都应该掌握的 6 种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021 年最佳 ETL 工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并寻找目标以……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计学的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立一个稳固的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
