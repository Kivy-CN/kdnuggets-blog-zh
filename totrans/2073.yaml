- en: 37 Reasons why your Neural Network is not working
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/08/37-reasons-neural-network-not-working.html/2](https://www.kdnuggets.com/2017/08/37-reasons-neural-network-not-working.html/2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: III. Implementation issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/d1d7015310dac70d5bd4d0899f6d5a97.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Credit: https://xkcd.com/1838/'
  prefs: []
  type: TYPE_NORMAL
- en: 16\. Try solving a simpler version of the problem
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This will help with finding where the issue is. For example, if the target output
    is an object class and coordinates, try limiting the prediction to object class
    only.
  prefs: []
  type: TYPE_NORMAL
- en: 17\. Look for correct loss “at chance”
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again from the excellent [CS231n](http://cs231n.github.io/neural-networks-3/#sanitycheck): *Initialize
    with small parameters, without regularization. For example, if we have 10 classes,
    at chance means we will get the correct class 10% of the time, and the Softmax
    loss is the negative log probability of the correct class so: -ln(0.1) = 2.302.*'
  prefs: []
  type: TYPE_NORMAL
- en: After this, try increasing the regularization strength which should increase
    the loss.
  prefs: []
  type: TYPE_NORMAL
- en: 18\. Check your loss function
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you implemented your own loss function, check it for bugs and add unit tests.
    Often, my loss would be slightly incorrect and hurt the performance of the network
    in a subtle way.
  prefs: []
  type: TYPE_NORMAL
- en: 19\. Verify loss input
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you are using a loss function provided by your framework, make sure you are
    passing to it what it expects. For example, in PyTorch I would mix up the NLLLoss
    and CrossEntropyLoss as the former requires a softmax input and the latter doesn’t.
  prefs: []
  type: TYPE_NORMAL
- en: 20\. Adjust loss weights
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your loss is composed of several smaller loss functions, make sure their
    magnitude relative to each is correct. This might involve testing different combinations
    of loss weights.
  prefs: []
  type: TYPE_NORMAL
- en: 21\. Monitor other metrics
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Sometimes the loss is not the best predictor of whether your network is training
    properly. If you can, use other metrics like accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: 22\. Test any custom layers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Did you implement any of the layers in the network yourself? Check and double-check
    to make sure they are working as intended.
  prefs: []
  type: TYPE_NORMAL
- en: 23\. Check for “frozen” layers or variables
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Check if you unintentionally disabled gradient updates for some layers/variables
    that should be learnable.
  prefs: []
  type: TYPE_NORMAL
- en: 24\. Increase network size
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Maybe the expressive power of your network is not enough to capture the target
    function. Try adding more layers or more hidden units in fully connected layers.
  prefs: []
  type: TYPE_NORMAL
- en: 25\. Check for hidden dimension errors
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If your input looks like (k, H, W) = (64, 64, 64) it’s easy to miss errors related
    to wrong dimensions. Use weird numbers for input dimensions (for example, different
    prime numbers for each dimension) and check how they propagate through the network.
  prefs: []
  type: TYPE_NORMAL
- en: 26\. Explore Gradient checking
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If you implemented Gradient Descent by hand, gradient checking makes sure that
    your backpropagation works like it should. More info: [1](http://ufldl.stanford.edu/tutorial/supervised/DebuggingGradientChecking/) [2](http://cs231n.github.io/neural-networks-3/#gradcheck) [3](https://www.coursera.org/learn/machine-learning/lecture/Y3s6r/gradient-checking).
  prefs: []
  type: TYPE_NORMAL
- en: IV. Training issues
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/38da157d4f92ff6ffd306f58f3beba9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Credit: http://carlvondrick.com/ihog/'
  prefs: []
  type: TYPE_NORMAL
- en: 27\. Solve for a really small dataset
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Overfit a small subset of the data and make sure it works. **For example,
    train with just 1 or 2 examples and see if your network can learn to differentiate
    these. Move on to more samples per class.'
  prefs: []
  type: TYPE_NORMAL
- en: 28\. Check weights initialization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If unsure, use [Xavier](http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf) or [He](http://www.cv-foundation.org/openaccess/content_iccv_2015/papers/He_Delving_Deep_into_ICCV_2015_paper.pdf) initialization.
    Also, your initialization might be leading you to a bad local minimum, so try
    a different initialization and see if it helps.
  prefs: []
  type: TYPE_NORMAL
- en: 29\. Change your hyperparameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Maybe you using a particularly bad set of hyperparameters. If feasible, try
    a [grid search](http://scikit-learn.org/stable/modules/grid_search.html).
  prefs: []
  type: TYPE_NORMAL
- en: 30\. Reduce regularization
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Too much regularization can cause the network to underfit badly. Reduce regularization
    such as dropout, batch norm, weight/bias L2 regularization, etc. In the excellent
    “[Practical Deep Learning for coders](http://course.fast.ai/)” course, [Jeremy
    Howard](https://twitter.com/jeremyphoward) advises getting rid of underfitting
    first. This means you overfit the training data sufficiently, and only then addressing
    overfitting.
  prefs: []
  type: TYPE_NORMAL
- en: 31\. Give it time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Maybe your network needs more time to train before it starts making meaningful
    predictions. If your loss is steadily decreasing, let it train some more.
  prefs: []
  type: TYPE_NORMAL
- en: 32\. Switch from Train to Test mode
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Some frameworks have layers like Batch Norm, Dropout, and other layers behave
    differently during training and testing. Switching to the appropriate mode might
    help your network to predict properly.
  prefs: []
  type: TYPE_NORMAL
- en: 33\. Visualize the training
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Monitor the activations, weights, and updates of each layer. Make sure their
    magnitudes match. For example, the magnitude of the updates to the parameters
    (weights and biases) [should be 1-e3](https://cs231n.github.io/neural-networks-3/#summary).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consider a visualization library like [Tensorboard](https://www.tensorflow.org/get_started/summaries_and_tensorboard) and [Crayon](https://github.com/torrvision/crayon).
    In a pinch, you can also print weights/biases/activations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be on the lookout for layer activations with a mean much larger than 0\. Try
    Batch Norm or ELUs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deeplearning4j](https://deeplearning4j.org/visualization#usingui) points out
    what to expect in histograms of weights and biases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: “For weights, these histograms should have an **approximately Gaussian (normal) **distribution,
    after some time. For biases, these histograms will generally start at 0, and will
    usually end up being **approximately Gaussian**(One exception to this is for LSTM).
    Keep an eye out for parameters that are diverging to +/- infinity. Keep an eye
    out for biases that become very large. This can sometimes occur in the output
    layer for classification if the distribution of classes is very imbalanced.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Check layer updates, they should have a Gaussian distribution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 34\. Try a different optimizer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Your choice of optimizer shouldn’t prevent your network from training unless
    you have selected particularly bad hyperparameters. However, the proper optimizer
    for a task can be helpful in getting the most training in the shortest amount
    of time. The paper which describes the algorithm you are using should specify
    the optimizer. If not, I tend to use Adam or plain SGD with momentum.
  prefs: []
  type: TYPE_NORMAL
- en: Check this [excellent post](http://ruder.io/optimizing-gradient-descent/) by
    Sebastian Ruder to learn more about gradient descent optimizers.
  prefs: []
  type: TYPE_NORMAL
- en: 35\. Exploding / Vanishing gradients
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Check layer updates, as very large values can indicate exploding gradients.
    Gradient clipping may help.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Check layer activations. From [Deeplearning4j](https://deeplearning4j.org/visualization#usingui) comes
    a great guideline: *“A good standard deviation for the activations is on the order
    of 0.5 to 2.0\. Significantly outside of this range may indicate vanishing or
    exploding activations.”*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 36\. Increase/Decrease Learning Rate
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A low learning rate will cause your model to converge very slowly.
  prefs: []
  type: TYPE_NORMAL
- en: A high learning rate will quickly decrease the loss in the beginning but might
    have a hard time finding a good solution.
  prefs: []
  type: TYPE_NORMAL
- en: Play around with your current learning rate by multiplying it by 0.1 or 10.
  prefs: []
  type: TYPE_NORMAL
- en: 37\. Overcoming NaNs
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Getting a NaN (Non-a-Number) is a much bigger issue when training RNNs (from
    what I hear). Some approaches to fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: Decrease the learning rate, especially if you are getting NaNs in the first
    100 iterations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NaNs can arise from division by zero or natural log of zero or negative number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Russell Stewart has great pointers on [how to deal with NaNs](http://russellsstewart.com/notes/0.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Try evaluating your network layer by layer and see where the NaNs appear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Slav Ivanov](https://twitter.com/slavivanov)** is Entrepreneur & ML
    Practitioner in Sofia, Bulgaria. He blogs about Machine Learning at https://blog.slavv.com
    . Previously built http://postplanner.com .'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://blog.slavv.com/37-reasons-why-your-neural-network-is-not-working-4020854bd607).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Related:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Deep Learning and Neural Networks Primer: Basic Concepts for Beginners](/2017/08/deep-learning-neural-networks-primer-basic-concepts-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Train your Deep Learning model faster and sharper: Snapshot Ensembling — M
    models for the cost of 1](/2017/08/train-deep-learning-faster-snapshot-ensembling.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimization in Machine Learning: Robust or global minimum?](/2017/06/robust-global-minimum.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
