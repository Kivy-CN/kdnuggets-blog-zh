["```py\nfrom collections import Counter\n\n```", "```py\ncounter = Counter(['D','C','C','E','E','E','A','A','X'])\nprint(counter)\n```", "```py\nCounter({'D': 1, 'C': 2, 'E': 3, 'A': 2, 'X': 1})\n```", "```py\ncounter = Counter({'X':3,'Y':2,'Z':1})\nprint(counter)\n```", "```py\nCounter({'X': 3, 'Y': 2, 'Z': 1})\n```", "```py\ncounter = Counter(X=3,Y=2,Z=1)\nprint(counter)\n```", "```py\nCounter({'X': 3, 'Y': 2, 'Z': 1})\n```", "```py\nfrom collections import OrderedDict\n\norderdict = OrderedDict()\norderdict[\"x\"] = 2\norderdict[\"y\"] = 3\norderdict[\"z\"] = 4\n\nprint(orderdict)\n```", "```py\nOrderedDict([('x', 2), ('y', 3), ('z', 4)])\n```", "```py\norderdict[\"v\"] = 5\nprint(orderdict)\n```", "```py\nOrderedDict([('x', 2), ('y', 3), ('z', 4), ('v', 5)])\n```", "```py\ndel orderdict[\"x\"]\n\nprint(orderdict)\n```", "```py\nOrderedDict([('y', 3), ('z', 4), ('v', 5)])\n```", "```py\norderdict[\"x\"] = 2\nprint(orderdict)\n```", "```py\nOrderedDict([('y', 3), ('z', 4), ('v', 5), ('x', 2)])\n```", "```py\norderdict.update(z = \"four\")\nprint(orderdict)\n```", "```py\nOrderedDict([('y', 3), ('z', 'four'), ('v', 5), ('x', 2)]\n```", "```py\nfrom collections import defaultdict\n```", "```py\ndftdict = defaultdict(list)\n\nfor i in range(3):\ndftdict[i].append(i)\n\nprint(dftdict)\n```", "```py\ndefaultdict(list, {0: [0], 1: [1], 2: [2]})\n\n```", "```py\nintdict = defaultdict(int)\n\nX = [1,2,3,4,5,1,1,3,4,5]\n\nfor i in X:\n\n#The default value is 0 so there is no need to enter the key first\n\nintdict[i] += 1\n\nprint(intdict)\n```", "```py\ndefaultdict(int, {1: 3, 2: 1, 3: 2, 4: 2, 5: 2})\n```", "```py\nfrom collections import ChainMap\n\nx1 = {'a': 0, 'b': 1}\nx2 = {'c':2,'d':3}\nx3 = {'e':4,'f':5}\n\nchainmap = ChainMap(x1,x2,x3)\n\nprint(chainmap)\n```", "```py\nChainMap({'a': 0, 'b': 1}, {'c': 2, 'd': 3}, {'e': 4, 'f': 5})\n```", "```py\nprint(chainmap['a'])\n```", "```py\n0\n```", "```py\nprint(chainmap.values())\n```", "```py\nValuesView(ChainMap({'a': 0, 'b': 1}, {'c': 2, 'd': 3}, {'e': 4, 'f': 5}))\n```", "```py\nprint(chainmap.keys())\n```", "```py\nKeysView(ChainMap({'a': 0, 'b': 1}, {'c': 2, 'd': 3}, {'e': 4, 'f': 5}))\n```", "```py\nchainmap1 = chainmap.new_child({'g':6,'h':7})\nprint(chainmap1)\n```", "```py\nChainMap({'g': 6, 'h': 7}, {'a': 0, 'b': 1}, {'c': 2, 'd': 3}, {'e': 4, 'f': 5})\n```", "```py\nfrom collections import namedtuple\n```", "```py\nband = namedtuple('Country',['name','capital','famousband'])\n```", "```py\nval = band(\"south korea\",\"Seoul\",\"BTS\")\nprint(val)\n```", "```py\nCountry(name='south korea', capital='Seoul', famousband='BTS')\n```", "```py\nprint(val[0])\n```", "```py\n'south korea'\n```", "```py\nprint(val.name)\n```", "```py\n'south korea'\n```", "```py\nfrom collections import deque\n```", "```py\nqueue = deque([4,5,6])\nprint(queue)\n```", "```py\ndeque([4, 5, 6])\n```", "```py\nqueue.append(7)\nprint(queue)\n```", "```py\ndeque([4, 5, 6, 7])\n```", "```py\nqueue.appendleft(3)\n\nprint(queue)\n```", "```py\ndeque([3, 4, 5, 6, 7])\n```", "```py\nqueue.pop()\nprint(queue)\n```", "```py\ndeque([3, 4, 5, 6])\n```", "```py\nqueue.popleft()\nprint(queue)\n```", "```py\ndeque([4, 5, 6])\n```"]