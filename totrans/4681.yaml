- en: Building a Flask API to Automatically Extract Named Entities Using SpaCy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SpaCy 自动提取命名实体的 Flask API
- en: 原文：[https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html](https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html](https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [注释](#comments)'
- en: '**By [Susan Li](https://www.linkedin.com/in/susanli/), Sr. Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[Susan Li](https://www.linkedin.com/in/susanli/)，高级数据科学家**'
- en: '![Figure](../Images/06957073c64dec6ad611e5c88f73a537.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/06957073c64dec6ad611e5c88f73a537.png)'
- en: 'Photo credit: Pixabay'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Pixabay
- en: The overwhelming amount of unstructured text data available today provides a
    rich source of information if the data can be structured. [Named-entity Recognition
    (NER](https://en.wikipedia.org/wiki/Named-entity_recognition))(also known as Named-entity
    Extraction) is one of the first steps to build knowledge from semi-structured
    and unstructured text sources.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目前大量的非结构化文本数据提供了丰富的信息源，如果数据可以被结构化的话。[命名实体识别 (NER)](https://en.wikipedia.org/wiki/Named-entity_recognition)（也称为命名实体提取）是从半结构化和非结构化文本源中构建知识的第一步之一。
- en: Only after NER, we will be able to reveal at a minimum, who, and what, the information
    contains. As a result, a data science team would be able to see a structured representation
    of all of the the names of people, companies, locations and so on in a corpus
    that could serve as a point of departure for further analysis and investigation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在进行 NER 后，我们才能至少揭示信息中包含了谁和什么。因此，数据科学团队将能够看到一个结构化的表示，展示一个语料库中所有人名、公司名、地点等的名称，这可以作为进一步分析和研究的起点。
- en: In the [previous post](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da),
    we have learned and practiced [how to build named entity recognizer using NLTK
    and spaCy](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da).
    To take steps further, create something useful, this article will cover how to
    develop and deploy a simple named entities extractor using spaCy and serve it
    with a Flask API in python*.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [上一篇文章](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da)中，我们学习并实践了
    [如何使用 NLTK 和 spaCy 构建命名实体识别器](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da)。为了更进一步，创建有用的东西，本文将介绍如何使用
    spaCy 开发和部署一个简单的命名实体提取器，并通过 Flask API 用 Python 服务它*。
- en: A Flask API
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个 Flask API
- en: 'Our goal is to build an API that we provide text, for example, a New York Times
    article (or any article) as input, our named entity extractor will then identify
    and extract four types of entities: organization, person, location and money.
    The basic architecture looks like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是构建一个 API，我们提供文本，例如《纽约时报》文章（或任何文章）作为输入，我们的命名实体提取器将识别并提取四种类型的实体：组织、人物、地点和金额。基本架构如下：
- en: '![Figure](../Images/585cde79738ef16ac1a52385245ccd80.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/585cde79738ef16ac1a52385245ccd80.png)'
- en: Figure 1
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1
- en: 'To build the API, we will need to create two files:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建 API，我们需要创建两个文件：
- en: '`index.html` to handle the template of the API.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.html` 用于处理 API 的模板。'
- en: '`app.py` to handle the requests and return the output file.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`app.py` 用于处理请求并返回输出文件。'
- en: 'And the final product will look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最终产品将如下所示：
- en: '![Figure](../Images/989fa6eb53ead63fcf32dca581c1051d.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/989fa6eb53ead63fcf32dca581c1051d.png)'
- en: Figure 2
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2
- en: 'Let’s start building the API and create two files step-by-step. Our project
    folder structure is like below:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从构建 API 开始，逐步创建两个文件。我们的项目文件夹结构如下：
- en: Our project is located in ***Named-Entity-Extractor ***folder.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的项目位于 ***Named-Entity-Extractor ***文件夹中。
- en: '![Figure](../Images/1895f7c9d56de5641d784aed7d26a6c4.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/1895f7c9d56de5641d784aed7d26a6c4.png)'
- en: Figure 3
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3
- en: The `templates` directory is in the same folder as the app.py in which it is
    created.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates` 目录与创建的 app.py 文件在同一文件夹中。'
- en: '![Figure](../Images/c7f1e889a9f905b696473b42f2c7489a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/c7f1e889a9f905b696473b42f2c7489a.png)'
- en: Figure 4
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4
- en: The index.html is located in the templates folder.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: index.html 位于 templates 文件夹中。
- en: '**index.html**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**index.html**'
- en: We name our App as “Named Entity Extractor”
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将我们的应用命名为“命名实体提取器”
- en: Use [BootstrapCDN](https://www.bootstrapcdn.com/), copy-paste the [stylesheet](https://getbootstrap.com/docs/4.1/getting-started/introduction/) `<link>` into
    our `<head>`before all other stylesheets to load our CSS.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get Bootstrap’s navigation header, the navbar from [a template for a simple
    informational website](https://getbootstrap.com/docs/4.3/examples/jumbotron/#).
    It includes a large callout called a [jumbotron](https://getbootstrap.com/docs/4.0/components/jumbotron/) and
    three supporting pieces of content.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy-paste the [navbar](https://getbootstrap.com/docs/4.0/components/navbar/) code
    from the template’s [source code](http://view-source:https//getbootstrap.com/docs/4.3/examples/jumbotron/).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap requires a container element to wrap site contents and house our grid
    system.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our case, for the first container, we will create a vertical form with two
    input fields, one “Clear” button, and one “Submit” button.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Textual form controls are styled with the `form-control` class.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are giving our users four taskoptions (a.k. a named entity extraction tasks)
    to choose from, they are: ***Organization***, ***Person***, ***Geopolitical*** & ***Money***.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second container provides contextual feedback messages for our user’s action,
    that is the results of named entity extraction.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not only we want to print out named entity extraction results to our user, we
    also want to print out the number of results for each of named entity extractions.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy-paste the [JavaScript](https://getbootstrap.com/docs/4.1/getting-started/introduction/) in
    the `<script>`s near the end of our html page, right before the closing `</body>` tag,
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**app.py**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our `app.py` file is rather simple and easy to understand. It contains the main
    code that will be executed by the Python interpreter to run the Flask web application,
    it includes the spaCy code for recognizing named entities.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: We ran our app as a single module; thus we initialized a new Flask instance
    with the argument `__name__` to let Flask know that it can find the HTML template
    folder (`templates`) in the same directory where it is located.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the route decorator (`@app.route('/')`) to specify the URL that should
    trigger the execution of the `index` function.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our `index` function simply rendered the `index.html` HTML file, which is located
    in the `templates` folder.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the `process` function, we apply nlp to the raw text user will enter,
    and extract pre-determined named entities (***Organization***, ***Person***, ***Geopolitical*** & ***Money***)
    from the raw text.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `POST` method to transport the form data to the server in the message
    body. Finally, by setting the `debug=True` argument inside the `app.run` method,
    we further activated Flask's debugger.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use the `run` function to only run the application on the server when this
    script is directly executed by the Python interpreter, which we ensured using
    the `if` statement with` __name__ == '__main__'`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are almost there!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Try our API
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Start the ***Command Prompt*.**
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigate to our ***Named-Entity-Extractor*** folder.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/64bb7dcffead7af0d6de91d0cb17737c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Figure 5
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your Web browser, copy-paste “[http://127.0.0.1:5000/](http://127.0.0.1:5000/)”
    into the address bar, and we will see this form:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/d4ef9a0f40e572fa1a51bea04c77bfde.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Figure 6
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'I copy-pasted a few paragraphs of an article from [nytimes](https://www.nytimes.com/2019/03/01/world/canada/trudeau-scandal-snc-lavalin.html),
    it is a Canadian story:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/b2e2dd8f627bc6d86d5a2d258b4cc421.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: Figure 7
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'Select “***Organization***” under “Select task”, then click “Submit”, this
    is what we get:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/790997a85dbe822e89de2695edd43287.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
- en: Figure 8
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: 'Nice. Let’s try “***Person***” entity:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/3a13f59dc8cfc3263caf0d394371f43b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: Figure 9
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '“***Geopolitical***” entity:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/a34c95635d45bceac6a497c5b6d382cc.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: Figure 10
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '“***Money***” entity:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/9010368909f99c58dccbbd0c57633cb6.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Figure 11
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: We are done!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: If you followed the above steps and made it here, congratulations! You have
    created a simple but functioning named entity extractor at zero cost! When you
    look back, there were only two files we need to create. and all we need are open
    source libraries and learning how to use them to create these two files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: By building an app like this, you have learned new skills and using these skills
    to creates something useful.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The complete source code is available at this [repository](https://github.com/susanli2016/Named-Entity-Extractor).
    Happy Monday!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Susan Li](https://www.linkedin.com/in/susanli/)** is changing the world,
    one article at a time. She is a Sr. Data Scientist, located in Toronto, Canada.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/building-a-flask-api-to-automatically-extract-named-entities-using-spacy-2fd3f54ebbc6).
    Reposted with permission.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[All you need to know about text preprocessing for NLP and Machine Learning](/2019/04/text-preprocessing-nlp-machine-learning.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building NLP Classifiers Cheaply With Transfer Learning and Weak Supervision](/2019/03/building-nlp-classifiers-cheaply-transfer-learning-weak-supervision.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Introduction on Time Series Forecasting with Simple Neural Networks & LSTM](/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How You Can Use Machine Learning to Automatically Label Data](https://www.kdnuggets.com/2022/02/machine-learning-automatically-label-data.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何利用机器学习自动标记数据](https://www.kdnuggets.com/2022/02/machine-learning-automatically-label-data.html)'
- en: '[Creating a Web Application to Extract Topics from Audio with Python](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 创建一个从音频中提取主题的 Web 应用程序](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
- en: '[Getting Started with spaCy for NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 spaCy 进行 NLP 入门](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
- en: '[Natural Language Processing with spaCy](https://www.kdnuggets.com/2023/01/natural-language-processing-spacy.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 spaCy 的自然语言处理](https://www.kdnuggets.com/2023/01/natural-language-processing-spacy.html)'
- en: '[OpenAI’s Whisper API for Transcription and Translation](https://www.kdnuggets.com/2023/06/openai-whisper-api-transcription-translation.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI 的 Whisper API 用于转录和翻译](https://www.kdnuggets.com/2023/06/openai-whisper-api-transcription-translation.html)'
- en: '[Meet Gorilla: UC Berkeley and Microsoft’s API-Augmented LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[认识 Gorilla：加州大学伯克利分校和微软的 API 增强 LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
