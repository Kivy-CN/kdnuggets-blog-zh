["```py\nimport os\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import mean_squared_error\n```", "```py\n# Load the training and test datasets from CSV files\ntrain = pd.read_csv('train.csv')\ntest = pd.read_csv('test.csv')\n\n# Display the first few rows of the training dataset to understand its structure\nprint(train.head())\n```", "```py\n# Check information about the training and test datasets, such as data types and missing values\nprint(train.info())\nprint(test.info())\n```", "```py\n <class>RangeIndex: 700 entries, 0 to 699\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   x       700 non-null    float64\n 1   y       699 non-null    float64\ndtypes: float64(2)\nmemory usage: 11.1 KB\n\n <class>RangeIndex: 300 entries, 0 to 299\nData columns (total 2 columns):\n #   Column  Non-Null Count  Dtype  \n---  ------  --------------  -----  \n 0   x       300 non-null    int64  \n 1   y       300 non-null    float64\ndtypes: float64(1), int64(1)\nmemory usage: 4.8 KB</class></class>\n```", "```py\ntrain = train.dropna()\n```", "```py\nduplicates_exist = train.duplicated().any()\nprint(duplicates_exist)\n```", "```py\nFalse\n```", "```py\n#Extracting x and y columns for train and test dataset\nX_train = train['x']\ny_train = train['y']\nX_test = test['x']\ny_test = test['y']\nprint(X_train.shape)\nprint(X_test.shape)\n```", "```py\n(699, )\n(300, )\n```", "```py\nX_train = X_train.values.reshape(-1, 1)\nX_test = X_test.values.reshape(-1,1)\n```", "```py\nprint(X_train.min(),X_train.max())\n```", "```py\n(0.0, 100.0)\n```", "```py\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)\nprint((X_train.min(),X_train.max())\n```", "```py\n(-1.72857469859145, 1.7275858114641094)\n```", "```py\n# Create a scatter plot\nplt.scatter(X_train, y_train)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Scatter Plot of Train Data')\nplt.grid(True)  # Enable grid\nplt.show() \n```", "```py\n# Create a Linear Regression model\nmodel = LinearRegression()\n\n# Fit the model to the training data \nmodel.fit(X_train, y_train)\n\n# Use the trained model to predict the target values for the test data\npredictions = model.predict(X_test)\n\n# Calculate the mean squared error (MSE) as the evaluation metric to assess model performance\nmse = mean_squared_error(y_test, predictions)\nprint(f'Mean squared error is: {mse:.4f}')\n```", "```py\nMean squared error is: 9.4329\n```", "```py\n# Plot the regression line\nplt.plot(X_test, predictions, color='red', linewidth=2, label='Regression Line')\n\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Linear Regression Model')\nplt.legend()\nplt.grid(True)\nplt.show()\n```"]