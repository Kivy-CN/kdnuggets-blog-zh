["```py\n!pip install deepchecks --upgrade\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Load Data\ncancer_data = pd.read_csv(\"/kaggle/input/cancer-classification/cancer_classification.csv\")\nlabel_col = 'benign_0__mal_1'\ndf_train, df_test = train_test_split(cancer_data, stratify=cancer_data[label_col], random_state=0)\n```", "```py\nfrom deepchecks.tabular import Dataset\n\nds_train = Dataset(df_train, label=label_col, cat_features=[])\nds_test =  Dataset(df_test,  label=label_col, cat_features=[])\n```", "```py\nfrom deepchecks.tabular.suites import data_integrity\n\ninteg_suite = data_integrity()\ninteg_suite.run(ds_train)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\n\n# Train Model\nclf1 = LogisticRegression(random_state=1,max_iter=10000)\nclf2 = RandomForestClassifier(n_estimators=50, random_state=1)\nclf3 = GaussianNB()\n\nV_clf = VotingClassifier(\n    estimators=[('lr', clf1), ('rf', clf2), ('gnb', clf3)],\n    voting='hard')\n\nV_clf.fit(df_train.drop(label_col, axis=1), df_train[label_col]);\n```", "```py\nfrom deepchecks.tabular.suites import model_evaluation\n\nevaluation_suite = model_evaluation()\nsuite_result = evaluation_suite.run(ds_train, ds_test, V_clf)\nsuite_result.show()\n```", "```py\nsuite_result.to_json()\n```", "```py\nfrom deepchecks.tabular.checks import LabelDrift\ncheck = LabelDrift()\nresult = check.run(ds_train, ds_test)\nresult\n```", "```py\nresult.value\n```", "```py\n{'Drift score': 0.0, 'Method': \"Cramer's V\"}\n```"]