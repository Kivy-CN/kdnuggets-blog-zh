["```py\nfrom sklearn.tree import DecisionTreeRegressor\n\ntree_to_boost = DecisionTreeRegressor(random_state=123)\n\n```", "```py\nfrom sklearn.ensemble import AdaBoostClassifier\n\nboosting_trees_model = AdaBoostClassifier(base_estimator = tree_to_boost, random_state=123)\n\n```", "```py\ntree_to_boost.get_params()\n\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\ntrees_params = {‘base_estimator__max_depth’: [80,100,120,150],\n‘base_estimator__max_features’: [0.93,0.95,0.97], \n‘n_estimators’: [1200]}\n\nboosting_tree_grid = GridSearchCV(estimator=boosting_trees_modeel, param_grid=tree_params, cv=5)\n\n```", "```py\nboosting_tree_grid.fit(X_train, y_train)\n\n```", "```py\nboosting_tree_grid.best_params_\n\n```", "```py\nlogistic_regression_model.coef_[class_number]\n\n```", "```py\nfeature_importance_df = pd.DataFrame({‘feature’: logistic_regression_model.columns,\n\n‘coefA’: np.abs(logistic_regression_model.coef_[0]),\n\n‘coefB’: np.abs(logistic_regression_model.coef_[1]),\n\n‘coefC’: np.abs(logistic_regression_model.coef_[2]),\n\n‘coefD’: np.abs(logistic_regression_model.coef_[3]),})\n\n```", "```py\nfrom sklearn import metrics\n\nskplt.metrics.plot_confusion_matrix(y_test, y_predictions)\n\nplt.show()\n\n```"]