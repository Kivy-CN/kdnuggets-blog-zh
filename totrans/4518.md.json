["```py\n[[110   6]\n [  6 118]]\n              precision    recall  f1-score   support\n\n           0       0.95      0.95      0.95       116\n           1       0.95      0.95      0.95       124\n\n    accuracy                           0.95       240\n   macro avg       0.95      0.95      0.95       240\nweighted avg       0.95      0.95      0.95       240\n```", "```py\n[[110   6]\n [  6 118]]\n              precision    recall  f1-score   support\n\n           0       0.95      0.95      0.95       116\n           1       0.95      0.95      0.95       124\n\n    accuracy                           0.95       240\n   macro avg       0.95      0.95      0.95       240\nweighted avg       0.95      0.95      0.95       240\n```", "```py\n[[115   1]\n [  6 118]]\n              precision    recall  f1-score   support\n\n           0       0.95      0.99      0.97       116\n           1       0.99      0.95      0.97       124\n\n    accuracy                           0.97       240\n   macro avg       0.97      0.97      0.97       240\nweighted avg       0.97      0.97      0.97       240\n```", "```py\n[[115   1]\n [  7 117]]\n              precision    recall  f1-score   support\n\n           0       0.94      0.99      0.97       116\n           1       0.99      0.94      0.97       124\n\n    accuracy                           0.97       240\n   macro avg       0.97      0.97      0.97       240\nweighted avg       0.97      0.97      0.97       240\n```", "```py\n100%|██████████| 80/80 [03:07<00:00,  2.02s/it, best loss: -0.9339285714285713]{'criterion': 1,\n 'max_depth': 120.0,\n 'max_features': 2,\n 'min_samples_leaf': 0.0006380325074247448,\n 'min_samples_split': 0.06603114636418073,\n 'n_estimators': 1}\n```", "```py\n[[114   2]\n [ 11 113]]\n              precision    recall  f1-score   support\n\n           0       0.91      0.98      0.95       116\n           1       0.98      0.91      0.95       124\n\n    accuracy                           0.95       240\n   macro avg       0.95      0.95      0.95       240\nweighted avg       0.95      0.95      0.95       240\n```", "```py\nGeneration 1 - Current best internal CV score: 0.9392857142857143\nGeneration 2 - Current best internal CV score: 0.9392857142857143\nGeneration 3 - Current best internal CV score: 0.9392857142857143\nGeneration 4 - Current best internal CV score: 0.9392857142857143\nGeneration 5 - Current best internal CV score: 0.9392857142857143\n\nBest pipeline: RandomForestClassifier(CombineDFs(input_matrix, input_matrix), criterion=entropy, max_depth=406, max_features=log2, min_samples_leaf=4, min_samples_split=5, n_estimators=617)\n```", "```py\n0.9708333333333333\n```", "```py\nMax Accuracy Registred: 0.932 using {'activation': 'relu', 'neurons': 35, 'optimizer': 'Adam'}\n```", "```py\n[[115   1]\n [  8 116]]\n              precision    recall  f1-score   support\n\n           0       0.93      0.99      0.96       116\n           1       0.99      0.94      0.96       124\n\n    accuracy                           0.96       240\n   macro avg       0.96      0.96      0.96       240\nweighted avg       0.96      0.96      0.96       240\n```", "```py\nBase Accuracy vs Manual Search 0.0000%.\nBase Accuracy vs Random Search 2.1930%.\nBase Accuracy vs Grid Search 1.7544%.\nBase Accuracy vs Bayesian Optimization Accuracy -0.4386%.\nBase Accuracy vs Evolutionary Algorithms 2.1930%.\nBase Accuracy vs Optimized ANN 1.3158%.\n```"]