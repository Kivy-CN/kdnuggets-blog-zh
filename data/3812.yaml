- en: How to Make Documenting Code Easier
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何简化代码文档
- en: 原文：[https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html](https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html](https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html)
- en: '![How to Make Documenting Code Easier](../Images/30bb3bcc2afb15759ced4a29cca6cab3.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何简化代码文档](../Images/30bb3bcc2afb15759ced4a29cca6cab3.png)'
- en: Image by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由编辑提供
- en: Documentation is one of the tasks programmers dread the most. I mean, we are
    programmers and not writers anyway. It is well-known that programmers are great
    and writing code but could be better at explaining their thought processes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 文档是程序员最讨厌的任务之一。我的意思是，我们是程序员而不是作家。众所周知，程序员在编写代码方面很出色，但在解释他们的思维过程方面可能还需改进。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: That's why we hate writing documentation so much. We need to explain our thought
    processes in words for others to understand. And that's always a challenging task.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们如此厌恶编写文档的原因。我们需要用文字解释我们的思维过程，以便他人理解。这总是一个具有挑战性的任务。
- en: Regardless, all programmers know the importance of good-written documentation
    and its importance to any coding project's success, whether intended for open-source
    or as a provided project within a team.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，所有程序员都知道良好文档的重要性以及它对任何编码项目成功的重要性，无论是用于开源还是作为团队内部的项目。
- en: Documenting the writing code steps and the justifications of some design decisions
    are beneficial for people using the code and those who wrote it when it's time
    to add/remove new features.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 记录编写代码的步骤和一些设计决策的理由，对使用代码的人和编写代码的人在添加/删除新功能时都是有益的。
- en: In software engineering, writing documentation generally refers to the process
    where the programmer of the leading code developer writes a script explaining
    in detail what the code does, its goal, and how it achieves that. The main reason
    programmers hate to write documentation is that, as a programmer, you would instead
    write code than an explanation of it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件工程中，编写文档通常指的是主要代码开发者编写脚本，详细说明代码的功能、目标以及如何实现这一目标。程序员讨厌编写文档的主要原因是，作为程序员，你更愿意编写代码而不是解释它。
- en: Make a Roadmap before you Start Coding
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开始编码之前制定一份路线图
- en: This may suppose people to read, but draft the roadmap of your documentation
    before you even start to write your code. This will help you in two ways, it will
    make it easier for you to know what to add to the documentation and will be your
    guide when you start writing the code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能需要读者注意，但在你开始编写代码之前，先起草文档的路线图。这将帮助你两方面，一方面它将让你更容易知道需要在文档中添加什么，另一方面在你开始编写代码时，它将成为你的指南。
- en: What I mean here by "roadmap" is the skeleton of your documentation, as in the
    different sections you will explain. For example, if you look at the documentation
    for Matplotlib, it has four main sections, the installation, learning materials,
    3rd party packages, and how to contribute to the source code. Within these sections,
    there are further subsections with more details.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我这里所说的“路线图”是你文档的骨架，即你将要解释的不同部分。例如，如果你查看 Matplotlib 的文档，它有四个主要部分：安装、学习材料、第三方包，以及如何贡献源代码。在这些部分中，还有更详细的子部分。
- en: Draft as you go
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边做边草拟
- en: Once you have your documentation skeleton done and start writing your code,
    try writing both the code and the documentation draft in parallel. I know that
    most of us, data scientists, would say, "I will just write the full documentation
    when I am done with the code" though I understand the thought process behind that
    (which is to focus on the code writing), I think it makes writing the documentation
    more of a hassle.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了文档框架并开始编写代码，尝试同时编写代码和文档草稿。我知道我们大多数数据科学家会说，“我会在完成代码后再写完整的文档”，虽然我理解这种想法（即专注于代码编写），但我认为这会使编写文档变得更加麻烦。
- en: Drafting the documentation as you write the code will help you make sense of
    the decisions you made along the way, what worked and what didn't. In the end,
    when you're editing and finetuning your documentation, you can either choose to
    keep what didn't work as a way for others to see how you got to the final product
    or skip that part and focus on what worked. Personally, I like to keep what didn't
    work because it is as important as what did work.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时起草文档将帮助你理解你在过程中做出的决策，什么有效，什么无效。最后，当你编辑和调整文档时，你可以选择保留那些不起作用的部分，作为展示你如何达到最终产品的方式，或者跳过那些部分，专注于有效的部分。就个人而言，我喜欢保留那些无效的部分，因为它们和有效的部分一样重要。
- en: Use your Comments as Hints for Further Explanation
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的评论作为进一步解释的提示
- en: Comments are critical for different reasons, but they are not replacements for
    complete documentation. I like to think of the comments or the docstrings in the
    code as the headlines of what the part of the documentation that will explain
    the different functionalities of the code. The comments will give the user the
    minimal information they need to be able to use the different functions and/or
    classes. At the same time, the documentation will elaborate more on how the function
    works and some use cases for the said function.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 评论对不同的原因至关重要，但它们不能替代完整的文档。我喜欢将代码中的评论或文档字符串看作是文档中将解释代码不同功能部分的标题。评论将为用户提供他们使用不同函数和/或类所需的最少信息。与此同时，文档将进一步阐述函数的工作原理以及该函数的一些用例。
- en: Write more Readable Code
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写更具可读性的代码
- en: Do you hate writing lengthy, detailed documentation? I have a solution for you,
    and if your code is well-organized, clear, and well-written, you won't need lengthy
    documentation to explain how it works; a few examples and tutorials might do the
    trick.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否厌烦编写详细的长文档？我有一个解决方案，如果你的代码组织良好、清晰且编写规范，你不需要详细的文档来解释它是如何工作的；几个示例和教程可能就能达到目的。
- en: In a previous article, we talked in-depth about how you can make your code more
    readable. Fortunately, writing readable code is a skill that can be practiced
    until mastered.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一篇文章中，我们深入讨论了如何使你的代码更具可读性。幸运的是，编写可读代码是一种可以通过练习直到掌握的技能。
- en: So, more readable code leads to shorter documentation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，更具可读性的代码会导致更简短的文档。
- en: Read more Good Documentation
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 阅读更多优秀的文档
- en: If you want to learn how to write good documentation that is clear, concise,
    and to the point, read more good documentation. Here, I mean read with the intention
    of learning the style and process of writing good documentation rather than collecting
    information about how to use the code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想学习如何编写清晰、简洁且切中要点的优秀文档，就要多阅读优秀的文档。在这里，我指的是带着学习编写优秀文档的风格和过程的意图去阅读，而不是收集如何使用代码的信息。
- en: Some of the best documentation I read were the Matplotlib, Pandas, and Numpy
    documentation. Both are clear, concise, and well-organized. As data scientists,
    we have to use different packages for different algorithms and applications. I
    am sure some struck you as better than others, probably for various reasons. Reflect
    on why you thought some packages' documentation was better than others. That will
    help you know what to avoid when writing your own documentation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我读过的一些最佳文档是 Matplotlib、Pandas 和 Numpy 的文档。这些文档都清晰、简洁且组织良好。作为数据科学家，我们必须使用不同的包来处理不同的算法和应用。我相信你一定觉得某些文档比其他的更好，可能有各种原因。思考一下为什么你认为某些包的文档比其他的更好。这将帮助你了解在编写自己文档时应该避免哪些问题。
- en: Ask for Feedback, Reread and Revise
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻求反馈、重新阅读并修订
- en: One great tool to produce better documentation is to ask for feedback from others.
    This can help you know what the users need/ want to be more precise, what is missing,
    and how your documentation can improve overall.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 产生更好文档的一个好方法是向他人寻求反馈。这可以帮助你了解用户需要/想要更准确的信息、缺少了什么，以及你的文档如何整体改善。
- en: Final Thoughts
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的想法
- en: Nowadays, more than writing robust code is required; to prove your capabilities
    and how well you're familiar with the project and the field, you will need to
    provide well-written documentation and highlight how your code work and how it
    can be used.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，仅仅编写稳健的代码已经不够；为了证明你的能力以及你对项目和领域的熟悉程度，你需要提供撰写良好的文档，并突出显示你的代码如何工作以及如何使用。
- en: Unfortunately, most of us would rather spend more time writing actual code than
    working on the documentation. In this article, we went through some steps that
    can make the process of writing code documentation easier and help you produce
    better-quality documentation.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们中的大多数人宁愿花更多的时间编写实际代码，而不是处理文档。在这篇文章中，我们探讨了一些可以使编写代码文档过程更容易的步骤，并帮助你生产出更高质量的文档。
- en: '**[Sara Metwalli](https://www.linkedin.com/in/sara-a-metwalli/)** is a Ph.D.
    candidate at Keio University researching ways to test and debug quantum circuits.
    I am an IBM research intern and Qiskit advocate helping build a more quantum future.
    I am also a writer on Medium, Built-in, She Can Code, and KDN writing articles
    about programming, data science, and tech topics. I am also a lead in the Woman
    Who Code Python international chapter, a train enthusiast, a traveler, and a photography
    lover.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Sara Metwalli](https://www.linkedin.com/in/sara-a-metwalli/)** 是庆应义塾大学的博士候选人，研究测试和调试量子电路的方法。我是IBM的研究实习生和Qiskit倡导者，致力于建设一个更加量子化的未来。我还是Medium、Built-in、She
    Can Code和KDN的作者，撰写关于编程、数据科学和技术主题的文章。我还是“Woman Who Code Python”国际章节的负责人，火车爱好者，旅行者和摄影爱好者。'
- en: More On This Topic
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关话题
- en: '[Ploomber vs Kubeflow: Making MLOps Easier](https://www.kdnuggets.com/2022/02/ploomber-kubeflow-mlops-easier.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Ploomber与Kubeflow：让MLOps更简单](https://www.kdnuggets.com/2022/02/ploomber-kubeflow-mlops-easier.html)'
- en: '[How to Make Python Code Run Incredibly Fast](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何让Python代码运行得不可思议的快](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)'
- en: '[Here Are the AI Tools I Use Along With My Skills to Make $10,000…](https://www.kdnuggets.com/2023/07/ai-tools-along-skills-make-10000-monthly-bs.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[这些是我用来赚取$10,000的AI工具及技能…](https://www.kdnuggets.com/2023/07/ai-tools-along-skills-make-10000-monthly-bs.html)'
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用Pandas制作美观的互动可视化的最简单方法](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
- en: '[Fake It Till You Make It: Generating Realistic Synthetic Customer Datasets](https://www.kdnuggets.com/2022/01/fake-realistic-synthetic-customer-datasets-projects.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[假装直到成功：生成逼真的合成客户数据集](https://www.kdnuggets.com/2022/01/fake-realistic-synthetic-customer-datasets-projects.html)'
- en: '[The Not-so-Sexy SQL Concepts to Make You Stand Out](https://www.kdnuggets.com/2022/02/not-so-sexy-sql-concepts-stand-out.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[那些并不性感的SQL概念，让你脱颖而出](https://www.kdnuggets.com/2022/02/not-so-sexy-sql-concepts-stand-out.html)'
