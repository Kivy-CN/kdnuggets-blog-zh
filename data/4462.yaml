- en: Simplified Mixed Feature Type Preprocessing in Scikit-Learn with Pipelines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用管道在Scikit-Learn中简化混合特征类型预处理
- en: 原文：[https://www.kdnuggets.com/2020/06/simplifying-mixed-feature-type-preprocessing-scikit-learn-pipelines.html](https://www.kdnuggets.com/2020/06/simplifying-mixed-feature-type-preprocessing-scikit-learn-pipelines.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/06/simplifying-mixed-feature-type-preprocessing-scikit-learn-pipelines.html](https://www.kdnuggets.com/2020/06/simplifying-mixed-feature-type-preprocessing-scikit-learn-pipelines.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: 'Let''s say we want to perform mixed feature type preprocessing in Python. For
    our purposes, let''s say this includes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要在Python中执行混合特征类型的预处理。为了我们的目的，假设这包括：
- en: '*scaling* of numeric values'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缩放*数值型值'
- en: '*transforming* of categorical values to one-hot encoded'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将*分类值转换为独热编码'
- en: '*imputing* all missing values'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*填充*所有缺失值'
- en: Let's further say that we want this to be as painless, automated, and integrated
    into our machine learning workflow as possible.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步说，我们希望这尽可能地无痛、自动化，并集成到我们的机器学习工作流中。
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 在IT方面支持你的组织'
- en: '* * *'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In a Python machine learning ecosystem, previously this could have been accomplished
    with a mix of directly manipulating Pandas DataFrames and/or using Numpy ndarray
    operations, perhaps alongside some Scikit-learn modules, depending on one's preferences.
    While these would still be perfectly acceptable approaches, this can now also
    all be done in Scikit-learn alone. With this approach, it can be almost fully
    automated, and it can be integrated into a Scikit-learn pipeline for seamless
    implementation and easier reproducibility.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python机器学习生态系统中，以前可能通过直接操作Pandas DataFrames和/或使用Numpy ndarray操作，可能还结合一些Scikit-learn模块来实现，根据个人的偏好。虽然这些方法仍然完全可以接受，但现在所有这些操作也可以仅通过Scikit-learn完成。采用这种方法，它几乎可以完全自动化，并可以集成到Scikit-learn管道中，实现无缝实施和更容易的重现性。
- en: So let's see how we can use Scikit-learn to accomplish all of the above with
    ease.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看如何利用Scikit-learn轻松完成上述所有操作。
- en: '![Header](../Images/bb9d35929f5f6574d6948a51e40aa9ec.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Header](../Images/bb9d35929f5f6574d6948a51e40aa9ec.png)'
- en: 'First, the imports of everything we will need throughout:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导入我们在整个过程中所需的一切：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: For demonstration purposes, let's use the Titanic dataset. I know, I know...
    boring. But it has a mix of numeric and categorical variables, it is easy to understand,
    and most people have some familiarity with it. So let's fetch the data, read it
    in, and have a quick look at it to understand how our feature preprocessing relates
    to our specific data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，我们使用泰坦尼克号数据集。我知道，我知道……很无聊。但它混合了数值型和分类变量，易于理解，而且大多数人对它有一定的熟悉度。所以让我们获取数据，读取它，并快速查看一下，以理解我们的特征预处理如何与特定数据相关。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Let's see the feature data types, as a refresher.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下特征数据类型。
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the numeric and non-numeric feature types. We will perform our preprocessing
    on these different types seamlessly and in a somewhat automated manner.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意数值型和非数值型特征类型。我们将以无缝且有些自动化的方式对这些不同类型进行预处理。
- en: Introduced in version 0.20, the [ColumnTransformer](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html)
    is meant to apply Scikit-learn transformers to a single dataset column, be that
    column housed in a Numpy array or Pandas DataFrame.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在0.20版本中引入的[ColumnTransformer](https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html)旨在将Scikit-learn的变换器应用于单个数据集列，无论该列位于Numpy数组还是Pandas
    DataFrame中。
- en: This estimator allows different columns or column subsets of the input to be
    transformed separately and the features generated by each transformer will be
    concatenated to form a single feature space. This is useful for heterogeneous
    or columnar data, to combine several feature extraction mechanisms or transformations
    into a single transformer.
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该估算器允许对输入的不同列或列子集进行单独变换，每个变换器生成的特征将被连接成一个单一的特征空间。这对于异质数据或列数据很有用，以将多个特征提取机制或变换合并为一个变换器。
- en: This means that you are able to apply individual transformers to individual
    columns. This could mean that, specific to the Titanic dataset, perhaps we would
    like to scale numeric columns and one-hot encode categorical columns. It might
    also make sense to fill missing numeric values with its column's median value
    and fill in categorical missing values with a constant immediately prior to our
    feature scaling and encoding.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你能够将单独的变换器应用于单独的列。这可能意味着，对于Titanic数据集，我们可能想要缩放数值列，并对分类列进行独热编码。也可能需要用列的中位数填补缺失的数值，并在特征缩放和编码之前用常数填补缺失的分类值。
- en: To do this, let's crate a pair of `Pipeline` objects, one each for the numeric
    and categorical transformations described.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，让我们创建一对`Pipeline`对象，分别用于上述的数值和分类变换。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now let's add these transformers to a `ColumnTransfer` object. We could either
    specify which columns to apply these transformations to specifically, or we could
    use a column selector to automate this process. Note the line
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将这些变换器添加到`ColumnTransfer`对象中。我们可以指定具体应用这些变换的列，也可以使用列选择器来自动化这个过程。注意这一行
- en: '`from sklearn.compose import make_column_selector as selector`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`from sklearn.compose import make_column_selector as selector`'
- en: from the imports above. In the code below, we are creating a `num_transformer`
    and a `cat_transformer` and directing them to be applied to all columns of type
    `float64` all columns of type `category`, respectively.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述导入中。在下面的代码中，我们创建了一个`num_transformer`和一个`cat_transformer`，并将它们分别应用于所有`float64`类型的列和所有`category`类型的列。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you want this added into a more complete machine learning pipeline which
    includes a classifier, try something like this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将这添加到一个更完整的机器学习管道中，包括一个分类器，可以尝试如下：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure](../Images/c49ad275d70e5ba4534bc39f2b5cb01f.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/c49ad275d70e5ba4534bc39f2b5cb01f.png)'
- en: And off you go. Automated preprocessing in the form of feature scaling, one-hot
    encoding, and missing value imputation as part of your Scikit-learn pipeline with
    minimal effort. I leave the actual transformations and training of the classifier
    (the pipeline execution, if you will) as an exercise for the reader.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。通过最小的努力，自动化预处理包括特征缩放、独热编码和缺失值插补，成为Scikit-learn管道的一部分。我将实际的变换和分类器的训练（如果你愿意的话，就是管道执行）留给读者作为练习。
- en: Aside from the easier reproducibility, automated application of preprocessing
    to training and subsequently testing data in the proper manner, and pipeline integration,
    this approach also allows for easy preprocessing tweaking and modification without
    having to redo earlier sections of a task outright.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了更容易的可重复性、自动化的预处理应用于训练和随后测试数据的正确方式以及管道集成外，这种方法还允许轻松调整和修改预处理，而无需完全重做任务的早期部分。
- en: This won't negate the necessity for thoughtful feature selection, extraction,
    and engineering, but the combination of column transformers and column selectors
    can help easily automate some of the more mundane aspects of your data preprocessing
    tasks.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会否定对特征选择、提取和工程的深思熟虑的必要性，但列变换器和列选择器的组合可以帮助轻松自动化一些数据预处理任务中更为单调的方面。
- en: You can [find more here](https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html)
    on the Scikit-learn website.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[这里找到更多信息](https://scikit-learn.org/stable/auto_examples/compose/plot_column_transformer_mixed_types.html)。
- en: '**Related**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关**：'
- en: '[Notes on Feature Preprocessing: The What, the Why, and the How](/2018/10/notes-feature-preprocessing-what-why-how.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特征预处理笔记：什么，为什么，以及怎么做](/2018/10/notes-feature-preprocessing-what-why-how.html)'
- en: '[Dataset Splitting Best Practices in Python](/2020/05/dataset-splitting-best-practices-python.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的数据集拆分最佳实践](/2020/05/dataset-splitting-best-practices-python.html)'
- en: '[Centroid Initialization Methods for k-means Clustering](/2020/06/centroid-initialization-k-means-clustering.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[k-means聚类的质心初始化方法](/2020/06/centroid-initialization-k-means-clustering.html)'
- en: More On This Topic
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Type I and Type II Errors: What''s the Difference?](https://www.kdnuggets.com/2022/08/type-type-ii-errors-difference.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[I型和II型错误：有什么区别？](https://www.kdnuggets.com/2022/08/type-type-ii-errors-difference.html)'
- en: '[European AI Act: The Simplified Breakdown](https://www.kdnuggets.com/2022/06/european-ai-act-simplified-breakdown.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[欧洲人工智能法案：简化版解析](https://www.kdnuggets.com/2022/06/european-ai-act-simplified-breakdown.html)'
- en: '[SQL Simplified: Crafting Modular and Understandable Queries with CTEs](https://www.kdnuggets.com/sql-simplified-crafting-modular-and-understandable-queries-with-ctes)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL简化版：使用CTE编写模块化且易于理解的查询](https://www.kdnuggets.com/sql-simplified-crafting-modular-and-understandable-queries-with-ctes)'
- en: '[Unify Batch and ML Systems with Feature/Training/Inference Pipelines](https://www.kdnuggets.com/2023/09/hopsworks-unify-batch-ml-systems-feature-training-inference-pipelines)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用特征/训练/推断管道统一批处理和机器学习系统](https://www.kdnuggets.com/2023/09/hopsworks-unify-batch-ml-systems-feature-training-inference-pipelines)'
- en: '[Feature Store Summit 2022: A free conference on Feature Engineering](https://www.kdnuggets.com/2022/10/hopsworks-feature-store-summit-2022-free-conference-feature-engineering.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特征存储峰会2022：关于特征工程的免费会议](https://www.kdnuggets.com/2022/10/hopsworks-feature-store-summit-2022-free-conference-feature-engineering.html)'
- en: '[Easy Guide To Data Preprocessing In Python](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python数据预处理简单指南](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
