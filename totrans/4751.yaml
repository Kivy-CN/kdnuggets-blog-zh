- en: 'Text Preprocessing in Python: Steps, Tools, and Examples'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/11/text-preprocessing-python.html](https://www.kdnuggets.com/2018/11/text-preprocessing-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/11/text-preprocessing-python.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By Olga Davydova, [Data Monsters](https://datamonsters.com)**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After a text is obtained, we start with text normalization. Text normalization
    includes:'
  prefs: []
  type: TYPE_NORMAL
- en: converting all letters to lower or upper case
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: converting numbers into words or removing numbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: removing punctuations, accent marks and other diacritics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: removing white spaces
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expanding abbreviations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: removing stop words, sparse terms, and particular words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: text canonicalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: We will describe text normalization steps in detail below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b57451b11f6a00cd631ccd21101e282.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Convert text to lowercase**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Example 1\. Convert text to lowercase**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Remove numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove numbers if they are not relevant to your analyses. Usually, regular expressions
    are used to remove numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 2\. Numbers removing**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Remove punctuation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code removes this set of symbols [!”#$%&’()*+,-./:;<=>?@[\]^_`{|}~]:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 3\. Punctuation removal**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Remove whitespaces
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To remove leading and ending spaces, you can use the *strip()* function:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 4\. White spaces removal**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tokenization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tokenization is the process of splitting the given text into smaller pieces
    called tokens. Words, numbers, punctuation marks, and others can be considered
    as tokens. In [this table](https://docs.google.com/spreadsheets/d/1-9rMhfcmxFv2V2Q5ZWn1FfLDZZYsuwb1eoSp9CiEEOg/edit?usp=sharing) (“Tokenization”
    sheet) several tools for implementing tokenization are described.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table 1: **Tokenization tools**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name, Developer, Initial release** | **Features** | **Programming languages**
    | **License** |'
  prefs: []
  type: TYPE_TB
- en: '| [**Natural Language Toolkit (NLTK)**, The University of Pennsylvania, 2001](http://www.nltk.org/index.html)
    | Mac/Unix/Windows support | Python | [Apache License Version 2.0.](http://www.apache.org/licenses/LICENSE-2.0)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Contains many corpora, toy grammars, trained models, etc [1].](http://www.nltk.org/index.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**TextBlob,** Steven Loria, 2013](http://textblob.readthedocs.io/en/dev/)
    | Splitting text into words and sentences | Python | [http://textblob.readthedocs.io/en/dev/license.html](http://textblob.readthedocs.io/en/dev/license.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [WordNet integration [2]](http://textblob.readthedocs.io/en/dev/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Spacy**, Explosion AI, 2016](https://spacy.io/) | Runs on Unix/Linux,
    MacOS/OS X, and Windows. | Python | [MIT License](https://github.com/explosion/spaCy/blob/master/LICENSE)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Neural network models |'
  prefs: []
  type: TYPE_TB
- en: '| [multi-language support [3]](https://spacy.io/usage/facts-figures) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Gensim**, RaRe Technologies, 2009](https://radimrehurek.com/gensim/) |
    Can process large, web-scale corpora | Python | [GNU LGPLv2.1 license](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Runs on Linux, Windows and OS X |'
  prefs: []
  type: TYPE_TB
- en: '| [Vector space modeling and topic modeling [4]](https://radimrehurek.com/gensim/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Apache OpenNLP**, Apache Software Foundation, 2004](https://opennlp.apache.org/)
    | Contains a large number of pre-built models for a variety of languages | Java
    | [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) |'
  prefs: []
  type: TYPE_TB
- en: '| [Includes annotated text resources [5]](https://opennlp.apache.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**OpenNMT**, Yoon Kim, harvardnlp, 2016](http://opennmt.net/) | Is a generic
    deep learning framework mainly specialized in sequence-to-sequence models | Python
    | [MIT License](https://github.com/OpenNMT/OpenNMT/blob/master/LICENSE.md) |'
  prefs: []
  type: TYPE_TB
- en: '| [Can be used either via command line applications, client-server, or libraries.
    [6]](http://opennmt.net/) | Lua |'
  prefs: []
  type: TYPE_TB
- en: '| Has currently 3 main implementations (OpenNMT-lua, OpenNMT-py, OpenNMT-tf)
    |   |'
  prefs: []
  type: TYPE_TB
- en: '| [**General Architecture for Text Engineering (GATE)**, GATE research team,
    University of Sheffield, 1995](https://gate.ac.uk/) | Includes an information
    extraction system | Java | [the GNU licenses and other](http://www.gnu.org/licenses/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Multiple languages support |'
  prefs: []
  type: TYPE_TB
- en: '| [Accepts input in various formats [7]](https://gate.ac.uk/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Apache UIMA**, IBM, Apache Software Foundation, 2006](https://uima.apache.org/)
    | [Contains Addons and Sandbox](https://uima.apache.org/sandbox.html) | Java,
    C++ | [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0) |'
  prefs: []
  type: TYPE_TB
- en: '| Cross-platform |'
  prefs: []
  type: TYPE_TB
- en: '| [REST requests support [8]](https://uima.apache.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Memory-Based Shallow Parser (MBSP)**, Vincent Van Asch, Tom De Smedt,
    2010](https://www.clips.uantwerpen.be/pages/MBSP#tokenizer) | Client-server architecture
    | Python | [GPL](http://www.gnu.org/licenses/gpl.html) |'
  prefs: []
  type: TYPE_TB
- en: '| includes binaries (TiMBL, MBT and MBLEM) Precompiled for Mac OS X |'
  prefs: []
  type: TYPE_TB
- en: '| [Cygwin usage for Windows [9]](https://www.clips.uantwerpen.be/pages/MBSP#tokenizer)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**RapidMiner**, RapidMiner, 2006](https://rapidminer.com/) | Unified platform
    | RapidMiner provides a GUI to design and execute analytical workflows | [AGPL](https://en.wikipedia.org/wiki/Affero_General_Public_License)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Visual workflow design |'
  prefs: []
  type: TYPE_TB
- en: '| Breadth of functionality |'
  prefs: []
  type: TYPE_TB
- en: '| [Broad connectivity [10]](https://rapidminer.com/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**MAchine Learning for LanguagE Toolkit  (MALLET)**, Andrew Kachites McCallum,
    University of Massachusetts Amherst, 2002](http://mallet.cs.umass.edu/) | Includes
    sophisticated tools for document classification and sequence tagging | Java |
    [Common Public License](https://opensource.org/licenses/cpl1.0.php) |'
  prefs: []
  type: TYPE_TB
- en: '| [Support for inference in general graphical models [11]](http://mallet.cs.umass.edu/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Pattern**, T. De Smedt & W. Daeleman,  2012](https://www.clips.uantwerpen.be/pages/pattern-en#parser)
    | Web mining module | Python | [BSD](http://www.linfo.org/bsdlicense.html) |'
  prefs: []
  type: TYPE_TB
- en: '| runs on Windows, Mac, & Linux |'
  prefs: []
  type: TYPE_TB
- en: '| [Multiple languages support [12]](https://www.clips.uantwerpen.be/pages/pattern)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Stanford Tokenizer**, The Stanford Natural Language Processing Group,
    2010](https://nlp.stanford.edu/software/tokenizer.html) | [Tokenizer is not distributed
    separately but is included in several software downloads;](https://nlp.stanford.edu/software/)
    | Java | [GNU General Public License](http://www.gnu.org/licenses/gpl-2.0.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Rate of about 1,000,000 tokens per second, |'
  prefs: []
  type: TYPE_TB
- en: '| [There are a number of options that affect how tokenization is performed
    [13]](https://nlp.stanford.edu/software/tokenizer.html#About) |'
  prefs: []
  type: TYPE_TB
- en: '| [**FreeLing**, TALP Research Center, Universitat Politècnica de Catalunya](http://nlp.lsi.upc.edu/freeling/)
    | Provides language analysis functionalities | C++ | [Affero GNU General Public
    License](http://www.gnu.org/licenses/agpl.html) |'
  prefs: []
  type: TYPE_TB
- en: '| Supports a variety of languages |'
  prefs: []
  type: TYPE_TB
- en: '| Provides a command-line front-end |'
  prefs: []
  type: TYPE_TB
- en: '| [Output formats: XML, JSON, CoNLL [45]](http://nlp.lsi.upc.edu/freeling/)
    |'
  prefs: []
  type: TYPE_TB
- en: Remove stop words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “Stop words” are the most common words in a language like “the”, “a”, “on”,
    “is”, “all”. These words do not carry important meaning and are usually removed
    from texts. It is possible to remove stop words using [Natural Language Toolkit
    (NLTK)](http://www.nltk.org/), a suite of libraries and programs for symbolic
    and statistical natural language processing.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 7\. Stop words removal**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A [scikit-learn](http://scikit-learn.org/stable/) tool also provides a stop
    words list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'It’s also possible to use [spaCy](https://spacy.io/), a free open-source library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Remove sparse terms and particular words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some cases, it’s necessary to remove sparse terms or particular words from
    texts. This task can be done using stop words removal techniques considering that
    any group of words can be chosen as the stop words.
  prefs: []
  type: TYPE_NORMAL
- en: Stemming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stemming is a process of reducing words to their word stem, base or root form
    (for example, books — book, looked — look). The main two algorithms are [Porter
    stemming algorithm](https://tartarus.org/martin/PorterStemmer/) (removes common
    morphological and inflexional endings from words [[14])](https://tartarus.org/martin/PorterStemmer/) and [Lancaster
    stemming algorithm](http://web.archive.org/web/20140827005744/http:/www.comp.lancs.ac.uk/computing/research/stemming/index.htm) (a
    more aggressive stemming algorithm). In the [“Stemming” sheet of the table](https://docs.google.com/spreadsheets/d/1-9rMhfcmxFv2V2Q5ZWn1FfLDZZYsuwb1eoSp9CiEEOg/edit?usp=sharing) some
    stemmers are described.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name, Developer, Initial release** | **Features** | **Programming languages**
    | **License** |'
  prefs: []
  type: TYPE_TB
- en: '| [**Natural Language Toolkit (NLTK)**, The University of Pennsylvania, 2001](http://www.nltk.org/index.html)
    | Mac/Unix/Windows support | Python | [Apache License Version 2.0.](http://www.apache.org/licenses/LICENSE-2.0)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Contains many corpora, toy grammars, trained models, etc [1].](http://www.nltk.org/index.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**TextBlob,** Steven Loria, 2013](http://textblob.readthedocs.io/en/dev/)
    | Splitting text into words and sentences | Python | [http://textblob.readthedocs.io/en/dev/license.html](http://textblob.readthedocs.io/en/dev/license.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [WordNet integration [2]](http://textblob.readthedocs.io/en/dev/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Spacy**, Explosion AI, 2016](https://spacy.io/) | Runs on Unix/Linux,
    MacOS/OS X, and Windows. | Python | [MIT License](https://github.com/explosion/spaCy/blob/master/LICENSE)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Neural network models |'
  prefs: []
  type: TYPE_TB
- en: '| [multi-language support [3]](https://spacy.io/usage/facts-figures) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Gensim**, RaRe Technologies, 2009](https://radimrehurek.com/gensim/) |
    Can process large, web-scale corpora | Python | [GNU LGPLv2.1 license](https://www.gnu.org/licenses/old-licenses/lgpl-2.1.en.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Runs on Linux, Windows and OS X |'
  prefs: []
  type: TYPE_TB
- en: '| [Vector space modeling and topic modeling [4]](https://radimrehurek.com/gensim/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Apache OpenNLP**, Apache Software Foundation, 2004](https://opennlp.apache.org/)
    | Contains a large number of pre-built models for a variety of languages | Java
    | [Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0) |'
  prefs: []
  type: TYPE_TB
- en: '| [Includes annotated text resources [5]](https://opennlp.apache.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**OpenNMT**, Yoon Kim, harvardnlp, 2016](http://opennmt.net/) | Is a generic
    deep learning framework mainly specialized in sequence-to-sequence models | Python
    | [MIT License](https://github.com/OpenNMT/OpenNMT/blob/master/LICENSE.md) |'
  prefs: []
  type: TYPE_TB
- en: '| [Can be used either via command line applications, client-server, or libraries.
    [6]](http://opennmt.net/) | Lua |'
  prefs: []
  type: TYPE_TB
- en: '| Has currently 3 main implementations (OpenNMT-lua, OpenNMT-py, OpenNMT-tf)
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [**General Architecture for Text Engineering (GATE)**, GATE research team,
    University of Sheffield, 1995](https://gate.ac.uk/) | Includes an information
    extraction system | Java | [the GNU licenses and other](http://www.gnu.org/licenses/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Multiple languages support |'
  prefs: []
  type: TYPE_TB
- en: '| [Accepts input in various formats [7]](https://gate.ac.uk/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Apache UIMA**, IBM, Apache Software Foundation, 2006](https://uima.apache.org/)
    | [Contains Addons and Sandbox](https://uima.apache.org/sandbox.html) | Java,
    C++ | [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0) |'
  prefs: []
  type: TYPE_TB
- en: '| Cross-platform |'
  prefs: []
  type: TYPE_TB
- en: '| [REST requests support [8]](https://uima.apache.org/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Memory-Based Shallow Parser (MBSP)**, Vincent Van Asch, Tom De Smedt,
    2010](https://www.clips.uantwerpen.be/pages/MBSP#tokenizer) | Client-server architecture
    | Python | [GPL](http://www.gnu.org/licenses/gpl.html) |'
  prefs: []
  type: TYPE_TB
- en: '| includes binaries (TiMBL, MBT and MBLEM) Precompiled for Mac OS X |'
  prefs: []
  type: TYPE_TB
- en: '| [Cygwin usage for Windows [9]](https://www.clips.uantwerpen.be/pages/MBSP#tokenizer)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**RapidMiner**, RapidMiner, 2006](https://rapidminer.com/) | Unified platform
    | RapidMiner provides a GUI to design and execute analytical workflows | [AGPL](https://en.wikipedia.org/wiki/Affero_General_Public_License)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Visual workflow design |'
  prefs: []
  type: TYPE_TB
- en: '| Breadth of functionality |'
  prefs: []
  type: TYPE_TB
- en: '| [Broad connectivity [10]](https://rapidminer.com/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**MAchine Learning for LanguagE Toolkit  (MALLET)**, Andrew Kachites McCallum,
    University of Massachusetts Amherst, 2002](http://mallet.cs.umass.edu/) | Includes
    sophisticated tools for document classification and sequence tagging | Java |
    [Common Public License](https://opensource.org/licenses/cpl1.0.php) |'
  prefs: []
  type: TYPE_TB
- en: '| [Support for inference in general graphical models [11]](http://mallet.cs.umass.edu/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Pattern**, T. De Smedt & W. Daeleman,  2012](https://www.clips.uantwerpen.be/pages/pattern-en#parser)
    | Web mining module | Python | [BSD](http://www.linfo.org/bsdlicense.html) |'
  prefs: []
  type: TYPE_TB
- en: '| runs on Windows, Mac, & Linux |'
  prefs: []
  type: TYPE_TB
- en: '| [Multiple languages support [12]](https://www.clips.uantwerpen.be/pages/pattern)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Stanford Tokenizer**, The Stanford Natural Language Processing Group,
    2010](https://nlp.stanford.edu/software/tokenizer.html) | [Tokenizer is not distributed
    separately but is included in several software downloads;](https://nlp.stanford.edu/software/)
    | Java | [GNU General Public License](http://www.gnu.org/licenses/gpl-2.0.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Rate of about 1,000,000 tokens per second, |'
  prefs: []
  type: TYPE_TB
- en: '| [There are a number of options that affect how tokenization is performed
    [13]](https://nlp.stanford.edu/software/tokenizer.html#About) |'
  prefs: []
  type: TYPE_TB
- en: '| [**FreeLing**, TALP Research Center, Universitat Politècnica de Catalunya](http://nlp.lsi.upc.edu/freeling/)
    | Provides language analysis functionalities | C++ | [Affero GNU General Public
    License](http://www.gnu.org/licenses/agpl.html) |'
  prefs: []
  type: TYPE_TB
- en: '| Supports a variety of languages |'
  prefs: []
  type: TYPE_TB
- en: '| Provides a command-line front-end |'
  prefs: []
  type: TYPE_TB
- en: '| [Output formats: XML, JSON, CoNLL [45]](http://nlp.lsi.upc.edu/freeling/)
    |'
  prefs: []
  type: TYPE_TB
- en: '**Stemming tools**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 8\. Stemming using NLTK:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Lemmatization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The aim of lemmatization, like stemming, is to reduce inflectional forms to
    a common base form. As opposed to stemming, lemmatization does not simply chop
    off inflections. Instead it uses lexical knowledge bases to get the correct base
    forms of words.
  prefs: []
  type: TYPE_NORMAL
- en: Lemmatization tools are presented libraries described above: [NLTK (WordNet
    Lemmatizer)](http://www.nltk.org/_modules/nltk/stem/wordnet.html), [spaCy](https://spacy.io/api/lemmatizer), [TextBlob](http://textblob.readthedocs.io/en/dev/quickstart.html#words-inflection-and-lemmatization), [Pattern](https://www.clips.uantwerpen.be/pages/pattern-en#conjugation), [gensim](https://radimrehurek.com/gensim/utils.html), [Stanford
    CoreNLP](https://stanfordnlp.github.io/CoreNLP/simple.html), [Memory-Based Shallow
    Parser (MBSP)](https://www.clips.uantwerpen.be/pages/MBSP#lemmatizer), [Apache
    OpenNLP](https://opennlp.apache.org/docs/1.8.4/manual/opennlp.html#tools.lemmatizer.tagging.cmdline), [Apache
    Lucene](http://lucene.apache.org/core/), [General Architecture for Text Engineering
    (GATE)](https://gate.ac.uk/), [Illinois Lemmatizer](https://cogcomp.org/page/software_view/illinois-lemmatizer),
    and [DKPro Core](https://dkpro.github.io/dkpro-core/releases/1.8.0/docs/component-reference.html#_lemmatizer).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 9\. Lemmatization using NLTK:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Part of speech tagging (POS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Part-of-speech tagging aims to assign parts of speech to each word of a given
    text (such as nouns, verbs, adjectives, and others) based on its definition and
    its context. There are many tools containing POS taggers including [NLTK](http://www.nltk.org/book/ch05.html), [spaCy](https://spacy.io/usage/linguistic-features), [TextBlob](http://textblob.readthedocs.io/en/dev/quickstart.html#part-of-speech-tagging), [Pattern](https://www.clips.uantwerpen.be/pages/pattern-en#parser), [Stanford
    CoreNLP](https://nlp.stanford.edu/software/tagger.shtml), [Memory-Based Shallow
    Parser (MBSP)](https://www.clips.uantwerpen.be/pages/MBSP#parser), [Apache OpenNLP](https://opennlp.apache.org/docs/1.8.4/manual/opennlp.html#tools.postagger.tagging), [Apache
    Lucene](https://lucene.apache.org/core/), [General Architecture for Text Engineering
    (GATE)](https://gate.ac.uk/), [FreeLing](http://nlp.lsi.upc.edu/freeling/), [Illinois
    Part of Speech Tagger](https://cogcomp.org/page/software_view/POS), and [DKPro
    Core](https://dkpro.github.io/dkpro-core/releases/1.9.0/docs/component-reference.html#_part_of_speech_tagger).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 10\. Part-of-speech tagging using TextBlob:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Chunking (shallow parsing)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chunking is a natural language process that identifies constituent parts of
    sentences (nouns, verbs, adjectives, etc.) and links them to higher order units
    that have discrete grammatical meanings (noun groups or phrases, verb groups,
    etc.) [[23]](https://en.wikipedia.org/wiki/Shallow_parsing). Chunking tools: [NLTK](http://www.nltk.org/book/ch07.html), [TreeTagger
    chunker](http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/), [Apache OpenNLP](https://opennlp.apache.org/docs/1.8.4/manual/opennlp.html#tools.parser.chunking), [General
    Architecture for Text Engineering (GATE)](https://gate.ac.uk/), [FreeLing](http://nlp.lsi.upc.edu/freeling/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Example 11\. Chunking using NLTK:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to determine the part of speech for each word:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The second step is chunking:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It’s also possible to draw the sentence tree structure using code result.draw()
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/decd12c76c9568338ba6cc4043f64bfa.png)'
  prefs: []
  type: TYPE_IMG
- en: Named entity recognition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Named-entity recognition (NER) aims to find named entities in text and classify
    them into pre-defined categories (names of persons, locations, organizations,
    times, etc.).
  prefs: []
  type: TYPE_NORMAL
- en: Named-entity recognition tools: [NLTK](http://www.nltk.org/book/ch07.html), [spaCy](https://spacy.io/usage/linguistic-features#section-named-entities), [General
    Architecture for Text Engineering (GATE) — ANNIE](https://gate.ac.uk/sale/tao/splitch6.html#chap:annie), [Apache
    OpenNLP](https://opennlp.apache.org/docs/1.8.4/manual/opennlp.html#tools.namefind.recognition), [Stanford
    CoreNLP](https://nlp.stanford.edu/software/CRF-NER.shtml), [DKPro Core](https://dkpro.github.io/dkpro-core/releases/1.9.0/docs/component-reference.html#_named_entity_recognizer), [MITIE](https://github.com/mit-nlp/MITIE), [Watson
    Natural Language Understanding](https://www.ibm.com/watson/developercloud/natural-language-understanding/api/v1/#entities), [TextRazor](https://www.textrazor.com/), [FreeLing](http://nlp.lsi.upc.edu/freeling/)are
    described in the [“NER” sheet of the table](https://docs.google.com/spreadsheets/d/1-9rMhfcmxFv2V2Q5ZWn1FfLDZZYsuwb1eoSp9CiEEOg/edit?usp=sharing).
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name, Developer, Initial release** | **Features** | **Programming languages**
    | **License** |'
  prefs: []
  type: TYPE_TB
- en: '| [**Baleen**, Defence Science and Technology Laboratory (Dstl), 2014](https://github.com/dstl/baleen)
    | Works with unstructured and semi-structured data sources | Java | [Apache License
    2.0](https://github.com/dstl/baleen/blob/master/LICENSE.txt) |'
  prefs: []
  type: TYPE_TB
- en: '| Includes a built-in server |'
  prefs: []
  type: TYPE_TB
- en: '| [[25]](https://github.com/dstl/baleen/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**CogComp NER Tagger (Illinois Named Entity Tagger)**, L. Ratinov, D. Roth,
    Cognitive Computation Group, 2009](https://github.com/CogComp/cogcomp-nlp/tree/master/ner)
    | Tags plain text with named entities | Java | [Licensing Agreement](http://cogcomp.org/page/download_view/NETagger)
    |'
  prefs: []
  type: TYPE_TB
- en: '| 4-label type set (people / organizations / locations / miscellaneous) |'
  prefs: []
  type: TYPE_TB
- en: '| [18-label type set (based on the OntoNotes corpus)  [26]](https://github.com/CogComp/cogcomp-nlp/tree/master/ner)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Minimal Named-Entity Recognizer (MER)**, LaSIGE, Faculdade de Ciências,
    Universidade de Lisboa, Portugal, 2017](https://github.com/lasigeBioTM/MER) |
    Returns the list of terms recognized in the text, including their exact location
    (annotations) | GNU awk | - |'
  prefs: []
  type: TYPE_TB
- en: '| [Only requires a lexicon (text file) with the list of terms representing
    the entities of interest RESTful Web service](http://labs.rd.ciencias.ulisboa.pt/mer/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [[27]](https://github.com/lasigeBioTM/MER) |'
  prefs: []
  type: TYPE_TB
- en: '| [**ParallelDots**, ParallelDots](https://www.paralleldots.com/named-entity-recognition)
    | Uses deep learning technology to determine representations of character groupings
    | [excel add-in](https://www.paralleldots.com/excel-docs) | [Pricing](https://www.paralleldots.com/pricing)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Discovers the most relevant entities in textual content | [AI APIs](https://www.paralleldots.com/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Accurate, real-time, customizable |  |'
  prefs: []
  type: TYPE_TB
- en: '| [[28]](https://blog.paralleldots.com/product/dig-relevant-text-elements-entity-extraction-api/)
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [demo](https://www.paralleldots.com/text-analysis-apis#named-entity-recognition)
    |  |'
  prefs: []
  type: TYPE_TB
- en: '| [**Open Calais**, Thomson Reuters Corporation](http://www.opencalais.com/about-open-calais/)
    | [Extracts entities (companies, people, places, products, etc.), relationships,
    facts, events, topics. [29]](http://www.opencalais.com/about-open-calais/) | [API](http://www.opencalais.com/opencalais-api/)
    | [Terms of Service](http://www.opencalais.com/open-calais-terms-of-service/)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**LingPipe**, Breck Baldwin, 1999](http://alias-i.com/lingpipe/index.html)
    | Finds the names of people, organizations, or locations | Java | [License Matrix](http://alias-i.com/lingpipe/web/download.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Source code and unit tests |'
  prefs: []
  type: TYPE_TB
- en: '| [Multi-lingual, multi-domain, multi-genre models [30]](http://alias-i.com/lingpipe/index.html)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [**Named Entity Recognition Tool**, Guillaume Lample, Miguel Ballesteros,
    Sandeep Subramanian, Kazuya Kawakami, Chris Dyer, 2016](https://github.com/glample/tagger)
    | A neural architecture | Python | [Apache License 2.0](https://github.com/glample/tagger/blob/master/LICENSE.md)
    |'
  prefs: []
  type: TYPE_TB
- en: '| [state-of-the-art performance in NER on the 4 CoNLL datasets (English, Spanish,
    German and Dutch) without resorting to any language-specific knowledge or resources
    such as gazetteers [31]](https://github.com/glample/tagger) |'
  prefs: []
  type: TYPE_TB
- en: '| [**MinorThird**, William W. Cohen, Carnegie Mellon University, 2004](http://minorthird.sourceforge.net/old/doc/)
    | Combines tools for annotating and visualizing text with state-of-the-art learning
    methods | Java | [BSD license](https://opensource.org/licenses/bsd-license.php)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Supports active learning and online learning |'
  prefs: []
  type: TYPE_TB
- en: '| [[32]](http://minorthird.sourceforge.net/old/doc/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Watson Named Entity Recognition annotator**, IBM](https://www.ibm.com/support/knowledgecenter/en/SS8NLW_10.0.0/com.ibm.watson.wex.aac.doc/aac-tasystemt.html)
    | A person, location, and organization annotators | Python SDK | [Pricing](https://www.ibm.com/watson-analytics/pricing)
    |'
  prefs: []
  type: TYPE_TB
- en: '| English, Chinese, French, German, Japanese, Spanish languages | Node SDK
    |'
  prefs: []
  type: TYPE_TB
- en: '| [Possibility of adding entries  [33]](https://www.ibm.com/support/knowledgecenter/en/SS8NLW_10.0.0/com.ibm.watson.wex.aac.doc/aac-tasystemt.html)
    | Swift SDK |'
  prefs: []
  type: TYPE_TB
- en: '|  | Java SDK |'
  prefs: []
  type: TYPE_TB
- en: '|  | Unity SDK |'
  prefs: []
  type: TYPE_TB
- en: '|  | .NET Standard library |'
  prefs: []
  type: TYPE_TB
- en: '| [**PoolParty Semantic Suite**, Semantic Web Company, 2009](https://www.poolparty.biz/)
    | Modular and flexible | Data is transformed into RDF graphs and can be queried
    with SPARQL | [Price Overview](https://www.poolparty.biz/priceoverview/) |'
  prefs: []
  type: TYPE_TB
- en: '| uses standards-based technologies as defined by W3C |'
  prefs: []
  type: TYPE_TB
- en: '| Enriches information with valuable metadata |'
  prefs: []
  type: TYPE_TB
- en: '| [[34]](https://www.poolparty.biz/) |'
  prefs: []
  type: TYPE_TB
- en: '| [**Rosette Entity Extractor**, Basis Technology, 1995](https://www.basistech.com/text-analytics/rosette/entity-extractor/)
    | 20 supported languages | Bindings: cURL, Python, PHP, Java, R, Ruby, C#, Node.js
    | - |'
  prefs: []
  type: TYPE_TB
- en: '| 18 entity types detected |'
  prefs: []
  type: TYPE_TB
- en: '| Filter for key entities |'
  prefs: []
  type: TYPE_TB
- en: '| [Confidence scores for each result [35]](https://www.basistech.com/text-analytics/rosette/entity-extractor/)
    |'
  prefs: []
  type: TYPE_TB
- en: '**NER Tools**'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Cleaning and Preprocessing Text Data in Pandas for NLP Tasks](https://www.kdnuggets.com/cleaning-and-preprocessing-text-data-in-pandas-for-nlp-tasks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Data Cleaning and Preprocessing Techniques](https://www.kdnuggets.com/2023/08/7-steps-mastering-data-cleaning-preprocessing-techniques.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL LIKE Operator Examples](https://www.kdnuggets.com/2022/09/sql-like-operator-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ensemble Learning with Examples](https://www.kdnuggets.com/2022/10/ensemble-learning-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Picking Examples to Understand Machine Learning Model](https://www.kdnuggets.com/2022/11/picking-examples-understand-machine-learning-model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easy Guide To Data Preprocessing In Python](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
