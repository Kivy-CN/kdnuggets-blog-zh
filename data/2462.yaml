- en: No Brainer AutoML with AutoXGB
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AutoXGB 的简单 AutoML
- en: 原文：[https://www.kdnuggets.com/2022/02/no-brainer-automl-autoxgb.html](https://www.kdnuggets.com/2022/02/no-brainer-automl-autoxgb.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/02/no-brainer-automl-autoxgb.html](https://www.kdnuggets.com/2022/02/no-brainer-automl-autoxgb.html)
- en: '![No Brainer AutoML with AutoXGB](../Images/02ab161ce6b93042832d676525e34fed.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![AutoXGB 的简单 AutoML](../Images/02ab161ce6b93042832d676525e34fed.png)'
- en: Image by author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: 'Automated machine learning (AutoML) runs various machine learning processes
    automatically and optimizes error metrics to generate the best possible model.
    These processes include: data preprocessing, encoding, scaling, optimizing hyperparameters,
    model training, generating artifacts, and a list of results. Automating the machine
    learning process makes it fast to develop AI solutions, provide a user-friendly
    experience, and often produce accurate results with low code - [TechTarget](https://www.techtarget.com/searchenterpriseai/definition/automated-machine-learning-AutoML).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化机器学习（AutoML）会自动运行各种机器学习过程，并优化错误指标以生成最佳模型。这些过程包括：数据预处理、编码、缩放、超参数优化、模型训练、生成工件和结果列表。自动化机器学习过程使得开发
    AI 解决方案快速、用户友好，并且通常可以产生准确的低代码结果 - [TechTarget](https://www.techtarget.com/searchenterpriseai/definition/automated-machine-learning-AutoML)。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全领域。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Popular AutoML Libraries:**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**流行的 AutoML 库：**'
- en: '[LightAutoML](https://github.com/sberbank-ai-lab/LightAutoML)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LightAutoML](https://github.com/sberbank-ai-lab/LightAutoML)'
- en: '[MLJar](https://pypi.org/project/mljar-supervised/)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MLJar](https://pypi.org/project/mljar-supervised/)'
- en: '[EvalML](https://github.com/alteryx/evalml)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[EvalML](https://github.com/alteryx/evalml)'
- en: '[FLAML](https://github.com/microsoft/FLAML)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[FLAML](https://github.com/microsoft/FLAML)'
- en: '[PyCaret](https://pycaret.org/)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyCaret](https://pycaret.org/)'
- en: '[AutoGluon](https://auto.gluon.ai/stable/index.html)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AutoGluon](https://auto.gluon.ai/stable/index.html)'
- en: '[H2O 3](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/index.html)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[H2O 3](https://docs.h2o.ai/h2o/latest-stable/h2o-docs/index.html)'
- en: 'In this tutorial, we are going to use 1994 census income data to predict whether
    a person makes over $50K a year or not. This is a classic binary classification
    problem and we are going to use the Kaggle dataset [Adult Census Income](https://www.kaggle.com/uciml/adult-census-income)
    under [CC0: Public Domain](https://creativecommons.org/publicdomain/zero/1.0/)
    license. It was extracted from the [1994 Census bureau database](http://www.census.gov/en.html)
    by Ronny Kohavi and Barry Becker (Data Mining and Visualization, Silicon Graphics).
    We won’t be going deep into data analysis or how the model works. Instead, we
    will build an optimized machine learning model with a few lines of code and access
    it using the FastAPI server.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '在本教程中，我们将使用 1994 年人口普查收入数据预测一个人是否年收入超过 50K 美元。这是一个经典的二分类问题，我们将使用 Kaggle 数据集
    [成人人口普查收入](https://www.kaggle.com/uciml/adult-census-income)，该数据集采用 [CC0: 公共领域](https://creativecommons.org/publicdomain/zero/1.0/)
    许可证。它由 Ronny Kohavi 和 Barry Becker（数据挖掘与可视化，硅谷图形公司）从 [1994 年人口普查局数据库](http://www.census.gov/en.html)
    提取。我们不会深入数据分析或模型工作原理。相反，我们将用几行代码构建一个优化的机器学习模型，并通过 FastAPI 服务器访问它。'
- en: AutoXGB
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AutoXGB
- en: '[AutoXGB](https://github.com/abhishekkrthakur/autoxgb) is a simple but effective
    AutoML tool to train model tabular datasets directly from CSV files. The AutoXGB
    uses [XGBoost](https://xgboost.readthedocs.io/en/stable/) for training the model,
    [Optuna](https://optuna.org/) for hyperparameters optimization, and [FastAPI](https://fastapi.tiangolo.com/)
    to provide model inference in the form of API.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[AutoXGB](https://github.com/abhishekkrthakur/autoxgb) 是一个简单但有效的 AutoML 工具，可以直接从
    CSV 文件中训练模型表格数据集。AutoXGB 使用 [XGBoost](https://xgboost.readthedocs.io/en/stable/)
    训练模型，使用 [Optuna](https://optuna.org/) 进行超参数优化，并使用 [FastAPI](https://fastapi.tiangolo.com/)
    提供模型推理 API 形式。'
- en: Let’s get started by installing autoxgb. If you are facing the error while running
    the server, then install fastapi and unvicorn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始安装 autoxgb。如果在运行服务器时遇到错误，请安装 fastapi 和 unvicorn。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Initializing
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化中
- en: We are going to go deep on the features of the AutoXGB function and how these
    parameters can be used to improve the results or reduce training time.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将深入探讨 AutoXGB 函数的特性以及这些参数如何用于改善结果或减少训练时间。
- en: '**train_filename**: path to training data'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**train_filename**: 训练数据的路径'
- en: '**output**: path to the output folder to store artifacts'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**output**: 存储工件的输出文件夹路径'
- en: '**test_filename**: path to test data. If not specified, only OOF predictions
    will be saved'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**test_filename**: 测试数据的路径。如果未指定，仅保存 OOF 预测'
- en: '**task**: if not specified, the task will be inferred automatically'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**task**: 如果未指定，任务将自动推断'
- en: task = "classification"
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: task = "classification"
- en: task = "regression"
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: task = "regression"
- en: '**idx**: if not specified, the id column will be generated automatically with
    the name id'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**idx**: 如果未指定，id 列将自动生成，名称为 id'
- en: '**targets**: if not specified, the target column be assumed to be named target
    and the problem will be treated as one of binary classification, multiclass classification,
    or single column regression'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**targets**: 如果未指定，目标列将被假定为名为 target，并且问题将被视为二分类、多分类或单列回归中的一种'
- en: targets = ["target"]
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: targets = ["target"]
- en: targets = ["target1", "target2"]
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: targets = ["target1", "target2"]
- en: '**features**: if not specified, all columns except id, targets & kfold columns
    will be used'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**features**: 如果未指定，除了 id、targets 和 kfold 列外，将使用所有列'
- en: features = ["col1", "col2"]
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: features = ["col1", "col2"]
- en: '**categorical_features**: if not specified, categorical columns will be inferred
    automatically'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**categorical_features**: 如果未指定，将自动推断类别列'
- en: categorical_features = ["col1", "col2"]
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: categorical_features = ["col1", "col2"]
- en: '**use_gpu**: if not specified, GPU is not used'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**use_gpu**: 如果未指定，则不使用 GPU'
- en: use_gpu = True
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: use_gpu = True
- en: use_gpu = False
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: use_gpu = False
- en: '**num_folds**: number of folds to use for cross-validation'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**num_folds**: 用于交叉验证的折数'
- en: '**seed**: random seed for reproducibility'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**seed**: 用于可重复性的随机种子'
- en: '**num_trials**: number of Optuna trials to run'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**num_trials**: 要运行的 Optuna 尝试次数'
- en: default is 1000
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认值为 1000
- en: num_trials = 1000
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: num_trials = 1000
- en: '**time_limit**:  time_limit for optuna trials in seconds'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**time_limit**: Optuna 尝试的时间限制（秒）'
- en: if not specified, all trials will run
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未指定，将运行所有尝试
- en: time_limit = None
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: time_limit = None
- en: '**fast**: if fast is set to True, the hyperparameter tuning will use only one
    fold which reduces the optimizing time. After that it will train on the rest of
    the fold and generate OOF and test predictions.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fast**: 如果 fast 设置为 True，则超参数调整将仅使用一个折，这样可以减少优化时间。之后它将对其余的折进行训练，并生成 OOF 和测试预测。'
- en: In our case, we will set most values to default except *train_filename, output,
    target, num_folds, seed, num_trails,* and *time_limit.*
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，除了*train_filename, output, target, num_folds, seed, num_trails,* 和 *time_limit*，我们将大部分值设置为默认值。
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Training & Optimization
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 训练与优化
- en: It's time to define a model using *AutoXGB()* and add previously defined parameters
    to the model. Finally, we will use *axgb.train()* to start training process. It
    will run the XGBoost, Optuna, and output artifacts (**model, predication, results,
    config, params, encoders**).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候定义一个模型使用*AutoXGB()*，并将先前定义的参数添加到模型中。最后，我们将使用*axgb.train()*开始训练过程。它将运行 XGBoost、Optuna，并输出工件（**model,
    predication, results, config, params, encoders**）。
- en: '[PRE2]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: It took 10-12 minutes for the training process to finish, and we can see the
    optimum results below. I think we can improve our **F1** score by increasing the
    time limit. We can also play with other hyperparameters to improve model performance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 训练过程花费了 10-12 分钟，我们可以在下面看到最佳结果。我认为我们可以通过增加时间限制来提高**F1**分数。我们还可以调整其他超参数以改善模型性能。
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Training with CLI**'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**使用 CLI 进行训练**'
- en: To train the model in the terminal/bash we will be using **autoxgb** **train**.
    We will just set *train_filename* and *output* folder.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要在终端/bash 中训练模型，我们将使用**autoxgb** **train**。我们将只设置*train_filename*和*output* 文件夹。
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Web API
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Web API
- en: By running **autoxgb serve** in the terminal, we can run the FastAPI server
    locally.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端运行**autoxgb serve**，我们可以在本地运行 FastAPI 服务器。
- en: '![No Brainer AutoML with AutoXGB](../Images/24954fac438a81a6ff390025c0994129.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![无需脑力的 AutoML 与 AutoXGB](../Images/24954fac438a81a6ff390025c0994129.png)'
- en: AutoXGB Serve Parameters
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AutoXGB 服务参数
- en: '**model_path** -> Path to model. In our case, it''s the output folder.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**model_path** -> 模型路径。在我们的案例中，这是输出文件夹。'
- en: '**port** -> Port to serve on 8080'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**port** -> 服务端口 8080'
- en: '**host** -> Host to serve on, IP address: 0.0.0.0'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**host** -> 用于服务的主机，IP 地址：0.0.0.0'
- en: '**workers** -> Number of workers or number of simultaneous requests.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**workers** -> 工作人员数量或同时请求的数量。'
- en: '**debug** -> Display logs of error and success'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**debug** -> 显示错误和成功的日志'
- en: Deepnote Public Server
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Deepnote 公共服务器
- en: In order to run the server on the cloud, [Deepnote](https://deepnote.com/) uses
    **ngrok** to create a public URL. We just need to turn on the option and use port
    **8080**. If you are running locally you don’t need to follow this step and directly
    access the API using “http://0.0.0.0:8080”.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在云端运行服务器，[Deepnote](https://deepnote.com/) 使用 **ngrok** 创建公共 URL。我们只需开启该选项并使用端口
    **8080**。如果你在本地运行，则无需遵循此步骤，直接使用 “http://0.0.0.0:8080” 访问 API 即可。
- en: '![No Brainer AutoML with AutoXGB](../Images/2aa8fd7dff333dd6014552e3db831a3f.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![无脑 AutoML 与 AutoXGB](../Images/2aa8fd7dff333dd6014552e3db831a3f.png)'
- en: We have provided a **model path**, **host ip**, and **port number** to run the
    server.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了 **model path**、**host ip** 和 **port number** 来运行服务器。
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Our API is running smoothly and you can access it using “https://8d3ae411-c6bc-4cad-8a14-732f8e3f13b7.deepnoteproject.com”.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 API 运行顺利，你可以通过 “https://8d3ae411-c6bc-4cad-8a14-732f8e3f13b7.deepnoteproject.com”
    访问它。
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Prediction
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预测
- en: We can add random inputs to predict whether the person's income is greater than
    $50k or not. In this example, we are using the FastAPI **/docs** option to access
    the user interface.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加随机输入来预测一个人的收入是否超过 $50k。在这个例子中，我们使用 FastAPI 的 **/docs** 选项来访问用户界面。
- en: Input
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输入
- en: We are going to use FastAPI GUI to run predictions on models by adding ***/docs***
    at the end of the link. For example “172.3.167.43:39118/docs”
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 FastAPI GUI 通过在链接末尾添加 ***/docs*** 来运行模型预测。例如 “172.3.167.43:39118/docs”
- en: '**workclass**: "Private"'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**workclass**: "私营"'
- en: '**education**: "HS-grad"'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**education**: "高中毕业"'
- en: '**marital.status**: "Widowed"'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**marital.status**: "丧偶"'
- en: '**occupation**: "Transport-moving"'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**occupation**: "运输搬运"'
- en: '**relationship**: "Unmarried"'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**relationship**: "未婚"'
- en: '**race**: "White"'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**race**: "白人"'
- en: '**sex**: "Male"'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sex**: "男性"'
- en: '**native.country**: "United-States"'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**native.country**: "美国"'
- en: '**age**: 20'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**age**: 20'
- en: '**fnlwgt**: 313986'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**fnlwgt**: 313986'
- en: '**education.num**: 9'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**education.num**: 9'
- en: '**capital.gain**: 0'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**capital.gain**: 0'
- en: '**capital.loss**: 0'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**capital.loss**: 0'
- en: '**hours.per.week**: 40'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**hours.per.week**: 40'
- en: '![No Brainer AutoML with AutoXGB](../Images/b472bb19afa5e39dda93694edb062195.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![无脑 AutoML 与 AutoXGB](../Images/b472bb19afa5e39dda93694edb062195.png)'
- en: Outcome
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果
- en: The result is **<50k** with confidence of 97.6% and **>50k** with confidence
    of 2.3%.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 结果为 **<50k**，置信度为 97.6%，**>50k** 的置信度为 2.3%。
- en: '![No Brainer AutoML with AutoXGB](../Images/310b95a9c11395c61f0d017f5303ba78.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![无脑 AutoML 与 AutoXGB](../Images/310b95a9c11395c61f0d017f5303ba78.png)'
- en: Test with Request
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用请求进行测试
- en: You can also test the API using **requests** in Python. Just push parameters
    in the form of a dictionary and get output in the JSON format.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 Python 中的 **requests** 测试 API。只需将参数以字典形式推送，并以 JSON 格式获取输出。
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Project
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目
- en: 'The code and examples are available at:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 代码和示例可以在以下地址找到：
- en: '[Deepnote](https://deepnote.com/@abid/AutoXGB-jTrkEca8TK2KFHMvjj8Ttw)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Deepnote](https://deepnote.com/@abid/AutoXGB-jTrkEca8TK2KFHMvjj8Ttw)'
- en: '[GitHub](https://github.com/kingabzpro/Intro-to-AutoXGB)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub](https://github.com/kingabzpro/Intro-to-AutoXGB)'
- en: '[DAGsHub](https://dagshub.com/kingabzpro/Intro-to-AutoXGB)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DAGsHub](https://dagshub.com/kingabzpro/Intro-to-AutoXGB)'
- en: Conclusion
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: I use AutoML to get an edge in Kaggle competitions and to develop a model baseline
    for machine learning projects. You can sometimes get fast and accurate results
    but, if you want to create the state of the art solutions, you need to experiment
    with various machine learning processes manually.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 AutoML 在 Kaggle 竞赛中获得优势，并为机器学习项目开发模型基线。你有时可以获得快速且准确的结果，但如果你想创建最先进的解决方案，你需要手动实验各种机器学习过程。
- en: In this tutorial, we have learned about AutoXGB's various functions. We can
    use AutoXGB to preprocess the data, train the XGboost model, optimize the model
    using Optuna, and run a web server using FastAPI. In short, AutoXGB provides an
    end-to-end solution for your everyday tabular data problems. If you have questions
    about implementation or using other AutoML that I have mentioned, please write
    them in the comment session. I would love to answer all of your queries.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们了解了 AutoXGB 的各种功能。我们可以使用 AutoXGB 进行数据预处理，训练 XGboost 模型，使用 Optuna 优化模型，并使用
    FastAPI 运行 Web 服务器。总之，AutoXGB 提供了一个端到端的解决方案来处理你的日常表格数据问题。如果你对实现或使用我提到的其他 AutoML
    有疑问，请在评论区留言。我很乐意回答你的所有问题。
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    是一位认证的数据科学专业人士，热衷于构建机器学习模型。目前，他专注于内容创作，并撰写关于机器学习和数据科学技术的技术博客。Abid拥有技术管理硕士学位和电信工程学士学位。他的愿景是使用图神经网络构建一个AI产品，帮助那些在心理健康方面面临困扰的学生。'
- en: More On This Topic
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Nota AI releases beta version of NetPresso Model Search, their…](https://www.kdnuggets.com/2022/04/nota-ai-releases-beta-version-netpresso-model-search-hardwareaware-automl-tool.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Nota AI发布NetPresso模型搜索的测试版，...] (https://www.kdnuggets.com/2022/04/nota-ai-releases-beta-version-netpresso-model-search-hardwareaware-automl-tool.html)'
- en: '[The Top AutoML Frameworks You Should Consider in 2023](https://www.kdnuggets.com/2023/05/best-automl-frameworks-2023.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2023年你应该考虑的顶级AutoML框架](https://www.kdnuggets.com/2023/05/best-automl-frameworks-2023.html)'
