["```py\npip install pyjanitor\n```", "```py\nimport janitor\nimport pandas as pd\n```", "```py\n#Create a data frame with inconsistent column names\nstudent_df = pd.DataFrame({\n    'Student.ID': [1, 2, 3],\n    'Student Name': ['Sara', 'Hanna', 'Mathew'],\n    'Student Gender': ['Female', 'Female', 'Male'],\n    'Course': ['Algebra', 'Data Science', 'Geometry'],\n    'Grade': ['A', 'B', 'C']\n})\n\n#Clean the column names\nclean_df = student_df.clean_names()\nprint(clean_df)\n```", "```py\n student_id    student_name    student_gender        course    grade\n0           1            Sara            Female       Algebra        A\n1           2           Hanna            Female  Data Science        B\n2           3          Mathew              Male      Geometry        C\n```", "```py\nstudent_df = pd.DataFrame({\n    'stu_id': [1, 2],\n    'stu_name': ['Ryan', 'James'],\n})\n# Renaming the columns\nstudent_df = student_df.rename_column('stu_id', 'Student_ID')\nstudent_df =student_df.rename_column('stu_name', 'Student_Name')\nprint(student_df.columns) \n```", "```py\nIndex(['Student_ID', 'Student_Name'], dtype='object') \n```", "```py\n# Create a data frame with missing values\nemployee_df = pd.DataFrame({\n    'employee_id': [1, 2, 3],\n    'name': [None, 'James', 'Alicia'],\n    'department': ['HR', None, 'Engineering'],\n    'salary': [60000, 55000, None]\n}) \n```", "```py\n# Fill missing values in 'department' and 'name' with 'Unknown' and 'salary' with the mean salary\nemployee_df = employee_df.fill_empty(column_names=['name', 'department'], value='Unknown')\nemployee_df = employee_df.fill_empty(column_names='salary', value=employee_df['salary'].mean())\n\nprint(employee_df) \n```", "```py\n employee_id     name   department   salary\n0            1  Unknown           HR  60000.0\n1            2    James      Unknown  55000.0\n2            3   Alicia  Engineering  57500.0 \n```", "```py\n# Create a data frame with student data\nstudents_df = pd.DataFrame({\n    'student_id': [1, 2, 3, 4, 5],\n    'name': ['John', 'Julia', 'Ali', 'Sara', 'Sam'],\n    'subject': ['Maths', 'General Science', 'English', 'History','Biology'],\n    'marks': [85, 58, 92, 45, 75],\n    'grade': ['A', 'C', 'A+', 'D', 'B']\n})\n\n# Filter rows where marks are less than 60\nfiltered_students_df = students_df.query('marks >= 60')\nprint(filtered_students_df) \n```", "```py\n student_id  name  subject  marks grade\n0           1  John    Maths     85     A\n2           3   Ali  English     92    A+\n4           5   Sam  Biology     75     B \n```", "```py\n# Select specific columns\nselected_columns_df = filtered_students_df.loc[:,['student_id', 'name']] \n```", "```py\n student_id\tname\n0\t1\tJohn\n2\t3\tAli\n4\t5\tSam \n```", "```py\n# Create a data frame with sample car data\ncars_df = pd.DataFrame({\n    'Car ID': [101, None, 103, 104, 105],\n    'Car Model': ['Toyota', 'Honda', 'BMW', 'Mercedes', 'Tesla'],\n    'Price': [25000, 30000, None, 40000, 45000],\n    'Year': [2018, 2019, 2017, 2020, None]\n})\nprint(\"Cars Data Before Applying Method Chaining:\")\nprint(cars_df) \n```", "```py\nCars Data Before Applying Method Chaining:\n   Car ID Car Model    Price    Year\n0   101.0    Toyota  25000.0  2018.0\n1     NaN     Honda  30000.0  2019.0\n2   103.0       BMW      NaN  2017.0\n3   104.0  Mercedes  40000.0  2020.0\n4   105.0     Tesla  45000.0     NaN \n```", "```py\n# Chain methods to clean column names, drop rows with missing values, select specific columns, and rename columns\ncleaned_cars_df = (\n    cars_df\n    .clean_names()  # Clean column names\n    .dropna()  # Drop rows with missing values\n    .select_columns(['car_id', 'car_model', 'price'])  # Select columns\n    .rename_column('price', 'price_usd')  # Rename column\n)\n\nprint(\"Cars Data After Applying Method Chaining:\")\nprint(cleaned_cars_df) \n```", "```py\nCars Data After Applying Method Chaining:\n   car_id car_model  price_usd\n0   101.0    Toyota    25000.0\n3   104.0  Mercedes    40000.0 \n```"]