- en: Every Complex DataFrame Manipulation, Explained & Visualized Intuitively
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/11/dataframe-manipulation-explained-visualized.html](https://www.kdnuggets.com/2020/11/dataframe-manipulation-explained-visualized.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Andre Ye](https://www.linkedin.com/in/andre-ye-501746150/), Cofounder
    at Critiq, Editor & Top Writer at Medium**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/192e134ecba0ea1bad5e37024965a72f.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas offers a wide range of DataFrame manipulations, but many of them are
    complex and may not seem approachable. This article presents 8 essential DataFrame
    manipulation methods that cover almost all of the manipulation functions a data
    scientist would need to know. Each method will include an explanation, visualization,
    code, and tricks to remember it.
  prefs: []
  type: TYPE_NORMAL
- en: Pivot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pivoting a table creates a new ‘pivoted table’ that projects existing columns
    in the data as elements of a new table, being the index, column, and the values.
    The columns in the initial DataFrame that will become the index and the columns
    are displayed as unique values, and combinations of these two columns will be
    displayed as the value. This means that pivots cannot handle duplicate values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/367020d75f24e109d31f8a72808fdd0e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The code to pivot a DataFrame named *df *is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*To memorize*: A pivot is — outside the realm of data manipulation — a turn
    around some sort of object. In sports, one can ‘pivot’ around their foot to spin:
    pivots in pandas are similar. The state of the original DataFrame is pivoted around
    central elements of a DataFrame into a new one. Some elements very literally pivot
    in that they are rotated or transformed (like column ‘*bar*’).'
  prefs: []
  type: TYPE_NORMAL
- en: Melt
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Melting can be thought of as an ‘unpivot,’ in that it converts matrix-based
    data (has two dimensions) into list-based data (columns represent values and rows
    indicate unique data points), whereas pivots do the opposite. Consider a two-dimensional
    matrix with one dimension ‘*B*’ and ‘*C*’ (column names), with the other dimension
    ‘*a’*, ‘*b*’, and ‘*c*’ (row indices).
  prefs: []
  type: TYPE_NORMAL
- en: 'We select an ID, one of the dimensions, and a column/columns to contain values.
    The column(s) that contain values are transformed into two columns: one for the
    variable (the name of the value column) and another for the value (the number
    contained in it).'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3bc36709af67c589c9d6ed6bef85e4d2.png)'
  prefs: []
  type: TYPE_IMG
- en: The result is every combination of the ID column’s values (*a, b, c*) and the
    value columns (*B, C*), with its corresponding value, organized in list format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The melt operation can be performed like such on DataFrame *df*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*To memorize*: Melting something like a candle is to turn a solidified and
    composite object into several much smaller, individual elements (wax droplets).
    Melting a two-dimensional DataFrame unpacks its solidified structure and records
    its pieces as individual entries in a list.'
  prefs: []
  type: TYPE_NORMAL
- en: Explode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exploding is a helpful method to get rid of lists in the data. When a column
    is exploded, all lists inside of it are listed as new rows under the same index
    (to prevent this, simply call *.reset_index()* afterward). Non-list items like
    strings or numbers are not affected, and empty lists are NaN values (you can cleanse
    these using *.dropna()*).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8ccb6230eae6b6cab6ea6310ac933642.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Exploding a column ‘*A*’ in DataFrame *df* is very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '*To remember*: Exploding something releases all its internal contents — exploding
    a list separates its elements.'
  prefs: []
  type: TYPE_NORMAL
- en: Stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stacking takes a DataFrame of any size and ‘stacks’ the columns as subindices
    of existing indices. Hence, the resulting DataFrame has only one column and two
    levels of indices.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/496b8b6fade8aebd1a78f684b34a1a3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Stacking a table named *df* is as simple as *df.stack()*.
  prefs: []
  type: TYPE_NORMAL
- en: In order to access the value of, say, the dog’s height, simply call an index-based
    retrieval twice, like *df.loc[‘dog’].loc[‘height’]*.
  prefs: []
  type: TYPE_NORMAL
- en: '*To remember*: Visually, *stack* takes the two-dimensionality of a table and
    stacks the columns into multi-level indices.'
  prefs: []
  type: TYPE_NORMAL
- en: Unstack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unstacking takes a multi-index DataFrame and unstacks it, converting the indices
    in a specified level into columns of a new DataFrame with its corresponding values.
    Calling a stack followed by an unstack on a table will not change it (excusing
    the existence of a ‘*0*’).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9ee5f14a02aebb804806f543ad924317.png)'
  prefs: []
  type: TYPE_IMG
- en: A parameter in unstacking is its level. In list indexing, an index of -1 will
    return the last element; this is the same with levels. A level of -1 indicates
    that the last index level (the one rightmost) will be unstacked. As a further
    example, when the level is set to 0 (the first index level), values in it become
    columns and the following index level (the second) becomes the transformed DataFrame’s
    index.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe321ae0b445c7229f94b09c3d0c05ed.png)'
  prefs: []
  type: TYPE_IMG
- en: Unstacking can be performed the same as stacking, but with the level parameter: *df.unstack(level=-1)*.
  prefs: []
  type: TYPE_NORMAL
- en: '*To remember*: Unstack means “to undo a stack.”'
  prefs: []
  type: TYPE_NORMAL
- en: Merge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To merge two DataFrames is to combine them column-wise (horizontally) among
    a shared ‘key’. This key allows for the tables to be combined, even if they are
    not ordered similarly. The finished merged DataFrame will add suffixes *_x* and *_y* to
    value columns by default.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4b7c9f494929a29c1e248ba37f54c193.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to merge two DataFrames *df1 *and *df2 *(where *df1 *contains the *leftkey *and *df2 *contains
    the *rightkey*), call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Merges are not functions of pandas but are attached to a DataFrame. It is always
    assumed that the DataFrame in which the merge is being attached to is the ‘left
    table’, and the DataFrame called as a parameter in the function is the ‘right
    table’, with corresponding keys.
  prefs: []
  type: TYPE_NORMAL
- en: 'The merge function performs by default what is called an inner join: if each
    of the DataFrames has a key not listed in the other’s, it is not included in the
    merged DataFrame. On the other hand, if a key is listed twice in the same DataFrame,
    every combination of values for the same keys is listed in the merged table. For
    example, if *df1* has 3 values for key *foo *and *df2 *had 2 values for the same
    key, there would be 6 entries with *leftkey=foo* and *rightkey=foo* in the final
    DataFrame.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/962c8295ba621a22e5715c85fc8da0d5.png)'
  prefs: []
  type: TYPE_IMG
- en: '*To remember*: You merge DataFrames like you merge lanes when driving — horizontally.
    Imagine each of the columns as one lane on the highway; in order to merge, they
    must combine horizontally.'
  prefs: []
  type: TYPE_NORMAL
- en: Join
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Joins are generally preferred over merge because it has a cleaner syntax and
    a wider range of possibilities in joining two DataFrames horizontally. The syntax
    of a join is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When using joins, the common key column (analogous to *right_on* and *left_on* in
    merge) must be named the same name. The how parameter is a string referring to
    one of four methods *join *can combine two DataFrames:'
  prefs: []
  type: TYPE_NORMAL
- en: '‘*left*’: Include all elements of *df1*, accompanied with elements of *df2*
    only if their key is a key of *df1*. Otherwise, the missing portion of the merged
    DataFrame for *df2* will be marked as NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ‘*right*’: ‘*left*’, but on the other DataFrame. Include all elements of *df2*,
    accompanied with elements of *df1* only if their key is a key of *df2*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘*outer*’: Include all elements from both DataFrames, even if a key is not
    present in the other’s — missing elements are marked as NaN.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '‘*inner*’: Include only elements whose keys are present in both DataFrame keys
    (intersection). Default for merge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*To remember*: If you’ve worked with SQL, the word ‘join’ should immediately
    be associated with column-wise addition. If not, ‘join’ and ‘merge’ have very
    similar meanings definition-wise.'
  prefs: []
  type: TYPE_NORMAL
- en: Concat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Whereas merges and joins work horizontally, concatenations, or concats for
    short, attach DataFrames row-wise (vertically). Consider, for example, two DataFrames *df1* and *df2 *with
    the same column names, concatenated using *pandas.concat([df1, df2])*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1cda4fbd10fe600a5fa28427292c4649.png)'
  prefs: []
  type: TYPE_IMG
- en: Although you can use concat for column-wise joining by turning the axis parameter
    to *1*, it would be easier just to use join.
  prefs: []
  type: TYPE_NORMAL
- en: Note that concat is a pandas function and not one of a DataFrame. Hence, it
    takes in a list of DataFrames to be concatenated.
  prefs: []
  type: TYPE_NORMAL
- en: If a DataFrame has a column not included in the other, by default, it will be
    included, with missing values listed as NaN. To prevent this, add an additional
    parameter, *join=’inner’*, which will only concatenate columns both DataFrames
    have in common.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66b0963eca891dec54a8f3e9bebe01bf.png)'
  prefs: []
  type: TYPE_IMG
- en: '*To remember*: In lists and strings, additional items can be concatenated.
    Concatenation is the appendage of additional elements to an existing body, not
    the adding of new information (as is column-wise joining). Since each index/row
    is an individual item, concatenation adds additional items to a DataFrame, which
    can be thought of as a list of rows.'
  prefs: []
  type: TYPE_NORMAL
- en: Append is another method to combine two DataFrames, but it performs the same
    functionality as concat and is less efficient and versatile.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes built-in functions aren’t enough.
  prefs: []
  type: TYPE_NORMAL
- en: Although these functions cover a wide range of what you may need to manipulate
    your data for, sometimes the data manipulation required is too complex for one
    or even a series of functions to perform. Explore complex data manipulation methods
    like parser functions, iterative projection, efficient parsing, and more [here](https://medium.com/analytics-vidhya/tips-tricks-techniques-to-take-your-data-wrangling-skills-to-the-next-level-c912c23b20cb).
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/analytics-vidhya/every-dataframe-manipulation-explained-visualized-intuitively-dbeea7a5529e).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Exploratory Data Analysis on Steroids](https://www.kdnuggets.com/2020/07/exploratory-data-analysis-steroids.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Prepare Your Data](https://www.kdnuggets.com/2020/06/how-prepare-your-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Pandas for Data Science](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
