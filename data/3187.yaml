- en: 'Getting Started with TensorFlow: A Machine Learning Tutorial'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 TensorFlow：机器学习教程
- en: 原文：[https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html](https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html](https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2017/12/getting-started-tensorflow.html/2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2017/12/getting-started-tensorflow.html/2#comments)'
- en: '**By [Dino Causevic](https://www.toptal.com/resume/dino-causevic), Toptal**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[Dino Causevic](https://www.toptal.com/resume/dino-causevic)，Toptal**。'
- en: TensorFlow is an open source software library created by Google that is used
    to implement machine learning and deep learning systems. These two names contain
    a series of powerful algorithms that share a common challenge—to allow a computer
    to learn how to automatically spot complex patterns and/or to make best possible
    decisions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 是 Google 创建的一个开源软件库，用于实现机器学习和深度学习系统。这两个名称包含了一系列强大的算法，面临一个共同的挑战——使计算机能够自动识别复杂的模式和/或做出最佳决策。
- en: If you’re interested in details about these systems, you can learn more from
    the Toptal blog posts on [machine learning](https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer)
    and [deep learning](https://www.toptal.com/machine-learning/an-introduction-to-deep-learning-from-perceptrons-to-deep-networks).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些系统的细节感兴趣，可以从 Toptal 博客上的[机器学习](https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer)和[深度学习](https://www.toptal.com/machine-learning/an-introduction-to-deep-learning-from-perceptrons-to-deep-networks)文章中了解更多。
- en: '![](../Images/6e3b08444cb7bdaecec1e430278822de.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e3b08444cb7bdaecec1e430278822de.png)'
- en: TensorFlow, at its heart, is a library for dataflow programming. It leverages
    various optimization techniques to make the calculation of mathematical expressions
    easier and more performant.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 本质上是一个数据流编程库。它利用各种优化技术，使得数学表达式的计算更加容易和高效。
- en: 'Some of the key features of TensorFlow are:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 的一些关键特性包括：
- en: Efficiently works with mathematical expressions involving multi-dimensional
    arrays
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效处理涉及多维数组的数学表达式
- en: Good support of deep neural networks and machine learning concepts
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对深度神经网络和机器学习概念的良好支持
- en: GPU/CPU computing where the same code can be executed on both architectures
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GPU/CPU 计算中相同的代码可以在这两种架构上执行
- en: High scalability of computation across machines and huge data sets
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高度可扩展的跨机器计算和处理巨大数据集
- en: Together, these features make TensorFlow the perfect framework for machine intelligence
    at a production scale.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特性使 TensorFlow 成为在生产规模上进行机器智能的完美框架。
- en: In this TensorFlow tutorial, you will learn how you can use simple yet powerful
    machine learning methods in TensorFlow and how you can use some of its auxiliary
    libraries to debug, visualize, and tweak the models created with it.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个 TensorFlow 教程中，你将学习如何在 TensorFlow 中使用简单却强大的机器学习方法，以及如何使用一些辅助库来调试、可视化和调整用它创建的模型。
- en: '**Installing TensorFlow**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 TensorFlow**'
- en: We will be using the TensorFlow Python API, which works with Python 2.7 and
    Python 3.3+. The GPU version (Linux only) requires the Cuda Toolkit 7.0+ and cuDNN
    v2+.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 TensorFlow Python API，它适用于 Python 2.7 和 Python 3.3+。GPU 版本（仅限 Linux）需要
    Cuda Toolkit 7.0+ 和 cuDNN v2+。
- en: We shall use the Conda package dependency management system to install TensorFlow.
    Conda allows us to separate multiple environments on a machine. You can learn
    how to install Conda from [here](https://conda.io/docs/user-guide/install/index.html).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Conda 包管理系统来安装 TensorFlow。Conda 允许我们在一台机器上分隔多个环境。你可以从[这里](https://conda.io/docs/user-guide/install/index.html)学习如何安装
    Conda。
- en: After installing Conda, we can create the environment that we will use for TensorFlow
    installation and use. The following command will create our environment with some
    additional libraries like [NumPy](https://www.numpy.org/), which is very useful
    once we start to use TensorFlow.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Conda 后，我们可以创建将用于 TensorFlow 安装和使用的环境。以下命令将创建我们的环境，并包含一些额外的库，如[NumPy](https://www.numpy.org/)，这在我们开始使用
    TensorFlow 时非常有用。
- en: The Python version installed inside this environment is 2.7, and we will use
    this version in this article.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本环境中安装的 Python 版本是 2.7，我们将在本文中使用这个版本。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*To make things easy, we are installing biopython here instead of just NumPy.
    This includes NumPy and a few other packages that we will be needing. You can
    always install the packages as you need them using the `conda install` or the
    `pip install` commands.*'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*为了简化操作，我们在这里安装了 biopython，而不仅仅是 NumPy。这包括 NumPy 以及我们将需要的一些其他包。你可以随时使用 `conda
    install` 或 `pip install` 命令来安装所需的包。*'
- en: The following command will activate the created Conda environment. We will be
    able to use packages installed within it, without mixing with packages that are
    installed globally or in some other environments.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将激活创建的 Conda 环境。我们将能够使用其中安装的包，而不会与全局或其他环境中安装的包混合。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The pip installation tool is a standard part of a Conda environment. We will
    use it to install the TensorFlow library. Prior to doing that, a good first step
    is updating pip to the latest version, using the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: pip 安装工具是 Conda 环境的标准部分。我们将使用它来安装 TensorFlow 库。在此之前，一个好的第一步是使用以下命令将 pip 更新到最新版本：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we are ready to install TensorFlow, by running:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备通过运行以下命令来安装 TensorFlow：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The download and build of TensorFlow can take several minutes. At the time of
    writing, this installs TensorFlow 1.1.0.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow 的下载和构建可能需要几分钟时间。在撰写本文时，这将安装 TensorFlow 1.1.0。
- en: '**Data Flow Graphs**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据流图**'
- en: In TensorFlow, computation is described using data flow graphs. Each node of
    the graph represents an instance of a mathematical operation (like addition, division,
    or multiplication) and each edge is a multi-dimensional data set (tensor) on which
    the operations are performed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TensorFlow 中，计算是通过数据流图来描述的。图中的每个节点代表一个数学操作（如加法、除法或乘法）的实例，每条边缘是一个多维数据集（张量），操作将在其上执行。
- en: '![](../Images/1a9f8cab43009efda34fad441f236123.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a9f8cab43009efda34fad441f236123.png)'
- en: As TensorFlow works with computational graphs, they are managed where each node
    represents the instantiation of an operation where each operation has zero or
    more inputs and zero or more outputs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 TensorFlow 处理计算图，它们被管理，其中每个节点代表操作的实例，每个操作具有零个或多个输入和零个或多个输出。
- en: 'Edges in TensorFlow can be grouped in two categories: Normal edges transfer
    data structure (tensors) where it is possible that the output of one operation
    becomes the input for another operation and special edges, which are used to control
    dependency between two nodes to set the order of operation where one node waits
    for another to finish.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TensorFlow 中，边缘可以分为两类：普通边缘传输数据结构（张量），在这种情况下，一个操作的输出可能成为另一个操作的输入；特殊边缘用于控制两个节点之间的依赖关系，以设置操作的顺序，其中一个节点等待另一个节点完成。
- en: '**Simple Expressions**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单表达式**'
- en: Before we move on to discuss elements of TensorFlow, we will first do a session
    of working with TensorFlow, to get a feeling of what a TensorFlow program looks
    like.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 TensorFlow 的元素之前，我们将先进行一个使用 TensorFlow 的会话，以了解 TensorFlow 程序的样子。
- en: Let’s start with simple expressions and assume that, for some reason, we want
    to evaluate the function `y = 5*x + 13` in TensorFlow fashion.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的表达式开始，并假设由于某种原因，我们想要以 TensorFlow 的方式计算函数 `y = 5*x + 13`。
- en: 'In simple Python code, it would look like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在简单的 Python 代码中，它看起来像这样：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: which gives us in this case a result of 3.0.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这在这种情况下给出了结果 3.0。
- en: Now we will convert the above expression into TensorFlow terms.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将把上述表达式转换为 TensorFlow 术语。
- en: '**Constants**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**常量**'
- en: In TensorFlow, constants are created using the function constant, which has
    the signature `constant(value, dtype=None, shape=None, name='Const', verify_shape=False)`,
    where `value` is an actual constant value which will be used in further computation,
    `dtype` is the data type parameter (e.g., float32/64, int8/16, etc.), `shape`
    is optional dimensions, `name` is an optional name for the tensor, and the last
    parameter is a boolean which indicates verification of the shape of values.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 TensorFlow 中，常量是通过函数 constant 创建的，其签名为 `constant(value, dtype=None, shape=None,
    name='Const', verify_shape=False)`，其中 `value` 是将用于后续计算的实际常量值，`dtype` 是数据类型参数（例如
    float32/64，int8/16 等），`shape` 是可选的维度，`name` 是张量的可选名称，最后一个参数是一个布尔值，指示是否验证值的形状。
- en: 'If you need constants with specific values inside your training model, then
    the `constant` object can be used as in following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在训练模型中需要具有特定值的常量，则可以使用 `constant` 对象，如下例所示：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Variables**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**变量**'
- en: Variables in TensorFlow are in-memory buffers containing tensors which have
    to be explicitly initialized and used in-graph to maintain state across session.
    By simply calling the constructor the variable is added in computational graph.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow中的变量是包含张量的内存缓冲区，这些张量必须显式初始化并在图中使用，以在会话之间保持状态。只需调用构造函数，变量就会添加到计算图中。
- en: 'Variables are especially useful once you start with training models, and they
    are used to hold and update parameters. An initial value passed as an argument
    of a constructor represents a tensor or object which can be converted or returned
    as a tensor. That means if we want to fill a variable with some predefined or
    random values to be used afterwards in the training process and updated over iterations,
    we can define it in the following way:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 变量在开始训练模型时特别有用，它们用于保存和更新参数。作为构造函数参数传递的初始值代表一个张量或对象，可以转换或返回为张量。这意味着，如果我们想用一些预定义的或随机的值填充变量以供之后的训练过程使用并在迭代中更新，我们可以按如下方式定义它：
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Another way to use variables in TensorFlow is in calculations where that variable
    isn’t trainable and can be defined in the following way:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在TensorFlow中使用变量的另一种方法是进行计算，其中该变量不可训练，可以按如下方式定义：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Sessions**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**会话**'
- en: In order to actually evaluate the nodes, we must run a computational graph within
    a session.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际评估节点，我们必须在会话中运行计算图。
- en: A session encapsulates the control and state of the TensorFlow runtime. A session
    without parameters will use the default graph created in the current session,
    otherwise the session class accepts a graph parameter, which is used in that session
    to be executed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 会话封装了TensorFlow运行时的控制和状态。没有参数的会话将使用当前会话中创建的默认图，否则会话类接受一个图参数，该图参数用于在该会话中执行。
- en: Below is a brief code snippet that shows how the terms defined above can be
    used in TensorFlow to calculate a simple linear function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个简短的代码片段，展示了如何在TensorFlow中使用上述定义的术语来计算一个简单的线性函数。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Using TensorFlow: Defining Computational Graphs**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用TensorFlow：定义计算图**'
- en: The good thing about working with dataflow graphs is that the execution model
    is separated from its execution (on CPU, GPU, or some combination) where, once
    implemented, software in TensorFlow can be used on the CPU or GPU where all complexity
    related to code execution is hidden.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据流图的好处是执行模型与其执行（在CPU、GPU或某些组合上）分离，一旦实现，TensorFlow中的软件可以在CPU或GPU上使用，所有与代码执行相关的复杂性都被隐藏。
- en: The computation graph can be built in the process of using the TensorFlow library
    without having to explicitly instantiate [Graph](https://www.tensorflow.org/versions/master/api_docs/python/tf/Graph)
    objects.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 计算图可以在使用TensorFlow库的过程中构建，无需显式实例化[Graph](https://www.tensorflow.org/versions/master/api_docs/python/tf/Graph)对象。
- en: A Graph object in TensorFlow can be created as a result of a simple line of
    code like `c = tf.add(a, b)`. This will create an operation node that takes two
    tensors `a` and `b` that produce their sum `c` as output.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow中的Graph对象可以通过像`c = tf.add(a, b)`这样的简单代码行创建。这将创建一个操作节点，该节点接受两个张量`a`和`b`，并将它们的和`c`作为输出。
- en: The computation graph is a built-in process that uses the library without needing
    to call the [graph](https://www.tensorflow.org/versions/master/api_docs/python/tf/Graph)
    object directly. A graph object in TensorFlow, which contains a set of operations
    and tensors as units of data, is used between operations which allows the same
    process and contains more than one graph where each graph will be assigned to
    a different session. For example, the simple line of code `c = tf.add(a, b)` will
    create an operation node that takes two tensors `a` and `b` as input and produces
    their sum `c` as output.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 计算图是一个内置过程，它使用库而无需直接调用[graph](https://www.tensorflow.org/versions/master/api_docs/python/tf/Graph)对象。TensorFlow中的图对象包含一组操作和张量作为数据单元，在操作之间使用，允许相同的过程，并包含多个图，其中每个图将分配给不同的会话。例如，简单的代码行`c
    = tf.add(a, b)`将创建一个操作节点，该节点接受两个张量`a`和`b`作为输入，并生成它们的和`c`作为输出。
- en: TensorFlow also provides a feed mechanism for patching a tensor to any operation
    in the graph, where the feed replaces the output of an operation with the tensor
    value. The feed data are passed as an argument in the `run()` function call.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: TensorFlow还提供了一个馈送机制，用于将张量传递到图中的任何操作，其中馈送用张量值替换操作的输出。馈送数据作为`run()`函数调用中的参数传递。
- en: 'A placeholder is TensorFlow’s way of allowing developers to inject data into
    the computation graph through placeholders which are bound inside some expressions.
    The signature of the placeholder is:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符是 TensorFlow 允许开发者通过占位符将数据注入计算图中的方式，占位符在某些表达式内部绑定。占位符的签名是：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: where dtype is the type of elements in the tensors and can provide both the
    shape of the tensors to be fed and the name for the operation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 dtype 是张量中元素的类型，可以提供要填充张量的形状和操作的名称。
- en: 'If the shape isn’t passed, this tensor can be fed with any shape. An important
    note is that the placeholder tensor has to be fed with data, otherwise, upon execution
    of the session and if that part is missing, the placeholder generates an error
    with the following structure:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有传递形状，该张量可以接收任何形状。一个重要的说明是占位符张量必须用数据填充，否则，在执行会话时，如果该部分缺失，占位符将产生以下结构的错误：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The advantage of placeholders is that they allow developers to create operations,
    and the computational graph in general, without needing to provide the data in
    advance for that, and the data can be added in runtime from external sources.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 占位符的优点在于它们允许开发者创建操作以及计算图，而无需提前提供数据，数据可以在运行时从外部源添加。
- en: Let’s take a simple problem of multiplying two integers `x` and `y` in TensorFlow
    fashion, where a placeholder will be used together with a feed mechanism through
    the session `run` method.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以 TensorFlow 风格的两个整数 `x` 和 `y` 相乘的简单问题为例，其中将使用占位符以及通过会话 `run` 方法的填充机制。
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Visualizing the Computational Graph with TensorBoard**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 TensorBoard 可视化计算图**'
- en: TensorBoard is a visualization tool for analyzing data flow graphs. This can
    be useful for gaining better understanding of machine learning models.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 是一个用于分析数据流图的可视化工具。这有助于更好地理解机器学习模型。
- en: With TensorBoard, you can gain insight into different types of statistics about
    the parameters and details about the parts of the computational graph in general.
    It is not unusual that a deep neural network has large number of nodes. TensorBoard
    allows developers to get insight into each node and how the computation is executed
    over the TensorFlow runtime.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TensorBoard，你可以深入了解有关参数的不同统计信息以及计算图部分的详细信息。深度神经网络通常有大量节点。TensorBoard 允许开发者深入了解每个节点及其在
    TensorFlow 运行时的计算执行情况。
- en: '![](../Images/48d7c35fa2fff56b5635fa7bdf908e1c.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/48d7c35fa2fff56b5635fa7bdf908e1c.png)'
- en: Now let’s get back to our example from the beginning of this TensorFlow tutorial
    where we defined a linear function with the format `y = a*x + b`.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们回到 TensorFlow 教程开始时的示例，我们定义了一个格式为 `y = a*x + b` 的线性函数。
- en: 'In order to log events from session which later can be used in TensorBoard,
    TensorFlow provides the `FileWriter` class. It can be used to create an event
    file for storing [summaries](https://www.tensorflow.org/api_guides/python/summary)
    and [events](https://www.tensorflow.org/api_docs/python/tf/Event) where the constructor
    accepts six parameters and looks like:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了记录来自会话的事件以供 TensorBoard 后续使用，TensorFlow 提供了 `FileWriter` 类。它可用于创建存储 [摘要](https://www.tensorflow.org/api_guides/python/summary)
    和 [事件](https://www.tensorflow.org/api_docs/python/tf/Event) 的事件文件，构造函数接受六个参数，格式如下：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'where the logdir parameter is required, and others have default values. The
    graph parameter will be passed from the session object created in the training
    program. The full example code looks like:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 logdir 参数是必需的，其他参数有默认值。图参数将从训练程序中创建的会话对象传递。完整的示例代码如下：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We added just two new lines. We merge all the summaries collected in the default
    graph, and `FileWriter`is used to dump events to the file as we described above,
    respectively.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仅添加了两行新代码。我们合并了在默认图中收集的所有摘要，`FileWriter`用于将事件转储到文件中，如上所述。
- en: 'After running the program, we have the file in the directory logs, and the
    last step is to run `tensorboard`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序后，我们在目录 logs 中有了文件，最后一步是运行 `tensorboard`：
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now TensorBoard is started and running on the default port 6006\. After opening
    https://localhost:6006 and clicking on the Graphs menu item (located at the top
    of the page), you will be able to see the graph, like the one in the picture below:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 TensorBoard 已经启动并运行在默认端口 6006。打开 https://localhost:6006 并点击页面顶部的 Graphs 菜单项，你将能看到图形，如下图所示：
- en: '![](../Images/d7def7e0a9ba10e06df3f474264fe157.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d7def7e0a9ba10e06df3f474264fe157.png)'
- en: TensorBoard marks constants and summary nodes specific symbols, which are described
    below.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: TensorBoard 为常量和汇总节点标记特定的符号，下面进行了描述。
- en: '![](../Images/f39a2398dc314d85d44d6734a1ae94b9.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f39a2398dc314d85d44d6734a1ae94b9.png)'
- en: '**Mathematics with TensorFlow**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**TensorFlow 数学**'
- en: Tensors are the basic data structures in TensorFlow, and they represent the
    connecting edges in a dataflow graph.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 张量是 TensorFlow 中的基本数据结构，它们表示数据流图中的连接边缘。
- en: 'A tensor simply identifies a multidimensional array or list. The tensor structure
    can be identified with three parameters: rank, shape, and type.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 张量简单地标识一个多维数组或列表。张量结构可以通过三个参数来识别：秩、形状和类型。
- en: 'Rank: Identifies the number of dimensions of the tensor. A rank is known as
    the order or n-dimensions of a tensor, where for example rank 1 tensor is a vector
    or rank 2 tensor is matrix.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 秩：标识张量的维度数量。秩也称为张量的阶数或 n-维度，例如秩 1 张量是向量，秩 2 张量是矩阵。
- en: 'Shape: The shape of a tensor is the number of rows and columns it has.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形状：张量的形状是它的行数和列数。
- en: 'Type: The data type assigned to tensor elements.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型：分配给张量元素的数据类型。
- en: To build a tensor in TensorFlow, we can build an n-dimensional array. This can
    be done easily by using the NumPy library, or by converting a Python n-dimensional
    array into a TensorFlow tensor.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 TensorFlow 中构建张量，我们可以构建一个 n 维数组。这可以通过使用 NumPy 库轻松完成，或者通过将 Python n 维数组转换为
    TensorFlow 张量来完成。
- en: '![](../Images/54429bdf3b195d6b7305c5e32546eff4.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/54429bdf3b195d6b7305c5e32546eff4.png)'
- en: To build a 1-d tensor, we will use a NumPy array, which we’ll construct by passing
    a built-in Python list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建一个 1-d 张量，我们将使用 NumPy 数组，通过传递一个内置的 Python 列表来构造它。
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Working with this kind of array is similar to working with a built-in Python
    list. The main difference is that the NumPy array also contains some additional
    properties, like dimension, shape, and type.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这种数组与处理内置的 Python 列表类似。主要区别在于 NumPy 数组还包含一些额外的属性，如维度、形状和类型。
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A NumPy array can be easily converted into a TensorFlow tensor with the auxiliary
    function [convert_to_tensor](https://www.tensorflow.org/versions/master/api_docs/python/tf/convert_to_tensor),
    which helps developers convert Python objects to tensor objects. This function
    accepts tensor objects, NumPy arrays, Python lists, and Python scalars.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数组可以通过辅助函数 [convert_to_tensor](https://www.tensorflow.org/versions/master/api_docs/python/tf/convert_to_tensor)
    轻松转换为 TensorFlow 张量，该函数帮助开发者将 Python 对象转换为张量对象。此函数接受张量对象、NumPy 数组、Python 列表和 Python
    标量。
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now if we bind our tensor to the TensorFlow session, we will be able to see
    the results of our conversion.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们将张量绑定到 TensorFlow 会话中，我们将能够看到转换的结果。
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Output:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE19]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can create a 2-d tensor, or matrix, in a similar way:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以以类似的方式创建一个 2-d 张量或矩阵：
- en: '[PRE20]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '**Tensor Operations**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**张量操作**'
- en: In the example above, we introduce a few TensorFlow operations on the vectors
    and matrices. The operations perform certain calculations on the tensors. Which
    calculations those are is shown in the table below.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们对向量和矩阵引入了一些 TensorFlow 操作。这些操作对张量执行特定的计算。这些计算具体是什么，如下表所示。
- en: TensorFlow operations listed in the table above work with tensor objects, and
    are performed element-wise. So if you want to calculate the cosine for a vector
    x, the TensorFlow operation will do calculations for each element in the passed
    tensor.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 上表中列出的 TensorFlow 操作处理张量对象，并逐元素执行。因此，如果你想计算向量 x 的余弦，TensorFlow 操作将对传递的张量中的每个元素进行计算。
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Matrix Operations**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**矩阵操作**'
- en: Matrix operations are very important for machine learning models, like linear
    regression, as they are often used in them. TensorFlow supports all the most common
    matrix operations, like [multiplication](https://www.tensorflow.org/versions/master/api_docs/python/tf/matmul),
    [transposing](https://www.tensorflow.org/versions/master/api_docs/python/tf/transpose),
    [inversion](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_inverse),
    calculating the [determinant](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_determinant),
    solving [linear equations](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_solve),
    and [many more](https://www.tensorflow.org/versions/master/api_guides/python/math_ops#Matrix_Math_Functions).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 矩阵操作对机器学习模型非常重要，例如线性回归，因为它们通常会被用到。TensorFlow 支持所有最常见的矩阵操作，如 [乘法](https://www.tensorflow.org/versions/master/api_docs/python/tf/matmul)、[转置](https://www.tensorflow.org/versions/master/api_docs/python/tf/transpose)、[逆矩阵](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_inverse)、计算
    [行列式](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_determinant)、解决
    [线性方程](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_solve)
    等等。
- en: Next up, we will explain some of the matrix operations. They tend to be important
    when comes to machine learning models, like in linear regression. Let’s write
    some code that will do basic matrix operations like multiplication, getting the
    [transpose](https://www.tensorflow.org/versions/master/api_docs/python/tf/transpose),
    getting the determinant, multiplication, sol, and many more.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将解释一些矩阵操作。它们在机器学习模型中往往非常重要，例如在线性回归中。让我们编写一些代码，进行基本的矩阵操作，如乘法、获取 [转置](https://www.tensorflow.org/versions/master/api_docs/python/tf/transpose)、获取行列式、乘法、解方程等等。
- en: Below are basic examples of calling these operations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是调用这些操作的基本示例。
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '* * *'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的IT需求'
- en: '* * *'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题更多信息
- en: '[Federated Learning: Collaborative Machine Learning with a Tutorial…](https://www.kdnuggets.com/2021/12/federated-learning-collaborative-machine-learning-tutorial-get-started.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[联邦学习：协作机器学习教程…](https://www.kdnuggets.com/2021/12/federated-learning-collaborative-machine-learning-tutorial-get-started.html)'
- en: '[Getting Started with Scikit-learn for Classification in Machine Learning](https://www.kdnuggets.com/getting-started-with-scikit-learn-for-classification-in-machine-learning)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 Scikit-learn 进行机器学习分类](https://www.kdnuggets.com/getting-started-with-scikit-learn-for-classification-in-machine-learning)'
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始进行自动化文本摘要](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
- en: '[Getting Started Cleaning Data](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始清理数据](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 SQL 备忘单](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
- en: '[Getting Started with spaCy for NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 spaCy 进行 NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
