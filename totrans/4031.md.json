["```py\n%%capture --no-display\n!pip install pathway\n```", "```py\n# Importing libraries for data processing, visualization, and dashboard creation\n\nimport datetime\nimport bokeh.models\nimport bokeh.plotting\nimport panel\nimport pathway as pw\n```", "```py\n# Command to download the sample APPLE INC stock prices extracted via Polygon API and stored in a CSV for ease of review of this notebook.\n\n%%capture --no-display\n!wget -nc https://gist.githubusercontent.com/janchorowski/e351af72ecd8d206a34763a428826ab7/raw/ticker.csv\n```", "```py\n# Creating a streaming data source from a CSV file\n\nfname = \"ticker.csv\"\nschema = pw.schema_from_csv(fname)\ndata = pw.demo.replay_csv(fname, schema=schema, input_rate=1000)\n\n# Uncommenting the line below will override the data table defined above and switch the data source to static mode, which is helpful for initial testing\n# data = pw.io.csv.read(fname, schema=schema, mode=\"static\")\n\n# Parsing the timestamps in the data\n\ndata = data.with_columns(t=data.t.dt.utc_from_timestamp(unit=\"ms\"))\n```", "```py\n# Calculating the 20-minute rolling statistics for Bollinger Bands\n\nminute_20_stats = (\n    data.windowby(\n        pw.this.t,\n        window=pw.temporal.sliding(\n            hop=datetime.timedelta(minutes=1),\n            duration=datetime.timedelta(minutes=20),\n        ),\n        behavior=pw.temporal.exactly_once_behavior(),\n        instance=pw.this.ticker,\n    )\n    .reduce(\n        ticker=pw.this._pw_instance,\n        t=pw.this._pw_window_end,\n        volume=pw.reducers.sum(pw.this.volume),\n        transact_total=pw.reducers.sum(pw.this.volume * pw.this.vwap),\n        transact_total2=pw.reducers.sum(pw.this.volume * pw.this.vwap**2),\n    )\n    .with_columns(vwap=pw.this.transact_total / pw.this.volume)\n    .with_columns(\n        vwstd=(pw.this.transact_total2 / pw.this.volume - pw.this.vwap**2)\n        ** 0.5\n    )\n    .with_columns(\n        bollinger_upper=pw.this.vwap + 2 * pw.this.vwstd,\n        bollinger_lower=pw.this.vwap - 2 * pw.this.vwstd,\n    )\n)\n```", "```py\n# Computing the 1-minute rolling statistics\n\nminute_1_stats = (\n    data.windowby(\n        pw.this.t,\n        window=pw.temporal.tumbling(datetime.timedelta(minutes=1)),\n        behavior=pw.temporal.exactly_once_behavior(),\n        instance=pw.this.ticker,\n    )\n    .reduce(\n        ticker=pw.this._pw_instance,\n        t=pw.this._pw_window_end,\n        volume=pw.reducers.sum(pw.this.volume),\n        transact_total=pw.reducers.sum(pw.this.volume * pw.this.vwap),\n    )\n    .with_columns(vwap=pw.this.transact_total / pw.this.volume)\n)\n```", "```py\n# Joining the 1-minute and 20-minute statistics for comprehensive analysis\n\njoint_stats = (\n    minute_1_stats.join(\n        minute_20_stats,\n        pw.left.t == pw.right.t,\n        pw.left.ticker == pw.right.ticker,\n    )\n    .select(\n        *pw.left,\n        bollinger_lower=pw.right.bollinger_lower,\n        bollinger_upper=pw.right.bollinger_upper\n    )\n    .with_columns(\n        is_alert=(pw.this.volume > 10000)\n        & (\n            (pw.this.vwap > pw.this.bollinger_upper)\n            | (pw.this.vwap < pw.this.bollinger_lower)\n        )\n    )\n    .with_columns(\n        action=pw.if_else(\n            pw.this.is_alert,\n            pw.if_else(\n                pw.this.vwap > pw.this.bollinger_upper, \"sell\", \"buy\"\n            ),\n            \"hold\",\n        )\n    )\n)\nalerts = joint_stats.filter(pw.this.is_alert)\n```", "```py\n# Function to create the statistics plot\n\ndef stats_plotter(src):\n    actions = [\"buy\", \"sell\", \"hold\"]\n    color_map = bokeh.models.CategoricalColorMapper(\n        factors=actions, palette=(\"#00ff00\", \"#ff0000\", \"#00000000\")\n    )\n\n    fig = bokeh.plotting.figure(\n        height=400,\n        width=600,\n        title=\"20 minutes Bollinger bands with last 1 minute average\",\n        x_axis_type=\"datetime\",\n        y_range=(188.5, 191),\n    )\n    fig.line(\"t\", \"vwap\", source=src)\n    band = bokeh.models.Band(\n        base=\"t\",\n        lower=\"bollinger_lower\",\n        upper=\"bollinger_upper\",\n        source=src,\n        fill_alpha=0.3,\n        fill_color=\"gray\",\n        line_color=\"black\",\n    )\n    fig.scatter(\n        \"t\",\n        \"vwap\",\n        color={\"field\": \"action\", \"transform\": color_map},\n        size=10,\n        marker=\"circle\",\n        source=src,\n    )\n    fig.add_layout(band)\n    return fig\n\n# Combining the plot and table in a Panel Row\n\nviz = panel.Row(\n    joint_stats.plot(stats_plotter, sorting_col=\"t\"),\n    alerts.select(\n        pw.this.ticker, pw.this.t, pw.this.vwap, pw.this.action\n    ).show(include_id=False, sorters=[{\"field\": \"t\", \"dir\": \"desc\"}]),\n)\nviz\n```", "```py\n# Command to start the Pathway data processing engine\n%%capture --no-display\npw.run() \n```"]