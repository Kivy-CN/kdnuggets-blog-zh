["```py\nimport numpy as np\n\ndata = np.array([1.0, 2.0, np.nan, 4.0, 5.0])\nmasked_array = np.ma.array(data)\nprint(masked_array.data)  # Output: [ 1\\.  2\\. nan  4\\.  5.] \n```", "```py\nimport numpy as np\n\ndata = np.array([1.0, 2.0, np.nan, 4.0, 5.0])\nmask = np.isnan(data)  # Create a mask where NaN values are True\nmasked_array = np.ma.array(data, mask=mask)\nprint(masked_array.mask)  # Output: [False False  True False False] \n```", "```py\nimport numpy as np\n\n# Data with some missing values represented by -999\ndata = np.array([10, 20, -999, 30, -999, 40])\n\n# Create a mask where -999 is considered as missing data\nmask = (data == -999)\n\n# Create a masked array using the data and mask\nmasked_array = np.ma.array(data, mask=mask)\n\n# Calculate the mean, ignoring masked values\nmean_value = masked_array.mean()\nprint(mean_value) \n```", "```py\nimport numpy as np\n\n# Example temperature readings from 5 sensors over 10 days\n# Rows: days, Columns: sensors\ntemperature_data = np.array([\n    [22.1, 21.5, np.nan, 23.0, 22.8],  # Day 1\n    [20.3, np.nan, 22.0, 21.8, 23.1],  # Day 2\n    [np.nan, 23.2, 21.7, 22.5, 22.0],  # Day 3\n    [21.8, 22.0, np.nan, 21.5, np.nan],  # Day 4\n    [22.5, 22.1, 21.9, 22.8, 23.0],  # Day 5\n    [np.nan, 21.5, 22.0, np.nan, 22.7],  # Day 6\n    [22.0, 22.5, 23.0, np.nan, 22.9],  # Day 7\n    [21.7, np.nan, 22.3, 22.1, 21.8],  # Day 8\n    [22.4, 21.9, np.nan, 22.6, 22.2],  # Day 9\n    [23.0, 22.5, 21.8, np.nan, 22.0]   # Day 10\n])\n\n# Create a mask for missing values (NaNs)\nmask = np.isnan(temperature_data)\n\n# Create a masked array\nmasked_data = np.ma.masked_array(temperature_data, mask=mask)\n\n# Calculate the average temperature for each day, ignoring missing values\ndaily_averages = masked_data.mean(axis=1)  # Axis 1 represents days\n\n# Print the results\nfor day, avg_temp in enumerate(daily_averages, start=1):\n    print(f\"Day {day}: Average Temperature = {avg_temp:.2f} Â°C\") \n```"]