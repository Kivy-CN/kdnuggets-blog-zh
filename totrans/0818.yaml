- en: Creating Visuals with Matplotlib and Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/creating-visuals-with-matplotlib-and-seaborn](https://www.kdnuggets.com/creating-visuals-with-matplotlib-and-seaborn)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/f0c896249a7b05ed54bf272c9ddb2a55.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [storyset](https://www.freepik.com/free-vector/site-stats-concept-illustration_7140744.htm#query=visualization&position=31&from_view=search&track=sph)
    on [Freepik](https://www.freepik.com/)
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization is essential in data work as it helps people understand what
    happens with our data. It’s hard to ingest the data information directly in a
    raw form, but visualization would spark people's interest and engagement. This
    is why learning data visualization is important to succeed in the data field.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib is one of Python's most popular data visualization libraries because
    it’s very versatile, and you can visualize virtually everything from scratch.
    You can control many aspects of your visualization with this package.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, [Seaborn](https://seaborn.pydata.org/) is a Python data visualization
    package that is built on top of Matplotlib. It offers much simpler high-level
    code with various in-built themes inside the package. The package is great if
    you want a quick data visualization with a nice look.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will explore both packages and learn how to visualize your
    data with these packages. Let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned above, Matplotlib is a versatile Python package where we can control
    various aspects of the visualization. The package is based on the [Matlab](http://mathworks.com/products/matlab.html)
    programming language, but we applied it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib library is usually already available in your environment, especially
    if you use Anaconda.  If not, you can install them with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After the installation, we would import the Matplotlib package for visualization
    with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s start with the basic plotting with Matplotlib. For starters, I would create
    sample data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: With this data, we would create a line plot with the Matplotlib package.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/ff53230a30b21fa4f127cdf83e507186.png)'
  prefs: []
  type: TYPE_IMG
- en: In the code above, we pass the data into the matplotlib function (x and y) to
    create a simple line plot with a blue line. Additionally, we control the axis
    label and title with the code above.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try to create a multiple matplotlib plot with the subplot function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/2d5c04a01628c7dac4d74a8cfe60dad7.png)'
  prefs: []
  type: TYPE_IMG
- en: In the code above, we create two plot side by side. The subplot function controls
    the plot position; for example, plt.subplot(1,2,1) means that we would have two
    plots in one row (first parameter) and two columns (second parameter). The third
    parameter is to control which plot we are now referring to. So plt.subplot(1,2,1)
    means the first plot of the single row and double columns plots.
  prefs: []
  type: TYPE_NORMAL
- en: That is the basis of the Matplotlib functions, but if we want more control over
    the Matplotlib visualization, we need to use the Object Oriented Method (OOM).
    With OOM, we would produce visualization directly from the figure object and call
    any attribute from the specified object.
  prefs: []
  type: TYPE_NORMAL
- en: Let me give you an example visualization with Matplotlib OOM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/8c7458618dec4593d0cdacef53cccb25.png)'
  prefs: []
  type: TYPE_IMG
- en: The result is similar to the plot we created, but the code is more complex.
    At first, it seemed counterproductive, but using the OOM allowed us to control
    virtually everything with our visualization. For example, in the plot above, we
    can control where the axes are located within the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: To see how we see the differences in using OOM compared to the normal plotting
    function, let’s put two plots with their respective axes overlapping on each other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/0e22c0956b8ec2689e95af70ca2d1644.png)'
  prefs: []
  type: TYPE_IMG
- en: In the code above, we specified a canvas object with the plt.figure function
    and produced all these plots from the figure object. We can produce as many axes
    as possible within one canvas and put a visualization plot inside them.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also possible to automatically create the figure, and axes object with
    the subplot function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/a282c6ee4cfcce188adda921fb7c9f8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the subplots function, we create both figures and a list of axes objects.
    In the function above, we specify the number of plots and the position of one
    row with two column plots.
  prefs: []
  type: TYPE_NORMAL
- en: For the axes object, it’s a list of all the axes for the plots we can access.
    In the code above, we access the first object on the list to create the plot.
    The result is two plots, one filled with the line plot while the other only the
    axes.
  prefs: []
  type: TYPE_NORMAL
- en: Because subplots produce a list of axes objects, you can iterate them similarly
    to the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/718427096d3f34d87dfe1594d9752524.png)'
  prefs: []
  type: TYPE_IMG
- en: You can play with the code to produce the needed plots. Additionally, we use
    the tight_layout function because there is a possibility of plots overlapping.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try some basic parameters we can use to control our Matplotlib plot. First,
    let’s try changing the canvas and pixel sizes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/80ca2e2b66776773bd26579fb14d0618.png)'
  prefs: []
  type: TYPE_IMG
- en: The parameter figsize accept a tuple of two number (width, height) where the
    result is similar to the plot above.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s try to add a legend to the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/4661c2b21ccbe9bf5c15f76a01c4ceed.png)'
  prefs: []
  type: TYPE_IMG
- en: By assigning the label parameter to the plot and using the legend function,
    we can show the label as a legend.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we can use the following code to save our plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: There are many special plots outside the line plot shown above. We can access
    these plots using these functions. Let’s try several plots that might help your
    work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter Plot**'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a line plot, we can create a scatter plot to visualize the feature
    relationship using the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/448f49532d809a70ebf21df2fe0cf194.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Histogram Plot**'
  prefs: []
  type: TYPE_NORMAL
- en: A histogram plot visualizes the data distribution represented in the bins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/a282c6ee4cfcce188adda921fb7c9f8b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Boxplot**'
  prefs: []
  type: TYPE_NORMAL
- en: The boxplot is a visualization technique representing data distribution into
    quartiles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/0628557a97b35967115c2d143d190ade.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Pie Plot**'
  prefs: []
  type: TYPE_NORMAL
- en: The Pie plot is a circular shape plot that represents the numerical proportions
    of the categorical plot—for example, the frequency of the categorical values in
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/3f69aeeb1f8423712c3f108f3c126993.png)'
  prefs: []
  type: TYPE_IMG
- en: There are still many special plots from the Matplotlib library that you can
    check out [here](https://matplotlib.org/stable/plot_types/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Visualization with Seaborn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Seaborn](https://seaborn.pydata.org/) is a Python package for statistical
    visualization built on top of Matplotlib. What makes Seaborn stand out is that
    it simplifies creating visualization with an excellent style. The package also
    works with Matplotlib, as many Seaborn APIs are tied to Matplotlib.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s try out the Seaborn package. If you haven’t installed the package, you
    can do that by using the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Seaborn has an in-built API to get sample datasets that we can use for testing
    the package. We would use this dataset to create various visualization with Seaborn.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/48050471847e87be6104aa2c979c87cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the data above, we would explore the Seaborn plot, including distributional,
    categorical, relation, and matrix plots.
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributional Plots**'
  prefs: []
  type: TYPE_NORMAL
- en: The first plot we would try with Seaborn is the distributional plot to visualize
    the numerical feature distribution. We can do that we the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/e13b19abaca3afadb943cae3acbef03b.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, the displot function would produce a histogram plot. If we want
    to smoothen the plot, we can use the KDE parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/f591a0460b704f826797ffc622b032bc.png)'
  prefs: []
  type: TYPE_IMG
- en: The distributional plot can also be split according to the categorical values
    in the DataFrame using the hue parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/f4b19c6a5983381bf3ded64da25cf37b.png)'
  prefs: []
  type: TYPE_IMG
- en: We can even split the plot even further with the row or col parameter. With
    this parameter, we produce several plots divided with a combination of categorical
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/7a23d4602d8492a55777ced2b70f3dea.png)'
  prefs: []
  type: TYPE_IMG
- en: Another way to display the data distribution is by using the boxplot. Seabron
    could facilitate the visualization easily with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/276c54bf19d87fbe3b5acad1b749d479.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the violin plot, we can display the data distribution that combines the
    boxplot with KDE.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/4be3161d7ffe2b82b24c40d4d743b756.png)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, we can show the data point to the plot by combining the violin and swarm
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/3d0660a41d594096bff54199e0d2f980.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Categorical Plots**'
  prefs: []
  type: TYPE_NORMAL
- en: A categorical plot is a various Seaborn API that applies to produce the visualization
    with categorical data. Let’s explore some of the available plots.
  prefs: []
  type: TYPE_NORMAL
- en: First, we would try to create a count plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/387eba29a61798c066b7953f465a778c.png)'
  prefs: []
  type: TYPE_IMG
- en: The count plot would show a bar with the frequency of the categorical values.
    If we want to show the count number in the plot, we need to combine the Matplotlib
    function into the Seaborn API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/e8f9b9adac6bb3ad627b9b4ff86a041f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can extend the plot further with the hue parameter and show the frequency
    values with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/573220835749102df28b1a16ca92eb4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we would try to develop a barplot. Barplot is a categorical plot that
    shows data aggregation with an error bar.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/1056127658caac3d58016e9465972ffb.png)'
  prefs: []
  type: TYPE_IMG
- en: Barplot uses a combination of categorical and numerical features to provide
    the aggregation statistic. By default, the barplot uses an average aggregation
    function with a confidence interval 95% error bar.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to change the aggregation function, we can pass the function into
    the estimator parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/53802206efe9c210213bed5f839dcd3f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Relational Plots**'
  prefs: []
  type: TYPE_NORMAL
- en: A relational plot is a visualization technique to show the relationship between
    features. It’s mainly used to identify any kind of patterns that exist within
    the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: First, we would use a scatter plot to show the relation between certain numerical
    features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/c9919188862d9d0b5975edda917985c0.png)'
  prefs: []
  type: TYPE_IMG
- en: We can combine the scatter plot with the distributional plot using a joint plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/47fd2d5f59f8994ce79d7ead8a7e540a.png)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, we can automatically plot pairwise relationships between features in
    the DataFrame using the pairplot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/6d6c11604260571653f0a9bbf33220e5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Matrix Plots**'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix plot is used to visualize the data as a color-encoded matrix. It is used
    to see the relationship between the features or help recognize the clusters within
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we have a correlation data matrix from our dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/4926467db3382f51ec936ceb7f5773cf.png)'
  prefs: []
  type: TYPE_IMG
- en: We could understand the dataset above better if we represented them in a color-encoded
    plot. That is why we would use a heatmap plot.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/88542f674a16cc65d83ee1c8f9c59b75.png)'
  prefs: []
  type: TYPE_IMG
- en: The matrix plot could also produce a hierarchal clustering plot that infers
    the values within our dataset and clusters them according to the existing similarity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Visuals with Matplotlib and Seaborn](../Images/c359443fa899ae9be08234fb48f15130.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data visualization is a crucial part of the data world as it helps the audience
    to understand what happens with our data quickly. The standard Python packages
    for data visualization are Matplotlib and Seaborn. In this article, we have learned
    the primary usage of the packagesWhat other packages besides Matplotlib and Seaborn
    are available for data visualization in Python? and introduced several visualizations
    that could help our work.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Cornellius Yudha Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**
    is a data science assistant manager and data writer. While working full-time at
    Allianz Indonesia, he loves to share Python and Data tips via social media and
    writing media.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Creating Beautiful Histograms with Seaborn](https://www.kdnuggets.com/2023/01/creating-beautiful-histograms-seaborn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Visualization in Python with Seaborn](https://www.kdnuggets.com/2022/04/data-visualization-python-seaborn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News 22:n16, Apr 20: Top YouTube Channels for Learning…](https://www.kdnuggets.com/2022/n16.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Data Visualization Using Matplotlib](https://www.kdnuggets.com/2022/12/introduction-data-visualization-matplotlib.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Matplotlib Cheat Sheets](https://www.kdnuggets.com/2023/01/python-matplotlib-cheat-sheets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Winning The Room: Creating and Delivering an Effective Data-Driven…](https://www.kdnuggets.com/2022/04/franks-winning-room-creating-delivering-effective-data-driven-presentation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
