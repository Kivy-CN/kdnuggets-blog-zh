- en: Beginner’s Guide to Data Cleaning with Pyjanitor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/beginners-guide-to-data-cleaning-with-pyjanitor](https://www.kdnuggets.com/beginners-guide-to-data-cleaning-with-pyjanitor)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Data Cleaning with PyJanitor](../Images/9fe5bbb5c146b54a62f4af26d2c242c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever dealt with messy datasets? They are one of the biggest hurdles
    in any data science project. These datasets can contain inconsistencies, missing
    values, or irregularities that hinder analysis. Data cleaning is the essential
    first step that lays the foundation for accurate and reliable insights, but it's
    lengthy and time-consuming.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Fear not! Let me introduce you to Pyjanitor, a fantastic Python library that
    can save the day. It is a convenient Python package, providing a simple remedy
    to these data-cleaning challenges. In this article, I am going to discuss the
    importance of Pyjanitor along with its features and practical usage.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this article, you will have a clear understanding of how Pyjanitor
    simplifies data cleaning and its application in everyday data-related tasks.
  prefs: []
  type: TYPE_NORMAL
- en: What is Pyjanitor?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pyjanitor is an extended R package of Python, built on top of pandas that simplifies
    data cleaning and preprocessing tasks. It extends its functionality by offering
    a variety of useful functions that refine the process of cleaning, transforming,
    and preparing datasets. Think of it as an upgrade to your data-cleaning toolkit.
    Are you eager to learn about Pyjanitor? Me too. Let’s start.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First things first, you need to install Pyjanitor. Open your terminal or command
    prompt and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to import Pyjanitor and Pandas into your Python script. This
    can be done by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you are ready to use Pyjanitor for your data cleaning tasks. Moving forward,
    I will cover some of the most useful features of Pyjanitor which are:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Cleaning Column Names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Raise your hand if you have ever been frustrated by inconsistent column names.
    Yup, me too. With Pyjanitor's `clean_names()` function, you can quickly standardize
    your column names making them uniform and consistent with just a simple call.
    This powerful function replaces spaces with underscores, converts all characters
    to lowercase, strips leading and trailing whitespace, and even replaces dots with
    underscores. Let’s understand it with a basic example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Renaming Columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At times, renaming columns not only enhances our understanding of the data
    but also improves its readability and consistency. Thanks to the `rename_column()`
    function, this task becomes effortless. A simple example showcasing the usability
    of this function is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Handling Missing Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Missing values are a real headache when dealing with datasets. Fortunately,
    the `fill_empty()` comes in handy for addressing these issues. Let's explore how
    to handle missing values using Pyjanitor with a practical example. First, we will
    create a dummy data frame and populate it with some missing values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s see how Pyjanitor can assist in filling up these missing values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the department of employee **‘James’** is substituted with
    ‘**Unknown'**, and the salary of **‘Alicia’** is substituted with the average
    of **‘Unknown’** and **‘James’** salaries. You can use various strategies for
    handling missing values like forward pass, backward pass, or, filling with a specific
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Filtering Rows & Selecting Columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Filtering rows and columns is a crucial task in data analysis. Pyjanitor simplifies
    this process by providing functions that allow you to select columns and filter
    rows based on specific conditions. Suppose you have a data frame containing student
    records, and you want to filter out students(rows) whose marks are less than 60\.
    Let’s explore how Pyjanitor helps us in achieving this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now suppose you also want to output only specific columns, such as only the
    name and ID, rather than their entire data. Pyjanitor can also help in doing this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Chaining Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With Pyjanitor''s method chaining feature, you can perform multiple operations
    in a single line. This capability stands out as one of its best features. To illustrate,
    let''s consider a data frame containing data about cars:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now that we see the data frame contains missing values and inconsistent column
    names. We can solve this by performing operations sequentially, such as `clean_names()`,
    `rename_column()`, and, `dropna()`, etc. in multiple lines. Alternatively, we
    can chain these methods together– performing multiple operations in a single line
    –for a fluent workflow and cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In this pipeline, the following operations have been performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clean_names()` function cleans out the column names.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dropna()` function drops the rows with missing values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select_columns()` function selects specific columns which are ‘car_id’, ‘car_model’
    and ‘price’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rename_column()` function renames the column ‘price’ with ‘price_usd’.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So, to wrap up, Pyjanitor proves to be a magical library for anyone working
    with data. It offers many more features than discussed in this article, such as
    encoding categorical variables, obtaining features and labels, identifying duplicate
    rows, and much more. All of these advanced features and methods can be explored
    in its [documentation](https://pyjanitor-devs.github.io/pyjanitor/api/functions/).
    The deeper you delve into its features, the more you will be surprised by its
    powerful functionality. Lastly, enjoy manipulating your data with Pyjanitor.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Beginner''s Guide to Anomaly Detection Techniques in Data Science](https://www.kdnuggets.com/2023/05/beginner-guide-anomaly-detection-techniques-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Data Engineering](https://www.kdnuggets.com/2023/07/beginner-guide-data-engineering.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Data Science: A Beginner''s Guide](https://www.kdnuggets.com/2023/07/introduction-data-science-beginner-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner''s Guide to End to End Machine Learning](https://www.kdnuggets.com/2021/12/beginner-guide-end-end-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Machine Learning Algorithms: A Beginner''s Guide](https://www.kdnuggets.com/2021/05/essential-machine-learning-algorithms-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner''s Guide to Q Learning](https://www.kdnuggets.com/2022/06/beginner-guide-q-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
