["```py\npip install transformers\npip install fastapi\npip install uvicorn\n```", "```py\nfrom transformers import pipeline\n\ntext = 'i love this movie!!! :)'\n\n# Instantiate a pipeline object with our task and model passed as parameters\nnlp = pipeline(task='sentiment-analysis', \n               model='nlptown/bert-base-multilingual-uncased-sentiment')\n\n# Pass the text to our pipeline and print the results\nprint(f'{nlp(text)}')\n```", "```py\npython test_model.py\n\n>>> [{'label': '5 stars', 'score': 0.923753023147583}]\n```", "```py\nimport sys\nfrom transformers import pipeline\n\nif len(sys.argv) != 2:\n    print('Usage: python model_test.py <input_string>')\n    sys.exit(1)\n\ntext = sys.argv[1]\n\n# Instantiate a pipeline object with our task and model passed as parameters\nnlp = pipeline(task='sentiment-analysis',\n               model='nlptown/bert-base-multilingual-uncased-sentiment')\n\n# Get and process result\nresult = nlp(text)\n\nsent = ''\nif (result[0]['label'] == '1 star'):\n    sent = 'very negative'\nelif (result[0]['label'] == '2 star'):\n    sent = 'negative'\nelif (result[0]['label'] == '3 stars'):\n    sent = 'neutral'\nelif (result[0]['label'] == '4 stars'):\n    sent = 'positive'\nelse:\n    sent = 'very positive'\n\nprob = result[0]['score']\n\n# Format and print results\nprint(f\"{{'sentiment': '{sent}', 'probability': '{prob}'}}\")\n```", "```py\npython model_test.py 'the sky is blue'\n\n>>> {'sentiment': 'neutral', 'probability': '0.2726307213306427'}\n\npython model_test.py 'i really hate this restaurant!'\n\n>>> {'sentiment': 'very negative', 'probability': '0.9228281378746033'}\n\npython model_test.py 'i love this movie!!! :)'\n\n>>> {'sentiment': 'very positive', 'probability': '0.923753023147583'}\n```", "```py\nfrom transformers import pipeline\nfrom fastapi import FastAPI\n\nnlp = pipeline(task='sentiment-analysis',\n               model='nlptown/bert-base-multilingual-uncased-sentiment')\n\napp = FastAPI()\n\n@app.get('/')\ndef get_root():\n    return {'message': 'This is the sentiment analysis app'}\n\n@app.get('/sentiment_analysis/')\nasync def query_sentiment_analysis(text: str):\n    return analyze_sentiment(text)\n\ndef analyze_sentiment(text):\n    \"\"\"Get and process result\"\"\"\n\n    result = nlp(text)\n\n    sent = ''\n    if (result[0]['label'] == '1 star'):\n        sent = 'very negative'\n    elif (result[0]['label'] == '2 star'):\n        sent = 'negative'\n    elif (result[0]['label'] == '3 stars'):\n        sent = 'neutral'\n    elif (result[0]['label'] == '4 stars'):\n        sent = 'positive'\n    else:\n        sent = 'very positive'\n\n    prob = result[0]['score']\n\n    # Format and return results\n    return {'sentiment': sent, 'probability': prob}\n```", "```py\n uvicorn main:app --reload\n```", "```py\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [18271] using statreload\nINFO:     Started server process [18273]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n```", "```py\npip install requests\n```", "```py\nimport requests\n\nquery = {'text':'i love the fettucine alfredo and would definitely recommend this restaurant to my friends!'}\nresponse = requests.get('http://127.0.0.1:8000/sentiment_analysis/', params=query)\nprint(response.json())\n```", "```py\npython rest_request.py\n\n>>> {'sentiment': 'very positive', 'probability': 0.8293750882148743}\n\n```"]