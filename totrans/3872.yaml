- en: A Simple Way to Time Code in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/03/simple-way-time-code-python.html](https://www.kdnuggets.com/2021/03/simple-way-time-code-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Edward Krueger](https://www.linkedin.com/in/edkrueger/), Senior Data
    Scientist and Tech Lead & [Douglas Franklin](https://www.linkedin.com/in/dougaf/),
    Aspiring Data Scientist and Teaching Assistant**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/c0d0bbae1f9f5187046476a61b4abe60.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by Brad Neathery on Unsplash
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our goal is to create an easy way to time functions in Python. We do this by
    coding a decorator with Python’s libraries `functools` and `time`. This decorator
    will then be applied to functions whose runtime we are interested in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Timing Decorator: @timefunc'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code below represents a common decorator pattern that has a reusable and
    flexible structure. Notice the placement of `functool.wraps`. It is a decorator
    for our closure. This decorator preserves `func`’s metadata as it is passed to
    the closure.
  prefs: []
  type: TYPE_NORMAL
- en: Functools becomes significant on line 16, where we access `func.__name__` in
    our print statement. If we did not use `functools.wraps` to decorate our closure,
    the wrong name would be returned.
  prefs: []
  type: TYPE_NORMAL
- en: This decorator returns the runtime of the function passed to `timefunc()`. On
    line 13, `start `initiates timing. Then, line 14's `result `stores the value of `func(*args,
    **kwargs).`After that, `time_elapsed` is calculated. The print statement reports `func`’s
    name and execution time.
  prefs: []
  type: TYPE_NORMAL
- en: Applying timefunc with the @ symbol
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Python, decorators can be easily applied with the `@` symbol. Not all applications
    of decorators use this syntax, but all `@` symbols are an application of a decorator.
  prefs: []
  type: TYPE_NORMAL
- en: We decorate `single_thread `with `timefunc `using the `@ `symbol.
  prefs: []
  type: TYPE_NORMAL
- en: Now that `single_thread` is decorated, when it’s called on line 13 we’ll see
    its `func.__name__` and runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8a5bbe7e0d544055759eacbba2ba4cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of single_thread decorated by timefunc
  prefs: []
  type: TYPE_NORMAL
- en: If you want to know how this works, below we will go a little deeper into the
    why and how of coding a decorator to time functions.
  prefs: []
  type: TYPE_NORMAL
- en: Why One Might Time a Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The reason is relatively straightforward. Faster functions are better functions.
  prefs: []
  type: TYPE_NORMAL
- en: Time is money, friend. — Gazlowe
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The timing decorator shows us a function’s runtime. We can apply the decorator
    to several versions of a function, benchmark them and choose the fastest one.
    Additionally, it is useful to know how long executions will take when testing
    code. Got a five-minute runtime ahead? That's a nice window for getting up, moving
    your legs and refilling your coffee!
  prefs: []
  type: TYPE_NORMAL
- en: To write decorator functions in Python we rely on `functools `and an awareness
    of scope. Let's review scope and decoration.
  prefs: []
  type: TYPE_NORMAL
- en: Decoration, Closures and Scope
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Decoration is a design pattern in Python that allows you to modify the behavior
    of a function. A decorator is a function that takes in a function and returns
    a modified function.
  prefs: []
  type: TYPE_NORMAL
- en: When writing closures and decorators, you must keep the scope of each function
    in mind. In Python, functions define scope. Closures have access to the scope
    of the function that returns them; the decorator’s scope.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to preserve a decorated function's metadata as it is passed
    to a closure. Knowing our scope lets us properly decorate our closures with `functools.wraps`.
  prefs: []
  type: TYPE_NORMAL
- en: '*For more on these concepts read this three-minute piece.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Decorators and Closures by Example in Python**](https://towardsdatascience.com/decorators-and-closures-by-example-in-python-382758321164)'
  prefs: []
  type: TYPE_NORMAL
- en: How to augment the behavior of a function using a decorator
  prefs: []
  type: TYPE_NORMAL
- en: On the reusability of this decorator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notice that `func `is taken as an argument on line 7\. Then on line 11, we pass `*args,
    **kwargs`, into our closure. These `*args, **kwargs` are used to calculate the `result` of `func(*args,
    **kwargs)` on line 10.
  prefs: []
  type: TYPE_NORMAL
- en: The flexibility of `*args` and `**kwargs`allow `timefunc` to work on almost
    any function. Our closure’s print statement is designed to access the functions `__name__`, `args`, `kwargs` and `result`to
    create a useful timing output for`func`.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Decoration is a powerful tool to augment the behavior of functions. By coding
    a decorator to time your functions, you gain an elegant, reusable pattern to track
    a function’s runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Feel free to copy `timefunc` into your codebase, or you can try coding your
    own timing decorator!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Edward Krueger](https://www.linkedin.com/in/edkrueger/)** is a Senior Data
    Scientist and Technical Lead at Business Laboratory and an Instructor at McCombs
    School of Business at The University of Texas at Austin.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Douglas Franklin](https://www.linkedin.com/in/dougaf/)** is a Teaching Assistant
    at McCombs School of Business at The University of Texas at Austin.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/a-simple-way-to-time-code-in-python-a9a175eb0172).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[15 common mistakes data scientists make in Python (and how to fix them)](/2021/03/15-common-mistakes-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Speed Up Pandas with Modin](/2021/03/speed-up-pandas-modin.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[11 Essential Code Blocks for Complete EDA (Exploratory Data Analysis)](/2021/03/11-essential-code-blocks-exploratory-data-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Faster Way to Prepare Time-Series Data with the AI & Analytics Engine](https://www.kdnuggets.com/2021/12/piexchange-faster-way-prepare-timeseries-data-ai-analytics-engine.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personalized AI Made Simple: Your No-Code Guide to Adapting GPTs](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Right Way to Access Dictionaries in Python](https://www.kdnuggets.com/the-right-way-to-access-dictionaries-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A New Way of Managing Deep Learning Datasets](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
