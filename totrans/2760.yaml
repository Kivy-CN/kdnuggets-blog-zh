- en: Interactive Machine Learning Experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/05/interactive-machine-learning-experiments.html](https://www.kdnuggets.com/2020/05/interactive-machine-learning-experiments.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Oleksii Trekhleb](https://github.com/trekhleb), Software Engineer at
    Uber**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c327a1e69241a3ae82a8a0b1dca8036.png)'
  prefs: []
  type: TYPE_IMG
- en: I've open-sourced a new [**Interactive Machine Learning Experiments**](https://github.com/trekhleb/machine-learning-experiments) project
    on GitHub. Each experiment consists of *Jupyter/Colab notebook* (to see how a
    model was trained) and *demo page* (to see a model in action right in your browser).
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the models may be a little dumb (remember, these are just experiments,
    not production-ready code), they will try to do their best to:'
  prefs: []
  type: TYPE_NORMAL
- en: Recognize digits or sketches you draw in your browser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect and recognize the objects you'll show to your camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classify your uploaded image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a Shakespeare poem with you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Play with you in Rock-Paper-Scissors game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I've trained the models on *Python* using *TensorFlow 2* with *Keras* support
    and then consumed them for a demo in a browser using *React* and *JavaScript* version
    of *Tensorflow*.
  prefs: []
  type: TYPE_NORMAL
- en: Models performance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First, let's set our expectations.️ The repository contains machine learning **experiments** and **not** a
    production-ready, reusable, optimized, and fine-tuned code and models. This is
    rather a sandbox or a playground for learning and trying different machine learning
    approaches, algorithms, and data-sets. Models might not perform well, and there
    is a place for overfitting/underfitting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, sometimes you might see things like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/67ad97d30d96211419d311e318af74c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'But be patient, sometimes the model might get smarter and give you this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/56ec1acc30b46ae0da478a539ea77531.png)'
  prefs: []
  type: TYPE_IMG
- en: Background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I'm a [software engineer](https://www.linkedin.com/in/trekhleb/), and for the
    last several years now, I've been doing mostly frontend and backend programming.
    In my spare time, as a hobby, I decided to dig into machine learning topics to
    make it less *like magic* and *more like math* to myself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since **Python** might be a good choice to start experimenting with Machine
    Learning, I decided to learn its basic syntax first. As a result, a [Playground
    and Cheatsheet for Learning Python](https://github.com/trekhleb/learn-python) project
    came out. This was just to practice Python and, at the same time, to have a cheat
    sheet of basic syntax once I need it (for things like dict_via_comprehension =
    {x: x**2 for x in (2, 4, 6)}, etc.).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After learning a bit of Python, I wanted to dig into the basic **math** behind
    Machine Learning. So after passing an awesome [Machine Learning course by Andrew
    Ng](https://www.coursera.org/learn/machine-learning) on Coursera, the [Homemade
    Machine Learning](https://github.com/trekhleb/homemade-machine-learning) project
    came out. This time it was about creating a cheatsheet for basic machine learning
    math algorithms like linear regression, logistic regression, k-means, multilayer
    perceptron, etc.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The next attempt to play around with basic Machine Learning math was [NanoNeuron](https://github.com/trekhleb/nano-neuron).
    It was about 7 simple JavaScript functions that supposed to give you a feeling
    of how machines can actually "learn."
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After finishing yet another awesome [Deep Learning Specialization by Andrew
    Ng](https://www.coursera.org/specializations/deep-learning) on Coursera, I decided
    to practice a bit more with **multilayer perceptrons**, **convolutional**, and **recurrent
    neural networks** (CNNs and RNNs). This time instead of implementing everything
    from scratch, I decided to start using some machine learning framework. I ended
    up using [TensorFlow 2](https://www.tensorflow.org/) with [Keras](https://www.tensorflow.org/guide/keras/overview).
    I also didn't want to focus too much on math (letting the framework do it for
    me), and instead, I wanted to come up with something more practical, applicable,
    and something I could try to play with right in my browser. As a result, new [Interactive
    Machine Learning Experiments](https://github.com/trekhleb/machine-learning-experiments) came
    out that I want to describe a bit more here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tech-stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Models training**'
  prefs: []
  type: TYPE_NORMAL
- en: I used Keras inside TensorFlow 2 for modelling and training. Since I had zero
    experience with machine learning frameworks, I needed to start with something.
    One of the selling points in favor of TensorFlow was that it has both Python and [JavaScript
    flavor](https://www.tensorflow.org/js) of the library with similar API. So eventually,
    I used Python version for training and JavaScript version for demos.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I trained TensorFlow models on Python inside [Jupyter](https://jupyter.org/) notebooks
    locally and sometimes used [Colab](https://colab.research.google.com/) to make
    the training faster on GPU.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the models were trained on good old MacBook's Pro CPU (2,9 GHz Dual-Core
    Intel Core i5).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there is no way you could run away from [NumPy](https://numpy.org/) for
    matrix/tensor operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Models demo**'
  prefs: []
  type: TYPE_NORMAL
- en: I used TensorFlow.js to make predictions with previously trained models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To convert *Keras HDF5* models to *TensorFlow.js Layers* format, I used the
    [TensorFlow.js converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).
    This might be inefficient to transfer the whole model (megabytes of data) to the
    browser instead of making predictions through HTTP requests, but again, remember
    that these are just experiments and not production-ready code and architecture.
    I wanted to avoid having a dedicated backend service to make architecture simpler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [Demo application](http://trekhleb.github.io/machine-learning-experiments) was
    created on [React](https://reactjs.org/) using a [create-react-app](https://github.com/facebook/create-react-app) starter
    with a default [Flow](https://flow.org/en/) flavour for type checking.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For styling, I used [Material UI](https://material-ui.com/). It was, as they
    say, "to kill two birds" at once and try out a new styling framework (sorry, [Bootstrap](https://getbootstrap.com/)‍).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Experiments**'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, in short, you may access Demo page and Jupyter notebooks by these links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Launch ML experiments demo**](http://trekhleb.github.io/machine-learning-experiments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Check ML experiments Jupyter notebooks**](https://github.com/trekhleb/machine-learning-experiments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Experiments with Multilayer Perceptron (MLP)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [multilayer perceptron (MLP)](https://en.wikipedia.org/wiki/Multilayer_perceptron) is
    a class of feedforward artificial neural network (ANN). Multilayer perceptrons
    are sometimes referred to as "vanilla" neural networks (composed of multiple layers
    of perceptrons), especially when they have a single hidden layer.
  prefs: []
  type: TYPE_NORMAL
- en: '**Handwritten Digits Recognition**'
  prefs: []
  type: TYPE_NORMAL
- en: You draw a digit, and the model tries to recognize it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/DigitsRecognitionMLP)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/digits_recognition_mlp/digits_recognition_mlp.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/digits_recognition_mlp/digits_recognition_mlp.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/63474e2b14d1d3587c2fae566eef3b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Handwritten Sketch Recognition**'
  prefs: []
  type: TYPE_NORMAL
- en: You draw a sketch, and the model tries to recognize it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/SketchRecognitionMLP)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/sketch_recognition_mlp/sketch_recognition_mlp.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/sketch_recognition_mlp/sketch_recognition_mlp.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/53e29f3a605bc79630b14a72ac310d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Experiments with Convolutional Neural Networks (CNN)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [convolutional neural network (CNN, or ConvNet)](https://en.wikipedia.org/wiki/Convolutional_neural_network) is
    a class of deep neural networks, most commonly applied to analyzing visual imagery
    (photos, videos). They are used for detecting and classifying objects on photos
    and videos, style transfer, face recognition, pose estimation, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Handwritten Digits Recognition (CNN)**'
  prefs: []
  type: TYPE_NORMAL
- en: You draw a digit, and the model tries to recognize it. This experiment is similar
    to the one from the MLP section, but it uses CNN under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/DigitsRecognitionCNN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/digits_recognition_cnn/digits_recognition_cnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/digits_recognition_cnn/digits_recognition_cnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/63474e2b14d1d3587c2fae566eef3b5e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Handwritten Sketch Recognition (CNN)**'
  prefs: []
  type: TYPE_NORMAL
- en: You draw a sketch, and the model tries to recognize it. This experiment is similar
    to the one from the MLP section, but it uses CNN under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/SketchRecognitionCNN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/sketch_recognition_cnn/sketch_recognition_cnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/sketch_recognition_cnn/sketch_recognition_cnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/53e29f3a605bc79630b14a72ac310d8e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Rock Paper Scissors (CNN)**'
  prefs: []
  type: TYPE_NORMAL
- en: You play a Rock-Paper-Scissors game with the model. This experiment uses CNN
    that is trained from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/RockPaperScissorsCNN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/rock_paper_scissors_cnn/rock_paper_scissors_cnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/rock_paper_scissors_cnn/rock_paper_scissors_cnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/95fe75ce4ae3f8f30b1876a10d148db7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Rock Paper Scissors (MobilenetV2)**'
  prefs: []
  type: TYPE_NORMAL
- en: You play a Rock-Paper-Scissors game with the model. This model uses transfer
    learning and is based on [MobilenetV2](https://www.tensorflow.org/api_docs/python/tf/keras/applications/MobileNetV2).
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/RockPaperScissorsMobilenetV2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/rock_paper_scissors_mobilenet_v2/rock_paper_scissors_mobilenet_v2.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/rock_paper_scissors_mobilenet_v2/rock_paper_scissors_mobilenet_v2.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/d18cc028215caa907c2ff18d10371f44.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Objects Detection (MobileNetV2)**'
  prefs: []
  type: TYPE_NORMAL
- en: You show the model your environment through your camera, and it will try to
    detect and recognize the objects. This model uses transfer learning and is based
    on MobilenetV2.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/ObjectsDetectionSSDLiteMobilenetV2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/objects_detection_ssdlite_mobilenet_v2/objects_detection_ssdlite_mobilenet_v2.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/objects_detection_ssdlite_mobilenet_v2/objects_detection_ssdlite_mobilenet_v2.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/2392c155632c8553a4c455377e949365.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Image Classification (MobileNetV2)**'
  prefs: []
  type: TYPE_NORMAL
- en: You upload a picture, and the model tries to classify it depending on what it
    "sees" on the picture. This model uses transfer learning and is based on MobilenetV2.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/ImageClassificationMobilenetV2)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/image_classification_mobilenet_v2/image_classification_mobilenet_v2.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/image_classification_mobilenet_v2/image_classification_mobilenet_v2.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/3ba1cd4a42c70c7216437a01ec628655.png)'
  prefs: []
  type: TYPE_IMG
- en: Experiments with Recurrent Neural Networks (RNN)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A [recurrent neural network (RNN)](https://en.wikipedia.org/wiki/Recurrent_neural_network) is
    a class of deep neural networks, most commonly applied to sequence-based data
    like speech, voice, text, or music. They are used for machine translation, speech
    recognition, voice synthesis, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Numbers Summation**'
  prefs: []
  type: TYPE_NORMAL
- en: You type a summation expression (i.e., 17+38), and the model predicts the result
    (i.e., 55). The interesting part here is that the model treats the input as a *sequence*,
    meaning it learned that when you type a sequence 1 → 17 → 17+ → 17+3 → 17+38, it
    "translates" it to another sequence 55\. You may think about it as translating
    a Spanish Hola sequence to English Hello.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/NumbersSummationRNN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/numbers_summation_rnn/numbers_summation_rnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/numbers_summation_rnn/numbers_summation_rnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/f15f32557e5774f53289d8e3c8fe144f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Shakespeare Text Generation**'
  prefs: []
  type: TYPE_NORMAL
- en: You start typing a poem like Shakespeare, and the model will continue it like
    Shakespeare. At least it will try to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/TextGenerationShakespeareRNN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/text_generation_shakespeare_rnn/text_generation_shakespeare_rnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/text_generation_shakespeare_rnn/text_generation_shakespeare_rnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/4838dd676447dfcac5c3482e50c4c136.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Wikipedia Text Generation**'
  prefs: []
  type: TYPE_NORMAL
- en: You start typing a Wiki article, and the model tries to continue it.
  prefs: []
  type: TYPE_NORMAL
- en: '[Demo](https://trekhleb.github.io/machine-learning-experiments/#/experiments/TextGenerationWikipediaRNN)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Jupyter](https://nbviewer.jupyter.org/github/trekhleb/machine-learning-experiments/blob/master/experiments/text_generation_wikipedia_rnn/text_generation_wikipedia_rnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Training in Colab](https://colab.research.google.com/github/trekhleb/machine-learning-experiments/blob/master/experiments/text_generation_wikipedia_rnn/text_generation_wikipedia_rnn.ipynb)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future plans
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As I''ve mentioned above, the main purpose of [the repository](https://github.com/trekhleb/machine-learning-experiments) is
    to be more like a playground for learning rather than for production-ready models.
    Therefore, the main plan is to **continue learning and experimenting** with deep-learning
    challenges and approaches. The next interesting challenges to play with might
    be:'
  prefs: []
  type: TYPE_NORMAL
- en: Emotions detection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Style transfer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language translation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating images (i.e., handwritten numbers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another interesting opportunity would be to **tune existing models to make them
    more performant**. I believe it might give a better understanding of how to overcome
    overfitting and underfitting and what to do with the model if it just stuck on a
    60% accuracy level for both training and validation sets and doesn't want to improve
    anymore.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you might find some useful insights for models training from [the repository](https://github.com/trekhleb/machine-learning-experiments) or
    at least to have some fun playing around with the demos!
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://github.com/trekhleb/machine-learning-experiments/blob/master/assets/story.en.md).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Build and deploy your first machine learning web app](https://www.kdnuggets.com/2020/05/build-deploy-machine-learning-web-app.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beginners Learning Path for Machine Learning](https://www.kdnuggets.com/2020/05/beginners-learning-path-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Google Colaboratory Tips](https://www.kdnuggets.com/2020/03/5-google-colaboratory-tips.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Versioning Machine Learning Experiments vs Tracking Them](https://www.kdnuggets.com/2021/12/versioning-machine-learning-experiments-tracking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hydra Configs for Deep Learning Experiments](https://www.kdnuggets.com/2023/03/hydra-configs-deep-learning-experiments.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Design Experiments for Data Collection](https://www.kdnuggets.com/2022/04/design-experiments-data-collection.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Machine Learning Skills Every Machine Learning Engineer Should…](https://www.kdnuggets.com/2023/03/5-machine-learning-skills-every-machine-learning-engineer-know-2023.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, December 14: 3 Free Machine Learning Courses for…](https://www.kdnuggets.com/2022/n48.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
