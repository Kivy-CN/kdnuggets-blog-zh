- en: Fourier Transformation for a Data Scientist
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/02/fourier-transformation-data-scientist.html](https://www.kdnuggets.com/2020/02/fourier-transformation-data-scientist.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/0024c0de65cd3ac058c5d6ba49eecae0.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Pic Credit: [Shutterstock](https://www.shutterstock.com/image-vector/fourier-transform-formula-common-signal-transformations-1143548066)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Fourier Transform is one of the deepest insights ever made in mathematics
    but unfortunately, the meaning is buried deep inside some ridiculous equations.
  prefs: []
  type: TYPE_NORMAL
- en: The Fourier transform is a way of splitting something up into a bunch of sine
    waves. As usual, the name comes from some person who lived a long time ago called
    Fourier.
  prefs: []
  type: TYPE_NORMAL
- en: In mathematical terms, The Fourier Transform is a technique that transforms
    a signal into its constituent components and frequencies.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Fourier transform is widely used not only in signal (radio, acoustic, etc.)
    processing but also in image analysis eg. edge detection, image filtering, image
    reconstruction, and image compression. One example: Fourier transform of transmission
    electron microscopy images helps to check the periodicity of the samples. periodicity
    — means pattern. Fourier transform of your data can expand accessible information
    about the analyzed sample.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand it better consider a signal x(t):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49c1501c0cf9943aec656d19ab27e8c5.png)'
  prefs: []
  type: TYPE_IMG
- en: If we do the same for another signal and select the same moment in time and
    we measure its amplitude.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider another signal y(t):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6570a07c33bd1ea1d1f36851d67575cd.png)'
  prefs: []
  type: TYPE_IMG
- en: '***What happens when we emit these two signals at the same time or if we add
    them together?***'
  prefs: []
  type: TYPE_NORMAL
- en: When we emit these two signals at the same moment of time, we get a new signal
    which is the *sum of the amplitude of these two signals. *This is so because these
    two signals are being added together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sum both the signals: z(t) = x(t) + y(t)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d1dc2d8cd837296c5d485dda93323f6e.png)'
  prefs: []
  type: TYPE_IMG
- en: '***If we are given only one signal(which is the sum of signals x(t) and y(t)).Can
    we recover the original signals x(t) and y(t)?***'
  prefs: []
  type: TYPE_NORMAL
- en: Yes. That’s what a Fourier transform does. It takes up a signal and decomposes
    it to the frequencies that made it up.
  prefs: []
  type: TYPE_NORMAL
- en: '*In our example, a Fourier transform would decompose the signal z(t) into its
    constituent frequencies like signals x(t) and y(t).*'
  prefs: []
  type: TYPE_NORMAL
- en: What Fourier transform does is It kind of *moves us from the time domain to
    the frequency domain.*
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/cf5ef60296dc2fd98f4118c81162d216.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://www.eenewsanalog.com/content/signal-chain-basics-56-clock-jitter-demystified%E2%80%94random-jitter-and-phase-noise)'
  prefs: []
  type: TYPE_NORMAL
- en: '**In case, If anyone is wondering, What if we want to go back from the frequency
    domain to the time domain?**'
  prefs: []
  type: TYPE_NORMAL
- en: We can do so by using the *Inverse Fourier transform(IFT)*.
  prefs: []
  type: TYPE_NORMAL
- en: Maths you need to know.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*“Any ****continuous signal**** in the time domain can be represented uniquely
    and unambiguously by an ****infinite**** series of sinusoids.”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**What does this mean?**'
  prefs: []
  type: TYPE_NORMAL
- en: 'It means that, If we have a signal which is generated by some function `x(t)` then
    we can come up with another function `f(t)` such that :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a4983847c91b035ba5921ad8a56191d.png)'
  prefs: []
  type: TYPE_IMG
- en: So, It doesn’t matter how strong the signal is, we can find a function like `f(t)` which
    is a *sum of an infinite series of sinusoids* that will actually represent the
    signal perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the question that arises now is, How do we find the coefficients here in
    the above equation because these are the values that would determine the shape
    of the output and thus the signal.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/829ccb417e04dc14a37c2424a7ff09db.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, to get these coefficients we use Fourier transforms and the result from
    Fourier transform is a group of coefficients. So, we use `X(w)` to denote the
    Fourier coefficients and it is a function of frequency which we get by solving
    the integral such that :'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Fourier transform is represented as an indefinite integral:'
  prefs: []
  type: TYPE_NORMAL
- en: '**X(w) : Fourier Transform**'
  prefs: []
  type: TYPE_NORMAL
- en: 'x(t) : Inverse Fourier transform'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/374647e233afb67325ffced7a3f3c360.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/92425c71212f74b899837c07e2b99c7b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Fourier Transform and Inverse Fourier transform**'
  prefs: []
  type: TYPE_NORMAL
- en: Also, when we actually solve the above integral, we get these complex numbers
    where `a` and `b` correspond to the coefficients that we are after.
  prefs: []
  type: TYPE_NORMAL
- en: 'The continuous Fourier transform converts a time-domain signal of infinite
    duration into a continuous spectrum composed of an infinite number of sinusoids.
    In practice, we deal with signals that are discretely sampled, usually at constant
    intervals, and of finite duration or periodic. For this purpose, the classical
    Fourier transform algorithm can be expressed as a Discrete Fourier transform (DFT),
    which converts a finite sequence of equally-spaced samples of a function into
    a same-length sequence of equally-spaced samples of the discrete-time Fourier
    transform:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a56a6df9c765aa440dd51fd369bc452.png)'
  prefs: []
  type: TYPE_IMG
- en: So, this is essentially the Discrete Fourier Transform. We can do this computation
    and it will produce a complex number in the form of `a + *i*b` where we have two
    coefficients for the Fourier series.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we know *how to sample signals* and how to *apply a Discrete Fourier Transform. *The
    last thing we would like to do is, we would like to get rid of the complex number `*i*` because
    it''s not supported in `mllib` or `systemML` by using something known as *Euler''s
    formula *which states :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6c571416a043030b2ccc7b482800cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: So, If we plug Euler’s formula in the Fourier Transform equation and solve it,
    it will produce a real and imaginary part.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff33dbe7300e566ad4fbc09e5353e2f7.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see X consist of a complex number of the format `a+ib` or `a-ib`.
    So if you solve the above equation you will get the Fourier coefficients **a** and **b**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/85ed7391afbd4a9db0d57d0c577a2276.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/d78889ee5d6e3020c2c8c03c8ba6eb21.png)'
  prefs: []
  type: TYPE_IMG
- en: Now if you just put the values of **a** and **b** in the equation of `f(t)`then
    you can define a signal in terms of its frequency.
  prefs: []
  type: TYPE_NORMAL
- en: In general practice, we use Fast Fourier Transformation(FFT) algorithm which
    recursively divides the DFT in smaller DFT’s bringing down the needed computation
    time drastically. The time complexity of DFT is `2N²` while that of FFT is `2NlogN`.
  prefs: []
  type: TYPE_NORMAL
- en: Why are cosine and sine functions used when representing a signal?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While Sine and Cosine functions were originally defined based on right-angle
    triangles, looking at that point of view in the current scenario isn’t really
    the best thing. You might have been taught to recognize the Sine function as “opposite
    by hypotenuse”, but now it’s time to have a slightly different point of view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the unit circle :'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e5b2cda4d2f5ce0d089abed9a6f68230.png)'
  prefs: []
  type: TYPE_IMG
- en: on a Cartesian plane. Suppose a line passing through the origin makes an angle
    θ with the ????-axis in a counterclockwise direction, the point of intersection
    of the line and the circle is (cos⁡θ, sin⁡θ).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a4d32f32b00d51fa62222981d4413617.png)'
  prefs: []
  type: TYPE_IMG
- en: Think about it. Does this point of view correlate with the earlier one? Both
    of the definitions are the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we start to spin the line, by making θ increase linearly. You’d get
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/a8446ccd5b25ec8b13a2d4e9bf7695d1.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Credits](https://physics.stackexchange.com/questions/352754/why-are-cosine-and-sine-functions-used-when-representing-a-signal-or-a-wave)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Sine and Cosine functions are arguably the most important periodic functions
    in several cases:'
  prefs: []
  type: TYPE_NORMAL
- en: The periodic functions of how displacement, velocity, and acceleration change
    with time in SHM oscillators are sinusoidal functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Every particle has a wave nature and vice versa. This is de Broglie's Wave-Particle
    duality. Waves are always sinusoidal functions of some physical quantity (such
    as Electric Field for EM Waves, and Pressure for Sound Waves).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The sound itself is a pressure disturbance that propagates through material
    media capable of compressing and expanding. It’s the pressure at a point along
    with the sound wave that varies sinusoidally with time.
  prefs: []
  type: TYPE_NORMAL
- en: '**Convergence in Fourier transformation**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If a point travels around a circle at a constant speed, its height above the
    ground traces a sine function. The speed at which the point moves corresponds
    to the frequency and the radius of the circle corresponds to the amplitude.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/908b44b455ee4c8280e8a2d07ef8294d.png)'
  prefs: []
  type: TYPE_IMG
- en: Add 1 more circle,
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b4670f1ae18ebb96ce8b3aeea913fc17.png)'
  prefs: []
  type: TYPE_IMG
- en: Add 2 more circles,
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c531861b82cdb7ebb732bdf901f41a0a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Add 9 more circles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a80e6998cc3aceb964b54cad7f3a2b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Almost a discrete waveform.
  prefs: []
  type: TYPE_NORMAL
- en: Because of the Fourier theorem, we can generate any signal with circles of appropriate
    frequencies and radii.
  prefs: []
  type: TYPE_NORMAL
- en: '*I used Dan Shiffman’s code from *[*coding challenge #125*](https://thecodingtrain.com/CodingChallenges/125-fourier-series.html)* to
    make the animations. You can get the javascript code from his *[*GitHub*](https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_125_Fourier_Series/P5)* and
    can try yourself.*'
  prefs: []
  type: TYPE_NORMAL
- en: Fourier Transformation in AI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Fourier Transformation is a linear function, to induce non-linearity. Convolutions
    are used.
  prefs: []
  type: TYPE_NORMAL
- en: '**Fourier Transformation of the product of 2 signals is the convolution of
    the 2 signals.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Let x(t) and y(t) be two functions with convolution X(t)*Y(t), and F represents
    Fourier transformation, then
  prefs: []
  type: TYPE_NORMAL
- en: '**F{x(t).y(t)} = X(t)*Y(t)**'
  prefs: []
  type: TYPE_NORMAL
- en: Remember the fact that aconvolution in the time domain is a multiplication in
    the frequency domain. This is how Fourier Transform is mostly used in machine
    learning and more specifically deep learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll take **Convolutional Neural Networks, CNNs** as an example;
  prefs: []
  type: TYPE_NORMAL
- en: '**90% **of computations in CNNs are convolutions and there have been many approaches
    to reduce the intensity of such computations, one of them is Fast Fourier Transform
    (FFT).'
  prefs: []
  type: TYPE_NORMAL
- en: Instead of convolutions, the input and filter matrices are converted into the
    frequency domain by FFT, to do multiplications. Then, the output is converted
    back into the time domain by *Inverse* FFT (IFFT).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a67563e2a9f5d0787451683cf9ef286f.png)'
  prefs: []
  type: TYPE_IMG
- en: Another use of FFT is that it can be used for dimensionality reduction or feature
    extraction.
  prefs: []
  type: TYPE_NORMAL
- en: When each sample in the dataset is a signal (time series, or images, etc.),
    it may consist of thousands of samples. But they might actually correspond to
    just a few points in the Fourier domain (especially if there is some periodicity).
    This simplifies the problem a lot.
  prefs: []
  type: TYPE_NORMAL
- en: Or sometimes using the Fourier domain might provide translation-invariance.
    That is, even if there are lags between the signals, such variances will not affect
    their presentation in the Fourier domain.
  prefs: []
  type: TYPE_NORMAL
- en: Python implementation of Fourier Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The simplest possible implementation of FFT can be done using numpy and scipy
    python libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/28a0a8e79f2926d5c1e86e37781fb3ac.png)'
  prefs: []
  type: TYPE_IMG
- en: FFT plot
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The FFT is used in digital recording, sampling, [additive synthesis](https://en.wikipedia.org/wiki/Additive_synthesis) and
    pitch correction software.
  prefs: []
  type: TYPE_NORMAL
- en: 'The FFT’s importance derives from the fact that it has made working in the
    frequency domain equally computationally feasible as working in the temporal or
    spatial domain. Some of the important applications of the FFT include:'
  prefs: []
  type: TYPE_NORMAL
- en: Fast large-integer and polynomial multiplication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient matrix-vector multiplication for Toeplitz, circulant and other structured
    matrices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering algorithms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast algorithms for [discrete cosine](https://en.wikipedia.org/wiki/Discrete_cosine_transform) or [sine
    transform](https://en.wikipedia.org/wiki/Discrete_sine_transform) (e.g. Fast Discrete
    Cosine Transform used for [JPEG](https://en.wikipedia.org/wiki/JPEG) and [MPEG](https://en.wikipedia.org/wiki/MPEG)/[MP3](https://en.wikipedia.org/wiki/MP3) encoding
    and decoding).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast [Chebyshev approximation](https://en.wikipedia.org/wiki/Chebyshev_approximation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Solving difference equations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Computation of [isotopic distributions](https://en.wikipedia.org/wiki/Mass_spectrometry).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well, that’s all for this article hope you guys have enjoyed reading it and
    I’ll be glad if the article is of any help. Feel free to share your comments/thoughts/feedback
    in the comment section.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!!!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Nagesh Singh Chauhan](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/)**
    is a Data Science enthusiast. Interested in Big Data, Python, Machine Learning.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/fourier-transformation-for-a-data-scientist-1f3731115097).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Data Science Puzzle — 2020 Edition](/2020/02/data-science-puzzle-2020-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Math Behind Bayes](/2019/11/math-behind-bayes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 5 Data Science Trends for 2020](/2020/02/top-5-data-science-trends.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
