- en: 15 common mistakes data scientists make in Python (and how to fix them)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/03/15-common-mistakes-python.html](https://www.kdnuggets.com/2021/03/15-common-mistakes-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Gerold Csendes](https://www.linkedin.com/in/gcsendes/), Data Scientist
    at EPAM Systems**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec752ba42e144fea772521e9af7c7416.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Photo by [Joshua Aragon](https://unsplash.com/@goshua13?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral).*'
  prefs: []
  type: TYPE_NORMAL
- en: I gradually realized in my data science career that by applying software engineering
    best practices, you could deliver better quality projects. Better quality might
    be fewer bugs, reliable results, and higher productivity in coding. This article
    is not intended to introduce you to these best practices in detail. Instead, it
    summarizes the most common mistakes I encountered (and made myself too), and offers
    methods, ideas, and resources on how to best tackle them.
  prefs: []
  type: TYPE_NORMAL
- en: 'When reading my article, you might be tempted to think, “Well, when I work
    on my own, I don’t really need to follow this advice because I know my code.”
    The chances are that at least one other person will read your code: your future
    self. What you find self-evident at the moment will be total nonsense months later.
    Let’s make her life easier by avoiding the following mistakes.'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. You don’t work in an isolated environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, this may not be a coding issue per se, but I still consider isolated
    environments as an important feature for my code. Why would you consider using
    a dedicated environment for each of your projects? You want to make your code
    reproducible: on your computer in the future, on your coworker’s machine, and
    in production too. Ever faced the issue that your peer could not run your code?
    It is quite likely that she doesn’t have the same dependencies as you. (Or maybe
    after running hundreds of cells, you forgot to check whether your notebook breaks
    when using a clear kernel). If you have no idea what dependency management means,
    then it is best to start with [Anaconda Virtual Environment](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html) or [Pipenv](https://realpython.com/pipenv-guide/).
    I personally use Anaconda, and there is a great [tutorial](https://towardsdatascience.com/a-guide-to-conda-environments-bc6180fc533)
    that you can access by clicking the link. If you want to go deeper, then Docker
    is your go-to.'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. (Overuse of) Jupyter Notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Notebooks are really good for educational purposes and to do some quick and
    dirty job, but it fails to act as a good IDE. A good IDE is your real weapon when
    fighting data science tasks and can enhance your productivity immensely. There
    are lots of smart people shedding light on the shortcomings of notebooks. I consider
    Joel Grus’s [talk](https://www.youtube.com/watch?v=7jiPeIFXb6U) to be the best
    and most hilarious.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t get me wrong, notebooks are fine for experimentation, and it is great
    that you can show your results to your peers with ease. However, they are really
    prone to errors, and when it comes to doing longer-term, collaborative and deployable
    projects, then you better look for a real IDE e.g., VScode, Pycharm, Spyder etc.
    I do use notebooks every now and then, but I made a mental model: I only use notebooks
    if the project doesn’t exceed one day.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. You don’t organize your code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data scientists have a track record of stockpiling all their project files in
    a single directory. It is a bad practice. Take a look at the figure below and
    imagine that you are to take over a project of your colleague. Which project structure
    would put you into an existential crisis after hours of trying to figure out what
    is going on? Of course, the structure on the left is your go-to. [Cookiecutter](https://drivendata.github.io/cookiecutter-data-science/) is
    a brilliant initiative promoting a standardized project structure for data science.
    Make sure to check this out.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/71a013d2741c042d3691b309182aa879.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Good and bad project structure — Screenshot by Author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Absolute instead of relative paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ever faced a comment in code “pls fix your path”? Such a comment suggests bad
    code design. Fixing this consists of 2 steps. 1) share the project structure with
    your peer (maybe the one suggested above) 2) set your IDE root/working directory
    to your project root that is usually the outmost directory in your project. The
    latter one is sometimes not that trivial to do, but it is definitely worth the
    effort because your peer will be able to run your code without changing it.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Magic numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Magic numbers are numerics without context in code. By using magic numbers,
    you may end up with really hard-to-track errors. The gist below clearly shows
    that by simply using an unassigned number in a multiplication, you lose context
    of why this is happening, and if you later have to change this, it is rather stressful.
    It is thus desired to use named constants in capitals in Python. You don’t actually
    have to use capitalization, it is only a convention, but it is a good idea to
    distinguish your “constants ” from your “regular” variables.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Not dealing with warnings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have all been there when our code ran but generated weird warning messages.
    You are happy that you finally got your code running and received a meaningful
    output. So why deal with the warning? Well, warnings themselves are not errors,
    but they call attention to potential bugs or issues. They appear when there is
    something dubious in your code that though it ran successful but maybe not the
    way it was intended. The most common warnings I faced were Pandas’ SettingwithCopyWarning
    and DeprecationWarning. DataSchool explains in a [neat way](https://www.youtube.com/watch?v=4R4WsDJ-KVc) how
    SettingwithCopyWarning is triggered. DeprecationWarning usually points out that
    Pandas deprecated some functionality, and your code will break when using a later
    release. Of course, there are a handful of other warning types, and my experience
    is that they arise when using something in a way it was not designed. Understanding
    the source code of that function always helps. With that, you can get rid of those
    warnings 99% of the time.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. You don’t use type annotation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I need to admit, this is a practice that I picked up recently, but I can already
    see its benefits. Type annotation (or type hint) is a method to assign types to
    your variables. You basically extend your code with hints that are really extensions
    to your code, indicating the type of variables/parameters. This makes your code
    easier to read because the intentions of the coder are explicit. To demonstrate
    this, I have taken an example from Daniel Starner at [dev.to](https://dev.to/dstarner/using-pythons-type-annotations-4cfe).
    Without type hints, *mystery_combine()* runs with both integer and string inputs
    and outputs either an integer or string. This might be ambiguous for a fellow
    developer. By using type annotation, you can be explicit with your intentions
    and make your peer's life easier.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, code with type annotation can be statically (without actually
    running the code) checked for bugs. The screenshot below shows that the first
    two arguments are not well specified. Statically checking your code is a nice
    and useful way for a pre-check before running it.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/265435f278090cebd9ed4a563ab16e6e.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Screenshot by Author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 8\. You don’t use (enough) list comprehensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: List comprehension is a really powerful feature of python. Many for loops may
    be substituted with list comprehension that is more readable, pythonic, and also
    faster. Below you can see an example code that intends to read a CSV file in a
    directory. You might say that using a for loop is not a sin in this case but try
    checking only for CSV files (there may be other formatted files like JSON). You
    can sense that adding such a feature is easy to maintain when using list comprehension.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Your pandas code is not readable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Method chaining is a great feature in pandas, but your code can get unreadable
    if you express everything in a single line. There is a trick that enables you
    to break the expression up. If you put your expression into parentheses, then
    you are able to use a single line for each component of the expression. Isn’t
    that a lot cleaner?
  prefs: []
  type: TYPE_NORMAL
- en: 10\. You are afraid to use dates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dates can be intimidating in Python. The syntax is weird, and it is hard to
    wrap your head around it. A common mistake I see is that people handle dates like
    numerics. You can always do a workaround and hack code together, but it is really
    error-prone, hard to read and maintain. See an example below where the task is
    to list all months between two dates in a %Y%m format. You can see that your code
    becomes much more readable and maintainable if you follow the datetime implementation.
    In my case, dealing with dates still requires lots of googling, but I have learned
    not to be intimidated if I don’t find a solution on the first try.
  prefs: []
  type: TYPE_NORMAL
- en: 11\. You don’t use good variable names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Naming your dataframes df and i, j, k for your loop indexes are just non-descriptive
    and make your code less readable. An effort for keeping your variable names too
    short is a guarantee for confusing the coders on your project. Don’t be afraid
    to use long(er) names for your variables. There is nothing stopping you from using
    more ‘_’-s. Make sure to check out Will Koehrsen’s great [article](https://towardsdatascience.com/data-scientists-your-variable-names-are-awful-heres-how-to-fix-them-89053d2855be) on
    this topic to get further insights.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. You don’t modularize your code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Modularization means breaking up long and complex code into simpler modules
    that perform smaller, specific tasks. Don’t just create a long script for your
    project. Defining your classes or functions at the top of your code is bad practice.
    It is hard to maintain and read. Instead, create modules (packages) and structure
    them based on their functionality. Again, you can visit realpython.org [Python
    Modules and Packages](https://realpython.com/courses/python-modules-packages/) tutorial
    for an in-depth introduction.
  prefs: []
  type: TYPE_NORMAL
- en: 13\. You don’t follow PEP conventions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When I started with programming in Python, I ended up writing ugly, unreadable
    code and started making my own design rules on how to make my code look better.
    It took quite a lot of time to come up with them, and I did break these rules
    often. Then, I found out about [PEP](https://www.python.org/dev/peps/), which
    is the official styling guideline for Python. I am really fond of PEP because
    it makes collaboration easier by enabling you to standardize the appearance of
    your code. By the way, I do ignore some PEP rules, but I would say I use them
    in 90% of my code.
  prefs: []
  type: TYPE_NORMAL
- en: Any good Python IDE can be extended with a linter. The picture below demonstrates
    how a linter works in practice. They point out code quality issues, and if it
    is still vague for you, you can check out the specific PEP index, which is indicated
    in parentheses. If you want to see what linters are available out there, then,
    as always, [realpythong.org](https://realpython.com/python-code-quality/#linters) is
    a good source for python stuff.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b91396aada9f5194acc8e4673d24152b.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Screenshot by Author.*'
  prefs: []
  type: TYPE_NORMAL
- en: 14\. You don’t use a coding assistant
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do you want to have big productivity gains in coding? Start using a coding assistant
    that helps by clever autocomplete, opening up documentation, and giving suggestions
    to improve your code. I like using pylance, which is a new tool developed by Microsoft
    and is available in VScode. Kite is an alternative that is also really nice and
    available in a number of editors.
  prefs: []
  type: TYPE_NORMAL
- en: Check out [this video](https://thumbs.gfycat.com/BaggyNiceLemur-mobile.mp4)
    by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 15\. You don’t hide secrets in your code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pushing secrets (passwords, keys) to public GitHub repositories is a widespread
    security flaw. If you want to get a sense of the seriousness of this issue, check
    out this [qz](https://qz.com/674520/companies-are-sharing-their-secret-access-codes-on-github-and-they-may-not-even-know-it/)
    article. There are bots crawling the internet waiting for you to make such a mistake.
    As far as I am concerned, security is a topic that is hardly ever part of any
    data science curriculum. So, you need to fill in the gap yourself. I suggest you
    first start with using OS environment variables. This [dev.to](https://dev.to/biplov/handling-passwords-and-secret-keys-using-environment-variables-2ei0) article
    might be a good start.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/15-common-coding-mistakes-data-scientist-make-in-python-and-how-to-fix-them-7760467498af).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Software Engineering Tips and Best Practices for Data Science](https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Software engineering fundamentals for Data Scientists](https://www.kdnuggets.com/2020/06/software-engineering-fundamentals-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Coding habits for data scientists](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[10 Most Common Data Quality Issues and How to Fix Them](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Common Data Science Mistakes and How to Avoid Them](https://www.kdnuggets.com/5-common-data-science-mistakes-and-how-to-avoid-them)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Common Python Gotchas (And How To Avoid Them)](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Avoid These 5 Common Mistakes Every Novice in AI Makes](https://www.kdnuggets.com/avoid-these-5-common-mistakes-every-novice-in-ai-makes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mistakes That Newbie Data Scientists Should Avoid](https://www.kdnuggets.com/2022/06/mistakes-newbie-data-scientists-avoid.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Much Do Data Scientists Make in 2022?](https://www.kdnuggets.com/2022/02/much-data-scientists-make-2022.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
