- en: Leveraging GPT Models to Transform Natural Language to SQL Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/leveraging-gpt-models-to-transform-natural-language-to-sql-queries](https://www.kdnuggets.com/leveraging-gpt-models-to-transform-natural-language-to-sql-queries)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/3d2bce97a2479138e14bd6004194e384.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author. Base image from [pch-vector](https://www.freepik.com/author/pch-vector).
  prefs: []
  type: TYPE_NORMAL
- en: Natural Language Processing —or NLP-has evolved enormously, and GPT models are
    at the forefront of this revolution.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Today LLM models can be used in a wide variety of applications.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid unnecessary tasks and enhance my workflow, I began exploring the possibility
    of training GPT to formulate SQL queries for me.
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is when a brilliant idea appeared:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Using the power of GPT models in interpreting natural language and transforming
    it into structured SQL queries. *'
  prefs: []
  type: TYPE_NORMAL
- en: '*Could this be possible?*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discover it all together!
  prefs: []
  type: TYPE_NORMAL
- en: So let’s start from the beginning…
  prefs: []
  type: TYPE_NORMAL
- en: The concept of “Few Shot Prompting”
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of you might be already familiar with the concept of *few shot prompting*,
    while others might have not heard of it never before.
  prefs: []
  type: TYPE_NORMAL
- en: '*So…What is it?*'
  prefs: []
  type: TYPE_NORMAL
- en: The basic idea here is to use some explicit examples-or shots-to guide the LLM
    to respond in a specific way.
  prefs: []
  type: TYPE_NORMAL
- en: This is why it is called **Few Shot prompting.**
  prefs: []
  type: TYPE_NORMAL
- en: To put it simply, by showcasing a few examples of the user input-sample prompts-along
    with the desired LLM output, we can teach the model to deliver some enhanced output
    that follows our preferences.
  prefs: []
  type: TYPE_NORMAL
- en: By doing so we are **expanding the knowledge of the model** on some specific
    domain to generate some output that aligns better with our desired task.
  prefs: []
  type: TYPE_NORMAL
- en: '*So let’s exemplify this!*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Throughout this tutorial, I’ll be using a predefined function called chatgpt_call()
    to prompt the GPT model. If you want to further understand it, you go check* [*the
    following article.*](https://medium.com/forcodesake/chatgpt-api-calls-introduction-chatgpt3-chatgpt4-ai-d19b79c49cc5)'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine I want ChatGPT to describe the term optimism.
  prefs: []
  type: TYPE_NORMAL
- en: If I simply ask GPT to describe it, I will obtain a serious-and boring-description.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'With the corresponding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/b5f888f6a77e5622cd7e80e04cf1b1a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: However, imagine I would rather like to get something more poetic. I can add
    to my prompt some more detail specifying that I want a poetic definition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: But this second output looks just like a poem and has nothing to do with my
    desired output.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/ac8f33d5b2042cb52501ff60584b2830.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: '*What can I do?*'
  prefs: []
  type: TYPE_NORMAL
- en: I could detail even more the prompt, and keep iterating until I receive some
    good output. *However, this would take a lot of time.*
  prefs: []
  type: TYPE_NORMAL
- en: Instead, **I can show the model what the kind of poetic description I prefer
    designing an example and showing it to the model.**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: And the output is exactly what I was looking for.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/29672dbc07d91ff7f5f66c798b19b211.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: '*So… how can we translate this into our specific case of SQL queries?*'
  prefs: []
  type: TYPE_NORMAL
- en: Using NLP for SQL generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ChatGPT is already capable of generating SQL queries out of Natural Language
    prompts. **We do not even have to show the model any table, just formulate a hypothetical
    computation and it will do it for us.**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: However, and as you already know, **the more context we give to the model, the
    better outputs it will generate.**
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/149e91207d54213c671bf38b7abf2e63.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: '*Throughout this tutorial I am splitting the input prompts into the specific
    demand of the user and the high-level behaviour expected from the model. This
    is a good practice to improve our interaction with the LLM and be more concise
    in our prompts.* [*You can learn more in the following article.*](https://medium.com/forcodesake/chat-gpt-dual-prompt-ai-artificial-intelligence-gpt-engineering-good-practices-bard-d04efef1721b)'
  prefs: []
  type: TYPE_NORMAL
- en: 'So let’s imagine I am working with two main tables: PRODUCTS and ORDERS'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/9ce66c11c34da2333af88ae08dc748cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author. Tables to be used throughout the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: If I ask GPT for a simple query, the model will give a solution right away,
    just as it did in the beginning, but with specific tables for my case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]{user_input}[PRE5]'
  prefs: []
  type: TYPE_NORMAL
- en: '*You can find the sql_tables in the end of this article!*'
  prefs: []
  type: TYPE_NORMAL
- en: '*And the output looks like as follows!*'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/2f03b4450ce6961b19f75de01e2a25bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: However, we can observe some problems in the previous output.
  prefs: []
  type: TYPE_NORMAL
- en: The computation is partially wrong, as it is only considering those TVs that
    have been already delivered. And any issued order-be it delivered or not-should
    be considered as a sale.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The query is not formatted as I would like it to be.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So first let’s focus on showing the model how to compute the required query.
  prefs: []
  type: TYPE_NORMAL
- en: '#1\. Fixing some misunderstandings of the model'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this first case, the model considers only those products that have been delivered
    as sold, but this is not true. **We can simply fix this misunderstanding by displaying
    two different examples where I compute similar queries. **
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: And now if we prompt again the model and include the previous examples on it,
    one can see that the corresponding query will not be only correct-the previous
    query was already working-but will also consider sales as we want it to!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]{user_input}[PRE8]'
  prefs: []
  type: TYPE_NORMAL
- en: 'With the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/95b34ebe16d55f97da0ebee9136b3f35.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: Now if we check the corresponding query…
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It works perfectly!
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/3c146136efdf18097b03452a54688139.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: '#2\. Formatting SQL Queries'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Few-short prompting can also be a way to customise the model for our own purpose
    or style.
  prefs: []
  type: TYPE_NORMAL
- en: If we go back to the examples before, the queries had no format at all. And
    we all know there are some good practices-together with some personal oddities-that
    allow us to better read SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: '**This is why we can use few-shot prompting to show the model the way we like
    to query** - with our good practices or just our oddities-**and train the model
    to give us our formatted desired SQL queries.**'
  prefs: []
  type: TYPE_NORMAL
- en: So, now I will prepare the same examples as before but following my format preferences.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Once the examples have been defined, **we can input them into the model so that
    it can mimic the style showcased.**
  prefs: []
  type: TYPE_NORMAL
- en: '**As you can observe in the following code box, after showing GPT what we expect
    from it, it replicates the style of the given examples to produce any new output
    accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]{user_input}[PRE12]'
  prefs: []
  type: TYPE_NORMAL
- en: And as you can observe in the following output, it worked!
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/c6df74d0ef912029cb5660c768da2a5f.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: '#3\. Training the model to compute some specific variable.'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s dive deeper into an illustrative scenario. Suppose we aim to compute which
    product takes the longest to deliver. **We pose this question to the model in
    natural language, expecting a correct SQL query. **
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]{user_input}[PRE14]'
  prefs: []
  type: TYPE_NORMAL
- en: Yet, the answer we receive is far from correct.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/46ebbf792e1f3475fa4070e247639425.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: '*What went wrong?*'
  prefs: []
  type: TYPE_NORMAL
- en: The GPT model attempts to calculate the difference between two datetime SQL
    variables directly. **This computation is incompatible with most SQL versions,
    creating an issue, especially for SQLite users. **
  prefs: []
  type: TYPE_NORMAL
- en: '*How do we rectify this problem? *'
  prefs: []
  type: TYPE_NORMAL
- en: The solution is right under our noses-we resort back to few-shot prompting.
  prefs: []
  type: TYPE_NORMAL
- en: By demonstrating to the model how we typically compute time variables-in this
    case, the delivery time-**we train it to replicate the process whenever it encounters
    similar variable types. **
  prefs: []
  type: TYPE_NORMAL
- en: For example, SQLite users may use the julianday() function. This function converts
    any date into the number of days that have elapsed since the initial epoch in
    the Julian calendar.
  prefs: []
  type: TYPE_NORMAL
- en: This could help GPT model to handle date differences in SQLite database better.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: When we use this method as an example for the model, it learns our preferred
    way of computing the delivery time. **This makes the model better suited to generate
    functional SQL queries that are customised to our specific environment.**
  prefs: []
  type: TYPE_NORMAL
- en: If we use the previous example as an input, the model will replicate the way
    we compute the delivery time and will provide functional queries for our concrete
    environment from now on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]{user_input}[PRE17]'
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging GPT Models to Transform Natural Language to SQL Queries](../Images/d6158b05fc630dd555cb19d23a96b31b.png)'
  prefs: []
  type: TYPE_IMG
- en: Screenshot of my Jupyter Notebook. Prompting GPT.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, the GPT model is an excellent tool for converting natural language
    into SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: However, it’s not perfect.
  prefs: []
  type: TYPE_NORMAL
- en: The model may not be able to understand context-aware queries or specific operations
    without proper training.
  prefs: []
  type: TYPE_NORMAL
- en: By using few-shot prompting, **we can guide the model to understand our query
    style and computing preferences. **
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to fully harness the power of the GPT model in our data science
    workflows, turning the model into a powerful tool that adapts to our unique needs.
  prefs: []
  type: TYPE_NORMAL
- en: '**From unformatted queries to perfectly customised SQL queries, GPT models
    bring the magic of personalization to our fingertips!**'
  prefs: []
  type: TYPE_NORMAL
- en: '[You can go check my code directly in my GitHub.](https://github.com/rfeers/How-to/blob/main/LLM%20%26%20SQL/Train_LLM_to_improve_SQL_queries.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**[Josep Ferrer](https://www.linkedin.com/in/josep-ferrer-sanchez)** is an
    analytics engineer from Barcelona. He graduated in physics engineering and is
    currently working in the Data Science field applied to human mobility. He is a
    part-time content creator focused on data science and technology. You can contact
    him on [LinkedIn](https://www.linkedin.com/in/josep-ferrer-sanchez/), [Twitter](https://twitter.com/rfeers)
    or [Medium](https://medium.com/@rfeers).'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[N-gram Language Modeling in Natural Language Processing](https://www.kdnuggets.com/2022/06/ngram-language-modeling-natural-language-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Meet Gorilla: UC Berkeley and Microsoft’s API-Augmented LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[25 Free Books to Master SQL, Python, Data Science, Machine…](https://www.kdnuggets.com/25-free-books-to-master-sql-python-data-science-machine-learning-and-natural-language-processing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[In-Database Analytics: Leveraging SQL''s Analytic Functions](https://www.kdnuggets.com/2023/07/indatabase-analytics-leveraging-sql-analytic-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL For Data Science: Understanding and Leveraging Joins](https://www.kdnuggets.com/2023/08/sql-data-science-understanding-leveraging-joins.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MiniGPT-4: A Lightweight Alternative to GPT-4 for Enhanced…](https://www.kdnuggets.com/2023/04/minigpt4-lightweight-alternative-gpt4-enhanced-visionlanguage-understanding.html)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
