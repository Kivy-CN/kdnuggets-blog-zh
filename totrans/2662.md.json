["```py\nimport os\nimport zipfile\nimport tensorflow as tf\nimport tensorflow_model_optimization as tfmot\nfrom tensorflow.keras.models import load_model\nfrom tensorflow import keras\n%load_ext tensorboard\n```", "```py\nfrom sklearn.datasets import make_friedman1\nX, y = make_friedman1(n_samples=10000, n_features=10, random_state=0)from sklearn.model_selection import train_test_splitX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n```", "```py\nearly_stop = keras.callbacks.EarlyStopping(monitor=’val_loss’, patience=30)\n```", "```py\nmodel = setup_model()model.summary()\n```", "```py\nmodel.compile(optimizer=’adam’,\n loss=tf.keras.losses.mean_squared_error,\n metrics=[‘mae’, ‘mse’])model.fit(X_train,y_train,epochs=300,validation_split=0.2,callbacks=early_stop,verbose=0)\n```", "```py\ntf.keras.utils.plot_model(\n model,\n to_file=”model.png”,\n show_shapes=True,\n show_layer_names=True,\n rankdir=”TB”,\n expand_nested=True,\n dpi=96,\n)\n```", "```py\nfrom sklearn.metrics import mean_squared_errorpredictions = model.predict(X_test)print(‘Without Pruning MSE %.4f’ % mean_squared_error(y_test,predictions.reshape(3300,)))Without Pruning MSE 0.0201\n```", "```py\nmodel_to_prune.summary()\n```", "```py\nmodel_to_prune.compile(optimizer=’adam’,\n loss=tf.keras.losses.mean_squared_error,\n metrics=[‘mae’, ‘mse’])\n```", "```py\nlog_dir = ‘.models’\ncallbacks = [\n tfmot.sparsity.keras.UpdatePruningStep(),\n # Log sparsity and other metrics in Tensorboard.\n tfmot.sparsity.keras.PruningSummaries(log_dir=log_dir),\n keras.callbacks.EarlyStopping(monitor=’val_loss’, patience=10)\n]\n```", "```py\nmodel_to_prune.fit(X_train,y_train,epochs=100,validation_split=0.2,callbacks=callbacks,verbose=0)\n```", "```py\nprune_predictions = model_to_prune.predict(X_test)print(‘Whole Model Pruned MSE %.4f’ % mean_squared_error(y_test,prune_predictions.reshape(3300,)))Whole Model Pruned MSE  0.1830\n```", "```py\nmodel_layer_prunning.summary()\n```", "```py\nmodel_layer_prunning.compile(optimizer=’adam’,\n loss=tf.keras.losses.mean_squared_error,\n metrics=[‘mae’, ‘mse’])model_layer_prunning.fit(X_train,y_train,epochs=300,validation_split=0.1,callbacks=callbacks,verbose=0)\n```", "```py\nlayer_prune_predictions = model_layer_prunning.predict(X_test)print(‘Layer Prunned MSE %.4f’ % mean_squared_error(y_test,layer_prune_predictions.reshape(3300,)))Layer Prunned MSE 0.1388\n```", "```py\nmodel_for_export = tfmot.sparsity.keras.strip_pruning(model_for_pruning)\n```", "```py\nSize of gzipped pruned model without stripping: 6101.00 bytes\nSize of gzipped pruned model with stripping: 5140.00 bytes\n```", "```py\nModel for Prunning Error 0.0264\nModel for Export Error  0.0264\n```"]