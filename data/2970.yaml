- en: Artificial Neural Networks Optimization using Genetic Algorithm with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用遗传算法优化人工神经网络与 Python
- en: 原文：[https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html](https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html](https://www.kdnuggets.com/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html?page=2#comments)![practical-computer-vision-applications-deepl-learning](../Images/2d2eba3f4293703bd96266e9008105f8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2019/03/artificial-neural-networks-optimization-genetic-algorithm-python.html?page=2#comments)![实际计算机视觉应用-深度学习](../Images/2d2eba3f4293703bd96266e9008105f8.png)'
- en: 'In a previous tutorial titled "**Artificial Neural Network Implementation using
    NumPy and Classification of the Fruits360 Image Dataset**" available in my LinkedIn
    profile at this link [https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad),
    an artificial neural network (ANN) is created for classifying 4 classes of the
    Fruits360 image dataset. The source code used in this tutorial is available in
    my GitHub page here: [https://github.com/ahmedfgad/NumPyANN](https://github.com/ahmedfgad/NumPyANN)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的一篇名为"**使用 NumPy 实现人工神经网络并分类 Fruits360 图像数据集**"的教程中，该教程可在我的 LinkedIn 个人资料中的此链接找到：[https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad)，我们创建了一个人工神经网络（ANN）用于分类
    Fruits360 图像数据集中的 4 个类别。该教程中使用的源代码可以在我的 GitHub 页面找到： [https://github.com/ahmedfgad/NumPyANN](https://github.com/ahmedfgad/NumPyANN)
- en: A quick summary of this tutorial is extracting the feature vector (360 bins
    hue channel histogram) and reducing it to just 102 element by using a filter-based
    technique using the standard deviation. Later, the ANN is built from scratch using
    NumPy.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该教程的简要总结是提取特征向量（360 个 bins 色调通道直方图），并使用基于滤波的技术通过标准差将其减少到仅 102 个元素。随后，ANN 是从头开始使用
    NumPy 构建的。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The ANN was not completely created as just the forward pass was made ready but
    there is no backward pass for updating the network weights. This is why the accuracy
    is very low and not exceeds 45%. The solution to this problem is using an optimization
    technique for updating the network weights. This tutorial extends the previous
    one to use the genetic algorithm (GA) for optimizing the network weights.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ANN 并未完全创建，只完成了前向传递，但没有进行更新网络权重的反向传递。这就是为什么准确率非常低且未超过 45%。解决这个问题的方法是使用优化技术来更新网络权重。本教程扩展了之前的教程，使用遗传算法（GA）来优化网络权重。
- en: 'It is worth-mentioning that both the previous and this tutorial are based on
    my 2018 book cited as "**Ahmed Fawzy Gad ''Practical Computer Vision Applications
    Using Deep Learning with CNNs''. Dec. 2018, Apress, 978-1-4842-4167-7** ". The
    book is available at Springer at this link: [https://springer.com/us/book/9781484241660](https://springer.com/us/book/9781484241660).
    You can find all details within this book.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 值得一提的是，之前的教程和本教程都基于我的 2018 年书籍，该书名为"**Ahmed Fawzy Gad《使用深度学习与 CNN 的实际计算机视觉应用》。2018年12月，Apress，978-1-4842-4167-7**"。该书在
    Springer 上可通过以下链接找到：[https://springer.com/us/book/9781484241660](https://springer.com/us/book/9781484241660)。你可以在这本书中找到所有细节。
- en: 'The source code used in this tutorial is available in my GitHub page here:
    [https://github.com/ahmedfgad/NeuralGenetic](https://github.com/ahmedfgad/NeuralGenetic)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的源代码可以在我的GitHub页面找到：[https://github.com/ahmedfgad/NeuralGenetic](https://github.com/ahmedfgad/NeuralGenetic)
- en: Read More about Genetic Algorithm
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读更多关于遗传算法的内容
- en: 'Before starting this tutorial, I recommended reading about how the genetic
    algorithm works and its implementation in Python using NumPy from scratch based
    on my previous tutorials found at these links:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本教程之前，我建议阅读关于遗传算法如何工作以及其在Python中使用NumPy从头实现的内容，这些内容可以在以下链接中找到：
- en: Introduction to Optimization with Genetic Algorithm
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法优化简介
- en: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
- en: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
- en: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
- en: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
- en: Genetic Algorithm (GA) Optimization - Step-by-Step Example
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法（GA）优化 - 步骤示例
- en: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
- en: Genetic Algorithm Implementation in Python
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遗传算法在Python中的实现
- en: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
- en: '[/2018/07/genetic-algorithm-implementation-python.html](/2018/07/genetic-algorithm-implementation-python.html)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[/2018/07/genetic-algorithm-implementation-python.html](/2018/07/genetic-algorithm-implementation-python.html)'
- en: '[https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)'
- en: '[https://github.com/ahmedfgad/GeneticAlgorithmPython](https://github.com/ahmedfgad/GeneticAlgorithmPython)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/ahmedfgad/GeneticAlgorithmPython](https://github.com/ahmedfgad/GeneticAlgorithmPython)'
- en: After understanding how GA works based on numerical examples in addition to
    implementation using Python, we can start using GA to optimize the ANN by updating
    its weights (parameters).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了基于数值示例的GA工作原理以及在Python中的实现之后，我们可以开始使用GA来优化ANN，通过更新其权重（参数）。
- en: Using GA with ANN
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用遗传算法（GA）优化人工神经网络（ANN）
- en: GA creates multiple solutions to a given problem and evolves them through a
    number of generations. Each solution holds all parameters that might help to enhance
    the results. For ANN, weights in all layers help achieve high accuracy. Thus,
    a single solution in GA will contain all weights in the ANN. According to the
    network structure discussed in the previous tutorial and given in the figure below,
    the ANN has 4 layers (1 input, 2 hidden, and 1 output). Any weight in any layer
    will be part of the same solution. A single solution to such network will contain
    a total number of weights equal to 102x150+150x60+60x4=24,540\. If the population
    has 8 solutions with 24,540 parameters per solution, then the total number of
    parameters in the entire population is 24,540x8=196,320.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: GA为给定问题创建多个解决方案，并通过多个世代对其进行进化。每个解决方案包含可能有助于改善结果的所有参数。对于ANN，所有层的权重有助于实现高准确度。因此，GA中的单个解决方案将包含ANN中的所有权重。根据之前教程中讨论的网络结构以及下图所示，ANN具有4层（1层输入，2层隐藏，1层输出）。任何层中的权重都将成为同一解决方案的一部分。这样的网络的单个解决方案将包含总数量为102x150+150x60+60x4=24,540的权重。如果种群中有8个解决方案，每个解决方案包含24,540个参数，那么整个种群中的总参数数量为24,540x8=196,320。
- en: '![artificial-neural-network](../Images/d3ee8682d9b41f4e59bad5b79e948a75.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![artificial-neural-network](../Images/d3ee8682d9b41f4e59bad5b79e948a75.png)'
- en: Looking at the above figure, the parameters of the network are in matrix form
    because this makes calculations of ANN much easier. For each layer, there is an
    associated weights matrix. Just multiply the inputs matrix by the parameters matrix
    of a given layer to return the outputs in such layer. Chromosomes in GA are 1D
    vectors and thus we have to convert the weights matrices into 1D vectors.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从上图来看，网络的参数是矩阵形式，因为这样可以使ANN的计算更加简单。对于每一层，都有一个相关的权重矩阵。只需将输入矩阵乘以给定层的参数矩阵，就可以返回该层的输出。遗传算法中的染色体是1D向量，因此我们必须将权重矩阵转换为1D向量。
- en: Because matrix multiplication is a good option to work with ANN, we will still
    represent the ANN parameters in the matrix form when using the ANN. Thus, matrix
    form is used when working with ANN and vector form is used when working with GA.
    This makes us need to convert the matrix to vector and vice versa. The next figure
    summarizes the steps of using
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因为矩阵乘法是处理人工神经网络（ANN）的一个好选择，我们在使用ANN时仍会将ANN的参数表示为矩阵形式。因此，在处理ANN时使用矩阵形式，而在处理遗传算法（GA）时使用向量形式。这就需要我们在矩阵和向量之间进行转换。下图总结了使用
- en: GA with ANN. This figure is referred to as the **main figure**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这张图被称为**主要图**。
- en: '![figure-name](../Images/57ce8711167885fdd567d24b6587d7b0.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/57ce8711167885fdd567d24b6587d7b0.png)'
- en: Weights Matrices to 1D Vector
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 权重矩阵转换为 1D 向量的步骤。
- en: Each solution in the population will have two representations. First is a 1D
    vector for working with GA and second is a matrix to work with ANN. Because there
    are 3 weights matrices for the 3 layers (2 hidden + 1 output), there will be 3
    vectors, one for each matrix. Because a solution in GA is represented as a single
    1D vector, such 3 individual 1D vectors will be concatenated into a single 1D
    vector. Each solution will be represented as a vector of length 24,540\. The next
    Python code creates a function named **mat_to_vector()** that converts the parameters
    of all solutions within the population from matrix to vector.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 每个种群中的解决方案将有两种表示方式。首先是用于GA的1D向量，其次是用于ANN的矩阵。由于3层（2层隐藏层+1层输出层）有3个权重矩阵，所以将有3个向量，每个矩阵对应一个向量。因为GA中的解决方案表示为一个单独的1D向量，所以这3个单独的1D向量将被拼接成一个单一的1D向量。每个解决方案将被表示为长度为24,540的向量。接下来的Python代码创建了一个名为**mat_to_vector()**的函数，该函数将种群中所有解决方案的参数从矩阵转换为向量。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The function accepts an argument representing the population of all solutions
    in order to loop through them and return their vector representation. At the beginning
    of the function, an empty list variable named **pop_weights_vector** is created
    to hold the result (vectors of all solutions). For each solution in matrix form,
    there is an inner loop that loops through its three matrices. For each matrix,
    it is converted into a vector using the **numpy.reshape()** function which accepts
    the input matrix and the output size to which the matrix will be reshaped. The
    variable **curr_vector** accepts all vectors for a single solution. After all
    vectors are generated, they get appended into the **pop_weights_vector** variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数接受一个参数，表示所有解决方案的种群，以便对其进行遍历并返回它们的向量表示。在函数开始时，创建了一个名为**pop_weights_vector**的空列表变量，用于保存结果（所有解决方案的向量）。对于每个矩阵形式的解决方案，有一个内循环遍历其三个矩阵。对于每个矩阵，使用**numpy.reshape()**函数将其转换为向量，该函数接受输入矩阵和要重塑的输出大小。变量**curr_vector**接受一个解决方案的所有向量。在生成所有向量后，它们将被追加到**pop_weights_vector**变量中。
- en: Note that we used the **numpy.extend()** function for vectors belonging to the
    same solution and **numpy.append()** for vectors belonging to different solutions.
    The reason is that **numpy.extend()** takes the numbers within the 3 vectors belonging
    to the same solution and concatenate them together. In other words, calling this
    function for two lists returns a new single list with numbers from both lists.
    This is suitable in order to create just a 1D chromosome for each solution. But
    **numpy.append()** will return three lists for each solution. Calling it for two
    lists, it returns a new list which is split into two sub-lists. This is not our
    objective. Finally, the function **mat_to_vector()** returns the population solutions
    as a NumPy array for easy manipulation later.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们使用**numpy.extend()**函数来处理属于同一解决方案的向量，使用**numpy.append()**来处理属于不同解决方案的向量。原因是**numpy.extend()**将属于同一解决方案的3个向量中的数字连接在一起。换句话说，调用此函数的两个列表会返回一个新列表，其中包含两个列表中的所有数字。这适用于为每个解决方案创建一个1D染色体。但是**numpy.append()**将为每个解决方案返回三个列表。调用两个列表时，它会返回一个新的列表，该列表被拆分为两个子列表。这不是我们的目标。最后，**mat_to_vector()**函数将种群解决方案作为NumPy数组返回，以便后续处理。
- en: Implementing GA Steps
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现GA步骤
- en: After converting all solutions from matrices to vectors and concatenated together,
    we are ready to go through the GA steps discussed in the tutorial titled **"Introduction
    to Optimization with Genetic Algorithm"**. The steps are presented in the **main
    figure** and also summarized in the next figure.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在将所有解决方案从矩阵转换为向量并连接在一起后，我们准备进入**"Introduction to Optimization with Genetic Algorithm"**教程中讨论的GA步骤。这些步骤在**main
    figure**中展示，并在下一个图中总结。
- en: '![genetic-algorithm-steps](../Images/6ab6d32f52e77336c2e67f65d9e0058b.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![遗传算法步骤](../Images/6ab6d32f52e77336c2e67f65d9e0058b.png)'
- en: Remember that GA uses a fitness function to returns a fitness value for each
    solution. The higher the fitness value the better the solution. The best solutions
    are returned as parents in the **parents selection** step.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 记住GA使用适应度函数来返回每个解决方案的适应度值。适应度值越高，解决方案越好。最佳解决方案作为父代在**parents selection**步骤中返回。
- en: One of the common fitness functions for a classifier such as ANN is the accuracy.
    It is the ratio between the correctly classified samples and the total number
    of samples. It is calculated according to the next equation. The classification
    accuracy of each solution is calculated according to steps in the **main figure**.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于像ANN这样的分类器，常见的适应度函数之一是准确率。它是正确分类样本与样本总数之间的比例。它根据下列公式计算。每个解决方案的分类准确率是根据**main
    figure**中的步骤计算的。
- en: '![Equation](../Images/e8768f7eb7deeb08cb4bd8ca72e54f27.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![公式](../Images/e8768f7eb7deeb08cb4bd8ca72e54f27.png)'
- en: The single 1D vector of each solution is converted back into 3 matrices, one
    matrix for each layer (2 hidden and 1 output). Conversion takes place using a
    function called **vector_to_mat()**. It is defined in the next code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个解决方案的单个1D向量被转换回3个矩阵，每层一个矩阵（2个隐藏层和1个输出层）。转换使用一个名为**vector_to_mat()**的函数。定义在下一个代码中。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It reverses the work done previously. But there is an important question. If
    the vector of a given solution is just one piece, how we can split into three
    different parts, each part represents a matrix? The size of the first parameters
    matrix between the input layer and the hidden layer is 102x150\. When being converted
    into a vector, its length will be 15,300\. Because it is the first vector to be
    inserted in the **curr_vector** variable according to the **mat_to_vector()**
    function, then its indices start from index 0 and end at index 15,299\. The **mat_pop_weights**
    is used as an argument for the **vector_to_mat()** function in order to know the
    size of each matrix. We are not interested in using the weights from the **mat_pop_weights**
    variable but just the matrices sizes are used from it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 它会逆转之前所做的工作。但有一个重要的问题。如果给定解决方案的向量只有一块，我们怎么将它分成三个不同的部分，每部分表示一个矩阵？输入层和隐藏层之间的第一个参数矩阵的大小是102x150。当转换为向量时，其长度为15,300。因为它是按照**mat_to_vector()**函数插入**curr_vector**变量中的第一个向量，所以其索引从0开始，到15,299结束。**mat_pop_weights**作为**vector_to_mat()**函数的参数，用于知道每个矩阵的大小。我们不关心使用**mat_pop_weights**变量中的权重，只关心从中获取矩阵的大小。
- en: For the second vector in the same solution, it will be the result of converting
    a matrix of size 150x60\. Thus the vector length is 9,000\. Such a vector is inserted
    into the **curr_vector** variable just before the previous vector of length 15,300\.
    As a result, it will start from index 15,300 and ends at index 15,300+9,000-1=24,299\.
    The -1 is used because Python starts indexing at 0\. For the last vector created
    from the parameters matrix of size 60x4, its length is 240\. Because it is added
    into the **curr_vector** variable exactly after the previous vector of length
    9,000, then its index will start after it. That is its start index is 24,300 and
    its end index is 24,300+240-1=24,539\. So, we can successfully restore the vector
    into the original 3 matrices.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于同一解决方案中的第二个向量，它将是将150x60的矩阵转换后的结果。因此，向量长度为9,000。这样一个向量被插入到 **curr_vector**
    变量中，刚好在之前长度为15,300的向量之前。结果，它将从索引15,300开始，结束于索引15,300+9,000-1=24,299。-1的使用是因为Python从0开始索引。对于最后一个由60x4参数矩阵创建的向量，它的长度是240。由于它被添加到
    **curr_vector** 变量中，正好在之前长度为9,000的向量之后，因此它的索引会在它之后开始。也就是说，它的起始索引是24,300，结束索引是24,300+240-1=24,539。因此，我们可以成功地将向量恢复为原始的3个矩阵。
- en: The matrices returned for each solution are used to predict the class label
    for each of the 1,962 samples in the used dataset to calculate the accuracy. This
    is done using 2 functions which are **predict_outputs()** and **fitness()** according
    to the next code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个解决方案返回的矩阵用于预测在所用数据集中每个1,962个样本的类别标签，以计算准确度。这是通过使用两个函数 **predict_outputs()**
    和 **fitness()** 来完成的，具体请参见下述代码。
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The **predict_outputs()** function accepts the weights of a single solution,
    inputs, and outputs of the training data, and an optional parameter that specifies
    which activation function to use. It returns the accuracy of just one solution
    not all solutions within the population. It order to return the fitness value
    (i.e. accuracy) of all solutions within the population, the **fitness()** function
    loops through each solution, pass it to the **predict_outputs()** function, store
    the accuracy of all solutions into the **accuracy** array, and finally return
    such an array.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**predict_outputs()** 函数接受单个解决方案的权重、输入和训练数据的输出，以及一个可选参数，该参数指定使用哪个激活函数。它返回的仅仅是一个解决方案的准确度，而不是群体中所有解决方案的准确度。为了返回群体中所有解决方案的适应度值（即准确度），**fitness()**
    函数遍历每个解决方案，将其传递给 **predict_outputs()** 函数，将所有解决方案的准确度存储到 **accuracy** 数组中，最后返回这个数组。'
- en: After calculating the fitness value (i.e. accuracy) for all solutions, the remaining
    steps of GA in the main figure are applied the same way done previously. The best
    parents are selected, based on their accuracy, into the mating pool. Then mutation
    and crossover variants are applied in order to produce the offspring. The population
    of the new generation is created using both offspring and parents. These steps
    are repeated for a number of generations.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算所有解决方案的适应度值（即准确度）后，主图中的遗传算法（GA）的剩余步骤与之前的操作相同。根据准确度选择最好的父代进入配对池。然后应用突变和交叉变体以产生后代。新一代的种群是通过将后代和父代结合创建的。这些步骤会重复进行若干代。
- en: More On This Topic
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的Python代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立一个强大的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并寻找目标去…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
