["```py\n# fn. to analyze sales data, calculate sales metrics, and write it to a file\ndef analyze_and_report_sales(data, report_filename):\n\ttotal_sales = sum(item['price'] * item['quantity'] for item in data)\n\taverage_sales = total_sales / len(data)\n\n\twith open(report_filename, 'w') as report_file:\n    \t    report_file.write(f\"Total Sales: {total_sales}\\n\")\n    \t    report_file.write(f\"Average Sales: {average_sales}\\n\")\n\n\treturn total_sales, average_sales \n```", "```py\n# refactored into two funcs: one to calculate metrics and another to write sales report\ndef calculate_sales_metrics(data):\n\ttotal_sales = sum(item['price'] * item['quantity'] for item in data)\n\taverage_sales = total_sales / len(data)\n\treturn total_sales, average_sales\n\ndef write_sales_report(report_filename, total_sales, average_sales):\n\twith open(report_filename, 'w') as report_file:\n    \t    report_file.write(f\"Total Sales: {total_sales}\\n\")\n    \t    report_file.write(f\"Average Sales: {average_sales}\\n\") \n```", "```py\ndata = [{'price': 100, 'quantity': 2}, {'price': 200, 'quantity': 1}]\ntotal_sales, average_sales = calculate_sales_metrics(data)\nwrite_sales_report('sales_report.txt', total_sales, average_sales) \n```", "```py\n# fn. to process orders\ndef process_orders(orders):\n\ttotal_quantity = sum(order['quantity'] for order in orders)\n\ttotal_value = sum(order['quantity'] * order['price'] for order in orders)\n\treturn {\n    \t'total_quantity': total_quantity,\n    \t'total_value': total_value\n\t} \n```", "```py\n# modified with type hints\nfrom typing import List, Dict\n\ndef process_orders(orders: List[Dict[str, float | int]]) -> Dict[str, float | int]:\n\ttotal_quantity = sum(order['quantity'] for order in orders)\n\ttotal_value = sum(order['quantity'] * order['price'] for order in orders)\n\treturn {\n    \t'total_quantity': total_quantity,\n    \t'total_value': total_value\n\t} \n```", "```py\n# Sample data\norders = [\n\t{'price': 100.0, 'quantity': 2},\n\t{'price': 50.0, 'quantity': 5},\n\t{'price': 150.0, 'quantity': 1}\n]\n\n# Sample function call\nresult = process_orders(orders)\nprint(result) \n```", "```py\n{'total_quantity': 8, 'total_value': 600.0} \n```", "```py\n# takes in an arg that's never used!\ndef process_student_grades(student_id, grades, course_name, instructor'):\n\taverage_grade = sum(grades) / len(grades)\n\treturn f\"Student {student_id} achieved an average grade of {average_grade:.2f} in {course_name}.\" \n```", "```py\n# better version!\ndef process_student_grades(student_id: int, grades: list, course_name: str) -> str:\n\taverage_grade = sum(grades) / len(grades)\n\treturn f\"Student {student_id} achieved an average grade of {average_grade:.2f} in {course_name}.\"\n\n# Usage\nstudent_id = 12345\ngrades = [85, 90, 75, 88, 92]\ncourse_name = \"Mathematics\"\nresult = process_student_grades(student_id, grades, course_name)\nprint(result) \n```", "```py\nStudent 12345 achieved an average grade of 86.00 in Mathematics.\n```", "```py\n# example fn. for processing transaction\ndef process_payment(transaction_id: int, amount: float, currency: str, description: str = None):\n\tprint(f\"Processing transaction {transaction_id}...\")\n\tprint(f\"Amount: {amount} {currency}\")\n\tif description:\n    \t\tprint(f\"Description: {description}\") \n```", "```py\n# enforce keyword-only arguments to minimize errors\n# make the optional `description` arg keyword-only\ndef process_payment(transaction_id: int, amount: float, currency: str, *, description: str = None):\n\tprint(f\"Processing transaction {transaction_id}:\")\n\tprint(f\"Amount: {amount} {currency}\")\n\tif description:\n    \t\tprint(f\"Description: {description}\") \n```", "```py\nprocess_payment(1234, 100.0, 'USD', description='Payment for services')\n```", "```py\nProcessing transaction 1234...\nAmount: 100.0 USD\nDescription: Payment for services \n```", "```py\n# throws error as we try to pass in more positional args than allowed!\nprocess_payment(5678, 150.0, 'EUR', 'Invoice payment') \n```", "```py\nTraceback (most recent call last):\n  File \"/home/balapriya/better-fns/tip4.py\", line 9, in <module>process_payment(1234, 150.0, 'EUR', 'Invoice payment')\nTypeError: process_payment() takes 3 positional arguments but 4 were given</module> \n```", "```py\n# returns a list of Fibonacci numbers\ndef generate_fibonacci_numbers_list(limit):\n\tfibonacci_numbers = [0, 1]\n\twhile fibonacci_numbers[-1] + fibonacci_numbers[-2] <= limit:\n    \t\tfibonacci_numbers.append(fibonacci_numbers[-1] + fibonacci_numbers[-2])\n\treturn fibonacci_numbers \n```", "```py\n# use generators instead\nfrom typing import Generator\n\ndef generate_fibonacci_numbers(limit: int) -> Generator[int, None, None]:\n\ta, b = 0, 1\n\twhile a <= limit:\n    \t\tyield a\n    \ta, b = b, a + b\n```", "```py\nlimit = 100\nfibonacci_numbers_generator = generate_fibonacci_numbers(limit)\nfor num in fibonacci_numbers_generator:\n\tprint(num) \n```", "```py\n0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89 \n```"]