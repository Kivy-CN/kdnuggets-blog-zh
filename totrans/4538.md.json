["```py\n\nimport pdpipe as pdp\ndrop_age = pdp.ColDrop(‘Avg. Area House Age’)\ndf2 = drop_age(df)\n```", "```py\npipeline = pdp.ColDrop(‘Avg. Area House Age’)\npipeline+= pdp.OneHotEncode(‘House_size’)\ndf3 = pipeline(df)\n```", "```py\n\ndef price_tag(x):\n    if x>250000:\n        return 'keep'\n    else:\n        return 'drop'\npipeline+=pdp.ApplyByCols('Price',price_tag,'Price_tag',drop=False)\npipeline+=pdp.ValDrop(['drop'],'Price_tag')\npipeline+= pdp.ColDrop('Price_tag')\n```", "```py\npipeline = pdp.ColDrop('Avg. Area House Age')\npipeline+= pdp.OneHotEncode('House_size')\npipeline+= pdp.ApplyByCols('Price',price_tag,'Price_tag',drop=False)\npipeline+= pdp.ValDrop(['drop'],'Price_tag')\npipeline+= pdp.ColDrop('Price_tag')\ndf5 = pipeline(df)\n```", "```py\npipeline_scale = pdp.Scale('StandardScaler',exclude_columns=['House_size_Medium','House_size_Small'])\ndf6 = pipeline_scale(df5)\n```", "```py\n\ndef extract_state(token):\n    return str(token[-2])\npipeline_tokenize=pdp.TokenizeWords('Address')\npipeline_state = pdp.ApplyByCols('Address',extract_state,result_columns='State')\npipeline_state_extract = pipeline_tokenize + pipeline_state\ndf7 = pipeline_state_extract(df6)\n```"]