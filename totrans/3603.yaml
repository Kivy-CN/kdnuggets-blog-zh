- en: Design Patterns in Machine Learning for MLOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/02/design-patterns-machine-learning-mlops.html](https://www.kdnuggets.com/2022/02/design-patterns-machine-learning-mlops.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/0ef26b2991f977072f7375150694848d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Juliana Malta](https://unsplash.com/@julianamalta?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Design Patterns are a set of best practices and reusable solutions to common
    problems. Data Science and other disciplines such as Software Development, Architecture,
    etc. are constituted by a large number of recurring problems and therefore trying
    to categories the most common ones and provide different forms of blueprints to
    easily recognize them and solve them could provide an immense benefit to the wider
    community.
  prefs: []
  type: TYPE_NORMAL
- en: 'The idea of using Design Patterns in Software Development was first brought
    by Erich Gamma et. al. in “*Design Patterns: Elements of Reusable Object-Oriented
    Software” *[1]and recently applied to Machine Learning processes thanks toSara
    Robinson et. al. in “*Machine Learning Design Patterns” *[2].'
  prefs: []
  type: TYPE_NORMAL
- en: As part of this article, we are now going to discover the different Design Patterns
    constituting **MLOps**. MLOps (Machine Learning -> Operations) is a set of processes
    designed to transform experimental Machine Learning models into productionized
    services ready to make decisions in the real world. At his core, MLOps is based
    on the same principles of DevOps but with an additional focus on data validation
    and continuous training/evaluation (Figure 1).
  prefs: []
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/549a97d539698d267e74282f085a7a15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: DevOps and MLOps (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the main benefits of MLOps are:'
  prefs: []
  type: TYPE_NORMAL
- en: Improved time to market (faster deployments).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Increased model robustness (easier to identify data drift, retraining models,
    etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More flexibility to train/compare different ML models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the other hand, **DevOps** emphasizes two key concepts for software development:
    Continuous Integration (CI) and Continuous Delivery (CD). Continuous Integration
    focuses on using a central repository as a means for teams to collaborate on a
    project and automating as much as possible the process of adding, testing and
    validating new code as it gets added by the different team members. In this way,
    it is possible to test at any time if the different parts of an application can
    correctly communicate with each other and identify as soon as possible any form
    of error. Continuous Delivery focuses instead on smoothly updating software deployments,
    trying to avoid as much as possible any form of downtime.'
  prefs: []
  type: TYPE_NORMAL
- en: MLOps Design Patterns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Workflow Pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Machine Learning (ML) projects are constructed by many different steps (Figure
    2).
  prefs: []
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/d67585e8517c963f95f8760ed21dff4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: ML Project Key Steps (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: 'When prototyping a new model, it can be quite common to start by using a single
    script (**monolithic**) in order to code the whole process but as the project
    might increase in complexity and more team members might start getting involved,
    it could then become necessary to divide each different step of the project into
    a separate script (**microservice**). Some of the benefits of taking this approach
    could then be:'
  prefs: []
  type: TYPE_NORMAL
- en: Easier to experiment with changes in the orchestration of the different steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the project scalable by definition (new steps can be easily added and removed).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each team member can be able to focus on a different step in the flow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Separated artefacts can be created for each different step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Workflow Pipeline design pattern, aims to define a blueprint in order to
    create ML Pipelines. ML Pipelines can be represented as a **Directed Acyclic Graph
    (DAG)**, in which each of its steps is characterized by a container (Figure 3).
  prefs: []
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/8fdb9e96375795d3fc795f260065c7eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: Directed Acyclic Graph Example (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Following this structure, it could then be possible to create reproducible
    and manageable ML processes. Some of the benefits of using Workflow Pipelines
    could then be:'
  prefs: []
  type: TYPE_NORMAL
- en: By adding and removing steps in the flow, complex experiments can be created
    to test different preprocessing techniques, machine learning models and hyperparameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving individually the output of each different step, it can be possible to
    avoid re-running steps at the beginning of the pipeline if any change has been
    applied just in the final steps (therefore saving time and computational power).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of errors, it can be easy to identify which step might need to be updated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once deployed to production using CI/CD, pipelines can be scheduled to re-run
    based on different factors such as: time interval, external triggers, changes
    in ML metrics, etc.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature Store
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feature Stores are a data management layer designed for Machine Learning processes
    (Figure 4). The main use of this design pattern is to simplify how organizations
    manage and use Machine Learning features. This is done, by creating some form
    of central repository used by a company to store all the features which have ever
    been created for ML processes. In this way, if Data Scientists might need the
    same subset of features for different ML projects, they would not have to go through
    the process of converting raw data into processed features multiple times (which
    could be time expensive). Two of the most common open-source Feature Store solutions
    are [Feast](https://feast.dev/) and [Hopsworks](https://www.hopsworks.ai/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/81166c9ed5a002978d349d0977cdd3cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Feature Store Design Pattern (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: Additional information about Feature Stores can be found in [my previous article.](https://towardsdatascience.com/getting-started-with-feature-stores-121006ee81c9)
  prefs: []
  type: TYPE_NORMAL
- en: Transform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Transform design pattern aims to make it easier to deploy and maintain Machine
    Learning models in production by keeping inputs, features and transforms as separate
    entities (Figure 5). Raw data needs in fact to usually go through different preprocessing
    steps in order to then be used as input for a Machine Learning model and some
    of these transformations needs then to be saved in order to be reused when preprocessing
    data for inference.
  prefs: []
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/349ee124b39ddfde5f64adf6787dbe8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Inputs and Features relationship (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: For example, normalization/standardization techniques are commonly applied to
    numerical data before training an ML model in order to deal with outliers and
    make the data look like more a gaussian distribution. These transformations should
    then be saved so that they could be reused in the future when new data is made
    available for inference. If these transformations would not be saved, we would
    then create a data skew between training and serving with the input data provided
    for inference having a different distribution compared to the input data used
    to train the ML model.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative solution in order to avoid any type of skew between training
    and serving is to make use of the Feature Store design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Multimodal Input
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Different types of data such as images, text, numbers, etc. can be used in order
    to train ML models, although some types of models can only accept a specific type
    of input data. For example, the Resnet-50 is able to take just images as input
    data, while other ML models such as KNN (K Nearest Neighbor) are able to take
    just numeric data as input.
  prefs: []
  type: TYPE_NORMAL
- en: In order to try to solve an ML problem, it might be necessary to use different
    forms of input data. In this case, some form of transformation needs to be applied
    in order to create a common representation of all our different types of input
    data (Multimodal Input design pattern). As an example, let us imagine we are provided
    with a combination of text, numeric and categorical data. In order to train an
    ML model, we could then make use of techniques such as sentiment analysis, bag
    of words or word embeddings to convert the text data into a numeric format and
    one-hot-encoding to convert the categorical data as well. In this way, we would
    then have all our data in the same format (numeric), ready to be used for training.
  prefs: []
  type: TYPE_NORMAL
- en: Cascade
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In some scenarios, it cannot be possible to solve an ML problem using just a
    single ML model. In this case, it would then be necessary to create a series of
    ML models which are dependent on each other in order to achieve an end goal. As
    an example, let us imagine we are trying to predict what kind of items to recommend
    to a user (Figure 6). To solve this problem, we want first to create a model able
    to predict if the user is more or less than 18 years old and then depending on
    the response from this model route our flow to one of two different ML recommendation
    engines (one designed to recommend products for above 18 users and the other one
    to recommend products to under 18 users).
  prefs: []
  type: TYPE_NORMAL
- en: '![Design Patterns in Machine Learning for MLOps](../Images/d10c02ccd8863a367a66eefed8763348.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Cascade Design Pattern (Image by Author).'
  prefs: []
  type: TYPE_NORMAL
- en: In order to create this *Cascade* of ML models, we would then need to make sure
    to train them together. In fact, because of their dependency on one another, if
    the first model would change (without updating the other models) this could then
    lead to instability to the subsequent models. This type of process could then
    be automated using the Workflow Pipeline design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, we explored some of the most common Design Patterns underpinning
    MLOps. In case you are interested in finding out more about Design Patterns in
    Machine Learning, additional information is available in [this talk](https://www.youtube.com/watch?v=_Ni6JWdeCew) by
    Valliappa Lakshmanan at AIDevFest20 and the “Machine Learning Design Patterns”
    book public [GitHub repository](https://github.com/GoogleCloudPlatform/ml-design-patterns).
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to keep updated with my latest articles and projects [follow me
    on Medium](https://pierpaoloippolito28.medium.com/subscribe) and subscribe to
    my [mailing list](http://eepurl.com/gwO-Dr?source=post_page---------------------------).
    These are some of my contacts details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://uk.linkedin.com/in/pier-paolo-ippolito-202917146?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personal Website](https://pierpaolo28.github.io/?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Medium Profile](https://towardsdatascience.com/@pierpaoloippolito28?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/pierpaolo28?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kaggle](https://www.kaggle.com/pierpaolo28?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bibliography
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] “Design Patterns: Elements of Reusable Object-Oriented Software” (Addison-Wesley,
    1995). Accessed at: [www.uml.org.cn/c%2B%2B/pdf/DesignPatterns.pdf](http://www.uml.org.cn/c%2B%2B/pdf/DesignPatterns.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] “Machine Learning Design Patterns” (Sara Robinson et. al., 2020) Accessed
    at: [https://www.oreilly.com/library/view/machine-learning-design/9781098115777/](https://www.oreilly.com/library/view/machine-learning-design/9781098115777/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Pier Paolo Ippolito](https://www.linkedin.com/in/pierpaolo28/)** is a Data
    Scientist and MSc in Artificial Intelligence graduate from the University of Southampton.
    He has a strong interest in AI advancements and machine learning applications
    (such as finance and medicine). Connect with him on [Linkedin](https://www.linkedin.com/in/pierpaolo28/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/design-patterns-in-machine-learning-for-mlops-a3f63f745ce4).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Unveiling Hidden Patterns: An Introduction to Hierarchical Clustering](https://www.kdnuggets.com/unveiling-hidden-patterns-an-introduction-to-hierarchical-clustering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design effective & reliable machine learning systems!](https://www.kdnuggets.com/2023/05/manning-design-effective-reliable-machine-learning-systems.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning System Design: Top 5 Essential Reads](https://www.kdnuggets.com/learning-system-design-top-5-essential-reads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to MLOps like a Boss: A Guide to Machine Learning without Tears](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[25 Free Courses to Master Data Science, Data Engineering, Machine…](https://www.kdnuggets.com/25-free-courses-to-master-data-science-data-engineering-machine-learning-mlops-and-generative-ai)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
