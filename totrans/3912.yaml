- en: Python Tuples and Tuple Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/11/python-tuples-methods.html](https://www.kdnuggets.com/2019/11/python-tuples-methods.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/), Data
    Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: Tuples are an ordered sequences of items, just like lists. The main difference
    between tuples and lists is that tuples cannot be changed (immutable) unlike lists
    which can (mutable).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize a Tuple
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are two ways to initialize an empty tuple. You can initialize an empty
    tuple by having () with no values in them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can also initialize an empty tuple by using the `tuple` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: A tuple with values can be initialized by making a sequence of values separated
    by commas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/a3d746cf6f81268eed65f347dfed151a.png)'
  prefs: []
  type: TYPE_IMG
- en: You can initialize a tuple with or without parenthesis
  prefs: []
  type: TYPE_NORMAL
- en: It is important to keep in mind that if you want to create a tuple containing
    only one value, you need a trailing comma after your item.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Accessing Values in Tuples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/8382596d021921d96439c5fbb9cf76b7.png)'
  prefs: []
  type: TYPE_IMG
- en: You can initialize a tuple with or without without parenthesis
  prefs: []
  type: TYPE_NORMAL
- en: Each value in a tuple has an assigned index value. It is important to note that
    python is a zero indexed based language. All this means is that the first value
    in the tuple is at index 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/de0d8279adf460814a61e3f984117e3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of accessing the item at index 0.
  prefs: []
  type: TYPE_NORMAL
- en: Python also supports negative indexing. Negative indexing starts from the end
    of the tuple. It can sometimes be more convenient to use negative indexing to
    get the last item in a tuple because you don’t have to know the length of a tuple
    to access the last item.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e605c64ec60f1b09b1f014ac7c63d1e8.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/5fa58fedffb2db5edf1caa8fc1dd11ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of accessing the last item in the tuple
  prefs: []
  type: TYPE_NORMAL
- en: As a reminder, you could also access the same item using positive indexes (as
    seen below).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/766c171028b8cc16db1429587fa28741.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternative way of accessing the last item in the tuple z
  prefs: []
  type: TYPE_NORMAL
- en: Tuple slices
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Slice operations return a new tuple containing the requested items. Slices are
    good for getting a subset of values in your tuple. For the example code below,
    it will return a tuple with the items from index 0 up to and not including index
    2.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/632d8c9b040d7b2d3673d82249b1d7eb.png)'
  prefs: []
  type: TYPE_IMG
- en: First index is inclusive (before the :) and last (after the :) is not
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/25940bf82e76e9f553e6b5328a89ecec.png)'
  prefs: []
  type: TYPE_IMG
- en: Slice of a tuple syntax
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72ccc13284b1b2a9a61a96dc508404b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/64cc754b83c02e7ddbeab93fe9671483.png)'
  prefs: []
  type: TYPE_IMG
- en: Everything up to but not including index 3
  prefs: []
  type: TYPE_NORMAL
- en: You can even make slices with negative indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/72ccc13284b1b2a9a61a96dc508404b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b976b41730fef6c9578b9d05c7cbc4a3.png)'
  prefs: []
  type: TYPE_IMG
- en: Tuples are Immutable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tuples are immutable which means that after initializing a tuple, it is impossible
    to update individual items in a tuple. As you can see in the code below, you cannot
    update or change the values of tuple items (this is different from [Python Lists](https://towardsdatascience.com/python-basics-6-lists-and-list-manipulation-a56be62b1f95) which
    are mutable).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/61e6821e4ca241d3c44c754e632eeb6c.png)'
  prefs: []
  type: TYPE_IMG
- en: Even though tuples are immutable, it is possible to take portions of existing
    tuples to create new tuples as the following example demonstrates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/15e778fe8f3fa8866e635013fc7f6a1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Tuple Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/72bed4d6e3057c903bc486670227ccbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Before starting this section, let’s first initialize a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: index method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The index method returns the first index at which a value occurs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f53a0c42a43efe8d46b1fb48eca5e786.png)'
  prefs: []
  type: TYPE_IMG
- en: count method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The count method returns the number of times a value occurs in a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/2e716837fa632d7ec325db909e806c01.png)'
  prefs: []
  type: TYPE_IMG
- en: The string ‘lama’ appears twice in the tuple animals
  prefs: []
  type: TYPE_NORMAL
- en: Iterate through a Tuple
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can iterate through the items of a tuple by using a for loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6d57a736a98fe39d148883676544e099.png)'
  prefs: []
  type: TYPE_IMG
- en: Tuple Unpacking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tuples are useful for sequence unpacking.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b9e0696cb26e39ce28c7739cfdd9bc0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Enumerate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `enumerate` function returns a tuple containing a count for every iteration
    (from start which defaults to 0) and the values obtained from iterating over a
    sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2f4bd4d61fc781f3c1016fc2419d2e61.png)'
  prefs: []
  type: TYPE_IMG
- en: Advantages of Tuples over Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Quick video on this section
  prefs: []
  type: TYPE_NORMAL
- en: Lists and tuples are standard Python data types that store values in a sequence.
    A`tuple` is **immutable** whereas a `list` is **mutable. **Here are some other
    advantages of tuples over lists (partially from [Stack Overflow](https://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each))
  prefs: []
  type: TYPE_NORMAL
- en: '**Tuples are faster than lists.** If you’re defining a constant set of values
    and all you’re ever going to do with it is iterate through it, use a tuple instead
    of a list. The performance difference can be partially measured using the `timeit` library
    which allows you to time your Python code. The code below runs the code for each
    approach 1 million times and outputs the overall time it took in seconds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/25403a0081081c815348efd09c0ab056.png)'
  prefs: []
  type: TYPE_IMG
- en: Some tuples can be used as dictionary keys (specifically, tuples that contain
    immutable values like strings, numbers, and other tuples). Lists can never be
    used as dictionary keys, because lists are not immutable (you can learn about
    dictionaries [here](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e7d55a71e2e337a51d18d4d0b8e14a72.png)'
  prefs: []
  type: TYPE_IMG
- en: Tuples can be used as values in sets whereas lists can not (you can learn more
    about sets [here](https://towardsdatascience.com/python-sets-and-set-theory-2ace093d1607))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/45d42882647c8c7e829e77b88204a788.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have any questions or thoughts on the tutorial, feel free to reach out
    in the comments below or through [Twitter](https://twitter.com/GalarnykMichael).
    Next post reviews [Python Dictionaries and Dictionary Methods](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9).
    If you want to learn how to utilize the Pandas, Matplotlib, or Seaborn libraries,
    please consider taking my [Python for Data Visualization LinkedIn Learning course](https://www.linkedin.com/learning/python-for-data-visualization/value-of-data-visualization).
    Here is a [free preview video](https://youtu.be/BE8CVGJuftI).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f261c9188458bbbf828a24c78cba3ca6.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Python Dictionary Tutorial](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** is
    a Data Scientist and Corporate Trainer. He currently works at Scripps Translational
    Research Institute. You can find him on Twitter (https://twitter.com/GalarnykMichael),
    Medium (https://medium.com/@GalarnykMichael), and GitHub (https://github.com/mGalarnyk).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/@GalarnykMichael/python-tuples-and-tuple-methods-4817a6bb6fff).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Lists and List Manipulation](/2019/11/python-lists-list-manipulation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Boxplots](/2019/11/understanding-boxplots.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Set Operations Applied to Pandas DataFrames](/2019/11/set-operations-applied-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Understanding Python''s Iteration and Membership: A Guide to…](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python String Methods](https://www.kdnuggets.com/2022/12/python-string-methods.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[11 Python Magic Methods Every Programmer Should Know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Centroid Initialization Methods for k-means Clustering](https://www.kdnuggets.com/2020/06/centroid-initialization-k-means-clustering.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Alternative Feature Selection Methods in Machine Learning](https://www.kdnuggets.com/2021/12/alternative-feature-selection-methods-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science Methods Drive Business Success](https://www.kdnuggets.com/2023/10/nwu-data-science-methods-drive-business-success)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
