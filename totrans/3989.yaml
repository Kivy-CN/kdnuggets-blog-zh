- en: Managing Python Dependencies with Poetry vs Conda & Pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Managing Python Dependencies with Poetry vs Conda & Pip](../Images/515a1e0530e130942288a0c92f095f58.png)'
  prefs: []
  type: TYPE_IMG
- en: Effectively managing dependencies, including libraries, functions, and packages
    crucial for project functionality, is facilitated by utilizing a package manager.
    Pip, a widely adopted classic, serves as a go-to for many developers, enabling
    the seamless installation of Python packages from the Python Package Index (PyPI).
    Conda, recognized not only as a package manager but also as an environment manager,
    extends its capabilities to handle both Python and non-Python dependencies, making
    it a versatile tool. For our purposes, we will focus on using it mainly for Python-only
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: Pip and Conda stand out as reliable tools, extensively used and trusted by the
    developer community. However, as projects expand, maintaining organization amid
    a growing number of dependencies becomes a challenge. In this context, Poetry
    emerges as a modern and organized solution for dependency management.
  prefs: []
  type: TYPE_NORMAL
- en: Poetry, built on top of Pip, introduces a contemporary approach to managing
    dependencies. It extends beyond being a simple fusion of Pip and a virtual environment
    serving as a comprehensive tool that encompasses dependency management, project
    packaging, and build processes. The comparison to Conda is nuanced; Poetry aims
    to simplify the packaging and distribution of Python projects, offering a distinct
    set of features.
  prefs: []
  type: TYPE_NORMAL
- en: Pip and Conda remain valuable choices for managing dependencies, with Conda's
    versatility in handling diverse dependencies. Poetry, on the other hand, provides
    a modernized and comprehensive solution, offering simplicity in managing Python
    projects and their dependencies. Choosing the appropriate tool depends on the
    specific requirements of the project and the preferences of the developer.
  prefs: []
  type: TYPE_NORMAL
- en: Package Management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Poetry uses a pyproject.toml file to specify the configuration for your project
    accompanied by an automatically generated lockfile. The pyproject.toml file looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Like other dependency managers, Poetry diligently keeps track of package versions
    in the current environment through a lockfile. This lockfile contains project
    metadata, package version parameters, and more, ensuring consistency across different
    environments. Developers can intelligently separate dependencies into dev-based
    and prod-based categories within the toml files, streamlining deployment environments
    and reducing the risk of conflicts, especially on different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Poetry's pyproject.toml file is designed to address certain limitations found
    in Pip's requirement.txt and Conda's environment.yaml files. Unlike Pip and Conda,
    which often produce lengthy dependency lists without metadata in a separate file,
    Poetry aims for a more organized and concise representation.
  prefs: []
  type: TYPE_NORMAL
- en: While it's true that Pip and Conda, by default, lack a lock feature, it's important
    to note that recent versions offer options for generating lockfiles via installed
    libraries like pip-tools and conda-lock. This functionality ensures that different
    users can install the intended library versions specified in the requirements.txt
    file, promoting reproducibility.
  prefs: []
  type: TYPE_NORMAL
- en: Poetry emerges as a modern and organized solution for Python dependency management,
    offering improved organization, version control, and flexibility compared to traditional
    tools like Pip and Conda.
  prefs: []
  type: TYPE_NORMAL
- en: Updating, Installing, and Removing Dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Poetry, updating libraries is simple and accounts for other dependencies
    to ensure they are up to date accordingly. Poetry has a mass update command that
    will update your dependencies (according to your toml file) while keeping all
    dependencies still compatible with one another and maintaining package version
    parameters inside found in the lock file. This will simultaneously update your
    lock file.
  prefs: []
  type: TYPE_NORMAL
- en: As for installation, it could not get any simpler. To install dependencies with
    Poetry you can use the poetry add function that you can either specify the version,
    use logic to specify version parameters (greater than less than), or use flags
    like @latest which will install the most recenter version of the package from
    PyPI. You can even group multiple packages in the same add function. Any newly
    installed package is automatically resolved to maintain the correct dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As for the classic dependency managers, let's test to see what happens when
    we try to install an older incompatible version. Pip installed packages will output
    errors and conflicts but will ultimately still install the package which can lead
    to development that is not ideal. Conda does have a solver for errors in compatibility
    and will notify the user, but immediately goes into search mode to solve the compatibility
    issue outputting a secondary error when it cannot find a solution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Poetry has an immediate response to dependency compatibility errors for fast
    and early notice of conflicts. It refuses to continue the installation, so the
    user is now in charge of either finding a different version of the new package
    or existing package. We feel that this allows more control as opposed to Conda’s
    immediate action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least is Poetry’s uninstallation of packages. Some packages require
    more dependencies that are installed. For Pip, its removal of a package will only
    uninstall the defined package and nothing else. Conda will remove some packages
    but not all dependencies. Poetry on the other hand will remove the package and
    all its dependencies to keep your list of dependencies clutter free.
  prefs: []
  type: TYPE_NORMAL
- en: Is Poetry Compatible with Existing Pip or Conda Projects?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yes, Poetry is compatible with existing projects managed by Pip or Conda. Just
    initialize your code using Poetry's Poetry.toml format and run it to grab the
    library of packages and its dependencies, allowing for a seamless transition.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have an existing project that uses Pip or Conda, you can migrate it
    to Poetry without much difficulty. Poetry uses its own pyproject.toml file to
    manage project dependencies and settings. To start using Poetry in your project,
    you can follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Install Poetry either by curling and piping or using Pip
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Navigate to the root directory of your existing project.
  prefs: []
  type: TYPE_NORMAL
- en: '3\. Initialize Poetry in your project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This command will guide you through a series of prompts to set up the initial
    configuration for your project.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Once the initialization is complete, Poetry will create the pyproject.toml
    in your project director. Open the toml file to add or modify your project's dependencies
  prefs: []
  type: TYPE_NORMAL
- en: 5\. To install the existing dependencies in your project to
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will create a virtual environment and install the project dependencies
    within it.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. You can now use the Poetry run command to execute your project's scripts,
    similar to how you would use Python or Conda commands.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Poetry manages the virtual environment and dependency resolution for your project,
    making it compatible with existing Pip or Conda projects. It simplifies the management
    of dependencies and allows for consistent package installations across different
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: It''s always a good practice to back up your project before making any
    significant changes to its configuration or dependency management tools.'
  prefs: []
  type: TYPE_NORMAL
- en: Closing Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Making sure the right versions of the packages are in your code environment
    is essential for getting the right results every time. Slight changes to the backend
    of your code can alter the outcome. But also, keeping those packages and libraries
    up to date is just as important, to leverage the innovations each patch provides
    the next.
  prefs: []
  type: TYPE_NORMAL
- en: To manage these dependencies in your code, Poetry is a great tool for those
    working with more complex and diverse projects with a higher number of dependencies.
    While Pip and Conda are still viable options, they are more suited for smaller
    environments that are less complex. Not everyone might use Poetry, but since Pip
    has been around forever, it may be worth the ease of use to just use Pip.
  prefs: []
  type: TYPE_NORMAL
- en: But if your project and your workload value the importance of organization and
    are willing to explore new tools to improve your process, Poetry is a tool you
    should consider. The extended functionality from Pip to Poetry really makes a
    difference. We encourage you to try Poetry out for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://www.exxactcorp.com/blog/Deep-Learning/managing-python-dependencies-with-poetry-vs-conda-pip).
    Republished with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Kevin Vu](https://blog.exxactcorp.com/)** manages [Exxact Corp blog](https://blog.exxactcorp.com/)
    and works with many of its talented authors who write about different aspects
    of Deep Learning.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A New Way of Managing Deep Learning Datasets](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Steps for Managing a Data Science Project](https://www.kdnuggets.com/2022/05/4-steps-managing-data-science-project.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Model Drift in Production with MLOps](https://www.kdnuggets.com/2023/05/managing-model-drift-production-mlops.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI in FinTech: Managing the Finance of the Future](https://www.kdnuggets.com/2022/10/ai-fintech-managing-finance-future.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
