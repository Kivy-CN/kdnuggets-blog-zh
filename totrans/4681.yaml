- en: Building a Flask API to Automatically Extract Named Entities Using SpaCy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SpaCy 自动提取命名实体的 Flask API
- en: 原文：[https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html](https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html](https://www.kdnuggets.com/2019/04/building-flask-api-automatically-extract-named-entities-spacy.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [注释](#comments)'
- en: '**By [Susan Li](https://www.linkedin.com/in/susanli/), Sr. Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[Susan Li](https://www.linkedin.com/in/susanli/)，高级数据科学家**'
- en: '![Figure](../Images/06957073c64dec6ad611e5c88f73a537.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/06957073c64dec6ad611e5c88f73a537.png)'
- en: 'Photo credit: Pixabay'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Pixabay
- en: The overwhelming amount of unstructured text data available today provides a
    rich source of information if the data can be structured. [Named-entity Recognition
    (NER](https://en.wikipedia.org/wiki/Named-entity_recognition))(also known as Named-entity
    Extraction) is one of the first steps to build knowledge from semi-structured
    and unstructured text sources.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 目前大量的非结构化文本数据提供了丰富的信息源，如果数据可以被结构化的话。[命名实体识别 (NER)](https://en.wikipedia.org/wiki/Named-entity_recognition)（也称为命名实体提取）是从半结构化和非结构化文本源中构建知识的第一步之一。
- en: Only after NER, we will be able to reveal at a minimum, who, and what, the information
    contains. As a result, a data science team would be able to see a structured representation
    of all of the the names of people, companies, locations and so on in a corpus
    that could serve as a point of departure for further analysis and investigation.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在进行 NER 后，我们才能至少揭示信息中包含了谁和什么。因此，数据科学团队将能够看到一个结构化的表示，展示一个语料库中所有人名、公司名、地点等的名称，这可以作为进一步分析和研究的起点。
- en: In the [previous post](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da),
    we have learned and practiced [how to build named entity recognizer using NLTK
    and spaCy](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da).
    To take steps further, create something useful, this article will cover how to
    develop and deploy a simple named entities extractor using spaCy and serve it
    with a Flask API in python*.*
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [上一篇文章](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da)中，我们学习并实践了
    [如何使用 NLTK 和 spaCy 构建命名实体识别器](https://towardsdatascience.com/named-entity-recognition-with-nltk-and-spacy-8c4a7d88e7da)。为了更进一步，创建有用的东西，本文将介绍如何使用
    spaCy 开发和部署一个简单的命名实体提取器，并通过 Flask API 用 Python 服务它*。
- en: A Flask API
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个 Flask API
- en: 'Our goal is to build an API that we provide text, for example, a New York Times
    article (or any article) as input, our named entity extractor will then identify
    and extract four types of entities: organization, person, location and money.
    The basic architecture looks like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是构建一个 API，我们提供文本，例如《纽约时报》文章（或任何文章）作为输入，我们的命名实体提取器将识别并提取四种类型的实体：组织、人物、地点和金额。基本架构如下：
- en: '![Figure](../Images/585cde79738ef16ac1a52385245ccd80.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/585cde79738ef16ac1a52385245ccd80.png)'
- en: Figure 1
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1
- en: 'To build the API, we will need to create two files:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建 API，我们需要创建两个文件：
- en: '`index.html` to handle the template of the API.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`index.html` 用于处理 API 的模板。'
- en: '`app.py` to handle the requests and return the output file.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`app.py` 用于处理请求并返回输出文件。'
- en: 'And the final product will look like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最终产品将如下所示：
- en: '![Figure](../Images/989fa6eb53ead63fcf32dca581c1051d.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/989fa6eb53ead63fcf32dca581c1051d.png)'
- en: Figure 2
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2
- en: 'Let’s start building the API and create two files step-by-step. Our project
    folder structure is like below:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从构建 API 开始，逐步创建两个文件。我们的项目文件夹结构如下：
- en: Our project is located in ***Named-Entity-Extractor ***folder.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的项目位于 ***Named-Entity-Extractor ***文件夹中。
- en: '![Figure](../Images/1895f7c9d56de5641d784aed7d26a6c4.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/1895f7c9d56de5641d784aed7d26a6c4.png)'
- en: Figure 3
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3
- en: The `templates` directory is in the same folder as the app.py in which it is
    created.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates` 目录与创建的 app.py 文件在同一文件夹中。'
- en: '![Figure](../Images/c7f1e889a9f905b696473b42f2c7489a.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/c7f1e889a9f905b696473b42f2c7489a.png)'
- en: Figure 4
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4
- en: The index.html is located in the templates folder.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: index.html 位于 templates 文件夹中。
- en: '**index.html**'
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**index.html**'
- en: We name our App as “Named Entity Extractor”
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将我们的应用命名为“命名实体提取器”
- en: Use [BootstrapCDN](https://www.bootstrapcdn.com/), copy-paste the [stylesheet](https://getbootstrap.com/docs/4.1/getting-started/introduction/) `<link>` into
    our `<head>`before all other stylesheets to load our CSS.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 [BootstrapCDN](https://www.bootstrapcdn.com/)，将 [stylesheet](https://getbootstrap.com/docs/4.1/getting-started/introduction/)
    `<link>` 复制粘贴到我们的 `<head>` 中，放在所有其他样式表之前，以加载我们的 CSS。
- en: Get Bootstrap’s navigation header, the navbar from [a template for a simple
    informational website](https://getbootstrap.com/docs/4.3/examples/jumbotron/#).
    It includes a large callout called a [jumbotron](https://getbootstrap.com/docs/4.0/components/jumbotron/) and
    three supporting pieces of content.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取 Bootstrap 的导航头部，从 [a template for a simple informational website](https://getbootstrap.com/docs/4.3/examples/jumbotron/#)
    获取 navbar。它包含一个称为 [jumbotron](https://getbootstrap.com/docs/4.0/components/jumbotron/)
    的大召唤框和三个支持内容。
- en: Copy-paste the [navbar](https://getbootstrap.com/docs/4.0/components/navbar/) code
    from the template’s [source code](http://view-source:https//getbootstrap.com/docs/4.3/examples/jumbotron/).
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从模板的 [source code](http://view-source:https//getbootstrap.com/docs/4.3/examples/jumbotron/)
    中复制粘贴 [navbar](https://getbootstrap.com/docs/4.0/components/navbar/) 代码。
- en: Bootstrap requires a container element to wrap site contents and house our grid
    system.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap 需要一个容器元素来包裹站点内容并容纳我们的网格系统。
- en: In our case, for the first container, we will create a vertical form with two
    input fields, one “Clear” button, and one “Submit” button.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的案例中，对于第一个容器，我们将创建一个垂直表单，其中包含两个输入字段，一个“清除”按钮和一个“提交”按钮。
- en: Textual form controls are styled with the `form-control` class.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本表单控件使用 `form-control` 类进行样式化。
- en: We are giving our users four taskoptions (a.k. a named entity extraction tasks)
    to choose from, they are: ***Organization***, ***Person***, ***Geopolitical*** & ***Money***.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为用户提供了四个任务选项（即命名实体提取任务），它们是：***Organization***，***Person***，***Geopolitical***
    和 ***Money***。
- en: The second container provides contextual feedback messages for our user’s action,
    that is the results of named entity extraction.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个容器为用户的操作提供上下文反馈消息，即命名实体提取的结果。
- en: Not only we want to print out named entity extraction results to our user, we
    also want to print out the number of results for each of named entity extractions.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们不仅希望将命名实体提取结果打印给用户，还希望打印每个命名实体提取的结果数量。
- en: Copy-paste the [JavaScript](https://getbootstrap.com/docs/4.1/getting-started/introduction/) in
    the `<script>`s near the end of our html page, right before the closing `</body>` tag,
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 [JavaScript](https://getbootstrap.com/docs/4.1/getting-started/introduction/)
    复制粘贴到我们 HTML 页面接近末尾的 `<script>` 标签中，紧接着闭合的 `</body>` 标签之前。
- en: '**app.py**'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**app.py**'
- en: Our `app.py` file is rather simple and easy to understand. It contains the main
    code that will be executed by the Python interpreter to run the Flask web application,
    it includes the spaCy code for recognizing named entities.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `app.py` 文件相当简单且易于理解。它包含将由 Python 解释器执行以运行 Flask Web 应用程序的主要代码，其中包括用于识别命名实体的
    spaCy 代码。
- en: We ran our app as a single module; thus we initialized a new Flask instance
    with the argument `__name__` to let Flask know that it can find the HTML template
    folder (`templates`) in the same directory where it is located.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将应用作为单一模块运行；因此，我们用参数 `__name__` 初始化了一个新的 Flask 实例，让 Flask 知道它可以在与自身所在目录相同的目录中找到
    HTML 模板文件夹（`templates`）。
- en: We use the route decorator (`@app.route('/')`) to specify the URL that should
    trigger the execution of the `index` function.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用路由装饰器（`@app.route('/')`）来指定应触发 `index` 函数执行的 URL。
- en: Our `index` function simply rendered the `index.html` HTML file, which is located
    in the `templates` folder.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的 `index` 函数简单地渲染了位于 `templates` 文件夹中的 `index.html` HTML 文件。
- en: Inside the `process` function, we apply nlp to the raw text user will enter,
    and extract pre-determined named entities (***Organization***, ***Person***, ***Geopolitical*** & ***Money***)
    from the raw text.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `process` 函数内部，我们对用户输入的原始文本应用 nlp，并从原始文本中提取预定的命名实体（***Organization***，***Person***，***Geopolitical***
    和 ***Money***）。
- en: We use the `POST` method to transport the form data to the server in the message
    body. Finally, by setting the `debug=True` argument inside the `app.run` method,
    we further activated Flask's debugger.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `POST` 方法将表单数据传输到服务器的消息体中。最后，通过在 `app.run` 方法中设置 `debug=True` 参数，我们进一步激活了
    Flask 的调试器。
- en: We use the `run` function to only run the application on the server when this
    script is directly executed by the Python interpreter, which we ensured using
    the `if` statement with` __name__ == '__main__'`.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `run` 函数仅在 Python 解释器直接执行此脚本时才运行应用程序，这通过使用 `if` 语句与 `__name__ == '__main__'`
    进行确保。
- en: We are almost there!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们快完成了！
- en: Try our API
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试我们的 API
- en: Start the ***Command Prompt*.**
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动 ***命令提示符*。
- en: Navigate to our ***Named-Entity-Extractor*** folder.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入我们的 ***命名实体提取器*** 文件夹。
- en: '![Figure](../Images/64bb7dcffead7af0d6de91d0cb17737c.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/64bb7dcffead7af0d6de91d0cb17737c.png)'
- en: Figure 5
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图5
- en: 'Open your Web browser, copy-paste “[http://127.0.0.1:5000/](http://127.0.0.1:5000/)”
    into the address bar, and we will see this form:'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开你的Web浏览器，将 “[http://127.0.0.1:5000/](http://127.0.0.1:5000/)” 粘贴到地址栏中，我们将看到这个表单：
- en: '![Figure](../Images/d4ef9a0f40e572fa1a51bea04c77bfde.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/d4ef9a0f40e572fa1a51bea04c77bfde.png)'
- en: Figure 6
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图6
- en: 'I copy-pasted a few paragraphs of an article from [nytimes](https://www.nytimes.com/2019/03/01/world/canada/trudeau-scandal-snc-lavalin.html),
    it is a Canadian story:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我从 [nytimes](https://www.nytimes.com/2019/03/01/world/canada/trudeau-scandal-snc-lavalin.html)复制粘贴了一些文章段落，这是一个加拿大故事：
- en: '![Figure](../Images/b2e2dd8f627bc6d86d5a2d258b4cc421.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/b2e2dd8f627bc6d86d5a2d258b4cc421.png)'
- en: Figure 7
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图7
- en: 'Select “***Organization***” under “Select task”, then click “Submit”, this
    is what we get:'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“选择任务”下选择“***Organization***”，然后点击“提交”，我们得到的是：
- en: '![Figure](../Images/790997a85dbe822e89de2695edd43287.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/790997a85dbe822e89de2695edd43287.png)'
- en: Figure 8
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图8
- en: 'Nice. Let’s try “***Person***” entity:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很好。让我们尝试“***Person***”实体：
- en: '![Figure](../Images/3a13f59dc8cfc3263caf0d394371f43b.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/3a13f59dc8cfc3263caf0d394371f43b.png)'
- en: Figure 9
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图9
- en: '“***Geopolitical***” entity:'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “***Geopolitical***”实体：
- en: '![Figure](../Images/a34c95635d45bceac6a497c5b6d382cc.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/a34c95635d45bceac6a497c5b6d382cc.png)'
- en: Figure 10
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10
- en: '“***Money***” entity:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “***Money***”实体：
- en: '![Figure](../Images/9010368909f99c58dccbbd0c57633cb6.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/9010368909f99c58dccbbd0c57633cb6.png)'
- en: Figure 11
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图11
- en: We are done!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 完成了！
- en: If you followed the above steps and made it here, congratulations! You have
    created a simple but functioning named entity extractor at zero cost! When you
    look back, there were only two files we need to create. and all we need are open
    source libraries and learning how to use them to create these two files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你按照以上步骤操作并达到了这里，恭喜你！你已经以零成本创建了一个简单但有效的命名实体提取器！回头看，我们只需要创建两个文件，所需的只是开源库和学习如何使用它们来创建这两个文件。
- en: By building an app like this, you have learned new skills and using these skills
    to creates something useful.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 通过构建这样的应用，你已经学会了新技能，并使用这些技能创造了有用的东西。
- en: The complete source code is available at this [repository](https://github.com/susanli2016/Named-Entity-Extractor).
    Happy Monday!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完整源代码可在这个 [代码库](https://github.com/susanli2016/Named-Entity-Extractor)找到。祝周一愉快！
- en: 'Reference:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：
- en: '**Bio: [Susan Li](https://www.linkedin.com/in/susanli/)** is changing the world,
    one article at a time. She is a Sr. Data Scientist, located in Toronto, Canada.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介： [Susan Li](https://www.linkedin.com/in/susanli/)** 正在通过一篇文章改变世界。她是位于加拿大多伦多的高级数据科学家。'
- en: '[Original](https://towardsdatascience.com/building-a-flask-api-to-automatically-extract-named-entities-using-spacy-2fd3f54ebbc6).
    Reposted with permission.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/building-a-flask-api-to-automatically-extract-named-entities-using-spacy-2fd3f54ebbc6)。经许可转载。'
- en: '**Related:**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[All you need to know about text preprocessing for NLP and Machine Learning](/2019/04/text-preprocessing-nlp-machine-learning.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你需要了解的关于NLP和机器学习的文本预处理](/2019/04/text-preprocessing-nlp-machine-learning.html)'
- en: '[Building NLP Classifiers Cheaply With Transfer Learning and Weak Supervision](/2019/03/building-nlp-classifiers-cheaply-transfer-learning-weak-supervision.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[利用迁移学习和弱监督廉价构建NLP分类器](/2019/03/building-nlp-classifiers-cheaply-transfer-learning-weak-supervision.html)'
- en: '[An Introduction on Time Series Forecasting with Simple Neural Networks & LSTM](/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[简单神经网络与LSTM时间序列预测介绍](/2019/04/introduction-time-series-forecasting-simple-neural-networks-lstm.html)'
- en: '* * *'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持你的组织进行IT工作'
- en: '* * *'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How You Can Use Machine Learning to Automatically Label Data](https://www.kdnuggets.com/2022/02/machine-learning-automatically-label-data.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何利用机器学习自动标记数据](https://www.kdnuggets.com/2022/02/machine-learning-automatically-label-data.html)'
- en: '[Creating a Web Application to Extract Topics from Audio with Python](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 创建一个从音频中提取主题的 Web 应用程序](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
- en: '[Getting Started with spaCy for NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 spaCy 进行 NLP 入门](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
- en: '[Natural Language Processing with spaCy](https://www.kdnuggets.com/2023/01/natural-language-processing-spacy.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 spaCy 的自然语言处理](https://www.kdnuggets.com/2023/01/natural-language-processing-spacy.html)'
- en: '[OpenAI’s Whisper API for Transcription and Translation](https://www.kdnuggets.com/2023/06/openai-whisper-api-transcription-translation.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI 的 Whisper API 用于转录和翻译](https://www.kdnuggets.com/2023/06/openai-whisper-api-transcription-translation.html)'
- en: '[Meet Gorilla: UC Berkeley and Microsoft’s API-Augmented LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[认识 Gorilla：加州大学伯克利分校和微软的 API 增强 LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
