- en: Containerize Python Apps with Docker in 5 Easy Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![docker-python](../Images/fa23a3561fe5db961cfd2c366069920d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: When building applications with Python, you’ll often run into dependency conflicts,
    version mismatches, and the like. With Docker, you can package applications—along
    with the required dependencies, runtime, and config—into a single portable artifact
    called the image. Which you can then use to spin up a Docker container that runs
    the app.
  prefs: []
  type: TYPE_NORMAL
- en: So whether it is a simple Python application or a data science application,
    Docker makes managing dependencies simpler. This is especially helpful in data
    science projects where you need different libraries and specific versions of 
    these libraries for your application to work without errors. With Docker you can
    have isolated, consistent, and reproducible environments for all your applications.
  prefs: []
  type: TYPE_NORMAL
- en: As a first step in this direction, let's learn how to containerize a Python
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Get Started'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, [install Docker](https://docs.docker.com/get-docker/) on the platform
    you use. You can run Docker on Windows, Linux, and MacOs. Here are a couple of
    things you may want to do after you've installed Docker on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Docker daemon binds to a Unix socket, owned by the `root` user by default.
    So you can access it only using `sudo`. To avoid prefixing all your docker commands
    with `sudo`, create a `docker` group add a user to the group like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: For newer versions of Docker, BuildKit is the default builder. If you're using
    an older version of Docker, however, you may get deprecation warnings when you
    run the `docker build` command. This is because the legacy build client will be
    deprecated in future releases. As a workaround, you can [install buildx](https://github.com/docker/buildx),
    a CLI tool to use BuildKit's capabilities. And use the `docker buildx build` command
    to build with BuildKit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Code Your Python Application'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, code a Python application which we can containerize using Docker. Here
    we’ll containerize a simple [command-line TO-DO list app](https://github.com/balapriyac/python-projects/blob/main/command-line-app/dockerize/todo.py).
    The code for this app is [on GitHub: todo.py file](http://todo.py).'
  prefs: []
  type: TYPE_NORMAL
- en: You can containerize any Python app of your choice or follow along with the
    example we use here. If you’re interested in a step-by-step tutorial on building
    the command-line TO-DO application, read [Build a Command-Line App with Python
    in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Create the Dockerfile'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we’ll create a Dockerfile. Think of it as a recipe that defines how to
    build the Docker image for the application. Create a file named `Dockerfile` in
    your working directory with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use Python 3.11 as the base image. We then set the working directory
    for all the following instructions with the `WORKDIR` command. We then use the
    `COPY` command to copy files from the project into the container’s file system.
  prefs: []
  type: TYPE_NORMAL
- en: Because we’re containerizing a command-line app, we specify the command to execute
    as `“/bin/bash”`. Which starts an interactive bash shell when we run the image
    and start a container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Build the Docker Image'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have our todo.py file and Dockerfile ready. Next, we can build the Docker
    image with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'With the `-t` option in the build command, you can specify both a name and
    a tag like so: `docker build -t name:tag .`'
  prefs: []
  type: TYPE_NORMAL
- en: This command builds a Docker image named `todo-app` based on the instructions
    in the `Dockerfile`. The `.` at the end specifies that the build context is the
    current directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build takes a couple of minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 5: Run Your Docker Container'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the image is built, you can start a Docker container from the built image
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-it` option is a combination of `-i` and `-t`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `-i` option is used to run containers interactively and keeps STDIN open
    even if not attached.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `-t` option allocates a pseudo-TTY. So it provides a terminal interface
    within the container that you can interact with.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, our TO-DO app runs inside the Docker container, and we can interact with
    it at the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And there you have it! You've successfully containerized a command-line Python
    application using Docker. In this tutorial, we looked at containerizing a simple
    Python application using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: We built this application in Python without using any external Python libraries.
    So we did not define a requirements.txt file. The requirements.txt file usually
    lists the various libraries and their versions, which you can install using a
    simple `pip install` command. If you want a tutorial that focuses on Docker for
    data science, check out [Docker Tutorial for Data Scientists](https://www.kdnuggets.com/2023/07/docker-tutorial-data-scientists.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Vector Databases and Vector Indexes: Architecting LLM Apps](https://www.kdnuggets.com/2023/08/python-vector-databases-vector-indexes-architecting-llm-apps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beginner’s Guide to Building LLM Apps with Python](https://www.kdnuggets.com/beginners-guide-to-building-llm-apps-with-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easy Guide To Data Preprocessing In Python](https://www.kdnuggets.com/2020/07/easy-guide-data-preprocessing-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tick-Tock: Using Pendulum For Easy Date And Time Management In Python](https://www.kdnuggets.com/tick-tock-using-pendulum-for-easy-date-and-time-management-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
