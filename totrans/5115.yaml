- en: A Step by Step Guide to Reading and Understanding SQL Queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![A Step by Step Guide to Reading and Understanding SQL Queries](../Images/544a9ec01d27f3a9db6a4caadd97b5fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Freepik](https://www.freepik.com/free-vector/abstract-technology-sql-illustration_21743439.htm#query=sql%20query&position=0&from_view=search&track=ais&uuid=a7fa0c7e-00e4-42b2-9e13-3ea486e88a3e)
  prefs: []
  type: TYPE_NORMAL
- en: SQL, or Structured Query Language, is a programming language for managing and
    manipulating data within a relational database management system (RDBMS). It’s
    a standard language used in many companies to help businesses access data smoothly.
    Because it’s widely used, the employment usually cites SQL as one of the necessary
    skills. That’s why it’s essential to learn about SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: One of the common problems for people when learning SQL is understanding the
    queries, mainly when another person writes them. We would work as a team in the
    companies and often need to read and understand their SQL queries. So, we need
    to practice deconstructing the SQL queries and understand them.
  prefs: []
  type: TYPE_NORMAL
- en: This article will walk through a step-by-step process to read and understand
    SQL queries. How do we do that? Let’s get into it.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Understand the General SQL Query Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we need to do when encountering an SQL query is to understand
    the general intention of the SQL queries. The general intention doesn’t mean we
    know entirely about the query's structure; it’s more about the overall flows.
  prefs: []
  type: TYPE_NORMAL
- en: We should understand the standard SQL queries to understand the general SQL
    query.  Most SQL queries start with the ***SELECT*** clause and follow with the
    ***FROM*** clause. Continuing from there, the queries are most often followed
    by ***JOIN***, ***WHERE***, ***GROUP BY***, ***ORDER BY,*** and ***HAVING*** clauses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The clauses above are standard in the SQL queries we need to understand. For
    each clause, their functions are:'
  prefs: []
  type: TYPE_NORMAL
- en: '***SELECT***: What columns are to be taken from the table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***FROM***: Which table the data came from'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***JOIN***: Combine tables with the specified identifier'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***WHERE***: Data filter based on the condition'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***GROUP BY***: Organize the data based on the column''s value and allow aggregation
    function to be performed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***ORDER BY***: Arrange the data result order based on the specific column'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***HAVING***: The filter condition for aggregation function that cannot be
    specified with ***WHERE***'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These are the standard clauses and what you should find in the beginning when
    understanding the general SQL query structure. Let’s use the example code to learn
    further.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When you look at the query above, try to identify the standard clauses. The
    clause would provide you with an understanding of what data are selected (***SELECT***),
    where it is from (***FROM*** and ***JOIN***), and the condition (***WHERE***,
    ***GROUP BY***, ***ORDER BY***, and ***HAVING***).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, reading the query above would provide you understanding of the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'we try to get three different kinds of data: the Name from a table called customers,
    the Product from a table called purchases, and the aggregation of price columns
    that do not identify where the table is from and with the alias total_price (Information
    from clause **SELECT**).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The overall data would come from purchases and customers tables that join together
    using the cust_id column from purchases and the id column from the customer's
    table (Information from clause ***FROM)*** and ***JOIN***).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We would only select the data with the category column value in the purchases
    table as ‘kitchen’ (Information from clause **WHERE**),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: group for the aggregation function with the name and product column that came
    from the respective table (Information from clause **GROUP BY**),
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: filtered as well from the aggregation function result sum where the total_price
    is more than 10000 (information from clause ***HAVING***), and
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: order the data descending according to the total_price (information from clause
    **ORDER BY**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s the general SQL query structure you need to know and identify. From there,
    we can explore further from the advanced query. Let’s get on with the next step.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Understand the Final Select
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There would be a time when you would encounter a complex query where so many
    ***SELECT*** clauses exist in the same query. In this case, we should understand
    the final result of the query or the final (first) ***SELECT*** you see in the
    query. The key is to know what the query output wants to be.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use a more complex code like the one below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The query seems more complex and longer now, but the initial focus should be
    on the final ***SELECT,*** which seems to try to produce the customer’s total
    spending and purchase history. Try to assess what the final result wants to be
    and break it down from there.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Understand the Final Conditions Clause
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have the insight of the result should be from the queries. The next part
    is to see what the conditions for the final ***SELECT*** are. The conditions clause,
    including ***WHERE***, ***GROUP BY***, ***ORDER BY***, and ***HAVING*** were the
    ones that controlled the overall data result.
  prefs: []
  type: TYPE_NORMAL
- en: Try to read and understand our query's conditions, and we will better understand
    our query's final result. For example, in our previous SQL query, the final condition
    is only the ***ORDER BY***. This means the final result would be ordered by the
    total product price in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing the final conditions would help you understand a significant part of
    the query and the overall query intention.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Understand the Final Join
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lastly, we need to understand where the data comes from. After we know about
    the data to select and the conditions to get them, we need to understand the source.
    The final ***JOIN*** clause would give us an understand of how the tables interact
    and the data flow.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the previous complex query shows that we performed Join twice.
    It means we used at least three data sources for the final result. This information
    would be necessary in the later steps to understand further how each data source
    comes by, especially when the data source is coming from the subquery.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Reverse Order Reading and Repeat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After understanding how the final result should be and where it comes from,
    we need to look closer at the details. From here, we would backtrack into each
    subqueries and understand why they are structured like that.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, we don’t try to look at them in the top-down structures. Instead,
    we should try to look at the subqueries that are closer to the final result, and
    we move up to the one furthest from the final result. From the code example above,
    we should try to understand this code first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we are moving to the furthest code which is this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We can track down the author's thought process clearly when we break down each
    subquery from the one closer to the result to the furthest.
  prefs: []
  type: TYPE_NORMAL
- en: Try to repeat the process above if you need help understanding each subquery.
    With some practice, you will have a better experience in reading and understanding
    the query.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Reading and understanding SQL queries is a skill that everyone should have
    in the modern era, as every company deals with them. By using the following step-by-step
    guide, you would have a better time to understand the complex SQL queries. The
    steps include:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the General SQL Query Structure
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understand the Final Select
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understand the Final Conditions Clause
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understand the Final Join
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reverse Order Reading and Repeat
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**[Cornellius Yudha
    Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**** is a data science
    assistant manager and data writer. While working full-time at Allianz Indonesia,
    he loves to share Python and data tips via social media and writing media. Cornellius
    writes on a variety of AI and machine learning topics.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Breaking Down DENSE_RANK(): A Step-by-Step Guide for SQL Enthusiasts](https://www.kdnuggets.com/breaking-down-denserank-a-step-by-step-guide-for-sql-enthusiasts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Guide On How To Become A Data Scientist (Step By Step Approach)](https://www.kdnuggets.com/2021/05/guide-become-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Structure a Data Science Project: A Step-by-Step Guide](https://www.kdnuggets.com/2022/05/structure-data-science-project-stepbystep-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text-2-Video Generation: Step-by-Step Guide](https://www.kdnuggets.com/2023/08/text2video-generation-stepbystep-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
