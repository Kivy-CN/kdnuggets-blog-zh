["```py\n# imports\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_wine\nfrom sklearn.preprocessing import MinMaxScaler\nfrom scipy.cluster.hierarchy import dendrogram, linkage\n```", "```py\n# Load the dataset\ndata = load_wine()\nX = data.data\n\n# Convert to DataFrame\nwine_df = pd.DataFrame(X, columns=data.feature_names)\n```", "```py\nwine_df.head()\n```", "```py\nprint(wine_df.shape)\n```", "```py\nOutput >>> (178, 14)\n```", "```py\n# Scale the features using MinMaxScaler\nscaler = MinMaxScaler()\nX_scaled = scaler.fit_transform(X)\n```", "```py\n# Calculate linkage matrix\nlinked = linkage(X_scaled, method='ward')\n\n# Plot dendrogram\nplt.figure(figsize=(10, 6),dpi=200)\ndendrogram(linked, orientation='top', distance_sort='descending', show_leaf_counts=True)\nplt.title('Dendrogram')\nplt.xlabel('Samples')\nplt.ylabel('Distance')\nplt.show()\n```", "```py\n# Calculate linkage matrix\nlinked = linkage(X_scaled, method='ward')\n\n# Plot dendrogram\nplt.figure(figsize=(10, 6),dpi=200)\ndendrogram(linked, orientation='top', distance_sort='descending', truncate_mode='level', p=3, show_leaf_counts=True)\nplt.title('Dendrogram')\nplt.xlabel('Samples')\nplt.ylabel('Distance')\nplt.show()\n```", "```py\nfrom scipy.cluster.hierarchy import fcluster\n\n# Choose a threshold distance based on the dendrogram\nthreshold_distance = 3.5  \n\n# Cut the dendrogram to get cluster labels\ncluster_labels = fcluster(linked, threshold_distance, criterion='distance')\n\n# Assign cluster labels to the DataFrame\nwine_df['cluster'] = cluster_labels\n```", "```py\nprint(wine_df['cluster'])\n```", "```py\nOutput >>>\n0      2\n1      2\n2      2\n3      2\n4      3\n      ..\n173    1\n174    1\n175    1\n176    1\n177    1\nName: cluster, Length: 178, dtype: int32\n```", "```py\nplt.figure(figsize=(8, 6))\n\nscatter = plt.scatter(wine_df['alcohol'], wine_df['flavanoids'], c=wine_df['cluster'], cmap='rainbow')\nplt.xlabel('Alcohol')\nplt.ylabel('Flavonoids')\nplt.title('Visualizing the clusters')\n\n# Add legend\nlegend_labels = [f'Cluster {i + 1}' for i in range(n_clusters)]\nplt.legend(handles=scatter.legend_elements()[0], labels=legend_labels)\n\nplt.show()\n```"]