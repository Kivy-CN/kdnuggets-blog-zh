- en: 'fastcore: An Underrated Python Library'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/10/fastcore-underrated-python-library.html](https://www.kdnuggets.com/2020/10/fastcore-underrated-python-library.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Hamel Husain](https://hamel.dev/), Staff Machine Learning Engineer at
    GitHub**'
  prefs: []
  type: TYPE_NORMAL
- en: '![screenshot with code](../Images/bc8b7c0e278bb807e36cc708a9ab4dad.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*I recently embarked on a journey to sharpen my python skills: I wanted to
    learn advanced patterns, idioms, and techniques. I started with reading books
    on advanced Python, however, the information didn''t seem to stick without having
    somewhere to apply it. I also wanted the ability to ask questions from an expert
    while I was learning -- which is an arrangement that is hard to find! That''s
    when it occurred to me: What if I could find an open source project that has fairly
    advanced python code and write documentation and tests? I made a bet that if I
    did this it would force me to learn everything very deeply, and the maintainers
    would be appreciative of my work and be willing to answer my questions.'
  prefs: []
  type: TYPE_NORMAL
- en: And that's exactly what I did over the past month! I'm pleased to report that
    it has been the most efficient learning experience I've ever experienced. I've
    discovered that writing documentation forced me to deeply understand not just
    what the code does but also *why the code works the way it does*, and to explore
    edge cases while writing tests. Most importantly, I was able to ask questions
    when I was stuck, and maintainers were willing to devote extra time knowing that
    their mentorship was in service of making their code more accessible! It turns
    out the library I choose, [fastcore](https://fastcore.fast.ai/) is some of the
    most fascinating Python I have ever encountered as its purpose and goals are fairly
    unique.
  prefs: []
  type: TYPE_NORMAL
- en: For the uninitiated, [fastcore](https://fastcore.fast.ai/) is a library on top
    of which many [fast.ai](https://github.com/fastai) projects are built on. Most
    importantly, [fastcore](https://fastcore.fast.ai/) extends the python programming
    language and strives to eliminate boilerplate and add useful functionality for
    common tasks. In this blog post, I'm going to highlight some of my favorite tools
    that fastcore provides, rather than sharing what I learned about python. My goal
    is to pique your interest in this library, and hopefully motivate you to check
    out the documentation after you are done to learn more!
  prefs: []
  type: TYPE_NORMAL
- en: Why fastcore is interesting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*1.  **Get exposed to ideas from other languages without leaving python:** I’ve
    always heard that it is beneficial to learn other languages in order to become
    a better programmer. From a pragmatic point of view, I’ve found it difficult to
    learn other languages because I could never use them at work. Fastcore extends
    python to include patterns found in languages as diverse as Julia, Ruby and Haskell.
    Now that I understand these tools I am motivated to learn other languages.'
  prefs: []
  type: TYPE_NORMAL
- en: '**You get a new set of pragmatic tools**: fastcore includes utilities that
    will allow you to write more concise expressive code, and perhaps solve new problems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Learn more about the Python programming language:** Because fastcore extends
    the python programming language, many advanced concepts are exposed during the
    process. For the motivated, this is a great way to see how many of the internals
    of python work.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A whirlwind tour through fastcore
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Here are some things you can do with fastcore that immediately caught my attention.'
  prefs: []
  type: TYPE_NORMAL
- en: Making **kwargs transparent
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Whenever I see a function that has the argument ****kwargs**, I cringe a little.
    This is because it means the API is obfuscated and I have to read the source code
    to figure out what valid parameters might be. Consider the below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Without reading the source code, it might be hard for me to know that `foo` also
    accepts and additional parameters `b` and `d`. We can fix this with `delegates`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You can customize the behavior of this decorator. For example, you can have
    your cake and eat it too by passing down your arguments and also keeping `**kwargs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also exclude arguments. For example, we exclude argument `d` from delegation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also delegate between classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: For more information, read the [docs on delegates](https://fastcore.fast.ai/foundation.html#delegates).
  prefs: []
  type: TYPE_NORMAL
- en: Avoid boilerplate when setting instance attributes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Have you ever wondered if it was possible to avoid the boilerplate involved
    with setting attributes in `__init__`?'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Ouch! That was painful. Look at all the repeated variable names. Do I really
    have to repeat myself like this when defining a class? Not Anymore! Checkout [store_attr](https://fastcore.fast.ai/utils.html#store_attr):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also exclude certain attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: There are many more ways of customizing and using `store_attr` than I highlighted
    here. Check out [the docs](https://fastcore.fast.ai/utils.html#store_attr) for
    more detail.
  prefs: []
  type: TYPE_NORMAL
- en: P.S. you might be thinking that Python [dataclasses](https://docs.python.org/3/library/dataclasses.html) also
    allow you to avoid this boilerplate. While true in some cases, `store_attr` is
    more flexible.^([1](https://fastpages.fast.ai/fastcore/#fn-1))
  prefs: []
  type: TYPE_NORMAL
- en: 1\. For example, store_attr does not rely on inheritance, which means you won't
    get stuck using multiple inheritance when using this with your own classes. Also,
    unlike dataclasses, store_attr does not require python 3.7 or higher. Furthermore,
    you can use store_attr anytime in the object lifecycle, and in any location in
    your class to customize the behavior of how and when variables are stored.[↩](https://fastpages.fast.ai/fastcore/#fnref-1)
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding subclassing boilerplate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*One thing I hate about python is the `__super__().__init__()` boilerplate
    associated with subclassing. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can avoid this boilerplate by using the metaclass [PrePostInitMeta](https://fastcore.fast.ai/foundation.html#PrePostInitMeta).
    We define a new class called `NewParent` that is a wrapper around the `ParentClass`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Type Dispatch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Type dispatch, or [Multiple dispatch](https://en.wikipedia.org/wiki/Multiple_dispatch#Julia),
    allows you to change the way a function behaves based upon the input types it
    receives. This is a prominent feature in some programming languages like Julia.
    For example, this is a [conceptual example](https://en.wikipedia.org/wiki/Multiple_dispatch#Julia) of
    how multiple dispatch works in Julia, returning different values depending on
    the input types of x and y:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Type dispatch can be especially useful in data science, where you might allow
    different input types (i.e. Numpy arrays and Pandas dataframes) to a function
    that processes data. Type dispatch allows you to have a common API for functions
    that do similar tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, Python does not support this out-of-the box. Fortunately, there
    is the [@typedispatch](https://fastcore.fast.ai/dispatch.html#typedispatch-Decorator) decorator
    to the rescue. This decorator relies upon type hints in order to route inputs
    the correct version of the function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Below is a demonstration of type dispatch at work for the function `f`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: There are limitations of this feature, as well as other ways of using this functionality
    that [you can read about here](https://fastcore.fast.ai/dispatch.html). In the
    process of learning about typed dispatch, I also found a python library called [multipledispatch](https://github.com/mrocklin/multipledispatch) made
    by [Mathhew Rocklin](https://github.com/mrocklin) (the creator of Dask).
  prefs: []
  type: TYPE_NORMAL
- en: After using this feature, I am now motivated to learn languages like Julia to
    discover what other paradigms I might be missing.
  prefs: []
  type: TYPE_NORMAL
- en: A better version of functools.partial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`functools.partial` is a great utility that creates functions from other functions
    that lets you set default values. Lets take this function for example that filters
    a list to only contain values >= `val`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create a new function out of this function using `partial` that sets
    the default value to 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'One problem with `partial` is that it removes the original docstring and replaces
    it with a generic docstring:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[fastcore.utils.partialler](https://fastcore.fast.ai/utils.html#partialler) fixes
    this, and makes sure the docstring is retained such that the new API is transparent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Composition of functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*A technique that is pervasive in functional programming languages is function
    composition, whereby you chain a bunch of functions together to achieve some kind
    of result. This is especially useful when applying various data transformations.
    Consider a toy example where I have three functions: (1) Removes elements of a
    list less than 5 (from the prior section) (2) adds 2 to each number (3) sums all
    the numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'But why is this useful? You might me thinking, I can accomplish the same thing
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You are not wrong! However, composition gives you a convenient interface in
    case you want to do something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: For more information about `compose`, read [the docs](https://fastcore.fast.ai/utils.html#compose).
  prefs: []
  type: TYPE_NORMAL
- en: A more useful `__repr__`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*In python, `__repr__` helps you get information about an object for logging
    and debugging. Below is what you get by default when you define a new class. (Note:
    we are using `store_attr`, which was discussed earlier).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use [basic_repr](https://fastcore.fast.ai/utils.html#basic_repr) to
    quickly give us a more sensible default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Monkey Patching With A Decorator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*It can be convenient to [monkey patch](https://www.geeksforgeeks.org/monkey-patching-in-python-dynamic-behavior/) with
    a decorator, which is especially helpful when you want to patch an external library
    you are importing. We can use the [decorator @patch](https://fastcore.fast.ai/foundation.html#patch) from `fastcore.foundation` along
    with type hints like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `MyClass` has an additional method named `func`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Still not convinced? I'll show you another example of this kind of patching
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: A better pathlib.Path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*When you see [these extensions](https://fastcore.fast.ai/utils.html#Extensions-to-Pathlib.Path) to
    pathlib.path you won''t ever use vanilla pathlib again! A number of additional
    methods have been added to pathlib, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Path.readlines`: same as `with open(''somefile'', ''r'') as f: f.readlines()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Path.read`: same as `with open(''somefile'', ''r'') as f: f.read()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Path.save`: saves file as pickle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Path.load`: loads pickle file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Path.ls`: shows the contents of the path as a list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Read more about this here](https://fastcore.fast.ai/utils.html#Extensions-to-Pathlib.Path).
    Here is a demonstration of `ls`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait! What''s going on here? We just imported `pathlib.Path` - why are we getting
    this new functionality? Thats because we imported the `fastcore.utils` module,
    which patches this module via the `@patch` decorator discussed earlier. Just to
    drive the point home on why the `@patch` decorator is useful, I''ll go ahead and
    add another method to `Path` right now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: That is magical, right? I know! That's why I'm writing about it!
  prefs: []
  type: TYPE_NORMAL
- en: An Even More Concise Way To Create Lambdas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*`Self`, with an uppercase S, is an even more concise way to create lambdas
    that are calling methods on an object. For example, let''s create a lambda for
    taking the sum of a Numpy array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'You can use `Self` in the same way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a lambda that does a groupby and max of a Pandas dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '|  | Another Column |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Some Column |  |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| a | 6 |'
  prefs: []
  type: TYPE_TB
- en: '| b | 60 |'
  prefs: []
  type: TYPE_TB
- en: Read more about `Self` in [the docs](https://fastcore.fast.ai/utils.html#Self-(with-an-uppercase-S)).
  prefs: []
  type: TYPE_NORMAL
- en: Notebook Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*These are simple but handy, and allow you to know whether or not code is executing
    in a Jupyter Notebook, Colab, or an Ipython Shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This is useful if you are displaying certain types of visualizations, progress
    bars or animations in your code that you may want to modify or toggle depending
    on the environment.
  prefs: []
  type: TYPE_NORMAL
- en: A Drop-In Replacement For List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*You might be pretty happy with Python''s `list`. This is one of those situations
    that you don''t know you needed a better list until someone showed one to you.
    Enter `L`, a list like object with many extra goodies.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way I can describe `L` is to pretend that `list` and `numpy` had a
    pretty baby:'
  prefs: []
  type: TYPE_NORMAL
- en: define a list (check out the nice `__repr__` that shows the length of the list!)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Shuffle a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Index into a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'L has sensible defaults, for example appending an element to a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: There is much more `L` has to offer. Read [the docs](https://fastcore.fast.ai/foundation.html#Class-L-Methods) to
    learn more.
  prefs: []
  type: TYPE_NORMAL
- en: But Wait ... There's More!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*![](../Images/df633329da955c1492c3d331c612e2aa.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are more things I would like to show you about fastcore, but there is
    no way they would reasonably fit into a blog post. Here is a list of some of my
    favorite things that I didn''t demo in this blog post:'
  prefs: []
  type: TYPE_NORMAL
- en: Utilities
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The [Utilites](https://fastcore.fast.ai/utils.html) section contain many shortcuts
    to perform common tasks or provide an additional interface to what standard python
    provides.'
  prefs: []
  type: TYPE_NORMAL
- en: '[mk_class](https://fastcore.fast.ai/utils.html#mk_class): quickly add a bunch
    of attributes to a class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[wrap_class](https://fastcore.fast.ai/utils.html#wrap_class): add new methods
    to a class with a simple decorator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[groupby](https://fastcore.fast.ai/utils.html#groupby): similar to Scala''s
    groupby'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[merge](https://fastcore.fast.ai/utils.html#merge): merge dicts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[fasttuple](https://fastcore.fast.ai/utils.html#fastuple): a tuple on steroids'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Infinite Lists](https://fastcore.fast.ai/utils.html#Infinite-Lists): useful
    for padding and testing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[chunked](https://fastcore.fast.ai/utils.html#chunked): for batching and organizing
    stuff'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiprocessing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The [Multiprocessing section](http://fastcore.fast.ai/utils.html#Multiprocessing) extends
    python''s multiprocessing library by offering features like:'
  prefs: []
  type: TYPE_NORMAL
- en: progress bars
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ability to pause to mitigate race conditions with external services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'processing things in batches on each worker, ex: if you have a vectorized operation
    to perform in chunks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional Programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*The [functional programming section](http://fastcore.fast.ai/utils.html#Functions-on-Functions) is
    my favorite part of this library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[maps](https://fastcore.fast.ai/utils.html#maps): a map that also composes
    functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[mapped](https://fastcore.fast.ai/utils.html#mapped): A more robust `map`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[using_attr](https://fastcore.fast.ai/utils.html#using_attr): compose a function
    that operates on an attribute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*[Transforms](https://fastcore.fast.ai/transform.html) is a collection of utilities
    for creating data transformations and associated pipelines. These transformation
    utilities build upon many of the building blocks discussed in this blog post.'
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '***It should be noted that you should read the [main page of the docs](https://fastcore.fast.ai/) first,
    followed by the section on [tests](https://fastcore.fast.ai/) to fully understand
    the documentation.**'
  prefs: []
  type: TYPE_NORMAL
- en: The [fastcore documentation site](https://fastcore.fast.ai/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The [fastcore GitHub repo](https://github.com/fastai/fastcore).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blog post on [delegation](https://www.fast.ai/2019/08/06/delegation/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shameless plug: fastpages'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*This blog post was written entirely in a Jupyter Notebook, which GitHub automatically
    converted into to a blog post! Sound interesting? [Check out fastpages](https://github.com/fastai/fastpages).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Hamel Husain](https://hamel.dev/)** is a Staff Machine Learning Engineer
    @ GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://fastpages.fast.ai/fastcore/). Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Data Science Meets Devops: MLOps with Jupyter, Git, and Kubernetes](/2020/08/data-science-meets-devops-mlops-jupyter-git-kubernetes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Automate Tasks on GitHub With Machine Learning for Fun and Profit](/2019/05/automate-tasks-github-machine-learning-fun-profit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automated Machine Learning — A Paradigm Shift That Accelerates Data Scientist
    Productivity](/2017/07/automated-machine-learning-paradigm-shift.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)**********************'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
