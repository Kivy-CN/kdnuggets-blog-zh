- en: Deploy a Machine Learning Pipeline to the Cloud Using a Docker Container
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/06/deploy-machine-learning-pipeline-cloud-docker.html](https://www.kdnuggets.com/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5349163e540ab0ae4854ac1f9ff52edd.png)'
  prefs: []
  type: TYPE_IMG
- en: '**RECAP**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our [last post](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99),
    we demonstrated how to develop a machine learning pipeline and deploy it as a
    web app using PyCaret and Flask framework in Python. If you haven’t heard about
    PyCaret before, please read this [announcement](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46) to
    learn more.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will use the same machine learning pipeline and Flask app
    that we built and deployed previously. This time we will demonstrate how to deploy
    a machine learning pipeline as a web app using the [Microsoft Azure Web App Service](https://azure.microsoft.com/en-us/services/app-service/web/).
  prefs: []
  type: TYPE_NORMAL
- en: In order to deploy a machine learning pipeline on Microsoft Azure, we will have
    to containerize our pipeline in a software called **“Docker”**. If you don’t know
    what does containerize means, *no problem* — this tutorial is all about that.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Learning Goals of this Tutorial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is a container? What is Docker? and why do we need it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a Docker file on your local computer and publish it into [Azure Container
    Registry (ACR)](https://azure.microsoft.com/en-us/services/container-registry/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy a web service on Azure using the container we uploaded into ACR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See a web app in action that uses a trained machine learning pipeline to predict
    on new data points in real-time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our last post, we covered the basics of model deployment and why it is needed.
    If you would like to learn more about model deployment, [click here](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99) to
    read our last article.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will cover the entire workflow of building a container locally
    to pushing it onto Azure Container Registry and then deploying our pre-trained
    machine learning pipeline and Flask app onto Azure Web Services.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d36fc51994d651c09f77854c9f90fa8f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'WORKFLOW: Create an image → Build container locally → Push to ACR → Deploy
    app on cloud'
  prefs: []
  type: TYPE_NORMAL
- en: ???? Toolbox for this tutorial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**PyCaret**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PyCaret](https://www.pycaret.org/) is an open source, low-code machine learning
    library in Python that is used to train and deploy machine learning pipelines
    and models into production. PyCaret can be installed easily using pip.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Flask**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Flask](https://flask.palletsprojects.com/en/1.1.x/) is a framework that allows
    you to build web applications. A web application can be a commercial website,
    blog, e-commerce system, or an application that generates predictions from data
    provided in real-time using trained models. If you don’t have Flask installed,
    you can use pip to install it.'
  prefs: []
  type: TYPE_NORMAL
- en: '****Docker****'
  prefs: []
  type: TYPE_NORMAL
- en: '[Docker](https://www.docker.com/)is a tool designed to make it easier to create,
    deploy, and run applications by using containers. Containers are used to package
    up an application with all of its necessary components, such as libraries and
    other dependencies, and ship it all out as one package. If you haven’t used docker
    before, this tutorial also covers the installation of docker on Windows 10.'
  prefs: []
  type: TYPE_NORMAL
- en: '****Microsoft Azure****'
  prefs: []
  type: TYPE_NORMAL
- en: '[Microsoft Azure](https://azure.microsoft.com/en-ca/overview/what-is-azure/) is
    a set of cloud services that is used to build, manage and deploy applications
    on a massive and global network. Other cloud services that are often used for
    deploying ML pipelines are [Amazon Web Services (AWS)](https://aws.amazon.com/), [Google
    Cloud](https://cloud.google.com/), [IBM Cloud](https://www.ibm.com/cloud) and [Alibaba
    Cloud](https://www.alibabacloud.com/). We will cover most of them in our future
    tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t used Microsoft Azure before you can [sign up](https://azure.microsoft.com/en-ca/free/search/?&ef_id=EAIaIQobChMIm8Onqp6i6QIViY7ICh2QVA2jEAAYASAAEgK9FvD_BwE:G:s&OCID=AID2000061_SEM_EAIaIQobChMIm8Onqp6i6QIViY7ICh2QVA2jEAAYASAAEgK9FvD_BwE:G:s&dclid=CK6R8aueoukCFVbJyAoduGYLcQ) for
    a free account here. When you sign up for the first time you get a free credit
    for the first 30 days. You can utilize that credit in building your own web app
    by following this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Container and why do we need it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you ever had the problem where your python code (*or any other code*) works
    fine on your computer but when your friend tries to run the exact same code, it
    doesn’t work? If your friend is repeating the exact same steps, they should get
    the same results right? The one-word answer to this is ***the environment*. **Your
    friend’s Python environment is different than yours.
  prefs: []
  type: TYPE_NORMAL
- en: What does an environment include? → Python (*or any other language you have
    used*) and all the libraries and dependencies with the exact versions using which
    application was built and tested.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we can somehow create an environment that we can transfer to other machines
    (for example: your friend’s computer or a cloud service provider like Microsoft
    Azure), we can reproduce the results anywhere.'
  prefs: []
  type: TYPE_NORMAL
- en: Hence, **a** **container **is a type of software that packages up an application
    and all its dependencies so the application runs reliably from one computing environment
    to another.
  prefs: []
  type: TYPE_NORMAL
- en: “Think about **containers, **when you think about containers.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Figure](../Images/cdba43a7a6535b917ba7ad58a0bb936b.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://www.freepik.com/free-photos-vectors/cargo-ship](https://www.freepik.com/free-photos-vectors/cargo-ship)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the most intuitive way to understand containers in data science. **They
    are just like containers on a ship **where the goal is to isolate the *contents *of
    one container from the others so they don’t get mixed up. This is exactly what
    containers are used for in data science.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the metaphor behind containers, let’s look at alternate
    options for creating an isolated environment for our application. One simple alternative
    is to have a separate machine for each of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: (1 machine = 1 application = no conflict = everything is good)
  prefs: []
  type: TYPE_NORMAL
- en: Using a separate machine is straight forward but it doesn’t outweigh the benefits
    of using containers since maintaining multiple machines for each application is
    expensive, a nightmare-to-maintain and hard-to-scale. In short, it’s not practical
    in many real-life scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: Another alternate for creating an isolated environment are **virtual machines. **Containers
    are again preferable here because they require fewer resources, are very portable,
    and are faster to spin up.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/154947460cf6ccd317e662a3c46f5b36.png)'
  prefs: []
  type: TYPE_IMG
- en: Virtual Machines vs. Containers
  prefs: []
  type: TYPE_NORMAL
- en: Can you spot the difference between Virtual Machines and Containers? When you
    use containers, you do not require guest operating systems. Imagine 10 applications
    running on a virtual machine. This would require 10 guest operating systems compared
    to none required when you use containers.
  prefs: []
  type: TYPE_NORMAL
- en: I understand containers but what is Docker?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Docker is a company that provides software (also called Docker) that allows
    users to build, run and manage containers. While Docker’s container are the most
    common, there are other less famous *alternatives* such as [LXD](https://linuxcontainers.org/lxd/introduction/) and [LXC](https://linuxcontainers.org/) that
    provides container solution.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will use **Docker Desktop for Windows **to create a container
    that we will publish on Azure Container Registry. We will then deploy a web app
    using that container.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1f2d661aa18345bf13d584bc5d593e19.png)'
  prefs: []
  type: TYPE_IMG
- en: Docker Image vs. Docker Container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is the difference between a docker image and a docker container? This is
    by far the most common question asked so let’s clear this right away. There are
    many technical definitions available, however, it is intuitive to think about
    a docker image as a mold based on which container is created. An image is essentially
    a snapshot of container.
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer a slightly more technical definition then consider this: Docker
    images become containers at runtime when they run on a Docker Engine.
  prefs: []
  type: TYPE_NORMAL
- en: '**Breaking the hype:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At the end of the day, docker is just a file with a few lines of instructions
    that are saved under your project folder with the name ***“Dockerfile”***.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to think about docker file is that they are like recipes you have
    invented in your own kitchen. When you share those recipes with somebody else
    and they follow the exact same instructions, they are able to produce the same
    dish. Similarly, you can share your docker file with other people, who can then
    create images and run containers based on that docker file.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you understand containers, docker and why we should use them, let’s
    quickly set the business context.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the Business Context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An insurance company wants to improve its cash flow forecasting by better predicting
    patient charges using demographic and basic patient health risk metrics at the
    time of hospitalization.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/3638fa2bffed356be35c42d85a72bc00.png)'
  prefs: []
  type: TYPE_IMG
- en: '*(*[*data source*](https://www.kaggle.com/mirichoi0218/insurance#insurance.csv)*)*'
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To build and deploy a web application where the demographic and health information
    of a patient is entered into a web-based form which then outputs a predicted charge
    amount.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Train and develop a machine learning pipeline for deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a web app using Flask framework. It will use the trained ML pipeline to
    generate predictions on new data points in real-time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a docker image and container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish the container onto Azure Container Registry (ACR).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploy the web app in the container by publishing onto ACR. Once deployed, it
    will become publicly available and can be accessed via a Web URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since we have already covered the first two tasks in our last tutorial, we will
    quickly recap them and focus on the remaining tasks in the list above. If you
    are interested in learning more about developing machine learning pipeline in
    Python using PyCaret and building a web app using Flask framework, you can read
    our [last tutorial](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99).
  prefs: []
  type: TYPE_NORMAL
- en: ???? Develop Machine Learning Pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We are using PyCaret in Python for training and developing a machine learning
    pipeline which will be used as part of our web app. The Machine Learning Pipeline
    can be developed in an Integrated Development Environment (IDE) or Notebook. We
    have used a notebook to run the below code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you save a model in PyCaret, the entire transformation pipeline based
    on the configuration defined in the **setup() **function is created . All inter-dependencies
    are orchestrated automatically. See the pipeline and model stored in the ‘deployment_28042020’
    variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/e083836af4d5fa14164ce9cc5be82f4a.png)'
  prefs: []
  type: TYPE_IMG
- en: Machine Learning Pipeline created using PyCaret
  prefs: []
  type: TYPE_NORMAL
- en: ???? Build Web Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This tutorial is not focused on building a Flask application. It is only discussed
    here for completeness. Now that our machine learning pipeline is ready we need
    a web application that can connect to our trained pipeline to generate predictions
    on new data points in real-time. We have created the web application using Flask
    framework in Python. There are two parts of this application:'
  prefs: []
  type: TYPE_NORMAL
- en: Front-end (designed using HTML)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back-end (developed using Flask)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how our web application looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/74d5a86c0b0e35e02a454d152185105a.png)'
  prefs: []
  type: TYPE_IMG
- en: Web application opened on local machine
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to see this web app in action, [click here](https://pycaret-insurance.herokuapp.com/) to
    open a deployed web app on Heroku (*It may take few minutes to open*).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven’t followed along, no problem. You can simply fork this [repository](https://github.com/pycaret/deployment-heroku) from
    GitHub. If you don’t know how to fork a repo, please [read this](https://help.github.com/en/github/getting-started-with-github/fork-a-repo) official
    GitHub tutorial. This is how your project folder should look at this point:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/68dd5ccdf9051f74b93e6be42b09eaef.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://github.com/pycaret/deployment-heroku](https://github.com/pycaret/deployment-heroku)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a fully functional web application, we can start the process
    of containerizing the app using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: '10-steps to deploy a ML pipeline in docker container:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ???? **Step 1 — Install Docker Desktop for Windows**
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use Docker Desktop on Mac as well as Windows. Depending on your operating
    system, you can download the Docker Desktop from [this link](https://docs.docker.com/docker-for-windows/install/).
    We will be using Docker Desktop for Windows in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/0193062c5b309be0de0c073493e45241.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://hub.docker.com/editions/community/docker-ce-desktop-windows/](https://hub.docker.com/editions/community/docker-ce-desktop-windows/)'
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to check if the installation was successful is by opening the
    command prompt and typing in ‘docker’. It should print the help menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/bb29701d985ed8948f31b1ee816aa065.png)'
  prefs: []
  type: TYPE_IMG
- en: Command prompt
  prefs: []
  type: TYPE_NORMAL
- en: ???? **Step 2 — Install Kitematic**
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kitematic is an intuitive graphical user interface (GUI) for running Docker
    containers on Windows or Mac. You can download Kitematic from [Docker’s GitHub
    repository](https://github.com/docker/kitematic/releases).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/1693d830cdb6090cb447f35bdc84f9cb.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://github.com/docker/kitematic/releases](https://github.com/docker/kitematic/releases)'
  prefs: []
  type: TYPE_NORMAL
- en: Once downloaded, simply unzip the file into the desired location.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 3 — Create a Dockerfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first step of creating a Docker image is to create a Dockerfile. A Dockerfile
    is just a file with a set of instructions. The Dockerfile for this project looks
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Dockerfile is case-sensitive and must be in the project folder with the other
    project files. A Dockerfile has no extension and can be created using any editor.
    We have used [Visual Studio Code](https://code.visualstudio.com/) to create it.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 4— Create Azure Container Registry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you don’t have a Microsoft Azure account or haven’t used it before, you
    can [sign up](https://azure.microsoft.com/en-ca/free/search/?&ef_id=EAIaIQobChMIm8Onqp6i6QIViY7ICh2QVA2jEAAYASAAEgK9FvD_BwE:G:s&OCID=AID2000061_SEM_EAIaIQobChMIm8Onqp6i6QIViY7ICh2QVA2jEAAYASAAEgK9FvD_BwE:G:s&dclid=CK6R8aueoukCFVbJyAoduGYLcQ) for
    free. When you sign up for the first time you get a free credit for the first
    30 days. You can utilize that credit to build and deploy a web app on Azure. Once
    you sign up, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Login on [https://portal.azure.com](https://portal.azure.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Create a Resource.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for Container Registry and click on Create.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Select Subscription, Resource group and Registry name (in our case: **pycaret.azurecr.io** is
    our registry name)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/c3cd0dfaa68dc7cfa09972c543a0f48a.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://portal.azure.com](https://portal.azure.com/) → Sign in → Create a
    Resource → Container Registry'
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 5— Build Docker Image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once a registry is created in Azure portal, the first step is to build a docker
    image using command line. Navigate to the project folder and execute the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/ce0bca0cd5356ff48f0f004a225c0804.png)'
  prefs: []
  type: TYPE_IMG
- en: Building docker image using anaconda prompt
  prefs: []
  type: TYPE_NORMAL
- en: '**pycaret.azurecr.io** is the name of the registry that you get when you create
    a resource on Azure portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pycaret-insurance** is the name of the image and **latest **is the tag. This
    can be anything you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ???? Step 6— Run container from docker image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that the image is created we will run a container locally and test the
    application before we push it to Azure Container Registry. To run the container
    locally execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once this command is successfully executed it will return an ID of the container
    created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/70aff8bb9e5fa36be04d0b1352c066a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Running docker container locally
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 7 — Test container on your local machine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Open Kitematic and you should be able to see an application up and running.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d42673b1b682d7e0b09991e275f2bdb7.png)'
  prefs: []
  type: TYPE_IMG
- en: Kitematic — A GUI for managing containers on Mac and Windows OS
  prefs: []
  type: TYPE_NORMAL
- en: You can see the app in action by going to localhost:5000 in your internet browser.
    It should open up a web app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/290e31b7ffe644c78001c81cfe1a3aef.png)'
  prefs: []
  type: TYPE_IMG
- en: Application running on local container (localhost:5000)
  prefs: []
  type: TYPE_NORMAL
- en: Make sure that once you are done with this, you stop the app using Kitematic,
    otherwise, it will continue to utilize resources on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 8— Authenticate Azure Credentials
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One final step before you can upload the container onto ACR is to authenticate
    azure credentials on your local machine. Execute the following code in the command
    line to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will be prompted for a Username and password. The username is the name of
    your registry (in this example username is “pycaret”). You can find your password
    under the Access keys of the Azure Container Registry resource you created.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d0337b320bc86533207850e4e0f29bc4.png)'
  prefs: []
  type: TYPE_IMG
- en: portal.azure.com → Azure Container Registry → Access keys
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 9— Push Container onto Azure Container Registry
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you have authenticated to ACR, you can push the container you have
    created to ACR by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Depending on the size of the container, the push command may take some time
    to transfer the container to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 10— Create a Azure Web App and see your model in action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create a web app on Azure, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Login on [https://portal.azure.com](https://portal.azure.com/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Click on Create a Resource.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search for Web App and click on Create.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link your ACR image that you pushed in (step 9 above) to your app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/22a2abf6db31a730b356cbd968f18639.png)'
  prefs: []
  type: TYPE_IMG
- en: portal.azure.com → Web App → Create → Basics![Figure](../Images/a1f869ad7af3059d8ff926543ec325c9.png)
  prefs: []
  type: TYPE_NORMAL
- en: portal.azure.com → Web App → Create → Docker
  prefs: []
  type: TYPE_NORMAL
- en: '**BOOM!! The app is now up and running on Azure Web Services.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/97ea9420283775e2ae0dddedd3685694.png)'
  prefs: []
  type: TYPE_IMG
- en: https://pycaret-insurance2.azurewebsites.net
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** By the time this story is published, the app from [https://pycaret-insurance2.azurewebsites.net](https://pycaret-insurance2.azurewebsites.net/) will
    be removed to restrict resource consumption.'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Link to GitHub Repository for this tutorial.**](https://github.com/pycaret/pycaret-deployment-azure)'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Link to GitHub Repository for Heroku Deployment.**](https://www.github.com/pycaret/deployment-heroku)** *(without
    docker)***'
  prefs: []
  type: TYPE_NORMAL
- en: Next Tutorial
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the next tutorial for deploying machine learning pipelines, we will dive
    deeper into deploying machine learning pipelines using the Kubernetes Service
    on Google Cloud and Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Follow our [LinkedIn](https://www.linkedin.com/company/pycaret/) and subscribe
    to our [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g) channel
    to learn more about PyCaret.
  prefs: []
  type: TYPE_NORMAL
- en: Important Links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[User Guide / Documentation](https://www.pycaret.org/guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub Repository](https://www.github.com/pycaret/pycaret)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Install PyCaret](https://www.pycaret.org/install)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Notebook Tutorials](https://www.pycaret.org/tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Contribute in PyCaret](https://www.pycaret.org/contribute)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyCaret 1.0.1 is coming!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have received overwhelming support and feedback from the community. We are
    actively working on improving PyCaret and preparing for our next release. **PyCaret
    1.0.1 will be bigger and better**. If you would like to share your feedback and
    help us improve further, you may [fill this form](https://www.pycaret.org/feedback) on
    the website or leave a comment on our [GitHub ](https://www.github.com/pycaret/)or [LinkedIn](https://www.linkedin.com/company/pycaret/) page.
  prefs: []
  type: TYPE_NORMAL
- en: Want to learn about a specific module?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of the first release 1.0.0, PyCaret has the following modules available for
    use. Click on the links below to see the documentation and working examples in
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[Classification](https://www.pycaret.org/classification)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regression](https://www.pycaret.org/regression)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Clustering](https://www.pycaret.org/clustering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://www.pycaret.org/anomaly-detection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://www.pycaret.org/nlp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Association Rule Mining](https://www.pycaret.org/association-rules)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also see:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PyCaret getting started tutorials in Notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Clustering](https://www.pycaret.org/clu101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://www.pycaret.org/anom101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://www.pycaret.org/nlp101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Association Rule Mining](https://www.pycaret.org/arul101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regression](https://www.pycaret.org/reg101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Classification](https://www.pycaret.org/clf101)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Would you like to contribute?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: PyCaret is an open source project. Everybody is welcome to contribute. If you
    would like contribute, please feel free to work on [open issues](https://github.com/pycaret/pycaret/issues).
    Pull requests are accepted with unit tests on dev-1.0.1 branch.
  prefs: []
  type: TYPE_NORMAL
- en: Please give us ⭐️ on our [GitHub repo](https://www.github.com/pycaret/pycaret) if
    you like PyCaret.
  prefs: []
  type: TYPE_NORMAL
- en: Medium : [https://medium.com/@moez_62905/](https://medium.com/@moez_62905/machine-learning-in-power-bi-using-pycaret-34307f09394a)
  prefs: []
  type: TYPE_NORMAL
- en: LinkedIn : [https://www.linkedin.com/in/profile-moez/](https://www.linkedin.com/in/profile-moez/)
  prefs: []
  type: TYPE_NORMAL
- en: Twitter : [https://twitter.com/moezpycaretorg1](https://twitter.com/moezpycaretorg1)
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/deploy-machine-learning-pipeline-on-cloud-using-docker-container-bec64458dc01).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 1.0.0](/2020/04/announcing-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build and deploy your first machine learning web app](/2020/05/build-deploy-machine-learning-web-app.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning in Power BI using PyCaret](/2020/05/machine-learning-power-bi-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[The Top 8 Cloud Container Management Solutions of 2024](https://www.kdnuggets.com/the-top-8-cloud-container-management-solutions-of-2024)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Survey: Machine Learning Projects Still Routinely Fail to Deploy](https://www.kdnuggets.com/survey-machine-learning-projects-still-routinely-fail-to-deploy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Successfully Deploy Data Science Projects](https://www.kdnuggets.com/2022/01/successfully-deploy-data-science-projects.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn How to Design & Deploy Responsible AI Systems](https://www.kdnuggets.com/2023/10/teradata-design-deploy-responsible-ai-systems-whitepaper)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn How to Design & Deploy Responsible AI Systems](https://www.kdnuggets.com/2023/11/teradata-design-deploy-responsible-ai-systems-whitepaper)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
