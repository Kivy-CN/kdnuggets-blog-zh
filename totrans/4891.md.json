["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split as split\n\nfrom keras.layers import LSTM, Input, Dense\nfrom keras.models import Model\n\nfrom deap import base, creator, tools, algorithms\nfrom scipy.stats import bernoulli\nfrom bitstring import BitArray\n\nnp.random.seed(1120)\n\n```", "```py\ndata = pd.read_csv('train.csv')\ndata = np.reshape(np.array(data['wp1']),(len(data['wp1']),1))\n\n# Use first 17,257 points as training/validation and rest of the 1500 points as test set.\ntrain_data = data[0:17257]\ntest_data = data[17257:]\n\n```", "```py\ndef prepare_dataset(data, window_size):\n    X, Y = np.empty((0,window_size)), np.empty((0))\n    for i in range(len(data)-window_size-1):\n        X = np.vstack([X,data[i:(i + window_size),0]])\n        Y = np.append(Y,data[i + window_size,0])   \n    X = np.reshape(X,(len(X),window_size,1))\n    Y = np.reshape(Y,(len(Y),1))\n    return X, Y\n\ndef train_evaluate(ga_individual_solution):   \n    # Decode GA solution to integer for window_size and num_units\n    window_size_bits = BitArray(ga_individual_solution[0:6])\n    num_units_bits = BitArray(ga_individual_solution[6:]) \n    window_size = window_size_bits.uint\n    num_units = num_units_bits.uint\n    print('\\nWindow Size: ', window_size, ', Num of Units: ', num_units)\n\n    # Return fitness score of 100 if window_size or num_unit is zero\n    if window_size == 0 or num_units == 0:\n        return 100, \n\n    # Segment the train_data based on new window_size; split into train and validation (80/20)\n    X,Y = prepare_dataset(train_data,window_size)\n    X_train, X_val, y_train, y_val = split(X, Y, test_size = 0.20, random_state = 1120)\n\n    # Train LSTM model and predict on validation set\n    inputs = Input(shape=(window_size,1))\n    x = LSTM(num_units, input_shape=(window_size,1))(inputs)\n    predictions = Dense(1, activation='linear')(x)\n    model = Model(inputs=inputs, outputs=predictions)\n    model.compile(optimizer='adam',loss='mean_squared_error')\n    model.fit(X_train, y_train, epochs=5, batch_size=10,shuffle=True)\n    y_pred = model.predict(X_val)\n\n    # Calculate the RMSE score as fitness score for GA\n    rmse = np.sqrt(mean_squared_error(y_val, y_pred))\n    print('Validation RMSE: ', rmse,'\\n')\n\n    return rmse,\n\n```", "```py\npopulation_size = 4\nnum_generations = 4\ngene_length = 10\n\n# As we are trying to minimize the RMSE score, that's why using -1.0\\. \n# In case, when you want to maximize accuracy for instance, use 1.0\ncreator.create('FitnessMax', base.Fitness, weights = (-1.0,))\ncreator.create('Individual', list , fitness = creator.FitnessMax)\n\ntoolbox = base.Toolbox()\ntoolbox.register('binary', bernoulli.rvs, 0.5)\ntoolbox.register('individual', tools.initRepeat, creator.Individual, toolbox.binary, \nn = gene_length)\ntoolbox.register('population', tools.initRepeat, list , toolbox.individual)\n\ntoolbox.register('mate', tools.cxOrdered)\ntoolbox.register('mutate', tools.mutShuffleIndexes, indpb = 0.6)\ntoolbox.register('select', tools.selRoulette)\ntoolbox.register('evaluate', train_evaluate)\n\npopulation = toolbox.population(n = population_size)\nr = algorithms.eaSimple(population, toolbox, cxpb = 0.4, mutpb = 0.1, \nngen = num_generations, verbose = False)\n\n```", "```py\n# Print top N solutions - (1st only, for now)\nbest_individuals = tools.selBest(population,k = 1)\nbest_window_size = None\nbest_num_units = None\n\nfor bi in best_individuals:\n    window_size_bits = BitArray(bi[0:6])\n    num_units_bits = BitArray(bi[6:]) \n    best_window_size = window_size_bits.uint\n    best_num_units = num_units_bits.uint\n    print('\\nWindow Size: ', best_window_size, ', Num of Units: ', best_num_units)\n\n```", "```py\n# Train the model using best configuration on complete training set \n#and make predictions on the test set\nX_train,y_train = prepare_dataset(train_data,best_window_size)\nX_test, y_test = prepare_dataset(test_data,best_window_size)\n\ninputs = Input(shape=(best_window_size,1))\nx = LSTM(best_num_units, input_shape=(best_window_size,1))(inputs)\npredictions = Dense(1, activation='linear')(x)\nmodel = Model(inputs = inputs, outputs = predictions)\nmodel.compile(optimizer='adam',loss='mean_squared_error')\nmodel.fit(X_train, y_train, epochs=5, batch_size=10,shuffle=True)\ny_pred = model.predict(X_test)\n\nrmse = np.sqrt(mean_squared_error(y_test, y_pred))\nprint('Test RMSE: ', rmse)\n\n```"]