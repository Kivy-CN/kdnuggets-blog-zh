- en: 5 Advanced Tips on Python Sequences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个高级 Python 序列技巧
- en: 原文：[https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html](https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html](https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/), Data
    Scientist at Tubi**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/) 提供，Tubi
    的数据科学家**'
- en: '![](../Images/a192e1567eb76d4791fcee7218864b73.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a192e1567eb76d4791fcee7218864b73.png)'
- en: Photo by [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: “66% of data scientists are applying Python daily.” — [src](https://www.dasca.org/world-of-big-data/article/top-6-programming-languages-for-data-science-in-2021)
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “66% 的数据科学家每天使用 Python。” — [src](https://www.dasca.org/world-of-big-data/article/top-6-programming-languages-for-data-science-in-2021)
- en: If you’re in that 66%, this post is for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是那 66% 的人，这篇文章适合你。
- en: We’re going to cover the major takeaways from chapter 2 of [Fluent Python by
    Luciano Ramalho](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008),
    which covers **sequences** e.g. lists, tuples, etc.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论 [Luciano Ramalho 的《流利的 Python》](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008)
    第二章中的主要内容，该章节涵盖了**序列**，如列表、元组等。
- en: 1 — Lists vs. Tuples
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 — 列表与元组
- en: '**Tip: lists should hold the same kind of information whereas tuples can hold
    different kinds of information.**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：列表应保存相同类型的信息，而元组可以保存不同类型的信息。**'
- en: Starting with the basics, let’s discuss the main difference between lists and
    tuples. Below we can see an example of each — lists are surrounded by square brackets `[]` and
    tuples are surrounded by parentheses `()`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础开始，让我们讨论列表和元组之间的主要区别。下面我们可以看到每种的示例——列表用方括号`[]`包围，元组用圆括号`()`包围。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On the backend, **lists are mutable but tuples are not**. Immutable variables
    often require less memory so try to use tuples when possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，**列表是可变的而元组不是**。不可变的变量通常需要更少的内存，因此尽可能使用元组。
- en: However, there is a deeper note covered in Fluent Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，《流利的 Python》中涵盖了更深层的内容。
- en: Semantically, it’s best practice to store different *kinds* of data in a tuple
    and the same *kinds* in a list. Note that both tuples and lists support multiple
    python datatypes in the same variable, but we’re talking about the type of variable
    conceptually.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从语义上讲，最佳实践是将不同的*kinds* 数据存储在元组中，而将相同的*kinds* 数据存储在列表中。注意，元组和列表都支持在同一个变量中包含多种
    Python 数据类型，但我们谈论的是变量的概念类型。
- en: For instance, a tuple could be used to store the following information: `(latitude,
    longitude, city_name)`. Not only are these different data types `(float, float,
    str)` , but they’re also different conceptually. Lists, on the other hand, should
    only store latitude, longitude, city name, or a tuple of all three.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个元组可以用于存储以下信息：`(latitude, longitude, city_name)`。这些不仅是不同的数据类型`(float, float,
    str)`，而且在概念上也不同。另一方面，列表应只存储纬度、经度、城市名或三者的元组。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To improve the organization of your python code, you should always keep information
    of the same kind in a list. **Tuples are for structure, lists are for sequence.**
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善 Python 代码的组织，你应始终将相同类型的信息保存在一个列表中。**元组用于结构，列表用于序列。**
- en: 2 — Unpacking Iterables
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 — 解包可迭代对象
- en: '**Tip: use **`*****`** and **`**_**`** to improve your unpacking.**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：使用**`*****`**和**`**_**`**来改善你的解包。**'
- en: Unpacking is a very smooth and readable way to access values inside of an iterable.
    They’re quite common in loops, list comprehensions, and function calls.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 解包是一种非常顺畅且可读的访问可迭代对象内部值的方法。它们在循环、列表推导式和函数调用中相当常见。
- en: Unpacking is done by assigning a sequence-like datatype to comma separated variable
    names, for example…
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 解包是通过将类似序列的数据类型分配给逗号分隔的变量名来完成的，例如……
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, Fluent Python goes into some fancy unpacking methods. One example is
    you can use `*` to unpack “the rest” of the items in a long iterable. **Using
    the asterisk notation is common when you have some items of interest, and other
    items that are less important.**
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，《流利的 Python》探讨了一些高级的解包方法。其中一个例子是你可以使用 `*` 解包长可迭代对象中的“其余”项。**当你有一些感兴趣的项和其他不太重要的项时，使用星号符号很常见。**
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the `*` operator can occur in the middle of a set of variables
    and python will assign all unaccounted for values to that variable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`*` 操作符可以出现在一组变量的中间，Python会将所有未分配的值赋给该变量。
- en: But, we can take the asterisk unpacking operator one step further. You can use `_` to
    unpack and** not save a value**. This convention comes in handy when you’re looking
    to unpack something but, unlike the above example, you don’t need all the variables.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们可以将星号解包操作符再向前推进一步。你可以使用 `_` 进行解包而**不保存一个值**。这种约定在你需要解包某些内容但不像上述示例那样不需要所有变量时非常有用。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One use case for the underscore `_` unpacking operator is if you’re working
    with dictionaries or builtin methods that return multiple values.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下划线 `_` 解包操作符的一个用例是当你处理字典或返回多个值的内建方法时。
- en: And finally, for the cherry on top, we can combine both methods to **unpack
    and not store “the rest” of the values.**
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了锦上添花，我们可以将两种方法结合起来，**解包并不保存“其余”的值。**
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 3 — Does the Function Return None?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3 — 函数是否返回 None？
- en: '**Tip: if a function returns **`**None**`**, it performs in-place operations.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：如果一个函数返回**`**None**`**，则表示它执行原地操作。**'
- en: Many python data types have two versions of the same function, such as `x.sort()` and `sorted(x)` shown
    below.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Python 数据类型有相同函数的两个版本，例如下面显示的 `x.sort()` 和 `sorted(x)`。
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the first example using `x.sort()`, we perform an in-place sort which is
    more efficient and requires less memory. But, in the second exampling using `sorted(x)`,
    we are able to retain the original order of the list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个示例中使用 `x.sort()`，我们进行的是原地排序，这种方法更高效且需要更少的内存。但在第二个示例中使用 `sorted(x)`，我们能够保留列表的原始顺序。
- en: In general, Python maintains this notation. [Dot operators](https://www.askpython.com/python/built-in-methods/dot-notation) like `x.sort()`often
    return `None` and perform in-place mutations. Functions that take the variable
    as a parameter like `sorted(x)` return a **copy **of the mutated variable, but
    leave the original variable unchanged.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，Python保持这种符号。[点操作符](https://www.askpython.com/python/built-in-methods/dot-notation)
    如 `x.sort()`通常返回 `None` 并进行原地修改。接受变量作为参数的函数如 `sorted(x)` 返回**变异变量的副本**，但原始变量保持不变。
- en: 4 — GenExps vs. ListComps
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4 — 生成器表达式 vs. 列表推导式
- en: '**Tip: use generator expressions if you’re only accessing the variable once.
    If not, use a list comprehension.**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：如果你只访问一次变量，使用生成器表达式。如果不止一次，使用列表推导式。**'
- en: '[List comprehensions](https://www.w3schools.com/python/python_lists_comprehension.asp) (listcomps)
    and [generator expressions](https://www.python.org/dev/peps/pep-0289/) (genexps)
    are different ways to instantiate a sequence data type.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[列表推导式](https://www.w3schools.com/python/python_lists_comprehension.asp)（listcomps）和[生成器表达式](https://www.python.org/dev/peps/pep-0289/)（genexps）是实例化序列数据类型的不同方式。'
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As shown above, the only syntactical difference between list comps and genexps
    are the surrounding bracket type — parentheses `()`are used for genexps and square
    brackets `[]` are used for list comps.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所示，列表推导式和生成器表达式之间唯一的语法差异是括号类型——生成器表达式使用圆括号 `()`，而列表推导式使用方括号 `[]`。
- en: '**List comps are instantiated, which means they are evaluated and saved in
    memory. Genexps are not. **Each time a genexp is needed by the program, it will
    perform the computation to evaluate that expression.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表推导式会被实例化，这意味着它们会被评估并保存在内存中。生成器表达式则不会。**每次程序需要生成器表达式时，它都会执行计算来评估该表达式。'
- en: So that’s why generator expressions are better if you’re only using the variable
    once — they are never actually stored in memory so they’re far more efficient.
    But, if you’re repeatedly accessing a sequence or need list-specific method, it’s
    better to store it in memory.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你只使用变量一次，生成器表达式更好——因为它们从未实际存储在内存中，因此效率更高。但如果你反复访问序列或需要特定于列表的方法，将其存储在内存中更好。
- en: Fun side note — you can also create dictionaries using the list comprehension
    syntax…
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的旁注——你还可以使用列表推导式语法创建字典……
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 5 — Slicing
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5 — 切片
- en: Finally, let’s conclude with a quick note on slicing. Unlike with unpacking,
    sometimes we want to access a value in an iterable using the index. Slicing allows
    us to do this by using the following format: `my_list[start:stop:step]`
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们快速总结一下切片。与解包不同，有时我们想通过索引访问可迭代对象中的值。切片允许我们通过以下格式来实现：`my_list[start:stop:step]`
- en: For those of you who know that `my_list[::-1]` reverses a list order but didn’t
    know why (such as myself), that’s why. By passing a `-1` as our step parameter,
    we step through the list in reverse.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些知道 `my_list[::-1]` 可以反转列表顺序但不知道为什么的人（例如我），这就是原因。通过将 `-1` 作为步长参数，我们可以反向遍历列表。
- en: Now most python packages abide by the `[start:stop:index]`syntax. Numpy and
    pandas are some notable examples. Let’s take a look at each parameter in turn…
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在大多数 Python 包遵循 `[start:stop:index]` 语法。Numpy 和 pandas 是一些显著的例子。让我们逐一查看每个参数……
- en: '`start`: starting index in your slice'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`start`: 切片中的起始索引'
- en: '`end`: not-inclusive ending index in your slice'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`end`: 切片中不包括的结束索引'
- en: '`step`: the step size (and direction) within your `start` and `stop` index'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`: 在 `start` 和 `stop` 索引之间的步长（以及方向）'
- en: So, because each of these values are optional, we can do all sorts of cool slicing…
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些值都是可选的，我们可以做各种酷炫的切片……
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And there you have it! 5 major tips from chapter 2 of Fluent Python. Just one
    more section…
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！《流畅的 Python》第 2 章的 5 个主要提示。只剩下最后一节……
- en: Useful Notes for Data Scientists
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学家的实用笔记
- en: Disclaimer, I’m not super qualified to add my opinions to this piece. However,
    these notes should be pretty intuitive. Let me know if you disagree.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明，我不是特别有资格对这部分内容发表意见。然而，这些笔记应该比较直观。如果你有不同意见，请告诉我。
- en: '**List comprehensions should almost always replace loops.** If the body of
    the loop is complex, you can create a function that does the operations. By combining
    user-defined functions with list comprehension syntax, you make readable and efficient
    code. And, if you need to iterate over more than one variable, use `[enumerate()](https://realpython.com/python-enumerate/)` or `[zip()](https://www.w3schools.com/python/ref_func_zip.asp)`.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**列表推导式几乎总是应当替代循环。** 如果循环体复杂，你可以创建一个执行操作的函数。通过将用户定义的函数与列表推导式语法结合，你可以写出可读且高效的代码。如果你需要迭代多个变量，使用`[enumerate()](https://realpython.com/python-enumerate/)`
    或 `[zip()](https://www.w3schools.com/python/ref_func_zip.asp)`。'
- en: '**Being “optimal” in python doesn’t matter. **If you’re writing production-level
    code, it may be different. But, realistically you won’t see major performance
    bumps when using a tuple over a list. Ensuring that your data manipulation steps
    are logical and efficient is 99% of the work. If the 1% matters, then you can
    start worrying about tuple vs. list. Moreover, if you are really in the business
    of efficient code, you’re probably not using python.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在 Python 中，“最优”并不重要。** 如果你编写的是生产级代码，可能会有所不同。但实际上，使用元组而非列表不会显著提升性能。确保数据处理步骤逻辑清晰且高效是
    99% 的工作。如果 1% 的性能至关重要，你可以开始关注元组与列表的区别。此外，如果你真的致力于高效代码，你可能不会使用 Python。'
- en: '**Finally, slicing is super cool. **I had always known that `x[::-1]` reverses
    a list, but never knew why until reading this chapter of Fluent Python. And it
    works for numpy and pandas!'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最后，切片真的很酷。** 我一直知道`x[::-1]`可以反转一个列表，但直到阅读《流畅的 Python》这章才知道为什么。而且它对 numpy
    和 pandas 也适用！'
- en: '*Thanks for reading! I’ll be writing 35 more posts that bring academic research
    to the DS industry. Check out my comment for links to the main source for this
    post and some useful resources.*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*感谢阅读！我将写 35 篇文章，将学术研究带到数据科学领域。查看我的评论以获取此帖子的主要来源链接和一些有用的资源。*'
- en: '**Bio: [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/)**
    (**[https://michaeldberk.com/](https://michaeldberk.com/)**) is a Data Scientist
    at Tubi.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介: [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/)**
    (**[https://michaeldberk.com/](https://michaeldberk.com/)**) 是 Tubi 的数据科学家。'
- en: '[Original](https://towardsdatascience.com/5-advanced-tips-on-python-sequences-5b0e09a21a83).
    Reposted with permission.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/5-advanced-tips-on-python-sequences-5b0e09a21a83)。经许可转载。'
- en: '**Related:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[How to Find Weaknesses in your Machine Learning Models](/2021/09/weaknesses-machine-learning-models.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何发现机器学习模型中的弱点](/2021/09/weaknesses-machine-learning-models.html)'
- en: '[Simple Text Scraping, Parsing, and Processing with this Python Library](/2021/10/simple-text-scraping-parsing-processing-python-library.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用此Python库进行简单的文本抓取、解析和处理](/2021/10/simple-text-scraping-parsing-processing-python-library.html)'
- en: '[Easy Synthetic Data in Python with Faker](/2021/11/easy-synthetic-data-python-faker.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Faker在Python中轻松生成合成数据](/2021/11/easy-synthetic-data-python-faker.html)'
- en: More On This Topic
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[5 Free Advanced Python Programming Courses](https://www.kdnuggets.com/5-free-advanced-python-programming-courses)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个免费的高级Python编程课程](https://www.kdnuggets.com/5-free-advanced-python-programming-courses)'
- en: '[25 Advanced SQL Interview Questions for Data Scientists](https://www.kdnuggets.com/2022/10/25-advanced-sql-interview-questions-data-scientists.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的25个高级SQL面试问题](https://www.kdnuggets.com/2022/10/25-advanced-sql-interview-questions-data-scientists.html)'
- en: '[Top 10 Advanced Data Science SQL Interview Questions You Must Know…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你必须知道的10个高级数据科学SQL面试问题…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
- en: '[Advanced Feature Selection Techniques for Machine Learning Models](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习模型的高级特征选择技术](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
- en: '[Back to Basics Week 4: Advanced Topics and Deployment](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归基础第4周：高级主题和部署](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
- en: '[Top 16 Technical Data Sources for Advanced Data Science Projects](https://www.kdnuggets.com/top-16-technical-data-sources-for-advanced-data-science-projects)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[16个高级数据科学项目的技术数据源](https://www.kdnuggets.com/top-16-technical-data-sources-for-advanced-data-science-projects)'
