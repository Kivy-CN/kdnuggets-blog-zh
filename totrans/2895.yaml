- en: Build Your First Voice Assistant
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个语音助手
- en: 原文：[https://www.kdnuggets.com/2019/09/build-your-first-voice-assistant.html](https://www.kdnuggets.com/2019/09/build-your-first-voice-assistant.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/09/build-your-first-voice-assistant.html](https://www.kdnuggets.com/2019/09/build-your-first-voice-assistant.html)
- en: '[comments](#comments)![Figure](../Images/147df9c07f706c18ecf8a9bdb821095c.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图像](../Images/147df9c07f706c18ecf8a9bdb821095c.png)'
- en: 'source: [giphy](https://media.giphy.com/media/3oz8xTfD5SrkAwNNUQ/giphy.gif)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '来源: [giphy](https://media.giphy.com/media/3oz8xTfD5SrkAwNNUQ/giphy.gif)'
- en: Nowadays, it isn’t surprising to hear someone speak to someone that isn’t there.
    We ask Alexa for the weather and to turn the temperature down on the thermostat.
    Then, we ask Siri what our schedule for the day is and to call people. We are
    connected now more than ever using our voice and voice interface technology. I
    can’t imagine doing things manually anymore! It’s truly the future.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如今，听到有人对着不存在的对象说话并不奇怪。我们问Alexa天气如何，或者让它调低温度。然后，我们问Siri今天的日程安排，并打电话给人们。我们现在通过声音和语音接口技术比以往任何时候都更紧密地连接在一起。我真的无法再想象手动操作了！这确实是未来。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: — [Forbes](https://www.forbes.com/sites/danielnewman/2018/08/22/voice-interface-technology-the-future-of-business/#5f12070e316a)
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: — [福布斯](https://www.forbes.com/sites/danielnewman/2018/08/22/voice-interface-technology-the-future-of-business/#5f12070e316a)
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: Who doesn't want to have the luxury to own an assistant who always listens for
    your call, anticipates your every need, and takes action when necessary? That
    luxury is now available thanks to artificial intelligence-based voice assistants.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 谁不想拥有一个随时听候指令、预见你的每一个需求并在必要时采取行动的助手呢？如今，这种奢侈品由于基于人工智能的语音助手而变得触手可及。
- en: Voice assistants come in somewhat small packages and can perform a variety of
    actions after hearing your command. They can turn on lights, answer questions,
    play music, place online orders and do all kinds of AI-based stuff.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 语音助手体积较小，能够在听到你的命令后执行各种操作。它们可以开灯、回答问题、播放音乐、下在线订单以及做各种基于AI的任务。
- en: Voice assistants are not to be confused with virtual assistants, which are people
    who work remotely and can, therefore, handle all kinds of tasks. Rather, voice
    assistants are technology based. As voice assistants become more robust, their
    utility in both the personal and business realms will grow as well.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 语音助手不同于虚拟助手，后者是远程工作的人员，能够处理各种任务。语音助手则基于技术。随着语音助手变得越来越强大，它们在个人和商业领域的效用也将增长。
- en: '![Figure](../Images/16bd5e820b43d21d7dea3e97e9369c29.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/16bd5e820b43d21d7dea3e97e9369c29.png)'
- en: '[source](https://ugetfix.com/how-useful-is-cortana-try-it-to-find-out/)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://ugetfix.com/how-useful-is-cortana-try-it-to-find-out/)'
- en: What is a Voice Assistant?
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是语音助手？
- en: A **voice assistant** or **intelligent personal assistant** is a software agent
    that can perform tasks or services for an individual based on verbal commands
    i.e. by interpreting human speech and respond via synthesized voices. Users can
    ask their assistants’ questions, control home automation devices, and media playback
    via voice, and manage other basic tasks such as email, to-do lists, open or close
    any application etc with verbal commands.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个**语音助手**或**智能个人助手**是一个软件代理，能够根据口头命令执行任务或服务，即通过解释人类语言并通过合成语音作出回应。用户可以通过语音向助手提问、控制家庭自动化设备、播放媒体，并管理其他基本任务，如电子邮件、待办事项、打开或关闭应用程序等。
- en: Let me give you the example of [Braina (Brain Artificial)](https://en.wikipedia.org/wiki/Braina) which
    is an intelligent personal assistant, human language interface, automation and **voice
    recognition software** for Windows PC. Braina is a multi-functional AI software
    that allows you to interact with your computer using **voice commands** in most
    of the languages of the world. Braina also allows you to accurately convert speech
    to text in over 100 different languages of the world.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我以 [Braina (脑人工智能)](https://en.wikipedia.org/wiki/Braina) 为例，它是一个智能个人助手、人类语言接口、自动化以及**语音识别软件**，用于Windows
    PC。Braina 是一个多功能AI软件，允许你使用**语音命令**与电脑互动，支持世界上大多数语言。Braina 还允许你在超过100种不同语言中准确地将语音转换为文本。
- en: History of Voice Assistants
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 语音助手的历史
- en: '![Figure](../Images/a0e1065f65fd78d0318a61dadb957793.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/a0e1065f65fd78d0318a61dadb957793.png)'
- en: '[A modern history of Voice Assistants](https://www.theoneoff.com/journal/the-rise-of-vui/)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[语音助手的现代历史](https://www.theoneoff.com/journal/the-rise-of-vui/)'
- en: In recent times, Voice assistants got the major platform after Apple integrated
    the most astonishing Virtual Assistant — Siri which is officially a part of Apple
    Inc. But the timeline of greatest evolution began with the year 1962 event at
    the Seattle World Fair where IBM displayed a unique apparatus called Shoebox.
    It was the actual size of a shoebox and could perform scientific functions and
    can perceive 16 words and also speak them in the human recognizable voice with
    0 to 9 numerical digits.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，语音助手获得了主要平台，因为 Apple 集成了最惊人的虚拟助手——Siri，它正式成为 Apple Inc. 的一部分。但最伟大的演变时间线始于
    1962 年的西雅图世界博览会，当时 IBM 展示了一种名为 Shoebox 的独特设备。它的实际大小是一个鞋盒，能够执行科学功能，识别 16 个单词并以
    0 到 9 的数字发声。
- en: During the period of the 1970s, researchers at Carnegie Mellon University in
    Pittsburgh, Pennsylvania — with the considerable help of the U.S Department of
    Defence and its Defence Advanced Research Projects Agency (DARPA) — made Harpy.
    It could understand almost 1,000 words, which is approximately the vocabulary
    of a three-year-old child.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 1970 年代，卡内基梅隆大学的研究人员在美国国防部及其国防高级研究计划局（DARPA）的 considerable 帮助下，制作了 Harpy。它能够理解近
    1,000 个单词，相当于三岁小孩的词汇量。
- en: Big organizations like Apple and IBM sooner in the 90s started to make things
    that utilized voice acknowledgment. In 1993, Macintosh began to building speech
    recognition with its Macintosh PCs with PlainTalk.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 像 Apple 和 IBM 这样的重大组织在 90 年代初开始制作利用语音识别的产品。1993 年，Macintosh 开始使用其 Macintosh
    电脑和 PlainTalk 构建语音识别。
- en: In April 1997, Dragon NaturallySpeaking was the first constant dictation product
    which could comprehend around 100 words and transform it into readable content.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 1997 年 4 月，Dragon NaturallySpeaking 是第一个能够理解约 100 个单词并将其转化为可读内容的持续听写产品。
- en: '![Figure](../Images/e5039254d28bd942c2345da636cdab47.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/e5039254d28bd942c2345da636cdab47.png)'
- en: '[source](https://triggermovement.com/tag/tech/)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[source](https://triggermovement.com/tag/tech/)'
- en: 'Having said that, how cool it would be to build a simple voice-based desktop/laptop
    assistant that has the capability to:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 说到这里，构建一个简单的语音基础桌面/笔记本助手，该助手能够：
- en: Open the subreddit in the browser.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开 subreddit。
- en: Open any website in the browser.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开任何网站。
- en: Send an email to your contacts.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向你的联系人发送电子邮件。
- en: Launch any system application.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动任何系统应用程序。
- en: Tells you the current weather and temperature of almost any city
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉你几乎任何城市的当前天气和温度
- en: Tells you the current time.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉你当前时间。
- en: Greetings
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问候
- en: Play you a song on VLC media player(of course you need to have [VLC media player](https://www.videolan.org/vlc/index.html) installed
    in your laptop/desktop)
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VLC 媒体播放器上播放歌曲（当然，你需要在你的笔记本电脑/台式机上安装了 [VLC 媒体播放器](https://www.videolan.org/vlc/index.html)）
- en: Change desktop wallpaper.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改桌面壁纸。
- en: Tells you latest news feeds.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉你最新的新闻动态。
- en: Tells you about almost anything you ask.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 告诉你几乎任何你问的问题。
- en: So here in this article, we are going to build a voice-based application which
    is capable of doing all the above-mentioned tasks. But first, check out this video
    below which I made while I was interacting with the desktop voice assistant and
    I call her Sofia.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将构建一个基于语音的应用程序，它能够完成上述所有任务。但首先，请查看下面这个视频，这是我与桌面语音助手互动时录制的，我称她为 Sofia。
- en: '**[New video by Nagesh Chauhan](https://photos.app.goo.gl/1a96nySXBQqjBQCX9?source=post_page-----85a5a49f6cc1----------------------)**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Nagesh Chauhan的新视频](https://photos.app.goo.gl/1a96nySXBQqjBQCX9?source=post_page-----85a5a49f6cc1----------------------)**'
- en: Interaction with Sofia
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Sofia 互动
- en: I hope you guys have liked the above video in which I was interacting with Sofia.
    Now let’s start building this cool thing…
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你们喜欢我与 Sofia 互动的视频。现在让我们开始构建这个酷炫的东西……
- en: '**Dependencies and requirements :**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**依赖项和要求：**'
- en: 'System requirements: Python 2.7, Spyder IDE, MacOS Mojave(version 10.14)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 系统要求：Python 2.7，Spyder IDE，MacOS Mojave（版本 10.14）
- en: 'Install all these python libraries :'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装所有这些 Python 库：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s start building our desktop voice assistant using python
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们开始使用 Python 构建我们的桌面语音助手
- en: '![Figure](../Images/542495fd4bb60e616d8032b2acb7b406.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/542495fd4bb60e616d8032b2acb7b406.png)'
- en: '[source](https://www.hackerearth.com/blog/talent-assessment/hire-programmer-using-online-coding-tests/)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[source](https://www.hackerearth.com/blog/talent-assessment/hire-programmer-using-online-coding-tests/)'
- en: 'Start by importing all the required libraries :'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从导入所有必需的库开始：
- en: '[PRE1] import speech_recognition as sr  import os  import sys  import re  import
    webbrowser  import smtplib  import requests  import subprocess  from pyowm import
    OWM  import youtube_dl  import vlc  import urllib  import urllib2  import json  from
    bs4 import BeautifulSoup as soup  from urllib2 import urlopen  import wikipedia  import
    random  from time import strftime [PRE2]`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE1] import speech_recognition as sr  import os  import sys  import re  import
    webbrowser  import smtplib  import requests  import subprocess  from pyowm import
    OWM  import youtube_dl  import vlc  import urllib  import urllib2  import json  from
    bs4 import BeautifulSoup as soup  from urllib2 import urlopen  import wikipedia  import
    random  from time import strftime [PRE2]`'
- en: For our voice-assistant to perform all the above-discussed features, we have
    to code the logic of each of them in one method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们的语音助手执行上述所有功能，我们必须在一个方法中编码每一个功能的逻辑。
- en: So our first step is to create the method which will interpret user voice response.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的第一步是创建一个方法来解释用户的语音回应。
- en: '[PRE3] def myCommand():      r = sr.Recognizer()      with sr.Microphone()
    as source:          print(''Say something...'')          r.pause_threshold = 1          r.adjust_for_ambient_noise(source,
    duration=1)          audio = r.listen(source)      try:          command = r.recognize_google(audio).lower()          print(''You
    said: '' + command + ''\n'')      #loop back to continue to listen for commands
    if unrecognizable speech is received      except sr.UnknownValueError:          print(''....'')          command
    = myCommand();      return command [PRE4]`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE3] def myCommand():      r = sr.Recognizer()      with sr.Microphone()
    as source:          print(''说点什么...'')          r.pause_threshold = 1          r.adjust_for_ambient_noise(source,
    duration=1)          audio = r.listen(source)      try:          command = r.recognize_google(audio).lower()          print(''你说了:
    '' + command + ''\n'')      # 如果接收到无法识别的语音，则返回循环继续监听命令      except sr.UnknownValueError:          print(''....'')          command
    = myCommand();      return command [PRE4]`'
- en: Next, create a method that will convert text to speech.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个将文本转换为语音的方法。
- en: '[PRE5] def sofiaResponse(audio):      print(audio)      for line in audio.splitlines():          os.system("say
    " + audio) [PRE6]`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE5] def sofiaResponse(audio):      print(audio)      for line in audio.splitlines():          os.system("say
    " + audio) [PRE6]`'
- en: Now create a loop to continue executing multiple commands. Inside the method
    assistant() passing user command(myCommand()) as parameters.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个循环来继续执行多个命令。在方法 `assistant()` 中传递用户命令（`myCommand()`）作为参数。
- en: '[PRE7] while True:      assistant(myCommand()) [PRE8]`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE7] while True:      assistant(myCommand()) [PRE8]`'
- en: Our next step is to create multiple if statements corresponding to each of the
    features. So let us see how to create these small modules inside if statement
    for each command.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的下一步是创建多个 if 语句，分别对应每一个功能。所以我们来看看如何在 if 语句中为每个命令创建这些小模块。
- en: '**1\. Open the subreddit Reddit** **in the browser.**'
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**1\. 在浏览器中打开 Reddit 子版块。**'
- en: The user will give any command to open any subreddit from Reddit and the command
    should be “Hey Sofia! Can you please ***open Reddit subreddit_name***”. only the
    italic bold phrase should be used as it is. You can use any kind of prefix, just
    take care of the italic bold phrase.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将给出任何命令以打开 Reddit 上的任何子版块，命令应为“Hey Sofia! Can you please ***open Reddit subreddit_name***”。只有斜体粗体短语应按原样使用。你可以使用任何类型的前缀，只需注意斜体粗体短语。
- en: '**How it works : **If you have said the phrase **open reddit** in your command
    then it will search for subreddit name in the user command using re.search().
    The subreddit will be searched using [www.reddit.com](https://www.reddit.com/'') and
    will get opened in the browser using pythons Webbrowser module.The [**Webbrowser**](https://docs.python.org/2/library/webbrowser.html) module
    provides a high-level interface to allow displaying Web-based documents to users.'
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：**如果你在命令中说了短语**open reddit**，它将使用 `re.search()` 在用户命令中搜索子版块名称。子版块将使用
    [www.reddit.com](https://www.reddit.com/'') 进行搜索，并通过 Python 的 Webbrowser 模块在浏览器中打开。**[Webbrowser](https://docs.python.org/2/library/webbrowser.html)**
    模块提供了一个高级接口，用于允许用户显示基于 Web 的文档。'
- en: '[PRE9] if ''open reddit'' in command:          reg_ex = re.search(''open reddit
    (.*)'', command)          url = ''https://www.reddit.com/''          if reg_ex:              subreddit
    = reg_ex.group(1)              url = url + ''r/'' + subreddit          webbrowser.open(url)          sofiaResponse(''The
    Reddit content has been opened for you Sir.'') [PRE10]`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE9] if ''open reddit'' in command:          reg_ex = re.search(''open reddit
    (.*)'', command)          url = ''https://www.reddit.com/''          if reg_ex:              subreddit
    = reg_ex.group(1)              url = url + ''r/'' + subreddit          webbrowser.open(url)          sofiaResponse(''Reddit
    内容已经为您打开了，先生。'') [PRE10]`'
- en: So, the above code will open your desired Reddit in your default browser.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，上述代码将会在你的默认浏览器中打开你想要的 Reddit。
- en: '**2\. Open any website in the browser.**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**2\. 在浏览器中打开任何网站。**'
- en: You can open any website just be saying “open website.com” or “open website.org”.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过说“打开 website.com”或“打开 website.org”来打开任何网站。
- en: 'For example: “Please open facebook.com” or “Hey, can you open linkedin.com”
    like this you can ask Sofia to open any website for you.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：“请打开 facebook.com”或“嘿，你能打开 linkedin.com 吗”，这样你可以让索非亚为你打开任何网站。
- en: '**How it works : **If you have said the word **open** in your command then
    it will search for website name in the user command using re.search(). Next, it
    will append the website name to[https://www.](https://www./) and using **webbrowser** module
    the complete URL gets opened in the browser.'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**它是如何工作的：**如果你在命令中说了**open**这个词，它将使用 re.search() 搜索用户命令中的网站名称。接着，它会将网站名称附加到[https://www.](https://www./)并使用**webbrowser**模块在浏览器中打开完整的
    URL。'
- en: '[PRE11] elif ''open'' in command:          reg_ex = re.search(''open (.+)'',
    command)          if reg_ex:              domain = reg_ex.group(1)              print(domain)              url
    = ''https://www.'' + domain              webbrowser.open(url)              sofiaResponse(''The
    website you have requested has been opened for you Sir.'')          else:              pass
    [PRE12]`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE11] elif ''open'' in command:          reg_ex = re.search(''open (.+)'',
    command)          if reg_ex:              domain = reg_ex.group(1)              print(domain)              url
    = ''https://www.'' + domain              webbrowser.open(url)              sofiaResponse(''您请求的网站已经为您打开。'')          else:              pass
    [PRE12]`'
- en: '**3\. Send Email.**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**3\. 发送邮件。**'
- en: You can also ask your desktop assistant to send the email.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以让你的桌面助手发送邮件。
- en: '**How it works : **If you have said the word **email** in your command then
    the bot will ask for receipient, If my response is rajat, the bot will use pthons
    smtplib library. The [**smtplib module**](https://docs.python.org/3/library/smtplib.html)defines
    an SMTP client session object that can be used to send mail to any Internet machine
    with an SMTP or ESMTP listener daemon. Sending mail is done with Python’s smtplib
    using an SMTP server. First it will initaite gmail SMTP using **smtplib.SMTP()**,
    then identify the server using **ehlo()** function, then encypting the session **starttls(), **then
    login to your mailbox using** login()**, then sending the messageusing** sendmail().**'
  id: totrans-70
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**它是如何工作的：**如果你在命令中说了**email**这个词，那么机器人将会询问收件人。如果我的回复是 rajat，机器人将使用 Python
    的 smtplib 库。 [**smtplib 模块**](https://docs.python.org/3/library/smtplib.html)定义了一个
    SMTP 客户端会话对象，可以用来向任何有 SMTP 或 ESMTP 监听守护进程的 Internet 机器发送邮件。发送邮件是通过 Python 的 smtplib
    使用 SMTP 服务器完成的。首先，它将初始化 Gmail SMTP 使用**smtplib.SMTP()**，然后使用**ehlo()**函数识别服务器，然后加密会话**starttls()**，然后使用**login()**登录到你的邮箱，最后使用**sendmail()**发送消息。'
- en: '[PRE13] elif ''email'' in command:          sofiaResponse(''Who is the recipient?'')          recipient
    = myCommand()if ''rajat'' in recipient:              sofiaResponse(''What should
    I say to him?'')              content = myCommand()              mail = smtplib.SMTP(''smtp.gmail.com'',
    587)              mail.ehlo()              mail.starttls()              mail.login(''your_email_address'',
    ''your_password'')              mail.sendmail(''sender_email'', ''receiver_email'',
    content)              mail.close()              sofiaResponse(''Email has been
    sent successfuly. You can check your inbox.'')else:              sofiaResponse(''I
    don\''t know what you mean!'') [PRE14]`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13] elif ''email'' in command:          sofiaResponse(''收件人是谁？'')          recipient
    = myCommand()if ''rajat'' in recipient:              sofiaResponse(''我应该对他说什么？'')              content
    = myCommand()              mail = smtplib.SMTP(''smtp.gmail.com'', 587)              mail.ehlo()              mail.starttls()              mail.login(''your_email_address'',
    ''your_password'')              mail.sendmail(''sender_email'', ''receiver_email'',
    content)              mail.close()              sofiaResponse(''邮件已成功发送。您可以检查您的收件箱。'')else:              sofiaResponse(''我不知道你是什么意思！'')
    [PRE14]`'
- en: '**4\. Launch any system application.**'
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**4\. 启动任何系统应用程序。**'
- en: Say “launch calendar” or “can you please launch skype” or “Sofia launch finder”
    etc. and Sofia will launch that system application for you.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 说“启动日历”或“你能启动Skype吗”或“索非亚启动查找器”等，索非亚将为你启动该系统应用程序。
- en: '**How it works : **If you have said the word **launch** in your command then
    it will search for application name(if it is present in your system) in the user
    command using re.search(). It will then append the suffix “.app” to the application
    name. Now your application name is for example say calender.app(In macOS the executable
    files end with extension .app unlike in Windows which ends with .exe). So the
    executable application name will be launched using python subprocess’s Popen()
    function. The [subprocess](https://docs.python.org/3/library/subprocess.html) module
    enables you to start new applications from your Python program.'
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：**如果你在命令中说了**launch**这个词，它将使用 re.search() 在用户命令中查找应用程序名称（如果它在你的系统中存在）。然后它会将后缀“.app”附加到应用程序名称上。例如，你的应用程序名称可能是
    calender.app（在 macOS 中，可执行文件以 .app 结尾，而在 Windows 中以 .exe 结尾）。然后将使用 Python 的 subprocess
    模块的 Popen() 函数启动该可执行应用程序。[subprocess](https://docs.python.org/3/library/subprocess.html)
    模块使你可以从 Python 程序中启动新应用程序。'
- en: '[PRE15] elif ''launch'' in command:          reg_ex = re.search(''launch (.*)'',
    command)          if reg_ex:              appname = reg_ex.group(1)              appname1
    = appname+".app"              subprocess.Popen(["open", "-n", "/Applications/"
    + appname1], stdout=subprocess.PIPE)sofiaResponse(''I have launched the desired
    application'') [PRE16]`'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE15] elif ''launch'' in command:          reg_ex = re.search(''launch (.*)'',
    command)          if reg_ex:              appname = reg_ex.group(1)              appname1
    = appname+".app"              subprocess.Popen(["open", "-n", "/Applications/"
    + appname1], stdout=subprocess.PIPE)sofiaResponse(''我已启动所需的应用程序'') [PRE16]`'
- en: '**5\. Tells you the current weather and temperature of almost any city.**'
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**5\. 告诉你几乎任何城市的当前天气和温度。**'
- en: Sofia can also tell you the weather, maximum and minimum temperature of any
    city around the world. The user just needs to say something like “what is the
    current weather in London” or “tell me the current weather in Delhi”.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Sofia 还可以告诉你全球任何城市的天气、最高气温和最低气温。用户只需说类似“伦敦现在的天气如何”或“告诉我德里当前的天气”。
- en: '**How it works : **If you have said the phrase **current weather** in your
    command then it will search for city name using re.search(). I have used pythons [pyowm](https://pyowm.readthedocs.io/en/latest/) library
    to get the weather of any city. get_status() will tell you about the weather condition
    like haze, cloudy, rainy etc and get_temperature() will tell you about the max
    and min temperature of the city.'
  id: totrans-78
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：**如果你在命令中说了**current weather**这个短语，它将使用 re.search() 查找城市名称。我使用了 Python
    的 [pyowm](https://pyowm.readthedocs.io/en/latest/) 库来获取任何城市的天气。get_status() 将告诉你天气状况，如雾霾、阴云、雨天等，get_temperature()
    将告诉你该城市的最高气温和最低气温。'
- en: '[PRE17] elif ''current weather'' in command:       reg_ex = re.search(''current
    weather in (.*)'', command)       if reg_ex:           city = reg_ex.group(1)           owm
    = OWM(API_key=''ab0d5e80e8dafb2cb81fa9e82431c1fa'')           obs = owm.weather_at_place(city)           w
    = obs.get_weather()           k = w.get_status()           x = w.get_temperature(unit=''celsius'')           sofiaResponse(''Current
    weather in %s is %s. The maximum temperature is %0.2f and the minimum temperature
    is %0.2f degree celcius'' % (city, k, x[''temp_max''], x[''temp_min''])) [PRE18]`'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE17] elif ''current weather'' in command:       reg_ex = re.search(''current
    weather in (.*)'', command)       if reg_ex:           city = reg_ex.group(1)           owm
    = OWM(API_key=''ab0d5e80e8dafb2cb81fa9e82431c1fa'')           obs = owm.weather_at_place(city)           w
    = obs.get_weather()           k = w.get_status()           x = w.get_temperature(unit=''celsius'')           sofiaResponse(''%s
    的当前天气是 %s。最高气温是 %0.2f 度，最低气温是 %0.2f 度摄氏度'' % (city, k, x[''temp_max''], x[''temp_min'']))
    [PRE18]`'
- en: '**6\. Tells you the current time.**'
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**6\. 告诉你当前时间。**'
- en: “Sofia can you tell me the current time ?” or “what is the time now ?” and Sofia
    will tell you the current time of your timezone.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: “Sofia，你能告诉我现在几点钟吗？”或“现在时间是多少？”Sofia 会告诉你你所在时区的当前时间。
- en: '**How it works : Its pretty simple**'
  id: totrans-82
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：很简单**'
- en: '[PRE19] elif ''time'' in command:       import datetime       now = datetime.datetime.now()       sofiaResponse(''Current
    time is %d hours %d minutes'' % (now.hour, now.minute)) [PRE20]`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE19] elif ''time'' in command:       import datetime       now = datetime.datetime.now()       sofiaResponse(''当前时间是
    %d 小时 %d 分钟'' % (now.hour, now.minute)) [PRE20]`'
- en: '**7\. Greetings/ leave**'
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**7\. 问候/离开**'
- en: Say “hello Sofia” to greet your voice assistant or when you want the program
    to terminate say something like “shutdown Sofia” or “Sofia please shutdown” etc.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 说“hello Sofia”来问候你的语音助手，或者当你想让程序终止时，说“shutdown Sofia”或“Sofia 请关闭”等。
- en: '**How it works : **If you have said the word **hello** in your command, then
    depending on the time of the day, the bot will greet the user. If the time is
    more than 12 noon, the bot will respond “Hello Sir. Good afternoon”, likewise
    if the time is more than 6 ck pm, the bot will respond “Hello Sir. Good evening”.
    And when you give command as shutdown, **sys.exit()** will be called to terminate
    the program.'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**它是如何工作的：**如果你的命令中包含了**hello**这个词，那么根据一天中的时间，机器人会向用户打招呼。如果时间在中午12点之后，机器人会回应“Hello
    Sir. Good afternoon”，如果时间在下午6点之后，机器人会回应“Hello Sir. Good evening”。当你发出shutdown命令时，**sys.exit()**将被调用以终止程序。'
- en: '[PRE21] #Greet Sofia      elif ''hello'' in command:          day_time = int(strftime(''%H''))          if
    day_time < 12:              sofiaResponse(''Hello Sir. Good morning'')          elif
    12 <= day_time < 18:              sofiaResponse(''Hello Sir. Good afternoon'')          else:              sofiaResponse(''Hello
    Sir. Good evening'')#to terminate the program  elif ''shutdown'' in command:       sofiaResponse(''Bye
    bye Sir. Have a nice day'')       sys.exit() [PRE22]`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE21] #问候索非亚      elif ''hello'' in command:          day_time = int(strftime(''%H''))          if
    day_time < 12:              sofiaResponse(''Hello Sir. Good morning'')          elif
    12 <= day_time < 18:              sofiaResponse(''Hello Sir. Good afternoon'')          else:              sofiaResponse(''Hello
    Sir. Good evening'')#终止程序  elif ''shutdown'' in command:       sofiaResponse(''Bye
    bye Sir. Have a nice day'')       sys.exit() [PRE22]`'
- en: '**8\. Play you a song on VLC media player**'
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**8. 在VLC媒体播放器中播放一首歌**'
- en: This feature allows your voice bot to play your desired song in VLC media player.
    The user will say “Sofia play me a song”, the bot will ask “What song shall I
    play Sir?”. Just say the name of the song and Sofia will download the song from
    youtube in your local drive, play that song on the VLC media player and if you
    again play a song the previously downloaded song will get deleted automatically.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能允许你的语音机器人在VLC媒体播放器中播放你想要的歌曲。用户会说“索非亚，给我放首歌”，机器人会问“Sir，你想让我播放什么歌曲？”。只需说出歌曲的名字，索非亚将从youtube上下载这首歌到你的本地驱动器中，播放这首歌，并且如果你再次请求播放另一首歌，之前下载的歌曲将会自动删除。
- en: '**How it works :**If you have said the phrase **play me a song** in your command,
    then it will ask you what video song to play. The song you will ask will be searched
    in youtube.com, If found than the song will be downloaded in your local directory
    using pythons youtube_dl library. The [youtube-dl](https://ytdl-org.github.io/youtube-dl/index.html) is
    a command-line program to download videos from YouTube.com and a few more sites.
    Now the song will be played as soon as it gets downloded using pythons [VLC library](https://pypi.org/project/python-vlc/) and
    play(path_to__videosong) module actually playes the song.'
  id: totrans-90
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**它是如何工作的：**如果你的命令中包含了**play me a song**这个短语，它将会询问你要播放哪个视频歌曲。你要求的歌曲将在youtube.com上进行搜索，如果找到，歌曲将使用Python的youtube_dl库下载到你的本地目录中。**[youtube-dl](https://ytdl-org.github.io/youtube-dl/index.html)**是一个从YouTube.com及其他几个网站下载视频的命令行程序。现在歌曲将使用Python的**[VLC
    library](https://pypi.org/project/python-vlc/)**播放，play(path_to__videosong)模块实际播放歌曲。'
- en: Now if the next time you ask for any other song, the local directory will be
    flushed and a new song will be downloaded in that directory.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果下次你要求播放其他歌曲，本地目录将会被清空，并且新的歌曲将会下载到该目录中。
- en: '[PRE23] elif ''play me a song'' in command:          path = ''/Users/nageshsinghchauhan/Documents/videos/''          folder
    = path          for the_file in os.listdir(folder):              file_path = os.path.join(folder,
    the_file)              try:                  if os.path.isfile(file_path):                      os.unlink(file_path)              except
    Exception as e:                  print(e)sofiaResponse(''What song shall I play
    Sir?'')mysong = myCommand()          if mysong:              flag = 0              url
    = "https://www.youtube.com/results?search_query=" + mysong.replace('' '', ''+'')              response
    = urllib2.urlopen(url)              html = response.read()              soup1
    = soup(html,"lxml")              url_list = []              for vid in soup1.findAll(attrs={''class'':''yt-uix-tile-link''}):                  if
    (''https://www.youtube.com'' + vid[''href'']).startswith("https://www.youtube.com/watch?v="):                      flag
    = 1                      final_url = ''https://www.youtube.com'' + vid[''href'']                      url_list.append(final_url)url
    = url_list[0]              ydl_opts = {}os.chdir(path)              with youtube_dl.YoutubeDL(ydl_opts)
    as ydl:                  ydl.download([url])              vlc.play(path)if flag
    == 0:                  sofiaResponse(''I have not found anything in Youtube '')
    [PRE24]`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE23] elif ''play me a song'' in command:          path = ''/Users/nageshsinghchauhan/Documents/videos/''          folder
    = path          for the_file in os.listdir(folder):              file_path = os.path.join(folder,
    the_file)              try:                  if os.path.isfile(file_path):                      os.unlink(file_path)              except
    Exception as e:                  print(e)sofiaResponse(''我应该播放什么歌，先生？'')mysong
    = myCommand()          if mysong:              flag = 0              url = "https://www.youtube.com/results?search_query="
    + mysong.replace('' '', ''+'')              response = urllib2.urlopen(url)              html
    = response.read()              soup1 = soup(html,"lxml")              url_list
    = []              for vid in soup1.findAll(attrs={''class'':''yt-uix-tile-link''}):                  if
    (''https://www.youtube.com'' + vid[''href'']).startswith("https://www.youtube.com/watch?v="):                      flag
    = 1                      final_url = ''https://www.youtube.com'' + vid[''href'']                      url_list.append(final_url)url
    = url_list[0]              ydl_opts = {}os.chdir(path)              with youtube_dl.YoutubeDL(ydl_opts)
    as ydl:                  ydl.download([url])              vlc.play(path)if flag
    == 0:                  sofiaResponse(''我在YouTube上没有找到任何内容 '') [PRE24]'
- en: '**9\. Change desktop wallpaper.**'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**9\. 更改桌面壁纸。**'
- en: You guys can also change your desktop wallpaper using this feature. When you
    say something like “change wallpaper” or “Sofia please change wallpaper” the bot
    will download random wallpaper from [unsplash.com](https://unsplash.com/)and sets
    it as your desktop background.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你们也可以使用此功能更改桌面壁纸。当你说类似“更改壁纸”或“索非亚，请更改壁纸”的话时，机器人将从[unsplash.com](https://unsplash.com/)下载随机壁纸并将其设置为桌面背景。
- en: '**How it works : **If you have said the phrase **change wallpaper** in your
    command, the program will download a random wallpaper from unsplash.com, store
    it in local directory and set it as your desktop wallpaper using subprocess.call().
    I have used unsplash API to get access to its content.'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：**如果你在命令中说了**更改壁纸**，程序将从unsplash.com下载一张随机壁纸，存储在本地目录中，并使用subprocess.call()将其设置为桌面壁纸。我使用了unsplash
    API来访问其内容。'
- en: Now if the next time you ask to change the wallpaper again, your local directory
    will be flushed and a new wallpaper will be downloaded in that directory.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果下次你再次要求更改壁纸，本地目录将被清空，新壁纸将被下载到该目录中。
- en: '[PRE25] elif ''change wallpaper'' in command:          folder = ''/Users/nageshsinghchauhan/Documents/wallpaper/''          for
    the_file in os.listdir(folder):              file_path = os.path.join(folder,
    the_file)              try:                  if os.path.isfile(file_path):                      os.unlink(file_path)              except
    Exception as e:                  print(e)          api_key = ''fd66364c0ad9e0f8aabe54ec3cfbed0a947f3f4014ce3b841bf2ff6e20948795''          url
    = ''https://api.unsplash.com/photos/random?client_id='' + api_key #pic from unspalsh.com          f
    = urllib2.urlopen(url)          json_string = f.read()          f.close()          parsed_json
    = json.loads(json_string)          photo = parsed_json[''urls''][''full'']          urllib.urlretrieve(photo,
    "/Users/nageshsinghchauhan/Documents/wallpaper/a") # Location where we download
    the image to.          subprocess.call(["killall Dock"], shell=True)          sofiaResponse(''wallpaper
    changed successfully'') [PRE26]`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE25] elif ''change wallpaper'' in command:          folder = ''/Users/nageshsinghchauhan/Documents/wallpaper/''          for
    the_file in os.listdir(folder):              file_path = os.path.join(folder,
    the_file)              try:                  if os.path.isfile(file_path):                      os.unlink(file_path)              except
    Exception as e:                  print(e)          api_key = ''fd66364c0ad9e0f8aabe54ec3cfbed0a947f3f4014ce3b841bf2ff6e20948795''          url
    = ''https://api.unsplash.com/photos/random?client_id='' + api_key #pic from unspalsh.com          f
    = urllib2.urlopen(url)          json_string = f.read()          f.close()          parsed_json
    = json.loads(json_string)          photo = parsed_json[''urls''][''full'']          urllib.urlretrieve(photo,
    "/Users/nageshsinghchauhan/Documents/wallpaper/a") # 保存图像的路径          subprocess.call(["killall
    Dock"], shell=True)          sofiaResponse(''壁纸更改成功'') [PRE26]`'
- en: '**10\. Tells you latest news feeds.**'
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**10\. 告诉你最新的新闻动态。**'
- en: Sofia can also tell you the latest news update. The user just has to say “Sofia
    what are the top news for today ?” or “tell me the news for today”.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Sofia 还可以告诉你最新的新闻更新。用户只需说“ Sofia, 今天的头条新闻是什么？” 或“告诉我今天的新闻”。
- en: '**How it works : **If you have said the phrase **news for today** in your command
    then it will scrape data using [Beautiful Soup ](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)from
    Google News RSS() and read it for you. For convineince I have set number of news
    limit to 15.'
  id: totrans-100
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：**如果你在命令中说了短语**news for today**，它会使用[Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)从
    Google News RSS() 抓取数据并为你阅读。为了方便，我将新闻数量限制设置为 15。'
- en: '[PRE27] elif ''news for today'' in command:          try:              news_url="https://news.google.com/news/rss"              Client=urlopen(news_url)              xml_page=Client.read()              Client.close()              soup_page=soup(xml_page,"xml")              news_list=soup_page.findAll("item")              for
    news in news_list[:15]:                  sofiaResponse(news.title.text.encode(''utf-8''))          except
    Exception as e:                  print(e) [PRE28]`'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE27] elif ''news for today'' in command:          try:              news_url="https://news.google.com/news/rss"              Client=urlopen(news_url)              xml_page=Client.read()              Client.close()              soup_page=soup(xml_page,"xml")              news_list=soup_page.findAll("item")              for
    news in news_list[:15]:                  sofiaResponse(news.title.text.encode(''utf-8''))          except
    Exception as e:                  print(e) [PRE28]`'
- en: '**11\. Tells you about almost anything you ask.**'
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**11\. 告诉你你询问的几乎所有事情。**'
- en: Your bot can fetch details of almost anything you ask her. Like “Sofia tell
    me about Google” or “Please tell me about Supercomputers” or “please tell me about
    the Internet”. So as you can see you can ask about almost anything.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你的机器人几乎可以获取你询问的所有细节。例如，“Sofia，告诉我关于 Google 的信息”或“请告诉我关于超级计算机的信息”或“请告诉我关于互联网的信息”。所以，你可以看到你几乎可以询问任何事情。
- en: '**How it works : **If you have said the phrase **tell me about** in your command
    then it will search for the keyword in the user command using re.search(). Using
    pythons wikipedia library it will search for that topic and extract first 500
    characters(if you dont specify the limit the bot will read the whole page for
    you). [Wikipedia](https://pypi.org/project/python-vlc/) is a Python library that
    makes it easy to access and parse data from Wikipedia.'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**工作原理：**如果你在命令中说了短语**tell me about**，它会使用`re.search()`在用户命令中搜索关键词。利用 Python
    的 Wikipedia 库，它会搜索该主题并提取前 500 个字符（如果你没有指定限制，机器人会为你阅读整个页面）。[Wikipedia](https://pypi.org/project/python-vlc/)是一个
    Python 库，使得访问和解析 Wikipedia 数据变得非常容易。'
- en: '[PRE29] elif ''tell me about'' in command:          reg_ex = re.search(''tell
    me about (.*)'', command)          try:              if reg_ex:                  topic
    = reg_ex.group(1)                  ny = wikipedia.page(topic)                  sofiaResponse(ny.content[:500].encode(''utf-8''))          except
    Exception as e:                  sofiaResponse(e) [PRE30]`'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE29] elif ''tell me about'' in command:          reg_ex = re.search(''tell
    me about (.*)'', command)          try:              if reg_ex:                  topic
    = reg_ex.group(1)                  ny = wikipedia.page(topic)                  sofiaResponse(ny.content[:500].encode(''utf-8''))          except
    Exception as e:                  sofiaResponse(e) [PRE30]'
- en: Let's put everything together
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容整合起来
- en: '[PRE31] import speech_recognition as sr  import os  import sys  import re  import
    webbrowser  import smtplib  import requests  import subprocess  from pyowm import
    OWM  import youtube_dl  import vlc  import urllib  import urllib2  import json  from
    bs4 import BeautifulSoup as soup  from urllib2 import urlopen  import wikipedia  import
    random  from time import strftimedef sofiaResponse(audio):      "speaks audio
    passed as argument"      print(audio)      for line in audio.splitlines():          os.system("say
    " + audio)def myCommand():      "listens for commands"      r = sr.Recognizer()      with
    sr.Microphone() as source:          print(''Say something...'')          r.pause_threshold
    = 1          r.adjust_for_ambient_noise(source, duration=1)          audio = r.listen(source)      try:          command
    = r.recognize_google(audio).lower()          print(''You said: '' + command +
    ''\n'')      #loop back to continue to listen for commands if unrecognizable speech
    is received      except sr.UnknownValueError:          print(''....'')          command
    = myCommand();      return commanddef assistant(command):      "if statements
    for executing commands"#open subreddit Reddit      if ''open reddit'' in command:          reg_ex
    = re.search(''open reddit (.*)'', command)          url = ''https://www.reddit.com/''          if
    reg_ex:              subreddit = reg_ex.group(1)              url = url + ''r/''
    + subreddit          webbrowser.open(url)          sofiaResponse(''The Reddit
    content has been opened for you Sir.'')elif ''shutdown'' in command:          sofiaResponse(''Bye
    bye Sir. Have a nice day'')          sys.exit()#open website      elif ''open''
    in command:          reg_ex = re.search(''open (.+)'', command)          if reg_ex:              domain
    = reg_ex.group(1)              print(domain)              url = ''https://www.''
    + domain              webbrowser.open(url)              sofiaResponse(''The website
    you have requested has been opened for you Sir.'')          else:              pass#greetings      elif
    ''hello'' in command:          day_time = int(strftime(''%H''))          if day_time
    < 12:              sofiaResponse(''Hello Sir. Good morning'')          elif 12
    <= day_time < 18:              sofiaResponse(''Hello Sir. Good afternoon'')          else:              sofiaResponse(''Hello
    Sir. Good evening'')elif ''help me'' in command:          sofiaResponse("""          You
    can use these commands and I''ll help you out:1\. Open reddit subreddit : Opens
    the subreddit in default browser.          2\. Open xyz.com : replace xyz with
    any website name          3\. Send email/email : Follow up questions such as recipient
    name, content will be asked in order.          4\. Current weather in {cityname}
    : Tells you the current condition and temperture          5\. Hello          6\.
    play me a video : Plays song in your VLC media player          7\. change wallpaper
    : Change desktop wallpaper          8\. news for today : reads top news of today          9\.
    time : Current system time          10\. top stories from google news (RSS feeds)          11\.
    tell me about xyz : tells you about xyz          """)#joke      elif ''joke''
    in command:          res = requests.get(                  ''https://icanhazdadjoke.com/'',                  headers={"Accept":"application/json"})          if
    res.status_code == requests.codes.ok:              sofiaResponse(str(res.json()[''joke'']))          else:              sofiaResponse(''oops!I
    ran out of jokes'')#top stories from google news      elif ''news for today''
    in command:          try:              news_url="https://news.google.com/news/rss"              Client=urlopen(news_url)              xml_page=Client.read()              Client.close()              soup_page=soup(xml_page,"xml")              news_list=soup_page.findAll("item")              for
    news in news_list[:15]:                  sofiaResponse(news.title.text.encode(''utf-8''))          except
    Exception as e:                  print(e)#current weather      elif ''current
    weather'' in command:          reg_ex = re.search(''current weather in (.*)'',
    command)          if reg_ex:              city = reg_ex.group(1)              owm
    = OWM(API_key=''ab0d5e80e8dafb2cb81fa9e82431c1fa'')              obs = owm.weather_at_place(city)              w
    = obs.get_weather()              k = w.get_status()              x = w.get_temperature(unit=''celsius'')              sofiaResponse(''Current
    weather in %s is %s. The maximum temperature is %0.2f and the minimum temperature
    is %0.2f degree celcius'' % (city, k, x[''temp_max''], x[''temp_min'']))#time      elif
    ''time'' in command:          import datetime          now = datetime.datetime.now()          sofiaResponse(''Current
    time is %d hours %d minutes'' % (now.hour, now.minute))elif ''email'' in command:          sofiaResponse(''Who
    is the recipient?'')          recipient = myCommand()          if ''rajat'' in
    recipient:              sofiaResponse(''What should I say to him?'')              content
    = myCommand()              mail = smtplib.SMTP(''smtp.gmail.com'', 587)              mail.ehlo()              mail.starttls()              mail.login(''your_email_address'',
    ''your_password'')              mail.sendmail(''sender_email'', ''receiver_email'',
    content)              mail.close()              sofiaResponse(''Email has been
    sent successfuly. You can check your inbox.'')          else:              sofiaResponse(''I
    don\''t know what you mean!'')#launch any application      elif ''launch'' in
    command:          reg_ex = re.search(''launch (.*)'', command)          if reg_ex:              appname
    = reg_ex.group(1)              appname1 = appname+".app"              subprocess.Popen(["open",
    "-n", "/Applications/" + appname1], stdout=subprocess.PIPE)sofiaResponse(''I have
    launched the desired application'')#play youtube song      elif ''play me a song''
    in command:          path = ''/Users/nageshsinghchauhan/Documents/videos/''          folder
    = path          for the_file in os.listdir(folder):              file_path = os.path.join(folder,
    the_file)              try:                  if os.path.isfile(file_path):                      os.unlink(file_path)              except
    Exception as e:                  print(e)sofiaResponse(''What song shall I play
    Sir?'')          mysong = myCommand()          if mysong:              flag =
    0              url = "https://www.youtube.com/results?search_query=" + mysong.replace(''
    '', ''+'')              response = urllib2.urlopen(url)              html = response.read()              soup1
    = soup(html,"lxml")              url_list = []              for vid in soup1.findAll(attrs={''class'':''yt-uix-tile-link''}):                  if
    (''https://www.youtube.com'' + vid[''href'']).startswith("https://www.youtube.com/watch?v="):                      flag
    = 1                      final_url = ''https://www.youtube.com'' + vid[''href'']                      url_list.append(final_url)url
    = url_list[0]              ydl_opts = {}os.chdir(path)              with youtube_dl.YoutubeDL(ydl_opts)
    as ydl:                  ydl.download([url])              vlc.play(path)if flag
    == 0:                  sofiaResponse(''I have not found anything in Youtube '')#change
    wallpaper      elif ''change wallpaper'' in command:          folder = ''/Users/nageshsinghchauhan/Documents/wallpaper/''          for
    the_file in os.listdir(folder):              file_path = os.path.join(folder,
    the_file)              try:                  if os.path.isfile(file_path):                      os.unlink(file_path)              except
    Exception as e:                  print(e)          api_key = ''fd66364c0ad9e0f8aabe54ec3cfbed0a947f3f4014ce3b841bf2ff6e20948795''          url
    = ''https://api.unsplash.com/photos/random?client_id='' + api_key #pic from unspalsh.com          f
    = urllib2.urlopen(url)          json_string = f.read()          f.close()          parsed_json
    = json.loads(json_string)          photo = parsed_json[''urls''][''full'']          urllib.urlretrieve(photo,
    "/Users/nageshsinghchauhan/Documents/wallpaper/a") # Location where we download
    the image to.          subprocess.call(["killall Dock"], shell=True)          sofiaResponse(''wallpaper
    changed successfully'')#askme anything      elif ''tell me about'' in command:          reg_ex
    = re.search(''tell me about (.*)'', command)          try:              if reg_ex:                  topic
    = reg_ex.group(1)                  ny = wikipedia.page(topic)                  sofiaResponse(ny.content[:500].encode(''utf-8''))          except
    Exception as e:                  print(e)                  sofiaResponse(e)sofiaResponse(''Hi
    User, I am Sofia and I am your personal voice assistant, Please give a command
    or say "help me" and I will tell you what all I can do for you.'')#loop to continue
    executing multiple commands  while True:      assistant(myCommand()) [PRE32]`'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: So you have seen how just by writing simple lines of python code we can create
    a very cool voice-based desktop/laptop assistant. Apart from these features, you
    can also include many different features in your voice assistant.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Please not that once you start executing your program, be loud and clear while
    you are interacting with voice assistant because it may happen that if your voice
    is not clear your voice assistant may not be able to interpret you properly.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Conclusion: What the future holds'
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Throughout the history of computing, user interfaces have become progressively
    natural to use. The screen and keyboard were one step in this direction. The mouse
    and graphical user interface were another. Touch screens are the most recent development.
    The next step will most likely consist of a mix of augmented reality, gestures
    and voice commands. After all, it is often easier to ask a question or have a
    conversation than it is to type something or enter multiple details in an online
    form.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: The more a person interacts with voice-activated devices, the more trends, and
    patterns the system identifies based on the information it receives. Then, this
    data can be utilized to determine user preferences and tastes, which is a long-term
    selling point for making a home smarter. Google and Amazon are looking to integrate
    voice-enabled artificial intelligence capable of analyzing and responding to human
    emotion.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: I hope you guys have enjoyed reading this article. Share your thoughts/comments/doubts
    in the comment section. You can reach me out over [LinkedIn](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Nagesh Singh Chauhan](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/)**
    is a Big data developer at CirrusLabs. He has over 4 years of working experience
    in various sectors like Telecom, Analytics, Sales, Data Science having specialisation
    in various Big data components.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/build-your-first-voice-assistant-85a5a49f6cc1).
    Reposted with permission.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[Practical Speech Recognition with Python: The Basics](/2019/07/practical-speech-recognition-python-basics.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comparison of the Top Speech Processing APIs](/2018/12/activewizards-comparison-speech-processing-apis.html)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TensorFlow vs PyTorch vs Keras for NLP](/2019/09/tensorflow-pytorch-keras-nlp.html)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Overcoming Barriers in Multi-lingual Voice Technology: Top 5…](https://www.kdnuggets.com/2023/08/overcoming-barriers-multilingual-voice-technology-top-5-challenges-innovative-solutions.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[克服多语言语音技术中的障碍：前5大挑战及创新解决方案](https://www.kdnuggets.com/2023/08/overcoming-barriers-multilingual-voice-technology-top-5-challenges-innovative-solutions.html)'
- en: '[It''s alive! Build your first robots with Python and some cheap,…](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[它活过来了！用Python和一些便宜的基础组件构建你的第一个机器人](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
- en: '[GPT-Engineer: Your New AI Coding Assistant](https://www.kdnuggets.com/2023/07/gpt-engineer-ai-coding-assistant.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GPT-工程师：你的新AI编程助手](https://www.kdnuggets.com/2023/07/gpt-engineer-ai-coding-assistant.html)'
- en: '[How to Get Your First Job in Data Science without Any Work Experience](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在没有任何工作经验的情况下获得你的第一份数据科学工作](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
- en: '[Building and Training Your First Neural Network with TensorFlow and Keras](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用TensorFlow和Keras构建和训练你的第一个神经网络](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
- en: '[From Zero to Hero: Create Your First ML Model with PyTorch](https://www.kdnuggets.com/from-zero-to-hero-create-your-first-ml-model-with-pytorch)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从零到英雄：用PyTorch创建你的第一个机器学习模型](https://www.kdnuggets.com/from-zero-to-hero-create-your-first-ml-model-with-pytorch)'
