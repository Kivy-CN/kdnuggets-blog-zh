- en: How To Optimize Dockerfile Instructions for Faster Build Times
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何优化 Dockerfile 指令以加快构建时间
- en: 原文：[https://www.kdnuggets.com/how-to-optimize-dockerfile-instructions-for-faster-build-times](https://www.kdnuggets.com/how-to-optimize-dockerfile-instructions-for-faster-build-times)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-optimize-dockerfile-instructions-for-faster-build-times](https://www.kdnuggets.com/how-to-optimize-dockerfile-instructions-for-faster-build-times)
- en: '![How To Optimize Dockerfile Instructions for Faster Build Times](../Images/6482b856bf98e0dd989cc253f576f91b.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 Dockerfile 指令以加快构建时间](../Images/6482b856bf98e0dd989cc253f576f91b.png)'
- en: Image by Editor | Midjourney & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑者提供的图像 | Midjourney & Canva
- en: You can optimize Dockerfiles for faster build times by leveraging the build
    cache, reducing the build context, and more. This tutorial goes over these best
    practices to follow when creating Dockerfiles.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过利用构建缓存、减少构建上下文等方式来优化 Dockerfiles 以加快构建时间。本教程介绍了创建 Dockerfiles 时需要遵循的最佳实践。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Prerequisites
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 前提条件
- en: You should have Docker installed. [Get Docker](https://docs.docker.com/get-docker/)
    for your operating system if you haven’t already.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该安装 Docker。如果尚未安装，请 [获取 Docker](https://docs.docker.com/get-docker/) 适用于你的操作系统。
- en: 1\. Use a Smaller Base Image
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 使用更小的基础镜像
- en: First, you can start with a smaller base image to create minimal images. This
    reduces the overall size of the Docker image and speeds up the build process.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你可以从更小的基础镜像开始，创建最小化镜像。这可以减少 Docker 镜像的总体大小，并加快构建过程。
- en: For example, when containerizing Python apps, you can start with a `python:3.x-slim`
    image, a smaller version of `python:3.x`, containing only the essential components
    needed to run Python instead of the default `python:3.x`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当容器化 Python 应用程序时，可以从 `python:3.x-slim` 镜像开始，这是一种较小的 `python:3.x` 版本，仅包含运行
    Python 所需的基本组件，而不是默认的 `python:3.x`。
- en: Read [How To Create Minimal Docker Images for Python Applications](https://www.kdnuggets.com/how-to-create-minimal-docker-images-for-python-applications)
    to learn more.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读 [如何为 Python 应用程序创建最小化 Docker 镜像](https://www.kdnuggets.com/how-to-create-minimal-docker-images-for-python-applications)
    以了解更多。
- en: 2\. Leverage Docker Build Cache
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 利用 Docker 构建缓存
- en: The order of instructions in a Dockerfile influences the build times due to
    how Docker leverages its build cache.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 中指令的顺序会影响构建时间，因为 Docker 会利用其构建缓存。
- en: Docker builds images by executing instructions in the Dockerfile sequentially—creating
    a new image layer for each instruction. If a layer hasn't changed since the last
    build, Docker can reuse the cached layer, speeding up the build process.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 通过顺序执行 Dockerfile 中的指令来构建镜像——为每个指令创建一个新的镜像层。如果某层自上次构建以来没有更改，Docker 可以重用缓存的层，从而加快构建过程。
- en: 'So it’s important to **optimize the order of instructions to maximize cache
    hits**:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，**优化指令顺序以最大化缓存命中率** 是很重要的：
- en: '**Place frequently changing instructions last**: Place instructions that change
    often, such as copying the application code towards the end of the Dockerfile.
    This reduces the chances of invalidating the cache for the entire build.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将经常更改的指令放在最后**：将那些经常更改的指令，比如复制应用程序代码，放在 Dockerfile 的末尾。这可以减少使整个构建缓存失效的可能性。'
- en: '**Place less frequently changing instructions early**: Instructions like installing
    OS packages, setting environment variables, and installing dependencies (if dependencies
    don''t change often) should be placed early to maximize cache hits.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将不经常更改的指令放在前面**：像安装操作系统包、设置环境变量以及安装不常更改的依赖项等指令应放在前面，以最大化缓存命中率。'
- en: 'Let''s take an example Dockerfile:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个示例 Dockerfile：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this initial Dockerfile, any change in the application code will invalidate
    the cache for the entire build process, including the installation of dependencies.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the optimized version:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this optimized Dockerfile, if there's a change in the application code, Docker
    can still use the cached layers for installing dependencies. This way, changes
    to application code do not unnecessarily trigger reinstallation of dependencies.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use Multi-Stage Builds
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Multi-stage builds allow you to separate the build environment from the final
    runtime environment, which can reduce the size of the final image by only including
    necessary runtime dependencies.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following Dokcerfile with multi-stage build:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this example, the build dependencies are installed in the `builder` stage,
    and only the necessary runtime dependencies are copied to the final image.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Minimize Build Context with .dockerignore Files
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ensure you have a `.dockerignore` file to exclude unnecessary files from being
    copied into the Docker context, reducing the build time. Similar to `.gitignore`,
    this file tells Docker which files to ignore during the build process, reducing
    the context size.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: In the `.dockerignore` file, you can include temporary files, virtual environments,
    IDE settings, and other unnecessary files that you do not want included in the
    build context.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: From reducing the base image size to optimizing the build context, these optimizations
    should help you make your Docker builds more efficient.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Additional Resources
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following resources should learn more:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[Docker build cache](https://docs.docker.com/build/cache/)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Best practices for Dockerfile intsructions](https://docs.docker.com/develop/develop-images/instructions/)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Optimize SQL Queries for Faster Data Retrieval](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tailor ChatGPT to Fit Your Needs with Custom Instructions](https://www.kdnuggets.com/2023/08/tailor-chatgpt-fit-needs-custom-instructions.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Faster Way to Prepare Time-Series Data with the AI & Analytics Engine](https://www.kdnuggets.com/2021/12/piexchange-faster-way-prepare-timeseries-data-ai-analytics-engine.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 AI 和分析引擎更快地准备时间序列数据](https://www.kdnuggets.com/2021/12/piexchange-faster-way-prepare-timeseries-data-ai-analytics-engine.html)'
- en: '[Learn Machine Learning 4X Faster by Participating in Competitions](https://www.kdnuggets.com/2022/01/learn-machine-learning-4x-faster-participating-competitions.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过参与竞赛将机器学习速度提高 4 倍](https://www.kdnuggets.com/2022/01/learn-machine-learning-4x-faster-participating-competitions.html)'
- en: '[oBERT: Compound Sparsification Delivers Faster Accurate Models for NLP](https://www.kdnuggets.com/2022/05/obert-compound-sparsification-delivers-faster-accurate-models-nlp.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[oBERT：复合稀疏化实现更快、更准确的 NLP 模型](https://www.kdnuggets.com/2022/05/obert-compound-sparsification-delivers-faster-accurate-models-nlp.html)'
