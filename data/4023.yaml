- en: 5 Common Python Gotchas (And How To Avoid Them)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个常见的 Python 陷阱（以及如何避免它们）
- en: 原文：[https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)
- en: '![5 Common Python Gotchas (And How To Avoid Them)](../Images/0dd7eeede41f544136175d06e3de1e51.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![5 个常见的 Python 陷阱（以及如何避免它们）](../Images/0dd7eeede41f544136175d06e3de1e51.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Python is a beginner-friendly and versatile programming language known for its
    simplicity and readability. Its elegant syntax, however, is not immune to quirks
    that can surprise even experienced Python developers. And understanding these
    is essential for writing bug-free code—or pain-free debugging if you will.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种对初学者友好且多才多艺的编程语言，以其简洁性和可读性而闻名。然而，它优雅的语法并非没有奇怪之处，这可能会让即使是经验丰富的 Python
    开发者感到意外。理解这些问题对于编写无错误的代码——或者说无痛调试——是至关重要的。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'This tutorial explores some of these gotchas: mutable defaults, variable scope
    in loops and comprehensions, tuple assignment, and more. We’ll code simple examples
    to see *why* things work the way they do, and also look at *how* we can avoid
    these (if we actually can 🙂).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程探讨了一些这些问题：可变的默认值、循环和推导式中的变量作用域、元组赋值等。我们将编写简单的示例来了解*为什么*事情会这样工作，并且还会研究*如何*避免这些（如果我们真的可以的话
    🙂）。
- en: So let’s get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们开始吧！
- en: 1\. Mutable Defaults
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 可变的默认值
- en: In Python, mutable defaults are common sharp corners. You’ll run into unexpected
    behavior anytime you define a function with mutable objects, like lists or dictionaries,
    as default arguments.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可变的默认值常常是个棘手的问题。每当你定义一个带有可变对象（如列表或字典）作为默认参数的函数时，你会遇到意想不到的行为。
- en: '**The default value is evaluated only once, when the function is defined, and
    not each time the function is called**. This can lead to unexpected behavior if
    you mutate the default argument within the function.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认值仅在函数定义时评估一次，而不是每次调用函数时**。如果你在函数内更改默认参数，这可能会导致意想不到的行为。'
- en: 'Let''s take an example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个例子：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, `add_to_cart` is a function that takes an item and appends
    it to a list `cart`. The default value of `cart` is an empty list. Meaning calling
    the function without an item to add returns an empty cart.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`add_to_cart` 是一个函数，它接受一个项目并将其追加到一个列表 `cart` 中。`cart` 的默认值是一个空列表。也就是说，如果调用函数时没有添加项目，它会返回一个空购物车。
- en: 'And here are a couple of function calls:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是几个函数调用：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This works as expected. But what happens now?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这按预期工作。但现在会发生什么呢？
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Because the default argument is a list—a mutable object—it retains its state
    between function calls. So each time you call `add_to_cart`, it appends the value
    to the same list object created during the function definition. In this example,
    it’s like all users sharing the same cart.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为默认参数是一个列表——一个可变对象——它在函数调用之间保持其状态。所以每次调用 `add_to_cart` 时，它都会将值追加到函数定义时创建的同一个列表对象中。在这个例子中，就像所有用户共享同一个购物车一样。
- en: How To Avoid
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何避免
- en: 'As a workaround, you can set `cart` to `None` and initialize the cart inside
    the function like so:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 作为解决方案，你可以将 `cart` 设置为 `None`，然后在函数内部初始化购物车，如下所示：
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So each user now has a separate cart. 🙂
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 所以每个用户现在都有一个单独的购物车。🙂
- en: 'If you need a refresher on Python functions and function arguments, read [Python
    Function Arguments: A Definitive Guide](/2023/02/python-function-arguments-definitive-guide.html).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要复习 Python 函数和函数参数，可以阅读 [Python 函数参数：终极指南](/2023/02/python-function-arguments-definitive-guide.html)。
- en: 2\. Variable Scope in Loops and Comprehensions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 循环和推导式中的变量作用域
- en: Python's scope oddities call for a tutorial of their own. But we’ll look at
    one such oddity here.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的作用域怪癖需要一个专门的教程。不过我们将在这里看看其中一个怪癖。
- en: 'Look at the following snippet:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下代码片段：
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The variable `x` is set to 10\. But `x` is also the looping variable. But we’d
    assume that the looping variable’s scope is limited to the for loop block, yes?
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 `x` 被设置为 10。但是 `x` 也是循环变量。我们假设循环变量的作用范围仅限于 for 循环块，对吗？
- en: 'Let’s look at the output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看输出：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We see that `x` is now 4, the final value it takes in the loop, and not the
    initial value of 10 we set it to.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到 `x` 现在是 4，这个值是它在循环中取到的最终值，而不是我们设置的初始值 10。
- en: 'Now let’s see what happens if we replace the for loop with a comprehension
    expression:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如果我们将 for 循环替换为列表解析表达式会发生什么：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, `x` is 10, the value we set it to before the comprehension expression:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`x` 是 10，这是我们在列表解析表达式之前设置的值：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How To Avoid
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何避免
- en: 'To avoid unexpected behavior: If you’re using loops, ensure that you don’t
    name the looping variable the same as another variable you’d want to access later.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免意外行为：如果你在使用循环时，确保不要将循环变量命名为你稍后想要访问的其他变量相同的名称。
- en: 3\. Integer Identity Quirk
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 整数身份特性
- en: In Python, we use the `is` keyword for checking object identity. Meaning it
    checks whether two variables reference the same object in memory. And to check
    for equality, we use the `==` operator. Yes?
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们使用 `is` 关键字来检查对象身份。这意味着它检查两个变量是否引用了内存中的同一对象。要检查相等性，我们使用 `==` 操作符。对吗？
- en: 'Now, start a Python REPL and run the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，启动一个 Python REPL 并运行以下代码：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now run this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行这个：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Wait, why does this happen?** Well, this is due to "integer caching" or "interning"
    in CPython, the standard implementation of Python.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**等等，为什么会发生这种情况？** 好吧，这是由于 CPython 中的“整数缓存”或“驻留”。'
- en: CPython [caches integer objects](https://stackoverflow.com/questions/15171695/whats-with-the-integer-cache-maintained-by-the-interpreter)
    in the range of -5 to 256\. **Meaning every time you use an integer within this
    range, Python will use the same object in memory.** Therefore, when you compare
    two integers within this range using the `is` keyword, the result is `True` because
    they *refer to the same object in memory*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: CPython [缓存整数对象](https://stackoverflow.com/questions/15171695/whats-with-the-integer-cache-maintained-by-the-interpreter)
    在 -5 到 256 的范围内。**这意味着每次你使用这个范围内的整数时，Python 将使用内存中的相同对象。** 因此，当你使用 `is` 关键字比较这范围内的两个整数时，结果是
    `True`，因为它们*指向内存中的相同对象*。
- en: That’s why `a is b` returns `True`. You can also verify this by printing out
    `id(a)` and `id(b)`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 `a is b` 返回 `True`。你也可以通过打印 `id(a)` 和 `id(b)` 来验证这一点。
- en: However, integers outside this range are not cached. And each occurrence of
    such integers creates a new object in memory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这个范围之外的整数不会被缓存。每次出现这样的整数都会在内存中创建一个新对象。
- en: So when you compare two integers outside the cached range using the `is` keyword
    (yes, `x` and `y` both set to 280 in our example), the result is `False` because
    they are indeed two different objects in memory.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当你使用 `is` 关键字比较两个范围之外的整数时（是的，在我们的示例中 `x` 和 `y` 都设置为 280），结果是 `False`，因为它们确实是内存中的两个不同对象。
- en: How To Avoid
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何避免
- en: This behavior shouldn’t be a problem unless you try to use the `is` for comparing
    equality of two objects. So always use the `==` operator to check if any two Python
    objects have the same value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你尝试使用 `is` 来比较两个对象的相等性，否则这种行为不应成为问题。因此，总是使用 `==` 操作符来检查任何两个 Python 对象是否具有相同的值。
- en: 4\. Tuple Assignment and Mutable Objects
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 元组赋值和可变对象
- en: If you’re familiar with built-in data structures in Python, you know that tuples
    are **immutable**. So you *cannot* modify them in place. Data structures like
    lists and dictionaries, on the other hand, are **mutable**. Meaning you *can*
    change them in place.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉 Python 的内置数据结构，你会知道元组是 **不可变** 的。所以你 *不能* 就地修改它们。另一方面，像列表和字典这样的数据结构是 **可变**
    的。这意味着你 *可以* 就地更改它们。
- en: '**But what about tuples that contain one or more mutable objects?**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**但是包含一个或多个可变对象的元组怎么办？**'
- en: 'It''s helpful to started a Python REPL and run this simple example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个 Python REPL 并运行这个简单的示例是很有帮助的：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, the first element of the tuple is a list with two elements. We try appending
    3 to the first list and it works fine! Well, did we just modify a tuple in place?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，元组的第一个元素是一个包含两个元素的列表。我们尝试向第一个列表中添加 3，它工作得很好！好吧，我们刚刚就地修改了一个元组吗？
- en: 'Now let’s try to add two more elements to the list, but this time using the
    += operator:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试向列表中添加两个元素，这次使用 += 操作符：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Yes, you get a TypeError which says the tuple object does not support item
    assignment. Which is expected. But let’s check the tuple:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你会得到一个 TypeError，表示元组对象不支持项赋值。这是预期的。但让我们检查一下元组：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We see that elements 4 and 5 have been added to the list! Did the program just
    throw an error and succeed at the same time?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到元素 4 和 5 已经被添加到列表中！程序是否在同时抛出错误并成功？
- en: Well the += operator internally works by calling the `__iadd__()` method which
    performs in-place addition and modifies the list in place. The assignment raises
    a TypeError exception, but the addition of elements to the end of the list has
    already succeeded. += is perhaps the sharpest corner!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: += 操作符在内部通过调用 `__iadd__()` 方法来执行就地加法，并在原地修改列表。赋值会引发 TypeError 异常，但将元素添加到列表末尾已经成功。
    += 也许是最尖锐的棱角！
- en: How To Avoid
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何避免
- en: To avoid such quirks in your program, try using tuples *only* for immutable
    collections. And avoid using mutable objects as tuple elements as much as possible.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免程序中的这种怪癖，尽量 *仅* 使用元组来处理不可变集合。尽可能避免将可变对象作为元组元素。
- en: 5\. Shallow Copies of Mutable Objects
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 可变对象的浅拷贝
- en: Mutability has been a recurring topic in our discussion thus far. So here’s
    another one to wrap up this tutorial.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可变性一直是我们讨论中的一个反复出现的话题。所以这是另一个总结本教程的内容。
- en: Sometimes you may need to create independent copies of lists. But what happens
    when you create a copy using a syntax similar to `list2 = list1` where `list1`
    is the original list?
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你可能需要创建列表的独立副本。但是，当你使用类似 `list2 = list1` 的语法创建副本时，其中 `list1` 是原始列表，会发生什么？
- en: It’s a shallow copy that gets created. So it only copies the references to the
    original elements of the list. Modifying elements through the shallow copy will
    affect *both* the original list *and* the shallow copy.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个浅拷贝。因此，它仅复制了对原始列表元素的引用。通过浅拷贝修改元素会影响 *原始列表* 和 *浅拷贝*。
- en: 'Let''s take this example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看这个例子：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We see that the changes to the shallow copy also affect the original list:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到对浅拷贝的修改也影响了原始列表：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Here, we modify the first element of the first nested list in the shallow copy:
    `shallow_copy[0][0] = 100`. But we see that the modification affects both the
    original list and the shallow copy.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了浅拷贝中第一个嵌套列表的第一个元素：`shallow_copy[0][0] = 100`。但我们看到修改影响了原始列表和浅拷贝。
- en: How To Avoid
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何避免
- en: 'To avoid this, you can create a deep copy like so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这种情况，你可以像这样创建深拷贝：
- en: '[PRE17]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now, any modification to the deep copy leaves the original list unchanged.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，对深拷贝的任何修改都不会改变原始列表。
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Wrapping Up
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'And that’s a wrap! In this tutorial, we''ve explored several oddities in Python:
    from the surprising behavior of mutable defaults to the subtleties of shallow
    copying lists. This is only an introduction to Python’s oddities and is by no
    means an exhaustive list. You can find all the code examples [on GitHub](https://github.com/balapriyac/python-basics/tree/main/common-gotchas).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了！在本教程中，我们探索了 Python 中的一些奇特现象：从可变默认值的意外行为到浅拷贝列表的细微差别。这只是 Python 奇特现象的一个介绍，绝不是详尽无遗的列表。你可以在
    [GitHub](https://github.com/balapriyac/python-basics/tree/main/common-gotchas)
    上找到所有的代码示例。
- en: As you keep coding for longer in Python—and understand the language better—you’ll
    perhaps run into many more of these. So, keep coding, keep exploring!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你在 Python 中编程时间的增加——并更好地理解语言——你可能会遇到更多这样的情况。所以，继续编程，继续探索！
- en: Oh, and let us know in the comments if you’d like to read a sequel to this tutorial.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，如果你想读这个教程的续集，请在评论中告诉我们。
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发人员和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇点上工作。她的兴趣和专长领域包括DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她通过编写教程、操作指南、观点文章等方式，学习并与开发者社区分享她的知识。Bala还创建了引人入胜的资源概述和编程教程。'
- en: More On This Topic
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Common Data Science Mistakes and How to Avoid Them](https://www.kdnuggets.com/5-common-data-science-mistakes-and-how-to-avoid-them)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个常见的数据科学错误及如何避免](https://www.kdnuggets.com/5-common-data-science-mistakes-and-how-to-avoid-them)'
- en: '[3 Crucial Challenges in Conversational AI Development and How to Avoid Them](https://www.kdnuggets.com/3-crucial-challenges-in-conversational-ai-development-and-how-to-avoid-them)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对话式 AI 开发中的 3 个关键挑战及如何避免它们](https://www.kdnuggets.com/3-crucial-challenges-in-conversational-ai-development-and-how-to-avoid-them)'
- en: '[Avoid These 5 Common Mistakes Every Novice in AI Makes](https://www.kdnuggets.com/avoid-these-5-common-mistakes-every-novice-in-ai-makes)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[避免这些 5 个 AI 新手常犯的错误](https://www.kdnuggets.com/avoid-these-5-common-mistakes-every-novice-in-ai-makes)'
- en: '[10 Most Common Data Quality Issues and How to Fix Them](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10 个最常见的数据质量问题及如何解决](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
- en: '[KDnuggets News, August 24: Implementing DBSCAN in Python • How to…](https://www.kdnuggets.com/2022/n34.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，8月24日：在 Python 中实现 DBSCAN • 如何…](https://www.kdnuggets.com/2022/n34.html)'
- en: '[Common Data Problems (and Solutions)](https://www.kdnuggets.com/2022/02/common-data-problems-solutions.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[常见数据问题（及解决方案）](https://www.kdnuggets.com/2022/02/common-data-problems-solutions.html)'
