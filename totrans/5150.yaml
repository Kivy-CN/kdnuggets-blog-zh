- en: Key-Value Databases, Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键值数据库解释
- en: 原文：[https://www.kdnuggets.com/2021/04/nosql-explained-understanding-key-value-databases.html](https://www.kdnuggets.com/2021/04/nosql-explained-understanding-key-value-databases.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/04/nosql-explained-understanding-key-value-databases.html](https://www.kdnuggets.com/2021/04/nosql-explained-understanding-key-value-databases.html)
- en: NoSQL has become increasingly important in our day-to-day lives, with some of
    the most popular platforms and services relying on them to deliver content to
    use with lightning speed. Of course, NoSQL encompasses a variety of database types,
    but easily the most popular is key-value store.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL在我们日常生活中变得越来越重要，一些最受欢迎的平台和服务依赖它们以闪电般的速度提供内容。当然，NoSQL涵盖了多种数据库类型，但最受欢迎的无疑是键值存储。
- en: This type of data model is built around its extreme simplicity, which allows
    it to perform blisteringly fast compared to relational databases. Not only that,
    but because it follows the scalable NoSQL design philosophy, key-value stores
    allow for flexibility and easy start-up.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种数据模型的极简设计使得它与关系数据库相比表现得极其迅速。不仅如此，由于它遵循可扩展的NoSQL设计理念，键值存储允许灵活性和快速启动。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持你的组织的IT需求'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: How Does a Key-Value Work?
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键值存储是如何工作的？
- en: Key-value stores are actually pretty straightforward. A value, which can be
    basically any piece of data or information, is stored with a key that identifies
    its location. In fact, this is a design concept that exists in pretty much every
    piece of programming as an array or map object. The difference here is that it’s
    stored persistently in a database management system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 键值存储实际上非常简单。一个值（基本上可以是任何数据或信息）与一个标识其位置的键一起存储。事实上，这是几乎每种编程语言中存在的一种设计概念，如数组或映射对象。不同之处在于，它是持久化存储在数据库管理系统中的。
- en: '![Image](../Images/febdc6331936def1b7f2881d9afe9599.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/febdc6331936def1b7f2881d9afe9599.png)'
- en: What makes key-value stores so popular is that the way information is stored
    is as a sort of opaque blob, rather than discrete data. As such, there’s really
    no need to index the database to make it perform faster. Instead, it performs
    faster on its own due to the way it’s structured. Similarly, it doesn’t really
    have a language of its own, instead relying on simple get, put and delete commands.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 键值存储之所以如此受欢迎，是因为信息的存储方式类似于一种不透明的块，而不是离散的数据。因此，实际上不需要对数据库进行索引来提高性能。相反，它由于其结构方式而自行提高性能。类似地，它没有自己的语言，而是依赖简单的get、put和delete命令。
- en: Of course, this comes with the downside that the information you get from a
    request isn’t filtered. This lack of control of the data can be problematic under
    certain circumstances but for the most part, it’s worth the exchange. Since key-value
    stores are fast and reliable, most programmers work around any filter/control
    issues they may come up against.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这也带来了一个缺点，即从请求中获取的信息没有经过过滤。这种对数据的控制缺失在某些情况下可能会成为问题，但大多数情况下，这种交换是值得的。由于键值存储速度快且可靠，大多数程序员会解决可能遇到的任何过滤/控制问题。
- en: Benefits of Key-Value
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 键值存储的好处
- en: 'As one of the more popular forms of NoSQL [data models](https://hostingdata.co.uk/nosql-database/),
    key-value have a lot of benefits when it comes to building a database:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为NoSQL [数据模型](https://hostingdata.co.uk/nosql-database/)中更受欢迎的形式之一，键值存储在构建数据库时有很多好处：
- en: '**Scalability**: One of the biggest benefits compared to a relational database
    is the fact that key-value stores (like NoSQL in general) are infinitely scalable
    in a horizontal fashion. Compared to relational databases where expansion is vertical
    and finite, this can be a big boon to complex and larger databases.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**可扩展性**：与关系数据库相比，键值存储（如 NoSQL 一般）在水平扩展方面具有无限的可扩展性。与扩展是垂直和有限的关系数据库相比，这对于复杂和大型数据库来说是一个很大的优势。'
- en: '![Image](../Images/9c3bb706ad7bd8b3cb2a879d1c114e7e.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](../Images/9c3bb706ad7bd8b3cb2a879d1c114e7e.png)'
- en: More specifically it manages this through partitioning & replication. It also
    minimizes ACID guarantees by going around things like low-overhead server calls.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，它通过分区和复制来管理这方面的工作。它还通过绕过低开销的服务器调用来最小化 ACID 保证。
- en: '**No/Simpler Querying**: Querying, in general, is really not doable with key-value
    stores, except in specific cases when it comes to querying keys, and even then
    it’s not always possible. Therefore, in cases such as sessions, user profiles,
    shopping carts, and so on, key-value makes it cheaper to handle since it’s just
    one request to read and one request to write (due to the blob-like nature of how
    the data is stored).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**无/简化查询**：一般来说，键值存储几乎无法进行查询，除了在特定情况下查询键，即便如此也不总是可能。因此，在会话、用户配置文件、购物车等情况下，键值存储使处理变得更便宜，因为只需一次读取请求和一次写入请求（由于数据存储的
    blob 样式）。'
- en: Similarly, concurrency issues are easier to handle since you only need to resolve
    one key.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，处理并发问题也更为容易，因为你只需解决一个键。
- en: '**Mobility**: Since they don’t have a query language, key-value stores are
    easy to move from one system to another without the need for new architecture
    or changing the code. As such, moving from an old operating system to a new one
    doesn’t cause a severe disruption as it would with a relational database.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**移动性**：由于没有查询语言，键值存储在从一个系统迁移到另一个系统时非常容易，无需新的架构或更改代码。因此，从旧的操作系统迁移到新的操作系统不会像关系数据库那样造成严重中断。'
- en: When to Use Key-Value
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用键值存储
- en: Traditional relational databases are not really made to handle a high volume
    of read/write operations, which is where key-value stores shine. Since it’s easily
    scalable, key-value can handle thousands upon thousands of users at any given
    second. Additionally, with the built-in redundancy, it can handle lost storage
    or data without any issues.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 传统关系数据库并不适合处理大量读写操作，这正是键值存储的优势所在。由于其易于扩展，键值存储可以处理成千上万的用户。此外，凭借内置的冗余，它可以在存储或数据丢失的情况下正常工作。
- en: 'As such, there are a few situations where key-value shines:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，键值存储在以下几种情况中表现出色：
- en: User preferences and profile stores
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户偏好和配置文件存储
- en: Large scale session management for users
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大规模用户会话管理
- en: Product recommendations (such as in [eCommerce platforms](https://zyro.com/blog/make-first-sale-guide-ecommerce-beginner/))
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品推荐（例如在 [电子商务平台](https://zyro.com/blog/make-first-sale-guide-ecommerce-beginner/)
    上）
- en: Customized ad delivery to users based on their data profile
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据用户的数据配置文件定制广告投放
- en: Data cache for rarely updated data
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅更新数据的数据缓存
- en: There are also a variety of other situations where key-value does well. For
    example, due to its scalability, it often tends to get used for big data research.
    Similarly, key-value works well for session management, whether it’s web-applications
    or even MMO games, and managing individual player’s session.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 键值存储还在其他各种情况下表现良好。例如，由于其可扩展性，它通常用于大数据研究。同样，键值存储在会话管理中表现良好，无论是 Web 应用程序还是 MMO
    游戏，以及管理单个玩家的会话。
- en: Another great use is for temporary and seasonal surges in purchasing on platforms.
    For example, in cases such as Christmas, thanksgiving, national holidays, and
    so on. Rather than investing heavily on infrastructure that will *not* be used
    year-round, the quick and easy scalability of key-value allows stores to purchase
    one or more temporary shards to help process these seasonal surges.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个很好的用途是在平台上的临时和季节性购买激增。例如，在圣诞节、感恩节、国定假日等情况中。与其在全年的使用不多的基础设施上投入大量资金，不如利用键值存储的快速和简便的扩展性，商店可以购买一个或多个临时分片来帮助处理这些季节性的激增。
- en: Examples of Popular Key-Value Databases
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流行键值数据库的示例
- en: There are several different types of key-value database models to pick from,
    for example, some store data on an SSD, while others store on RAM. The truth is,
    some of the most popular and widely-used databases are key-value stores, and we
    rely on them on a daily basis in our day-to-day lives.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同类型的键值数据库模型可以选择，例如，有些将数据存储在 SSD 上，而其他则存储在 RAM 上。事实上，一些最受欢迎和广泛使用的数据库是键值存储，我们在日常生活中每天都依赖它们。
- en: '[Amazon DynamoDB](https://aws.amazon.com/dynamodb/): Probably *the* most widely
    used key-value store database, in fact, it was the research into DynamoDB that
    really started making NoSQL really popular.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[Amazon DynamoDB](https://aws.amazon.com/dynamodb/): 可能是*最*广泛使用的键值存储数据库，实际上，正是对
    DynamoDB 的研究真正使 NoSQL 变得非常流行。'
- en: '[Aerospike](https://www.aerospike.com/): Open-source database that is optimized
    for in-memory storage.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[Aerospike](https://www.aerospike.com/): 开源数据库，优化了内存存储。'
- en: '[Berkeley DB](https://www.oracle.com/database/technologies/related/berkeleydb.html):
    Another open-source database that is a high-performance database storage library,
    although it’s relatively basic.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[Berkeley DB](https://www.oracle.com/database/technologies/related/berkeleydb.html):
    另一个开源数据库，是一个高性能的数据库存储库，尽管它相对基础。'
- en: '[Couchbase](https://www.couchbase.com/): Interestingly allows for text searches
    and SQL-style querying.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[Couchbase](https://www.couchbase.com/): 有趣的是，它允许进行文本搜索和类似 SQL 的查询。'
- en: '[Memcached](https://memcached.org/): Helps speed up websites by storing cache
    data in RAM, plus it’s free and open-source.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[Memcached](https://memcached.org/): 通过将缓存数据存储在 RAM 中来加速网站，而且它是免费和开源的。'
- en: '[Riak](https://riak.com/products/): Made for developing apps, it works well
    with other databases and apps.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[Riak](https://riak.com/products/): 为开发应用程序而设计，它与其他数据库和应用程序兼容良好。'
- en: '[Redis](https://redis.io/): A multi-purpose database that also acts as memory
    cache and message broker.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Redis](https://redis.io/): 一个多用途的数据库，同时也充当内存缓存和消息代理。'
- en: Conclusion
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: The real brilliance of a key-value store is that it’s simple. While this can
    be a double-edged sword, especially when it comes to more complex things such
    as financial transactions, its purpose-made for bridging gaps of relational databases.
    By using a combination of both relational and non-relational, we can make an even
    more efficient pipeline, whether it is for data analysis or dealing with users.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 键值存储的真正优势在于它的简单性。虽然这可能是一把双刃剑，特别是在处理金融交易等更复杂的事务时，但它的目的就是弥补关系数据库的不足。通过结合关系型和非关系型数据库，我们可以创建一个更高效的管道，无论是用于数据分析还是处理用户。
- en: '**[Alex Williams](https://hostingdata.co.uk/author/alex-williams/)** is a seasoned
    full-stack developer and the owner of [Hosting Data UK](https://hostingdata.co.uk/).
    After graduating from the University of London, majoring in IT, Alex worked as
    a developer leading various projects for clients from all over the world for almost
    10 years. Recently, Alex switched to being an independent IT consultant and started
    his own blog. There, he explores web development, data management, digital marketing,
    and solutions for online business owners just starting out.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**[亚历克斯·威廉姆斯](https://hostingdata.co.uk/author/alex-williams/)** 是一位经验丰富的全栈开发者，也是
    [Hosting Data UK](https://hostingdata.co.uk/) 的拥有者。亚历克斯从伦敦大学毕业，主修 IT，之后在全球各地为客户领导了各种项目，工作了近
    10 年。最近，亚历克斯转为独立 IT 顾问，并开设了自己的博客。在那里，他探讨了网页开发、数据管理、数字营销以及刚刚起步的在线企业主的解决方案。'
- en: More On This Topic
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[From Oracle to Databases for AI: The Evolution of Data Storage](https://www.kdnuggets.com/2022/02/oracle-databases-ai-evolution-data-storage.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从 Oracle 到 AI 数据库：数据存储的演变](https://www.kdnuggets.com/2022/02/oracle-databases-ai-evolution-data-storage.html)'
- en: '[NoSQL Databases and Their Use Cases](https://www.kdnuggets.com/2023/03/nosql-databases-cases.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[NoSQL 数据库及其使用案例](https://www.kdnuggets.com/2023/03/nosql-databases-cases.html)'
- en: '[Vector Databases in AI and LLM Use Cases](https://www.kdnuggets.com/vector-databases-in-ai-and-llm-use-cases)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI 和 LLM 使用案例中的向量数据库](https://www.kdnuggets.com/vector-databases-in-ai-and-llm-use-cases)'
- en: '[Semantic Search with Vector Databases](https://www.kdnuggets.com/semantic-search-with-vector-databases)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用向量数据库的语义搜索](https://www.kdnuggets.com/semantic-search-with-vector-databases)'
- en: '[A Guide to Working with SQLite Databases in Python](https://www.kdnuggets.com/a-guide-to-working-with-sqlite-databases-in-python)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 SQLite 数据库的 Python 指南](https://www.kdnuggets.com/a-guide-to-working-with-sqlite-databases-in-python)'
- en: '[What are Vector Databases and Why Are They Important for LLMs?](https://www.kdnuggets.com/2023/06/vector-databases-important-llms.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是向量数据库，它们为何对 LLMs 重要？](https://www.kdnuggets.com/2023/06/vector-databases-important-llms.html)'
