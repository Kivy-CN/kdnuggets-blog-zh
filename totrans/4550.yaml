- en: Python Tuples and Tuple Methods
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 元组和元组方法
- en: 原文：[https://www.kdnuggets.com/2019/11/python-tuples-methods.html](https://www.kdnuggets.com/2019/11/python-tuples-methods.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/11/python-tuples-methods.html](https://www.kdnuggets.com/2019/11/python-tuples-methods.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/), Data
    Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)，数据科学家**'
- en: Tuples are an ordered sequences of items, just like lists. The main difference
    between tuples and lists is that tuples cannot be changed (immutable) unlike lists
    which can (mutable).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是有序的项序列，就像列表一样。元组和列表的主要区别在于元组不可更改（不可变），而列表则可以（可变）。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT 需求'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Initialize a Tuple
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 初始化元组
- en: There are two ways to initialize an empty tuple. You can initialize an empty
    tuple by having () with no values in them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以初始化一个空元组。你可以通过使用 () 并且不包含任何值来初始化一个空元组。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can also initialize an empty tuple by using the `tuple` function.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过使用 `tuple` 函数来初始化一个空元组。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A tuple with values can be initialized by making a sequence of values separated
    by commas.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 含有值的元组可以通过用逗号分隔的值序列来初始化。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure](../Images/a3d746cf6f81268eed65f347dfed151a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/a3d746cf6f81268eed65f347dfed151a.png)'
- en: You can initialize a tuple with or without parenthesis
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用或不使用括号初始化元组。
- en: It is important to keep in mind that if you want to create a tuple containing
    only one value, you need a trailing comma after your item.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，如果你想创建一个只包含一个值的元组，你需要在项后面加上一个逗号。
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Accessing Values in Tuples
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 访问元组中的值
- en: '![Figure](../Images/8382596d021921d96439c5fbb9cf76b7.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/8382596d021921d96439c5fbb9cf76b7.png)'
- en: You can initialize a tuple with or without without parenthesis
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用或不使用括号初始化元组。
- en: Each value in a tuple has an assigned index value. It is important to note that
    python is a zero indexed based language. All this means is that the first value
    in the tuple is at index 0.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 元组中的每个值都有一个指定的索引值。重要的是要注意 Python 是零索引的语言。这意味着元组中的第一个值在索引0处。
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure](../Images/de0d8279adf460814a61e3f984117e3b.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/de0d8279adf460814a61e3f984117e3b.png)'
- en: Output of accessing the item at index 0.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 访问索引0处项的输出。
- en: Python also supports negative indexing. Negative indexing starts from the end
    of the tuple. It can sometimes be more convenient to use negative indexing to
    get the last item in a tuple because you don’t have to know the length of a tuple
    to access the last item.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还支持负索引。负索引从元组的末尾开始。使用负索引获取元组中的最后一项有时更方便，因为你不需要知道元组的长度来访问最后一项。
- en: '![](../Images/e605c64ec60f1b09b1f014ac7c63d1e8.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e605c64ec60f1b09b1f014ac7c63d1e8.png)'
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Figure](../Images/5fa58fedffb2db5edf1caa8fc1dd11ca.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/5fa58fedffb2db5edf1caa8fc1dd11ca.png)'
- en: Output of accessing the last item in the tuple
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 访问元组中最后一项的输出
- en: As a reminder, you could also access the same item using positive indexes (as
    seen below).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，你也可以使用正索引访问相同的项（如下所示）。
- en: '![Figure](../Images/766c171028b8cc16db1429587fa28741.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/766c171028b8cc16db1429587fa28741.png)'
- en: Alternative way of accessing the last item in the tuple z
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种访问元组z中最后一项的方法
- en: Tuple slices
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组切片
- en: Slice operations return a new tuple containing the requested items. Slices are
    good for getting a subset of values in your tuple. For the example code below,
    it will return a tuple with the items from index 0 up to and not including index
    2.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 切片操作返回一个包含所请求项的新元组。切片适用于获取元组中的子集。对于下面的示例代码，它将返回一个包含从索引0到不包括索引2的项的元组。
- en: '![Figure](../Images/632d8c9b040d7b2d3673d82249b1d7eb.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/632d8c9b040d7b2d3673d82249b1d7eb.png)'
- en: First index is inclusive (before the :) and last (after the :) is not
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个索引是包含的（在 `:` 之前），最后一个（在 `:` 之后）则不包含
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure](../Images/25940bf82e76e9f553e6b5328a89ecec.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/25940bf82e76e9f553e6b5328a89ecec.png)'
- en: Slice of a tuple syntax
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 元组的切片语法
- en: '![](../Images/72ccc13284b1b2a9a61a96dc508404b9.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72ccc13284b1b2a9a61a96dc508404b9.png)'
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure](../Images/64cc754b83c02e7ddbeab93fe9671483.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/64cc754b83c02e7ddbeab93fe9671483.png)'
- en: Everything up to but not including index 3
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 所有到达但不包括索引 3 的项
- en: You can even make slices with negative indexes.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以使用负索引进行切片。
- en: '![](../Images/72ccc13284b1b2a9a61a96dc508404b9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72ccc13284b1b2a9a61a96dc508404b9.png)'
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![](../Images/b976b41730fef6c9578b9d05c7cbc4a3.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b976b41730fef6c9578b9d05c7cbc4a3.png)'
- en: Tuples are Immutable
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组是不可变的
- en: Tuples are immutable which means that after initializing a tuple, it is impossible
    to update individual items in a tuple. As you can see in the code below, you cannot
    update or change the values of tuple items (this is different from [Python Lists](https://towardsdatascience.com/python-basics-6-lists-and-list-manipulation-a56be62b1f95) which
    are mutable).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是不可变的，这意味着在初始化元组后，无法更新元组中的单个项。如下面的代码所示，你不能更新或更改元组项的值（这与 [Python 列表](https://towardsdatascience.com/python-basics-6-lists-and-list-manipulation-a56be62b1f95)
    的可变性不同）。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![](../Images/61e6821e4ca241d3c44c754e632eeb6c.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/61e6821e4ca241d3c44c754e632eeb6c.png)'
- en: Even though tuples are immutable, it is possible to take portions of existing
    tuples to create new tuples as the following example demonstrates.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 即使元组是不可变的，也可以取现有元组的部分来创建新的元组，如下例所示。
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/15e778fe8f3fa8866e635013fc7f6a1c.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/15e778fe8f3fa8866e635013fc7f6a1c.png)'
- en: Tuple Methods
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组方法
- en: '![](../Images/72bed4d6e3057c903bc486670227ccbd.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/72bed4d6e3057c903bc486670227ccbd.png)'
- en: Before starting this section, let’s first initialize a tuple.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始本节之前，让我们先初始化一个元组。
- en: '[PRE11]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: index method
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: index 方法
- en: The index method returns the first index at which a value occurs.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: index 方法返回值出现的第一个索引。
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/f53a0c42a43efe8d46b1fb48eca5e786.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f53a0c42a43efe8d46b1fb48eca5e786.png)'
- en: count method
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: count 方法
- en: The count method returns the number of times a value occurs in a tuple.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: count 方法返回元组中值出现的次数。
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Figure](../Images/2e716837fa632d7ec325db909e806c01.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/2e716837fa632d7ec325db909e806c01.png)'
- en: The string ‘lama’ appears twice in the tuple animals
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串‘lama’在元组 animals 中出现了两次
- en: Iterate through a Tuple
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 迭代元组
- en: You can iterate through the items of a tuple by using a for loop.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用 `for` 循环来迭代元组中的项。
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/6d57a736a98fe39d148883676544e099.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d57a736a98fe39d148883676544e099.png)'
- en: Tuple Unpacking
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组解包
- en: Tuples are useful for sequence unpacking.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 元组对于序列解包非常有用。
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/b9e0696cb26e39ce28c7739cfdd9bc0f.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b9e0696cb26e39ce28c7739cfdd9bc0f.png)'
- en: Enumerate
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 枚举
- en: 'The `enumerate` function returns a tuple containing a count for every iteration
    (from start which defaults to 0) and the values obtained from iterating over a
    sequence:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`enumerate` 函数返回一个包含每次迭代的计数（从默认的 0 开始）和从序列中获得的值的元组：'
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/2f4bd4d61fc781f3c1016fc2419d2e61.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2f4bd4d61fc781f3c1016fc2419d2e61.png)'
- en: Advantages of Tuples over Lists
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元组相对于列表的优点
- en: Quick video on this section
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的快速视频
- en: Lists and tuples are standard Python data types that store values in a sequence.
    A`tuple` is **immutable** whereas a `list` is **mutable. **Here are some other
    advantages of tuples over lists (partially from [Stack Overflow](https://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each))
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 列表和元组是标准的 Python 数据类型，用于以序列形式存储值。`tuple` 是 **不可变的**，而 `list` 是 **可变的**。以下是元组相对于列表的一些其他优点（部分来自
    [Stack Overflow](https://stackoverflow.com/questions/1708510/python-list-vs-tuple-when-to-use-each)）
- en: '**Tuples are faster than lists.** If you’re defining a constant set of values
    and all you’re ever going to do with it is iterate through it, use a tuple instead
    of a list. The performance difference can be partially measured using the `timeit` library
    which allows you to time your Python code. The code below runs the code for each
    approach 1 million times and outputs the overall time it took in seconds.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元组比列表更快。** 如果你定义了一组常量值，并且你唯一要做的就是迭代它，使用元组而不是列表。性能差异可以通过 `timeit` 库部分测量，该库允许你测量
    Python 代码的执行时间。下面的代码运行每种方法 100 万次，并输出总共花费的时间（以秒为单位）。'
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/25403a0081081c815348efd09c0ab056.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25403a0081081c815348efd09c0ab056.png)'
- en: Some tuples can be used as dictionary keys (specifically, tuples that contain
    immutable values like strings, numbers, and other tuples). Lists can never be
    used as dictionary keys, because lists are not immutable (you can learn about
    dictionaries [here](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9)).
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/e7d55a71e2e337a51d18d4d0b8e14a72.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
- en: Tuples can be used as values in sets whereas lists can not (you can learn more
    about sets [here](https://towardsdatascience.com/python-sets-and-set-theory-2ace093d1607))
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/45d42882647c8c7e829e77b88204a788.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you have any questions or thoughts on the tutorial, feel free to reach out
    in the comments below or through [Twitter](https://twitter.com/GalarnykMichael).
    Next post reviews [Python Dictionaries and Dictionary Methods](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9).
    If you want to learn how to utilize the Pandas, Matplotlib, or Seaborn libraries,
    please consider taking my [Python for Data Visualization LinkedIn Learning course](https://www.linkedin.com/learning/python-for-data-visualization/value-of-data-visualization).
    Here is a [free preview video](https://youtu.be/BE8CVGJuftI).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f261c9188458bbbf828a24c78cba3ca6.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: '[Python Dictionary Tutorial](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** is
    a Data Scientist and Corporate Trainer. He currently works at Scripps Translational
    Research Institute. You can find him on Twitter (https://twitter.com/GalarnykMichael),
    Medium (https://medium.com/@GalarnykMichael), and GitHub (https://github.com/mGalarnyk).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/@GalarnykMichael/python-tuples-and-tuple-methods-4817a6bb6fff).
    Reposted with permission.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Lists and List Manipulation](/2019/11/python-lists-list-manipulation.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Boxplots](/2019/11/understanding-boxplots.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Set Operations Applied to Pandas DataFrames](/2019/11/set-operations-applied-pandas-dataframes.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Understanding Python''s Iteration and Membership: A Guide to…](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python String Methods](https://www.kdnuggets.com/2022/12/python-string-methods.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[11 Python Magic Methods Every Programmer Should Know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Centroid Initialization Methods for k-means Clustering](https://www.kdnuggets.com/2020/06/centroid-initialization-k-means-clustering.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Alternative Feature Selection Methods in Machine Learning](https://www.kdnuggets.com/2021/12/alternative-feature-selection-methods-machine-learning.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science Methods Drive Business Success](https://www.kdnuggets.com/2023/10/nwu-data-science-methods-drive-business-success)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学方法推动业务成功](https://www.kdnuggets.com/2023/10/nwu-data-science-methods-drive-business-success)'
