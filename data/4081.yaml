- en: What You Should Know About Python Decorators And Metaclasses
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 Python 装饰器和元类你应该知道的事
- en: 原文：[https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html](https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html](https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html)
- en: '![What You Should Know About Python Decorators And Metaclasses](../Images/4e82b4b27debd7736c591470becfef6f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![关于 Python 装饰器和元类你应该知道的事](../Images/4e82b4b27debd7736c591470becfef6f.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: What are Python Decorators?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python 装饰器？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: After hearing the word decorators, most of you probably guess it is something
    used for decoration. You guessed it right. At festivals like Christmas or new
    year, we decorate our houses using various lights and materials. But in python,
    the decorators are used to modify or enhance the functionality of python functions
    or methods.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 听到“装饰器”这个词，大多数人可能会猜测它是用来装饰的东西。你猜对了。在节日如圣诞节或新年时，我们用各种灯光和材料装饰房子。但在 Python 中，装饰器用于修改或增强
    Python 函数或方法的功能。
- en: Decorators are functions that wrap around the original function and add some
    additional functionalities without directly modifying the original code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器是包裹在原始函数周围的函数，能够在不直接修改原始代码的情况下添加一些额外的功能。
- en: For example, imagine you are an owner of a bakery and an expert in making cakes.
    You make different cakes like Chocolate, Strawberry, and Pineapple. All cakes
    are made from different ingredients, but some steps are common to all cakes, like
    preparing the baking pan, pre-heating the oven, baking the cake, or removing the
    cake from the oven. So, we can make a common decorator function to perform all
    the common steps, make separate functions for different types of cakes, and use
    the decorators to add common functionality to these functions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，假设你是一个面包店的老板，并且在制作蛋糕方面是一位专家。你制作不同的蛋糕，如巧克力蛋糕、草莓蛋糕和菠萝蛋糕。所有蛋糕都是用不同的原料制作的，但一些步骤对于所有蛋糕都是相同的，比如准备烤盘、预热烤箱、烘焙蛋糕或从烤箱中取出蛋糕。因此，我们可以创建一个通用的装饰器函数来执行所有通用步骤，为不同类型的蛋糕制作单独的函数，并使用装饰器为这些函数添加通用功能。
- en: Consider the below code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请看下面的代码。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The function `comman_steps` is defined as a decorator and contains all the common
    steps like baking or pre-heating. And the functions `chocolate_cake`, `strawberry_cake`,
    and `pineapple_cake` are defined, which contain different steps for different
    types of cakes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `comman_steps` 被定义为装饰器，并包含所有的通用步骤，如烘焙或预热。而函数 `chocolate_cake`、`strawberry_cake`
    和 `pineapple_cake` 则定义了不同类型蛋糕的不同步骤。
- en: Decorators are defined using the `@` symbol, followed by the name of the decorator
    function.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器使用 `@` 符号定义，后面跟着装饰器函数的名称。
- en: Whenever a function is defined with a decorator, the original function is called
    with the decorator, and the decorator function returns a new function that replaces
    the original function.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每当定义一个带有装饰器的函数时，原始函数会与装饰器一起被调用，而装饰器函数会返回一个新的函数来替代原始函数。
- en: The new function performs the additional functionalities before and after calling
    the original function.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数在调用原始函数之前和之后执行附加功能。
- en: Instead of the `@` symbol, you can define the decorators in another way that
    provides the same results. E.g.,
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `@` 符号外，你还可以以另一种方式定义装饰器，这种方式能够提供相同的结果。例如，
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Benefits of using Decorators:'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用装饰器的好处：
- en: You can use the same code repeatedly without redundancy and avoid DRY (Don’t
    Repeat Yourself) principle.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以重复使用相同的代码而不会造成冗余，从而避免“不要重复自己”（DRY）原则的违背。
- en: This makes your code more readable and easier to maintain.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这使得你的代码更具可读性，也更容易维护。
- en: You can keep your code organized and clear, which helps you with concerns like
    Input Validation, Error Handling, or Optimization issues.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使你的代码组织得更清晰，这有助于处理输入验证、错误处理或优化问题等方面的关注。
- en: Using decorators, you can add new functionalities to the existing functions
    or classes without modifying the code. This allows you to extend the code according
    to your business requirements.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用装饰器，你可以在不修改代码的情况下，为现有函数或类添加新的功能。这允许你根据业务需求扩展代码。
- en: What are Metaclasses?
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是元类？
- en: It is the class of a class and defines how a class can behave. A class is itself
    an instance of a metaclass.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 它是类的类，定义了类如何表现。一个类本身是一个元类的实例。
- en: Before understanding the definition of a metaclass, first, understand the basic
    definition of python class and objects. Class is like a constructor that is used
    to create objects. We are creating classes to create objects. Objects are also
    known as the instance of a class used to access the class's attributes. Attributes
    can be any datatype like an integer, string, tuple, list, function, or even a
    class. So to use these attributes, we have to create instances (objects) in the
    class, and the method to create these instances is known as instantiation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解元类的定义之前，首先了解Python类和对象的基本定义。类就像一个构造函数，用于创建对象。我们创建类来创建对象。对象也被称为类的实例，用于访问类的属性。属性可以是任何数据类型，如整数、字符串、元组、列表、函数，甚至是类。因此，为了使用这些属性，我们必须在类中创建实例（对象），创建这些实例的方法称为实例化。
- en: Everything in python is treated as an object. Even a class is also treated like
    an object. That means a class is instantiated from a different class. The class
    from which all the other classes are instantiated is known as a **metaclass**.
    The class defines the behavior of an object it belongs to. In the same way, the
    behavior of the class is defined by its metaclass, which is a **Type** class by
    default. In simpler terms, all classes are instances of a metaclass in python.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的一切都被视为对象。即使是类也被视为对象。这意味着一个类是从另一个类实例化的。所有其他类实例化的类被称为**元类**。类定义了它所属对象的行为。同样，类的行为由其元类定义，默认情况下是**Type**类。简单来说，所有类在Python中都是元类的实例。
- en: What is a Type Class?
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是类型类？
- en: In python, the **Type** class is the metaclass for all classes.  Every time
    you define a new class, by default, it is instantiated from the Type class unless
    you define another metaclass.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，**Type**类是所有类的元类。每次你定义一个新类时，默认情况下，它是从Type类实例化的，除非你定义了另一个元类。
- en: Type class is also responsible for the dynamic creation of python classes. When
    we define a new class, python sends the class definition to the type class, and
    then this class creates a new class object according to the class definition.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 类型类还负责动态创建Python类。当我们定义一个新类时，Python将类定义发送给类型类，然后这个类根据类定义创建一个新的类对象。
- en: Let us consider an example.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个例子。
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output:**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A new class named `College` is created, and an object `obj` of that class is
    instantiated. But when we print the object type, it outputs as `<class '__main__.College>`,
    which means that a particular object is created from the `College` class. But
    on the other hand, when we print the type of the `College` class, it outputs as
    `<class 'type'>`, which means that this class is created from the **type class**
    (metaclass) by default.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个名为`College`的新类，并实例化了一个该类的对象`obj`。但是，当我们打印对象类型时，它输出为`<class '__main__.College'>`，这意味着一个特定的对象是从`College`类创建的。但另一方面，当我们打印`College`类的类型时，它输出为`<class
    'type'>`，这意味着该类默认是从**type类**（元类）创建的。
- en: We can also change the default metaclass of these user-defined classes. Consider
    the below example.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以更改这些用户定义类的默认元类。考虑下面的例子。
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When we print the type of the `Student` class, it refers to the `College` as
    a metaclass, but when we print the type of the `College` class, it refers to the
    **type** class as a metaclass. So this forms a hierarchy, as shown below.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们打印`Student`类的类型时，它会引用`College`作为元类，但当我们打印`College`类的类型时，它会引用**type**类作为元类。所以这形成了一个层级，如下所示。
- en: '![What You Should Know About Python Decorators And Metaclasses](../Images/a05d7d9d0ca9438db815303744bcb027.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![你需要了解的关于Python装饰器和元类的知识](../Images/a05d7d9d0ca9438db815303744bcb027.png)'
- en: Image by Author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: We can also use **type** class for the dynamic creation of new classes. Let
    us understand this more by the below example.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用**type**类来动态创建新类。让我们通过以下示例进一步了解这一点。
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Both ways of defining the classes are equivalent. The type() function is used
    in this example to create a new class. It takes three arguments. The first argument
    takes the class name, the second is a tuple of the parent classes (empty in this
    case), and the third argument is a dictionary that takes the attributes of that
    class (also empty in this case).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 定义类的两种方法是等效的。在这个例子中使用了type()函数来创建一个新类。它接受三个参数。第一个参数是类名，第二个是父类的元组（在这种情况下为空），第三个参数是一个字典，包含该类的属性（在这种情况下也为空）。
- en: Consider another example which is using the inheritance concept.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一个使用继承概念的例子。
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output:**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: A class named `College` is created having the argument `clgName` as `MIT University`.
    Another class `Student` is created, inherited from the `College` class, and an
    attribute `stuName` as `Kevin Peterson` is created.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个名为`College`的类，参数`clgName`为`MIT University`。另一个类`Student`被创建，并从`College`类继承，并创建了一个属性`stuName`为`Kevin
    Peterson`。
- en: When we create an object of the `Student` class, we can see that it can access
    the attributes of both classes. It means that the inheritance works perfectly
    in this example.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建`Student`类的对象时，可以看到它能够访问两个类的属性。这意味着在这个例子中继承工作得非常完美。
- en: Conclusion
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this article, we have discussed Decorators and Metaclasses in python. Both
    metaclass and decorators modify the behavior of classes and functions but operate
    using different mechanisms.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了 Python 中的装饰器和元类。元类和装饰器都修改类和函数的行为，但使用不同的机制。
- en: Metaclasses operate at the lower level and allow you to change the structure
    or behavior of the class, like the class methods, attributes, and inheritance.
    Decorators, however, are used to modify the functions' behavior. They allowed
    you to add functionality to the existing functions without changing the code.
    Decorators operate at a higher level as compared to metaclasses. That’s why they
    are somewhat easier to understand and less complex than metaclasses.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 元类在较低级别操作，允许你改变类的结构或行为，如类方法、属性和继承。而装饰器则用于修改函数的行为。它们允许你在不改变代码的情况下为现有函数添加功能。与元类相比，装饰器操作的级别较高，因此它们比元类更容易理解，也更不复杂。
- en: '![What You Should Know About Python Decorators And Metaclasses](../Images/de57c9f0d8c2873fa04a621088c37494.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![你应该了解的 Python 装饰器和元类](../Images/de57c9f0d8c2873fa04a621088c37494.png)'
- en: Difference between Metaclass & Decorators | Image by Author
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 元类与装饰器的区别 | 图片由作者提供
- en: It is all for today. I hope you have enjoyed reading this article. If you have
    any comments or suggestions, please get in touch with me via [Linkedin](https://www.linkedin.com/in/aryan-garg-1bbb791a3/).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 今天就到这里了。我希望你喜欢阅读这篇文章。如果你有任何评论或建议，请通过[Linkedin](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)与我联系。
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** 是一名 B.Tech
    电气工程专业的学生，目前在本科最后一年。他的兴趣在于 Web 开发和机器学习。他已经追求了这个兴趣，并渴望在这些方向上做更多的工作。'
- en: More On This Topic
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8 个内置 Python 装饰器来编写优雅的代码](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
- en: '[KDnuggets News, April 13: Python Libraries Data Scientists Should…](https://www.kdnuggets.com/2022/n15.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，4 月 13 日：数据科学家应该了解的 Python 库…](https://www.kdnuggets.com/2022/n15.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应该知道的三个 R 库（即使你使用 Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[5 Concepts You Should Know About Gradient Descent and Cost Function](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该了解的关于梯度下降和代价函数的 5 个概念](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
- en: '[KDnuggets™ News 22:n03, Jan 19: A Deep Look Into 13 Data…](https://www.kdnuggets.com/2022/n03.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets™ 新闻 22:n03, 1 月 19 日：深入了解 13 个数据…](https://www.kdnuggets.com/2022/n03.html)'
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多分类问题的性能评估指标](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
