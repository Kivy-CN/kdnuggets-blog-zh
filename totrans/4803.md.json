["```py\nimport pandas as pd\nloans_2007 = pd.read_csv('LoanStats3a.csv')\nloans_2007.head(2)\n\n```", "```py\n/home/srinify/anaconda3/envs/dq2/lib/python3.6/site-packages/IPython/core/interactiveshell.py:2785: DtypeWarning: Columns (0,1,2,3,4,7,13,18,24,25,27,28,29,30,31,32,34,36,37,38,39,40,41,42,43,44,46,47,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,124,125,126,127,128,129,130,131,132,133,134,135,136,142,143,144) have mixed types. Specify dtype option on import or set low_memory=False.\n  interactivity=interactivity, compiler=compiler, result=result)\n\n```", "```py\nhead -2 LoanStats3a.csv\n\n```", "```py\nNotes offered by Prospectus (https://www.lendingclub.com/info/prospectus.action)\n\n```", "```py\nimport pandas as pd\nloans_2007 = pd.read_csv('LoanStats3a.csv', skiprows=1, low_memory=False)\n\n```", "```py\nloans_2007 = loans_2007.drop(['desc', 'url'],axis=1)\n\n```", "```py\nloans_2007.isnull().sum()/len(loans_2007)\n\n```", "```py\nloans_2007 = loans_2007.dropna(thresh=half_count, axis=1)\n\n```", "```py\nimport pandas as pd\n\ndef import_clean(file_list):\n    frames = []\n    for file in file_list:\n        loans = pd.read_csv(file, skiprows=1, low_memory=False)\n        loans = loans.drop(['desc', 'url'], axis=1)\n        half_count = len(loans)/2\n        loans = loans.dropna(thresh=half_count, axis=1)\n        loans = loans.drop_duplicates()\n        # Drop first group of features\n        loans = loans.drop([\"funded_amnt\", \"funded_amnt_inv\", \"grade\", \"sub_grade\", \"emp_title\", \"issue_d\"], axis=1)\n        # Drop second group of features\n        loans = loans.drop([\"zip_code\", \"out_prncp\", \"out_prncp_inv\", \"total_pymnt\", \"total_pymnt_inv\", \"total_rec_prncp\"], axis=1)\n        # Drop third group of features\n        loans = loans.drop([\"total_rec_int\", \"total_rec_late_fee\", \"recoveries\", \"collection_recovery_fee\", \"last_pymnt_d\", \"last_pymnt_amnt\"], axis=1)\n        frames.append(loans)\n    return frames\n\nframes = import_clean(['LoanStats3a.csv'])\n\n```", "```py\nimport pandas as pd\n\ndef import_clean(file_list, threshold=0.5):\n    frames = []\n    for file in file_list:\n        loans = pd.read_csv(file, skiprows=1, low_memory=False)\n        loans = loans.drop(['desc', 'url'], axis=1)\n        threshold_count = len(loans)*threshold\n        loans = loans.dropna(thresh=half_count, axis=1)\n        loans = loans.drop_duplicates()\n        # Drop first group of features\n        loans = loans.drop([\"funded_amnt\", \"funded_amnt_inv\", \"grade\", \"sub_grade\", \"emp_title\", \"issue_d\"], axis=1)\n        # Drop second group of features\n        loans = loans.drop([\"zip_code\", \"out_prncp\", \"out_prncp_inv\", \"total_pymnt\", \"total_pymnt_inv\", \"total_rec_prncp\"], axis=1)\n        # Drop third group of features\n        loans = loans.drop([\"total_rec_int\", \"total_rec_late_fee\", \"recoveries\", \"collection_recovery_fee\", \"last_pymnt_d\", \"last_pymnt_amnt\"], axis=1)\n        frames.append(loans)\n    return frames\n\nframes = import_clean(['LoanStats3a.csv'], threshold=0.7)\n\n```", "```py\nimport pandas as pd\n\ndef import_clean(file_list, threshold=0.5):\n    ## Code\n\ndef visualize(df_list):\n    # Find the most important features and generate pairwise scatter plots\n    # Display visualizations and write to file.\n    plt.savefig(\"scatter_plots.png\")\n\ndef combine(df_list):\n    # Combine dataframes and generate train and test sets\n    # Drop features all dataframes don't share\n    # Return both train and test dataframes\n    return train,test\n\ndef train(train_df):\n    # Train model\n    return model\n\ndef validate(train_df, test-df):\n    # K-fold cross validation\n    # Return metrics dictionary\n    return metrics_dict\n\nframes = import_clean(['LoanStats3a.csv', 'LoanStats2012.csv'], threshold=0.7)\nvisualize(frames)\ntrain_df, test_df = combine(frames)\nmodel = train(train_df)\nmetrics = test(train_df, test_df)\nprint(metrics)\n\n```"]