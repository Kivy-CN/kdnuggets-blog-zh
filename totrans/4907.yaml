- en: Why You Should Forget ‘for-loop’ for Data Science Code and Embrace Vectorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/11/forget-for-loop-data-science-code-vectorization.html](https://www.kdnuggets.com/2017/11/forget-for-loop-data-science-code-vectorization.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/107a96e1ca28201c294f59121b2648e4.png)'
  prefs: []
  type: TYPE_IMG
- en: We all have used *for-loops* for majority of the tasks which needs an iteration
    over a long list of elements. I am sure almost everybody, who is reading this
    article, wrote their first code for matrix or vector multiplication using a for-loop
    back in high-school or college. For-loop has served programming community long
    and steady.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: However, it comes with some baggage and is often slow in execution when it comes
    to processing large data sets (many millions of records as in this age of Big
    Data). This is particularly true for interpreted language like Python, where,
    if the body of your loop is simple, the** interpreter overhead of the loop itself
    can be a substantial amount of the overhead**.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, in almost all major programming ecosystem there is an alternative.
    Python has a beautiful one.
  prefs: []
  type: TYPE_NORMAL
- en: Numpy, short for [Numerical Python](http://numpy.org/), is the fundamental package
    required for high performance scientific computing and data analysis in Python
    ecosystem. It is the foundation on which nearly all of the higher-level tools
    such as [Pandas](https://pandas.pydata.org/) and [scikit-learn](http://scikit-learn.org/) are
    built. [TensorFlow](https://www.tensorflow.org/) uses NumPy arrays as the fundamental
    building block on top of which they built their Tensor objects and graphflow for
    deep learning tasks (which makes heavy use of linear algebra operations on a long
    list/vector/matrix of numbers).
  prefs: []
  type: TYPE_NORMAL
- en: 'Two of the most important advantages Numpy provides, are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ndarray`, a fast and space-efficient multidimensional array providing vectorized
    arithmetic operations and sophisticated [*broadcasting* capabilities](https://towardsdatascience.com/two-cool-features-of-python-numpy-mutating-by-slicing-and-broadcasting-3b0b86e8b4c7)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard mathematical functions for fast operations on entire arrays of data *without
    having to write loops*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will often come across this assertion in the data science, machine learning,
    and Python community that Numpy is much faster due to its vectorized implementation
    and due to the fact that many of its core routines are written in C (based on [CPython
    framework](https://en.wikipedia.org/wiki/CPython)).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: And it is indeed true ([this article is a beautiful demonstration](http://notes-on-cython.readthedocs.io/en/latest/std_dev.html) of
    various options that one can work with Numpy, even writing bare-bone C routines
    with Numpy APIs). Numpy arrays are densely packed arrays of homogeneous type.
    Python lists, by contrast, are arrays of pointers to objects, even when all of
    them are of the same type. So, you get the benefits of [locality of reference](https://en.wikipedia.org/wiki/Locality_of_reference).
    Many Numpy operations are implemented in C, avoiding the general cost of loops
    in Python, pointer indirection and per-element [dynamic type checking](https://www.sitepoint.com/typing-versus-dynamic-typing/).
    The speed boost depends on which operations you’re performing. **For data science
    and modern machine learning tasks, this is an invaluable advantage**, as often
    the data set size runs into millions if not billions of records and you do not
    want to iterate over it using a for-loop along with its associated baggage.
  prefs: []
  type: TYPE_NORMAL
- en: How to prove it definitively with an example of a moderately sized data set?
  prefs: []
  type: TYPE_NORMAL
- en: Here is the [***link to my Github code***](https://github.com/tirthajyoti/PythonMachineLearning/blob/master/How%20fast%20are%20NumPy%20ops.ipynb) (Jupyter
    notebook) that shows, in a few easy lines of code, the difference in speed of
    Numpy operation from that of regular Python programming constructs like *for-loop*, [*map-function*](https://stackoverflow.com/questions/10973766/understanding-the-map-function),
    or [*list-comprehension*](http://www.pythonforbeginners.com/basics/list-comprehensions-in-python).
  prefs: []
  type: TYPE_NORMAL
- en: 'I just outline the basic flow:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a list of a moderately large number of floating point numbers, preferably
    drawn from a continuous statistical distribution like a Gaussian or Uniform random.
    I chose 1 million for the demo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `ndarray` object out of that list i.e. vectorize.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write short code blocks to iterate over the list and use a mathematical operation
    on the list say taking logarithm of base 10\. Use for-loop, map-function, and
    list-comprehension. Each time use `time.time()` function to determine how much
    time it takes in total to process the 1 million records.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Do the same operation using Numpy’s built-in mathematical method (`np.log10`)
    over the `ndarray` object. Time it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Store the execution times in a list and plot a bar chart showing the comparative
    difference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here is the result. And, you can repeat the whole process by running all the
    cells of the Jupyter notebook. Every time it will generate a new set of random
    numbers, so the exact execution time may vary a little bit but overall the trend
    will always be the same. You can try with various other mathematical functions/string
    operations or combination thereof, to check if this holds true in general.
  prefs: []
  type: TYPE_NORMAL
- en: There is an entire open-source, online book on this topic by a French neuroscience
    researcher. [Check it out here](https://www.labri.fr/perso/nrougier/from-python-to-numpy/#id7).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ea1ee92682120e939e9e456e256d3b47.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar chart of comparative speeds of execution of simple mathematical operations
  prefs: []
  type: TYPE_NORMAL
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com).
    Also you can check author’s [**GitHub repositories**](https://github.com/tirthajyoti)
    for other fun code snippets in Python, R, or MATLAB and machine learning resources.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    is a semiconductor technologist, machine learning/data science zealot, Ph.D. in
    EE, blogger and writer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Working With Numpy Matrices: A Handy First Reference](/2017/03/working-numpy-matrices.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Introduction to Scientific Python (and a Bit of the Maths Behind It) –
    NumPy](/2016/06/intro-scientific-python-numpy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Data Preparation Case Files: Group-based Imputation](/2017/09/python-data-preparation-case-files-group-based-imputation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
