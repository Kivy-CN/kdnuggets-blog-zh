- en: 11 Python Magic Methods Every Programmer Should Know
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每个程序员都应该知道的 11 个 Python 魔法方法
- en: 原文：[https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)
- en: '![11 Python Magic Methods Every Programmer Should Know](../Images/c6e4055e8f998e4027bd282946ee7fbd.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![每个程序员都应该知道的 11 个 Python 魔法方法](../Images/c6e4055e8f998e4027bd282946ee7fbd.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: In Python, magic methods help you emulate the behavior of built-in functions
    in your Python classes. These methods have leading and trailing double underscores
    (__), and hence are also called **dunder methods**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，魔法方法帮助你在 Python 类中模拟内置函数的行为。这些方法有前后双下划线（__），因此也称为**双下划线方法**。
- en: 'These magic methods also help you implement operator overloading in Python.
    You’ve probably seen examples of this. Like using the multiplication operator
    * with two integers gives the product. While using it with a string and an integer
    `k` gives the string repeated `k` times:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这些魔法方法还帮助你在 Python 中实现运算符重载。你可能见过这样的例子。例如，使用乘法运算符*与两个整数相乘会得到乘积。而与字符串和整数`k`一起使用，则会得到重复`k`次的字符串：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this article, we’ll explore magic methods in Python by creating a simple
    two-dimensional vector `Vector2D` class.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将通过创建一个简单的二维向量`Vector2D`类来深入探讨 Python 中的魔法方法。
- en: We’ll start with methods you’re likely familiar with and gradually build up
    to more helpful magic methods.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从你可能熟悉的方法开始，逐步构建更有用的魔法方法。
- en: Let's start writing some magic methods!
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写一些魔法方法吧！
- en: 1\. __init__
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. __init__
- en: 'Consider the following `Vector2D` class:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下`Vector2D`类：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you create a class and instantiate an object, you can add attributes like
    so: `obj_name.attribute_name = value`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了一个类并实例化一个对象，你可以这样添加属性：`obj_name.attribute_name = value`。
- en: However, instead of manually adding attributes to every instance that you create
    (not interesting at all, of course!), you need a way to initialize these attributes
    when you instantiate an object.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与其手动为你创建的每个实例添加属性（这当然毫无趣味！），你需要一种方法来初始化这些属性。
- en: 'To do so you can define the `__init__` method. Let''s define the define the
    `__init__` method for our `Vector2D` class:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，你可以定义`__init__`方法。让我们为我们的`Vector2D`类定义`__init__`方法：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. __repr__
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. __repr__
- en: When you try to inspect or print out the object you instantiated, you’ll see
    that you don't get any helpful information.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试检查或打印你实例化的对象时，你会发现没有得到任何有用的信息。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is why you should add a representation string, a string representation
    of the object. To do so, add a `__repr__` method like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么你应该添加一个表示字符串，即对象的字符串表示。为此，请添加一个`__repr__`方法，如下所示：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `__repr__` should include all the attributes and information needed to create
    an instance of the class. The `__repr__` method is typically used for the purpose
    of debugging.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`__repr__`应该包含创建类实例所需的所有属性和信息。`__repr__`方法通常用于调试目的。'
- en: 3\. __str__
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. __str__
- en: The `__str__` is also used to add a string representation of the object. In
    general, the `__str__` method is used to provide info to the end users of the
    class.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`__str__`也用于添加对象的字符串表示。通常，`__str__`方法用于向类的最终用户提供信息。'
- en: 'Let''s add a `__str__` method to our class:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为我们的类添加一个`__str__`方法：
- en: '[PRE7]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If there is no implementation of `__str__`, it falls back to `__repr__`. So
    for every class that you create, you should—at the minimum—add a `__repr__` method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有`__str__`的实现，它将回退到`__repr__`。因此，对于你创建的每个类，你至少应该添加一个`__repr__`方法。
- en: 4\. __eq__
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. __eq__
- en: Next, let's add a method to check for equality of any two objects of the `Vector2D`
    class. Two vector objects are equal if they have identical x and y coordinates.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个方法来检查任何两个`Vector2D`类对象的相等性。如果两个向量对象的 x 和 y 坐标相同，则它们是相等的。
- en: 'Now create two `Vector2D` objects with equal values for both x and y and compare
    them for equality:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建两个`Vector2D`对象，x 和 y 值相等，并比较它们的相等性：
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The result is False. Because by default the comparison checks for equality of
    the object IDs in memory.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是 False。因为默认情况下，比较检查内存中对象 ID 的相等性。
- en: '[PRE10]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s add the `__eq__` method to check for equality:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加`__eq__`方法来检查相等性：
- en: '[PRE11]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The equality checks should now work as expected:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，相等性检查应该按预期工作：
- en: '[PRE12]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 5\. __len__
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. __len__
- en: Python’s built-in `len()` function helps you compute the length of built-in
    iterables. Let’s say, for a vector, length should return the number of elements
    that the vector contains.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内置的 `len()` 函数帮助你计算内置可迭代对象的长度。假设对于一个向量，长度应返回向量包含的元素数量。
- en: 'So let’s add a `__len__` method for the `Vector2D` class:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们为 `Vector2D` 类添加一个 `__len__` 方法：
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'All objects of the `Vector2D` class are of length 2:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 `Vector2D` 类的对象长度为 2：
- en: '[PRE15]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 6\. __add__
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. **add**
- en: Now let's think of common operations we’d perform on vectors. Let's add magic
    methods to add and subtract any two vectors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们考虑一下我们在向量上执行的常见操作。让我们添加魔法方法来加减任意两个向量。
- en: 'If you directly try to add two vector objects, you’ll run into errors. So you
    should add an `__add__` method:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你直接尝试添加两个向量对象，你将遇到错误。因此，你应该添加一个 `__add__` 方法：
- en: '[PRE16]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can now add any two vectors like so:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以像这样添加任意两个向量：
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 7\. __sub__
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. **sub**
- en: 'Next, let’s add a `__sub__` method to calculate the difference between any
    two objects of the `Vector2D` class:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个 `__sub__` 方法来计算 `Vector2D` 类中任意两个对象之间的差异：
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 8\. __mul__
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. **mul**
- en: We can also define a `__mul__` method to define multiplication between objects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以定义一个 `__mul__` 方法来定义对象之间的乘法。
- en: Let's implement let's handle
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现处理
- en: 'Scalar multiplication: the multiplication of a vector by scalar and'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标量乘法：向量与标量的乘法
- en: 'Inner product: the dot product of two vectors'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内积：两个向量的点积
- en: '[PRE22]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now we’ll take a couple of examples to see the `__mul__` method in action.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将举几个例子来看看 `__mul__` 方法的实际效果。
- en: '[PRE23]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 9\. __getitem__
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. **getitem**
- en: The `__getitem__` magic method allows you to index into the objects and access
    attributes or slice of attributes using the familiar square-bracket [ ] syntax.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`__getitem__` 魔法方法允许你对对象进行索引，并使用熟悉的方括号 [ ] 语法访问属性或属性切片。'
- en: 'For an object `v` of the `Vector2D` class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Vector2D` 类的对象 `v`：
- en: '`v[0]`: x coordinate'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v[0]`：x 坐标'
- en: '`v[1]`: y coordinate'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v[1]`：y 坐标'
- en: 'If you try accessing by index, you’ll run into errors:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试通过索引访问，会遇到错误：
- en: '[PRE25]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Let’s implement the `__getitem__` method:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现 `__getitem__` 方法：
- en: '[PRE27]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can now access the elements using their indexes as shown:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以使用它们的索引访问元素，如下所示：
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 10\. __call__
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10\. **call**
- en: With an implementation of the `__call__` method, you can call objects as if
    they were functions.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过实现 `__call__` 方法，你可以像调用函数一样调用对象。
- en: 'In the `Vector2D` class, we can implement a `__call__` to scale a vector by
    a given factor:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Vector2D` 类中，我们可以实现一个 `__call__` 方法来按给定因子缩放向量：
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'So if you now call 3, you’ll get the vector scaled by factor of 3:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你现在调用 3，你将得到按 3 的因子缩放的向量：
- en: '[PRE31]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 11\. __getattr__
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 11\. **getattr**
- en: The `__getattr__` method is used to get the values of specific attributes of
    the objects.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`__getattr__` 方法用于获取对象的特定属性值。'
- en: 'For this example, we can add a `__getattr__` dunder method that gets called
    to compute the [magnitude (L2-norm) of the vector](/2023/05/vector-matrix-norms-numpy-linalg-norm.html):'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们可以添加一个 `__getattr__` 方法，该方法在计算 [向量的大小（L2 范数）](/2023/05/vector-matrix-norms-numpy-linalg-norm.html)
    时被调用：
- en: '[PRE33]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let’s verify if this works as expected:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证一下这是否按预期工作：
- en: '[PRE34]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Conclusion
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: That's all for this tutorial! I hope you learned how to add magic methods to
    your class to emulate the behavior of built-in functions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程到此结束！希望你学会了如何为你的类添加魔法方法，以模拟内置函数的行为。
- en: We’ve covered some of the most useful magic methods. But this is not this is
    not an exhaustive list. To further your understanding, create a Python class of
    your choice and add magic methods depending on the functionality required. Keep
    coding!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了一些最有用的魔法方法。但这并不是一个详尽无遗的列表。为了进一步了解，请创建一个你选择的 Python 类，并根据所需功能添加魔法方法。继续编程！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)**
    是来自印度的开发人员和技术作家。她喜欢在数学、编程、数据科学和内容创作的交叉点上工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和咖啡！目前，她正致力于通过撰写教程、操作指南、评论文章等方式学习和分享知识。Bala
    还创建引人入胜的资源概述和编码教程。**'
- en: '* * *'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织在 IT 方面'
- en: '* * *'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Python f-Strings Magic: 5 Game-Changing Tricks Every Coder Needs to Know](https://www.kdnuggets.com/python-fstrings-magic-5-gamechanging-tricks-every-coder-needs-to-know)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python f-Strings 魔法：每个程序员需要知道的 5 个改变游戏规则的技巧](https://www.kdnuggets.com/python-fstrings-magic-5-gamechanging-tricks-every-coder-needs-to-know)'
- en: '[Understanding Python''s Iteration and Membership: A Guide to…](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 Python 的迭代与成员资格：__contains__ 和 __iter__ 魔法方法指南](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Jupyter Notebook 魔法方法备忘单](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
- en: '[The 6 Python Machine Learning Tools Every Data Scientist Should Know About](https://www.kdnuggets.com/2022/05/6-python-machine-learning-tools-every-data-scientist-know.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的 6 个 Python 机器学习工具](https://www.kdnuggets.com/2022/05/6-python-machine-learning-tools-every-data-scientist-know.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该知道的三大 R 库（即使你使用 Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[KDnuggets News, May 25: The 6 Python Machine Learning Tools Every…](https://www.kdnuggets.com/2022/n21.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，5 月 25 日：每个……的 6 个 Python 机器学习工具](https://www.kdnuggets.com/2022/n21.html)'
