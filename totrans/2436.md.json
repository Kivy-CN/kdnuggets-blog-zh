["```py\ndef sigmoid(z):\n  return 1.0 / (1 + np.exp(-z))\n```", "```py\n# Import Libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom math import exp\nplt.rcParams[\"figure.figsize\"] = (10, 6)# Download your chosen dataset\n# Source of dataset - https://www.kaggle.com/rakeshrau/social-network-ads\n# !wget \"https://drive.google.com/uc?id=15WAD9_4CpUK6EWmgWVXU8YMnyYLKQvW8&export=download\" -O data.csv -q# Load the dataset\ndata = pd.read_csv(\"data.csv\")\ndata.head(10)\n```", "```py\n# Visualizing the dataset by Age and Purchased\nplt.scatter(data['Age'], data['Purchased'])\nplt.show()# Divide the Data into training set and test set\nX_train, X_test, y_train, y_test = train_test_split(data['Age'], data['Purchased'], test_size=0.20)\n```", "```py\n# Building the Logistic Regression model\n\n# Normalising the data\ndef normalize(X):\n  return X - X.mean()\n\n# Make predictions\ndef predict(X, b0, b1):\n  return np.array([1 / (1 + exp(-1*b0 + -1*b1*x)) for x in X])\n\n# The model\ndef logistic_regression(X, Y):\n\n   X = normalize(X)\n\n   # Initializing variables\n   b0 = 0\n   b1 = 0\n   L = 0.001\n   epochs = 300\n\n   for epoch in range(epochs):\n      y_pred = predict(X, b0, b1)\n      D_b0 = -2 * sum((Y - y_pred) * y_pred * (1 - y_pred)) # Loss wrt b0\n      D_b1 = -2 * sum(X * (Y - y_pred) * y_pred * (1 - y_pred)) # Loss wrt b1\n      # Update b0 and b1\n      b0 = b0 - L * D_b0\n      b1 = b1 - L * D_b1\n\n      return b0, b1\n```", "```py\n# Training the Model\nb0, b1 = logistic_regression(X_train, y_train)# Making predictions and setting a thresholdX_test_norm = normalize(X_test)\ny_pred = predict(X_test_norm, b0, b1)\ny_pred = [1 if p >= 0.5 else 0 for p in y_pred]\n# Plotting the data\nplt.scatter(X_test, y_test)\nplt.scatter(X_test, y_pred, c=\"red\")\nplt.show()# Calculating the accuracy\naccuracy = 0\nfor i in range(len(y_pred)):\nif y_pred[i] == y_test.iloc[i]:\naccuracy += 1\nprint(f\"Accuracy = {accuracy / len(y_pred)}\")\n```", "```py\nAccuracy = 0.85\n```"]