- en: 'Practical Speech Recognition with Python: The Basics'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行实用语音识别：基础知识
- en: 原文：[https://www.kdnuggets.com/2019/07/practical-speech-recognition-python-basics.html](https://www.kdnuggets.com/2019/07/practical-speech-recognition-python-basics.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/07/practical-speech-recognition-python-basics.html](https://www.kdnuggets.com/2019/07/practical-speech-recognition-python-basics.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: Have you ever wanted to try out a speech recognition project but found it all
    just too intimidating?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经想尝试一个语音识别项目，但发现它太令人畏惧了？
- en: What about creating something a few steps beyond and a bit more complex, like
    a full audio chatbot or a voice assistant?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，创建一些更复杂的东西，比如一个完整的音频聊天机器人或语音助手，怎么样？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Putting together skeleton code for this type of a project is actually quite
    straightforward, thanks to a few open source libraries which we can lean on. With
    that in mind, let's have a look at how to start creating a basic toy speech recognition
    app with Python. Once we get the basics down we can discuss ways to make it much
    more useful.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为这种类型的项目组装骨架代码实际上非常简单，这要归功于一些我们可以依赖的开源库。考虑到这一点，让我们看看如何使用 Python 创建一个基本的玩具语音识别应用。掌握基础后，我们可以讨论如何使其变得更加实用。
- en: '![Header image](../Images/c0581b7a709c7285150f2a47121bf610.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![头图](../Images/c0581b7a709c7285150f2a47121bf610.png)'
- en: Our toy Python app will be pretty useless, to be honest. But it will introduce
    us to a few concepts which will be useful for building more complex things afterwards.
    If we build this toy properly, modifying it to do anything more should be relatively
    painless. At least, to an extent.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的玩具 Python 应用实际上会相当无用。但它会介绍一些概念，这些概念对于之后构建更复杂的东西会有用。如果我们把这个玩具做好，修改它以完成其他任务应该会相对轻松。至少，某种程度上是这样。
- en: 'Here''s *exactly* what our app will do when we''re done: it will listen to
    what we say and parrot it back to us. That''s it! The pair of useful things we
    will take away are building speech recognition and audio playback into our app.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们的应用完成后会做的事情：它会听我们说的话，并将其重复给我们。这就是全部！我们将获得的有用功能是将语音识别和音频播放集成到我们的应用中。
- en: 'First, let''s import the few libraries that we need:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们导入需要的一些库：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here''s the reasoning:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是其理由：
- en: '**`[speech_recognition](https://pypi.org/project/SpeechRecognition/)`** - "Library
    for performing speech recognition, with support for several engines and APIs,
    online and offline"'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`[speech_recognition](https://pypi.org/project/SpeechRecognition/)`** - “用于执行语音识别的库，支持多种引擎和
    API，包括在线和离线”'
- en: '**`[pydub](http://pydub.com/)`** - "Manipulate audio with a simple and easy
    high level interface"'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`[pydub](http://pydub.com/)`** - “使用简单易用的高级接口来操作音频”'
- en: '**`[gTTS](https://pypi.org/project/gTTS/)`** - "Python library and CLI tool
    to interface with Google Translate''s text-to-speech API"'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`[gTTS](https://pypi.org/project/gTTS/)`** - “与 Google 翻译的文本转语音 API 交互的 Python
    库和 CLI 工具”'
- en: The next thing to do — and likely most importantly for a speech recognition
    app — is to recognize speech. To do so, we'll need to first capture incoming audio
    from the microphone, and then perform the speech recognition. This is all handled
    via the `speech_recognition` library.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来要做的事情——可能对语音识别应用最重要——就是识别语音。为此，我们需要首先从麦克风捕获输入的音频，然后进行语音识别。这一切都通过 `speech_recognition`
    库来处理。
- en: Here's a function to capture speech.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于捕获语音的函数。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: That's it. Speech captured and recognized. Still think this is intimidating?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。语音已捕获并识别。还觉得这令人畏惧吗？
- en: Note that once this app starts running, it will listen in 5 seconds intervals,
    and process these 5 second intervals one at a time. Practical? No, not really,
    but once we do something more complex we can tweak this to, perhaps, listen for
    an activation keyword, and then listen for the full duration of our speaking,
    regardless of length. However, this is a simple enough way to start.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: So, what will we do after we capture speech? We'll process it. What exactly
    does this mean?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: What kind of app you are building will largely determine what "process it" means.
    This time around, our processing will more or less be a placeholder function to
    do other things in the future. So for now, our toy app will process captured speech
    by parroting it back to us (and outputting it to the console, for good measure).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Here's a simple function for our processing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We also want our app to speak, so let's write a function which uses the Google
    text-to-speech engine to accomplish this.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First we print out what was passed to the function to the console; then Google
    text-to-speech is used to create an audio file from the text; the audio file is
    saved to disk; and then the file is re-opened and played using the `pydub` library.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: That's the "difficult" stuff taken care of. Now we just need a few lines to
    drive the process.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Both the `speak()` and `capture()` functions are used to get the user's name
    when prompted, and then greet them. Then a while loop is entered which cycles
    between capturing speech input and performing some very elementary checks to ensure
    that *something* was captured and the user did not say 'quit' to exit. The captured
    text is passed to the `process_text()` function, which echoes what was said. This
    is then repeated *ad infinitum*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll say it again: there isn''t anything of much complexity going on here.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Save all of the above code to a file, `voice_recognition_test.py`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Now let's check out a conversation with our minimalist speech recognition app.
    Run it with the following line and see the results below (while imagining I'm
    talking and having my words repeated back to me, of course).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]   $ python voice_recognition_test.py [PRE6] What is your name?  I''M
    LISTENING...  Hello, Matthew.  What do you have to say?  I''M LISTENING...  Matthew,
    you said: "where are you from".  What do you have to say?  I''M LISTENING...  Matthew,
    you said: "i''d like some pizza".  What do you have to say?  I''M LISTENING...  Matthew,
    you said: "what is the meaning of life".  What do you have to say?  I''M LISTENING...  OK,
    bye, Matthew.    Process finished with exit code 0 [PRE7]`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
