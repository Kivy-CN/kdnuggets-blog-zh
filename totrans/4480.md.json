["```py\nfrom sklearn.datasets import load_iris\nfrom sklearn.svm import SVC\niris **=** load_iris()\nsvc **=** SVR()\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVR\ngrid = GridSearchCV(\n        estimator=SVR(kernel='rbf'),\n        param_grid={\n            'C': [0.1, 1, 100, 1000],\n            'epsilon': [0.0001, 0.0005, 0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10],\n            'gamma': [0.0001, 0.001, 0.005, 0.1, 1, 3, 5]\n        },\n        cv=5, scoring='neg_mean_squared_error', verbose=0, n_jobs=-1)\n```", "```py\ngrid.fit(X,y)\n```", "```py\n#print the best score throughout the grid search\nprint grid.best_score_#print the best parameter used for the highest score of the model.\nprint grid.best_param_\n```", "```py\nfrom sklearn.datasets import load_iris\nfrom sklearn.ensemble import RandomForestRegressor\niris **=** load_iris()\nrf = RandomForestRegressor(random_state = 42)\n```", "```py\nfrom sklearn.model_selection import RandomizedSearchCV\nrandom_grid = {'n_estimators': n_estimators,\n               'max_features': max_features,\n               'max_depth': max_depth,\n               'min_samples_split': min_samples_split,\n               'min_samples_leaf': min_samples_leaf,\n               'bootstrap': bootstrap}rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)# Fit the random search model\n```", "```py\nrf_random.fit(X,y)\n```", "```py\n#print the best score throughout the grid search\nprint rf_random.best_score_#print the best parameter used for the highest score of the model.\nprint rf_random.best_param_Output:\n**{'bootstrap': True,\n 'max_depth': 70,\n 'max_features': 'auto',\n 'min_samples_leaf': 4,\n 'min_samples_split': 10,\n 'n_estimators': 400}**\n```"]