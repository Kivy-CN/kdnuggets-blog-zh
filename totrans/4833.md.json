["```py\nimport numpy as np\nimport cv2\nimport argparse\nfrom collections import deque\n\ncap=cv2.VideoCapture(0)\n\npts = deque(maxlen=64)\n\nLower_green = np.array([110,50,50])\nUpper_green = np.array([130,255,255])\nwhile True:\n\tret, img=cap.read()\n\thsv=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)\n\tkernel=np.ones((5,5),np.uint8)\n\tmask=cv2.inRange(hsv,Lower_green,Upper_green)\n\tmask = cv2.erode(mask, kernel, iterations=2)\n\tmask=cv2.morphologyEx(mask,cv2.MORPH_OPEN,kernel)\n\t#mask=cv2.morphologyEx(mask,cv2.MORPH_CLOSE,kernel)\n\tmask = cv2.dilate(mask, kernel, iterations=1)\n\tres=cv2.bitwise_and(img,img,mask=mask)\n\tcnts,heir=cv2.findContours(mask.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)[-2:]\n\tcenter = None\n\n\tif len(cnts) > 0:\n\t\tc = max(cnts, key=cv2.contourArea)\n\t\t((x, y), radius) = cv2.minEnclosingCircle(c)\n\t\tM = cv2.moments(c)\n\t\tcenter = (int(M[\"m10\"] / M[\"m00\"]), int(M[\"m01\"] / M[\"m00\"]))\n\n\t\tif radius > 5:\n\t\t\tcv2.circle(img, (int(x), int(y)), int(radius),(0, 255, 255), 2)\n\t\t\tcv2.circle(img, center, 5, (0, 0, 255), -1)\n\n\tpts.appendleft(center)\n\tfor i in xrange (1,len(pts)):\n\t\tif pts[i-1]is None or pts[i] is None:\n\t\t\tcontinue\n\t\tthick = int(np.sqrt(len(pts) / float(i + 1)) * 2.5)\n\t\tcv2.line(img, pts[i-1],pts[i],(0,0,225),thick)\n\n\tcv2.imshow(\"Frame\", img)\n\tcv2.imshow(\"mask\",mask)\n\tcv2.imshow(\"res\",res)\n\n\tk=cv2.waitKey(30) & 0xFF\n\tif k==32:\n\t\tbreak\n# cleanup the camera and close any open windows\ncap.release()\ncv2.destroyAllWindows()\n```", "```py\npython Dig-Rec.py\n```", "```py\npython Digit-Recognizer.py\n```", "```py\npython Dev-Rec.py\n```", "```py\nnumpy\nmatplotlib\ncv2\nkeras\ndlib\nh5py\nscipy\n```", "```py\nnumpy\nmatplotlib\ncv2\nkeras\ndlib\nh5py\nscipy\n```"]