- en: A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python和Beautiful Soup的网页抓取逐步指南
- en: 原文：[https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html](https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html](https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html)
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/c0ade46d6957288b62f2fea3cb11f979.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python和Beautiful Soup的网页抓取逐步指南](../Images/c0ade46d6957288b62f2fea3cb11f979.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Web scraping is a technique that is used for extracting HTML content from different
    websites. These web scrapers are mainly computer bots that can directly access
    the World Wide Web using HTTP Protocol and use this information in various applications.
    The data is obtained in an unstructured format, which is then converted into a
    structured manner after performing multiple pre-processing steps. Users can save
    this data in a spreadsheet or export it through an API.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 网页抓取是一种用于从不同网站提取HTML内容的技术。这些网页抓取器主要是计算机机器人，可以通过HTTP协议直接访问万维网，并在各种应用程序中使用这些信息。数据以非结构化格式获得，然后经过多次预处理步骤后转换为结构化格式。用户可以将这些数据保存在电子表格中或通过API导出。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前3名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你在IT领域的组织'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Web scraping can also be done manually for small web pages by simply copying
    and pasting the data from the web page. But this copy and pasting would not work
    if we require data at a large scale and from multiple web pages. Here automated
    web scrapers come into the picture. They use intelligent algorithms which can
    extract large amounts of data from numerous web pages in less time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 网页抓取也可以通过手动方式进行，针对小型网页，只需从网页上复制和粘贴数据即可。但如果我们需要大规模的数据并且来自多个网页，这种复制和粘贴的方法就不适用了。此时，自动化网页抓取器就发挥作用了。它们使用智能算法，可以在更短的时间内从大量网页中提取大量数据。
- en: Uses of Web Scraping
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网页抓取的用途
- en: Web scraping is a powerful tool for businesses to gather and analyze information
    online. It has multiple applications across various industries. Below are some
    of these that you can check out.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网页抓取是企业收集和分析在线信息的强大工具。它在各个行业有多个应用。以下是一些你可以了解的应用。
- en: '**Marketing:** Web scraping is used by many companies to collect information
    about their products or services from various social media websites to get a general
    public sentiment. Also, they extract email ids from various websites and then
    send bulk promotional emails to the owners of these email ids.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**市场营销：**许多公司使用网页抓取从各种社交媒体网站收集关于其产品或服务的信息，以获取公众的普遍情感。此外，他们从各种网站提取电子邮件地址，然后向这些电子邮件地址的拥有者发送批量促销邮件。'
- en: '**Content Creation:** Web scraping can gather information from multiple sources
    like news articles, research reports, and blog posts. It helps the creator to
    create quality and trending content.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内容创建：**网页抓取可以从新闻文章、研究报告和博客文章等多个来源收集信息。它帮助创作者创建高质量和趋势内容。'
- en: '**Price Comparison:** Web scraping can be used to extract the prices of a particular
    product across multiple e-commerce websites to give a fair price comparison for
    the user. It also helps companies fix the optimal pricing of their products to
    compete with their competitors.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**价格比较：**网页抓取可以用来提取特定产品在多个电子商务网站上的价格，以为用户提供公平的价格比较。它还帮助公司确定其产品的最佳定价，以与竞争对手竞争。'
- en: '**Job Postings:** Web Scraping can also be used to collect data on various
    job openings across multiple job portals so that this information can help many
    job seekers and recruiters.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**职位发布：** 网页抓取还可以用来收集多个招聘门户网站上的各种职位信息，这些信息可以帮助许多求职者和招聘者。'
- en: Now, we will create a simple web scraper using Python and Beautiful Soup library.
    We will parse an HTML page and extract useful information from it. This tutorial
    requires a basic understanding of Python as its only prerequisite.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用 Python 和 Beautiful Soup 库创建一个简单的网页爬虫。我们将解析一个 HTML 页面并从中提取有用的信息。本教程只要求具备基本的
    Python 知识。
- en: Code Implementation
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码实现
- en: Our implementation consists of four steps which are given below.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现分为以下四个步骤。
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/ee055c249c099366e51422f4d41c386d.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![逐步指南：使用 Python 和 Beautiful Soup 进行网页抓取](../Images/ee055c249c099366e51422f4d41c386d.png)'
- en: Fig. 1 Tutorial Steps | Image by Author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1 教程步骤 | 图片来源：作者
- en: Setting Up the Environment
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: Create a separate directory for the project and install the below libraries
    using the command prompt. Creating a virtual environment first is preferable,
    but you can also install them globally.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为项目创建一个独立的目录，并使用命令提示符安装以下库。首先创建一个虚拟环境是优选的，但你也可以全局安装它们。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `requests` module extracts the HTML content from a URL. It extracts all
    the data in a raw format as a string that needs further processing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests` 模块从 URL 中提取 HTML 内容。它将所有数据以原始字符串格式提取出来，需要进一步处理。'
- en: The `bs4`  is the Beautiful Soup module. It will parse the raw HTML content
    obtained from the `request` module in a well-structured format.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`bs4` 是 Beautiful Soup 模块。它将以结构化的格式解析从 `request` 模块获得的原始 HTML 内容。'
- en: Get the HTML
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 HTML
- en: Create a Python file inside that directory and paste the following code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在该目录中创建一个 Python 文件，并粘贴以下代码。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/cb9efafed6f9268457f47bd5cee9177b.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![逐步指南：使用 Python 和 Beautiful Soup 进行网页抓取](../Images/cb9efafed6f9268457f47bd5cee9177b.png)'
- en: Image by Author
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: This script will extract all the raw HTML content from the URL `[/](/)`. This
    raw data contains all the texts, paragraphs, anchor tags, divs, etc. Our next
    task is to parse that data and extract all the texts and tags separately.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将从 URL `[/](/)` 提取所有原始 HTML 内容。这些原始数据包含所有文本、段落、锚标签、div 等。我们的下一个任务是解析这些数据，分别提取所有文本和标签。
- en: Parse the HTML
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析 HTML
- en: Here the role of Beautiful Soup comes in. It is used to parse and prettify the
    raw data obtained above. It creates a tree-like structure of our DOM, which can
    be traversed along the tree branches and able to find the target tags and objects.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这里 Beautiful Soup 的作用就体现出来了。它用于解析和美化上述获得的原始数据。它创建了一个类似树的 DOM 结构，可以沿着树枝遍历，找到目标标签和对象。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/dc89bb4185c31370c2270965337289cf.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![逐步指南：使用 Python 和 Beautiful Soup 进行网页抓取](../Images/dc89bb4185c31370c2270965337289cf.png)'
- en: Image by Author
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: You can see in the above output that Beautiful Soup has presented the content
    in a more structured format with proper indentations. The function `BeautifulSoup()`
    takes two arguments, one is the input HTML, and another is a parser. We are currently
    using `html.parser`, but there are other parsers as well, like `lxml` or `html5lib`.
    All of them have their own pros and cons. Some have better leniency, while some
    are very fast. The selection of the parser entirely depends on the user's choice.
    Below is the list of parsers with their pros and cons that you can checkout.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到在上述输出中，Beautiful Soup 将内容以更结构化的格式呈现，并进行了适当的缩进。`BeautifulSoup()` 函数接受两个参数，一个是输入
    HTML，另一个是解析器。我们当前使用的是 `html.parser`，但还有其他解析器，如 `lxml` 或 `html5lib`。它们各有优缺点，有些更宽容，有些则非常快速。解析器的选择完全取决于用户的选择。下面是解析器的列表及其优缺点，你可以查看。
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/fd6d610d81a75334c4cc84b2825f7ee7.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![逐步指南：使用 Python 和 Beautiful Soup 进行网页抓取](../Images/fd6d610d81a75334c4cc84b2825f7ee7.png)'
- en: Fig. 2 List of Parsers | Image by [crummy](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2 解析器列表 | 图片来源：[crummy](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)
- en: HTML Tree Traversal
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML 树遍历
- en: In this section, we will understand the tree structure of HTML and then extract
    the title, different tags, classes, lists, etc., from the parsed content using
    Beautiful Soup.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解HTML的树结构，然后使用Beautiful Soup从解析后的内容中提取标题、不同标签、类、列表等。
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/a9ebc016312d61b4c2ba615c2294282b.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python和Beautiful Soup进行网页抓取的逐步指南](../Images/a9ebc016312d61b4c2ba615c2294282b.png)'
- en: Fig. 3 HTML Tree Structure | Image by [w3schools](https://www.w3schools.com/js/js_htmldom_navigation.asp)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3 HTML树结构 | 图片来源 [w3schools](https://www.w3schools.com/js/js_htmldom_navigation.asp)
- en: The HTML tree represents a hierarchical information view. The root node is the
    <html> tag, which can have parents, children and siblings. The head tag and body
    tag follow the HTML tag. The head tag contains the metadata and the title, and
    the body tag contains the divs, paragraphs, heading, etc.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: HTML树表示了层级信息视图。根节点是<html>标签，它可以有父节点、子节点和兄弟节点。head标签和body标签紧随HTML标签。head标签包含元数据和标题，而body标签包含div、段落、标题等。
- en: When an HTML document is passed through Beautiful Soup, it converts the complex
    HTML content into four major Python objects; these are
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当HTML文档通过Beautiful Soup传递时，它将复杂的HTML内容转换为四种主要的Python对象；这些对象是
- en: '**BeautifulSoup:**'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BeautifulSoup:**'
- en: It represents the parsed document as a whole. It is the complete document that
    we are trying to scrap.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它代表整个解析文档。这是我们尝试抓取的完整文档。
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see the entire html content is an object of type Beautiful Soup.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到整个html内容是一个Beautiful Soup类型的对象。
- en: '**Tag:**'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**标签:**'
- en: The tag object corresponds to a particular tag in the HTML document. It can
    extract a tag from the whole document and return the first found tag if multiple
    tags with the same name are present in the DOM.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 标签对象对应于HTML文档中的特定标签。它可以从整个文档中提取一个标签，并在DOM中存在多个相同名称的标签时返回找到的第一个标签。
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Output:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**NavigableString:**'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**NavigableString:**'
- en: It contains the text inside a tag in string format. Beautiful Soup uses the
    NavigableString object to store the texts of a tag.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含标签内的文本，以字符串格式存储。Beautiful Soup使用NavigableString对象来存储标签的文本。
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Comments:**'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**评论:**'
- en: It reads the HTML comments that are present inside a tag. It is a special type
    of NavigableString.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它读取标签内存在的HTML评论。这是一种特殊类型的NavigableString。
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Output:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, we will extract the title, different tags, classes, lists, etc., from the
    parsed HTML content.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从解析后的HTML内容中提取标题、不同标签、类、列表等。
- en: 1\. Title
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 标题
- en: Getting the title of the HTML page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 获取HTML页面的标题。
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Or, you can also print the title string only.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以只打印标题字符串。
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 2\. Find and Find All
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 查找和查找所有
- en: These functions are useful when you want to search for a specific tag in the
    HTML content. Find() will give only the first occurrence of that tag, while find_all()
    will give all the occurrences of that tag. You can also iterate through them.
    Let’s see this with an example below.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数在你想要在HTML内容中搜索特定标签时很有用。find()将只返回该标签的第一次出现，而find_all()将返回所有出现的该标签。你也可以遍历它们。让我们看看下面的示例。
- en: 'find():'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'find():'
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'find_all():'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'find_all():'
- en: '[PRE17]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Output:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE18]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This will return the complete tag, but if you want to print only the string,
    you can write like that.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回完整的标签，但如果你只想打印字符串，可以这样写。
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We can also get the class, id, type, href, etc., of a particular tag. For example,
    getting the links of all the anchor tags present.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以获取特定标签的类、id、类型、href等。例如，获取所有锚标签的链接。
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Output:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/8e7d3d3443adeb546e4e2dc0fd35d2e5.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python和Beautiful Soup进行网页抓取的逐步指南](../Images/8e7d3d3443adeb546e4e2dc0fd35d2e5.png)'
- en: Image by Author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: You can also get the class of every div.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以获取每个div的类。
- en: '[PRE21]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 3\. Finding Elements using Id and Class Name
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用Id和类名查找元素
- en: We can also find specific elements by giving a particular id or a class name.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过给定特定的id或类名来查找特定元素。
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This will print the text of all the `li`s which belong to the `li-has-thumb`
    class. But writing the tag name is not always necessary if you are unsure about
    it. You can also write like this.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印所有属于`li-has-thumb`类的`li`的文本。但如果你不确定标签名称，编写标签名称并非总是必要的。你也可以这样写。
- en: '[PRE23]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It will fetch all the tags with this class name.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 它将获取所有具有此类名的标签。
- en: Now, we will discuss some more interesting methods of Beautiful Soup
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论Beautiful Soup的一些更有趣的方法
- en: Some more Methods of Beautiful Soup
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Beautiful Soup的更多方法
- en: In this section, we will discuss some more functions of Beautiful Soup that
    will make your work easier and faster.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论更多 Beautiful Soup 的功能，这些功能将使你的工作更轻松、更快捷。
- en: '`select()`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`select()`'
- en: The select() function allows us to find specific tags based on CSS selectors.
    CSS selectors are patterns that select certain HTML tags based on their class,
    id, attribute, etc.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: select() 函数允许我们根据 CSS 选择器查找特定标签。CSS 选择器是根据标签的类、ID、属性等模式来选择某些 HTML 标签的。
- en: Below is the example to find the image with the `alt` attribute starting with`KDnuggets`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例，展示如何查找 `alt` 属性以 `KDnuggets` 开头的图像。
- en: '[PRE24]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/ed2800650550ce550abb7270aa9a2243.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![逐步指南：使用 Python 和 Beautiful Soup 进行网页抓取](../Images/ed2800650550ce550abb7270aa9a2243.png)'
- en: '`parent`'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`parent`'
- en: This attribute returns the parent of a given tag.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性返回给定标签的父标签。
- en: '[PRE25]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`contents`'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`contents`'
- en: This attribute returns the contents of the selected tag.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性返回所选标签的内容。
- en: '[PRE26]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`attrs`'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`attrs`'
- en: This attribute is used to get the attributes of a tag in a dictionary.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个属性用于以字典的形式获取标签的属性。
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`has_attr()`'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`has_attr()`'
- en: This method checks if a tag has a particular attribute.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法检查标签是否具有特定属性。
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It will return True if the attribute is present, otherwise returns False.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果属性存在，它将返回 True，否则返回 False。
- en: '`find_next()`'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`find_next()`'
- en: This method finds the next tag after a given tag. It takes the name of the input
    tag that it needs to find next.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法找到给定标签之后的下一个标签。它需要输入标签的名称来查找下一个标签。
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`find_previous()`'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`find_previous()`'
- en: This method is used to find the previous tag after a given tag. It takes the
    name of the input tag that it needs to find next.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法用于查找给定标签之后的上一个标签。它需要输入标签的名称来查找下一个标签。
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: It will print the first anchor tag again.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 它将再次打印第一个锚点标签。
- en: There are many other methods that you can give a try. These methods are available
    in this documentation of the [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试许多其他方法。这些方法在 [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/)
    的文档中可以找到。
- en: Conclusion
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: We have discussed web scraping, its uses, and its Python and Beautiful Soup
    implementation. It is all for today. Feel free to comment below if you have any
    comments or suggestions.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了网页抓取、它的用途以及它在 Python 和 Beautiful Soup 中的实现。今天就到这里。如果您有任何评论或建议，请随时在下方留言。
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** 是一名 B.Tech.
    电气工程专业的学生，目前正在攻读本科最后一年。他对网页开发和机器学习领域充满兴趣。他已经追求了这一兴趣，并渴望在这些方向上继续工作。'
- en: More On This Topic
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[A Beginner’s Guide to Web Scraping Using Python](https://www.kdnuggets.com/2022/10/beginner-guide-web-scraping-python.html)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 进行网页抓取的初学者指南](https://www.kdnuggets.com/2022/10/beginner-guide-web-scraping-python.html)'
- en: '[Mastering Web Scraping with BeautifulSoup](https://www.kdnuggets.com/mastering-web-scraping-with-beautifulsoup)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握使用 BeautifulSoup 进行网页抓取](https://www.kdnuggets.com/mastering-web-scraping-with-beautifulsoup)'
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Pandas 制作美丽互动可视化的最简单方法](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
- en: '[Creating Beautiful Histograms with Seaborn](https://www.kdnuggets.com/2023/01/creating-beautiful-histograms-seaborn.html)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Seaborn 创建美丽的直方图](https://www.kdnuggets.com/2023/01/creating-beautiful-histograms-seaborn.html)'
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[像专家一样测试：Python Mock 库的逐步指南](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
- en: '[A Step by Step Guide to Reading and Understanding SQL Queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逐步阅读和理解 SQL 查询指南](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
