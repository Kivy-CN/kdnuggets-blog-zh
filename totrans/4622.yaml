- en: 10 Simple Hacks to Speed up Your Data Analysis in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/07/10-simple-hacks-speed-data-analysis-python.html](https://www.kdnuggets.com/2019/07/10-simple-hacks-speed-data-analysis-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Parul Pandey](https://www.linkedin.com/in/parul-pandey-a5498975/), Data
    Science Enthusiast**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/fd6d112577937ab23fd45ef60708771e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://pixabay.com/images/id-2123970/)'
  prefs: []
  type: TYPE_NORMAL
- en: Tips and Tricks, especially in the programming world, can be very useful. Sometimes
    a little hack can be both time and life-saving. A minor shortcut or add-on can
    sometimes prove to be a Godsend and can be a real productivity booster. So, here
    are some of my favourite tips and tricks that I have used and compiled together
    in the form of this article. Some may be fairly known and some may be new but
    I am sure they would come in pretty handy the next time you work on a Data Analysis
    project.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Profiling the pandas dataframe
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Profiling **is a process that helps us in understanding our data and[**Pandas
    Profiling**](https://github.com/pandas-profiling/pandas-profiling) is python package
    which does exactly that. It is a simple and fast way to perform exploratory data
    analysis of a Pandas Dataframe. The pandas `df.describe()`and `df.info()functions` are
    normally used as a first step in the EDA process. However, it only gives a very
    basic overview of the data and doesn’t help much in the case of large data sets.
    The Pandas Profiling function, on the other hand, extends the pandas DataFrame
    with `df.profile_report()` for quick data analysis. It displays a lot of information
    with a single line of code and that too in an interactive HTML report.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a given dataset the pandas profiling package computes the following statistics:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ecad56550efebb2dc30e3909e2bb1bb0.png)'
  prefs: []
  type: TYPE_IMG
- en: Statistics computer by Pandas Profiling package.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the age-old titanic dataset to demonstrate the capabilities of the
    versatile python profiler.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit: A week after this article was published, Pandas-Profiling came out with
    a major upgrade -version 2.0.0\. The syntax has changed a bit, in fact, the functionality
    has been included in the pandas itself and the report has become more comprehensive.
    Below is the latest usage syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the report in a Jupyter notebook, run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This single line of code is all that you need to display the data profiling
    report in a Jupyter notebook. The report is pretty detailed including charts wherever
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/888ec5d1b8d79beed629d4f3b31f4964.png)'
  prefs: []
  type: TYPE_IMG
- en: The report can also be exported into an **interactive HTML file** with the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/77cd5dac107d830fa64b1e36488a7840.png)'
  prefs: []
  type: TYPE_IMG
- en: Refer to the [documentation](https://pandas-profiling.github.io/pandas-profiling/docs/) for
    more details and examples.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Bringing Interactivity to pandas plots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Pandas** has a built-in `.plot()` function as part of the DataFrame class.
    However, the visualisations rendered with this function aren''t interactive and
    that makes it less appealing. On the contrary, the ease to plot charts with `pandas.DataFrame.plot()` function
    also cannot be ruled out. What if we could plot interactive plotly like charts
    with pandas without having to make major modifications to the code? Well, you
    can actually do that with the help of [**Cufflinks**](https://github.com/santosjorge/cufflinks)library**.**'
  prefs: []
  type: TYPE_NORMAL
- en: Cufflinks library binds the power of [**plotly**](https://www.plot.ly/) with
    the flexibility of [pandas](http://pandas.pydata.org/) for easy plotting. Let’s
    now see how we can install the library and get it working in pandas.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Time to see the magic unfold with the Titanic dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/35469750ef51f65125c84e1eb17fbde7.png)![Figure](../Images/6fb0c52d10aa70787737d7598b62dd47.png)'
  prefs: []
  type: TYPE_IMG
- en: XXX
  prefs: []
  type: TYPE_NORMAL
- en: '**df.iplot() vs df.plot()**'
  prefs: []
  type: TYPE_NORMAL
- en: The visualisation on the right shows the static chart while the left chart is
    interactive and more detailed and all this without any major change in the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Click here**](https://github.com/santosjorge/cufflinks/blob/master/Cufflinks%20Tutorial%20-%20Pandas%20Like.ipynb) for
    more examples.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. A Dash of Magic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Magic commands** are a set of convenient functions in Jupyter Notebooks that
    are designed to solve some of the common problems in standard data analysis. You
    can see all available magics with the help of `%lsmagic`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/bb157a69505a727331e7366042d0f033.png)'
  prefs: []
  type: TYPE_IMG
- en: List of all available magic functions
  prefs: []
  type: TYPE_NORMAL
- en: Magic commands are of two kinds: ***line magics***, which are prefixed by a
    single `%` character and operate on a single line of input, and ***cell magics***,
    which are associated with the double `%%` prefix and operate on multiple lines
    of input. Magic functions are callable without having to type the initial % if
    set to 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at some of them that might be useful in common data analysis tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**% pastebin**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '%pastebin uploads code to [Pastebin](https://en.wikipedia.org/wiki/Pastebin) and
    returns the url. Pastebin is an online content hosting service where we can store
    plain text like source code snippets and then the url can be shared with others.
    In fact, Github gist is also akin to **pastebin **albeitwith version control.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a python script `file.py` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Using **%pastebin** in Jupyter Notebook generates a pastebin url.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bca3617a36ba8b44974f606609fe544.png)'
  prefs: []
  type: TYPE_IMG
- en: '**%matplotlib notebook**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `%matplotlib inline` function is used to render the static matplotlib plots
    within the Jupyter notebook. Try replacing the `inline` part with `notebook `to
    get zoom-able & resize-able plots, easily. Make sure the function is called before
    importing the matplotlib library.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e30c44c157cb07da81eb12798ac203e4.png)'
  prefs: []
  type: TYPE_IMG
- en: '**%matplotlib inline vs %matplotlib notebook**'
  prefs: []
  type: TYPE_NORMAL
- en: '**%run**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `%run` function runs a python script inside a notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**%%writefile**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%%writefile` writes the contents of a cell to a file. Here the code will be
    written to a file named **foo.py** and saved in the current directory.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ab331460839793d1854a8a282d532412.png)'
  prefs: []
  type: TYPE_IMG
- en: '**%%latex**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The %%latex function renders the cell contents as LaTeX. It is useful for writing
    mathematical formulae and equations in a cell.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9523100bf882a6a7340a0a3dbbc4c4df.png)'
  prefs: []
  type: TYPE_IMG
- en: 4\. Finding and Eliminating Errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **interactive debugger** is also a magic function but I have given it a
    category of its own. If you get an exception while running the code cell, type `%debug` in
    a new line and run it. This opens an interactive debugging environment which brings
    you to the position where the exception has occurred. You can also check for values
    of variables assigned in the program and also perform operations here. To exit
    the debugger hit `q`.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/24de249f6095d5a6ecbcbc1f052e60c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 5\. Printing can be pretty too
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to produce aesthetically pleasing representations of your data structures, [**pprint**](https://docs.python.org/2/library/pprint.html) is
    the go-to module. It is especially useful when printing dictionaries or JSON data.
    Let’s have a look at an example which uses both `print` and `pprint` to display
    the output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c36d818c9468452dd36ae1d2361ac7c5.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/581e71757069ecf7f135bb2ee7d558f3.png)'
  prefs: []
  type: TYPE_IMG
- en: 6\. Making the Notes stand out.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use alert/Note boxes in your Jupyter Notebooks to highlight something
    important or anything that needs to stand out. The colour of the note depends
    upon the type of alert that is specified. Just add any or all of the following
    codes in a cell that needs to be highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: '**Blue Alert Box: info**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d080781aae3d7cf705c4071a03469d8a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Yellow Alert Box: Warning**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/eefcb6bfb4fbbb7da2ae310aa31054a5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Green Alert Box: Success**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/153e8056a7699e171ab93196f8b03755.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Red Alert Box: Danger**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b5b69b493eebb5ea48fc5abacbf6d805.png)'
  prefs: []
  type: TYPE_IMG
- en: 7\. Printing all the outputs of a cell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Consider a cell of Jupyter Notebook containing the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It is a normal property of the cell that only the last output gets printed and
    for the others, we need to add the `print()` function. Well, it turns out that
    we can print all the outputs just by adding the following snippet at the top of
    the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now all the outputs get printed one after the other.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'To revert to the original setting :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Running python scripts with the ‘i’ option.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A typical way of running a python script from the command line is: `python hello.py.` However,
    if you add an additional `-i `while running the same script e.g `python -i hello.py` it
    offers more advantages. Let’s see how.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, once the end of the program is reached, python doesn’t exit the interpreter.
    As such we can check the values of the variables and the correctness of the functions
    defined in our program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/33e2cac27f652736f64b43036e92ab3e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Secondly, we can easily invoke a python debugger since we are still in the
    interpreter by:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will bring us o the position where the exception has occurred and we can
    then work upon the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/82537e7c997adffd53bbede48ac08569.png)'
  prefs: []
  type: TYPE_IMG
- en: '*The original *[*source*](http://www.bnikolic.co.uk/blog/python-running-cline.html)* of
    the hack.*'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Commenting out code automatically
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Ctrl/Cmd + /` comments out selected lines in the cell by automatically. Hitting
    the combination again will uncomment the same line of code.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/33a4882d98f017683aa1128f5fcd85b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 10\. To delete is human, to restore divine
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Have you ever accidentally deleted a cell in a Jupyter Notebook? If yes then
    here is a shortcut which can undo that delete action.
  prefs: []
  type: TYPE_NORMAL
- en: In case you have deleted the contents of a cell, you can easily recover it by
    hitting `CTRL/CMD+Z`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you need to recover an entire deleted cell hit `ESC+Z `or `EDIT > Undo Delete
    Cells`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/121ab7f8c18f4fdea8ee2f6afc370c82.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this article, I’ve listed the main tips I have gathered while working with
    Python and Jupyter Notebooks. I am sure they will be of use to you and you will
    take back something from this article. Till then Happy Coding!.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Parul Pandey](https://www.linkedin.com/in/parul-pandey-a5498975/)**
    is a Data Science enthusiast who frequently writes for Data Science publications
    such as Towards Data Science.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/10-simple-hacks-to-speed-up-your-data-analysis-in-python-ec18c6396e6b).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Using the ‘What-If Tool’ to investigate Machine Learning models](/2019/06/using-what-if-tool-investigate-machine-learning-models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Animations with Matplotlib](/2019/05/animations-with-matplotlib.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyViz: Simplifying the Data Visualisation Process in Python](/2019/06/pyviz-data-visualisation-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RAPIDS cuDF to Speed up Your Next Data Science Workflow](https://www.kdnuggets.com/2023/04/rapids-cudf-speed-next-data-science-workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Python Tips for Data Efficiency and Speed](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Speed Up SQL Queries Using Indexes [Python Edition]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Speed Up Python Code with Caching](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Speed Up Python Pandas by Over 300x](https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
