- en: How (Not) To Use Python’s Walrus Operator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何（不）使用 Python 的海象运算符
- en: 原文：[https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator](https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator](https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator)
- en: '![How (Not) To Use Python''s Walrus Operator](../Images/0d9a37d36fa593592caba94c177311ff.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何（不）使用 Python 的海象运算符](../Images/0d9a37d36fa593592caba94c177311ff.png)'
- en: Image by Author | Created on Snappify
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供 | 在 Snappify 上创建
- en: In Python, if you want to assign values to variables within an expression, you
    can use the Walrus operator :=. While `x = 5` is a simple variable assignment,
    `x := 5` is how you'll use the Walrus operator.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，如果你想在表达式内为变量赋值，你可以使用海象运算符 :=。虽然`x = 5`是一个简单的变量赋值，但`x := 5`是你将使用海象运算符的方式。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速入门网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This operator was introduced in Python 3.8 and can help you write more concise
    and potentially more readable code (in some cases). However, using it when not
    necessary or more than necessary can also make code harder to understand.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个运算符在 Python 3.8 中引入，它可以帮助你编写更简洁、更具可读性的代码（在某些情况下）。然而，不必要或过多地使用它也会使代码更难理解。
- en: In this tutorial, we will explore both the effective and the not-so-effective
    uses of the Walrus operator with simple code examples. Let’s get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将通过简单的代码示例来探索海象运算符的有效使用和不那么有效的使用。让我们开始吧！
- en: How and When Python’s Walrus Operator is Helpful
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python的海象运算符的使用时机与方法
- en: Let’s start by looking at examples where the walrus operator can make your code
    better.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从看一些示例开始，这些示例中海象运算符可以使你的代码更好。
- en: 1\. More Concise Loops
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. 更简洁的循环
- en: It's quite common to have loop constructs where you read in an input to process
    within the loop and the looping condition depends on the input. In such cases,
    using the walrus operator helps you keep your loops cleaner.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 循环构造中常见的情况是读取输入以在循环中处理，并且循环条件依赖于输入。在这种情况下，使用海象运算符可以帮助你保持循环更简洁。
- en: '**Without Walrus Operator**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有海象运算符**'
- en: 'Consider the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下示例：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When you run the above code, you’ll be repeatedly prompted to input a value
    so long as you input a non-empty string.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行上述代码时，只要输入非空字符串，你会被重复提示输入一个值。
- en: Note that there is redundancy. You initially read in the input to the `data`
    variable. Within the loop, you print out the entered value and prompt the user
    for input again. The looping condition checks if the string is non-empty.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到有冗余的部分。你最初将输入读取到`data`变量中。在循环中，你打印出输入的值并再次提示用户输入。循环条件检查字符串是否为非空。
- en: '**With Walrus Operator**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用海象运算符**'
- en: 'You can remove the redundancy and rewrite the above version using the walrus
    operator. To do so, you can read in the input and check if it is a non-empty string—all
    within the looping condition—using the walrus operator like so:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以去除冗余，并使用海象运算符重写上述版本。为此，你可以在循环条件中读取输入并检查它是否是非空字符串—全部在循环条件中—使用海象运算符如下：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now this is more concise than the first version.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这比第一版更简洁。
- en: 2\. Better List Comprehensions
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 更好的列表推导式
- en: You’ll sometimes have function calls within list comprehensions. This can be
    inefficient if there are multiple expensive function calls. In these cases, rewriting
    using the walrus operator can be helpful.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有时你会在列表推导式中调用函数。如果有多个开销较大的函数调用，这可能会很低效。在这些情况下，使用海象运算符重写代码可能会有帮助。
- en: '**Without Walrus Operator**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**没有海象运算符**'
- en: 'Take the following example where there are two calls to the `compute_profit`
    function in the list comprehension expression:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的示例中，列表推导式中有两个对`compute_profit`函数的调用：
- en: To populate the new list with the profit value and
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要用利润值填充新列表
- en: To check if the profit value is above a specified threshold.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用来检查利润值是否超过指定的阈值。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**With Walrus Operator**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用海象运算符**'
- en: 'You can assign the return values from the function call to the `profit` variable
    and use that the populate the list like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将函数调用的返回值分配给`profit`变量，然后像这样使用它来填充列表：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This version is better if the filtering condition involves an expensive function
    call.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果过滤条件涉及昂贵的函数调用，这种版本会更好。
- en: How Not to Use Python's Walrus Operator
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何不使用 Python 的海象运算符
- en: Now that we’ve seen a few examples of how and when you can use Python’s walrus
    operator, let’s see a few anti-patterns.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了一些使用 Python 海象运算符的示例，我们来看看一些反模式。
- en: 1\. Complex List Comprehensions
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 1\. 复杂的列表推导式
- en: We used the walrus operator within a list comprehension to avoid repeated function
    calls in a previous example. But overusing the walrus operator can be just as
    bad.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在列表推导式中使用了海象运算符，以避免重复的函数调用。但是，过度使用海象运算符可能也会有坏处。
- en: The following list comprehension is hard to read due to multiple nested conditions
    and assignments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多个嵌套的条件和赋值，以下列表推导式难以阅读。
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As an exercise, you can try breaking down the logic into separate steps—within
    a regular loop and if conditional statements. This will make the code much easier
    to read and maintain.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，你可以尝试将逻辑分解为单独的步骤——在常规循环和 if 条件语句中。这将使代码更容易阅读和维护。
- en: 2\. Nested Walrus Operators
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 2\. 嵌套的海象运算符
- en: Using nested walrus operators can lead to code that is difficult to both read
    and maintain. This is particularly problematic when the logic involves multiple
    assignments and conditions within a single expression.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用嵌套的海象运算符可能会导致代码难以阅读和维护。当逻辑涉及在单个表达式内进行多次赋值和条件判断时，这尤其成问题。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In this example, the nested walrus operators make it difficult to understand—requiring
    the reader to unpack multiple layers of logic within a single line, reducing readability.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，嵌套的海象运算符使理解变得困难——要求读者在单行内解包多层逻辑，降低了可读性。
- en: Wrapping Up
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this quick tutorial, we went over how and when to and when not to use Python's
    walrus operator. You can find the code examples [on GitHub](https://github.com/balapriyac/python-basics/tree/main/walrus-operator).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个快速教程中，我们讨论了何时应该以及何时不应该使用 Python 的海象运算符。你可以在[GitHub](https://github.com/balapriyac/python-basics/tree/main/walrus-operator)上找到代码示例。
- en: If you're looking for common gotchas to avoid when programming with Python,
    read [5 Common Python Gotchas and How to Avoid Them](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解在使用 Python 编程时应该避免的常见陷阱，请阅读[5个常见的 Python 陷阱及如何避免](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)。
- en: Keep coding!
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 继续编码！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发者和技术写作者。她喜欢在数学、编程、数据科学和内容创作的交汇点上工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编码和喝咖啡！目前，她正在通过编写教程、操作指南、观点文章等与开发者社区分享她的知识。Bala
    还创建了引人入胜的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[SQL LIKE Operator Examples](https://www.kdnuggets.com/2022/09/sql-like-operator-examples.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL LIKE 运算符示例](https://www.kdnuggets.com/2022/09/sql-like-operator-examples.html)'
- en: '[Why You Should Not Overuse List Comprehensions in Python](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么你不应该过度使用 Python 的列表推导式](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)'
- en: '[Dask DataFrame is not Pandas](https://www.kdnuggets.com/2021/11/dask-dataframe-not-pandas.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Dask DataFrame 不是 Pandas](https://www.kdnuggets.com/2021/11/dask-dataframe-not-pandas.html)'
- en: '[Machine learning does not produce value for my business. Why?](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习为何未能为我的业务创造价值？](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
- en: '[The Not-so-Sexy SQL Concepts to Make You Stand Out](https://www.kdnuggets.com/2022/02/not-so-sexy-sql-concepts-stand-out.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[那些不太炫酷但能让你脱颖而出的 SQL 概念](https://www.kdnuggets.com/2022/02/not-so-sexy-sql-concepts-stand-out.html)'
- en: '[Fear not, for AI coding is here to help you!](https://www.kdnuggets.com/2023/03/manning-fear-not-ai-coding-help-you.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[别害怕，AI 编程来帮你了！](https://www.kdnuggets.com/2023/03/manning-fear-not-ai-coding-help-you.html)'
