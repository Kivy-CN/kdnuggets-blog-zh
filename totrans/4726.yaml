- en: 'Python Patterns: max Instead of if'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 模式：使用 max 代替 if
- en: 原文：[https://www.kdnuggets.com/2019/01/python-patterns-max-instead-if.html](https://www.kdnuggets.com/2019/01/python-patterns-max-instead-if.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/01/python-patterns-max-instead-if.html](https://www.kdnuggets.com/2019/01/python-patterns-max-instead-if.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '![Header image](../Images/79377060617d28ff134f156bb760451a.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Header image](../Images/79377060617d28ff134f156bb760451a.png)'
- en: When writing Python, I often have to look through a set of objects, determine
    a score for each one of them, and save both the best score and object associated
    with it. For example, looking for the highest scoring word that I can make in [Scrabble](https://en.wikipedia.org/wiki/Scrabble)
    with the letters I currently have.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写 Python 代码时，我常常需要查看一组对象，为每个对象确定一个分数，并保存最佳分数及其相关对象。例如，寻找用我目前拥有的字母在 [Scrabble](https://en.wikipedia.org/wiki/Scrabble)
    中能拼出的最高分单词。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'One way to do this is to loop over all the objects and use a placeholder to
    remember the best one seen so far, like this:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一种方法是循环遍历所有对象，使用占位符记住到目前为止看到的最佳对象，如下所示：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You have probably written this logic before in some of your own code. The code
    is not that complicated, but we can still improve its readability with a quick
    tweak.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能之前在自己的代码中写过这种逻辑。代码并不复杂，但我们仍然可以通过快速调整来提高其可读性。
- en: Simplifying with `max()`
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `max()` 简化
- en: 'What does `if score > best_score` remind you of? The way we might implement
    the `max()` function! Using `max()` helps us simplify the code nicely:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`if score > best_score` 让你想起了什么？我们可能会实现 `max()` 函数的方式！使用 `max()` 有助于我们简化代码：'
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Storing all the data together in a single tuple means that assignment and comparison
    are now handled all at once. This makes it less likely that we will mix up one
    of the assignments, and makes it clearer what we’re doing.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有数据存储在一个元组中意味着分配和比较现在可以一次性处理。这降低了我们混淆分配的可能性，并使我们所做的事情更加明确。
- en: 'There is one potential pitfall here: `max()` picks the tuple with the largest
    first element (the score in our case), which is what we want. But, if the first
    elements are the same in both tuples, `max()` continues through the remaining
    elements until the tie is broken. So if two words have the same score, `max()`
    will then compare the words next, which it does lexically.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个潜在的陷阱：`max()` 选择第一个元素最大的元组（在我们的例子中是分数），这是我们想要的。但如果两个元组的第一个元素相同，`max()`
    会继续比较其余元素，直到打破平局。因此，如果两个单词具有相同的分数，`max()` 将继续比较单词，它是按字典顺序进行的。
- en: 'To have `max()` only compare the first element, we can use the `key` parameter.
    The `key` parameter takes a function that is called on each object and returns
    another object to use in the comparison. We can use it to select just the first
    entry like so:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 `max()` 仅比较第一个元素，我们可以使用 `key` 参数。`key` 参数接受一个对每个对象调用的函数，并返回另一个用于比较的对象。我们可以使用它来选择第一个条目，如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Even Simpler
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更简单
- en: In the above examples we wanted to save both the score and the word, but what
    if we only cared about the word that generated the highest score, not the score
    itself? Then there is an even simpler way!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们想保存分数和单词，但如果我们只关心生成最高分的单词，而不是分数本身呢？那么就有一个更简单的方法！
- en: 'By default `max()` uses the standard comparison operator, but we can change
    that to use our `score_word()` using the same `key` argument from above. Then
    we have:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`max()` 使用标准比较运算符，但我们可以将其更改为使用上面相同的 `key` 参数中的 `score_word()`。这样我们就有了：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Which gives us a very compact (and relatively fool proof) pattern, with all
    the looping and placeholders pushed into the implementation of `max()`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我们一个非常紧凑（且相对可靠）的模式，将所有的循环和占位符都推入了`max()`的实现中。
- en: '**Bio: [Alexander Gude](https://www.linkedin.com/in/alexandergude/)** is currently
    a data scientist at Intuit using machine learning for fraud prevention. He holds
    a BA in physics from University of California, Berkeley, and a PhD in Elementary
    Particle Physics from University of Minnesota-Twin Cities.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[亚历山大·古德](https://www.linkedin.com/in/alexandergude/)** 目前是Intuit的数据科学家，使用机器学习进行欺诈预防。他获得了加州大学伯克利分校的物理学学士学位，以及明尼苏达大学双城分校的基础粒子物理学博士学位。'
- en: '[Original](https://alexgude.com/blog/python-patterns-max-not-if/). Reposted
    with permission.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://alexgude.com/blog/python-patterns-max-not-if/)。转载已获许可。'
- en: '**Related:**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[5 “Clean Code” Tips That Will Dramatically Improve Your Productivity](/2018/10/5-clean-code-tips-dramatically-improve-productivity.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个“清洁代码”技巧将显著提高你的生产力](/2018/10/5-clean-code-tips-dramatically-improve-productivity.html)'
- en: '[How Different are Conventional Programming and Machine Learning?](/2018/12/different-conventional-programming-machine-learning.html)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[传统编程与机器学习有多大不同？](/2018/12/different-conventional-programming-machine-learning.html)'
- en: '[Get a 2–6x Speed-up on Your Data Pre-processing with Python](/2018/10/get-speed-up-data-pre-processing-python.html)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Python加速数据预处理2–6倍](/2018/10/get-speed-up-data-pre-processing-python.html)'
- en: More On This Topic
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在数据科学项目中停止硬编码 - 使用配置文件代替](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
- en: '[3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么你应该使用线性回归模型而不是…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[忘掉PIP、Conda和requirements.txt！改用Poetry并…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
- en: '[Unveiling Hidden Patterns: An Introduction to Hierarchical Clustering](https://www.kdnuggets.com/unveiling-hidden-patterns-an-introduction-to-hierarchical-clustering)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[揭示隐藏模式：分层聚类入门](https://www.kdnuggets.com/unveiling-hidden-patterns-an-introduction-to-hierarchical-clustering)'
- en: '[Design Patterns in Machine Learning for MLOps](https://www.kdnuggets.com/2022/02/design-patterns-machine-learning-mlops.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习中的设计模式用于MLOps](https://www.kdnuggets.com/2022/02/design-patterns-machine-learning-mlops.html)'
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过《Fast Python for Data Science》提升你的Python技能！](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
