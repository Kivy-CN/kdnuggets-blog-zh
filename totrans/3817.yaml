- en: 7 Tips To Produce Readable Data Science Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7个提高数据科学代码可读性的技巧
- en: 原文：[https://www.kdnuggets.com/2022/11/7-tips-produce-readable-data-science-code.html](https://www.kdnuggets.com/2022/11/7-tips-produce-readable-data-science-code.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/11/7-tips-produce-readable-data-science-code.html](https://www.kdnuggets.com/2022/11/7-tips-produce-readable-data-science-code.html)
- en: '![7 Tips To Produce Readable Data Science Code](../Images/2d92303704dd6bf8eee0b9ed4b0f0f8c.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![7个提高数据科学代码可读性的技巧](../Images/2d92303704dd6bf8eee0b9ed4b0f0f8c.png)'
- en: '[Image by svstudioart](https://www.freepik.com/free-vector/programmer-working-web-development-code-engineer-programming-python-php-java-script-computer_14723893.htm#query=python%20code&position=4&from_view=search&track=sph)
    on Freepik'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[由svstudioart提供的图片](https://www.freepik.com/free-vector/programmer-working-web-development-code-engineer-programming-python-php-java-script-computer_14723893.htm#query=python%20code&position=4&from_view=search&track=sph)
    在Freepik上'
- en: The ability to write readable code is something developers refer to as a form
    of art. Although I partially agree with that statement, writing code, especially
    readable one, is a skill that can be developed.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写可读代码的能力被开发者称为一种艺术形式。虽然我部分同意这种说法，但编写代码，尤其是可读代码，是一种可以培养的技能。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速通道进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升您的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持您的组织进行IT支持'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: The only way to improve the readability of your code is to practice writing
    more quality code. Therefore, I recommend reading code written by other developers
    known for writing high-quality code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 提高代码可读性的唯一方法是多练习编写优质代码。因此，我建议阅读其他以编写高质量代码著称的开发者的代码。
- en: In general, readable code is an essential outcome that becomes even more critical
    the more complex your code gets. In data science, in particular, writing readable
    code is extremely important because data science applications can be pretty tricky
    to understand, so an extra complexity added by not very well-written code is not
    preferable.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，可读代码是一种重要的结果，它随着代码复杂性增加而变得更加重要。尤其是在数据科学中，编写可读代码极为重要，因为数据科学应用可能很难理解，因此，不够清晰的代码所增加的额外复杂性是不可取的。
- en: I assume you agree that writing readable code is essential. Still, how do I
    make my code more readable?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为你同意编写可读代码是至关重要的。那我该如何让我的代码更具可读性呢？
- en: In this article, we will go over a few steps that you can take to produce readable,
    high-quality code.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论一些可以采取的步骤，以生成可读且高质量的代码。
- en: Have a Structure in Mind before you Start Coding
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在开始编码之前要有一个结构的概念
- en: Before you open your editor and start coding your way through a problem, try
    to plan out your code structure. Make a structure, as detailed as possible, of
    your variables, functions, classes, and modules and how they all connect to solve
    the problem.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开编辑器并开始编写代码之前，尝试规划一下代码结构。尽可能详细地制定变量、函数、类和模块的结构，并确定它们如何相互连接以解决问题。
- en: Doing that will save a lot of time later when you implement the code, expand,
    and deploy it. I recommend you add that structure to the documentation of your
    code or make it available on GitHub if you're planning to make your code open-source.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做会在你实现、扩展和部署代码时节省大量时间。我建议你将这些结构添加到代码文档中，或者如果你计划将代码开源，将其放在GitHub上。
- en: Name your Variables Descriptively
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给变量起描述性的名称
- en: I know we all get tempted sometimes to name our variables X, Y, and Z. But then
    we get baffled when we read our code months later, trying to figure out what exactly
    is stored in variable X! Naming your variables descriptive names will not only
    help strangers reading your code, but also future you reading the code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道我们有时会被诱惑给变量命名为X、Y和Z。但当我们在几个月后阅读代码时，却因为无法确定变量X中到底存储了什么而感到困惑！给变量起具有描述性的名称不仅会帮助其他人阅读代码，还会帮助未来的你。
- en: When naming your variables, aim for exact names rather than short ones. For
    example, if you're calculating the average of a list of values, don't name your
    variable ave or av; sometimes, like average_height or average_time. Today, many
    code editors offer autocompletion, so using longer names will not make your code-writing
    process slower.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 命名变量时，目标是使用准确的名称，而不是简短的名称。例如，如果你计算一个值列表的平均值，不要将变量命名为 ave 或 av；有时使用 average_height
    或 average_time。现在，许多代码编辑器提供自动补全功能，因此使用更长的名称不会使你的代码编写过程变慢。
- en: Moreover, keep the variable's names related to that source if your code implements
    an algorithm introduced in a specific paper or book. Remember to include that
    source at the top of your code files.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你的代码实现了某篇特定论文或书籍中介绍的算法，请保持变量名称与该来源相关。记得在代码文件的顶部包括该来源。
- en: Use Functions Wisely
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 明智地使用函数
- en: Functions can be a great tool to have an organized, concise code. That is, if
    used correctly. Use functions for tasks that can be packaged into a function,
    for example, applying an operation over different data points or implementing
    an algorithm step. When you name your functions, use the same logic we covered
    when naming your variables.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以是组织和简洁代码的好工具。也就是说，如果使用得当的话。对那些可以封装到函数中的任务使用函数，例如，对不同数据点应用操作或实现算法步骤。当你命名函数时，使用我们在命名变量时讲过的相同逻辑。
- en: Collect functions with related functionalities in one code file and make it
    a module if possible. That makes it easier to find, expand and use the function.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 将具有相关功能的函数收集在一个代码文件中，并尽可能将其制成模块。这将使查找、扩展和使用函数变得更容易。
- en: Try to be clear about the specific type of the function's attributes and make
    your functions secure and expandable.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量明确函数属性的具体类型，并使你的函数安全且可扩展。
- en: Target Clear and Concise Docstrings
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 瞄准清晰而简洁的文档字符串
- en: Documenting your code is an essential step, whether it be complete documentation
    or in-code one (docstrings). Docstrings are strings at the start of a code file,
    after a function/ class definition, that tell the reader the purpose of the code/
    function or class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 文档化你的代码是一个重要步骤，无论是完整的文档还是代码内文档（文档字符串）。文档字符串是在代码文件开始处、函数/类定义后出现的字符串，它们告诉读者代码/函数或类的目的。
- en: Docstrings are meant to be a short hint of what your code is and how it works.
    For example, when used at the beginning of a function (right below the function
    header), it should include the expected types of attributes and their role in
    the function, the output of the function, and a sentence or two about how that
    output is calculated.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串旨在简要提示你的代码是什么以及如何工作。例如，当在函数的开头（函数头下面）使用时，它应包括预期的属性类型及其在函数中的作用、函数的输出以及一两句关于该输出如何计算的描述。
- en: In the case of a class, the docstring should include the class attributes and
    methods and how they can be used.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于类，文档字符串应包含类属性和方法，以及它们如何使用。
- en: Don't Reinvent the Wheel (unless you can do it better)
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不要重新发明轮子（除非你能做得更好）
- en: If a function you need is already implemented by a supported package or a third-party
    developer, use it rather than implementing it all over. When you use a package,
    ensure you know all the functions it includes so you save time trying to implement
    something you can use.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要的函数已经由支持的包或第三方开发者实现，使用它而不是重新实现。当你使用一个包时，确保了解它包含的所有函数，以节省实现可以使用的功能的时间。
- en: The few scenarios where I recommend implementing a functionality by yourself
    are when you're new to programming and trying to learn how everything works or
    if you can implement a function better with less complexity. Otherwise, it's simpler
    for you and others to use your code to use what's already implemented.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐你自己实现功能的少数场景是当你刚开始编程并尝试了解一切是如何运作的，或当你可以以更少的复杂性更好地实现一个函数。否则，你和其他人使用已经实现的代码会更简单。
- en: Aim for Simple, Longer Steps than Short, Complex Ones
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目标是简单、较长的步骤，而不是短而复杂的步骤
- en: When you try to implement an idea presented in a paper or a book, or an algorithm,
    aim for clear steps rather than trying to group multiple steps together to have
    shorter code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当你尝试实现论文或书籍中提出的想法或算法时，目标应是明确的步骤，而不是试图将多个步骤组合在一起以减少代码长度。
- en: Yes, shorter code may show how good you are at using the idioms of a programming
    language. Still, it can also make your code unnecessarily complex. Complex to
    read, test, debug and expand. Especially when the algorithm you're implementing
    is complex by itself, adding this extra layer of complexity by grouping several
    steps together will lead to a not-very-flexible code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，较短的代码可能展示了你使用编程语言惯用法的能力。然而，它也可能使你的代码变得不必要的复杂。复杂到难以阅读、测试、调试和扩展。尤其是当你实现的算法本身就很复杂时，通过将多个步骤组合在一起而增加额外的复杂性，会导致代码变得不够灵活。
- en: Stay Consistent
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持一致
- en: Consistency is excellent for code readability. When planning your code structure,
    decide on a style to use throughout your code. That includes determining a system
    to name your variables, functions, and classes. How you will use comments, address
    the different mathematical steps in this algorithm, modulize your code and use
    existing packages.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一致性对于代码的可读性至关重要。在规划代码结构时，决定使用一种风格贯穿整个代码。这包括确定命名变量、函数和类的系统。如何使用注释，处理算法中的不同数学步骤，模块化代码以及使用现有的包。
- en: Following and understanding your code will be much faster when you have a consistent
    style and pattern.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的代码风格和模式一致时，跟踪和理解你的代码会更快。
- en: Final Thoughts
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最后的思考
- en: One of the unavoidable things about being a data scientist is using code written
    by someone else. And although reading and understanding codes written by other
    people will always be a time-consuming task, there are a couple of steps you can
    follow to make your code easier to follow and use for those who are going to use
    it.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为数据科学家，不可避免的一件事就是使用别人编写的代码。尽管阅读和理解他人编写的代码总是一个耗时的任务，但你可以采取一些步骤，使你的代码更易于跟随和使用。
- en: Although the tips covered in this article can be used by anyone who writes code
    and not only data scientists, it is, in my opinion, extra crucial for data scientists
    to produce readable code to overcome some of the difficulties that already exist
    due to the math behind most data science algorithms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本文中的技巧可以被任何写代码的人使用，而不仅仅是数据科学家，但在我看来，对于数据科学家来说，编写可读代码尤为重要，以克服由于大多数数据科学算法背后的数学而产生的一些困难。
- en: So, if you want to start writing better, more readable code, this article would
    be a good place to start. Remember, writing better code is a skill; just like
    any other skill, it improves with practice.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想开始编写更好、更易读的代码，这篇文章将是一个很好的起点。记住，编写更好的代码是一项技能，就像其他技能一样，随着实践会不断提高。
- en: '**[Sara Metwalli](https://www.linkedin.com/in/sara-a-metwalli/)** is a Ph.D.
    candidate at Keio University researching ways to test and debug quantum circuits.
    I am an IBM research intern and Qiskit advocate helping build a more quantum future.
    I am also a writer on Medium, Built-in, She Can Code, and KDN writing articles
    about programming, data science, and tech topics. I am also a lead in the Woman
    Who Code Python international chapter, a train enthusiast, a traveler, and a photography
    lover.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Sara Metwalli](https://www.linkedin.com/in/sara-a-metwalli/)** 是庆应大学的博士候选人，研究测试和调试量子电路的方法。我是IBM的研究实习生和Qiskit倡导者，帮助构建一个更加量子的未来。我还是Medium、Built-in、She
    Can Code和KDN的作家，撰写关于编程、数据科学和技术主题的文章。我也是国际女性编程Python分会的负责人，一个火车爱好者、旅行者和摄影爱好者。'
- en: More On This Topic
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Machine learning does not produce value for my business. Why?](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习未能为我的业务创造价值。为什么？](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
- en: '[ChatGPT Code Interpreter: Do Data Science in Minutes](https://www.kdnuggets.com/2023/07/chatgpt-code-interpreter-data-science-minutes.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ChatGPT代码解释器：几分钟内完成数据科学](https://www.kdnuggets.com/2023/07/chatgpt-code-interpreter-data-science-minutes.html)'
- en: '[5 Ways You Can Use ChatGPT''s Code Interpreter For Data Science](https://www.kdnuggets.com/2023/08/5-ways-chatgpt-code-interpreter-data-science.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你可以用ChatGPT的代码解释器做数据科学的5种方法](https://www.kdnuggets.com/2023/08/5-ways-chatgpt-code-interpreter-data-science.html)'
- en: '[Drag, Drop, Analyze: The Rise of No-Code Data Science](https://www.kdnuggets.com/drag-drop-analyze-the-rise-of-nocode-data-science)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[拖拽、放置、分析：无代码数据科学的兴起](https://www.kdnuggets.com/drag-drop-analyze-the-rise-of-nocode-data-science)'
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家的可重用Python代码管理](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[How To Comment Your Python Code as a Data Scientist](https://www.kdnuggets.com/how-to-comment-your-python-code-as-a-data-scientist)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何作为数据科学家对你的 Python 代码进行注释](https://www.kdnuggets.com/how-to-comment-your-python-code-as-a-data-scientist)'
