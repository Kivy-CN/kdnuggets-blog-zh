- en: Automate Microsoft Excel and Word Using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/08/automate-microsoft-excel-word-python.html](https://www.kdnuggets.com/2021/08/automate-microsoft-excel-word-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/3da70b1153fb84477014c33753751857.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Isaac Smith](https://unsplash.com/@isaacmsmith?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Excel and Word are without a shred of doubt the two most abundantly
    used software in the corporate and non-corporate world. They are practically synonymous
    with the term ‘work’ itself. Oftentimes, not a week goes by without us firing
    up the combination of the two and one way or another putting their goodness to
    use. While for the average daily purpose automation would not be solicited, there
    are times when automation can be a necessity. Namely, when you have a multitude
    of charts, figures, tables, and reports to generate, it can become an exceedingly
    tedious undertaking if you choose the manual route. Well, it doesn’t have to be
    that way. There is in fact a way to create a pipeline in Python where you can
    seamlessly integrate the two to produce spreadsheets in Excel and then transfer
    the results to Word to generate a report virtually instantaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Openpyxl
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Meet Openpyxl, arguably one of the most versatile bindings in Python that makes
    interfacing with Excel quite literally a stroll in the park. Armed with it you
    can read and write all current and legacy excel formats i.e. xlsx and xls. Openpyxl
    allows you to populate rows and columns, execute formulae, create 2D and 3D charts,
    label axes and titles, and a plethora of other [abilities](https://openpyxl.readthedocs.io/en/stable/index.html) that
    can come in handy. Most importantly however, this package enables you to iterate
    over an endless numbers of rows and columns in Excel, thereby saving you from
    all that pesky number crunching and plotting that you had to do previously.
  prefs: []
  type: TYPE_NORMAL
- en: Python-docx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And then comes along Python-docx, this package is to Word what Openpyxl is to
    Excel. If you haven’t already studied their [documentation](https://python-docx.readthedocs.io/en/latest/),
    then you should probably take a look. Python-docx is without exaggeration one
    of the simplest and most self-explanatory toolkits I have worked with ever since
    I started working with Python itself. It allows you to automate document generation
    by inserting text, filling in tables and rendering images into your report automatically
    without any overhead whatsoever.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without further ado let’s create our very own automated pipeline. Go ahead
    and fire up Anaconda (or any other IDE of your choice) and install the following
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Microsoft Excel Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Initially, we’ll load an Excel workbook that has already been created (shown
    below):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/52f4ba3dd0aade877b8554f81494495b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Subsequently, we’ll iterate over all of the rows in our spreadsheet to compute
    and insert the values for power by multiplying current by voltage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Once that is done, we will use the calculated values for power to generate
    a line chart that will be inserted into the specified cell as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/22ae0f23a3d6984b894822a78cbea668.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatically generated Excel spreadsheet. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting Chart
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have generated our chart, we need to extract it as an image so
    that we can use it in our Word report. First, we’ll declare the exact location
    of our Excel file and also where the output chart image should be saved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then access the spreadsheet using the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Subsequently, you can iterate over all of the chart objects in the spreadsheet
    (if there are more than one) and save them in the specified location as such:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Microsoft Word Automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our chart image generated, we must create a template document
    that is basically a normal Microsoft Word Document (.docx) formulated exactly
    in the way we want our report to look, including typefaces, font sizes, formatting,
    and page structure. Then all we need to do is to create placeholders for our automated
    content i.e. table values and images and declare them with variable names as shown
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a3c67ea6dd71be4518c41b89adbc7e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Word document template. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any automated content can be declared inside a pair of double curly brackets
    {{*variable_name*}}, including text and images. For tables, you need to create
    a table with a template row with all the columns included, and then you need to
    append one row above and one row below with the following notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**First row:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Last row:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the figure above the variable names are
  prefs: []
  type: TYPE_NORMAL
- en: '*table_contents* for the Python dictionary that will store our tabular data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Index *for the dictionary keys (first column)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Power, Current, and Voltage *for the dictionary values (second, third and
    fourth columns)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we import our template document into Python and create a dictionary that
    will store our table’s values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Next we‘ll’ import the chart image that was previously produced by Excel and
    will create another dictionary to instantiate all of the placeholder variables
    declared in the template document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we’ll render the report with our table of values and chart image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And there you go, an automatically generated Microsoft Word report with numbers
    and a chart created in Microsoft Excel. And with that, you have a fully automated
    pipeline that can be used to create as many tables, charts, and documents as you
    could possibly ever need.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/51cb8d13e890c7eb47fc3eb40aaa4a49.png)'
  prefs: []
  type: TYPE_IMG
- en: Automatically generated report. Image by the author.
  prefs: []
  type: TYPE_NORMAL
- en: Source Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to learn more about data visualization and Python, then feel free
    to check out the following (affiliate linked) courses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[****Data Visualization with Python****](https://www.coursera.org/learn/python-for-data-visualization?ranMID=40328&ranEAID=hOGDdF2uhHQ&ranSiteID=hOGDdF2uhHQ-gyVyBrINeBGN.FkaHKhFYw&siteID=hOGDdF2uhHQ-gyVyBrINeBGN.FkaHKhFYw&utm_content=10&utm_medium=partners&utm_source=linkshare&utm_campaign=hOGDdF2uhHQ)'
  prefs: []
  type: TYPE_NORMAL
- en: '[****Python for Everybody Specialization****](https://www.coursera.org/specializations/python?ranMID=40328&ranEAID=hOGDdF2uhHQ&ranSiteID=hOGDdF2uhHQ-kfqIujfL9KjRC898fWsllg&siteID=hOGDdF2uhHQ-kfqIujfL9KjRC898fWsllg&utm_content=10&utm_medium=partners&utm_source=linkshare&utm_campaign=hOGDdF2uhHQ)'
  prefs: []
  type: TYPE_NORMAL
- en: The source code and template for this tutorial can be found in the following
    GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[**mkhorasani/excel_word_automation**](https://github.com/mkhorasani/excel_word_automation)'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, feel free to subscribe to Medium and explore more of my tutorials [**here**](https://khorasani.medium.com/membership).
  prefs: []
  type: TYPE_NORMAL
- en: '**[Mohammad Khorasani](https://www.linkedin.com/in/mkhorasani/)** is a hybrid
    of a data scientist and an engineer. Logistician. Candid. Realpolitik. Unlearning
    dogma one belief at a time. [Read more of Mohammad''s writings](https://khorasani.medium.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/automate-microsoft-excel-and-word-using-python-1eee9c003471).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Free Microsoft Excel for Beginners Course](https://www.kdnuggets.com/2022/09/free-microsoft-excel-beginners-course.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automate the Boring Stuff with GPT-4 and Python](https://www.kdnuggets.com/2023/03/automate-boring-stuff-chatgpt-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Tasks To Automate With Python](https://www.kdnuggets.com/2021/06/5-tasks-automate-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Simple Steps to Automate Data Cleaning with Python](https://www.kdnuggets.com/5-simple-steps-to-automate-data-cleaning-with-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automate Your Codebase with Promptr and GPT](https://www.kdnuggets.com/2023/04/automate-codebase-promptr-gpt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automate Graphic Design Activity with ChatGPT Canva Plugin](https://www.kdnuggets.com/automate-graphic-design-activity-with-chatgpt-canva-plugin)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
