["```py\n\n*## Code for iterating on the artist's folder and concatenate albums' reviews in one single artist's review*\nimport os\n\nartist_review = ''\nartist_path = 'penguin_cafe_orchestra'\nalbums = os.listdir(artist_path)\n\nfor album in albums:\nalbum_path = os.path.join(artist_path, album)\n      with open(album_path, 'r', encoding = 'utf8') as file:\n           review = file.read()\n           artist_review += review\n\n```", "```py\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n*# Define a function to plot word cloud*\ndef plot_cloud(wordcloud):\n    *# Set figure size*\n    plt.figure(figsize=(30, 10))\n    *# Display image*\n    plt.imshow(wordcloud)\n    *# No axis details*\n    plt.axis(\"off\");\n\n*# Import package*\nfrom wordcloud import WordCloud, STOPWORDS\n\n*# Generate word cloud*\nwordcloud = WordCloud(width = 3000, height = 2000, random_state=1, background_color='white', collocations=False, stopwords = STOPWORDS).generate(artist_review)\n\n*# Plot*\nplot_cloud(wordcloud)\n\n```", "```py\n\n!pip install expertai-nlapi\n\n*## Code for initializing the client and then use the emotional-traits taxonomy*\n\nimport os\n\nfrom expertai.nlapi.cloud.client import ExpertAiClient\nclient = ExpertAiClient()\n\nos.environ[\"EAI_USERNAME\"] = 'your_username'\nos.environ[\"EAI_PASSWORD\"] = 'your_password'\n\nemotions =[]\nweights = []\n\noutput = client.classification(body={\"document\": {\"text\": artist_review}}, params={'taxonomy': 'emotional-traits', 'language': 'en'})\n\nfor category in output.categories:\n    emotion = category.label\n    weight = category.frequency\n    emotions.append(emotion)\n    weights.append(weight)\n\nprint(emotions)\nprint(weights)\n\n```", "```py\n\nfrom matplotlib import pyplot as plt\nimport numpy as np\n\n*# Creating plot*\ncolors = ['#0081a7','#2a9d8f','#e9c46a','#f4a261', '#e76f51']\nfig = plt.figure(figsize =(10, 7))\nplt.pie(weights, labels = emotions, colors=colors, autopct='%1.1f%%')\n\n*# show plot*\nplt.show()\n\n```", "```py\n\nsentiment_ratings = []\nalbums_names = [album[:-4] for album in albums]\n\nfor album in albums:\n    album_path = os.path.join(artist_path, album)\n    with open(album_path, 'r', encoding = 'utf8') as file:\n        review = file.read()\n        output = client.specific_resource_analysis(\n            body={\"document\": {\"text\": review}}, params={'language': 'en', 'resource': 'sentiment' })\n            sentiment = output.sentiment.overall sentiment_ratings.append(sentiment)\n\nprint(albums_names)\nprint(sentiment_ratings)\n\n```", "```py\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n\nalbums_names = [name[:-4] for name in albums]\n\nplt.bar(albums_names, sentiment_ratings, color='#70A0AF') plt.ylabel(\"Album rating\")\nplt.title(\"Ratings of Penguin Cafe Orchestra's album\")\nplt.xticks(albums_names, rotation=70)\nplt.show()\n\n```"]