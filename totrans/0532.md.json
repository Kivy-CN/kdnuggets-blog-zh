["```py\n#Function to read resumes from the folder one by one\nmypath='D:/NLP_Resume/Candidate Resume' \nonlyfiles = [os.path.join(mypath, f) for f in os.listdir(mypath) \n             if os.path.isfile(os.path.join(mypath, f))]\n```", "```py\nimport docx2txt\nresume = docx2txt.process(\"DAVID MOORE.docx\")\ntext_resume = str(resume)\n```", "```py\nimport PyPDF2\n```", "```py\nfrom gensim.summarization.summarizer import summarize\nfrom gensim.summarization import keywords\n```", "```py\nprint(summarize(text_resume, ratio=0.2))\n```", "```py\nsummarize(jobContent, ratio=0.2)\n```", "```py\nfrom spacy.matcher import PhraseMatcher\nmatcher = PhraseMatcher(Spnlp.vocab)\nfrom collections import Counter\nfrom gensim.summarization import keywords\n```", "```py\nfrom nlp import nlp as nlp\nLangProcessor = nlp()\nkeywordsJob = LangProcessor.keywords(jobContent)\nkeywordsCV = LangProcessor.keywords(cvContent)\n```", "```py\ndef keywords(self, text):\n keyword = {}\n self.rake.extract_keywords_from_text(text)\n keyword['ranked phrases'] = self.rake.get_ranked_phrases_with_scores()\n return keyword\n```", "```py\nfor item in keywordsCV['ranked phrases'][:10]:\n print (str(round(item[0],2)) + ' - ' + item[1] )\n```", "```py\nsims = []\nphrases = []\nfor key in keywordsJob['ranked phrases']:\n rec={}\n rec['importance'] = key[0]\n texts = key[1] sims=[]\n avg_sim=0\n for cvkey in keywordsCV['ranked phrases']:\n  cvtext = cvkey[1]\n  sims.append(fuzz.ratio(texts, cvtext))\n  #sims.append(lev.ratio(texts.lower(),cvtext.lower()))\n  #sims.append(jaccard_similarity(texts,cvtext)) count=0\n for s in sims:\n count=count+s\n avg_sim = count/len(sims)\n rec['similarity'] = avg_sim\n rec['text'] = texts\n phrases.append(rec)\n```"]