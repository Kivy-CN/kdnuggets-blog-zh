- en: 5 Concepts You Should Know About Gradient Descent and Cost Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/d76ba8086768f959395ebc4c9b2fa781.png)'
  prefs: []
  type: TYPE_IMG
- en: This picture was taken at the top of Brick Hill (Nam Long Shan, Hong Kong).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Gradient descent is an iterative optimization algorithm used in machine learning
    to minimize a loss function. The loss function describes how well the model will
    perform given the current set of parameters (weights and biases), and gradient
    descent is used to find the best set of parameters. We use gradient descent to
    update the [parameters](https://ml-cheatsheet.readthedocs.io/en/latest/glossary.html#glossary-parameters) of
    our model. For example, parameters refer to coefficients in [Linear Regression](https://ml-cheatsheet.readthedocs.io/en/latest/linear_regression.html) and [weights](https://ml-cheatsheet.readthedocs.io/en/latest/nn_concepts.html#nn-weights) in
    neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, I’ll explain 5 major concepts of gradient descent and cost
    function, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Reason for minimising the Cost Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The calculation method of Gradient Descent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function of the learning rate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch Gradient Descent (BGD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stochastic gradient descent (SGD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the Cost Function?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The primary set-up for learning neural networks is to define a cost function
    (also known as a loss function) that measures how well the network predicts outputs
    on the test set. The goal is to then find a set of weights and biases that minimizes
    the cost. One common function that is often used is the [mean squared error](https://en.wikipedia.org/wiki/Mean_squared_error),
    which measures the difference between the actual value of *y* and the estimated
    value of *y* (the prediction). The equation of the below regression line is hθ(*x*)
    = θ + θ1*x*, which has only two parameters: weight (θ1)and bias *(*θ0*)*.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ec4316e92785c86355c84c1d29a539e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Minimising Cost function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The goal of any Machine Learning model is to minimize the Cost Function.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/4ad9fd044086ce7d21139e04b052bc36.png)'
  prefs: []
  type: TYPE_IMG
- en: How to Minimise the Cost Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our goal is to move from the mountain in the top right corner (high cost) to
    the dark blue sea in the bottom left (low cost). In order to get the lowest error
    value, we need to adjust the *weights* ‘*θ0***’** and ‘*θ1*’ to reach the smallest
    possible error. This is because the result of a lower error between the actual
    and the predicted values means the algorithm has done a good job in learning.
    Gradient descent is an efficient optimization algorithm that attempts to find
    a local or global minimum of a function.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating gradient descent
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gradient Descent runs iteratively to find the optimal values of the parameters
    corresponding to the minimum value of the given cost function, using calculus.
    Mathematically, the technique of the ‘*derivative*’ is extremely important to
    minimise the cost function because it helps get the minimum point. The derivative
    is a concept from calculus and refers to the slope of the function at a given
    point. We need to know the slope so that we know the direction (sign) to move
    the coefficient values in order to get a lower cost on the next iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26cdb80a0de1c698b94e989586bd6fca.png)'
  prefs: []
  type: TYPE_IMG
- en: θ1 gradually converges towards a minimum value.
  prefs: []
  type: TYPE_NORMAL
- en: The derivative of a function (in our case, *J(θ)*) on each parameter (in our
    case weight *θ*) tells us the sensitivity of the function with respect to that
    variable or how changing the variable impacts the function value. Gradient descent,
    therefore***, ***enables the learning process to make corrective updates to the
    learned estimates that move the model toward an optimal combination of parameters
    (*θ*). The cost is calculated for a machine learning algorithm over the entire
    training dataset for each iteration of the gradient descent algorithm. In Gradient
    Descent, one iteration of the algorithm is called one batch, which denotes the
    total number of samples from a dataset that is used for calculating the gradient
    for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: The step of the derivation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It would be better if you have some basic understanding of calculus because
    the technique of the partial derivative and the chain rule is being applied in
    this case.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eaec5633766b8bcc9dc195f0f5f5a851.png)'
  prefs: []
  type: TYPE_IMG
- en: To solve for the gradient, we iterate through our data points using our new *weight
    ‘θ0**’*** and *bias ‘θ1’* values and compute the partial derivatives. This new
    gradient tells us the slope of our cost function at our current position (current
    parameter values) and the direction we should move to update our parameters. The
    size of our update is controlled by the learning rate.
  prefs: []
  type: TYPE_NORMAL
- en: Learning rate (α)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/81e801c6f317ade5295a4bb41ea75969.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that we used ‘:=’ to denote an assignment or an update.
  prefs: []
  type: TYPE_NORMAL
- en: The size of these steps is called the **learning rate (α)** that gives us some
    additional control over how large of steps we make. With a large learning rate,
    we can cover more ground each step, but we risk overshooting the lowest point
    since the slope of the hill is constantly changing. With a very low learning rate,
    we can confidently move in the direction of the negative gradient since we are
    recalculating it so frequently. A low learning rate is more precise, but calculating
    the gradient is time-consuming, so it will take us a very long time to get to
    the bottom. The most commonly used rates are: *0.001, 0.003, 0.01, 0.03, 0.1,
    0.3*.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s discuss the three variants of gradient descent algorithm. The main
    difference between them is the amount of data we use when computing the gradients
    for each learning step. The trade-off between them is the accuracy of the gradient
    versus the time complexity to perform each parameter’s update (learning step).
  prefs: []
  type: TYPE_NORMAL
- en: Stochastic gradient descent (SGD)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: However, there is a disadvantage of applying a typical Gradient Descent optimization
    technique in our dataset. It becomes computationally very expensive to perform
    because we have to use all of the one million samples for completing one iteration,
    and it has to be done for every iteration until the minimum point is reached.
    This problem can be solved by Stochastic Gradient Descent.
  prefs: []
  type: TYPE_NORMAL
- en: The word ‘*stochastic’* means a system or a process that is linked with a random
    probability. Stochastic gradient descent uses this idea to speed up the process
    of performing gradient descent. Hence, unlike the typical Gradient Descent optimization,
    instead of using the whole data set for each iteration, we are able to use the
    cost gradient of only 1 example at each iteration (details are shown in the graph
    below). Even though using the whole dataset is really useful for getting to the
    minima in a less noisy or less random manner, the problem arises when our datasets
    get really large.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1493f0189dd890f78d2031c44982d392.png)'
  prefs: []
  type: TYPE_IMG
- en: The two main differences are that the stochastic gradient descent method helps
    us avoid the problem where we find those local extremities or local minimums rather
    than the overall global minimum.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned, the stochastic gradient descent method is doing one iteration
    or one row at a time, and therefore, the fluctuations are much higher than the
    batch gradient descent.
  prefs: []
  type: TYPE_NORMAL
- en: Three variants of gradient descent algorithm
  prefs: []
  type: TYPE_NORMAL
- en: '**Batch gradient descent (BGD): **calculate the error for each example in the
    training dataset, but only updates the model after all training examples have
    been evaluated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stochastic gradient descent (SGD)**: calculate the error and updates the
    model for *each example*in the training dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mini-Batch gradient descent**: split the training dataset into small batches
    that are used to calculate model error and updated model coefficients. (the most
    common implementation of gradient descent used in the field of deep learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mini-Batch gradient descent can find **a balance between the robustness of **SGD** and
    the efficiency of **BGD.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After reading this blog, you now should a better understanding of the 5 concepts
    of Gradient Descent and Cost Function:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the Cost Function is and how to minimise it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to calculate gradient descent?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the learning rate?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Batch Gradient Descent (BGD)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is Stochastic Gradient Descent (SGD) important in machine learning?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Back To Basics, Part Dos: Gradient Descent](https://www.kdnuggets.com/2023/03/back-basics-part-dos-gradient-descent.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Gradient Descent: The Mountain Trekker''s Guide to Optimization with…](https://www.kdnuggets.com/gradient-descent-the-mountain-trekker-guide-to-optimization-with-mathematics)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Concepts You Should Know Before Getting Into Transformers](https://www.kdnuggets.com/2023/01/concepts-know-getting-transformer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 SQL Concepts You Should Know For Data Science](https://www.kdnuggets.com/2022/11/7-sql-concepts-needed-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, April 13: Python Libraries Data Scientists Should…](https://www.kdnuggets.com/2022/n15.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multi-label NLP: An Analysis of Class Imbalance and Loss Function…](https://www.kdnuggets.com/2023/03/multilabel-nlp-analysis-class-imbalance-loss-function-approaches.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
