- en: 7 Steps to Mastering Intermediate Machine Learning with Python — 2019 Edition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/06/7-steps-mastering-intermediate-machine-learning-python.html](https://www.kdnuggets.com/2019/06/7-steps-mastering-intermediate-machine-learning-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: Are you interested in learning more about machine learning with Python?
  prefs: []
  type: TYPE_NORMAL
- en: I recently wrote [7 Steps to Mastering Basic Machine Learning with Python —
    2019 Edition](/2019/01/7-steps-mastering-basic-machine-learning-python.html),
    a first step in an attempt to updated a pair of posts I wrote some time back ([7
    Steps to Mastering Machine Learning With Python](/2015/11/seven-steps-machine-learning-python.html)
    and [7 More Steps to Mastering Machine Learning With Python](/2017/03/seven-more-steps-machine-learning-python.html)),
    a pair of posts which are getting stale at this point, having been around for
    a few years. It's time to add on to the "basic" post with a set of steps for learning
    "intermediate" level machine learning with Python.
  prefs: []
  type: TYPE_NORMAL
- en: We're talking "intermediate" in a relative sense, however, so do not expect
    to be a research-caliber machine learning engineer after getting through this
    post. The learning path is aimed at those with some understanding of programming,
    computer science concepts, and/or machine learning in an abstract sense, who are
    wanting to be able to use the implementations of machine learning algorithms of
    the prevalent Python libraries to build their own machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/cc79578dde02c9e894b361b626ad4b7c.png)'
  prefs: []
  type: TYPE_IMG
- en: This post, as those which came before, will leverage the existing tutorials,
    videos, and works of a variety of folks, so the thanks for anything included herein
    should be directed at them.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of having a high number of resources for each topic step (say, *dimensionality
    reduction*), I have tried to select a quality tutorial or two, along with an accessible
    video preliminarily describing the underlying theory, math, or intuition of the
    given topic when appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: These steps deal with machine learning algorithms, the importance of feature
    selection and engineering, model training, transfer learning, and more.
  prefs: []
  type: TYPE_NORMAL
- en: So grab a drink, sit back, and read the second installment in the series, and
    start mastering intermediate machine learning with Python in these 7 steps.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Getting Started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It probably goes without saying, but your first step should be to review the
    previous post in this series, [7 Steps to Mastering Basic Machine Learning with
    Python — 2019 Edition](/2019/01/7-steps-mastering-basic-machine-learning-python.html).
  prefs: []
  type: TYPE_NORMAL
- en: It might also be a good idea to keep Google's **[Machine Learning Glossary](https://developers.google.com/machine-learning/glossary/)**
    close by for reference along the way, or to have a quick look at beforehand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The quick start guide from the official documentation of each of the following
    Python libraries which are used to do a lot of the heavy lifting for machine learning
    and other data analysis tasks herein are likely a good idea to have a look at
    as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[An introduction to machine learning with scikit-learn](https://scikit-learn.org/stable/tutorial/basic/tutorial.html)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[Numpy - Quickstart tutorial](https://docs.scipy.org/doc/numpy/user/quickstart.html)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[10 Minutes to pandas](https://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, on to the fun stuff.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Feature Selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A feature is a variable from the input dataset which can be used to help make
    predictions. All features are not created equal, however, and sometimes the raw
    features provided need to be used to engineer new features which can more useful
    in this pursuit of prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Read this article on **[Feature Selection Techniques in Machine Learning with
    Python](https://towardsdatascience.com/feature-selection-techniques-in-machine-learning-with-python-f24e7da3f36e)**
    by Raheel Shaikh to get an understanding of ways to go about feature selection
    techniques, and how they are approached in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Next, read **[Beware Default Random Forest Importances](https://explained.ai/rf-importance/)**
    by Terence Parr, Kerem Turgutlu, Christopher Csiszar, and Jeremy Howard, an informative
    take on why "[t]he scikit-learn Random Forest feature importance and R's default
    Random Forest feature importance strategies are biased." Random Forest is a common
    method for selecting features to use in prediction, based on their importance,
    and this article provides insight into why blindly using any particular method
    for doing so is not a great idea.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, have a look at this article, **[Step Forward Feature Selection: A
    Practical Example in Python](/2018/06/step-forward-feature-selection-python.html)**,
    which demonstrates an implementation of step forward feature selection, a disciplined,
    statistical approach to the task.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Feature Engineering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sometimes all of the raw features, or some subset of them, can be used as is
    for prediction purposes. Other times, new features can be engineered from the
    existing in order to facilitate better prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Take, for example, a simple date. This date, as is, could be useless for prediction.
    Knowing whether that date was a weekday or weekend, or if it were a statutory
    holiday, might be incredibly helpful, however. Using this raw date to create a
    new, more useful feature is a simple example of feature engineering.
  prefs: []
  type: TYPE_NORMAL
- en: First, read **[this article on feature engineering](https://developers.google.com/machine-learning/crash-course/representation/feature-engineering)**
    from Google's Machine Learning Crash Course for an overview on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then read Will Koehrsen''s **[Feature Engineering: What Powers Machine Learning](https://towardsdatascience.com/feature-engineering-what-powers-machine-learning-93ab191bcc2d)**
    for more information on the topic, which brings Python into the picture.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, read **[Automated Feature Engineering in Python](https://towardsdatascience.com/automated-feature-engineering-in-python-99baf11cc219)**,
    also by Will Koehrsen, for an introduction on how feature engineering can be automated
    and outsourced to the algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Even More Classification
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, let''s turn our attention to some classification algorithms. The first
    part of this series considered logistic regression, decision trees, and support
    vector machines. This time around we will look at a pair of other well-used and
    time-tested techniques: k-nearest neighbors and Naive Bayes.'
  prefs: []
  type: TYPE_NORMAL
- en: First, watch this short video from StatQuest explaining what k-nearest neighbors
    is (k-NN), and what its approach to classification is.
  prefs: []
  type: TYPE_NORMAL
- en: Then read this article by Sam Grassi, **[Building & Improving a K-Nearest Neighbors
    Algorithm in Python](https://towardsdatascience.com/building-improving-a-k-nearest-neighbors-algorithm-in-python-3b6b5320d2f8)**,
    which first uses Scikit-learn's k-NN implementation to perform classification,
    and then implements k-NN from scratch in Python for comparison.
  prefs: []
  type: TYPE_NORMAL
- en: After learning about k-NN, we turn our attention to Naive Bayes. Watch this
    video, also from StatQuest, in order to establish the intuition behind the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Then it's time to get practical. Follow this tutorial, **[Naive Bayes Classification
    With Sklearn](https://blog.sicara.com/naive-bayes-classifier-sklearn-python-example-tips-42d100429e44)**,
    by Martin Müller, to learn more as you use Scikit-learn's implementation to build
    a classifier.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Model Training & Selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On to model training and selection.
  prefs: []
  type: TYPE_NORMAL
- en: There are 2 major points here. First, without trained models, we can't make
    predictions. And second, with a number of models, we need to select the "best"
    among them.
  prefs: []
  type: TYPE_NORMAL
- en: We will first look at the concept of training, testing, and validation sets.
    Read this article by Tarang Shah, **[About Train, Validation and Test Sets in
    Machine Learning](https://towardsdatascience.com/train-validation-and-test-sets-72cb40cba9e7)**,
    which introduces the concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Then look at this video from StatQuest on the related concept of cross-validation.
  prefs: []
  type: TYPE_NORMAL
- en: These concepts above are integral to model training. But what about once we
    have a number of models? How do we choose between them?
  prefs: []
  type: TYPE_NORMAL
- en: First, this video from StatQuest explains what a confusion matrix is, and how
    it helps summarize a machine learning classifier outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Dig deeper into this topic with another StatQuest video on the topic of model
    sensitivity and specificity.
  prefs: []
  type: TYPE_NORMAL
- en: After, read up on machine learning classification metrics, and how they can
    be practically implemented in Python using Scikit-learn. This article from Andrew
    Long, **[Data Science Performance Metrics for Everyone](https://towardsdatascience.com/data-science-performance-metrics-for-everyone-4d68f4859eef)**,
    introduces metrics, so start here.
  prefs: []
  type: TYPE_NORMAL
- en: Then follow along in another of Andrew Long's articles, **[Understanding Data
    Science Classification Metrics in Scikit-Learn in Python](https://towardsdatascience.com/understanding-data-science-classification-metrics-in-scikit-learn-in-python-3bc336865019)**,
    and learn how classification metrics can be implements in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, get a sense of how to choose among evaluation metrics by reading Alvira
    Swalin's **[Choosing the Right Metric for Evaluating Machine Learning Models 
    –  Part 1](/2018/04/right-metric-evaluating-machine-learning-models-1.html)**,
    and **[Choosing the Right Metric for Evaluating Machine Learning Models  –  Part
    2](/2018/06/right-metric-evaluating-machine-learning-models-2.html)**, a great
    pair of resources on how to approach this process.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Dimensionality Reduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is dimensionality reduction? Well, since you've asked, have a look at this
    video from Stanford's Jure Leskovec explaining just that.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most used forms of dimensionality reduction is a technique known
    as principal component analysis (PCA), a type of transformation which converts
    a dataset of possibly correlated variables to linearly uncorrelated variables;
    these linearly uncorrelated variables are known as principal components. Watch
    this video from StatQuest outlining PCA in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Now have a look at this article by Zichen Wang, **[PCA and SVD explained with
    numpy](https://towardsdatascience.com/pca-and-svd-explained-with-numpy-5d13b0d2a4d8)**,
    demonstrating an implementation of PCA — along with singular value decomposition
    (SVD), another popular dimensionality reduction technique — from scratch in Python
    using Numpy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the excerpt chapter **[In Depth: Principal Component Analysis](https://jakevdp.github.io/PythonDataScienceHandbook/05.09-principal-component-analysis.html)**
    from Jake VanderPlas'' book "[Python Data Science Handbook](http://shop.oreilly.com/product/0636920034919.do)"
    gives a thorough treatment to implementing PCA using Scitkit-learn.'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Transfer Learning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Transfer learning is the repurposed use of a model for a task other than the
    one it was originally trained for. Of course, transfer learning is much more complex
    than this simple one sentence explanation, but it conveys the basic idea.
  prefs: []
  type: TYPE_NORMAL
- en: Watch this video from Kaggle, which better describes what transfer learning
    is, and what it can do.
  prefs: []
  type: TYPE_NORMAL
- en: Then read Sebastian Ruder's overview of transfer learning concepts, **[Transfer
    Learning - Machine Learning's Next Frontier](http://ruder.io/transfer-learning/)**.
    The post is a couple of years old, and transfer learning moves quickly, but the
    concepts covered are no less valid today than the day it was written.
  prefs: []
  type: TYPE_NORMAL
- en: To see the value of transfer learning let's have a look at how it can be used
    for image classification (one of its greatest accomplishments) using neural networks
    created with the deep learning library Keras. If you are not familiar with Keras,
    have a look at this quick start guide, **[Introduction to Deep Learning with Keras](https://towardsdatascience.com/introduction-to-deep-learning-with-keras-17c09e4f0eb2)**,
    written by Gilbert Tanner.
  prefs: []
  type: TYPE_NORMAL
- en: Now put transfer learning to practical use with this tutorial written by George
    Seif, **[Transfer Learning for Image Classification using Keras](https://towardsdatascience.com/transfer-learning-for-image-classification-using-keras-c47ccf09c8c8)**.
    This should be enough to demonstrate how powerful transfer learning is, not just
    in image classification but also in natural language processing tasks and beyond.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you have found value in these 7 steps to mastering intermediate machine
    learning with Python. Join us next time when we will move on to some more advanced
    topics.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Basic Machine Learning with Python — 2019 Edition](/2019/01/7-steps-mastering-basic-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering SQL for Data Science — 2019 Edition](/2019/05/7-steps-mastering-sql-data-science-2019-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Data Preparation with Python](/2017/06/7-steps-mastering-data-preparation-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
