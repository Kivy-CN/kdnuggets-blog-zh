- en: Python String Processing Cheatsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/01/python-string-processing-primer.html](https://www.kdnuggets.com/2020/01/python-string-processing-primer.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: String Processing in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Natural language processing and text analytics are hot areas of research and
    application at the moment. These fields entail all sorts of specific skills and
    concepts requiring thorough understanding before moving into meaningful practice.
    Prior to getting to that point, however, basic string manipulation and processing
    is a must.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: There are 2 distinct types of broad computational string processing skills that
    need to be broached, in my opinion. The first of these is [regular expressions](https://en.wikipedia.org/wiki/Regular_expression),
    a pattern-based approach to text matching. There are numerous great introductions
    to regular expressions one can search out, but visual learners may appreciate
    the [fast.ai Code-First Intro to Natural Language Processing course video](https://youtu.be/Q1zLqfnEXdw?list=PLtmWHNX-gukKocXQOkQjuVxglSDYWsSh9&t=630)
    on the topic.
  prefs: []
  type: TYPE_NORMAL
- en: The other distinct computational string processing skill is being able to leverage
    a given programming language's standard library for basic string manipulation.
    As such, this article is a short Python string processing primer.
  prefs: []
  type: TYPE_NORMAL
- en: Note that meaningful text analytics go way beyond string processing, and the
    core of these more advanced techniques may not require you to manipulate text
    on your own very often. However, text data processing is an important and time-consuming
    part of a successful text analytics project, and these above-mentioned string
    processing skills will be invaluable here. Understanding the computational processing
    of text at a basic level is conceptually very important to understanding more
    advanced text analytics techniques as well.
  prefs: []
  type: TYPE_NORMAL
- en: Many of the following examples make use of the Python standard library [string
    module](https://docs.python.org/2/library/string.html), and so having it handy
    for reference is a good idea.
  prefs: []
  type: TYPE_NORMAL
- en: This handy cheatsheet contains all of the code in [**this downloadable PDF**](https://www.kdnuggets.com/publications/sheets/Python-String-Processing-Cheatsheet-KDnuggets.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: '[![Python String Processing Cheatsheet](../Images/1829cc006761b1f6e785213a4bd45a2e.png)](https://www.kdnuggets.com/publications/sheets/Python-String-Processing-Cheatsheet-KDnuggets.pdf)'
  prefs: []
  type: TYPE_NORMAL
- en: Stripping Whitepsace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Stripping whitespace](https://docs.python.org/3/library/stdtypes.html#str.lstrip)
    is an elementary string processing requirement. You can strip leading whitespace
    with the `lstrip()` method (left), trailing whitespace with `rstrip()` (right),
    and both leading and trailing with `strip()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Interested in stripping characters other than whitespace? The same methods are
    helpful, and are used by passing in the character(s) you want stripped.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to check out the string [`format()`](https://docs.python.org/3/library/stdtypes.html#str.format)
    documentation if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Splitting strings into lists of smaller substrings is often useful and easily
    accomplished in Python with the [`split()`](https://docs.python.org/3/library/stdtypes.html#str.split)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By default, `split()` splits on whitespace, but other character(s) sequences
    can be passed in as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Joining List Elements Into a String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Need the opposite of the above operation? You can join list element strings
    into a single string in Python using the [`join()`](https://docs.python.org/3/library/stdtypes.html#str.join)
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Ain't that the truth! And if you want to join list elements with something other
    than whitespace in between? This thing may be a little bit stranger, but also
    easily accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Reversing a String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python does not have a built-in string reverse method. However, given that strings
    can be [sliced](https://docs.python.org/3/reference/expressions.html?highlight=slice#slicings)
    like lists, reversing one can be done in the same succinct fashion that a list's
    elements can be reversed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Converting Uppercase and Lowercase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Converting between cases can be done with the [`upper()`](https://docs.python.org/3/library/stdtypes.html#str.upper),
    [`lower()`](https://docs.python.org/3/library/stdtypes.html#str.lower), and [`swapcase()`](https://docs.python.org/3/library/stdtypes.html#str.swapcase)
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Checking for String Membership
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to check for string membership in Python is using the `in` operator.
    The syntax is very natural language-like.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you are more interested in finding the location of a substring within a string
    (as opposed to simply checking whether or not the substring is contained), the
    find() string method can be more helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '`find()` returns the index of the first character of the first occurrence of
    the substring by default, and returns `-1` if the substring is not found. Check
    the documentation for available tweaks to this default behavior.'
  prefs: []
  type: TYPE_NORMAL
- en: Replacing Substrings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What if you want to *replace* substrings, instead of just find them? The Python
    [`replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace) string
    method will take care of that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: An optional count argument can specify the maximum number of successive replacements
    to make if the same substring occurs multiple times.
  prefs: []
  type: TYPE_NORMAL
- en: Combining the Output of Multiple Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have multiple lists of strings you want to combine together in some element-wise
    fashion? No problem with the [`zip()`](https://docs.python.org/3/library/functions.html#zip)
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Checking for Anagrams
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Want to check if a pair of strings are anagrams of one another? Algorithmically,
    all we need to do is count the occurrences of each letter for each string and
    check if these counts are equal. This is straightforward using the [`Counter`
    class of the `collections` module](https://docs.python.org/3/library/collections.html#collections.Counter).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Checking for Palindromes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How about if you want to check whether a given word is a palindrome? Algorithmically,
    we need to create a reverse of the word and then use the `==` operator to check
    if these 2 strings (the original and the reverse) are equal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you download the [Python String Processing Cheatsheet here](https://www.kdnuggets.com/publications/sheets/Python-String-Processing-Cheatsheet-KDnuggets.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Python String Methods](https://www.kdnuggets.com/2022/12/python-string-methods.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python String Matching Without Complex RegEx Syntax](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Preparation with SQL Cheatsheet](https://www.kdnuggets.com/2021/05/data-preparation-sql-cheat-sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, November 30: What is Chebychev''s Theorem and How…](https://www.kdnuggets.com/2022/n46.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Preparation in R Cheatsheet](https://www.kdnuggets.com/2021/10/data-preparation-r-dplyr-cheat-sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
