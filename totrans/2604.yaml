- en: How to deploy Machine Learning/Deep Learning models to the web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将机器学习/深度学习模型部署到网络
- en: 原文：[https://www.kdnuggets.com/2021/04/deploy-machine-learning-models-to-web.html](https://www.kdnuggets.com/2021/04/deploy-machine-learning-models-to-web.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/04/deploy-machine-learning-models-to-web.html](https://www.kdnuggets.com/2021/04/deploy-machine-learning-models-to-web.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '![](../Images/21d362b53192e6a8cdf55bee781e6668.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/21d362b53192e6a8cdf55bee781e6668.png)'
- en: If you are in the field of machine learning for some time, you must have created
    some machine learning or deep learning models. You must have thought about how
    will people use your Jupyter notebook? The answer is *they won’t*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在机器学习领域工作了一段时间，你一定创建过一些机器学习或深度学习模型。你一定会想，人们会如何使用你的 Jupyter notebook？答案是*他们不会*。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 加入网络安全职业的快车道'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: People can not use your Jupyter notebooks, and you need to deploy your model
    either as an API or as a complete web service, or in a mobile device, Raspberry
    PI, etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 人们无法使用你的 Jupyter notebooks，你需要将你的模型部署为 API 或完整的网络服务，或在移动设备、Raspberry PI 等上。
- en: In this article, you will learn how to deploy your deep learning model as a
    REST API, and add a form to take the input from the user, and return the predictions
    from the model.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，你将学习如何将深度学习模型部署为 REST API，并添加一个表单以获取用户输入，并返回模型的预测结果。
- en: We will use FastAPI to create it as an API and deploy it for free on Heroku.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 FastAPI 创建 API 并免费部署到 Heroku 上。
- en: 'Step 1: Installations'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 1 步：安装
- en: You need to install the necessary packages.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装必要的软件包。
- en: '**1\. FastAPI + Uvicorn**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. FastAPI + Uvicorn**'
- en: We will be FastAPI for API and Uvicorn server to run and host this API.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 FastAPI 来处理 API，并使用 Uvicorn 服务器来运行和托管这个 API。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**2\. Tensorflow 2**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. Tensorflow 2**'
- en: We will be using Tensorflow 2 for this tutorial, and you can use the framework
    of your own choice.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本教程中使用 Tensorflow 2，你可以使用你选择的框架。
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**3\. Heroku**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. Heroku**'
- en: You can install Heroku on Ubuntu directly from the terminal using the following
    command,
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Ubuntu 上通过终端直接使用以下命令安装 Heroku，
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On macOS, you can install it via,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，你可以通过以下方式安装，
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: For windows, you can install the compressed files from the official website [here](https://devcenter.heroku.com/articles/heroku-cli).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，你可以从官方 [网站](https://devcenter.heroku.com/articles/heroku-cli) 安装压缩文件。
- en: '**4\. Git**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. Git**'
- en: You also need to install git and make an account on GitHub so that we can push
    directly to GitHub and connect the main branch to our Heroku, so it will automatically
    deploy.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要安装 git 并在 GitHub 上创建一个帐户，以便我们可以直接推送到 GitHub 并将主分支连接到我们的 Heroku，这样它就会自动部署。
- en: You can use *apt *to install git on Debian.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用*apt*在 Debian 上安装 git。
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To install it on Windows, you can download it directly from [here](https://git-scm.com/download/win).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上安装，你可以直接从 [这里](https://git-scm.com/download/win)下载。
- en: To install on macOS, you can install XCode command-line tools and run the following
    command to activate it,
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 macOS 上安装，你可以安装 XCode 命令行工具并运行以下命令来激活它，
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You can also install it from the [website of git](https://git-scm.com/download/mac) on
    macOS.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以从 macOS 上的 [git 官网](https://git-scm.com/download/mac) 安装。
- en: 'Step 2: Creating our Deep Learning Model'
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 2 步：创建我们的深度学习模型
- en: We will create a simple deep learning model, which is related to sentiment analysis.
    The dataset used can be downloaded from [Kaggle](https://www.kaggle.com/crowdflower/first-gop-debate-twitter-sentiment),
    which is related to GOP tweets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的深度学习模型，该模型与情感分析相关。使用的数据集可以从 [Kaggle](https://www.kaggle.com/crowdflower/first-gop-debate-twitter-sentiment)下载，与
    GOP 推文相关。
- en: We will create this model, train it, and save it so that we can use the saved
    model in our API, and we do not have to train the model weights every time our
    API starts. We will create this model in the file **model.py**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建这个模型、训练它并保存，以便我们可以在 API 中使用保存的模型，而不必每次 API 启动时都训练模型权重。我们将在文件 **model.py**
    中创建这个模型。
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we have imported the important libraries, which will help us in the creation
    of the model and cleaning of data. I will not dive into details of the deep learning
    model or working of Tensorflow. For that, you can check this article on [KDnuggets](https://www.kdnuggets.com/2020/07/getting-started-tensorflow2.html),
    and for working on the sentiment analysis model, check out this article at [CNVRG](https://cnvrg.io/sentiment-analysis-python).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们导入了重要的库，这些库将帮助我们创建模型和清理数据。我不会深入探讨深度学习模型或 Tensorflow 的工作原理。有关详细信息，你可以查看
    [KDnuggets](https://www.kdnuggets.com/2020/07/getting-started-tensorflow2.html)
    上的文章，对于情感分析模型的工作，请查看 [CNVRG](https://cnvrg.io/sentiment-analysis-python) 上的文章。
- en: We will read the data using Pandas.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Pandas 读取数据。
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We will create a function to remove unwanted characters in Tweets using Regex.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个函数，使用正则表达式移除推文中的不需要的字符。
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We will use Tensorflow’s tokenizer to tokenize our dataset, and Tensorflow’s
    pad_sequences to pad our sequences.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Tensorflow 的分词器对数据集进行分词，并使用 Tensorflow 的 pad_sequences 对序列进行填充。
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now we will split the dataset into training and testing portions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将数据集拆分为训练集和测试集。
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It is now time to design and create the deep learning model. We will simply
    use an embedding layer and some LSTM layers with dropout.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是设计和创建深度学习模型的时候了。我们将简单地使用嵌入层和一些带有 dropout 的 LSTM 层。
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We will now fit the model.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将拟合模型。
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now the deep learning model is trained, we will save the model so that we do
    not have to train every time we reload our server. Instead, we just use the trained
    model. Note that I have not done much hyper-parameter tuning or model improvement,
    as you can do it by yourself to deploy an improved model.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在深度学习模型已经训练完成，我们将保存模型，以便每次重新加载服务器时无需重新训练。我们只需使用训练好的模型。请注意，我没有进行太多超参数调优或模型改进，你可以自行进行以部署改进后的模型。
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here we have saved our model in ‘hdf5’ format. You can learn more about model
    saving and loading in [this article](https://www.kdnuggets.com/2021/02/saving-loading-models-tensorflow.html).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已将模型保存为 'hdf5' 格式。你可以在 [这篇文章](https://www.kdnuggets.com/2021/02/saving-loading-models-tensorflow.html)
    中了解更多关于模型保存和加载的信息。
- en: 'Step 3: Creating a REST API using FAST API'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 3 步：使用 FAST API 创建 REST API
- en: We will create a REST API using FAST API. We will create a new file named **app.py**.
    We will first do the important imports.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 FAST API 创建一个 REST API。我们将创建一个名为 **app.py** 的新文件。我们将首先进行重要的导入。
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here we have imported *FastAPI* and *Form *from the fast API library, using
    which we will create an Input Form and endpoint for our API. We have imported *HTMLResponse* from *starlette.response*,
    which will help in creating an input form.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从 FastAPI 库中导入了 *FastAPI* 和 *Form*，通过这些我们将为 API 创建一个输入表单和端点。我们还从 *starlette.response*
    中导入了 *HTMLResponse*，这将帮助我们创建输入表单。
- en: We will start by creating an input form so that users can input data, i.e.,
    a test string on which we can test the sentiment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个输入表单，以便用户可以输入数据，即我们可以测试情感的测试字符串。
- en: '[PRE15]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We have created our FastAPI app in the first line and used the get method on
    the /predict route, which will return an HTML response so that the user can see
    a real HTML page, and input the data on forms using the post method. We will use
    that data to predict on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一行创建了 FastAPI 应用，并在 /predict 路由上使用了 get 方法，这将返回一个 HTML 响应，以便用户可以看到真实的 HTML
    页面，并使用 post 方法在表单中输入数据。我们将利用这些数据进行预测。
- en: You can run your app now by running the following command.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以通过运行以下命令来启动你的应用程序。
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This will run your app on localhost. On the *http://127.0.0.1:8000/predict* route,
    you can see the input form.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使你的应用程序在 localhost 上运行。在 *http://127.0.0.1:8000/predict* 路由下，你可以看到输入表单。
- en: '![](../Images/ca483a807ab03e9028fa828b5c149db3.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ca483a807ab03e9028fa828b5c149db3.png)'
- en: Now let us define some helper functions, which we will use to preprocess this
    data.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们定义一些辅助函数，这些函数将用于预处理数据。
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: These functions are essentially doing the same work for cleaning and preprocessing
    data, which we have used in our model.py file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数本质上执行相同的工作，用于清理和预处理数据，这些函数已在我们的 model.py 文件中使用。
- en: Now we will create a POST request at the "/predict" route so that the data posted
    using the form can be passed into our model, and we can make predictions.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在 "/predict" 路由上创建一个 POST 请求，以便可以将使用表单发布的数据传递到我们的模型中，并进行预测。
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that is quite some code. Let us break it down. We have defined a route "/predict"
    on a POST request, where the data from the forms will be our input. We have specified
    this in the function parameter as *Form(…)*. We pass our text to the pipeline
    function so that it can return the cleaned and preprocessed data, which we can
    feed to our loaded model and get the predictions. We can get the index of highest
    predictions using the *argmax *function from numpy. We can pick the maximum probability
    using the *max *function from Python. Note that an endpoint in FastAPI has to
    return a dictionary or a *Pydantic *base model.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码有点多。让我们来拆解它。我们在 POST 请求上定义了一个路由 "/predict"，表单中的数据将作为我们的输入。我们在函数参数中将其指定为*Form(…)*。我们将文本传递给
    pipeline 函数，以便它可以返回清理和预处理后的数据，然后我们可以将其输入到加载的模型中并获取预测。我们可以使用 numpy 的*argmax*函数来获取最高预测的索引。我们可以使用
    Python 的*max*函数来挑选最大概率。请注意，FastAPI 的端点必须返回一个字典或一个*Pydantic* 基础模型。
- en: You can now run your app via
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以通过以下方式运行你的应用程序：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: At the "/predict" route, you can give an input to your model.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 "/predict" 路由上，你可以给模型提供输入。
- en: '![](../Images/130049d8adfb200d84b4b44fef322d5e.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/130049d8adfb200d84b4b44fef322d5e.png)'
- en: On which the model will predict the sentiment, and return the results.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 模型将预测情感并返回结果。
- en: '![](../Images/83418447b21170dc3e7bedd583a9aed9.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/83418447b21170dc3e7bedd583a9aed9.png)'
- en: We can also make a dummy route on the home page, i.e., “/” so that it is also
    working.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在主页上创建一个虚拟路由，即“/”，以确保它也能正常工作。
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can see the complete code here:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看完整的代码：
- en: '**Docs route on FastAPI**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**FastAPI上的文档路由**'
- en: FastAPI has an amazing “/docs”route for every application, where you can test
    your API and the requests and routes it has.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 为每个应用程序提供了一个出色的“/docs”路由，你可以在这里测试你的 API 以及它的请求和路由。
- en: 'On our API, we have 3 routes in total:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 API 中，总共有 3 个路由：
- en: '![](../Images/8f4bfbb77669529c73ef39baa7eadee0.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8f4bfbb77669529c73ef39baa7eadee0.png)'
- en: We can test all 3 by clicking on them. We will test the most important one,
    that is, the POST request on predict route, which performs all our calculations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过点击它们来测试所有3个请求。我们将测试最重要的一个，即对预测路由的 POST 请求，它执行所有的计算。
- en: '![](../Images/7bb8707e108be543154a804039714738.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7bb8707e108be543154a804039714738.png)'
- en: 'Click on ‘Try it out’ to pass in the desired text to get its sentiment:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“尝试一下”以传入所需的文本并获取其情感：
- en: '![](../Images/0e2f80e43fd58c731d136e78d96c8a7c.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0e2f80e43fd58c731d136e78d96c8a7c.png)'
- en: 'Now you can check the results in the responses:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以在响应中检查结果：
- en: '![](../Images/c0db77efa57b3cd92cf426ad98861945.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c0db77efa57b3cd92cf426ad98861945.png)'
- en: A response of 200 means that the request is successful, and you will get a valid
    desired output.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 响应状态码200表示请求成功，你将得到一个有效的期望输出。
- en: 'Step 4: Adding appropriate files helpful to deployment'
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 4 步：添加有助于部署的适当文件
- en: To define a Python version for your app on Heroku, you need to add a *runtime.txt* file
    in your folder. In that file, you can define your Python version. Just write in
    it the suitable Python version. Note that it is a sensitive file, so make sure
    to write it in the correct format, as specified, or else Heroku will throw some
    errors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 要为你的应用程序在 Heroku 上定义 Python 版本，你需要在你的文件夹中添加一个*runtime.txt*文件。在该文件中，你可以定义你的 Python
    版本。只需在其中写入合适的 Python 版本。注意这是一个敏感文件，所以确保以指定的正确格式写入，否则 Heroku 会报错。
- en: '[PRE21]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To run the uvicorn server on Heroku, you need to add a Procfile. Note that this
    file has no extension. Just create a file named “*Procfile*“. Add the following
    command in Procfile.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Heroku 上运行 uvicorn 服务器，你需要添加一个 Procfile。注意这个文件没有扩展名。只需创建一个名为“*Procfile*”的文件。在
    Procfile 中添加以下命令。
- en: '[PRE22]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that you need to run the server on 0.0.0.0, and the port should be 5000
    on Heroku.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，你需要在 0.0.0.0 上运行服务器，并且端口应该是 5000。
- en: Another important file is *requirments.txt* file. Add all the important libraries
    that your project needs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的文件是*requirments.txt*文件。将你项目所需的所有重要库添加到其中。
- en: '[PRE23]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can add a *.gitignore* file to ignore the files which you will not use:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以添加一个*.gitignore*文件来忽略你不需要的文件：
- en: '[PRE24]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Step 5: Deploying on Github'
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 5 步：在 Github 上部署
- en: The next step is to deploy this web app on Github. You need to create a new
    repository on [GitHub](https://github.com/). Then open the command line and change
    the directory to the project directory.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是在 GitHub 上部署这个 Web 应用程序。你需要在 [GitHub](https://github.com/) 上创建一个新的仓库。然后打开命令行并将目录更改为项目目录。
- en: 'You need to initialize the repository:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要初始化仓库：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Then add all the files:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后添加所有文件：
- en: '[PRE26]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Commit all the files:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 提交所有文件：
- en: '[PRE27]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Change the branch to main:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 将分支更改为 main：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Connect the folder to the repository on GitHub:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件夹连接到 GitHub 上的仓库：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Push the repository:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 推送仓库：
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Step 6: Deploying on Heroku'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第 6 步：在 Heroku 上部署
- en: You need to create a new app on the Heroku dashboard.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在 Heroku 仪表板上创建一个新的应用程序。
- en: '![](../Images/ae54f7c7872f46ae23adf7e7666ad0bf.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae54f7c7872f46ae23adf7e7666ad0bf.png)'
- en: Choose an appropriate name for your app.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的应用程序选择一个合适的名称。
- en: In the deploy section, in the deployment method, choose GitHub.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署部分，在部署方法中选择 GitHub。
- en: '![](../Images/7ffd3800a31de1615cb5b610508263f1.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7ffd3800a31de1615cb5b610508263f1.png)'
- en: Search your repo here, and connect to it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里搜索你的仓库，并连接到它。
- en: '![](../Images/c6e6a30fc28c124cf0f3f090cd0878e0.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c6e6a30fc28c124cf0f3f090cd0878e0.png)'
- en: You can choose automatic deploys so that every change in the deployment branch
    on GitHub will be automatically deployed to the app. For the first time, you need
    to manually deploy the app. Then every time you update your deployment branch
    on GitHub, it will be automatically be deployed.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择自动部署，这样每次在 GitHub 上的部署分支有变更时，应用程序将自动部署。第一次需要手动部署应用程序。然后每次你在 GitHub 上更新部署分支时，它将会自动部署。
- en: '![](../Images/4ee145d19449ea0144c2f1dc0e855f6a.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4ee145d19449ea0144c2f1dc0e855f6a.png)'
- en: By clicking on Deploy Branch, it will start the deployment process, and you
    can see the logs by clicking on “More”, which can help you see the logs of applications,
    and you can see any error if you face.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“部署分支”将启动部署过程，你可以通过点击“更多”来查看日志，这可以帮助你查看应用程序的日志，如果遇到错误，你可以看到。
- en: '![](../Images/2ee3e95bc44948700c828857b7fdbf66.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2ee3e95bc44948700c828857b7fdbf66.png)'
- en: Once the build is successful, you can check your app by clicking on Open app.
    You can go to all the routes you have defined earlier in your app, and test them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建成功，你可以点击“打开应用程序”来检查你的应用程序。你可以访问你在应用程序中之前定义的所有路由，并进行测试。
- en: '![](../Images/922f6247d9b0abdf5cbe13e0f7c4e093.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/922f6247d9b0abdf5cbe13e0f7c4e093.png)'
- en: '**Seeing Deployment history**'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '**查看部署历史**'
- en: You can check the deployment history of your app on GitHub by checking the environment
    tab on the bottom left.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过检查 GitHub 上底部左侧的环境标签来查看应用程序的部署历史记录。
- en: '![](../Images/d2a5eea06168d3cacdae3c4abe57dbad.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d2a5eea06168d3cacdae3c4abe57dbad.png)'
- en: It will also show you all the history of deployment.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这也会显示所有的部署历史记录。
- en: '![](../Images/9eb2568dd680657124294dfa1adeb00f.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9eb2568dd680657124294dfa1adeb00f.png)'
- en: '**Accessing your API using Python Requests**'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Python Requests 访问你的 API**'
- en: You can access your API, which means that you can use this API on your normal
    code to perform sentiment analysis tasks.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以访问你的 API，这意味着你可以在你的普通代码中使用这个 API 来执行情感分析任务。
- en: '[PRE31]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '![](../Images/4e301cf35d5f910a673e9b67698696c8.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4e301cf35d5f910a673e9b67698696c8.png)'
- en: And you will receive the output just like you were seeing the output in the
    endpoint.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 你将收到的输出就像在端点中看到的一样。
- en: '**Accessing your API using Curl**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用 Curl 访问你的 API**'
- en: Curl is a command-line tool (you can download it from [here](https://everything.curl.dev/get))
    used to make requests from the command line. We can send the request using the
    following command.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Curl 是一个命令行工具（你可以从[这里](https://everything.curl.dev/get)下载），用于从命令行发起请求。我们可以使用以下命令发送请求。
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Here we have mentioned the type of request after -X argument, i.e., POST request.
    Then -H shows the headers our API is using, which are application/JSON and content
    type. Then we have to give data using the -d argument and pass in the text. To
    add space, use *%20*.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在 -X 参数之后我们提到了请求的类型，即 POST 请求。然后 -H 显示我们的 API 使用的头部信息，分别是 application/JSON 和内容类型。接着我们需要使用
    -d 参数提供数据并传递文本。要添加空格，请使用 *%20*。
- en: '![](../Images/a492c7457118263f52f325cd312e63b4.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a492c7457118263f52f325cd312e63b4.png)'
- en: You can check the complete code at my GitHub repository [here](https://github.com/ahmadmustafaanis/SentimentAnalysisDeployment).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我的 GitHub 仓库[这里](https://github.com/ahmadmustafaanis/SentimentAnalysisDeployment)查看完整的代码。
- en: '**Learning Outcome**'
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**学习成果**'
- en: In this article, you learned how to deploy your machine learning/deep learning
    model on the web as a REST API using Heroku and GitHub. You also learned how to
    access that API using Python *requests *module and using CURL.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你学会了如何通过 Heroku 和 GitHub 将你的机器学习/深度学习模型部署为 REST API。你还学会了如何使用 Python
    *requests* 模块和 CURL 访问该 API。
- en: '**Related:**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Overview of MLOps](https://www.kdnuggets.com/2021/03/overview-mlops.html)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MLOps 概述](https://www.kdnuggets.com/2021/03/overview-mlops.html)'
- en: '[Data Science as a Product – Why Is It So Hard?](https://www.kdnuggets.com/2020/12/data-science-product-hard.html)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学作为一种产品——为什么这么难？](https://www.kdnuggets.com/2020/12/data-science-product-hard.html)'
- en: '[Deploying Trained Models to Production with TensorFlow Serving](https://www.kdnuggets.com/2020/11/serving-tensorflow-models.html)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 TensorFlow Serving 将训练好的模型部署到生产环境](https://www.kdnuggets.com/2020/11/serving-tensorflow-models.html)'
- en: More On This Topic
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应掌握的 6 种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为伟大数据科学家所需的 5 个关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021 年最佳 ETL 工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Heroku 部署机器学习 Web 应用](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并找到目标……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计学的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
