- en: 4 Python Itertools Filter Functions You Probably Didn’t Know
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![4 Python Itertools Filter Functions You Probably Didn''t Know](../Images/9ce8e2d289bae33f8ee329b84d5e8275.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: In Python, iterators help you write more Pythonic code—and work more efficiently—with
    long sequences. The built-in [itertools](https://docs.python.org/3/library/itertools.html)
    module provides several helpful functions that create iterators.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: 'These are especially helpful when you want to just loop through the iterator,
    retrieve elements in the sequence, and process them—all without having to store
    them in memory. Today we’ll learn how to use the following four itertools filter
    functions:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: filterfalse
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: takewhile
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dropwhile
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: islice
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: 'Before You Begin: A Note on Code Examples'
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: All the four functions that we’ll discuss give *iterators*. For clarity, we’ll
    work with simple sequences and use `list()` to get a list containing all the elements
    returned by the iterator. But refrain from doing so—unless necessary—when working
    with long sequences. Because when you do so, you’ll lose the memory savings that
    iterators give you.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For simple predicate functions, you can also use *lambdas*. But for better readability,
    we’ll define regular functions and use them as predicates.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. filterfalse
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’ve been programming in Python for a while, you’ll have likely used the
    built-in `filter` function with the syntax:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `filter` function gives an iterator that returns elements from the sequence
    for which the predicate returns `True`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take an example:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, the `nums` list and `is_even` function are the sequence and the predicate,
    respectively.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the list of all *even* numbers in `nums`, we use the `filter` as shown:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Now let’s learn about `filterfalse`. We’ll import the `filterfalse` function
    (and all other functions that we’ll discuss) from the **itertools** module.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name suggests, `filterfalse` does the opposite of what the `filter`
    function does. It gives an iterator that returns elements for which the predicate
    returns `False`. Here’s the syntax to use the `filterfalse` function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The function `is_even` returns `False` for all odd numbers in `nums`. So the
    `nums_odd` list obtained using `filterfalse` is the list of all odd numbers in
    `nums`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `is_even` 对 `nums` 中的所有奇数返回 `False`。所以使用 `filterfalse` 得到的 `nums_odd` 列表是
    `nums` 中所有奇数的列表：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 2\. takewhile
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. takewhile
- en: 'The syntax to use the `takewhile` function is:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `takewhile` 函数的语法是：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `takewhile` function gives an iterator that returns elements so long as
    the predicate function returns `True`. It stops returning elements when the predicate
    returns `False` for the first time.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`takewhile` 函数返回一个迭代器，该迭代器在谓词函数返回 `True` 时返回元素。当谓词首次返回 `False` 时，它停止返回元素。'
- en: For an n-length sequence, if `seq[k]` is the first element for which the predicate
    function returns `False`, then the iterator returns `seq[0]`, `seq[1]`,…, `seq[k-1]`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长度为 n 的序列，如果 `seq[k]` 是谓词函数首次返回 `False` 的元素，则迭代器返回 `seq[0]`、`seq[1]`、...、`seq[k-1]`。
- en: 'Consider the following `nums` list and predicate function `is_less_ than_5`.
    We use the `takewhile` function as shown:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下 `nums` 列表和谓词函数 `is_less_than_5`。我们按如下方式使用 `takewhile` 函数：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, the predicate `is_less_than_5` returns `False`—for the first time—for
    the number 5:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，谓词 `is_less_than_5` 对数字 5 首次返回 `False`：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 3\. dropwhile
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. dropwhile
- en: Functionally, the `dropwhile` function does the opposite of what the `takewhile`
    function does.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能上讲，`dropwhile` 函数做的是 `takewhile` 函数的反向操作。
- en: 'Here''s how you can use the `dropwhile` function:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样使用 `dropwhile` 函数：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `dropwhile` function gives an iterator that keeps dropping elements—so long
    as the predicate is `True`. Meaning the iterator *does not return anything* until
    the predicate returns `False` for the first time. And once the predicate returns
    `False`, the iterator returns *all* the subsequent elements in the sequence.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropwhile` 函数返回一个迭代器，该迭代器会不断丢弃元素，只要谓词为 `True`。这意味着迭代器*不会返回任何东西*，直到谓词第一次返回
    `False`。一旦谓词返回 `False`，迭代器将返回序列中的*所有*后续元素。'
- en: For an n-length sequence, if `seq[k]` is the first element for which the predicate
    function returns `False`, then the iterator returns `seq[k]`, `seq[k+1]`,…, `seq[n-1]`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于长度为 n 的序列，如果 `seq[k]` 是谓词函数首次返回 `False` 的元素，则迭代器返回 `seq[k]`、`seq[k+1]`、...、`seq[n-1]`。
- en: 'Let’s use the same sequence and predicate:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的序列和谓词：
- en: '[PRE11]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Because the predicate function `is_less_than_5` returns `False`—for the first
    time—for the element 5, we get all the elements of the sequence starting from
    5:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为谓词函数 `is_less_than_5` 对元素 5 首次返回 `False`，我们得到从 5 开始的所有序列元素：
- en: '[PRE12]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 4\. islice
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. islice
- en: 'You’ll already be familiar with slicing Python iterables like lists, tuples,
    and strings. Slicing takes the syntax: `iterable[start:stop:step]`.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经熟悉了切片 Python 可迭代对象，如列表、元组和字符串。切片的语法是：`iterable[start:stop:step]`。
- en: 'However, this approach of slicing has the following drawbacks:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种切片方法有以下缺点：
- en: When working with large sequences, each slice or subsequence is a copy that
    takes up memory. This can be inefficient.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当处理大型序列时，每个切片或子序列都是一个占用内存的副本。这可能会导致低效。
- en: Because the step can also take negative values, using the start, stop, and step
    values affects readability.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为步长也可以是负值，使用开始、停止和步长值会影响可读性。
- en: 'The `islice` function addresses the above limitations:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`islice` 函数解决了上述限制：'
- en: It returns an iterator.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它返回一个迭代器。
- en: It doesn’t allow negative values for the step.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不允许步长为负值。
- en: 'You can use the `islice` function like so:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样使用 `islice` 函数：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here are a few different ways you can use the `islice` function:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是几种你可以使用 `islice` 函数的不同方式：
- en: Using `islice(seq, stop)` returns an iterator over the slice `seq[0]`, `seq[1]`,...,
    `seq[stop - 1]`.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `islice(seq, stop)` 会返回一个遍历切片 `seq[0]`、`seq[1]`、...、`seq[stop - 1]` 的迭代器。
- en: 'If you specify the start and the stop values: `islice(seq, start, stop)` the
    function returns an iterator over the slice `seq[start]`, `seq[start + 1]`,...,
    `seq[start + stop - 1]`.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你指定开始和停止值：`islice(seq, start, stop)`，函数返回一个遍历切片 `seq[start]`、`seq[start +
    1]`、...、`seq[start + stop - 1]` 的迭代器。
- en: When you specify the start, stop, and step arguments, the function returns an
    iterator over the slice `seq[start]`, `seq[start + step]`, `seq[start + 2*step]`,...,
    `seq[start + k*step]`. Such that `start + k*step` < `stop` and `start + (k+1)*step`
    >= `stop`.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你指定开始、停止和步长参数时，函数返回一个遍历切片 `seq[start]`、`seq[start + step]`、`seq[start + 2*step]`、...、`seq[start
    + k*step]` 的迭代器。使得 `start + k*step` < `stop` 且 `start + (k+1)*step` >= `stop`。
- en: 'Let’s take an example list to understand this better:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个示例列表来更好地理解这一点：
- en: '[PRE14]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now let's use the `islice` function with the syntax we have learned.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用我们已经学到的语法来使用 `islice` 函数。
- en: Using Only the Stop Value
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 仅使用结束值
- en: 'Let’s specify only the stop index:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们只指定结束索引：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And here’s the output:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using the Start and Stop Values
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用开始值和结束值
- en: 'Here, we use both the start and stop values:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了开始值和结束值：
- en: '[PRE17]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The slice starts at index 2 and extends up to but not including index 7:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 切片从索引 2 开始，扩展到但不包括索引 7：
- en: '[PRE18]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Using the Start, Stop, and Step Values
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用开始值、结束值和步长值
- en: 'When we use the start, stop, and step values:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用开始值、结束值和步长值时：
- en: '[PRE19]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We get a slice starting at index 2, extending up to but not including index
    8, with a step size of 2 (returning every second element).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到一个从索引 2 开始的切片，扩展到但不包括索引 8，步长为 2（返回每第二个元素）。
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Wrapping Up
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: I hope this tutorial helped you understand the basics of itertools filter functions.
    You’ve seen some simple examples to understand the working of these functions
    better. Next, you can learn how generators [generator functions and generator
    expressions](/2023/02/getting-started-python-generators.html) work as efficient
    python iterators.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个教程帮助你理解 itertools 过滤函数的基础知识。你已经看到了一些简单的示例，以便更好地理解这些函数的工作原理。接下来，你可以学习生成器
    [生成器函数和生成器表达式](/2023/02/getting-started-python-generators.html)如何作为高效的 Python
    迭代器工作。
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a developer
    and technical writer from India. She likes working at the intersection of math,
    programming, data science, and content creation. Her areas of interest and expertise
    include DevOps, data science, and natural language processing. She enjoys reading,
    writing, coding, and coffee! Currently, she''s working on learning and sharing
    her knowledge with the developer community by authoring tutorials, how-to guides,
    opinion pieces, and more.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** 是一位来自印度的开发人员和技术写作者。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专长包括
    DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过编写教程、操作指南、评论文章等方式，与开发者社区分享她的知识。'
- en: More On This Topic
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多相关话题
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你不知道的低代码工具的 7 种用法](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
- en: '[3 things you didn’t know about the SAS Academy for Data Science](https://www.kdnuggets.com/2022/07/sas-3-things-didnt-know-sas-academy-data-science.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你不知道的关于 SAS 数据科学学院的 3 件事](https://www.kdnuggets.com/2022/07/sas-3-things-didnt-know-sas-academy-data-science.html)'
- en: '[Exploring Infinite Iterators in Python''s itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[探索 Python 的 itertools 中的无限迭代器](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
- en: '[How to Filter Data with Python](https://www.kdnuggets.com/2022/02/filter-data-python.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Python 过滤数据](https://www.kdnuggets.com/2022/02/filter-data-python.html)'
- en: '[5 Pandas Plotting Functions You Might Not Know](https://www.kdnuggets.com/2023/02/5-pandas-plotting-functions-might-know.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个你可能不知道的 Pandas 绘图函数](https://www.kdnuggets.com/2023/02/5-pandas-plotting-functions-might-know.html)'
- en: '[Top Five SQL Window Functions You Should Know For Data Science Interviews](https://www.kdnuggets.com/2022/01/top-five-sql-window-functions-know-data-science-interviews.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学面试中你应该知道的五种 SQL 窗口函数](https://www.kdnuggets.com/2022/01/top-five-sql-window-functions-know-data-science-interviews.html)'
