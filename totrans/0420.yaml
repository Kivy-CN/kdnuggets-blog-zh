- en: 15 Python Coding Interview Questions You Must Know For Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![15 Python Coding Interview Questions You Must Know For Data Science](../Images/d4c36c3de48535d18dcecf1ef108b33a.png)'
  prefs: []
  type: TYPE_IMG
- en: Knowing Python is one of the [crucial skills every data scientist should hone](https://www.stratascratch.com/blog/what-skills-do-you-need-as-a-data-scientist/).
    And it’s not without reason. Python’s ability, combined with Pandas library, to
    manipulate and analyze data in a number of different ways makes it an ideal tool
    for a data science job.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: It comes as no surprise that all the companies looking for data scientists will
    test their Python skills on a job interview.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll have a look at what technical concepts, along with Python/Pandas functions,
    you should be familiar with to [land a data science job](https://www.stratascratch.com/blog/how-to-get-a-data-science-job-the-ultimate-guide/).
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the five topics we’ll talk about:'
  prefs: []
  type: TYPE_NORMAL
- en: Aggregation, Grouping, and Ordering Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joining Tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text Manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Datetime Manipulation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It goes without saying that these concepts are rarely tested separately, so
    by solving one question you’ll have to showcase your knowledge of multiple Python
    topics.
  prefs: []
  type: TYPE_NORMAL
- en: Aggregation, Grouping & Ordering Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Aggregation, Grouping, and Ordering Data](../Images/8682af063b3c39a5c89747f9700d7ddd.png)'
  prefs: []
  type: TYPE_IMG
- en: These three technical topics often come all together and they are fundamental
    to creating reports and doing any kind of data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: They allow you to perform some mathematical operations and present your findings
    in a representable and user-friendly way.
  prefs: []
  type: TYPE_NORMAL
- en: We'll show you several practical examples to ensure you know what we’re talking
    about.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #1: Class Performance'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This Box interview question asks you:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“You are given a table containing assignment scores of students in a class.
    Write a query that identifies the largest difference in total score of all assignments.
    Output just the difference in total score between the two students.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/10310-class-performance?python=1](https://platform.stratascratch.com/coding/10310-class-performance?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table you need to use is box_scores, which has the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| student | object |'
  prefs: []
  type: TYPE_TB
- en: '| assignment1 | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| assignment2 | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| assignment3 | int64 |'
  prefs: []
  type: TYPE_TB
- en: 'Data from the table look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Class Performance](../Images/70e254985482c539cf3cd2c8ec1428a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As a first step towards answering the question, you should sum the scores from
    all assignments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This part of the code will give you this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![output](../Images/85d6d898993a2218a404bc9b3b65ac89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that you know that, the next step is to find the largest difference between
    the total scores. You need to use the max() and min() functions to do that. Or,
    to be more specific, a difference between these two functions’ output. Add this
    to the above code, and you’ve got a final answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the output you’re looking for:'
  prefs: []
  type: TYPE_NORMAL
- en: '![output](../Images/9f3d2336ba1690a74f35a49e8bf7643f.png)'
  prefs: []
  type: TYPE_IMG
- en: The question asked to output only this difference, so no other columns are needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #2: Inspection Scores For Businesses'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The previous question didn’t require any data grouping and ordering, unlike
    the following question by the City of San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a question by the City of San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the median inspection score of each business and output the result along
    with the business name. Order records based on the inspection score in descending
    order. Try to come up with your own precise median calculation. In Postgres there
    is `percentile_disc` function available, however it''s only approximation.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9741-inspection-scores-for-businesses?python=1](https://platform.stratascratch.com/coding/9741-inspection-scores-for-businesses?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: Here, you should use the notnull() function to make sure you get only businesses
    that have the inspection score. Additionally, you have to group data on business_name
    and calculate the median for the inspection_score. Use the median() function.
    Also, use the sort_values() to sort the output in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #3: Number Of Records By Variety'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Take a look at this Microsoft question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the total number of records that belong to each variety in the dataset.
    Output the variety along with the corresponding number of records. Order records
    by the variety in ascending order.” *'
  prefs: []
  type: TYPE_NORMAL
- en: Link to the question:  [https://platform.stratascratch.com/coding/10168-number-of-records-by-variety?python=1](https://platform.stratascratch.com/coding/10168-number-of-records-by-variety?python=1)
  prefs: []
  type: TYPE_NORMAL
- en: This shouldn’t be hard to solve after the first two examples. First, you should
    group by the columns variety and sepal_length. To find the number of records per
    variety, use the count() function. Finally, use the sort_values to sort by variety
    in alphabetical order.
  prefs: []
  type: TYPE_NORMAL
- en: Joining Tables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all the previous examples, we were given only one table. We selected these
    examples, so it’s easier for you to understand how aggregation, grouping, and
    ordering data in Python work.
  prefs: []
  type: TYPE_NORMAL
- en: However, as a data scientist, you’ll more often than not have to know how to
    write a query that pulls data from several tables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #4: Lowest Priced Orders'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'One of the easiest ways to join two tables in Python is by using the merge()
    function. We’ll do that to solve the Amazon question:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the lowest order cost of each customer. Output the customer id along
    with the first name and the lowest order price.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9912-lowest-priced-orders?python=1](https://platform.stratascratch.com/coding/9912-lowest-priced-orders?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re given two tables to work with. The first table is customers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| first_name | object |'
  prefs: []
  type: TYPE_TB
- en: '| last_name | object |'
  prefs: []
  type: TYPE_TB
- en: '| city | object |'
  prefs: []
  type: TYPE_TB
- en: '| address | object |'
  prefs: []
  type: TYPE_TB
- en: '| phone_number | object |'
  prefs: []
  type: TYPE_TB
- en: 'Here’s the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![output](../Images/46618178abdffd50379ac2679d4a5b5b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The second table is named orders with the following columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '| id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| cust_id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| order_date | datetime64[ns] |'
  prefs: []
  type: TYPE_TB
- en: '| order_details | object |'
  prefs: []
  type: TYPE_TB
- en: '| total_order_cost | int64 |'
  prefs: []
  type: TYPE_TB
- en: 'And the data is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![output](../Images/32c3c082072c691fe6f75ac78f88c892.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since you need the data from both tables, you’ll have to merge or inner join
    them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You do that on the column id from the table customers, and the column cust_id
    from the table orders. The result shows two tables as one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![output table](../Images/ff5f54f7fbada8e3b0bc75aa8404eed9.png)'
  prefs: []
  type: TYPE_IMG
- en: Once you’ve done that, use the groupby() function to group the output by cust_id
    and first_name. These are the columns the question asks you to show. You need
    to show the lowest order cost for each customer, too. You do that using the min()
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'The complete answer is thus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code returns the desired output.
  prefs: []
  type: TYPE_NORMAL
- en: '![desired output](../Images/132c067b64162ddf86697fd1ca44463a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Python Coding Interview Question #5: Income By Title and Gender'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we have another question from the City of San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the average total compensation based on employee titles and gender.
    Total compensation is calculated by adding both the salary and bonus of each employee. *'
  prefs: []
  type: TYPE_NORMAL
- en: '*However, not every employee receives a bonus so disregard employees without
    bonuses in your calculation. Employee can receive more than one bonus.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Output the employee title, gender (i.e., sex), along with the average total
    compensation.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/10077-income-by-title-and-gender?python=1](https://platform.stratascratch.com/coding/10077-income-by-title-and-gender?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: When answering this question, the first step should be to group by worker and
    bonus while using the sum() function to get the bonus per worker id. Then you
    should merge the tables you have at your disposal. This is again an inner join.
    Once you do that, you can get the total compensation by adding salary and bonus.
    The last step is to output the employee title, gender, and average total compensation,
    which you get by using the mean() function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #6: Product Transaction Count'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a question by Microsoft:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the number of transactions that occurred for each product. Output the
    product name along with the corresponding number of transactions and order records
    by the product id in ascending order. You can ignore products without transactions.” *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/10163-product-transaction-count?python=1](https://platform.stratascratch.com/coding/10163-product-transaction-count?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: Here are some tips on writing a code. First, you should use the notnull() function
    to get the products with at least one transaction. Next, inner join this table
    with the table excel_sql_inventory_data using the merge() function. Use groupby()
    and transform() to get the number of transactions. Then get rid of the duplicate
    products and show the number of transactions for every product. Finally, sort
    the output by the product_id.
  prefs: []
  type: TYPE_NORMAL
- en: Data Filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![XXXXX](../Images/0f74aef6fa4d6e808bae6e9ca934e0f8.png)'
  prefs: []
  type: TYPE_IMG
- en: When you use Python, you’ll usually use it on huge amounts of data. However,
    you won’t be required to output all data because that is simply pointless.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing data also includes setting certain criteria to pull only data you
    want to see in your output. For that, you should use certain ways of filtering
    data.
  prefs: []
  type: TYPE_NORMAL
- en: While merge() also filters data in a way, here we’re talking about using the
    comparison operators (==, <, >, <=, >=), between(), or some other ways to limit
    the number of rows in the output. Let’s see how this is done in Python!
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #7: Find the Top 10 Ranked Songs in 2010'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is a question you could be asked at the Spotify interview:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“What were the top 10 ranked songs in 2010? Output the rank, group name, and
    song name but do not show the same song twice. Sort the result based on the year_rank
    in ascending order.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9650-find-the-top-10-ranked-songs-in-2010?python=1](https://platform.stratascratch.com/coding/9650-find-the-top-10-ranked-songs-in-2010?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve the problem, you need only the table billboard_top_100_year_end:'
  prefs: []
  type: TYPE_NORMAL
- en: '| id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| year | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| year_rank | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| group_name | object |'
  prefs: []
  type: TYPE_TB
- en: '| artist | object |'
  prefs: []
  type: TYPE_TB
- en: '| song_name | object |'
  prefs: []
  type: TYPE_TB
- en: 'The data from the table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![data from the table](../Images/826fb5d5ff9cb7038fc60e32c9d56ae1.png)'
  prefs: []
  type: TYPE_IMG
- en: Here’s how we approach answering the question.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The above code sets up two conditions. The first one is using the ‘==’ operator.
    By using it, we select only songs appearing in 2010\. The second condition selects
    only songs that had a ranking between 1 and 10.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running this code returns:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running this code returns](../Images/18c5130e76b89ab15d5d8d7dd0aa3eee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After that, we need to select only three columns: year_rank, group_name, and
    song_name. We will also remove duplicates using the drop_duplicates() function.'
  prefs: []
  type: TYPE_NORMAL
- en: 'That makes the code complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'It will give you the top 10 ranked songs in 2010:'
  prefs: []
  type: TYPE_NORMAL
- en: '![top 10 ranked songs in 2010](../Images/a1ae271fd507b589e20f53c0c48d084f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Python Coding Interview Question #8: Apartments in New York City and Harlem'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Try and solve the question by Airbnb:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the search details of 50 apartment searches the Harlem neighborhood
    of New York City.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9616-apartments-in-new-york-city-and-harlem?python=1](https://platform.stratascratch.com/coding/9616-apartments-in-new-york-city-and-harlem?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: Here are some hints. You need to set three conditions that will get you only
    apartment category, only those in Harlem, and the city has to be NYC. All three
    conditions will be set using the ‘==’ operator. You don’t need to show all apartments,
    so use the head() function to limit the number of rows in the output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #9: Duplicate Emails'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last question focused on filtering data is by Salesforce:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find all emails with duplicates.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9895-duplicate-emails?python=1](https://platform.stratascratch.com/coding/9895-duplicate-emails?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: This question is rather simple. You need to use the groupby() function to group
    by email and find how many times each email address appears. Then use the ‘>’
    operator on the number of email addresses to get duplicates.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with data, you’ll have to manipulate it to make it more suitable
    for your analysis. This is often the case with text data. It includes allocating
    new values to data according to the text stored, parsing and merging text, or
    finding its length, position of a certain letter, sign, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #10: Reviews Bins on Reviews Number'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next question is by Airbnb:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“To better understand the effect of the review count on the price of accommodation,
    categorize the number of reviews into the following groups along with the price.*'
  prefs: []
  type: TYPE_NORMAL
- en: '*    0 reviews: NO*'
  prefs: []
  type: TYPE_NORMAL
- en: '*    1 to 5 reviews: FEW*'
  prefs: []
  type: TYPE_NORMAL
- en: '*    6 to 15 reviews: SOME*'
  prefs: []
  type: TYPE_NORMAL
- en: '*    16 to 40 reviews: MANY*'
  prefs: []
  type: TYPE_NORMAL
- en: '*    more than 40 reviews: A LOT*'
  prefs: []
  type: TYPE_NORMAL
- en: '*Output the price and its categorization. Perform the categorization on accommodation
    level.**“*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9628-reviews-bins-on-reviews-number?python=1](https://platform.stratascratch.com/coding/9628-reviews-bins-on-reviews-number?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’re working with only one table, but the one with quite a lot of columns.
    The table is airbnb_search_details, and the columns are:'
  prefs: []
  type: TYPE_NORMAL
- en: '| id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| price | float64 |'
  prefs: []
  type: TYPE_TB
- en: '| property_type | object |'
  prefs: []
  type: TYPE_TB
- en: '| room_type | object |'
  prefs: []
  type: TYPE_TB
- en: '| amenities | object |'
  prefs: []
  type: TYPE_TB
- en: '| accommodates | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| bathrooms | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| bed_type | object |'
  prefs: []
  type: TYPE_TB
- en: '| cancellation_policy | object |'
  prefs: []
  type: TYPE_TB
- en: '| cleaning_fee | bool |'
  prefs: []
  type: TYPE_TB
- en: '| city | object |'
  prefs: []
  type: TYPE_TB
- en: '| host_identity_verified | object |'
  prefs: []
  type: TYPE_TB
- en: '| host_response_rate | object |'
  prefs: []
  type: TYPE_TB
- en: '| host_since | datetime64[ns] |'
  prefs: []
  type: TYPE_TB
- en: '| neighbourhood | object |'
  prefs: []
  type: TYPE_TB
- en: '| number_of_reviews | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| review_scores_rating | float64 |'
  prefs: []
  type: TYPE_TB
- en: '| zipcode | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| bedrooms | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| beds | int64 |'
  prefs: []
  type: TYPE_TB
- en: 'Here are several first rows from the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![several first rows from the table](../Images/a6aab6ed41cdda541b0eb8d2eba4b4f5.png)'
  prefs: []
  type: TYPE_IMG
- en: The first step in writing the code should be getting the number of reviews.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You get this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![output](../Images/32ebee564e5e091cd76904040d1fa25e.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you’d want to get the accommodation with 0 reviews, then with 1-5, 6-15,
    16-40, and more than 40 reviews. To get that, you’ll need the combination of the
    ‘==’ and ‘>’ operators, and the between() function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s what your current output should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![current output should look](../Images/935e631a876a7fbd7a812ba9813c2531.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now comes working with text in the shape of assigning the categories. And these
    are: NO, FEW, SOME, MANY, A LOT. Your code up until now is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, here are your categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![here are your categories](../Images/272f90665350ac3448c085b669a97e90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The final step is to allocate these categories to the accommodation and list
    its price:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will get you the desired output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![code will get you the desired output](../Images/771f381414a9765b404084e14de97961.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Python Coding Interview Question #11: Business Name Lengths'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next question is by the City of San Francisco:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the number of words in each business name. Avoid counting special symbols
    as words (e.g. &). Output the business name and its count of words.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/10131-business-name-lengths?python=1](https://platform.stratascratch.com/coding/10131-business-name-lengths?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: When answering the question, you should first find only distinct businesses
    using the drop_duplicates() function. Then use the replace() function to replace
    all the special symbols with blank, so you don’t count them later. Use the split()
    function to split the text into a list, and then use the len() function to count
    the number of words.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #12: Positions Of Letter ''a'''
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This question by Amazon asks you to:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Find the position of the letter ''a'' in the first name of the worker ''Amitah''.
    Use 1-based indexing, e.g. position of the second letter is 2.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9829-positions-of-letter-a?python=1](https://platform.stratascratch.com/coding/9829-positions-of-letter-a?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: There are two main concepts in the solution. The first is filtering the worker
    ‘Amitah’ using the ‘==’ operator. The second one is using the find() function
    on a string to get the position of the letter ‘a’.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating Datetime
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Manipulating Datetime](../Images/8915930f1ce1bea9fae59e19e3feb81e.png)'
  prefs: []
  type: TYPE_IMG
- en: As a data scientist, you’ll be working with dates a lot. Depending on the data
    available, you could be asked to convert data to datetime, extract a certain period
    of time (such as month or year), or manipulate datetime in any other way that’s
    suitable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #13: Number of Comments Per User in Past 30
    days'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here’s a question by Meta/Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Return the total number of comments received for each user in the last 30
    days. Don''t output users who haven''t received any comment in the defined time
    period. Assume today is 2020-02-10.” *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/2004-number-of-comments-per-user-in-past-30-days?python=1](https://platform.stratascratch.com/coding/2004-number-of-comments-per-user-in-past-30-days?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find data in the table fb_comments_count:'
  prefs: []
  type: TYPE_NORMAL
- en: '| user_id | int64 |'
  prefs: []
  type: TYPE_TB
- en: '| created_at | datetime64[ns] |'
  prefs: []
  type: TYPE_TB
- en: '| number_of_comments | int64 |'
  prefs: []
  type: TYPE_TB
- en: 'Data is here, too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data is here](../Images/9b5177a01ffd61cde052c1513cc079a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Have a look at the solution, and then we’ll explain it below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To find the comments not older than thirty days from 2020-02-10, you first need
    to convert this date to datetime using the to_datetime() function. To get the
    latest date of the comments you’re interested in, subtract 30 days from today
    using the timedelta() function. All the comments you’re interested in have date
    equal to or greater than this difference. Also, you want to exclude all the comments
    that are posted after 2020-02-10\. That’s why there’s a second condition. Finally,
    group by the user_id and use the sum() function to get the comments per user.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you did everything right, you’d get this output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![you’d get this output](../Images/6a0d16e7687bd4d8db8891383d976939.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Python Coding Interview Question #14: Finding User Purchases'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is the question by Amazon:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Write a query that''ll identify returning active users. A returning active
    user is a user that has made a second purchase within 7 days of any other of their
    purchases. Output a list of user_ids of these returning active users.”*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/10322-finding-user-purchases?python=1](https://platform.stratascratch.com/coding/10322-finding-user-purchases?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: To solve it, you need to use the strftime() function to get the date of purchase
    in an MM-DD-YYYY format. Then use the sort_values() to sort the output in ascending
    order according to the user’s ID and the date of purchase. To get the previous
    order, apply the shift() function, group by the user_id, and show the purchase
    dates.
  prefs: []
  type: TYPE_NORMAL
- en: Use the to_datetime to convert the order’s and the previous order’s date, and
    then find the difference between the two dates. Finally, filter the result so
    it outputs only users with seven days or less between the first and the second
    purchase, and use the unique() function to get only the distinct users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python Coding Interview Question #15: Customer Revenue In March'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last question is by Meta/Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '*“Calculate the total revenue from each customer in March 2019\. Include only
    customers who were active in March 2019. *'
  prefs: []
  type: TYPE_NORMAL
- en: '*Output the revenue along with the customer id and sort the results based on
    the revenue in descending order.” *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Link to the question: [https://platform.stratascratch.com/coding/9782-customer-revenue-in-march?python=1](https://platform.stratascratch.com/coding/9782-customer-revenue-in-march?python=1)'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll need to_datetime() on the column order_date. Then extract March and the
    year 2019 from the same column. Finally, group by the cust_id and sum the column
    total_order_cost, which will be the revenue you’re looking for. Use the sort_values()
    to sort the output according to revenue in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By showing you 15 interview questions from top companies, we covered five main
    topics interviewers are interested in when testing your Python skills.
  prefs: []
  type: TYPE_NORMAL
- en: We kicked off with aggregation, grouping, and ordering of data. Then we showed
    you how to join tables and filter your output. Finally, you learned how to manipulate
    text and datetime data.
  prefs: []
  type: TYPE_NORMAL
- en: These are not the only concepts you should know, of course. But it should give
    you a sound basis for interview preparation and answering some [more python interview
    questions](https://www.stratascratch.com/blog/top-30-python-interview-questions-and-answers/?utm_source=blog&utm_medium=click&utm_campaign=kdnuggets).
  prefs: []
  type: TYPE_NORMAL
- en: To practice more Python Pandas functions, check out our post “[*Python Pandas
    Interview Questions for Data Science*](https://www.stratascratch.com/blog/python-pandas-interview-questions-for-data-science/)”
    that will give you an overview of the data manipulation with Pandas and the types
    of Pandas questions asked in [Data Science Interviews](https://www.stratascratch.com/blog/data-science-interview-guide-questions-from-80-different-companies/).
  prefs: []
  type: TYPE_NORMAL
- en: '**[Nate Rosidi](https://www.stratascratch.com)** is a data scientist and in
    product strategy. He''s also an adjunct professor teaching analytics, and is the
    founder of [StrataScratch](https://www.stratascratch.com/), a platform helping
    data scientists prepare for their interviews with real interview questions from
    top companies. Connect with him on [Twitter: StrataScratch](https://twitter.com/StrataScratch)
    or [LinkedIn](https://www.linkedin.com/in/nathanrosidi/).'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets News, May 4: 9 Free Harvard Courses to Learn Data…](https://www.kdnuggets.com/2022/n18.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 Advanced Data Science SQL Interview Questions You Must Know…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Hard Python Coding Interview Questions For Data Science](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Answer Data Science Coding Interview Questions](https://www.kdnuggets.com/2022/01/answer-data-science-coding-interview-questions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Must-Know Python Tips for Coding Interviews](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[26 Data Science Interview Questions You Should Know](https://www.kdnuggets.com/26-data-science-interview-questions-you-should-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
