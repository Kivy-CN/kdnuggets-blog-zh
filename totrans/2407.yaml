- en: Primary Supervised Learning Algorithms Used in Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/06/primary-supervised-learning-algorithms-used-machine-learning.html](https://www.kdnuggets.com/2022/06/primary-supervised-learning-algorithms-used-machine-learning.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/58ae394e18949785608d8320685fe8db.png)'
  prefs: []
  type: TYPE_IMG
- en: What is Supervised Learning?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[Supervised learning](https://www.exxactcorp.com/blog/Deep-Learning/supervised-vs-unsupervised-machine-learning) is
    a machine learning subset where a machine learning model is trained on labeled
    (inputs) data. As a result, the supervised model is capable of predicting further
    outcomes (outputs) as accurately as possible.'
  prefs: []
  type: TYPE_NORMAL
- en: The concept behind supervised learning can be explained from real-life scenarios
    such as a teacher tutoring a child about a new topic for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: For simplification, let's say that the teacher wants to teach the child to successfully
    identify the image of a cat and a dog. The teacher will start the tutoring process
    by continuously showing the child images of either a cat or a dog with the addition
    of having the teacher inform the child if the image is that of a dog or a cat.
  prefs: []
  type: TYPE_NORMAL
- en: The cat and dog images can be considered labeled data as the training process
    done by the child/machine learning model will be informed which data belongs to
    which category.
  prefs: []
  type: TYPE_NORMAL
- en: What is supervised learning used for? Supervised learning can be used for regression
    and classification problems. **Classification** models allow the algorithm to
    determine the group to which the given data belongs. Examples may include True/False,
    Dog/Cat, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: While** regression** models are capable of predicting numerical values depending
    on previous data, examples may include predicting the salary of a given employee,
    or the selling price of real estate property.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we are going to list some of the most common algorithms that
    are used in supervised learning along with a practical tutorial on such algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Note that these tutorials are coded in Python. All the used datasets are provided
    on [Kaggle](https://www.kaggle.com/), thus there will be no need to download any
    large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Linear Regressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Linear regression is a supervised learning algorithm that predicts the output
    value depending on the given input values. Linear regression is used when the
    target (output) variable returns a continuous value.
  prefs: []
  type: TYPE_NORMAL
- en: There are two main types of linear algorithms, ***simple*** and ***multiple*** linear
    regressions.
  prefs: []
  type: TYPE_NORMAL
- en: Simple linear regression uses only one independent (input) variable. An example
    would be predicting the age of a child by his given height.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple linear regression, on the other hand, can use multiple independent
    variables to predict its final result. An example would be predicting the real
    estate price of a given property depending on its location, size, demand, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: '***The following is the linear regression formula***'
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/d3a79b226a6e048cd2774fe9e919f155.png)'
  prefs: []
  type: TYPE_IMG
- en: For our Python example, we will use linear regression to predict the y values
    with respect to the given x values.
  prefs: []
  type: TYPE_NORMAL
- en: Our given dataset will include only two columns; the x and the y. Note that
    the y results will return continuous values.
  prefs: []
  type: TYPE_NORMAL
- en: To find the used dataset check the[ Random Linear Regression dataset](https://www.kaggle.com/datasets/andonians/random-linear-regression) on
    Kaggle. Below is a screenshot of the given dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/280d2410807a2293b81ba02ad2c3b310.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a Linear Regression Model with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. Import the necessary libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Reading and Sampling our dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To simplify our dataset we took a sample of 50 data rows and rounded the data
    values to 2 significant figures.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you should import the given dataset before finalizing this step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Filtering the Null and Infinite values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If our dataset contains null and infinite values, unnecessary errors may arise.
    Therefore, we will use the clean_dataset function to clean our dataset of such
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Choosing our dependent and independent values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that we converted our data into DataFrame format. The[ dataframe](https://www.geeksforgeeks.org/python-pandas-dataframe/) datatype
    is a 2-dimensional structure that aligns our data into rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Splitting the dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will divide our dataset into training and testing portions. We chose our
    testing dataset size to be 20 percent of the total dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Note that by having the random_state=1, each time the model does run the same
    data split will occur resulting in the same exact training and testing datasets.
  prefs: []
  type: TYPE_NORMAL
- en: This can be useful in cases where you would like to tune your model further.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Building Linear Regression Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the imported linear regression model, we can freely use the linear regression
    algorithm in our model, bypassing the x and y training variables that we obtained
    for the given model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Plotting our data in a scattered manner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Plotting our linear regression line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/44a460808ee0fdd55b638530812db36f.png)'
  prefs: []
  type: TYPE_IMG
- en: The blue dots indicate our data points, while the red line is the best fit linear
    regression line drawn by our model. The linear model algorithm will always try
    to draw the best fit line to predict the results as accurately as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Logistic Regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to linear regression, logistic regression is used to predict an output
    value depending on a defined input variable, but the main difference between these
    two algorithms is that the output of the logistic regression algorithm should
    be a categorization(discrete) variable.
  prefs: []
  type: TYPE_NORMAL
- en: For our Python example, we will use logistic regression to classify given flowers
    into two different categories/species. Our given dataset will include multiple
    features of different flower species.
  prefs: []
  type: TYPE_NORMAL
- en: The main purpose of our model is to identify the given flower as either an **Iris-setosa,
    Iris-versicolor,** or an** Iris-virginica.**
  prefs: []
  type: TYPE_NORMAL
- en: To find the used dataset check the[ Iris Dataset?—?Logistic Regression](https://www.kaggle.com/datasets/tanyaganesan/iris-dataset-logistic-regression) on
    Kaggle. Below is a screenshot of the given dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/cc63d26f3c6b156d835fe84606b06bcf.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a Logistic Regression Model with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. Import the necessary libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Importing our dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Choosing our dependent and independent values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our independent value(x) we will include all available columns except the
    type columns. As for our dependable value(y), we will only include the type column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Splitting our dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will split our dataset into two portions, 80 percent for the training dataset
    and 20 percent for the testing dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Running our logistic regression model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will import the whole logistic regression algorithm from the linear_model
    library. We can then fit our X and y training data into the logistic model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Evaluating our model's performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The returned value is ***0.9845128775509371***, which indicates the high performance
    of our model.
  prefs: []
  type: TYPE_NORMAL
- en: Note that as the testing score increase so does the model's performance.
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Plotting our graph
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Output graph:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/6cfa9d706714e1571d57e5137efcef0e.png)'
  prefs: []
  type: TYPE_IMG
- en: In the logistic graph, the red dots indicate our given data points. The points
    are clearly divided into 3 categories, virginica, versicolor, and setosa flower
    species.
  prefs: []
  type: TYPE_NORMAL
- en: Using this technique the logistic regression model can easily categorize the
    flower type depending on its location on the graph.
  prefs: []
  type: TYPE_NORMAL
- en: Support Vector Machines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The support vector machines (SVM) algorithm is another well-known supervised
    machine learning model created by Vladimir Vapnik that is capable of both classification
    and regression problems. Although, it is more commonly used for classification
    problems rather than regression.
  prefs: []
  type: TYPE_NORMAL
- en: The SVM algorithm is capable of splitting the given data points into different
    groups. This is done by having our algorithm plot the data and then drawing the
    most suitable line to split the data into multiple categories.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the below figure, the drawn line perfectly splits the dataset
    into 2 different groups, blue and green.
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/56b09dbf86a5394d6e3c16ae464a18d2.png)'
  prefs: []
  type: TYPE_IMG
- en: The SVM model can draw lines or hyperplanes depending on the dimensions of the
    plotted graph. Lines can only work with 2-dimensional datasets meaning datasets
    with only 2 columns.
  prefs: []
  type: TYPE_NORMAL
- en: As multiple features may be used to predict the given dataset, higher dimensions
    will be necessary. In cases where our data set will result in more than 2 dimensions,
    the Support Vector Machine model will draw a more fitting hyperplane.
  prefs: []
  type: TYPE_NORMAL
- en: For our Support Vector Machine Python example, we will do a species classification
    for 3 different flower types. Our independent variable will include all the given
    features of a certain flower, while our dependent variable will be the specified
    species that the flower does belong to.
  prefs: []
  type: TYPE_NORMAL
- en: Our flower species include **Iris-setosa**,** Iris-versicolor**, and **Iris-virginica**.
  prefs: []
  type: TYPE_NORMAL
- en: To find the used dataset check the[ Iris Flower Dataset](https://www.kaggle.com/datasets/arshid/iris-flower-dataset) on Kaggle.
    Below is a screenshot of the given dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/14cd824baf785e990fae8fd11c793f63.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a Support Vector Machine model with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 1\. Import the necessary libraries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Reading the given dataset
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that you should import the given dataset before going through with this
    step.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Split the data columns into dependent and independent variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will have our X value as the independent variable with it containing all
    columns except the species column.
  prefs: []
  type: TYPE_NORMAL
- en: For our dependent value, the y variable will contain only the species column
    which our model should predict.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Split the dataset into training and testing datasets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We divided our dataset into 2 portions, in which we located 80 percent of our
    data into our training dataset and 20 percent into the testing dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Import the SVM and run the model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We imported the Support Vector Machine algorithm as a whole. We then ran it
    using the X and y training datasets we received from previous steps.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Testing our model's performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: To evaluate our model's performance we will use the score function. In which
    we will feed our X and y testing values that we already created in our fourth
    step into the score method.
  prefs: []
  type: TYPE_NORMAL
- en: The returned value is ***0.9666666666667***, which indicates the high performance
    of our model.
  prefs: []
  type: TYPE_NORMAL
- en: Note that as the testing score increase so does the model's performance.
  prefs: []
  type: TYPE_NORMAL
- en: Other Popular Supervised Machine Learning Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the linear, logistic, and SVM algorithms are quite reliable, we will also
    mention some honorable supervised machine learning algorithms that exists out
    there.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Decision Trees
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/3f76edeac1c2f31994a01fa2f72eb6ce.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Decision tree algorithm](https://deepai.org/machine-learning-glossary-and-terms/decision-tree) is
    a supervised machine learning model that utilizes tree-like structures for decision
    making. Decision trees are usually used for classification problems in which the
    model can decide the group to which a given item in a dataset belongs.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the used tree format is that of an inverted tree.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Random Forest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/4d2ed484eab865d3bc8fcfd3ba800d31.png)'
  prefs: []
  type: TYPE_IMG
- en: Considered a more complicated algorithm, the Random forest algorithm operates
    by constructing a multitude of decision trees to reach its final goal.
  prefs: []
  type: TYPE_NORMAL
- en: Meaning that multiple decision trees are built simultaneously each returning
    its own result, which is then combined for a better result.
  prefs: []
  type: TYPE_NORMAL
- en: For classification problems, the random forest model would generate multiple
    decision trees and would classify a given object depending on the classification
    group predicted by most of the trees.
  prefs: []
  type: TYPE_NORMAL
- en: This way the model can fix any overfitting caused by a single tree. Random forest
    algorithms can also be used for regression, although they may result in poor outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. k-nearest neighbors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Primary Supervised Learning Algorithms Used in Machine Learning](../Images/3cfa3ab71b28c7219079e8fd385acaa7.png)'
  prefs: []
  type: TYPE_IMG
- en: The k-nearest neighbor (KNN) algorithm is a supervised machine learning method
    that groups all given data into separate groups.
  prefs: []
  type: TYPE_NORMAL
- en: This grouping is based on shared common features between different individuals.
    The KNN algorithm can be used for both classification and regression problems.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a KNN problem would be the classification of animal images into
    different groupsets.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To review what we learned in this article, we started by defining supervised
    machine learning and the two types of problems that it can solve.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on we explained classification and regression problems and gave some
    examples of output data types for each.
  prefs: []
  type: TYPE_NORMAL
- en: Then we explained what a linear regression is, and how it works, and provided
    a concrete example in Python which tries to predict the Y value depending on the
    independent X variables.
  prefs: []
  type: TYPE_NORMAL
- en: We also explained a similar model to the linear regression one, which is the
    logistic regression model. We stated what is logistic regression and gave a classification
    model example that classifies the given images into a given flower species.
  prefs: []
  type: TYPE_NORMAL
- en: For our last algorithm, we had the Support Vector Machine algorithm, which we
    also used to predict the given flower species of 3 different flower species.
  prefs: []
  type: TYPE_NORMAL
- en: To end our article we briefly explained other well-known supervised machine
    learning algorithms, such as Decision trees, Random Forests, and the K-nearest
    neighbor algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: Whether you’re reading this article for school, work, or fun, we think that
    starting with these primary algorithms may be a good way to start your new machine
    learning passion.
  prefs: []
  type: TYPE_NORMAL
- en: If you are interested and would like to know more about the machine learning
    world we would recommend learning more about how such algorithms work and how
    you can tune such models to improve their performance even further. Don't forget
    that there are tons of other supervised algorithms out there for you to learn
    more about.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Kevin Vu](https://www.kdnuggets.com/author/kevin-vu)** manages Exxact Corp
    blog and works with many of its talented authors who write about different aspects
    of Deep Learning.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://www.exxactcorp.com/blog/Deep-Learning/primary-supervised-learning-algorithms-used-in-machine-learning).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets News, June 22: Primary Supervised Learning Algorithms…](https://www.kdnuggets.com/2022/n25.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Supervised Learning: Theory and Overview](https://www.kdnuggets.com/understanding-supervised-learning-theory-and-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hands-On with Supervised Learning: Linear Regression](https://www.kdnuggets.com/handson-with-supervised-learning-linear-regression)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DINOv2: Self-Supervised Computer Vision Models by Meta AI](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, August 3: 10 Most Used Tableau Functions • Is…](https://www.kdnuggets.com/2022/n31.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Most Used Tableau Functions](https://www.kdnuggets.com/2022/08/10-used-tableau-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
