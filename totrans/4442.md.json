["```py\nclass Adder(tf.Module):\n    @tf.function(input_signature=[tf.TensorSpec(shape=[None,3], dtype=tf.float32, name=\"x\")])\n    def sum_two(self, x):\n        return x + 2\n```", "```py\nclass Randomizer(tf.Module):\n    @tf.function\n    def fun_runif(self, N):\n        return tf.random.uniform(shape=(N,))\n```", "```py\n# For the first function\nmyfun = Adder()\ntf.saved_model.save(myfun, \"tmp/sum_two/1\")\n\n# For the second function\nmyfun2 = Randomizer()\ntf.saved_model.save(myfun2, \"tmp/fun_runif/1\")\n```", "```py\nclass CustomMobileNet_string(tf.keras.Model):\n    model_handler = \"https://tfhub.dev/google/imagenet/mobilenet_v2_035_224/classification/4\"\n\n    def __init__(self):\n        super(CustomMobileNet_string, self).__init__()\n        self.model = hub.load(self.__class__.model_handler)\n        self.labels = None\n\n    # Design you API with 'tf.function' decorator\n    @tf.function(input_signature=[tf.TensorSpec(shape=None, dtype=tf.string)])\n    def call(self, input_img):\n        def _preprocess(img_file):\n            img_bytes = tf.reshape(img_file, [])\n            img = tf.io.decode_jpeg(img_bytes, channels=3)\n            img = tf.image.convert_image_dtype(img, tf.float32)\n            return tf.image.resize(img, (224, 224))\n\n        labels = tf.io.read_file(self.labels)\n        labels = tf.strings.split(labels, sep='\\n')\n        img = _preprocess(input_img)[tf.newaxis,:]\n        logits = self.model(img)\n        get_class = lambda x: labels[tf.argmax(x)]\n        class_text = tf.map_fn(get_class, logits, tf.string)\n        return class_text # index of the class\n```", "```py\nmodel_string = CustomMobileNet_string()\n# Save the image labels as an asset, saved in 'Assets' folder\nmodel_string.labels = tf.saved_model.Asset(\"data/labels/ImageNetLabels.txt\")\ntf.saved_model.save(model_string, \"tmp/mobilenet_v2_test/1/\")\n\n```"]