["```py\npip install pycaret-ts-alpha\n```", "```py\nimport pandas as pd\nfrom pycaret.datasets import get_data\ndata = get_data('pycaret_downloads')\ndata['Date'] = pd.to_datetime(data['Date'])\ndata = data.groupby('Date').sum()\ndata = data.asfreq('D')\ndata.head()\n```", "```py\n# plot the data\ndata.plot()\n```", "```py\n**# with functional API** from pycaret.time_series import *\nsetup(data, fh = 7, fold = 3, session_id = 123)**# with new object-oriented API** from pycaret.internal.pycaret_experiment import TimeSeriesExperiment\nexp = TimeSeriesExperiment()\nexp.setup(data, fh = 7, fold = 3, session_id = 123)\n```", "```py\ncheck_stats()\n```", "```py\n**# functional API**\nplot_model(plot = 'ts')**# object-oriented API** exp.plot_model(plot = 'ts')\n```", "```py\n**# cross-validation plot** plot_model(plot = 'cv')\n```", "```py\n**# ACF plot** plot_model(plot = 'acf')\n```", "```py\n**# Diagnostics plot** plot_model(plot = 'diagnostics')\n```", "```py\n**# Decomposition plot**\nplot_model(plot = 'decomp_stl')\n```", "```py\n**# functional API** best = compare_models()**# object-oriented API** best = exp.compare_models()\n```", "```py\n**# create fbprophet model** prophet = create_model('prophet')\nprint(prophet)\n```", "```py\ntuned_prophet = tune_model(prophet)\nprint(tuned_prophet)\n```", "```py\nplot_model(best, plot = 'forecast')\n```", "```py\n**# forecast in unknown future** plot_model(best, plot = 'forecast', data_kwargs = {'fh' : 30})\n```", "```py\n# in-sample plot\nplot_model(best, plot = 'insample')\n```", "```py\n# residuals plot\nplot_model(best, plot = 'residuals')\n```", "```py\n# diagnostics plot\nplot_model(best, plot = 'diagnostics')\n```", "```py\n**# finalize model** final_best = finalize_model(best)**# generate predictions** predict_model(final_best, fh = 90)\n```", "```py\n**# save the model** save_model(final_best, 'my_best_model')\n```"]