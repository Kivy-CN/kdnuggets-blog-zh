["```py\npip install transformers torch pandas scikit-learn\n```", "```py\nimport pandas as pd\n\ndf = pd.read_csv('anime.csv')\n\ndf = df.dropna()\ndf['description'] = df['name'] +' '+ df['genre'] + ' ' +df['type']+' episodes: '+ df['episodes']\n```", "```py\nfrom transformers import AutoTokenizer, AutoModel\nimport torch\nimport torch.nn.functional as F\n\ndef mean_pooling(model_output, attention_mask):\n    token_embeddings = model_output[0] #First element of model_output contains all token embeddings\n    input_mask_expanded = attention_mask.unsqueeze(-1).expand(token_embeddings.size()).float()\n    return torch.sum(token_embeddings * input_mask_expanded, 1) / torch.clamp(input_mask_expanded.sum(1), min=1e-9)\n\ntokenizer = AutoTokenizer.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')\nmodel = AutoModel.from_pretrained('sentence-transformers/all-MiniLM-L6-v2')\n\ndef get_embeddings(sentences):\n  encoded_input = tokenizer(sentences, padding=True, truncation=True, return_tensors='pt')\n\n  with torch.no_grad():\n      model_output = model(**encoded_input)\n\n  sentence_embeddings = mean_pooling(model_output, encoded_input['attention_mask'])\n\n  sentence_embeddings = F.normalize(sentence_embeddings, p=2, dim=1)\n\n  return sentence_embeddings\n```", "```py\nsentences = ['Some great movie', 'Another funny movie']\nresult = get_embeddings(sentences)\nprint(\"Sentence embeddings:\")\nprint(result)\n```", "```py\npip install -U sentence-transformers\n```", "```py\nfrom sentence_transformers import SentenceTransformer\nmodel = SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')\n\nanime_embeddings = model.encode(df['description'].tolist())\n```", "```py\nfrom sklearn.metrics.pairwise import cosine_similarity\n\ndef get_recommendations(query, embeddings, df, top_n=5):\n    query_embedding = model.encode([query])\n    similarities = cosine_similarity(query_embedding, embeddings)\n    top_indices = similarities[0].argsort()[-top_n:][::-1]\n    return df.iloc[top_indices]\n```", "```py\nquery = \"Funny anime I can watch with friends\"\nrecommendations = get_recommendations(query, anime_embeddings, df)\nprint(recommendations[['name', 'genre']])\n```", "```py\nOutput>>\n                                         name  \\\n7363  Sentou Yousei Shoujo Tasukete! Mave-chan   \n8140            Anime TV de Hakken! Tamagotchi   \n4294      SKET Dance: SD Character Flash Anime   \n1061                        Isshuukan Friends.   \n2850                       Oshiete! Galko-chan   \n\n                                             genre  \n7363  Comedy, Parody, Sci-Fi, Shounen, Super Power  \n8140          Comedy, Fantasy, Kids, Slice of Life  \n4294                       Comedy, School, Shounen  \n1061        Comedy, School, Shounen, Slice of Life  \n2850                 Comedy, School, Slice of Life \n```"]