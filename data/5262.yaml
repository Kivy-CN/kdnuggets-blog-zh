- en: 'How To Write Better SQL Queries: The Definitive Guide – Part 2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写更好的 SQL 查询：权威指南 - 第 2 部分
- en: 原文：[https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html/2](https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html/2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html/2](https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html/2)
- en: Time Complexity & The Big O
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间复杂度与大 O 符号
- en: Now that you have examined the query plan briefly, you can start digging deeper
    and think about the performance in more formal terms with the help of the computational
    complexity theory. This area in theoretical computer science that focuses on classifying
    computational problems according to their difficulty, among other things; These
    computational problems can be algorithms, but also queries.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经简要检查了查询计划，你可以开始深入挖掘，并通过计算复杂性理论以更正式的术语思考性能。这个理论计算机科学领域专注于根据问题的难度对计算问题进行分类，此外还包括其他内容；这些计算问题可以是算法，也可以是查询。
- en: For queries, however, you’re not necessarily classifying them according to their
    difficulty, but rather to the time it takes to run it and get some results back.
    This specifically is referred to as time complexity and to articulate or measure
    this type of complexity, you can use the big O notation.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对于查询而言，你并不是根据其难度来分类，而是根据运行时间以及获得一些结果所需的时间。这具体被称为时间复杂度，为了描述或衡量这种复杂性，你可以使用大 O
    符号。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'With the big O notation, you express the runtime in terms of how quickly it
    grows relative to the input, as the input gets arbitrarily large. The big O notation
    excludes coefficients and lower order terms so that you can focus on the important
    part of your query’s running time: its rate of growth. When expressed this way,
    dropping coefficients and lower order terms, the time complexity is said to be
    described asymptotically. That means that the input size goes to infinity.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用大 O 符号，你可以以输入的增长速度来表示运行时间，随着输入变得任意大。大 O 符号排除了系数和较低阶项，这样你可以专注于查询运行时间的重要部分：增长速率。以这种方式表达，即省略系数和较低阶项，时间复杂度被称为渐进描述。这意味着输入大小趋近于无穷大。
- en: In database language, the complexity measures how much longer it takes a query
    to run as the size of the data tables, and therefore the database, increase.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据库语言中，复杂性衡量了随着数据表的大小（因此数据库）增加，查询运行所需的时间增加了多少。
- en: '**Note** that the size of your database doesn’t only increase as more data
    is stored in tables, but also the mere fact that indexes are present in the database
    also plays a role in the size.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**，数据库的大小不仅会因为在表中存储的数据增多而增加，还因为数据库中存在索引的事实也会影响大小。'
- en: Estimating Time Complexity of Your Query Plan
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 估算查询计划的时间复杂度
- en: As you have seen before, the execution plan defines, among other things, what
    algorithm is used for each operation, which makes that every query execution time
    can be logically expressed as a function of the table size involved in the query
    plan, which is referred to as a complexity function. In other words, you can use
    the big O notation and your execution plan to estimate the query complexity and
    the performance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你之前看到的，执行计划定义了，包括使用什么算法来进行每个操作，这使得每个查询的执行时间可以逻辑上表示为查询计划中涉及的表的大小的函数，这被称为复杂性函数。换句话说，你可以使用大
    O 符号和你的执行计划来估算查询复杂度和性能。
- en: In the following subsections, you’ll get a general idea about the four types
    of time complexities and you’ll see some examples of how queries’ time complexity
    can vary according to the context in which you run it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下子章节中，你将对四种时间复杂度类型有一个大致了解，并且看到一些示例，展示查询的时间复杂度如何根据运行上下文的不同而变化。
- en: 'Hint: the indexes are part of the story here!'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：索引在这里是关键的一部分！
- en: '**Note**, though, that there are different types of indexes, different execution
    plans and different implementations for different databases to consider, so that
    the time complexities listed below are very general and can vary according to
    your specific setting.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**，不过，不同类型的索引、不同的执行计划以及不同数据库的实现都有所不同，因此下面列出的时间复杂度非常一般，可能会根据你的具体设置有所变化。'
- en: 'O(1): Constant Time'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: O(1)：常数时间
- en: An algorithm is said to run in constant time if it requires the same amount
    of time regardless of the input size. When you’re talking about a query, it will
    run in constant time if it requires the same amount of time regardless of the
    table size.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个算法所需时间不依赖于输入大小，则称其为常数时间运行。当你谈论一个查询时，如果它在任何表大小下所需时间相同，则它将以常数时间运行。
- en: 'These type of queries are not really common, yet here’s one such an example:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型的查询并不常见，但这是一个这样的示例：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The time complexity is constant because you select one arbitrary row from the
    table. Therefore, the length of the time should be independent of the size of
    the table.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 时间复杂度是常数，因为你从表中选择一行任意的行。因此，时间长度应该与表的大小无关。
- en: 'Linear Time: O(n)'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性时间：O(n)
- en: 'An algorithm is said to run in linear time if its time execution is directly
    proportional to the input size, i.e. time grows linearly as input size increases.
    For databases, this means that the time execution would be directly proportional
    to the table size: as the number of rows in the table grows, the time for the
    query grows.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个算法的时间执行直接与输入大小成正比，即时间随着输入大小的增加线性增长，则称其为线性时间运行。对于数据库，这意味着时间执行将直接与表大小成正比：随着表中行数的增加，查询时间也会增加。
- en: 'An example is a query with a `WHERE` clause on a un-indexed column: a full
    table scan or `Seq Scan` will be needed, which will result in a time complexity
    of O(n). This means that every row needs to be read to find the one with the right
    ID. You don’t have a limit at all, so every row does need to be read, even if
    the first row matches the condition.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子是对未索引列的 `WHERE` 子句的查询：需要进行全表扫描或 `Seq Scan`，这将导致时间复杂度为 O(n)。这意味着需要读取每一行以找到具有正确
    ID 的行。你没有任何限制，因此即使第一行符合条件，也需要读取每一行。
- en: 'Consider also the following example of a query that would have a complexity
    of O(n) if there’s no index on `i_id`:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 还要考虑以下示例，如果 `i_id` 上没有索引，则查询的复杂度为 O(n)：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous also means that other queries, such as count queries like `COUNT(*)
    FROM TABLE;` will have a time complexity of *O(n)*, because a full table scan
    will be required unless the total row count is stored for the table. Then, the
    complexity would be more like *O(1)*.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述情况也意味着其他查询，如 `COUNT(*) FROM TABLE;` 这样的计数查询，其时间复杂度为 *O(n)*，因为需要进行全表扫描，除非表中存储了总行数。否则，复杂度更接近于
    *O(1)*。
- en: 'Closely related to the linear execution time is the execution time for execution
    plans that have joins in them. Here are some examples:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 与线性执行时间密切相关的是包含连接的执行计划的执行时间。以下是一些示例：
- en: A hash join has an expected complexity O(M + N). The classic hash join algorithm
    for an inner join of two tables first prepares a hash table of the smaller table.
    The hash table entries consist of the join attribute and its row. The hash table
    is accessed by applying a hash function to the join attribute. Once the hash table
    is built, the larger table is scanned and the relevant rows from the smaller table
    are found by looking in the hash table.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希连接的预期复杂度为 O(M + N)。经典的哈希连接算法在两个表的内连接中首先准备了较小表的哈希表。哈希表条目包括连接属性及其行。通过对连接属性应用哈希函数来访问哈希表。一旦哈希表建立，较大的表被扫描，通过查找哈希表中的相关行找到较小表中的相关行。
- en: 'Merge joins generally have a complexity of O(M+N) but it will heavily depend
    on the indexes on the join columns and, in cases where there is no index, on whether
    the rows are sorted according to the keys used in the join:'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并连接通常具有 O(M+N) 的复杂度，但这将严重依赖于连接列上的索引，在没有索引的情况下，还取决于行是否按连接中使用的键进行排序：
- en: If both tables that are sorted according to the keys that are being used in
    the join, then the query will have a time complexity of O(M+N).
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个表都按照用于连接的键进行排序，则查询的时间复杂度将为O(M+N)。
- en: If both tables have an index on the joined columns, then the index already maintains
    those columns in order and there’s no need to sort. The complexity will be O(M
    + N).
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个表在连接列上都有索引，则索引已经按照顺序维护了这些列，不需要排序。复杂度将是O(M + N)。
- en: If neither table has an index on the joined columns, a sort of both tables will
    need to happen first, so the complexity will look more like O(M log M + N log
    N).
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果两个表都没有连接列上的索引，则首先需要对两个表进行排序，因此复杂度会更像O(M log M + N log N)。
- en: If only one of the tables has an index on the joined columns, only the one table
    that doesn’t have the index will need to be sorted before the merge step can happen,
    so the complexity will look like O(M + N log N).
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果只有一个表在连接列上有索引，那么在合并步骤之前，只需要对没有索引的那个表进行排序，因此复杂度会是O(M + N log N)。
- en: For nested joins, the complexity is generally O(MN). This join is efficient
    when one or both of the tables are extremely small (for example, smaller than
    10 records), which is a very common situation when evaluating queries because
    some subqueries are written to return only one row.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于嵌套连接，复杂度通常为O(MN)。当一个或两个表非常小（例如，小于10条记录）时，这种连接是高效的，这是一种非常常见的查询评估情况，因为有些子查询被写成只返回一行。
- en: '**Remember**: a nested join is a join that compares every record in one table
    against every record in the other.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**请记住**：嵌套连接是一个将一个表中的每条记录与另一个表中的每条记录进行比较的连接。'
- en: 'Logarithmic Time: O(log (n))'
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对数时间：O(log (n))
- en: An algorithm is said to run in logarithmic time if its time execution is proportional
    to the logarithm of the input size; For queries, this means that they will run
    if the execution time is proportional to the logarithm of the database size.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个算法的执行时间与输入大小的对数成正比，则称该算法运行在对数时间内；对于查询来说，这意味着当执行时间与数据库大小的对数成正比时，它们将会运行。
- en: 'This logarithmic time complexity is true for query plans where an `Index Scan` or
    clustered index scan is performed. A clustered index is an index where the leaf
    level of the index contains the actual data rows of the table. A clustered is
    much like any other index: it is defined on one or more columns. These form the
    index key. The clustering key is then the key columns of a clustered index. A
    clustered index scan is then basically the operation of your RDBMS reading through
    for the row or rows from top to bottom in the clustered index.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于执行`Index Scan`或聚集索引扫描的查询计划，这种对数时间复杂度是成立的。聚集索引是一个索引，其中索引的叶子级别包含表的实际数据行。聚集索引很像其他索引：它是在一个或多个列上定义的。这些列形成了索引键。聚集键就是聚集索引的键列。聚集索引扫描基本上是你的关系数据库管理系统从上到下读取聚集索引中的行或多行的操作。
- en: 'Consider the following query example, where the there’s an index on `i_id` and
    which would generally result in a complexity of O(log(n)):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下查询示例，其中对`i_id`有索引，并且通常会导致复杂度为O(log(n))：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note** that without the index, the time complexity would have been O(n).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：如果没有索引，时间复杂度将是O(n)。'
- en: 'Quadratic Time: O(n^2)'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二次时间：O(n^2)
- en: An algorithm is said to run in logarithmic time if its time execution is proportional
    to the square of the input size. Once again, for databases this means that the
    execution time for a query is proportional to the square of the database size.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个算法的执行时间与输入大小的平方成正比，则称该算法运行在二次时间内。对于数据库来说，这意味着查询的执行时间与数据库大小的平方成正比。
- en: 'A possible example of a query with quadratic time complexity is the following
    one:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的具有二次时间复杂度的查询示例如下：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The minimum complexity would be O(n log(n)), but the maximum complexity could
    be O(n^2), based on the index information of the join attributes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最小复杂度为O(n log(n))，但最大复杂度可能为O(n^2)，这取决于连接属性的索引信息。
- en: 'To summarize, you can also look at the [following cheat sheet](http://bigocheatsheet.com/) to
    estimate the performance of queries according to their time complexity and how
    well they would be performing:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，你也可以查看[以下备忘单](http://bigocheatsheet.com/)来根据查询的时间复杂度估算其性能以及它们的执行效果：
- en: '![](../Images/ce348244bdc26be0db975529bbbb7503.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ce348244bdc26be0db975529bbbb7503.png)'
- en: SQL Tuning
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SQL 调优
- en: 'With the query plan and the time complexity in mind, you can consider tuning
    your SQL query further. You could start off by paying special attention to the
    following points:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到查询计划和时间复杂度，你可以考虑进一步优化你的 SQL 查询。你可以从特别关注以下几点开始：
- en: Replace unnecessary large-table full table scans with index scans;
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用索引扫描替代不必要的大表全表扫描；
- en: Make sure that you’re applying the optimal table join order;
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你应用了最佳的表连接顺序；
- en: Make sure that you’re using the indexes optimally; And
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保你正在优化使用索引；并且
- en: Cache small-table full table scans.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存小表的全表扫描。
- en: Taking SQL Further
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步学习 SQL
- en: Congrats! You have made it to the end of this blog post, which just gave you
    a small peek at SQL query performance. You hopefully got more insights into anti-patterns,
    the query optimizer, and the tools you can use to review, estimate and interpret
    the complexity your query plan. There is, however, much more to discover! If you
    want to know more, consider reading the book “Database Management Systems”, written
    by R. Ramakrishnan and J. Gehrke.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经阅读完这篇博客文章，它为你提供了 SQL 查询性能的简要概述。希望你对反模式、查询优化器以及可以用来审查、估计和解释查询计划复杂性的工具有了更多的见解。然而，还有更多内容等待你去探索！如果你想了解更多，可以考虑阅读由
    R. Ramakrishnan 和 J. Gehrke 撰写的《数据库管理系统》一书。
- en: 'Finally, I don’t want to withhold you this quote from a StackOverflow user:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我不想掩盖这位 StackOverflow 用户的名言：
- en: “My favorite antipattern is not testing your queries.
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我最喜欢的反模式是不测试你的查询。
- en: ''
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This applies when:'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 当以下情况适用时：
- en: ''
  id: totrans-64
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your query involves more than one table.
  id: totrans-65
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的查询涉及多个表。
- en: You think you have an optimal design for a query, but don’t bother to test your
    assumptions.
  id: totrans-66
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你认为自己有一个优化的查询设计，但却没有测试你的假设。
- en: You accept the first query that works, with no clue about whether it’s even
    close to optimized."
  id: totrans-67
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你接受第一个有效的查询，但却没有对其是否接近优化有任何了解。
- en: If you want to get started with SQL, consider taking DataCamp’s [Intro to SQL
    for Data Science](https://www.datacamp.com/courses/intro-to-sql-for-data-science) course!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想开始学习 SQL，可以考虑参加 DataCamp 的 [SQL 数据科学入门](https://www.datacamp.com/courses/intro-to-sql-for-data-science)
    课程！
- en: '**Bio: [Karlijn Willems](https://www.linkedin.com/in/karlijnwillems)** is a
    data science journalist and writes for the [DataCamp community](https://www.datacamp.com/community/authors/karlijn-willems),
    focusing on data science education, the latest news and the hottest trends. She
    holds degrees in Literature and Linguistics and Information Management.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Karlijn Willems](https://www.linkedin.com/in/karlijnwillems)** 是一位数据科学记者，撰写关于[DataCamp
    社区](https://www.datacamp.com/community/authors/karlijn-willems)的数据科学教育、最新新闻和热门趋势的文章。她拥有文学和语言学及信息管理的学位。'
- en: '[Original](https://www.datacamp.com/community/tutorials/sql-tutorial-query#gs.QQP_Fhg).
    Reposted with permission.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.datacamp.com/community/tutorials/sql-tutorial-query#gs.QQP_Fhg)
    已经获得授权转载。'
- en: '**Related:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[7 Steps to Mastering SQL for Data Science](/2016/06/seven-steps-mastering-sql-data-science.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握数据科学 SQL 的 7 个步骤](/2016/06/seven-steps-mastering-sql-data-science.html)'
- en: '[The Most Underutilized Function in SQL](/2017/03/most-underutilized-function-sql.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 中最未被充分利用的函数](/2017/03/most-underutilized-function-sql.html)'
- en: '[Doing Statistics with SQL](/2016/08/doing-statistics-sql.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 SQL 做统计分析](/2016/08/doing-statistics-sql.html)'
- en: More On This Topic
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[The Definitive Guide To Switching Your Career Into Data Science](https://www.kdnuggets.com/2022/05/definitive-guide-switching-career-data-science.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[转行数据科学的权威指南](https://www.kdnuggets.com/2022/05/definitive-guide-switching-career-data-science.html)'
- en: '[Python Function Arguments: A Definitive Guide](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 函数参数：权威指南](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
- en: '[The Definitive Guide to Solving the Phantom Read in MySQL](https://www.kdnuggets.com/2022/06/definitive-guide-solving-phantom-read-mysql.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解决 MySQL 中幻读的权威指南](https://www.kdnuggets.com/2022/06/definitive-guide-solving-phantom-read-mysql.html)'
- en: '[A Step by Step Guide to Reading and Understanding SQL Queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逐步阅读和理解 SQL 查询的指南](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
- en: '[How to Write SQL in Native Python](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在原生 Python 中编写 SQL](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，12月7日：十大数据科学误区揭秘 • 4…](https://www.kdnuggets.com/2022/n47.html)'
