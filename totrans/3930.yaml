- en: 5 “Clean Code” Tips That Will Dramatically Improve Your Productivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html](https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '![Header image](../Images/ab00e67ab5eb926a175bae5a4420ce63.png)'
  prefs: []
  type: TYPE_IMG
- en: Quality code. Lots of people talk about it, but few actually do it right.
  prefs: []
  type: TYPE_NORMAL
- en: Most people who code naturally know what quality code should look or *feel *like.
    It should be very easy to read and understand quickly, there shouldn’t be any
    major faults, edge cases should be handled, and it should be “self documenting”.
    Still, many people miss the mark when trying (hopefully) to write quality code.
  prefs: []
  type: TYPE_NORMAL
- en: The cause of the mistakes are understandable in many cases. It can be challenging
    to predict how people will interpret your code, whether they will find it easy
    to read or an absolute nightmare. Not only that, once your project gets very big
    even **you** might not be able to read it!
  prefs: []
  type: TYPE_NORMAL
- en: In such a case, it’s always good to establish some principals that you can rely
    on. Some go-to rules that you can always reference whenever you’re designing or
    writing code.
  prefs: []
  type: TYPE_NORMAL
- en: The following 5 clean coding principals are the ones I code by! They’ve given
    me a massive productivity boost in my work and helped both myself and my colleagues
    be able to easily interpret and expand the code base which I’ve worked on. Hopefully
    they help you code faster and better too!
  prefs: []
  type: TYPE_NORMAL
- en: '**If it isn’t tested, it’s broken**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test, test, test. We know we should always do it, but sometimes we cut corners
    so we can push the project out faster. But without thorough testing, how will
    you **100%** fully know that the code works? Yes there are very simple pieces
    of code, but one is always surprised when that crazy edge case comes up that you
    thought you didn’t need to test for!
  prefs: []
  type: TYPE_NORMAL
- en: Do yourself and everyone on your team a favour and regularly test the code you
    write. You’ll want to test in a *coarse to fine *style. Start small with unit
    tests to make sure every small part works on its own. Then slowly start testing
    the different subsystems together working your way up towards testing the whole
    new system end to end. Testing in this way allows you to easily track where the
    system breaks, since you can easily verify each individual component or the small
    subsystems as the source of any issues.
  prefs: []
  type: TYPE_NORMAL
- en: Choose meaningful names
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is what makes code self-documenting. When you read over your old code,
    you shouldn’t have to look over every little comment and run every small piece
    of code to figure out what it all does!
  prefs: []
  type: TYPE_NORMAL
- en: The code should *roughly* read like plain English. This is especially true for
    variable names, classes, and functions. Those three items should always have names
    that are self-explanatory. Rather than use a default name like “x” for example,
    call it “width” or “distance” or whatever the variable is supposed to represent
    in “read-world” terms. Coding in “real-world” terms will help make your code read
    in that way
  prefs: []
  type: TYPE_NORMAL
- en: '**Classes and functions should be small and obey the Single Responsibility
    Principle (SRP)**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Small classes and functions make code approximately 9832741892374 times easier
    to read...
  prefs: []
  type: TYPE_NORMAL
- en: But seriously they really do. First off, they allow for very isolated unit testing.
    If the piece of code you are testing is small, it’s easy to source and debug any
    issues that come up in the test or during deployment. Small classes and functions
    also allow for better readability. Instead of having a giant block of code with
    many loops and variables, you can reduce that block to a function that runs several *smaller* functions.
    You can then name each of those functions according to what they do and voila,
    human readable code!
  prefs: []
  type: TYPE_NORMAL
- en: SRP gives you similar benefits. One responsibility means you only have to test
    a handful of edge cases and those cases are quite easy to debug. In addition it’s
    quite easy to name the function so it has real-world meaning. Since it only has
    one single purpose, it’ll just be named after it’s purpose, rather than trying
    to name a function that’s trying to accomplish so many different things.
  prefs: []
  type: TYPE_NORMAL
- en: Catch and handle exceptions, even if you don’t think you need to
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exceptions in code are usually edges case or errors that we would like to handle
    in our own specific way. For example, normally when an error is raised the program
    will stop; this definitely will not work for code we have deployed to production
    that is serving users! We’ll want to handle that error separately, perhaps try
    to see if it’s super critical or if we should just pass over it.
  prefs: []
  type: TYPE_NORMAL
- en: You should always be catching and handling exceptions specifically, even if
    you don’t think you need to. Better to be safe than sorry. Exception handling
    will give you a better sense of order and control over your code, since you know *specifically* what
    will happen if a certain exception is triggered or a piece of code fails. Having
    a deeper understand of your code like this makes it easier to debug and makes
    your code more fault tolerant.
  prefs: []
  type: TYPE_NORMAL
- en: Logs, logs, logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Log it. What you may ask? …. Everything that’s what! There’s no such thing as
    too much logs!
  prefs: []
  type: TYPE_NORMAL
- en: Logs are your absolute number 1 source for debugging your code and monitoring
    your application when it’s in production. You should be logging every major “step”
    your program takes, any important calculations it makes, any errors, exceptions,
    or out of the ordinary results. It may also be useful to log the date and time
    that these events occur for easy tracking. All of this will make it easy to trace
    exactly which *step in the pipeline the program failed*.
  prefs: []
  type: TYPE_NORMAL
- en: Many common programming languages such as Python come with their own logging
    libraries that have some very useful functions you can play with. If your application
    is to run as a SaaS app, then you may want to consider off-device, centralised
    logging. This way if one of your servers dies you can easily recover the logs!
  prefs: []
  type: TYPE_NORMAL
- en: TL;DR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: (1) If it isn’t tested, it’s broken
  prefs: []
  type: TYPE_NORMAL
- en: (2) Choose meaningful names
  prefs: []
  type: TYPE_NORMAL
- en: (3) Classes and functions should be small and obey the Single Responsibility
    Principle (SRP)
  prefs: []
  type: TYPE_NORMAL
- en: (4) Catch and handle exceptions, even if you don’t think you need to
  prefs: []
  type: TYPE_NORMAL
- en: (5) Logs, logs, logs
  prefs: []
  type: TYPE_NORMAL
- en: '**Like to read about tech?**'
  prefs: []
  type: TYPE_NORMAL
- en: Follow me on [twitter](https://twitter.com/GeorgeSeif94) where I post all about
    the latest and greatest tech!
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [David Smooke](https://medium.com/@DavidSmooke?source=post_page).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [George Seif](https://towardsdatascience.com/@george.seif94)** is a
    Certified Nerd and AI / Machine Learning Engineer.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 Quick and Easy Data Visualizations in Python with Code](/2018/07/5-quick-easy-data-visualizations-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Clustering Algorithms Data Scientists Need to Know](/2018/06/5-clustering-algorithms-data-scientists-need-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Selecting the Best Machine Learning Algorithm for Your Regression Problem](/2018/08/selecting-best-machine-learning-algorithm-regression-problem.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Top 6 Tools to Improve Your Productivity on Snowflake](https://www.kdnuggets.com/2023/08/top-6-tools-improve-productivity-snowflake.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyTorch Tips to Boost Your Productivity](https://www.kdnuggets.com/2023/08/pytorch-tips-boost-productivity.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways Understanding Bayes Theorem Will Improve Your Data Science](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why Humbling Yourself Will Improve Your Data Science Skills](https://www.kdnuggets.com/2022/01/humbling-improve-data-science-skills.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8 Ways to Improve Your Search Application this Week](https://www.kdnuggets.com/2022/09/corise-8-ways-improve-search-application-week.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use ChatGPT to Improve Your Data Science Skills](https://www.kdnuggets.com/2023/03/chatgpt-improve-data-science-skills.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
