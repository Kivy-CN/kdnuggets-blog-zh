["```py\n.\\Install-PyForMLS.ps1 -InstallFolder \"C:\\Program Files\\MicrosoftPythonClient\"\n\n```", "```py\nmkdir JupyterNotebooks; cd JupyterNotebooks; ..\\Scripts\\jupyter-notebook\n\n```", "```py\nimport pyodbc\n# creating a new db to load Iris sample in\nnew_db_name = \"MLRemoteExec\"\nconnection_string = \"Driver=SQL Server;Server=localhost\\\nMSSQLSERVER2017;Database={0};Trusted_Connection=Yes;\"\n\ncnxn = pyodbc.connect(connection_string.format(\"master\"), autocommit=True) \n\ncnxn.cursor().execute(\"IF EXISTS(SELECT * FROM sys.databases WHERE\n[name] = '{0}') DROP DATABASE {0}\".format(new_db_name)) \n\ncnxn.cursor().execute(\"CREATE DATABASE \" + new_db_name)\n\ncnxn.close()\n\nprint(\"Database created\") \n\n```", "```py\nfrom sklearn import datasets import pandas as pd\n# SkLearn has the Iris sample dataset built in to the package\niris = datasets.load_iris()\ndf = pd.DataFrame(iris.data, columns=iris.feature_names)\n\n```", "```py\nfrom revoscalepy import RxSqlServerData, rx_data_step\n# Example of using RX APIs to load data into SQL table\n# You can also do this with pyodbc\ntable_ref = RxSqlServerData(connection_string=\nconnection_string.format(new_db_name), table=\"Iris\")\nrx_data_step(input_data = df, output_file = table_ref, overwrite = True) \nprint(\"New Table Created: Iris\")\nprint(\"Sklearn Iris sample loaded into Iris table\")\n\n```", "```py\n\ndef send_this_func_to_sql()\nfrom revoscalepy import RxSqlServerData, rx_data_step\nfrom pandas.tools.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nimport io\n# remember the scope of the variables in this func are \nwithin our SQL Server Python Runtime\n\nconnection_string = \"Driver=SQL Server;Server=localhost\\MSSQLSERVER2017;\nDatabase=MLRemoteExec;Trusted_Connection=Yes;\"\n\n# specify a query and load into pandas dataframe df\nsql_query = RxSqlServerData(connection_string=connection_string, \nsql_query = \"select * from Iris\")\n\ndf = rx_import(sql_query)\nscatter_matrix(df)\n\n# return bytestream of image created by scatter_matrix\nbuf = io.BytesIO()\nplt.save fig(buf, format=\"png\")\nbuf.seek(0)\nreturn buf.getvalue()\n\n```", "```py\n\nfrom IPython import display\nimport matplotlib.pyplot as plt\nfrom revoscalepy import RxInSqlServer, rx_exec\n# create a remote compute context with connection to SQL Server\n\nsql_compute_context = \nRxInSqlServer(connection_string=connection_string.format(new_db_name))\n\n# use rx_exec to send the function execution to SQL Server\n\nimage = rx_exec(send_this_func_to_sql, \ncompute_context=sql_compute_context)[0]\n\n# only an image was returned to my jupyter client. \n#All data remained secure and was manipulated in my db.\n\ndisplay.Image(data=image)\n\n```"]