- en: Getting Started with Python Data Structures in 5 Steps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用 5 步骤开始学习 Python 数据结构
- en: 原文：[https://www.kdnuggets.com/5-steps-getting-started-python-data-structures](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/5-steps-getting-started-python-data-structures](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)
- en: '![Getting Started with Python Data Structures in 5 Steps](../Images/7b50389edfcbefed4f60b8c9297d036c.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![用 5 步骤开始学习 Python 数据结构](../Images/7b50389edfcbefed4f60b8c9297d036c.png)'
- en: Introduction to Python Data Structures
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据结构简介
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的 IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'When it comes to learning how to program, regardless of the particular programming
    language you use for this task, you find that there are a few major topics of
    your newly-chosen discipline that into which most of what you are being exposed
    to could be categorized. A few of these, in general order of grokking, are: syntax
    (the vocabulary of the language); commands (putting the vocabulary together into
    useful ways); flow control (how we guide the order of command execution); algorithms
    (the steps we take to solve specific problems... *how did this become such a confounding
    word?*); and, finally, data structures (the virtual storage depots that we use
    for data manipulation during the execution of algorithms (which are, again...
    a series of steps).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到学习如何编程时，无论你使用什么特定的编程语言，你会发现你所接触的大部分内容都可以归类为你新选择的学科中的几个主要主题。其中的一些，按理解的顺序排列，大致有：语法（语言的词汇）；命令（将词汇组合成有用的方式）；流程控制（我们如何引导命令执行的顺序）；算法（我们解决特定问题所采取的步骤……*这个词为什么变得如此令人困惑？*）；最后是数据结构（我们在算法执行期间用于数据操作的虚拟存储库（再次……一系列步骤））。
- en: Essentially, if you want to implement the solution to a problem, by cobbling
    together a series of commands into the steps of an algorithm, at some point data
    will need to be processed, and data structures will become essential. Such data
    structures provide a way to organize and store data efficiently, and are critical
    for creating fast, modular code that can perform useful functions and scale well.
    Python, a particular programming language, has a series of built-in data structures
    of its own.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，如果你想通过将一系列命令拼凑成算法的步骤来实现问题的解决方案，那么数据最终会被处理，数据结构就会变得至关重要。这些数据结构提供了一种有效组织和存储数据的方法，对创建快速、模块化的代码至关重要，这些代码能够执行有用的功能并良好地扩展。Python，这种特定的编程语言，拥有一系列内置的数据结构。
- en: 'This tutorial will focus on these four foundational Python data structures:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将重点介绍这四种基础的 Python 数据结构：
- en: Lists - Ordered, mutable, allows duplicate elements. Useful for storing sequences
    of data.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表 - 有序、可变，允许重复元素。用于存储数据序列。
- en: Tuples - Ordered, immutable, allows duplicate elements. Think of them as immutable
    lists.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组 - 有序、不可变，允许重复元素。将它们视为不可变的列表。
- en: Dictionaries - Unordered, mutable, mapped by key-value pairs. Useful for storing
    data in a key-value format.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典 - 无序、可变，通过键值对映射。用于以键值格式存储数据。
- en: Sets - Unordered, mutable, contains unique elements. Useful for membership testing
    and eliminating duplicates.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合 - 无序、可变，包含唯一元素。用于成员测试和消除重复。
- en: Beyond the fundamental data structures, Python also provides more advanced structures,
    such as heaps, queues, and linked lists, which can further enhance your coding
    prowess. These advanced structures, built upon the foundational ones, enable more
    complex data handling and are often used in specialized scenarios. But you aren't
    constrained here; you can use all of the existing structures as a base to implement
    your own structures as well. However, the understanding of lists, tuples, dictionaries,
    and sets remains paramount, as these are the building blocks for more advanced
    data structures.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基本的数据结构，Python 还提供了更高级的结构，如堆、队列和链表，这些都可以进一步提升你的编码能力。这些高级结构在基础结构的基础上构建，支持更复杂的数据处理，并且常用于特定场景。但是，你并不受限于这些结构；你可以利用所有现有的结构作为基础，来实现自己的结构。然而，对列表、元组、字典和集合的理解仍然至关重要，因为这些是更高级数据结构的基础。
- en: This guide aims to provide a clear and concise understanding of these core structures.
    As you start your Python journey, the following sections will guide you through
    the essential concepts and practical applications. From creating and manipulating
    lists to leveraging the unique capabilities of sets, this tutorial will equip
    you with the skills needed to excel in your coding.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本指南旨在提供对这些核心结构的清晰和简明的理解。随着你开始 Python 之旅，以下章节将引导你掌握基本概念和实际应用。从创建和操作列表到利用集合的独特功能，本教程将为你提供在编码中脱颖而出的技能。
- en: 'Step 1: Using Lists in Python'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 1：在 Python 中使用列表
- en: What is a List in Python?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是 Python 中的列表？
- en: A list in Python is an ordered, mutable data type that can store various objects,
    allowing for duplicate elements. Lists are defined by the use of square brackets
    `[ ]`, with elements being separated by commas.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的列表是有序的、可变的数据类型，可以存储各种对象，允许重复元素。列表通过使用方括号 `[ ]` 定义，元素之间用逗号分隔。
- en: 'For example:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Lists are incredibly useful for organizing and storing data sequences.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 列表在组织和存储数据序列方面极其有用。
- en: Creating a List
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建列表
- en: 'Lists can contain different data types, like strings, integers, booleans, etc.
    For example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以包含不同的数据类型，如字符串、整数、布尔值等。例如：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Manipulating a List
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作列表
- en: 'Elements in a list can be accessed, added, changed, and removed. For example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的元素可以被访问、添加、修改和删除。例如：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Useful List Methods
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的列表方法
- en: 'Some handy built-in methods for lists include:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一些用于列表的实用内置方法包括：
- en: '`sort()` - Sorts list in-place'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sort()` - 就地排序列表'
- en: '`append()` - Adds element to end of list'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`append()` - 将元素添加到列表末尾'
- en: '`insert()` - Inserts element at index'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`insert()` - 在索引处插入元素'
- en: '`pop()` - Removes element at index'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop()` - 移除索引处的元素'
- en: '`remove()` - Removes first occurrence of value'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove()` - 移除值的第一个出现'
- en: '`reverse()` - Reverses list in-place'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reverse()` - 就地反转列表'
- en: Hands-on Example with Lists
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实战示例：列表
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Step 2: Understanding Tuples in Python'
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤 2：理解 Python 中的元组
- en: What Are Tuples?
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是元组？
- en: Tuples are another type of sequence data type in Python, similar to lists. However,
    unlike lists, tuples are immutable, meaning their elements cannot be altered once
    created. They are defined by enclosing elements in parentheses `( )`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是 Python 中另一种序列数据类型，与列表类似。然而，与列表不同的是，元组是不可变的，这意味着其元素一旦创建就无法更改。它们通过用圆括号 `(
    )` 括起来来定义。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: When to Use Tuples
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用元组
- en: 'Tuples are generally used for collections of items that should not be modified.
    Tuples are faster than lists, which makes them great for read-only operations.
    Some common use-cases include:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 元组通常用于不应修改的项集合。元组比列表更快，这使得它们非常适合只读操作。一些常见的使用场景包括：
- en: Storing constants or configuration data
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储常量或配置数据
- en: Function return values with multiple components
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数返回值包含多个组件
- en: Dictionary keys, since they are hashable
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字典键，因为它们是可哈希的
- en: Accessing Tuple Elements
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问元组元素
- en: Accessing elements in a tuple is done in a similar manner as accessing list
    elements. Indexing and slicing work the same way.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 访问元组中的元素与访问列表元素的方式类似。索引和切片的工作方式相同。
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Operations on Tuples
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对元组的操作
- en: 'Because tuples are immutable, many list operations like `append()` or `remove()`
    are not applicable. However, you can still perform some operations:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于元组是不可变的，许多列表操作如`append()`或`remove()`不适用。然而，你仍然可以执行一些操作：
- en: '**Concatenation:** Combine tuples using the `+` operator.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接：** 使用`+`运算符组合元组。'
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Repetition:** Repeat a tuple using the `*` operator.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复：** 使用`*`运算符重复元组。'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Membership:** Check if an element exists in a tuple with the `in` keyword.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成员资格：** 使用`in`关键字检查元素是否存在于元组中。'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Tuple Methods
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组方法
- en: 'Tuples have fewer built-in methods compared to lists, given their immutable
    nature. Some useful methods include:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 元组相较于列表由于其不可变特性，内置方法较少。一些有用的方法包括：
- en: '**`count()`:** Count the occurrences of a particular element.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`count()`:** 统计特定元素的出现次数。'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**`index()`:** Find the index of the first occurrence of a value.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`index()`:** 查找值第一次出现的索引。'
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tuple Packing and Unpacking
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组打包和解包
- en: 'Tuple packing and unpacking are convenient features in Python:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 元组打包和解包是Python中的便捷特性：
- en: '**Packing:** Assigning multiple values to a single tuple.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打包：** 将多个值分配给一个元组。'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Unpacking:** Assigning tuple elements to multiple variables.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解包：** 将元组元素分配给多个变量。'
- en: '[PRE13]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Immutable but Not Strictly
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不可变但不是严格的
- en: While tuples themselves are immutable, they can contain mutable elements like
    lists.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然元组本身是不可变的，但它们可以包含像列表这样的可变元素。
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note that while you can't change the tuple itself, you can modify the mutable
    elements within it.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，虽然你不能改变元组本身，但可以修改其中的可变元素。
- en: 'Step 3: Mastering Dictionaries in Python'
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤3：掌握Python中的字典
- en: What is a Dictionary in Python?
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的字典是什么？
- en: A dictionary in Python is an unordered, mutable data type that stores mappings
    of unique keys to values. Dictionaries are written with curly braces `{ }` and
    consist of key-value pairs separated by commas.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的字典是一个无序的、可变的数据类型，用于存储唯一键到值的映射。字典用大括号`{ }`表示，并由用逗号分隔的键值对组成。
- en: 'For example:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Dictionaries are useful for storing data in a structured manner and accessing
    values by keys.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 字典对于以结构化方式存储数据并通过键访问值非常有用。
- en: Creating a Dictionary
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建字典
- en: Dictionary keys must be immutable objects like strings, numbers, or tuples.
    Dictionary values can be any object.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的键必须是不可变对象，如字符串、数字或元组。字典的值可以是任何对象。
- en: '[PRE16]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Manipulating a Dictionary
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作字典
- en: Elements can be accessed, added, changed, and removed via keys.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 元素可以通过键进行访问、添加、更改和移除。
- en: '[PRE17]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Useful Dictionary Methods
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的字典方法
- en: 'Some useful built-in methods include:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的内置方法包括：
- en: '`keys()` - Returns list of keys'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keys()` - 返回键的列表'
- en: '`values()` - Returns list of values'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values()` - 返回值的列表'
- en: '`items()` - Returns (key, value) tuples'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`items()` - 返回(key, value)元组'
- en: '`get()` - Returns value for key, avoids KeyError'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()` - 返回键的值，避免KeyError'
- en: '`pop()` - Removes key and returns value'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pop()` - 移除键并返回值'
- en: '`update()` - Adds multiple key-values'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update()` - 添加多个键值对'
- en: Hands-on Example with Dictionaries
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字典的实际示例
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Step 4: Exploring Sets in Python'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤4：探索Python中的集合
- en: What is a Set in Python?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的集合是什么？
- en: A set in Python is an unordered, mutable collection of unique, immutable objects.
    Sets are written with curly braces `{ }` but unlike dictionaries, do not have
    key-value pairs.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的集合是一个无序的、可变的唯一不可变对象的集合。集合用大括号`{ }`表示，但与字典不同，没有键值对。
- en: 'For example:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Sets are useful for membership testing, eliminating duplicates, and mathematical
    operations.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 集合对成员测试、消除重复项和数学操作非常有用。
- en: Creating a Set
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建集合
- en: 'Sets can be created from lists by passing it to the `set()` constructor:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过将列表传递给`set()`构造函数来创建集合：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Sets can contain mixed data types like strings, booleans, etc.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 集合可以包含混合数据类型，如字符串、布尔值等。
- en: Manipulating a Set
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 操作集合
- en: Elements can be added and removed from sets.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 元素可以从集合中添加和移除。
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Useful Set Operations
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有用的集合操作
- en: 'Some useful set operations include:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一些有用的集合操作包括：
- en: '`union()` - Returns union of two sets'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`union()` - 返回两个集合的并集'
- en: '`intersection()` - Returns intersection of sets'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`intersection()` - 返回集合的交集'
- en: '`difference()` - Returns difference between sets'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`difference()` - 返回集合之间的差集'
- en: '`symmetric_difference()` - Returns symmetric difference'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`symmetric_difference()` - 返回对称差集'
- en: Hands-on Example with Sets
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用集合的实际示例
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Step 5: Comparing Lists, Dictionaries, and Sets'
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 步骤5：比较列表、字典和集合
- en: Comparison of Characteristics
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 特性比较
- en: The following is a concise comparison of the four Python data structures we
    referred to in this tutorial.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对我们在本教程中提到的四种Python数据结构的简明比较。
- en: '| Structure | Ordered | Mutable | Duplicate Elements | Use Cases |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| 结构 | 有序 | 可变 | 允许重复元素 | 用途 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| List | Yes | Yes | Yes | Storing sequences |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 列表 | 是 | 是 | 是 | 存储序列 |'
- en: '| Tuple | Yes | No | Yes | Storing immutable sequences |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 元组 | 是 | 否 | 是 | 存储不可变序列 |'
- en: '| Dictionary | No | Yes | Keys: No Values: Yes | Storing key-value pairs |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| 字典 | 否 | 是 | 键：否 值：是 | 存储键值对 |'
- en: '| Set | No | Yes | No | Eliminating duplicates, membership testing |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 集合 | 否 | 是 | 否 | 消除重复项，成员测试 |'
- en: When to Use Each Data Structure
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用每种数据结构
- en: Treat this as a soft guideline for which structure to turn to first in a particular
    situation.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 将此视为在特定情况下选择数据结构的软性指南。
- en: Use lists for ordered, sequence-based data. Useful for stacks/queues.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用列表来处理有序的、基于序列的数据。适合堆栈/队列。
- en: Use tuples for ordered, immutable sequences. Useful when you need a fixed collection
    of elements that should not be changed.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用元组来表示有序的、不可变的序列。当你需要一个不应更改的固定元素集合时，元组非常有用。
- en: Use dictionaries for key-value data. Useful for storing related properties.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用字典来存储键值数据。适合存储相关属性。
- en: Use sets for storing unique elements and mathematical operations.
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用集合来存储唯一元素和进行数学操作。
- en: Hands-on Example Using All Four Data Structures
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用所有四种数据结构的实际示例
- en: Let's have a look at how these structures can all work together in an example
    that is a little more complex than a one liner.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些结构如何在一个比单行代码更复杂的示例中协同工作。
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Output:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This example utilizes a list for an ordered sequence, a tuple for storing additional
    immutable information, a set to remove duplicates, and a dictionary to store key-value
    pairs.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子利用列表来表示有序序列，利用元组来存储附加的不可变信息，利用集合来去除重复项，利用字典来存储键值对。
- en: Moving Forward
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向前推进
- en: In this comprehensive tutorial, we've taken a deep look at the foundational
    data structures in Python, including lists, tuples, dictionaries, and sets. These
    structures form the building blocks of Python programming, providing a framework
    for data storage, processing, and manipulation. Understanding these structures
    is essential for writing efficient and scalable code. From manipulating sequences
    with lists, to organizing data with key-value pairs in dictionaries, and ensuring
    uniqueness with sets, these essential tools offer immense flexibility in data
    handling.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个全面的教程中，我们深入探讨了Python中的基础数据结构，包括列表、元组、字典和集合。这些结构是Python编程的基石，提供了数据存储、处理和操作的框架。理解这些结构对于编写高效且可扩展的代码至关重要。从使用列表操作序列，到用字典组织数据，再到利用集合确保唯一性，这些基本工具在数据处理上提供了巨大的灵活性。
- en: As we've seen through code examples, these data structures can be combined in
    various ways to solve complex problems. By leveraging these data structures, you
    can open the doors to a wide range of possibilities in data analysis, machine
    learning, and beyond. Don't hesitate to explore the official [Python data structures
    documentation](https://docs.python.org/3/tutorial/datastructures.html) for more
    insights.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们通过代码示例所见，这些数据结构可以以各种方式组合使用来解决复杂问题。通过利用这些数据结构，你可以开启数据分析、机器学习及其他领域的广泛可能性。不要犹豫，查阅官方的[Python数据结构文档](https://docs.python.org/3/tutorial/datastructures.html)以获得更多见解。
- en: Happy coding!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 编程愉快！
- en: '[**Matthew Mayo**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    holds a Master''s degree in computer science and a graduate diploma in data mining.
    As Editor-in-Chief of KDnuggets, Matthew aims to make complex data science concepts
    accessible. His professional interests include natural language processing, machine
    learning algorithms, and exploring emerging AI. He is driven by a mission to democratize
    knowledge in the data science community. Matthew has been coding since he was
    6 years old.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[**马修·梅约**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    拥有计算机科学硕士学位和数据挖掘研究生文凭。作为KDnuggets的主编，马修旨在使复杂的数据科学概念变得易于理解。他的专业兴趣包括自然语言处理、机器学习算法和探索新兴的人工智能。他致力于使数据科学社区的知识普及化。马修从6岁起便开始编程。'
- en: More On This Topic
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于这个话题的更多内容
- en: '[Getting Started with SQL in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-with-sql)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步开始使用SQL](https://www.kdnuggets.com/5-steps-getting-started-with-sql)'
- en: '[Getting Started with Scikit-learn in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-scikit-learn)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步开始使用Scikit-learn](https://www.kdnuggets.com/5-steps-getting-started-scikit-learn)'
- en: '[Getting Started with Google Cloud Platform in 5 Steps](https://www.kdnuggets.com/5-steps-google-cloud-platform)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步开始使用Google Cloud Platform](https://www.kdnuggets.com/5-steps-google-cloud-platform)'
- en: '[Getting Started with PyTorch in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-pytorch)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步开始使用PyTorch](https://www.kdnuggets.com/5-steps-getting-started-pytorch)'
- en: '[Getting Started with Python for Data Science](https://www.kdnuggets.com/getting-started-with-python-for-data-science)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数据科学入门](https://www.kdnuggets.com/getting-started-with-python-for-data-science)'
- en: '[Getting Started with Python Generators](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 生成器入门](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)'
