- en: Build PyTorch Models Easily Using torchlayers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/04/pytorch-models-torchlayers.html](https://www.kdnuggets.com/2020/04/pytorch-models-torchlayers.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch continues to enjoy an impressive level of general interest, judging
    by [online searches](https://trends.google.com/trends/explore?date=today%205-y&geo=US&q=%2Fg%2F11gd3905v1)
    and, more importantly, [continues to increase its rate of adoption](/2020/01/openai-pytorch-adoption.html).
    PyTorch is thought of as powerful and flexible, a pair of characteristics which
    are welcome by researchers. However, PyTorch has, in the past, been susceptible
    to criticism by practitioners for its lack of a simplified higher-level API, such
    as TensorFlow's Keras. This situation has recently changed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/920a252480639f8131d0b2e4b22d5974.png)'
  prefs: []
  type: TYPE_IMG
- en: '**[torchlayers](https://github.com/szymonmaszke/torchlayers)** aims to do for
    PyTorch what Keras has done for TensorFlow. Concisely defined via the project''s
    developers:'
  prefs: []
  type: TYPE_NORMAL
- en: torchlayers is a library based on PyTorch providing **automatic shape and dimensionality
    inference of `torch.nn` layers** + additional building blocks featured in current
    SOTA architectures (e.g. Efficient-Net).
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Above requires no user intervention (except single call to torchlayers.build)
    similarly to the one seen in Keras.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Aside from the shape and dimensionality inference mentioned above, torchlayers
    includes additional Keras-like layers such as `[torchlayers.Reshape](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=reshape#torchlayers.Reshape)`
    (reshapes input tenors while preserving batch dimensions), includes SOTA layers
    previously seen in ImageNet competitions (`[PolyNet](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.convolution.html?highlight=polynet#torchlayers.convolution.Poly)`,
    for example), and provides some useful defaults such as convolution kernel size
    (the default in torchlayers is 3).
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation is simple using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Additional installation information (re: Docker images and GPUs) [can be found
    here](https://szymonmaszke.github.io/torchlayers/#installation). Full torchlayers
    documentation [can be found here](https://szymonmaszke.github.io/torchlayers/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The torchlayers GitHub page provides a few examples to show off some of its
    features. I like the [Simple image and text classifier in one!](https://github.com/szymonmaszke/torchlayers#simple-image-and-text-classifier-in-one)
    example, the code for which I have replicated below. This example demonstrates:'
  prefs: []
  type: TYPE_NORMAL
- en: '`torch.nn` and `torchlayers` layer intermixing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shape and dimensionality inference (`Conv` and `Linear` input and `BatchNorm`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: default Conv kernel size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Conv` padding defaults to "same"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use of torchlayers pooling layer (`GlobalMaxPool`, similar to Keras)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A defined network can then be built using `[torchlayers.build](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=build#torchlayers.build)`
    while specifying input shape (input shapes shown below for both image and text
    classification, for the model defined above):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`build` obviously works like in Keras, performing the equivalent of compiling
    the model to PyTorch primitives; it allows for some additional functionality via
    a `post_build` function (such as weight initialization, shown below), which you
    can [find more about here](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=build#torchlayers.build).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[torchlayers](https://github.com/szymonmaszke/torchlayers) provides some helpful
    features for Keras-like model building using PyTorch, and fills an obvious hole.
    Time will tell how the project develops and catches on long-term, but it''s certainly
    off to a promising start.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[OpenAI is Adopting PyTorch... They Aren’t Alone](/2020/01/openai-pytorch-adoption.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to PyTorch 1.2](/2019/09/gentle-introduction-pytorch-12.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tokenization and Text Data Preparation with TensorFlow & Keras](/2020/03/tensorflow-keras-tokenization-text-data-prep.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Scrape Images Easily from Websites in A No-Coding Way](https://www.kdnuggets.com/2022/06/octoparse-scrape-images-easily-websites-nocoding-way.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Explore LLMs Easily on Your Laptop with openplayground](https://www.kdnuggets.com/2023/04/explore-llms-easily-laptop-openplayground.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easily Integrate LLMs into Your Scikit-learn Workflow with Scikit-LLM](https://www.kdnuggets.com/easily-integrate-llms-into-your-scikit-learn-workflow-with-scikit-llm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Start Using Natural Language Processing With PyTorch](https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Practical Guide to Transfer Learning using PyTorch](https://www.kdnuggets.com/2023/06/practical-guide-transfer-learning-pytorch.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Build a Real-Time Recommendation Engine Using Graph Databases](https://www.kdnuggets.com/2023/08/build-realtime-recommendation-engine-graph-databases.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
