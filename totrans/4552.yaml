- en: Python Lists and List Manipulation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/11/python-lists-list-manipulation.html](https://www.kdnuggets.com/2019/11/python-lists-list-manipulation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/), Data
    Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: Python Lists and List Manipulation Video
  prefs: []
  type: TYPE_NORMAL
- en: Before starting, I should mention that the code in this blog post and in the [video](https://www.youtube.com/watch?v=w9I8R3WSVqc) above
    is available on my [github](https://github.com/mGalarnyk/Python_Tutorials/blob/master/Python_Basics/Intro/Python3Basics_Part1.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: Defining a List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Lists are written within square brackets []
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/0f0d6b6cfca3d1e902a9ec55201c31a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Defining a List. The second row in this table index is how you access items
    in the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Lists store an ordered collection of items which can be of different types.
    The list defined above has items that are all of the same type (int), but all
    the items of a list do not need to be of the same type as you can see below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The list contains an int, a bool, a string, and a float.
  prefs: []
  type: TYPE_NORMAL
- en: Access Values in a List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each item in a list has an assigned index value. It is important to note that
    python is a zero indexed based language. All this means is that the first item
    in the list is at index 0.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b89d7bba815577c207d36e6508c9d096.png)'
  prefs: []
  type: TYPE_IMG
- en: Access item at index 0 (in blue)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/e506b11c3c3095273a47b4da1d3b757d.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of accessing the item at index 0.
  prefs: []
  type: TYPE_NORMAL
- en: Python also supports negative indexing. Negative indexing starts from the end.
    It can be more convenient at times to use negative indexing to get the last item
    in the list because you don’t have to know the length of the list to access the
    last item.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/08102028b645d582d9f293b068ef229e.png)'
  prefs: []
  type: TYPE_IMG
- en: Accessing the item at the last index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/77ccf2e6eb5c18a41b1a3406cc403ea6.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of accessing the last item in the List
  prefs: []
  type: TYPE_NORMAL
- en: As a reminder, you could also access the same item using positive indexes (as
    seen below).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/8f32d3df0a624d4f9cf1260295ac31cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternative way of accessing the last item in the list z
  prefs: []
  type: TYPE_NORMAL
- en: Slice of Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Slices are good for getting a subset of values in your list. For the example
    code below, it will return a list with the items from index 0 up to and not including
    index 2.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b31d8c1f94517d1b95a686b9e11b7bdf.png)'
  prefs: []
  type: TYPE_IMG
- en: First index is inclusive (before the :) and last (after the :) is not
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/1f34d7abc2e96e0e6f925be856a85647.png)'
  prefs: []
  type: TYPE_IMG
- en: Slice of a list syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0eca160ed1f66c0b9bfe57903ccf7698.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/26d4397ca86dad3c42a634871805927a.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/3983df8d301c889ad3e0194259c2c21d.png)'
  prefs: []
  type: TYPE_IMG
- en: The code below returns a list with items from index 1 to the end of the list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8161147ede53d54272f7bbbf16cc856c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Update Item in a List**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/bb2fd0ebf6c2a84049c7f77d9c408c4f.png)'
  prefs: []
  type: TYPE_IMG
- en: Lists in Python are mutable. All that means is that after defining a list, it
    is possible to update the individual items in a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/e470c3724abb94e178a6c6bed138e6b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Code to modify an item in a list
  prefs: []
  type: TYPE_NORMAL
- en: List Methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python lists have different methods that help you modify a list. This section
    of the tutorial just goes over various python list methods.
  prefs: []
  type: TYPE_NORMAL
- en: '**Index Method**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/6c48708ebc305bd3b39598f13ee40b72.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/21335a4cb2ed6052d824b958874e8657.png)'
  prefs: []
  type: TYPE_IMG
- en: The index method returns the first index at which a value occurs. In the code
    below, it will return 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9529bfaebe65a4f0919cf7372331a1f2.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/0e83d8ef6b09f05d84473d71b703e579.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also specify where you start your search.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e192a4904a4bfbc025b3da01b31a4aaa.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Count Method**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The count method works just like how it sounds. It counts the number of times
    a value occurs in a list
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/00997ff65acfb0e694537f95d8344882.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Sort Method**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/96e935cabcf093fd3c8ba28455d7676b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Sort a Python List - the actual code would be: z.sort()'
  prefs: []
  type: TYPE_NORMAL
- en: The sort method sorts and alters the original list in place.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b9b943fa973c0e851aa94bb1a82de875.png)'
  prefs: []
  type: TYPE_IMG
- en: The code above sorts a list from low to high. The code below shows that you
    can also sort a list from high to low.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/48d83f04e24a67d55cb802e1dc45a095.png)'
  prefs: []
  type: TYPE_IMG
- en: Sort a python list from high to low
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/03fa965a366da06c49b468e87d308626.png)'
  prefs: []
  type: TYPE_IMG
- en: As an aside, I should mention that you can also sort a list of strings from
    a-z and z-a as you can see [here](https://youtu.be/w9I8R3WSVqc?t=4m16s).
  prefs: []
  type: TYPE_NORMAL
- en: '**Append Method**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/27cae59fc7b4824d149ffaac8842d2b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the value 3 to the end of the list.
  prefs: []
  type: TYPE_NORMAL
- en: The append method adds an element to the end of a list. This happens inplace.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/84d5498da7272bb3f11e6e08c705b0d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Remove Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/1f1093808a3d7ef0ab846f8bcdd209a0.png)'
  prefs: []
  type: TYPE_IMG
- en: The remove method removes the first occurrence of a value in a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/a9787d46bd38cb470a918d872c58485a.png)'
  prefs: []
  type: TYPE_IMG
- en: Code removes the first occurrence of the value 2 from the list z
  prefs: []
  type: TYPE_NORMAL
- en: Pop Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/658e10358cc9c89ff711788ef09fdf8f.png)'
  prefs: []
  type: TYPE_IMG
- en: z.pop(1) removes the value at index 1 and returns the value 4.
  prefs: []
  type: TYPE_NORMAL
- en: The pop method removes an item at the index you provide. This method will also
    return the item you removed from the list. If you don’t provide an index, it will
    by default remove the item at the last index.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a7518ec4ba34da9ee44360e4a3d832e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Extend Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/58195ca811341000b060c99ef9f2e170.png)'
  prefs: []
  type: TYPE_IMG
- en: The method extends a list by appending items. The benefit of this is you can
    add lists together.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/32b16d7484f288bf66c0cad7f2c1e076.png)'
  prefs: []
  type: TYPE_IMG
- en: Add the list [4, 5] to the end of the list z.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, the same thing could be accomplished by using the + operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b17f5b2bbaff25d02671c1b5c2f88427.png)'
  prefs: []
  type: TYPE_IMG
- en: Insert Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/07ae4f25a5d697021d7a490a0be28d84.png)'
  prefs: []
  type: TYPE_IMG
- en: insert the list [1,2] at index 4
  prefs: []
  type: TYPE_NORMAL
- en: The insert method inserts an item before the index you provide
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0a1c5eb208cf57bf76abfa8ac3b4073d.png)'
  prefs: []
  type: TYPE_IMG
- en: Closing Remarks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please let me know if you have any questions either here or in the comments
    section of the [youtube video](https://www.youtube.com/watch?v=w9I8R3WSVqc) or
    through [Twitter](https://twitter.com/GalarnykMichael)! Next post reviews [python
    dictionaries](https://medium.com/@GalarnykMichael/python-basics-10-dictionaries-and-dictionary-methods-4e9efa70f5b9).
    If you want to learn how to utilize the Pandas, Matplotlib, or Seaborn libraries,
    please consider taking my [Python for Data Visualization LinkedIn Learning course](https://www.linkedin.com/learning/python-for-data-visualization/value-of-data-visualization).
    Here is a [free preview video](https://youtu.be/BE8CVGJuftI).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** is
    a Data Scientist and Corporate Trainer. He currently works at Scripps Translational
    Research Institute. You can find him on Twitter (https://twitter.com/GalarnykMichael),
    Medium (https://medium.com/@GalarnykMichael), and GitHub (https://github.com/mGalarnyk).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/python-basics-6-lists-and-list-manipulation-a56be62b1f95).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Understanding Boxplots](/2019/11/understanding-boxplots.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Set Operations Applied to Pandas DataFrames](/2019/11/set-operations-applied-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Decision Trees for Classification in Python](2019/08/understanding-decision-trees-classification-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Ways of Filtering Python Lists](https://www.kdnuggets.com/2022/11/5-ways-filtering-python-lists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8 Best Python Image Manipulation Tools](https://www.kdnuggets.com/2022/11/8-best-python-image-manipulation-tools.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Python Libraries for Data Manipulation](https://www.kdnuggets.com/essential-python-libraries-for-data-manipulation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Pandas One Liners for Data Access, Manipulation, and Management](https://www.kdnuggets.com/2023/01/pandas-one-liners-data-access-manipulation-management.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why You Should Not Overuse List Comprehensions in Python](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Get Up and Running with SQL - A List of Free Learning Resources](https://www.kdnuggets.com/2022/10/get-running-sql-list-free-learning-resources.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
