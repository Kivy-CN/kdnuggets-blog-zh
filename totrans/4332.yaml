- en: Cleaner Data Analysis with Pandas Using Pipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/01/cleaner-data-analysis-pandas-pipes.html](https://www.kdnuggets.com/2021/01/cleaner-data-analysis-pandas-pipes.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/dae67c23202b0f5e3c5ee224a97d389d.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Candid](https://unsplash.com/@candid?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/clean?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas is a widely-used data analysis and manipulation library for Python. It
    provides numerous functions and methods to provide robust and efficient data analysis
    process.
  prefs: []
  type: TYPE_NORMAL
- en: In a typical data analysis or cleaning process, we are likely to perform many
    operations. As the number of operations increase, the code starts to look messy
    and harder to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: One way to overcome this issue is using the pipe function of Pandas. What pipe
    function does is to allow combining many operations in a chain-like fashion.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will go over examples to understand how the pipe function
    can be used to produce cleaner and more maintainable code.
  prefs: []
  type: TYPE_NORMAL
- en: We will first do some data cleaning and manipulation on a sample dataframe in
    separate steps. After that, we will combine these steps using the pipe function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by importing libraries and creating the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/61b038414c75427fc36344ea1c72a710.png)'
  prefs: []
  type: TYPE_IMG
- en: (image by author)
  prefs: []
  type: TYPE_NORMAL
- en: The dataset contains information about a marketing campaign. It is available [here](https://www.kaggle.com/yoghurtpatil/direct-marketing) on
    Kaggle.
  prefs: []
  type: TYPE_NORMAL
- en: The first operation I want to do is to drop columns that have lots of missing
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The code above drops the columns with 40 percent or more missing values. The
    value we pass to the thresh parameter of dropna function indicates the minimum
    number of required non-missing values.
  prefs: []
  type: TYPE_NORMAL
- en: I also want to remove some outliers. In the salary column, I want to keep the
    values between the 5th and 95th quantiles.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We find the lower and upper limits of the desired range by using the quantile
    function of numpy. These values are then used to filter the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that there are many different ways to detect outliers.
    In fact, the way we have used is kind of superficial. There exist more realistic
    alternatives. However, the focus here is the pipe function. Thus, you can implement
    the operation that fits best for your task.
  prefs: []
  type: TYPE_NORMAL
- en: The dataframe contains many categorical variables. If the number of categories
    are few compared to the total number values, it is better to use the category
    data type instead of object. It saves a great amount of memory depending on the
    data size.
  prefs: []
  type: TYPE_NORMAL
- en: The following code will go over columns with object data type. If the number
    of categories are less than 5 percent of the total number of values, the data
    type of the column will be changed to category.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have done three steps of data cleaning and manipulation. Depending on the
    task, the number of steps might be more.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a pipe that accomplish all these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The pipe function takes functions as inputs. These functions need to take a
    dataframe as input and return a dataframe. Thus, we need to define functions for
    each task.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may argue that what the point is if we need to define functions. It does
    not seem like simplifying the workflow. You are right for one particular task
    but we need to think more generally. Consider you are doing the same operations
    many times. In such case, creating a pipe makes the process easier and also provides
    cleaner code.
  prefs: []
  type: TYPE_NORMAL
- en: We have mentioned that the pipe function takes a function as input. If the function
    we pass to the pipe function has any arguments, we can pass it to the pipe function
    along with the function. It makes the pipe function even more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the remove_outliers function takes a column name as argument.
    The function removes the outliers in that column.
  prefs: []
  type: TYPE_NORMAL
- en: We can now create our pipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It looks neat and clean. We can add as many steps as needed. The only criterion
    is that the functions in the pipe should take a dataframe as argument and return
    a dataframe. Just like with the remove_outliers function, we can pass the arguments
    of the functions to the pipe function as an argument. This flexibility makes the
    pipes more useful.
  prefs: []
  type: TYPE_NORMAL
- en: One important thing to mention is that the pipe function modifies the original
    dataframe. We should avoid changing the original dataset if possible.
  prefs: []
  type: TYPE_NORMAL
- en: To overcome this issue, we can use a copy of the original dataframe in the pipe.
    Furthermore, we can add a step that makes a copy of the dataframe in the beginning
    of the pipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Our pipeline is complete now. Let’s compare the original dataframe with the
    cleaned to confirm it is working.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The pipeline is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pipes provide cleaner and more maintainable syntax for data analysis. Another
    advantage is that they automatize the steps of data cleaning and manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: If you are doing the same operations over and over, you should definitely consider
    creating a pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: Thank you for reading. Please let me know if you have any feedback.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Soner Yıldırım](https://www.linkedin.com/in/soneryildirim/)** is a
    Data Science Enthusiast. [See his portfolio here](https://soneryldrm.github.io/Portfolio/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/cleaner-data-analysis-with-pandas-using-pipes-4d73770fbf3c).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Data Cleaning: The secret ingredient to the success of any Data Science Project](/2020/07/data-cleaning-secret-ingredient-success-data-science-project.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Cleaning and Wrangling in SQL](/2021/01/data-cleaning-wrangling-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Merging Pandas DataFrames in Python](/2020/12/merging-pandas-dataframes-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
