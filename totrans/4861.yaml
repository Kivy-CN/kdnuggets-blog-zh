- en: Neural Network based Startup Name Generator
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于神经网络的初创公司名称生成器
- en: 原文：[https://www.kdnuggets.com/2018/04/neural-network-startup-name-generator.html](https://www.kdnuggets.com/2018/04/neural-network-startup-name-generator.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/04/neural-network-startup-name-generator.html](https://www.kdnuggets.com/2018/04/neural-network-startup-name-generator.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**By [Alexander Engelhardt](http://www.alpha-epsilon.de/), freelance Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Alexander Engelhardt](http://www.alpha-epsilon.de/)，自由数据科学家**'
- en: Summary
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this post I present a Python script that automatically generates suggestions
    for startup names. You feed it a text corpus with a certain theme, e.g. a Celtic
    text, and it then outputs similar sounding suggestions. An example call looks
    like this:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我展示了一个自动生成初创公司名称建议的 Python 脚本。你给它一个具有特定主题的文本语料库，例如凯尔特文本，然后它会输出类似发音的建议。一个示例调用如下：
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: ./generate.py -n 10 -t 1.2 -m models/gallic_500epochs.h5 wordlists/gallic.txt
    --suffix Software
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ./generate.py -n 10 -t 1.2 -m models/gallic_500epochs.h5 wordlists/gallic.txt
    --suffix 软件
- en: 'Output:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: =======
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: =======
- en: Ercos Software
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Ercos 软件
- en: Riuri Software
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Riuri 软件
- en: Palia Software
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Palia 软件
- en: Critim Software
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Critim 软件
- en: Arios Software
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Arios 软件
- en: Veduos Software
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Veduos 软件
- en: Eigla Software
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Eigla 软件
- en: Isbanos Software
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Isbanos 软件
- en: Edorio Software
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Edorio 软件
- en: Emmos Software
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Emmos 软件
- en: I applied the script to “normal” texts in English, German, and French, and then
    experimented with corpora of Celtic songs, Pokemon names, and J.R.R. Tolkien’s
    Black Speech, the language of Mordor.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我将这个脚本应用于英语、德语和法语的“普通”文本，然后尝试了凯尔特歌曲、宝可梦名字和 J.R.R. 托尔金的黑语（魔多之语）的语料库。
- en: I’ve made a few longer lists of sampled proposals available [here](https://github.com/AlexEngelhardt/startup-name-generator/tree/master/sample-outputs/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经将一些更长的样本提案列表发布在[这里](https://github.com/AlexEngelhardt/startup-name-generator/tree/master/sample-outputs/)。
- en: 'You can find the code, all the text corpora I’ve used, and some pre-computed
    models in my GitHub repo:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在我的 GitHub 仓库中找到代码、我使用的所有文本语料库以及一些预计算模型：
- en: '[https://github.com/AlexEngelhardt/startup-name-generator](https://github.com/AlexEngelhardt/startup-name-generator)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/AlexEngelhardt/startup-name-generator](https://github.com/AlexEngelhardt/startup-name-generator)'
- en: Goal
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目标
- en: Recently, an associate and I started to found a software company, but most name
    ideas we came up with were already in use. We wanted a name with a Celtic touch,
    and we needed a large number of candidates to find one that was still available.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我和一位同事开始创办一家软件公司，但我们想到的大多数名字都已经在用。我们想要一个具有凯尔特风格的名字，并且需要大量的候选名称来找到一个仍然可用的。
- en: So I started to create a neural network that generates new, artificial words.
    You’d feed it a corpus of sample words in a certain style you like, for example,
    Celtic songs, and it would be able to pick up the peculiarities of the text (the
    “language”) and generate new similar sounding words. The famous [blog post by
    Andrej Karpathy](http://karpathy.github.io/2015/05/21/rnn-effectiveness/) provided
    me with the necessary knowledge and the confidence that this is a realistic idea.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我开始创建一个生成新型人工词汇的神经网络。你需要输入一个你喜欢的特定风格的样本文本，例如凯尔特歌曲，它就能捕捉文本的特点（“语言”）并生成新的类似发音的词汇。著名的[Andrej
    Karpathy 的博客文章](http://karpathy.github.io/2015/05/21/rnn-effectiveness/)为我提供了必要的知识和信心，这个想法是现实的。
- en: Data preprocessing
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据预处理
- en: I first built a corpus of raw text. For preprocessing, I stripped out all non-letter
    characters. Then, I split the text up in words and kept only unique words. I figured
    this step was reasonable since I did not want the model to learn the most common
    words, but instead to get an understanding of the entire corpus’ structure.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我首先建立了一个原始文本的语料库。对于预处理，我剥离了所有非字母字符。然后，我将文本分割成单词并只保留唯一的单词。我认为这个步骤是合理的，因为我不希望模型学习最常见的单词，而是理解整个语料库的结构。
- en: After this, most text corpora ended up as a list of 1000 to 2000 words.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，大多数文本语料库最终成为 1000 到 2000 个单词的列表。
- en: The RNN architecture
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: RNN 架构
- en: Recurrent neural networks can model language particularly well, and were the
    appropriate type for this task of word generation. However, finding the ‘perfect’
    RNN architecture is still somewhat of a black art. Questions like how many layers
    or how many units to use have no definite answer, but rely on experience and intuition.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 循环神经网络可以特别好地建模语言，并且是这个词生成任务的合适类型。然而，找到‘完美’的 RNN 架构仍然有些像黑魔法。像使用多少层或多少单元这样的问题没有确定的答案，而是依赖于经验和直觉。
- en: To save training time, I wanted a model that was as complex as necessary, but
    as simple as possible. I settled for a character-level two-layer LSTM with 50
    units each, training it for 500 epochs. The words this model outputs sound very
    good already.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了节省训练时间，我希望模型既足够复杂又尽可能简单。我选择了一个每层有 50 个单元的字符级双层 LSTM，并训练了 500 个周期。这个模型输出的单词已经听起来非常不错了。
- en: Sampling temperature
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 采样温度
- en: The RNN generates a new name character by character. It doesn’t just output
    the next character, but the *distribution* for the next character. This allows
    us to either just pick the letter with the highest probability, or to sample from
    the provided distribution.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: RNN 逐个字符生成新名称。它不仅输出下一个字符，还输出下一个字符的*分布*。这允许我们要么选择概率最高的字母，要么从提供的分布中采样。
- en: A nice touch I found is to vary the [temperature](https://cs.stackexchange.com/questions/79241/what-is-temperature-in-lstm-and-neural-networks-generally)
    of the sampling procedure. The temperature is a parameter that adapts the weights
    to sample from. The “standard” temperature 1 does not change the weights. For
    a lower temperature, the sampling becomes less random, i.e. more conservative,
    and the letter corresponding to the maximum weight is chosen almost always. The
    other extreme, a large temperature, will adjust the weights approaching a uniform
    distribution, representing total randomness. For actual text sampling, a temperature
    below 1 might be appropriate, but since I wanted new words, a higher temperature
    seemed better.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现一个很好的方法是改变采样过程的[温度](https://cs.stackexchange.com/questions/79241/what-is-temperature-in-lstm-and-neural-networks-generally)。温度是一个调整采样权重的参数。“标准”温度
    1 不改变权重。对于较低的温度，采样变得不那么随机，即更保守，几乎总是选择最大权重对应的字母。另一个极端，大温度，会调整权重接近均匀分布，代表完全的随机性。对于实际文本采样，温度低于
    1 可能是合适的，但由于我想要新词，高温度似乎更好。
- en: '![The effect of varying the temperature](../Images/aa677edde1f381f8c762b7caaefe6fde.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![变化温度的效果](../Images/aa677edde1f381f8c762b7caaefe6fde.png)'
- en: In the image above, imagine we want to sample one letter from A, B, …, J. The
    original weights output by your RNN might be the red bars. If you lower the temperature,
    the weights change to the yellow-ish bars (temperature = 0.1), and if you raise
    it, they change to the green bars (temperature = 3).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，假设我们想从 A、B、…、J 中采样一个字母。你 RNN 输出的原始权重可能是红色条。如果你降低温度，权重会变成黄色条（温度 = 0.1），如果你提高温度，它们会变成绿色条（温度
    = 3）。
- en: Example calls and sample output
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例调用和输出
- en: 'Call the script with the -h parameter to have it print an overview of all possible
    parameters. The following command trains an LSTM model on the wordlists/english.txt
    corpus for 500 epochs (-e 500), saves the model (-s) to models/english_500epochs.h5,
    and then samples 10 company names (-n 10) with a temperature of 1.2 (-t 1.2),
    and finally appends the word “Software” (--suffix) to the names (I found a long
    list of possible suffixes [here](https://www.reddit.com/r/Entrepreneur/comments/4jfrgl/is_there_a_list_of_generic_company_name_endings/)).
    While training, I like to pass the -v argument to run in verbose mode. Then, the
    model prints some extra information as well as a few sample generated words each
    10 epochs:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用-h参数调用脚本以打印所有可能的参数概述。以下命令在wordlists/english.txt语料库上训练一个LSTM模型500轮（-e 500），将模型保存（-s）到models/english_500epochs.h5，然后用1.2的温度（-t
    1.2）采样10个公司名称（-n 10），最后将“Software”添加到名称后（--suffix）（我在[这里](https://www.reddit.com/r/Entrepreneur/comments/4jfrgl/is_there_a_list_of_generic_company_name_endings/)找到了一长串可能的后缀）。在训练过程中，我喜欢传递-v参数以运行详细模式。然后，模型每10轮打印一些额外信息以及几个生成的示例单词：
- en: ./generate.py -v -e 500 -n 10 -t 1.2 -s models/english_500epochs.h5 wordlists/english.txt
    --suffix Software
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ./generate.py -v -e 500 -n 10 -t 1.2 -s models/english_500epochs.h5 wordlists/english.txt
    --suffix Software
- en: 'My call returned these suggestions:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我的呼叫返回了这些建议：
- en: Officers Software
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Officers Software
- en: Ahips Software
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Ahips Software
- en: Appearing Software
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Appearing Software
- en: Introduce Software
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Introduce Software
- en: Using Software
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Using Software
- en: Alarmed Software
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Alarmed Software
- en: Interettint Software
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Interettint Software
- en: Entwrite Software
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Entwrite Software
- en: Understood Software
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Understood Software
- en: Aspemardan Software
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Aspemardan Software
- en: 'Some other fine name suggestions I encountered, and are too good not to share:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我遇到的一些其他优质名字建议，太好以至于不分享不行：
- en: Indeed (see, it works!)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确实（看，它有效！）
- en: Unifart (I dare you!)
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unifart（我敢你！）
- en: Lyston
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lyston
- en: Alton
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Alton
- en: Rocking
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Rocking
- en: Moor
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Moor
- en: Purrs
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Purrs
- en: Ture
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ture
- en: Exace
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Exace
- en: Overheader
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Overheader
- en: After you stored the model (with the -s option), word generation is quicker
    when you load instead of re-compute the model (using the -m instead of the -s
    argument).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在你存储模型后（使用-s选项），加载模型比重新计算模型要快（使用-m而不是-s参数）。
- en: More exotic corpora
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更具异国情调的语料库
- en: I collected a text each in German, English and French, just to have some realistic
    sounding words and gauge how well the model has learned the corpus structure.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我收集了一些德语、英语和法语的文本，只为拥有一些听起来真实的单词，并评估模型对语料结构的学习效果。
- en: However, most of my time was then spent on more fun corpora. Below, I’ll briefly
    describe them and also show some randomly sampled output for the generated words.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我的大部分时间随后花在了更有趣的语料库上。下面，我将简要描述它们，并展示一些生成单词的随机样本。
- en: Celtic
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Celtic
- en: 'This corpus is composed of a Gallic dictionary, and selected song lyrics in
    the Gaulish language by [Eluveitie](http://www.darklyrics.com/e/eluveitie.html):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该语料库由一个高卢词典和[Eluveitie](http://www.darklyrics.com/e/eluveitie.html)的高卢语歌曲歌词组成：
- en: Lucia
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Lucia
- en: Reuoriosi
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Reuoriosi
- en: Iacca
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Iacca
- en: Helvetia
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Helvetia
- en: Eburo
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Eburo
- en: Ectros
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Ectros
- en: Uxopeilos
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Uxopeilos
- en: Etacos
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Etacos
- en: Neuniamins
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Neuniamins
- en: Nhellos
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Nhellos
- en: Pokemon
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Pokemon
- en: 'If you provide a [list of all Pokemon](https://github.com/AlexEngelhardt/startup-name-generator/blob/master/wordlists/pokemon.txt),
    you get Pokemon-themed names:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你提供一个[所有宝可梦的列表](https://github.com/AlexEngelhardt/startup-name-generator/blob/master/wordlists/pokemon.txt)，你会得到宝可梦主题的名字：
- en: Grubbin
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Grubbin
- en: Agsharon
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Agsharon
- en: Oricorina
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Oricorina
- en: Erskeur
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Erskeur
- en: Electrode
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Electrode
- en: Ervivare
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Ervivare
- en: Unfeon
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Unfeon
- en: Whinx
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Whinx
- en: Onterdas
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Onterdas
- en: Cagbanitl
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Cagbanitl
- en: Tolkien’s Black Speech
  id: totrans-96
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 托尔金的黑语
- en: 'Tolkien’s [Black Speech](http://www.angelfire.com/ia/orcishnations/englishorcish.html),
    the language of Mordor, was a just-for-fun experiment:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 托尔金的[黑语](http://www.angelfire.com/ia/orcishnations/englishorcish.html)，魔多的语言，是一个纯粹的娱乐实验：
- en: Aratani
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Aratani
- en: Arau
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Arau
- en: Ushtarak
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Ushtarak
- en: Ishi
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Ishi
- en: Kakok
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Kakok
- en: Ulig
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Ulig
- en: Ruga
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Ruga
- en: Arau
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Arau
- en: Lakan
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Lakan
- en: Udaneg
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Udaneg
- en: This tool has already proved useful for us, coming up with a few very pleasant-sounding
    names. It might prove helpful to others too, I
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具已经证明对我们很有用，提出了一些非常悦耳的名字。它也可能对其他人有帮助，我
- en: '**Bio: [Alexander Engelhardt](http://www.alpha-epsilon.de/)**, recently earned
    a MSc and PhD degree in statistics at the LMU in Munich, and then became a freelance
    data scientist specialized in machine learning with R. Alexander recently caught
    the open source bug and started contributing to the R package ‘mlr’. This post
    introduces my first own personal side project.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bio: [亚历山大·恩格尔哈特](http://www.alpha-epsilon.de/)**，最近获得了慕尼黑大学的统计学硕士和博士学位，随后成为了专注于机器学习的自由数据科学家。亚历山大最近对开源产生了兴趣，开始贡献于R包‘mlr’。这篇文章介绍了我第一个个人侧项目。'
- en: '[Original](http://alpha-epsilon.de/python/2018/04/04/an-lstm-based-startup-name-generator/).Reposted
    with permission.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](http://alpha-epsilon.de/python/2018/04/04/an-lstm-based-startup-name-generator/)。转载经许可。'
- en: '**Related:**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Ten Machine Learning Algorithms You Should Know to Become a Data Scientist](https://www.kdnuggets.com/2018/04/10-machine-learning-algorithms-data-scientist.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为数据科学家应该了解的十种机器学习算法](https://www.kdnuggets.com/2018/04/10-machine-learning-algorithms-data-scientist.html)'
- en: '[Getting Started with PyTorch Part 1: Understanding How Automatic Differentiation
    Works](https://www.kdnuggets.com/2018/04/getting-started-pytorch-understanding-automatic-differentiation.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch入门第1部分：理解自动微分如何工作](https://www.kdnuggets.com/2018/04/getting-started-pytorch-understanding-automatic-differentiation.html)'
- en: '[Practical Data Science: Building Minimum Viable Models](https://www.kdnuggets.com/2016/11/practical-data-science-building-minimum-viable-models.html)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[实用数据科学：构建最小可行模型](https://www.kdnuggets.com/2016/11/practical-data-science-building-minimum-viable-models.html)'
- en: More On This Topic
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[12 Tips: From Data Analyst to Startup Co-Founder](https://www.kdnuggets.com/2021/12/12-tips-data-analyst-to-co-founder.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[12个建议：从数据分析师到创业公司联合创始人](https://www.kdnuggets.com/2021/12/12-tips-data-analyst-to-co-founder.html)'
- en: '[10 Hurdles of Building a Deep Tech Startup in the Age of ChatGPT](https://www.kdnuggets.com/2023/04/10-hurdles-building-deep-tech-startup-age-chatgpt.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在ChatGPT时代构建深科技创业公司的10大障碍](https://www.kdnuggets.com/2023/04/10-hurdles-building-deep-tech-startup-age-chatgpt.html)'
- en: '[Learn Deep Learning by Building 15 Neural Network Projects in 2022](https://www.kdnuggets.com/2022/01/15-neural-network-projects-build-2022.html)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2022年通过构建15个神经网络项目学习深度学习](https://www.kdnuggets.com/2022/01/15-neural-network-projects-build-2022.html)'
- en: '[Neural Network Optimization with AIMET](https://www.kdnuggets.com/2022/04/qualcomm-neural-network-optimization-aimet.html)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用AIMET进行神经网络优化](https://www.kdnuggets.com/2022/04/qualcomm-neural-network-optimization-aimet.html)'
- en: '[Building and Training Your First Neural Network with TensorFlow and Keras](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用TensorFlow和Keras构建和训练你的第一个神经网络](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
- en: '[Building a Convolutional Neural Network with PyTorch](https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用PyTorch构建卷积神经网络](https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch)'
