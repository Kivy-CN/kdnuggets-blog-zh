- en: 'Jupyter Notebook for Beginners: A Tutorial'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/05/jupyter-notebook-beginners-tutorial.html](https://www.kdnuggets.com/2018/05/jupyter-notebook-beginners-tutorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/05/jupyter-notebook-beginners-tutorial.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By Benjamin Pryke, [Dataquest](https://www.dataquest.io)**'
  prefs: []
  type: TYPE_NORMAL
- en: The Jupyter Notebook is an incredibly powerful tool for interactively developing
    and presenting data science projects. A notebook integrates code and its output
    into a single document that combines visualisations, narrative text, mathematical
    equations, and other rich media. The intuitive workflow promotes iterative and
    rapid development, making notebooks an increasingly popular choice at the heart
    of contemporary data science, analysis, and increasingly science at large. Best
    of all, as part of the open source [Project Jupyter](https://jupyter.org/), they
    are completely free.
  prefs: []
  type: TYPE_NORMAL
- en: The Jupyter project is the successor to the earlier IPython Notebook, which
    was first published as a prototype in 2010\. Although it is possible to use many
    different programming languages within Jupyter Notebooks, this article will focus
    on Python as it is the most common use case.
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this tutorial you should be familiar with programming,
    specifically Python and [pandas](https://pandas.pydata.org/) specifically. That
    said, if you have experience with another language, the Python in this article
    shouldn't be too cryptic and pandas should be interpretable. Jupyter Notebooks
    can also act as a flexible platform for getting to grips with pandas and even
    Python, as it will become apparent in this article.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will:'
  prefs: []
  type: TYPE_NORMAL
- en: Cover the basics of installing Jupyter and creating your first notebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delve deeper and learn all the important terminology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore how easily notebooks can be shared and published online. Indeed, this
    article *is* a Jupyter Notebook! Everything here was written in the Jupyter Notebook
    environment and you are viewing it in a read-only form.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example data analysis in a Jupyter Notebook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will walk through a sample analysis, to answer a real-life question, so you
    can see how the flow of a notebook makes the task intuitive to work through ourselves,
    as well as for others to understand when we share it with them.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's say you're a data analyst and you've been tasked with finding out
    how the profits of the largest companies in the US changed historically. You find
    a data set of Fortune 500 companies spanning over 50 years since the list's first
    publication in 1955, put together from [Fortune's public archive](http://archive.fortune.com/magazines/fortune/fortune500_archive/full/2005/).
    We've gone ahead and created a CSV of the data you can use [here](https://www.dataquest.io/blog/large_files/fortune500.csv).
  prefs: []
  type: TYPE_NORMAL
- en: As we shall demonstrate, Jupyter Notebooks are perfectly suited for this investigation.
    First, let's go ahead and install Jupyter.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The easiest way for a beginner to get started with Jupyter Notebooks is by
    installing [Anaconda](https://anaconda.org/). Anaconda is the most widely used
    Python distribution for data science and comes pre-loaded with all the most popular
    libraries and tools. As well as Jupyter, some of the biggest Python libraries
    wrapped up in Anaconda include [NumPy](http://www.numpy.org/), [pandas](https://pandas.pydata.org/) and [Matplotlib](https://matplotlib.org/),
    though the [full 1000+ list](https://docs.anaconda.com/anaconda/packages/pkg-docs) is
    exhaustive. This lets you hit the ground running in your own fully stocked data
    science workshop without the hassle of managing countless installations or worrying
    about dependencies and OS-specific (read: Windows-specific) installation issues.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get Anaconda, simply:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Download](https://www.anaconda.com/download/) the latest version of Anaconda
    for Python 3 (ignore Python 2.7).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install Anaconda by following the instructions on the download page and/or in
    the executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are a more advanced user with Python already installed and prefer to
    manage your packages manually, you can just use pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating Your First Notebook
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this section, we're going to see how to run and save notebooks, familiarise
    ourselves with their structure, and understand the interface. We'll become intimate
    with some core terminology that will steer you towards a practical understanding
    of how to use Jupyter Notebooks by yourself and set us up for the next section,
    which steps through an example data analysis and brings everything we learn here
    to life.
  prefs: []
  type: TYPE_NORMAL
- en: Running Jupyter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On Windows, you can run Jupyter via the shortcut Anaconda adds to your start
    menu, which will open a new tab in your default web browser that should look something
    like the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![Jupyter control panel](../Images/9387393ed48c947987662cd50d11ba1e.png)'
  prefs: []
  type: TYPE_IMG
- en: This isn't a notebook just yet, but don't panic! There's not much to it. This
    is the Notebook Dashboard, specifically designed for managing your Jupyter Notebooks.
    Think of it as the launchpad for exploring, editing and creating your notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that the dashboard will give you access only to the files and sub-folders
    contained within Jupyter's start-up directory; however, the start-up directory [can
    be changed](https://stackoverflow.com/q/35254852/604687). It is also possible
    to start the dashboard on any system via the command prompt (or terminal on Unix
    systems) by entering the command `jupyter notebook`; in this case, the current
    working directory will be the start-up directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The astute reader may have noticed that the URL for the dashboard is something
    like `http://localhost:8888/tree`. Localhost is not a website, but indicates that
    the content is being served from your *local* machine: your own computer. Jupyter''s
    Notebooks and dashboard are web apps, and Jupyter starts up a local Python server
    to serve these apps to your web browser, making it essentially platform independent
    and opening the door to easier sharing on the web.'
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard's interface is mostly self-explanatory — though we will come back
    to it briefly later. So what are we waiting for? Browse to the folder in which
    you would like to create your first notebook, click the "New" drop-down button
    in the top-right and select "Python 3" (or the version of your choice).
  prefs: []
  type: TYPE_NORMAL
- en: '![New notebook menu](../Images/6e34dfd7e9d9ce9d2f409afbc887bc62.png)'
  prefs: []
  type: TYPE_IMG
- en: Hey presto, here we are! Your first Jupyter Notebook will open in new tab —
    each notebook uses its own tab because you can open multiple notebooks simultaneously.
    If you switch back to the dashboard, you will see the new file `Untitled.ipynb` and
    you should see some green text that tells you your notebook is running.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is an ipynb File?**'
  prefs: []
  type: TYPE_NORMAL
- en: It will be useful to understand what this file really is. Each `.ipynb` file
    is a text file that describes the contents of your notebook in a format called [JSON](https://en.wikipedia.org/wiki/JSON).
    Each cell and its contents, including image attachments that have been converted
    into strings of text, is listed therein along with some [metadata](https://ipython.org/ipython-doc/3/notebook/nbformat.html#metadata).
    You can edit this yourself — if you know what you are doing! — by selecting "Edit
    > Edit Notebook Metadata" from the menu bar in the notebook.
  prefs: []
  type: TYPE_NORMAL
- en: You can also view the contents of your notebook files by selecting "Edit" from
    the controls on the dashboard, but the keyword here is "*can*"; there's no reason
    other than curiosity to do so unless you really know what you are doing.
  prefs: []
  type: TYPE_NORMAL
- en: The notebook interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you have an open notebook in front of you, its interface will hopefully
    not look entirely alien; after all, Jupyter is essentially just an advanced word
    processor. Why not take a look around? Check out the menus to get a feel for it,
    especially take a few moments to scroll down the list of commands in the command
    palette, which is the small button with the keyboard icon (or `Ctrl + Shift +
    P`).
  prefs: []
  type: TYPE_NORMAL
- en: '![New Jupyter Notebook](../Images/236237aea19d7e1c805afc33f3ccef49.png)'
  prefs: []
  type: TYPE_IMG
- en: There are two fairly prominent terms that you should notice, which are probably
    new to you: *cells* and *kernels* are key both to understanding Jupyter and to
    what makes it more than just a word processor. Fortunately, these concepts are
    not difficult to understand.
  prefs: []
  type: TYPE_NORMAL
- en: A kernel is a "computational engine" that executes the code contained in a notebook
    document.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A cell is a container for text to be displayed in the notebook or code to be
    executed by the notebook's kernel.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cells
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We''ll return to kernels a little later, but first let''s come to grips with
    cells. Cells form the body of a notebook. In the screenshot of a new notebook
    in the section above, that box with the green outline is an empty cell. There
    are two main cell types that we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: A **code cell** contains code to be executed in the kernel and displays its
    output below.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Markdown cell** contains text formatted using Markdown and displays its
    output in-place when it is run.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The first cell in a new notebook is always a code cell. Let''s test it out
    with a classic hello world example. Type `print(''Hello World!'')` into the cell
    and click the run button ![Notebook Run Button](../Images/ad9fffb0fbc5d5cf65e0ff9b048e8b52.png) in
    the toolbar above or press `Ctrl + Enter`. The result should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When you ran the cell, its output will have been displayed below and the label
    to its left will have changed from `In [ ]` to `In [1]`. The output of a code
    cell also forms part of the document, which is why you can see it in this article.
    You can always tell the difference between code and Markdown cells because code
    cells have that label on the left and Markdown cells do not. The "In" part of
    the label is simply short for "Input," while the label number indicates when the
    cell was executed on the kernel — in this case the cell was executed first. Run
    the cell again and the label will change to `In [2]` because now the cell was
    the second to be run on the kernel. It will become clearer why this is so useful
    later on when we take a closer look at kernels.
  prefs: []
  type: TYPE_NORMAL
- en: From the menu bar, click *Insert* and select *Insert Cell Below* to create a
    new code cell underneath your first and try out the following code to see what
    happens. Do you notice anything different?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This cell doesn't produce any output, but it does take three seconds to execute.
    Notice how Jupyter signifies that the cell is currently running by changing its
    label to `In [*]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, the output of a cell comes from any text data specifically printed
    during the cells execution, as well as the value of the last line in the cell,
    be it a lone variable, a function call, or something else. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You'll find yourself using this almost constantly in your own projects, and
    we'll see more of it later on.
  prefs: []
  type: TYPE_NORMAL
- en: Keyboard shortcuts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One final thing you may have observed when running your cells is that their
    border turned blue, whereas it was green while you were editing. There is always
    one "active" cell highlighted with a border whose colour denotes its current mode,
    where green means "edit mode" and blue is "command mode."
  prefs: []
  type: TYPE_NORMAL
- en: So far we have seen how to run a cell with `Ctrl + Enter`, but there are plenty
    more. Keyboard shortcuts are a very popular aspect of the Jupyter environment
    because they facilitate a speedy cell-based workflow. Many of these are actions
    you can carry out on the active cell when it's in command mode.
  prefs: []
  type: TYPE_NORMAL
- en: Below, you'll find a list of some of Jupyter's keyboard shortcuts. You're not
    expected to pick them up immediately, but the list should give you a good idea
    of what's possible.
  prefs: []
  type: TYPE_NORMAL
- en: Toggle between edit and command mode with `Esc` and `Enter`, respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once in command mode:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scroll up and down your cells with your `Up` and `Down` keys.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Press `A` or `B` to insert a new cell above or below the active cell.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`M` will transform the active cell to a Markdown cell.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Y` will set the active cell to a code cell.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`D + D` (`D` twice) will delete the active cell.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Z` will undo cell deletion.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hold `Shift` and press `Up` or `Down` to select multiple cells at once.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With multple cells selected, `Shift + M` will merge your selection.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ctrl + Shift + -`, in edit mode, will split the active cell at the cursor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also click and `Shift + Click` in the margin to the left of your cells
    to select them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go ahead and try these out in your own notebook. Once you've had a play, create
    a new Markdown cell and we'll learn how to format the text in our notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Markdown
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Markdown](https://www.markdownguide.org/) is a lightweight, easy to learn
    markup language for formatting plain text. Its syntax has a one-to-one correspondance
    with HTML tags, so some prior knowledge here would be helpful but is definitely
    not a prerequisite. Remember that this article was written in a Jupyter notebook,
    so all of the narrative text and images you have seen so far was achieved in Markdown.
    Let''s cover the basics with a quick example.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: bar()
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When attaching images, you have three options:'
  prefs: []
  type: TYPE_NORMAL
- en: Use a URL to an image on the web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a local URL to an image that you will be keeping alongside your notebook,
    such as in the same git repo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add an attachment via "Edit > Insert Image"; this will convert the image into
    a string and store it inside your notebook `.ipynb` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that this will make your `.ipynb` file much larger!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is plenty more detail to Markdown, especially around hyperlinking, and
    it's also possible to simply include plain HTML. Once you find yourself pushing
    the limits of the basics above, you can refer to the [official guide](https://daringfireball.net/projects/markdown/syntax) from
    the creator, John Gruber, on his website.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Setup Julia on Jupyter Notebook](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Jupyter Notebook Tips and Tricks for Data Scientists](https://www.kdnuggets.com/2023/06/10-jupyter-notebook-tips-tricks-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python in Finance: Real Time Data Streaming within Jupyter Notebook](https://www.kdnuggets.com/python-in-finance-real-time-data-streaming-within-jupyter-notebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free Templates for Data Science Projects on Jupyter Notebook](https://www.kdnuggets.com/5-free-templates-for-data-science-projects-on-jupyter-notebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
