["```py\nimport numpy as np\nimport pandas as pd\npd.options.display.float_format = \"{:.4f}\".formatfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import roc_curve, plot_roc_curveimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nsns.set(palette='rainbow', context='talk')\n```", "```py\ndef get_fp_tp(y, proba, threshold):\n    \"\"\"Return the number of false positives and true positives.\"\"\"\n    # Classify into classes\n    pred = pd.Series(np.where(proba>=threshold, 1, 0), \n                     dtype='category')\n    pred.cat.set_categories([0,1], inplace=True)\n    # Create confusion matrix\n    confusion_matrix = pred.groupby([y, pred]).size().unstack()\\\n                           .rename(columns={0: 'pred_0', \n                                            1: 'pred_1'}, \n                                   index={0: 'actual_0', \n                                          1: 'actual_1'})\n    false_positives = confusion_matrix.loc['actual_0', 'pred_1']\n    true_positives = confusion_matrix.loc['actual_1', 'pred_1']\n    return false_positives, true_positives\n```", "```py\n# Load sample data\nX = load_breast_cancer()['data'][:,:2] # first two columns only\ny = load_breast_cancer()['target']# Train a model\nlog = LogisticRegression()\nlog.fit(X, y)# Predict probability\nproba = log.predict_proba(X)[:,1]\n```", "```py\n# Find fpr & tpr for thresholds\nnegatives = np.sum(y==0)\npositives = np.sum(y==1)columns = ['threshold', 'false_positive_rate', 'true_positive_rate']\ninputs = pd.DataFrame(columns=columns, dtype=np.number)\nthresholds = np.linspace(0, 1, 1001)for i, threshold in enumerate(thresholds):\n    inputs.loc[i, 'threshold'] = threshold\n    false_positives, true_positives = get_fp_tp(y, proba, threshold)\n    inputs.loc[i, 'false_positive_rate'] = false_positives/negatives\n    inputs.loc[i, 'true_positive_rate'] = true_positives/positives\ninputs\n```", "```py\ndef plot_static_roc_curve(fpr, tpr):\n    plt.figure(figsize=[7,7])\n    plt.fill_between(fpr, tpr, alpha=.5)\n    # Add dashed line with a slope of 1\n    plt.plot([0,1], [0,1], linestyle=(0, (5, 5)), linewidth=2)\n    plt.xlabel(\"False Positive Rate\")\n    plt.ylabel(\"True Positive Rate\")\n    plt.title(\"ROC curve\");\n\nplot_static_roc_curve(inputs['false_positive_rate'], \n                      inputs['true_positive_rate'])\n```", "```py\nfpr, tpr, thresholds = roc_curve(y, proba)\nplot_static_roc_curve(fpr, tpr)\n```", "```py\nplot_roc_curve(log, X, y)\nplt.title(\"ROC curve\"); # Add a title for clarity\n```", "```py\ndef plot_interactive_roc_curve(df, fpr, tpr, thresholds):\n    fig = px.area(\n        data_frame=df, \n        x=fpr, \n        y=tpr,\n        hover_data=thresholds, \n        title='ROC Curve'\n    )\n    fig.update_layout(\n        autosize=False,\n        width=500,\n        height=500,\n        margin=dict(l=30, r=30, b=30, t=30, pad=4),\n        title_x=.5, # Centre title\n        hovermode = 'closest',\n        xaxis=dict(hoverformat='.4f'),\n        yaxis=dict(hoverformat='.4f')\n    )\n    hovertemplate = 'False Positive Rate=%{x}<br>True Positive Rate=%{y}<br>Threshold=%{customdata[0]:.4f}<extra></extra>'\n    fig.update_traces(hovertemplate=hovertemplate)\n\n    # Add dashed line with a slope of 1\n    fig.add_shape(type='line', line=dict(dash='dash'), x0=0, x1=1, y0=0, y1=1)\n    fig.show()plot_interactive_roc_curve(df=inputs, \n                           fpr='false_positive_rate', \n                           tpr='true_positive_rate', \n                           thresholds=['threshold'])\n```"]