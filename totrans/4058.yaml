- en: Getting Started with Python Data Structures in 5 Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/5-steps-getting-started-python-data-structures](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Getting Started with Python Data Structures in 5 Steps](../Images/7b50389edfcbefed4f60b8c9297d036c.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Python Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to learning how to program, regardless of the particular programming
    language you use for this task, you find that there are a few major topics of
    your newly-chosen discipline that into which most of what you are being exposed
    to could be categorized. A few of these, in general order of grokking, are: syntax
    (the vocabulary of the language); commands (putting the vocabulary together into
    useful ways); flow control (how we guide the order of command execution); algorithms
    (the steps we take to solve specific problems... *how did this become such a confounding
    word?*); and, finally, data structures (the virtual storage depots that we use
    for data manipulation during the execution of algorithms (which are, again...
    a series of steps).'
  prefs: []
  type: TYPE_NORMAL
- en: Essentially, if you want to implement the solution to a problem, by cobbling
    together a series of commands into the steps of an algorithm, at some point data
    will need to be processed, and data structures will become essential. Such data
    structures provide a way to organize and store data efficiently, and are critical
    for creating fast, modular code that can perform useful functions and scale well.
    Python, a particular programming language, has a series of built-in data structures
    of its own.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tutorial will focus on these four foundational Python data structures:'
  prefs: []
  type: TYPE_NORMAL
- en: Lists - Ordered, mutable, allows duplicate elements. Useful for storing sequences
    of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuples - Ordered, immutable, allows duplicate elements. Think of them as immutable
    lists.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionaries - Unordered, mutable, mapped by key-value pairs. Useful for storing
    data in a key-value format.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sets - Unordered, mutable, contains unique elements. Useful for membership testing
    and eliminating duplicates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beyond the fundamental data structures, Python also provides more advanced structures,
    such as heaps, queues, and linked lists, which can further enhance your coding
    prowess. These advanced structures, built upon the foundational ones, enable more
    complex data handling and are often used in specialized scenarios. But you aren't
    constrained here; you can use all of the existing structures as a base to implement
    your own structures as well. However, the understanding of lists, tuples, dictionaries,
    and sets remains paramount, as these are the building blocks for more advanced
    data structures.
  prefs: []
  type: TYPE_NORMAL
- en: This guide aims to provide a clear and concise understanding of these core structures.
    As you start your Python journey, the following sections will guide you through
    the essential concepts and practical applications. From creating and manipulating
    lists to leveraging the unique capabilities of sets, this tutorial will equip
    you with the skills needed to excel in your coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Using Lists in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a List in Python?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list in Python is an ordered, mutable data type that can store various objects,
    allowing for duplicate elements. Lists are defined by the use of square brackets
    `[ ]`, with elements being separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Lists are incredibly useful for organizing and storing data sequences.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lists can contain different data types, like strings, integers, booleans, etc.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating a List
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Elements in a list can be accessed, added, changed, and removed. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Useful List Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some handy built-in methods for lists include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sort()` - Sorts list in-place'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`append()` - Adds element to end of list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`insert()` - Inserts element at index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pop()` - Removes element at index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove()` - Removes first occurrence of value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reverse()` - Reverses list in-place'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on Example with Lists
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Understanding Tuples in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What Are Tuples?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tuples are another type of sequence data type in Python, similar to lists. However,
    unlike lists, tuples are immutable, meaning their elements cannot be altered once
    created. They are defined by enclosing elements in parentheses `( )`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When to Use Tuples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tuples are generally used for collections of items that should not be modified.
    Tuples are faster than lists, which makes them great for read-only operations.
    Some common use-cases include:'
  prefs: []
  type: TYPE_NORMAL
- en: Storing constants or configuration data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function return values with multiple components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dictionary keys, since they are hashable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing Tuple Elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Accessing elements in a tuple is done in a similar manner as accessing list
    elements. Indexing and slicing work the same way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Operations on Tuples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Because tuples are immutable, many list operations like `append()` or `remove()`
    are not applicable. However, you can still perform some operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Concatenation:** Combine tuples using the `+` operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Repetition:** Repeat a tuple using the `*` operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Membership:** Check if an element exists in a tuple with the `in` keyword.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tuple Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tuples have fewer built-in methods compared to lists, given their immutable
    nature. Some useful methods include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`count()`:** Count the occurrences of a particular element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**`index()`:** Find the index of the first occurrence of a value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tuple Packing and Unpacking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tuple packing and unpacking are convenient features in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Packing:** Assigning multiple values to a single tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Unpacking:** Assigning tuple elements to multiple variables.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Immutable but Not Strictly
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While tuples themselves are immutable, they can contain mutable elements like
    lists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Note that while you can't change the tuple itself, you can modify the mutable
    elements within it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Mastering Dictionaries in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a Dictionary in Python?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A dictionary in Python is an unordered, mutable data type that stores mappings
    of unique keys to values. Dictionaries are written with curly braces `{ }` and
    consist of key-value pairs separated by commas.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Dictionaries are useful for storing data in a structured manner and accessing
    values by keys.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dictionary keys must be immutable objects like strings, numbers, or tuples.
    Dictionary values can be any object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating a Dictionary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elements can be accessed, added, changed, and removed via keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Useful Dictionary Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some useful built-in methods include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`keys()` - Returns list of keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values()` - Returns list of values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`items()` - Returns (key, value) tuples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get()` - Returns value for key, avoids KeyError'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pop()` - Removes key and returns value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update()` - Adds multiple key-values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on Example with Dictionaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Exploring Sets in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a Set in Python?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A set in Python is an unordered, mutable collection of unique, immutable objects.
    Sets are written with curly braces `{ }` but unlike dictionaries, do not have
    key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Sets are useful for membership testing, eliminating duplicates, and mathematical
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sets can be created from lists by passing it to the `set()` constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Sets can contain mixed data types like strings, booleans, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Manipulating a Set
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Elements can be added and removed from sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Useful Set Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some useful set operations include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`union()` - Returns union of two sets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`intersection()` - Returns intersection of sets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`difference()` - Returns difference between sets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`symmetric_difference()` - Returns symmetric difference'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on Example with Sets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 5: Comparing Lists, Dictionaries, and Sets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Comparison of Characteristics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following is a concise comparison of the four Python data structures we
    referred to in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '| Structure | Ordered | Mutable | Duplicate Elements | Use Cases |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| List | Yes | Yes | Yes | Storing sequences |'
  prefs: []
  type: TYPE_TB
- en: '| Tuple | Yes | No | Yes | Storing immutable sequences |'
  prefs: []
  type: TYPE_TB
- en: '| Dictionary | No | Yes | Keys: No Values: Yes | Storing key-value pairs |'
  prefs: []
  type: TYPE_TB
- en: '| Set | No | Yes | No | Eliminating duplicates, membership testing |'
  prefs: []
  type: TYPE_TB
- en: When to Use Each Data Structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Treat this as a soft guideline for which structure to turn to first in a particular
    situation.
  prefs: []
  type: TYPE_NORMAL
- en: Use lists for ordered, sequence-based data. Useful for stacks/queues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use tuples for ordered, immutable sequences. Useful when you need a fixed collection
    of elements that should not be changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use dictionaries for key-value data. Useful for storing related properties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use sets for storing unique elements and mathematical operations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hands-on Example Using All Four Data Structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at how these structures can all work together in an example
    that is a little more complex than a one liner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This example utilizes a list for an ordered sequence, a tuple for storing additional
    immutable information, a set to remove duplicates, and a dictionary to store key-value
    pairs.
  prefs: []
  type: TYPE_NORMAL
- en: Moving Forward
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this comprehensive tutorial, we've taken a deep look at the foundational
    data structures in Python, including lists, tuples, dictionaries, and sets. These
    structures form the building blocks of Python programming, providing a framework
    for data storage, processing, and manipulation. Understanding these structures
    is essential for writing efficient and scalable code. From manipulating sequences
    with lists, to organizing data with key-value pairs in dictionaries, and ensuring
    uniqueness with sets, these essential tools offer immense flexibility in data
    handling.
  prefs: []
  type: TYPE_NORMAL
- en: As we've seen through code examples, these data structures can be combined in
    various ways to solve complex problems. By leveraging these data structures, you
    can open the doors to a wide range of possibilities in data analysis, machine
    learning, and beyond. Don't hesitate to explore the official [Python data structures
    documentation](https://docs.python.org/3/tutorial/datastructures.html) for more
    insights.
  prefs: []
  type: TYPE_NORMAL
- en: Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: '[**Matthew Mayo**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    holds a Master''s degree in computer science and a graduate diploma in data mining.
    As Editor-in-Chief of KDnuggets, Matthew aims to make complex data science concepts
    accessible. His professional interests include natural language processing, machine
    learning algorithms, and exploring emerging AI. He is driven by a mission to democratize
    knowledge in the data science community. Matthew has been coding since he was
    6 years old.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Getting Started with SQL in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-with-sql)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Scikit-learn in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-scikit-learn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Google Cloud Platform in 5 Steps](https://www.kdnuggets.com/5-steps-google-cloud-platform)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with PyTorch in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Python for Data Science](https://www.kdnuggets.com/getting-started-with-python-for-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Python Generators](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
