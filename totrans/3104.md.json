["```py\n\nfrom livelossplot import PlotLossesKeras\n\nmodel.fit(X_train, Y_train,\n          epochs=10,\n          validation_data=(X_test, Y_test),\n          callbacks=[PlotLossesKeras()],\n          verbose=0)\n```", "```py\n\nfrom parfit import bestFit # Necessary if you wish to use bestFit\n\n# Necessary if you wish to run each step sequentially\nfrom parfit.fit import *\nfrom parfit.score import *\nfrom parfit.plot import *\nfrom parfit.crossval import *\n\ngrid = {\n    'min_samples_leaf': [1, 5, 10, 15, 20, 25],\n    'max_features': ['sqrt', 'log2', 0.5, 0.6, 0.7],\n    'n_estimators': [60],\n    'n_jobs': [-1],\n    'random_state': [42]\n}\nparamGrid = ParameterGrid(grid)\n\nbest_model, best_score, all_models, all_scores = bestFit(RandomForestClassifier(), paramGrid,\n                                                    X_train, y_train, X_val, y_val, # nfolds=5 [optional, instead of validation set]\n                                                    metric=roc_auc_score, greater_is_better=True, \n                                                    scoreLabel='AUC')\n\nprint(best_model, best_score)\n\n```", "```py\n\nfrom textgenrnn import textgenrnn\n\ntextgen = textgenrnn()\ntextgen.train_from_file('hacker-news-2000.txt', num_epochs=1)\ntextgen.generate()\n\n```", "```py\n\nfrom pymagnitude import *\nvectors = Magnitude(\"/path/to/vectors.magnitude\")\n```"]