- en: Basic Image Data Analysis Using Python – Part 3
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行基础图像数据分析 – 第3部分
- en: 原文：[https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html](https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html](https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '![Python image analysis fig 1](../Images/83d60005fe08b263cf8c69bbe8998971.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Python 图像分析图 1](../Images/83d60005fe08b263cf8c69bbe8998971.png)'
- en: Previously we’ve seen some of the very basic image analysis operations in Python.
    In this last part of basic image analysis, we’ll go through some of the following
    contents.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们已经看过一些在 Python 中非常基础的图像分析操作。在这最后一部分基础图像分析中，我们将讨论以下一些内容。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Following contents is the reflection of my completed academic image processing
    course in the previous term. So, I am not planning on putting anything into production
    sphere. Instead, the aim of this article is to try and realize the fundamentals
    of a few basic image processing techniques. For this reason, I am going to stick
    to using [**SciKit-Image**](https://scikit-image.org/) - [**numpy**](http://www.numpy.org/) mainly
    to perform most of the manipulations, although I will use other libraries now
    and then rather than using most wanted tools like [**OpenCV**](https://opencv.org/) :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容是我在上学期完成的学术图像处理课程的反思。因此，我不打算将任何内容投入生产领域。相反，本文的目的是尝试实现一些基础图像处理技术的基本原理。为此，我将主要使用
    [**SciKit-Image**](https://scikit-image.org/) 和 [**numpy**](http://www.numpy.org/)
    来执行大部分操作，尽管我会偶尔使用其他库，而不是像 [**OpenCV**](https://opencv.org/) 这样的最受欢迎的工具。
- en: I wanted to complete this series into two section but due to fascinating contents
    and its various outcome, I have to split it into too many part. However, one may
    find whole series into two section only on my homepage, included below.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我原本想将这个系列分成两部分，但由于内容的吸引力和多样性，我不得不将其拆分成太多部分。然而，您可以在我的主页上找到整个系列的两部分，链接如下。
- en: '**Find the whole series:** [**Part 1**](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)**,**
    [**Part 2**](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)
    **All source code:** [**GitHub-Image-Processing-Python**](https://github.com/iphton/Image-Processing-in-Python)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**查找完整系列：** [**第1部分**](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)**,**
    [**第2部分**](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)
    **所有源代码：** [**GitHub-图像处理-Python**](https://github.com/iphton/Image-Processing-in-Python)'
- en: But if you’re not interested to redirect, stick with me here . In the previous
    article, we’ve gone through some of the following basic operations. To keep pace
    with today’s content, continuous reading is highly appreciated.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想跳转，请继续在这里阅读。在上一篇文章中，我们讨论了一些基本操作。为了跟上今天的内容，持续阅读是非常重要的。
- en: '[Importing images and observe it’s properties](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#1-bullet)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[导入图像并观察其属性](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#1-bullet)'
- en: '[Splitting the layers](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#2-bullet)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分离图层](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#2-bullet)'
- en: '[Greyscale](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#3-bullet)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[灰度图](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#3-bullet)'
- en: '[Using Logical Operator on pixel values](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#4-bullet)'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[对像素值使用逻辑运算符](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#4-bullet)'
- en: '[Masking using Logical Operator](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#5-bullet)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用逻辑运算符的遮罩](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-1/#5-bullet)'
- en: I’m so excited, let’s begin!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我很兴奋，让我们开始吧！
- en: Intensity Transformation
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 强度变换
- en: Let’s begin with importing an image.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始导入图像。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Python image analysis fig 2](../Images/f53b2232b2f9c48c4f39496b7094396b.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![Python 图像分析图 2](../Images/f53b2232b2f9c48c4f39496b7094396b.png)'
- en: Image Negative
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像负片
- en: 'The intensity transformation function mathematically defined as:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 强度变换函数在数学上定义为：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: where r is the pixels of the input image and s is the pixels of the output image.
    T is a transformation function that maps each value of r to each value of s.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其中r是输入图像的像素，s是输出图像的像素。T是一个变换函数，将每个r值映射到每个s值。
- en: Negative transformation, which is the invert of identity transformation. In
    negative transformation, each value of the input image is subtracted from the
    L−1 and mapped onto the output image.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 负片变换，这是身份变换的反向。在负片变换中，输入图像的每个值从L−1中减去，并映射到输出图像上。
- en: 'In this case, the following transition has been done:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，进行了以下转换：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, each value is subtracted by **255**. So what happens is that the lighter
    pixels become dark and the darker picture becomes light. And it results in image
    negative.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，每个值都减去**255**。结果是，较亮的像素变暗，较暗的图像变亮。这会导致图像负片。
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Python image analysis fig 3](../Images/5a34fa6e0801651033e3ff1d87292f9b.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![Python 图像分析图 3](../Images/5a34fa6e0801651033e3ff1d87292f9b.png)'
- en: Log transformation
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对数变换
- en: 'The log transformations can be defined by this formula:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对数变换可以通过以下公式定义：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Where s and r are the pixel values of the output and the input image and c is
    a constant. The value 1 is added to each of the pixel value of the input image
    because if there is a pixel intensity of 0 in the image, then **log(0)** is equal
    to infinity. So, 1 is added, to make the minimum value at least 1.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其中s和r是输出图像和输入图像的像素值，c是常数。对输入图像的每个像素值加上1，因为如果图像中有像素强度为0，则**log(0)**等于无穷大。因此，加1使得最小值至少为1。
- en: During log transformation, the dark pixels in an image are expanded as compared
    to the higher pixel values. The higher pixel values are kind of compressed in
    log transformation. This result in the following image enhancement.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在对数变换过程中，图像中的暗像素相对于较高像素值被扩展。较高的像素值在对数变换中被压缩。这会导致以下图像增强效果。
- en: The value of c in the log transform adjust the kind of enhancement we are looking
    for.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对数变换中的c值调整我们所寻求的增强类型。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Python image analysis fig 4](../Images/dd918a573ffe99b82543baa0d954bd8d.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Python 图像分析图 4](../Images/dd918a573ffe99b82543baa0d954bd8d.png)'
- en: Gamma Correction
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伽玛校正
- en: 'Gamma correction, or often simply gamma, is a nonlinear operation used to encode
    and decode luminance or tristimulus values in video or still image systems. Gamma
    correction is also known as the **Power Law Transform**. First, our image pixel
    intensities must be scaled from the range **0, 255** to **0, 1.0**. From there,
    we obtain our output gamma corrected image by applying the following equation:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 伽玛校正，通常简称为伽玛，是一种非线性操作，用于在视频或静态图像系统中编码和解码亮度或三刺激值。伽玛校正也称为**幂律变换**。首先，我们的图像像素强度必须从范围**0,
    255**缩放到**0, 1.0**。然后，通过应用以下公式，我们获得输出的伽玛校正图像：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Where **Vi** is our input image and **G** is our gamma value. The output image,
    **Vo** is then scaled back to the range **0-255**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 其中**Vi**是我们的输入图像，**G**是我们的伽玛值。输出图像**Vo**随后被缩放回范围**0-255**。
- en: A gamma value, **G < 1** is sometimes called an **encoding gamma**, and the
    process of encoding with this compressive power-law nonlinearity is called **gamma
    compression**; Gamma values < 1 will shift the image towards the darker end of
    the spectrum.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 伽玛值，**G < 1**有时称为**编码伽玛**，使用这种压缩幂律非线性进行编码的过程称为**伽玛压缩**；伽玛值< 1会将图像向光谱的较暗端移动。
- en: 'Conversely, a gamma value **G > 1** is called a **decoding gamma** and the
    application of the expansive power-law nonlinearity is called **gamma expansion**.
    Gamma values > 1 will make the image appear lighter. A gamma value of **G = 1**
    will have no effect on the input image:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，伽玛值**G > 1**称为**解码伽玛**，应用扩展的幂律非线性称为**伽玛扩展**。伽玛值> 1会使图像看起来更亮。伽玛值**G = 1**不会对输入图像产生影响：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Python image analysis fig 5](../Images/866cd402d5d49c45b3d747564db2fca5.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![Python 图像分析图 5](../Images/866cd402d5d49c45b3d747564db2fca5.png)'
- en: '**The Reason for Gamma Correction**'
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**伽玛校正的原因**'
- en: The reason we apply gamma correction is that our eyes perceive color and luminance
    differently than the sensors in a digital camera. When a sensor on a digital camera
    picks up twice the amount of photons, the signal is doubled. However, our eyes
    do not work like this. Instead, our eyes perceive double the amount of light as
    only a fraction brighter. Thus, while a digital camera has a linear relationship
    between brightness our eyes have a non-linear relationship. In order to account
    for this relationship, we apply gamma correction.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'There is some other linear transformation function. Listed below:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Contrast Stretching
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intensity-Level Slicing
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bit-Plane Slicing
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convolution
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ve discussed briefly in our previous [article](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html) is
    that, when a computer sees an image, it sees an array of pixel values. Now, depending
    on the resolution and size of the image, it will see a 32 x 32 x 3 array of numbers
    where the 3 refers to RGB values or channels. Just to drive home the point, let’s
    say we have a color image in PNG form and its size is 480 x 480\. The representative
    array will be 480 x 480 x 3\. Each of these numbers is given a value from 0 to
    255 which describes the pixel intensity at that point.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Like we mentioned before, the input is a 32 x 32 x 3 array of pixel values.
    Now, the best way to explain a convolution is to imagine a flashlight that is
    shining over the top left of the image. Let’s say that the flashlight shines cover
    a 3 x 3 area. And now, let’s imagine this flashlight sliding across all the areas
    of the input image. In machine learning terms, this flashlight is called a **filter** or [**kernel**](https://en.wikipedia.org/wiki/Kernel_(image_processing)#Details) or
    sometimes referred to as **weights** or **mask** and the region that it is shining
    over is called the [**receptive field**](https://en.wikipedia.org/wiki/Receptive_field).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Now, this filter is also an array of numbers where the numbers are called weights
    or parameters. A very important note is that the depth of this filter has to be
    the same as the depth of the input, so the dimensions of this filter are 3 x 3
    x 3.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: An image **kernel** or **filter** is a small matrix used to apply effects like
    the ones we might find in Photoshop or Gimp, such as blurring, sharpening, outlining
    or embossing. They’re also used in machine learning for **feature extraction**,
    a technique for determining the most important portions of an image. For more,
    have a look at Gimp’s excellent documentation on using [Image kernel’s](https://docs.gimp.org/en/plug-in-convmatrix.html).
    We can find a list of most common kernels [here](https://en.wikipedia.org/wiki/Kernel_(image_processing)#Details).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s take the filter to the top left corner. As the filter is sliding,
    or **convolving**, around the input image, it is multiplying the values in the
    filter with the original pixel values of the image (aka computing element-wise
    multiplications). These multiplications are all summed up. So now we have a single
    number. Remember, this number is just representative of when the filter is at
    the top left of the image. Now, we repeat this process for every location on the
    input volume. Next step would be moving the filter to the right by a **stride** or **step** 1
    unit, then right again by **stride** 1, and so on. Every unique location on the
    input volume produces a number. We can also choose stride or the step size 2 or
    more, but we have to care whether it will fit or not on the input image.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '![Python image analysis fig 6](../Images/888bb82ac03be1227141c2fba72b3c81.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
- en: 'After sliding the filter over all the locations, we will find out that, what
    we’re left with is a 30 x 30 x 1 array of numbers, which we call an **activation
    map** or **feature map**. The reason we get a 30 x 30 array is that there are
    900 different locations that a 3 x 3 filter can fit on a 32 x 32 input image.
    These 900 numbers are mapped to a 30 x 30 array. We can calculate the convolved
    image by following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: where N and F represent Input image size and kernel size respectively and S represent
    stride or step size. So, in this case, the output would be
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s say we’ve got a following 3x3 filter, convolving on a 5x5 matrix and according
    to the equation we should get a 3x3 matrix, technically called **activation map** or **feature
    map**.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a look somewhat visually,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '![Python image analysis fig 7](../Images/3bc29603afbe93b6c007a8621ee94991.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: Moreover, we practically use more filters instead of one. Then our output volume
    would be 28x28xn (where n is the number of **activation map**).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: By using more filters, we are able to preserve the spatial dimensions better.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: However, For the pixels on the border of the image matrix, some elements of
    the kernel might stand out of the image matrix and therefore does not have any
    corresponding element from the image matrix. In this case, we can eliminate the
    convolution operation for these positions which end up an output matrix smaller
    than the input or we can apply [**padding**](https://www.quora.com/What-are-the-roles-of-stride-and-padding-in-a-convolutional-neural-network) to
    the input matrix.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Now, I do realize that some of these topics are quite complex and could be made
    in whole posts by themselves. In an effort to remain concise yet retain comprehensiveness,
    I will provide links to resources where the topic is explained in more detail.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s first apply some custom uniform window to the image. This has the effect
    of burning the image, by averaging each pixel with those nearby:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Python image analysis fig 8](../Images/694f2bde257965d4b73bb74db3b180aa.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Please, check this more [here.](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#4-bullet)
    I’ve discussed more in depth and played with various types of kernel and showed
    the differences.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看更多内容[这里](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#4-bullet)。我在其中深入讨论了各种类型的内核，并展示了它们的区别。
- en: '**Bio:** [Mohammed Innat](https://twitter.com/innat_2k14) is currently a fourth
    year undergraduate student majoring in electronics and communication. He is passionate
    about applying his knowledge of machine learning and data science to areas in
    healthcare and crime forecast where better solutions can be engineered in the
    medical sector and security department.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：** [穆罕默德·因纳特](https://twitter.com/innat_2k14) 目前是一名电子与通信专业的四年级本科生。他热衷于将他的机器学习和数据科学知识应用于医疗保健和犯罪预测领域，以便在医疗和安全部门提供更好的解决方案。'
- en: '**Related:**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Basic Image Data Analysis Using Numpy and OpenCV – Part 1]("https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基本图像数据分析使用 Numpy 和 OpenCV – 第 1 部分](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)'
- en: '[Basic Image Processing in Python, Part 2](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 中的基本图像处理，第 2 部分](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)'
- en: '[Only Numpy: Implementing GANs and Adam Optimizer using Numpy](https://www.kdnuggets.com/2018/08/only-numpy-implementing-gans-adam-optimizer.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[仅用 Numpy：使用 Numpy 实现 GAN 和 Adam 优化器](https://www.kdnuggets.com/2018/08/only-numpy-implementing-gans-adam-optimizer.html)'
- en: More On This Topic
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，6 月 29 日：数据科学的 20 个基本 Linux 命令](https://www.kdnuggets.com/2022/n26.html)'
- en: '[It''s alive! Build your first robots with Python and some cheap,…](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[它活了！用 Python 和一些便宜的组件构建你的第一个机器人](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
- en: '[A Guide to Train an Image Classification Model Using Tensorflow](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Tensorflow 训练图像分类模型指南](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
- en: '[How I Did Automatic Image Labeling Using Grounding DINO](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我如何使用 Grounding DINO 进行自动图像标记](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
- en: '[How to Implement Agentic RAG Using LangChain: Part 1](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 LangChain 实现 Agentic RAG：第 1 部分](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
- en: '[The 8 Basic Statistics Concepts for Data Science](https://www.kdnuggets.com/2020/06/8-basic-statistics-concepts.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的 8 个基本统计概念](https://www.kdnuggets.com/2020/06/8-basic-statistics-concepts.html)'
