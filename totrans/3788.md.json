["```py\n$ go version\ngo version go1.22.0 windows/amd64\n```", "```py\n$ mkdir go-example\n$ cd go-example\n```", "```py\n$ go mod init example/kdnuggets\ngo: creating new go.mod: module example/kdnuggets\n```", "```py\ncode .\n```", "```py\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n    // Print to the console\n    fmt.Println(\"Welcome to KDnuggets\")\n}\n```", "```py\n$ go run .\nWelcome to KDnuggets\n```", "```py\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"github.com/go-gota/gota/dataframe\"\n    \"github.com/go-gota/gota/series\"\n)\n\nfunc main() {\n\n    f, err := os.Open(\"adult.csv\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer f.Close()\n\n    df := dataframe.ReadCSV(f)\n\n    fmt.Println(df.Subset([]int{0, 1}))\n\n} \n```", "```py\n$ go mod tidy\n\ngo: finding module for package github.com/go-gota/gota/series\ngo: finding module for package github.com/go-gota/gota/dataframe\ngo: downloading github.com/go-gota/gota v0.12.0\ngo: found github.com/go-gota/gota/dataframe in github.com/go-gota/gota v0.12.0\ngo: found github.com/go-gota/gota/series in github.com/go-gota/gota v0.12.0\ngo: downloading golang.org/x/net v0.0.0-20210423184538-5f58ad60dda6\ngo: downloading gonum.org/v1/gonum v0.9.1\ngo: downloading golang.org/x/exp v0.0.0-20191002040644-a1355ae1e2c3\ngo: downloading gonum.org/v1/netlib v0.0.0-20190313105609-8cb42192e0e0\n```", "```py\n$ go run simple-analysis.go\n\n[2x15] DataFrame\n\n    age   workclass fnlwgt education education.num marital.status ...\n 0: 90    ?         77053  HS-grad   9             Widowed        ...\n 1: 82    Private   132870 HS-grad   9             Widowed        ...\n    <int><string><int><string><int><string>...\n\nNot Showing: occupation <string>, relationship <string>, race <string>, sex <string>,\ncapital.gain <int>, capital.loss <int>, hours.per.week <int>, native.country <string>,\nincome</string></int></int></int></string></string></string></string></string></int></string></int></string></int> \n```", "```py\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/go-gota/gota/dataframe\"\n\t\"github.com/go-gota/gota/series\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Loading the CSV file\n\tf, err := os.Open(\"adult.csv\")\n\tif err != nil {\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tdefer f.Close()\n\n\tdf := dataframe.ReadCSV(f)\n\n\t// Filter the data: individuals with education level \"HS-grad\"\n\thsGrad := df.Filter(dataframe.F{Colname: \"education\", Comparator: series.Eq, Comparando: \"HS-grad\"})\n\tfmt.Println(\"\\nFiltered DataFrame (HS-grad):\")\n\tfmt.Println(hsGrad)\n\n\t// calculating the average age of individuals in the dataset\n\tavgAge := df.Col(\"age\").Mean()\n\tfmt.Printf(\"\\nAverage age: %.2f\\n\", avgAge)\n\n\t// Describing the data\n\tfmt.Println(\"\\nGenerate descriptive statistics:\")\n\tdescription := df.Describe()\n\tfmt.Println(description)\n\n} \n```", "```py\nFiltered DataFrame (HS-grad):\n[10501x15] DataFrame\n\n    age   workclass        fnlwgt education education.num marital.status     ...\n 0: 90    ?                77053  HS-grad   9             Widowed            ...\n 1: 82    Private          132870 HS-grad   9             Widowed            ...\n 2: 34    Private          216864 HS-grad   9             Divorced           ...\n 3: 68    Federal-gov      422013 HS-grad   9             Divorced           ...\n 4: 61    Private          29059  HS-grad   9             Divorced           ...\n 5: 61    ?                135285 HS-grad   9             Married-civ-spouse ...\n 6: 60    Self-emp-not-inc 205246 HS-grad   9             Never-married      ...\n 7: 53    Private          149650 HS-grad   9             Never-married      ...\n 8: 71    ?                100820 HS-grad   9             Married-civ-spouse ...\n 9: 71    Private          110380 HS-grad   9             Married-civ-spouse ...\n    ...   ...              ...    ...       ...           ...                ...\n    <int><string><int><string><int><string>...\n\nNot Showing: occupation <string>, relationship <string>, race <string>, sex <string>,\ncapital.gain <int>, capital.loss <int>, hours.per.week <int>, native.country <string>,\nincome <string>Average age: 38.58\n\nGenerate descriptive statistics:\n[8x16] DataFrame\n\n    column   age       workclass   fnlwgt         education    education.num ...\n 0: mean     38.581647 -           189778.366512  -            10.080679     ...\n 1: median   37.000000 -           178356.000000  -            10.000000     ...\n 2: stddev   13.640433 -           105549.977697  -            2.572720      ...\n 3: min      17.000000 ?           12285.000000   10th         1.000000      ...\n 4: 25%      28.000000 -           117827.000000  -            9.000000      ...\n 5: 50%      37.000000 -           178356.000000  -            10.000000     ...\n 6: 75%      48.000000 -           237051.000000  -            12.000000     ...\n 7: max      90.000000 Without-pay 1484705.000000 Some-college 16.000000     ...\n    <string><float><string><float><string><float>...\n\nNot Showing: marital.status <string>, occupation <string>, relationship <string>,\nrace <string>, sex <string>, capital.gain <float>, capital.loss <float>,\nhours.per.week <float>, native.country <string>, income</string></float></float></float></string></string></string></string></string></float></string></float></string></float></string></string></string></int></int></int></string></string></string></string></string></int></string></int></string></int> \n```", "```py\npackage main\n\nimport (\n    \"fmt\"\n    \"image/color\"\n    \"log\"\n    \"os\"\n    \"gonum.org/v1/plot\"\n    \"gonum.org/v1/plot/plotter\"\n    \"gonum.org/v1/plot/vg\"\n    \"github.com/go-gota/gota/dataframe\"\n)\n\nfunc main() {\n    // Sample data: replace this CSV string with the path to your actual data file or another data source.\n    f, err := os.Open(\"adult.csv\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer f.Close()\n\n    // Read the data into a DataFrame.\n    df := dataframe.ReadCSV(f)\n\n    // Extract the 'age' column and convert it to a slice of float64s for plotting.\n    ages := df.Col(\"age\").Float()\n\n    // Create a new plot.\n    p:= plot.New()\n\n    p.Title.Text = \"Age Distribution\"\n    p.X.Label.Text = \"Age\"\n    p.Y.Label.Text = \"Frequency\"\n\n    // Create a histogram of the 'age' column.\n    h, err := plotter.NewHist(plotter.Values(ages), 16) // 16 bins.\n    if err != nil {\n        log.Fatal(err)\n    }\n    h.FillColor = color.RGBA{R: 255, A: 255}\n\n    p.Add(h)\n\n    // Save the plot to a PNG file.\n    if err := p.Save(4*vg.Inch, 4*vg.Inch, \"age_distribution.png\"); err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(\"Histogram saved as age_distribution.png\")\n}\n```", "```py\n$ go mod tidy \n```", "```py\n$ go run simple-viz.go\nHistogram saved as age_distribution.png\n```", "```py\npackage main\n\nimport (\n    \"fmt\"\n\n    \"github.com/sjwhitworth/golearn/base\"\n    \"github.com/sjwhitworth/golearn/evaluation\"\n    \"github.com/sjwhitworth/golearn/knn\"\n)\n\nfunc main() {\n    // Load in a dataset, with headers. Header attributes will be stored.\n    rawData, err := base.ParseCSVToInstances(\"iris.csv\", true)\n    if err != nil {\n        panic(err)\n    }\n\n    //Initialises a new KNN classifier\n    cls := knn.NewKnnClassifier(\"euclidean\", \"linear\", 2)\n\n    //Do a training-test split\n    trainData, testData := base.InstancesTrainTestSplit(rawData, 0.50)\n    cls.Fit(trainData)\n\n    //Calculates the Euclidean distance and returns the most popular label\n    predictions, err := cls.Predict(testData)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(predictions)\n\n    // Prints precision/recall metrics\n    confusionMat, err := evaluation.GetConfusionMatrix(testData, predictions)\n    if err != nil {\n        panic(fmt.Sprintf(\"Unable to get confusion matrix: %s\", err.Error()))\n    }\n    fmt.Println(evaluation.GetSummary(confusionMat))\n}\n```", "```py\ngcc -v\n```", "```py\n$ go mod tidy \n```", "```py\n$ go run simple-ml.go \n\nInstances with 68 row(s) 1 attribute(s)\nAttributes:\n*       CategoricalAttribute(\"Species\", [Iris-setosa Iris-versicolor Iris-virginica])\n\nData:\n        Iris-setosa\n        Iris-setosa\n        Iris-versicolor\n        Iris-virginica\n        Iris-virginica\n        Iris-setosa\n        Iris-virginica\n        Iris-setosa\n        Iris-setosa\n        Iris-setosa\n        Iris-virginica\n        Iris-virginica\n        Iris-setosa\n        Iris-setosa\n        Iris-versicolor\n        Iris-versicolor\n        Iris-setosa\n        Iris-versicolor\n        Iris-virginica\n        Iris-setosa\n        Iris-setosa\n        Iris-virginica\n        Iris-virginica\n        Iris-virginica\n        Iris-virginica\n        Iris-versicolor\n        Iris-virginica\n        Iris-virginica\n        Iris-virginica\n        Iris-versicolor\n        ...\n38 row(s) undisplayed\nReference Class True Positives  False Positives True Negatives  Precision       Recall  F1 Score\n--------------- --------------  --------------- --------------  ---------       ------  --------\nIris-setosa     24              0               44              1.0000          1.0000  1.0000\nIris-versicolor 22              0               43              1.0000          0.8800  0.9362\nIris-virginica  19              3               46              0.8636          1.0000  0.9268\nOverall accuracy: 0.9559\n```"]