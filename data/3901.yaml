- en: Coding habits for data scientists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家的编码习惯
- en: 原文：[https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [David Tan](https://www.thoughtworks.com/profiles/david-tan), ThoughtWorks**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[David Tan](https://www.thoughtworks.com/profiles/david-tan)，ThoughtWorks**。'
- en: '*[Originally published](https://www.thoughtworks.com/insights/blog/coding-habits-data-scientists)
    in ThoughtWorks Insights. Reposted with permission.*'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*[最初发布于](https://www.thoughtworks.com/insights/blog/coding-habits-data-scientists)
    ThoughtWorks Insights。经许可转载。*'
- en: As a ML practitioner, you would know that code can get out of hand, quickly.
    What starts as an awesome ML model easily becomes a big blob of code that's hard
    to understand. As a consequence, modifying code becomes painful and error-prone,
    and it becomes increasingly difficult for ML practitioners to evolve their ML
    solutions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个ML从业者，你会知道代码很快就会失控。一个出色的ML模型很容易变成一个难以理解的大块代码。因此，修改代码变得痛苦且容易出错，同时ML从业者在演进其ML解决方案时变得越来越困难。
- en: 'This article shares some techniques for identifying bad habits that add to
    complexity in code as well as habits that can help us partition complexity. It''s
    also now a **[video series](https://www.youtube.com/watch?v=Edn6XxWmtEs&list=PLO9pkowc_99ZhP2yuPU8WCfFNYEx2IkwR&index=2)**
    that cover topics such as:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本文分享了一些识别增加代码复杂性的坏习惯的技巧，以及有助于我们分解复杂性的习惯。它现在也是一个**[视频系列](https://www.youtube.com/watch?v=Edn6XxWmtEs&list=PLO9pkowc_99ZhP2yuPU8WCfFNYEx2IkwR&index=2)**，涵盖了以下主题：
- en: How to refactor a Jupyter notebook
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何重构Jupyter notebook
- en: Automated testing for your ML codebase
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对你的ML代码库的自动化测试
- en: How to improve your productivity using an IDE
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用IDE提高生产力
- en: Get started with Docker in 17 minutes
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在17分钟内入门Docker
- en: If you’ve tried your hand at machine learning or data science, you know that
    code can get [messy](https://github.com/davified/clean-code-ml/blob/master/notebooks/titanic-original.ipynb)
    quickly.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试过机器学习或数据科学，你会知道代码可以迅速变得[混乱](https://github.com/davified/clean-code-ml/blob/master/notebooks/titanic-original.ipynb)。
- en: Typically, code to train ML models is written in Jupyter notebooks, and it’s
    full of (i) side effects (e.g., print statements, pretty-printed dataframes, data
    visualisations) and (ii) glue code without any abstraction, modularisation, and
    automated tests. While this may be fine for notebooks targeted at teaching people
    about the machine learning process, in real projects, it’s a recipe for an unmaintainable
    mess. The lack of good coding habits makes code hard to understand, and consequently,
    modifying code becomes painful and error-prone. This makes it increasingly difficult
    for data scientists and developers to evolve their ML solutions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，训练ML模型的代码是用Jupyter notebooks编写的，里面充满了（i）副作用（例如打印语句、格式化的数据框、数据可视化）和（ii）没有任何抽象、模块化和自动化测试的粘合代码。虽然这对于旨在教授机器学习过程的笔记本可能没问题，但在实际项目中，这会变成一个难以维护的混乱。缺乏良好的编码习惯使得代码难以理解，因此，修改代码变得痛苦且容易出错。这使得数据科学家和开发人员在演进其ML解决方案时变得越来越困难。
- en: In this article, we’ll share techniques for identifying bad habits that add
    to the complexity in code as well as habits that can help us partition complexity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将分享识别增加代码复杂性的不良习惯的技巧，以及有助于我们分解复杂性的习惯。
- en: What contributes to complexity?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 复杂性的贡献因素是什么？
- en: '*One of the most important techniques for managing software complexity is to
    design systems so that developers only need to face a small fraction of the overall
    complexity at any given time. - [John Ousterhout](https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201)*'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*管理软件复杂性的最重要技巧之一是设计系统，使开发人员在任何给定时间只需要面对总体复杂性的一小部分。 - [John Ousterhout](https://www.amazon.com/Philosophy-Software-Design-John-Ousterhout/dp/1732102201)*'
- en: To tackle complexity, we must first know what it looks like. Something is complex
    when it’s [composed of interconnected parts](https://www.etymonline.com/word/complex).
    Every time we write code in a way that adds another moving part, we increase complexity
    and add one more thing to hold in our head.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理复杂性，我们必须首先了解它的样子。当某物是[由相互关联的部分组成](https://www.etymonline.com/word/complex)时，它就是复杂的。每当我们以添加另一个活动部分的方式编写代码时，我们就增加了复杂性，并且需要在脑海中记住更多的内容。
- en: 'While we cannot — and should not try to — escape from the essential complexity
    of a problem, we often add unnecessary accidental complexity and unnecessary cognitive
    load through bad practices such as:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不能——也不应尝试——逃避问题的本质复杂性，但我们经常通过不良实践如：
- en: '**Not having abstractions.**When we write all code in a single Python notebook
    or script without abstracting it into functions or classes, we force the reader
    to read many lines of code and figure out the “how,” to find out what the code
    is doing.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有抽象。** 当我们在单个 Python 笔记本或脚本中编写所有代码而没有将其抽象成函数或类时，我们迫使读者阅读大量代码行并弄清楚“如何”来了解代码的功能。'
- en: '**Long functions that do multiple things.**This forces us to have to hold all
    the intermediate data transformations in our head while working on one part of
    the function.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**长函数做多个事情。** 这迫使我们在处理函数的一部分时必须在脑海中保持所有中间数据转换。'
- en: '**Not having unit tests.**When we refactor, the only way to ensure that we
    haven’t broken anything is to restart the kernel and run the entire notebook(s).
    We’re forced to take on the complexity of the whole codebase even though we just
    want to work on one small part of it.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有单元测试。** 当我们重构时，确保没有破坏任何东西的唯一方法是重新启动内核并运行整个笔记本。即使我们只想处理其中的一小部分，我们也被迫承担整个代码库的复杂性。'
- en: Complexity is unavoidable, but it can be compartmentalized. In our homes, when
    we don't actively organise and rationalise where, why, and how we place things,
    mess accumulates and what should have been a simple task (e.g., finding a key)
    becomes unnecessarily time-consuming and frustrating. The same applies to our
    codebase. New code is constantly being added for data cleaning, feature engineering,
    bug fixes, handling new data, and so on. Unless we vigilantly maintain our codebase
    and continuously refactor (and we can’t refactor without unit tests), mess and
    complexity are guaranteed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂性是不可避免的，但可以进行分隔。在我们的家庭中，当我们没有主动组织和理顺物品的放置位置、原因和方式时，杂乱就会积累，本应简单的任务（例如，找钥匙）变得不必要地耗时和令人沮丧。我们的代码库也是如此。新代码不断被添加用于数据清理、特征工程、错误修复、处理新数据等。除非我们严格维护我们的代码库并不断重构（而且没有单元测试我们无法重构），否则混乱和复杂性是不可避免的。
- en: 'In the remainder of this article, we’ll share some common bad habits that increase
    complexity and better habits that help to manage complexity:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文的其余部分，我们将分享一些增加复杂性的常见不良习惯和帮助管理复杂性的更好习惯：
- en: ​Keep code clean
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持代码简洁
- en: Use functions to abstract away complexity
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数来抽象复杂性
- en: Smuggle code out of Jupyter notebooks as soon as possible
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽快将代码从 Jupyter 笔记本中提取出来
- en: Apply test-driven development
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用测试驱动开发
- en: Make small and frequent commits
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行小而频繁的提交
- en: Habits for reducing complexity
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 减少复杂性的习惯
- en: '**Keep code clean**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持代码简洁**'
- en: Unclean code adds to complexity by making code difficult to understand and modify.
    As a consequence, changing code to respond to business needs becomes increasingly
    difficult and sometimes even impossible.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 不洁净的代码通过使代码难以理解和修改来增加复杂性。因此，修改代码以响应业务需求变得越来越困难，有时甚至是不可能的。
- en: 'One such bad coding habit (or “code smell”) is dead code. Dead code is code
    that is executed but whose result is never used in any other computation. Dead
    code is yet another unrelated thing that developers have to hold in our heads
    when coding. For example, compare these two code samples:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一种糟糕的编码习惯（或称为“代码异味”）是死代码。死代码是已经执行但其结果从未在其他计算中使用的代码。死代码是开发人员在编写代码时不得不记住的另一件无关紧要的事。例如，对比这两个代码示例：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Clean code practices have been written about extensively in [several languages](https://github.com/abiodunjames/Awesome-Clean-Code-Resources),
    including [Python](https://github.com/zedr/clean-code-python). We’ve adapted these
    “clean code” principles, and you can find them in this [clean-code-ml repo](https://github.com/davified/clean-code-ml):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 关于清洁代码的实践已经在 [几种语言](https://github.com/abiodunjames/Awesome-Clean-Code-Resources)中广泛书写，包括 [Python](https://github.com/zedr/clean-code-python)。我们已经调整了这些“清洁代码”原则，你可以在这个 [clean-code-ml
    仓库](https://github.com/davified/clean-code-ml)中找到它们：
- en: Design ([code samples](https://github.com/davified/clean-code-ml/blob/master/docs/design.md))
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计 ([代码示例](https://github.com/davified/clean-code-ml/blob/master/docs/design.md))
- en: Don't expose your internals (Keep implementation details hidden)
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要暴露你的内部实现（保持实现细节隐藏）
- en: Dispensables ([code samples](https://github.com/davified/clean-code-ml/blob/master/docs/dispensables.md))
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可有可无的 ([代码示例](https://github.com/davified/clean-code-ml/blob/master/docs/dispensables.md))
- en: Remove dead code
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除死代码
- en: Avoid print statements (even glorified print statements such as **head()**,**df.describe()**,** df.plot()**
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用打印语句（即使是像 **head()**、**df.describe()**、**df.plot()** 这样的夸张打印语句）
- en: Variables ([code samples](https://github.com/davified/clean-code-ml/blob/master/docs/variables.md))
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量（[代码示例](https://github.com/davified/clean-code-ml/blob/master/docs/variables.md)）
- en: Variable names should reveal intent
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名应该揭示意图
- en: Functions ([code samples](https://github.com/davified/clean-code-ml/blob/master/docs/functions.md))
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数（[代码示例](https://github.com/davified/clean-code-ml/blob/master/docs/functions.md)）
- en: Use functions to keep code “DRY” (Don’t Repeat Yourself)
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用函数来保持代码的“DRY” (不要重复自己)
- en: Functions should do one thing
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数应该做一件事
- en: '**Use functions to abstract away complexity**'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用函数来抽象复杂性**'
- en: Functions simplify our code by abstracting away complicated implementation details
    and replacing them with a simpler representation — its name.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 函数通过抽象复杂的实现细节并用更简单的表示——它的名称——来简化我们的代码。
- en: 'Imagine you’re in a restaurant. You’re given a menu. Instead of telling you
    the name of the dishes, this menu spells out the recipe for each dish. For example,
    one such dish is:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 想象你在一家餐厅，你得到了一份菜单。这个菜单不是告诉你菜品的名称，而是详细列出了每道菜的食谱。例如，其中一道菜是：
- en: '*Step 1\. In a large pot, heat up the oil. Add carrots, onions and celery;
    stir until onion is soft. Add herbs and garlic and cook for a few more minutes.*'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*第1步。在一个大锅中，加热油。加入胡萝卜、洋葱和芹菜；搅拌至洋葱变软。加入香草和大蒜，再煮几分钟。*'
- en: ''
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Step 2\. Add in lentils, add tomatoes and water. Bring soup to a boil and
    then reduce heat to let it simmer for 30 minutes. Add spinach and cook until spinach
    is soft. Finally, season with vinegar, salt and pepper.*'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*第2步。加入扁豆、番茄和水。将汤煮沸后转小火炖煮30分钟。加入菠菜并煮至菠菜变软。最后，用醋、盐和胡椒调味。*'
- en: 'It would have been easier for us if the menu hid all the steps in the recipe
    (i.e., the implementation details) and instead gave us the name of the dish (an
    interface, an abstraction of the dish). (Answer: that was lentil soup).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果菜单隐藏了菜谱中的所有步骤（即实现细节），而只给出了菜品的名称（一个接口，即菜品的抽象），对我们来说会更容易（答案是：那是扁豆汤）。
- en: To illustrate this point, here’s a code sample from a notebook in Kaggle’s Titanic
    competition before and after refactoring.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，这里是来自Kaggle Titanic比赛的一个笔记本中的代码示例，重构前后对比。
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What did we gain by abstracting away the complexity into functions?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将复杂性抽象为函数，我们得到了什么？
- en: '**Readability**. We just have to read the interface (i.e., categorize_column())
    to know what it’s doing. We didn’t have to read each line or search the internet
    for things that we don’t understand (e.g., pd.qcut). If I still didn’t understand
    what the function did based on its name and usage, I can read its unit tests or
    its definition.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**。我们只需阅读接口（即 `categorize_column()`）即可了解其功能。我们不必阅读每一行代码或在互联网上搜索我们不理解的内容（例如
    `pd.qcut`）。如果我还是不理解这个函数的功能，我可以查看它的单元测试或定义。'
- en: Because it’s now a function, we can easily write a unit test for it. If we accidentally
    change its behaviour, the unit tests will fail and give us feedback within milliseconds.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因为现在它是一个函数，我们可以很容易地为其编写单元测试。如果我们不小心更改了它的行为，单元测试会失败，并在毫秒内给我们反馈。
- en: To repeat the same transformation on any column (e.g., ‘Age’ or ‘Income’), we
    just need one line (not seven lines) of code.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为任何列（例如“Age”或“Income”）重复相同的转换，我们只需要一行（而不是七行）代码。
- en: 'When we refactor to functions, our entire notebook can be simplified and made
    more elegant:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们重构为函数时，我们的整个笔记本可以简化并变得更优雅：
- en: '*# bad example*'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '*# 糟糕的例子*'
- en: '[See notebook](https://github.com/davified/clean-code-data-science/blob/master/notebooks/titanic-notebook-1.ipynb)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[查看笔记本](https://github.com/davified/clean-code-data-science/blob/master/notebooks/titanic-notebook-1.ipynb)'
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our mental overhead is now drastically reduced. We’re no longer forced to process
    many many lines of implementation details to understand the entire flow. Instead,
    the abstractions (i.e., functions) abstract away the complexity and tell us what
    they do, and save us from having to spend mental effort figuring out how they
    do it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的心理负担现在大大减少了。我们不再被迫处理大量的实现细节来理解整个流程。相反，抽象（即函数）抽象了复杂性，告诉我们它们的功能，免去了我们在弄清楚它们如何实现时所需的心理努力。
- en: '**Smuggle code out of Jupyter notebooks as soon as possible**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**尽快将代码从Jupyter笔记本中剥离出来**'
- en: In interior design, there is a concept (the “[Law of Flat Surfaces](https://en.wikipedia.org/wiki/Law_of_flat_surfaces)”)
    that states "any flat surface within a home or office tends to accumulate clutter."
    Jupyter notebooks are the flat surface of the ML world.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在室内设计中，有一个概念（“[平面表面法则](https://en.wikipedia.org/wiki/Law_of_flat_surfaces)”）指出“家或办公室中的任何平面表面都倾向于积累杂物。”
    Jupyter 笔记本是机器学习世界的平面表面。
- en: '![](../Images/6555c8c503fcbd08787c0828595c5e45.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6555c8c503fcbd08787c0828595c5e45.png)'
- en: Sure, Jupyter notebooks are great for quick prototyping. But it's where we tend
    to put many things — glue code, print statements, glorified print statements **(df.describe() **or** df.plot())**,
    unused import statements, and even stack traces. Despite our best intentions,
    so long as the notebooks are there, mess tends to accumulate.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Jupyter 笔记本非常适合快速原型开发。但这也是我们倾向于放入许多东西的地方——粘合代码、打印语句、被夸大的打印语句**（df.describe() **或** df.plot()）**、未使用的导入语句，甚至堆栈跟踪。尽管我们尽了最大努力，但只要笔记本存在，混乱往往会积累。
- en: Notebooks are useful because they give us fast feedback, and that’s often what
    we want when we’re given a new dataset and a new problem. However, the longer
    the notebooks become, the harder it is to get feedback on whether our changes
    are working.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本很有用，因为它们给我们快速反馈，这通常是我们在面对新数据集和新问题时所需要的。然而，笔记本变得越长，获取我们更改是否有效的反馈就越困难。
- en: In contrast, if we had extracted our code into functions and Python modules,
    and if we have unit tests, the test runner will give us feedback on our changes
    in a matter of seconds, even when there are hundreds of functions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果我们将代码提取到函数和 Python 模块中，并且有单元测试，测试运行器会在几秒钟内对我们的更改进行反馈，即使有数百个函数也是如此。
- en: '![](../Images/aab1436e8dea2ef7b6d4dccc99589dae.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aab1436e8dea2ef7b6d4dccc99589dae.png)'
- en: '*Figure 1: The more code we have, the harder it is for notebooks to give us
    fast feedback on whether everything is working as expected.*'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1: 代码越多，笔记本就越难快速反馈我们是否一切正常。*'
- en: Hence, our goal is to move code out of notebooks into Python modules and packages
    as early as possible. That way, they can rest within the safe confines of unit
    tests and domain boundaries. This will help to manage complexity by providing
    a structure for organizing code and tests logically and make it easier for us
    to evolve our ML solution.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的目标是尽早将代码从笔记本中迁移到 Python 模块和包中。这样，它们可以在单元测试和领域边界的安全范围内。这将通过提供逻辑组织代码和测试的结构来帮助管理复杂性，并使我们更容易发展我们的机器学习解决方案。
- en: So, how do we move code out of Jupyter notebooks?
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何将代码从 Jupyter 笔记本中移出呢？
- en: 'Assuming you already have your code in a Jupyter notebook, you can follow this
    process:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经在 Jupyter 笔记本中有了代码，你可以遵循这个过程：
- en: '![](../Images/f182b2d0c197d0d9b1c6b448a2d23c67.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f182b2d0c197d0d9b1c6b448a2d23c67.png)'
- en: '*Figure 2: [How to refactor a Jupyter notebook](https://github.com/davified/clean-code-ml/blob/master/docs/refactoring-process.md).*'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 2: [如何重构 Jupyter 笔记本](https://github.com/davified/clean-code-ml/blob/master/docs/refactoring-process.md)。*'
- en: The details of each step in this process (e.g., how to run tests in watch mode)
    can be found in the [clean-code-ml repo](https://github.com/davified/clean-code-ml/blob/master/docs/refactoring-exercise.md).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程每一步的详细信息（例如，如何以监视模式运行测试）可以在 [clean-code-ml 仓库](https://github.com/davified/clean-code-ml/blob/master/docs/refactoring-exercise.md)中找到。
- en: '**Apply test-driven development**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用测试驱动开发**'
- en: So far, we’ve talked about writing tests after the code is already written in
    the notebook. This recommendation isn’t ideal, but it’s still far better than
    not having unit tests.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经讨论了在代码已经写在笔记本之后编写测试。这种推荐并不是理想的，但总比没有单元测试要好得多。
- en: There is a myth that we cannot apply test-driven development ([TDD](https://www.thoughtworks.com/insights/blog/test-driven-development-best-thing-has-happened-software-design))
    to machine learning projects. To us, this is simply untrue. In any machine learning
    project, most of the code is concerned with data transformations (e.g., data cleaning,
    feature engineering), and a small part of the codebase is actual machine learning.
    Such data transformations can be written as pure functions that return the same
    output for the same input, and as such, we can apply TDD and reap its benefits.
    For example, TDD can help us break down big and complex data transformations into
    smaller bite-size problems that we can fit in our head, one at a time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个误解认为我们不能将测试驱动开发（[TDD](https://www.thoughtworks.com/insights/blog/test-driven-development-best-thing-has-happened-software-design)）应用于机器学习项目。对我们来说，这显然是不正确的。在任何机器学习项目中，大部分代码涉及数据转换（例如数据清洗、特征工程），而小部分代码才是实际的机器学习。这样的数据转换可以写成纯函数，对于相同的输入返回相同的输出，因此我们可以应用TDD并获得其好处。例如，TDD可以帮助我们将大型复杂的数据转换拆解为可以逐个处理的小问题。
- en: 'As for testing that the actual machine learning part of the code works as we
    expect it to, we can write functional tests to assert that the metrics of the
    model (e.g., accuracy, precision, etc.) are above our expected threshold. In other
    words, these tests assert that the model functions according to our expectations
    (hence the name, functional test). Here’s an [example](https://github.com/davified/clean-code-ml/blob/master/src/tests/test_model_metrics.py) of
    such a test:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 至于测试代码的实际机器学习部分是否按预期工作，我们可以编写功能测试以验证模型的指标（如准确性、精确度等）是否高于我们预期的阈值。换句话说，这些测试验证模型是否按照我们的预期运行（因此得名功能测试）。以下是一个[示例](https://github.com/davified/clean-code-ml/blob/master/src/tests/test_model_metrics.py)：
- en: '[PRE3]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Make small and frequent commits**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**进行小而频繁的提交**'
- en: When we don’t make small and frequent commits, we increase mental overhead.
    While we’re working on this problem, the changes for earlier ones are still shown
    as uncommitted. This distracts us visually and subconsciously; it makes it harder
    for us to focus on the current problem.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们不进行小而频繁的提交时，我们会增加心理负担。当我们在处理当前问题时，早期的更改仍显示为未提交，这在视觉上和潜意识中都造成了干扰，使我们更难以专注于当前问题。
- en: For example, look at the first and second images below. Can you find out which
    function we’re working on? Which image gave you an easier time?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，请看下面的第一张和第二张图片。你能找出我们正在处理哪个函数吗？哪张图片让你更容易理解？
- en: '![](../Images/5876a792c417d3bf346971b0694a3176.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5876a792c417d3bf346971b0694a3176.png)'
- en: '![](../Images/2d0e582607aa4da59dc8d5eb21d22d8e.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2d0e582607aa4da59dc8d5eb21d22d8e.png)'
- en: 'When we make small and frequent commits, we get the following benefits:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行小而频繁的提交时，我们会获得以下好处：
- en: Reduced visual distractions and cognitive load.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少视觉干扰和认知负担。
- en: We needn’t worry about accidentally breaking working code if it’s already been
    committed.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果代码已经被提交，我们不必担心意外地破坏工作中的代码。
- en: In addition to [red-green-refactor](https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html),
    we can also [red-red-red-revert](https://www.facebook.com/notes/kent-beck/one-bite-at-a-time-partitioning-complexity/1716882961677894/).
    If we were to inadvertently break something, we can easily fall back checkout
    to the latest commit, and try again. This saves us from wasting time undoing problems
    that we accidentally created when we were trying to solve the essential problem.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了[红-绿-重构](https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html)方法，我们还可以使用[红-红-红-回退](https://www.facebook.com/notes/kent-beck/one-bite-at-a-time-partitioning-complexity/1716882961677894/)方法。如果我们不小心破坏了什么，我们可以轻松回退到最新提交，然后重试。这可以避免我们在解决关键问题时，浪费时间撤销意外创建的问题。
- en: So, how small of a commit is small enough? Try to commit when there is a single
    group of logically related changes and passing tests. One technique is to look
    out for the word “and” in our commit message, e.g., “Add exploratory data analysis and
    split sentences into tokens and refactor model training code.” Each of these three
    changes could be split up into three logical commits. In this situation, you can
    use **[git add --patch](https://nuclearsquid.com/writings/git-add/)** to stage
    code in smaller batches to be committed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，提交的大小要小到什么程度才算足够小呢？当存在一组逻辑相关的更改并且测试通过时，尝试进行提交。一种技巧是留意提交信息中的“and”一词，例如，“添加探索性数据分析并将句子拆分为标记并重构模型训练代码。”这三项更改可以拆分成三次逻辑提交。在这种情况下，你可以使用**[git
    add --patch](https://nuclearsquid.com/writings/git-add/)**将代码分批暂存以便提交。
- en: Conclusion
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: '*“I''m not a great programmer; I''m just a good programmer with great habits.”
    - Kent Beck, pioneer of Extreme Programming and xUnit testing frameworks*'
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“我不是一个伟大的程序员；我只是一个有着良好习惯的好程序员。” - Kent Beck，极限编程和xUnit测试框架的先驱*'
- en: These are habits that have helped us manage complexity in machine learning and
    data science projects. We hope it helps you become more agile and productive in
    your data projects as well.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这些习惯帮助我们管理机器学习和数据科学项目中的复杂性。我们希望这些习惯也能帮助你在数据项目中变得更加灵活和高效。
- en: '**Bio:** [David](https://www.thoughtworks.com/profiles/david-tan) has been
    with ThoughtWorks for 2 years, and was working in the government sector in a non-technical
    role before he decided to embark on a career in software engineering. Over the
    last two years, he has worked on several machine learning side projects on tasks
    such as stock market price prediction, fraud protection, and beer quantity image
    recognition. He is also a trainer for the ThoughtWorks JumpStart! program. David
    is passionate about agile software development and knowledge sharing. During his
    free time he enjoys spending time with his family as a new dad.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：** [David](https://www.thoughtworks.com/profiles/david-tan)在ThoughtWorks工作了2年，在决定转行做软件工程之前，他在政府部门从事非技术性工作。在过去两年中，他参与了多个机器学习的副项目，包括股票市场价格预测、欺诈保护以及啤酒数量图像识别。他还是ThoughtWorks
    JumpStart!计划的培训师。David对敏捷软件开发和知识共享充满热情。在空闲时间，他喜欢和家人一起度过时光，作为一个新晋爸爸。'
- en: '**Related:**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[10 Python Tips and Tricks You Should Learn Today](https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你今天应该学习的10个Python技巧和窍门](https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html)'
- en: '[Top 10 Coding Mistakes Made by Data Scientists](https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家常犯的10个编程错误](https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html)'
- en: '[4 Reasons Why Your Machine Learning Code is Probably Bad](https://www.kdnuggets.com/2019/02/4-reasons-machine-learning-code-probably-bad.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你的机器学习代码可能很糟糕的4个原因](https://www.kdnuggets.com/2019/02/4-reasons-machine-learning-code-probably-bad.html)'
- en: '* * *'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三推荐课程
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的IT'
- en: '* * *'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[KDnuggets News, May 4: 9 Free Harvard Courses to Learn Data…](https://www.kdnuggets.com/2022/n18.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，5月4日：9个免费的哈佛课程来学习数据…](https://www.kdnuggets.com/2022/n18.html)'
- en: '[Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止在数据科学项目中硬编码 - 改用配置文件](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
- en: '[How to Answer Data Science Coding Interview Questions](https://www.kdnuggets.com/2022/01/answer-data-science-coding-interview-questions.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何回答数据科学编程面试问题](https://www.kdnuggets.com/2022/01/answer-data-science-coding-interview-questions.html)'
- en: '[15 Python Coding Interview Questions You Must Know For Data Science](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[15 道你必须知道的数据科学 Python 编程面试题](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)'
- en: '[3 Hard Python Coding Interview Questions For Data Science](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 个数据科学领域的困难 Python 编程面试题](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
- en: '[5 Free University Courses to Learn Coding for Data Science](https://www.kdnuggets.com/5-free-university-courses-to-learn-coding-for-data-science)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 门免费大学课程学习数据科学编码](https://www.kdnuggets.com/5-free-university-courses-to-learn-coding-for-data-science)'
