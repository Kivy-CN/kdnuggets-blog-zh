- en: 5 Advanced Tips on Python Sequences
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个高级 Python 序列技巧
- en: 原文：[https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html](https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html](https://www.kdnuggets.com/2021/11/5-advanced-tips-python-sequences.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/), Data
    Scientist at Tubi**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/) 提供，Tubi
    的数据科学家**'
- en: '![](../Images/a192e1567eb76d4791fcee7218864b73.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a192e1567eb76d4791fcee7218864b73.png)'
- en: Photo by [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [NASA](https://unsplash.com/@nasa?utm_source=medium&utm_medium=referral)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: “66% of data scientists are applying Python daily.” — [src](https://www.dasca.org/world-of-big-data/article/top-6-programming-languages-for-data-science-in-2021)
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “66% 的数据科学家每天使用 Python。” — [src](https://www.dasca.org/world-of-big-data/article/top-6-programming-languages-for-data-science-in-2021)
- en: If you’re in that 66%, this post is for you.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是那 66% 的人，这篇文章适合你。
- en: We’re going to cover the major takeaways from chapter 2 of [Fluent Python by
    Luciano Ramalho](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008),
    which covers **sequences** e.g. lists, tuples, etc.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论 [Luciano Ramalho 的《流利的 Python》](https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008)
    第二章中的主要内容，该章节涵盖了**序列**，如列表、元组等。
- en: 1 — Lists vs. Tuples
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1 — 列表与元组
- en: '**Tip: lists should hold the same kind of information whereas tuples can hold
    different kinds of information.**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：列表应保存相同类型的信息，而元组可以保存不同类型的信息。**'
- en: Starting with the basics, let’s discuss the main difference between lists and
    tuples. Below we can see an example of each — lists are surrounded by square brackets `[]` and
    tuples are surrounded by parentheses `()`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础开始，让我们讨论列表和元组之间的主要区别。下面我们可以看到每种的示例——列表用方括号`[]`包围，元组用圆括号`()`包围。
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On the backend, **lists are mutable but tuples are not**. Immutable variables
    often require less memory so try to use tuples when possible.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在后台，**列表是可变的而元组不是**。不可变的变量通常需要更少的内存，因此尽可能使用元组。
- en: However, there is a deeper note covered in Fluent Python.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，《流利的 Python》中涵盖了更深层的内容。
- en: Semantically, it’s best practice to store different *kinds* of data in a tuple
    and the same *kinds* in a list. Note that both tuples and lists support multiple
    python datatypes in the same variable, but we’re talking about the type of variable
    conceptually.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 从语义上讲，最佳实践是将不同的*kinds* 数据存储在元组中，而将相同的*kinds* 数据存储在列表中。注意，元组和列表都支持在同一个变量中包含多种
    Python 数据类型，但我们谈论的是变量的概念类型。
- en: For instance, a tuple could be used to store the following information: `(latitude,
    longitude, city_name)`. Not only are these different data types `(float, float,
    str)` , but they’re also different conceptually. Lists, on the other hand, should
    only store latitude, longitude, city name, or a tuple of all three.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个元组可以用于存储以下信息：`(latitude, longitude, city_name)`。这些不仅是不同的数据类型`(float, float,
    str)`，而且在概念上也不同。另一方面，列表应只存储纬度、经度、城市名或三者的元组。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To improve the organization of your python code, you should always keep information
    of the same kind in a list. **Tuples are for structure, lists are for sequence.**
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善 Python 代码的组织，你应始终将相同类型的信息保存在一个列表中。**元组用于结构，列表用于序列。**
- en: 2 — Unpacking Iterables
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2 — 解包可迭代对象
- en: '**Tip: use **`*****`** and **`**_**`** to improve your unpacking.**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：使用**`*****`**和**`**_**`**来改善你的解包。**'
- en: Unpacking is a very smooth and readable way to access values inside of an iterable.
    They’re quite common in loops, list comprehensions, and function calls.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Unpacking is done by assigning a sequence-like datatype to comma separated variable
    names, for example…
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: However, Fluent Python goes into some fancy unpacking methods. One example is
    you can use `*` to unpack “the rest” of the items in a long iterable. **Using
    the asterisk notation is common when you have some items of interest, and other
    items that are less important.**
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, the `*` operator can occur in the middle of a set of variables
    and python will assign all unaccounted for values to that variable.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: But, we can take the asterisk unpacking operator one step further. You can use `_` to
    unpack and** not save a value**. This convention comes in handy when you’re looking
    to unpack something but, unlike the above example, you don’t need all the variables.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: One use case for the underscore `_` unpacking operator is if you’re working
    with dictionaries or builtin methods that return multiple values.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: And finally, for the cherry on top, we can combine both methods to **unpack
    and not store “the rest” of the values.**
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 3 — Does the Function Return None?
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Tip: if a function returns **`**None**`**, it performs in-place operations.**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: Many python data types have two versions of the same function, such as `x.sort()` and `sorted(x)` shown
    below.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the first example using `x.sort()`, we perform an in-place sort which is
    more efficient and requires less memory. But, in the second exampling using `sorted(x)`,
    we are able to retain the original order of the list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: In general, Python maintains this notation. [Dot operators](https://www.askpython.com/python/built-in-methods/dot-notation) like `x.sort()`often
    return `None` and perform in-place mutations. Functions that take the variable
    as a parameter like `sorted(x)` return a **copy **of the mutated variable, but
    leave the original variable unchanged.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: 4 — GenExps vs. ListComps
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Tip: use generator expressions if you’re only accessing the variable once.
    If not, use a list comprehension.**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[List comprehensions](https://www.w3schools.com/python/python_lists_comprehension.asp) (listcomps)
    and [generator expressions](https://www.python.org/dev/peps/pep-0289/) (genexps)
    are different ways to instantiate a sequence data type.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As shown above, the only syntactical difference between list comps and genexps
    are the surrounding bracket type — parentheses `()`are used for genexps and square
    brackets `[]` are used for list comps.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '**List comps are instantiated, which means they are evaluated and saved in
    memory. Genexps are not. **Each time a genexp is needed by the program, it will
    perform the computation to evaluate that expression.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: So that’s why generator expressions are better if you’re only using the variable
    once — they are never actually stored in memory so they’re far more efficient.
    But, if you’re repeatedly accessing a sequence or need list-specific method, it’s
    better to store it in memory.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Fun side note — you can also create dictionaries using the list comprehension
    syntax…
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 5 — Slicing
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, let’s conclude with a quick note on slicing. Unlike with unpacking,
    sometimes we want to access a value in an iterable using the index. Slicing allows
    us to do this by using the following format: `my_list[start:stop:step]`
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: For those of you who know that `my_list[::-1]` reverses a list order but didn’t
    know why (such as myself), that’s why. By passing a `-1` as our step parameter,
    we step through the list in reverse.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: Now most python packages abide by the `[start:stop:index]`syntax. Numpy and
    pandas are some notable examples. Let’s take a look at each parameter in turn…
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '`start`: starting index in your slice'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`end`: not-inclusive ending index in your slice'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step`: the step size (and direction) within your `start` and `stop` index'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, because each of these values are optional, we can do all sorts of cool slicing…
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: And there you have it! 5 major tips from chapter 2 of Fluent Python. Just one
    more section…
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Useful Notes for Data Scientists
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Disclaimer, I’m not super qualified to add my opinions to this piece. However,
    these notes should be pretty intuitive. Let me know if you disagree.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '**List comprehensions should almost always replace loops.** If the body of
    the loop is complex, you can create a function that does the operations. By combining
    user-defined functions with list comprehension syntax, you make readable and efficient
    code. And, if you need to iterate over more than one variable, use `[enumerate()](https://realpython.com/python-enumerate/)` or `[zip()](https://www.w3schools.com/python/ref_func_zip.asp)`.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Being “optimal” in python doesn’t matter. **If you’re writing production-level
    code, it may be different. But, realistically you won’t see major performance
    bumps when using a tuple over a list. Ensuring that your data manipulation steps
    are logical and efficient is 99% of the work. If the 1% matters, then you can
    start worrying about tuple vs. list. Moreover, if you are really in the business
    of efficient code, you’re probably not using python.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Finally, slicing is super cool. **I had always known that `x[::-1]` reverses
    a list, but never knew why until reading this chapter of Fluent Python. And it
    works for numpy and pandas!'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Thanks for reading! I’ll be writing 35 more posts that bring academic research
    to the DS industry. Check out my comment for links to the main source for this
    post and some useful resources.*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Michael Berk](https://www.linkedin.com/in/michael-berk-48783a146/)**
    (**[https://michaeldberk.com/](https://michaeldberk.com/)**) is a Data Scientist
    at Tubi.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/5-advanced-tips-on-python-sequences-5b0e09a21a83).
    Reposted with permission.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/5-advanced-tips-on-python-sequences-5b0e09a21a83)。经许可转载。'
- en: '**Related:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[How to Find Weaknesses in your Machine Learning Models](/2021/09/weaknesses-machine-learning-models.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何发现机器学习模型中的弱点](/2021/09/weaknesses-machine-learning-models.html)'
- en: '[Simple Text Scraping, Parsing, and Processing with this Python Library](/2021/10/simple-text-scraping-parsing-processing-python-library.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用此Python库进行简单的文本抓取、解析和处理](/2021/10/simple-text-scraping-parsing-processing-python-library.html)'
- en: '[Easy Synthetic Data in Python with Faker](/2021/11/easy-synthetic-data-python-faker.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Faker在Python中轻松生成合成数据](/2021/11/easy-synthetic-data-python-faker.html)'
- en: More On This Topic
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[5 Free Advanced Python Programming Courses](https://www.kdnuggets.com/5-free-advanced-python-programming-courses)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个免费的高级Python编程课程](https://www.kdnuggets.com/5-free-advanced-python-programming-courses)'
- en: '[25 Advanced SQL Interview Questions for Data Scientists](https://www.kdnuggets.com/2022/10/25-advanced-sql-interview-questions-data-scientists.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的25个高级SQL面试问题](https://www.kdnuggets.com/2022/10/25-advanced-sql-interview-questions-data-scientists.html)'
- en: '[Top 10 Advanced Data Science SQL Interview Questions You Must Know…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你必须知道的10个高级数据科学SQL面试问题…](https://www.kdnuggets.com/2023/01/top-10-advanced-data-science-sql-interview-questions-must-know-answer.html)'
- en: '[Advanced Feature Selection Techniques for Machine Learning Models](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习模型的高级特征选择技术](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
- en: '[Back to Basics Week 4: Advanced Topics and Deployment](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归基础第4周：高级主题和部署](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
- en: '[Top 16 Technical Data Sources for Advanced Data Science Projects](https://www.kdnuggets.com/top-16-technical-data-sources-for-advanced-data-science-projects)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[16个高级数据科学项目的技术数据源](https://www.kdnuggets.com/top-16-technical-data-sources-for-advanced-data-science-projects)'
