- en: 8 Built-in Python Decorators to Write Elegant Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8 种内置 Python 装饰器帮助编写优雅代码
- en: 原文：[https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)
- en: '![8 Built-in Python Decorators to Write Elegant Code](../Images/9a45d20f9bd18537e1f5c2974d8fb7a8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![8 种内置 Python 装饰器帮助编写优雅代码](../Images/9a45d20f9bd18537e1f5c2974d8fb7a8.png)'
- en: Image by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由编辑提供
- en: Python, with its clean and readable syntax, is a widely used high-level programming
    language. Python is designed for ease of use that emphasizes simplicity and reduced
    cost of program maintenance. It comes with an extensive library that reduces the
    need for developers to write code from scratch and increases developers' productivity.
    One powerful feature of Python that contributes to code elegance is decorators.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python，凭借其简洁易读的语法，是一种广泛使用的高级编程语言。Python 设计注重易用性，强调简单性和降低程序维护成本。它配备了丰富的库，减少了开发人员从头编写代码的需要，提高了开发人员的生产力。Python
    的一个强大特性是装饰器，它有助于代码的优雅。
- en: What are Python Decorators?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python 装饰器？
- en: In Python, a decorator is a function that allows you to modify the behavior
    of another function without changing its core logic. It takes another function
    as an argument and returns the function with extended functionality. This way,
    you can use decorators to add some extra logic to existing functions to increase
    reusability with just a few lines of code. In this article, we will explore eight
    built-in Python decorators that can help you write more elegant and maintainable
    code.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，装饰器是一个函数，它允许你在不改变另一个函数核心逻辑的情况下修改其行为。它接受另一个函数作为参数，并返回具有扩展功能的函数。这样，你可以使用装饰器为现有函数添加额外逻辑，以增加可重用性，只需几行代码。本文将探讨八种内置
    Python 装饰器，它们可以帮助你编写更优雅、易维护的代码。
- en: '![8 Built-in Python Decorators to Write Elegant Code](../Images/92724f0843ac2c039dd26e41b8a9cb17.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![8 种内置 Python 装饰器帮助编写优雅代码](../Images/92724f0843ac2c039dd26e41b8a9cb17.png)'
- en: Image by Editor
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由编辑提供
- en: 1\. @atexit.register
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. @atexit.register
- en: The `@atexit.register` decorator is used to register a function to be executed
    at program termination. This function can be used to perform any task when the
    program is about to exit, whether it’s due to normal execution or an unexpected
    error.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`@atexit.register` 装饰器用于注册一个在程序终止时执行的函数。这个函数可以在程序即将退出时执行任何任务，无论是正常退出还是由于意外错误。'
- en: 'Example:'
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the above implementation, `@atexit.register` is mentioned above the function
    definition. It defines the `exit_handler()` function as an exit function. Essentially,
    it means that whenever the program reaches its termination point, either through
    normal execution or due to an unexpected error causing a premature exit, the `exit_handler()`
    function will be invoked.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，`@atexit.register` 被提到在函数定义之前。它将 `exit_handler()` 函数定义为退出函数。本质上，这意味着每当程序达到终止点，无论是正常执行还是由于意外错误导致的提前退出，`exit_handler()`
    函数将被调用。
- en: 2\. @dataclasses.dataclass
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. @dataclasses.dataclass
- en: The `@dataclasses.dataclass` is a powerful decorator that is used to automatically
    generate common special methods for classes such as “__init__”, “__repr__” and
    others. It helps you write cleaner, more concise code by eliminating the need
    to write boilerplate methods for initializing and comparing instances of your
    class. It can also help prevent errors by ensuring that common special methods
    are implemented consistently across your codebase.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`@dataclasses.dataclass` 是一个强大的装饰器，用于自动生成类的常见特殊方法，例如“__init__”、“__repr__”等。它帮助你编写更简洁、清晰的代码，避免了编写初始化和比较类实例的样板代码的需要。它还可以通过确保在代码库中一致地实现常见特殊方法来帮助防止错误。'
- en: 'Example:'
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `@dataclass` decorator, applied above the Point class definition, signals
    Python to utilize default behavior for generating special methods. This automatically
    creates the `__init__` method, which initializes class attributes, such as x and
    y, upon object instantiation. As a result, instances like point can be constructed
    without the need for explicit coding. Moreover, the `__repr__` method, responsible
    for providing a string representation of objects, is also automatically adjusted.
    This ensures that when an object, like a point, is printed, it yields a clear
    and ordered representation, as seen in the output: Point(x=3, y=2). Additionally,
    the equality comparison (==) between two instances, point1 and point2, produces
    True. This is noteworthy because, by default, Python checks for equality based
    on memory location. However, in the context of dataclass objects, equality is
    determined by the data contained within them. This is because the @dataclass decorator
    generates an `__eq__` method that checks for the equality of the data present
    in the objects, rather than checking for the same memory location.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`@dataclass`装饰器应用在Point类定义之上，告诉Python利用默认行为生成特殊方法。这会自动创建`__init__`方法，在对象实例化时初始化类属性，如x和y。因此，像point这样的实例可以在无需显式编码的情况下构造。此外，`__repr__`方法，负责提供对象的字符串表示，也会自动调整。这确保了当对象（如point）被打印时，它会生成一个清晰有序的表示，如输出所示：Point(x=3,
    y=2)。另外，两个实例point1和point2之间的相等比较（==）会产生True。这一点值得注意，因为默认情况下，Python基于内存位置检查相等性。然而，在dataclass对象的上下文中，相等性是由对象中包含的数据来确定的。这是因为`@dataclass`装饰器生成了一个`__eq__`方法，检查对象中数据的相等性，而不是检查相同的内存位置。'
- en: 3\. @enum.unique
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. `@enum.unique`
- en: The `@enum.unique` decorator, found in the enum module, is used to ensure that
    the values of all the members of an enumeration are unique. This helps prevent
    the accidental creation of multiple enumeration members with the same value, which
    can lead to confusion and errors. If duplicate values are found, a **ValueError**
    is raised.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`@enum.unique`装饰器，位于枚举模块中，用于确保枚举的所有成员的值是唯一的。这有助于防止意外创建具有相同值的多个枚举成员，从而避免混淆和错误。如果发现重复值，将引发**ValueError**。'
- en: 'Example:'
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the above implementation, "BUS" and "MOTORCYCLE" have the same value "3".
    As a result, the `@unique` decorator raises a ValueError with a message indicating
    that duplicate values have been found. Neither can you use the same key more than
    once nor can you assign the same value to different members. In this manner, it
    helps prevent duplicate values for multiple enumeration members.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，“BUS”和“MOTORCYCLE”具有相同的值“3”。因此，`@unique`装饰器会引发一个ValueError，提示发现了重复的值。你不能多次使用相同的键，也不能将相同的值分配给不同的成员。通过这种方式，它帮助防止多个枚举成员的值重复。
- en: 4\. @partial
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. `@partial`
- en: The `partial` decorator is a powerful tool that is used to create partial functions.
    Partial functions allow you to pre-set some of the arguments of the original function
    and generate a new function with those arguments already filled in.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`partial`装饰器是一个强大的工具，用于创建部分函数。部分函数允许你预设原始函数的某些参数，并生成一个已经填入这些参数的新函数。'
- en: 'Example:'
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output:**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above implementation, we have a function “power” which accepts two arguments
    “base” and “exponent” and returns the result of the base raised to the power of
    exponent. We have created a partial function named “square” using the original
    function in which the exponent is pre-set to 2\. In this way, we can extend the
    functionality of original functions using a `partial` decorator.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，我们有一个名为“power”的函数，它接受两个参数“base”和“exponent”，并返回基数的指数幂结果。我们使用原始函数创建了一个名为“square”的部分函数，其中指数被预设为2。通过这种方式，我们可以使用`partial`装饰器扩展原始函数的功能。
- en: 5\. @singledispatch
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. `@singledispatch`
- en: The `@singledisptach` decorator is used to create generic functions. It allows
    you to define different implementations of functions with the same name but different
    argument types. It is particularly useful when you want your code to behave differently
    for different data types.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`@singledispatch`装饰器用于创建泛型函数。它允许你定义具有相同名称但不同参数类型的函数的不同实现。当你希望代码对不同数据类型表现出不同的行为时，这特别有用。'
- en: 'Example:'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output:**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the above implementation, we first developed the generic function `display_info()`
    using the `@singledisptach` decorator and then registered its implementation for
    int, float, string, and list separately. The output shows the working of `display_info()`
    for separate data types.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，我们首先使用 `@singledisptach` 装饰器开发了通用函数 `display_info()`，然后分别为 int、float、string
    和 list 注册了其实现。输出展示了 `display_info()` 对不同数据类型的工作情况。
- en: 6\. @classmethod
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. @classmethod
- en: The `@classmethod` is a decorator used to define class methods within the class.
    Class methods are bound to the class rather than the object of the class. The
    primary distinction between static methods and class methods lies in their interaction
    with the class state. Class methods have access to and can modify the class state,
    whereas static methods can not access the class state and operate independently.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`@classmethod` 是一个装饰器，用于在类中定义类方法。类方法绑定到类而非类的实例。静态方法和类方法之间的主要区别在于它们与类状态的交互。类方法可以访问并修改类状态，而静态方法不能访问类状态，并且独立操作。'
- en: 'Example:'
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above implementation, the **Student** class has **total_students** as
    a class variable. The `@classmethod` decorator is used to define the `increment_total_students()`
    class method to increment the **total_students** variable. Whenever we create
    an instance of the Student class, the total number of students is incremented
    by one. We created two instances of the class and then used the class method to
    modify the **total_students** variable to **3**, which is also reflected by the
    instances of the class.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，**Student** 类具有类变量 **total_students**。`@classmethod` 装饰器用于定义 `increment_total_students()`
    类方法，以递增 **total_students** 变量。每当我们创建一个 Student 类的实例时，学生总数会增加一。我们创建了两个类的实例，然后使用类方法将
    **total_students** 变量修改为 **3**，这在类的实例中也得到了反映。
- en: 7\. @staticmethod
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. @staticmethod
- en: The `@staticmethod` decorator is used to define static methods within a class.
    Static methods are the methods that can be called without creating an instance
    of the class. Static methods are often used when they don't have to access object-related
    parameters and are more related to the class as a whole.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`@staticmethod` 装饰器用于在类中定义静态方法。静态方法是可以在不创建类实例的情况下调用的方法。静态方法通常用于不需要访问与对象相关的参数，并且与整个类更相关的情况。'
- en: 'Example:'
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE12]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Output:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the above implementation, we have used `@staticmethod` to define a static
    method add() for the class “MathOperations”. We have added the two numbers “4”
    and “5” which results in “9” without creating any instance of the class. Similarly,
    subtract the two numbers “8” and “3” to get “5”. This way static methods can be
    generated to perform utility functions that do not require the state of an instance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，我们使用 `@staticmethod` 为类“MathOperations”定义了一个静态方法 add()。我们将两个数字“4”和“5”相加，结果是“9”，而不需要创建类的实例。类似地，将两个数字“8”和“3”相减得到“5”。通过这种方式，静态方法可以生成执行不需要实例状态的工具函数。
- en: 8\. @property
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. @property
- en: The `@property` decorator is used to define the getter methods for the class
    attribute. The getter methods are the methods that return the value of an attribute.
    These methods are used for data encapsulation which specifies who can access the
    details of the class or instance.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`@property` 装饰器用于定义类属性的 getter 方法。getter 方法是返回属性值的方法。这些方法用于数据封装，指定谁可以访问类或实例的详细信息。'
- en: 'Example:'
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Output:**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the above implementation, the class “Circle” has an attribute “radius”. We
    have used `@property` to set up the getter methods for the radius as well as the
    area. It provides a clean and consistent interface for the users of the class
    to access these attributes.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述实现中，类“Circle”具有一个属性“radius”。我们使用 `@property` 设置了半径和面积的 getter 方法。这为类的用户提供了一个干净且一致的接口来访问这些属性。
- en: Summing Up
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This article highlights some of the most versatile and functional decorators
    that you can use to make your code more flexible and readable. These decorators
    let you extend the functionalities of the original function to make it more organized
    and less prone to errors. They are like magic touches that make your Python programs
    look neat and work smoothly.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 本文重点介绍了一些最通用和功能强大的装饰器，你可以使用它们使你的代码更加灵活和易读。这些装饰器允许你扩展原始函数的功能，使其更有组织且不易出错。它们就像是魔法般的点缀，使你的
    Python 程序看起来整洁且运行顺畅。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一位机器学习工程师和技术作家，对数据科学以及 AI 与医学的交汇处充满热情。她合著了电子书《利用 ChatGPT 最大化生产力》。作为 2022
    年亚太地区的 Google Generation 学者，她倡导多样性和学术卓越。她还被认可为 Teradata 多样性技术学者、Mitacs Globalink
    研究学者和哈佛 WeCode 学者。Kanwal 是变革的坚定倡导者，创办了 FEMCodes，以赋能 STEM 领域的女性。'
- en: '* * *'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 工作'
- en: '* * *'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Pydon''ts - Write elegant Python code: Free Book Review](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydon''ts - 编写优雅的 Python 代码：免费书评](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
- en: '[What You Should Know About Python Decorators And Metaclasses](https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该了解的 Python 装饰器和元类](https://www.kdnuggets.com/2023/03/know-python-decorators-metaclasses.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写清晰的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何编写高效的 Python 代码：初学者教程](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
- en: '[7 Projects Built with Generative AI](https://www.kdnuggets.com/2023/08/7-projects-built-generative-ai.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 个基于生成式 AI 的项目](https://www.kdnuggets.com/2023/08/7-projects-built-generative-ai.html)'
- en: '[How to Write SQL in Native Python](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在原生 Python 中编写 SQL](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
