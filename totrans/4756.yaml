- en: Building Surveillance System Using USB Camera and Wireless-Connected Raspberry
    Pi
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/11/building-surveillance-system-usb-camera-wireless-connected-raspberry-pi.html/2](https://www.kdnuggets.com/2018/11/building-surveillance-system-usb-camera-wireless-connected-raspberry-pi.html/2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/11/building-surveillance-system-usb-camera-wireless-connected-raspberry-pi.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: 3\. Capturing Images using PyGame
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The “**fswebcam**” package is useful for quickly testing whether the camera
    is working well or not. After making sure it is functioning well, we can start
    building a Python script that accesses the camera to capture images continuously
    using the PyGame library. The following code uses PyGame for capturing a single
    image, opens a window for displaying that image, and finally save such image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assume that the above code is saved in a Python file named “**im_cap.py**”.
    To execute such code, we can issue the following command from the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here is the window displayed after executing such file.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70fb7b5dcdf168cdeb19ecf08f6c499f.png)'
  prefs: []
  type: TYPE_IMG
- en: We can modify the previous code to capture more than one image. For example,
    we can use a **for** loop to capture a number of previously specified images.
    We can also use a **while** loop that is not limited to a number of images. Here
    is the modified code that captures 2,000 images using a **for** loop.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Here are 8 captured images. Note that the camera position is changed a bit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e8f73bbe809027e9bf3f5ec9fc74063a.png)'
  prefs: []
  type: TYPE_IMG
- en: 4\. Building the Background Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Up to this point, we successfully built a simple surveillance system in which
    a camera captures images which are saved in the SD card of RPi. We can extend
    that to automatically detect changes to the scene. This is done by building a
    background model for the scene. Any change to such a model will indicate a change.
    For example, if someone is passing through the scene will cause a change to the
    background.
  prefs: []
  type: TYPE_NORMAL
- en: The background model can be simply created by averaging multiple captured images
    to the scene background without any object in them. Because we are interested
    in the color information, the images will be converted into binary. Here is the
    Python code used to build the background model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here is the background model in both gray and binary after averaging 500 images.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bc07771e6f250b549b1f42728a842909.png)'
  prefs: []
  type: TYPE_IMG
- en: 5\. Detecting Changes to the Background Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After building the background model, we can test a new image to check if there
    is a change to the background or not. This is done simply by converting the new
    image into binary. Then the number of white pixels is compared in both images.
    If the number exceeds a given threshold, this indicates a change from the background.
    The threshold changes from scene to scene. Here is the code used for testing a
    new image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here is a test image in both color, gray, and binary in which there is a change
    from the background due to the appearance of an object (person) in the scene.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d86cfb508869bb37d5643695b38cac51.png)'
  prefs: []
  type: TYPE_IMG
- en: 6\. Building a Simple Circuit that Lights a Led When a Change Occurs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As an indication of a change to the background model, we can build a simple
    circuit in which a led lights when a change occurs. This circuit will be connected
    to the GPIO (General Purpose Input Output) bins of the RPi. The circuit needs
    the following components:'
  prefs: []
  type: TYPE_NORMAL
- en: One breadboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One led.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One resistor (more than or equal to 100 ohms). I use a 178.8 ohms resistor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two male/male jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two male/female jumper wires.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is recommended to test the circuit before connecting it to the GPIO pins.
    This is because if the resistor value was not selected properly, this might lead
    to not only burning the led but also damaging the GPIO pins. To do the test, we
    need a battery for supplying the breadboard by power. Here is the circuit after
    connecting all components correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/af2906aa9e63f23914c18876149135cb.png)'
  prefs: []
  type: TYPE_IMG
- en: After that, we can remove the battery and connect the breadboard the GPIO pins
    of RPi. Based on the breadboard numbering of the GPIO pins, the ground is connected
    to bin number 20 and the high voltage is connected to the output bin number 22\.
    The following figure illustrates the connections between the breadboard and the
    RPi. The RPi is also connected to both the charger and the USB camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f917ae6b5def74ff37d2bb3f20c6398f.png)'
  prefs: []
  type: TYPE_IMG
- en: The output GPIO bin is controlled using the Python script given below. Its default
    state is LOW meaning the led is turned off. When there is a change to the background,
    the state will be changed to HIGH meaning the led is turned on. The led remains
    on for 0.1 seconds then its state returns back to off. When another input image
    is different from the background, the led returns back to on for another 0.1 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The following figure is shown one input image which is different from the background
    image due to the existence of a person. As a result, the led will be turned on
    for 0.1 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3024e1ed52ae5a4c77d2b20f56c94497.png)'
  prefs: []
  type: TYPE_IMG
- en: The following video ([https://youtu.be/WOUG-vjg3A4](https://youtu.be/WOUG-vjg3A4))
    shows the led state for multiple frames captured using the camera. The led is
    turned on when the input image is different from the background model according
    to the used threshold.
  prefs: []
  type: TYPE_NORMAL
- en: '**For More Details**'
  prefs: []
  type: TYPE_NORMAL
- en: Ahmed Fawzy Gad, “Building an Image Classifier Running on Raspberry Pi”, September
    2018, [https://www.linkedin.com/pulse/building-image-classifier-running-raspberry-pi-ahmed-gad](https://www.linkedin.com/pulse/building-image-classifier-running-raspberry-pi-ahmed-gad)
  prefs: []
  type: TYPE_NORMAL
- en: '**For Contacting the Author**'
  prefs: []
  type: TYPE_NORMAL
- en: E-mail: [ahmed.f.gad@gmail.com](https://mailto:ahmed.f.gad@gmail.com/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LinkedIn: [https://linkedin.com/in/ahmedfgad/](https://linkedin.com/in/ahmedfgad/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KDnuggets: [https://www.kdnuggets.com/author/ahmed-gad](https://www.kdnuggets.com/author/ahmed-gad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: YouTube: [http://youtube.com/AhmedGadFCIT](https://youtube.com/AhmedGadFCIT)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TowardsDataScience: [https://towardsdatascience.com/@ahmedfgad](https://towardsdatascience.com/@ahmedfgad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Ahmed Gad](https://www.linkedin.com/in/ahmedfgad/)** received his B.Sc.
    degree with excellent with honors in information technology from the Faculty of
    Computers and Information (FCI), Menoufia University, Egypt, in July 2015\. For
    being ranked first in his faculty, he was recommended to work as a teaching assistant
    in one of the Egyptian institutes in 2015 and then in 2016 to work as a teaching
    assistant and a researcher in his faculty. His current research interests include
    deep learning, machine learning, artificial intelligence, digital signal processing,
    and computer vision.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://www.linkedin.com/pulse/building-surveillance-system-using-usb-camera-raspberry-ahmed-gad/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Intuitive Ensemble Learning Guide with Gradient Boosting](/2018/07/intuitive-ensemble-learning-guide-gradient-boosting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building an Image Classifier Running on Raspberry Pi](/2018/10/building-image-classifier-running-raspberry-pi.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Genetic Algorithm Implementation in Python](/2018/07/genetic-algorithm-implementation-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Building a Recommender System for Amazon Products with Python](https://www.kdnuggets.com/2023/02/building-recommender-system-amazon-products-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Recommendation System with Hugging Face Transformers](https://www.kdnuggets.com/building-a-recommendation-system-with-hugging-face-transformers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How a Level System can Help Forecast AI Costs](https://www.kdnuggets.com/2022/03/level-system-help-forecast-ai-costs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning System Design: Top 5 Essential Reads](https://www.kdnuggets.com/learning-system-design-top-5-essential-reads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Monitor Your File System With Python’s Watchdog](https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Microservice for Multi-Chat Backends Using Llama and ChatGPT](https://www.kdnuggets.com/building-microservice-for-multichat-backends-using-llama-and-chatgpt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
