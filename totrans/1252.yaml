- en: 'Essential Math for Data Science: Scalars and Vectors'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/02/essential-math-data-science-scalars-vectors.html](https://www.kdnuggets.com/2021/02/essential-math-data-science-scalars-vectors.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)[![Image](../Images/e6b504358bea8f63e781d7dbce4b4afc.png)](https://www.essentialmathfordatascience.com/?utm_source=kdnuggets&utm_medium=blog&utm_campaign=kdnuggets_scalars_vectors)'
  prefs: []
  type: TYPE_NORMAL
- en: Machines only understand numbers. For instance, if you want to create a spam
    detector, you have first to convert your text data into numbers (for instance,
    through *word embeddings*). Data can then be stored in vectors, matrices, and
    tensors. For instance, images are represented as matrices of values between 0
    and 255 representing the luminosity of each color for each pixel. It is possible
    to leverage the tools and concepts from the field of linear algebra to manipulate
    these vectors, matrices and tensors.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Linear algebra is the branch of mathematics that studies *vector spaces*. You’ll
    see how vectors constitute vector spaces and how linear algebra applies linear
    transformations to these spaces. You’ll also learn the powerful relationship between
    sets of linear equations and vector equations, related to important data science
    concepts like *least squares approximation*. You’ll finally learn important matrix
    decomposition methods: *eigendecomposition* and *Singular Value Decomposition* (SVD),
    important to understand unsupervised learning methods like *Principal Component
    Analysis* (PCA).
  prefs: []
  type: TYPE_NORMAL
- en: Scalars and Vectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What are Vectors?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Linear algebra deals with *vectors*. Other mathematical entities in the field
    can be defined by their relationship to vectors: *scalars*, for example, are single
    numbers that *scale* vectors (stretching or contracting) when they are multiplied
    by them.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, vectors refer to various concepts according to the field they are
    used in. In the context of data science, they are a way to store values from your
    data. For instance, take the height and weight of people: since they are distinct
    values with different meanings, you need to store them separately, for instance
    using two vectors. You can then do operations on vectors to manipulate these features
    without loosing the fact that the values correspond to different attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also use vectors to store data samples, for instance, store the height
    of ten people as a vector containing ten values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Notation**'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll use lowercase, boldface letters to name vectors (such as vv). As usual,
    refer to the Appendix in [Essential Math for Data Science](https://bit.ly/3gB7p5Z) to
    have the summary of the notations used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Geometric and Coordinate Vectors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The word *vector* can refer to multiple concepts. Let’s learn more about geometric
    and coordinate vectors.
  prefs: []
  type: TYPE_NORMAL
- en: '*Coordinates* are values describing a position. For instance, any position
    on earth can be specified by geographical coordinates (latitude, longitude, and
    elevation).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Geometric Vectors**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Geometric vectors*, also called *Euclidean vectors*, are mathematical objects
    defined by their magnitude (the length) and their direction. These properties
    allow you to describe the displacement from a location to another.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/7347e5d2702c90d9a4908b3f1d5c901d.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1: A geometric vector running from *A* to *B*.*'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, Figure 1 shows that the point *A* has coordinates (1, 1) and the
    point *B* has coordinates (3, 2). The geometric vectors *v* describes the displacement
    from *A* to *B*, but since vectors are defined by their magnitude and direction,
    you can also represent *v* as starting from the origin.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cartesian Plane**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In Figure 1, we used a coordinate system called the *Cartesian plane*. The horizontal
    and vertical lines are the *coordinate axes*, usually labeled respectively *x* and *y*.
    The intersection of the two coordinates is called the *origin* and corresponds
    to the coordinate 0 for each axis.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In a Cartesian plane, any position can be specified by the *x* and the *y* coordinates.
    The Cartesian coordinate system can be extended to more dimensions: the position
    of a point in a *n*-dimensional space is specified by nn coordinates. The real
    coordinate *n*-dimensional space, containing *n*-tuples of real numbers, is named ![Equation](../Images/410fa8fdbe999c26954e1f542b937bc3.png).
    For instance, the space ![Equation](../Images/1897b3a589388febf338a23993bd1327.png) is
    the two-dimensional space containing pairs of real numbers (the coordinates).
    In three dimensions (![Equation](../Images/7196064760d61b7134011939a901e224.png)),
    a point in space is represented by three real numbers.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Coordinate Vectors**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Coordinate vectors* are ordered lists of numbers corresponding to the vector
    coordinates. Since vector initial points are at the origin, you need to encode
    only the coordinates of the terminal point.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/04b8b95877e2cf0854c1e4c1e6b0802b.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2: The vector vv has coordinates (3, 2) corresponding to three units
    from the origin on the *x*-axis and two on the *y*-axis.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, let’s take the vector *v* represented in Figure 2\. The corresponding
    coordinate vector is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/63e9b728aa36d3fe33f03d250d195ff3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each value is associated with a direction: in this case, the first value corresponds
    to the the xx-axis direction and the second number to the *y*-axis.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/02d8b5a51172baee343f0dca949531e2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3: Components of a coordinate vector.*'
  prefs: []
  type: TYPE_NORMAL
- en: As illustrated in Figure 3, these values are called *components* or *entries* of
    the vector.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/522fb709d838085c72c3e5c32903770c.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 4: Vectors can be represented as points in the Cartesian plane.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, as represented in Figure 4, you can simply represent the terminal
    point of the arrow: this is a scatter-plot.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Indexing**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Indexing* refers to the process of getting a vector component (one of the
    values from the vector) using its position (its index).'
  prefs: []
  type: TYPE_NORMAL
- en: Python uses zero-based indexing, meaning that the first index is zero. However
    mathematically, the convention is to use one-based indexing. I’ll denote the component *i* of
    the vector *v* with a subscript, as *v[i]*, without bold font because the component
    of the vector is a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: '**Numpy**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Numpy, vectors are called *one-dimensional arrays*. You can use the function `np.array()` to
    create one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**More Components**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take the example of *v*, a three-dimensional vectors defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/2723431e273c14a21ed83803a46a359a.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in in Figure 5, you can reach the endpoint of the vector by traveling
    3 units in the xx-axis, 4 in the yy-axis, and 2 in the zz-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/115c5d25a82c98d6cdf03f7bd8da94f2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 5: Three-dimensional representation of the origin at (0, 0, 0) and
    the point at (3, 4, 2).*'
  prefs: []
  type: TYPE_NORMAL
- en: More generally, in a *n*-dimensional space, the position of a terminal point
    is described by *n* components.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dimensions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can denote the dimensionality of a vector using the *set* notation ![Equation](../Images/410fa8fdbe999c26954e1f542b937bc3.png).
    It expresses the *real coordinate space*: this is the nn-dimensional space with
    real numbers as coordinate values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, vectors in ![Equation](../Images/7196064760d61b7134011939a901e224.png) have
    three components, as the following vector *v* for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/db1de19ac3c96eb324999a067bbfc8b3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Vectors in Data Science**'
  prefs: []
  type: TYPE_NORMAL
- en: In the context of data science, you can use coordinate vectors to represent
    your data.
  prefs: []
  type: TYPE_NORMAL
- en: You can represent data samples as vectors with each component corresponding
    to a feature. For instance, in a real estate dataset, you could have a vector
    corresponding to an apartment with its features as different components (like
    the number of rooms, the location etc.).
  prefs: []
  type: TYPE_NORMAL
- en: Another way to do it is to create one vector per feature, each containing all
    observations.
  prefs: []
  type: TYPE_NORMAL
- en: Storing data in vectors allows you to leverage linear algebra tools. Note that,
    even if you can’t visualize vectors with a large number of components, you can
    still apply the same operations on them. This means that you can get insights
    about linear algebra using two or three dimensions, and then, use what you learn
    with a larger number of dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The Dot Product
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The *dot product* (referring to the dot symbol used to characterize this operation),
    also called *scalar product*, is an operation done on vectors. It takes two vectors,
    but unlike addition and scalar multiplication, it returns a single number (a scalar,
    hence the name). It is an example of a more general operation called the *inner
    product*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/741e0450faa3cd65fc1d8c9987f5e110.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 6: Illustration of the dot product.*'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6 shows an illustration of how the dot product works. You can see that
    it corresponds to the sum of the multiplication of the components with same index.
  prefs: []
  type: TYPE_NORMAL
- en: Definition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The dot product between two vectors *u* and *v*, denoted by the symbol ⋅, is
    defined as the sum of the product of each pair of components. More formally, it
    is expressed as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/1a7ab7ab3cbf86bcc90fa726e1eb724f.png)'
  prefs: []
  type: TYPE_IMG
- en: with *m* the number of components of the vectors *u* and *v* (they must have
    the same number of components), and *i* the index of the current vector component.
  prefs: []
  type: TYPE_NORMAL
- en: '**Dot Symbol**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that the symbol of the dot product is the same as the dot used to refer
    to multiplication between scalars. The context (if the elements are scalars or
    vectors) tells you which one it is.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s take an example. You have the following vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/c4befa68fab0eda7f51dc9a03a5844b3.png)'
  prefs: []
  type: TYPE_IMG
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/0e8f0aeffa468aaec6d828fbc2f055cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dot product of these two vectors is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/4984d5e81f8a23b1ca3462a954e4613b.png)'
  prefs: []
  type: TYPE_IMG
- en: The dot product between *u* and *v* is 35\. It converts the two vectors *u* and *v* into
    a scalar.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use Numpy to calculate the dot product of these vectors. You can use
    the method `dot()` of Numpy arrays:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'It is also possible to use the following equivalent syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, with Python 3.5+, it is also possible to use the `@` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Vector Multiplication**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note that the dot product is different from the *element-wise* multiplication,
    also called the *Hadamard product*, which returns another vector. The symbol ⊙⊙ is
    generally used to characterize this operation. For instance:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Equation](../Images/2d1488805455bb6ac9218ddcde2a76bf.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '**Dot Product and Vector Length**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The squared *L²* norm can be calculated using the dot product of the vector
    with itself (*u ⋅ u*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/27355691b62468566a688306b092766c.png)'
  prefs: []
  type: TYPE_IMG
- en: This is an important property in machine learning, as you saw in [Essential
    Math for Data Science](https://bit.ly/3gB7p5Z).
  prefs: []
  type: TYPE_NORMAL
- en: '**Special Cases**'
  prefs: []
  type: TYPE_NORMAL
- en: The dot product between two orthogonal vectors is equal to 0\. In addition,
    the dot product between a unit vector and itself is equal to 1.
  prefs: []
  type: TYPE_NORMAL
- en: 'Geometric interpretation: Projections'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How can you interpret the dot product operation with geometric vectors. You
    have seen in [Essential Math for Data Science](https://bit.ly/3gB7p5Z) the geometric
    interpretation of the addition and scalar multiplication of vectors, but what
    about the dot product?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take the two following vectors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/3ac7fce51eaeceda0696386e4ab1c5cd.png)'
  prefs: []
  type: TYPE_IMG
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/f9434810611033c0f99bb57ae08f3aec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, let’s calculate the dot product of *u* and *v*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/0f7e8f94bac151506afd04bd717f24ad.png)'
  prefs: []
  type: TYPE_IMG
- en: What is the meaning of this scalar? Well, it is related to the idea of projecting *u* onto *v*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/57b9fc6d124772ca94f5e8cdbf799432.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 7: The dot product can be seen as the length of vv multiplied by the
    length of the projection (the vector uprojuproj).*'
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in Figure 7, the projection of *u* on the line with the direction
    of *v* is like the shadow of the vector *u* on this line. The value of the dot
    product (6 in our example) corresponds to the multiplication of the length of *v* (the *L²* norm ∥*v*∥)
    and the length of the projection of *u* on *v* (the L² norm ∥*u[proj]*∥). You
    want to calculate:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/a2e9c2b85492b534764a84cb5e7eb464.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Note that the elements are scalars, so the dot symbol refers to a multiplication
    of these values. And you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/1a7335d85b9d629d438b6bc6da087d3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The projection of *u* onto *v* is defined as follows (you can refer to [Essential
    Math for Data Science](https://bit.ly/3gB7p5Z) to see the mathematical details
    about the projection of a vector onto a line):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/58019c4efd4283a35a13a2f4a3518e26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So the *L²* norm of *u[proj]* is the *L²* norm of 0.75 times *v*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/00ebc564ef7df3fae713001c43b500c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, the multiplication of the length of *v* and the length of the projection
    is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/d2adc7be4a99e5903956fc7b63d503b2.png)'
  prefs: []
  type: TYPE_IMG
- en: This shows that you can think of the dot product on geometric vectors as a projection.
    Using the projection gives you the same result as with the dot product formula.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the value that you obtain with the dot product tells you the relationship
    between the two vectors. If this value is positive, the angle between the vectors
    is less than 90 degrees, if it is negative, the angle is greater than 90 degrees,
    if it is zero, the vectors are orthogonal and the angle is 90 degrees.
  prefs: []
  type: TYPE_NORMAL
- en: Properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s review some properties of the dot product.
  prefs: []
  type: TYPE_NORMAL
- en: '**Distributive**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dot product is *distributive*. This means that, for instance, with the
    three vectors *u*, *v* and *w*, you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/68f5e55a2a1f65d4b1dfc0b936421783.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Associative**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dot product is not *associative*, meaning that the order of the operations
    matters. For instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/42c7c77680d51ecc4fc80dc74fd42390.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dot product is not a binary operator: the result of the dot product between
    two vectors is not another vector (but a scalar).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commutative**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The dot product between vectors is said to be *commutative*. This means that
    the order of the vectors around the dot product doesn’t matter. You have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/ea0b30ed4b7bf7682ea6671cbf418c4a.png)'
  prefs: []
  type: TYPE_IMG
- en: However, be careful, because this is not necessarily true for matrices.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Hadrien Jean](https://hadrienj.github.io/)** is a machine learning
    scientist. He owns a Ph.D in cognitive science from the Ecole Normale Superieure,
    Paris, where he did research on auditory perception using behavioral and electrophysiological
    data. He previously worked in industry where he built deep learning pipelines
    for speech processing. At the corner of data science and environment, he works
    on projects about biodiversity assessement using deep learning applied to audio
    recordings. He also periodically creates content and teaches at Le Wagon (data
    science Bootcamp), and writes articles in his blog ([hadrienj.github.io](http://hadrienj.github.io)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://hadrienj.github.io/posts/Essential-Math-for-Data-Science-Scalars-Vectors-and-the-Dot-Product/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Probability Density and Probability Mass
    Functions](/2020/12/essential-math-data-science-probability-density-probability-mass-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Introduction to Matrices and the Matrix Product](/2021/02/essential-math-data-science-matrices-matrix-product.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Integrals And Area Under The Curve](/2020/11/essential-math-data-science-integrals-area-under-curve.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How To Overcome The Fear of Math and Learn Math For Data Science](https://www.kdnuggets.com/2021/03/overcome-fear-learn-math-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Eigenvectors and Application to PCA](https://www.kdnuggets.com/2022/06/essential-math-data-science-eigenvectors-application-pca.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Visual Introduction to Singular…](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Much Math Do You Need in Data Science?](https://www.kdnuggets.com/2020/06/math-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free Courses to Master Math for Data Science](https://www.kdnuggets.com/5-free-courses-to-master-math-for-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free MIT Courses to Learn Math for Data Science](https://www.kdnuggets.com/5-free-mit-courses-to-learn-math-for-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
