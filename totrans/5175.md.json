["```py\nSELECT\n    \tcountry,\n    \tsum(number_of_comments) as number_of_comments_dec,\n\tFROM fb_active_users as a\n\tLEFT JOIN fb_comments_count as b\n  \ton a.user_id = b.user_id\n\tWHERE country IS NOT NULL\n\tGROUP BY country\n\n```", "```py\nSELECT\n    \tcountry,\n    \tsum(number_of_comments) as number_of_comments_dec,\n    \tdense_rank() over(order by sum(number_of_comments) DESC) as country_rank\n\tFROM fb_active_users as a\n\tLEFT JOIN fb_comments_count as b\n  \ton a.user_id = b.user_id\n\tWHERE country IS NOT NULL\n\tGROUP BY country\n\n```", "```py\nSELECT\n    \tcountry,\n    \tsum(number_of_comments) as number_of_comments_dec,\n    \tdense_rank() over(order by sum(number_of_comments) DESC) as country_rank\n\tFROM fb_active_users as a\n\tLEFT JOIN fb_comments_count as b\n  \ton a.user_id = b.user_id\n\tWHERE created_at <= '2019-12-31' and created_at >= '2019-12-01'\n  \tAND country IS NOT NULL\n\tGROUP BY country\n\n```", "```py\nWITH dec_summary as (CODE BLOCK), \njan_summary as (CODE BLOCK) \nSELECT j.country \nFROM jan_summary j \nLEFT JOIN dec_summary d on d.country = j.country\nWHERE (j.country_rank < d.country_rank)\n\n```", "```py\nWITH dec_summary as (CODE BLOCK),\njan_summary as (CODE BLOCK)\nSELECT j.country\nFROM jan_summary j\nLEFT JOIN dec_summary d on d.country = j.country\nWHERE (j.country_rank < d.country_rank) \nOR d.country is NULL\n\n```", "```py\nwith dec_summary as (\n\tSELECT\n    \tcountry,\n    \tsum(number_of_comments) as number_of_comments_dec,\n    \tdense_rank() over(order by sum(number_of_comments) DESC) as country_rank\n\tFROM fb_active_users as a\n\tLEFT JOIN fb_comments_count as b\n  \ton a.user_id = b.user_id\n\tWHERE created_at <= '2019-12-31' and created_at >= '2019-12-01'\n  \tAND country IS NOT NULL\n\tGROUP BY country\n),\njan_summary as (\n\tSELECT\n  \tcountry,\n  \tsum(number_of_comments) as number_of_comments_jan,\n  \tdense_rank() over(order by sum(number_of_comments) DESC) as country_rank\n\tFROM fb_active_users as a\n\tLEFT JOIN fb_comments_count as b\n  \ton a.user_id = b.user_id\n\tWHERE created_at <= '2020-01-31' and created_at >= '2020-01-01'\n    \tAND country IS NOT NULL\n\tGROUP BY country\n\t)\nSELECT j.country\nFROM jan_summary j\nLEFT JOIN dec_summary d on d.country = j.country\nWHERE (j.country_rank < d.country_rank) \nOR d.country is NULL\n\n```", "```py\nSELECT customers.id,\n   \tcustomers.first_name,\nFROM orders\nJOIN customers ON customers.id = orders.cust_id\n\n```", "```py\nSELECT customers.id,\n   \tcustomers.first_name,\n   \tSUM(total_order_cost)\nFROM orders\nJOIN customers ON customers.id = orders.cust_id\nGROUP BY customers.id,\n     \tcustomers.first_name\nORDER BY customers.first_name ASC;\n\n```", "```py\nSELECT customers.id,\n   \tcustomers.first_name,\n   \tSUM(total_order_cost)\nFROM orders\nJOIN customers ON customers.id = orders.cust_id\nGROUP BY customers.id,\n     \tcustomers.first_name\nORDER BY customers.first_name ASC;\n\n```", "```py\nSELECT mails.to_user,\n      \tlabels.label,\n      \tCOUNT(*) AS cnt\n   FROM google_gmail_emails mails\n   INNER JOIN google_gmail_labels labels ON mails.id = labels.email_id\n   GROUP BY mails.to_user,\n        \tlabels.label\n\n```", "```py\nSELECT \n\tto_user, \nSUM(CASE\n           \t\tWHEN label = 'Promotion' THEN cnt\n           \tELSE 0\n       \t\t\tEND) AS promotion_count,\n   \tSUM(CASE\n           \tWHEN label = 'Social' THEN cnt\n           \t\tELSE 0\n       \tEND) AS social_count,\n   \tSUM(CASE\n           \tWHEN label = 'Shopping' THEN cnt\n           \t\tELSE 0\n       \tEND) AS shopping_count\nFROM (CODE BLOCK) \nGROUP BY to_user\nORDER BY to_user\n\n```", "```py\nSELECT \n\tto_user, \nSUM(CASE\n           \t\tWHEN label = 'Promotion' THEN cnt\n           \tELSE 0\n       \t\t\tEND) AS promotion_count,\n   \tSUM(CASE\n           \tWHEN label = 'Social' THEN cnt\n           \t\tELSE 0\n       \tEND) AS social_count,\n   \tSUM(CASE\n           \tWHEN label = 'Shopping' THEN cnt\n           \t\tELSE 0\n       \tEND) AS shopping_count\nFROM (SELECT mails.to_user,\n      \t\tlabels.label,\n      \t\tCOUNT(*) AS cnt\n \t  FROM google_gmail_emails mails\n   \tINNER JOIN google_gmail_labels labels ON mails.id = labels.email_id\n   \tGROUP BY mails.to_user,\n        \t\tlabels.label) \nGROUP BY to_user\nORDER BY to_user\n\n```"]