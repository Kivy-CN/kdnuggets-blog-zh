- en: 'Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/03/distance-metrics-euclidean-manhattan-minkowski-oh.html](https://www.kdnuggets.com/2023/03/distance-metrics-euclidean-manhattan-minkowski-oh.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!](../Images/38926b26a469bc32f4997a6c0967aed9.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: If you’re familiar with machine learning, you know that data points in the data
    set and the subsequently engineered features are all points (or vectors) in an
    n-dimensional space.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The distance between any two points also captures the similarity between them.
    Supervised learning algorithms such as K Nearest Neighbors (KNN) and clustering
    algorithms like K-Means Clustering use the notion of *distance metrics* to capture
    the *similarity* between data points.
  prefs: []
  type: TYPE_NORMAL
- en: In clustering, the evaluated distance metric is used to group data points together.
    Whereas, in  KNN, this distance metric is used to find the K closest points to
    the given data point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we’ll review the properties of distance metrics and then look
    at the most commonly used distance metrics: Euclidean, Manhattan and Minkowski.
    We’ll then cover how to compute them in Python using built-in functions from the
    scipy module.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s begin!
  prefs: []
  type: TYPE_NORMAL
- en: Properties of Distance Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we learn about the various distance metrics, let''s review the properties
    that any distance metric in a metric space should satisfy [1]:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Symmetry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If **x** and **y** are two points in a metric space, then the distance between 
    **x** and **y** should be equal to the distance between  **y** and **x**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/8d0181c4a4367ba172f66ecef1b3a6cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. Non-negativity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Distances should always be non negative. Meaning it should be greater than or
    equal to zero.
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/0ba509fa3edd8991880e13078fe4bd56.png)'
  prefs: []
  type: TYPE_IMG
- en: The above inequality holds with equality (d(**x**,**y**) = 0) if and only if 
    **x** and **y** denote the same point, i.e., **x = y**.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Triangle Inequality
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Given three points **x**, **y**, and **z,** the distance metric should satisfy
    the triangle inequality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/b3a6dafbe1e4b28fb98eeeb9580dc33b.png)'
  prefs: []
  type: TYPE_IMG
- en: Euclidean Distance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Euclidean distance is the shortest distance between any two points in a metric
    space. Consider two points **x** and **y** in  a two-dimensional plane with coordinates
    (x1, x2) and (y1, y2), respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Euclidean distance between **x** and **y** is shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!](../Images/ac9ed2ea51c21ef49048747ff9ea279f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'This distance is given by the square root of the sum of the squared differences
    between the corresponding coordinates of the two points. Mathematically, the Euclidean
    distance between the points **x** and **y** in two-dimensional plane is given
    by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/ee199019fe32a9fd034dfe08f9ba9122.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Extending to n dimensions, the points **x** and **y** are of the form **x**
    = (x1, x2, …, xn) and **y** = (y1, y2, …, yn), we have the following equation
    for Euclidean distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/7d942f99d6ad7911c908cafe35a12944.png)'
  prefs: []
  type: TYPE_IMG
- en: Computing Euclidean Distance in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Euclidean distance and the other distance metrics in that article can be
    computed using convenience functions from the **spatial** module in SciPy.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a first step, let’s import `distance` from Scipy’s `spatial` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We then initialize two points **x** and **y** like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can use the `euclidean` convenience function to find the Euclidean distance
    between the points **x** and **y:**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Manhattan Distance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Manhattan distance, also called **taxicab** distance or **cityblock** distance,
    is another popular distance metric. Suppose you’re inside a two-dimensional plane
    and you can move only along the axes as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!](../Images/e8c72474c3378160747be420118de38b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'The Manhattan distance between the points **x** and **y** is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/a9b095bdeb86be7123d0015342aef152.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In n-dimensional space, where each point has n coordinates, the Manhattan distance
    is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/87408c4405d70ffde5dcfb28bc98a09b.png)'
  prefs: []
  type: TYPE_IMG
- en: Though the Manhattan distance does not give the shortest distance between any
    two given points, it is often preferred in applications where the feature points
    are located in a high-dimensional space [3].
  prefs: []
  type: TYPE_NORMAL
- en: Computing Manhattan Distance in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We retain the import and x and y from the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To compute the Manhattan (or cityblock) distance, we can use the `cityblock`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Minkowski Distance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Named after the German mathematician, Hermann Minkowski [2], the Minkowski
    distance in a normed vector space is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/720f5d75534f0f54e71e72ae9fdaa633.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is pretty straightforward to see that for **p = 1**, the Minkowski distance
    equation takes the same form as that of Manhattan distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/87408c4405d70ffde5dcfb28bc98a09b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, for **p = 2**, the Minkowski distance is equivalent to the Euclidean
    distance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Distance Metrics: Euclidean, Manhattan, Minkowski, Oh My!X](../Images/c7080aa7afdcbc73f52ec454da6dbbcb.png)'
  prefs: []
  type: TYPE_IMG
- en: Computing Minkowski Distance in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s compute the Minkowski distance between the points **x** and **y**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the points (arrays) between which the distance is to be calculated,
    the `minkowski` function to compute the distance also takes in the parameter `p`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To verify if Minkowski distance evaluates to Manhattan distance for p =1, let’s
    call `minkowski` function with `p` set to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s also verify that Minkowski distance for p = 2 evaluates to the Euclidean
    distance we computed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: And that’s a wrap! If you’re familiar with normed vector spaces, you should
    be able to see similarity between the distance metrics discussed here and Lp norms.
    The Euclidean, Manhattan, and Minkowski distances are equivalent to the L2, L1,
    and Lp norms of the difference vector in a normed vector space.
  prefs: []
  type: TYPE_NORMAL
- en: Summing Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's all for this tutorial. I hope you’ve now gotten the hang of the common
    distance metrics. As a next step, you can try playing around with the different
    metrics you’ve learned the next time you train machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re looking to get started with data science, check out this l[ist of
    GitHub repositories to learn data science](/2022/12/learn-data-science-github-repositories.html).
    Happy learning!
  prefs: []
  type: TYPE_NORMAL
- en: References and Further Reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[1] [Metric Spaces](https://mathworld.wolfram.com/MetricSpace.html), Wolfram
    Mathworld'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] [Minkowski Distance](https://en.wikipedia.org/wiki/Minkowski_distance),
    Wikipedia'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] [On the Surprising Behavior of Distance Metrics in High Dimensional Space](https://bib.dbvis.de/uploadedFiles/155.pdf),
    CC Agarwal et al.'
  prefs: []
  type: TYPE_NORMAL
- en: '[4] [SciPy Distance Functions](https://docs.scipy.org/doc/scipy/reference/spatial.distance.html),
    SciPy Docs'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a technical
    writer who enjoys creating long-form content. Her areas of interest include math,
    programming, and data science. She shares her learning with the developer community
    by authoring tutorials, how-to guides, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Classification Metrics Walkthrough: Logistic Regression with…](https://www.kdnuggets.com/2022/10/classification-metrics-walkthrough-logistic-regression-accuracy-precision-recall-roc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Evolution of Speech Recognition Metrics](https://www.kdnuggets.com/2022/10/evolution-speech-recognition-metrics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring Unsupervised Learning Metrics](https://www.kdnuggets.com/2023/04/exploring-unsupervised-learning-metrics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Evaluation Metrics: Theory and Overview](https://www.kdnuggets.com/machine-learning-evaluation-metrics-theory-and-overview)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Classification Metrics: Your Guide to Assessing Model…](https://www.kdnuggets.com/understanding-classification-metrics-your-guide-to-assessing-model-accuracy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
