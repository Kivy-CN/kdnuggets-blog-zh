["```py\n\nconda install -c nvidia -c rapidsai -c numba -c conda-forge -c pytorch -c defaults cudf=0.8 cuml=0.8 cugraph=0.8 python=3.6 cudatoolkit=10.0\n\n```", "```py\n\nimport os\nimport matplotlib.pyplot as plt\nfrom matplotlib.colors import ListedColormap\nfrom sklearn.datasets import make_circles\n\n```", "```py\n\nX, y = make_circles(n_samples=int(1e5), factor=.35, noise=.05)\nX[:, 0] = 3*X[:, 0]\nX[:, 1] = 3*X[:, 1]\nplt.scatter(X[:, 0], X[:, 1])\nplt.show()\n\n```", "```py\n\nfrom sklearn.cluster import DBSCAN\ndb = DBSCAN(eps=0.6, min_samples=2)\n\n```", "```py\n\n%%time\ny_db = db.fit_predict(X)\n\n```", "```py\n\nimport pandas as pd\nimport cudf\n\nX_df = pd.DataFrame({'fea%d'%i: X[:, i] for i in range(X.shape[1])})\nX_gpu = cudf.DataFrame.from_pandas(X_df)\n\n```", "```py\n\nfrom cuml import DBSCAN as cumlDBSCAN\n\ndb_gpu = cumlDBSCAN(eps=0.6, min_samples=2)\n\n```", "```py\n\n%%time\ny_db_gpu = db_gpu.fit_predict(X_gpu)\n```", "```py\n\nimport numpy as np\n\nn_rows, n_cols = 10000, 100\nX = np.random.rand(n_rows, n_cols)\nprint(X.shape)\n\nX_df = pd.DataFrame({'fea%d'%i: X[:, i] for i in range(X.shape[1])})\nX_gpu = cudf.DataFrame.from_pandas(X_df)\n\ndb = DBSCAN(eps=3, min_samples=2)\ndb_gpu = cumlDBSCAN(eps=3, min_samples=2)\n\n%%time\ny_db = db.fit_predict(X)\n\n%%time\ny_db_gpu = db_gpu.fit_predict(X_gpu)\n\n```"]