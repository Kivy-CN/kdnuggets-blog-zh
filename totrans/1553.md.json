["```py\nimport pandas as pd\nimport sklearn.svm, sklearn.metrics\n\ndef get_data():\n    data = download_data()\n    data = clean_data(data)\n    data.to_pickle('data.pkl')\n\ndef preprocess(data):\n    data = apply_function(data)\n    return data\n\n# flow parameters\nreload_source = True\ndo_preprocess = True\n\n# run workflow\nif reload_source:\n    get_data()\n\ndf_train = pd.read_pickle('data.pkl')\nif do_preprocess:\n    df_train = preprocess(df_train)\nmodel = sklearn.svm.SVC()\nmodel.fit(df_train.iloc[:,:-1], df_train['y'])\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))\n```", "```py\ndef process_data(data, parameter):\n\n    if parameter:\n        data = do_stuff(data)\n    else:\n        data = do_other_stuff(data)\n\n    data.to_pickle('data.pkl')\n    return data\n```", "```py\nclass TaskProcess(d6tflow.tasks.TaskPqPandas): # define output format\n\n    def requires(self):\n        return TaskGetData() # define dependency\n\n    def run(self):\n        data = self.input().load() # load input data\n        data = do_stuff(data) # process data\n        self.save(data) # save output data\n```", "```py\nimport pandas as pd\nimport sklearn, sklearn.svm\nimport d6tflow\nimport luigi\n\n# define workflow\nclass TaskGetData(d6tflow.tasks.TaskPqPandas):  # save dataframe as parquet\n\n    def run(self):\n        data = download_data()\n        data = clean_data(data)\n        self.save(data) # quickly save dataframe\n\nclass TaskPreprocess(d6tflow.tasks.TaskCachePandas):  # save data in memory\n    do_preprocess = luigi.BoolParameter(default=True) # parameter for preprocessing yes/no\n\n    def requires(self):\n        return TaskGetData() # define dependency\n\n    def run(self):\n        df_train = self.input().load() # quickly load required data\n        if self.do_preprocess:\n            df_train = preprocess(df_train)\n        self.save(df_train)\n\nclass TaskTrain(d6tflow.tasks.TaskPickle): # save output as pickle\n    do_preprocess = luigi.BoolParameter(default=True)\n\n    def requires(self):\n        return TaskPreprocess(do_preprocess=self.do_preprocess)\n\n    def run(self):\n        df_train = self.input().load()\n        model = sklearn.svm.SVC()\n        model.fit(df_train.iloc[:,:-1], df_train['y'])\n        self.save(model)\n\n# Check task dependencies and their execution status\nd6tflow.preview(TaskTrain())\n\n'''\n└─--[TaskTrain-{'do_preprocess': 'True'} (PENDING)]\n   └─--[TaskPreprocess-{'do_preprocess': 'True'} (PENDING)]\n      └─--[TaskGetData-{} (PENDING)]\n'''\n\n# Execute the model training task including dependencies\nd6tflow.run(TaskTrain())\n\n'''\n===== Luigi Execution Summary =====\n\nScheduled 3 tasks of which:\n* 3 ran successfully:\n    - 1 TaskGetData()\n    - 1 TaskPreprocess(do_preprocess=True)\n    - 1 TaskTrain(do_preprocess=True)\n'''\n\n# Load task output to pandas dataframe and model object for model evaluation\nmodel = TaskTrain().output().load()\ndf_train = TaskPreprocess().output().load()\nprint(sklearn.metrics.accuracy_score(df_train['y'],model.predict(df_train.iloc[:,:-1])))\n# 0.9733333333333334\n```"]