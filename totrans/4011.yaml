- en: Exploring Natural Sorting in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/exploring-natural-sorting-in-python](https://www.kdnuggets.com/exploring-natural-sorting-in-python)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![natsort](../Images/d6abe96d6dbba0e1997ba250e5355cd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: What Is Natural Sorting, And Why Do We Need It?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: When working with Python iterables such as lists, sorting is a common operation
    you’ll perform. To sort lists you can use the list method `sort()` to sort a list
    in place or the `sorted()` function that returns a sorted list.
  prefs: []
  type: TYPE_NORMAL
- en: The `sorted()` function works fine when you have a list of numbers or strings
    containing letters. But what about strings containing alphanumeric characters,
    such as filenames, directory names, version numbers, and more? The `sorted()`
    function performs lexicographic sorting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at this simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You''ll get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Well, 'file10.txt' comes before 'file2.txt' in the output. Not the intuitive
    sorting order we’re hoping for. This is because the `sorted()` function uses the
    ASCII values of the characters to sort and not the numeric values. **Enter natural
    sorting**.
  prefs: []
  type: TYPE_NORMAL
- en: Natural sorting is a sorting technique that arranges elements in a way that
    reflects their natural order, particularly for alphanumeric data. Unlike lexicographic
    sorting, natural sorting interprets the numerical value of digits within strings
    and arranges them accordingly, resulting in a more meaningful and expected sequence.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we’ll explore natural sorting with the Python library [natsort](https://pypi.org/project/natsort/).
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, you can install the `natsort` library using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As a best practice, install the required package in a virtual environment for
    the project. Because natsort requires Python 3.7 or later, make sure you’re using
    a recent Python version, preferably Python 3.11 or later. To learn how to manage
    different Python versions, read [Too Many Python Versions to Manage? Pyenv to
    the Rescue](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue).
  prefs: []
  type: TYPE_NORMAL
- en: Natural Sorting Basic Examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll start with simple use cases where natural sorting is beneficial:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorting file names: When working with file names containing digits, natural
    sorting ensures that files are ordered in the natural intuitive order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Version sorting: Natural sorting is also helpful for ordering strings of version
    numbers, ensuring that versions are sorted based on their numerical values rather
    than their ASCII values. Which might not reflect the desired versioning sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let's proceed to code these examples.
  prefs: []
  type: TYPE_NORMAL
- en: Sorting Filenames
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we’ve installed the natsort library, we can import it into our Python
    script and use the different functions that the library offers.
  prefs: []
  type: TYPE_NORMAL
- en: Let's revisit the first example of sorting file names (the one we saw at the
    beginning of the tutorial) where the lexicographic sorting with the function was
    not what we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s sort the same list using the `natsorted()` function like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, `natsorted()` function from the natsort library is used to
    sort the list of file names naturally. As a result, the file names are arranged
    in the expected numerical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Sorting Version Numbers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s take another similar example where we have strings denoting versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `natsorted()` function is applied to sort the list of version numbers
    naturally. The resulting sorted list maintains the correct numerical order of
    the versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Customizing Sorting with a Key
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When using the built-in `sorted()` function, you might have used the `key` parameter
    to customize. Similarly, the `sorted()` function also takes the optional `key`
    parameter which you can use to sort based on specific criteria.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take an example: we have `file_data` which is the list of tuples. The
    first element in the tuple (at index 0) is the file name and the second item (at
    index 1) is the size of the file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we want to sort based on the file size in ascending order. So we set the
    `key` parameter to `lambda x: x[1]` so that the file size at index 1 is used as
    the sorting key:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Case-Insensitive Sorting of Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another use case where natural sorting is helpful is when you need case-insensitive
    sorting of strings. Again the lexicographic sorting based on ASCII values will
    not give the desired results.
  prefs: []
  type: TYPE_NORMAL
- en: 'To perform case-insensitive sorting, we can set `alg` to `natsort.ns.IGNORECASE`
    which will ignore the case when sorting. The `alg` key controls the algorithm
    that `natsorted()` uses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the list of words with mixed case is sorted naturally with case-insensitivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And that's a wrap! In this tutorial, we reviewed the limitations of lexicographic
    sorting and how natural sorting can be a good alternative when working with alphanumeric
    strings. You can find all the code on [GitHub](https://github.com/balapriyac/python-basics/tree/main/natural-sorting).
  prefs: []
  type: TYPE_NORMAL
- en: We started with simple examples and also looked at sorting based on custom keys
    and handling case-insensitive sorting in Python. Next, you may explore [other
    capabilities of the natsort library](https://natsort.readthedocs.io/en/5.1.0/).
    I’ll see you all soon in another Python tutorial. Until then, keep coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Exploring Data Cleaning Techniques With Python](https://www.kdnuggets.com/2023/04/exploring-data-cleaning-techniques-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring Infinite Iterators in Python''s itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring the OpenAI API with Python](https://www.kdnuggets.com/exploring-the-openai-api-with-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[25 Free Books to Master SQL, Python, Data Science, Machine…](https://www.kdnuggets.com/25-free-books-to-master-sql-python-data-science-machine-learning-and-natural-language-processing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring Tree of Thought Prompting: How AI Can Learn to Reason…](https://www.kdnuggets.com/2023/07/exploring-tree-of-thought-prompting-ai-learn-reason-through-search.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring the Power and Limitations of GPT-4](https://www.kdnuggets.com/2023/07/exploring-power-limitations-gpt4.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
