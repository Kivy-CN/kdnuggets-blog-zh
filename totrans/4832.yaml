- en: Packaging and Distributing Your Python Project to PyPI for Installation Using
    pip
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的 Python 项目打包并分发到 PyPI 以便通过 pip 安装
- en: 原文：[https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html/2](https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html/2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html/2](https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html/2)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/06/packaging-distributing-python-project-pypi-pip.html?page=2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2018/06/packaging-distributing-python-project-pypi-pip.html?page=2#comments)'
- en: 5\. Preparing the Package and its Files (__init__.py and setup.py)
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 准备包及其文件（__init__.py 和 setup.py）
- en: The first step is to structure the package and its files. The structure of the
    package will be as shown in figure 7.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是结构化包及其文件。包的结构如图 7 所示。
- en: '**Figure 7**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 7**'
- en: '![](../Images/3e79a16b2a55e626e64e60ccef3729e0.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3e79a16b2a55e626e64e60ccef3729e0.png)'
- en: There is a root directory holding all files and directories of the package.
    Inside that root directory, there is another directory named “**printmsg**” that
    holds the actual module. Such module is what holds the Python code of our project
    to be imported later after being installed.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目录的根目录包含了包的所有文件和目录。在根目录下，还有一个名为“**printmsg**”的目录，其中包含了实际的模块。该模块包含了我们的项目的 Python
    代码，这些代码在安装后会被导入。
- en: For our simple example, the minimal files required will be used which are **__init__.py** and **setup.py** in
    addition to the actual project file **print_msg_file.py**. Next is to prepare
    these files.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的简单示例，将使用所需的最小文件，即 **__init__.py** 和 **setup.py**，以及实际项目文件 **print_msg_file.py**。接下来是准备这些文件。
- en: 5.1 __init__.py
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.1 __init__.py
- en: The first file to prepare is the **__init__.py** file. The main use of this
    file is to allow Python treat the directory as a package. When the package has
    the **__init__.py** file, the package can be imported as a regular library after
    being installed by either installer. Just its existence is enough even if empty.
    You might wonder why it is now required despite being not required when the library
    installed manually in step 3\. The answer is that the installer will not know
    that the directory is a package without the **__init__.py** file. That is why
    it will not fetch the library Python files (**print_msg_file.py**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个需要准备的文件是 **__init__.py** 文件。这个文件的主要用途是允许 Python 将目录视为一个包。当包中有 **__init__.py**
    文件时，包可以像普通库一样被导入，无论是通过哪个安装程序安装。即使文件为空，它的存在也足够。你可能会好奇为什么现在需要这个文件，而在第 3 步中手动安装库时不需要。答案是安装程序不会知道目录是一个包，如果没有
    **__init__.py** 文件。因此，它不会提取库的 Python 文件（**print_msg_file.py**）。
- en: After installing the library in Windows while using the **__init__.py** file,
    there are two folders generated in the site-packages directory (“**printmsg-1.4.dist-info**”
    and “**printmsg**”) as in figure 8\. The “**printmsg**” folder is what holds the
    Python files to be imported later. If the **__init__.py** file is not used, then
    the “**printmsg**” folder will not be found. As a result, it will become impossible
    to use the Python code because it will missing.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装库时，使用 **__init__.py** 文件后，在 site-packages 目录中会生成两个文件夹（“**printmsg-1.4.dist-info**”和“**printmsg**”），如图
    8 所示。“**printmsg**” 文件夹包含了待导入的 Python 文件。如果不使用 **__init__.py** 文件，那么将找不到“**printmsg**”
    文件夹。结果，将无法使用 Python 代码，因为它将缺失。
- en: '**Figure 8**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 8**'
- en: '![](../Images/09de1c6684d0a3656ec1a6c3c7ee0ffd.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09de1c6684d0a3656ec1a6c3c7ee0ffd.png)'
- en: Besides telling Python that the directory is a Python package, the **__init__.py** file
    is the first file to be loaded when the module is imported and thus can do initializations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 除了告诉 Python 目录是一个 Python 包之外，**__init__.py** 文件是模块导入时第一个被加载的文件，因此可以进行初始化。
- en: 5.2 setup.py
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5.2 setup.py
- en: After marking the directory as a package using the **__init__.py** file, next
    is to add more details about the package. This is why the **setup.py** file is
    used. The **setup.py** script is what gives details about your project such as
    what dependencies required to make your project running. This script uses the
    **setuptools** distribution tool for building the distribution files to be uploaded
    later to PyPI. Here is the content of the setup.py file in order to distribute
    the project.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 **__init__.py** 文件将目录标记为包之后，接下来是添加有关包的更多详细信息。这就是 **setup.py** 文件的用途。**setup.py**
    脚本提供了有关项目的详细信息，例如运行项目所需的依赖项。该脚本使用 **setuptools** 分发工具来构建分发文件，以便稍后上传到 PyPI。以下是用于分发项目的
    setup.py 文件内容。
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: That file contains a number of fields that holds details such as **name** of
    the package, **version**, **author**, **author_email**, short **description**
    to appear on PyPI, and others. There are many other fields that could be used
    based on your needs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含多个字段，记录了如**name**（包名）、**version**（版本）、**author**（作者）、**author_email**（作者邮箱）、简短的**description**（描述）等细节，这些将在
    PyPI 上显示，还有其他字段可以根据需要使用。
- en: Note that the package name is used currently in two positions. One time for
    the module directory and another here in the setup.py file. Is they must be equivalent?
    Answer is NO. Each one has its own job but there is no dependency between them.
    The name used in the **setup.py** file is the name to be used when installing
    the package. The name of the directory is the name used to import the module.
    If they are different, then the package will be installed by a name and imported
    by a different name. There should be consistency between these two names to avoid
    confusing package users.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，包名在当前有两个位置使用。一是模块目录，另一个是在 setup.py 文件中。它们必须相同吗？答案是否定的。每个名称有其自身的作用，但两者之间没有依赖关系。**setup.py**文件中使用的名称是安装包时使用的名称。目录的名称是导入模块时使用的名称。如果它们不同，则包将以一个名称安装，以另一个名称导入。为了避免混淆包用户，这两个名称之间应保持一致。
- en: 6\. Distributing the Package
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 分发包
- en: 'After preparing the package, we are ready to distribute it. Before actual distribution,
    we should make sure that the dependencies required are already existing. To distribute
    the project, **setuptools** and **wheel** projects are required to be installed.
    **wheel** project is used to generate **wheel** distribution format. Make sure
    they are installed and updated as in figure 9 according to this command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好包后，我们可以分发它。在实际分发之前，我们应该确保所需的依赖项已经存在。要分发项目，需要安装**setuptools**和**wheel**项目。**wheel**项目用于生成**wheel**分发格式。确保它们已安装并更新，如图
    9 所示，根据此命令：
- en: '**ahmed-gad@ubuntu:~/Desktop/root $ pip install –upgrade setuptools wheel**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**ahmed-gad@ubuntu:~/Desktop/root $ pip install –upgrade setuptools wheel**'
- en: '**Figure 9**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Figure 9**'
- en: '![](../Images/82d567d217c3377c430e585379a82780.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/82d567d217c3377c430e585379a82780.png)'
- en: Then we can distribute the package by running the **setup.py** file as in figure
    10\. After opening the terminal, make the root of the package the current directory
    then execute the **setup.py** file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过运行**setup.py**文件来分发包，如图 10 所示。打开终端后，将包的根目录设置为当前目录，然后执行**setup.py**文件。
- en: '**ahmed-gad@ubuntu:~/Desktop/root$ python3 setup.py sdist bdist_wheel**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**ahmed-gad@ubuntu:~/Desktop/root$ python3 setup.py sdist bdist_wheel**'
- en: '**sdist** is used to generate a source distribution format while **bdist_wheel** generates
    wheel built distribution format. Both of such distributions are provided for compatibility
    with different users.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**sdist**用于生成源代码分发格式，而**bdist_wheel**生成轮子构建分发格式。这两种分发格式都为不同用户的兼容性提供支持。'
- en: '**Figure 10**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**Figure 10**'
- en: '![](../Images/28b0d772ae72811552b8c7e342a1583d.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/28b0d772ae72811552b8c7e342a1583d.png)'
- en: After executing the **setup.py** file, it is expected to get some new directories
    inside the root of the package. The files and directories inside the root are
    shown in figure 11.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 执行**setup.py**文件后，预期在包的根目录下会生成一些新目录。根目录中的文件和目录如图 11 所示。
- en: '**Figure 11**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**Figure 11**'
- en: '![](../Images/d83914df550d91fff07408e0a3dcdd82.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d83914df550d91fff07408e0a3dcdd82.png)'
- en: The most important folder is the **dist** folder because it contains the distribution
    files which will be uploaded to PyPI. Its content are presented in figure 12\.
    It contains the **.whl** file which is the build distribution and also the source
    distribution **.tar.gz** file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的文件夹是**dist**文件夹，因为它包含将上传到 PyPI 的发行文件。其内容如图 12 所示。它包含**.whl**文件，即构建分发文件，还有源代码分发**.tar.gz**文件。
- en: '**Figure 12**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**Figure 12**'
- en: '![](../Images/997fe96ea11c4ffd0be1a1b6fa13562b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/997fe96ea11c4ffd0be1a1b6fa13562b.png)'
- en: After preparing the distribution files, next is to upload them to PyPI.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好发行文件后，接下来是将它们上传到 PyPI。
- en: 7\. Uploading the Distribution Files Online to Test PyPI
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7\. 将发行文件上传到测试 PyPI
- en: There are two Python package repositories to use. One of them for testing and
    experimentation which is Test PyPI (**test.pypi.org**) and another for real index
    which is PyPI (**pypi.org**). Their use is similar but we can start using Test
    PyPI.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个 Python 包仓库可供使用。其中一个用于测试和实验，即 Test PyPI (**test.pypi.org**)，另一个用于真实索引，即 PyPI
    (**pypi.org**)。它们的使用类似，但我们可以先使用 Test PyPI。
- en: Before uploading to Test PyPI, you should register yourself to get a username
    and password for uploading your packages. Just register by your active e-mail
    address where a confirmation will be received to activate your account. Registration
    link is [https://test.pypi.org/account/register/](https://test.pypi.org/account/register/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'After registration is complete, we can use **twine** utility for uploading
    package distributions to Test PyPI. You should make sure it is installed and upgraded
    according to the following command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**ahmed-gad@ubuntu:~/Desktop/root $ pip install –upgrade twine**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it is installed, you can upload packages to Test PyPI. Open the terminal
    and make sure you are currently on the root of the package and issue the following
    command:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**ahmed-gad@ubuntu:~/Desktop/root $ twine upload --repository-url https://test.pypi.org/legacy/
    dist/***'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: You will be asked to enter your Test PyPI username and password. Once you are
    verified, upload will start. The result is shown in figure 13.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 13**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca438b42e923857b0d7a2cfcbc96212a.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: After uploading the files successfully, you can open your profile at Test PyPI
    to see your uploaded projects. Figure 14 shows that the **printmsg** project is
    successfully become live. Note that the value used for the description field inside **setup.py** file
    is now appearing on the repository.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 14**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ce3ef373268516ee3cb3b23eb00c9b42.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: 8\. Installing the Distributed Package from Test PyPI
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Reaching this point, you have successfully packaged and distributed your Python
    project. It is available now for download by any user connected to the Internet.
    To install the project using pip, just issue the following command. The result
    is shown in figure 15.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**ahmed-gad@ubuntu:~/Desktop/root $ pip install --index-url https://test.pypi.org/simple/
    printmsg**'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 15**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/75bbac3dfdbeb91499cedca421c42ffd.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: 9\. Importing and Using the Installed Package
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After installing the project, it can be imported. The following two lines entered
    previously can be now executed. The difference is using the package installed
    from Test PyPI not manually installed. The result is identical to what shown in
    figure 4.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 10\. Using PyPI rather than Test PyPI
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you decided to put your project in the real PyPI, then you will just repeat
    the previous steps with little changes. At first you have to register in [https://pypi.org/](https://pypi.org/) and
    get a username and a password. I do not want to say you have to register **AGAIN** because
    registration in Test PyPI is different from registration in PyPI.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'The first change is not using the **--repository-url** option with **twine** because
    PyPI is the default repository for uploading packages. So, the command required
    will be as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**ahmed-gad@ubuntu:~/Desktop/root $ twine upload dist/***'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, the second change is omitting the **--index-url** option with **pip** for
    the same reason (PyPI is the default repository when installing a package).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，第二个更改是出于相同原因省略**--index-url**选项和**pip**（PyPI 是安装包时的默认仓库）。
- en: '**ahmed-gad@ubuntu:~/Desktop/root $ pip install printmsg**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**ahmed-gad@ubuntu:~/Desktop/root $ pip install printmsg**'
- en: '**Bio: [Ahmed Gad](https://www.linkedin.com/in/ahmedfgad/)** received his B.Sc.
    degree with excellent with honors in information technology from the Faculty of
    Computers and Information (FCI), Menoufia University, Egypt, in July 2015\. For
    being ranked first in his faculty, he was recommended to work as a teaching assistant
    in one of the Egyptian institutes in 2015 and then in 2016 to work as a teaching
    assistant and a researcher in his faculty. His current research interests include
    deep learning, machine learning, artificial intelligence, digital signal processing,
    and computer vision.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Ahmed Gad](https://www.linkedin.com/in/ahmedfgad/)** 于 2015 年 7 月获得埃及门努非亚大学计算机与信息学院信息技术学士学位，成绩优异并获得荣誉。由于在学院中排名第一，他被推荐在
    2015 年在一家埃及机构担任助教，并在 2016 年继续在学院担任助教和研究员。他目前的研究兴趣包括深度学习、机器学习、人工智能、数字信号处理和计算机视觉。'
- en: '[Original](https://www.linkedin.com/pulse/packaging-distributing-your-python-project-pypi-installation-gad/).
    Reposted with permission.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.linkedin.com/pulse/packaging-distributing-your-python-project-pypi-installation-gad/)。经许可转载。'
- en: '**Related:**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Complete Guide to Build ConvNet HTTP-Based Application using TensorFlow and
    Flask RESTful Python API](/2018/05/complete-guide-convnet-tensorflow-flask-restful-python-api.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建基于 HTTP 的 ConvNet 应用程序的完整指南，使用 TensorFlow 和 Flask RESTful Python API](/2018/05/complete-guide-convnet-tensorflow-flask-restful-python-api.html)'
- en: '[Building Convolutional Neural Network using NumPy from Scratch](/2018/04/building-convolutional-neural-network-numpy-scratch.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 NumPy 从零开始构建卷积神经网络](/2018/04/building-convolutional-neural-network-numpy-scratch.html)'
- en: '[Introduction to Optimization with Genetic Algorithm](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[遗传算法优化简介](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织 IT'
- en: '* * *'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Pip Install YOU: A Beginner''s Guide to Creating Your Python Library](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pip Install YOU：创建您的 Python 库的初学者指南](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)'
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[忘掉 PIP、Conda 和 requirements.txt！改用 Poetry 并……](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
- en: '[Managing Python Dependencies with Poetry vs Conda & Pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Poetry 与 Conda 和 Pip 管理 Python 依赖项](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
- en: '[How to Create a Sampling Plan for Your Data Project](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何为您的数据项目创建抽样计划](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
- en: '[Orchestrate a Data Science Project in Python With Prefect](https://www.kdnuggets.com/2022/02/orchestrate-data-science-project-python-prefect.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Prefect 在 Python 中编排数据科学项目](https://www.kdnuggets.com/2022/02/orchestrate-data-science-project-python-prefect.html)'
- en: '[Free Python Project Coding Course](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[免费 Python 项目编码课程](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
