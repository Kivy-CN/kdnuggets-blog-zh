- en: Streamline Your Machine Learning Workflow with Scikit-learn Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/streamline-your-machine-learning-workflow-with-scikit-learn-pipelines](https://www.kdnuggets.com/streamline-your-machine-learning-workflow-with-scikit-learn-pipelines)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/2c07f2e6c45bd747dbb667658e74d496.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Using Scikit-learn pipelines can simplify your preprocessing and modeling steps,
    reduce code complexity, ensure consistency in data preprocessing, help with hyperparameter
    tuning, and make your workflow more organized and easier to maintain. By integrating
    multiple transformations and the final model into a single entity, Pipelines enhance
    reproducibility and make everything more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will be working with the [Bank Churn](https://www.kaggle.com/datasets/rangalamahesh/bank-churn?select=train.csv)
    dataset from Kaggle to train a Random Forest Classifier. We will compare the conventional
    approach of data preprocessing and model training with a more efficient method
    using Scikit-learn pipelines and ColumnTransformers.
  prefs: []
  type: TYPE_NORMAL
- en: Data Processing Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the data processing pipeline, we will learn how to transform both categorical
    and numerical columns individually. We will start with a traditional style of
    code and then show a better way to perform similar processing.
  prefs: []
  type: TYPE_NORMAL
- en: After extracting the data from the zip file, load the `train.csv` file with
    “id” as the index column. Drop unnecessary columns and shuffle the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We have categorical, integer, and float columns. The dataset looks pretty clean.
  prefs: []
  type: TYPE_NORMAL
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/39cabe76a0d32a591c3e21afc3efa379.png)'
  prefs: []
  type: TYPE_IMG
- en: Simple Scikit-learn Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As a data scientist, I have written this code multiple times. Our objective
    is to fill in the missing values for both categorical and numerical features.
    To achieve this, we will use a `SimpleImputer` with different strategies for each
    type of feature.
  prefs: []
  type: TYPE_NORMAL
- en: After the missing values are filled in, we will convert categorical features
    to integers and apply min-max scaling on numerical features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As a result, we got a dataset that is clean and transformed with only integer
    or float values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/a27edfcfb4081adc41a03bed8942bea0.png)'
  prefs: []
  type: TYPE_IMG
- en: Scikit-learn Pipelines Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s convert the above code using the `Pipeline` and `ColumnTransformer`. Instead
    of applying the preprocessing technique, we will create two pipelines. One is
    for numerical columns, and one is for categorical columns.
  prefs: []
  type: TYPE_NORMAL
- en: In the numerical pipeline, we have used a simple impute with a “mean” strategy
    and applied a min-max scaler for normalization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the categorical pipeline, we used the simple imputer with the “most_frequent“
    strategy and the original encoder to convert the categories into numerical values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We combined the two pipelines using the ColumnTransformer and provided each
    with the columns index. It will help you apply these pipelines on certain columns.
    For example, a categorical transformer pipeline will be applied to only columns
    1 and 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:**  the remainder="passthrough" means that the columns that have not
    been processed will be added in the end. In our case, it is the target column.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After the transformation, the resulting array contains numerical transform value
    at the start and categorical transform value at the end, based on the order of
    the pipelines in the column transformer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can run the pipeline object in the Jupyter Notebook to visualize the pipeline.
    Make sure you have the latest version of Scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/2a060e3204d137789f79a96ba7a7d13f.png)'
  prefs: []
  type: TYPE_IMG
- en: Data Training Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To train and evaluate our model, we need to split our dataset into two subsets:
    training and testing.'
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we will first create dependent and independent variables and convert
    them into NumPy arrays. Then, we will use the `train_test_split` function to split
    the dataset into two subsets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Simple Scikit-learn Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The conventional way of writing training code is to first perform feature selection
    using `SelectKBest` and then provide the new feature to our Random Forest Classifier
    model.
  prefs: []
  type: TYPE_NORMAL
- en: We will first train the model using the training set and evaluate the results
    using the testing dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We achieved a reasonably good accuracy score.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Scikit-learn Pipelines Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's use the `Pipeline` function to combine both training steps into a pipeline.
    We can then fit the model on the training set and evaluate it on the testing set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We achieved similar results, but the code appears to be more efficient and straightforward.
    It's quite easy to add or remove new steps from the training pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Run the pipeline object to visualize the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/3c5776c9a41fc5ee436f9e5d646dc350.png)'
  prefs: []
  type: TYPE_IMG
- en: Combining Processing & Training Pipelines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will combine both preprocessing and training pipeline by creating another
    pipeline and adding both pipelines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the complete code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing the complete pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/2d33c985665b1ba91e86992f793ef83e.png)'
  prefs: []
  type: TYPE_IMG
- en: Saving and Loading the Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the major advantages of using pipelines is that you can save the pipeline
    with the model. During inference, you only need to load the pipeline object, which
    will be ready to process the raw data and provide you with accurate predictions.
    You don't need to re-write the processing and transformation functions in the
    app file, as it will work out of the box. This makes the machine learning workflow
    more efficient and saves time.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s first save the pipeline using the [skops-dev/skops](https://github.com/skops-dev/skops)
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Then, load the saved pipeline and display the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we have successfully loaded the pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '![Streamline Your Machine Learning Workflow with Scikit-learn Pipelines](../Images/27b169009d71748fb062ca3d68a62271.png)'
  prefs: []
  type: TYPE_IMG
- en: To evaluate our loaded pipeline, we will make predictions on the test set and
    then calculate accuracy and F1 scores.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: It turns out we need to focus on minority classes to improve our f1 score.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The project files and code is available on [**Deepnote Workspace**](https://deepnote.com/workspace/abid-5efa63e7-7029-4c3e-996f-40e8f1acba6f/project/Streamline-Your-Machine-Learning-workflow-with-Scikit-learn-Pipelines-a2088a14-c9d1-490e-a610-c0e505b14282/notebook/With%20SKlearn%20Pipelines-49b6e41b5f1142fb8982dfbec4b1fb18).
    The workspace has two Notebooks: One with the Scikit-learn pipeline and one without
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we learned how Scikit-learn pipelines can help streamline
    machine learning workflows by chaining together sequences of data transforms and
    models. By combining preprocessing and model training into a single Pipeline object,
    we can simplify code, ensure consistent data transformations, and make our workflows
    more organized and reproducible.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.polywork.com/kingabzpro)****[Abid Ali Awan](https://www.polywork.com/kingabzpro)****
    ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan)) is a certified data
    scientist professional who loves building machine learning models. Currently,
    he is focusing on content creation and writing technical blogs on machine learning
    and data science technologies. Abid holds a Master''s degree in technology management
    and a bachelor''s degree in telecommunication engineering. His vision is to build
    an AI product using a graph neural network for students struggling with mental
    illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Easily Integrate LLMs into Your Scikit-learn Workflow with Scikit-LLM](https://www.kdnuggets.com/easily-integrate-llms-into-your-scikit-learn-workflow-with-scikit-llm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 GPTs to Help Improve Your Data Science Workflow](https://www.kdnuggets.com/7-gpts-to-help-improve-your-data-science-workflow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 MLOps Courses from Google to Level Up Your ML Workflow](https://www.kdnuggets.com/5-mlops-courses-from-google-to-level-up-your-ml-workflow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RAPIDS cuDF to Speed up Your Next Data Science Workflow](https://www.kdnuggets.com/2023/04/rapids-cudf-speed-next-data-science-workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 7 Best AI Tools for Data Science Workflow](https://www.kdnuggets.com/the-7-best-ai-tools-for-data-science-workflow)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unify Batch and ML Systems with Feature/Training/Inference Pipelines](https://www.kdnuggets.com/2023/09/hopsworks-unify-batch-ml-systems-feature-training-inference-pipelines)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
