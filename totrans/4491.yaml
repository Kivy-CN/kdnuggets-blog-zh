- en: Visualizing Decision Trees with Python (Scikit-learn, Graphviz, Matplotlib)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/04/visualizing-decision-trees-python.html](https://www.kdnuggets.com/2020/04/visualizing-decision-trees-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/), Data
    Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/fb382bbd316bf7f8b976fa63f307ca8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from my [Understanding Decision Trees for Classification (Python) Tutorial](https://towardsdatascience.com/understanding-decision-trees-for-classification-python-9663d683c952).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Decision trees are a popular supervised learning method for a variety of reasons.
    Benefits of decision trees include that they can be used for both regression and
    classification, they don’t require feature scaling, and they are relatively easy
    to interpret as you can visualize decision trees. This is not only a powerful
    way to understand your model, but also to communicate how your model works. Consequently,
    it would help to know how to make a visualization based on your model.
  prefs: []
  type: TYPE_NORMAL
- en: 'This tutorial covers:'
  prefs: []
  type: TYPE_NORMAL
- en: How to Fit a Decision Tree Model using Scikit-Learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Visualize Decision Trees using Matplotlib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Visualize Decision Trees using Graphviz (what is Graphviz, how to install
    it on Mac and Windows, and how to use it to visualize decision trees)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Visualize Individual Decision Trees from Bagged Trees or Random Forests®
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As always, the code used in this tutorial is available on my [GitHub](https://github.com/mGalarnyk/Python_Tutorials/blob/master/Sklearn/CART/Visualization/DecisionTreesVisualization.ipynb).
    With that, let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: How to Fit a Decision Tree Model using Scikit-Learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to visualize decision trees, we need first need to fit a decision tree
    model using scikit-learn. If this section is not clear, I encourage you to read
    my [Understanding Decision Trees for Classification (Python) tutorial](https://towardsdatascience.com/understanding-decision-trees-for-classification-python-9663d683c952) as
    I go into a lot of detail on how decision trees work and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Import Libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following import statements are what we will use for this section of the
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Load the Dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Iris dataset is one of datasets scikit-learn comes with that do not require
    the downloading of any file from some external website. The code below loads the
    iris dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/b0dad4c5d86a7accf90b27aa29f1cf59.png)'
  prefs: []
  type: TYPE_IMG
- en: Original Pandas df (features + target)
  prefs: []
  type: TYPE_NORMAL
- en: Splitting Data into Training and Test Sets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code below puts 75% of the data into a training set and 25% of the data
    into a test set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/9d5993aa8f78a54086dec8b135c7ee7b.png)'
  prefs: []
  type: TYPE_IMG
- en: The colors in the image indicate which variable (X_train, X_test, Y_train, Y_test)
    the data from the dataframe df went to for a particular train test split. Image
    by [Michael Galarnyk](https://twitter.com/GalarnykMichael).
  prefs: []
  type: TYPE_NORMAL
- en: Scikit-learn 4-Step Modeling Pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to Visualize Decision Trees using Matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As of scikit-learn version 21.0 (roughly May 2019), Decision Trees can now be
    plotted with matplotlib using scikit-learn’s `[**tree.plot_tree**](https://scikit-learn.org/stable/modules/generated/sklearn.tree.plot_tree.html#sklearn.tree.plot_tree)` without
    relying on the `dot` library which is a hard-to-install dependency which we will
    cover later on in the blog post.
  prefs: []
  type: TYPE_NORMAL
- en: The code below plots a decision tree using scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/b7e93c00e7ff79f78413d8a485d00751.png)'
  prefs: []
  type: TYPE_IMG
- en: This is not the most interpretable tree yet.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to adding the code to allow you to save your image, the code below
    tries to make the decision tree more interpretable by adding in feature and class
    names (as well as setting `filled = True`).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/0ce9a81306bca7e1509d042fd8999dc1.png)'
  prefs: []
  type: TYPE_IMG
- en: How to Visualize Decision Trees using Graphviz
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/31cfb0690b8025e8ab0056954eed2681.png)'
  prefs: []
  type: TYPE_IMG
- en: Decision Tree produced through Graphviz. Note that I edited the file to have
    text colors correspond to whether they are leaf/terminal nodes or decision nodes
    using a text editor.
  prefs: []
  type: TYPE_NORMAL
- en: '`Graphviz` is open source graph visualization software. Graph visualization
    is a way of representing structural information as diagrams of abstract graphs
    and networks. In data science, one use of `Graphviz` is to visualize decision
    trees. I should note that the reason why I am going over Graphviz after covering
    Matplotlib is that getting this to work can be difficult. The first part of this
    process involves creating a dot file. A dot file is a Graphviz representation
    of a decision tree. The problem is that using Graphviz to convert the dot file
    into an image file (png, jpg, etc) can be difficult. There are a couple ways to
    do this including: installing `python-graphviz` though Anaconda, installing Graphviz
    through Homebrew (Mac), installing Graphviz executables from the official site
    (Windows), and using an online converter on the contents of your dot file to convert
    it into an image.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ba1305b0404993219b0b3a4d38075251.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating the dot file is usually not a problem. Converting the dot file to a
    png file can be difficult.
  prefs: []
  type: TYPE_NORMAL
- en: Export your model to a dot file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The code below code will work on any operating system as python generates the
    dot file and exports it as a file named `tree.dot`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Installing and Using Graphviz
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Converting the dot file into an image file (png, jpg, etc) typically requires
    the installation of Graphviz which depends on your operating system and a host
    of other things. The goal of this section is to help people try and solve the
    common issue of getting the following error. `dot: command not found`.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/9989054c402acde650472d475716dbeb.png)'
  prefs: []
  type: TYPE_IMG
- en: '`dot: command not found`'
  prefs: []
  type: TYPE_NORMAL
- en: '**How to Install and Use on Mac through Anaconda**'
  prefs: []
  type: TYPE_NORMAL
- en: To be able to install Graphviz on your Mac through this method, you first need
    to have Anaconda installed (If you don’t have Anaconda installed, you can learn
    how to install it [here](https://www.datacamp.com/community/tutorials/installing-anaconda-mac-os-x)).
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal. You can do this by clicking on the Spotlight magnifying glass
    at the top right of the screen, type terminal and then click on the Terminal icon.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74de505821de993e49ce79a3f4a3dbbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Type the command below to install Graphviz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After that, you should be able to use the `dot` command below to convert the
    dot file into a png file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**How to Install and Use on Mac through Homebrew**'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have Anaconda or just want another way of installing Graphviz on
    your Mac, you can use [Homebrew](https://brew.sh/). I previously wrote an article
    on how to install Homebrew and use it to convert a dot file into an image file [here](https://medium.com/@GalarnykMichael/how-to-install-and-use-homebrew-80eeb55f73e9) (see
    the Homebrew to Help Visualize Decision Trees section of the tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: '**How to Install and Use on Windows through Anaconda**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the method I prefer on Windows. To be able to install Graphviz on your
    Windows through this method, you first need to have Anaconda installed (If you
    don’t have Anaconda installed, you can learn how to install it [here](https://medium.com/@GalarnykMichael/install-python-anaconda-on-windows-2020-f8e188f9a63d)).
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal/command prompt and enter the command below to install Graphviz.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After that, you should be able to use the `dot` command below to convert the
    dot file into a png file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/18649899806d0dd0b1e8f157dbcdcf48.png)'
  prefs: []
  type: TYPE_IMG
- en: Windows installing of Graphviz through conda. This should fix the ‘dot’ is not
    recognized as an internal or external command, operable program or batch file
    issue.
  prefs: []
  type: TYPE_NORMAL
- en: '**How to Install and Use on Windows through Graphviz Executable**'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have Anaconda or just want another way of installing Graphviz on
    your Windows, you can use the following link to [download and install it](https://graphviz.gitlab.io/_pages/Download/Download_windows.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/c2a1388c18dbd5a6823bc0aca9fda749.png)'
  prefs: []
  type: TYPE_IMG
- en: If you aren’t familiar with altering the PATH variable and want to use dot on
    the command line, I encourage other approaches. [There are many Stackoverflow
    questions based on this particular issue](https://datascience.stackexchange.com/questions/37428/graphviz-not-working-when-imported-inside-pydotplus-graphvizs-executables-not).
  prefs: []
  type: TYPE_NORMAL
- en: How to Use an Online Converter to Visualize your Decision Trees
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If all else fails or you simply don’t want to install anything, you can use [an
    online converter](https://dreampuf.github.io/GraphvizOnline).
  prefs: []
  type: TYPE_NORMAL
- en: In the image below, I opened the file with Sublime Text (though there are many
    different programs that can open/read a dot file) and copied the content of the
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/1a95f1cbd651e9efc3575ea2b430b338.png)'
  prefs: []
  type: TYPE_IMG
- en: Copying the contents of a dot file
  prefs: []
  type: TYPE_NORMAL
- en: In the image below, I pasted the content from the dot file onto the left side
    of the online converter. You can then choose what format you want and then save
    the image on the right side of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b72e7e6e43ab7a013592d3e78bd70ebe.png)'
  prefs: []
  type: TYPE_IMG
- en: Save visualization to computer
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that there are [other online converters](http://www.webgraphviz.com/) that
    can help accomplish the same task.
  prefs: []
  type: TYPE_NORMAL
- en: How to Visualize Individual Decision Trees from Bagged Trees or Random Forests®
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/15fab36e1c278586ce160b8d42ba9952.png)'
  prefs: []
  type: TYPE_IMG
- en: This section was of the tutorial was inspired from [Will Koehrsen](https://twitter.com/koehrsen_will)’s [How
    to Visualize a Decision Tree from the random forest algorithm in Python using
    Scikit-Learn](https://towardsdatascience.com/how-to-visualize-a-decision-tree-from-a-random-forest-in-python-using-scikit-learn-38ad2d75f21c).
    Image by [Michael Galarnyk](https://twitter.com/GalarnykMichael).
  prefs: []
  type: TYPE_NORMAL
- en: A weakness of decision trees is that they don’t tend to have the best predictive
    accuracy. This is partially because of high variance, meaning that different splits
    in the training data can lead to very different trees.
  prefs: []
  type: TYPE_NORMAL
- en: The image above could be a diagram for Bagged Trees or the random forest algorithm
    models which are ensemble methods. This means using multiple learning algorithms
    to obtain a better predictive performance than could be obtained from any of the
    constituent learning algorithms alone. In this case, many trees protect each other
    from their individual errors. How exactly Bagged Trees and the random forest algorithm
    models work is a subject for another blog, but what is important to note is that
    for each both models we grow N trees where N is the number of decision trees a
    user specifies. Consequently after you fit a model, it would be nice to look at
    the individual decision trees that make up your model.
  prefs: []
  type: TYPE_NORMAL
- en: Fit a Random Forest® Model using Scikit-Learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to visualize individual decision trees, we need first need to fit a
    Bagged Trees or Random Forest® model using scikit-learn (the code below fits the
    random forest algorithm model).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Visualizing your Estimators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can now view all the individual trees from the fitted model. In this section,
    I will visualize all the decision trees using matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/480ebbb631ba1bc333c4e8100f218dc9.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, notice how we have 100 estimators.
  prefs: []
  type: TYPE_NORMAL
- en: You can now visualize individual trees. The code below visualizes the first
    decision tree.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/1acd00d63266403a70edb44da7223347.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that individual trees in the random forest algorithm and Bagged trees are
    grow deep
  prefs: []
  type: TYPE_NORMAL
- en: You can try to use matplotlib subplots to visualize as many of the trees as
    you like. The code below visualizes the first 5 decision trees. I personally don’t
    prefer this method as it is even harder to read.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f41063731c52ec4a0528728376223cf0.png)'
  prefs: []
  type: TYPE_IMG
- en: Create Images for each of the Decision Trees (estimators)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that if for some reason you want images for all your estimators
    (decision trees), you can do so using the code on my [GitHub](https://github.com/mGalarnyk/Python_Tutorials/blob/master/Sklearn/CART/Visualization/DecisionTreesVisualization.ipynb).
    If you just want to see each of the 100 estimators for the random forest algorithm
    model fit in this tutorial without running the code, you can look at the video
    below.
  prefs: []
  type: TYPE_NORMAL
- en: Concluding Remarks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tutorial covered how to visualize decision trees using Graphviz and Matplotlib.
    Note that the way to visualize decision trees using Matplotlib is a newer method
    so it might change or be improved upon in the future. Graphviz is currently more
    flexible as you can always modify your dot files to make them more visually appealing
    like I did using the [dot language](https://www.graphviz.org/pdf/dotguide.pdf) or
    even just alter the orientation of your decision tree. One thing we didn’t cover
    was how to use [dtreeviz](https://github.com/parrt/dtreeviz) which is another
    library that can visualize decision trees. There is an excellent post on it [here](https://explained.ai/decision-tree-viz/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/41748ebd82ebd398ef25881f5d8f88b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from produced by [dtreeviz library](https://github.com/parrt/dtreeviz).
  prefs: []
  type: TYPE_NORMAL
- en: If you have any questions or thoughts on the tutorial, feel free to reach out
    in the comments below or through [Twitter](https://twitter.com/GalarnykMichael).
    If you want to learn more about how to utilize Pandas, Matplotlib, or Seaborn
    libraries, please consider taking my [Python for Data Visualization LinkedIn Learning
    course](https://www.linkedin.com/learning/python-for-data-visualization/value-of-data-visualization).
  prefs: []
  type: TYPE_NORMAL
- en: RANDOM FORESTS and RANDOMFORESTS are registered marks of Minitab, LLC.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** is
    a Data Scientist and Corporate Trainer. He currently works at Scripps Translational
    Research Institute. You can find him on Twitter (https://twitter.com/GalarnykMichael),
    Medium (https://medium.com/@GalarnykMichael), and GitHub (https://github.com/mGalarnyk).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/visualizing-decision-trees-with-python-scikit-learn-graphviz-matplotlib-1c50b4aa68dc).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Understanding Decision Trees for Classification in Python](/2019/08/understanding-decision-trees-classification-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decision Tree Algorithm, Explained](/2020/01/decision-tree-algorithm-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decision Tree Intuition: From Concept to Application](/2020/02/decision-tree-intuition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Machine Learning from Scratch: Decision Trees](https://www.kdnuggets.com/2022/11/machine-learning-scratch-decision-trees.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decision Trees vs Random Forests, Explained](https://www.kdnuggets.com/2022/08/decision-trees-random-forests-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generalized and Scalable Optimal Sparse Decision Trees(GOSDT)](https://www.kdnuggets.com/2023/02/generalized-scalable-optimal-sparse-decision-treesgosdt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Demystifying Decision Trees for the Real World](https://www.kdnuggets.com/demystifying-decision-trees-for-the-real-world)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Matplotlib Cheat Sheets](https://www.kdnuggets.com/2023/01/python-matplotlib-cheat-sheets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visualizing Your Confusion Matrix in Scikit-learn](https://www.kdnuggets.com/2022/09/visualizing-confusion-matrix-scikitlearn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
