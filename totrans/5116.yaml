- en: 'SQL Simplified: Crafting Modular and Understandable Queries with CTEs'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/sql-simplified-crafting-modular-and-understandable-queries-with-ctes](https://www.kdnuggets.com/sql-simplified-crafting-modular-and-understandable-queries-with-ctes)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![SQL Simplified: Crafting Modular and Understandable Queries with CTEs](../Images/5673fbf5264a095a7e1daad673acd1ca.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In the world of data, SQL still stands as the lingua franca for interacting
    with databases.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Still today it stands as one of the most used languages to deal with data and
    is still considered a must-have for any good data professional.
  prefs: []
  type: TYPE_NORMAL
- en: However, anyone who has worked with complex SQL queries knows they can quickly
    turn into unwieldy beasts—difficult to read, maintain, or reuse.
  prefs: []
  type: TYPE_NORMAL
- en: This is why today it is not enough to know SQL, we need to be good at crafting
    queries. And this is actually a type of art.
  prefs: []
  type: TYPE_NORMAL
- en: This is where Common Table Expressions (CTEs) come into play, transforming the
    art of query writing into a more structured and approachable craft.
  prefs: []
  type: TYPE_NORMAL
- en: So let’s discover together how to code readable and reusable queries.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. The Basics of CTEs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are wondering what is a CTE, you are in the right article.
  prefs: []
  type: TYPE_NORMAL
- en: A Common Table Expression (CTE) is a temporary result set that is defined within
    the execution scope of a single SQL statement.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: They are temporal tables that can be referenced many times within a single query
    and typically are used to simplify complex joins and subqueries, with the ultimate
    goal of increasing the readability and organization of SQL code.
  prefs: []
  type: TYPE_NORMAL
- en: So they are powerful tool for breaking down complex queries into simpler parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s why you should consider using CTEs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modularity:** You can break down complex logic into readable chunks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readability:** It makes understanding the flow of SQL queries easier.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusability:** CTEs can be referenced multiple times in a single query, avoiding
    repetition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Using the WITH Clause to generate modular queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The magic begins with the WITH clause, which precedes your main query and defines
    different temporal tables (CTEs) with aliases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we always need to start our query with the “WITH” command to start
    defining out own CTEs. By using CTEs, we can break any complex SQL query into:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Small temporal tables that compute related variables.'
  prefs: []
  type: TYPE_NORMAL
- en: '- A final table that only takes those variables that we want as our output.'
  prefs: []
  type: TYPE_NORMAL
- en: And this is precisely the MODULAR approach we want in any code!
  prefs: []
  type: TYPE_NORMAL
- en: '![SQL Simplified: Crafting Modular and Understandable Queries with CTEs](../Images/3ca8ab059876c603dc047940a59670f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'So using CTEs in our queries allows us to:'
  prefs: []
  type: TYPE_NORMAL
- en: '- Execute a temporal table ONCE and reference it MULTIPLE times.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Improve readability and simplify complex logic.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Promote code reusability and modular design.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Case Study - Analyzing Airbnb Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to understand this better, we can take a practical example of Airbnb
    listings in Barcelona.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine we want to analyze the performance of listings by neighborhood and compare
    it with the city’s overall performance. You'd need to pull together information
    about neighborhoods, individual apartments, hosts, and pricing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To exemplify this, we will use the [InsideAirbnb](http://insideairbnb.com/barcelona)
    table of Barcelona, which looks like follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![SQL Simplified: Crafting Modular and Understandable Queries with CTEs](../Images/a3c5c8c19c0b7cebf72f16cc4f875253.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A naive approach might lead you to create nested subqueries that quickly become
    a maintenance nightmare like the one as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we can utilize CTEs to compartmentalize our query into logical sections—each
    defining a piece of the puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: '**Neighborhood Data:** Create a CTE to summarize data by neighborhood.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apartment and Host Information:** Define CTEs for details about apartments
    and hosts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**City-wide Metrics:** Another CTE to gather city-level statistics for comparison.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Final Assembly:** Combine the CTEs in a final SELECT statement to present
    the data cohesively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![SQL Simplified: Crafting Modular and Understandable Queries with CTEs](../Images/3e2f40d29fff623e819f740de9d0d0fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'And we would end up with the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Advantages of a Modular Approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By using CTEs, we turn a potentially monstrous single query into an organized
    set of data modules.  This modular approach makes the SQL code more intuitive
    and adaptable to changes.
  prefs: []
  type: TYPE_NORMAL
- en: If new requirements emerge, you can adjust or add CTEs without overhauling the
    entire query.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Reusing CTEs for Comparative Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve established your CTEs, you can reuse them to perform comparative
    analysis. For instance, if you want to compare neighborhood data against city-wide
    metrics, you can reference your CTEs in a series of JOIN operations.
  prefs: []
  type: TYPE_NORMAL
- en: This not only saves time but also keeps your code efficient, as you won’t have
    to repeat the same query twice!
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CTEs are a testament to the principle that a little structure goes a long way
    in programming. By adopting CTEs, you can write clearer, more maintainable, and
    reusable SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: It streamlines the query development process and makes it easier to communicate
    complex data retrieval logic to others.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the next time you find yourself about to embark on writing a multi-join,
    nested subquery monster, consider breaking it down with CTEs.
  prefs: []
  type: TYPE_NORMAL
- en: Your future self—and anyone else who might read your code—will thank you.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/josep-ferrer-sanchez/)**[Josep Ferrer](https://www.linkedin.com/in/josep-ferrer-sanchez)****
    is an analytics engineer from Barcelona. He graduated in physics engineering and
    is currently working in the data science field applied to human mobility. He is
    a part-time content creator focused on data science and technology. Josep writes
    on all things AI, covering the application of the ongoing explosion in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[The Resilient ML Stack is Modular](https://www.kdnuggets.com/2022/06/comet-resilient-ml-stack-modular.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[European AI Act: The Simplified Breakdown](https://www.kdnuggets.com/2022/06/european-ai-act-simplified-breakdown.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beyond Skynet: Crafting the Next Frontier in AI Evolution](https://www.kdnuggets.com/beyond-skynet-crafting-the-next-frontier-in-ai-evolution)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Step by Step Guide to Reading and Understanding SQL Queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Useful Intermediate SQL Queries for Data Science](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Tricky SQL Queries Solved](https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
