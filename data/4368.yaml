- en: Computer Vision at Scale With Dask And PyTorch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dask和PyTorch进行大规模计算机视觉
- en: 原文：[https://www.kdnuggets.com/2020/11/computer-vision-scale-dask-pytorch.html](https://www.kdnuggets.com/2020/11/computer-vision-scale-dask-pytorch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/11/computer-vision-scale-dask-pytorch.html](https://www.kdnuggets.com/2020/11/computer-vision-scale-dask-pytorch.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Stephanie Kirmer](https://www.linkedin.com/in/skirmer/), Senior Data
    Scientist at [Saturn Cloud](https://www.saturncloud.io/s/tryhosted/?utm_source=KDNuggets%20blog%3A%20Pytorch%20on%20a%20GPU%20cluster&utm_medium=Try%20Hosted)**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Stephanie Kirmer](https://www.linkedin.com/in/skirmer/)，Saturn Cloud的高级数据科学家提供**'
- en: Applying deep learning strategies to computer vision problems has opened up
    a world of possibilities for data scientists. However, to use these techniques
    at scale to create business value, substantial computing resources need to be
    available – and this is just the kind of challenge Saturn Cloud is built to solve!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 将深度学习策略应用于计算机视觉问题为数据科学家打开了无限可能。然而，要在大规模上使用这些技术创造商业价值，需要大量的计算资源——而这正是Saturn Cloud旨在解决的挑战！
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 在IT领域支持你的组织'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this tutorial, you’ll see the steps to conducting image classification inference
    using the popular Resnet50 deep learning model at scale using NVIDIA GPU clusters
    on Saturn Cloud. Using the resources Saturn Cloud makes available, we can run
    the task 40x faster than a non-parallelized approach!
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你将看到使用流行的Resnet50深度学习模型在Saturn Cloud上的NVIDIA GPU集群进行图像分类推断的步骤。利用Saturn
    Cloud提供的资源，我们可以将任务运行速度提高40倍，相比非并行化方法更快！
- en: '![Figure](../Images/bbb23403f8c85487a730973cc0647e36.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/bbb23403f8c85487a730973cc0647e36.png)'
- en: We’ll be classifying dog images today!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们将对狗的图像进行分类！
- en: 'What you’ll learn here:'
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你将在这里学到的内容：
- en: How to set up and manage a GPU cluster on Saturn Cloud for deep learning inference
    tasks
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在Saturn Cloud上设置和管理GPU集群以进行深度学习推断任务
- en: How to run inference tasks with Pytorch on the GPU cluster
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在GPU集群上使用Pytorch运行推断任务
- en: How to use batch processing to accelerate your inference tasks with Pytorch
    on the GPU cluster
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用批处理加速在GPU集群上进行Pytorch推断任务
- en: Setup
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置
- en: To begin, we need to ensure that our image dataset is available and that our
    GPU cluster is running.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保我们的图像数据集可用，并且我们的GPU集群正在运行。
- en: In our case, we have stored the data on S3 and use the [`s3fs`](https://s3fs.readthedocs.io/en/latest/) library
    to work with it, as you’ll see below.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将数据存储在S3上，并使用[`s3fs`](https://s3fs.readthedocs.io/en/latest/)库进行处理，如下所示。
- en: If you would like to use this same dataset, it is the Stanford Dogs dataset,
    available here: [http://vision.stanford.edu/aditya86/ImageNetDogs/](http://vision.stanford.edu/aditya86/ImageNetDogs/)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想使用相同的数据集，它是斯坦福狗数据集，可以在这里获取：[http://vision.stanford.edu/aditya86/ImageNetDogs/](http://vision.stanford.edu/aditya86/ImageNetDogs/)
- en: To set up our Saturn GPU cluster, the process is very straightforward.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置我们的Saturn GPU集群，过程非常简单。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We are not explicitly stating it, but we are using 32 threads each on our cluster
    nodes, making 128 total threads.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有明确说明，但我们在集群节点上使用32个线程，总共128个线程。
- en: '**Tip: Individual users may find that you want to adjust the number of threads,
    reducing it down if your files are very large – too many threads running large
    tasks simultaneously might require more memory than your workers have available
    at one time.**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示：个别用户可能需要调整线程数量，如果文件非常大，可以减少线程数量——同时运行大量任务的线程可能会需要比你的工作节点一次性可用的内存更多。**'
- en: This step may take a moment to complete because all the AWS instances that we
    are requesting need to be spun up. Calling `client` at the end, there will monitor
    the spin-up process and let you know when things are ready to rock!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步可能需要一些时间，因为我们请求的所有 AWS 实例都需要启动。调用`client`，它将监控启动过程，并在一切准备好时通知你！
- en: GPU Capability
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GPU 能力
- en: At this point, we can confirm that our cluster has GPU capabilities, and make
    sure we have set everything up correctly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们可以确认我们的集群具有 GPU 能力，并确保我们已经正确设置了一切。
- en: First, check that the Jupyter instance has GPU capability.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，检查 Jupyter 实例是否具有 GPU 能力。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Awesome- now let’s also check each of our four workers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了——现在让我们检查一下我们的四个工作节点。
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here then we’ll set the “device” to always be cuda, so we can use those GPUs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将设置“设备”为始终使用 CUDA，以便我们可以使用这些 GPU。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Note: If you need some help establishing how to run a single image classification,
    we have an [expanded code notebook](https://github.com/saturncloud/saturn-cloud-examples/tree/main/pytorch-demo) available
    at our github that can give you those instructions as well as the rest of this
    content.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：如果你需要帮助来了解如何运行单张图像分类，我们的 GitHub 上有一个 [扩展代码笔记本](https://github.com/saturncloud/saturn-cloud-examples/tree/main/pytorch-demo)，可以为你提供这些指令以及剩下的内容。**'
- en: Inference
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推断
- en: Now, we’re ready to start doing some classification! We’re going to use some
    custom-written functions to do this efficiently and make sure our jobs can take
    full advantage of the parallelization of the GPU cluster.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们准备开始进行一些分类！我们将使用一些自定义编写的函数来高效完成这项任务，并确保我们的工作能够充分利用 GPU 集群的并行化优势。
- en: Preprocessing
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预处理
- en: Single Image Processing
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单图像处理
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This function allows us to process one image, but of course, we have a lot of
    images to work with here! We’re going to use some list comprehension strategies
    to create our batches and get them ready for our inference.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数允许我们处理一张图像，但当然，我们有很多图像需要处理！我们将使用一些列表推导策略来创建我们的批次，并为推断做好准备。
- en: First, we break the list of images we have from our S3 file path into chunks
    that will define the batches.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将从 S3 文件路径获取的图像列表分解成定义批次的块。
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then we’ll process each file into nested lists. Then we’ll reformat this list
    setup slightly and we’re ready to go!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将每个文件处理成嵌套列表。接着我们会稍微重新格式化这个列表设置，这样我们就准备好了！
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice that we have used the Dask `delayed` decorator on all of this- we don’t
    want it to actually run yet, but to wait until we are doing work in parallel on
    the GPU cluster!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在所有这些操作中都使用了 Dask 的`delayed`装饰器——我们不希望它现在就实际运行，而是等待我们在 GPU 集群上并行处理时再运行！
- en: Format Batches
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 格式化批次
- en: This little step just makes sure that the batches of images are organized in
    the way that the model will expect them.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这一步只是为了确保图像批次按模型所期望的方式组织好。
- en: '[PRE10]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the Model
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行模型
- en: Now we are ready to do the inference task! This is going to have a few steps,
    all of which are contained in functions described below, but we’ll talk through
    them so everything is clear.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备进行推断任务了！这将有几个步骤，所有这些步骤都包含在下面描述的函数中，但我们会逐一讲解，以确保一切清楚。
- en: Our unit of work at this point is batches of 60 images at a time, which we created
    in the section above. They are all neatly arranged in lists so that we can work
    with them effectively.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们的工作单位是一次 60 张图像的批次，我们在上面的部分中创建了这些批次。它们都被整齐地安排在列表中，以便我们可以有效地处理它们。
- en: One thing we need to do with the lists is to “stack” the tensors. We could do
    this earlier in our process, but because we are using the Dask `delayed` decorator
    on the preprocessing, our functions actually do not know that they are receiving
    tensors until later in the process. Therefore, we’re delaying the “stacking” as
    well by putting it inside this function that comes after the preprocessing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对列表做的一件事是“堆叠”张量。我们本可以在处理早些时候做这件事，但由于我们在预处理中使用了 Dask 的`delayed`装饰器，我们的函数实际上直到处理后期才知道它们正在接收张量。因此，我们也将“堆叠”操作延迟到预处理之后的这个函数中。
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So now we have our tensors stacked so that batches can be passed to the model.
    We are going to retrieve our model using pretty simple syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将张量堆叠起来，以便可以将批次传递给模型。我们将使用相当简单的语法来检索我们的模型：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Conveniently, we load the library `torchvision` which contains several useful
    pretrained models and datasets. That’s where we are grabbing Resnet50 from. Calling
    the method `.to(device)` allows us to pass the model object to our workers, giving
    them the ability to run the inference without having to reach back to the client.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 方便的是，我们加载了库 `torchvision`，其中包含了几个有用的预训练模型和数据集。这就是我们从中获取 Resnet50 的地方。调用 `.to(device)`
    方法允许我们将模型对象传递给我们的工作者，使他们能够进行推理而无需回到客户端。
- en: 'Now we are ready to run inference! It is inside the same function, styled this
    way:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备运行推理了！它在同一个函数中，以这种方式呈现：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We pass our image stack (just the batch we are working on) to the workers and
    then run the inference, returning predictions for that batch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将图像堆栈（即我们正在处理的批次）传递给工作者，然后运行推理，返回该批次的预测结果。
- en: Result Evaluation
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结果评估
- en: The predictions and truth we have so far, however, are not really human-readable
    or comparable, so we’ll use the functions that follow to fix them up and get us
    interpretable results.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们目前的预测和实际情况并不真正易读或可比，因此我们将使用接下来的函数来修正它们，得到可解释的结果。
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This takes our results from the model, and a few other elements, to return nice
    readable predictions and the probabilities the model assigned.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们的模型结果和一些其他元素整合在一起，返回易读的预测和模型分配的概率。
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From here, we’re nearly done! We want to pass our results back to S3 in a tidy,
    human-readable way, so the rest of the function handles that. It will iterate
    over each image because these functionalities are not batch handling. `is_match` is
    one of our custom functions, which you can check out below.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里开始，我们就快完成了！我们希望以整洁、易读的方式将结果传回 S3，因此其余的函数处理了这个过程。它将遍历每张图片，因为这些功能不支持批量处理。`is_match`
    是我们自定义的函数之一，你可以在下面查看。
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Put It All Together
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将所有内容整合在一起
- en: Now, we aren’t going to patch together all these functions by hand, instead,
    we have assembled them in one single delayed function that will do the work for
    us. Importantly, we can then map this across all our batches of images across
    the cluster!
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们不会手动拼接所有这些函数，而是将它们组装成一个单一的延迟函数，完成我们的工作。重要的是，我们可以将其映射到集群中所有的图像批次上！
- en: '[PRE17]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: On the Cluster
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在集群上
- en: We have really done all the hard work already and can let our functions take
    it from here. We’ll be using the `.map` method to distribute our tasks efficiently.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了所有艰苦的工作，可以让我们的函数从这里开始。我们将使用 `.map` 方法高效地分配任务。
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: With `map` we ensure all our batches will get the function applied to them.
    With `gather`, we can collect all the results simultaneously rather than one by
    one. With `compute(sync=False)` we return all the futures, ready to be calculated
    when we want them. This may seem arduous, but these steps are required to allow
    us to iterate over the future.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `map` 我们确保所有批次都会应用该函数。使用 `gather`，我们可以同时收集所有结果，而不是逐个收集。使用 `compute(sync=False)`，我们返回所有的期货，准备在我们需要时进行计算。这可能看起来很费劲，但这些步骤是允许我们迭代未来所必需的。
- en: Now we actually run the tasks, and we also have a simple error handling system
    just in case any of our files are messed up or anything goes haywire.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们实际运行任务，并且还设有一个简单的错误处理系统，以防我们的文件出现问题或其他意外情况。
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Evaluate
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 评估
- en: We want to make sure we have high-quality results coming out of this model,
    of course! First, we can peek at a single result.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然希望从这个模型中得到高质量的结果！首先，我们可以查看一个单独的结果。
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'While we have a wrong prediction here, we have the sort of results we expect!
    To do a more thorough review, we would download all the results files, then just
    check to see how many have `evaluation: True`.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '虽然这里有一个错误的预测，但我们得到了预期的结果！为了进行更彻底的检查，我们会下载所有结果文件，然后查看有多少个 `evaluation: True`。'
- en: 'Number of dog photos examined: 20580'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 检查的狗照片数量：20580
- en: 'Number of dogs classified correctly: 13806'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 正确分类的狗的数量：13806
- en: 'The percent of dogs classified correctly: 67.085%'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 正确分类的狗的百分比：67.085%
- en: Not perfect, but good looking results overall!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 不完美，但总体上结果还是很不错的！
- en: Comparing Performance
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能比较
- en: So, we have managed to classify over 20,000 images in about 5 minutes. That
    sounds good, but what is the alternative?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经在大约 5 分钟内对超过 20,000 张图像进行了分类。这听起来不错，但还有什么替代方案呢？
- en: '![Computer Vision at Scale With Dask And PyTorch](../Images/120e727c28f37e3e011ffef3a5fc3b8d.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![计算机视觉的规模化：使用 Dask 和 PyTorch](../Images/120e727c28f37e3e011ffef3a5fc3b8d.png)'
- en: '| Technique | Runtime |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| 技术 | 运行时间 |'
- en: '| --- | --- |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| No Cluster with Batching | 3 hours, 21 minutes, 13 sec |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 无集群批处理 | 3 小时 21 分钟 13 秒 |'
- en: '| **GPU Cluster with Batching** | **5 minutes, 15 sec** |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| **GPU 集群与批处理** | **5 分钟 15 秒** |'
- en: Adding a GPU cluster makes a HUGE difference! If you’d like to see this work
    for yourself, [sign up for your free trial of Saturn Cloud today!](https://www.saturncloud.io/s/tryhosted/?utm_source=KDNuggets%20blog%3A%20Pytorch%20on%20a%20GPU%20cluster&utm_medium=Try%20Hosted)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 GPU 集群能带来巨大的不同！如果你想亲自体验这个效果，[今天就注册获取 Saturn Cloud 的免费试用吧！](https://www.saturncloud.io/s/tryhosted/?utm_source=KDNuggets%20blog%3A%20Pytorch%20on%20a%20GPU%20cluster&utm_medium=Try%20Hosted)
- en: '**Bio: [Stephanie Kirmer](https://www.linkedin.com/in/skirmer/)** is a Senior
    Data Scientist at Saturn Cloud.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历：[Stephanie Kirmer](https://www.linkedin.com/in/skirmer/)** 是 Saturn Cloud
    的高级数据科学家。'
- en: '[Original](https://www.saturncloud.io/s/computer-vision-at-scale-with-dask-and-pytorch/).
    Reposted with permission.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.saturncloud.io/s/computer-vision-at-scale-with-dask-and-pytorch/)。转载自原作者许可。'
- en: '**Related:**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关链接：**'
- en: '[Data Science in the Cloud with Dask](/2020/10/data-science-cloud-dask.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[云计算中的数据科学与 Dask](/2020/10/data-science-cloud-dask.html)'
- en: '[Top Python Libraries for Deep Learning, Natural Language Processing & Computer
    Vision](/2020/11/top-python-libraries-deep-learning-natural-language-processing-computer-vision.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深度学习、自然语言处理和计算机视觉的顶级 Python 库](/2020/11/top-python-libraries-deep-learning-natural-language-processing-computer-vision.html)'
- en: '[How to Acquire the Most Wanted Data Science Skills](/2020/11/acquire-most-wanted-data-science-skills.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何获得最受欢迎的数据科学技能](/2020/11/acquire-most-wanted-data-science-skills.html)'
- en: More On This Topic
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[6 Things You Need To Know About Data Management And Why It Matters…](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据管理的 6 件你需要知道的事以及它为何重要…](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
- en: '[TensorFlow for Computer Vision - Transfer Learning Made Easy](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TensorFlow 在计算机视觉中的应用 - 轻松实现迁移学习](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[探索计算机视觉的世界：介绍 MLM 的最新…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
- en: '[5 Applications of Computer Vision](https://www.kdnuggets.com/2022/03/5-applications-computer-vision.html)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[计算机视觉的 5 个应用](https://www.kdnuggets.com/2022/03/5-applications-computer-vision.html)'
- en: '[DINOv2: Self-Supervised Computer Vision Models by Meta AI](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DINOv2：Meta AI 提供的自监督计算机视觉模型](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻 2022 年 3 月 9 日：在 5 分钟内构建机器学习网页应用…](https://www.kdnuggets.com/2022/n10.html)'
