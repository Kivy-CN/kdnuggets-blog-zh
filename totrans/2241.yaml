- en: 'Multilabel Classification: An Introduction with Python’s Scikit-Learn'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Multilabel Classification: An Introduction with Python''s Scikit-Learn](../Images/96a1064954da1a1b80998bc73e31769f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Freepik](https://www.freepik.com/free-photo/top-view-hands-pizza-chart_25629308.htm#query=classification&position=4&from_view=search&track=sph)
  prefs: []
  type: TYPE_NORMAL
- en: In machine learning tasks, classification is a supervised learning method to
    predict the label given the input data. For example, we want to predict if someone
    is interested in the sales offering using their historical features. By training
    the machine learning model using available training data, we can perform the classification
    tasks to incoming data.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: We often encounter classic classification tasks such as binary classification
    (two labels) and multiclass classification (more than two labels). In this case,
    we would train the classifier, and the model would try to predict one of the labels
    from all the available labels. The dataset used for the classification is similar
    to the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Multilabel Classification: An Introduction with Python''s Scikit-Learn](../Images/c375c1b308daf4be103de5d6e6e56ce4.png)'
  prefs: []
  type: TYPE_IMG
- en: The image above shows that the target (Sales Offering) contains two labels in
    Binary Classification and three in the Multiclass Classification. The model would
    train from the available features and then output one label only.
  prefs: []
  type: TYPE_NORMAL
- en: Multilabel Classification is different from Binary or Multiclass Classification.
    In Multilabel Classification, we don’t try to predict only with one output label.
    Instead, Multilabel Classification would try to predict data with as many labels
    as possible that apply to the input data. The output could be from no label to
    the maximum number of available labels.
  prefs: []
  type: TYPE_NORMAL
- en: Multilabel Classification is often used in the text data classification task.
    For example, here is an example dataset for Multilabel Classification.
  prefs: []
  type: TYPE_NORMAL
- en: '![Multilabel Classification: An Introduction with Python''s Scikit-Learn](../Images/40df6531842b30b3fd218f6b024478f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the example above, imagine Text 1 to Text 5 is a sentence that can be categorized
    into four categories: Event, Sport, Pop Culture, and Nature. With the training
    data above, the Multilabel Classification task predicts which label applies to
    the given sentence. Each category is not against the other as they are not mutually
    exclusive; each label can be considered independent.'
  prefs: []
  type: TYPE_NORMAL
- en: For more detail, we can see that Text 1 labels Sport and Pop Culture, while
    Text 2 labels Pop Culture and Nature. This shows that each label was mutually
    exclusive, and Multilabel Classification can have prediction output as none of
    the labels or all the labels simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: With that introduction, let’s try to build Multiclass Classifier with Scikit-Learn.
  prefs: []
  type: TYPE_NORMAL
- en: Multilabel Classification with Scikit-Learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This tutorial will use the publicly available [Biomedical PubMed Multilabel
    Classification dataset](https://www.kaggle.com/datasets/owaiskhan9654/pubmed-multilabel-text-classification)
    from Kaggle. The dataset would contain various features, but we would only use
    the abstractText feature with their MeSH classification (A: Anatomy, B: Organism,
    C: Diseases, etc.). The sample data is shown in the image below.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multilabel Classification: An Introduction with Python''s Scikit-Learn](../Images/9c94ed15c2c5b6948270793e134ae05e.png)'
  prefs: []
  type: TYPE_IMG
- en: The above dataset shows that each paper can be classified into more than one
    category, the cases for Multilabel Classification. With this dataset, we can build
    Multilabel Classifier with Scikit-Learn. Let’s prepare the dataset before we train
    the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we transform the text data into [TF-IDF](https://en.wikipedia.org/wiki/Tf%E2%80%93idf)
    representation so our Scikit-Learn model can accept the training data. Also, I
    am skipping the preprocessing data steps, such as stopword removal, to simplify
    the tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: After data transformation, we split the dataset into training and test datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After all the preparation, we would start training our Multilabel Classifier.
    In Scikit-Learn, we would use the [MultiOutputClassifier](https://scikit-learn.org/stable/modules/generated/sklearn.multioutput.MultiOutputClassifier.html#sklearn.multioutput.MultiOutputClassifier)
    object to train the Multilabel Classifier model. The strategy behind this model
    is to train one classifier per label. Basically, each label has its own classifier.
  prefs: []
  type: TYPE_NORMAL
- en: We would use Logistic Regression in this sample, and MultiOutputClassifier would
    extend them into all labels.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can change the model and tweak the model parameter that passed into the MultiOutputClasiffier,
    so manage according to your requirements. After the training, let’s use the model
    to predict the test data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Multilabel Classification: An Introduction with Python''s Scikit-Learn](../Images/d5cb897316d184b7a9f5334c0ab443f4.png)'
  prefs: []
  type: TYPE_IMG
- en: The prediction result is an array of labels for each MeSH category. Each row
    represents the sentence, and each column represents the label.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we need to evaluate our Multilabel Classifier. We can use the accuracy
    metrics to evaluate the model.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Accuracy Score:  0.145**'
  prefs: []
  type: TYPE_NORMAL
- en: The accuracy score result is 0.145, which shows that the model only could predict
    the exact label combination less than 14.5% of the time. However, the accuracy
    score contains weaknesses for a multilabel prediction evaluation. The accuracy
    score would need each sentence to have all the label presence in the exact position,
    or it would be considered wrong.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the first-row prediction only differs by one label between the
    prediction and test data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Multilabel Classification: An Introduction with Python''s Scikit-Learn](../Images/d6fbf4ac7e26065465af5a4a5c998f02.png)'
  prefs: []
  type: TYPE_IMG
- en: It would be considered a wrong prediction for the accuracy score as the label
    combination differs. That is why our model has a low metric score.
  prefs: []
  type: TYPE_NORMAL
- en: To mitigate this problem, we must evaluate the label prediction rather than
    their label combination. In this case, we can rely on [Hamming Loss](https://en.wikipedia.org/wiki/Multi-label_classification)
    evaluation metric. Hamming Loss is calculated by taking a fraction of the wrong
    prediction with the total number of labels. Because Hamming Loss is a loss function,
    the lower the score is, the better (0 indicates no wrong prediction and 1 indicates
    all the prediction is wrong).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Hamming Loss:  0.13**'
  prefs: []
  type: TYPE_NORMAL
- en: Our Multilabel Classifier Hamming Loss model is 0.13, which means that our model
    would have a wrong prediction 13% of the time independently. This means each label
    prediction might be wrong 13% of the time.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multilabel Classification is a machine-learning task where the output could
    be no label or all the possible labels given the input data. It’s different from
    binary or multiclass classification, where the label output is mutually exclusive.
  prefs: []
  type: TYPE_NORMAL
- en: Using Scikit-Learn MultiOutputClassifier, we could develop Multilabel Classifier
    where we train a classifier to each label. For the model evaluation, it’s better
    to use Hamming Loss metric as the Accuracy score might not give the whole picture
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Cornellius Yudha Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**
    is a data science assistant manager and data writer. While working full-time at
    Allianz Indonesia, he loves to share Python and Data tips via social media and
    writing media.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fine-Tuning BERT for Tweets Classification with HuggingFace](https://www.kdnuggets.com/2022/01/finetuning-bert-tweets-classification-ft-hugging-face.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Algorithms for Classification](https://www.kdnuggets.com/2022/03/machine-learning-algorithms-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Logistic Regression for Classification](https://www.kdnuggets.com/2022/04/logistic-regression-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nearest Neighbors for Classification](https://www.kdnuggets.com/2022/04/nearest-neighbors-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
