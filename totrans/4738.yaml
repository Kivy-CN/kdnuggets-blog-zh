- en: Introduction to Named Entity Recognition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/12/introduction-named-entity-recognition.html](https://www.kdnuggets.com/2018/12/introduction-named-entity-recognition.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/12/introduction-named-entity-recognition.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Suvro Banerjee](https://www.linkedin.com/in/suvro-banerjee-9345442a/),
    Machine Learning Engineer @ Juniper Networks**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/a2074883fe2ffcaa945e3e563d66a2ab.png)'
  prefs: []
  type: TYPE_IMG
- en: '[http://www.lovejustine.com/journal/whats-in-a-name](http://www.lovejustine.com/journal/whats-in-a-name)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this article we will learn what is Named Entity Recognition also known as
    NER. We will discuss some of its use-cases and then evaluate few standard Python
    libraries using which we can quickly get started and solve problems at hand.
  prefs: []
  type: TYPE_NORMAL
- en: In the next series of articles we will get under the hood of this class of algorithms,
    get more sophisticated and will create our own NER from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s begin this journey.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Named Entity Recognition?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Named Entity Recognition, also known as entity extraction classifies named entities
    that are present in a text into pre-defined categories like “individuals”, “companies”,
    “places”, “organization”, “cities”, “dates”, “product terminologies” etc. It adds
    a wealth of semantic knowledge to your content and helps you to promptly understand
    the subject of any given text.
  prefs: []
  type: TYPE_NORMAL
- en: '**Few Use-Cases of Named Entity Recognition**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Classifying content for news providers**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b815a87ac2716f3ddc74ea9e5b03349e.png)'
  prefs: []
  type: TYPE_IMG
- en: Classifying content for news providers
  prefs: []
  type: TYPE_NORMAL
- en: Named Entity Recognition can automatically scan entire articles and reveal which
    are the major people, organizations, and places discussed in them. Knowing the
    relevant tags for each article help in automatically categorizing the articles
    in defined hierarchies and enable smooth content discovery.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e4e39ec6d523783ac267d5dda631934e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://www.paralleldots.com/named-entity-recognition](https://www.paralleldots.com/named-entity-recognition)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Efficient Search Algorithms**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/622381906c105a492266d0bfb74e2074.png)'
  prefs: []
  type: TYPE_IMG
- en: Efficient search across the brands
  prefs: []
  type: TYPE_NORMAL
- en: Let’s suppose you are designing an internal search algorithm for an online publisher
    that has millions of articles. If for every search query the algorithm ends up
    searching all the words in millions of articles, the process will take a lot of
    time. Instead, if Named Entity Recognition can be run once on all the articles
    and the relevant entities (tags) associated with each of those articles are stored
    separately, this could speed up the search process considerably. With this approach,
    a search term will be matched with only the small list of entities discussed in
    each article leading to faster search execution.
  prefs: []
  type: TYPE_NORMAL
- en: '**Customer Support**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/eb3d5610b873e5999fede251aaea1d3d.png)'
  prefs: []
  type: TYPE_IMG
- en: Customer support on Twitter
  prefs: []
  type: TYPE_NORMAL
- en: Say you are handling the customer support department of an electronic store
    with multiple branches worldwide, you go through a number mentions in your customers’
    feedback. Like this for instance.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you pass it through the Named Entity Recognition API, it pulls out the
    entities Bandra (location) and Fitbit (Product). This can be then used to categorize
    the complaint and assign it to the relevant department within the organization
    that should be handling this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55870accc39a49c91bc8dde051ff3247.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://www.paralleldots.com/named-entity-recognition](https://www.paralleldots.com/named-entity-recognition)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Standard Libraries to use Named Entity Recognition**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I will discuss three standard libraries which are used a lot in Python to perform
    NER. I am sure there are many more and would encourage readers to add them in
    the comment section.
  prefs: []
  type: TYPE_NORMAL
- en: Stanford NER
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: spaCy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NLTK
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Stanford NER**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/3c0b59b2cf0ad6c0348e0188177eaa70.png)'
  prefs: []
  type: TYPE_IMG
- en: Stanford NER
  prefs: []
  type: TYPE_NORMAL
- en: Stanford NER is a Java implementation of a Named Entity Recognizer. Stanford
    NER is also known as CRFClassifier. The software provides a general implementation
    of (arbitrary order) linear chain Conditional Random Field (CRF) sequence models.
    That is, by training your own models on labeled data, you can actually use this
    code to build sequence models for NER or any other task.
  prefs: []
  type: TYPE_NORMAL
- en: Now NLTK (Natural Language Toolkit) is a great Python package that provides
    a set of natural languages corpora and APIs of wide varieties of NLP algorithms.
    NLTK comes along with the efficient Stanford NER implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Now with this background, let’s use Stanford NER.
  prefs: []
  type: TYPE_NORMAL
- en: '**Install NLTK library**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Download Stanford NER library**'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://nlp.stanford.edu/software/CRF-NER.html#Download](https://nlp.stanford.edu/software/CRF-NER.html#Download)
    and download the latest version, I am using Stanford Named Entity Recognizer version
    3.9.2.
  prefs: []
  type: TYPE_NORMAL
- en: I get a zip file which is called “stanford-ner-2018–10–16.zip” which needs to
    be unzipped and I renamed it to stanford_ner and placed it in the home folder.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b85b0cb6ac33197b453a0c056c9ae4b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now the following Python code is written to perform the NER on some given text.
    The code is placed in the “bsuvro” folder, so that I can use the relative path
    to access the NER tagger engine (stanford-ner-3.9.2.jar) and NER model trained
    on the English corpus (classifiers/english.muc.7class.distsim.crf.ser.gz). You
    can see I am using 7class model which will give seven different output named entities
    like Location, Person, Organization, Money, Percent, Date, Time.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use —
  prefs: []
  type: TYPE_NORMAL
- en: 'english.all.3class.distsim.crf.ser.gz: Location, Person and Organization'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'english.conll.4class.distsim.crf.ser.gz: Location, Person, Organization and
    Misc'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stanford Named Entity Recognition
  prefs: []
  type: TYPE_NORMAL
- en: The output of the above code is below and you can see how the words are tagged
    as named entities. Note “O” is something which is not tagged or can be called
    as “Others”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0b4d2ec37f3bb1a670c628b5ab320996.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of the Stanford NER tagger
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s move to the next library called spaCy.
  prefs: []
  type: TYPE_NORMAL
- en: '**spaCy**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/a42dc3316f0aad5df22ed590780564d8.png)'
  prefs: []
  type: TYPE_IMG
- en: spaCy NER
  prefs: []
  type: TYPE_NORMAL
- en: spaCy is known for industrial-strength natural language processing library in
    Python. It has been written in Cython which is a superset of Python programming
    language with C-like performance.
  prefs: []
  type: TYPE_NORMAL
- en: Although I wish to go in details about spaCy as it has lot of interesting NLP
    modules, but I will focus here on the NER tagging. I will definitely have a separate
    series on exploring spaCy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Install spaCy library and download the “en” (English) model**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: spaCy NER
  prefs: []
  type: TYPE_NORMAL
- en: The output of the above code -
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6e4242a853817841cfdd160c27e16d3.png)'
  prefs: []
  type: TYPE_IMG
- en: Output from spaCy NER
  prefs: []
  type: TYPE_NORMAL
- en: Now this supports following Entity types-
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fde3bd8a3c08653096974a233087b63c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://spacy.io/api/annotation#pos-tagging](https://spacy.io/api/annotation#pos-tagging)'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Transfer Learning for Image Recognition and Natural Language Processing](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Evolution of Speech Recognition Metrics](https://www.kdnuggets.com/2022/10/evolution-speech-recognition-metrics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 IT Jobs That Are High in Demand But Don’t Get Enough Recognition](https://www.kdnuggets.com/5-it-jobs-that-are-high-in-demand-but-dont-get-enough-recognition)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to Natural Language Processing](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Introduction to Hill Climbing Algorithm in AI](https://www.kdnuggets.com/2022/07/introduction-hill-climbing-algorithm-ai.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Introduction to SMOTE](https://www.kdnuggets.com/2022/11/introduction-smote.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
