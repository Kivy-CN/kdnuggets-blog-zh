- en: 'Time Complexity: How to measure the efficiency of algorithms'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 时间复杂度：如何衡量算法的效率
- en: 原文：[https://www.kdnuggets.com/2020/06/time-complexity-measure-efficiency-algorithms.html](https://www.kdnuggets.com/2020/06/time-complexity-measure-efficiency-algorithms.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/06/time-complexity-measure-efficiency-algorithms.html](https://www.kdnuggets.com/2020/06/time-complexity-measure-efficiency-algorithms.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Diego Lopez Yse](https://www.linkedin.com/in/lopezyse/), Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[Diego Lopez Yse](https://www.linkedin.com/in/lopezyse/)，数据科学家**'
- en: '![Figure](../Images/3837e31968fcd1d9e92f2b9e231fcd8a.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/3837e31968fcd1d9e92f2b9e231fcd8a.png)'
- en: Photo by [Icons8 Team](https://unsplash.com/@icons8?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Icons8 Team](https://unsplash.com/@icons8?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供
- en: In computer programming, as in other aspects of life, there are different ways
    of solving a problem. These different ways may imply different times, computational
    power, or any other metric you choose, so we need to compare the efficiency of
    different approaches to pick up the right one.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机编程中，和生活的其他方面一样，解决问题的方法各不相同。这些不同的方法可能意味着不同的时间、计算能力或你选择的其他度量标准，因此我们需要比较不同方法的效率，以选择合适的方法。
- en: Now, as you may know, computers are able to solve problems based on algorithms.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，正如你可能知道的那样，计算机能够根据算法解决问题。
- en: '**Algorithms are procedures or instructions (set of steps) that tell a computer
    what to do and how to do it.**'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**算法是告诉计算机该做什么和怎么做的过程或指令（步骤集合）。**'
- en: Nowadays, they evolved so much that they may be considerably different even
    when accomplishing the same task. In the most extreme case (which is quite usual
    by the way), different algorithms programmed in different programming languages
    may tell different computers with different hardware and operating systems to
    perform the same task, in a completely different way. That’s crazy, isn’t it?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，它们发展得如此迅速，即使是在完成相同任务的情况下也可能有很大不同。在最极端的情况下（顺便说一句，这种情况很常见），用不同编程语言编写的不同算法可能会指示不同硬件和操作系统的计算机以完全不同的方式执行相同任务。这真疯狂，不是吗？
- en: The thing is that while one algorithm takes seconds to finish, another will
    take minutes with even small data sets. How can we compare different performances
    and pick the best algorithm to solve a particular problem?
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 问题是，当一个算法花费几秒钟完成时，另一个算法即使在处理小数据集时也会花费几分钟。我们如何比较不同的性能并选择最佳算法来解决特定问题？
- en: 'Fortunately, there are ways of doing this, and we don’t need to wait and see
    the algorithm at work to know if it can get the job done quickly or if it’s going
    to collapse under the weight of its input. When we consider the complexity of
    an algorithm, we shouldn’t really care about the exact number of operations that
    are performed; instead, **we should care about how the number of operations relates
    to the problem size**. Think about it: if the problem size doubles, does the number
    of operations stay the same? Do they double? Do they increase in some other way?
    To answer these questions, we need to measure the time complexity of algorithms.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们有方法可以做到这一点，我们不需要等待算法运行才能知道它是否能够快速完成任务，或者它是否会因输入的重量而崩溃。当我们考虑算法的复杂度时，我们不必关心执行的确切操作次数；**我们应该关心操作次数与问题规模的关系**。想想看：如果问题规模翻倍，操作次数是否保持不变？是否也翻倍？是否以其他方式增加？要回答这些问题，我们需要测量算法的时间复杂度。
- en: '**Time complexity represents the number of times a statement is executed**.
    The time complexity of an algorithm is NOT the actual time required to execute
    a particular code, since that depends on other factors like programming language,
    operating software, processing power, etc. The idea behind time complexity is
    that it can measure only the execution time of the algorithm in a way that depends
    only on the algorithm itself and its input.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间复杂度表示语句执行的次数**。算法的时间复杂度不是执行特定代码所需的实际时间，因为这取决于其他因素，如编程语言、操作软件、处理能力等。时间复杂度的核心思想是，它只能以一种仅依赖于算法本身及其输入的方式来衡量算法的执行时间。'
- en: To express the time complexity of an algorithm, we use something called the *“Big
    O notation”*. **The Big O notation is a language we use to describe the time complexity
    of an algorithm. **It’s how we compare the efficiency of different approaches
    to a problem, and helps us to make decisions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示算法的时间复杂度，我们使用一种叫做*“大O记号”*的东西。**大O记号是我们用来描述算法时间复杂度的语言。**它帮助我们比较不同解决问题的方法的效率，并帮助我们做出决策。
- en: '**Big O notation expresses the run time of an algorithm in terms of how quickly
    it grows relative to the input** (this input is called “n”). This way, if we say
    for example that the run time of an algorithm grows “on the order of the size
    of the input”, we would state that as “O(n)”. If we say that the run time of an
    algorithm grows “on the order of the square of the size of the input”, we would
    express it as “O(n²)”. But what does that mean exactly?'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**大O记号表示算法的运行时间相对于输入增长的速度**（这个输入被称为“n”）。这样，如果我们说一个算法的运行时间按“输入大小的顺序”增长，我们会表示为“O(n)”。如果我们说一个算法的运行时间按“输入大小的平方的顺序”增长，我们会表示为“O(n²)”。但这到底是什么意思呢？'
- en: The key to understanding time complexity is understanding the rates at which
    things can grow. The rate in question here is time taken per input size. There
    are different types of time complexities, so let’s check the most basic ones.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 理解时间复杂度的关键是理解事物增长的速度。这里讨论的速率是每个输入大小所花费的时间。时间复杂度有不同类型，让我们来检查最基本的几种。
- en: 'Constant Time Complexity: O(1)'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 常量时间复杂度：O(1)
- en: When time complexity is constant (notated as “O(1)”), the size of the input
    (n) doesn’t matter. Algorithms with Constant Time Complexity take a constant amount
    of time to run, independently of the size of n. They don’t change their run-time
    in response to the input data, which makes them the fastest algorithms out there.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间复杂度是常量（记作“O(1)”）时，输入的大小（n）无关紧要。具有常量时间复杂度的算法运行所需时间固定，与n的大小无关。它们的运行时间不会因输入数据而改变，这使它们成为最快的算法。
- en: '![Figure](../Images/0b3a4281a945ab55bb7541cdb5a1387a.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/0b3a4281a945ab55bb7541cdb5a1387a.png)'
- en: Constant Time Complexity
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 常量时间复杂度
- en: For example, you’d use an algorithm with constant time complexity if you wanted
    to know if a number is odd or even. No matter if the number is 1 or 9 billions
    (the input “n”), the algorithm would perform the same operation only once, and
    bring you the result.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想知道一个数字是奇数还是偶数，你会使用一个具有常量时间复杂度的算法。无论数字是1还是90亿（输入“n”），该算法只会执行相同的操作一次，并给出结果。
- en: Also, if you wanted to print out once a phrase like the classic “Hello World”,
    you’d run that too with constant time complexity, since the amount of operations
    (in this case 1) with this or any other phrase will remain the same, no matter
    which operating system or which machine configurations you are using.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你想打印一句像经典的“Hello World”这样的短语，你也会使用常量时间复杂度，因为操作次数（在这种情况下是1）将保持不变，无论你使用什么操作系统或机器配置。
- en: 'To remain constant, these algorithms shouldn’t contain loops, recursions or
    calls to any other non-constant time function. For constant time algorithms, run-time
    doesn’t increase: the order of magnitude is always 1.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为保持常量，这些算法不应包含循环、递归或调用任何其他非常量时间函数。对于常量时间算法，运行时间不会增加：量级始终为1。
- en: 'Linear Time Complexity: O(n)'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性时间复杂度：O(n)
- en: When time complexity grows in direct proportion to the size of the input, you
    are facing Linear Time Complexity, or O(n). Algorithms with this time complexity
    will process the input (n) in “n” number of operations. This means that as the
    input grows, the algorithm takes proportionally longer to complete.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间复杂度与输入大小成正比增长时，你面临的是线性时间复杂度，或O(n)。具有这种时间复杂度的算法会以“n”次操作处理输入（n）。这意味着随着输入的增长，算法完成所需的时间也会成比例增加。
- en: '![Figure](../Images/afda462dc2091a9e79cf422b5e4d47c5.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/afda462dc2091a9e79cf422b5e4d47c5.png)'
- en: Linear Time Complexity
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 线性时间复杂度
- en: 'These are the type of situations where you have to look at every item in a
    list to accomplish a task (e.g. find the maximum or minimum value). Or you can
    also think about everyday tasks like reading a book or finding a CD (remember
    them?) in a CD stack: if all data has to be examined, the larger the input size,
    the higher the number of operations are.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这些情况是你需要查看列表中的每个项来完成任务（例如，找出最大值或最小值）。或者你也可以考虑像读书或在CD堆中寻找一张CD（记得吗？）这样的日常任务：如果所有数据都必须检查，输入数据越大，操作次数就越多。
- en: Linear running time algorithms are very common, and they relate to the fact
    that the algorithm visits every element from the input.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 线性运行时间的算法非常常见，它们与算法访问输入中的每个元素有关。
- en: 'Logarithmic Time Complexity: O(log n)'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 对数时间复杂度：O(log n)
- en: Algorithms with this complexity make computation amazingly fast. An algorithm
    is said to run in logarithmic time if its time execution is proportional to the
    logarithm of the input size. This means that instead of increasing the time it
    takes to perform each subsequent step, the time is decreased at a magnitude that
    is inversely proportional to the input “n”.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 具有这种复杂度的算法使计算变得非常快速。如果一个算法的执行时间与输入大小的对数成正比，则称该算法在对数时间内运行。这意味着，与每个后续步骤所需的时间增加相反，时间以与输入“n”成反比的数量级减少。
- en: '![Figure](../Images/3a264c2fe5abb45f77e567c54d1f387b.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/3a264c2fe5abb45f77e567c54d1f387b.png)'
- en: Logarithmic Time Complexity
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对数时间复杂度
- en: 'What’s the secret of it? These type of algorithms never have to go through
    all of the input, since they usually work by discarding large chunks of unexamined
    input with each step. This time complexity is generally associated with algorithms
    that divide problems in half every time, which is a concept known as “Divide and
    Conquer”. **Divide and Conquer algorithms** solve problems using the following
    steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 它的秘诀是什么？这种类型的算法从不需要遍历所有输入，因为它们通常通过每一步丢弃大量未检查的输入来工作。这种时间复杂度通常与每次将问题对半分割的算法相关，这是一种被称为“分而治之”的概念。**分而治之算法**通过以下步骤解决问题：
- en: They **divide** the given problem into sub-problems of the same type.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们**将**给定问题分解为相同类型的子问题。
- en: They recursively **solve** these sub-problems.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们递归地**解决**这些子问题。
- en: They appropriately **combine** the sub-answers to answer the given problem.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 他们适当地**结合**子答案以回答给定的问题。
- en: 'Consider this example: let’s say that you want to look for a word in a dictionary
    that has every word sorted alphabetically. There are at least two algorithms to
    do that:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：假设你想在一个按字母顺序排列的字典中查找一个词。有至少两种算法可以做到这一点：
- en: '**Algorithm A:**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法 A：**'
- en: Starts at the beginning of the book and goes in order until it finds the contact
    you are looking for.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从书的开头开始，按照顺序查找，直到找到你要找的联系人。
- en: '**Algorithm B:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法 B：**'
- en: Opens the book in the middle and checks the first word on it.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从书的中间打开并检查第一页上的第一个词。
- en: If the word that you are looking for is alphabetically bigger, then it looks
    in the right half. Otherwise, it looks in the left half.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你要找的词在字母顺序上更大，则查找右半部分。否则，查找左半部分。
- en: Which one of both is faster? While algorithm A goes word by word O(n), algorithm
    B splits the problem in half on each iteration O(log n), achieving the same result
    in a much more efficient way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 哪一种更快？算法 A 按字逐个处理 O(n)，而算法 B 在每次迭代中将问题分成两半 O(log n)，以更高效的方式达到相同的结果。
- en: Logarithmic time algorithms (O(log n)) are the second quickest ones after constant
    time algorithms (O(1)).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对数时间算法（O(log n)）是仅次于常数时间算法（O(1)）的第二快算法。
- en: 'Quadratic Time Complexity: O(n²)'
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二次时间复杂度：O(n²)
- en: In this type of algorithms, the time it takes to run grows directly proportional
    to the square of the size of the input (like linear, but squared).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种类型的算法中，运行时间直接与输入大小的平方成正比（类似于线性，但平方）。
- en: In most scenarios and particularly for large data sets, algorithms with quadratic
    time complexities take a lot of time to execute and should be avoided.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数场景中，特别是对于大型数据集，具有二次时间复杂度的算法需要很长时间才能执行，应该避免使用。
- en: '![Figure](../Images/44ccedcee919411f77dc822be5fd0d12.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/44ccedcee919411f77dc822be5fd0d12.png)'
- en: Quadratic Time Complexity
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 二次时间复杂度
- en: Nested **For Loops** run on quadratic time, because you’re running a linear
    operation within another linear operation, or *n*n* which equals *n².*
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套**For 循环**的运行时间是二次的，因为你在另一个线性操作中运行一个线性操作，即*n*n*，等于*n²*。
- en: If you face these types of algorithms, you’ll either need a lot of resources
    and time, or you’ll need to come up with a better algorithm.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到这些类型的算法，你要么需要大量的资源和时间，要么需要想出一个更好的算法。
- en: 'Exponential Time Complexity: O(2^n)'
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指数时间复杂度：O(2^n)
- en: In exponential time algorithms, the growth rate doubles with each addition to
    the input (n), often iterating through all subsets of the input elements. Any
    time an input unit increases by 1, it causes you to double the number of operations
    performed. This doesn’t sound good, right?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在指数时间算法中，增长率随着输入（n）的每次增加而翻倍，通常会遍历所有输入元素的子集。每当输入单元增加1时，都会使你执行的操作数量翻倍。这听起来不太好，对吧？
- en: Algorithms with this time complexity are usually used in situations where you
    don’t know that much about the best solution, and you have to try every possible
    combination or permutation on the data.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种时间复杂度的算法通常在你对最佳解决方案了解不多的情况下使用，你必须尝试所有可能的数据组合或排列。
- en: '![Figure](../Images/103250238115d22ec9fd8205ce3f3712.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/103250238115d22ec9fd8205ce3f3712.png)'
- en: Exponential Time Complexity
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 指数时间复杂度
- en: Exponential time complexity is usually seen in **Brute-Force algorithms**. These
    algorithms blindly iterate an entire domain of possible solutions in search of
    one or more solutions which satisfy a condition. They try to find the correct
    solution by simply trying every possible solution until they happen to find the
    correct one. This is obviously a not optimal way of performing a task, since it
    will affect the time complexity. Brute-Force algorithms are used in *cryptography* as
    attacking methods to defeat password protection by trying random stings until
    they find the correct password that unlocks the system.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 指数时间复杂度通常出现在**暴力算法**中。这些算法盲目地遍历整个可能解决方案的领域，以寻找一个或多个满足条件的解决方案。它们通过简单地尝试每一个可能的解决方案直到找到正确的来找到解决方案。这显然不是一种优化的任务执行方式，因为它会影响时间复杂度。暴力算法在*密码学*中作为攻击方法使用，通过尝试随机字符串来破解密码保护，直到找到正确的密码来解锁系统。
- en: As in quadratic time complexity, you should avoid algorithms with exponential
    running times since they don’t scale well.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与二次时间复杂度一样，你应该避免使用具有指数运行时间的算法，因为它们扩展性差。
- en: How to measure time complexity?
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如何测量时间复杂度？
- en: Generally speaking, we’ve seen that the fewer operations the algorithm has,
    the faster it will be. This looks like a good principle, but how can we apply
    it to reality?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，我们发现算法的操作越少，它的速度越快。这看起来是个好原则，但我们如何将它应用到现实中呢？
- en: If we have an algorithm (whatever it is), how do we know its time complexity?
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果我们有一个算法（不论是什么），我们怎么知道它的时间复杂度呢？
- en: In some cases, this may be relatively easy. Let’s say you have an outer **For
    Loop** that iterates through all the items in the input list and then a nested
    inner **For Loop**, which again iterates through all the items in the input list.
    The total number of steps performed is n * n, where n is the number of items in
    the input array.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，这可能相对简单。假设你有一个外部**For循环**，它遍历输入列表中的所有项，然后是一个嵌套的内部**For循环**，它再次遍历输入列表中的所有项。执行的总步骤数是n
    * n，其中n是输入数组中的项数。
- en: But how do you find the time complexity of complex functions?
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但是，你如何找出复杂函数的时间复杂度呢？
- en: To find the answer, we need to break down the algorithm code into parts and
    try to find the complexity of the individual pieces. Yes, sorry to tell you that,
    but there isn’t a button you can press that tells you the time complexity of an
    algorithm. You have to do it yourself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到答案，我们需要将算法代码拆解成各个部分，并尝试找出各个部分的复杂度。是的，抱歉告诉你，但并没有一个按钮可以告诉你算法的时间复杂度。你必须自己去做。
- en: '![Figure](../Images/c76d685c6f1c0f5aaf2f285dae631429.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/c76d685c6f1c0f5aaf2f285dae631429.png)'
- en: Main Time Complexities
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 主要时间复杂度
- en: '**As a rule of thumb, it is best to try and keep your functions running below
    or within the range of linear time-complexity, **but obviously it won’t always
    be possible.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**作为经验法则，最好尽量保持你的函数运行在线性时间复杂度范围内，**但显然这并不总是可能的。'
- en: There are different **Big O notations**, like *“best case”*, “*average case”,* and *“worst
    case”*, but what really matters is the **worst case scenario**; those are the
    ones that can seriously crash everything. They go right to the heart of why time
    complexity matters and point to why some algorithms simply cannot solve a problem
    without taking a few billion years to do it.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的**大O记法**，例如*“最佳情况”*、*“平均情况”*和*“最差情况”*，但真正重要的是**最差情况**；这些情况是可能严重崩溃一切的。它们直接触及时间复杂度为何重要，并指出为何一些算法在不花费几亿年时间的情况下根本无法解决问题。
- en: '**Worst case analysis **gives the maximum number of basic operations that have
    to be performed during execution of the algorithm. It assumes that the input is
    in the worst possible state and maximum work has to be done to put things right.
    For example, for a sorting algorithm which aims to sort an array in ascending
    order, the worst case occurs when the input array is in descending order. In this
    case, maximum number of basic operations (comparisons and assignments) have to
    be done to set the array in ascending order. Think it this way: if you had to
    search for a name in a directory by reading every name until you found the right
    one, the worst case scenario is that the name you want is the very last entry
    in the directory.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**最坏情况分析** 给出了执行算法时必须执行的基本操作的最大数量。它假设输入处于最糟糕的状态，并且需要做最大量的工作以纠正问题。例如，对于一个旨在将数组按升序排序的排序算法，当输入数组按降序排列时，最坏的情况就会发生。在这种情况下，必须进行最多的基本操作（比较和赋值）以将数组设置为升序。这样想：如果你必须通过阅读每个名字来在目录中搜索一个名字，直到找到正确的那个，最坏的情况是你想要的名字是目录中的最后一个条目。'
- en: To sum up, **the better the time complexity of an algorithm is, the faster the
    algorithm will carry out the work in practice.** You should take into account
    this matter when designing or managing algorithms, and consider that it can make
    a big difference as to whether an algorithm is practical or completely useless.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，**算法的时间复杂度越低，实际工作中算法执行得越快。** 在设计或管理算法时，你应该考虑这一点，并意识到它可能会对算法的实用性或完全无用性产生巨大差异。
- en: Interested in these topics? Follow me on [Linkedin](https://www.linkedin.com/in/lopezyse/) or [Twitter](https://twitter.com/lopezyse)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些主题感兴趣？请在 [Linkedin](https://www.linkedin.com/in/lopezyse/) 或 [Twitter](https://twitter.com/lopezyse)
    上关注我
- en: '**Bio: [Diego Lopez Yse](https://www.linkedin.com/in/lopezyse/)** is an experienced
    professional with a solid international background acquired in different industries
    (capital markets, biotechnology, software, consultancy, government, agriculture).
    Always a team member. Skilled in Business Management, Analytics, Finance, Risk,
    Project Management and Commercial Operations. MS in Data Science and Corporate
    Finance.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[Diego Lopez Yse](https://www.linkedin.com/in/lopezyse/)** 是一位经验丰富的专业人士，拥有在不同领域（资本市场、生物技术、软件、咨询、政府、农业）获得的坚实国际背景。始终是团队的一员。擅长商业管理、分析、金融、风险、项目管理和商业运营。拥有数据科学和企业金融硕士学位。'
- en: '[Original](https://towardsdatascience.com/essential-programming-time-complexity-a95bb2608cac).
    Reposted with permission.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/essential-programming-time-complexity-a95bb2608cac)。经许可转载。'
- en: '**Related:**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Python For Everybody: The Free eBook](/2020/05/python-everybody-free-ebook.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[人人都能用的 Python：免费电子书](/2020/05/python-everybody-free-ebook.html)'
- en: '[Classify A Rare Event Using 5 Machine Learning Algorithms](/2020/01/classify-rare-event-machine-learning-algorithms.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 5 种机器学习算法分类稀有事件](/2020/01/classify-rare-event-machine-learning-algorithms.html)'
- en: '[Coding habits for data scientists](/2020/05/coding-habits-data-scientists.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的编码习惯](/2020/05/coding-habits-data-scientists.html)'
- en: '* * *'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全领域的职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Memory Complexity with Transformers](https://www.kdnuggets.com/2022/12/memory-complexity-transformers.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Transformers 的内存复杂度](https://www.kdnuggets.com/2022/12/memory-complexity-transformers.html)'
- en: '[Linear Regression Model Selection: Balancing Simplicity and Complexity](https://www.kdnuggets.com/2023/02/linear-regression-model-selection-balancing-simplicity-complexity.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[线性回归模型选择：平衡简洁性与复杂性](https://www.kdnuggets.com/2023/02/linear-regression-model-selection-balancing-simplicity-complexity.html)'
- en: '[Learn how to design, measure and implement trustworthy A/B tests…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习如何设计、测量和实施可信的 A/B 测试……](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
- en: '[How To Calculate Algorithm Efficiency](https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何计算算法效率](https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html)'
- en: '[Elevate Math Efficiency: Navigating Numpy Array Operations](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升数学效率：导航 Numpy 数组操作](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
- en: '[Maximizing Efficiency in Data Analysis with ChatGPT](https://www.kdnuggets.com/maximizing-efficiency-in-data-analysis-with-chatgpt)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[利用 ChatGPT 最大化数据分析效率](https://www.kdnuggets.com/maximizing-efficiency-in-data-analysis-with-chatgpt)'
