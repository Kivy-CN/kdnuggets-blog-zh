- en: Create a Dashboard Using Python and Dash
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 Dash 创建仪表盘
- en: 原文：[https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html](https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html](https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html)
- en: Introduction
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In the realm of data science and analytics, the power of data is unleashed not
    just by extracting insights but also by effectively communicating these insights;
    this is where **data visualization** comes into play.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据科学和分析的领域中，数据的力量不仅在于提取洞察力，还在于有效地传达这些洞察力；这就是**数据可视化**发挥作用的地方。
- en: '![Create a Dashboard Using Python and Dash](../Images/b8b4e5ee1e64e8038a4a0132d1912889.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 和 Dash 创建仪表盘](../Images/b8b4e5ee1e64e8038a4a0132d1912889.png)'
- en: Data visualization is a graphical representation of information and data. It
    uses visual elements like charts, graphs, and maps, which make it easier to see
    patterns, trends, and outliers in the raw data. For data scientists and analysts,
    data visualization is an essential tool that facilitates a quicker and more precise
    understanding of the data, supports storytelling with data, and aids in making
    data-driven decisions.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可视化是信息和数据的图形化表现。它使用图表、图形和地图等视觉元素，使得更容易看出原始数据中的模式、趋势和异常值。对于数据科学家和分析师而言，数据可视化是一个重要工具，它有助于更快、更准确地理解数据，支持数据故事讲述，并有助于做出数据驱动的决策。
- en: In this article, you’ll learn to use **Python ** and the **Dash ** framework
    to create a **dashboard **to visualize Netflix’s content distribution and classification.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，你将学习如何使用**Python**和**Dash**框架创建一个**仪表盘**来可视化 Netflix 的内容分布和分类。
- en: '![Create a Dashboard Using Python and Dash](../Images/f1d265e848985ebd2e61e3f46ed36fbd.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 和 Dash 创建仪表盘](../Images/f1d265e848985ebd2e61e3f46ed36fbd.png)'
- en: What is Dash?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Dash？
- en: '[Dash](https://dash.plotly.com/) is an open-source low-code framework developed
    by **Plotly** to create analytical web applications in pure Python. Traditionally,
    for such purposes, one might need to use** JavaScript and HTML**, requiring you
    to have expertise in both backend (Python) and frontend (JavaScript, HTML) technologies.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[Dash](https://dash.plotly.com/) 是一个由**Plotly**开发的开源低代码框架，用于在纯 Python 中创建分析性
    Web 应用程序。传统上，为了实现这些目的，人们可能需要使用**JavaScript 和 HTML**，这需要你在后台（Python）和前端（JavaScript、HTML）技术方面都有专业知识。'
- en: However, Dash bridges this gap, enabling Data Scientists and Analysts to build
    interactive, aesthetic dashboards *only using Python*. This aspect of low-code
    development makes Dash a suitable choice for creating analytical dashboards, especially
    for those primarily comfortable with Python.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Dash 弥补了这一差距，使数据科学家和分析师能够*仅使用 Python*构建交互式、美观的仪表盘。这种低代码开发的特点使 Dash 成为创建分析仪表盘的合适选择，尤其是对于那些主要使用
    Python 的人。
- en: Dataset Analysis
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据集分析
- en: Now that you’ve been acquainted with Dash, let’s begin our hands-on project.
    You’ll use the [**Netflix Movies and TV Shows dataset**](https://www.kaggle.com/datasets/shivamb/netflix-shows) available
    on **Kaggle, **created by **Shivam Bansal**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了 Dash，让我们开始我们的实践项目。你将使用[**Netflix 电影和电视节目数据集**](https://www.kaggle.com/datasets/shivamb/netflix-shows)，该数据集由**Shivam
    Bansal**创建，并可以在**Kaggle**上获得。
- en: This dataset comprises details about the movies and TV shows available on Netflix
    as of 2021, such as the type of content, title, director, cast, country of production,
    release year, rating, duration, and more.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集包含了截至2021年 Netflix 上可用的电影和电视节目的详细信息，如内容类型、标题、导演、演员、制作国家、发行年份、评级、时长等。
- en: '**Even though the dataset was created in 2021, it’s still a valuable resource
    for developing data visualization skills and understanding trends in media entertainment.**'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**尽管数据集创建于2021年，但它仍然是发展数据可视化技能和理解媒体娱乐趋势的宝贵资源。**'
- en: 'Using this dataset, you’ll aim to create a dashboard that allows visualizing
    the following points:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用该数据集，你的目标是创建一个仪表盘，允许可视化以下几点：
- en: '**Geographical content distribution**: A map graph showcasing how content production
    varies across different countries over the years.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**地理内容分布**：一张地图图表展示了内容生产在不同国家之间的年度变化。'
- en: '**Content classification**: This visualization divides Netflix’s content into
    TV shows and movies to see which genres are most prominent.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**内容分类**：这个可视化将 Netflix 的内容分为电视节目和电影，以查看哪些类型最为突出。'
- en: Setting up the Project Workspace
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目工作区
- en: 'Let’s start creating a directory for the project named *netflix-dashboard,* then
    initialize and activate a Python virtual environment via the following commands:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建一个名为*netflix-dashboard*的项目目录，然后通过以下命令初始化和激活 Python 虚拟环境：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, you’ll need to install some external packages. You’ll be using `pandas` for
    data manipulation, `dash` for creating the dashboard, `plotly` for creating the
    graphs, and `dash-bootstrap-components` to add some style to the dashboard:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你需要安装一些外部包。你将使用`pandas`进行数据处理，`dash`创建仪表板，`plotly`绘制图表，以及`dash-bootstrap-components`为仪表板添加一些样式：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Cleaning the Dataset
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 清理数据集
- en: Going through the Netflix dataset, you’ll find missing values in the `director`, `cast`,
    and `country` columns. It would also be convenient to convert the `date_added` column `string` values
    to `datetime` for easier analysis.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Netflix 数据集中，你会发现`director`、`cast`和`country`列中有缺失值。将`date_added`列的`string`值转换为`datetime`以便于分析也会很方便。
- en: 'To clean the dataset, you can create a new file *clean_netflix_dataset.py, *with
    the following code and then run it:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要清理数据集，你可以创建一个新的文件*clean_netflix_dataset.py*，其中包含以下代码，然后运行它：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Getting started with Dash
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Dash
- en: 'With the workspace set up and the dataset cleaned, you’re ready to start working
    on your dashboard. Create a new file *app.py,* with the following code:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 设置好工作空间并清理数据集后，你准备开始制作仪表板了。创建一个新的文件*app.py*，其中包含以下代码：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s break down the code within *app.py*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解析一下*app.py*中的代码：
- en: '`app = Dash(__name__)`: This line initializes a new Dash app. Think of it as
    the foundation of your application.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app = Dash(__name__)`：这一行初始化了一个新的 Dash 应用程序。可以把它看作是你应用的基础。'
- en: '`app.layout = html.Div(…)`: The `app.layout` attribute lets you write **HTML-like
    code** to design your application’s user interface. The above layout uses a `html.H1(…)` heading
    element for the dashboard title and a horizontal rule `html.Hr()` element below
    the title.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.layout = html.Div(…)`：`app.layout`属性允许你编写**类似 HTML 的代码**来设计应用的用户界面。上述布局使用了`html.H1(…)`标题元素作为仪表板标题，并在标题下方添加了一个水平规则`html.Hr()`元素。'
- en: '`app.run(debug=True)`: This line starts a development server that serves your
    Dash app in local development mode. Dash uses [**Flask**](https://flask.palletsprojects.com/en/2.3.x/),
    a lightweight web server framework, to serve your applications to web browsers.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.run(debug=True)`：这一行启动了一个开发服务器，在本地开发模式下提供你的 Dash 应用。Dash 使用[**Flask**](https://flask.palletsprojects.com/en/2.3.x/)，一个轻量级的
    web 服务器框架，将你的应用提供给 web 浏览器。'
- en: 'After running *app.py*, you’ll see a message in your terminal indicating that
    your Dash app is running and accessible at [http://127.0.0.1:8050/](http://127.0.0.1:8050/).
    Open this URL in your web browser to view it:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 运行*app.py*后，你会在终端中看到一条消息，指示你的 Dash 应用正在运行并可以在[http://127.0.0.1:8050/](http://127.0.0.1:8050/)访问。打开此
    URL 以在你的 web 浏览器中查看：
- en: '![Create a Dashboard Using Python and Dash](../Images/ff7f8455e7d9825e3b9662936720dad6.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 和 Dash 创建仪表板](../Images/ff7f8455e7d9825e3b9662936720dad6.png)'
- en: Your first Dash app!
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你的第一个 Dash 应用程序！
- en: The result looks very plain, right? Don’t worry! This section aimed to showcase
    the most basic Dash app structure and components. You’ll soon add more features
    and components to make it an awesome dashboard!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 结果看起来很简单，对吧？别担心！这一部分旨在展示最基本的 Dash 应用结构和组件。你很快会添加更多功能和组件，使其成为一个令人惊叹的仪表板！
- en: Incorporating Dash Bootstrap Components
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 纳入 Dash Bootstrap 组件
- en: The next step is to write the code for the layout of your dashboard and add
    some style to it! For this, you can use **Dash Bootstrap Components (DBC)**, a
    library that provides Bootstrap components for Dash, enabling you to develop styled
    apps with responsive layouts.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写仪表板布局的代码并为其添加一些样式！为此，你可以使用**Dash Bootstrap Components (DBC)**，一个为 Dash
    提供 Bootstrap 组件的库，使你能够开发具有响应式布局的样式化应用。
- en: The dashboard will be styled in a **tab layout**, which provides a compact way
    to organize different types of information within the same space. Each tab will
    correspond to a distinct visualization.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板将以**选项卡布局**样式化，这提供了一种在同一空间内组织不同类型信息的紧凑方式。每个选项卡将对应于一个独特的可视化。
- en: 'Let’s go ahead and modify the contents of *app.py* to incorporate DBC:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续修改*app.py*的内容以纳入 DBC：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this modified layout, you’ll see new components:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个修改后的布局中，你会看到新的组件：
- en: '`dbc.Container`: Using `dbc.Container` as the top-level component wraps the
    entire dashboard layout in a responsive and flexible container.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbc.Container`：使用`dbc.Container`作为顶级组件将整个仪表板布局包裹在一个响应式和灵活的容器中。'
- en: '`dcc.Store`: This Dash Core component allows you to store data client-side
    (on the user’s browser), enhancing the application’s performance by keeping the
    data locally.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dcc.Store`：这个Dash Core组件允许你将数据存储在客户端（用户的浏览器）上，通过本地存储数据来提升应用性能。'
- en: '`dbc.Tabs` and `dbc.Tab`: Each `dbc.Tab` represents an individual tab, which
    will contain different visualizations. The `label` property is what appears on
    the tab itself, and the `tab_id` is used to identify the tab. The `active_tab` property
    of `dbc.Tabs` is used to specify the active tab when the Dash app starts.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbc.Tabs`和`dbc.Tab`：每个`dbc.Tab`代表一个独立的标签页，包含不同的可视化内容。`label`属性显示在标签页上，`tab_id`用于标识标签页。`dbc.Tabs`的`active_tab`属性用于指定Dash应用启动时的活动标签页。'
- en: 'Now run *app.py. *The resulting dashboard will now have a Bootstrap-styled
    layout with two empty tabs:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行*app.py*。生成的仪表板将具有Bootstrap样式布局，包含两个空标签页：
- en: '![Create a Dashboard Using Python and Dash](../Images/1d67aef5135840393d49c1ec4cf84ac8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python和Dash创建仪表板](../Images/1d67aef5135840393d49c1ec4cf84ac8.png)'
- en: Incorporating Bootstrap for a tab-styled layout
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 集成Bootstrap以实现标签样式布局
- en: Good going! You’re finally ready to add visualizations to the dashboard.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 干得不错！你终于准备好将可视化内容添加到仪表板中。
- en: Adding Callbacks and Visualizations
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加回调和可视化
- en: When working with Dash, interactivity is achieved through **callback functions**.
    A callback function is a function that gets automatically called when an input
    property changes. It’s named “callback” because it’s a function that is “called
    back” by Dash whenever a change happens in the application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Dash时，通过**回调函数**实现交互性。回调函数是在输入属性变化时自动调用的函数。之所以称为“回调”，是因为它是一个被Dash在应用发生变化时“回调”的函数。
- en: In this dashboard, you will use callbacks to render the relevant visualization
    in the selected tab, and each visualization will be stored within its own Python
    file under a new *components* directory for better organization and modularity
    of the project structure.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个仪表板中，你将使用回调函数在选定的标签页中呈现相关的可视化，每个可视化将存储在*components*目录下的独立Python文件中，以便更好地组织和模块化项目结构。
- en: Geographical content distribution visualization
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 地理内容分布可视化
- en: 'Let’s create a new directory named *components*, and within it, create the *geographical_content.py* file
    that will generate a **choropleth map** illustrating how Netflix’s content production
    varies by country over the years:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为*components*的新目录，在其中创建一个*geographical_content.py*文件，该文件将生成一个**区域图**，展示Netflix的内容生产如何随年份在各国之间变化：
- en: '[PRE7]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The above code filters and groups the data by `'country'` and `'year_added'` ,
    then computes the count of content produced by each country for each year within
    the `df_counts` DataFrame.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码通过`'country'`和`'year_added'`过滤和分组数据，然后计算每个国家在`df_counts`数据框中每年的内容生产量。
- en: 'Then, the `px.choroplet` function builds the map graph using the columns from
    the `df_counts` DataFrame as values for its arguments:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，`px.choropleth`函数使用`df_counts`数据框中的列作为其参数值来构建地图图表：
- en: '`locations=''country''`: Allows you to specify the geographic location values
    contained in the `''country''` column.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locations=''country''`：允许你指定`''country''`列中包含的地理位置值。'
- en: '`locationmode=''country names''`: This argument “tells the function” that the
    provided `locations` are country names since Plotly Express also supports other
    location modes like ISO-3 country codes or USA states.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locationmode=''country names''`：这个参数“告诉函数”提供的`locations`是国家名称，因为Plotly Express也支持其他位置模式，如ISO-3国家代码或美国州名。'
- en: '`color=''count''`: It is used to specify the numeric data used to color the
    map. Here, it refers to the `''count''` column, which contains the count of content
    produced by each country for each year.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color=''count''`：用于指定用于着色地图的数值数据。这里，它指的是`''count''`列，该列包含每个国家每年的内容生产量。'
- en: '`color_continous_scale=''YlGnBu''`: Builds a continuous color scale for each
    country in the map when the column denoted by `color` contains numeric data.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color_continuous_scale=''YlGnBu''`：为地图中的每个国家构建一个连续的颜色比例，当`color`指定的列包含数值数据时。'
- en: '`animation_frame=''year_added''`: This argument creates an animation over the `''year_added''` column.
    It adds a year slider to the map graph, allowing you to view an animation that
    represents the evolution of this content production in each country year after
    year.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`animation_frame=''year_added''`：这个参数在`''year_added''`列上创建动画。它在地图图表中添加一个年份滑块，允许你查看表示各国内容生产演变的动画。'
- en: '`projection=''natural earth''`: This argument doesn’t use any columns from
    the `df_counts` DataFrame; however, the `''natural earth''` value is required
    to set the projection with the Earth''s world map.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`projection=''natural earth''`：这个参数没有使用`df_counts` DataFrame中的任何列；然而，`''natural
    earth''`值用于设置地球世界地图的投影。'
- en: And right below the choropleth map, a **line chart with markers** is included
    showcasing the change in the content volume, categorized by type (TV shows or
    movies), over the years.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在层析图地图下方，还包含了一个**带标记的折线图**，展示了内容数量的变化情况，按类型（电视节目或电影）分类，显示多年变化。
- en: To generate the line chart, a new DataFrame `df_year_counts` is created, which
    groups the original `df` data by `'year_added'` and `'type'` columns, tallying
    the content count for each combination.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成折线图，创建了一个新的DataFrame`df_year_counts`，该DataFrame通过`'year_added'`和`'type'`列对原始`df`数据进行分组，统计每种组合的内容数量。
- en: This grouped data is then used with `px.line` where the `'x'` and `'y'` arguments
    are assigned to the `'year_added'` and `'count'` columns respectively, and the `'color'` argument
    is set to `'type'` to differentiate between TV shows and movies.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`px.line`处理这些分组数据，其中`'x'`和`'y'`参数分别分配给`'year_added'`和`'count'`列，`'color'`参数设置为`'type'`以区分电视节目和电影。
- en: Content classification visualization
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内容分类可视化
- en: 'The next step is to create a new file named c*ontent_classification.py*, which
    will generate a **treemap** graph to visualize Netflix’s content from a type and
    genre perspective:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个名为c*ontent_classification.py*的新文件，该文件将生成一个**树图**图表，以从类型和类别的角度可视化Netflix的内容：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the above code, after loading the data, the `'listed_in'` column is adjusted
    to handle multiple genres per content by splitting and exploding the genres, creating
    a new row for each genre per content.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，数据加载后，对`'listed_in'`列进行调整，通过拆分和展开每个内容的多种类型来处理多个类型，为每个类型创建一个新行。
- en: Next, the `df_counts` DataFrame is created to group the data by `'type'`, and `'listed_in'` columns,
    and calculate the count of each type-genre combination.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建`df_counts` DataFrame，以`'type'`和`'listed_in'`列对数据进行分组，并计算每种类型-类别组合的数量。
- en: 'Then, the columns from the `df_counts` DataFrame are used as values for the `px.treemap` function
    arguments as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`df_counts` DataFrame中的列用作`px.treemap`函数参数的值，如下所示：
- en: '`path=[''type'', ''listed_in'']`: These are the hierarchical categories represented
    in the treemap. The `''type''` and `''listed_in''` columns contain the types of
    content (TV shows or movies) and genres, respectively.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`path=[''type'', ''listed_in'']`：这些是树图中表示的层次类别。`''type''`和`''listed_in''`列分别包含内容的类型（电视节目或电影）和类别。'
- en: '`values=''count''`: The size of each rectangle in the treemap corresponds to
    the `''count''` column, representing the content amount for each type-genre combination.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`values=''count''`：树图中每个矩形的大小对应于`''count''`列，表示每种类型-类别组合的内容数量。'
- en: '`color=''count''`: The `''count''` column is also used to color the rectangles
    in the treemap.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color=''count''`：`''count''`列也用于为树图中的矩形着色。'
- en: '`color_continous_scale=''Ice''`: Builds a continuous color scale for each rectangle
    in the treemap when the column denoted by `color` contains numeric data.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color_continous_scale=''Ice''`：当由`color`表示的列包含数字数据时，为树图中的每个矩形构建一个连续的颜色刻度。'
- en: 'After creating the two new visualization files, here is how your current project
    structure should look like:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了两个新的可视化文件后，你当前的项目结构应该如下所示：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Implementing callbacks
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现回调函数
- en: 'The last step is to modify *app.py* to import the two new visualizations within
    the *components* directory and implement callback functions to render the graphs
    when selecting the tabs:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是修改*app.py*，以导入*components*目录中的两个新可视化，并实现回调函数，以在选择标签时渲染图表：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The callback decorator `@app.callback` listen to changes in the `'active_tab'` property
    of the `'tabs'` component, represented by the `Input` object.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 回调装饰器`@app.callback`监听`'tabs'`组件的`'active_tab'`属性的变化，由`Input`对象表示。
- en: Whenever the `'active_tab'` changes, the `switch_tab` function gets triggered.
    This function checks the `'active_tab'` id and returns the corresponding layout
    to be rendered in the `'tab-content'` Div, as indicated by the `Output` object.
    Therefore, when you switch tabs, the relevant visualization appears.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每当`'active_tab'`发生变化时，`switch_tab`函数会被触发。这个函数检查`'active_tab'`的id，并返回要在`'tab-content'`
    Div中渲染的相应布局，如`Output`对象所示。因此，当你切换标签时，相关的可视化会出现。
- en: 'Finally, run *app.py* once again to view the updated dashboard with the new
    visualizations:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，再次运行*app.py*以查看包含新可视化的更新仪表板：
- en: '![Create a Dashboard Using Python and Dash](../Images/80de65f3d7f2a801cc3f1377172f0802.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python和Dash创建仪表板](../Images/80de65f3d7f2a801cc3f1377172f0802.png)'
- en: Netflix Movies and TV Shows Dashboard — Final result
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix电影和电视节目仪表板 — 最终结果
- en: Wrapping up
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: This article taught you how to create a dashboard to explore and visualize Netflix’s
    content distribution and classification. By harnessing the power of Python and
    Dash, you’re now equipped to create your own visualizations, providing invaluable
    insights into your data.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本文教会了您如何创建一个仪表板来探索和可视化Netflix的内容分布和分类。通过利用Python和Dash的力量，您现在已经能够创建自己的可视化，从而为您的数据提供宝贵的洞察。
- en: You can take a look at the entire code of this project in the following GitHub
    repository: [https://github.com/gutyoh/netflix-dashboard](https://github.com/gutyoh/netflix-dashboard)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下GitHub仓库查看此项目的完整代码：[https://github.com/gutyoh/netflix-dashboard](https://github.com/gutyoh/netflix-dashboard)
- en: If you found this article helpful and want to expand your knowledge on Python
    and Data Science, consider checking out the [**Introduction to Data Science track**](https://hyperskill.org/tracks?utm_source=fcc_hs&utm_medium=social&utm_campaign=dash&category=13) on
    Hyperskill.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您觉得这篇文章对您有帮助，并且想扩展对Python和数据科学的知识，考虑查看Hyperskill上的[**数据科学入门课程**](https://hyperskill.org/tracks?utm_source=fcc_hs&utm_medium=social&utm_campaign=dash&category=13)。
- en: Let me know in the comments below if you have any questions or feedback regarding
    this blog.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对本博客有任何问题或反馈，请在下面的评论中告诉我。
- en: '**[Hermann Rösch](https://www.linkedin.com/in/hrosch/)** is a Technical Author
    for the Go programming track at Hyperskill, where he blend my passion for EdTech
    to empower the next generation of software engineers. Simultaneously, delving
    into the world of data as a Master''s student at the University of Illinois at
    Urbana-Champaign.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**[赫尔曼·罗斯](https://www.linkedin.com/in/hrosch/)** 是Hyperskill Go编程课程的技术作者，他将对教育科技的热情与赋能下一代软件工程师的使命融合在一起。同时，作为伊利诺伊大学厄本那-香槟分校的硕士生，他还深入数据领域。'
- en: '[Original](https://python.plainenglish.io/create-a-dashboard-using-python-and-dash-fdf2ec20f8ac).
    Reposted with permission.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始](https://python.plainenglish.io/create-a-dashboard-using-python-and-dash-fdf2ec20f8ac).
    经许可转载。'
- en: '* * *'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织IT'
- en: '* * *'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 进一步阅读此主题
- en: '[Create a Time Series Ratio Analysis Dashboard](https://www.kdnuggets.com/2023/06/wolfer-create-time-series-ratio-analysis-dashboard.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建时间序列比率分析仪表板](https://www.kdnuggets.com/2023/06/wolfer-create-time-series-ratio-analysis-dashboard.html)'
- en: '[How To Create Custom Context Managers in Python](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在Python中创建自定义上下文管理器](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)'
- en: '[How To Create Minimal Docker Images for Python Applications](https://www.kdnuggets.com/how-to-create-minimal-docker-images-for-python-applications)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何为Python应用程序创建最小化Docker镜像](https://www.kdnuggets.com/how-to-create-minimal-docker-images-for-python-applications)'
- en: '[How to Create a Sampling Plan for Your Data Project](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何为您的数据项目创建抽样计划](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
- en: '[How to Create a Dataset for Machine Learning](https://www.kdnuggets.com/2022/02/create-dataset-machine-learning.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何为机器学习创建数据集](https://www.kdnuggets.com/2022/02/create-dataset-machine-learning.html)'
- en: '[Create Efficient Combined Data Sources with Tableau](https://www.kdnuggets.com/2022/05/create-efficient-combined-data-sources-tableau.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Tableau创建高效的综合数据源](https://www.kdnuggets.com/2022/05/create-efficient-combined-data-sources-tableau.html)'
