["```py\npip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu\n```", "```py\na = torch.tensor([2, 4, 5])\nprint(a)\n```", "```py\nOutput>> \ntensor([2, 4, 5])\n```", "```py\ne = torch.tensor([[1, 2, 3],\n                [4, 5, 6]])\nf = torch.tensor([7, 8, 9])\n\nprint(e * f)\n```", "```py\nOutput>>\ntensor([[ 7, 16, 27],\n        [28, 40, 54]])\n```", "```py\ng = torch.randn(2, 3)\nh = torch.randn(3, 2)\nprint( g @ h)\n```", "```py\nOutput>> \ntensor([[-0.8357,  0.0583],\n        [-2.7121,  2.1980]])\n```", "```py\nx = torch.rand(3,4)\n\nprint(\"Shape:\", x.shape)\nprint(\"Data type:\", x.dtype)\nprint(\"Device:\", x.device)\n```", "```py\nOutput>>\nShape: torch.Size([3, 4])\nData type: torch.float32\nDevice: cpu\n```", "```py\nimport torch\n\nclass SimpleNet(nn.Module):\n    def __init__(self, input, hidden, output):\n        super(SimpleNet, self).__init__()\n        self.fc1 = torch.nn.Linear(input, hidden)\n        self.fc2 = torch.nn.Linear(hidden, output)\n\n    def forward(self, x):\n        x = torch.nn.functional.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\ninp = 10\nhid = 10\noutp = 2\nmodel = SimpleNet(inp, hid, out)\n\nprint(model)\n```", "```py\nOutput>>\nSimpleNet(\n  (fc1): Linear(in_features=10, out_features=10, bias=True)\n  (fc2): Linear(in_features=10, out_features=2, bias=True)\n)\n```", "```py\nimport torch\n\ninp = torch.randn(100, 10) \ntar = torch.randint(0, 2, (100,)) \ncriterion = torch.nn.CrossEntropyLoss()\noptimizr = torch.optim.SGD(model.parameters(), lr=0.01)\n\nepochs = 100\nbatchsize = 10\n\nfor epoch in range(numepochs):\n    model.train()\n\n    for i in range(0, inp.size(0), batchsize):\n        batch_inp = inputs[i:i+batch_size]\n        batch_tar = targets[i:i+batch_size]\n\n        out = model(batch_inp)\n        loss = criterion(out, batch_tar)\n\n        optimizer.zero_grad()\n        loss.backward()\n        optimizr.step()\n\n    if (epoch + 1) % 10 == 0:\n        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {round(loss.item(),4})')\n```", "```py\nfrom sklearn.metrics import classification_report\n\nmodel.eval()\ntest_inputs = torch.randn(20, 10)\ntest_targets = torch.randint(0, 2, (20,))\n\nwith torch.no_grad():\n    test_outputs = model(test_inputs)\n    _, predicted = torch.max(test_outputs, 1)\n\nprint(classification_report(test_targets, predicted))\n```"]