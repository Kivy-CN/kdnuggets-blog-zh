["```py\nimport pandas as pd\ndf = pd.read_csv(\"..\\\\dataset\\\\ecommerce_sample.csv\")\ndf.head()\n\n```", "```py\nfrom sklearn.linear_model import LassoCV\nfrom bokeh.io import show\nfrom bokeh.plotting import figure\n\n#get kpi_axis\nkpi_axis = 'kpi'\ntime_axis = 'time'\ndf[time_axis] = pd.to_datetime(df[time_axis],format = '%d/%m/%Y')\ny_before =  df[df[time_axis] <= '2019-09-11'][kpi_axis] y_after = df[df[time_axis] > '2019-09-11'][kpi_axis]\n\n#one-hot encoding categorical features\nfor col in df.drop([kpi_axis,time_axis],axis=1).columns:\n    one_hot = pd.get_dummies(df[col]) \n    df = df.drop(col,axis = 1) \n    df = df.join(one_hot) \n\nX_before =  df[df[time_axis] <= '2019-09-11'].drop([kpi_axis,time_axis],axis = 1).to_numpy() X_after = df[df[time_axis] >  '2019-09-11'].drop([kpi_axis,time_axis],axis = 1).to_numpy()\n\n#training left and right\nregression_model_before = LassoCV(cv = 10)\nregression_model_after = LassoCV(cv = 10)\nregression_model_before.fit(X_before,y_before)\nregression_model_after.fit(X_after,y_after)\n\n#plotting results\nfeatures = df.columns\ndweights =regression_model_after - regression_model_before\nindex = np.argsort(-abs(dweights))\nx_axis = features[index[0:3]].to_list()\n\np = figure(x_range=x_axis,title = \"Feature weights difference\",plot_width=1000)\np.vbar(x=x_axis, top=(abs(dweights[index[0:3]])),width = 0.8)\nshow(p)\n\n```", "```py\ndef binarize(df,cols,kpi_axis,time_axis,order):\n    cols = cols.drop([kpi_axis,time_axis])\n    features = []\n    for k in range(0,order):\n        features.append(cols)\n    fs = []\n    for f in itertools.product(*features):\n      #  list(set(f)).sort()\n        f = np.unique(f)\n        fs.append(tuple(f))\n    fs = tuple(set(i for i in fs))\n    print(fs)\n    for f in fs:\n        print(len(f))\n        states =[]\n        for d in f:\n            states.append(tuple(set(df[d].astype('category'))))\n        for state in itertools.product(*states):\n            z = 1\n            name = str()\n            for d in range(0,len(f)):\n                z = z*df[f[d]]==state[d]\n                name +=  f[d] + \" == \" +str(state[d])\n                if d<len(f)-1:\n                   name += \" AND \"\n            df[name] = z\n    for d in cols:\n        df = df.drop([d],axis = 1)\n    return df\n\n```", "```py\ndf = pd.read_csv(\"..\\\\dataset\\\\ecommerce_sample.csv\")\ndf[time_axis] = pd.to_datetime(df[time_axis],format = '%d/%m/%Y')\n\n#get kpi_axis\nkpi_axis = 'kpi'\ntime_axis = 'time'\ny_before =  df[df[time_axis] <= '2019-09-11'][kpi_axis] y_after = df[df[time_axis] > '2019-09-11'][kpi_axis]\n\n#one-hot encoding categorical features\ndf = binarize(df,df.columns,kpi_axis,time_axis,3)\n\nX_before =  df[df[time_axis] <= '2019-09-11'].drop([kpi_axis,time_axis],axis = 1).to_numpy() X_after = df[df[time_axis] >  '2019-09-11'].drop([kpi_axis,time_axis],axis = 1).to_numpy()\n\n#training left and right\nregression_model_before = LassoCV(cv = 10)\nregression_model_after = LassoCV(cv = 10)\nregression_model_before.fit(X_before,y_before)\nregression_model_after.fit(X_after,y_after)\n\n#plotting results\nfeatures = df.columns\ndweights =regression_model_after - regression_model_before\nindex = np.argsort(-abs(dweights))\nx_axis = features[index[0:3]].to_list()\n\np = figure(x_range=x_axis,title = \"Feature weights difference\",plot_width=1000)\np.vbar(x=x_axis, top=(abs(dweights[index[0:3]])),width = 0.8)\nshow(p)\n\n```", "```py\ndf = pd.read_csv(\"..\\\\dataset\\\\ecommerce_sample.csv\")\ndf[time_axis] = pd.to_datetime(df[time_axis],format = '%d/%m/%Y')\n\n#get kpi_axis\nkpi_axis = 'kpi'\ntime_axis = 'time'\ny_before =  df[df[time_axis] <= '2019-09-11'][kpi_axis] y_after = df[df[time_axis] > '2019-09-11'][kpi_axis]\n\ndf = binarize(df,df.columns,kpi_axis,time_axis,3)\ndf_before = df[df[time_axis] <= '2019-09-11'] df_after = df[df[time_axis] > '2019-09-11']\nfeatures = copy(df.drop([time_axis,kpi_axis], axis=1).columns)\n\nK = 3 #number of subgroups to detect\nsubgroups=[]\nscore=[]\nfor k in range(0,K):\n    CATE = []\n    y_before = df_before[kpi_axis]\n    y_after= df_after[kpi_axis]\n\n    #compute CATEs for all subgroups\n    for d in features:\n        g = df_before[d] == True\n        m_before = np.mean(y_before[g])\n        g = df_after[d] == True\n        m_after = np.mean(y_after[g])\n        CATE.append(m_after-m_before)\n\n    #find subgroup with biggest CATE\n    index = np.argsort(-abs(np.array(CATE)))\n    subgroups.append(features[index[0]])\n    score.append(abs( CATE [index[0]]))\n\n    #remove found subgroups from dataset\n    df_before = df_before[df_before[features[index[0]]] == False]\n    df_after = df_after[df_after[features[index[0]]] == False] \n    features = features.drop(features[index[0]])\n\np = figure(x_range=subgroups,title = \"Conditional Average Treatment Effect\",plot_width=1200,)\np.vbar(x=subgroups, top=score,width = 0.8,color='black')\nshow(p)\n\n```"]