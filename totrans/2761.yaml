- en: Build and deploy your first machine learning web app
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建并部署你的第一个机器学习 web 应用
- en: 原文：[https://www.kdnuggets.com/2020/05/build-deploy-machine-learning-web-app.html](https://www.kdnuggets.com/2020/05/build-deploy-machine-learning-web-app.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/05/build-deploy-machine-learning-web-app.html](https://www.kdnuggets.com/2020/05/build-deploy-machine-learning-web-app.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Moez Ali](https://www.linkedin.com/in/profile-moez/)，PyCaret 的创始人和作者**'
- en: '![Figure](../Images/8213893cbe65e0b98f2f494411a5cb55.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/8213893cbe65e0b98f2f494411a5cb55.png)'
- en: In our [last post](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a)
    we demonstrated how to train and deploy machine learning models in Power BI using [PyCaret](https://www.pycaret.org/).
    If you haven’t heard about PyCaret before, please read our [announcement](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46) to
    get a quick start.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的[上一篇文章](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a)中，我们展示了如何在
    Power BI 中使用[PyCaret](https://www.pycaret.org/)训练和部署机器学习模型。如果你以前没有听说过 PyCaret，请阅读我们的[公告](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46)以快速入门。
- en: In this tutorial we will use PyCaret to develop a **machine learning pipeline,** that
    will include preprocessing transformations and a regression model to predict patient
    hospitalization charges based on demographic and basic patient health risk metrics
    such as age, BMI, smoking status etc.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 PyCaret 开发一个**机器学习管道**，该管道将包括预处理转换和一个回归模型，用于根据人口统计数据和基本的患者健康风险指标（如年龄、BMI、吸烟状态等）预测患者住院费用。
- en: ???? What you will learn in this tutorial
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 在本教程中你将学到什么
- en: What is a deployment and why do we deploy machine learning models.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是部署？我们为什么要部署机器学习模型？
- en: Develop a machine learning pipeline and train models using PyCaret.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发一个机器学习管道并使用 PyCaret 训练模型。
- en: Build a simple web app using a Python framework called ‘Flask’.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个名为 ‘Flask’ 的 Python 框架构建一个简单的 web 应用。
- en: Deploy a web app on ‘Heroku’ and see your model in action.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 ‘Heroku’ 上部署一个 web 应用，查看你的模型的实际效果。
- en: ???? What tools we will use in this tutorial?
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 在本教程中我们将使用哪些工具？
- en: '**PyCaret**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCaret**'
- en: '[PyCaret](https://www.pycaret.org/) is an open source, low-code machine learning
    library in Python to train and deploy machine learning pipelines and models in
    production. PyCaret can be installed easily using pip.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyCaret](https://www.pycaret.org/) 是一个开源的低代码 Python 机器学习库，用于在生产环境中训练和部署机器学习管道和模型。可以使用
    pip 轻松安装 PyCaret。'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Flask**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flask**'
- en: '[Flask](https://flask.palletsprojects.com/en/1.1.x/) is a framework that allows
    you to build web applications. A web application can be a commercial website,
    a blog, e-commerce system, or an application that generates predictions from data
    provided in real-time using trained models. If you don’t have Flask installed,
    you can use pip to install it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[Flask](https://flask.palletsprojects.com/en/1.1.x/) 是一个允许你构建 web 应用的框架。web
    应用可以是商业网站、博客、电子商务系统，或者是使用训练模型从实时数据生成预测的应用。如果你没有安装 Flask，你可以使用 pip 来安装。'
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**GitHub**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub**'
- en: '[GitHub](https://www.github.com/) is a cloud-based service that is used to
    host, manage and control code. Imagine you are working in a large team where multiple
    people (sometime hundreds of them) are making changes. PyCaret is itself an example
    of an open-source project where hundreds of community developers are continuously
    contributing to source code. If you haven’t used GitHub before, you can [sign
    up](https://github.com/join) for a free account.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[GitHub](https://www.github.com/) 是一个基于云的服务，用于托管、管理和控制代码。想象一下你在一个大型团队中，多个（有时是数百人）正在进行更改。PyCaret
    本身就是一个开源项目的例子，数百名社区开发者不断为源代码做出贡献。如果你以前没有使用过 GitHub，你可以[注册](https://github.com/join)一个免费账户。'
- en: '**Heroku**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Heroku**'
- en: '[Heroku](https://www.heroku.com/) is a platform as a service (PaaS) that enables
    the deployment of web apps based on a managed container system, with integrated
    data services and a powerful ecosystem. In simple words, this will allow you to
    take the application from your local machine to the cloud so that anybody can
    access it using a Web URL. In this tutorial we have chosen Heroku for deployment
    as it provides free resource hours when you [sign up](https://signup.heroku.com/) for
    new account.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[Heroku](https://www.heroku.com/) 是一个平台即服务（PaaS），它基于管理容器系统，提供集成的数据服务和强大的生态系统来部署网络应用程序。简单来说，这将允许你将应用程序从本地机器迁移到云端，以便任何人都可以通过Web
    URL访问它。在本教程中，我们选择了Heroku进行部署，因为它在你[注册](https://signup.heroku.com/)新账户时提供了免费的资源小时。'
- en: '![Figure](../Images/d7e260c18d29b72de9c8083c75ff54ef.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/d7e260c18d29b72de9c8083c75ff54ef.png)'
- en: Machine Learning Workflow (from Training to Deployment on PaaS)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习工作流程（从训练到PaaS上的部署）
- en: Why Deploy Machine Learning Models?
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要部署机器学习模型？
- en: The deployment of machine learning models is the process of making models available
    in production where web applications, enterprise software and APIs can consume
    the trained model by providing new data points and generating predictions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习模型的部署是将模型在生产环境中提供的过程，其中网络应用程序、企业软件和API可以通过提供新的数据点来使用训练好的模型并生成预测。
- en: Normally machine learning models are built so that they can be used to predict
    an outcome (binary value i.e. 1 or 0 for [Classification](https://www.pycaret.org/classification),
    continuous values for [Regression](https://www.pycaret.org/regression), labels
    for [Clustering](https://www.pycaret.org/clustering) etc. There are two broad
    ways of generating predictions (i) predict by batch; and (ii) predict in real-time.
    In our [last tutorial](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a) we
    demonstrated how to deploy machine learning model in Power BI and predict by batch.
    In this tutorial we will see how to deploy a machine learning model to predict
    in real-time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，机器学习模型的构建是为了预测结果（分类的二值即1或0，[回归](https://www.pycaret.org/regression)的连续值，[聚类](https://www.pycaret.org/clustering)的标签等）。生成预测有两种主要方式：（i）批量预测；（ii）实时预测。在我们的[最后一个教程](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a)中，我们演示了如何在Power
    BI中部署机器学习模型并进行批量预测。在本教程中，我们将看到如何部署机器学习模型以进行实时预测。
- en: Business Problem
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 业务问题
- en: An insurance company wants to improve its cash flow forecasting by better predicting
    patient charges using demographic and basic patient health risk metrics at the
    time of hospitalization.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 一家保险公司希望通过更好地预测患者费用来改善现金流预测，使用人口统计数据和住院时的基本健康风险指标。
- en: '![Figure](../Images/55da7f0ae496ad44230dae57479ebf11.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/55da7f0ae496ad44230dae57479ebf11.png)'
- en: '*(*[*data source*](https://www.kaggle.com/mirichoi0218/insurance#insurance.csv)*)*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*(*[*数据源*](https://www.kaggle.com/mirichoi0218/insurance#insurance.csv)*)*'
- en: Objective
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目标
- en: To build a web application where demographic and health information of a patient
    is entered in a web form to predict charges.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 建立一个网络应用程序，其中输入患者的人口统计和健康信息以预测费用。
- en: Tasks
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 任务
- en: Train and validate models and develop a machine learning pipeline for deployment.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练和验证模型，并开发一个用于部署的机器学习管道。
- en: Build a basic HTML front-end with an input form for independent variables (age,
    sex, bmi, children, smoker, region).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个基本的HTML前端，包含一个用于独立变量（年龄、性别、BMI、子女、吸烟者、地区）的输入表单。
- en: Build a back-end of the web application using a Flask Framework.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask框架构建网络应用程序的后端。
- en: Deploy the web app on Heroku. Once deployed, it will become publicly available
    and can be accessed via Web URL.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将网络应用程序部署到Heroku。一旦部署，它将变得公开可用，并可以通过Web URL访问。
- en: ???? Task 1 — Model Training and Validation
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 任务1 — 模型训练和验证
- en: Training and model validation are performed in Integrated Development Environment
    (IDE) or Notebook either on your local machine or on cloud. In this tutorial we
    will use PyCaret in Jupyter Notebook to develop machine learning pipeline and
    train regression models. If you haven’t used PyCaret before, [click here](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46) to
    learn more about PyCaret or see [Getting Started Tutorials](https://www.pycaret.org/tutorial) on
    our [website](https://www.pycaret.org/).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 训练和模型验证可以在本地机器或云上的集成开发环境（IDE）或笔记本中进行。在本教程中，我们将使用 PyCaret 在 Jupyter Notebook
    中开发机器学习管道并训练回归模型。如果你之前没有使用过 PyCaret， [点击这里](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46) 了解更多关于
    PyCaret 的信息，或查看我们网站上的 [入门教程](https://www.pycaret.org/tutorial)。
- en: 'In this tutorial, we have performed two experiments. The first experiment is
    performed with default preprocessing settings in PyCaret (missing value imputation,
    categorical encoding etc). The second experiment has some additional preprocessing
    tasks such as scaling and normalization, automatic feature engineering and binning
    continuous data into intervals. See the setup example for the second experiment:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们进行了两个实验。第一个实验使用了 PyCaret 中的默认预处理设置（缺失值填补、类别编码等）。第二个实验包含了一些额外的预处理任务，如缩放和归一化、自动特征工程和将连续数据分箱。请查看第二个实验的设置示例：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure](../Images/23c9b273943d56697487a97c23d17fc0.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/23c9b273943d56697487a97c23d17fc0.png)'
- en: Comparison of information grid for both experiments
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 两个实验的信息网格比较
- en: The magic happens with only a few lines of code. Notice that in **Experiment
    2** the transformed dataset has 62 features for training derived from only 7 features
    in the original dataset. All of the new features are the result of transformations
    and automatic feature engineering in PyCaret.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 神奇的效果只需几行代码。注意在**实验 2**中，转换后的数据集有 62 个训练特征，这些特征来源于原始数据集中的 7 个特征。所有的新特征都是 PyCaret
    中转换和自动特征工程的结果。
- en: '![Figure](../Images/4efab6a3013cd24cbd02b82bb1877314.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/4efab6a3013cd24cbd02b82bb1877314.png)'
- en: Columns in dataset after transformation
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 转换后数据集中的列
- en: 'Sample code for model training and validation in PyCaret:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 中模型训练和验证的示例代码：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Figure](../Images/77b5d1d13d4a17347dcdb86135860829.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/77b5d1d13d4a17347dcdb86135860829.png)'
- en: 10 Fold cross-validation of Linear Regression Model(s)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归模型的 10 折交叉验证
- en: Notice the impact of transformations and automatic feature engineering. The
    R2 has increased by 10% with very little effort. We can compare the **residual
    plot** of linear regression model for both experiments and observe the impact
    of transformations and feature engineering on the **heteroskedasticity **of model.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意转换和自动特征工程的影响。R2 值在几乎不费力的情况下提高了 10%。我们可以比较**残差图**，观察线性回归模型在两个实验中的表现，以及转换和特征工程对**异方差性**的影响。
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure](../Images/3b081a146b5974e560d42e3bfeb4447f.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/3b081a146b5974e560d42e3bfeb4447f.png)'
- en: Residual Plot of Linear Regression Model(s)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归模型的残差图
- en: Machine learning is an *iterative *process. Number of iterations and techniques
    used within are dependent on how critical the task is and what the impact will
    be if predictions are wrong. The severity and impact of a machine learning model
    to predict a patient outcome in real-time in the ICU of a hospital is far more
    than a model built to predict customer churn.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习是一个*迭代*的过程。迭代的次数和使用的技术取决于任务的关键性以及预测错误的影响。如果 ICU 中的机器学习模型实时预测病人结果，其严重性和影响远远超过了一个用于预测客户流失的模型。
- en: 'In this tutorial, we have performed only two iterations and the linear regression
    model from the second experiment will be used for deployment. At this stage, however,
    the model is still only an object within notebook. To save it as a file that can
    be transferred to and consumed by other applications, run the following code:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们仅进行了两次迭代，第二个实验中的线性回归模型将用于部署。然而，此时模型仍只是笔记本中的一个对象。要将其保存为可以转移并被其他应用程序使用的文件，请运行以下代码：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'When you save a model in PyCaret, the entire transformation pipeline based
    on the configuration defined in the **setup() **function is created . All inter-dependencies
    are orchestrated automatically. See the pipeline and model stored in the ‘deployment_28042020’
    variable:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在PyCaret中保存一个模型时，基于**setup()**函数定义的配置会创建整个转换管道。所有的相互依赖关系都会自动协调。请查看存储在‘deployment_28042020’变量中的管道和模型：
- en: '![Figure](../Images/9e478a35206a20e549f19d30a9661636.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/9e478a35206a20e549f19d30a9661636.png)'
- en: Pipeline created using PyCaret
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用PyCaret创建的管道
- en: 'We have finished our first task of training and selecting a model for deployment.
    The final machine learning pipeline and linear regression model is now saved as
    a file in the local drive under the location defined in the **save_model() **function.
    (In this example: c:/*username*/ins/deployment_28042020.pkl).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了第一个任务：训练和选择用于部署的模型。最终的机器学习管道和线性回归模型现在已保存为本地驱动器中的文件，位置由**save_model()**函数定义。（在此示例中：c:/*username*/ins/deployment_28042020.pkl）。
- en: ???? Task 2 — Building Web Application
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 任务2 — 构建网页应用程序
- en: 'Now that our machine learning pipeline and model are ready we will start building
    a web application that can connect to them and generate predictions on new data
    in real-time. There are two parts of this application:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的机器学习管道和模型已准备好，我们将开始构建一个能够连接这些组件并实时生成新数据预测的网页应用程序。这个应用程序有两个部分：
- en: Front-end (designed using HTML)
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端（使用HTML设计）
- en: Back-end (developed using Flask in Python)
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 后端（使用Python中的Flask开发）
- en: Front-end of Web Application
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网页应用程序的前端
- en: Generally, the front-end of web applications are built using HTML which is not
    the focus of this article. We have used a simple HTML template and a CSS style
    sheet to design an input form. Here’s the HTML snippet of the front-end page of
    our web application.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，网页应用程序的前端是使用HTML构建的，这不是本文的重点。我们使用了一个简单的HTML模板和一个CSS样式表来设计一个输入表单。以下是我们网页应用程序前端页面的HTML代码片段。
- en: '![Figure](../Images/2b54ec5cc7b7325392fccda870773a6d.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/2b54ec5cc7b7325392fccda870773a6d.png)'
- en: Code snippet from home.html file
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: home.html文件中的代码片段
- en: You don’t need to be an expert in HTML to build simple applications. There are
    numerous free platforms that provide HTML and CSS templates as well as enable
    building beautiful HTML pages quickly by using a drag and drop interface.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要成为HTML专家就能构建简单的应用程序。有许多免费的平台提供HTML和CSS模板，并允许通过拖放界面快速构建漂亮的HTML页面。
- en: '**CSS Style Sheet**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS样式表**'
- en: CSS (also known as Cascading Style Sheets) describes how HTML elements are displayed
    on a screen. It is an efficient way of controlling the layout of your application.
    Style sheets contain information such as background color, font size and color,
    margins etc. They are saved externally as a .css file and is linked to HTML but
    including 1 line of code.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: CSS（也称为层叠样式表）描述了HTML元素在屏幕上的显示方式。这是一种有效控制应用程序布局的方式。样式表包含背景颜色、字体大小和颜色、边距等信息。它们被外部保存为.css文件，并通过包含1行代码链接到HTML。
- en: '![Figure](../Images/e6172cc6c23d83a4fd3683b3a341b880.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/e6172cc6c23d83a4fd3683b3a341b880.png)'
- en: Code snippet from home.html file
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: home.html文件中的代码片段
- en: Back-end of Web Application
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网页应用程序的后端
- en: The back-end of a web application is developed using a Flask framework. For
    beginner’s it is intuitive to consider Flask as a library that you can import
    just like any other library in Python. See the sample code snippet of our back-end
    written using a Flask framework in Python.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 网页应用程序的后端是使用Flask框架开发的。对于初学者来说，可以将Flask视为一个库，就像Python中的其他库一样。请参见使用Flask框架编写的Python后端的示例代码片段。
- en: '![Figure](../Images/feb16c63a07224b37ffa90a4a955a984.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/feb16c63a07224b37ffa90a4a955a984.png)'
- en: Code snippet from app.py file
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: app.py文件中的代码片段
- en: If you remember from the Step 1 above we have finalized linear regression model
    that was trained on 62 features that were automatically engineered by PyCaret.
    However, the front-end of our web application has an input form that collects
    only the six features i.e. age, sex, bmi, children, smoker, region.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得上面的第1步，我们已经确定了在62个特征上训练的线性回归模型，这些特征是由PyCaret自动生成的。然而，我们的网页应用程序的前端有一个输入表单，只收集六个特征，即年龄、性别、bmi、儿童、吸烟者、地区。
- en: How do we transform 6 features of a new data point in real-time into 62 features
    on which model was trained? With a sequence of transformations applied during
    model training, coding becomes increasingly complex and time-taking task.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何将新数据点的 6 个特征实时转换为 62 个模型训练时使用的特征？随着模型训练过程中应用的一系列转换，编码变得越来越复杂且耗时。
- en: In PyCaret all transformations such as categorical encoding, scaling, missing
    value imputation, feature engineering and even feature selection are automatically
    executed in real-time before generating predictions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyCaret 中，所有转换，如类别编码、缩放、缺失值填充、特征工程甚至特征选择，都会在生成预测之前实时自动执行。
- en: '*Imagine the amount of code you would have had to write to apply all the transformations
    in strict sequence before you could even use your model for predictions. In practice,
    when you think of machine learning, you should think about the entire ML pipeline
    and not just the model.*'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*想象一下，在你可以使用模型进行预测之前，需要编写多少代码来按严格顺序应用所有的转换。实际上，当你想到机器学习时，你应该考虑整个 ML 流程，而不仅仅是模型。*'
- en: '**Testing App**'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试应用**'
- en: 'One final step before we publish the application on Heroku is to test the web
    app locally. Open Anaconda Prompt and navigate to folder where **‘app.py’** is
    saved on your computer. Run the python file with below code:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将应用程序发布到 Heroku 之前的最后一步是本地测试 Web 应用。打开 Anaconda Prompt 并导航到保存 **‘app.py’**
    文件的文件夹。使用以下代码运行 Python 文件：
- en: '[PRE6]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure](../Images/ca5a8bbb6144dfd4c02bc8262e3aff94.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/ca5a8bbb6144dfd4c02bc8262e3aff94.png)'
- en: Output in Anaconda Prompt when app.py is executed
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 app.py 时在 Anaconda Prompt 中的输出
- en: Once executed, copy the URL into a browser and it should open a web application
    hosted on your local machine (127.0.0.1). Try entering test values to see if the
    predict function is working. In the example below, the expected bill for a 19
    year old female smoker with no children in the southwest is $20,900.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 执行后，将 URL 复制到浏览器中，它应该会打开一个托管在本地机器 (127.0.0.1) 上的 Web 应用。尝试输入测试值以查看预测功能是否正常工作。在下面的示例中，预计一个
    19 岁的女性吸烟者，没有孩子，位于西南地区的账单为 20,900 美元。
- en: '![Figure](../Images/d5073bc26689c4ed2520b3788f1b4bdc.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/d5073bc26689c4ed2520b3788f1b4bdc.png)'
- en: Web application opened on local machine
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本地机器上打开的 Web 应用
- en: Congratulations! you have now built your first machine learning app. Now it’s
    time to take this application from your local machine into the cloud so other
    people can use it with a Web URL.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你现在已经构建了你的第一个机器学习应用。现在是时候将这个应用从本地机器转移到云端，以便其他人可以通过 Web URL 使用它。
- en: ???? Task 3 — Deploy the Web App on Heroku
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 任务 3 — 在 Heroku 上部署 Web 应用
- en: Now that the model is trained, the machine learning pipeline is ready, and the
    application is tested on our local machine, we are ready to start our deployment
    on Heroku. There are couple of ways to upload your application source code onto
    Heroku. The simplest way is to link a GitHub repository to your Heroku account.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在模型已经训练好，机器学习管道也准备好了，应用程序也在本地机器上经过测试，我们准备开始在 Heroku 上部署。将应用程序源代码上传到 Heroku
    有几种方法。最简单的方法是将 GitHub 代码库链接到你的 Heroku 帐户。
- en: If you would like to follow along you can fork this [repository](https://github.com/pycaret/deployment-heroku) from
    GitHub. If you don’t know how to fork a repo, please [read this](https://help.github.com/en/github/getting-started-with-github/fork-a-repo) official
    GitHub tutorial.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想跟随学习，可以从 GitHub 上 fork 这个 [代码库](https://github.com/pycaret/deployment-heroku)。如果你不知道如何
    fork 一个 repo，请 [阅读这个](https://help.github.com/en/github/getting-started-with-github/fork-a-repo)
    官方 GitHub 教程。
- en: '![Figure](../Images/b2daa1c271a42ab84e0dcc83c5b4bb87.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/b2daa1c271a42ab84e0dcc83c5b4bb87.png)'
- en: '[https://www.github.com/pycaret/deployment-heroku](https://www.github.com/pycaret/deployment-heroku)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.github.com/pycaret/deployment-heroku](https://www.github.com/pycaret/deployment-heroku)'
- en: By now you are familiar with all the files in repository shown above except
    for two files i.e. ‘**requirements.txt’** and ‘**Procfile’.**
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你已经熟悉了上面代码库中的所有文件，除了两个文件，即 **‘requirements.txt’** 和 **‘Procfile’**。
- en: '![Figure](../Images/35693d5786a9d88caa018a90432f0d30.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/35693d5786a9d88caa018a90432f0d30.png)'
- en: requirements.txt
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: requirements.txt
- en: '**requirements.txt ** file is a text file containing the names of the python
    packages required to execute the application. If these packages are not installed
    in the environment application is running, it will fail.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**requirements.txt** 文件是一个文本文件，包含执行应用程序所需的 Python 包的名称。如果这些包未在应用程序运行的环境中安装，应用程序将会失败。'
- en: '![Figure](../Images/17ea811b90d8d3bd37482f7e5a324eec.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/17ea811b90d8d3bd37482f7e5a324eec.png)'
- en: Procfile
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Procfile
- en: '**Procfile **is simply one line of code that provides startup instructions
    to web server that indicate which file should be executed first when somebody
    logs into the application. In this example the name of our application file is
    ‘**app.py’ **and the name of the application is also ‘**app’**. *(hence app:app)*'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Procfile** 仅是一行代码，提供给 Web 服务器启动指令，指示在有人登录应用程序时应该首先执行哪个文件。在这个例子中，我们的应用文件名是
    ‘**app.py**’，应用名称也是 ‘**app**’。 *(因此是 app:app)*'
- en: 'Once all the files are uploaded onto the GitHub repository, we are now ready
    to start deployment on Heroku. Follow the steps below:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有文件都上传到 GitHub 仓库，我们现在准备开始在 Heroku 上进行部署。请按照以下步骤操作：
- en: '**Step 1 — Sign up on heroku.com and click on ‘Create new app’**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 1 — 在 heroku.com 上注册并点击 ‘创建新应用’**'
- en: '![Figure](../Images/aa02c1b6a02bcf867d41f7b46df172b9.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/aa02c1b6a02bcf867d41f7b46df172b9.png)'
- en: Heroku Dashboard
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 仪表板
- en: '**Step 2 — Enter App name and region**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 2 — 输入应用名称和地区**'
- en: '![Figure](../Images/701e0be8acd243ba464ee5d7a833a8fd.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/701e0be8acd243ba464ee5d7a833a8fd.png)'
- en: Heroku — Create new app
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku — 创建新应用
- en: '**Step 3 — Connect to your GitHub repository where code is hosted**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 3 — 连接到托管代码的 GitHub 仓库**'
- en: '![Figure](../Images/a494b41066c23b3f6fcaab7eb27b91ca.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/a494b41066c23b3f6fcaab7eb27b91ca.png)'
- en: Heroku — Connect to GitHub
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku — 连接到 GitHub
- en: '**Step 4 — Deploy branch**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 4 — 部署分支**'
- en: '![Figure](../Images/3470a80faee1fd99b96f7dcbbb6a69e4.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/3470a80faee1fd99b96f7dcbbb6a69e4.png)'
- en: Heroku — Deploy Branch
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku — 部署分支
- en: '**Step 5 — Wait 5–10 minutes and BOOM**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**步骤 5 — 等待 5–10 分钟，然后就是 BOOM**'
- en: '![Figure](../Images/5f2d87a6bdbbef8693b83f79722b3d93.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/5f2d87a6bdbbef8693b83f79722b3d93.png)'
- en: Heroku — Successful deployment
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku — 成功部署
- en: App is published to URL: [https://pycaret-insurance.herokuapp.com/](https://pycaret-insurance.herokuapp.com/)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 应用已发布到 URL：[https://pycaret-insurance.herokuapp.com/](https://pycaret-insurance.herokuapp.com/)
- en: '![Figure](../Images/e1bde245a86a323e2c9dcd6df0112113.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/e1bde245a86a323e2c9dcd6df0112113.png)'
- en: '[https://pycaret-insurance.herokuapp.com/](https://pycaret-insurance.herokuapp.com/)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pycaret-insurance.herokuapp.com/](https://pycaret-insurance.herokuapp.com/)'
- en: There is one last thing to see before we end the tutorial.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束教程之前，还有最后一件事需要查看。
- en: 'So far we have built and deployed a web application that works with our machine
    learning pipeline. Now imagine that you already have an enterprise application
    in which you want to integrate predictions from your model. What you need is a
    web service where you can make an API call with input data points and get the
    predictions back. To achieve this we have created the ***predict_api*** function
    in our **‘app.py’** file. See the code snippet:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经构建并部署了一个与我们的机器学习管道配合工作的 Web 应用程序。现在假设你已经有一个企业应用程序，你希望在其中集成模型的预测。你需要的是一个网络服务，你可以通过
    API 调用传入数据点并获得预测结果。为此，我们在我们的 **‘app.py’** 文件中创建了 ***predict_api*** 函数。请参见代码片段：
- en: '![Figure](../Images/9b9346b7d5a4a3870f9877bc5ed6e1f5.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/9b9346b7d5a4a3870f9877bc5ed6e1f5.png)'
- en: Code snippet from app.py file (back-end of web app)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: app.py 文件中的代码片段（网页应用的后端）
- en: 'Here’s how you can use this web service in Python using the requests library:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何使用 requests 库在 Python 中使用这个网络服务：
- en: '[PRE7]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Figure](../Images/af12c785bd4cf0f7db433e8b8ce99546.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/af12c785bd4cf0f7db433e8b8ce99546.png)'
- en: Make a request to a published web service to generate predictions in a Notebook
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 向已发布的网络服务发送请求，以在 Notebook 中生成预测
- en: Next Tutorial
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下一教程
- en: In the next tutorial for deploying machine learning pipelines, we will dive
    deeper into deploying machine learning pipelines using docker containers. We will
    demonstrate how to easily deploy and run containerized machine learning applications
    on Linux.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个关于部署机器学习管道的教程中，我们将深入探讨如何使用 Docker 容器来部署机器学习管道。我们将演示如何在 Linux 上轻松部署和运行容器化的机器学习应用程序。
- en: Follow our [LinkedIn](https://www.linkedin.com/company/pycaret/) and subscribe
    to our [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g) channel
    to learn more about PyCaret.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 关注我们的 [LinkedIn](https://www.linkedin.com/company/pycaret/) 并订阅我们的 [YouTube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g)
    频道，以了解更多关于 PyCaret 的信息。
- en: '**Important Links**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要链接**'
- en: '[User Guide / Documentation](https://www.pycaret.org/guide)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用户指南 / 文档](https://www.pycaret.org/guide)'
- en: '[GitHub Repository](https://www.github.com/pycaret/pycaret)'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub 仓库](https://www.github.com/pycaret/pycaret)'
- en: '[Install PyCaret](https://www.pycaret.org/install)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安装 PyCaret](https://www.pycaret.org/install)'
- en: '[Notebook Tutorials](https://www.pycaret.org/tutorial)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Notebook 教程](https://www.pycaret.org/tutorial)'
- en: '[Contribute in PyCaret](https://www.pycaret.org/contribute)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 PyCaret 中贡献](https://www.pycaret.org/contribute)'
- en: '**Want to learn about a specific module?**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**想了解某个特定模块吗？**'
- en: As of the first release 1.0.0, PyCaret has the following modules available for
    use. Click on the links below to see the documentation and working examples in
    Python.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.0.0版本发布以来，PyCaret提供了以下可用模块。点击下面的链接查看文档和Python中的工作示例。
- en: '[Classification](https://www.pycaret.org/classification)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分类](https://www.pycaret.org/classification)'
- en: '[Regression](https://www.pycaret.org/regression)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归](https://www.pycaret.org/regression)'
- en: '[Clustering](https://www.pycaret.org/clustering)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[聚类](https://www.pycaret.org/clustering)'
- en: '[Anomaly Detection](https://www.pycaret.org/anomaly-detection)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[异常检测](https://www.pycaret.org/anomaly-detection)'
- en: '[Natural Language Processing](https://www.pycaret.org/nlp)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理](https://www.pycaret.org/nlp)'
- en: '[Association Rule Mining](https://www.pycaret.org/association-rules)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关联规则挖掘](https://www.pycaret.org/association-rules)'
- en: '**Also see:**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**另见：**'
- en: 'PyCaret getting started tutorials in Notebook:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 入门教程在 Notebook 中：
- en: '[Clustering](https://www.pycaret.org/clu101)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[聚类](https://www.pycaret.org/clu101)'
- en: '[Anomaly Detection](https://www.pycaret.org/anom101)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[异常检测](https://www.pycaret.org/anom101)'
- en: '[Natural Language Processing](https://www.pycaret.org/nlp101)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理](https://www.pycaret.org/nlp101)'
- en: '[Association Rule Mining](https://www.pycaret.org/arul101)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关联规则挖掘](https://www.pycaret.org/arul101)'
- en: '[Regression](https://www.pycaret.org/reg101)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归](https://www.pycaret.org/reg101)'
- en: '[Classification](https://www.pycaret.org/clf101)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分类](https://www.pycaret.org/clf101)'
- en: '**What’s in the development pipeline?**'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发计划中有哪些内容？**'
- en: We are actively working on improving PyCaret. Our future development pipeline
    includes a new **Time Series Forecasting **module, integration with **TensorFlow, **and
    major improvements on the scalability of PyCaret. If you would like to share your
    feedback and help us improve further, you may [fill this form](https://www.pycaret.org/feedback) on
    the website or leave a comment on our [GitHub ](https://www.github.com/pycaret/)or [LinkedIn](https://www.linkedin.com/company/pycaret/) page.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在积极改进 PyCaret。我们未来的发展计划包括一个新的**时间序列预测**模块，与**TensorFlow**的集成，以及 PyCaret 扩展性的重大改进。如果您希望分享您的反馈并帮助我们进一步改进，可以在网站上[填写此表单](https://www.pycaret.org/feedback)或在我们的[GitHub](https://www.github.com/pycaret/)或[LinkedIn](https://www.linkedin.com/company/pycaret/)页面留下评论。
- en: '**Would you like to contribute?**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**您想贡献吗？**'
- en: PyCaret is an open source project. Everybody is welcome to contribute. If you
    would like contribute, please feel free to work on [open issues](https://github.com/pycaret/pycaret/issues).
    Pull requests are accepted with unit tests on dev-1.0.1 branch.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 是一个开源项目。欢迎大家贡献。如果您希望贡献，请随时处理[开放问题](https://github.com/pycaret/pycaret/issues)。接受包含单元测试的拉取请求，分支为
    dev-1.0.1。
- en: Please give us ⭐️ on our [GitHub repo](https://www.github.com/pycaret/pycaret) if
    you like PyCaret.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢 PyCaret，请在我们的[GitHub 仓库](https://www.github.com/pycaret/pycaret)上给我们⭐️。
- en: Medium : [https://medium.com/@moez_62905/](https://medium.com/@moez_62905/machine-learning-in-power-bi-using-pycaret-34307f09394a)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 'Medium : [https://medium.com/@moez_62905/](https://medium.com/@moez_62905/machine-learning-in-power-bi-using-pycaret-34307f09394a)'
- en: LinkedIn : [https://www.linkedin.com/in/profile-moez/](https://www.linkedin.com/in/profile-moez/)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'LinkedIn : [https://www.linkedin.com/in/profile-moez/](https://www.linkedin.com/in/profile-moez/)'
- en: Twitter : [https://twitter.com/moezpycaretorg1](https://twitter.com/moezpycaretorg1)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 'Twitter : [https://twitter.com/moezpycaretorg1](https://twitter.com/moezpycaretorg1)'
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介： [Moez Ali](https://www.linkedin.com/in/profile-moez/)** 是一名数据科学家，同时也是
    PyCaret 的创始人和作者。'
- en: '[Original](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99).
    Reposted with permission.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99)。经许可转载。'
- en: '**Related:**'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Announcing PyCaret 1.0.0](/2020/04/announcing-pycaret.html)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 1.0.0](/2020/04/announcing-pycaret.html)'
- en: '[Machine Learning in Power BI using PyCaret](/2020/05/machine-learning-power-bi-pycaret.html)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 的 Power BI 中的机器学习](/2020/05/machine-learning-power-bi-pycaret.html)'
- en: '[Build Pipelines with Pandas Using pdpipe](/2019/12/build-pipelines-pandas-pdpipe.html)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 pdpipe 构建 Pandas 流水线](/2019/12/build-pipelines-pandas-pdpipe.html)'
- en: '* * *'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Heroku 部署机器学习网页应用](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳 ETL 工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Build a Machine Learning Web App in 5 Minutes](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5分钟内构建一个机器学习网页应用](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻 2022年3月9日：5分钟内构建一个机器学习网页应用](https://www.kdnuggets.com/2022/n10.html)'
