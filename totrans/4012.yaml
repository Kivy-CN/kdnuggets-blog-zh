- en: 'Understanding Python’s Iteration and Membership: A Guide to __contains__ and
    __iter__ Magic Methods'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![A Guide to __contains__ and __iter__ Magic Methods](../Images/0e31af489ddc2b5846ca89419af9c6ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: If you're new to Python, you may have come across the terms **"iteration"**
    and **"membership"** and wondered what they mean. These concepts are fundamental
    to understanding how Python handles collections of data, such as lists, tuples,
    and dictionaries. Python employs special dunder methods to enable these functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'But what exactly are dunder methods? Dunder/Magic methods are special methods
    in Python that start and end with a double underscore, hence the name "dunder."
    They are used to implement various protocols and can be used to perform a wide
    range of tasks, such as checking membership, iterating over elements, and more.
    In this article, we will be focusing on two of the most important dunder methods:
    **__contains__** and **__iter__**. So, let''s get started.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Pythonic Loops with Iter Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider a basic implementation of a file directory using Python classes as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'A straightforward code where the directory has an instance parameter that contains
    a list of File objects. Now, if we want to iterate over the directory object,
    we should be able to use a for loop as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We initialize a directory object with ten randomly named files and use a for
    loop to iterate over each item. Simple enough, But whoops! You get an error message:
    **TypeError: ''Directory'' object is not iterable**.'
  prefs: []
  type: TYPE_NORMAL
- en: What went wrong? ​​Well, our Directory class isn't set up to be looped through.
    In Python, for a class object to become iterable, it must implement the **__iter__**
    dunder method. All iterables in Python like List, Dictionaries, and Set implement
    this functionality so we can use them in a loop.
  prefs: []
  type: TYPE_NORMAL
- en: So, to make our Directory object iterable, we need to create an iterator. Think
    of an iterator as a helper that gives us items one by one when we ask for them.
    For example, when we loop over a list, the iterator object will provide us with
    the next element on each iteration until we reach the end of the loop. That is
    simply how an iterator is defined and implemented in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, an iterator must know how to provide the next item in a sequence.
    It does this using a method called **__next__**. When there are no more items
    to give, it raises a special signal called **StopIteration** to say, "Hey, we're
    done here." In the case of an infinite iteration, we do not raise the **StopIteration**
    exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us create an iterator class for our directory. It will take in the list
    of files as an argument and implement the next method to give us the next file
    in the sequence. It keeps track of the current position using an index. The implementation
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We initialize an index value at 0 and accept the files as an initialization
    argument. The **__next__** method checks if the index overflows. If it is, it
    raises a **StopIteration** exception to signal the end of the iteration. Otherwise,
    it returns the file at the current index and moves to the next one by incrementing
    the index. This process continues until all files have been iterated over.
  prefs: []
  type: TYPE_NORMAL
- en: However, we are not done yet! We have still not implemented the iter method.
    The iter method must return an iterator object. Now that we have implemented the
    FileIterator class, we can finally move towards the iter method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The iter method simply initializes a FileIterator object with its list of files
    and returns the iterator object. That''s all it takes! With this implementation,
    we can now loop over our Directory structure using Python''s loops. Let''s see
    it in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The for loop internally calls the **__iter__** method to display this result.
    Although this works, you might still be confused about the underlying workings
    of the iterator in Python. To understand it better, let's use a while loop to
    implement the same mechanism manually.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We invoke the iter function on the directory object to acquire the FileIterator.
    Then, we manually utilize the next operator to invoke the next dunder method on
    the FileIterator object. We handle the StopIteration exception to gracefully terminate
    the while loop once all items have been exhausted. As expected, we obtained the
    same output as before!
  prefs: []
  type: TYPE_NORMAL
- en: Testing for Membership with Contains Method
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a fairly common use case to check for the existence of an item in a collection
    of objects. For example in our above example, we will need to check if a file
    exists in a directory quite often. So Python makes it simpler syntactically using
    the "in" operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These are majorly used with conditional expressions and evaluations. But what
    happens if we try this with our directory example?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Both give us False, which is incorrect! Why? To check for membership, we want
    to implement the **__contains__** dunder method. When it is not implemented, Python
    fall backs to using the **__iter__** method and evaluates each item with the ==
    operator. In our case, it will iterate over each item and check if the **“file_1”**
    string matches any File object in the list. Since we're comparing a string to
    custom File objects, none of the objects match, resulting in a False evaluation
  prefs: []
  type: TYPE_NORMAL
- en: To fix this, we need to implement the **__contains__** dunder method in our
    Directory class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we change the functionality to iterate over each object and match the
    file_path from the File object with the string being passed to the function. Now
    if we run the same code to check for existence, we get the correct output!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And that’s it! Using our simple directory structure example, we built a simple
    iterator and membership checker to understand the internal workings of the Pythonic
    loops. We see such design decisions and implementations fairly often in production-level
    code and using this real-world example, we went over the integral concepts behind
    the __iter__ and __contains__ methods. Keep practicing with these techniques to
    strengthen your understanding and become a more proficient Python programmer!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[11 Python Magic Methods Every Programmer Should Know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to __getitem__: A Magic Method in Python](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python f-Strings Magic: 5 Game-Changing Tricks Every Coder Needs to Know](https://www.kdnuggets.com/python-fstrings-magic-5-gamechanging-tricks-every-coder-needs-to-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Diving into the Pool: Unraveling the Magic of CNN Pooling Layers](https://www.kdnuggets.com/diving-into-the-pool-unraveling-the-magic-of-cnn-pooling-layers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unveiling Neural Magic: A Dive into Activation Functions](https://www.kdnuggets.com/unveiling-neural-magic-a-dive-into-activation-functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
