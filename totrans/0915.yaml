- en: The Optimal Way to Input Missing Data with Pandas fillna()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/02/optimal-way-input-missing-data-pandas-fillna.html](https://www.kdnuggets.com/2023/02/optimal-way-input-missing-data-pandas-fillna.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/8daea57e9d8d577dea9eba6c35e5fbc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [catalyststuff](https://www.freepik.com/free-vector/cute-panda-doughnut-cartoon-vector-icon-illustration-animal-food-icon-concept-isolated-premium-vector-flat-cartoon-style_23006622.htm#page=2&query=pandas&position=40&from_view=search&track=sph)
    on Freepik
  prefs: []
  type: TYPE_NORMAL
- en: During the data exploration phase, we often encounter variables with missing
    data. The missing data could exist for various reasons; sampling mistakes, deliberately
    missing, or a random reason. Whatever the cause, **we need to analyse the missing
    data reasons**. An article regarding missing data type by [Yogita Kinha](/2020/06/missing-values-dataset.html)
    is a good start.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: After appropriate analysis, one way to solve the missing data problem is by
    filling in the data. Luckily, Pandas allow easy missing data input. How do we
    do that, and what is the optimal way to fill in the missing data? Let’s learn
    together.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas Fillna Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: According to the Pandas' [documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.fillna.html),
    Fillna is a Pandas function to fill the NA/NaN values with the specified method.
    In the Pandas DataFrame, we specify the missing data object as the NaN object.
    Using Fillna, we would replace these NaN values with another value we had analysed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try out the function with a dataset example. This article will use the
    [Local Epidemics of Dengue Fever train dataset from Kaggle](https://www.kaggle.com/datasets/arashnic/epidemy?select=dengue_features_train.csv)
    (License: CC0: Public Domain).'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/97cb5ec2a97a423dea43c3660c7f1386.png)'
  prefs: []
  type: TYPE_IMG
- en: As we see in the dataset above, there are missing data in the ‘ndvi_ne’ column.
    Using the Pandas `fillna` function, we can easily replace the missing data with
    another value. Let me give you an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/eab59bc53c8af0bd4117e668dd6e8817.png)'
  prefs: []
  type: TYPE_IMG
- en: With the `fillna` function, we replace the missing data with the value 0\. You
    can replace it with any kind of value when using the `fillna` function. For example,
    I replace the missing values with the string ‘zero’.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/961f90afc98e8ef8cd12890137262c16.png)'
  prefs: []
  type: TYPE_IMG
- en: Or I could even replace the missing values with function, which you could do
    but was not useful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/5b2545d9a10314b7affdf99cf73a0b4a.png)'
  prefs: []
  type: TYPE_IMG
- en: On a side note, the `fillna` function would not change the actual dataset when
    you execute them. You could run the following code if you want the DataFrame to
    be replaced when you execute the function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There would be no output when you run the code above but your DataFrame would
    be affected. Don’t use the parameter inplace if you are still experimenting with
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: Replace missing values on multiple columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must be careful when using the `fillna` function. If we run the function
    while using the whole DataFrame, it would fill every missing data with the passed
    values, even if it is not your intention. Let’s see what I am talking about by
    using the data example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/17842afef8a916a6142e36de03a8b50b.png)'
  prefs: []
  type: TYPE_IMG
- en: I tried to take all the observations where the ‘ndvi_ne’ column was missing.
    If we see the output above, we can see that several columns also contain missing
    data. Let’s try to use the `fillna` function to fill them up.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/1bb751e8ff344e91a7b50996cb2767e7.png)'
  prefs: []
  type: TYPE_IMG
- en: All the missing data is now replaced with the string ‘zero’ values. Often time,
    this is not what we want. If we want to replace the missing data on certain columns,
    we could take the column first before using the `fillna` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/cbe4521dbe53bda8771e3804179a55c7.png)'
  prefs: []
  type: TYPE_IMG
- en: There is also an optimal way to fill the missing data by passing a dictionary
    containing the column's name as the key and what to replace as the values. Let’s
    try it out with the code example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/0883bc501dce5104283e83e52bdb7888.png)'
  prefs: []
  type: TYPE_IMG
- en: With the code above, we replace the column ‘ndvi_ne’ with 0, ‘ndvi_nw’ with
    ‘zero’ and ‘ndvi_se’ with the column mean. The rest were untouched as we didn’t
    specify them in the function.
  prefs: []
  type: TYPE_NORMAL
- en: Fill n-th consecutive missing data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Pandas `fillna` function also allowed the user to specify the number of
    missing data to be replaced. By using the limit parameter, we can fill in the
    missing data to the n-th missing data consecutively. Let’s try with the code example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/8b1a00cbf7f409a322d65e10bbd54ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see from the above output that only three out of five missing data rows
    were replaced. If we change the limit parameter, we can see a different result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/ee1dafd7b793d1a674fd59fea254469a.png)'
  prefs: []
  type: TYPE_IMG
- en: Only two out of five data shown were replaced. The missing data do not need
    to be on top of each other. They can be in different rows, and the limit parameter
    would only replace the first two missing data if the limit parameter is set to
    two.
  prefs: []
  type: TYPE_NORMAL
- en: Forward and backward fill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is good about the Pandas `fillna` function is that we can fill in the missing
    data from the preceding or the succession observation. Let’s try to fill in the
    data from the preceding observation. As a reminder, we have missing data in the
    following column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/c49205466688d5e94379789314079493.png)'
  prefs: []
  type: TYPE_IMG
- en: Then, we would use the `fillna` function to replace the missing data from the
    previous row.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/9fda920d41a77001146fc6e1c44556c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The missing data is now replaced with values from the previous rows, or we
    could call it forward fill. Let’s try the reverse: the backward fill or filling
    up missing data from the succession rows.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![The Optimal Way to Input Missing Data with Pandas fillna()](../Images/148115d7703fd6fe1c101d01a33917e2.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see from the output above that the last data is still missing. Because
    we don’t have any observation after the missing data row, the function keeps it
    as it is.
  prefs: []
  type: TYPE_NORMAL
- en: The forward and backward fill method is a good function if you know the previous
    and the data after are still related, such as in the time series data. Imagine
    stock data; the previous day's data might still be applicable the day after.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Missing data is a typical occurrence during data preprocessing and exploration.
    One thing to do with the missing data is to replace it with another value. To
    do that, we can use the Pandas function called `fillna`. Using the function is
    simple, but there are a few methods to optimally fill up our data, including replacing
    missing data in multiple columns, limiting the imputation, and using other rows
    to fill the data.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Cornellius Yudha Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**
    is a data science assistant manager and data writer. While working full-time at
    Allianz Indonesia, he loves to share Python and Data tips via social media and
    writing media.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Generalized and Scalable Optimal Sparse Decision Trees(GOSDT)](https://www.kdnuggets.com/2023/02/generalized-scalable-optimal-sparse-decision-treesgosdt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Reinforcement Learning: Teaching Computers to Make Optimal Decisions](https://www.kdnuggets.com/2023/07/reinforcement-learning-teaching-computers-make-optimal-decisions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Deal with Missing Data Using Interpolation Techniques in Pandas](https://www.kdnuggets.com/how-to-deal-with-missing-data-using-interpolation-techniques-in-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Identify Missing Data in Time-Series Datasets](https://www.kdnuggets.com/how-to-identify-missing-data-in-timeseries-datasets)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
