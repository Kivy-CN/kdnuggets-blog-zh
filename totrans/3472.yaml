- en: Why Implement Machine Learning Algorithms From Scratch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html](https://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: 'There are several different reasons why implementing algorithms from scratch
    can be useful:'
  prefs: []
  type: TYPE_NORMAL
- en: it can help us to understand the inner works of an algorithm
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we could try to implement an algorithm more efficiently
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we can add new features to an algorithm or experiment with different variations
    of the core idea
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we circumvent licensing issues (e.g., Linux vs. Unix) or platform restrictions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we want to invent new algorithms or implement algorithms no one has implemented/shared
    yet
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: we are not satisfied with the API and/or we want to integrate it more "naturally"
    into an existing software library
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Machine learning taxonomy](../Images/757705b20ace87e918f33e32ca073999.png)'
  prefs: []
  type: TYPE_IMG
- en: Let us narrow down the phrase "implementing from scratch" a bit further in context
    of the 6 points I mentioned above. When we talk about "implementing from scratch,"
    we need to narrow down the scope to make this question really tangible. Let's
    talk about a particular algorithm, simple logistic regression, to address the
    different points using concrete examples. I'd claim that logistic regression has
    been implemented more than thousand times.
  prefs: []
  type: TYPE_NORMAL
- en: One reason why we'd still want to implement logistic regression from scratch
    could be that we don't have the impression that we fully understand how it works;
    we read a bunch of papers, and kind of understood the core concept though. Using
    a programming language for prototyping (e.g., Python, MATLAB, R, and so forth),
    we could take the ideas from paper and try to express them in code -- step by
    step. An established library, such as scikit-learn, can help us than double-check
    the results and to see if our implementation -- our idea of how the algorithm
    is supposed to work -- is correct. Here, we don't really care about efficiency;
    although we spend so much time to implement the algorithm, we probably want to
    use an established library if we want to perform some serious analysis in our
    research lab and/or company. Established libraries are typically more trustworthy
    -- they have been battle-tested by many people, people who may have already encountered
    certain edge cases and made sure that there are no weird surprises. Furthermore,
    it is also more likely that this code was highly optimized for computational efficiency
    over time. Here, implementing from scratch simply serves the purpose of self-assessment.
    Reading about a concept is one thing, but putting it to action is a whole other
    level of understanding -- and being able to explain it to others is the icing
    on the cake.
  prefs: []
  type: TYPE_NORMAL
- en: Another reason why we want to re-implement logistic regression from scratch
    may be that we are not satisfied with the "features" of other implementations.
    Let's us naively assume that other implementations don't have regularization parameters,
    or it doesn't support multi-class settings (i.e., via One-vs-All, One-vs-One,
    or softmax). Or if computational (or predictive) efficiency is an issue, maybe
    we want to implement it with another solver (e.g., Newton vs. Gradient Descent
    vs. Stochastic Gradient Descent, etc.). But improvements concerning computational
    efficiency does not necessarily need to be in terms of modifications of the algorithms,
    but we could use lower-level programming languages, for example, Scala instead
    of Python, or Fortran instead of Scala, ... this can go all down to assembly or
    machine code, or designing a chip that is optimized for running such kind of analysis.
    However, if you are a machine learning (or "data science") practitioner or researcher,
    this is probably something you should delegate to the software engineering team.
  prefs: []
  type: TYPE_NORMAL
- en: '![Decision tree pseudocode](../Images/a6c56537d0cfda62a29f8883c70c6a7f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To come back to the main question: Different people implement algorithms from
    scratch for various reasons. Personally, when I implement algorithms from scratch,
    I do it because of the learning experience.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Sebastian Raschka](https://twitter.com/rasbt)** is a ''Data Scientist''
    and Machine Learning enthusiast with a big passion for Python & open source. Author
    of ''[Python Machine Learning](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning)''.
    Michigan State University.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://github.com/rasbt/python-machine-learning-book/blob/master/faq/implementing-from-scratch.md).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[When Does Deep Learning Work Better Than SVMs or Random Forests?](/2016/04/deep-learning-vs-svm-random-forest.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Development of Classification as a Learning Machine](/2016/04/development-classification-learning-machine.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 Data Mining Algorithms, Explained](/2015/05/top-10-data-mining-algorithms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Implement a Federated Learning Project with Healthcare Data](https://www.kdnuggets.com/2023/02/implement-federated-learning-project-healthcare-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Algorithms - What, Why, and How?](https://www.kdnuggets.com/2022/09/machine-learning-algorithms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Simple to Implement End-to-End Project with HuggingFace](https://www.kdnuggets.com/a-simple-to-implement-end-to-end-project-with-huggingface)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[With Data Privacy learn to implement technical privacy solutions…](https://www.kdnuggets.com/2022/04/manning-data-privacy-learn-implement-technical-privacy-solutions-tools-scale.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn how to design, measure and implement trustworthy A/B tests…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Implement Agentic RAG Using LangChain: Part 1](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
