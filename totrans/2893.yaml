- en: Common Machine Learning Obstacles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/09/mathworks-common-machine-learning-obstacles.html](https://www.kdnuggets.com/2019/09/mathworks-common-machine-learning-obstacles.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sponsored Post.
  prefs: []
  type: TYPE_NORMAL
- en: '**By Seth DeLand, Product Marketing Manager, Data Analytics, MathWorks**'
  prefs: []
  type: TYPE_NORMAL
- en: Engineers and scientists who are modeling with machine learning often face challenges
    when working with data. Two of the most common obstacles relate to choosing the
    right classification model and eliminating data overfitting.
  prefs: []
  type: TYPE_NORMAL
- en: Classification models assign items to a discrete group or class based on a specific
    set of features.Determining the best classification model often presents difficulties
    given the uniqueness of each dataset and desired outcome. Overfitting occurs when
    the model is too closely aligned with limited training data that may contain noise
    or errors. An overfit model is not able to generalize well to data outside the
    training set, limiting its usefulness in a production system.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mathworks Classification Learner](../Images/1b6273cf4cc4d5907dee60a5dd1c8422.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 1: The Classification Learner app is used to train and compare a variety
    of classifiers. © 1984–2019 The MathWorks, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: By integrating scalable software tools and machine learning techniques, engineers
    and scientists can identify the best model and protect against overfitting.
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing the Classification Model**'
  prefs: []
  type: TYPE_NORMAL
- en: Classification model types can be challenging because each model type has its
    own characteristic, which could be a strength or weakness depending on the problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'For starters, you must answer a few questions about the type and purpose of
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the model meant to accomplish?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much data is there, and what type of data is it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How much detail is needed? Is storage a limiting factor?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Answering these questions can help narrow the choices and select the correct
    classification model. Engineers and scientists can use cross-validation to test
    how accurately a model will evaluate data. After cross-validation, you can select
    the best-fitting classification model.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many types of classification models, here are five common types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Logistic Regression](https://www.mathworks.com/help/stats/mnrfit.html?s_eid=PEP_22192):
    This model is often used as a baseline due to its simplicity. It is used for problems
    where there are two possible classes that data may be categorized into. A logistic
    regression model returns probabilities for how likely a data point belongs to
    each class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*k*-nearest neighbor (kNN)](https://www.mathworks.com/help/stats/classificationknn.html?s_eid=PEP_22192):
    This simple yet effective way of classification categorizes data points based
    on their distance to other points in a training dataset. The training time of
    kNN is short, but this model can confuse irrelevant attributes for important ones
    unless weights are applied to the data, especially as the number of data points
    grows.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Decision Trees](https://www.mathworks.com/help/stats/decision-trees.html?s_eid=PEP_22192):
    These models predict responses visually, and it’s relatively easy to follow the
    decision path taken from root to leaf. This type of modelis especially useful
    when it’s important to showhow the conclusion was reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Support Vector Machine](https://www.mathworks.com/help/stats/support-vector-machine-classification.html?s_eid=PEP_22192)
    (SVM): This model uses a hyperplane to separate data into two or more classes.
    It is accurate, tends not to overfit, and is relatively easy to interpret, but
    training time can be on the longer side especially for larger datasets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Artificial neural networks(ANNs): These networks can be configured and trained
    to solve a variety of different problems including classification and time series
    prediction. However, the trained models are known to be difficult to interpret.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engineers and scientists can simplify the decision-making process by using scalable
    software tools to determine which model best fits a set of features, assess classifier
    performance, compare and improve model accuracy, and finally, export the best
    model. These tools also help users explore the data, select features, specify
    validation schemes, and train multiple models.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mathworks Neural Net Training](../Images/aca20b484ecfc951a761b8a69a0082a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fig. 2: Training progress for a deep neural network showing accuracy and loss
    for both the training set and validation set. © 1984–2019 The MathWorks, Inc.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Eliminating Data Overfitting**'
  prefs: []
  type: TYPE_NORMAL
- en: Overfitting occurs when a model fits a particular dataset but does not generalize
    well to new data. Overfitting is typically hard to avoid because it is often the
    result of insufficient training data, especially when the person responsible for
    the model did not gather the data. The best way to avoid overfitting is by using
    enough training data to accurately reflect the model’s diversity and complexity.
  prefs: []
  type: TYPE_NORMAL
- en: Data regularization and generalization are two additional methods engineers
    and scientists can apply to check for overfitting. Regularization is a technique
    that prevents the model from over-relying on individual data points. Regularization
    algorithms introduce additional information into the model and handle multicollinearity
    and redundant predictors by making the model more parsimonious and accurate.These
    algorithms typically work by applying a penalty for complexity, such as adding
    the coefficients of the model into the minimization or including a roughness penalty.
  prefs: []
  type: TYPE_NORMAL
- en: Generalization divides available data into three subsets. The first set is the
    training set, and the second set is the validation set. The error on the validation
    set is monitored during the training process, and the model is fine-tuned until
    accurate. The third subset is the test set, which is used on the fully trained
    classifier after the training and cross-validation phases to test that the model
    hasn’t overfit the training and validation data.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six cross-validation methods that can help prevent overfitting:'
  prefs: []
  type: TYPE_NORMAL
- en: '*k*-fold:Partitions data into *k* randomly chosen subsets (or folds) of roughly
    equal size, with one used to validate the model trained with the remaining subsets.
    This process is repeated *k* times, as each subset is used exactly once for validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Holdout: Separates data into two subsets of specified ratio for training and
    validation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Leave one out: Partitions data using the *k-*fold approach, where *k* equals
    the total number of observations in the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Repeated random subsampling: Performs Monte Carlo repetitions of randomly separating
    data and aggregates results over all the runs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stratify: Partitions data so both training and test sets have roughly the same
    class proportions in the response or target.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Resubstitution: Uses the training data for validation without separating it.
    This method often produces overly optimistic estimates for performance and must
    be avoided if there is sufficient data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Machine learning veterans and beginners alike run into trouble with classification
    and overfitting. While the challenges surrounding machine learning can seem daunting,
    leveraging the right tools and utilizing the validation methods covered here will
    help engineers and scientists apply machine learning more easily to real-world
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about classification modeling and overfitting and how MATLAB is
    helping to overcome this machine learning challenge, see the links below or email
    me at [sdeland@mathworks.com](mailto:sdeland@mathworks.com).
  prefs: []
  type: TYPE_NORMAL
- en: '[Test-Drive the Classification Learner App](https://www.mathworks.com/campaigns/offers/machine-learning-try-in-browser.html?s_eid=PEP_22192):
    Create and train a machine learning model by running MATLAB right in your browser.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Classification Examples](https://www.mathworks.com/help/stats/examples.html?category=classification&s_tid=CRUX_classification?s_eid=PEP_22192):
    Check out these 25 classification examples including discriminant analysis and
    NaïveBayes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Improve Shallow Neural Network Generalization and Avoid Overfitting](https://www.mathworks.com/help/deeplearning/ug/improve-neural-network-generalization-and-avoid-overfitting.html?s_eid=PEP_22192):
    Here is an example of overfitting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How To Tackle 3 Common Machine Learning Challenges](https://www.kdnuggets.com/2022/09/comet-tackle-3-common-machine-learning-challenges.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Common Data Problems (and Solutions)](https://www.kdnuggets.com/2022/02/common-data-problems-solutions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Most Common Data Quality Issues and How to Fix Them](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Common Python Gotchas (And How To Avoid Them)](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Avoid These 5 Common Mistakes Every Novice in AI Makes](https://www.kdnuggets.com/avoid-these-5-common-mistakes-every-novice-in-ai-makes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Common Data Science Mistakes and How to Avoid Them](https://www.kdnuggets.com/5-common-data-science-mistakes-and-how-to-avoid-them)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
