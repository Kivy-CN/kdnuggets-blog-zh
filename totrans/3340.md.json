["```py\ndef getNGrams(query):\n\ttempQuery = str(query)\n\tngrams = []\n\tfor i in range(0,len(tempQuery)-3):\n\t\tngrams.append(tempQuery[i:i+3])\n\treturn ngrams\n```", "```py\nfilename = 'badqueries.txt'\ndirectory = str(os.getcwd())\nfilepath = directory + \"/\" + filename\ndata = open(filepath,'r').readlines()\ndata = list(set(data))\nbadQueries = []\nvalidQueries = []\ncount = 0\nfor d in data:\n\td = str(urllib.unquote(d).decode('utf8')) \n\tbadQueries.append(d)\n\nfilename = 'goodqueries.txt'\ndirectory = str(os.getcwd())\nfilepath = directory + \"/\" + filename\ndata = open(filepath,'r').readlines()\ndata = list(set(data))\nfor d in data:\n\td = str(urllib.unquote(d).decode('utf8'))\n\tvalidQueries.append(d)\n\n```", "```py\nbadQueries = list(set(badQueries))\ntempvalidQueries = list(set(validQueries]))\ntempAllQueries = badQueries + tempvalidQueries\nbady = [1 for i in range(0,len(tempXssQueries))]\ngoody = [0 for i in range(0,len(tempvalidQueries))]\ny = bady+goody\nqueries = tempAllQueries\n```", "```py\nvectorizer = TfidfVectorizer(tokenizer=getNGrams)\nX = vectorizer.fit_transform(queries)\nX_train, X_test, y_train, y_test = train_test_split(X, y, \ntest_size=0.2, random_state=42)\n```", "```py\nlgs = LogisticRegression()\nlgs.fit(X_train, y_train)\nprint(lgs.score(X_test, y_test))\n```", "```py\nwp-content/wp-plugins (CLEAN)\n<script>alert(1)</script> (MALICIOUS)\nSELECT password from admin (MALICIOUS)\n\"> (MALICIOUS)\n/example/test.php (CLEAN)\ngoogle/images (CLEAN)\nq=../etc/passwd (MALICIOUS)\njavascript:confirm(1) (MALICIOUS)\n\"> (MALICIOUS)\nfoo/bar (CLEAN)\nfoooooooooooooooooooooo (CLEAN)\nexample/test/q=<script>alert(1)</script> (MALICIOUS)\nexample/test/q= (MALICIOUS)\nfsecurify/q= (MALICIOUS)\nexample/test/q= (MALICIOUS)\n```"]