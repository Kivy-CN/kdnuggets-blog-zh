- en: 15 common mistakes data scientists make in Python (and how to fix them)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家在 Python 中常犯的 15 个错误（以及如何修正它们）
- en: 原文：[https://www.kdnuggets.com/2021/03/15-common-mistakes-python.html](https://www.kdnuggets.com/2021/03/15-common-mistakes-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/03/15-common-mistakes-python.html](https://www.kdnuggets.com/2021/03/15-common-mistakes-python.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Gerold Csendes](https://www.linkedin.com/in/gcsendes/), Data Scientist
    at EPAM Systems**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Gerold Csendes](https://www.linkedin.com/in/gcsendes/)，EPAM Systems 的数据科学家**。'
- en: '![](../Images/ec752ba42e144fea772521e9af7c7416.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ec752ba42e144fea772521e9af7c7416.png)'
- en: '*Photo by [Joshua Aragon](https://unsplash.com/@goshua13?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral).*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*照片由 [Joshua Aragon](https://unsplash.com/@goshua13?utm_source=medium&utm_medium=referral)
    提供，来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)。*'
- en: I gradually realized in my data science career that by applying software engineering
    best practices, you could deliver better quality projects. Better quality might
    be fewer bugs, reliable results, and higher productivity in coding. This article
    is not intended to introduce you to these best practices in detail. Instead, it
    summarizes the most common mistakes I encountered (and made myself too), and offers
    methods, ideas, and resources on how to best tackle them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我在数据科学职业生涯中逐渐意识到，通过应用软件工程最佳实践，你可以交付更高质量的项目。更高的质量可能意味着更少的错误、可靠的结果和更高的编码生产力。本文并不是打算详细介绍这些最佳实践。而是总结了我遇到（也曾犯过的）最常见的错误，并提供了应对这些问题的方法、思路和资源。
- en: 'When reading my article, you might be tempted to think, “Well, when I work
    on my own, I don’t really need to follow this advice because I know my code.”
    The chances are that at least one other person will read your code: your future
    self. What you find self-evident at the moment will be total nonsense months later.
    Let’s make her life easier by avoiding the following mistakes.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读我的文章时，你可能会觉得，“嗯，当我独自工作时，我其实不需要遵循这些建议，因为我了解我的代码。” 很可能至少还有一个其他人会阅读你的代码：你未来的自己。你目前认为显而易见的东西，几个月后可能会完全无意义。让她的生活更轻松一点，避免以下错误。
- en: 1\. You don’t work in an isolated environment
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 你没有在隔离的环境中工作
- en: 'Okay, this may not be a coding issue per se, but I still consider isolated
    environments as an important feature for my code. Why would you consider using
    a dedicated environment for each of your projects? You want to make your code
    reproducible: on your computer in the future, on your coworker’s machine, and
    in production too. Ever faced the issue that your peer could not run your code?
    It is quite likely that she doesn’t have the same dependencies as you. (Or maybe
    after running hundreds of cells, you forgot to check whether your notebook breaks
    when using a clear kernel). If you have no idea what dependency management means,
    then it is best to start with [Anaconda Virtual Environment](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html) or [Pipenv](https://realpython.com/pipenv-guide/).
    I personally use Anaconda, and there is a great [tutorial](https://towardsdatascience.com/a-guide-to-conda-environments-bc6180fc533)
    that you can access by clicking the link. If you want to go deeper, then Docker
    is your go-to.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这本身可能不是一个编码问题，但我仍然认为隔离环境是我代码的重要特性。为什么要考虑为每个项目使用专用环境？你希望你的代码具有可重现性：在你未来的电脑上、在你的同事的机器上，以及在生产环境中。是否曾遇到过你的同事无法运行你的代码的问题？很可能是因为她没有与你相同的依赖项。（或者也许在运行了数百个单元格后，你忘了检查在使用清理内核时是否会导致
    notebook 崩溃）。如果你不知道依赖项管理是什么意思，那么最好从 [Anaconda 虚拟环境](https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)
    或 [Pipenv](https://realpython.com/pipenv-guide/) 开始。我个人使用 Anaconda，并且有一个很棒的 [教程](https://towardsdatascience.com/a-guide-to-conda-environments-bc6180fc533)
    可以通过点击链接访问。如果你想深入了解，那么 Docker 是你的首选。
- en: 2\. (Overuse of) Jupyter Notebooks
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. （过度使用）Jupyter Notebook
- en: Notebooks are really good for educational purposes and to do some quick and
    dirty job, but it fails to act as a good IDE. A good IDE is your real weapon when
    fighting data science tasks and can enhance your productivity immensely. There
    are lots of smart people shedding light on the shortcomings of notebooks. I consider
    Joel Grus’s [talk](https://www.youtube.com/watch?v=7jiPeIFXb6U) to be the best
    and most hilarious.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Notebooks 非常适合教育用途和做一些快速而粗糙的工作，但它们无法充当一个好的 IDE。一个好的 IDE 是你处理数据科学任务时的真正利器，可以极大地提高你的生产力。有很多聪明的人阐明了
    notebooks 的不足之处。我认为 Joel Grus 的 [演讲](https://www.youtube.com/watch?v=7jiPeIFXb6U)
    是最棒且最搞笑的。
- en: 'Don’t get me wrong, notebooks are fine for experimentation, and it is great
    that you can show your results to your peers with ease. However, they are really
    prone to errors, and when it comes to doing longer-term, collaborative and deployable
    projects, then you better look for a real IDE e.g., VScode, Pycharm, Spyder etc.
    I do use notebooks every now and then, but I made a mental model: I only use notebooks
    if the project doesn’t exceed one day.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 不要误解我，笔记本用于实验很好，而且你可以轻松地向同事展示你的结果这点很棒。然而，它们确实容易出错，当涉及到长期的、协作的和可部署的项目时，你最好选择一个真正的
    IDE，例如 VScode、Pycharm、Spyder 等。我确实会时不时使用笔记本，但我有一个心理模型：如果项目超过一天，我就不使用笔记本。
- en: 3\. You don’t organize your code
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 你没有组织你的代码
- en: Data scientists have a track record of stockpiling all their project files in
    a single directory. It is a bad practice. Take a look at the figure below and
    imagine that you are to take over a project of your colleague. Which project structure
    would put you into an existential crisis after hours of trying to figure out what
    is going on? Of course, the structure on the left is your go-to. [Cookiecutter](https://drivendata.github.io/cookiecutter-data-science/) is
    a brilliant initiative promoting a standardized project structure for data science.
    Make sure to check this out.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家有一个将所有项目文件储存在一个目录中的记录。这是一个糟糕的做法。看看下面的图，想象一下你要接手你同事的项目。哪个项目结构会让你在花费数小时试图弄明白发生了什么后陷入存在危机？当然，左侧的结构是你的首选。
    [Cookiecutter](https://drivendata.github.io/cookiecutter-data-science/) 是一个推广数据科学标准化项目结构的绝妙倡议。一定要查看一下。
- en: '![](../Images/71a013d2741c042d3691b309182aa879.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/71a013d2741c042d3691b309182aa879.png)'
- en: '*Good and bad project structure — Screenshot by Author.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*良好的和糟糕的项目结构 — 作者截图。*'
- en: 4\. Absolute instead of relative paths
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 使用绝对路径而不是相对路径
- en: Ever faced a comment in code “pls fix your path”? Such a comment suggests bad
    code design. Fixing this consists of 2 steps. 1) share the project structure with
    your peer (maybe the one suggested above) 2) set your IDE root/working directory
    to your project root that is usually the outmost directory in your project. The
    latter one is sometimes not that trivial to do, but it is definitely worth the
    effort because your peer will be able to run your code without changing it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 是否曾经遇到过代码中的评论“请修复你的路径”？这样的评论暗示了糟糕的代码设计。修复这个问题包括两个步骤。1) 与你的同事共享项目结构（可能是上面建议的那个）。2)
    将你的 IDE 根目录/工作目录设置为项目根目录，这通常是项目中的最外层目录。后者有时并非那么简单，但绝对值得，因为你的同事将能够在不修改代码的情况下运行它。
- en: 5\. Magic numbers
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5\. 魔法数字
- en: Magic numbers are numerics without context in code. By using magic numbers,
    you may end up with really hard-to-track errors. The gist below clearly shows
    that by simply using an unassigned number in a multiplication, you lose context
    of why this is happening, and if you later have to change this, it is rather stressful.
    It is thus desired to use named constants in capitals in Python. You don’t actually
    have to use capitalization, it is only a convention, but it is a good idea to
    distinguish your “constants ” from your “regular” variables.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法数字是代码中没有上下文的数字。使用魔法数字，你可能会遇到非常难以追踪的错误。下面的要点清晰地展示了通过在乘法中简单地使用一个未分配的数字，你会失去为何会发生这种情况的上下文，如果你后来需要修改它，这将是相当有压力的。因此，在
    Python 中建议使用大写的命名常量。你实际上不必使用大写，这只是一个约定，但区分你的“常量”和“常规”变量是个好主意。
- en: 6\. Not dealing with warnings
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6\. 没有处理警告
- en: We have all been there when our code ran but generated weird warning messages.
    You are happy that you finally got your code running and received a meaningful
    output. So why deal with the warning? Well, warnings themselves are not errors,
    but they call attention to potential bugs or issues. They appear when there is
    something dubious in your code that though it ran successful but maybe not the
    way it was intended. The most common warnings I faced were Pandas’ SettingwithCopyWarning
    and DeprecationWarning. DataSchool explains in a [neat way](https://www.youtube.com/watch?v=4R4WsDJ-KVc) how
    SettingwithCopyWarning is triggered. DeprecationWarning usually points out that
    Pandas deprecated some functionality, and your code will break when using a later
    release. Of course, there are a handful of other warning types, and my experience
    is that they arise when using something in a way it was not designed. Understanding
    the source code of that function always helps. With that, you can get rid of those
    warnings 99% of the time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都经历过代码运行但生成奇怪警告消息的情况。你会感到高兴，因为你终于让代码运行了并得到了有意义的输出。那么为什么还要处理这些警告呢？警告本身不是错误，但它们引起了对潜在错误或问题的关注。当代码中有一些可疑的内容时，警告就会出现，虽然代码运行成功，但可能没有按预期的方式运行。我遇到的最常见的警告是
    Pandas 的 SettingWithCopyWarning 和 DeprecationWarning。DataSchool 在[一个简洁的方式](https://www.youtube.com/watch?v=4R4WsDJ-KVc)中解释了
    SettingWithCopyWarning 是如何触发的。DeprecationWarning 通常指出 Pandas 已弃用某些功能，而你的代码在使用较新版本时会崩溃。当然，还有其他类型的警告，我的经验是，当以未设计的方式使用某些功能时，它们会出现。理解该函数的源代码总是有帮助的。通过这样做，你可以在
    99% 的情况下消除这些警告。
- en: 7\. You don’t use type annotation
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7\. 你没有使用类型注解
- en: I need to admit, this is a practice that I picked up recently, but I can already
    see its benefits. Type annotation (or type hint) is a method to assign types to
    your variables. You basically extend your code with hints that are really extensions
    to your code, indicating the type of variables/parameters. This makes your code
    easier to read because the intentions of the coder are explicit. To demonstrate
    this, I have taken an example from Daniel Starner at [dev.to](https://dev.to/dstarner/using-pythons-type-annotations-4cfe).
    Without type hints, *mystery_combine()* runs with both integer and string inputs
    and outputs either an integer or string. This might be ambiguous for a fellow
    developer. By using type annotation, you can be explicit with your intentions
    and make your peer's life easier.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须承认，这是一种我最近才学到的实践方法，但我已经可以看到它的好处。类型注解（或类型提示）是一种将类型分配给变量的方法。你基本上是通过提示扩展代码，这些提示实际上是对代码的扩展，指示变量/参数的类型。这使得代码更容易阅读，因为编码者的意图是明确的。为了说明这一点，我引用了Daniel
    Starner在[dev.to](https://dev.to/dstarner/using-pythons-type-annotations-4cfe)上的一个例子。没有类型提示，*mystery_combine()*
    可以接受整数和字符串输入，并输出整数或字符串。这对其他开发者可能会造成困惑。通过使用类型注解，你可以明确你的意图，让你的同事的工作变得更轻松。
- en: Additionally, code with type annotation can be statically (without actually
    running the code) checked for bugs. The screenshot below shows that the first
    two arguments are not well specified. Statically checking your code is a nice
    and useful way for a pre-check before running it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，带有类型注解的代码可以静态地（不实际运行代码）检查错误。下面的截图显示了前两个参数没有很好地指定。静态检查代码是一种在运行前进行预检查的好方法。
- en: '![](../Images/265435f278090cebd9ed4a563ab16e6e.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/265435f278090cebd9ed4a563ab16e6e.png)'
- en: '*Screenshot by Author.*'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者截图。*'
- en: 8\. You don’t use (enough) list comprehensions
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 8\. 你没有使用（足够的）列表推导
- en: List comprehension is a really powerful feature of python. Many for loops may
    be substituted with list comprehension that is more readable, pythonic, and also
    faster. Below you can see an example code that intends to read a CSV file in a
    directory. You might say that using a for loop is not a sin in this case but try
    checking only for CSV files (there may be other formatted files like JSON). You
    can sense that adding such a feature is easy to maintain when using list comprehension.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导是 Python 中一个非常强大的特性。许多 for 循环可以用更具可读性、更符合 Python 风格且更快速的列表推导来替代。下面你可以看到一个示例代码，意在读取目录中的
    CSV 文件。你可能会说，在这种情况下使用 for 循环并不是错误，但试试只检查 CSV 文件（可能还有其他格式的文件，如 JSON）。你会发现，使用列表推导时添加这样的功能更容易维护。
- en: 9\. Your pandas code is not readable
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 9\. 你的 pandas 代码不可读
- en: Method chaining is a great feature in pandas, but your code can get unreadable
    if you express everything in a single line. There is a trick that enables you
    to break the expression up. If you put your expression into parentheses, then
    you are able to use a single line for each component of the expression. Isn’t
    that a lot cleaner?
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 方法链在 pandas 中是一个很好的特性，但如果你把所有东西都用一行表达，代码可能会变得难以阅读。有一个技巧可以让你将表达式拆分开。如果你把表达式放在括号中，那么你可以为表达式的每个组件使用一行。这不是更干净吗？
- en: 10\. You are afraid to use dates
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 10\. 你害怕使用日期
- en: Dates can be intimidating in Python. The syntax is weird, and it is hard to
    wrap your head around it. A common mistake I see is that people handle dates like
    numerics. You can always do a workaround and hack code together, but it is really
    error-prone, hard to read and maintain. See an example below where the task is
    to list all months between two dates in a %Y%m format. You can see that your code
    becomes much more readable and maintainable if you follow the datetime implementation.
    In my case, dealing with dates still requires lots of googling, but I have learned
    not to be intimidated if I don’t find a solution on the first try.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，处理日期可能让人感到困惑。语法很奇怪，而且很难理解。一个常见的错误是，人们把日期当作数字来处理。你总是可以找到一种变通的方法，拼凑代码，但这确实容易出错，难以阅读和维护。请参见下面的示例，其中的任务是列出两个日期之间所有的月份，格式为
    %Y%m。如果你遵循 datetime 实现，你会发现你的代码变得更加可读和易于维护。在我的情况中，处理日期仍然需要大量的谷歌搜索，但我已经学会了如果第一次尝试没有找到解决方案也不要感到害怕。
- en: 11\. You don’t use good variable names
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 11\. 你没有使用好的变量名
- en: Naming your dataframes df and i, j, k for your loop indexes are just non-descriptive
    and make your code less readable. An effort for keeping your variable names too
    short is a guarantee for confusing the coders on your project. Don’t be afraid
    to use long(er) names for your variables. There is nothing stopping you from using
    more ‘_’-s. Make sure to check out Will Koehrsen’s great [article](https://towardsdatascience.com/data-scientists-your-variable-names-are-awful-heres-how-to-fix-them-89053d2855be) on
    this topic to get further insights.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的数据框命名为 df，以及将循环索引命名为 i、j、k 都是非描述性的，这使得你的代码可读性降低。将变量名保持得太短会让你的项目中的其他编码人员感到困惑。不要害怕使用较长的变量名。没有什么能阻止你使用更多的
    ‘_’。确保查看 Will Koehrsen 的精彩 [文章](https://towardsdatascience.com/data-scientists-your-variable-names-are-awful-heres-how-to-fix-them-89053d2855be)
    以获得进一步的见解。
- en: 12\. You don’t modularize your code
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 12\. 你没有将代码模块化
- en: Modularization means breaking up long and complex code into simpler modules
    that perform smaller, specific tasks. Don’t just create a long script for your
    project. Defining your classes or functions at the top of your code is bad practice.
    It is hard to maintain and read. Instead, create modules (packages) and structure
    them based on their functionality. Again, you can visit realpython.org [Python
    Modules and Packages](https://realpython.com/courses/python-modules-packages/) tutorial
    for an in-depth introduction.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化意味着将长且复杂的代码拆分成执行较小、特定任务的简单模块。不要只是为你的项目创建一个长脚本。将你的类或函数定义放在代码的顶部是一种不好的做法。这样维护和阅读都很困难。相反，创建模块（包），并根据它们的功能进行结构化。同样，你可以访问
    realpython.org [Python 模块和包](https://realpython.com/courses/python-modules-packages/) 教程以获得深入的介绍。
- en: 13\. You don’t follow PEP conventions
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13\. 你没有遵循 PEP 规范
- en: When I started with programming in Python, I ended up writing ugly, unreadable
    code and started making my own design rules on how to make my code look better.
    It took quite a lot of time to come up with them, and I did break these rules
    often. Then, I found out about [PEP](https://www.python.org/dev/peps/), which
    is the official styling guideline for Python. I am really fond of PEP because
    it makes collaboration easier by enabling you to standardize the appearance of
    your code. By the way, I do ignore some PEP rules, but I would say I use them
    in 90% of my code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始使用 Python 编程时，我最终写出了丑陋、难以阅读的代码，并开始制定自己使代码更好看的设计规则。制定这些规则花费了不少时间，我也经常违反这些规则。后来，我发现了
    [PEP](https://www.python.org/dev/peps/)，这是 Python 的官方风格指南。我非常喜欢 PEP，因为它通过使代码外观标准化来简化协作。顺便说一下，我确实忽略了一些
    PEP 规则，但我会说我在 90% 的代码中使用了这些规则。
- en: Any good Python IDE can be extended with a linter. The picture below demonstrates
    how a linter works in practice. They point out code quality issues, and if it
    is still vague for you, you can check out the specific PEP index, which is indicated
    in parentheses. If you want to see what linters are available out there, then,
    as always, [realpythong.org](https://realpython.com/python-code-quality/#linters) is
    a good source for python stuff.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 任何好的Python IDE都可以通过linter进行扩展。下图展示了linter的实际工作方式。它们指出代码质量问题，如果你仍然感到模糊，可以查看括号中指示的具体PEP索引。如果你想查看有哪些linter可用，像往常一样，[realpython.org](https://realpython.com/python-code-quality/#linters)是一个很好的Python资源。
- en: '![](../Images/b91396aada9f5194acc8e4673d24152b.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b91396aada9f5194acc8e4673d24152b.png)'
- en: '*Screenshot by Author.*'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*作者截图。*'
- en: 14\. You don’t use a coding assistant
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 14\. 你没有使用编码助手
- en: Do you want to have big productivity gains in coding? Start using a coding assistant
    that helps by clever autocomplete, opening up documentation, and giving suggestions
    to improve your code. I like using pylance, which is a new tool developed by Microsoft
    and is available in VScode. Kite is an alternative that is also really nice and
    available in a number of editors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 想要在编码中获得巨大的生产力提升？开始使用一个编码助手，它通过智能自动完成、打开文档和提供改进建议来帮助你。我喜欢使用pylance，它是微软开发的一个新工具，支持VScode。Kite是另一个很不错的替代工具，可用于多种编辑器。
- en: Check out [this video](https://thumbs.gfycat.com/BaggyNiceLemur-mobile.mp4)
    by the author.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 查看[这段视频](https://thumbs.gfycat.com/BaggyNiceLemur-mobile.mp4)。
- en: 15\. You don’t hide secrets in your code
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15\. 你没有在代码中隐藏秘密
- en: Pushing secrets (passwords, keys) to public GitHub repositories is a widespread
    security flaw. If you want to get a sense of the seriousness of this issue, check
    out this [qz](https://qz.com/674520/companies-are-sharing-their-secret-access-codes-on-github-and-they-may-not-even-know-it/)
    article. There are bots crawling the internet waiting for you to make such a mistake.
    As far as I am concerned, security is a topic that is hardly ever part of any
    data science curriculum. So, you need to fill in the gap yourself. I suggest you
    first start with using OS environment variables. This [dev.to](https://dev.to/biplov/handling-passwords-and-secret-keys-using-environment-variables-2ei0) article
    might be a good start.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 将秘密（密码、密钥）推送到公共GitHub库是一个广泛存在的安全漏洞。如果你想了解这个问题的严重性，可以查看这篇[qz](https://qz.com/674520/companies-are-sharing-their-secret-access-codes-on-github-and-they-may-not-even-know-it/)文章。网络上有机器人在等待你犯这样的错误。就我而言，安全几乎从未成为任何数据科学课程的一部分。所以，你需要自己弥补这个空白。我建议你首先开始使用操作系统环境变量。这篇[dev.to](https://dev.to/biplov/handling-passwords-and-secret-keys-using-environment-variables-2ei0)文章可能是一个不错的起点。
- en: '[Original](https://towardsdatascience.com/15-common-coding-mistakes-data-scientist-make-in-python-and-how-to-fix-them-7760467498af).
    Reposted with permission.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/15-common-coding-mistakes-data-scientist-make-in-python-and-how-to-fix-them-7760467498af)。转载许可。'
- en: '**Related:**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Software Engineering Tips and Best Practices for Data Science](https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学的软件工程技巧和最佳实践](https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html)'
- en: '[Software engineering fundamentals for Data Scientists](https://www.kdnuggets.com/2020/06/software-engineering-fundamentals-data-scientists.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的软件工程基础](https://www.kdnuggets.com/2020/06/software-engineering-fundamentals-data-scientists.html)'
- en: '[Coding habits for data scientists](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的编码习惯](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)'
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[10 Most Common Data Quality Issues and How to Fix Them](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10个最常见的数据质量问题及其解决方法](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
- en: '[5 Common Data Science Mistakes and How to Avoid Them](https://www.kdnuggets.com/5-common-data-science-mistakes-and-how-to-avoid-them)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个常见的数据科学错误及其避免方法](https://www.kdnuggets.com/5-common-data-science-mistakes-and-how-to-avoid-them)'
- en: '[5 Common Python Gotchas (And How To Avoid Them)](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个常见的Python陷阱（以及如何避免它们）](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them)'
- en: '[Avoid These 5 Common Mistakes Every Novice in AI Makes](https://www.kdnuggets.com/avoid-these-5-common-mistakes-every-novice-in-ai-makes)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[避免这5个每个AI新手都会犯的常见错误](https://www.kdnuggets.com/avoid-these-5-common-mistakes-every-novice-in-ai-makes)'
- en: '[Mistakes That Newbie Data Scientists Should Avoid](https://www.kdnuggets.com/2022/06/mistakes-newbie-data-scientists-avoid.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[新手数据科学家应该避免的错误](https://www.kdnuggets.com/2022/06/mistakes-newbie-data-scientists-avoid.html)'
- en: '[How Much Do Data Scientists Make in 2022?](https://www.kdnuggets.com/2022/02/much-data-scientists-make-2022.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2022年数据科学家的收入是多少？](https://www.kdnuggets.com/2022/02/much-data-scientists-make-2022.html)'
