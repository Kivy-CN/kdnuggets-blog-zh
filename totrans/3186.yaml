- en: 'Getting Started with TensorFlow: A Machine Learning Tutorial'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html](https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2017/12/getting-started-tensorflow.html/2#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Dino Causevic](https://www.toptal.com/resume/dino-causevic), Toptal**.'
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow is an open source software library created by Google that is used
    to implement machine learning and deep learning systems. These two names contain
    a series of powerful algorithms that share a common challenge—to allow a computer
    to learn how to automatically spot complex patterns and/or to make best possible
    decisions.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in details about these systems, you can learn more from
    the Toptal blog posts on [machine learning](https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer)
    and [deep learning](https://www.toptal.com/machine-learning/an-introduction-to-deep-learning-from-perceptrons-to-deep-networks).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e3b08444cb7bdaecec1e430278822de.png)'
  prefs: []
  type: TYPE_IMG
- en: TensorFlow, at its heart, is a library for dataflow programming. It leverages
    various optimization techniques to make the calculation of mathematical expressions
    easier and more performant.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key features of TensorFlow are:'
  prefs: []
  type: TYPE_NORMAL
- en: Efficiently works with mathematical expressions involving multi-dimensional
    arrays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Good support of deep neural networks and machine learning concepts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GPU/CPU computing where the same code can be executed on both architectures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High scalability of computation across machines and huge data sets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Together, these features make TensorFlow the perfect framework for machine intelligence
    at a production scale.
  prefs: []
  type: TYPE_NORMAL
- en: In this TensorFlow tutorial, you will learn how you can use simple yet powerful
    machine learning methods in TensorFlow and how you can use some of its auxiliary
    libraries to debug, visualize, and tweak the models created with it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installing TensorFlow**'
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the TensorFlow Python API, which works with Python 2.7 and
    Python 3.3+. The GPU version (Linux only) requires the Cuda Toolkit 7.0+ and cuDNN
    v2+.
  prefs: []
  type: TYPE_NORMAL
- en: We shall use the Conda package dependency management system to install TensorFlow.
    Conda allows us to separate multiple environments on a machine. You can learn
    how to install Conda from [here](https://conda.io/docs/user-guide/install/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: After installing Conda, we can create the environment that we will use for TensorFlow
    installation and use. The following command will create our environment with some
    additional libraries like [NumPy](https://www.numpy.org/), which is very useful
    once we start to use TensorFlow.
  prefs: []
  type: TYPE_NORMAL
- en: The Python version installed inside this environment is 2.7, and we will use
    this version in this article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '*To make things easy, we are installing biopython here instead of just NumPy.
    This includes NumPy and a few other packages that we will be needing. You can
    always install the packages as you need them using the `conda install` or the
    `pip install` commands.*'
  prefs: []
  type: TYPE_NORMAL
- en: The following command will activate the created Conda environment. We will be
    able to use packages installed within it, without mixing with packages that are
    installed globally or in some other environments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The pip installation tool is a standard part of a Conda environment. We will
    use it to install the TensorFlow library. Prior to doing that, a good first step
    is updating pip to the latest version, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are ready to install TensorFlow, by running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The download and build of TensorFlow can take several minutes. At the time of
    writing, this installs TensorFlow 1.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Flow Graphs**'
  prefs: []
  type: TYPE_NORMAL
- en: In TensorFlow, computation is described using data flow graphs. Each node of
    the graph represents an instance of a mathematical operation (like addition, division,
    or multiplication) and each edge is a multi-dimensional data set (tensor) on which
    the operations are performed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1a9f8cab43009efda34fad441f236123.png)'
  prefs: []
  type: TYPE_IMG
- en: As TensorFlow works with computational graphs, they are managed where each node
    represents the instantiation of an operation where each operation has zero or
    more inputs and zero or more outputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edges in TensorFlow can be grouped in two categories: Normal edges transfer
    data structure (tensors) where it is possible that the output of one operation
    becomes the input for another operation and special edges, which are used to control
    dependency between two nodes to set the order of operation where one node waits
    for another to finish.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Expressions**'
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to discuss elements of TensorFlow, we will first do a session
    of working with TensorFlow, to get a feeling of what a TensorFlow program looks
    like.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with simple expressions and assume that, for some reason, we want
    to evaluate the function `y = 5*x + 13` in TensorFlow fashion.
  prefs: []
  type: TYPE_NORMAL
- en: 'In simple Python code, it would look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: which gives us in this case a result of 3.0.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will convert the above expression into TensorFlow terms.
  prefs: []
  type: TYPE_NORMAL
- en: '**Constants**'
  prefs: []
  type: TYPE_NORMAL
- en: In TensorFlow, constants are created using the function constant, which has
    the signature `constant(value, dtype=None, shape=None, name='Const', verify_shape=False)`,
    where `value` is an actual constant value which will be used in further computation,
    `dtype` is the data type parameter (e.g., float32/64, int8/16, etc.), `shape`
    is optional dimensions, `name` is an optional name for the tensor, and the last
    parameter is a boolean which indicates verification of the shape of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need constants with specific values inside your training model, then
    the `constant` object can be used as in following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Variables**'
  prefs: []
  type: TYPE_NORMAL
- en: Variables in TensorFlow are in-memory buffers containing tensors which have
    to be explicitly initialized and used in-graph to maintain state across session.
    By simply calling the constructor the variable is added in computational graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables are especially useful once you start with training models, and they
    are used to hold and update parameters. An initial value passed as an argument
    of a constructor represents a tensor or object which can be converted or returned
    as a tensor. That means if we want to fill a variable with some predefined or
    random values to be used afterwards in the training process and updated over iterations,
    we can define it in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to use variables in TensorFlow is in calculations where that variable
    isn’t trainable and can be defined in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Sessions**'
  prefs: []
  type: TYPE_NORMAL
- en: In order to actually evaluate the nodes, we must run a computational graph within
    a session.
  prefs: []
  type: TYPE_NORMAL
- en: A session encapsulates the control and state of the TensorFlow runtime. A session
    without parameters will use the default graph created in the current session,
    otherwise the session class accepts a graph parameter, which is used in that session
    to be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Below is a brief code snippet that shows how the terms defined above can be
    used in TensorFlow to calculate a simple linear function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Using TensorFlow: Defining Computational Graphs**'
  prefs: []
  type: TYPE_NORMAL
- en: The good thing about working with dataflow graphs is that the execution model
    is separated from its execution (on CPU, GPU, or some combination) where, once
    implemented, software in TensorFlow can be used on the CPU or GPU where all complexity
    related to code execution is hidden.
  prefs: []
  type: TYPE_NORMAL
- en: The computation graph can be built in the process of using the TensorFlow library
    without having to explicitly instantiate [Graph](https://www.tensorflow.org/versions/master/api_docs/python/tf/Graph)
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: A Graph object in TensorFlow can be created as a result of a simple line of
    code like `c = tf.add(a, b)`. This will create an operation node that takes two
    tensors `a` and `b` that produce their sum `c` as output.
  prefs: []
  type: TYPE_NORMAL
- en: The computation graph is a built-in process that uses the library without needing
    to call the [graph](https://www.tensorflow.org/versions/master/api_docs/python/tf/Graph)
    object directly. A graph object in TensorFlow, which contains a set of operations
    and tensors as units of data, is used between operations which allows the same
    process and contains more than one graph where each graph will be assigned to
    a different session. For example, the simple line of code `c = tf.add(a, b)` will
    create an operation node that takes two tensors `a` and `b` as input and produces
    their sum `c` as output.
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow also provides a feed mechanism for patching a tensor to any operation
    in the graph, where the feed replaces the output of an operation with the tensor
    value. The feed data are passed as an argument in the `run()` function call.
  prefs: []
  type: TYPE_NORMAL
- en: 'A placeholder is TensorFlow’s way of allowing developers to inject data into
    the computation graph through placeholders which are bound inside some expressions.
    The signature of the placeholder is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: where dtype is the type of elements in the tensors and can provide both the
    shape of the tensors to be fed and the name for the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the shape isn’t passed, this tensor can be fed with any shape. An important
    note is that the placeholder tensor has to be fed with data, otherwise, upon execution
    of the session and if that part is missing, the placeholder generates an error
    with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The advantage of placeholders is that they allow developers to create operations,
    and the computational graph in general, without needing to provide the data in
    advance for that, and the data can be added in runtime from external sources.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a simple problem of multiplying two integers `x` and `y` in TensorFlow
    fashion, where a placeholder will be used together with a feed mechanism through
    the session `run` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Visualizing the Computational Graph with TensorBoard**'
  prefs: []
  type: TYPE_NORMAL
- en: TensorBoard is a visualization tool for analyzing data flow graphs. This can
    be useful for gaining better understanding of machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: With TensorBoard, you can gain insight into different types of statistics about
    the parameters and details about the parts of the computational graph in general.
    It is not unusual that a deep neural network has large number of nodes. TensorBoard
    allows developers to get insight into each node and how the computation is executed
    over the TensorFlow runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/48d7c35fa2fff56b5635fa7bdf908e1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let’s get back to our example from the beginning of this TensorFlow tutorial
    where we defined a linear function with the format `y = a*x + b`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to log events from session which later can be used in TensorBoard,
    TensorFlow provides the `FileWriter` class. It can be used to create an event
    file for storing [summaries](https://www.tensorflow.org/api_guides/python/summary)
    and [events](https://www.tensorflow.org/api_docs/python/tf/Event) where the constructor
    accepts six parameters and looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'where the logdir parameter is required, and others have default values. The
    graph parameter will be passed from the session object created in the training
    program. The full example code looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We added just two new lines. We merge all the summaries collected in the default
    graph, and `FileWriter`is used to dump events to the file as we described above,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the program, we have the file in the directory logs, and the
    last step is to run `tensorboard`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now TensorBoard is started and running on the default port 6006\. After opening
    https://localhost:6006 and clicking on the Graphs menu item (located at the top
    of the page), you will be able to see the graph, like the one in the picture below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d7def7e0a9ba10e06df3f474264fe157.png)'
  prefs: []
  type: TYPE_IMG
- en: TensorBoard marks constants and summary nodes specific symbols, which are described
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f39a2398dc314d85d44d6734a1ae94b9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Mathematics with TensorFlow**'
  prefs: []
  type: TYPE_NORMAL
- en: Tensors are the basic data structures in TensorFlow, and they represent the
    connecting edges in a dataflow graph.
  prefs: []
  type: TYPE_NORMAL
- en: 'A tensor simply identifies a multidimensional array or list. The tensor structure
    can be identified with three parameters: rank, shape, and type.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Rank: Identifies the number of dimensions of the tensor. A rank is known as
    the order or n-dimensions of a tensor, where for example rank 1 tensor is a vector
    or rank 2 tensor is matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Shape: The shape of a tensor is the number of rows and columns it has.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Type: The data type assigned to tensor elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To build a tensor in TensorFlow, we can build an n-dimensional array. This can
    be done easily by using the NumPy library, or by converting a Python n-dimensional
    array into a TensorFlow tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/54429bdf3b195d6b7305c5e32546eff4.png)'
  prefs: []
  type: TYPE_IMG
- en: To build a 1-d tensor, we will use a NumPy array, which we’ll construct by passing
    a built-in Python list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Working with this kind of array is similar to working with a built-in Python
    list. The main difference is that the NumPy array also contains some additional
    properties, like dimension, shape, and type.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: A NumPy array can be easily converted into a TensorFlow tensor with the auxiliary
    function [convert_to_tensor](https://www.tensorflow.org/versions/master/api_docs/python/tf/convert_to_tensor),
    which helps developers convert Python objects to tensor objects. This function
    accepts tensor objects, NumPy arrays, Python lists, and Python scalars.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now if we bind our tensor to the TensorFlow session, we will be able to see
    the results of our conversion.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a 2-d tensor, or matrix, in a similar way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Tensor Operations**'
  prefs: []
  type: TYPE_NORMAL
- en: In the example above, we introduce a few TensorFlow operations on the vectors
    and matrices. The operations perform certain calculations on the tensors. Which
    calculations those are is shown in the table below.
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow operations listed in the table above work with tensor objects, and
    are performed element-wise. So if you want to calculate the cosine for a vector
    x, the TensorFlow operation will do calculations for each element in the passed
    tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '**Matrix Operations**'
  prefs: []
  type: TYPE_NORMAL
- en: Matrix operations are very important for machine learning models, like linear
    regression, as they are often used in them. TensorFlow supports all the most common
    matrix operations, like [multiplication](https://www.tensorflow.org/versions/master/api_docs/python/tf/matmul),
    [transposing](https://www.tensorflow.org/versions/master/api_docs/python/tf/transpose),
    [inversion](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_inverse),
    calculating the [determinant](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_determinant),
    solving [linear equations](https://www.tensorflow.org/versions/master/api_docs/python/tf/matrix_solve),
    and [many more](https://www.tensorflow.org/versions/master/api_guides/python/math_ops#Matrix_Math_Functions).
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we will explain some of the matrix operations. They tend to be important
    when comes to machine learning models, like in linear regression. Let’s write
    some code that will do basic matrix operations like multiplication, getting the
    [transpose](https://www.tensorflow.org/versions/master/api_docs/python/tf/transpose),
    getting the determinant, multiplication, sol, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: Below are basic examples of calling these operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Federated Learning: Collaborative Machine Learning with a Tutorial…](https://www.kdnuggets.com/2021/12/federated-learning-collaborative-machine-learning-tutorial-get-started.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Scikit-learn for Classification in Machine Learning](https://www.kdnuggets.com/getting-started-with-scikit-learn-for-classification-in-machine-learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started Cleaning Data](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with spaCy for NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
