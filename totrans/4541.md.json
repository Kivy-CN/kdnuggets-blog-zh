["```py\nfeat_imp = pd.DataFrame({'features': X_train.columns.tolist(), \"mean_decrease_impurity\": rf.feature_importances_}).sort_values('mean_decrease_impurity', ascending=False)\nfeat_imp = feat_imp.head(25)\nfeat_imp.iplot(kind='bar',\n               y='mean_decrease_impurity',\n               x='features',\n               yTitle='Mean Decrease Impurity',\n               xTitle='Features',\n               title='Mean Decrease Impurity',\n              )\n\n```", "```py\n# get the feature importances from each tree and then visualize the\n# distributions as boxplots\nall_feat_imp_df = pd.DataFrame(data=[tree.feature_importances_ for tree in\n                                     rf],\n                               columns=X_train.columns)\norder_column = all_feat_imp_df.mean(axis=0).sort_values(ascending=False).index.tolist()\n\nall_feat_imp_df[order_column[:25]].iplot(kind='box', xTitle = 'Features', yTitle='Mean Decease Impurity')\n\n```", "```py\ndef dropcol_importances(rf, X_train, y_train, cv = 3):\n    rf_ = clone(rf)\n    rf_.random_state = 42\n    baseline = cross_val_score(rf_, X_train, y_train, scoring='accuracy', cv=cv)\n    imp = []\n    for col in X_train.columns:\n        X = X_train.drop(col, axis=1)\n        rf_ = clone(rf)\n        rf_.random_state = 42\n        oob = cross_val_score(rf_, X, y_train, scoring='accuracy', cv=cv)\n        imp.append(baseline - oob)\n    imp = np.array(imp)\n\n    importance = pd.DataFrame(\n            imp, index=X_train.columns)\n    importance.columns = [\"cv_{}\".format(i) for i in range(cv)]\n    return importance\n\n```", "```py\ndrop_col_imp = dropcol_importances(rf, X_train, y_train, cv=50)\ndrop_col_importance = pd.DataFrame({'features': X_train.columns.tolist(), \"drop_col_importance\": drop_col_imp.mean(axis=1).values}).sort_values('drop_col_importance', ascending=False)\ndrop_col_importance = drop_col_importance.head(25)\ndrop_col_importance.iplot(kind='bar',\n               y='drop_col_importance',\n               x='features',\n               yTitle='Drop Column Importance',\n               xTitle='Features',\n               title='Drop Column Importances',\n              )\n\nall_feat_imp_df = drop_col_imp.T\norder_column = all_feat_imp_df.mean(axis=0).sort_values(ascending=False).index.tolist()\n\nall_feat_imp_df[order_column[:25]].iplot(kind='box', xTitle = 'Features', yTitle='Drop Column Importance')\n\n```", "```py\nfrom mlxtend.evaluate import feature_importance_permutation\n#This takes sometime. You can reduce this number to make the process faster\nnum_rounds = 50\nimp_vals, all_trials = feature_importance_permutation(\n    predict_method=rf.predict, \n    X=X_test.values,\n    y=y_test.values,\n    metric='accuracy',\n    num_rounds=num_rounds, \n    seed=1)\npermutation_importance = pd.DataFrame({'features': X_train.columns.tolist(), \"permutation_importance\": imp_vals}).sort_values('permutation_importance', ascending=False)\npermutation_importance = permutation_importance.head(25)\npermutation_importance.iplot(kind='bar',\n               y='permutation_importance',\n               x='features',\n               yTitle='Permutation Importance',\n               xTitle='Features',\n               title='Permutation Importances',\n              )\n\n```", "```py\nall_feat_imp_df = pd.DataFrame(data=np.transpose(all_trials),\n                               columns=X_train.columns, index = range(0,num_rounds))\norder_column = all_feat_imp_df.mean(axis=0).sort_values(ascending=False).index.tolist()\n\nall_feat_imp_df[order_column[:25]].iplot(kind='box', xTitle = 'Features', yTitle='Permutation Importance')\n\n```", "```py\nfrom pdpbox import pdp, info_plots\npdp_age = pdp.pdp_isolate(\n    model=rf, dataset=X_train, model_features=X_train.columns, feature='age'\n)\n#PDP Plot\nfig, axes = pdp.pdp_plot(pdp_age, 'Age', plot_lines=False, center=False, frac_to_plot=0.5, plot_pts_dist=True,x_quantile=True, show_percentile=True)\n#ICE Plot\nfig, axes = pdp.pdp_plot(pdp_age, 'Age', plot_lines=True, center=False, frac_to_plot=0.5, plot_pts_dist=True,x_quantile=True, show_percentile=True)\n\n```", "```py\n# All the one-hot variables for the occupation feature\noccupation_features = ['occupation_ ?', 'occupation_ Adm-clerical', 'occupation_ Armed-Forces', 'occupation_ Craft-repair', 'occupation_ Exec-managerial', 'occupation_ Farming-fishing', 'occupation_ Handlers-cleaners', 'occupation_ Machine-op-inspct', 'occupation_ Other-service', 'occupation_ Priv-house-serv', 'occupation_ Prof-specialty', 'occupation_ Protective-serv', 'occupation_ Sales', 'occupation_ Tech-support', 'occupation_ Transport-moving']\n#Notice we are passing the list of features as a list with the feature parameter\npdp_occupation = pdp.pdp_isolate(\n    model=rf, dataset=X_train, model_features=X_train.columns, \n    feature=occupation_features\n)\n#PDP\nfig, axes = pdp.pdp_plot(pdp_occupation, 'Occupation', center = False, plot_pts_dist=True)\n#Processing the plot for aesthetics\n_ = axes['pdp_ax']['_pdp_ax'].set_xticklabels([col.replace(\"occupation_\",\"\") for col in occupation_features])\naxes['pdp_ax']['_pdp_ax'].tick_params(axis='x', rotation=45)\nbounds = axes['pdp_ax']['_count_ax'].get_position().bounds\naxes['pdp_ax']['_count_ax'].set_position([bounds[0], 0, bounds[2], bounds[3]])\n_ = axes['pdp_ax']['_count_ax'].set_xticklabels([])\n\n```", "```py\n# Age and Education\ninter1 = pdp.pdp_interact(\n    model=rf, dataset=X_train, model_features=X_train.columns, features=['age', 'education_num']\n)\nfig, axes = pdp.pdp_interact_plot(\n    pdp_interact_out=inter1, feature_names=['age', 'education_num'], plot_type='contour', x_quantile=False, plot_pdp=False\n)\naxes['pdp_inter_ax'].set_yticklabels([edu_map.get(col) for col in axes['pdp_inter_ax'].get_yticks()])\n\n```", "```py\n#PDP Sex\npdp_sex = pdp.pdp_isolate(\n    model=rf, dataset=X_train, model_features=X_train.columns, feature='sex'\n)\nfig, axes = pdp.pdp_plot(pdp_sex, 'Sex', center=False, plot_pts_dist=True)\n_ = axes['pdp_ax']['_pdp_ax'].set_xticklabels(sex_le.inverse_transform(axes['pdp_ax']['_pdp_ax'].get_xticks()))\n\n# marital_status and sex\ninter1 = pdp.pdp_interact(\n    model=rf, dataset=X_train, model_features=X_train.columns, features=['marital_status', 'sex']\n)\nfig, axes = pdp.pdp_interact_plot(\n    pdp_interact_out=inter1, feature_names=['marital_status', 'sex'], plot_type='grid', x_quantile=False, plot_pdp=False\n)\naxes['pdp_inter_ax'].set_xticklabels(marital_le.inverse_transform(axes['pdp_inter_ax'].get_xticks()))\naxes['pdp_inter_ax'].set_yticklabels(sex_le.inverse_transform(axes['pdp_inter_ax'].get_yticks()))\n\n```"]