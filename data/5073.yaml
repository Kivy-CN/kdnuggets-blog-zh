- en: Overview of Python Visualization Tools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 可视化工具概述
- en: 原文：[https://www.kdnuggets.com/2015/11/overview-python-visualization-tools.html](https://www.kdnuggets.com/2015/11/overview-python-visualization-tools.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2015/11/overview-python-visualization-tools.html](https://www.kdnuggets.com/2015/11/overview-python-visualization-tools.html)
- en: '**By [Chris Moffitt](http://pbpython.com/author/chris-moffitt.html)**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Chris Moffitt](http://pbpython.com/author/chris-moffitt.html)**。'
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: 'In the python world, there are multiple options for visualizing your data.
    Because of this variety, it can be really challenging to figure out which one
    to use when. This article contains a sample of some of the more popular ones and
    illustrates how to use them to create a simple bar chart. I will create examples
    of plotting data with:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 世界里，有多种选项可以用于数据可视化。由于这种多样性，确定何时使用哪个工具可能非常具有挑战性。本文包含了一些较为流行的工具示例，并演示了如何使用它们创建简单的条形图。我将使用以下工具来创建数据绘图示例：
- en: '[Pandas](http://pandas.pydata.org/)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pandas](http://pandas.pydata.org/)'
- en: '[Seaborn](http://stanford.edu/~mwaskom/software/seaborn/)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Seaborn](http://stanford.edu/~mwaskom/software/seaborn/)'
- en: '[ggplot](http://ggplot.yhathq.com/)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[ggplot](http://ggplot.yhathq.com/)'
- en: '[Bokeh](http://bokeh.pydata.org/)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Bokeh](http://bokeh.pydata.org/)'
- en: '[pygal](http://pygal.org/)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[pygal](http://pygal.org/)'
- en: '[Plotly](https://plot.ly/)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Plotly](https://plot.ly/)'
- en: In the examples, I will use pandas to manipulate the data and use it to drive
    the visualization. In most cases these tools can be used without pandas but I
    think the combination of pandas + visualization tools is so common, it is the
    best place to start.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我将使用 pandas 来处理数据，并利用这些数据进行可视化。在大多数情况下，这些工具可以在没有 pandas 的情况下使用，但我认为 pandas
    和可视化工具的组合非常常见，因此这是最好的起点。
- en: What About Matplotlib?
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么 Matplotlib 呢？
- en: '[Matplotlib](http://matplotlib.org/) is the grandfather of python visualization
    packages. It is extremely powerful but with that power comes complexity. You can
    typically do anything you need using matplotlib but it is not always so easy to
    figure out. I am not going to walk through a pure Matplotlib example because many
    of the tools (especially Pandas and Seaborn) are thin wrappers over matplotlib.
    If you would like to read more about it, I went through several examples in my
    [simple graphing](http://pbpython.com/simple-graphing-pandas.html) article.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[Matplotlib](http://matplotlib.org/) 是 Python 可视化包的“祖父”。它非常强大，但这种强大也带来了复杂性。通常，你可以使用
    matplotlib 做任何你需要的事情，但这并不总是容易弄清楚。我不会详细讲解一个纯粹的 Matplotlib 示例，因为许多工具（尤其是 Pandas
    和 Seaborn）都是 matplotlib 的简化封装。如果你想了解更多，我在我的 [简单绘图](http://pbpython.com/simple-graphing-pandas.html)
    文章中讲解了几个示例。'
- en: My biggest gripe with Matplotlib is that it just takes too much work to get
    reasonable looking graphs. In playing around with some of these examples, I found
    it easier to get nice looking visualization without a lot of code. For one small
    example of the verbose nature of matplotlib, look at the faceting example on this
    [ggplot post](http://blog.yhathq.com/posts/ggplot-for-python.html).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我对 Matplotlib 最大的不满是，获取合理外观的图表需要花费太多工作。在尝试一些这些示例时，我发现无需大量代码就能更容易地获得漂亮的可视化。举一个
    matplotlib 冗长特性的例子，看看这个 [ggplot 帖子](http://blog.yhathq.com/posts/ggplot-for-python.html)中的分面示例。
- en: Methodology
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 方法论
- en: One quick note on my methodology for this article. I am sure that as soon as
    people start reading this, they will point out better ways to use these tools.
    My goal was not to create the exact same graph in each example. I wanted to visualize
    the data in roughly the same way in each example with roughly the same amount
    of time researching the solution.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本文的方法，我有一个快速说明。我确信一旦人们开始阅读，就会指出更好的使用这些工具的方法。我的目标不是在每个示例中创建完全相同的图表。我希望在每个示例中以大致相同的方式可视化数据，并花费大致相同的时间来研究解决方案。
- en: As I went through this process, the biggest challenge I had was formatting the
    x and y axes and making the data look reasonable given some of the large labels.
    It also took some time to figure out how each tool wanted the data formatted.
    Once I figured those parts out, the rest was relatively simple.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我面临的最大挑战是格式化 x 轴和 y 轴，并且在某些大标签的情况下让数据看起来合理。还花了一些时间搞清楚每个工具如何要求数据格式。一旦弄清楚了这些部分，其余的相对简单。
- en: Another point to consider is that a bar plot is probably one of the simpler
    types of graphs to make. These tools allow you to do many more types of plots
    with data. My examples focus more on the ease of formatting than innovative visualization
    examples. Also, because of the labels, some of the plots take up a lot of space
    so I’ve taken the liberty of cutting them off – just to keep the article length
    manageable. Finally, I have resized images so any blurriness is an issue of scaling
    and not a reflection on the actual output quality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要考虑的点是，条形图可能是最简单的一种图表类型。这些工具允许你创建更多类型的图表。我的示例更侧重于格式化的简便性，而非创新的可视化示例。此外，由于标签的原因，一些图表占用了很多空间，因此我自行裁剪了一些图表——只是为了保持文章长度的可控性。最后，我调整了图像的大小，因此任何模糊现象都是缩放问题，而不是实际输出质量的问题。
- en: Finally, I’m approaching this from the mindset of trying to use another tool
    in lieu of Excel. I think my examples are more illustrative of displaying in a
    report, presentation, email or on a static web page. If you are evaluating tools
    for real time visualization of data or sharing via some other mechanism; then
    some of these tools offer a lot more capability that I don’t go into.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我从尝试使用另一种工具来代替 Excel 的思路来处理这个问题。我认为我的示例更适合在报告、演示文稿、电子邮件或静态网页上展示。如果你正在评估用于实时数据可视化或通过其他机制共享的工具，那么其中一些工具提供了更多的功能，这些我没有深入探讨。
- en: Data Set
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据集
- en: The [previous article](http://pbpython.com/web-scraping-mn-budget.html) describes
    the data we will be working with. I took the scraping example one layer deeper
    and determined the detail spending items in each category. This data set includes
    125 line items but I have chosen to focus only on showing the top 10 to keep it
    a little simpler. You can find the full data set [here](http://pbpython.com/extras/mn-budget-detail-2014.csv).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[上一篇文章](http://pbpython.com/web-scraping-mn-budget.html) 描述了我们将使用的数据。我将抓取示例深入了一层，并确定了每个类别中的详细支出项目。此数据集包含
    125 个条目，但我选择只展示前 10 个，以保持简单。你可以在[这里](http://pbpython.com/extras/mn-budget-detail-2014.csv)找到完整的数据集。'
- en: Pandas
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pandas
- en: I am using a pandas DataFrame as the starting point for all the various plots.
    Fortunately, pandas does supply a built in plotting capability for us which is
    a layer over matplotlib. I will use that as the baseline. First, import our modules
    and read in the data into a budget DataFrame. We also want to sort the data and
    limit it to the top 10 items.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用 pandas DataFrame 作为所有图表的起点。幸运的是，pandas 提供了一个内置的绘图功能，这是一层在 matplotlib 之上的工具。我将以此为基础。首先，导入我们的模块并将数据读入预算
    DataFrame。我们还需要对数据进行排序，并将其限制为前 10 项。
- en: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:10]`'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:10]`'
- en: 'We will use the same budget lines for all of our examples. Here is what the
    top 5 items look like:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的预算行进行所有示例。以下是前 5 项的样子：
- en: '|  | category | detail | amount |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '|  | 类别 | 详细 | 金额 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| 46 | ADMINISTRATION | Capitol Renovation and Restoration Continued | 126300000
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 46 | 行政部门 | 议会大厦翻修与恢复续篇 | 126300000 |'
- en: '| 1 | UNIVERSITY OF MINNESOTA | Minneapolis; Tate Laboratory Renovation | 56700000
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 明尼苏达大学 | 明尼阿波利斯；泰特实验室翻修 | 56700000 |'
- en: '| 78 | HUMAN SERVICES | Minnesota Security Hospital – St. Peter | 56317000
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 78 | 人力服务 | 明尼苏达安全医院 – 圣彼得 | 56317000 |'
- en: '| 0 | UNIVERSITY OF MINNESOTA | Higher Education Asset Preservation and Replac…
    | 42500000 |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 明尼苏达大学 | 高等教育资产保护与更换… | 42500000 |'
- en: '| 5 | MINNESOTA STATE COLLEGES AND UNIVERSITIES | Higher Education Asset Preservation
    and Replac… | 42500000 |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 明尼苏达州立大学及大学 | 高等教育资产保护与更换… | 42500000 |'
- en: 'Now, setup our display to use nicer defaults and create a bar plot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，设置我们的显示以使用更好的默认值并创建条形图：
- en: '`pd.options.display.mpl_style = ''default'' budget_plot = budget.plot(kind="bar",x=budget["detail"],
    title="MN Capital Budget - 2014", legend=False)`'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`pd.options.display.mpl_style = ''default'' budget_plot = budget.plot(kind="bar",x=budget["detail"],
    title="MN 资本预算 - 2014", legend=False)`'
- en: This does all of the heavy lifting of creating the plot using the “detail” column
    as well as displaying the title and removing the legend. Here is the additional
    code needed to save the image as a png.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将利用“详细”列创建图表，同时显示标题并移除图例。以下是保存图像为 png 格式所需的额外代码。
- en: '`fig = budget_plot.get_figure() fig.savefig("2014-mn-capital-budget.png")`'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`fig = budget_plot.get_figure() fig.savefig("2014-mn-capital-budget.png")`'
- en: 'Here is what it looks like (truncated to keep the article length manageable):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是其样子（截断以保持文章长度适中）：
- en: '![Pandas image](../Images/9a85d90b9d744494b5e25628696021c3.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas image](../Images/9a85d90b9d744494b5e25628696021c3.png)'
- en: The basics look pretty nice. Ideally, I’d like to do some more formatting of
    the y-axis but that requires jumping into some matplotlib gymnastics. This is
    a perfectly serviceable visualization but it’s not possible to do a whole lot
    more customization purely through pandas.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 基本效果看起来非常好。理想情况下，我希望对 y 轴进行更多的格式化，但这需要进行一些 matplotlib 的操作。这是一个完全可以使用的可视化，但仅通过
    pandas 很难进行更多的自定义。
- en: Seaborn
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Seaborn
- en: '[Seaborn](http://stanford.edu/~mwaskom/software/seaborn/) is a visualization
    library based on matplotlib. It seeks to make default data visualizations much
    more visually appealing. It also has the goal of making more complicated plots
    simpler to create. It does integrate well with pandas. My example does not allow
    seaborn to significantly differentiate itself. One thing I like about seaborn
    is the various built in styles which allows you to quickly change the color palettes
    to look a little nicer. Otherwise, seaborn does not do a lot for us with this
    simple chart. Standard imports and read in the data:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[Seaborn](http://stanford.edu/~mwaskom/software/seaborn/) 是一个基于 matplotlib
    的可视化库。它旨在使默认的数据可视化更加美观，并且目标是简化更复杂的图表的创建。它与 pandas 也有很好的集成。我的例子没有使 seaborn 显著地展现其优势。我喜欢
    seaborn 的一个特点是其内置的各种样式，这使得你可以快速更改颜色调色板，使其看起来更加漂亮。否则，seaborn 在这个简单的图表中对我们帮助不大。标准导入和数据读取：'
- en: '`import pandas as pd import seaborn as sns import matplotlib.pyplot as plt`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`import pandas as pd import seaborn as sns import matplotlib.pyplot as plt`'
- en: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:>10]`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:>10]`'
- en: 'One thing I found out is that I explicitly had to set the order of the items
    on the x_axis using `x_order` This section of code sets the order, and styles
    the plot and bar chart colors:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我发现一个问题是，我必须明确设置 x 轴上项目的顺序，使用 `x_order`。这段代码设置了顺序，并对图表和条形图的颜色进行了样式设置：
- en: '`sns.set_style("darkgrid") bar_plot = sns.barplot(x=budget["detail"],y=budget["amount"],
    palette="muted", x_order=budget["detail"].tolist()) plt.xticks(rotation=>90) plt.show()`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`sns.set_style("darkgrid") bar_plot = sns.barplot(x=budget["detail"],y=budget["amount"],
    palette="muted", x_order=budget["detail"].tolist()) plt.xticks(rotation=>90) plt.show()`'
- en: '![Pandas image](../Images/21b021e7e23ea41286f0a1bdd838c967.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas image](../Images/21b021e7e23ea41286f0a1bdd838c967.png)'
- en: As you can see, I had to use matplotlib to rotate the x axis titles so I could
    actually read them. Visually, the display looks nice. Ideally, I’d like to format
    the ticks on the y-axis but I couldn’t figure out how to do that without using
    `plt.yticks` from matplotlib.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，我不得不使用 matplotlib 旋转 x 轴标题，以便能够实际读取它们。在视觉上，显示效果很好。理想情况下，我希望格式化 y 轴上的刻度，但我无法在不使用
    matplotlib 的 `plt.yticks` 的情况下做到这一点。
- en: ggplot
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ggplot
- en: '[ggplot](http://ggplot.yhathq.com/) is similar to Seaborn in that it builds
    on top of matplotlib and aims to improve the visual appeal of matplotlib visualizations
    in a simple way. It diverges from seaborn in that it is a port of ggplot2 for
    R. Given this goal, some of the API is non-pythonic but it is a very powerful.
    I have not used ggplot in R so there was a bit of a learning curve. However, I
    can start to see the appeal of ggplot. The library is being actively developed
    and I hope it continues to grow and mature because I think it could be a really
    powerful option. I did have a few times in my learning where I struggled to figure
    out how to do something. After looking at the code and doing a little googling,
    I was able to figure most of it out. Go ahead and import and read our data:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[ggplot](http://ggplot.yhathq.com/) 与 Seaborn 类似，因为它也是基于 matplotlib 并且旨在以简单的方式改善
    matplotlib 可视化的视觉效果。它与 seaborn 的不同之处在于，它是 R 的 ggplot2 的移植版。鉴于这一目标，部分 API 的设计不符合
    Python 的习惯，但它是非常强大的。我没有在 R 中使用过 ggplot，因此有一定的学习曲线。然而，我开始看到 ggplot 的吸引力。这个库正在积极开发中，我希望它能继续成长和成熟，因为我认为它可能成为一个非常强大的选项。在学习过程中，我确实遇到过几次解决不了的问题。经过查看代码和一些谷歌搜索后，我能够解决大部分问题。继续导入并读取我们的数据：'
- en: '`import pandas as pd from ggplot import *`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`import pandas as pd from ggplot import *`'
- en: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:>10]`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:>10]`'
- en: 'Now we construct our plot by chaining together a several ggplot commands:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们通过将多个 ggplot 命令串联在一起来构建图表：
- en: '`p = ggplot(budget, aes(x="detail",y="amount")) + \ geom_bar(stat="bar", labels=budget["detail"].tolist())
    +\ ggtitle("MN Capital Budget - 2014") + \ xlab("Spending Detail") + \ ylab("Amount")
    + scale_y_continuous(labels=''millions'') + \ theme(axis_text_x=element_text(angle=>90))
    print p`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`p = ggplot(budget, aes(x="detail",y="amount")) + \ geom_bar(stat="bar", labels=budget["detail"].tolist())
    +\ ggtitle("MN Capital Budget - 2014") + \ xlab("Spending Detail") + \ ylab("Amount")
    + scale_y_continuous(labels=''millions'') + \ theme(axis_text_x=element_text(angle=>90))
    print p`'
- en: 'This seems a little strange – especially using `print p` to display the graph.
    However, I found it relatively straightforward to figure out. It did take some
    digging to figure out how to rotate the text 90 degrees as well as figure out
    how to order the labels on the x-axis. The coolest feature I found was `scale_y_continous`
    which makes the labels come through a lot nicer. If you want to save the image,
    it’s easy with `ggsave` :'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎有点奇怪——特别是使用`print p`来显示图表。然而，我发现弄清楚这点相对简单。确实花了一些时间弄明白如何将文本旋转90度，以及如何排列x轴上的标签。我发现的最酷的功能是`scale_y_continous`，它使标签显示得更加美观。如果你想保存图像，使用`ggsave`很简单：
- en: '`ggsave(p, "mn-budget-capital-ggplot.png")`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`ggsave(p, "mn-budget-capital-ggplot.png")`'
- en: Here is the final image. I know it’s a lot of grey scale. I could color it but
    did not take the time to do so.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最终的图像。我知道这是一大片灰度。我本可以给它上色，但没有花时间去做。
- en: '![Pandas image](../Images/07a6a2614bd0dd12f908e56d78acb594.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas 图像](../Images/07a6a2614bd0dd12f908e56d78acb594.png)'
- en: '* * *'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织IT'
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Data Labeling for Machine Learning: Market Overview, Approaches, and Tools](https://www.kdnuggets.com/2021/12/data-labeling-ml-overview-and-tools.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习的数据标注：市场概览、方法和工具](https://www.kdnuggets.com/2021/12/data-labeling-ml-overview-and-tools.html)'
- en: '[A Comparative Overview of the Top 10 Open Source Data Science Tools in 2023](https://www.kdnuggets.com/a-comparative-overview-of-the-top-10-open-source-data-science-tools-in-2023)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2023年前十名开源数据科学工具的比较概述](https://www.kdnuggets.com/a-comparative-overview-of-the-top-10-open-source-data-science-tools-in-2023)'
- en: '[5 SQL Visualization Tools for Data Engineers](https://www.kdnuggets.com/2023/02/5-sql-visualization-tools-data-engineers.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5种SQL可视化工具推荐给数据工程师](https://www.kdnuggets.com/2023/02/5-sql-visualization-tools-data-engineers.html)'
- en: '[Approaches to Text Summarization: An Overview](https://www.kdnuggets.com/2019/01/approaches-text-summarization-overview.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文本摘要方法概述](https://www.kdnuggets.com/2019/01/approaches-text-summarization-overview.html)'
- en: '[An Overview of Logistic Regression](https://www.kdnuggets.com/2022/02/overview-logistic-regression.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逻辑回归概述](https://www.kdnuggets.com/2022/02/overview-logistic-regression.html)'
- en: '[An Overview of Mercury: Creating Data Science Portfolio and…](https://www.kdnuggets.com/2022/05/overview-mercury-creating-data-science-portfolio-notebook-based-webapps.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[水银概述：创建数据科学作品集和…](https://www.kdnuggets.com/2022/05/overview-mercury-creating-data-science-portfolio-notebook-based-webapps.html)'
