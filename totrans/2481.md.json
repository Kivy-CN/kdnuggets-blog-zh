["```py\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.linear_model import LinearRegression\nfrom feature_engine.selection import SelectByShuffling\n\n# load dataset\ndiabetes_X, diabetes_y = load_diabetes(return_X_y=True)\nX = pd.DataFrame(diabetes_X)\ny = pd.DataFrame(diabetes_y)\n```", "```py\n# initialize linear regression estimator\nlinear_model = LinearRegression()\n```", "```py\n# initialize the feature selector\ntr = SelectByShuffling(estimator=linear_model, scoring=\"r2\", cv=3)\n```", "```py\n# fit transformer\ntr.fit(X, y)\n```", "```py\nXt = tr.transform(X)\n```", "```py\ntr.performance_drifts_\n\n{0: -0.02368121940502793,\n 1: 0.017909161264480666,\n 2: 0.18565460365508413,\n 3: 0.07655405817715671,\n 4: 0.4327180164470878,\n 5: 0.16394693824418372,\n 6: -0.012876023845921625,\n 7: 0.01048781540981647,\n 8: 0.3921465005640224,\n 9: -0.01427065640301245}\n```", "```py\ntr.features_to_drop_\n\n[0, 1, 3, 6, 7, 9]\n```", "```py\nimport pandas as pd\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.linear_model import LinearRegression\nfrom feature_engine.selection import SelectBySingleFeaturePerformance\n\n# load dataset\ndiabetes_X, diabetes_y = load_diabetes(return_X_y=True)\nX = pd.DataFrame(diabetes_X)\ny = pd.DataFrame(diabetes_y)\n```", "```py\n# initialize the feature selector\nsel = SelectBySingleFeaturePerformance(\n        estimator=LinearRegression(), scoring=\"r2\", cv=3, threshold=0.01)\n```", "```py\n# fit transformer\nsel.fit(X, y)\n```", "```py\nsel.features_to_drop_\n\n[1]\n```", "```py\nsel.feature_performance_\n\n{0: 0.029231969375784466,\n 1: -0.003738551760264386,\n 2: 0.336620809987693,\n 3: 0.19219056680145055,\n 4: 0.037115559827549806,\n 5: 0.017854228256932614,\n 6: 0.15153886177526896,\n 7: 0.17721609966501747,\n 8: 0.3149462084418813,\n 9: 0.13876602125792703}\n```", "```py\n# drop variables\nXt = sel.transform(X)\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom feature_engine.selection import SelectByTargetMeanPerformance\n\n# load data\ndata = pd.read_csv('https://www.openml.org/data/get_csv/16826755/phpMYEkMl')\n\n# extract cabin letter\ndata['cabin'] = data['cabin'].str[0]\n\n# replace infrequent cabins by N\ndata['cabin'] = np.where(data['cabin'].isin(['T', 'G']), 'N', data['cabin'])\n\n# cap maximum values\ndata['parch'] = np.where(data['parch']>3,3,data['parch'])\ndata['sibsp'] = np.where(data['sibsp']>3,3,data['sibsp'])\n\n# cast variables as object to treat as categorical\ndata[['pclass','sibsp','parch']] = data[['pclass','sibsp','parch']].astype('O')\n\n# separate train and test sets\nX_train, X_test, y_train, y_test = train_test_split(\n    data.drop(['survived'], axis=1),\n    data['survived'],\n    test_size=0.3,\n    random_state=0)\n```", "```py\n# Feature-engine automates the selection of \n# categorical and numerical variables\n\nsel = SelectByTargetMeanPerformance(\n    variables=None,\n    scoring=\"roc_auc_score\",\n    threshold=0.6,\n    bins=3,\n    strategy=\"equal_frequency\",\n    cv=2,# cross validation\n    random_state=1, # seed for reproducibility\n)\n```", "```py\n# find important features\nsel.fit(X_train, y_train)\n```", "```py\nsel.feature_performance_\n\n{'pclass': 0.6802934787230475,\n 'sex': 0.7491365252482871,\n 'age': 0.5345141148737766,\n 'sibsp': 0.5720480307315783,\n 'parch': 0.5243557188989476,\n 'fare': 0.6600883312700917,\n 'cabin': 0.6379782658154696,\n 'embarked': 0.5672382248783936}\n```", "```py\nsel.features_to_drop_\n\n['age', 'sibsp', 'parch', 'embarked']\n```", "```py\n# remove features\nX_train = sel.transform(X_train)\nX_test = sel.transform(X_test)\n```"]