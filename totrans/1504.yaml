- en: Animations with Matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/05/animations-with-matplotlib.html](https://www.kdnuggets.com/2019/05/animations-with-matplotlib.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Parul Pandey](https://www.linkedin.com/in/parul-pandey-a5498975/), Data
    Science Enthusiast**'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/5495a114c5b4b0da457f7b13a9ec48cd.png)[Rain Simulation
    with Matplotlib](https://matplotlib.org/gallery/animation/rain.htm)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Animations are an interesting way of demonstrating a phenomenon. We as humans
    are always enthralled by animated and interactive charts rather than the static
    ones. Animations make even more sense when depicting time series data like stock
    prices over the years, climate change over the past decade, seasonalities and
    trends since we can then see how a particular parameter behaves with time.
  prefs: []
  type: TYPE_NORMAL
- en: The above image is a [**simulation of Rain**](https://matplotlib.org/gallery/animation/rain.html)
    and has been achieved with Matplotlib library which is fondly known as the **grandfather
    of python visualization packages.** Matplotlib simulates raindrops on a surface
    by animating the scale and opacity of 50 scatter points. Today Python boasts of
    a large number of powerful visualisation tools like Plotly, Bokeh, Altair to name
    a few. These libraries are able to achieve state of the art animations and interactiveness.
    Nonetheless, the aim of this article is to highlight one aspect of this library
    which isn’t explored much and that is **Animations** and we are going to look
    at some of the ways of doing that.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Matplotlib](http://matplotlib.org/) is a Python 2D plotting library and also
    the most popular one. Most of the people start their Data Visualisation journey
    with Matplotlib. One can generate plots, histograms, power spectra, bar charts,
    error charts, scatterplots, etc easily with matplotlib. It also integrates seamlessly
    with libraries like Pandas and Seaborn to create even more sophisticated visualisations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the nice features of matplotlib are:'
  prefs: []
  type: TYPE_NORMAL
- en: It is designed like MATLAB hence switching between the two is fairly easy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comprises of a lot of rendering backends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can reproduce just about any plots( with a bit of effort).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Has been out there for over a decade, therefore, boasts of a huge user base.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, there are also areas where Matplotlib doesn’t shine out so much and
    lags behind its powerful counterparts.
  prefs: []
  type: TYPE_NORMAL
- en: Matplotlib has an imperative API which is often overly verbose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sometimes poor stylistic defaults.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poor support for web and interactive graphs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Often slow for large & complicated data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As for a refresher here is a Matplotlib Cheat sheet from [**Datacamp**](https://s3.amazonaws.com/assets.datacamp.com/blog_assets/Python_Matplotlib_Cheat_Sheet.pdf)
    which you can go through to brush up your basics.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/426365c45208897271aec96766ddf50c.png)'
  prefs: []
  type: TYPE_IMG
- en: Animations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Matplotlib’s `animation` base class deals with the animation part. It provides
    a framework around which the animation functionality is built. There are two main
    interfaces to achieve that using:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[FuncAnimation](https://matplotlib.org/api/_as_gen/matplotlib.animation.FuncAnimation.html#matplotlib.animation.FuncAnimation)`
    makes an animation by repeatedly calling a function *func*.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[ArtistAnimation](https://matplotlib.org/api/_as_gen/matplotlib.animation.ArtistAnimation.html#matplotlib.animation.ArtistAnimation):`
    Animation using a fixed set of `Artist` objects.'
  prefs: []
  type: TYPE_NORMAL
- en: However, out of the two, **FuncAnimation** is the most convenient one to use.
    You can read more about them in the [documentation](http://matplotlib.sourceforge.net/api/animation_api.html)
    since we will only concern ourselves with the `FuncAnimation` tool.
  prefs: []
  type: TYPE_NORMAL
- en: '**Requirements**'
  prefs: []
  type: TYPE_NORMAL
- en: Modules including `numpy` and `matplotlib` should be installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To save the animation on your system as mp4 or gif, `[ffmpeg](https://www.ffmpeg.org/)`
    or `[imagemagick](https://sourceforge.net/projects/imagemagick/files/)` is required
    to be installed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once ready, we can begin with our first basic animation in the Jupyter Notebooks.
    The code for this article can be accessed from the associated [**Github Repository**](https://github.com/parulnith/Animations-with-Matplotlib)
    or you can view it on my binder by clicking the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/dd4a24af5ff3e6272333553c003858a9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Basic Animation: Moving Sine Wave**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s use `FuncAnimation` to create a basic animation of a sine wave moving
    across the screen. The source code for the animation has been taken from the [Matplotlib
    Animation tutorial](http://jakevdp.github.io/blog/2012/08/18/matplotlib-animation-tutorial/).
    Let’s first see the output and then we shall break down the code to understand
    what’s going under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/9c0d243d924a97a321a807add52079fb.png)'
  prefs: []
  type: TYPE_IMG
- en: In lines(7–9), we simply create a figure window with a single axis in the figure.
    Then we create our empty line object which is essentially the one to be modified
    in the animation. The line object will be populated with data later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In lines(11–13), we create the `init` function that will make the animation
    happen. The init function initializes the data and also sets the axis limits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In lines(14–18), we finally define the animation function which takes in the
    frame number(i) as the parameter and creates a sine wave(or any other animation)
    which a shift depending upon the value of i. This function here returns a tuple
    of the plot objects which have been modified which tells the animation framework
    what parts of the plot should be animated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In line **20**, we create the actual animation object. The `blit` parameter
    ensures that only those pieces of the plot are re-drawn which have been changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the basic intuition behind creating animations in Matplotlib. With a
    little tweak in the code, interesting visualisations can be created. Let’s have
    a look at some of them
  prefs: []
  type: TYPE_NORMAL
- en: A Growing Coil
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similarly, there is a nice example of creating shapes at [GeeksforGeeks](https://www.geeksforgeeks.org/graph-plotting-python-set-3/).
    Let’s now create a moving coil which slowly unwinds, with the help of `animation`
    class of matplotlib. The code is quite similar to the sine wave plot with minor
    adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/66cc4f449043536a5a6598fd9f341f5c.png)'
  prefs: []
  type: TYPE_IMG
- en: Live Updating Graphs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Live updating graphs come in handy when plotting dynamic quantities like stock
    data, sensor data or any other time-dependent data. We plot a base graph which
    automatically gets updated as more data is fed into the system. Let’s plot stock
    prices of a hypothetical company in a month.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the terminal and run the python file. You will get a graph like the
    one below which automatically updates as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/4a6e88e72608a817f55a9a29eafef265.png)'
  prefs: []
  type: TYPE_IMG
- en: Here interval is 1000 milliseconds or one second.
  prefs: []
  type: TYPE_NORMAL
- en: Animation on a 3D plot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating 3D graphs is common but what if we can animate the angle of view of
    those graphs. The idea is to change the camera view and then use every resulting
    image to create an animation. There is a nice section dedicated to it at [The
    Python Graph Gallery](https://python-graph-gallery.com/342-animation-on-3d-plot/).
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called **volcano** in the same directory as the notebook. All
    the images will be stored in this folder which will be then used in the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create multiple PNG files in the Volcano folder. Now, use ImageMagick
    to transform them into animation. Open Terminal and navigate to the Volcano folder
    and enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/eeb13aa85228fe4b855d296521488b23.png)'
  prefs: []
  type: TYPE_IMG
- en: Animations using Celluloid Module
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Celluloid](https://github.com/jwkvam/celluloid) is a Python module that simplifies
    the process of creating animations in matplotlib. This library creates a matplotlib
    figure and creates a `Camera` from it. It then reuses figure and after each frame
    is created, take a snapshot with the camera. Finally, an animation is created
    with all the captured frames.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here are a few examples using the Celluloid module.
  prefs: []
  type: TYPE_NORMAL
- en: '**Minimal**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/c63fd4dcb559b39fc765cb3434d68191.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Subplots**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/0f3966016881025d1bc2d6e0c77b7ec9.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Legends**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/70717418d39057c540045b6322003259.png)'
  prefs: []
  type: TYPE_IMG
- en: Wrap Up
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Animations help to highlight certain features of the visualisation which otherwise
    cannot be communicated easily with static charts. Having said that it is also
    important to keep in mind that unnecessary and overuse of visualisations can sometimes
    complicate things. Every feature in data visualisation should be used judiciously
    to have the best impact.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Parul Pandey](https://www.linkedin.com/in/parul-pandey-a5498975/)**
    is a Data Science enthusiast who frequently writes for Data Science publications
    such as Towards Data Science.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/animations-with-matplotlib-d96375c5442c).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 Quick and Easy Data Visualizations in Python with Code](/2018/07/5-quick-easy-data-visualizations-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Python Graph Gallery](/2017/11/python-graph-gallery.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[D3.js Graph Gallery for Data Visualization](/2019/03/d3js-graph-gallery-data-visualization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Data Visualization Using Matplotlib](https://www.kdnuggets.com/2022/12/introduction-data-visualization-matplotlib.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Matplotlib Cheat Sheets](https://www.kdnuggets.com/2023/01/python-matplotlib-cheat-sheets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating Visuals with Matplotlib and Seaborn](https://www.kdnuggets.com/creating-visuals-with-matplotlib-and-seaborn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
