["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn import model_selection, metrics\nfrom sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingClassifier\ndf=pd.read_csv('creditcard.csv')\ndf.info()\n```", "```py\nXtrain, Xtest, ytrain, ytest = model_selection.train_test_split(\n        df.loc[:,'V1':'Amount'], df.Class,  stratify=df.Class, \n        test_size=0.3, random_state=42)\ngbc=HistGradientBoostingClassifier(learning_rate=0.01, \n        max_iter=2000, max_leaf_nodes=6, validation_fraction=0.2, \n        n_iter_no_change=15, random_state=42).fit(Xtrain,ytrain)\n```", "```py\nhardpredtst=gbc.predict(Xtest)\ndef conf_matrix(y,pred):\n    ((tn, fp), (fn, tp)) = metrics.confusion_matrix(y, pred)\n    ((tnr,fpr),(fnr,tpr))= metrics.confusion_matrix(y, pred, \n            normalize='true')\n    return pd.DataFrame([[f'TN = {tn} (TNR = {tnr:1.2%})', \n                                f'FP = {fp} (FPR = {fpr:1.2%})'], \n                         [f'FN = {fn} (FNR = {fnr:1.2%})', \n                                f'TP = {tp} (TPR = {tpr:1.2%})']],\n            index=['True 0(Legit)', 'True 1(Fraud)'], \n            columns=['Pred 0(Approve as Legit)', \n                            'Pred 1(Deny as Fraud)'])\nconf_matrix(ytest,hardpredtst)\n```", "```py\npredtst=gbc.predict_proba(Xtest)[:,1]\nfpr, tpr, thresholds = metrics.roc_curve(ytest, predtst)\ndfplot=pd.DataFrame({'Threshold':thresholds, \n        'False Positive Rate':fpr, \n        'False Negative Rate': 1.-tpr})\nax=dfplot.plot(x='Threshold', y=['False Positive Rate',\n        'False Negative Rate'], figsize=(10,6))\nax.plot([0.00035,0.00035],[0,0.1]) #mark example thresh.\nax.set_xbound(0,0.0008); ax.set_ybound(0,0.3) #zoom in\n```", "```py\nhardpredtst_tuned_thresh = np.where(predtst >= 0.00035, 1, 0)\nconf_matrix(ytest, hardpredtst_tuned_thresh)\n```"]