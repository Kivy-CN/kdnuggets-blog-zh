- en: How to Convert JSON Data into a DataFrame with Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas](https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How to Convert JSON Data into a DataFrame with Pandas](../Images/fa74b95a9eefac11201e50b260ab9d9f.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: If you've ever had the chance to work with data, you've probably come across
    the need to load JSON files (short for JavaScript Object Notation) into a Pandas
    DataFrame for further analysis. JSON files store data in a format that is clear
    for people to read and also simple for computers to understand. However, JSON
    files can sometimes be complicated to navigate through. Therefore, we load them
    into a more structured format like DataFrames - that is set up like a spreadsheet
    with rows and columns.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: I will show you two different ways to convert JSON data into a Pandas DataFrame.
    Before we discuss these methods, let's suppose this dummy nested JSON file that
    I'll use as an example throughout this article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above-mentioned JSON data represents a list of books, where each book has
    a title, author, and a list of reviews. Each review, in turn, has a reviewer (with
    a name and location) and a rating and comments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 1: Using the `json.load()` and `pd.DataFrame()` functions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The easiest and most straightforward approach is to use the built-in `json.load()`
    function to parse our JSON data. This will convert it into a Python dictionary,
    and we can then create the DataFrame directly from the resulting Python data structure.
    However, it has a problem - it can only handle single nested data. So, for the
    above case, if you only use these steps with this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Your output might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![json.load() output](../Images/d6a0bc76237fccb0517b96e06c256f35.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the reviews column, you can see the entire dictionary. Therefore, if you
    want the output to appear correctly, you have to manually handle the nested structure.
    This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Updated Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![json.load() output](../Images/71a41ceca3f53ee5d93f7cb39d2a0373.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we are using list comprehension to create a flat list of dictionaries,
    where each dictionary contains the book information and the corresponding review.
    We then create the Pandas DataFrae using this.
  prefs: []
  type: TYPE_NORMAL
- en: However the issue with this approach is that it demands more manual effort to
    manage the nested structure of the JSON data. So, what now? Do we have any other
    option?
  prefs: []
  type: TYPE_NORMAL
- en: Totally! I mean, come on. Given that we're in the 21st century, facing such
    a problem without a solution seems unrealistic. Let's see the other approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'Method 2 (Recommended): Using the `json_normalize()` function'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `json_normalize()` function from the Pandas library is a better way to
    manage nested JSON data. It automatically flattens the nested structure of the
    JSON data, creating a DataFrame from the resulting data. Let''s take a look at
    the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![json.load() output](../Images/635999752d1f4cf50ebdfcd910803e24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `json_normalize()` function takes the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**data:** The input data, which can be a list of dictionaries or a single dictionary.
    In this case, it''s the data dictionary loaded from the JSON file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**record_path:** The path in the JSON data to the records you want to normalize.
    In this case, it''s the ''reviews'' key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**meta:** Additional fields to include in the normalized output from the JSON
    document. In this case, we''re using the ''title'' and ''author'' fields. Note
    that columns in metadata usually appear at the end. This is how this function
    works. As far as the analysis is concerned, it doesn''t matter, but for some magical
    reason, you want these columns to appear before. Sorry, but you have to do them
    manually.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**errors:** The error handling strategy, which can be ''ignore'', ''raise'',
    or ''warn''. We have set it to ''raise'', so if there are any errors during the
    normalization process, it will raise an exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both of these methods have their own advantages and use cases, and the choice
    of method depends on the structure and complexity of the JSON data. If the JSON
    data has a very nested structure, the `json_normalize()` function might be the
    most suitable option, as it can handle the nested data automatically. If the JSON
    data is relatively simple and flat, the `pd.read_json()` function might be the
    easiest and most straightforward approach.
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with large JSON files, it's crucial to think about memory usage
    and performance since loading the whole file into memory might not work. So, you
    might have to look into other options like streaming the data, lazy loading, or
    using a more memory-efficient format like Parquet.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Convert Python Dict to JSON: A Tutorial for Beginners](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use ChatGPT to Convert Text into a PowerPoint Presentation](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pandas vs. Polars: A Comparative Analysis of Python''s Dataframe Libraries](https://www.kdnuggets.com/pandas-vs-polars-a-comparative-analysis-of-python-dataframe-libraries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Implement Complex Filters on DataFrame Columns with Pandas](https://www.kdnuggets.com/how-to-implement-complex-filters-on-dataframe-columns-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Process a DataFrame with Millions of Rows in Seconds](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Convert an RGB Image to Grayscale](https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
