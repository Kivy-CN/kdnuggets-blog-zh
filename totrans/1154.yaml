- en: 6 Cool Python Libraries That I Came Across Recently
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/09/6-cool-python-libraries-recently.html](https://www.kdnuggets.com/2021/09/6-cool-python-libraries-recently.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Dhilip Subramanian](https://medium.com/@sdhilip), Data Scientist and
    AI Enthusiast**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/6ad8a106a0ec5f6b286bdefd412cffd6.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Python is an integral part of machine learning and libraries make our life simpler.
    Recently, I came across 6 awesome libraries while working on my ML projects. They
    helped me save a lot of time and I am going to discuss about them in this blog.
  prefs: []
  type: TYPE_NORMAL
- en: 1. clean-text
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A truly incredible library, clean-text should be your go-to when you need to
    handle scraping or social media data. The coolest thing about it is that it doesn’t
    require any long fancy code or regular expressions to clean our data. Let’s see
    some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ebefdb8e66b61b222d258ee32dc8e389.png)'
  prefs: []
  type: TYPE_IMG
- en: From the above, we can see it’s having Unicode in the word Zurich (the letter
    ‘u’ has been encoded), ASCII characters (in Al\u017eupine.), currency symbol in
    rupee, HTML link, punctuations.
  prefs: []
  type: TYPE_NORMAL
- en: You just have to mention the required ASCII, Unicode, URLs, numbers, currency
    and punctuation in the clean function. Or, they can be replaced with replace parameters
    in the above function. For instance, I changed the rupee symbol into Rupees.
  prefs: []
  type: TYPE_NORMAL
- en: There’s absolutely no need to use regular expressions or long codes. Very handy
    library especially if you want to clean the texts from scraping or social media
    data. Based on your requirement, you can also pass the arguments individually
    rather than combining them all.
  prefs: []
  type: TYPE_NORMAL
- en: For more details, please check this [GitHub repository](https://github.com/jfilter/clean-text).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. drawdata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Drawdata is yet another cool python library finding of mine. How many times
    have you come across a situation where you need to explain the ML concepts to
    the team? It must happen often because data science is all about teamwork. This
    library helps you to draw a dataset in the Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I really enjoyed using this library when I explained ML concepts
    to my team. Kudos to the developers who created this library!
  prefs: []
  type: TYPE_NORMAL
- en: Drawdata is only for the classification problem with four classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1df5aa80c014f829a732e10e6f7d10ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: The above drawing windows will open after executing the draw_Scatter(). Clearly,
    there are four classes namely A, B, C, and D. You can click on any class and draw
    the points you want. Each class represents the different colors in the drawing.
    You also have an option to download the data as a csv or json file. Also, the
    data can be copied to you clipboard and read from the below code
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: One of the limitations of this library is that it gives only two data points
    with four classes. But otherwise, it is definitely worth it. For more details,
    please check this [GitHub link](https://github.com/koaning/drawdata).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Autoviz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I won’t ever forget the time I spent doing exploratory data analysis using matplotlib.
    There are many simple visualization libraries. However, I found out recently about
    Autoviz which automatically visualizes any dataset with a single line of code.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: I used the IRIS dataset for this example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The above parameters are default one. For more information, please check [here](https://pypi.org/project/autoviz/https://pypi.org/project/autoviz/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e3a0101664fea9105c03c5c8e7071896.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: We can see all the visuals and complete our EDA with a single line of code.
    There are many auto visualization libraries but I really enjoyed familiarizing
    myself with this one in particular.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Mito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Everyone likes Excel, right? It is one of the easiest ways of exploring a dataset
    in a first instance. I came across Mito a few months ago, but tried it only recently
    and I absolutely loved it!
  prefs: []
  type: TYPE_NORMAL
- en: It is a Jupyter-lab extension python library with GUI support which adds spreadsheet
    functionality. You can load your csv data and edit the dataset as a spreadsheet,
    and it automatically generates Pandas code. Very cool.
  prefs: []
  type: TYPE_NORMAL
- en: Mito genuinely deserves an entire blog post. However, I won’t go into much detail
    today. Here’s a simple task demonstration for you instead. For more details, please
    check [here](https://trymito.io/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For more information on installation, please check [here](https://docs.trymito.io/getting-started/installing-mito).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After executing the above code, mitosheet will open in the jupyter lab. I’m
    using the IRIS dataset. Firstly, I created two new columns. One is average Sepal
    length and the other is sum Sepal width. Secondly, I changed the column name for
    average Sepal length. Finally, I created a histogram for the average Sepal length
    column.
  prefs: []
  type: TYPE_NORMAL
- en: The code is automatically generated after the above mentioned steps are followed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fe424946548073a9edb746ca6654cd98.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: 'Below code was generated for the above steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Gramformer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Yet another impressive library, Gramformer is based on generative models which
    help us correct the grammar in the sentences. This library has three models which
    have a *detector, a highlighter, and a corrector*. The detector identifies if
    the text has incorrect grammar. The highlighter marks the faulty parts of speech
    and the corrector fixes the errors. Gramformer is a completely open source and
    is in its early stages. But it isn’t suitable for long paragraphs as it works
    only at a sentence level and has been trained for 64 length sentences.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, the corrector and highlighter model works. Let’s see some examples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Instantiate Gramformer**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/56008268f4c4ff6e2edb99e1b3c99f06.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Example**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3060be6c6cbf4aeeaa85e4ec15b2c1ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by the author
  prefs: []
  type: TYPE_NORMAL
- en: From the above output, we can see it corrects grammar and even spelling mistakes.
    A really amazing library and functions very well too. I have not tried highlighter
    here, you can try and check this GitHub documentation for more[ details](https://github.com/PrithivirajDamodaran/Gramformer).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Styleformer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: My positive experience with Gramformer encouraged me to look for more unique
    libraries. That is how I found Styleformer, another highly appealing Python library.
    Both Gramformer and Styleformer were created by Prithiviraj Damodaran and both
    are based on generative models. Kudos to the creator for open sourcing it.
  prefs: []
  type: TYPE_NORMAL
- en: Styleformer helps convert casual to formal sentences, formal to casual sentences,
    active to passive, and passive to active sentences.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see some examples
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Instantiate Styleformer**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Examples**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6c88c8eba994152d82f6ce53ad74667e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/1c5303fc21075a83c42987c39f5d0163.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a32241558085e6baf66af2f03a047c01.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c896b10bea33758ba328bd4f7de456f1.png)'
  prefs: []
  type: TYPE_IMG
- en: See the above output, it converts accurately. I used this library for converting
    casual to formal, especially for social media posts in one of my analyses. For
    more details, kindly check [GitHub](https://github.com/PrithivirajDamodaran/Styleformer).
  prefs: []
  type: TYPE_NORMAL
- en: You might be familiar with some of the previously mentioned libraries but ones
    like Gramformer and Styleformer are recent players. They are extremely underrated
    and most certainly deserve to be known because they saved a lot of my time and
    I heavily used them for my NLP projects.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading. If you have anything to add, please feel free to leave a
    comment!
  prefs: []
  type: TYPE_NORMAL
- en: You might also like my previous article [*Five Cool Python Libraries for Data
    Science*](https://pub.towardsai.net/five-cool-python-libraries-for-data-science-7f1fce402b90)
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Dhilip Subramanian](https://medium.com/@sdhilip)** is a Mechanical
    Engineer and has completed his Master''s in Analytics. He has 9 years of experience
    with specialization in various domains related to data including IT, marketing,
    banking, power, and manufacturing. He is passionate about NLP and machine learning.
    He is a contributor to the [SAS community](https://communities.sas.com/t5/user/viewprofilepage/user-id/271305)
    and loves to write technical articles on various aspects of data science on the
    Medium platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/6-cool-python-libraries-that-i-came-across-recently-72e05dadd295).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Five Cool Python Libraries for Data Science](/2020/04/five-cool-python-libraries-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Easy Speech-to-Text with Python](/2020/06/easy-speech-text-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning Data Science and Machine Learning: First Steps](/2021/08/learn-data-science-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Top 38 Python Libraries for Data Science, Data Visualization &…](https://www.kdnuggets.com/2020/11/top-python-libraries-data-science-data-visualization-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Libraries Data Scientists Should Know in 2022](https://www.kdnuggets.com/2022/04/python-libraries-data-scientists-know-2022.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Explainable AI: 10 Python Libraries for Demystifying Your Model''s Decisions](https://www.kdnuggets.com/2023/01/explainable-ai-10-python-libraries-demystifying-decisions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Python Libraries for Data Cleaning](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beyond Numpy and Pandas: Unlocking the Potential of Lesser-Known…](https://www.kdnuggets.com/2023/08/beyond-numpy-pandas-unlocking-potential-lesserknown-python-libraries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Level 50 Data Scientist: Python Libraries to Know](https://www.kdnuggets.com/level-50-data-scientist-python-libraries-to-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
