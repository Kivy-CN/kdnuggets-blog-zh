- en: How to Apply Padding to Arrays with NumPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用 NumPy 对数组进行填充
- en: 原文：[https://www.kdnuggets.com/how-to-apply-padding-to-arrays-with-numpy](https://www.kdnuggets.com/how-to-apply-padding-to-arrays-with-numpy)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-apply-padding-to-arrays-with-numpy](https://www.kdnuggets.com/how-to-apply-padding-to-arrays-with-numpy)
- en: '![How to Apply Padding to Arrays with NumPy](../Images/82adb7c73e63d66b5db719b315874990.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何使用 NumPy 对数组进行填充](../Images/82adb7c73e63d66b5db719b315874990.png)'
- en: Image by [freepik](https://www.freepik.com/free-vector/futuristic-code-zoom-background_29807378.htm#fromView=search&page=1&position=2&uuid=4a381e3b-a6c2-49c7-bfff-d0a4415fead3)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自 [freepik](https://www.freepik.com/free-vector/futuristic-code-zoom-background_29807378.htm#fromView=search&page=1&position=2&uuid=4a381e3b-a6c2-49c7-bfff-d0a4415fead3)
- en: Padding is the process of adding extra elements to the edges of an array. This
    might sound simple, but it has a variety of applications that can significantly
    enhance the functionality and performance of your data processing tasks.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 填充是向数组的边缘添加额外元素的过程。这可能听起来很简单，但它有多种应用，可以显著提升数据处理任务的功能和性能。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Let’s say you're working with image data. Often, when applying filters or performing
    convolution operations, the edges of the image can be problematic because there
    aren’t enough neighboring pixels to apply the operations consistently. Padding
    the image (adding rows and columns of pixels around the original image) ensures
    that every pixel gets treated equally, which results in a more accurate and visually
    pleasing output.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在处理图像数据。通常，在应用滤镜或执行卷积操作时，图像的边缘可能会成为问题，因为周围没有足够的像素来一致地应用操作。对图像进行填充（在原始图像周围添加行和列的像素）可以确保每个像素都得到均等处理，从而产生更准确、更具视觉吸引力的输出。
- en: You may wonder if padding is limited to image processing. The answer is No.
    In deep learning, padding is crucial when working with convolutional neural networks
    (CNNs). It allows you to maintain the spatial dimensions of your data through
    successive layers of the network, preventing the data from shrinking with each
    operation. This is especially important when preserving your input data's original
    features and structure.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想知道填充是否仅限于图像处理。答案是否定的。在深度学习中，填充在处理卷积神经网络（CNN）时至关重要。它允许你在网络的连续层中保持数据的空间维度，防止数据在每次操作后缩小。这在保留输入数据的原始特征和结构时尤为重要。
- en: In time series analysis, padding can help align sequences of different lengths.
    This alignment is essential for feeding data into machine learning models, where
    consistency in input size is often required.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间序列分析中，填充可以帮助对齐不同长度的序列。这种对齐对于将数据输入到机器学习模型中至关重要，因为输入大小的一致性通常是必要的。
- en: In this article, you will learn how to apply padding to arrays with NumPy, as
    well as the different types of padding and best practices when using NumPy to
    pad arrays.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，你将学习如何使用 NumPy 对数组进行填充，以及填充的不同类型和使用 NumPy 填充数组时的最佳实践。
- en: Numpy.pad
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Numpy.pad
- en: 'The [numpy.pad](https://numpy.org/doc/stable/reference/generated/numpy.pad.html)
    function is the go-to tool in NumPy for adding padding to arrays. The syntax of
    this function is shown below:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[numpy.pad](https://numpy.org/doc/stable/reference/generated/numpy.pad.html)
    函数是 NumPy 中添加数组填充的首选工具。该函数的语法如下所示：'
- en: numpy.pad(array, pad_width, mode='constant', **kwargs)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: numpy.pad(array, pad_width, mode='constant', **kwargs)
- en: 'Where:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其中：
- en: '**array**: The input array to which you want to add padding.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**array**：要添加填充的输入数组。'
- en: '**pad_width**: This is the number of values padded to the edges of each axis.
    It specifies the number of elements to add to each end of the array''s axes. It
    can be a single integer (same padding for all axes), a tuple of two integers (different
    padding for each end of the axis), or a sequence of such tuples for different
    axes.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mode**: This is the method used for padding, it determines the type of padding
    to apply. Common modes include: zero, edge, symmetric, etc.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**kwargs**: These are additional keyword arguments depending on the mode.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s examine an array example and see how we can add padding to it using
    NumPy. For simplicity, we''ll focus on one type of padding: zero padding, which
    is the most common and straightforward.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Creating the Array'
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'First, let''s create a simple 2D array to work with:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Step 2: Adding Zero Padding'
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Next, we'll add zero padding to this array. We use the `np.pad` function to
    achieve this. We'll specify a padding width of 1, adding one row/column of zeros
    around the entire array.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Explanation**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '**Original Array**: Our starting array is a simple 2x2 array with values **[[1,
    2], [3, 4]]**.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Zero Padding**: By using `np.pad`, we add a layer of zeros around the original
    array. The `pad_width=1` argument specifies that one row/column of padding is
    added on each side. The `mode=''constant''` argument indicates that the padding
    should be a constant value, which we set to zero with `constant_values=0.`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Types of Padding
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are different types of padding, zero padding, which was used in the example
    above, is one of them; other examples include constant padding, edge padding,
    reflect padding, and symmetric padding. Let's discuss these types of padding in
    detail and see how to use them
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Zero Padding
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Zero padding is the simplest and most commonly used method for adding extra
    values to the edges of an array. This technique involves padding the array with
    zeros, which can be very useful in various applications, such as image processing.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Zero padding involves adding rows and columns filled with zeros to the edges
    of your array. This helps maintain the data's size while performing operations
    that might otherwise shrink it.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Output:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Constant Padding
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Constant padding allows you to pad the array with a constant value of your choice,
    not just zeros. This value can be anything you choose, like 0, 1, or any other
    number. It’s particularly useful when you want to maintain certain boundary conditions
    or when zero padding might not suit your analysis.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Edge Padding
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Edge padding fills the array with values from the edge. Instead of adding zeros
    or some constant value, you use the nearest edge value to fill in the gaps. This
    approach helps maintain the original data patterns and can be very useful where
    you want to avoid introducing new or arbitrary values into your data.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Reflect Padding
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Reflect padding is a technique where you pad the array by mirroring the values
    from the edges of the original array. This means the border values are reflected
    across the edges, which helps maintain the patterns and continuity in your data
    without introducing any new or arbitrary values.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Symmetric Padding
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Symmetric padding is a technique for manipulating arrays that helps maintain
    a balanced and natural extension of the original data. It is similar to reflect
    padding, but it includes the edge values themselves in the reflection. This method
    is useful for maintaining symmetry in the padded array.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Common Best Practices for Applying Padding to Arrays with NumPy
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choose the right padding type
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the padding values are consistent with the nature of the data. For
    example, zero padding should be used for binary data, but avoid it for image processing
    tasks where edge or reflect padding might be more appropriate.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider how padding affects the data analysis or processing task. Padding can
    introduce artifacts, especially in image or signal processing, so choose a padding
    type that minimizes this effect.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When padding multi-dimensional arrays, ensure the padding dimensions are correctly
    specified. Misaligned dimensions can lead to errors or unexpected results.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clearly document why and how padding is applied in your code. This helps maintain
    clarity and ensures that other users (or future you) understand the purpose and
    method of padding.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this article, you have learned the concept of padding arrays, a fundamental
    technique widely used in various fields like image processing and time series
    analysis. We explored how padding helps extend the size of arrays, making them
    suitable for different computational tasks.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: We introduced the `numpy.pad` function, which simplifies adding padding to arrays
    in NumPy. Through clear and concise examples, we demonstrated how to use `numpy.pad`
    to add padding to arrays, showcasing various padding types such as zero padding,
    constant padding, edge padding, reflect padding, and symmetric padding.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Following these best practices, you can apply padding to arrays with NumPy,
    ensuring your data manipulation is accurate, efficient, and suitable for your
    specific application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.linkedin.com/in/olumide-shittu)****[Shittu Olumide](https://www.linkedin.com/in/olumide-shittu/)****
    is a software engineer and technical writer passionate about leveraging cutting-edge
    technologies to craft compelling narratives, with a keen eye for detail and a
    knack for simplifying complex concepts. You can also find Shittu on [Twitter](https://twitter.com/Shittu_Olumide_).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Masked Arrays in NumPy to Handle Missing Data](https://www.kdnuggets.com/masked-arrays-in-numpy-to-handle-missing-data)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Ways to Apply AI to Small Data Sets](https://www.kdnuggets.com/2022/02/5-ways-apply-ai-small-data-sets.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MLOps: The Best Practices and How To Apply Them](https://www.kdnuggets.com/2022/04/mlops-best-practices-apply.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MLOps：最佳实践及如何应用](https://www.kdnuggets.com/2022/04/mlops-best-practices-apply.html)'
- en: '[Using the apply() Method with Pandas Dataframes](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Pandas 数据框中使用 apply() 方法](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
- en: '[What is Chebychev''s Theorem and How Does it Apply to Data Science?](https://www.kdnuggets.com/2022/11/chebychev-theorem-apply-data-science.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是切比雪夫定理，它如何应用于数据科学？](https://www.kdnuggets.com/2022/11/chebychev-theorem-apply-data-science.html)'
- en: '[KDnuggets News, November 30: What is Chebychev''s Theorem and How…](https://www.kdnuggets.com/2022/n46.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，11月30日：什么是切比雪夫定理，它如何…](https://www.kdnuggets.com/2022/n46.html)'
