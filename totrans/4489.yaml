- en: Dockerize Jupyter with the Visual Debugger
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用可视化调试器容器化 Jupyter
- en: 原文：[https://www.kdnuggets.com/2020/04/dockerize-jupyter-visual-debugger.html](https://www.kdnuggets.com/2020/04/dockerize-jupyter-visual-debugger.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/04/dockerize-jupyter-visual-debugger.html](https://www.kdnuggets.com/2020/04/dockerize-jupyter-visual-debugger.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Manish Tiwari](https://www.linkedin.com/in/manish-kumar-tiwari/), Data
    Enthusiast**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[Manish Tiwari](https://www.linkedin.com/in/manish-kumar-tiwari/)，数据爱好者**'
- en: '![Figure](../Images/b9e0fd2862820e4423939d8b443837c6.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/b9e0fd2862820e4423939d8b443837c6.png)'
- en: Photo by [Nilantha Ilangamuwa](https://unsplash.com/@ilangamuwa?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Nilantha Ilangamuwa](https://unsplash.com/@ilangamuwa?utm_source=medium&utm_medium=referral)
    来自 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Jupyter recently announced its first-ever public release of the much-awaited
    visual debugger. Though it is the first release it supports all the basic debugging
    requirements needed to debug and inspect variables, etc.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter 最近宣布了期待已久的可视化调试器的首次公开发布。尽管这是首次发布，但它支持调试和检查变量等所需的所有基本调试需求。
- en: The Data Science community is relied heavily on Jupyter Notebooks due to its
    ability to easily communicate and share the outcomes in an interactive way.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学社区因 Jupyter Notebook 能够以互动的方式轻松传达和共享成果而大量依赖它。
- en: However, the only concern was the missing visual debugging ability due to which
    people usually had to switch to other available classical IDEs which offer a better
    debugging and code refactoring ability. This feature was much awaited by the data
    science community which is finally released now.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，唯一的问题是缺少可视化调试能力，因此人们通常需要切换到其他提供更好调试和代码重构功能的经典 IDE。这一功能受到数据科学社区的高度期待，现在终于发布了。
- en: 'For a brief overview of how the visual debugger looks in action, please refer
    below screencast:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如需简要了解可视化调试器的实际效果，请参考下面的视频演示：
- en: '![Figure](../Images/94d10f5444d449de1cebb00591f968a3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/94d10f5444d449de1cebb00591f968a3.png)'
- en: Screencast by [Jeremy](https://github.com/jtpio), on [Github](https://github.com/jupyterlab/debugger/blob/master/screencast.gif)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 视频演示：[Jeremy](https://github.com/jtpio) 提供，见 [Github](https://github.com/jupyterlab/debugger/blob/master/screencast.gif)
- en: In this article, we will be going through the steps needed for setting up the
    visual debugger in the existing JupyterLab environment and will also dockerize
    the JupyterLab environment with the visual debugger enabled by default.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将详细讲解在现有 JupyterLab 环境中设置可视化调试器的步骤，并将 JupyterLab 环境与默认启用的可视化调试器进行容器化。
- en: 'Prerequisites:'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 前提条件：
- en: JupyterLab 2.0+
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 2.0+
- en: Basic understanding of debugging in any programming language
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对任何编程语言的调试基础知识
- en: Basic understanding of Docker.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 的基础知识。
- en: 'Installation:'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装：
- en: Assuming that you are already using JupterLab you just need to install JupyterLab
    debugger extension for the frontend debugging and any kernel supporting the Jupyter
    debugging protocol at the backend.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已经在使用 JupyterLab，只需安装 JupyterLab 调试器扩展以进行前端调试，以及在后端支持 Jupyter 调试协议的任何内核。
- en: 'Installing JupyterLab extension for enabling the frontend debugging:'
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 JupyterLab 扩展以启用前端调试：
- en: The JupyterLab uses nodejs to install extensions, so we need to install nodejs
    as well in order to install the frontend debugger extension.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: JupyterLab 使用 nodejs 安装扩展，因此我们需要先安装 nodejs 才能安装前端调试器扩展。
- en: In future releases, Jupyter may include this extension by default.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的版本中，Jupyter 可能会默认包含此扩展。
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Installing kernel xeus-python :'
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装内核 xeus-python：
- en: In the backend as of now, only xeus-python has support for Jupyter debugging
    protocol. In the future, there may be many other kernels having support for this
    protocol.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，后端只有 xeus-python 支持 Jupyter 调试协议。未来可能会有更多内核支持该协议。
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now if you run the Jupyter Lab, you should be able to see 2 additional icons,
    1 each in the console and notebook sections for the xeus-python kernel.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果运行 Jupyter Lab，您应该能够看到 xeus-python 内核在控制台和笔记本部分各有 2 个附加图标。
- en: Why Containerize?
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么要容器化？
- en: Containers enable smoother development across multiple environments. It’s why
    they’re the technological foundation for the cloud-native approach to app delivery.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 容器使得跨多个环境的开发更加顺畅。这就是它们成为云原生应用交付方法技术基础的原因。
- en: Problems arise when the supporting software environment is not identical, says
    Docker creator Solomon Hykes. “You’re going to test using Python 2.7, and then
    it’s going to run on Python 3 in production and something weird will happen. Or
    you’ll rely on the behavior of a certain version of an SSL library and another
    one will be installed. You’ll run your tests on Debian and production is on Red
    Hat and all sorts of weird things happen.”
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 创始人 Solomon Hykes 说，当支持软件环境不一致时会出现问题。“你会在 Python 2.7 上测试，然后它会在生产环境中运行
    Python 3，结果会发生一些奇怪的事情。或者你依赖某个 SSL 库的特定版本，而安装了另一个版本。你会在 Debian 上运行测试，而生产环境在 Red
    Hat 上，一切都可能变得很奇怪。”
- en: Container solves this problem by bundling the environment needed to run the
    application, the dependencies, binaries, all the necessary configurations and
    the application itself into one package. In this way, we no longer need to worry
    about the OS and other environment-specific dependencies as everything is packaged
    in one single independent entity that can run anywhere and everywhere.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 容器通过将运行应用程序所需的环境、依赖项、二进制文件、所有必要的配置和应用程序本身打包到一个包中来解决此问题。这样，我们不再需要担心操作系统和其他环境特定的依赖项，因为一切都被打包在一个可以在任何地方运行的独立实体中。
- en: Dockerize Jupyter with the Visual Debugger enabled
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用 Visual Debugger 的 Jupyter Docker 化
- en: I assume that you are familiar with basic Docker commands and terminologies.
    Explaining how docker works is out of the scope of this article. However, if you
    feel you need to revisit then please refer to the Docker [documentation](https://docs.docker.com/).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设你对基本的 Docker 命令和术语已经很熟悉。解释 Docker 的工作原理超出了本文的范围。然而，如果你觉得需要复习，请参考 Docker [文档](https://docs.docker.com/)。
- en: Now we will create the Dockerfile needed to create the Docker image of our required
    environment. You can think of the image as the file having instructions to include
    everything that is required to run our application in the containers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建创建所需环境 Docker 镜像所需的 Dockerfile。你可以将镜像视为包含所有必要指令的文件，用于在容器中运行我们的应用程序。
- en: We will be using Miniconda, a minimal lightweight installer for Anaconda. It
    is a small, bootstrap version of Anaconda that includes only conda, Python, the
    packages they depend on, and a small number of other useful packages.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Miniconda，一个用于 Anaconda 的轻量级最小化安装程序。它是 Anaconda 的一个小型启动版本，只包含 conda、Python、它们所依赖的包和少量其他有用的包。
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Define the metadata of the Docker file and working directory:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 Docker 文件和工作目录的元数据：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Install JupyterLab
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 JupyterLab
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Installing nodejs and labextension for frontend debugging
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 安装用于前端调试的 nodejs 和 labextension。
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Installing a kernel supporting Jupyter debugging protocol
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 安装支持 Jupyter 调试协议的内核。
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Note: **Here we have used conda package manager, you could have also used
    pip, however, using both together is not recommended as it might break the environment.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：**这里我们使用了 conda 包管理器，你也可以使用 pip，但不推荐同时使用这两者，因为这可能会破坏环境。'
- en: Finally, expose the port and define the entry point
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，暴露端口并定义入口点。
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our final Dockerfile should look as below:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终的 Dockerfile 应如下所示：
- en: Dockerize JupyterLab with Visual Debugger enabled
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 启用 Visual Debugger 的 JupyterLab Docker 化
- en: Build the Docker image from above Dockerfile.
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从上述 Dockerfile 构建 Docker 镜像。
- en: Navigate to the folder containing the above Dockerfile and run the below command.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到包含上述 Dockerfile 的文件夹，然后运行以下命令。
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Alternatively, you can also run the command from anywhere providing the absolute
    path of the Dockerfile.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以从任何地方运行命令，只需提供 Dockerfile 的绝对路径。
- en: Once the image is built successfully, verify by listing the docker images by
    below command
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦镜像成功构建，使用以下命令列出 Docker 镜像以进行验证。
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The output should look like below:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应如下所示：
- en: '![](../Images/4d9348c00df9a889ea45e8f5a9d13fed.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4d9348c00df9a889ea45e8f5a9d13fed.png)'
- en: 'Now run the docker image in a new container as below:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在新容器中运行 Docker 镜像，如下所示：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here we are mapping the host port(first one before the colon) 8888 to the exposed
    port in container 8888\. This is required for the host to communicate with the
    container’s port where Jupiter is listening in the container.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将主机端口（冒号前的第一个端口）8888 映射到容器中暴露的端口 8888。这是主机与容器内的 Jupiter 监听端口进行通信所必需的。
- en: 'Once you run the above command you should see the output as below (provided
    the ports are not already being used by some other process):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，你应该看到如下输出（前提是端口未被其他进程占用）：
- en: '![](../Images/52ee4e3c29d5a884d81fa56bd5e5c92f.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/52ee4e3c29d5a884d81fa56bd5e5c92f.png)'
- en: This implies that our docker container is up and running. You can now open the
    URL specified in the above output and play with Jupyter and the visual debugger
    without even realizing that it is not running on the host machine.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们的 docker 容器正在运行。你现在可以打开上面指定的 URL，并使用 Jupyter 和可视化调试器，而不需要意识到它并未在主机上运行。
- en: 'You can also see the list of available containers by below command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过以下命令查看可用的容器列表：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The above command should list the container along with the metadata of the
    container(s) as below:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的命令应该会列出容器及其元数据，如下所示：
- en: '![](../Images/23094ef9780246a9158aed1a0794f675.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/23094ef9780246a9158aed1a0794f675.png)'
- en: Once you open the URL specified in the above output you should see JupyterLab
    running on host machine’s localhost and port 8888.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你打开上面输出的 URL，你应该能看到 JupyterLab 在主机的 localhost 和 8888 端口上运行。
- en: '![Figure](../Images/109e93190201264d560fd95d2bad0e59.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/109e93190201264d560fd95d2bad0e59.png)'
- en: JupyterLab with visual debugger running in the container
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器中运行的带有可视化调试器的 JupyterLab
- en: Now to play around with the visual debugger, open the Notebook or Console with **xpython** shown
    in the Launcher rather than Python.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要使用可视化调试器，请在 Launcher 中打开**xpython**，而不是 Python。
- en: I have published the above docker image we just built on [docker hub](https://hub.docker.com/repository/docker/beingmanish/visualdebugger-jupyter) in
    case you want a ready to use environment for Jupiter with visual debugging enabled.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在 [docker hub](https://hub.docker.com/repository/docker/beingmanish/visualdebugger-jupyter)
    上发布了我们刚刚构建的 docker 镜像，以便你获得一个带有可视化调试功能的 Jupyter 环境。
- en: You can pull the docker image by below command and play around with it.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下命令拉取 docker 镜像并进行操作。
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you wish to dive deeper into the visual debugging architecture of Jupyter,
    you may refer [here](https://blog.jupyter.org/a-visual-debugger-for-jupyter-914e61716559).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望深入了解 Jupyter 的可视化调试架构，可以参考[这里](https://blog.jupyter.org/a-visual-debugger-for-jupyter-914e61716559)。
- en: Suggestions or questions? Please write in the comments.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有建议或问题吗？请在评论中写下。
- en: '**References:** [Jupyter Blog](https://blog.jupyter.org/)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**参考文献:** [Jupyter 博客](https://blog.jupyter.org/)'
- en: '[Jupyter@Github](https://github.com/jupyter)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[Jupyter@Github](https://github.com/jupyter)'
- en: '**Bio: [Manish Tiwari](https://www.linkedin.com/in/manish-kumar-tiwari/)**
    is a Data Enthusiast keen to share learnings and experience in AI space.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介: [Manish Tiwari](https://www.linkedin.com/in/manish-kumar-tiwari/)**
    是一位数据爱好者，热衷于分享 AI 领域的学习和经验。'
- en: '[Original](https://towardsdatascience.com/dockerize-jupyter-with-official-visual-debugger-enabled-cbce1840b7f).
    Reposted with permission.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/dockerize-jupyter-with-official-visual-debugger-enabled-cbce1840b7f)。转载经许可。'
- en: '**Related:**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[The 4 Best Jupyter Notebook Environments for Deep Learning](/2020/03/4-best-jupyter-notebook-environments-deep-learning.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4 个最佳 Jupyter Notebook 深度学习环境](/2020/03/4-best-jupyter-notebook-environments-deep-learning.html)'
- en: '[5 Google Colaboratory Tips](/2020/03/5-google-colaboratory-tips.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个 Google Colaboratory 小贴士](/2020/03/5-google-colaboratory-tips.html)'
- en: '[GitHub Python Data Science Spotlight: High Level Machine Learning & NLP, Ensembles,
    Command Line Viz & Docker Made Easy](/2018/10/github-python-data-science-spotlight.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub Python 数据科学焦点：高级机器学习与 NLP，集成方法，命令行可视化与 Docker 简化](/2018/10/github-python-data-science-spotlight.html)'
- en: More On This Topic
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Essential Math for Data Science: Visual Introduction to Singular…](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学的基础数学：奇异值分解的可视化介绍](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
- en: '[Building a Visual Search Engine - Part 1: Data Exploration](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-1.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建视觉搜索引擎 - 第 1 部分：数据探索](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-1.html)'
- en: '[Visual ChatGPT: Microsoft Combine ChatGPT and VFMs](https://www.kdnuggets.com/2023/03/visual-chatgpt-microsoft-combine-chatgpt-vfms.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Visual ChatGPT: 微软结合 ChatGPT 和 VFMs](https://www.kdnuggets.com/2023/03/visual-chatgpt-microsoft-combine-chatgpt-vfms.html)'
- en: '[AI: Large Language & Visual Models](https://www.kdnuggets.com/2023/06/ai-large-language-visual-models.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[人工智能：大规模语言模型与视觉模型](https://www.kdnuggets.com/2023/06/ai-large-language-visual-models.html)'
- en: '[Building a Visual Search Engine - Part 2: The Search Engine](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建视觉搜索引擎 - 第 2 部分：搜索引擎](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
- en: '[Cutting Down Implementation Time by Integrating Jupyter and KNIME](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过集成 Jupyter 和 KNIME 缩短实施时间](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
