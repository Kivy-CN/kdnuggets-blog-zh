- en: 10 Advanced Git Techniques
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10种高级 Git 技巧
- en: 原文：[https://www.kdnuggets.com/10-advanced-git-techniques](https://www.kdnuggets.com/10-advanced-git-techniques)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/10-advanced-git-techniques](https://www.kdnuggets.com/10-advanced-git-techniques)
- en: '![10 Advanced Git Techniques](../Images/25cf21f99ae6ce54a3340ab056432ef1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![10种高级 Git 技巧](../Images/25cf21f99ae6ce54a3340ab056432ef1.png)'
- en: Image from Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: Ever wonder what you could do to look like a pro in front of your manager when
    using Git? In this post, we'll learn about 10 advanced Git techniques and shortcuts
    that will make you more efficient at versioning, maintaining, and sharing code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 是否曾想过如何在使用 Git 时在经理面前显得像个专家？在这篇文章中，我们将学习10种高级 Git 技巧和快捷方式，使你在版本控制、维护和共享代码时更加高效。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前3个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织在 IT 方面'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: You likely already know the basics of committing, pushing, pulling, and branching
    with Git. But there are many lesser-known commands and features that can level
    up your skills. After reading this, you'll have a few slick tricks up your sleeve
    to impress coworkers with your Git proficiency.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经知道了使用 Git 进行提交、推送、拉取和分支的基础知识。但还有许多鲜为人知的命令和功能可以提升你的技能。阅读完这些，你将掌握一些炫酷的技巧，令同事对你的
    Git 熟练度刮目相看。
- en: 1\. Add & Commit
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 添加 & 提交
- en: You have added and committed the files this way multiple times, but what if
    I tell you it can be done in one line with the `-am` flag?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经多次以这种方式添加和提交文件，但如果我告诉你可以使用 `-am` 标志在一行内完成呢？
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Try this instead, and it will add the file changes and create the commit using
    the message.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用这个命令，它会添加文件更改并使用消息创建提交。
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. Amend
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 修改
- en: You can rename your current commit message using the `--amend` flag and write
    the new message. This will help you with accidental messages.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `--amend` 标志重命名当前的提交信息，并写入新信息。这将帮助你处理意外的提交信息。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can include additional changes to the current commit before pushing it to
    the remote repository. To do so, you need to add the file changes and then commit
    using the `--amend` flag. To retain the previous commit message, simply use the
    `--no-edit` flag.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在将当前提交推送到远程仓库之前包含额外的更改。为此，你需要添加文件更改，然后使用 `--amend` 标志提交。要保留之前的提交信息，只需使用 `--no-edit`
    标志。
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 3\. Override Remote History
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 覆盖远程历史记录
- en: If you want to push a local commit and override the remote history without dealing
    with resolving issues, you can use the `--force` flag. However, it's important
    to note that using the force flag is not recommended and should only be used when
    you're absolutely sure of what you're doing. Keep in mind that using the force
    flag will rewrite the remote history.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想推送本地提交并覆盖远程历史记录而不处理解决问题，你可以使用 `--force` 标志。然而，重要的是要注意，使用强制标志并不推荐，应该仅在你完全确定自己的操作时使用。请记住，使用强制标志将重写远程历史记录。
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 4\. Revert
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 撤销
- en: To undo a commit in Git, you can use the `revert` command. However, this command
    does not remove any commits. Instead, it creates a new commit that undoes the
    changes made by the original commit.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Git 中撤销一次提交，你可以使用 `revert` 命令。然而，这个命令不会删除任何提交。相反，它会创建一个新提交，撤销原始提交所做的更改。
- en: We will use the `log` with `--oneline` flag to view commit history in a shorter
    form.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `log` 命令和 `--oneline` 标志以更简洁的形式查看提交历史。
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To revert to a previous commit, we use the `git revert` command followed by
    the commit ID. This creates a new commit with the changes from the previous commit.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要恢复到以前的提交，我们使用 `git revert` 命令，后面跟上提交 ID。这会创建一个新提交，包含以前提交的更改。
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 5\. Codespace
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. Codespace
- en: Do you want to increase your productivity on GitHub? With GitHub Code Spaces,
    you can now edit and run your code directly in your browser.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你想提高在 GitHub 上的生产力吗？使用 GitHub Code Spaces，你现在可以直接在浏览器中编辑和运行代码。
- en: To access this feature, simply navigate to your favorite repository, press the
    period key (".") on your keyboard, and it will redirect you to the VSCode UI.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问此功能，只需导航到你喜欢的仓库，按下键盘上的句点键（“.”），系统将重定向到 VSCode UI。
- en: '![10 Advanced Git Techniques](../Images/eda67b5669fef0b6619e8501be3e8d39.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![10 种高级 Git 技巧](../Images/eda67b5669fef0b6619e8501be3e8d39.png)'
- en: Image from Author
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: You can make changes to the code and push them to your remote repository. However,
    if you want to run the code in the terminal, you need to run the Codespace in
    the cloud. The free version offers an excellent option for running your Python
    code in your browser. Isn't that awesome? I just found out about it today.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对代码进行更改并推送到远程仓库。然而，如果你想在终端中运行代码，你需要在云中运行 Codespace。免费版本提供了一个很好的选项，可以在浏览器中运行你的
    Python 代码。这不是很棒吗？我今天才发现这个。
- en: '![10 Advanced Git Techniques](../Images/0cab25164ac9919bc0dcfd7d22fd2190.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![10 种高级 Git 技巧](../Images/0cab25164ac9919bc0dcfd7d22fd2190.png)'
- en: Image from Author
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: 6\. Stash
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 存储
- en: When working on a project, you can add files to a staging area and then commit
    them to save your current progress. However, there is another way to save your
    work easily using the `stash` command. When you use `stash`, you save your current
    progress without adding it to the staging area or committing it. This allows you
    to save your progress and restore it whenever you need to.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理项目时，你可以将文件添加到暂存区，然后提交以保存当前进度。然而，还有另一种方法可以轻松保存你的工作，那就是使用 `stash` 命令。当你使用 `stash`
    时，你可以保存当前进度，而无需将其添加到暂存区或提交。这允许你保存进度并在需要时恢复。
- en: We will save our current progress by providing a name and stashing it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过提供一个名称并将其存储来保存当前进度。
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can view your stash list and note the corresponding index to retrieve it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看你的 stash 列表，并记下对应的索引以便检索。
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Our stash of "new ideas" is saved at index 0\. To retrieve it, use this command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“新想法”存储在索引 0 中。要检索它，请使用以下命令：
- en: '[PRE16]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 7\. Rename Branch
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 重命名分支
- en: You have the option to rename your default branch name to something more appropriate.
    In this case, we will rename "master" to "main".
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将默认分支名称重命名为更合适的名称。在这种情况下，我们将“master”重命名为“main”。
- en: '[PRE18]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '![10 Advanced Git Techniques](../Images/78efe97dc4d0a4a1ab5bafdd5854a44d.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![10 种高级 Git 技巧](../Images/78efe97dc4d0a4a1ab5bafdd5854a44d.png)'
- en: 'You can verify the changes using the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令验证更改：
- en: '[PRE19]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 8\. Decorate the Logs
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8\. 装饰日志
- en: If you want to view a detailed history of all the commits made in the current
    repository, you can use the `git log` command. However, the output can be difficult
    to read. To make it more readable, you can use the `graph`, `decorate`, and `oneline`
    flags. This will display the changes made in multiple branches and how they merge.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想查看当前仓库中所有提交的详细历史记录，你可以使用 `git log` 命令。然而，输出可能难以阅读。为了使其更易读，你可以使用 `graph`、`decorate`
    和 `oneline` 标志。这将显示多个分支中的更改及其合并情况。
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '![10 Advanced Git Techniques](../Images/9de6dc561076347a289db767e7758a57.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![10 种高级 Git 技巧](../Images/9de6dc561076347a289db767e7758a57.png)'
- en: 9\. Switch Back Branch
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9\. 切换回分支
- en: On several occasions, I have switched to a new branch and forgotten the name
    of the previous branch. Consequently, I had to use the `git branch -a` command
    to view the list of branch names. However, there is a simpler way to return to
    the original branch by using the dash “-” after the `git checkout` command.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在多个场合，我已经切换到一个新分支并忘记了之前分支的名称。因此，我不得不使用 `git branch -a` 命令查看分支名称列表。然而，使用 `git
    checkout` 命令后的破折号“-”有更简单的方法返回到原始分支。
- en: We will first create the new Git branch “neo”.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的 Git 分支“neo”。
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We will switch to the “neo” branch.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将切换到“neo”分支。
- en: '[PRE23]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To go back to the original branch, we will use the following command:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要返回到原始分支，我们将使用以下命令：
- en: '[PRE25]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 10\. Copy Remote Changes
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10\. 复制远程更改
- en: We have learned about overriding the remote repository. Let's learn how to override
    the local repository using the remote repository.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了如何覆盖远程仓库。现在，让我们学习如何使用远程仓库覆盖本地仓库。
- en: We will use the `fetch` command to get the latest changes from the remote repository.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `fetch` 命令从远程仓库获取最新更改。
- en: '[PRE27]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Then, we will use the 'reset' command with the 'hard' flag to override any local
    changes with the remote version. Please note that this will permanently discard
    any local changes.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用带有'hard'标志的'reset'命令来用远程版本覆盖任何本地更改。请注意，这将永久丢弃任何本地更改。
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'If there are still untracked files, they can be removed using the following
    command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果仍然有未跟踪的文件，可以使用以下命令将其删除：
- en: '[PRE30]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Conclusion
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: I was inspired to write this article after watching a [YouTube video](https://www.youtube.com/watch?v=ecK3EnyGD8o&list=WL&index=1)
    by Fireship. I admire the creator for his ability to explain complex topics in
    a simple way. By following his method, I have learned a lot about Git features.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我受到Fireship的[YouTube视频](https://www.youtube.com/watch?v=ecK3EnyGD8o&list=WL&index=1)的启发而写了这篇文章。我钦佩创作者能够以简单的方式解释复杂的主题。通过跟随他的方法，我学到了很多关于Git的功能。
- en: In this article, we have covered advanced Git techniques that are crucial for
    data scientists and software engineers who are working on a collaborative data
    project. Knowing these techniques can help you avoid accidents and resolve issues
    much faster.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们介绍了对于从事协作数据项目的数据科学家和软件工程师至关重要的高级Git技术。掌握这些技巧可以帮助你避免事故并更快地解决问题。
- en: I hope you found this blog useful. Please let me know if you would like to read
    more posts with byte-sized information about commonly used tools in the data science
    world.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这个博客有用。如果你希望阅读更多关于数据科学世界中常用工具的简明信息，请告诉我。
- en: '[](https://www.polywork.com/kingabzpro)****[Abid Ali Awan](https://www.polywork.com/kingabzpro)****
    ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan)) is a certified data
    scientist professional who loves building machine learning models. Currently,
    he is focusing on content creation and writing technical blogs on machine learning
    and data science technologies. Abid holds a Master''s degree in technology management
    and a bachelor''s degree in telecommunication engineering. His vision is to build
    an AI product using a graph neural network for students struggling with mental
    illness.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[](https://www.polywork.com/kingabzpro)****[Abid Ali Awan](https://www.polywork.com/kingabzpro)****
    ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan)) 是一位认证的数据科学专业人士，热衷于构建机器学习模型。目前，他专注于内容创作，并撰写有关机器学习和数据科学技术的技术博客。Abid拥有技术管理硕士学位和电信工程学士学位。他的愿景是利用图神经网络构建一种AI产品，以帮助面临心理健康问题的学生。'
- en: More On This Topic
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题
- en: '[14 Essential Git Commands for Data Scientists](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家必备的14条Git命令](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)'
- en: '[KDnuggets News, October 5: Top Free Git GUI Clients for Beginners •…](https://www.kdnuggets.com/2022/n39.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets新闻，10月5日：初学者的顶级免费Git GUI客户端 •…](https://www.kdnuggets.com/2022/n39.html)'
- en: '[Git for Data Science Cheatsheet](https://www.kdnuggets.com/2022/11/git-data-science-cheatsheet.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学的Git备忘单](https://www.kdnuggets.com/2022/11/git-data-science-cheatsheet.html)'
- en: '[Top Free Git GUI Clients for Beginners](https://www.kdnuggets.com/2022/10/top-free-git-gui-clients-beginners.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初学者的顶级免费Git GUI客户端](https://www.kdnuggets.com/2022/10/top-free-git-gui-clients-beginners.html)'
- en: '[Advanced Feature Selection Techniques for Machine Learning Models](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习模型的高级特征选择技术](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
- en: '[3 Research-Driven Advanced Prompting Techniques for LLM Efficiency…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3种基于研究的高级提示技术以提高LLM效率…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
