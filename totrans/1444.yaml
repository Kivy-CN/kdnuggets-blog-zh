- en: How to Write Web Apps Using Simple Python for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/10/write-web-apps-using-simple-python-data-scientists.html](https://www.kdnuggets.com/2019/10/write-web-apps-using-simple-python-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: A Machine Learning project is never really complete if we don’t have a good
    way to showcase it.
  prefs: []
  type: TYPE_NORMAL
- en: While in the past, a well-made visualization or a small PPT used to be enough
    for showcasing a data science project, with the advent of dashboarding tools like
    RShiny and Dash, a good data scientist needs to have a fair bit of knowledge of
    web frameworks to get along.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: And Web frameworks are hard to learn. I still get confused in all that HTML,
    CSS, and Javascript with all the hit and trials, for something seemingly simple
    to do.
  prefs: []
  type: TYPE_NORMAL
- en: Not to mention the many ways to do the same thing, making it confusing for us
    data science folks for whom web development is a secondary skill.
  prefs: []
  type: TYPE_NORMAL
- en: '***So, are we doomed to learn web frameworks? Or to call our developer friend
    for silly doubts in the middle of the night?***'
  prefs: []
  type: TYPE_NORMAL
- en: This is where StreamLit comes in and delivers on its promise to create web apps
    just using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Zen of Python: Simple is better than complex and Streamlit makes it dead simple
    to create apps.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '***This post is about understanding how to create apps that support data science
    projects using Streamlit.***'
  prefs: []
  type: TYPE_NORMAL
- en: To understand more about the architecture and the thought process that led to
    streamlit, have a look at this excellent [post](https://towardsdatascience.com/coding-ml-tools-like-you-code-ml-models-ddba3357eace) by
    one of the original developers/founder [Adrien Treuille](https://medium.com/u/39dfc90d7a34?source=post_page-----a227a1a01582----------------------).
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Installation is as simple as running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install streamlit`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see if our installation is successful, we can just run:'
  prefs: []
  type: TYPE_NORMAL
- en: '`streamlit hello`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This should show you a screen that says:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b36ddb8cd9c75be4801d6302f5800e74.png)'
  prefs: []
  type: TYPE_IMG
- en: You can go to the local URL: `localhost:8501` in your browser to see a Streamlit
    app in action. The developers have provided some cool demos that you can play
    with. Do take your time and feel the power of the tool before coming back.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/98b81dabd0800ee19aa539508e72d6fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Streamlit Hello World
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit aims to make app development easy using simple Python.
  prefs: []
  type: TYPE_NORMAL
- en: So let us write a simple app to see if it delivers on that promise.
  prefs: []
  type: TYPE_NORMAL
- en: Here I start with a simple app which we will call the Hello World of streamlit.
    Just paste the code given below in a file named `helloworld.py`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And, on the terminal run:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And voila, you should be able to see a simple app in action in your browser
    at `localhost:8501` that allows you to move a slider and gives the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/77e116a21563e022c2f0faaabb15f40e.png)'
  prefs: []
  type: TYPE_IMG
- en: A Simple slider widget app
  prefs: []
  type: TYPE_NORMAL
- en: 'It was pretty easy. In the above app, we used two features from Streamlit:'
  prefs: []
  type: TYPE_NORMAL
- en: the `st.slider` widget that we can slide to change the output of the web app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and the versatile `st.write` command. I am amazed at how it can write anything
    from charts, dataframes, and simple text. More on this later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Important: Remember that every time we change the widget value, the whole
    app runs from top to bottom.***'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit Widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Widgets provide us a way to control our app. The best place to read about the
    widgets is the [API reference](https://streamlit.io/docs/api.html) documentation
    itself but I will describe some most prominent ones that you might end up using.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Slider**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We already saw `st.slider` in action above. It can be used with min_value,max_value,
    and step for getting inputs in a range.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Text Input**'
  prefs: []
  type: TYPE_NORMAL
- en: The simplest way to get user input be it some URL input or some text input for
    sentiment analysis. It just needs a single label for naming the textbox.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the app looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/584efce2218bc6fd32061a4abd5bfad9.png)'
  prefs: []
  type: TYPE_IMG
- en: A Simple text_input widget app
  prefs: []
  type: TYPE_NORMAL
- en: '**Tip: **You can just change the file `helloworld.py` and refresh the browser.
    The way I work is to open and change`helloworld.py` in sublime text and see the
    changes in the browser side by side.'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Checkbox**'
  prefs: []
  type: TYPE_NORMAL
- en: One use case for checkboxes is to hide or show/hide a specific section in an
    app. Another could be setting up a boolean value in the parameters for a function.`[st.checkbox()](https://streamlit.io/docs/api.html#streamlit.checkbox)` takes
    a single argument, which is the widget label. In this app, the checkbox is used
    to toggle a conditional statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/41dfc8c293a9ecd40feb63126ca6ff55.png)'
  prefs: []
  type: TYPE_IMG
- en: A Simple checkbox widget app
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. SelectBox**'
  prefs: []
  type: TYPE_NORMAL
- en: We can use `[st.selectbox](https://streamlit.io/docs/api.html#streamlit.selectbox)` to
    choose from a series or a list. Normally a use case is to use it as a simple dropdown
    to select values from a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/004085363e293314b892eb7782fb8a5a.png)'
  prefs: []
  type: TYPE_IMG
- en: A Simple dropdown/selectbox widget app
  prefs: []
  type: TYPE_NORMAL
- en: '**5\. MultiSelect**'
  prefs: []
  type: TYPE_NORMAL
- en: We can also use multiple values from a dropdown. Here we use `st.multiselect` to
    get multiple values as a list in the variable `options`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/8cc0cd817759f5e70e3718703b1090bb.png)'
  prefs: []
  type: TYPE_IMG
- en: A Simple multiselect widget app
  prefs: []
  type: TYPE_NORMAL
- en: Creating Our Simple App Step by Step
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So much for understanding the important widgets. Now, we are going to create
    a simple app using multiple widgets at once.
  prefs: []
  type: TYPE_NORMAL
- en: To start simple, we will try to visualize our football data using streamlit.
    It is pretty much simple to do this with the help of the above widgets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Our simple app looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/67f9558dfafa88892f7dba592c60529b.png)'
  prefs: []
  type: TYPE_IMG
- en: Using multiple widgets in conjunction
  prefs: []
  type: TYPE_NORMAL
- en: That was easy. But it seems pretty basic right now. Can we add some charts?
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit currently supports many libraries for plotting.*** Plotly, Bokeh,
    Matplotlib, Altair, and Vega charts*** being some of them. ***Plotly Express*** also
    works, although they didn’t specify it in the docs. It also has some inbuilt chart
    types that are “native” to Streamlit, like `st.line_chart` and `st.area_chart`.
  prefs: []
  type: TYPE_NORMAL
- en: We will work with `plotly_express` here. Here is the code for our simple app.
    We just used four calls to streamlit. Rest is all simple python.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/e48af5b9978fab715a87f740201f3d69.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding charts
  prefs: []
  type: TYPE_NORMAL
- en: Improvements
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the start we said that each time we change any widget, the whole app runs
    from start to end. This is not feasible when we create apps that will serve deep
    learning models or complicated machine learning models. Streamlit covers us in
    this aspect by introducing ***Caching***.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Caching**'
  prefs: []
  type: TYPE_NORMAL
- en: In our simple app. We read the pandas dataframe again and again whenever a value
    changes. While it works for the small data we have, it will not work for big data
    or when we have to do a lot of processing on the data. Let us use caching using
    the `st.cache` decorator function in streamlit like below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Or for more complex and time taking functions that need to run only once, using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When we mark a function with Streamlit’s cache decorator, whenever the function
    is called streamlit checks the input parameters that you called the function with.
  prefs: []
  type: TYPE_NORMAL
- en: '***If this is the first time Streamlit has seen these params, it runs the function
    and stores the result in a local cache.***'
  prefs: []
  type: TYPE_NORMAL
- en: When the function is called the next time, if those params have not changed,
    Streamlit knows it can skip executing the function altogether. It just uses the
    results from the cache.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Sidebar**'
  prefs: []
  type: TYPE_NORMAL
- en: For a cleaner look based on your preference, you might want to move your widgets
    into a sidebar, something like Rshiny dashboards. ***This is pretty simple. Just
    add ***`***st.sidebar***`*** in your widget’s code.***
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/985ed87f7ef1cb1d21b1140f0da1a995.png)'
  prefs: []
  type: TYPE_IMG
- en: Move widgets to the sidebar
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Markdown?**'
  prefs: []
  type: TYPE_NORMAL
- en: I love writing in Markdown. I find it less verbose than HTML and much more suited
    for data science work. So, can we use Markdown with the streamlit app?
  prefs: []
  type: TYPE_NORMAL
- en: Yes, we can. There are a couple of ways to do this. In my view, the best one
    is to use [Magic commands](https://streamlit.io/docs/api.html#id1). Magic commands
    allow you to write markdown as easily as comments. You could also have used the
    command `st.markdown`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/4c18d90180760c668954ca4899252e07.png)'
  prefs: []
  type: TYPE_IMG
- en: Our final App Demo
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Streamlit has democratized the whole process to create apps, and I couldn’t
    recommend it more.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we created a simple web app. But the possibilities are endless.
    To give an example here is [face GAN](https://research.nvidia.com/publication/2017-10_Progressive-Growing-of) from
    the streamlit site. And it works by just using the same guiding ideas of widgets
    and caching.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c128ce20d3beb22716789d4ed7d4b62.png)'
  prefs: []
  type: TYPE_IMG
- en: I love the default colors and styles that the developers have used, and I found
    it much more comfortable than using Dash, which I was using until now for my demos.
    You can also include [audio](https://streamlit.io/docs/api.html#display-interactive-widgets) and
    video in your streamlit apps.
  prefs: []
  type: TYPE_NORMAL
- en: '**On top of that, Streamlit is a free and open-source rather than a proprietary
    web app that just works out of the box.**'
  prefs: []
  type: TYPE_NORMAL
- en: In the past, I had to reach out to my developer friends for any single change
    in a demo or presentation; now it is relatively trivial to do that.
  prefs: []
  type: TYPE_NORMAL
- en: I aim to use it more in my workflow from now on, and considering the capabilities
    it provides without all the hard work, I think you should too.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I don’t have an idea if it will perform well in a production environment yet,
    but its a boon for the small proof of concept projects and demos. I aim to use
    it more in my workflow from now on, and considering the capabilities it provides
    without all the hard work, I think you should too.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the full code for the final app [here](https://github.com/MLWhiz/streamlit_football_demo).
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn about the best strategies for creating Visualizations,
    I would like to call out an excellent course about [**Data Visualization and applied
    plotting**](https://www.coursera.org/specializations/data-science-python?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&siteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&utm_content=3&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0) from
    the University of Michigan, which is a part of a pretty good [**Data Science Specialization
    with Python**](https://www.coursera.org/specializations/data-science-python?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&siteID=lVarvwc5BD0-SAQTYQNKSERwaOgd07RrHg&utm_content=3&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0) in
    itself. Do check it out.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for the read. I am going to be writing more beginner-friendly posts in
    the future too. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX) to be informed about them.
    As always, I welcome feedback and constructive criticism and can be reached on
    Twitter [@mlwhiz](https://twitter.com/MLWhiz).
  prefs: []
  type: TYPE_NORMAL
- en: Also, a small disclaimer — There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is a Data
    Scientist at Walmart Labs.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/how-to-write-web-apps-using-simple-python-for-data-scientists-a227a1a01582).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[6 bits of advice for Data Scientists](/2019/09/advice-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Good Feature Building Techniques and Tricks for Kaggle](/2018/12/feature-building-techniques-tricks-kaggle.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Graph Algorithms That Data Scientists Should Know](/2019/09/5-graph-algorithms-data-scientists-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Meet MetaGPT: The ChatGPT-Powered AI Assistant That Turns Text Into…](https://www.kdnuggets.com/meet-metagpt-the-chatgptpowered-ai-assistant-that-turns-text-into-web-apps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Web Scraping Using Python](https://www.kdnuggets.com/2022/10/beginner-guide-web-scraping-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Write SQL in Native Python](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
