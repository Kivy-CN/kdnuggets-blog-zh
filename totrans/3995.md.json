["```py\ndef fitness(chromosome):\n    x = int(''.join(map(str, chromosome)), 2)\n    return x ** 2\n```", "```py\ndef generate_chromosome(length):\n    return [random.randint(0, 1) for _ in range(length)]\n\ndef generate_population(size, chromosome_length):\n    return [generate_chromosome(chromosome_length) for _ in range(size)]\n\npopulation_size = 10\nchromosome_length = 5\npopulation = generate_population(population_size, chromosome_length) \n```", "```py\nfitnesses = [fitness(chromosome) for chromosome in population]\n```", "```py\ndef select_pair(population, fitnesses):\n    total_fitness = sum(fitnesses)\n    selection_probs = [f / total_fitness for f in fitnesses]\n    parent1 = population[random.choices(range(len(population)), selection_probs)[0]]\n    parent2 = population[random.choices(range(len(population)), selection_probs)[0]]\n    return parent1, parent2\n```", "```py\ndef crossover(parent1, parent2):\n    point = random.randint(1, len(parent1) - 1)\n    offspring1 = parent1[:point] + parent2[point:]\n    offspring2 = parent2[:point] + parent1[point:]\n    return offspring1, offspring2\n```", "```py\ndef mutate(chromosome, mutation_rate):\n    return [gene if random.random() > mutation_rate else 1 - gene for gene in chromosome]\n\nmutation_rate = 0.01\n```"]