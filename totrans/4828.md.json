["```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score as acc\nfrom mlxtend.feature_selection import SequentialFeatureSelector as sfs\n\n# Read data\ndf = pd.read_csv('winequality-white.csv', sep=';')\n\n# Train/test split\nX_train, X_test, y_train, y_test = train_test_split(\n    df.values[:,:-1],\n    df.values[:,-1:],\n    test_size=0.25,\n    random_state=42)\n\ny_train = y_train.ravel()\ny_test = y_test.ravel()\n\nprint('Training dataset shape:', X_train.shape, y_train.shape)\nprint('Testing dataset shape:', X_test.shape, y_test.shape)\n\n```", "```py\n\nTraining dataset shape: (3673, 11) (3673,)\nTesting dataset shape: (1225, 11) (1225,)\n```", "```py\n# Build RF classifier to use in feature selection\nclf = RandomForestClassifier(n_estimators=100, n_jobs=-1)\n\n# Build step forward feature selection\nsfs1 = sfs(clf,\n           k_features=5,\n           forward=True,\n           floating=False,\n           verbose=2,\n           scoring='accuracy',\n           cv=5)\n\n# Perform SFFS\nsfs1 = sfs1.fit(X_train, y_train)\n\n```", "```py\n\n[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s remaining:    0.0s\n[Parallel(n_jobs=1)]: Done  11 out of  11 | elapsed:   24.3s finished\n\n[2018-06-12 14:47:47] Features: 1/5 -- score: 0.49768148939247264[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.2s remaining:    0.0s\n[Parallel(n_jobs=1)]: Done  10 out of  10 | elapsed:   22.7s finished\n\n[2018-06-12 14:48:09] Features: 2/5 -- score: 0.5442629071398873[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.7s remaining:    0.0s\n[Parallel(n_jobs=1)]: Done   9 out of   9 | elapsed:   21.2s finished\n\n[2018-06-12 14:48:31] Features: 3/5 -- score: 0.6052194438136681[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.5s remaining:    0.0s\n[Parallel(n_jobs=1)]: Done   8 out of   8 | elapsed:   20.3s finished\n\n[2018-06-12 14:48:51] Features: 4/5 -- score: 0.6261526236769334[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    2.4s remaining:    0.0s\n[Parallel(n_jobs=1)]: Done   7 out of   7 | elapsed:   17.3s finished\n\n[2018-06-12 14:49:08] Features: 5/5 -- score: 0.6444222989869156\n```", "```py\n# Which features?\nfeat_cols = list(sfs1.k_feature_idx_)\nprint(feat_cols)\n\n```", "```py\n\n[1, 2, 3, 7, 10]\n\n```", "```py\n# Build full model with selected features\nclf = RandomForestClassifier(n_estimators=1000, random_state=42, max_depth=4)\nclf.fit(X_train[:, feat_cols], y_train)\n\ny_train_pred = clf.predict(X_train[:, feat_cols])\nprint('Training accuracy on selected features: %.3f' % acc(y_train, y_train_pred))\n\ny_test_pred = clf.predict(X_test[:, feat_cols])\nprint('Testing accuracy on selected features: %.3f' % acc(y_test, y_test_pred))\n\n```", "```py\n\nTraining accuracy on selected features: 0.558\nTesting accuracy on selected features: 0.512\n\n```", "```py\n# Build full model on ALL features, for comparison\nclf = RandomForestClassifier(n_estimators=1000, random_state=42, max_depth=4)\nclf.fit(X_train, y_train)\n\ny_train_pred = clf.predict(X_train)\nprint('Training accuracy on all features: %.3f' % acc(y_train, y_train_pred))\n\ny_test_pred = clf.predict(X_test)\nprint('Testing accuracy on all features: %.3f' % acc(y_test, y_test_pred))\n\n```", "```py\n\nTraining accuracy on all features: 0.566\nTesting accuracy on all features: 0.509\n\n```"]