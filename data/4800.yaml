- en: An Introduction to t-SNE with Python Example
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: t-SNE介绍与Python示例
- en: 原文：[https://www.kdnuggets.com/2018/08/introduction-t-sne-python.html](https://www.kdnuggets.com/2018/08/introduction-t-sne-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/08/introduction-t-sne-python.html](https://www.kdnuggets.com/2018/08/introduction-t-sne-python.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**By [Andre Violante](https://www.linkedin.com/in/andreviolante/), Data Scientist
    at SAS**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：[Andre Violante](https://www.linkedin.com/in/andreviolante/)，SAS数据科学家**'
- en: '**Introduction**'
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: I’ve always had a passion for learning and consider myself a lifelong learner.
    Being at SAS, as a data scientist, allows me to learn and try out new algorithms
    and functionalities that we regularly release to our customers. Often times, the
    algorithms are not technically new, but they’re new to me which makes it a lot
    of fun.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直对学习充满热情，并认为自己是一个终身学习者。在SAS担任数据科学家，让我可以学习并尝试我们定期发布给客户的新算法和功能。很多时候，这些算法在技术上并不新颖，但对我来说是新的，这让它们非常有趣。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT工作'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Recently, I had the opportunity to learn more about t-Distributed Stochastic
    Neighbor Embedding (t-SNE). In this post I’m going to give a high-level overview
    of the t-SNE algorithm. I’ll also share some example python code where I’ll use
    t-SNE on both the Digits and MNIST dataset.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最近，我有机会深入了解t-分布随机邻域嵌入（t-SNE）。在这篇文章中，我将对t-SNE算法进行高层次概述。我还会分享一些Python示例代码，其中我将使用t-SNE对Digits和MNIST数据集进行处理。
- en: '**What is t-SNE?**'
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是t-SNE？**'
- en: t-Distributed Stochastic Neighbor Embedding (t-SNE) is an [unsupervised, non-linear
    technique](https://blogs.sas.com/content/subconsciousmusings/2017/04/12/machine-learning-algorithm-use/)
    primarily used for data exploration and visualizing high-dimensional data. In
    simpler terms, t-SNE gives you a feel or intuition of how the data is arranged
    in a high-dimensional space. It was developed by Laurens van der Maatens and Geoffrey
    Hinton in 2008.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: t-分布随机邻域嵌入（t-SNE）是一种[无监督、非线性技术](https://blogs.sas.com/content/subconsciousmusings/2017/04/12/machine-learning-algorithm-use/)，主要用于数据探索和可视化高维数据。简单来说，t-SNE让你感知或直观了解数据在高维空间中的排列。它由Laurens
    van der Maatens和Geoffrey Hinton于2008年开发。
- en: '**t-SNE vs PCA**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**t-SNE与PCA**'
- en: 'If you’re familiar with [Principal Components Analysis](https://blogs.sas.com/content/iml/2017/08/09/robust-principal-components-sas.html)
    (PCA), then like me, you’re probably wondering the difference between PCA and
    t-SNE. The first thing to note is that PCA was developed in 1933 while t-SNE was
    developed in 2008\. A lot has changed in the world of data science since 1933
    mainly in the realm of compute and size of data. Second, PCA is a linear dimension
    reduction technique that seeks to maximize variance and preserves large pairwise
    distances. In other words, things that are different end up far apart. This can
    lead to poor visualization especially when dealing with non-linear manifold structures.
    Think of a manifold structure as any geometric shape like: cylinder, ball, curve,
    etc.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉[主成分分析](https://blogs.sas.com/content/iml/2017/08/09/robust-principal-components-sas.html)（PCA），那么像我一样，你可能会想知道PCA和t-SNE之间的区别。首先要注意的是，PCA是在1933年开发的，而t-SNE是在2008年开发的。自1933年以来，数据科学领域发生了很多变化，主要体现在计算能力和数据规模上。其次，PCA是一种线性降维技术，旨在最大化方差并保留较大的成对距离。换句话说，不同的事物最终会远离。这可能导致可视化效果不佳，特别是在处理非线性流形结构时。把流形结构想象成任何几何形状，如：圆柱体、球体、曲线等。
- en: t-SNE differs from PCA by preserving only small pairwise distances or local
    similarities whereas PCA is concerned with preserving large pairwise distances
    to maximize variance. Laurens illustrates the PCA and t-SNE approach pretty well
    using the Swiss Roll dataset in Figure 1 [1]. You can see that due to the non-linearity
    of this toy dataset (manifold) and preserving large distances that PCA would incorrectly
    preserve the structure of the data.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: t-SNE与PCA的不同之处在于，它只保留小的成对距离或局部相似度，而PCA则关注保留大的成对距离以最大化方差。Laurens通过图1 [1] 中的瑞士卷数据集很好地展示了PCA和t-SNE方法。你可以看到，由于这个玩具数据集（流形）的非线性以及保留大的距离，PCA会错误地保留数据的结构。
- en: '![Tsne Swiss Roll](../Images/db379c2ed388b99f0f930076f275ac42.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 瑞士卷](../Images/db379c2ed388b99f0f930076f275ac42.png)'
- en: Figure 1 — Swiss Roll Dataset. Preserve small distance with t-SNE (solid line)
    vs maximizing variance PCA [1]
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图1 — 瑞士卷数据集。使用t-SNE（实线）保留小距离 vs 最大化方差的PCA [1]
- en: '**How t-SNE works**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**t-SNE的工作原理**'
- en: Now that we know why we might use t-SNE over PCA, lets discuss how t-SNE works.
    The t-SNE algorithm calculates a similarity measure between pairs of instances
    in the high dimensional space and in the low dimensional space. It then tries
    to optimize these two similarity measures using a cost function. Let’s break that
    down into 3 basic steps.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道为什么我们可能会选择t-SNE而不是PCA，让我们讨论一下t-SNE是如何工作的。t-SNE算法计算高维空间和低维空间中实例对之间的相似度测量。然后，它尝试使用成本函数来优化这两种相似度测量。我们将这个过程分解为3个基本步骤。
- en: Step 1, measure similarities between points in the high dimensional space. Think
    of a bunch of data points scattered on a 2D space (Figure 2). For each data point
    (x[i]) we’ll center a Gaussian distribution over that point. Then we measure the
    density of all points (x[j]) under that Gaussian distribution. Then renormalize
    for all points. This gives us a set of probabilities (P[ij]) for all points. Those
    probabilities are proportional to the similarities. All that means is, if data
    points x1 and x2 have equal values under this Gaussian circle then their proportions
    and similarities are equal and hence you have local similarities in the structure
    of this high-dimensional space. The Gaussian distribution or circle can be manipulated
    using what’s called perplexity, which influences the variance of the distribution
    (circle size) and essentially the number of nearest neighbors. Normal range for
    perplexity is between 5 and 50 [2].
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤1，在高维空间中测量点之间的相似度。可以将一组数据点想象成散布在二维空间中的点（图2）。对于每个数据点（x[i]），我们将一个高斯分布中心放置在该点上。然后我们测量所有点（x[j]）在该高斯分布下的密度。接着对所有点进行重新归一化。这将为所有点提供一组概率（P[ij]）。这些概率与相似度成正比。这意味着，如果数据点x1和x2在这个高斯圆圈下具有相等的值，那么它们的比例和相似度也相等，因此你可以在这个高维空间的结构中获得局部相似度。高斯分布或圆圈可以通过所谓的困惑度进行调整，它影响分布的方差（圆圈大小）以及本质上的最近邻数量。困惑度的正常范围是5到50
    [2]。
- en: '![Tsne Gaussian Centering](../Images/77c425c98dfc989a84e9338fa07c8bf3.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 高斯中心化](../Images/77c425c98dfc989a84e9338fa07c8bf3.png)'
- en: Figure 2 — Measuring pairwise similarities in the high-dimensional space
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图2 — 在高维空间中测量成对相似度
- en: Step 2 is similar to step 1, but instead of using a Gaussian distribution you
    use a Student t-distribution with one degree of freedom, which is also known as
    the Cauchy distribution (Figure 3). This gives us a second set of probabilities
    (Q[ij]) in the low dimensional space. As you can see the Student t-distribution
    has heavier tails than the normal distribution. The heavy tails allow for better
    modeling of far apart distances.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 步骤2与步骤1类似，但不同的是，使用的是具有一个自由度的Student t分布，也称为Cauchy分布（图3）。这为低维空间中的所有点提供了一组第二概率（Q[ij]）。正如你所看到的，Student
    t分布比正态分布有更重的尾部。重尾部更好地建模了远距离。
- en: '![Tsne Cauchy Distribution](../Images/b2b7ac0282ffd54212150dd3ea74d726.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne Cauchy 分布](../Images/b2b7ac0282ffd54212150dd3ea74d726.png)'
- en: Figure 3 — Normal vs Student t-distribution
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图3 — 正态分布 vs Student t分布
- en: The last step is that we want these set of probabilities from the low-dimensional
    space (Q[ij]) to reflect those of the high dimensional space (P[ij]) as best as
    possible. We want the two map structures to be similar. We measure the difference
    between the probability distributions of the two-dimensional spaces using Kullback-Liebler
    divergence (KL). I won’t get too much into KL except that it is an asymmetrical
    approach that efficiently compares large P[ij] and Q[ij] values. Finally, we use
    gradient descent to minimize our KL cost function.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一步是我们希望低维空间（Q[ij]）中的这些概率集合尽可能准确地反映高维空间（P[ij]）中的概率集合。我们希望这两个映射结构相似。我们使用 Kullback-Liebler
    散度（KL）来测量这两个二维空间中概率分布的差异。我不会深入讲解 KL，只说它是一种有效比较大 P[ij] 和 Q[ij] 值的非对称方法。最后，我们使用梯度下降来最小化
    KL 成本函数。
- en: '**Use Case for t-SNE**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**t-SNE 的使用案例**'
- en: Now that you know how t-SNE works let’s talk quickly about where it is used.
    Laurens van der Maaten shows a lot of examples in his video presentation [1].
    He mentions the use of t-SNE in areas like climate research, computer security,
    bioinformatics, cancer research, etc. t-SNE could be used on high-dimensional
    data and then the output of those dimensions then become inputs to some other
    classification model.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你了解了 t-SNE 的工作原理，我们快速讨论一下它的应用领域。Laurens van der Maaten 在他的 [1] 视频演示中展示了很多例子。他提到
    t-SNE 在气候研究、计算机安全、生物信息学、癌症研究等领域的应用。t-SNE 可以用于高维数据，然后这些维度的输出再作为其他分类模型的输入。
- en: Also, t-SNE could be used to investigate, learn, or evaluate segmentation. Often
    times we select the number of segments prior to modeling or iterate after results.
    t-SNE can often times show clear separation in the data. This can be used prior
    to using your segmentation model to select a cluster number or after to evaluate
    if your segments actually hold up. t-SNE however is not a clustering approach
    since it does not preserve the inputs like PCA and the values may often change
    between runs so it’s purely for exploration.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，t-SNE 还可以用于调查、学习或评估分割。通常我们会在建模之前选择分段的数量，或者在结果之后进行迭代。t-SNE 通常能清楚地显示数据中的分离。这可以在使用分割模型之前用来选择集群数量，或在之后用来评估你的分段是否有效。然而，t-SNE
    不是一种聚类方法，因为它不像 PCA 那样保留输入，值在不同运行之间可能会发生变化，所以它仅用于探索。
- en: '**Code Example**'
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**代码示例**'
- en: Below is a python code (Figures below with link to GitHub) where you can see
    the visual comparison between PCA and t-SNE on the Digits and MNIST datasets.
    I select both of these datasets because of the dimensionality differences and
    therefore the differences in results. I also show a technique in the code where
    you can run PCA prior to running t-SNE. This can be done to reduce computation
    and you’d typically reduce down to ~30 dimensions and then run t-SNE.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 Python 代码示例（下方的图像链接到 GitHub），你可以看到 PCA 和 t-SNE 在 Digits 和 MNIST 数据集上的视觉比较。我选择这两个数据集是因为它们在维度上的差异，因此结果也会有所不同。我还在代码中展示了一种技术，即在运行
    t-SNE 之前先运行 PCA。这可以减少计算量，通常你会将维度减少到 ~30，然后再运行 t-SNE。
- en: I ran this using python and calling the [SAS libraries.](http://go.documentation.sas.com/?cdcId=pgmcdc&cdcVersion=8.11&docsetId=allprodsactions&docsetTarget=actionSetsByName.htm&locale=en)
    It may appear slightly different than what you’re use to and you can see that
    in the images below. I used `seaborn` for my visuals which I thought was great,
    but with t-SNE you may get really compact clusters and need to zoom in. Another
    visualization tool, like plotly, may be better if you need to zoom in.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我用 Python 运行了这个示例，并调用了 [SAS 库](http://go.documentation.sas.com/?cdcId=pgmcdc&cdcVersion=8.11&docsetId=allprodsactions&docsetTarget=actionSetsByName.htm&locale=en)。它可能看起来与您习惯的略有不同，你可以在下方的图像中看到。我使用了
    `seaborn` 来进行可视化，我认为效果很好，但在 t-SNE 中你可能会得到非常紧凑的聚类，需要放大。另一个可视化工具，如 plotly，可能更适合需要放大的情况。
- en: 'Check out [the full notebook in GitHub](https://github.com/aviolante/sas-python-work/blob/master/tSneExampleBlogPost.ipynb)
    so you can see all the steps in between and have the code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 [GitHub 上的完整笔记本](https://github.com/aviolante/sas-python-work/blob/master/tSneExampleBlogPost.ipynb)，以便查看所有步骤，并获取代码：
- en: '*Step 1 — Load Python Libraries. Create a connection to the SAS server (Called
    ‘CAS’, which is a distributed in-memory engine). Load CAS action sets (think of
    these as libraries). Read in data and see shape.*'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 1 — 加载 Python 库。创建到 SAS 服务器的连接（称为‘CAS’，这是一个分布式内存引擎）。加载 CAS 动作集（将这些视为库）。读取数据并查看数据形状。*'
- en: '![Tsne Example Code1](../Images/6df09bafad9d0886d40cf471ac51c771.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 示例代码1](../Images/6df09bafad9d0886d40cf471ac51c771.png)'
- en: '*Step 2 — To this point I’m still working on my local machine. I’m going to
    load that data into the CAS server I mentioned. This helps me to take advantage
    of the distributed environment and gain performance efficiency. Then I perform
    PCA analysis on both Digits and MNIST data.*'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2 — 到目前为止，我仍在我的本地机器上工作。我将把数据加载到我提到的 CAS 服务器中。这有助于我利用分布式环境并提高性能效率。然后我对 Digits
    和 MNIST 数据进行 PCA 分析。*'
- en: '![Tsne Example Code2](../Images/a4cfe303eb2a47c06e8b6bdc423abe0e.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 示例代码2](../Images/a4cfe303eb2a47c06e8b6bdc423abe0e.png)'
- en: '*Step 3 — Visualize our PCA results for both Digits and MNIST*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3 — 可视化我们对 Digits 和 MNIST 的 PCA 结果*'
- en: '![Tsne Example Code3](../Images/12820e6dd955b54925e7d6ef092e47f5.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 示例代码3](../Images/12820e6dd955b54925e7d6ef092e47f5.png)'
- en: '![Tsne PCA Plot Result Digits](../Images/e3d9a844b4756f26088f3141511a2918.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne PCA 绘图结果 Digits](../Images/e3d9a844b4756f26088f3141511a2918.png)'
- en: PCA actually does a decent job on the Digits dataset and finding structure.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: PCA 实际上在 Digits 数据集上做得相当不错，能够发现结构。
- en: '![Tsne PCA Plot Results Mnist](../Images/f825789c701e9946255fac05ffa32ed9.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne PCA 绘图结果 Mnist](../Images/f825789c701e9946255fac05ffa32ed9.png)'
- en: As you can see PCA on the MNIST dataset has a ‘crowding’ issue.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，PCA 在 MNIST 数据集上存在‘拥挤’问题。
- en: '*Step 4 — Now let’s try the same steps as above, but using the t-SNE algorithm*'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 4 — 现在让我们尝试与上述相同的步骤，但使用 t-SNE 算法*'
- en: '![Tsne Example Code 4](../Images/8dc1fa98c23f3a6f5266f615a4b6da54.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 示例代码 4](../Images/8dc1fa98c23f3a6f5266f615a4b6da54.png)'
- en: '![Tsne Example Code 6](../Images/3f09e5ac6784b3e8071b7897f71269c1.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 示例代码 6](../Images/3f09e5ac6784b3e8071b7897f71269c1.png)'
- en: '![Tsne Plot Result Digits](../Images/e7d5af8e17ff560abd5bc421baa7324a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 绘图结果 Digits](../Images/e7d5af8e17ff560abd5bc421baa7324a.png)'
- en: '*And now for the MNIST dataset…*'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*现在来看 MNIST 数据集…*'
- en: '![Tsne Example Code7](../Images/cb48a1f2d7f64879454cd4222d24c05e.png) ![Tsne
    Example Code8](../Images/e1a899be00dd4bcdcf77251f0a949898.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 示例代码7](../Images/cb48a1f2d7f64879454cd4222d24c05e.png) ![Tsne 示例代码8](../Images/e1a899be00dd4bcdcf77251f0a949898.png)'
- en: '![Tsne Plot Results Mnist](../Images/6f802ae3c6de85cf84f7146ece03e10f.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Tsne 绘图结果 Mnist](../Images/6f802ae3c6de85cf84f7146ece03e10f.png)'
- en: '**Conclusion**'
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: I hope you enjoyed this overview and example of the t-SNE algorithm. I found
    t-SNE to be a very interesting and useful as a visualization tool since almost
    all the data I’ve ever worked on seemed to be high-dimensional. I’ll post the
    resources that I found super helpful below. The best resource for me was the YouTube
    video by Laurens. It’s a little long at almost 1 hour, but well explained and
    where I found the clearest explanation with detail.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你喜欢这次 t-SNE 算法的概述和示例。我发现 t-SNE 作为可视化工具非常有趣和有用，因为几乎所有我处理过的数据似乎都是高维的。我将在下面发布我发现非常有帮助的资源。对我而言，最好的资源是
    Laurens 的 YouTube 视频。虽然时间有点长，接近 1 小时，但讲解很清楚，是我找到的最详细的解释。
- en: '**Additional Resources I found Useful:**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**我发现有用的额外资源：**'
- en: 'T-SNE vs PCA: [https://www.quora.com/What-advantages-does-the-t-SNE-algorithm-have-over-PCA](https://www.quora.com/What-advantages-does-the-t-SNE-algorithm-have-over-PCA)'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'T-SNE 与 PCA 的比较: [https://www.quora.com/What-advantages-does-the-t-SNE-algorithm-have-over-PCA](https://www.quora.com/What-advantages-does-the-t-SNE-algorithm-have-over-PCA)'
- en: 'Kullback-Liebler Divergence: [https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence](https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence)'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Kullback-Liebler 散度: [https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence](https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence)'
- en: 'T-SNE Wikipedia: [https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding](https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding)'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'T-SNE 维基百科: [https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding](https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding)'
- en: 'T-SNE Walkthrough: [https://www.analyticsvidhya.com/blog/2017/01/t-sne-implementation-r-python/](https://www.analyticsvidhya.com/blog/2017/01/t-sne-implementation-r-python/)'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'T-SNE 指南: [https://www.analyticsvidhya.com/blog/2017/01/t-sne-implementation-r-python/](https://www.analyticsvidhya.com/blog/2017/01/t-sne-implementation-r-python/)'
- en: 'Good hyperparameter Information: [https://distill.pub/2016/misread-tsne/](https://distill.pub/2016/misread-tsne/)'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '优良的超参数信息: [https://distill.pub/2016/misread-tsne/](https://distill.pub/2016/misread-tsne/)'
- en: 'Lauren van der Maaten’s GitHub Page: [https://lvdmaaten.github.io/tsne/](https://lvdmaaten.github.io/tsne/)'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Lauren van der Maaten 的 GitHub 页面: [https://lvdmaaten.github.io/tsne/](https://lvdmaaten.github.io/tsne/)'
- en: '**References**'
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**参考文献**'
- en: YouTube. (2013, November 6). Visualizing Data Using t-SNE [Video File]. Retrieved
    from [https://www.youtube.com/watch?v=RJVL80Gg3lA](https://www.youtube.com/watch?v=RJVL80Gg3lA)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: YouTube. (2013年11月6日). 使用 t-SNE 可视化数据 [视频文件]. 来源于 [https://www.youtube.com/watch?v=RJVL80Gg3lA](https://www.youtube.com/watch?v=RJVL80Gg3lA)
- en: L.J.P. van der Maaten and G.E. Hinton. Visualizing High-Dimensional Data Using
    t-SNE. Journal of Machine Learning Research 9(Nov):2579–2605, 2008.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: L.J.P. van der Maaten 和 G.E. Hinton. 使用t-SNE可视化高维数据。机器学习研究杂志 9（11月）：2579–2605，2008年。
- en: '**Bio**: [Andre](https://www.linkedin.com/in/andreviolante/) comes to SAS with
    over 8 years of digital analytics experience. He has specialized in the retail
    industry with deep experience in customer analytics. Andre has worked with several
    different data platforms, both on-premises and cloud, using a variety of open
    source tools, but primarily R and Python. Andre is naturally curious with passion
    for problem solving.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介**：[Andre](https://www.linkedin.com/in/andreviolante/) 在SAS拥有超过8年的数字分析经验。他在零售行业专长，拥有丰富的客户分析经验。Andre
    曾使用多种开源工具（主要是R和Python）在多个数据平台（包括本地和云端）上工作。Andre 天生好奇，对解决问题充满热情。'
- en: Andre has a Bachelor’s in Business Management and a Master’s degree in Analytics.
    He is also currently enrolled in Georgia Tech working on a second Master’s degree
    in Computer Science with an emphasis in machine learning.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Andre 拥有商业管理学士学位和分析学硕士学位。他还在乔治亚理工学院攻读计算机科学硕士学位，重点是机器学习。
- en: Andre loves spending time with his family going on vacations and trying new
    food spots. He also enjoys the outdoors and being active.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Andre 喜欢和家人一起度假，尝试新的餐馆。他也喜欢户外活动和保持活跃。
- en: '**Related:**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Dimensionality Reduction : Does PCA really improve classification outcome?](https://www.kdnuggets.com/2018/07/dimensionality-reduction-pca-improve-classification-results.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[降维 ：PCA真的能改善分类结果吗？](https://www.kdnuggets.com/2018/07/dimensionality-reduction-pca-improve-classification-results.html)'
- en: '[Optimization 101 for Data Scientists](https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的优化101](https://www.kdnuggets.com/2018/08/optimization-101-data-scientists.html)'
- en: '[Ten Machine Learning Algorithms You Should Know to Become a Data Scientist](https://www.kdnuggets.com/2018/04/10-machine-learning-algorithms-data-scientist.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为数据科学家必知的十种机器学习算法](https://www.kdnuggets.com/2018/04/10-machine-learning-algorithms-data-scientist.html)'
- en: More On This Topic
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用PyCaret进行Python中的聚类介绍](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
- en: '[Multilabel Classification: An Introduction with Python''s Scikit-Learn](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[多标签分类：使用Python的Scikit-Learn入门](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
- en: '[Introduction to Multithreading and Multiprocessing in Python](https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的多线程和多处理介绍](https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python)'
- en: '[Introduction to Memory Profiling in Python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的内存分析介绍](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)'
- en: '[Duck, Duck, Code: An Introduction to Python''s Duck Typing](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[鸭子，鸭子，代码：Python的鸭子类型介绍](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)'
- en: '[Introduction to __getitem__: A Magic Method in Python](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍__getitem__：Python中的魔法方法](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
