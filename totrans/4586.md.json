["```py\nedgelist = [['Mannheim', 'Frankfurt', 85], ['Mannheim', 'Karlsruhe', 80], ['Erfurt', 'Wurzburg', 186], ['Munchen', 'Numberg', 167], ['Munchen', 'Augsburg', 84], ['Munchen', 'Kassel', 502], ['Numberg', 'Stuttgart', 183], ['Numberg', 'Wurzburg', 103], ['Numberg', 'Munchen', 167], ['Stuttgart', 'Numberg', 183], ['Augsburg', 'Munchen', 84], ['Augsburg', 'Karlsruhe', 250], ['Kassel', 'Munchen', 502], ['Kassel', 'Frankfurt', 173], ['Frankfurt', 'Mannheim', 85], ['Frankfurt', 'Wurzburg', 217], ['Frankfurt', 'Kassel', 173], ['Wurzburg', 'Numberg', 103], ['Wurzburg', 'Erfurt', 186], ['Wurzburg', 'Frankfurt', 217], ['Karlsruhe', 'Mannheim', 80], ['Karlsruhe', 'Augsburg', 250],[\"Mumbai\", \"Delhi\",400],[\"Delhi\", \"Kolkata\",500],[\"Kolkata\", \"Bangalore\",600],[\"TX\", \"NY\",1200],[\"ALB\", \"NY\",800]]\n```", "```py\ng = nx.Graph()\nfor edge in edgelist:\n    g.add_edge(edge[0],edge[1], weight = edge[2])\n```", "```py\nfor i, x in enumerate(nx.connected_components(g)):\n    print(\"cc\"+str(i)+\":\",x)\n------------------------------------------------------------\ncc0: {'Frankfurt', 'Kassel', 'Munchen', 'Numberg', 'Erfurt', 'Stuttgart', 'Karlsruhe', 'Wurzburg', 'Mannheim', 'Augsburg'}\ncc1: {'Kolkata', 'Bangalore', 'Mumbai', 'Delhi'}\ncc2: {'ALB', 'NY', 'TX'}\n```", "```py\nprint(nx.shortest_path(g, 'Stuttgart','Frankfurt',weight='weight'))\nprint(nx.shortest_path_length(g, 'Stuttgart','Frankfurt',weight='weight'))\n--------------------------------------------------------\n['Stuttgart', 'Numberg', 'Wurzburg', 'Frankfurt']\n503\n```", "```py\nfor x in nx.all_pairs_dijkstra_path(g,weight='weight'):\n    print(x)\n--------------------------------------------------------\n('Mannheim', {'Mannheim': ['Mannheim'], 'Frankfurt': ['Mannheim', 'Frankfurt'], 'Karlsruhe': ['Mannheim', 'Karlsruhe'], 'Augsburg': ['Mannheim', 'Karlsruhe', 'Augsburg'], 'Kassel': ['Mannheim', 'Frankfurt', 'Kassel'], 'Wurzburg': ['Mannheim', 'Frankfurt', 'Wurzburg'], 'Munchen': ['Mannheim', 'Karlsruhe', 'Augsburg', 'Munchen'], 'Erfurt': ['Mannheim', 'Frankfurt', 'Wurzburg', 'Erfurt'], 'Numberg': ['Mannheim', 'Frankfurt', 'Wurzburg', 'Numberg'], 'Stuttgart': ['Mannheim', 'Frankfurt', 'Wurzburg', 'Numberg', 'Stuttgart']})('Frankfurt', {'Frankfurt': ['Frankfurt'], 'Mannheim': ['Frankfurt', 'Mannheim'], 'Kassel': ['Frankfurt', 'Kassel'], 'Wurzburg': ['Frankfurt', 'Wurzburg'], 'Karlsruhe': ['Frankfurt', 'Mannheim', 'Karlsruhe'], 'Augsburg': ['Frankfurt', 'Mannheim', 'Karlsruhe', 'Augsburg'], 'Munchen': ['Frankfurt', 'Wurzburg', 'Numberg', 'Munchen'], 'Erfurt': ['Frankfurt', 'Wurzburg', 'Erfurt'], 'Numberg': ['Frankfurt', 'Wurzburg', 'Numberg'], 'Stuttgart': ['Frankfurt', 'Wurzburg', 'Numberg', 'Stuttgart']})....\n```", "```py\n# nx.minimum_spanning_tree(g) returns a instance of type graph\nnx.draw_networkx(nx.minimum_spanning_tree(g))\n```", "```py\n# reading the datasetfb = nx.read_edgelist('../input/facebook-combined.txt', create_using = nx.Graph(), nodetype = int)\n```", "```py\npos = nx.spring_layout(fb)import warnings\nwarnings.filterwarnings('ignore')plt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (20, 15)\nplt.axis('off')\nnx.draw_networkx(fb, pos, with_labels = False, node_size = 35)\nplt.show()\n```", "```py\npageranks = nx.pagerank(fb)\nprint(pageranks)\n------------------------------------------------------\n{0: 0.006289602618466542,\n 1: 0.00023590202311540972,\n 2: 0.00020310565091694562,\n 3: 0.00022552359869430617,\n 4: 0.00023849264701222462,\n........}\n```", "```py\nimport operator\nsorted_pagerank = sorted(pagerank.items(), key=operator.itemgetter(1),reverse = True)\nprint(sorted_pagerank)\n------------------------------------------------------\n[(3437, 0.007614586844749603), (107, 0.006936420955866114), (1684, 0.0063671621383068295), (0, 0.006289602618466542), (1912, 0.0038769716008844974), (348, 0.0023480969727805783), (686, 0.0022193592598000193), (3980, 0.002170323579009993), (414, 0.0018002990470702262), (698, 0.0013171153138368807), (483, 0.0012974283300616082), (3830, 0.0011844348977671688), (376, 0.0009014073664792464), (2047, 0.000841029154597401), (56, 0.0008039024292749443), (25, 0.000800412660519768), (828, 0.0007886905420662135), (322, 0.0007867992190291396),......]\n```", "```py\nfirst_degree_connected_nodes = list(fb.neighbors(3437))\nsecond_degree_connected_nodes = []\nfor x in first_degree_connected_nodes:\n    second_degree_connected_nodes+=list(fb.neighbors(x))\nsecond_degree_connected_nodes.remove(3437)\nsecond_degree_connected_nodes = list(set(second_degree_connected_nodes))subgraph_3437 = nx.subgraph(fb,first_degree_connected_nodes+second_degree_connected_nodes)pos = nx.spring_layout(subgraph_3437)node_color = ['yellow' if v == 3437 else 'red' for v in subgraph_3437]\nnode_size =  [1000 if v == 3437 else 35 for v in subgraph_3437]\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (20, 15)\nplt.axis('off')nx.draw_networkx(subgraph_3437, pos, with_labels = False, node_color=node_color,node_size=node_size )\nplt.show()\n```", "```py\npos = nx.spring_layout(subgraph_3437)\nbetweennessCentrality = nx.betweenness_centrality(subgraph_3437,normalized=True, endpoints=True)node_size =  [v * 10000 for v in betweennessCentrality.values()]\nplt.figure(figsize=(20,20))\nnx.draw_networkx(subgraph_3437, pos=pos, with_labels=False,\n                 node_size=node_size )\nplt.axis('off')\n```"]