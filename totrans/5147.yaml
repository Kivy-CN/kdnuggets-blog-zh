- en: 10 Essential SQL Commands for Data Science
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学的10个基本SQL命令
- en: 原文：[https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html](https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html](https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html)
- en: '![10 Essential SQL Commands for Data Science](../Images/93b5f1ae3a5afebae36da396cd2653c7.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![数据科学的10个基本SQL命令](../Images/93b5f1ae3a5afebae36da396cd2653c7.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: It is a new day to learn SQL commands that will help you in your data science
    career. You will use SQL query to extract, save, and modify the database to your
    requirements.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这是学习SQL命令的新一天，这些命令将帮助你在数据科学职业中。你将使用SQL查询来提取、保存和修改数据库以满足你的需求。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: So, what is stopping you from learning the most used command for extracting
    the data and performing a quick analysis on a SQL database?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，是什么阻止你学习提取数据和在SQL数据库上执行快速分析的最常用命令呢？
- en: 'In this post, we will learn essential SQL commands with code examples using
    [Online SQL Editor](https://www.programiz.com/sql/online-compiler/). It allows
    users to run online queries without any issues. The platform comes with an editor
    and 3 SQL tables for practice. The database consists of three tables: **Customers**,
    **Orders**, and **Shippings**.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将通过使用[在线SQL编辑器](https://www.programiz.com/sql/online-compiler/)学习基本SQL命令及代码示例。它允许用户在线运行查询而不会遇到问题。该平台提供了一个编辑器和三个用于练习的SQL表。数据库包括三个表：**Customers**、**Orders**和**Shippings**。
- en: SELECT
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择
- en: DISTINCT
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 唯一
- en: WHERE
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 条件
- en: LIKE
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: LIKE
- en: ORDER BY
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序排列
- en: AS
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为
- en: JOIN
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接
- en: UNION
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: UNION
- en: GROUP BY
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按组
- en: CASE
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CASE
- en: SELECT
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择
- en: The SELECT command allows us to extract the selective or all columns from the
    table. It is the basic building block of SQL queries.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: SELECT命令允许我们从表中提取选择的或所有列。这是SQL查询的基本构建块。
- en: In our case, we are displaying all of the columns using `*` from the **Customer**
    table.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们使用`*`从**Customer**表中显示所有列。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| **客户编号** | **名** | **姓** | **年龄** | **国家** |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: '| 2 | Robert | Luna | 22 | USA |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Robert | Luna | 22 | 美国 |'
- en: '| 3 | David | Robinson | 22 | UK |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 3 | David | Robinson | 22 | 英国 |'
- en: '| 4 | John | Reinhardt | 25 | UK |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 4 | John | Reinhardt | 25 | 英国 |'
- en: '| 5 | Betty | Doe | 28 | UAE |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Betty | Doe | 28 | 阿联酋 |'
- en: In the second example, we are displaying only three columns from the **Customers**
    table. You can type column names separated by commas “,” and end it with **FROM**
    command and the table name.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个示例中，我们只展示了**Customers**表中的三列。你可以输入用逗号“，”分隔的列名，并以**FROM**命令和表名结束。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| **first_name** | **last_name** | **country** |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **名** | **姓** | **国家** |'
- en: '| John | Doe | USA |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| John | Doe | 美国 |'
- en: '| Robert | Luna | USA |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| Robert | Luna | 美国 |'
- en: '| David | Robinson | UK |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| David | Robinson | 英国 |'
- en: '| John | Reinhardt | UK |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| John | Reinhardt | 英国 |'
- en: '| Betty | Doe | UAE |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| Betty | Doe | 阿联酋 |'
- en: DISTINCT
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 唯一
- en: The DISTINCT is used to display unique values from the column. Instead of showing
    two Johns, it is now showing one John.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: DISTINCT用于显示列中的唯一值。它现在只显示一个John，而不是两个John。
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| **first_name** |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| **名** |'
- en: '| John |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| John |'
- en: '| Robert |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| Robert |'
- en: '| David |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| David |'
- en: '| Betty |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Betty |'
- en: WHERE
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 条件
- en: The WHERE command is used for conditional and filtering. We will be filtering
    the table to show customers with age greater than 25\. Apart from greater than
    you can also use lesser than **<**, lesser than or equal to **<=**, greater than
    or equal to **>=**, and equal **=**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: WHERE命令用于条件和过滤。我们将过滤表以显示年龄大于25的客户。除了大于，你还可以使用小于**<**、小于或等于**<=**、大于或等于**>=**和等于**=**。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The results show that we have only two customers with the age greater than 25.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示我们只有两个年龄大于25的客户。
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: '| 5 | Betty | Doe | 28 | UAE |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Betty | Doe | 28 | 阿联酋 |'
- en: You can also combine two or more than two using **AND**, **OR**, **BETWEEN**,
    and **IN**. In our case, we are looking for customers based in the USA with the
    age greater than 25.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用**AND**、**OR**、**BETWEEN**和**IN**来组合两个或多个条件。在我们的案例中，我们正在寻找年龄大于25的美国客户。
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: LIKE
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LIKE
- en: The LIKE command is used for string filtering. You will provide the expression
    and it will use it to find the values that are matching the expression. For example,
    if you want all the names that start with J use “J%”. To find the name that ends
    with J we will use “%J”. It is pretty simple.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: LIKE命令用于字符串过滤。你提供表达式，它将用来查找匹配该表达式的值。例如，如果你想要所有以J开头的名字，可以使用“J%”。要查找以J结尾的名字，我们将使用“%J”。这很简单。
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: '| 4 | John | Reinhardt | 25 | UK |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 4 | John | Reinhardt | 25 | 英国 |'
- en: Let’s try finding the customer whose **first_name** starts with “J” and **last_name**
    ends with “e”. You can check out all of the other ways to create expressions for
    your particular situation by reading the [SQL LIKE Operator Examples](/2022/09/sql-like-operator-examples.html)
    tutorial.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试查找**first_name**以“J”开头且**last_name**以“e”结尾的客户。你可以通过阅读[SQL LIKE 操作符示例](/2022/09/sql-like-operator-examples.html)教程来了解更多创建表达式的其他方法。
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: '| 4 | John | Reinhardt | 25 | UK |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 4 | John | Reinhardt | 25 | 英国 |'
- en: '| 5 | Betty | Doe | 28 | UAE |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Betty | Doe | 28 | 阿联酋 |'
- en: ORDER BY
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ORDER BY
- en: The ORDER BY is used for sorting the query results. We have used ORDER BY to
    sort the result based on **first_name** in ascending order.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: ORDER BY用于对查询结果进行排序。我们使用ORDER BY对结果进行基于**first_name**的升序排序。
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
- en: '| 5 | Betty | Doe | 28 | UAE |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Betty | Doe | 28 | 阿联酋 |'
- en: '| 3 | David | Robinson | 22 | UK |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 3 | David | Robinson | 22 | 英国 |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: '| 4 | John | Reinhardt | 25 | UK |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 4 | John | Reinhardt | 25 | 英国 |'
- en: '| 2 | Robert | Luna | 22 | USA |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Robert | Luna | 22 | 美国 |'
- en: You can try to sort the results in decreasing order by using **DESC** at the
    end.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试使用**DESC**在末尾对结果进行降序排序。
- en: '[PRE8]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
- en: '| 2 | Robert | Luna | 22 | USA |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Robert | Luna | 22 | 美国 |'
- en: '| 1 | John | Doe | 31 | USA |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John | Doe | 31 | 美国 |'
- en: '| 4 | John | Reinhardt | 25 | UK |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 4 | John | Reinhardt | 25 | 英国 |'
- en: '| 3 | David | Robinson | 22 | UK |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 3 | David | Robinson | 22 | 英国 |'
- en: '| 5 | Betty | Doe | 28 | UAE |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Betty | Doe | 28 | 阿联酋 |'
- en: AS
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AS
- en: The AS command is used for creating aliases or renaming the column names. In
    the example below, we are renaming “customer_id” with “ID” and “first_name” with
    “Name”.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: AS命令用于创建别名或重命名列名。在下面的示例中，我们将“customer_id”重命名为“ID”，将“first_name”重命名为“Name”。
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| **ID** | **Name** |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| **ID** | **Name** |'
- en: '| 1 | John |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| 1 | John |'
- en: '| 2 | Robert |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Robert |'
- en: '| 3 | David |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| 3 | David |'
- en: '| 4 | John |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 4 | John |'
- en: '| 5 | Betty |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 5 | Betty |'
- en: JOIN
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JOIN
- en: You will be joining multiple tables for data analysis and it is quite easy.
    Just use **LEFT JOIN**, **INNER JOIN**, **RIGHT JOIN**, or **FULL JOIN** after
    the first table. Write the second table name followed by **ON** to join tables
    on certain columns. In our case, both tables have a common column called **customer_id**.
    We will join the table using both column names with “==” sign.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 你将联接多个表进行数据分析，这非常简单。只需在第一个表后使用**LEFT JOIN**、**INNER JOIN**、**RIGHT JOIN**或**FULL
    JOIN**。写下第二个表的名称，然后跟上**ON**来在特定列上联接表。在我们的案例中，两个表都有一个名为**customer_id**的公共列。我们将使用“==”符号联接这两个表的列名。
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| **first_name** | **item** | **amount** |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| **first_name** | **item** | **amount** |'
- en: '| John | Keyboard | 400 |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| John | Keyboard | 400 |'
- en: '| Robert | Mousepad | 250 |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| Robert | Mousepad | 250 |'
- en: '| David | Monitor | 12000 |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| David | Monitor | 12000 |'
- en: '| John | Keyboard | 400 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| John | Keyboard | 400 |'
- en: '| John | Mouse | 300 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| John | Mouse | 300 |'
- en: '| Betty |  |  |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| Betty |  |  |'
- en: UNION
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UNION
- en: UNION is used for displaying two query results together. In the example, we
    are displaying “first_name” as “Name_item” from **Customer** table and “item”
    from **Orders** table together.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: UNION 用于将两个查询结果一起显示。在这个例子中，我们将**Customer**表中的“first_name”显示为“Name_item”，并将**Orders**表中的“item”一起显示。
- en: '**Note:** make sure both queries are displaying the same number of columns.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 确保两个查询显示相同数量的列。'
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, the results have both first_name from the **Customers** and
    item from **Orders**. The column is sorted from A-Z.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，结果包含了**Customers**表中的 first_name 和 **Orders** 表中的 item。列按 A-Z 排序。
- en: '| **Name_item** |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| **Name_item** |'
- en: '| Betty |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| Betty |'
- en: '| David |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| David |'
- en: '| John |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| John |'
- en: '| Keyboard |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| Keyboard |'
- en: '| Monitor |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| Monitor |'
- en: '| Mouse |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
  zh: '| Mouse |'
- en: '| Mousepad |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| Mousepad |'
- en: '| Robert |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| Robert |'
- en: GROUP BY
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GROUP BY
- en: GROUP By command is frequently used in data analytical tasks. You can group
    any columns and get a better understanding of data distribution.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: GROUP BY 命令在数据分析任务中经常使用。你可以对任意列进行分组，从而更好地理解数据分布。
- en: 'The GROUP BY requires aggregate functions:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GROUP BY 需要聚合函数：
- en: 'COUNT: total number of rows'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'COUNT: 总行数'
- en: 'SUM: sum of all the values'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'SUM: 所有值的总和'
- en: 'MAX: maximum value'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MAX: 最大值'
- en: 'MIN: minimum value'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'MIN: 最小值'
- en: 'AVG: average value'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'AVG: 平均值'
- en: You can use aggregate functions and GROUP BY to combine values into  categories
    within the columns. In the example below, we will SUM the amount and group it
    by item names.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用聚合函数和 GROUP BY 将列中的值合并为类别。在下面的示例中，我们将对金额进行 SUM 聚合，并按 item 名称进行分组。
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: A single keyboard cost 400 and we have sold 2 keyboards. It has summed it to
    display 800\. I know it is a simple example, but this is a start.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 单个键盘的价格是 400，我们售出了 2 个键盘。它将其加总显示为 800。我知道这是一个简单的例子，但这是一个开始。
- en: '| **item** | **SUM(amount)** |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| **item** | **SUM(amount)** |'
- en: '| Keyboard | 800 |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| Keyboard | 800 |'
- en: '| Monitor | 12000 |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| Monitor | 12000 |'
- en: '| Mouse | 300 |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| Mouse | 300 |'
- en: '| Mousepad | 250 |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| Mousepad | 250 |'
- en: CASE
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CASE
- en: The CASE command is similar to **if-else statements** in Python or any other
    language. We will use it to create categories based on the conditions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: CASE 命令类似于 Python 或其他语言中的**if-else 语句**。我们将用它来根据条件创建类别。
- en: If the amount is less than 1000 return ‘Low’ else return ‘High’.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果金额小于 1000，返回 ‘Low’，否则返回 ‘High’。
- en: The command starts with **CASE** and ends with **END** and the column name.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令以**CASE**开头，以**END**和列名结尾。
- en: '**If** is replaced with **WHEN** and **else** is replaced with **ELSE.**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**If** 被替换为 **WHEN**，**else** 被替换为 **ELSE**。'
- en: '[PRE13]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '| **item** | **amount** | **Priority** |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| **item** | **amount** | **Priority** |'
- en: '| Keyboard | 400 | Low |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| Keyboard | 400 | Low |'
- en: '| Mouse | 300 | Low |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| Mouse | 300 | Low |'
- en: '| Monitor | 12000 | High |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| Monitor | 12000 | High |'
- en: '| Keyboard | 400 | Low |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| Keyboard | 400 | Low |'
- en: '| Mousepad | 250 | Low |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| Mousepad | 250 | Low |'
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    是一位认证的数据科学专业人士，热衷于构建机器学习模型。目前，他专注于内容创作和撰写关于机器学习和数据科学技术的技术博客。Abid 拥有技术管理硕士学位和电信工程学士学位。他的愿景是使用图神经网络为那些受精神疾病困扰的学生构建人工智能产品。'
- en: More On This Topic
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题更多内容
- en: '[16 Essential DVC Commands for Data Science](https://www.kdnuggets.com/2022/07/16-essential-dvc-commands-data-science.html)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学的16个基本DVC命令](https://www.kdnuggets.com/2022/07/16-essential-dvc-commands-data-science.html)'
- en: '[14 Essential Git Commands for Data Scientists](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的14个基本Git命令](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)'
- en: '[12 Essential Commands for Streamlit](https://www.kdnuggets.com/2023/01/12-essential-commands-streamlit.html)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Streamlit的12个基本命令](https://www.kdnuggets.com/2023/01/12-essential-commands-streamlit.html)'
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，6月29日：数据科学的20个基本Linux命令…](https://www.kdnuggets.com/2022/n26.html)'
- en: '[20 Basic Linux Commands for Data Science Beginners](https://www.kdnuggets.com/2022/06/20-basic-linux-commands-data-science-beginners.html)'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学初学者的20个基本Linux命令](https://www.kdnuggets.com/2022/06/20-basic-linux-commands-data-science-beginners.html)'
- en: '[12 Docker Commands Every Data Scientist Should Know](https://www.kdnuggets.com/2023/01/12-docker-commands-every-data-scientist-know.html)'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应了解的 12 个 Docker 命令](https://www.kdnuggets.com/2023/01/12-docker-commands-every-data-scientist-know.html)'
