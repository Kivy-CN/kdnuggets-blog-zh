- en: How to solve machine learning problems in the real world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/09/solve-machine-learning-problems-real-world.html](https://www.kdnuggets.com/2021/09/solve-machine-learning-problems-real-world.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Pau Labarta Bajo](https://www.linkedin.com/in/pau-labarta-bajo-4432074b/),
    mathematician and data scientist**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6a20df68ee56f752143d201f851ed063.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: So, you want to become a professional machine learning engineer? Tempted to
    take (yet another) online course on ML to land that first job
  prefs: []
  type: TYPE_NORMAL
- en: Online courses on Machine Learning and Kaggle-style competitions are great resources
    to learn the fundamentals of machine learning. However, the daily job of a machine
    learning engineer requires an additional layer of skills that you won’t master
    there.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, I will give you 4 tips to help you solve ML problems in the
    real world. I have learned them (the hard way) while working as a freelance ML
    engineer at [Toptal](https://www.toptal.com/Bxdpg6/worlds-top-talent). By the
    way, if you would also like to work on a freelance basis (highly recommended!)
    you can check my [blog post on how to become one](http://datamachines.xyz/2021/05/18/how-to-become-a-freelance-data-scientist/).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/120eed67351db4fadcfb3354a9029092.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Photo by [Valdemaras D.](https://www.pexels.com/@valdemaras-d-784301?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [Pexels](https://www.pexels.com/photo/two-people-on-mountain-cliff-1647962/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels).*'
  prefs: []
  type: TYPE_NORMAL
- en: The gap between machine learning courses and practice
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Completing many online courses on ML seems like a safe path to learning. You
    follow along with the course code on Convolutional Nets, you implement yourself,
    and voila! You become an expert in Computer Vision!
  prefs: []
  type: TYPE_NORMAL
- en: Well, you don’t.
  prefs: []
  type: TYPE_NORMAL
- en: You are missing 4 key skills to build successful ML solutions in a professional
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Understand the business problem first, then frame it as a Machine Learning
    problem.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you follow an online course or participate in a Kaggle competition, you
    do not need to define the ML problem to solve.
  prefs: []
  type: TYPE_NORMAL
- en: You are told what to solve for (e.g., predict house prices) and how to measure
    how close you are to a good solution (e.g., mean squared error of the model predictions
    vs. actual prices). They also give you all the data and tell you what the features
    are, and what is the target metric to predict.
  prefs: []
  type: TYPE_NORMAL
- en: Given all this information, you jump straight into the solution space. You quickly
    explore the data and start training model after model, hoping that after each
    submission, you climb a few steps in the public leaderboard. Technical minds,
    like software and ML engineers, love to build things. I include myself in this
    group. We do that even before we understand the problem we need to solve. We know
    the tools, and we have quick fingers, so we jump straight into the solution space
    (aka the HOW) before taking the time to understand the problem we have in front
    of us (aka the WHAT).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you work as a professional data scientist or ML engineer, you need to
    think of a few things before building any model. I always ask 3 questions at the
    beginning of every project:'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the business outcome that management wants to improve? Is there a
    clear metric for that, or do I need to find proxy metrics that make my life easier?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is crucial you talk with all relevant stakeholders at the beginning of the
    project. They often have much more business context than you and can greatly help
    you understand what the target you need to shoot at is. In the industry, it is
    better to build an okay-ish solution for the right problem than a brilliant solution
    for the wrong problem. Academic research is often the opposite.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer this first question, and you will know the target metric of your ML problem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is there any solution currently working in production to solve this, like
    another model or even some rule-based heuristics?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is one, this is the benchmark you have to beat in order to have a business
    impact. Otherwise, you can have a quick win by implementing a non-ML solution.
    Sometimes you can implement a quick and simple heuristic that already brings an
    impact. In the industry, an okay-ish solution today is better than a brilliant
    solution in 2 months.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer this second question, and you will understand how good the performance
    of your models needs to be in order to make an impact.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Is the model going to be used as a black-box predictor? Or do we intend to
    use it as a tool to assist humans in making better decisions?**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating black-box solutions is easier than explainable ones. For example, if
    you want to build a Bitcoin trading bot, you only care about the estimated profit
    it will generate. You backtest its performance and see if this strategy brings
    you value. Your plan is to deploy the bot, monitor its daily performance, and
    shut it down in case it makes you lose money. You are not trying to understand
    the market by looking at your model. On the other hand, if you create a model
    to help doctors improve their diagnosis, you need to create a model whose predictions
    can be easily explained to them. Otherwise, that 95% prediction accuracy you might
    achieve is going to be of no use.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer this third question, and you will know if you need to spend extra time
    working on the explainability, or you can focus entirely on maximizing accuracy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Answer these 3 questions, and you will understand WHAT the ML problem you need
    to solve is.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Focus on getting more and better data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In online courses and Kaggle competitions, the organizers give you all the data.
    In fact, all participants use the same data and compete against each other on
    who has the better model. The focus is on models, not on the data.
  prefs: []
  type: TYPE_NORMAL
- en: In your job, the exact opposite will happen. Data is the most valuable asset
    you have that sets apart successful from unsuccessful ML projects. Getting more
    and better data for your model is the most effective strategy to improve its performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'This means two things:'
  prefs: []
  type: TYPE_NORMAL
- en: '**You need to talk (a lot) with the data engineering guys.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They know where each bit of data is. They can help you fetch it and use it to
    generate useful features for your model. Also, they can build the data ingestion
    pipelines to add 3rd party data that can increase the performance of the model.
    Keep a good and healthy relationship, go for a beer once in a while, and your
    job is going to be easier, much easier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**You need to be fluent in SQL.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most universal language to access data is SQL, so you need to be fluent
    at it. This is especially true if you work in a less data-evolved environment,
    like a startup. Knowing SQL lets you quickly build the training data for your
    models, extend it, fix it, etc. Unless you work in a super-developed tech company
    (like Facebook, Uber, and similar) with internal feature stores, you will spend
    a fair amount of time writing SQL. So better be good at it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Machine Learning models are a combination of software (e.g., from a simple logistic
    regression all the way to a colossal Transformer) and DATA (capital letters, yes).
    Data is what makes projects successful or not, not models.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Structure your code well
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/cbde8c0eec35912fe01ad79956600325.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Photo by [Igor Starkov](https://www.pexels.com/@igor-starkov-233202?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [Pexels](https://www.pexels.com/photo/photo-of-people-on-building-under-construction-1117452/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels).*'
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter notebooks are great to quickly prototype and test ideas. They are great
    for fast iteration in the development stage. Python is a language designed for
    fast iterations, and Jupyter notebooks are the perfect match.
  prefs: []
  type: TYPE_NORMAL
- en: However, notebooks quickly get crowded and unmanageable.
  prefs: []
  type: TYPE_NORMAL
- en: This is not a problem when you train the model once and submit it to a competition
    or online course. However, when you develop ML solutions in the real world, you
    need to do more than just training the model once.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two important aspects that you are missing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**You must deploy your models and make them accessible to the rest of the company.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Models that are not easily deployed do not bring value. In the industry, an
    okay-ish model that can be easily deployed is better than the latest colossal-Transformer
    that no one knows how to deploy.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**You must re-train models to avoid concept drift.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data in the real-world changes over time. Whatever model you train today is
    going to be obsolete in a few days, weeks, or months (depending on the speed of
    change of the underlying data). In the industry, an okay-ish model trained with
    recent data is better than a fantastic model trained with data from the good-old-days.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'I strongly recommend packaging your Python code from the beginning. I directory
    structure that works well for me is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[Poetry](https://python-poetry.org/) is my favorite packaging tool in Python.
    With just 3 commands you can generate most of this folder structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'I like to keep separate directories for the common elements to all ML projects:
    *data*, *queries*, *Jupyter notebooks*, and *serialized models* generated by the
    training script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: I recommend adding a `.gitignore` file to exclude `data` and `models` from source
    control, as they contain potentially huge files.
  prefs: []
  type: TYPE_NORMAL
- en: 'When it comes to the source code in `src`/ I like to keep it simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**data.py**` is the script that generates the training data, usually by quering
    an SQL-type DB. It is very important to have a clean and reproducible way to generate
    training data, otherwise you will end up wasting time trying to understand data
    inconsistencies between different training sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**features.py**` contains the feature pre-processing and engineering that
    most models require. This includes things like imputing missing valus, encoding
    of categorical variables, adding transformations of existing variables, etc. I
    love to use and recommend [scikit-learn dataset transformation API](https://scikit-learn.org/stable/data_transforms.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**train.py**` is the training script that splits data into train, validation,
    test sets, and fits an ML model, possibly with hyper-parameter optimization. The
    final model is saved as an artifact under `models/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**inference.py**` is a Flask or FastAPI app that wraps your model as a REST
    API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you structure your code as a Python package your Jupyter notebooks do not
    contain tons of function declarations. Instead, these are defined inside `src`
    and you can load them into the notebook using statements like `from src.train
    import train`.
  prefs: []
  type: TYPE_NORMAL
- en: More importantly, clear code structure means healthier relationships with the
    DevOps guy that is helping you and faster releases of your work. Win-win.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Avoid deep learning at the beginning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nowadays, we often use the terms Machine Learning and Deep learning as synonyms.
    But they are not. Especially when you work on real-world projects.
  prefs: []
  type: TYPE_NORMAL
- en: Deep Learning models are state-of-the-art (SOTA) in every field of AI nowadays.
    But you do not need SOTA to solve most business problems.
  prefs: []
  type: TYPE_NORMAL
- en: Unless you are dealing with computer vision problems, where Deep Learning is
    the way to go, please do not use deep learning models from the start.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, you start an ML project, you fit your first model, say a logistic
    regression, and you see the model performance is not good enough to close the
    project. You think you should try more complex models and neural networks (aka
    deep learning) are the best candidates. After a bit of googling, you find a Keras/PyTorch
    code that seems appropriate for your data. You copy and paste it and try to train
    it with your data.
  prefs: []
  type: TYPE_NORMAL
- en: You will fail. Why? Neural networks are not plug-and-play solutions. They are
    the opposite of that. They have thousands/millions of parameters, and they are
    so flexible that they are a bit tricky to fit in your first shot. Eventually,
    if you spend a lot of time, you will make them work, but you will need to invest
    too much time.
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of out-of-the-box solutions, like the famous [XGBoost](https://xgboost.readthedocs.io/en/latest/)
    models, that work like a charm for many problems, especially for tabular data.
    Try them before you get into the Deep Learning territory.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cead50aa78dd5effd26d18212b140482.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The job of a professional ML engineer is more complex than what you will learn
    in any online course.
  prefs: []
  type: TYPE_NORMAL
- en: I would love to help you become one, so if you want to learn more go [subscribe
    to the *datamachines* newsletter](https://datamachines.xyz/subscribe/) or check
    out my [blog](http://datamachines.xyz/blog/)[.](http://datamachines.xyz/blog/)
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](http://datamachines.xyz/2021/08/13/how-to-solve-ml-problems-in-the-real-world/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: **[Pau Labarta Bajo](http://datamachines.xyz/) is a mathematician and
    data scientist with over 10 years of experience crunching numbers and models for
    different problems, including financial trading, mobile gaming, online shopping,
    and healthcare.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Advice for Learning Data Science from Google’s Director of Research](https://www.kdnuggets.com/2021/07/google-advice-learning-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Five types of thinking for a high performing data scientist](https://www.kdnuggets.com/2021/06/five-types-thinking-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A checklist to track your Data Science progress](https://www.kdnuggets.com/2021/05/checklist-data-science-progress.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Data Science Projects That Can Help You Solve Real World Problems](https://www.kdnuggets.com/2022/11/data-science-projects-help-solve-real-world-problems.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Are Kaggle Competitions Useful for Real World Problems?](https://www.kdnuggets.com/are-kaggle-competitions-useful-for-real-world-problems)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Want to Use Your Data Skills to Solve Global Problems? Here’s What…](https://www.kdnuggets.com/2022/04/jhu-want-data-skills-solve-global-problems.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Range of NLP Applications in the Real World: A Different…](https://www.kdnuggets.com/2022/03/different-solution-problem-range-nlp-applications-real-world.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Overcoming Imbalanced Data Challenges in Real-World Scenarios](https://www.kdnuggets.com/2023/07/overcoming-imbalanced-data-challenges-realworld-scenarios.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Demystifying Decision Trees for the Real World](https://www.kdnuggets.com/demystifying-decision-trees-for-the-real-world)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
