["```py\nLinear Model (in TF notation): y = tf.matmul(x,W) + b\n```", "```py\nCost function (in TF notation): tf.reduce_mean(tf.square(y_ - y))\n```", "```py\n# ... (snip) Variable/Constants declarations (snip) ...\n\n# [A] TF.Graph\ny = tf.matmul(x,W) + b\ncost = tf.reduce_mean(tf.square(y_-y))\n\n# [B] Train with fixed 'learn_rate'\nlearn_rate = 0.1\ntrain_step =\n    tf.train.GradientDescentOptimizer(learn_rate).minimize(cost)\n\nfor i in range(steps):\n  # [C] Prepare datapoints\n  # ... (snip) Code to prepare datapoint as xs, and ys (snip) ...\n\n  # [D] Feed Data at each step/epoch into 'train_step'\n  feed = { x: xs, y_: ys }\n  sess.run(train_step, feed_dict=feed)\n```"]