- en: 'Say Goodbye to Print(): Use Logging Module for Effective Debugging'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging](https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Say Goodbye to Print(): Use Logging Module](../Images/df8d7bf47fa27eaa8c487cb7ccb88789.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: Many of us start our programming journey with YouTube videos, and for the sake
    of simplicity, they often use `print()` statements to track bugs. That's fair
    enough, but as beginners adopt this habit, it can become problematic. Although
    these statements might work for simple scripts, as your codebase expands, this
    approach becomes highly inefficient. Therefore, in this article, I will introduce
    you to Python's built-in logging module, which solves this problem. We will see
    what logging is, how it differs from the `print()` statements, and we will also
    cover a practical example to fully understand its functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Why Use the Logging Module Instead of Print()?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we talk about debugging, the Python logging module provides much more detailed
    information than simple `print()` statements. This includes timestamps, module
    names, log levels, and line numbers where errors occurred, etc. These extra details
    help us understand the behavior of our code more effectively. The information
    we want to log depends on the needs of the application and the developer's preference.
    So, before we proceed further, let's discuss log levels and how to set them.
  prefs: []
  type: TYPE_NORMAL
- en: Logging Levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can control the amount of information you want to see using these log levels.
    Each log level has a numerical value that denotes its severity, with higher values
    indicating more severe events. For example, if you set your log level to `WARNING`,
    you're telling the logging module to only show you messages that are of `WARNING`
    level or higher. This means you won't see any `DEBUG`, `INFO`, or other less severe
    messages. This way, you can focus on the important events and ignore the noise
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a table that shows the details of what each log level represents:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Log Level | Numerical Value | Purpose |'
  prefs: []
  type: TYPE_TB
- en: '| DEBUG | 10 | Provides detailed information for diagnosing code-related issues,
    such as printing variable values and function call traces. |'
  prefs: []
  type: TYPE_TB
- en: '| INFO | 20 | Used to confirm that the program is working as expected, like
    displaying startup messages and progress indicators. |'
  prefs: []
  type: TYPE_TB
- en: '| WARNING | 30 | Indicates a potential problem that may not be critical to
    interrupt the program''s execution but could cause issues later on. |'
  prefs: []
  type: TYPE_TB
- en: '| ERROR | 40 | Represents an unexpected behavior of the code that impacts its
    functionality, such as exceptions, syntax errors, or out-of-memory errors. |'
  prefs: []
  type: TYPE_TB
- en: '| CRITICAL | 50 | Denotes a severe error that can lead to the termination of
    the program, like system crashes or fatal errors. |'
  prefs: []
  type: TYPE_TB
- en: Setting Up the Logging Module
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the logging module, you need to follow some steps for configuration.
    This includes creating a logger, setting the logging level, creating a formatter,
    and defining one or more handlers. A handler basically decides where to send your
    log messages, such as to the console or a file. Let''s start with a simple example.
    We''re going to set up the logging module to do two things: first, it''ll show
    messages on the console, giving us useful information (at the `INFO` level). Second,
    it''ll save more detailed messages to a file (at the `DEBUG` level). I''d love
    it if you could follow along!'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Setting the log level
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default level of the logger is set to `WARNING`. In our case, our two handlers
    are set to `DEBUG` and `INFO` levels. Hence, to ensure all messages are managed
    properly, we have to set the logger's level to the lowest level among all handlers,
    which, in this case, is `DEBUG`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Creating a Formatter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can personalize your log messages using formatters. These formatters decide
    how your log messages will look. Here, we will set up the formatter to include
    the timestamp, the log level, and the message content using the command below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Creating Handlers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As discussed previously, handlers manage where your log messages will be sent.
    We will create two handlers: a console handler to log messages to the console
    and a file handler to write log messages to a file named ''app.log''.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Both handlers are then added to the logger using the `addHandler()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Testing the Logging Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that our setup is complete, let''s test if it''s working correctly before
    moving to the real-life example. We can log some messages as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this code, you should see the log messages printed to the console
    and written to a file named ''app.log'', like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Console**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**app.log**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Logging User Activity in a Web Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this simple example, we will create a basic web application that logs user
    activity using Python''s logging module. This application will have two endpoints:
    one for logging successful login attempts and the other to document failed ones
    (`INFO` for success and `WARNING` for failures).'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Setting Up Your Environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before starting, set up your virtual environment and install Flask:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Creating a Simple Flask Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you send a POST request to the **/login** endpoint with a username and
    password parameter, the server will check if the credentials are valid. If they
    are, the logger records the event using logger.info() to signify a successful
    login attempt. However, if the credentials are invalid, the logger records the
    event as a failed login attempt using logger.error().
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Testing the Application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To test the application, run the Python script and access the **/login** endpoint
    using a web browser or a tool like curl. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Test Case 01**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Test Case 02**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**app.log**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'And that wraps up this article. I strongly suggest making logging a part of
    your coding routine. It''s a great way to keep your code clean and make debugging
    easier. If you want to dive deeper, you can explore the [Python logging documentation](https://docs.python.org/3/library/logging.html)
    for more features and advanced techniques. And if you''re eager to enhance your
    Python skills further, feel free to check out some of my other articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient
    Code](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Handle Missing Data with Scikit-learn''s Imputer Module](https://www.kdnuggets.com/how-to-handle-missing-data-with-scikit-learns-imputer-module)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Effective Testing for Machine Learning](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prepare Your Data for Effective Tableau & Power BI Dashboards](https://www.kdnuggets.com/2022/06/prepare-data-effective-tableau-power-bi-dashboards.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Fast and Effective Way to Audit ML for Fairness](https://www.kdnuggets.com/2023/01/fast-effective-way-audit-ml-fairness.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Visualization Best Practices & Resources for Effective Communication](https://www.kdnuggets.com/2023/04/data-visualization-best-practices-resources-effective-communication.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beyond Guesswork: Leveraging Bayesian Statistics for Effective…](https://www.kdnuggets.com/beyond-guesswork-leveraging-bayesian-statistics-for-effective-article-title-selection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
