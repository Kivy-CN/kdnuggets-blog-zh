- en: How To Trace Memory Allocation in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/how-to-trace-memory-allocation-in-python](https://www.kdnuggets.com/how-to-trace-memory-allocation-in-python)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How To Trace Memory Allocation in Python](../Images/481bb88f07de623188f862389f04cc66.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: When coding in Python, you don’t usually have to wrap your head around the details
    of memory allocation. But tracing memory allocation can be helpful, especially
    if you’re working with memory-intensive operations and large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Python’s [built-in tracemalloc module](https://docs.python.org/3/library/tracemalloc.html)
    comes with functions that’ll help you understand memory usage and debug applications.
    With tracemalloc, you can get where and how many blocks of memory have been allocated,
    take snapshots, compare differences between snapshots, and more.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll look at some of these in this tutorial. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Before You Begin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll use a simple Python script for data processing. For this, we’ll create
    a sample dataset and process it. Besides a recent version of Python, you also
    need pandas and NumPy in your working environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a virtual environment and activate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'And install the required libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can find the code for this tutorial [on GitHub](https://github.com/balapriyac/python-basics/tree/main/tracemalloc-tutorial).
  prefs: []
  type: TYPE_NORMAL
- en: Create a Sample Dataset with Order Details
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll generate a sample CSV file with order details. You can run the following
    script to create a CSV file with 100K order records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This script populates a pandas dataframe with 100K records with the following
    four features, and exports the dataframe to a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**OrderID**: Unique identifier for each order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CustomerID**: ID for the customer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OrderAmount**: The amount of each order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**OrderDate**: The date and time of the order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Trace Memory Allocation with tracemalloc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we’ll create a Python script to load and process the dataset. We’ll also
    trace memory allocations.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we define functions `load_data` and `process_data` to load and process
    records from the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then go ahead with tracing memory allocation by doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize the memory tracing with `tracemalloc.start()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `load_data()` function reads the CSV file into a dataframe. We take a snapshot
    of memory usage after this step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `process_data()` function adds two new columns to the dataframe: ''DiscountedAmount''
    and ''OrderYear''. We take another snapshot after processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We compare the two snapshots to find memory usage differences and print out
    the top memory-consuming lines.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And then print the current and peak memory usage to understand the overall impact.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here''s the corresponding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Now run the Python script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs the top memory-consuming lines as well as the current and peak
    memory usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using tracemalloc to trace memory allocation helps identify memory-intensive
    operations and potentially optimize performance using the memory trace and statistics
    returned.
  prefs: []
  type: TYPE_NORMAL
- en: You should be able to see if you can use more efficient data structures and
    processing methods to minimize memory usage. For long-running applications, you
    can use tracemalloc periodically to track memory usage. That said, you can always
    use tracemalloc in conjunction with other profiling tools to get a comprehensive
    view of memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in learning memory profiling with memory-profiler, read
    [Introduction to Memory Profiling in Python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python).
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Memory Profiling in Python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Perform Memory-Efficient Operations on Large Datasets with Pandas](https://www.kdnuggets.com/how-to-perform-memory-efficient-operations-on-large-datasets-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Memory Complexity with Transformers](https://www.kdnuggets.com/2022/12/memory-complexity-transformers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Enum: How To Build Enumerations in Python](https://www.kdnuggets.com/python-enum-how-to-build-enumerations-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
