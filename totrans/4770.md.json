["```py\npip install git+https://github.com/modelplot/modelplotpy.git\n\n```", "```py\nimport modelplotpy as mp\n\n```", "```py\nimport io\nimport os\nimport requests\nimport zipfile\nimport numpy as np\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\n#r = requests.get(\"https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank-additional.zip\")\n# we encountered that the source at uci.edu is not always available, therefore we made a copy to our repos.\nr = requests.get('https://modelplot.github.io/img/bank-additional.zip')\nz = zipfile.ZipFile(io.BytesIO(r.content))\n# You can change the path, currently the data is written to the working directory\npath = os.getcwd()\nz.extractall(path)\nbank = pd.read_csv(path + \"/bank-additional/bank-additional-full.csv\", sep = ';')\n\n# select the 6 columns\nbank = bank[['y', 'duration', 'campaign', 'pdays', 'previous', 'euribor3m']]\n# rename target class value 'yes' for better interpretation\nbank.y[bank.y == 'yes'] = 'term deposit'\n\n# dimensions of the data\nprint(bank.shape)\n\n# show the first rows of the dataset\nprint(bank.head())\n\n```", "```py\n(41188, 6)\n    y  duration  campaign  pdays  previous  euribor3m\n0  no       261         1    999         0      4.857\n1  no       149         1    999         0      4.857\n2  no       226         1    999         0      4.857\n3  no       151         1    999         0      4.857\n4  no       307         1    999         0      4.857\n\n```", "```py\n# to create predictive models\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\n# define target vector y\ny = bank.y\n# define feature matrix X\nX = bank.drop('y', axis = 1)\n\n# Create the necessary datasets to build models\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 2018)\n\n# Instantiate a few classification models\nclf_rf = RandomForestClassifier().fit(X_train, y_train)\nclf_mult = LogisticRegression(multi_class = 'multinomial', solver = 'newton-cg').fit(X_train, y_train)\n\n```", "```py\nC:\\Users\\nagelk000\\PycharmProjects\\testen_matplotpy\\venv\\lib\\site-packages\\sklearn\\ensemble\\weight_boosting.py:29: DeprecationWarning: numpy.core.umath_tests is an internal NumPy module and should not be imported. It will be removed in a future NumPy release.\n  from numpy.core.umath_tests import inner1d\n\n```", "```py\nobj = mp.modelplotpy(feature_data = [X_train, X_test]\n                     , label_data = [y_train, y_test]\n                     , dataset_labels = ['train data', 'test data']\n                     , models = [clf_rf, clf_mult]\n                     , model_labels = ['random forest', 'multinomial logit']\n                     )\n\n# transform data generated with prepare_scores_and_deciles into aggregated data for chosen plotting scope \nps = obj.plotting_scope(select_model_label = ['random forest'], select_dataset_label = ['test data'])\n\n```", "```py\nNo comparison specified! Single evaluation line will be plotted\nThe label with smallest class is ['term deposit']\nTarget value term deposit plotted for dataset test data and model random forest.\n\n```", "```py\n# plot the cumulative gains plot\nmp.plot_cumgains(ps)\n\n```", "```py\nThe cumulative gains plot is saved in C:\\Users\\nagelk000\\AppData\\Local\\Temp\\intro_modelplotpy.ipynb/Cumulative gains plot.png\n\n```", "```py\n<Figure size 432x288 with 0 Axes>\n```", "```py\n<matplotlib.axes._subplots.AxesSubplot at 0x1ca44358>\n```", "```py\n# plot the cumulative gains plot and annotate the plot at decile = 2\nmp.plot_cumgains(ps, highlight_decile = 2)\n\n```", "```py\nWhen we select 20% with the highest probability according to model random forest, this selection holds 80% of all term deposit cases in dataset test data.\nThe cumulative gains plot is saved in C:\\Users\\nagelk000\\AppData\\Local\\Temp\\intro_modelplotpy.ipynb/Cumulative gains plot.png\n\n```", "```py\n<Figure size 432x288 with 0 Axes>\n```", "```py\n<matplotlib.axes._subplots.AxesSubplot at 0x20596198>\n```"]