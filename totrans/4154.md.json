["```py\nimport datetime, re, sys, holidays\n\ndef process_date(input_str: str) -> {}:\n    \"\"\"Processes and engineers simple features for date strings\n\n    Parameters:\n      input_str (str): Date string of format '2021-07-14'\n\n    Returns:\n      dict: Dictionary of processed date features\n    \"\"\"\n\n    # Validate date string input\n    regex = re.compile(r'\\d{4}-\\d{2}-\\d{2}')\n    if not re.match(regex, input_str):\n        print(\"Invalid date format\")\n        sys.exit(1)\n\n    # Process date features\n    my_date = datetime.datetime.strptime(input_str, '%Y-%m-%d').date()\n    now = datetime.datetime.now().date()\n    date_feats = {}\n\n    date_feats['date'] = input_str\n    date_feats['year'] = my_date.strftime('%Y')\n    date_feats['year_s'] = my_date.strftime('%y')\n    date_feats['month_num'] = my_date.strftime('%m')\n    date_feats['month_text_l'] = my_date.strftime('%B')\n    date_feats['month_text_s'] = my_date.strftime('%b')\n    date_feats['dom'] = my_date.strftime('%d')\n    date_feats['doy'] = my_date.strftime('%j')\n    date_feats['woy'] = my_date.strftime('%W')\n\n    # Fixing day of week to start on Mon (1), end on Sun (7)\n    dow = my_date.strftime('%w')\n    if dow == '0': dow = 7\n    date_feats['dow_num'] = dow\n\n    if dow == '1':\n        date_feats['dow_text_l'] = 'Monday'\n        date_feats['dow_text_s'] = 'Mon'\n    if dow == '2':\n        date_feats['dow_text_l'] = 'Tuesday'\n        date_feats['dow_text_s'] = 'Tue'\n    if dow == '3':\n        date_feats['dow_text_l'] = 'Wednesday'\n        date_feats['dow_text_s'] = 'Wed'\n    if dow == '4':\n        date_feats['dow_text_l'] = 'Thursday'\n        date_feats['dow_text_s'] = 'Thu'\n    if dow == '5':\n        date_feats['dow_text_l'] = 'Friday'\n        date_feats['dow_text_s'] = 'Fri'\n    if dow == '6':\n        date_feats['dow_text_l'] = 'Saturday'\n        date_feats['dow_text_s'] = 'Sat'\n    if dow == '7':\n        date_feats['dow_text_l'] = 'Sunday'\n        date_feats['dow_text_s'] = 'Sun'\n\n    if int(dow) > 5:\n        date_feats['is_weekday'] = False\n        date_feats['is_weekend'] = True\n    else:\n        date_feats['is_weekday'] = True\n        date_feats['is_weekend'] = False\n\n    # Check date in relation to holidays\n    us_holidays = holidays.UnitedStates()\n    date_feats['is_holiday'] = input_str in us_holidays\n    date_feats['is_day_before_holiday'] = my_date + datetime.timedelta(days=1) in us_holidays\n    date_feats['is_day_after_holiday'] = my_date - datetime.timedelta(days=1) in us_holidays\n\n    # Days from today\n    date_feats['days_from_today'] = (my_date - now).days\n\n    return date_feats\n```", "```py\nimport pprint\nmy_date = process_date('2021-07-20')\npprint.pprint(my_date)\n```", "```py\n{'date': '2021-07-20',\n 'days_from_today': 6,\n 'dom': '20',\n 'dow_num': '2',\n 'dow_text_l': 'Tuesday',\n 'dow_text_s': 'Tue',\n 'doy': '201',\n 'is_day_after_holiday': False,\n 'is_day_before_holiday': False,\n 'is_holiday': False,\n 'is_weekday': True,\n 'is_weekend': False,\n 'month_num': '07',\n 'month_text_l': 'July',\n 'month_text_s': 'Jul',\n 'woy': '29',\n 'year': '2021',\n 'year_s': '21'}\n```", "```py\nimport pandas as pd\n\ndates = ['2021-01-01', '2020-04-04', '1993-05-11', '2002-07-19', '2024-11-03', '2050-12-25']\ndf = pd.DataFrame()\n\nfor d in dates:\n    my_date = process_date(d)\n    features = [my_date['date'],\n                my_date['year'],\n                my_date['month_num'],\n                my_date['month_text_s'],\n                my_date['dom'],\n                my_date['doy'],\n                my_date['woy'],\n                my_date['is_weekend'],\n                my_date['is_holiday'],\n                my_date['days_from_today']]\n    ds = pd.Series(features)\n    df = df.append(ds, ignore_index=True)\n\ndf.rename(columns={0: 'date',\n                   1: 'year',\n                   2: 'month_num',\n                   3: 'month',\n                   4: 'day_of_month',\n                   5: 'day_of_year',\n                   6: 'week_of_year',\n                   7: 'is_weekend',\n                   8: 'is_holiday',\n                   9: 'days_from_today'}, inplace=True)\n\ndf.set_index('date', inplace=True)\nprint(df)\n```", "```py\n            year month_num month day_of_month day_of_year week_of_year is_weekend  is_holiday  days_from_today\ndate                                                                                                          \n2021-01-01  2021        01   Jan           01         001          00         0.0         1.0           -194.0\n2020-04-04  2020        04   Apr           04         095          13         1.0         0.0           -466.0\n1993-05-11  1993        05   May           11         131          19         0.0         0.0         -10291.0\n2002-07-19  2002        07   Jul           19         200          28         0.0         0.0          -6935.0\n2024-11-03  2024        11   Nov           03         308          44         1.0         0.0           1208.0\n2050-12-25  2050        12   Dec           25         359          51         1.0         1.0          10756.0\n\n```"]