["```py\nfrom collections import Counter\n\n# 3) given an array of nearest neighbours for a test case, tally up their classes to vote on test case class\n\ndef get_majority_vote(neighbours):\n    # index 1 is the class\n    classes = [neighbour[1] for neighbour in neighbours]\n    count = Counter(classes)\n    return count.most_common()[0][0]\n\n```", "```py\n>>> Counter([7,7,7,6,6,9])\nCounter({7: 3, 6: 2, 9: 1})\n\n>>> Counter('bananas')\nCounter({'a': 3, 'n': 2, 's': 1, 'b': 1})\n\n```", "```py\n>>> Counter('bananas').most_common()\n[('a', 3), ('n', 2), ('s', 1), ('b', 1)]\n\n```", "```py\nfrom sklearn.metrics import classification_report, accuracy_score\n\n# setting up main executable method\ndef main():\n\n    # load the data and create the training and test sets\n    # random_state = 1 is just a seed to permit reproducibility of the train/test split\n    iris = load_iris()\n    X_train, X_test, y_train, y_test = cross_validation.train_test_split(iris.data, iris.target, test_size=0.4, random_state=1)\n\n    # reformat train/test datasets for convenience\n    train = np.array(zip(X_train,y_train))\n    test = np.array(zip(X_test, y_test))\n\n    # generate predictions\n    predictions = []\n\n    # let's arbitrarily set k equal to 5, meaning that to predict the class of new instances,\n    k = 5\n\n    # for each instance in the test set, get nearest neighbours and majority vote on predicted class\n    for x in range(len(X_test)):\n\n            print 'Classifying test instance number ' + str(x) + \":\",\n            neighbours = get_neighbours(training_set=train, test_instance=test[x][0], k=5)\n            majority_vote = get_majority_vote(neighbours)\n            predictions.append(majority_vote)\n            print 'Predicted label=' + str(majority_vote) + ', Actual label=' + str(test[x][1])\n\n    # summarize performance of the classification\n    print '\\nThe overall accuracy of the model is: ' + str(accuracy_score(y_test, predictions)) + \"\\n\"\n    report = classification_report(y_test, predictions, target_names = iris.target_names)\n    print 'A detailed classification report: \\n\\n' + report\n\nif __name__ == \"__main__\":\n    main()\n\n```", "```py\nfrom sklearn.datasets import load_iris\nfrom sklearn import cross_validation\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom operator import itemgetter\nimport numpy as np\nimport math\nfrom collections import Counter\n\n# 1) given two data points, calculate the euclidean distance between them\ndef get_distance(data1, data2):\n    points = zip(data1, data2)\n    diffs_squared_distance = [pow(a - b, 2) for (a, b) in points]\n    return math.sqrt(sum(diffs_squared_distance))\n\n# 2) given a training set and a test instance, use getDistance to calculate all pairwise distances\ndef get_neighbours(training_set, test_instance, k):\n    distances = [_get_tuple_distance(training_instance, test_instance) for training_instance in training_set]\n    # index 1 is the calculated distance between training_instance and test_instance\n    sorted_distances = sorted(distances, key=itemgetter(1))\n    # extract only training instances\n    sorted_training_instances = [tuple[0] for tuple in sorted_distances]\n    # select first k elements\n    return sorted_training_instances[:k]\n\ndef _get_tuple_distance(training_instance, test_instance):\n    return (training_instance, get_distance(test_instance, training_instance[0]))\n\n# 3) given an array of nearest neighbours for a test case, tally up their classes to vote on test case class\ndef get_majority_vote(neighbours):\n    # index 1 is the class\n    classes = [neighbour[1] for neighbour in neighbours]\n    count = Counter(classes)\n    return count.most_common()[0][0] \n\n# setting up main executable method\ndef main():\n\n    # load the data and create the training and test sets\n    # random_state = 1 is just a seed to permit reproducibility of the train/test split\n    iris = load_iris()\n    X_train, X_test, y_train, y_test = cross_validation.train_test_split(iris.data, iris.target, test_size=0.4, random_state=1)\n\n    # reformat train/test datasets for convenience\n    train = np.array(zip(X_train,y_train))\n    test = np.array(zip(X_test, y_test))\n\n    # generate predictions\n    predictions = []\n\n    # let's arbitrarily set k equal to 5, meaning that to predict the class of new instances,\n    k = 5\n\n    # for each instance in the test set, get nearest neighbours and majority vote on predicted class\n    for x in range(len(X_test)):\n\n            print 'Classifying test instance number ' + str(x) + \":\",\n            neighbours = get_neighbours(training_set=train, test_instance=test[x][0], k=5)\n            majority_vote = get_majority_vote(neighbours)\n            predictions.append(majority_vote)\n            print 'Predicted label=' + str(majority_vote) + ', Actual label=' + str(test[x][1])\n\n    # summarize performance of the classification\n    print '\\nThe overall accuracy of the model is: ' + str(accuracy_score(y_test, predictions)) + \"\\n\"\n    report = classification_report(y_test, predictions, target_names = iris.target_names)\n    print 'A detailed classification report: \\n\\n' + report\n\nif __name__ == \"__main__\":\n    main()\n\n```"]