- en: Search Millions of Documents for Thousands of Keywords in a Flash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/09/search-millions-documents-thousands-keywords.html](https://www.kdnuggets.com/2017/09/search-millions-documents-thousands-keywords.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png)[comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Vikash Singh](https://medium.com/@vi3k6i5), Belong.co**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5241db5938fde65ba36e10d1a424d7e7.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Say you have a document and you want to know if it talks about python (a term
    you care for)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You want to check if the document contains the word python or not. So you open
    the document, press ctr+f and search for ‘python’. And you find it :)
  prefs: []
  type: TYPE_NORMAL
- en: 'Now say you have 100 such terms: [python, java, github, medium, etc.]'
  prefs: []
  type: TYPE_NORMAL
- en: You will open the document with a simple python code. Loop through each term,
    and see if the term is present or not.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now say you have a 100 documents. Well you can open each document in a loop.
    Per document you search for each term in the document.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now say **java** should match **Java** but not **javascript**.
  prefs: []
  type: TYPE_NORMAL
- en: Better yet, **java** should match **j2ee** and **Java** both, but not **java
    script**.
  prefs: []
  type: TYPE_NORMAL
- en: '*(j2ee and java are synonyms, and did you notice the space in java script?)*'
  prefs: []
  type: TYPE_NORMAL
- en: Now it’s getting interesting. How do you do that?
  prefs: []
  type: TYPE_NORMAL
- en: We ran into this problem last year @[Belong.co](https://medium.com/@BelongCo).
    We noticed that people talk about the same terms in multiple ways. *Big apple* could
    be either a *big apple*or *New York*. Luckily for us, we had some context. When
    our documents talk about *Python,* they 99.99 % of the times mean the programming
    language, not the animal.
  prefs: []
  type: TYPE_NORMAL
- en: But this didn’t simplify our problem. **Java** and **j2ee** are the same thing
    for us, but not **java script**. So how to extract this information from millions
    of documents?
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine we wrote a *regex* based code. For 1 million documents and
    2K keywords the code took 24 hours to run. And life was good :)
  prefs: []
  type: TYPE_NORMAL
- en: But soon we expanded to multi million documents with 10K+ keywords. And the
    same code was now going to take 10+ days to run. So we set out to find a better
    way.
  prefs: []
  type: TYPE_NORMAL
- en: I asked around in my office and [Vinay](https://www.linkedin.com/in/vinay-pande-54810813/) suggested
    I should take a look at Trie dictionary based approach. [Suresh](https://www.linkedin.com/in/suresh-lakshmanan/) suggested [Aho
    Corasick algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm).
    Got similar suggestions on [Stack overflow](https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster).
  prefs: []
  type: TYPE_NORMAL
- en: Turns out, Aho Corasick algorithm can simultaneously search all keywords in
    one pass over the document. Now that is something.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://youtu.be/NQ8GeVCEgBs](https://youtu.be/NQ8GeVCEgBs)'
  prefs: []
  type: TYPE_NORMAL
- en: Demo of flashtext on a sample input.
  prefs: []
  type: TYPE_NORMAL
- en: I wrote a custom implementation based on Trie data structure to suit our use
    case. It worked quite well. The keyword extraction process takes 15 mins with
    this algorithm. Down from 10+ days with the *regex* based approach.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now Keyword extraction was working well. So I also added the capability to replace
    keyword with synonyms within the document.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We were able to take advantage of this library in multiple projects. That’s
    when we decided to **open source** it. So here is a link to the code :) [https://github.com/vi3k6i5/flashtext](https://github.com/vi3k6i5/flashtext)
  prefs: []
  type: TYPE_NORMAL
- en: It’s really simple to use: *[Python code coming up]*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And keyword replacement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is really useful because it helps in term expansion. Say you want to replace ***RC
    car***as ***Remote Control car***in product catalogue. Or say you want to extract ***Electrocardiogram*** as ***ECG. ***Both
    are easily doable.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: If you know someone who works on Entity recognition or NER or NLP or Word2vec,
    please share this blog with them. This library has been really useful for us in
    these areas. I am sure it would be useful to others also.
  prefs: []
  type: TYPE_NORMAL
- en: Cheers :)
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/@vi3k6i5/search-millions-of-documents-for-thousands-of-keywords-in-a-flash-b39e5d1e126a).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Vikash Singh](https://medium.com/@vi3k6i5)** is a data scientist at belong.co,
    dealing with large volumes of text and multiple projects based on word embeddings.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python overtakes R, becomes the leader in Data Science, Machine Learning platforms](/2017/08/python-overtakes-r-leader-analytics-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free Resources for Getting Started with Deep Learning for Natural Language
    Processing](/2017/07/5-free-resources-getting-started-deep-learning-nlp.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text Mining 101: Mining Information From A Resume](/2017/05/text-mining-information-resume.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Process a DataFrame with Millions of Rows in Seconds](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Hyperparameter Tuning Using Grid Search and Random Search in Python](https://www.kdnuggets.com/2022/10/hyperparameter-tuning-grid-search-random-search-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Elevate Your Search Engine Skills with Uplimit''s Search with ML Course!](https://www.kdnuggets.com/2023/10/uplimit-elevate-your-search-engine-skills-search-with-ml-course)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Visual Search Engine - Part 2: The Search Engine](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Classifying Long Text Documents Using BERT](https://www.kdnuggets.com/2022/02/classifying-long-text-documents-bert.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GPT4All is the Local ChatGPT for your Documents and it is Free!](https://www.kdnuggets.com/2023/06/gpt4all-local-chatgpt-documents-free.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
