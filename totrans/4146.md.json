["```py\nimport numpy as np\nfrom distfit import distfit\n\n# Generate 10000 normal distribution samples with mean 0, std dev of 3 \nX = np.random.normal(0, 3, 10000)\n\n# Initialize distfit\ndist = distfit()\n\n# Determine best-fitting probability distribution for data\ndist.fit_transform(X)\n```", "```py\n[distfit] >fit..\n[distfit] >transform..\n[distfit] >[norm      ] [0.00 sec] [RSS: 0.0004974] [loc=-0.002 scale=3.003]\n[distfit] >[expon     ] [0.00 sec] [RSS: 0.1595665] [loc=-12.659 scale=12.657]\n[distfit] >[pareto    ] [0.99 sec] [RSS: 0.1550162] [loc=-7033448.845 scale=7033436.186]\n[distfit] >[dweibull  ] [0.28 sec] [RSS: 0.0027705] [loc=-0.001 scale=2.570]\n[distfit] >[t         ] [0.25 sec] [RSS: 0.0004996] [loc=-0.002 scale=2.994]\n[distfit] >[genextreme] [0.64 sec] [RSS: 0.0010127] [loc=-1.105 scale=3.007]\n[distfit] >[gamma     ] [0.39 sec] [RSS: 0.0005046] [loc=-268.356 scale=0.034]\n[distfit] >[lognorm   ] [0.84 sec] [RSS: 0.0005159] [loc=-227.504 scale=227.485]\n[distfit] >[beta      ] [0.33 sec] [RSS: 0.0005016] [loc=-2746819.537 scale=2747059.862]\n[distfit] >[uniform   ] [0.00 sec] [RSS: 0.1103102] [loc=-12.659 scale=22.811]\n[distfit] >[loggamma  ] [0.73 sec] [RSS: 0.0005070] [loc=-554.304 scale=83.400]\n[distfit] >Compute confidence interval [parametric]\n```", "```py\n# Print summary of evaluated distributions\nprint(dist.summary)\n```", "```py\n         distr        score  LLE          loc        scale  \\\n0         norm  0.000497419  NaN  -0.00231781      3.00297   \n1            t  0.000499624  NaN  -0.00210365      2.99368   \n2         beta  0.000501588  NaN -2.74682e+06  2.74706e+06   \n3        gamma  0.000504569  NaN     -268.356    0.0336241   \n4     loggamma  0.000506987  NaN     -554.304      83.3997   \n5      lognorm   0.00051591  NaN     -227.504      227.485   \n6   genextreme   0.00101271  NaN     -1.10495      3.00708   \n7     dweibull   0.00277053  NaN  -0.00114977      2.56974   \n8      uniform      0.11031  NaN      -12.659      22.8107   \n9       pareto     0.155016  NaN -7.03345e+06  7.03344e+06   \n10       expon     0.159567  NaN      -12.659      12.6567   \n\n                                       arg  \n0                                       ()  \n1                     (323.7785925192121,)  \n2   (73202573.87887828, 6404.720016859684)  \n3                     (7981.006169767873,)  \n4                     (770.4368441223046,)  \n5                  (0.013180038142300822,)  \n6                   (0.25551845624380576,)  \n7                    (1.2640245435189867,)  \n8                                       ()  \n9                     (524920.1083231748,)  \n10                                      () \n```", "```py\n# Plot results\ndist.plot()\n```"]