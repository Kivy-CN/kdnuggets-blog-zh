- en: 14 Essential Git Commands for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![14 Essential Git Commands for Data Scientists](../Images/bc1e96a6b7d20a1e9400824cd14e2479.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [RealToughCandy.com](https://www.pexels.com/photo/man-love-people-woman-11035539/)
  prefs: []
  type: TYPE_NORMAL
- en: Historically, most data scientists are unaware of software development practices
    and tools such as version control systems. But, this is changing, data science
    projects are adopting best practices from software engineering, and Git has become
    an essential tool for file and data versioning. Modern data teams use it to collaborate
    on codebase projects and resolve conflicts faster.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In this post, we will learn about 14 essential Git commands that will help you
    initialize a project, create and merge branches, version the files, sync it with
    a remote server and monitor the changes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** make sure you have properly installed Git from the [official site](https://git-scm.com/downloads).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 1\. Initialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can initialize the Git version control system in the current directory
    by typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Or you can initialize Git in a specific directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![initialize Git in a specific directory](../Images/134072b98208116d3c05193c0944db4b.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. Clone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **clone** command will copy all of the project files from a remote server
    to the local machine. It will also add a remote name as `origin` to sync files
    with the remote server.
  prefs: []
  type: TYPE_NORMAL
- en: Git clone requires HTTPS link and for secure connection SSH link.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Adding Remote
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can connect to a single or multiple remote servers by adding the name of
    the remote and HTTPS/SSH address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Cloning a repository from GitHub or any remote server automatically
    adds remote as `origin`.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Create Branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Branches are the best way to work on a new feature or debug the code. It allows
    you to work in isolation without disturbing the `main` branch.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new branch using the **checkout** command with the `-b` tag and branch
    name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Or use **switch** with `-c` tag and branch name
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Or simply use **branch** command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Create Git Branch](../Images/e833ec961b40fe368ba8d4715abfd220.png)'
  prefs: []
  type: TYPE_IMG
- en: 5\. Switch Branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To switch a branch from current to a different branch, you can use the **checkout**
    or **switch** command followed by branch name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 6\. Pull
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To sync changes with a remote server, we need to first pull changes from the
    remote to the local repository by using the **pull** command. This is required
    when changes are made in a remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You can add a remote name followed by a branch name to pull a single branch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By default, the pull command fetches the changes and merges them with the current
    branch. To rebase, instead of merge, you can add the `--rebase` flag before the
    remote name and branch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use **add** command to add files into the staging area. It requires the filename
    or list of file names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can also add all files using the `.` or `-A` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After adding files to the staging area, you can create a version by using the
    **commit** command.
  prefs: []
  type: TYPE_NORMAL
- en: The commit command requires the title of the commit by using the `-m` flag.
    If you made multiple changes and want to list them all, add them to the description
    by using another `-m` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Git Commit](../Images/d4b0dfc7e8867355a9925c38126285c6.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Note:** Make sure you have configured your **username** and **email** before
    committing changes.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 9\. Push
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To sync local changes to remote servers using the **push** command. You can
    simply type `git push` to push the changes to the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: For pushing changes to a specific remote server and branche, use the command
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 10\. Undo Commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git **revert** undoes the changes back to a specific commit and adds it as a
    new commit, keeping the log intact. To revert, you need to provide a hash of a
    specific commit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: You can also undo changes by using the **reset** command. It reset the changes
    back to a specific commit, discarding all commits made after.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** Using reset command is discouraged as it modifies your git log history.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 11\. Merge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **merge** command will simply merge the changes of the specific branch into
    the current branch. The command requires a branch name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This command is quite handy when you are working with multiple branches and
    want to merge changes to the main branch.
  prefs: []
  type: TYPE_NORMAL
- en: 12\. Log
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To check the complete history of previous commits, you can use the **log** command.
  prefs: []
  type: TYPE_NORMAL
- en: To show the most recent logs, you can add `-` followed by the number, and it
    will show you a limited number of recent commit history.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example limit logs to 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: You can also check the commits made by specific authors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** git log has multiple flags to filter out specific types of commits.
    Check out full [documentation](https://www.git-scm.com/docs/git-log).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Git log](../Images/65d38b967464f4a3e64922c1f6c7c1df.png)'
  prefs: []
  type: TYPE_IMG
- en: 13\. Difference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the **diff** command will display the comparison between uncommitted changes
    with the current commit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For comparing two different commits, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'And for comparing two branches, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 14\. Status
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The command **status** displays the current status of the working directory.
    It includes information about changes to be committed, unmerged paths, changes
    not staged for commit, and the list of untracked files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** check out [Github and Git Tutorial for Beginners](https://www.datacamp.com/tutorial/github-and-git-tutorial-for-beginners)
    to learn more about version control systems in data science.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[16 Essential DVC Commands for Data Science](https://www.kdnuggets.com/2022/07/16-essential-dvc-commands-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Essential SQL Commands for Data Science](https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12 Essential Commands for Streamlit](https://www.kdnuggets.com/2023/01/12-essential-commands-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12 Docker Commands Every Data Scientist Should Know](https://www.kdnuggets.com/2023/01/12-docker-commands-every-data-scientist-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[20 Basic Linux Commands for Data Science Beginners](https://www.kdnuggets.com/2022/06/20-basic-linux-commands-data-science-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
