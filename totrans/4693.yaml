- en: R vs Python for Data Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html](https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)![figure-name](../Images/fe68e9c1a794ebf6ac60a5f9d083dfdc.png)ggplot2
    vs seaborn'
  prefs: []
  type: TYPE_NORMAL
- en: R and Python have inundated us with the ability to generate complex and attractive
    statistical graphics in order to gain insights and explore our data. Both are
    well equipped to handle millions of data points (maybe billions depending on the
    platform).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Data in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Seaborn is built on top of Matplotlib and is a comparatively simpler syntax
    and structure to Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: First we use `import seaborn as sns; sns.set()` to load and set the seaborn
    theme defaults to the Python session. Matplotlib has to be loaded as well since
    both libraries are used in tandem.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`sns.set_style()` sets the background theme of the plot. "ticks" is the closest
    to the plot made in R.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sns.set_context()` will apply predefined formatting to the plot to fit the
    reason or context the visualization is to be used. `font_scale=1` is used to set
    the scaele of the font size for all the text in the graph.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`plt.figure()`is a command to control different aspects of the matpltlib graph
    (as stated before seaborn graphs are just Matplotlib plots under the hood).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sns.scatterplot()`is the command used to pass arguments to create the seaborn
    style scatterplot.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`x="wt"`maps the weight to the x-axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y="hp"`maps the horsepower to the y-axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hue="cyl"`will fill and color the scatterpoints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`palette=[''red'',''green'',''blue'']`manually overrides the color palette
    that is set by `hue`to red, green and blue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data="mtcars"`allows us to use the data in the dataset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`style=''cyl''`assigns shapes to each cyinder category.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`legend=''brief''`will assign the `hue`&`size`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sizes=(800,1000)`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: controls the minimim and maximum size of the scatterpoints on the plot.
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.title()` gives the plot its main title. *If you are an experienced Matplotlib
    user or used plt.suptitle() before you know the confusion when using the two together.*
    The arguments are self-explanatory.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`plt.xlabel()`will format the x-axis label. I use `set_..` to access the class
    to include the aesthetic properties. This can get cluttered at times but there
    are many ways to format a seaborn/matplotlib plot. This is useful for after the
    plot has been created. The plot was already made with `sns.scatterplot` so now
    we need to override the default formats in this manner.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`plt.ylabel()`works in the exact same way just for the y-axis.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/b27016c26864a2941fd95d362e2d8a21.png)Seaborn: mtcars
    scatterplot'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see the plot is qute similar to the one made in ggplot2\. To the next
    step of faceting this plot, Seaborn is an easier alternative to Matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: Faceting in Seaborn requires a new plot to be created. There are a number of
    ways to do it and `sns.relplot()` is one such way.
  prefs: []
  type: TYPE_NORMAL
- en: '`sns.set()`will set the default Seaborn theme into the Python environment and
    it can also be used to override the default parameters as we see with `rc={''figure.figsize'':(20,20)}`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sns.relplot()`has many of the same parameters discussed above and here we
    will discuss the new ones as this plot is geared towards faceting.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`col="gear"` specifies which column in the mtcars dataset to use for faceting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col_wrap=3` specifies the placement of the plots. In this case, the plots
    will be placed in 3 columns. It will be in one row since the number of rows were
    not specified but this can be done if needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`aspect=0.6` is a control for the size of the plot. I suggest reading the documentation
    on this as it can become confusing to explain at this point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g.fig.suptitle()`creates the title for the plot.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`position=(0.5,1.05)`is an interesting argument because it controls the position
    of the title. Even small changes can drastically change the position of the title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g.set_xlabels` & `g.set_ylabels` will work as previously discussed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/0c776efeb28b7f1b013d98d5d18ca611.png)Seaborn: mtcars
    faceted scatterplot'
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing Data in R
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using ggplot2 we can create easy and customizable graphics by adding layers
    of aesthetics to the plot. A great feature for new users is that besides the step
    of loading the data to be used in ggplot2 and giving the geometric shape, the
    layers of aesthetics can be (mostly) done in any order. This is because ggplot2
    was built on the principles of the grammar of graphics. These principles enable
    us to create stunning and informative visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: The following R code will load the ggplot2 package (probably the most prominent
    visualization package in R) and will generate a scatter plot for us.
  prefs: []
  type: TYPE_NORMAL
- en: '`ggplot(mtcars, aes(x=wt, y=hp))` will load the mtcars dataset to be used in
    ggplot2 and `aes(x=wt, y=hp)` will map the aesthetics for our plot with the *x*
    aesthetic as weight for the x-axis and *y* aesthetic with Horsepower for the y-axis.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`geom_point(size=1,aes(color=cyl, shape=cyl, fill=cyl))` will generate the
    scatter plot with the predefined aesthetics mentioned before and the new aesthetics.
    `color=cyl` will give the outline of the scatterpoints a unique color based on
    the number of cylinders. `shape=cyl` will give a unique shape to the scatterpoints
    and will work in tandem with `color`. `fill=cyl` will fill the scatterpoints with
    colorsn instead of just the outline. It is best to use `color` and `fill` together
    (there is a small aesthetic difference that will be obvious if you look closely.)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`theme_bw()` provides a pre-made theme in ggplot2 for us to get started. This
    can then be easily adjusted with the right commands. ggplot2 has a simple and
    easy to learn syntax for this task which makes it easy to manipulate.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`theme()` is the command that allows you to change the default settings of
    any theme that is already set in point 3 (you can also use it to change the other
    aesthetics of the plot).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`axis.text=element_text(face=''bold'', size=7`formats the text of the y-axis
    and x-axis (the numbers on the axis). `face=''bold''` will bold the text while
    `size="7"` will increase its size to the specified amount.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis.title=element_text(face=''bold'', size=10)`works the same as the command
    above but for the axis titles only.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis.ticks=element_line(size=0.5)` will make the ticks on the graph have a
    more obvious appearance.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`panel.background=element_rect(colour = NA)`is an aesthetic measure I decided
    to add which gets rid of the rectangular border surrounding the graph.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plot.title=element_text(face=''bold'', size=11,hjust = 0.5))` simply bolds
    and changes the size of the main title. `***hjust=0.5***`will ***center align***
    the title.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale_color_manual(breaks = c("4", "6", "8"), values=c("red", "green", "blue"))`will
    override the default color scheme and add red to ''4'', green to ''6'' and blue
    to ''8''. This manually overrides the outline color of the scatterpoints.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale_fill_manual(breaks = c("4", "6", "8"), values=c("red", "green", "blue"))`
    will do the same as above but for the inside of the scatterpoints this time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale_y_continuous(breaks = seq(0,350,50))` manually overrides the numbers
    on the y-axis to start from zero and end at 350 with 50 unit increments. This
    will show on the major ticks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale_x_continuous(breaks = seq(1.5,5.5,0.5), minor_breaks=seq(1.5,5.5,1))`
    does the same as above for the x-axis and manually overrides the minor ticks but
    this will not be as obvious.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scale_shape_manual(values=c(21,4,22))` will define what type of shape to give
    each category of cylinders.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options(repr.plot.width=4, repr.plot.height=3)`is a handy command when you
    want to manipulate the width and height of the figure. It is particularly useful
    in Jupyter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/552abdef0c06ea1c173f6e3b00afff86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'ggplot: mtcars scatterplot'
  prefs: []
  type: TYPE_NORMAL
- en: Another great aspect of ggplot2 is its **ability to facet data to create multiple
    plots in just one line of code**
  prefs: []
  type: TYPE_NORMAL
- en: '`facet_grid(~gear)`will subdivide the data by the number of gears and create
    a number of the same plots with the same theme aesthetics.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bea7dacd109dcf7417fa2129f2ed95b8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'ggplot: mtcars faceted scatterplot'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the main differences I believe is that the Seaborn plots have a better
    defult resolution than the ggplot2 graphics and the syntax required can be much
    less (but this is dependent on circumstance). Seaborn uses a programmatic approach
    whereby the user can access the classes in Seaborn and Matplotlib to manipulate
    the plots. ggplot2 uses a layered approach wherein the user can add aesthetics
    and formats in any order to create the figure (which I believe can be more simpler
    despite the amount of code required). Most people do not notice and this may be
    more significant to some more than others, Python plots when saved as graphics
    take up significantly more disk space than R generated graphics. Among the graphics
    in this article, the Seaborn/Matplotlib graphics take up approximately 6x more
    disk space than the ggplot2 graphics.
  prefs: []
  type: TYPE_NORMAL
- en: Recreating the same plot — albeit with minor differences — is very possible
    with Seaborn and ggplot2\. While the tools are different, they can still be used
    to create the same object.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Python Graph Gallery](/2017/11/python-graph-gallery.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Five Best Data Visualization Libraries](/2019/01/five-best-data-visualization-libraries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Visualization Cheat Sheet](/2018/08/data-visualization-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
