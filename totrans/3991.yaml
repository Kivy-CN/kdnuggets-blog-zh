- en: How to Speed Up Python Pandas by Over 300x
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将Python Pandas的速度提升超过300倍
- en: 原文：[https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x](https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x](https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x)
- en: '![How to Speed Up Python Pandas by Over 300x](../Images/4ccb0c246d992f847174ad475d82ca91.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何将Python Pandas的速度提升超过300倍](../Images/4ccb0c246d992f847174ad475d82ca91.png)'
- en: How to Speed Up Pandas Code - Vectorization
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何加速Pandas代码 - 向量化
- en: If we want our deep learning models to train on a dataset, we have to optimize
    our code to parse through that data quickly. We want to read our data tables as
    fast as possible using an optimized way to write our code. Even the smallest performance
    gain exponentially improves performance over tens of thousands of data points.
    In this blog, we will define Pandas and provide an example of how you can vectorize
    your Python code to optimize dataset analysis using Pandas to speed up your code
    over 300x times faster.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望我们的深度学习模型在一个数据集上进行训练，我们必须优化我们的代码，以便快速解析数据。我们希望使用优化的方法来编写代码，以便尽可能快地读取数据表。即使是最小的性能提升也会在数万条数据点上成倍地提高性能。在这篇博客中，我们将定义Pandas，并提供一个示例，说明如何向量化你的Python代码，以使用Pandas优化数据集分析，使你的代码速度提高超过300倍。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: What is Pandas for Python?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是Python的Pandas？
- en: '[Pandas](https://pandas.pydata.org/docs/) is an essential and popular open-source
    data manipulation and data analysis library for the Python programming language.
    Pandas is widely used in various fields such as finance, economics, social sciences,
    and engineering. It is beneficial for data cleaning, preparation, and analysis
    in data science and machine learning tasks.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pandas](https://pandas.pydata.org/docs/)是Python编程语言中一个重要且流行的开源数据操作和数据分析库。Pandas广泛应用于金融、经济学、社会科学和工程等多个领域。它在数据科学和机器学习任务中对于数据清理、准备和分析非常有用。'
- en: It provides powerful data structures (such as the DataFrame and Series) and
    data manipulation tools to work with structured data, including reading and writing
    data in various formats (e.g. CSV, Excel, JSON) and filtering, cleaning, and transforming
    data. Additionally, it supports time series data and provides powerful data aggregation
    and visualization capabilities through integration with other popular libraries
    such as NumPy and Matplotlib.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它提供了强大的数据结构（如DataFrame和Series）和数据操作工具，用于处理结构化数据，包括以各种格式（例如CSV、Excel、JSON）读取和写入数据，以及数据的过滤、清理和转换。此外，它还支持时间序列数据，并通过与其他流行库如NumPy和Matplotlib的集成，提供强大的数据聚合和可视化功能。
- en: Our Dataset and Problem
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的数据集和问题
- en: The Data
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 数据
- en: In this example, we are going to create a random dataset in a [Jupyter Notebook](https://jupyter.org/) using
    NumPy to fill in our Pandas data frame with arbitrary values and strings. In this
    dataset, we are naming 10,000 people of varying ages, the amount of time they
    work, and the percentage of time they are productive at work. They will also be
    assigned a random favorite treat, as well as a random bad karma event.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用NumPy在一个[Jupyter Notebook](https://jupyter.org/)中创建一个随机数据集，用任意值和字符串填充我们的Pandas数据框。在这个数据集中，我们命名了10,000个年龄不同的人，记录了他们的工作时间和工作中高效时间的百分比。还将随机分配一个最喜欢的零食，以及一个随机的不良因果事件。
- en: 'We are first going to import our frameworks and generate some random code before
    we start:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将导入我们的框架，并生成一些随机代码，然后再开始：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we are going to create our dataset with some by creating some random data.
    Now your code will most likely rely on actual data but for our use case, we will
    create some arbitrary data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一些随机数据来构建我们的数据集。虽然你的代码很可能依赖于实际数据，但对于我们的用例，我们将创建一些任意数据。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Parameters and Rules
  id: totrans-21
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 参数和规则
- en: If a person’s ‘time_at_work’ is at least 2 hours AND where ‘percentage_productive’
    is more than 50%, we return with 'favorite treat'.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果一个人的‘time_at_work’至少为2小时，并且‘percentage_productive’超过50%，我们返回‘favorite treat’。
- en: Otherwise, we give them 'bad_karma'.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，我们将其设为`bad_karma`。
- en: If they are over 65 years old, we return with a ‘favorite_treat’ since we our
    elderly to be happy.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果他们超过65岁，我们返回‘favorite_treat’，因为我们希望老年人感到幸福。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have our dataset and our parameters for what we want to return,
    we can go ahead and explore the fastest way to execute this type of analysis.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了数据集和我们想要返回的参数，可以继续探索执行这种类型分析的最快方法。
- en: 'Which Pandas Code Is Fastest: Looping, Apply, or Vectorization?'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哪种Pandas代码最快：循环、应用还是矢量化？
- en: To time our functions, we will be using a Jupyter Notebook to make it relatively
    simple with the magic function %%timeit. There are other ways to time a function
    in Python but for demonstration purposes, our Jupyter Notebook will suffice. We
    will do a demo run on the same dataset with 3 ways of calculating and evaluating
    our problem using Looping/Iterating, Apply, and Vectorization.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对我们的函数进行计时，我们将使用Jupyter Notebook中的魔法函数`%%timeit`来简化操作。虽然在Python中有其他计时函数的方法，但为了演示目的，我们的Jupyter
    Notebook足够用了。我们将用3种方法（循环/迭代、应用和矢量化）在相同的数据集上进行演示运行，并计算和评估我们的问题。
- en: Looping/Iterating
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 循环/迭代
- en: Looping and Iterating is the most basic way to deliver the same calculation
    row by row. We call the data frame and iterate rows with a new cell called reward
    and run the calculation to fill in the new `reward` according to our previously
    defined `reward_calc` code block. This is the most basic and probably the first
    method learned when coding similar to For Loops.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 循环和迭代是逐行进行相同计算的最基本方法。我们调用数据框架，迭代行，并用一个新的单元格称为`reward`进行计算，以根据我们之前定义的`reward_calc`代码块填充新的`reward`。这是最基本的方法，也可能是类似于For循环的编码时学到的第一个方法。
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This is what it returned:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是它返回的结果：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Inexperienced data scientists might see a couple of seconds as no big deal.
    But, 3.66 seconds is quite long to run a simple function through a dataset. Let’s
    see what the `apply` function can do for us for speed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 缺乏经验的数据科学家可能会觉得几秒钟不算什么。但，3.66秒在数据集中运行一个简单的函数还是相当长的。让我们看看`apply`函数能为我们的速度做些什么。
- en: Apply
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 应用
- en: The `apply` function effectively does the same thing as the loop. It will create
    a new column titled reward and apply the calculation function every 1 row as defined
    by `axis=1`. The `apply` function is a faster way to run a loop to your dataset.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`apply`函数的效果与循环相同。它将创建一个标题为`reward`的新列，并对每1行应用计算函数，定义为`axis=1`。`apply`函数是对数据集运行循环的更快方法。'
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The time it took to run is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行所需的时间如下：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Wow, so much faster! About 9x faster, a huge improvement to a Loop. Now the
    Apply Function is perfectly fine to use and will be applicable in certain scenarios,
    but for our use case, let's see if we can speed it up more.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，快了这么多！大约快了9倍，较循环有了巨大的改进。现在`apply`函数完全可以使用，并适用于某些场景，但对于我们的用例，看看是否能更快一点。
- en: Vectorization
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 矢量化
- en: Our last and final way to evaluate this dataset is to use vectorization. We
    will call our dataset and apply the default reward being `bad_karma` to the entire
    data frame. Then we will only check for those that satisfy our parameters using
    boolean indexing. Think of it like setting a true/false value for each row. If
    any or all of the rows return false in our calculation, then the `reward` row
    will remain `bad_karma`. While if all the rows are true, we will redefine the
    data frame for the `reward` row as `favorite_treat`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们评估数据集的最后一种方法是使用矢量化。我们将调用数据集，并将默认的`reward`应用于整个数据框架。然后，我们只会检查那些满足我们参数的行，使用布尔索引。可以把它当作给每行设置一个真/假值。如果任何行或所有行在计算中返回假，则`reward`行将保持为`bad_karma`。而如果所有行都为真，我们将重新定义`reward`行的数据框架为`favorite_treat`。
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The time it took to run this function on our dataset is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的数据集上运行此函数所需的时间如下：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That is extremely fast. **40x faster than the Apply** and approximately **360x
    faster than Looping…**
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常快。**比Apply快40倍**，并且大约**比循环快360倍……**
- en: Why Vectorization in Pandas is over 300x Faster
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么Pandas中的矢量化快300倍
- en: The reason why vectorization is so much faster than Looping/Iterating and Apply
    is that it doesn’t calculate the entire row every single time but instead applies
    the parameters to the entire dataset as a whole. Vectorization is a process where
    operations are applied to entire arrays of data at once, instead of operating
    on each element of the array individually. This allows for much more efficient
    use of memory and CPU resources.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化比循环/迭代和 Apply 更快的原因在于，它不会每次都计算整行，而是将参数应用于整个数据集。向量化是一种将操作一次性应用于整个数据数组的过程，而不是逐个元素操作。这使得内存和
    CPU 资源的使用更加高效。
- en: When using Loops or Apply to perform calculations on a Pandas data frame, the
    operation is applied sequentially. This causes repeated access to memory, calculations,
    and updated values which can be slow and resource intensive.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Loops 或 Apply 对 Pandas 数据框进行计算时，操作是按顺序应用的。这会导致重复访问内存、计算和更新值，这可能会很慢且资源消耗大。
- en: Vectorized operations, on the other hand, are implemented in Cython (Python
    in C or C++) and utilize the CPU's vector processing capabilities, which can perform
    multiple operations at once, further increasing performance by calculating multiple
    parameters at the same time. Vectorized operations also avoid the overhead of
    constantly accessing memory which is the crutch of Loop and Apply.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，向量化操作是用 Cython（Python 在 C 或 C++ 中）实现的，并利用 CPU 的向量处理能力，这可以一次执行多个操作，从而通过同时计算多个参数进一步提高性能。向量化操作还避免了不断访问内存的开销，这正是
    Loop 和 Apply 的短板。
- en: How to Vectorize your Pandas Code
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何向量化你的 Pandas 代码
- en: Use Built-in Pandas and NumPy Functions that have implemented C like **sum()**,
    **mean()**, or **max()**.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置的 Pandas 和 NumPy 函数，例如 **sum()**、**mean()** 或 **max()**，这些函数已经实现了 C 语言的效率。
- en: Use vectorized operations that can apply to entire DataFrames and Series including
    mathematical operations, comparisons, and logic to create a boolean mask to select
    multiple rows from your data set.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用可以应用于整个 DataFrame 和 Series 的向量化操作，包括数学运算、比较和逻辑操作，以创建布尔掩码以选择数据集中的多个行。
- en: You can use the **.values** attribute or the `.to_numpy()` to return the underlying
    NumPy array and perform vectorized calculations directly on the array.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用 **.values** 属性或 `.to_numpy()` 返回底层的 NumPy 数组，并直接在数组上执行向量化计算。
- en: Use vectorized string operations to apply to your dataset such as `.str.contains()`,
    `.str.replace()`, and `.str.split()`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用向量化的字符串操作来处理你的数据集，例如 `.str.contains()`、`.str.replace()` 和 `.str.split()`。
- en: Whenever you’re writing functions on Pandas DataFrames, try to vectorize your
    calculations as much as possible. As datasets get larger and larger and your calculations
    get more and more complex, the time savings add up exponentially when you utilize
    vectorization. It's worth noting that not all operations can be vectorized and
    sometimes it's necessary to use loops or apply functions. However, wherever it's
    possible, vectorized operations can greatly improve performance and make your
    code more efficient.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你在 Pandas DataFrames 上编写函数时，尽量将你的计算向量化。随着数据集越来越大，计算变得越来越复杂，利用向量化时节省的时间会呈指数级增长。值得注意的是，并不是所有操作都可以向量化，有时需要使用循环或
    apply 函数。然而，只要可能，向量化操作可以大大提高性能，使你的代码更高效。
- en: '**[Kevin Vu](https://blog.exxactcorp.com/)** manages [Exxact Corp blog](https://blog.exxactcorp.com/)
    and works with many of its talented authors who write about different aspects
    of Deep Learning.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Kevin Vu](https://blog.exxactcorp.com/)** 负责 [Exxact Corp 博客](https://blog.exxactcorp.com/)，并与许多才华横溢的作者合作，这些作者撰写关于深度学习不同方面的文章。'
- en: More On This Topic
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多相关内容
- en: '[Machine Learning Over Encrypted Data](https://www.kdnuggets.com/2022/08/machine-learning-encrypted-data.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加密数据上的机器学习](https://www.kdnuggets.com/2022/08/machine-learning-encrypted-data.html)'
- en: '[Is Academia Obsessing Over Methodology at the Cost of True Insights?](https://www.kdnuggets.com/is-academia-obsessing-over-methodology-at-the-cost-of-true-insights)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学术界是否因方法论而忽视真正的洞见？](https://www.kdnuggets.com/is-academia-obsessing-over-methodology-at-the-cost-of-true-insights)'
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加速你的 Python 代码的 3 种简单方法](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
- en: '[How To Speed Up SQL Queries Using Indexes [Python Edition]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何通过索引加速 SQL 查询 [Python 版]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
- en: '[How To Speed Up Python Code with Caching](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何通过缓存加速 Python 代码](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching)'
- en: '[5 Python Tips for Data Efficiency and Speed](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个提升数据效率和速度的 Python 技巧](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
