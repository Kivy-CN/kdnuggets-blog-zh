- en: Leveraging the Power of GPUs with CuPy in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/leveraging-the-power-of-gpus-with-cupy-in-python](https://www.kdnuggets.com/leveraging-the-power-of-gpus-with-cupy-in-python)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Leveraging the Power of GPUs with CuPy in Python](../Images/48d4f1f7b5a660a04de8cf337c89a734.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: What is CuPy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[CuPy](https://docs.cupy.dev/en/stable/overview.html) is a Python library that
    is compatible with NumPy and SciPy arrays, designed for GPU-accelerated computing.
    By replacing NumPy with CuPy syntax, you can run your code on NVIDIA CUDA or AMD
    ROCm platforms. This allows you to perform array-related tasks using GPU acceleration,
    which results in faster processing of larger arrays.'
  prefs: []
  type: TYPE_NORMAL
- en: By swapping out just a few lines of code, you can take advantage of the massive
    parallel processing power of GPUs to significantly speed up array operations like
    indexing, normalization, and matrix multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: CuPy also enables access to low-level CUDA features. It allows passing of `ndarrays`
    to existing CUDA C/C++ programs using RawKernels, streamlines performance with
    Streams, and enables direct calling of CUDA Runtime APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Installing CuPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can install CuPy using pip, but before that you have to find out the right
    CUDA version using the command below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It seems that the current version of Google Colab is using CUDA version 11.8\.
    Therefore, we will proceed to install the `cupy-cuda11x` version.
  prefs: []
  type: TYPE_NORMAL
- en: If you are running on an older CUDA version, I have provided a table below to
    help you determine the appropriate CuPy package to install.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging the Power of GPUs with CuPy in Python](../Images/4aa2dd692a6ddc4b946a5d37a0d62008.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [CuPy 12.2.0](https://docs.cupy.dev/en/stable/install.html)
  prefs: []
  type: TYPE_NORMAL
- en: After selecting the right version, we will install the Python package using
    pip.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can also use the `conda` command to automatically detect and install the
    correct version of the CuPy package if you have Anaconda installed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Basics of CuPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will compare the syntax of CuPy with Numpy and they are
    95% similar. Instead of using `np` you will be replacing it with `cp`.
  prefs: []
  type: TYPE_NORMAL
- en: We will first create a NumPy and CuPy array using the Python list. After that,
    we will calculate the norm of the vector.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we got similar results.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To convert a NumPy to CuPy array, you can simply use `cp.asarray(X)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Or, use `.get()`, to convert CuPy to Numpy array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Performance Comparison
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will be comparing the performance of NumPy and CuPy.
  prefs: []
  type: TYPE_NORMAL
- en: We will use `time.time()` to time the code execution time. Then, we will create
    a 3D NumPy array and perform some mathematical functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, we will create a 3D CuPy array, perform mathematical operations,
    and time it for performance.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: To calculate the difference, we will divide NumPy time with CuPy time and It
    seems like we got above 500X performance boost while using CuPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:**  To achieve better results, it is recommended to conduct a few warm-up
    runs to minimize timing fluctuations.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Beyond its speed advantage, CuPy offers superior multi-GPU support, enabling
    harnessing of collective power of multiple GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can check out my [Colab notebook](https://colab.research.google.com/drive/1xhORH4VQr5vuaDVsvKY54JW_dIE5EMUz?usp=sharing),
    if you want to compare the results.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In conclusion, CuPy provides a simple way to accelerate NumPy code on NVIDIA
    GPUs. By making just a few modifications to swap out NumPy for CuPy, you can experience
    order-of-magnitude speedups on array computations. This performance boost allows
    you to work with much larger datasets and models, enabling more advanced machine
    learning and scientific computing.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Documentation: [CuPy – NumPy & SciPy for GPU — CuPy 12.2.0 documentation](https://docs.cupy.dev/en/stable/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GitHub: [cupy/cupy](https://github.com/cupy/cupy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples: [cupy/examples](https://github.com/cupy/cupy/tree/main/examples)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'API: [API Reference](https://docs.cupy.dev/en/stable/reference/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://www.polywork.com/kingabzpro)****[Abid Ali Awan](https://www.polywork.com/kingabzpro)****
    ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan)) is a certified data
    scientist professional who loves building machine learning models. Currently,
    he is focusing on content creation and writing technical blogs on machine learning
    and data science technologies. Abid holds a Master''s degree in technology management
    and a bachelor''s degree in telecommunication engineering. His vision is to build
    an AI product using a graph neural network for students struggling with mental
    illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Mastering GPUs: A Beginner''s Guide to GPU-Accelerated DataFrames in Python](https://www.kdnuggets.com/2023/07/mastering-gpus-beginners-guide-gpu-accelerated-dataframes-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[From Google Colab to a Ploomber Pipeline: ML at Scale with GPUs](https://www.kdnuggets.com/2022/03/google-colab-ploomber-pipeline-ml-scale-gpus.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Leveraging Geospatial Data in Python with GeoPandas](https://www.kdnuggets.com/leveraging-geospatial-data-in-python-with-geopandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[In-Database Analytics: Leveraging SQL''s Analytic Functions](https://www.kdnuggets.com/2023/07/indatabase-analytics-leveraging-sql-analytic-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL For Data Science: Understanding and Leveraging Joins](https://www.kdnuggets.com/2023/08/sql-data-science-understanding-leveraging-joins.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Leveraging XGBoost for Time-Series Forecasting](https://www.kdnuggets.com/2023/08/leveraging-xgboost-timeseries-forecasting.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
