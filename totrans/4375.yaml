- en: Mastering TensorFlow Tensors in 5 Easy Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/11/mastering-tensorflow-tensors-5-easy-steps.html](https://www.kdnuggets.com/2020/11/mastering-tensorflow-tensors-5-easy-steps.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Orhan G. Yalçın](https://www.linkedin.com/in/orhangaziyalcin/), AI Researcher**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If you are reading this article, I am sure that we share similar interests
    and are/will be in similar industries. So let’s connect via *[*Linkedin*](https://linkedin.com/in/orhangaziyalcin/)*!
    Please do not hesitate to send a contact request! *[*Orhan G. Yalçın — Linkedin*](https://linkedin.com/in/orhangaziyalcin/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d50c55750c8559cd8fd43f07ccdbcffc.png)Photo by [Esther Jiao](https://unsplash.com/@estherrj?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
  prefs: []
  type: TYPE_IMG
- en: 'In this post, we will dive into the details of TensorFlow [Tensors](https://www.kdnuggets.com/2018/05/wtf-tensor.html).
    We will cover all the topics related to Tensors in Tensorflow in these five simple
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Step I: Definition of Tensors → **What is a Tensor?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step II: Creation of Tensors → **Functions to Create Tensor Objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step III: Qualifications of Tensors → **Characteristics and Features of Tensor
    Objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step IV: Operations with Tensors → **Indexing, Basic Tensor Operations, Shape
    Manipulation, and Broadcasting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Step V: Special Types of Tensors → **Special Tensor Types Other than Regular
    Tensors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start!
  prefs: []
  type: TYPE_NORMAL
- en: 'Definition of Tensors: What is a Tensor?'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/d09490d09a2cbcbc2f2e360cc8df63a1.png)Figure 1\. A Visualization
    of Rank-3 Tensors (Figure by Author)'
  prefs: []
  type: TYPE_IMG
- en: Tensors are TensorFlow’s multi-dimensional arrays with uniform type. They are
    very similar to NumPy arrays, and they are immutable, which means that they cannot
    be altered once created. You can only create a new copy with the edits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how Tensors work with code example. But first, to work with TensorFlow
    objects, we need to import the [TensorFlow](http://tensorflow.org/) library. We
    often use [NumPy](http://numpy.org/) with TensorFlow, so let’s also import NumPy
    with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Creation of Tensors: Creating Tensor Objects'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are several ways to create a `tf.Tensor` object. Let’s start with a few
    examples. You can create Tensor objects with several TensorFlow functions, as
    shown in the below examples:'
  prefs: []
  type: TYPE_NORMAL
- en: tf.constant, tf.ones, tf.zeros, and tf.range are some of the functions you can
    use to create Tensor objects
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we created Tensor objects with the shape `(1, 5)` with three
    different functions and a fourth Tensor object with the shape `(5, )`using `tf.range()` function.
    Note that `tf.ones` and `tf.zeros` accepts the shape as the required argument
    since their element values are pre-determined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Qualifications of Tensors: Characteristics and Features of Tensor Objects'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: TensorFlow Tensors are created as `tf.Tensor` objects, and they have several
    characteristic features. First of all, they have a rank based on the number of
    dimensions they have. Secondly, they have a shape, a list that consists of the
    lengths of all their dimensions. All tensors have a size, which is the total number
    of elements within a Tensor. Finally, their elements are all recorded in a uniform
    Dtype (data type). Let’s take a closer look at each of these features.
  prefs: []
  type: TYPE_NORMAL
- en: Rank System and Dimension
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Tensors are categorized based on the number of dimensions they have:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rank-0 (Scalar) Tensor:** A tensor containing a single value and no axes
    (0-dimension);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rank-1 Tensor:** A tensor containing a list of values in a single axis (1-dimension);'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rank-2 Tensor:** A tensor containing 2-axes (2-dimensions); and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rank-N Tensor: **A tensor containing N-axis (N-dimensions).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure](../Images/b4dcb40089fec79f7031da9a1f518e49.png)Figure 2\. Rank-1
    Tensor | Rank-2 Tensor| Rank-3 Tensor (Figure by Author)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, we can create a Rank-3 tensor by passing a three-level nested
    list object to the `tf.constant` function. For this example, we can split the
    numbers into a 3-level nested list with three-element at each level:'
  prefs: []
  type: TYPE_NORMAL
- en: The code to create a Rank-3 Tensor object
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can view the number of dimensions that our `rank_3_tensor` object currently
    has with the `.ndim` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Shape
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The shape feature is another attribute that every Tensor has. It shows the
    size of each dimension in the form of a list. We can view the shape of the `rank_3_tensor` object
    we created with the `.shape` attribute, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, our tensor has 2 elements at the first level, 2 elements in
    the second level, and 3 elements in the third level.
  prefs: []
  type: TYPE_NORMAL
- en: Size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Size is another feature that Tensors have, and it means the total number of
    elements a Tensor has. We cannot measure the size with an attribute of the Tensor
    object. Instead, we need to use `tf.size()` function. Finally, we will convert
    the output to NumPy with the instance function `.numpy() `to get a more readable
    result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Dtypes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tensors often contain numerical data types such as floats and ints, but may
    contain many other data types such as complex numbers and strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each Tensor object, however, must store all its elements in a single uniform
    data type. Therefore, we can also view the type of data selected for a particular
    Tensor object with the `.dtype` attribute, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Operations with Tensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Indexing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An index is a numerical representation of an item’s position in a sequence.
    This sequence can refer to many things: a list, a string of characters, or any
    arbitrary sequence of values.'
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow also follows standard Python indexing rules, which is similar to
    list indexing or NumPy array indexing.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few rules about indexing:'
  prefs: []
  type: TYPE_NORMAL
- en: Indices start at zero (0).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Negative index (“-n”) value means backward counting from the end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Colons (“:”) are used for slicing: `start:stop:step`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commas (“,”) are used to reach deeper levels.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create a `rank_1_tensor` with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'and test out our rules no.1, no.2, and no.3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let’s create our `rank_2_tensor` object with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'and test the 4th rule with several examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now, we covered the basics of indexing, so let’s take a look at the basic operations
    we can conduct on Tensors.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Operations with Tensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can easily do basic math operations on tensors such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Addition
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Element-wise Multiplication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Matrix Multiplication
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding the Maximum or Minimum
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finding the Index of the Max Element
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Computing Softmax Value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s see these operations in action. We will create two Tensor objects and
    apply these operations.
  prefs: []
  type: TYPE_NORMAL
- en: We can start with addition.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let’s continue with the element-wise multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also do matrix multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**NOTE:** Matmul operations lays in the heart of deep learning algorithms.
    Therefore, although you will not use matmul directly, it is crucial to be aware
    of these operations.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Examples of other operations we listed above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating Shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just as in NumPy arrays and pandas DataFrames, you can reshape Tensor objects
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tf.reshape operations are very fast since the underlying data does not
    need to be duplicated. For the reshape operation, we can use the`tf.reshape()` function.
    Let''s use the `tf.reshape` function in code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we can easily reshape our Tensor objects. But beware that when
    doing reshape operations, a developer must be reasonable. Otherwise, the Tensor
    might get mixed up or can even raise an error. So, look out for that ????.
  prefs: []
  type: TYPE_NORMAL
- en: Broadcasting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When we try to do combined operations using multiple Tensor objects, the smaller
    Tensors can stretch out automatically to fit larger tensors, just as NumPy arrays
    can. For example, when you attempt to multiply a scalar Tensor with a Rank-2 Tensor,
    the scalar is stretched to multiply every Rank-2 Tensor element. See the example
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Thanks to broadcasting, you don’t have to worry about matching sizes when doing
    math operations on Tensors.
  prefs: []
  type: TYPE_NORMAL
- en: Special Types of Tensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We tend to generate Tensors in a rectangular shape and store numerical values
    as elements. However, TensorFlow also supports irregular, or specialized, Tensor
    types, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: Ragged Tensors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: String Tensors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sparse Tensors
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure](../Images/1dd5906e1bdbb46b2f349c933f730228.png)Figure 3\. Ragged
    Tensor | String Tensor| Sparse Tensor (Figure by Author)'
  prefs: []
  type: TYPE_IMG
- en: Let's take a closer look at what each of them is.
  prefs: []
  type: TYPE_NORMAL
- en: Ragged Tensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ragged tensors are tensors with different numbers of elements along the size
    axis, as shown in Figure X.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can build a Ragged Tensor, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: String Tensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'String Tensors are tensors, which stores string objects. We can build a String
    Tensor just as you create a regular Tensor object. But, we pass string objects
    as elements instead of numerical objects, as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Sparse tensors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, Sparse Tensors are rectangular Tensors for sparse data. When you have
    holes (i.e., Null values) in your data, Sparse Tensors are to-go objects. Creating
    a sparse Tensor is a bit time consuming and should be more mainstream. But, here
    is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have successfully covered the basics of TensorFlow’s Tensor objects.
  prefs: []
  type: TYPE_NORMAL
- en: Give yourself a pat on the back!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This should give you a lot of confidence since you are now much more informed
    about the building blocks of the TensorFlow framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check [Part 1 of this tutorial series](https://towardsdatascience.com/beginners-guide-to-tensorflow-2-x-for-deep-learning-applications-c7ebd0dcfbee?source=linkShare-ff47ab81282a-1602188004&_branch_match_id=834349989166411892):'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Beginner''s Guide to TensorFlow 2.x for Deep Learning Applications**](https://link.medium.com/yJp16uPoqab)'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the TensorFlow Platform and What it has to Offer to a Machine
    Learning Expert
  prefs: []
  type: TYPE_NORMAL
- en: 'Continue with [Part 3 of the series](https://towardsdatascience.com/mastering-tensorflow-variables-in-5-easy-step-5ba8062a1756):'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Mastering TensorFlow “Variables” in 5 Easy Step**](https://towardsdatascience.com/mastering-tensorflow-variables-in-5-easy-step-5ba8062a1756)'
  prefs: []
  type: TYPE_NORMAL
- en: Learn how to use TensorFlow Variables, their differences from plain Tensor objects,
    and when they are preferred over…
  prefs: []
  type: TYPE_NORMAL
- en: Subscribe to the Mailing List for the Full Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you would like to have access to full code on Google Colab and the rest
    of my latest content, consider subscribing to the mailing list:'
  prefs: []
  type: TYPE_NORMAL
- en: Slide to Subscribe to My Newsletter
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, if you are interested in applied deep learning tutorials, check out
    some of my articles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Image Classification in 10 Minutes with MNIST Dataset**](https://towardsdatascience.com/image-classification-in-10-minutes-with-mnist-dataset-54c35b77a38d)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Convolutional Neural Networks to Classify Handwritten Digits with TensorFlow
    and Keras | Supervised Deep Learning
  prefs: []
  type: TYPE_NORMAL
- en: '[**Image Generation in 10 Minutes with Generative Adversarial Networks**](https://towardsdatascience.com/image-generation-in-10-minutes-with-generative-adversarial-networks-c2afc56bfa3b)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Unsupervised Deep Learning to Generate Handwritten Digits with Deep Convolutional
    GANs using TensorFlow and the…
  prefs: []
  type: TYPE_NORMAL
- en: '[**Image Noise Reduction in 10 Minutes with Convolutional Autoencoders**](https://towardsdatascience.com/image-noise-reduction-in-10-minutes-with-convolutional-autoencoders-d16219d2956a)'
  prefs: []
  type: TYPE_NORMAL
- en: Using Deep Convolutional Autoencoders to Clean (or Denoise) Noisy Images with
    the help of Fashion MNIST | Unsupervised…
  prefs: []
  type: TYPE_NORMAL
- en: '[**Using Recurrent Neural Networks to Predict Bitcoin (BTC) Prices**](https://towardsdatascience.com/using-recurrent-neural-networks-to-predict-bitcoin-btc-prices-c4ff70f9f3e4)'
  prefs: []
  type: TYPE_NORMAL
- en: Wouldn’t it be awesome if you were, somehow, able to predict tomorrow’s Bitcoin
    (BTC) price? Cryptocurrency market has…
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Orhan G. Yalçın](https://www.linkedin.com/in/orhangaziyalcin/)** is
    an AI Researcher in the legal domain. He is a qualified lawyer with business development
    and data science skills, and has previously worked as a legal trainee for Allen
    & Overy on capital markets, competition, and corporate law matters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/mastering-tensorflow-tensors-in-5-easy-steps-35f21998bb86).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[WTF is a Tensor?!?](/2018/05/wtf-tensor.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with TensorFlow 2](/2020/07/getting-started-tensorflow2.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Most Important Fundamentals of PyTorch you Should Know](/2020/06/fundamentals-pytorch.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Everything You Need to Know About Tensors](https://www.kdnuggets.com/2022/05/everything-need-know-tensors.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[TensorFlow for Computer Vision - Transfer Learning Made Easy](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Containerize Python Apps with Docker in 5 Easy Steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Machine Learning with Python in 2022](https://www.kdnuggets.com/2022/02/7-steps-mastering-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
