- en: Combining Pandas DataFrames Made Simple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Combining Pandas DataFrames Made Simple](../Images/7b9ab67e85f49434e4247a4e417d520a.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In many Real-Life Scenarios, our data is placed in different files for the sake
    of management and simplicity. We often need to combine them into a single, larger
    DataFrame for analysis. Pandas package comes to our rescue by providing us with
    various methods to combine the DataFrames like concat and merge. In addition,
    it also provides the utilities for comparison purposes.
  prefs: []
  type: TYPE_NORMAL
- en: We will work through the examples to understand how both methods work. For this
    tutorial, we will assume that you have basic knowledge about Python and Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenating Dataframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the format of the two DataFrames is the same, we opt for the **.concat()**
    method. It appends either the columns or rows from one DataFrame to another. The
    **.concat()** takes full responsibility for performing the concatenation operation
    along the axis. Before we dive into its details, let us have a quick look at the
    function syntax and its parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Though there is much going on,  we will focus on the prime parameters only
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '**objs:** List of DataFrame objects or Series to be concatenated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**axis:** axis = 0 tells the pandas to stack the second DataFrame under the
    first one (concatenating by rows) while axis =1 tells the pandas to stack the
    second DataFrame to the right of the first one (concatenating by columns). By
    default , axis = 0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**join:** By default join= outer, outer is used for union and inner for intersection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ignore_index:** It would ignore the index axis in the concatenation process,
    and by default, it''s kept as False because they are respected in the join. However,
    if the index axis does not have meaningful information, then it is useful to ignore
    them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**verify_integrity:** It checks for duplicates in the new concatenated axis
    but by default, it''s kept as False as it can be very expensive relative to actual
    concatenation itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/3ab00aa88b932891643a4b09c5d9886c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scenario 1: Concatenating by Columns'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming that columns A, B, C & D represent different functionalities but the
    index number refers to the same id, it makes more sense to join the C, and D rows
    to the right of df_one. Let's do it,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/e3e38ec873ee132212617dd711c1ece7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scenario 2: Concatenating by Rows'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we continue our above assumption and concatenate them by rows, then the resulting
    DataFrame will have a lot of missing data in form of NaN values. The reason is
    simple, let's say for index = 0 in df_two we cannot place it directly under columns
    A and B as we considered them to be separate functions for which the value is
    not present. Hence pandas will automatically create a complete row for A, B, C,
    and D with missing values in their respective columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/9cb34e027f6e45cf4cecdca485a04b16.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that we have the duplicate index in our final result. This is because
    by default ignore_index is set to False which saves the index of DataFrames as
    it is present originally. This may not be useful in our case so we will set **ignore_index
    = True**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/bfab7bcbeb018fcf4139c5bf3010f220.png)'
  prefs: []
  type: TYPE_IMG
- en: If the columns in both the DataFrames represent the same thing and are just
    named differently, then we can rename the columns before concatenating.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/e101dd738e72dbe3132c768db927712a.png)'
  prefs: []
  type: TYPE_IMG
- en: Merging Dataframes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Merging or joining the dataFrames is different from concatenating. Concatenating
    means just stacking up one dataFrame on another along the desired axis.  While
    joining works just like the joins in SQL. We can combine the dataFrames based
    on a unique column. These methods have high performance and perform significantly
    better. It is useful when one DataFrame is the “lookup Table” containing additional
    data that we want to join to the other. Let''s take a look at its syntax and parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at its prime parameters and what are they for :'
  prefs: []
  type: TYPE_NORMAL
- en: '**left:** Dataframe object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**right:** Dataframe object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**how:** Join type i.e inner, outer, left, right, etc. By default how = “inner”'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on:** Column common in both DataFrame and forms the basis for join operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**left_on:** If you are using the right_index as the column to join on then
    you must specify the column that will be used as the key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**right_on:** Vice versa of left_on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**left_index:** if set to True, then it uses the row labels (Index) of left
    DataFrame as join key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**right_index:** Vice Versa of left_index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sort:** Sort the resultant dataFrame by join keys in lexicographical order
    but it is not recommended as it substantially affects the performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**suffixes:** If we have an overlapping column, you can assign the suffixes
    to distinguish between them. By default, it is set to (''_x'', ''_y'').'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider an example of sports and a library dataFrame and assume that the **“name**”
    column in both the DataFrames is unique and can be used as the primary key.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/42b17b07355c081a2e6b047336d0ef21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scenario 1: Inner and Outer Join'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For both of them, the order in which you place the dataFrame in the .**merge()**
    method doesn’t matter as the final result would still be the same. If we consider
    the two DataFrames as the two sets then the inner join would refer to their intersection
    while the outer join to their union.
  prefs: []
  type: TYPE_NORMAL
- en: '![Combining Pandas DataFrames Made Simple](../Images/9bddf553892cc1c48d64a0f3597b4f0e.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/b57c2f11ecedc5902abc368700e4b2a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scenario 2: Left and Right Join'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, the order in which we place the DataFrames matter. For example, in the
    left join, all the entries of the DataFrame object placed in the left spot will
    be displayed along with their matching entries from the right DataFrame object.
    The right join is just the opposite of what the left join does. Let us understand
    the concept from an example,
  prefs: []
  type: TYPE_NORMAL
- en: '![Combining Pandas DataFrames Made Simple](../Images/ad620c09165771ebd5597a7df4e07720.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/d13f69f05a2609b00ee91fe799c182b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Scenario 3: Joining when using Index'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Firstly, Let us modify our sports table to make the “ name” column an index
    by using the **set_index()** method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/60eb93309b75987c40f2be1f2f7b0349.png)'
  prefs: []
  type: TYPE_IMG
- en: Now we will apply the inner operation and set the value of **left_index= True**
    if we are taking sports as our left DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/b568af6dd6fb9ed8d02ba5bc52caf5a5.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that it shows the same result as we did earlier for the inner join.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario 4: Suffixes Attribute'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us make a small modification to our original dataFrames by changing the
    sports_id and login_id as the id. Now although the name is the same, but we are
    referring to different ids. Pandas is smart enough to identify it and it adds
    the suffixes itself. We will see later on how to customize these suffixes ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/42b17b07355c081a2e6b047336d0ef21.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/f2e6ce7b393de613e1cc968f5c21c427.png)'
  prefs: []
  type: TYPE_IMG
- en: Here the id_x refers to the left dataFrame while id_y refers to the right one.
    Although, it does its job but for the sake of readability and cleaner code we
    customize these suffixes by using the **suffixes** attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Combining Pandas DataFrames Made Simple](../Images/777258dd3015f367aa0128c63b1b029f.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article was intended to simplify the concept of combining the rows in Pandas.
    When you are extracting the data on a larger scale lets say from .csv files, it
    is always recommended to analyze the type and format of data before you begin
    to perform the joining operation. Pandas has some excellent methods in this regard
    too. In case of any issue, you should refer to the official documentation of Pandas.
    Last but not least, everything comes with practice so experiment with different
    DataFrames in your own time for better understanding.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)** is aspiring
    Software Developer who believes in consistent hard work and commitment. She is
    an ambitious programmer with a keen interest in the field of Data Science and
    Machine Learning.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Query Your Pandas DataFrames with SQL](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the apply() Method with Pandas Dataframes](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/01/merge-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/03/3-ways-merge-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Merge Large DataFrames Efficiently with Pandas](https://www.kdnuggets.com/how-to-merge-large-dataframes-efficiently-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
