["```py\n\n%matplotlibinline\n\nimport imageio\nimport matplotlib.pyplot as plt\nimport warnings\nimport matplotlib.cbook\nwarnings.filterwarnings(\"ignore\",category=matplotlib.cbook.mplDeprecation)\n\npic=imageio.imread('img/parrot.jpg')\n\nplt.figure(figsize=(6,6))\nplt.imshow(pic);\nplt.axis('off');\n```", "```py\nS = T(r)\n```", "```py\ns=(L–1)–r\n```", "```py\n\nnegative =255- pic # neg = (L-1) - img\n\nplt.figure(figsize= (6,6))\nplt.imshow(negative);\nplt.axis('off');\n\n```", "```py\ns=c∗log(r+1)\n```", "```py\n\n%matplotlibinline\n\nimport imageio\nimport numpyasnp\nimport matplotlib.pyplotasplt\n\npic=imageio.imread('img/parrot.jpg')\ngray=lambda rgb : np.dot(rgb[...,:3],[0.299,0.587,0.114])\ngray=gray(pic)\n\n '''\nlog transform\n-> s = c*log(1+r)\n\nSo, we calculate constant c to estimate s\n-> c = (L-1)/log(1+|I_max|)\n\n''' \n\nmax_=np.max(gray)\n\ndef log_transform():\nreturn(255/np.log(1+max_))*np.log(1+gray)\n\nplt.figure(figsize=(5,5))\nplt.imshow(log_transform(),cmap=plt.get_cmap(name='gray'))\nplt.axis('off');\n\n```", "```py\nVo  = V^(1/G)\n```", "```py\n\nimport imageio\nimport matplotlib.pyplotasplt\n\n# Gamma encoding \npic=image io.imread('img/parrot.jpg')\ngamma=2.2# Gamma < 1 ~ Dark ; Gamma > 1 ~ Bright\n\ngamma_correction=((pic/255)**(1/gamma))\nplt.figure(figsize=(5,5))\nplt.imshow(gamma_correction)\nplt.axis('off');\n\n```", "```py\nConvolved: (N−F)/S+1\n```", "```py\n32−31+1=30\n```", "```py\n\n%%time\nimport numpy as np\nimport imageio\nimport matplotlib.pyplot as plt\nfrom scipy.signal import convolve2d\n\ndef Convolution(image, kernel):\nconv_bucket= []\nfor d in range(image.ndim):\nconv_channel= convolve2d(image[:,:,d], kernel, \n                               mode=\"same\", boundary=\"symm\")\nconv_bucket.append(conv_channel)\nreturnnp.stack(conv_bucket, axis=2).astype(\"uint8\")\n\nkernel_sizes= [9,15,30,60]\nfig, axs=plt.subplots(nrows=1, ncols=len(kernel_sizes), figsize=(15,15));\n\npic =imageio.imread('img:/parrot.jpg')\n\nfor k, ax in zip(kernel_sizes, axs):\n    kernel =np.ones((k,k))\n    kernel /=np.sum(kernel)\nax.imshow(Convolution(pic, kernel));\nax.set_title(\"Convolved By Kernel: {}\".format(k));\nax.set_axis_off();\nWall time: 43.5 s\n\n```"]