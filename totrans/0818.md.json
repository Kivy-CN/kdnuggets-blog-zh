["```py\npip install matplotlib\n```", "```py\nimport matplotlib.pyplot as plt\n```", "```py\nimport numpy as np\n\nx = np.linspace(0,5,21)\ny = x**2\n```", "```py\nplt.plot(x, y, 'b')\nplt.xlabel('X Axis')\nplt.ylabel('Y Axis')\nplt.title('Sample Plot')\n```", "```py\nplt.subplot(1,2,1)\nplt.plot(x, y, 'b--')\nplt.title('Subplot 1')\nplt.subplot(1,2,2)\nplt.plot(x, y, 'r')\nplt.title('Subplot 2')\n```", "```py\n#create figure instance (Canvas)\nfig = plt.figure()\n\n#add the axes to the canvas\nax = fig.add_axes([0.1, 0.1, 0.7, 0.7]) #left, bottom, width, height (range from 0 to 1)\n\n#add the plot to the axes within the canvas\nax.plot(x, y, 'b')\nax.set_xlabel('X label')\nax.set_ylabel('Y label')\nax.set_title('Plot with OOM')\n```", "```py\n#create figure instance (Canvas)\nfig = plt.figure()\n\n#add two axes to the canvas\nax1 = fig.add_axes([0.1, 0.1, 0.7, 0.7]) \nax2 = fig.add_axes([0.2, 0.35, 0.2, 0.4]) \n\n#add the plot to the respective axes within the canvas\nax1.plot(x, y, 'b')\nax1.set_xlabel('X label Ax 1')\nax1.set_ylabel('Y label Ax 1')\nax1.set_title('Plot with OOM Ax 1')\n\nax2.plot(x, y, 'r--')\nax2.set_xlabel('X label Ax 2')\nax2.set_ylabel('Y label Ax 2')\nax2.set_title('Plot with OOM Ax 2')\n```", "```py\nfig, ax = plt.subplots(nrows = 1, ncols =2)\n\nax[0].plot(x, y, 'b--')\nax[0].set_xlabel('X label')\nax[0].set_ylabel('Y label')\nax[0].set_title('Plot with OOM subplot 1')\n```", "```py\nfig, axes = plt.subplots(nrows = 1, ncols =2)\n\nfor ax in axes:\n\n    ax.plot(x, y, 'b--')\n    ax.set_xlabel('X label')\n    ax.set_ylabel('Y label')\n    ax.set_title('Plot with OOM')\n\nplt.tight_layout()\n```", "```py\nfig = plt.figure(figsize = (8,4), dpi =100)\n```", "```py\nfig = plt.figure(figsize = (8,4), dpi =100)\n\nax = fig.add_axes([0.1, 0.1, 0.7, 0.7])\n\nax.plot(x, y, 'b', label = 'First Line')\nax.plot(x, y/2, 'r', label = 'Second Line')\nax.set_xlabel('X label')\nax.set_ylabel('Y label')\nax.set_title('Plot with OOM and Legend')\nplt.legend()\n```", "```py\nfig.savefig('visualization.jpg')\n```", "```py\nplt.scatter(x,y)\n```", "```py\nplt.hist(y, bins = 5)\n```", "```py\nplt.boxplot(x)\n```", "```py\nfreq = [2,4,1,3]\nfruit = ['Apple', 'Banana', 'Grape', 'Pear']\nplt.pie(freq, labels = fruit)\n```", "```py\npip install seaborn\n```", "```py\nimport seaborn as sns\n\ntips = sns.load_dataset('tips')\ntips.head()\n```", "```py\nsns.displot(data = tips, x = 'tip')\n```", "```py\nsns.displot(data = tips, x = 'tip', kind = 'kde')\n```", "```py\nsns.displot(data = tips, x = 'tip', kind = 'kde', hue = 'smoker')\n```", "```py\nsns.displot(data = tips, x = 'tip', kind = 'kde', hue = 'smoker', row = 'time', col = 'sex')\n```", "```py\nsns.boxplot(data = tips, x = 'time', y = 'tip')\n```", "```py\nsns.violinplot(data = tips, x = 'time', y = 'tip')\nsns.swarmplot(data = tips, x = 'time', y = 'tip', palette = 'Set1')\n```", "```py\nsns.countplot(data = tips, x = 'time')\n```", "```py\np = sns.countplot(data = tips, x = 'time')\np.bar_label(p.containers[0])\n```", "```py\np = sns.countplot(data = tips, x = 'time', hue = 'sex')\nfor container in p.containers:\n    ax.bar_label(container)\n```", "```py\nsns.barplot(data = tips, x = 'time', y = 'tip')\n```", "```py\nimport numpy as np\nsns.barplot(data = tips, x = 'time', y = 'tip', estimator = np.median)\n```", "```py\nsns.scatterplot(data = tips, x = 'tip', y = 'total_bill')\n```", "```py\nsns.jointplot(data = tips, x = 'tip', y = 'total_bill')\n```", "```py\nsns.pairplot(data = tips)\n```", "```py\ntips.corr()\n```", "```py\nsns.heatmap(tips.corr(), annot = True)\n```", "```py\nsns.clustermap(tips.pivot_table(values = 'tip', index = 'size', columns = 'day').fillna(0))\n```"]