["```py\nimport sys, re, datetime, os, glob, argparse, json, yaml, pprint, urllib.request, wget, logging\nimport gspread\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nfrom bs4 import BeautifulSoup\nfrom oauth2client.service_account import ServiceAccountCredentials\n\nimport const\nfrom my_preprocessing import dates\n```", "```py\ndef quit():\n\t\"\"\"Program was not initialized correctly\"\"\"\n\tprint(\"example: python template.py -o something_here -b\")\n\tsys.exit(1)\n\ndef custom_error(message):\n\t\"\"\"Some other custom error\"\"\"\n\tprint(\"There is a problem: %s\" % message)\n\tsys.exit(2)\n```", "```py\n# Parse and process command line args\nparser = argparse.ArgumentParser(description='Python data processing command line template.')\nparser.add_argument('required_arg', metavar='req', type=int,\n\thelp='a required arg of type int')\nparser.add_argument('-o', '--optional', type=str, default='default_value',\n\thelp='optional arg of type str')\nparser.add_argument('-b', '--boolean', action='store_true',\n\thelp='optional boolean arg, False if not used')\n\n# Call custom function for additional console output when parse fails\ntry:\n\targs = parser.parse_args()\nexcept SystemExit:\n\tquit()\n\n# Assign command line args to variables\nvar_1 = args.req\nvar_2 = args.optional\nvar_3 = args.boolean\n```", "```py\n# Process data filenames\nfiles_yaml = '/path/to/files/config/files.yaml'\nwith open(files_yaml) as f:\n\tfiles_dict = yaml.safe_load(f)\ninput_file = files_dict['input']\ntemp_file = files_dict['temp']\noutput_file = files_dict['output']\ndatabase_file = files_dict['example.db']\n```", "```py\ninput: '/path/to/project/specific/input/file'\n\noutput: '/path/to/project/specific/output/file'\n\ntemp: '/path/to/project/specific/temp/file'\n\ndatabase: '/path/to/project/specific/database/file.db'\n```", "```py\n# Google Sheets API setup\ncreds_yaml = '/path/to/credentials/config/google_api.yaml'\nwith open(creds_yaml) as f:\n\tcreds_dict = yaml.safe_load(f)\nscope = creds_dict['scope']\ncreds_file = creds_dict['creds_file']\ncreds = ServiceAccountCredentials.from_json_keyfile_name(creds_file, scope)\nclient = gspread.authorize(creds)\n\n# Google Sheets workbook and sheet setup\ndata_workbook = 'sample-workbook'\ndata_sheet = client.open(data_workbook).sheet1\n```", "```py\n# Create database connection\ncon = sqlite3.connect(database_file)\n\n# Perform some SQL tasks\ncur = con.cursor()\n# ...\n\n# Save (commit) the changes\ncon.commit()\n\n# Close connection\ncon.close()\n```", "```py\nUsing BeautifulSoup for HTML scraping \"\"\"\n# Make the soup\nhtml = input_file.read()\nsoup = BeautifulSoup(html, 'lxml')\n\n\"\"\" Using variables from imported const file \"\"\"\n# Drop invalid tags\nfor tag in const.INVALID_TAGS: \n\tfor match in soup.find_all(tag):\n\t\tmatch.replaceWithChildren()\n\n# BeautifulSoup bytes to string\nsoup_str = str(soup)\n\n# String replacements and footer append\nfor pair in const.PAIRS:\n\tsoup_str = soup_str.replace(str(pair[0]), str(pair[1]))\nsoup_str += const.FOOTER_INFO\n\n\"\"\" Using regular expressions substitution \"\"\"\n# Remove excess newlines\nsoup_str = re.sub(r'\\n\\s*\\n\\n', '\\n', soup_str)\n\n# Output resulting HTML to file, clean up\noutput_file.write(soup_str)\noutput_file.close()\ninput_file.close()\n```", "```py\n# Date feature engineering\nmy_date = dates.process_date('2021-12-31')\npprint.pprint(my_date)\n```"]