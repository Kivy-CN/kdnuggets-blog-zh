["```py\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\n\n# Read dataset\ndata = pd.read_csv('3D_spatial_network.csv', header=None)\n\n# Drop first column (not required)\ndata.drop(labels=0, axis=1, inplace=True)\n\n# Normalize data (min/max scaling)\ndata_arr = data.values\nsc = preprocessing.MinMaxScaler()\ndata_sc = sc.fit_transform(data_arr)\ndata = pd.DataFrame(data_sc)\n```", "```py\n\ndata.sample(10)\n\n```", "```py\n\n# Some variables\nSAMPLE_SIZE = 0.1\nRANDOM_STATE = 42\nNUM_CLUSTERS = 10     # k\nNUM_ITER = 3          # n\nNUM_ATTEMPTS = 5      # m\n\ndata_sample = data.sample(frac=SAMPLE_SIZE, random_state=RANDOM_STATE, replace=False)\ndata_sample.shape\n```", "```py\n\nfrom sklearn.cluster import KMeans\n\nkm = KMeans(n_clusters=NUM_CLUSTERS, init='random', max_iter=1, n_init=1)#, verbose=1)\nkm.fit(data_sample)\n\nprint('Pre-clustering metrics')\nprint('----------------------')\nprint('Inertia:', km.inertia_)\nprint('Centroids:', km.cluster_centers_)\n```", "```py\n\nPre-clustering metrics\n----------------------\nInertia: 898.5527121490726\nCentroids: [[0.42360342 0.20208702 0.26294088]\n [0.56835267 0.34756347 0.14179924]\n [0.66005691 0.73147524 0.38203476]\n [0.23935675 0.08942105 0.11727529]\n [0.58630271 0.23417288 0.45793108]\n [0.1982982  0.11219503 0.23924021]\n [0.79313864 0.52773534 0.1334036 ]\n [0.54442269 0.60599501 0.17600424]\n [0.14588389 0.29821987 0.18053109]\n [0.73877864 0.8379479  0.12567452]]\n\n```", "```py\n\nfinal_cents = []\nfinal_inert = []\n\nfor sample in range(NUM_ATTEMPTS):\n    print('\\nCentroid attempt: ', sample)\n    km = KMeans(n_clusters=NUM_CLUSTERS, init='random', max_iter=1, n_init=1)#, verbose=1) \n    km.fit(data_sample)\n    inertia_start = km.inertia_\n    intertia_end = 0\n    cents = km.cluster_centers_\n\n    for iter in range(NUM_ITER):\n        km = KMeans(n_clusters=NUM_CLUSTERS, init=cents, max_iter=1, n_init=1)\n        km.fit(data_sample)\n        print('Iteration: ', iter)\n        print('Inertia:', km.inertia_)\n        print('Centroids:', km.cluster_centers_)\n        inertia_end = km.inertia_\n        cents = km.cluster_centers_\n\n    final_cents.append(cents)\n    final_inert.append(inertia_end)\n    print('Difference between initial and final inertia: ', inertia_start-inertia_end)\n\n```", "```py\n\nCentroid attempt:  0\nIteration:  0\nInertia: 885.1279991728289\nCentroids: [[0.67629991 0.54950506 0.14924545]\n [0.78911957 0.97469266 0.09090362]\n [0.61465665 0.32348368 0.11496346]\n [0.73784495 0.83111278 0.11263995]\n [0.34518925 0.37622882 0.1508636 ]\n [0.18220657 0.18489484 0.19303869]\n [0.55688642 0.35810877 0.32704852]\n [0.6884195  0.65798194 0.48258798]\n [0.62945726 0.73950354 0.21866185]\n [0.52282355 0.12252092 0.36251485]]\nIteration:  1\nInertia: 861.7158412685387\nCentroids: [[0.67039882 0.55769658 0.15204125]\n [0.78156936 0.96504069 0.09821352]\n [0.61009844 0.33444322 0.11527662]\n [0.75151713 0.79798919 0.1225065 ]\n [0.33091899 0.39011157 0.14788905]\n [0.18246521 0.18602087 0.19239602]\n [0.55246091 0.3507018  0.33212609]\n [0.68998302 0.65595219 0.48521344]\n [0.60291234 0.73999001 0.23322449]\n [0.51953015 0.12140833 0.34820443]]\nIteration:  2\nInertia: 839.2470653106332\nCentroids: [[0.65447477 0.55594052 0.15747416]\n [0.77412386 0.952986   0.10887517]\n [0.60761544 0.34326727 0.11544127]\n [0.77183027 0.76936972 0.12249837]\n [0.32151587 0.39281244 0.14797103]\n [0.18240552 0.18375276 0.19278224]\n [0.55052636 0.34639191 0.33667632]\n [0.691699   0.65507199 0.48648245]\n [0.59408317 0.73763362 0.23387334]\n [0.51879974 0.11982321 0.34035345]]\nDifference between initial and final inertia:  99.6102464383905\n\n...\n\n```", "```py\n\n# Get best centroids to use for full clustering\nbest_cents = final_cents[final_inert.index(min(final_inert))]\nbest_cents\n```", "```py\narray([[0.55053207, 0.16588572, 0.44981164],\n       [0.78661867, 0.77450779, 0.11764745],\n       [0.656176  , 0.55398196, 0.4748823 ],\n       [0.17621429, 0.13463117, 0.17132811],\n       [0.63702675, 0.14021011, 0.18632431],\n       [0.60838757, 0.39809226, 0.14491584],\n       [0.43593405, 0.49377153, 0.14018223],\n       [0.16800744, 0.34174697, 0.19503396],\n       [0.40169376, 0.15386471, 0.23633233],\n       [0.62151433, 0.72434071, 0.25946183]])\n\n```", "```py\n\nkm_full = KMeans(n_clusters=NUM_CLUSTERS, init=best_cents, max_iter=100, verbose=1, n_init=1)\nkm_full.fit(data)\n\n```", "```py\n\n...\n\nstart iteration\ndone sorting\nend inner loop\nIteration 13, inertia 7492.170210199639\ncenter shift 1.475641e-03 within tolerance 4.019354e-06\n\n```", "```py\n\nkm_naive = KMeans(n_clusters=NUM_CLUSTERS, init='random', max_iter=100, verbose=1, n_init=1)\nkm_naive.fit(data)\n\n```", "```py\n\n...\n\nstart iteration\ndone sorting\nend inner loop\nIteration 39, inertia 7473.495361902045\ncenter shift 1.948248e-03 within tolerance 4.019354e-06\n\n```"]