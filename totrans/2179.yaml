- en: Step-by-Step Tutorial to Building Your First Machine Learning Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/step-by-step-tutorial-to-building-your-first-machine-learning-model](https://www.kdnuggets.com/step-by-step-tutorial-to-building-your-first-machine-learning-model)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Build Your First Machine Learning Model](../Images/a39ced9aebcf787ca24dbe305242b487.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by pch.vector on [Freepik](https://www.freepik.com/free-vector/scientists-studying-neural-connections-programmers-writing-codes-machine-brain_12291267.htm#fromView=search&page=1&position=0&uuid=cedf5a0c-dfa5-4c5a-b7cd-6aed3e67bde3)
  prefs: []
  type: TYPE_NORMAL
- en: Hi everyone! I am sure you are reading this article because you are interested
    in a machine-learning model and want to build one.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: You may have tried to develop machine learning models before or you are entirely
    new to the concept. No matter your experience, this article will guide you through
    the best practices for developing machine learning models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this article, we will develop a Customer Churn prediction classification
    model following the steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Business Understanding
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Data Collection and Preparation
  prefs: []
  type: TYPE_NORMAL
- en: Collecting Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploratory Data Analysis (EDA) and Data Cleaning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature Selection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 3\. Building the Machine Learning Model
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the Right Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splitting the Data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training the Model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model Evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4\. Model Optimization
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Deploying the Model
  prefs: []
  type: TYPE_NORMAL
- en: Let's get into it if you are excited about building your first machine learning
    model.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Basics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we get into the machine learning model development, let’s briefly explain
    machine learning, the types of machine learning, and a few terminologies we will
    use in this article.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s discuss the types of machine learning models we can develop. Four
    main types of Machine Learning often developed are:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Supervised Machine Learning is a machine learning algorithm that learns from
    labeled datasets. Based on the correct output, the model learns from the pattern
    and tries to predict the new data. There are two categories in Supervised Machine
    Learning: **Classification** (Category prediction) and **Regression** (Numerical
    prediction).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unsupervised Machine Learning is an algorithm that tries to find patterns in
    data without direction. Unlike supervised machine learning, the model is not guided
    by label data. This type has two common categories: **Clustering** (Data Segmentation)
    and **Dimensionality Reduction** (Feature Reduction).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Semi-supervised machine learning combines the labeled and unlabeled datasets,
    where the labeled dataset guides the model in identifying patterns in the unlabeled
    data. The simplest example is a self-training model that can label the unlabeled
    data based on a labeled data pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reinforcement Learning is a machine learning algorithm that can interact with
    the environment and react based on the action (getting a reward or punishment).
    It would maximize the result with the rewards system and avoid bad results with
    punishment. An example of this model application is the self-driving car.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You also need to know a few terminologies to develop a machine-learning model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Features: Input variables used to make predictions in a machine learning model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Labels: Output variables that the model is trying to predict.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data Splitting: The process of data separation into different sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Training Set: Data used to train the machine learning model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Test Set: Data used to evaluate the performance of the trained model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Validation Set: Data use used during the training process to tune hyperparameters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exploratory Data Analysis (EDA): The process of analyzing and visualizing datasets
    to summarize their information and discover patterns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Models: The outcome of the Machine Learning process. They are the mathematical
    representation of the patterns and relationships within the data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overfitting: Occurs when the model is generalized too well and learns the data
    noise. The model can predict well in the training but not in the test set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Underfitting: When a model is too simple to capture the underlying patterns
    in the data. The model performance in training and test sets could be better.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hyperparameters: Configuration settings are used to tune the model and are
    set before training begins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cross-validation: a technique for evaluating the model by partitioning the
    original sample into training and validation sets multiple times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Feature Engineering: Using domain knowledge to get new features from raw data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Model Training: The process of learning the parameters of a model using the
    training data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Model Evaluation: Assessing the performance of a trained model using machine
    learning metrics like accuracy, precision, and recall.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Model Deployment: Making a trained model available in a production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With all this basic knowledge, let’s learn to develop our first machine-learning
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Business Understanding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before any machine learning model development, we must understand why we must
    develop the model. That’s why understanding what the business wants is necessary
    to ensure the model is valid.
  prefs: []
  type: TYPE_NORMAL
- en: Business understanding usually requires a proper discussion with the related
    stakeholders. Still, since this tutorial does not have business users for the
    machine learning model, we assume the business needs ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: As stated previously, we would develop a Customer Churn prediction model. In
    this case, the business needs to avoid further churn from the company and wants
    to take action for the customer with a high probability of churning.
  prefs: []
  type: TYPE_NORMAL
- en: With the above business requirements, we need specific metrics to measure whether
    the model performs well. There are many measurements, but I propose using the
    Recall metric.
  prefs: []
  type: TYPE_NORMAL
- en: In monetary values, it might be more beneficial to use Recall, as it tries to
    minimize the False Negative or decrease the amount of prediction that was not
    churning while it’s churning. Of course, we can try to aim for balance by using
    the F1 metric.
  prefs: []
  type: TYPE_NORMAL
- en: With that in mind, let's get into the first part of our tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Data Collection and Preparation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Data Collection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data is the heart of any machine learning project. Without it, we can’t have
    a machine learning model to train. That’s why we need quality data with proper
    preparation before we input them into the machine learning algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world case, clean data does not come easily. Often, we need to collect
    it through applications, surveys, and many other sources before storing it in
    data storage. However, this tutorial only covers collecting the dataset as we
    use the existing clean data.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we would use the Telco Customer Churn data from the [Kaggle](https://www.kaggle.com/datasets/blastchar/telco-customer-churn).
    It’s open-source classification data regarding customer history in the telco industry
    with the churn label.
  prefs: []
  type: TYPE_NORMAL
- en: Exploratory Data Analysis (EDA) and Data Cleaning
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start by reviewing our dataset. I assume the reader already has basic
    Python knowledge and can use Python packages in their notebook. I also based the
    tutorial on [Anaconda](https://www.anaconda.com/download) environment distribution
    to make things easier.
  prefs: []
  type: TYPE_NORMAL
- en: To understand the data we have, we need to load it into a Python package for
    data manipulation. The most famous one is the Pandas Python package, which we
    will use. We can use the following code to load and review the CSV data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/d000a3dd8c62d87a83586bbb7e52670b.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we would explore the data to understand our dataset. Here are a few actions
    that we would perform for the EDA process.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Examining the features and the summary statistics.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Checks for missing values in the features.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Analyze the distribution of the label (Churn).
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Plots histograms for numerical features and bar plots for categorical features.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Plots a correlation heatmap for numerical features.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Uses box plots to identify distributions and potential outliers.
  prefs: []
  type: TYPE_NORMAL
- en: First, we would check the features and summary statistics. With Pandas, we can
    see our dataset features using the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We would also get the dataset summary statistics with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/8146f78756732a8535f8f817e1ecf7e0.png)'
  prefs: []
  type: TYPE_IMG
- en: From the information above, we understand that we have 19 features with one
    target feature (Churn). The dataset contains 7043 rows, and most datasets are
    categorical.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s check for the missing data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Our dataset does not contain missing data, so we don’t need to perform any missing
    data treatment activity.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we would check the target variable to see if we have an imbalance case.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There is a slight imbalance, as only close to 25% of the churn occurs compared
    to the non-churn cases.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s also see the distribution of the other features, starting with the numerical
    features. However, we would also transform the TotalCharges feature into a numerical
    column, as this feature should be numerical rather than a category. Additionally,
    the SeniorCitizen feature should be categorical so that I would transform it into
    strings. Also, as the Churn feature is categorical, we would develop new features
    that show it as a numerical column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/0f784480cd073fbe036e8004f31cc975.png)'
  prefs: []
  type: TYPE_IMG
- en: We would also provide categorical feature plotting except for the customerID,
    as they are identifiers with unique values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/29025557bd7c4be0ea896eab342ff3b0.png)'
  prefs: []
  type: TYPE_IMG
- en: We then would see the correlation between numerical features with the following
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/3718d0d8ef185d320f9e79a3bfc5c2c5.png)'
  prefs: []
  type: TYPE_IMG
- en: The correlation above is based on the [Pearson Correlation](https://en.wikipedia.org/wiki/Pearson_correlation_coefficient),
    a linear correlation between one feature and the other. We can also perform correlation
    analysis to categorical analysis with [Cramer’s V](https://en.wikipedia.org/wiki/Cram%C3%A9r%27s_V).
    To make the analysis easier, we would install Dython Python package that could
    help our analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Once the package is installed, we will perform the correlation analysis with
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/da68faa02ff0bccdeb6ffaff89c081af.png)'
  prefs: []
  type: TYPE_IMG
- en: Lastly, we would check the numerical outlier with a box plot based on the [Interquartile
    Range (IQR)](https://en.wikipedia.org/wiki/Interquartile_range).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/29025557bd7c4be0ea896eab342ff3b0.png)'
  prefs: []
  type: TYPE_IMG
- en: From the analysis above, we can see that we should address no missing data or
    outliers. The next step is to perform feature selection for our machine learning
    model, as we only want the features that impact the prediction and are viable
    in the business.
  prefs: []
  type: TYPE_NORMAL
- en: Feature Selection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are many ways to perform feature selection, usually done by combining
    business knowledge and technical application. However, this tutorial will only
    use the correlation analysis we have done previously to make the feature selection.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s select the numerical features based on the correlation analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: You can play around with the threshold later to see if the feature selection
    affects the model's performance. We would also perform the feature selection into
    the categorical features.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Then, we would combine all the selected features with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the end, we have six features that would be used to develop the customer
    churn machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Building the Machine Learning Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Choosing the Right Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are many considerations to choosing a suitable model for machine learning
    development, but it always depends on the business needs. A few points to remember:'
  prefs: []
  type: TYPE_NORMAL
- en: The use case problem. Is it supervised or unsupervised, or is it classification
    or regression? Is it Multiclass or Multilabel? The case problem would dictate
    which model can be used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The data characteristics. Is it tabular data, text, or image? Is the dataset
    size big or small? Did the dataset contain missing values? Depending on the dataset,
    the model we choose could be different.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How easy is the model to be interpreted? Balancing interpretability and performance
    is essential for the business.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As a thumb rule, starting with a simpler model as a benchmark is often best
    before proceeding to a complex one. You can read my previous [article about the
    simple model](https://www.kdnuggets.com/are-we-undervaluing-simple-models) to
    understand what constitutes a simple model.
  prefs: []
  type: TYPE_NORMAL
- en: For this tutorial, let’s start with linear model Logistic Regression for the
    model development.
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next activity is to split the data into training, test, and validation sets.
    The purpose of data splitting during machine learning model training is to have
    a data set that acts as unseen data (real-world data) to evaluate the model unbias
    without any data leakage.
  prefs: []
  type: TYPE_NORMAL
- en: 'To split the data, we will use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the above code, we split the data into 60% of the training dataset and 20%
    of the test and validation set. Once we have the dataset, we will train the model.
  prefs: []
  type: TYPE_NORMAL
- en: Training the Model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, we would train a Logistic Regression model with our training data.
    However, the model can only accept numerical data, so we must preprocess the dataset.
    This means we need to transform the categorical data into numerical data.
  prefs: []
  type: TYPE_NORMAL
- en: For best practice, we also use the Scikit-Learn pipeline to contain all the
    preprocessing and modeling steps. The following code allows you to do that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The model pipeline would look like the image below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/f2d0503020b1e6d51cc657e7fe5ba4ea.png)'
  prefs: []
  type: TYPE_IMG
- en: The Scikit-Learn pipeline would accept the unseen data and go through all the
    preprocessing steps before entering the model. After the model is finished training,
    let’s evaluate our model result.
  prefs: []
  type: TYPE_NORMAL
- en: Model Evaluation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, we will evaluate the model by focusing on the Recall metrics.
    However, the following code shows all the basic classification metrics.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/07bc91caaf1ae99286c2d59fa6f9d511.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see from the Validation and Test data, the Recall for churn (1) is
    not the best. That’s why we can optimize the model to get the best result.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Model Optimization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We always need to focus on the data to get the best result. However, optimizing
    the model could also lead to better results. This is why we can optimize our model.
    One way to optimize the model is via hyperparameter optimization, which tests
    all combinations of these model hyperparameters to find the best one based on
    the metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Every model has a set of hyperparameters we can set before training it. We call
    hyperparameter optimization the experiment to see which combination is the best.
    To do that, we can use the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/c83df29e42b78c4a31a6d8a78d3349ca.png)'
  prefs: []
  type: TYPE_IMG
- en: The results still do not show the best recall score, but this is expected as
    they are only the baseline model. Let’s experiment with several models to see
    if the Recall performance improves. You can always tweak the hyperparameter below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![Step-by-Step Tutorial to Building Your First Machine Learning Model](../Images/b01f8a8b62fcc4995e786ea84f9153ef.png)'
  prefs: []
  type: TYPE_IMG
- en: The recall result has not changed much; even the baseline Logistic Regression
    seems the best. We should return with a better feature selection if we want a
    better result.
  prefs: []
  type: TYPE_NORMAL
- en: However, let’s move forward with the current Logistic Regression model and try
    to deploy them.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Deploying the Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have built our machine learning model. After having the model, the next step
    is to deploy it into production. Let’s simulate it using a simple API.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s develop our model again and save it as a joblib object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Once the model object is ready, we will move into a Python script to create
    the API. But first, we need to install a few packages used for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We would not do it in the notebook but in an IDE such as Visual Studio Code.
    In your preferred IDE, create a Python script called **app.py** and put the code
    below into the script.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In your command prompt or terminal, run the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: With the code above, we already have an API to accept data and create predictions.
    Let’s try it out with the following code in the new terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the API result is a dictionary with prediction 0 (Not-Churn).
    You can tweak the code even further to get the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulation. You have developed your machine learning model and successfully
    deployed it in the API.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have learned how to develop a machine learning model from the beginning to
    the deployment. Experiment with other datasets and use cases to get the feeling
    even better. All the code this article uses will be available on my [GitHub repository](https://github.com/CornelliusYW/churn_prediction_machine_learning_development).
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**[Cornellius Yudha
    Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**** is a data science
    assistant manager and data writer. While working full-time at Allianz Indonesia,
    he loves to share Python and data tips via social media and writing media. Cornellius
    writes on a variety of AI and machine learning topics.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Deploying Machine Learning Models: A Step-by-Step Tutorial](https://www.kdnuggets.com/deploying-machine-learning-models-a-step-by-step-tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploying Your First Machine Learning Model](https://www.kdnuggets.com/deploying-your-first-machine-learning-model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building and Training Your First Neural Network with TensorFlow and Keras](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Your First ETL Pipeline with Bash](https://www.kdnuggets.com/building-your-first-etl-pipeline-with-bash)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[From Zero to Hero: Create Your First ML Model with PyTorch](https://www.kdnuggets.com/from-zero-to-hero-create-your-first-ml-model-with-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Structured Approach To Building a Machine Learning Model](https://www.kdnuggets.com/2022/06/structured-approach-building-machine-learning-model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
