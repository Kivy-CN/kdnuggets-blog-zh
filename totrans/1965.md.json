["```py\ninventory_app/\n├── app.py\n├── Dockerfile\n├── requirements.txt \n```", "```py\n# app.py\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n# In-memory database for simplicity\ninventory = {}\n\n@app.route('/inventory', methods=['POST'])\ndef add_item():\n    item = request.get_json()\n    item_id = item.get('id')\n    if not item_id:\n        return jsonify({\"error\": \"Item ID is required\"}), 400\n    if item_id in inventory:\n    \treturn jsonify({\"error\": \"Item already exists\"}), 400\n    inventory[item_id] = item\n    return jsonify(item), 201\n\n@app.route('/inventory/<item_id>', methods=['GET'])\ndef get_item(item_id):\n    item = inventory.get(item_id)\n    if not item:\n        return jsonify({\"error\": \"Item not found\"}), 404\n    return jsonify(item)\n\n@app.route('/inventory/<item_id>', methods=['PUT'])\ndef update_item(item_id):\n    if item_id not in inventory:\n        return jsonify({\"error\": \"Item not found\"}), 404\n    updated_item = request.get_json()\n    inventory[item_id] = updated_item\n    return jsonify(updated_item)\n\n@app.route('/inventory/<item_id>', methods=['DELETE'])\ndef delete_item(item_id):\n    if item_id not in inventory:\n        return jsonify({\"error\": \"Item not found\"}), 404\n    del inventory[item_id]\n    return '', 204\n\nif __name__ == '__main__':\n\tapp.run(host='0.0.0.0', port=5000)</item_id></item_id></item_id> \n```", "```py\nFlask==3.0.3 \n```", "```py\n# Use the official Python 3.11 image\nFROM python:3.11\n\n# Set the working directory\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 5000\n\n# Run the application\nCMD [\"python3\", \"app.py\"] \n```", "```py\n$ docker build -t inventory-app:full . \n```", "```py\n$ docker images\nREPOSITORY      TAG                 IMAGE ID       CREATED             SIZE\ninventory-app   full                4e623743f556   2 hours ago         1.02GB \n```", "```py\n# Use the official lightweight Python 3.11-slim image\nFROM python:3.11-slim\n\n# Set the working directory\nWORKDIR /app\n\n# Install dependencies\nCOPY requirements.txt requirements.txt\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the current directory contents into the container at /app\nCOPY . .\n\n# Expose the port the app runs on\nEXPOSE 5000\n\n# Run the application\nCMD [\"python3\", \"app.py\"] \n```", "```py\n$ docker build -t inventory-app:slim . \n```", "```py\n$ docker images\nREPOSITORY      TAG                 IMAGE ID       CREATED             SIZE\ninventory-app   slim                32784c60a992   About an hour ago   146MB\ninventory-app   full                4e623743f556   2 hours ago         1.02GB \n```"]