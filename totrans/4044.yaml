- en: 'How To Write Efficient Python Code: A Tutorial for Beginners'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写高效的 Python 代码：初学者教程
- en: 原文：[https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/fbb354c3b1dea917f46b644f09631a9a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何编写高效的 Python 代码：初学者教程](../Images/fbb354c3b1dea917f46b644f09631a9a.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Beginner programmers enjoy coding in Python because of its simplicity and easy-to-read
    syntax. Writing efficient Python code, however, is more involved than you think.
    It requires understanding of some of the features of the language (they’re just
    as simple to pick up, though).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者喜欢使用 Python 编程，因为它的简单性和易读语法。然而，编写高效的 Python 代码比你想象的要复杂。这需要对语言的一些特性有一定理解（不过它们也很容易掌握）。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 管理'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: If you’re coming from another programming language such as C++ or JavaScript,
    this tutorial is for you to learn some tips to write efficient code in Python.
    But if you are a beginner—learning Python as your first (programming) language—then
    this tutorial will help you write Pythonic code from the get go.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你来自其他编程语言，如 C++ 或 JavaScript，这个教程是为你提供一些编写高效 Python 代码的技巧。但是如果你是初学者——将 Python
    作为你的第一门（编程）语言——那么这个教程将帮助你从一开始就编写 Pythonic 代码。
- en: 'We’ll focus on the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重点关注以下内容：
- en: Pythonic loops
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pythonic 循环
- en: List and dictionary comprehension
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表和字典推导式
- en: Context managers
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文管理器
- en: Generators
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器
- en: Collection classes
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合类
- en: So let's dive in!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们开始吧！
- en: 1\. Write Pythonic Loops
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 编写 Pythonic 循环
- en: Understanding loop constructs is important regardless of the language you’re
    programming in. If you’re coming from languages such as C++ or JavaScript, it's
    helpful to learn how to write Pythonic loops.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 理解循环构造无论你编程使用哪种语言都是重要的。如果你来自 C++ 或 JavaScript 这样的语言，学习如何编写 Pythonic 循环会很有帮助。
- en: Generate a Sequence of Numbers with range
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 range 生成数字序列
- en: The `range()` function generates a sequence of numbers, often used as an iterator
    in loops.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`range()`函数生成一个数字序列，通常在循环中作为迭代器使用。'
- en: The `range()` function returns a range object that starts from 0 by default
    and goes up to (but doesn't include) the specified number.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`range()`函数返回一个范围对象，该对象默认从0开始，到指定的数字（但不包括）为止。'
- en: 'Here’s an example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: When using the `range()` function, you can customize the starting point, ending
    point, and step size as needed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`range()`函数时，你可以根据需要自定义起始点、终止点和步长。
- en: Access Both Index and Item with enumerate
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 enumerate 访问索引和项
- en: The `enumerate()` function is useful when you want both the index and the value
    of each element in an iterable.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`enumerate()`函数在你需要同时获取每个元素的索引和值时非常有用。'
- en: 'In this example, we use the index to tap into the `fruits` list:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用索引来访问`fruits`列表：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'But with the `enumerate()` function, you can access both the index and the
    element like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但使用`enumerate()`函数，你可以同时访问索引和元素，如下所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Iterate in Parallel Over Multiple Iterables with zip
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 zip 在多个可迭代对象中并行遍历
- en: The `zip()` function is used to iterate over multiple iterables in parallel.
    It pairs corresponding elements from different iterables together.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`zip()`函数用于并行遍历多个可迭代对象。它将不同可迭代对象中的对应元素配对在一起。'
- en: 'Consider the following example where you need to loop through both `names`
    and `scores` list:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例，其中你需要遍历`names`和`scores`列表：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This outputs:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这输出：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s a much more readable loop with the `zip()` function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个使用`zip()`函数的更具可读性的循环：
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The Pythonic version using `zip()` is more elegant and avoids the need for manual
    indexing—making the code cleaner and more readable.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use List and Dictionary Comprehensions
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, list comprehensions and dictionary comprehensions are concise one-liners
    to create lists and dictionaries, respectively. They can also include conditional
    statements to filter items based on certain conditions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the loop version and then move on to comprehension expressions
    for both lists and dictionaries.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: List Comprehension in Python
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Say you have a `numbers` list. And you’d like to create a `squared_numbers`
    list. You can use a for loop like so:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: But list comprehensions provide a cleaner and simpler syntax to do this. They
    allow you to create a new list by applying an expression to each item in an iterable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/834dac015d44de3b2c62355bee951c6a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: List Comprehension Syntax | Image by Author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a concise alternative using a list comprehension expression:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here, the list comprehension creates a new list containing the squares of each
    number in the `numbers` list.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: List Comprehension with Conditional Filtering
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also add filtering conditions within the list comprehension expression.
    Consider this example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In this example, the list comprehension creates a new list containing only the
    odd numbers from the `numbers` list.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary Comprehension in Python
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With a syntax similar to list comprehension, dictionary comprehension allows
    you to create dictionaries from existing iterables.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/21e98d330d1a850a65d653b892ec8cde.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: Dictionary Comprehension Syntax | Image by Author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Say you have a `fruits` list. You’d like to create a dictionary with `fruit:len(fruit)`
    key-value pairs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can do this with a for loop:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let’s now write the dictionary comprehension equivalent:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This dictionary comprehension creates a dictionary where keys are the fruits
    and values are the lengths of the fruit names.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary Comprehension with Conditional Filtering
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s modify our dictionary comprehension expression to include a condition:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here, the dictionary comprehension creates a dictionary with fruit names as
    keys and their lengths as values, but only for fruits with names longer than 5
    characters.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use Context Managers for Effective Resource Handling
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Context managers in Python help you manage resources efficiently. With context
    managers, you can set up and tear down (clean up) resources easily. The simplest
    and the most common example of context managers is in file handling.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the code snippet below:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: It doesn't close the file descriptor resulting in resource leakage.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You’ll probably come up with the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: While this attempts to close the descriptor, it does not account for the errors
    that may arise during the write operation.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, you may now implement exception handling to try to open a file and write
    something in the absence of any errors:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以实现异常处理以尝试打开文件并在没有错误的情况下写入内容：
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'But this is verbose. Now look at the following version using the `with` statement
    that supports `open()` function which is a context manager:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但这很冗长。现在看看以下使用 `with` 语句的版本，它支持作为上下文管理器的 `open()` 函数：
- en: '[PRE26]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We use the `with` statement to create a context in which the file is opened.
    This ensures that the file is properly closed when the execution exits the `with`
    block—even if an exception is raised during the operation.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `with` 语句来创建一个上下文，在其中打开文件。这确保了当执行退出 `with` 块时，文件会被正确关闭——即使在操作过程中引发了异常。
- en: 4\. Use Generators for Memory-Efficient Processing
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4. 使用生成器进行内存高效处理
- en: Generators provide an elegant way to work with large datasets or infinite sequences—improving
    code efficiency and reducing memory consumption.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器提供了一种优雅的方式来处理大数据集或无限序列——提高代码效率并减少内存消耗。
- en: What Are Generators?
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是生成器？
- en: Generators are functions that use the `yield` keyword to return values one at
    a time, preserving their internal state between invocations. Unlike regular functions
    that compute all values at once and return a complete list, generators compute
    and yield values on-the-fly as they are requested, making them suitable for processing
    large sequences.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器是使用 `yield` 关键字逐个返回值的函数，保留其内部状态以便在调用之间继续。与一次计算所有值并返回完整列表的常规函数不同，生成器按需计算并逐步生成值，使它们适合处理大型序列。
- en: How Do Generators Work?
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成器是如何工作的？
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/f84840331325804f35f889783903659b.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![如何编写高效的 Python 代码：初学者教程](../Images/f84840331325804f35f889783903659b.png)'
- en: Image by Author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Let’s learn how generators work:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解生成器是如何工作的：
- en: A generator function is defined like a regular function, but instead of using
    the `return` keyword, you’ll use `yield` to yield a value.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成器函数的定义方式类似于常规函数，但它使用 `yield` 而不是 `return` 关键字来返回一个值。
- en: When you call a generator function, it returns a generator object. Which you
    can iterate over using a loop or by calling `next()`.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你调用生成器函数时，它会返回一个生成器对象。你可以使用循环或调用 `next()` 来遍历它。
- en: When the `yield` statement is encountered, the function's state is saved, and
    the yielded value is returned to the caller. The function's execution pauses,
    but its local variables and state are retained.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当遇到 `yield` 语句时，函数的状态被保存，并且返回的值会传递给调用者。函数的执行会暂停，但它的局部变量和状态会被保留。
- en: When the generator's `next()` method is called again, execution resumes from
    where it was paused, and the function continues until the next `yield` statement.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当生成器的 `next()` 方法再次被调用时，执行将从暂停的地方继续，函数将继续执行直到下一个 `yield` 语句。
- en: When the function exits or raises a `StopIteration`exception, the generator
    is considered exhausted, and further calls to `next()` will raise `StopIteration`.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当函数退出或抛出 `StopIteration` 异常时，生成器被认为是耗尽的，进一步调用 `next()` 将抛出 `StopIteration`。
- en: Creating Generators
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建生成器
- en: You can create generators using either generator functions or generator expressions.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用生成器函数或生成器表达式来创建生成器。
- en: 'Here’s an example generator function:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例生成器函数：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Generator expressions are similar to list comprehension but they create generators
    instead of lists.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器表达式类似于列表推导式，但它们创建的是生成器而不是列表。
- en: '[PRE30]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 5\. Leverage Collection Classes
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5. 利用集合类
- en: 'We’ll wrap up the tutorial by learning about two useful collection classes:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过了解两个有用的集合类来结束本教程：
- en: NamedTuple
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名元组
- en: Counter
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计数器
- en: More Readable Tuples with NamedTuple
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 NamedTuple 创建更具可读性的元组
- en: In Python, a [namedtuple](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html%23collections.namedtuple&sa=D&source=editors&ust=1699804716906412&usg=AOvVaw3u8nY9OIf6hzmfClcR1woI) in
    the [collections module](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html&sa=D&source=editors&ust=1699804716906824&usg=AOvVaw0ZnueyvpsC8tcF6R59HImz) is
    a subclass of the built-in tuple class. But it provides named fields. Which makes
    it more readable and self-documenting than regular tuples.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，[命名元组](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html%23collections.namedtuple&sa=D&source=editors&ust=1699804716906412&usg=AOvVaw3u8nY9OIf6hzmfClcR1woI)
    在 [collections 模块](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html&sa=D&source=editors&ust=1699804716906824&usg=AOvVaw0ZnueyvpsC8tcF6R59HImz)
    中是内置元组类的一个子类。但它提供了命名字段，这使得它比常规元组更具可读性和自解释性。
- en: 'Here’s an example of creating a simple tuple for a point in 3D space and accessing
    the individual elements:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是创建一个 3D 空间点的简单元组并访问单个元素的示例：
- en: '[PRE32]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And here’s the namedtuple version:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 namedtuple 版本：
- en: '[PRE34]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: NamedTuples, therefore, let you write cleaner and more maintainable code than
    regular tuples.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，NamedTuples 让你编写比普通元组更清晰、更易维护的代码。
- en: Use Counter to Simplify Counting
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Counter 简化计数
- en: '[Counter](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html%23collections.Counter&sa=D&source=editors&ust=1699804716911084&usg=AOvVaw1l3sRFtUOoTYOGxmXgvsV3) is
    a class in the [collections module](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html&sa=D&source=editors&ust=1699804716911412&usg=AOvVaw3kdFmHhIoOUaxhjTo0ufmE) that
    is designed for counting the frequency of elements in an iterable such as a list
    or a string). It returns a Counter object with `{element:count}` key-value pairs.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[Counter](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html%23collections.Counter&sa=D&source=editors&ust=1699804716911084&usg=AOvVaw1l3sRFtUOoTYOGxmXgvsV3)是[collections
    模块](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html&sa=D&source=editors&ust=1699804716911412&usg=AOvVaw3kdFmHhIoOUaxhjTo0ufmE)中的一个类，旨在计算可迭代对象（如列表或字符串）中元素的频率。它返回一个带有`{element:count}`键值对的
    Counter 对象。'
- en: Let’s take the example of counting character frequencies in a long string.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以在长字符串中计算字符频率为例。
- en: 'Here’s the conventional approach to counting character frequencies using loops:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用循环计算字符频率的传统方法：
- en: '[PRE36]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: We manually iterate through the string, update a dictionary to count character
    frequencies, and find the most common character.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们手动遍历字符串，更新字典以计算字符频率，并找到最常见的字符。
- en: '[PRE37]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, let''s achieve the same task using the Counter  class using the syntax
    `Counter(iterable)`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`Counter`类和语法`Counter(iterable)`来实现相同的任务：
- en: '[PRE38]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So `Counter` provides a much simpler way to count character frequencies without
    the need for manual iteration and dictionary management.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`Counter`提供了一种更简单的方式来计算字符频率，无需手动迭代和字典管理。
- en: Wrapping Up
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'I hope you found a few useful tips to add to your Python toolbox. If you are
    looking to learn Python or are preparing for coding interviews, here are a couple
    of resources to help you in your journey:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你找到了一些有用的技巧来增加你的 Python 工具箱。如果你想学习 Python 或者正在准备编程面试，以下是一些资源来帮助你在学习过程中：
- en: '[5 Free Books to Help You Master Python](https://www.google.com/url?q=/5-free-books-to-help-you-master-python&sa=D&source=editors&ust=1699804716920444&usg=AOvVaw3obUh_MCpu386ETLYVGayY)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 本免费书籍帮助你掌握 Python](https://www.google.com/url?q=/5-free-books-to-help-you-master-python&sa=D&source=editors&ust=1699804716920444&usg=AOvVaw3obUh_MCpu386ETLYVGayY)'
- en: '[7 Must-Know Python Tips for Coding Interviews](https://www.google.com/url?q=/2023/03/7-mustknow-python-tips-coding-interviews.html&sa=D&source=editors&ust=1699804716921117&usg=AOvVaw2_kKapgZNvaTIeg6R3B2pw)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 个必须知道的 Python 编程面试技巧](https://www.google.com/url?q=/2023/03/7-mustknow-python-tips-coding-interviews.html&sa=D&source=editors&ust=1699804716921117&usg=AOvVaw2_kKapgZNvaTIeg6R3B2pw)'
- en: Happy learning!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 学习愉快！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是一位来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交叉点上工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和咖啡！目前，她正在通过编写教程、指南、评论文章等与开发者社区分享她的知识。Bala
    还创建了有趣的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8 个内置 Python 装饰器以编写优雅代码](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
- en: '[Pydon''ts - Write elegant Python code: Free Book Review](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydon''ts - 编写优雅的 Python 代码：免费书评](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
- en: '[Mastering Python: 7 Strategies for Writing Clear, Organized, and…](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握 Python：编写清晰、有组织且高效代码的 7 种策略](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
- en: '[Convert Python Dict to JSON: A Tutorial for Beginners](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将 Python 字典转换为 JSON：初学者教程](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中将字节转换为字符串：初学者教程](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
