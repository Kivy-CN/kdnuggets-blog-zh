["```py\n\nimport numpy as np\nimport matplotlib.pyplot as plt\ndef pdf(x, std, mean):\n    cons = 1.0 / np.sqrt(2*np.pi*(std**2))\n    pdf_normal_dist = const*np.exp(-((x-mean)**2)/(2.0*(std**2)))\n    return pdf_normal_dist\nx = np.linspace(0, 1, num=100)\ngood_pdf = pdf(x,0.1,0.4)\nbad_pdf = pdf(x,0.1,0.6)\n```", "```py\ndef plot_pdf(good_pdf, bad_pdf, ax):\n    ax.fill(x, good_pdf, \"g\", alpha=0.5)\n    ax.fill(x, bad_pdf,\"r\", alpha=0.5)\n    ax.set_xlim([0,1])\n    ax.set_ylim([0,5])\n    ax.set_title(\"Probability Distribution\", fontsize=14)\n    ax.set_ylabel('Counts', fontsize=12)\n    ax.set_xlabel('P(X=\"bad\")', fontsize=12)\n    ax.legend([\"good\",\"bad\"])\n```", "```py\nfig, ax = plt.subplots(1,1, figsize=(10,5))\nplot_pdf(good, bad, ax)\n```", "```py\ndef plot_roc(good_pdf, bad_pdf, ax):\n    #Total\n    total_bad = np.sum(bad_pdf)\n    total_good = np.sum(good_pdf)\n    #Cumulative sum\n    cum_TP = 0\n    cum_FP = 0\n    #TPR and FPR list initialization\n    TPR_list=[]\n    FPR_list=[]\n    #Iteratre through all values of x\n    for i in range(len(x)):\n        #We are only interested in non-zero values of bad\n        if bad_pdf[i]>0:\n            cum_TP+=bad_pdf[len(x)-1-i]\n            cum_FP+=good_pdf[len(x)-1-i]\n        FPR=cum_FP/total_good\n        TPR=cum_TP/total_bad\n        TPR_list.append(TPR)\n        FPR_list.append(FPR)\n    #Calculating AUC, taking the 100 timesteps into account\n    auc=np.sum(TPR_list)/100\n    #Plotting final ROC curve\n    ax.plot(FPR_list, TPR_list)\n    ax.plot(x,x, \"--\")\n    ax.set_xlim([0,1])\n    ax.set_ylim([0,1])\n    ax.set_title(\"ROC Curve\", fontsize=14)\n    ax.set_ylabel('TPR', fontsize=12)\n    ax.set_xlabel('FPR', fontsize=12)\n    ax.grid()\n    ax.legend([\"AUC=%.3f\"%auc])\n```", "```py\nfig, ax = plt.subplots(1,1, figsize=(10,5))\nplot_roc(good_pdf, bad_pdf, ax)\n```", "```py\nfig, ax = plt.subplots(1,2, figsize=(10,5))\nplot_pdf(good_pdf, bad_pdf, ax[0])\nplot_roc(good_pdf, bad_pdf, ax[1])\nplt.tight_layout()\n```", "```py\nx = np.linspace(0, 1, num=100)\nfig, ax = plt.subplots(3,2, figsize=(10,12))\nmeans_tuples = [(0.5,0.5),(0.4,0.6),(0.3,0.7)]\ni=0\nfor good_mean, bad_mean in means_tuples:\n    good_pdf = pdf(x,0.1,good_mean)\n    bad_pdf = pdf(x,0.1,bad_mean)\n    plot_pdf(good_pdf, bad_pdf, ax[i,0])\n    plot_roc(good_pdf, bad_pdf, ax[i,1])\n    i+=1\nplt.tight_layout()\n```"]