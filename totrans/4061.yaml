- en: 4 Python Itertools Filter Functions You Probably Didn’t Know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![4 Python Itertools Filter Functions You Probably Didn''t Know](../Images/9ce8e2d289bae33f8ee329b84d5e8275.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In Python, iterators help you write more Pythonic code—and work more efficiently—with
    long sequences. The built-in [itertools](https://docs.python.org/3/library/itertools.html)
    module provides several helpful functions that create iterators.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are especially helpful when you want to just loop through the iterator,
    retrieve elements in the sequence, and process them—all without having to store
    them in memory. Today we’ll learn how to use the following four itertools filter
    functions:'
  prefs: []
  type: TYPE_NORMAL
- en: filterfalse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: takewhile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: dropwhile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: islice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: 'Before You Begin: A Note on Code Examples'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: All the four functions that we’ll discuss give *iterators*. For clarity, we’ll
    work with simple sequences and use `list()` to get a list containing all the elements
    returned by the iterator. But refrain from doing so—unless necessary—when working
    with long sequences. Because when you do so, you’ll lose the memory savings that
    iterators give you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For simple predicate functions, you can also use *lambdas*. But for better readability,
    we’ll define regular functions and use them as predicates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1\. filterfalse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you’ve been programming in Python for a while, you’ll have likely used the
    built-in `filter` function with the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `filter` function gives an iterator that returns elements from the sequence
    for which the predicate returns `True`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `nums` list and `is_even` function are the sequence and the predicate,
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the list of all *even* numbers in `nums`, we use the `filter` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s learn about `filterfalse`. We’ll import the `filterfalse` function
    (and all other functions that we’ll discuss) from the **itertools** module.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the name suggests, `filterfalse` does the opposite of what the `filter`
    function does. It gives an iterator that returns elements for which the predicate
    returns `False`. Here’s the syntax to use the `filterfalse` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The function `is_even` returns `False` for all odd numbers in `nums`. So the
    `nums_odd` list obtained using `filterfalse` is the list of all odd numbers in
    `nums`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 2\. takewhile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax to use the `takewhile` function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `takewhile` function gives an iterator that returns elements so long as
    the predicate function returns `True`. It stops returning elements when the predicate
    returns `False` for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: For an n-length sequence, if `seq[k]` is the first element for which the predicate
    function returns `False`, then the iterator returns `seq[0]`, `seq[1]`,…, `seq[k-1]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following `nums` list and predicate function `is_less_ than_5`.
    We use the `takewhile` function as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the predicate `is_less_than_5` returns `False`—for the first time—for
    the number 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 3\. dropwhile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Functionally, the `dropwhile` function does the opposite of what the `takewhile`
    function does.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s how you can use the `dropwhile` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `dropwhile` function gives an iterator that keeps dropping elements—so long
    as the predicate is `True`. Meaning the iterator *does not return anything* until
    the predicate returns `False` for the first time. And once the predicate returns
    `False`, the iterator returns *all* the subsequent elements in the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: For an n-length sequence, if `seq[k]` is the first element for which the predicate
    function returns `False`, then the iterator returns `seq[k]`, `seq[k+1]`,…, `seq[n-1]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the same sequence and predicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the predicate function `is_less_than_5` returns `False`—for the first
    time—for the element 5, we get all the elements of the sequence starting from
    5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 4\. islice
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You’ll already be familiar with slicing Python iterables like lists, tuples,
    and strings. Slicing takes the syntax: `iterable[start:stop:step]`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, this approach of slicing has the following drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: When working with large sequences, each slice or subsequence is a copy that
    takes up memory. This can be inefficient.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because the step can also take negative values, using the start, stop, and step
    values affects readability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `islice` function addresses the above limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: It returns an iterator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It doesn’t allow negative values for the step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can use the `islice` function like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are a few different ways you can use the `islice` function:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `islice(seq, stop)` returns an iterator over the slice `seq[0]`, `seq[1]`,...,
    `seq[stop - 1]`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you specify the start and the stop values: `islice(seq, start, stop)` the
    function returns an iterator over the slice `seq[start]`, `seq[start + 1]`,...,
    `seq[start + stop - 1]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you specify the start, stop, and step arguments, the function returns an
    iterator over the slice `seq[start]`, `seq[start + step]`, `seq[start + 2*step]`,...,
    `seq[start + k*step]`. Such that `start + k*step` < `stop` and `start + (k+1)*step`
    >= `stop`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s take an example list to understand this better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now let's use the `islice` function with the syntax we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Using Only the Stop Value
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s specify only the stop index:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using the Start and Stop Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we use both the start and stop values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The slice starts at index 2 and extends up to but not including index 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Using the Start, Stop, and Step Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we use the start, stop, and step values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We get a slice starting at index 2, extending up to but not including index
    8, with a step size of 2 (returning every second element).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope this tutorial helped you understand the basics of itertools filter functions.
    You’ve seen some simple examples to understand the working of these functions
    better. Next, you can learn how generators [generator functions and generator
    expressions](/2023/02/getting-started-python-generators.html) work as efficient
    python iterators.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a developer
    and technical writer from India. She likes working at the intersection of math,
    programming, data science, and content creation. Her areas of interest and expertise
    include DevOps, data science, and natural language processing. She enjoys reading,
    writing, coding, and coffee! Currently, she''s working on learning and sharing
    her knowledge with the developer community by authoring tutorials, how-to guides,
    opinion pieces, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 things you didn’t know about the SAS Academy for Data Science](https://www.kdnuggets.com/2022/07/sas-3-things-didnt-know-sas-academy-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring Infinite Iterators in Python''s itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Filter Data with Python](https://www.kdnuggets.com/2022/02/filter-data-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Pandas Plotting Functions You Might Not Know](https://www.kdnuggets.com/2023/02/5-pandas-plotting-functions-might-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Five SQL Window Functions You Should Know For Data Science Interviews](https://www.kdnuggets.com/2022/01/top-five-sql-window-functions-know-data-science-interviews.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
