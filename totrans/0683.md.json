["```py\n\nif__name__=='__main__':\nimport imageio\nimport matplotlib.pyplotasplt\n%matplotlibinline\n\npic=imageio.imread('F:/demo_2.jpg')\nplt.figure(figsize=(15,15))\n\nplt.imshow(pic)\n\n```", "```py\nprint('Type of the image : ',type(pic))\nprint()\nprint('Shape of the image : {}'.format(pic.shape))\nprint('Image Hight {}'.format(pic.shape[0]))\nprint('Image Width {}'.format(pic.shape[1]))\nprint('Dimension of Image {}'.format(pic.ndim))\n\n-Output:\n\nType of the image :<class 'imageio.core.util.Image'>\n\nShape of the image : (562, 960, 3)\nImage Height 562\nImage Width 960\nDimension of Image 3\n\n```", "```py\n\nprint('Image size {}'.format(pic.size))\n\nprint('Maximum RGB value in this image {}'.format(pic.max()))\n\nprint('Minimum RGB value in this image {}'.format(pic.min()))\n\nImage size 1618560\n\nMaximum RGB value in this image 255\n\nMinimum RGB value in this image 0\n\n```", "```py\n\n'''\n\nLet's pick a specific pixel located at 100 th Rows and 50 th Column. \n\nAnd view the RGB value gradually. \n\n'''\n\npic[100, 50 ]\n\nImage([109, 143,  46], dtype=uint8)\n\n```", "```py\n\n*# A specific pixel located at Row : 100 ; Column : 50* \n\n*# Each channel's value of it, gradually R , G , B*\n\nprint('Value of only R channel {}'.format(pic[ 100, 50, 0]))\n\nprint('Value of only G channel {}'.format(pic[ 100, 50, 1]))\n\nprint('Value of only B channel {}'.format(pic[ 100, 50, 2]))\n\nValue of only R channel 109\n\nValue of only G channel 143\n\nValue of only B channel 46\n\n```", "```py\n\nplt.title('R channel')\n\nplt.ylabel('Height {}'.format(pic.shape[0]))\n\nplt.xlabel('Width {}'.format(pic.shape[1]))\n\nplt.imshow(pic[ : , : , 0])\n\nplt.show()\n\n```", "```py\n\nplt.title('G channel')\n\nplt.ylabel('Height {}'.format(pic.shape[0]))\n\nplt.xlabel('Width {}'.format(pic.shape[1]))\n\nplt.imshow(pic[ : , : , 1])\n\nplt.show()\n\n```", "```py\n\nplt.title('B channel')\n\nplt.ylabel('Height {}'.format(pic.shape[0]))\n\nplt.xlabel('Width {}'.format(pic.shape[1]))\n\nplt.imshow(pic[ : , : , 2])\n\nplt.show()\n\n```", "```py\n\npic =imageio.imread('F:/demo_2.jpg')\n\npic[50:150 , : , 0] =255*# full intensity to those pixel's R channel*\n\nplt.figure( figsize= (10,10))\n\nplt.imshow(pic)\n\nplt.show()\n\n```", "```py\n\npic[200:300 , : , 1] =255*# full intensity to those pixel's G channel*\n\nplt.figure( figsize= (10,10))\n\nplt.imshow(pic)\n\nplt.show()\n\n```", "```py\n\npic[350:450 , : , 2] =255*# full intensity to those pixel's B channel*\n\nplt.figure( figsize= (10,10))\n\nplt.imshow(pic)\n\nplt.show()\n\n```", "```py\n*# set value 200 of all channels to those pixels which turns them to white*\n\npic[50:450 , 400:600 , [0,1,2] ] =200\n\nplt.figure( figsize= (10,10))\n\nplt.imshow(pic)\n\nplt.show() \n```", "```py\nimportnumpyasnp\n\npic=imageio.imread('F:/demo_2.jpg') \n\nfig,ax=plt.subplots(nrows=1,ncols=3,figsize=(15,5)) \n\nforc,axinzip(range(3),ax): \n\n*# create zero matrix*\n\nsplit_img=np.zeros(pic.shape,dtype=\"uint8\")*# 'dtype' by default: 'numpy.float64'* \n\n*# assing each channel* split_img[:,:,c]=pic[:,:,c]\n\n*# display each channel*ax.imshow(split_img)\n```", "```py\nY' = 0.299 R + 0.587 G + 0.114 B\npic=imageio.imread('F:/demo_2.jpg') \ngray=lambdargb:np.dot(rgb[...,:3],[0.299,0.587,0.114])\ngray=gray(pic) \nplt.figure(figsize=(10,10))\nplt.imshow(gray,cmap=plt.get_cmap(name='gray'))\nplt.show()\n```", "```py\nLightness = ½ × (max(R,G,B) + min(R,G,B)) \n```", "```py\nLuminosity = 0.21 × R + 0.72 × G + 0.07 × B\n```", "```py\nAverage Brightness = (R + G + B) ÷ 3\n```", "```py\npic=imageio.imread('F:/demo_2.jpg') \n\ngray=lambdargb:np.dot(rgb[...,:3],[0.21,0.72,0.07])\n\ngray=gray(pic) \n\nplt.figure(figsize=(10,10))\n\nplt.imshow(gray,cmap=plt.get_cmap(name='gray'))\n\nplt.show() \n\n'''Let's take a quick overview some the changed properties now the color image.\nLike we observe some properties of color image, \nsame statements are applying now for gray scaled image.''' \n\nprint('Type of the image : ',type(gray))\n\nprint() \n\nprint('Shape of the image : {}'.format(gray.shape))\n\nprint('Image Hight {}'.format(gray.shape[0]))\n\nprint('Image Width {}'.format(gray.shape[1]))\n\nprint('Dimension of Image {}'.format(gray.ndim))\n\nprint() \n\nprint('Image size {}'.format(gray.size))\n\nprint('Maximum RGB value in this image {}'.format(gray.max()))\n\nprint('Minimum RGB value in this image {}'.format(gray.min()))\n\nprint('Random indexes [X,Y] : {}'.format(gray[100,50]))\n![Image figure 11](../Images/28f9c9f3b4ebbcd70ca810e455816a86.png)\nType of the image :<class 'imageio.core.util.Image'> \nShape of the image : (562,960)\nImage Height 562\nImage Width 960\nDimension of Image 2 \nImage size 539520\nMaximum RGB value in this image 254.9999999997\nMinimum RGB value in this image 0.0\nRandom indexes [X,Y] : 129.07 \n```"]