- en: A Beginner’s Guide to End to End Machine Learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/12/beginner-guide-end-end-machine-learning.html](https://www.kdnuggets.com/2021/12/beginner-guide-end-end-machine-learning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Rebecca Vickery](https://www.linkedin.com/in/rebecca-vickery/), Data
    Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5c25025612f6dd042b4f295ebfef540f.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: Photo by [Modestas Urbonas](https://unsplash.com/@modestasu?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/bridge?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Supervised machine learning is a technique that maps a series of inputs (X)
    to some known outputs (y) without being explicitly programmed. Training a machine
    learning model refers to the process where a machine learns a mapping between
    X and y. Once trained the model can be used to make predictions on new inputs
    where the output is unknown.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: The training of a machine learning model is only one element of the end to end
    machine learning lifecycle. For a model to be truly useful this mapping needs
    to be stored and deployed for use. This is often referred to as putting the model
    into production. Additionally once a model is in production, the predictions and
    overall performance of the model need to be monitored to ensure that the quality
    of the predictions does not degrade over time.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: To introduce the basic concepts in the end to end machine learning workflow
    I am going to use the python library, [Pycaret](https://pycaret.org/). Pycaret
    is a low code machine learning library that seeks to simplify and speed up the
    overall machine learning workflow by providing a high-level programming interface
    and seeking to automate some of the repetitive tasks in machine learning.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The library is developing quickly and has more recently added functionality
    to encompass the entire end to end machine learning workflow. From model development
    to deployment and monitoring. In the following article, I will be using this package
    to give a simple introduction to the end to end machine learning lifecycle.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The data
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, I am going to use one of Pycaret’s built-in datasets known
    as “employee”. This consists of a set of features about employees at an unspecified
    company and a target variable that denotes if that employee has left the company.
    This is a classic classification task in machine learning where the goal is to
    train a model that can predict if an employee is likely to leave.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The data can easily be imported through the Pycaret API. In the below code we
    read in the data and reserve a validation sample for later use in the workflow.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'The first few lines of the data look as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/49cfd8b17983d3860b8d5ce5eaf01393.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: First few rows of the “employee” dataset. Image by Author.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Preprocessing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pycaret has a set of modules that contain a suite of functions for a specific
    machine learning task. The dataset we are using contains a classification problem
    so we will be primarily using the [classification](https://pycaret.org/classification1/) module.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to import the setup function. This function is run prior to
    performing any other steps. It initialises the Pycaret environment and creates
    a transformation pipeline for preprocessing the data ready for modelling. When
    run Pycaret will infer the data types for all feature and target columns.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c630fd0613c57ffd1d147bf07945cd7d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Pycaret has inferred the data types for the features and target variable. Image
    by Author
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: If we are happy that these data types are correct and are also happy to rely
    on Pycaret’s default preprocessing methods then we can simply hit enter and Pycaret
    will prepare the data for modelling, and print a report describing the steps that
    have been taken.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Below is just the first 15 lines of this 59 line report. The setup functions
    has a large number of optional parameters that can be used to create custom preprocessing.
    For example, the parameter `categorical_features` can be used to manually specify
    categorical columns where the data type has not been inferred correctly. A full
    list of available parameters can be found [**here**](https://pycaret.org/classification1/).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0bfe60a344fcce2e2edc55080270eecb.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: The first 15 lines of the preprocessing report. Image by Author.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world machine learning project, it is likely that we would perform
    more in-depth exploratory analysis and custom preprocessing. However, for the
    purposes of this tutorial, we will continue with the default preprocessing.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Baseline model
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Typically in machine learning workflows, it is sensible to train a simple model
    first to develop a baseline for performance before moving onto more complex algorithms.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, Pycaret supports 18 different algorithms for classification.
    The full list can be found [**here**](https://pycaret.org/classification1/). For
    the baseline model, we will use logistic regression and we use the function `create_model` to
    train. To select the algorithm we pass in the abbreviated string found in the [**documentation**](https://pycaret.org/classification1/).
    After training, Pycaret will print a report detailing the performance of our model.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4e8bc2576bdd246ea8893218e81e4f0d.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
- en: The create_mode report. Image by Author.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Comparing models
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By establishing a baseline model we have determined that the preprocessing and
    setup is sufficient to build a classification model.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to compare the different classification algorithms to determine
    which is the best one to use for our dataset and problem. Pycaret has a function
    called `compare_models()` which allows us to compare the performance of all available
    algorithms with one line of code.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: This function will try all algorithms and output a list ranked by accuracy.
    You can change the metric to target using the `sort` argument.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4a27c8523babf3438492294772729d77.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Comparing models. Image by Author.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: We can see from this that Random Forest is overall the best model. We will use
    this model in the rest of our workflow.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: We run `create_model()` again this time selecting the Random Forest algorithm.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Tuning the model
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we run create_model it automatically uses the default parameters. These
    are not necessarily the best set of parameters to use so we need to tune the model
    to find the best selection. Running the `tune_model()` function tunes the hyperparameters
    of the model using Random grid search.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: By default, the function will use a pre-defined grid of parameters but this
    can be customised by passing a custom grid into the `custom_grid` parameter. By
    default, the function will also optimise the accuracy score but this can also
    be customised using the `optimize` parameter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: In the below code we use the default parameter grid to tune the model and optimise
    for the MCC score.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The function returns a table containing k-fold validated scores, by default
    the number of folds is 10.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2bcd1ed3f1e6ec46b0f4ca7a320e4fb3.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: Model tuning. Image by Author.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Interpret the results
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pycaret has a selection of built-in plots to interpret the results of the model
    which can be accessed using the `plot_model()` function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Below we inspect feature importances using this function.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1560351111f77ff35f6513760d61638d.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: Feature importances. Image by Author.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Let’s also visualise the confusion matrix.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ae9263af2e92e6e47d39ff78c3e1c6a0.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
- en: The confusion matrix. Image by Author.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Deploy the model
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pycaret has additional functionality to deploy models to the cloud using AWS.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: To deploy the model on AWS you must first create an account on [aws.amazon.com](https://aws.amazon.com/?aws-products-analytics.sort-by=item.additionalFields.productNameLowercase&aws-products-analytics.sort-order=asc&aws-products-business-apps.sort-by=item.additionalFields.productNameLowercase&aws-products-business-apps.sort-order=asc&aws-products-containers.sort-by=item.additionalFields.productNameLowercase&aws-products-containers.sort-order=asc&aws-products-compute.sort-by=item.additionalFields.productNameLowercase&aws-products-compute.sort-order=asc&aws-products-iot.sort-by=item.additionalFields.productNameLowercase&aws-products-iot.sort-order=asc&aws-products-ml.sort-by=item.additionalFields.productNameLowercase&aws-products-ml.sort-order=asc&aws-products-mgmt-govern.sort-by=item.additionalFields.productNameLowercase&aws-products-mgmt-govern.sort-order=asc&aws-products-migration.sort-by=item.additionalFields.productNameLowercase&aws-products-migration.sort-order=asc&aws-products-network.sort-by=item.additionalFields.productNameLowercase&aws-products-network.sort-order=asc&aws-products-security.sort-by=item.additionalFields.productNameLowercase&aws-products-security.sort-order=asc&aws-products-storage.sort-by=item.additionalFields.productNameLowercase&aws-products-storage.sort-order=asc).
    Once created you need to generate an access key so that you can allow the Pycaret
    function to write to your account. To do this follow the following steps.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Login to your AWS account.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover over your username in the top right corner.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select security credentials from the list that appears.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/52584398b80295476026df73f3e831d4.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: 4\. From here expand the Access keys section and click on ‘Create new access
    key’.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/416c07d6225c52cc4fda26f6470cefcf.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
- en: 5\. At this stage you need to download the credentials file when prompted. You
    will need the credentials contained file in this later.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: 6\. To allow Pycaret to interact with your AWS account you also need to install
    and configure the AWS CLI. To do this first run the following.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then run this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now type `aws --version` to confirm everything has been installed correctly.
    You should see something like this.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5dc1e7f7df4d3961bdcb766a084d1f33.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: Now that this is installed we can configure the AWS CLI with your account details.
    To do this run the command shown below. It will ask you to input the following
    pieces of information.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Access Key ID:** this can be found in the credentials file we downloaded
    earlier.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Secret Acess Key:** also found in the credentials file.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '**Default region name:** this can be found on the AWS console.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Default output format:** this should be left blank.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Next, we create an S3 bucket to store the deployed model. From the AWS console
    select S3 and then create a bucket with your chosen name.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/1b7ec21bd4227ca8a36a3f572e2e27ca.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: Now we are ready to use Pycaret to deploy our chosen model.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: If the model has deployed you will see the following message.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/501c85c4c20ae528ec98ea30363a7d42.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Generate predictions
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the model we generate predictions on the validation data we reserved
    earlier.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: The code shown below loads the model from S3 and generates predictions on the
    validation data with the labels removed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Let’s view the first 5 predictions by running `predictions[:5]`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/26fb52f2644e9659db825ed6023f07b2.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
- en: First 5 predictions. Image by Author
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An important aspect of the production machine learning workflow is tracking
    and monitoring the experiments that are performed. Pycaret has integration with [MLflow](https://mlflow.org/) an
    open-source platform for managing the end to end machine learning lifecycle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: To use MLflow via Pycaret we need to import MLflow (this should already have
    been installed along with Pycaret) and set the tracking URI. We then add a couple
    of extra parameters as shown below when calling the setup function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Now if we copy the tracking URI into a browser you should see the mlflow UI
    and the experiments it has tracked.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/054eeebb587f788c4a96221b887e64ab.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
- en: mlflow UI. Image by author
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: We can click through to view the metrics, artifacts and params for each experiment
    performed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2e68e1947cc88ad8c8520b24016fee1d.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: Experiment tracking. Image by Author
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: This is a simple tutorial to learn the basic steps involved in an end to end
    machine learning project. In the real world most machine learning problems, data
    and deployment solutions require much more complex treatment. However, for the
    purposes of this tutorial I have used a simple dataset and python library to get
    you started with learning about the end to end machine learning lifecycle.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: Pycaret is an example of a low-code machine learning library. There are a number
    of tools being developed that seek to simplify machine learning development in
    different ways. To learn more about these low effort machine learning libraries
    see my earlier article.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[**Low Effort Machine Learning Tools**](https://towardsdatascience.com/low-effort-machine-learning-tools-9622d7d57135)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: For more information about machine learning in the real world see the article
    below.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[**Machine Learning in Real Life**](https://towardsdatascience.com/machine-learning-in-real-life-eebcb08f099c)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Rebecca Vickery](https://www.linkedin.com/in/rebecca-vickery/)** is
    a Data Scientist with extensive experience of data analysis, machine learning
    and data engineering. 12 years experience SQL, 4+ years Python, R, Apache Airflow
    and Google Analytics.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[10 Things You Didn’t Know About Scikit-Learn](/2020/09/10-things-know-scikit-learn.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Five Command Line Tools for Data Science](/2019/07/five-command-line-tools-data-science.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Libraries for Interpretable Machine Learning](/2019/09/python-libraries-interpretable-machine-learning.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Full End-to-End Deployment of a Machine Learning Algorithm into a…](https://www.kdnuggets.com/2021/12/deployment-machine-learning-algorithm-live-production-environment.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将机器学习算法完整部署到生产环境中](https://www.kdnuggets.com/2021/12/deployment-machine-learning-algorithm-live-production-environment.html)'
- en: '[5 Best End-to-End Open Source MLOps Tools](https://www.kdnuggets.com/5-best-end-to-end-open-source-mlops-tools)'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 款最佳端到端开源 MLOps 工具](https://www.kdnuggets.com/5-best-end-to-end-open-source-mlops-tools)'
- en: '[A Simple to Implement End-to-End Project with HuggingFace](https://www.kdnuggets.com/a-simple-to-implement-end-to-end-project-with-huggingface)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 HuggingFace 实现的简单端到端项目](https://www.kdnuggets.com/a-simple-to-implement-end-to-end-project-with-huggingface)'
- en: '[7 End-to-End MLOps Platforms You Must Try in 2024](https://www.kdnuggets.com/7-end-to-end-mlops-platforms-you-must-try-in-2024)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2024 年必试的 7 个端到端 MLOps 平台](https://www.kdnuggets.com/7-end-to-end-mlops-platforms-you-must-try-in-2024)'
- en: '[Essential Machine Learning Algorithms: A Beginner''s Guide](https://www.kdnuggets.com/2021/05/essential-machine-learning-algorithms-beginners.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[必备机器学习算法：初学者指南](https://www.kdnuggets.com/2021/05/essential-machine-learning-algorithms-beginners.html)'
- en: '[A Beginner''s Guide to the Top 10 Machine Learning Algorithms](https://www.kdnuggets.com/a-beginner-guide-to-the-top-10-machine-learning-algorithms)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初学者指南：十大机器学习算法](https://www.kdnuggets.com/a-beginner-guide-to-the-top-10-machine-learning-algorithms)'
