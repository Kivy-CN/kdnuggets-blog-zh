- en: Exploring Infinite Iterators in Python’s itertools
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Python 中 itertools 的无限迭代器
- en: 原文：[https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)
- en: '![Exploring Infinite Iterators in Python''s itertools](../Images/bc48474833119e8c06ebd0daef145804.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![探索 Python itertools 中的无限迭代器](../Images/bc48474833119e8c06ebd0daef145804.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Infinite iterators, as the name suggests, are special types of iterators that
    can continue generating values indefinitely. Unlike the in-built iterators like
    lists, tuples, and dictionaries that eventually reach an end, infinite iterators
    can produce an unending stream of values. Such iterators are also sometimes referred
    to as infinite generators or sequences. They find use in various scenarios for
    solving problems involving simulation, generating sequences, processing real-time
    data, and more.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名称所示，无限迭代器是一种特殊类型的迭代器，可以无限生成值。与像列表、元组和字典这样的内置迭代器最终会结束不同，无限迭代器可以产生源源不断的值流。这些迭代器有时也被称为无限生成器或序列。它们在模拟、生成序列、处理实时数据等问题的解决中有广泛应用。
- en: The Itertools library in Python provides three in-built infinite iterators.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 Itertools 库提供了三种内置的无限迭代器。
- en: Count
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Count
- en: Cycle
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cycle
- en: Repeat
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Repeat
- en: 1\. Count
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. Count
- en: 'The **count()** function generates infinite numbers starting from the specified
    value and step size. The syntax for the count iterator is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**count()** 函数生成从指定值和步长开始的无限数字。count 迭代器的语法如下：'
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It has two optional parameters: "start" and "stop," with default values of
    0 and 1, respectively. "Start" refers to the initial value of your counting, while
    "step" represents the increment used to advance the count.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它有两个可选参数：“start”和“stop”，默认值分别为 0 和 1。“Start”表示计数的初始值，而“step”表示用于增加计数的增量。
- en: 'Let us analyze the function with the help of an example. If you need to generate
    a sequence of numbers with a step size of 3 just like the table of 3, you can
    use this code:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来分析这个函数。如果你需要生成一个步长为 3 的数字序列，就像 3 的乘法表一样，你可以使用以下代码：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Output
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 2\. Cycle
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. Cycle
- en: 'The **cycle()** function creates an iterator and repeats all the items of the
    passed container indefinitely. Here is the syntax for the cycle iterator:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**cycle()** 函数创建一个迭代器，并无限重复传递的容器中的所有项。以下是 cycle 迭代器的语法：'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The "iterable" parameter here can be any iterable data structure in Python,
    such as lists, tuples, sets, and more. Consider an example of a traffic light
    controller system that continuously cycles through different lights. No different
    actions are performed while cycling through the different colored lights. We will
    use a wait time of 5 seconds to display our results.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的“iterable”参数可以是 Python 中的任何可迭代数据结构，如列表、元组、集合等。考虑一个交通灯控制系统的例子，该系统不断循环显示不同的灯光。在不同颜色的灯光之间循环时不执行其他动作。我们将使用
    5 秒的等待时间来显示结果。
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Output
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You will see this output after approximately 25 seconds.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在大约 25 秒后看到这个输出。
- en: 3\. Repeat
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. Repeat
- en: 'The **repeat()** function generates a sequence of the specified number infinitely.
    It is useful when you need to generate a single value indefinitely. The syntax
    for the repeat iterator is as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**repeat()** 函数生成指定数量的无限序列。当你需要无限生成单个值时，它非常有用。repeat 迭代器的语法如下：'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We have two parameters here: "value" is for the number you want to generate
    infinitely, while "times" is an optional parameter for how many times you want
    to generate that number. The default value for "times" is infinity, indicating
    that it will print endlessly unless you explicitly specify a finite number. For
    example, if you need to generate the number "9" three times, then the following
    code can be used:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有两个参数：“value”是你想要无限生成的数字，而“times”是一个可选参数，用于指定你想要生成该数字的次数。“times”的默认值是无限，意味着除非你明确指定有限的数字，否则它将不断打印。例如，如果你需要生成数字“9”三次，可以使用以下代码：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Output
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Conclusion
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: These infinite iterators are extremely helpful in scenarios when we need to
    work with streams of data. The “count”, “cycle” and “repeat” iterators provide
    us the ability to solve problems more efficiently and elegantly. Although using
    them requires necessary caution as they can lead to infinite loops, when used
    thoughtfully they can be a valuable resource for solving programming problems.
    I hope you enjoyed reading this article and if you have anything to share feel
    free to drop your suggestions in the comment box below.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些无限迭代器在我们需要处理数据流的场景中非常有用。“count”、“cycle”和“repeat”迭代器使我们能够更高效、优雅地解决问题。尽管使用它们需要谨慎，因为它们可能导致无限循环，但如果用得当，它们可以成为解决编程问题的宝贵资源。希望你喜欢这篇文章，如果你有任何分享，欢迎在下面的评论框中提出建议。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)**
    Kanwal 是一名机器学习工程师和技术作家，对数据科学及 AI 与医学的交汇处有着深厚的热情。她共同编著了电子书《利用 ChatGPT 最大化生产力》。作为
    2022 年 APAC 区的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认可为 Teradata 多样性技术学者、Mitacs
    Globalink 研究学者以及 Harvard WeCode 学者。Kanwal 是变革的热情倡导者，创办了 FEMCodes 以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Understanding Iterables vs Iterators in Python](https://www.kdnuggets.com/2022/01/understanding-iterables-iterators-python.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 Python 中的可迭代对象与迭代器](https://www.kdnuggets.com/2022/01/understanding-iterables-iterators-python.html)'
- en: '[4 Python Itertools Filter Functions You Probably Didn''t Know](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你可能不知道的 4 个 Python Itertools 过滤函数](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
- en: '[Introduction to Streaming-LLM: LLMs for Infinite-Length Inputs](https://www.kdnuggets.com/introduction-to-streaming-llm-llms-for-infinite-length-inputs)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[流式 LLM 介绍：无限长度输入的 LLMs](https://www.kdnuggets.com/introduction-to-streaming-llm-llms-for-infinite-length-inputs)'
- en: '[Exploring Data Cleaning Techniques With Python](https://www.kdnuggets.com/2023/04/exploring-data-cleaning-techniques-python.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 探索数据清理技术](https://www.kdnuggets.com/2023/04/exploring-data-cleaning-techniques-python.html)'
- en: '[Exploring the OpenAI API with Python](https://www.kdnuggets.com/exploring-the-openai-api-with-python)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 探索 OpenAI API](https://www.kdnuggets.com/exploring-the-openai-api-with-python)'
- en: '[Exploring Natural Sorting in Python](https://www.kdnuggets.com/exploring-natural-sorting-in-python)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中探索自然排序](https://www.kdnuggets.com/exploring-natural-sorting-in-python)'
