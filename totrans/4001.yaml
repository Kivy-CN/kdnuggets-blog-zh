- en: Monitor Your File System With Python’s Watchdog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog](https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Monitor Your File System With Python’s Watchdog](../Images/659033c9f0e281fee72294fc54fb68bb.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: Python’s watchdog library makes it easy to monitor your file system and respond
    to these changes automatically. Watchdog is a cross-platform API that allows you
    to run commands in response to any changes in the file system being monitored.
    We can set triggers on multiple events such as file creation, modification, deletion,
    and movement, and then respond to these changes with our custom scripts.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Setup for Watchdog
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You''ll need two modules to begin:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Watchdog:** Run this command below in the terminal to install the watchdog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Logging:** It is a built-in Python module, so there is no need to externally
    install it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create a simple script ‘main.py’ that monitors a directory and prints
    a message whenever a file is created, modified, or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Import Required Modules'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, import the necessary modules from the watchdog library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Define Event Handler Class'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We define a class MyHandler that inherits from FileSystemEventHandler. This
    class overrides methods like on_modified, on_created, and on_deleted to specify
    what to do when these events occur. The event handler object will be notified
    when any changes happen in the file system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Some useful methods of `FileSystemEventHandler` are explained below.
  prefs: []
  type: TYPE_NORMAL
- en: '**on_any_event:** Executed for any event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on_created:** Executed upon creation of a new file or directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on_modified:** Executed upon modification of a file or when a directory is
    renamed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on_deleted:** Triggered upon the deletion of a file or directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**on_moved:** Triggered when a file or directory is relocated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Initialize and Run the Observer'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Observer class is responsible for tracking the file system for any changes
    and subsequently notifying the event handler. It continuously tracks file system
    activities to detect any updates.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We start the observer and use a loop to keep it running. When you want to stop
    it, you can interrupt with a keyboard signal `(Ctrl+C)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Run the Script'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, run the script with the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The above code will log all the changes in the directory to the terminal if
    any file/folder is created, modified, or deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Advanced Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the following example, we will explore how to set up a system that detects
    any change in Python files and run tests for it automatically. We need to install
    pytest with the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 1: Create a Simple Python Project With Tests'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'First, set up the basic structure of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Write Code in Example Python File'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a simple Python module in src/example.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 3: Write the Test Cases'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Next, write the test cases for functions in tests/test_example.py:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Write the Watchdog Script'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, create the watchdog_test_runner.py script to monitor changes in Python
    files and automatically run tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 5: Run the Watchdog Script'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the end, open a terminal, navigate to your project directory (my_project),
    and run the watchdog script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This output shows that all the test cases are passed after changes were made
    to example.py file.
  prefs: []
  type: TYPE_NORMAL
- en: Summing Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python’s watchdog library is a powerful tool for monitoring your file system.
    Whether you're automating tasks, syncing files, or building more responsive applications,
    watchdog makes it easy to react to file system changes in real time. With just
    a few lines of code, you can start monitoring directories and handling events
    to streamline your workflow.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Monitor Model Performance in the MLOps Pipeline with Python](https://www.kdnuggets.com/2023/05/monitor-model-performance-mlops-pipeline-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Parallel Processing Large File in Python](https://www.kdnuggets.com/2022/07/parallel-processing-large-file-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, July 20: Machine Learning Algorithms Explained in…](https://www.kdnuggets.com/2022/n29.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Recommender System for Amazon Products with Python](https://www.kdnuggets.com/2023/02/building-recommender-system-amazon-products-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How a Level System can Help Forecast AI Costs](https://www.kdnuggets.com/2022/03/level-system-help-forecast-ai-costs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning System Design: Top 5 Essential Reads](https://www.kdnuggets.com/learning-system-design-top-5-essential-reads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
