- en: Understanding Iterables vs Iterators in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/01/understanding-iterables-iterators-python.html](https://www.kdnuggets.com/2022/01/understanding-iterables-iterators-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Understanding Iterables vs Iterators in Python](../Images/f687a94152e04fa892eb31852b49e233.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Image by [geralt on Pixabay](https://pixabay.com/users/geralt-9301/)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Iterables and Iterators are often confused for one another, however, they are
    two distinct concepts. This article will explain the difference between the two,
    and how they are used. Let’s first briefly look at what Iteration is.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In layman’s terms, Iteration means ‘repeating steps’. In programming terms,
    Iterations is the repetition of a statement/block of code a specific number of
    times, producing an output one after another. Iterations can be executed by using
    for loops for example.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Iterables in Python
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iterables are objects which can be looped/iterated over by using a for loop.
    Iterables contain data or have value, where executing a for loop will perform
    an iteration, producing outputs one after another.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: An iterable implements the `__iter__()` method and returns an iterator object.
    However, if the `__iter__()` method is not defined, Python will use `__getitem__()`
    instead.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Iterables are lists, dictionaries, strings, tuples, and more. As
    long as you can loop over it, it is an Iterable.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: To figure out whether an object is iterable or not, you will have to check if
    it supports `__iter__`. In order to do this, we use the `dir()` function, which
    returns all properties and methods of the specified object, excluding values.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**Example Code:**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Iterators in Python
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Iterator is also an object which uses the `__iter__()` and `__next__()` methods,
    this is called the Iterator protocol. It is an iterable object with a state, meaning
    it remembers what stage it is at during iteration.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Iterators return values, one element at a time. As the next value of an Iterable
    object is being returned, the state of the iterator is updated and knows how to
    get to the next value using the `__next__()` method. Iterators can only move forward,
    they cannot go back or reset themselves.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Iterators also raise a StopIteration exception when there are no more elements
    or the object is exhausted.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Example Code:**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Here I have created an iterator called ‘numbers’. I have put in a line of code
    to check its type. We are expecting the iteration to output all the numbers. However,
    I have asked it to print the 6th output, although there are only 5 values in the
    iterator. Let’s see what happens
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我创建了一个名为“numbers”的迭代器。我加入了一行代码来检查其类型。我们期望迭代能输出所有数字。然而，我要求它打印第六个输出，但迭代器中只有五个值。让我们看看会发生什么。
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: We can see that the type is a ‘list_iterator’. The output stopped at 10 and
    raised a `StopIteration` as there were no more elements in the numbers list.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到类型是‘list_iterator’。输出在10处停止，并引发了`StopIteration`，因为数字列表中没有更多元素。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Limitations of Iterators:**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**迭代器的限制：**'
- en: Iterators only move in a forward direction, they do not go backwards or reset.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代器只向前移动，不能向后或重置。
- en: Iterators cannot be copied as it is a one-way object that can only move forward.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 迭代器不能被复制，因为它是一个只能向前移动的单向对象。
- en: Due to its one-way direction, there is no way to retrieve the previous element.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于其单向方向，无法检索到之前的元素。
- en: Similarities and Differences Between Iterables and Iterators
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可迭代对象和迭代器之间的相似性和差异
- en: '|  | **Iterable** | **Iterator** |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '|  | **可迭代对象** | **迭代器** |'
- en: '| **Iterated by using:** | for loop  | for loop  |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **通过以下方式迭代：** | for 循环 | for 循环 |'
- en: '| **Methods used: ** | __iter__()     | __iter__() and __next__() |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| **使用的方法：** | __iter__() | __iter__() 和 __next__() |'
- en: An Iterator is an Iterable, as it also implements the `__iter__()` method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代器是一个可迭代对象，因为它也实现了`__iter__()`方法。
- en: '**Remember:** Every Iterator is an Iterable, however not every Iterable is
    an Iterator.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**记住：** 每个迭代器都是一个可迭代对象，但并非每个可迭代对象都是一个迭代器。'
- en: '**Example of `dir()` of an Iterable:**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**可迭代对象的 `dir()` 示例：**'
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: In this output, I have highlighted `__iter__`, showing that it is a method of
    an Iterable.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中，我突出了`__iter__`，显示它是一个可迭代对象的方法。
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Example of `dir()` of an Iterator:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**迭代器的 `dir()` 示例：**'
- en: In this example, we are iterating the numbers list.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们正在迭代数字列表。
- en: '[PRE6]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output:**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: In this output, I have highlighted `__iter__` and `__next__`, showing that it
    is a method of an Iterator.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个输出中，我突出了`__iter__`和`__next__`，显示它们是迭代器的方法。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: I hope this short blog has given you a better understanding of the differences
    between an Iterable and an Iterator.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个简短的博客能让你更好地理解可迭代对象和迭代器之间的区别。
- en: '**[Nisha Arya](https://www.linkedin.com/in/nisha-arya-ahmed/)** is a Data Scientist
    and freelance Technical writer. She is particularly interested in providing Data
    Science career advice or tutorials and theory based knowledge around Data Science.
    She also wishes to explore the different ways Artificial Intelligence is/can benefit
    the longevity of human life. A keen learner, seeking to broaden her tech knowledge
    and writing skills, whilst helping guide others.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**[尼莎·阿里亚](https://www.linkedin.com/in/nisha-arya-ahmed/)** 是一名数据科学家和自由技术作家。她特别感兴趣于提供数据科学职业建议或教程，以及数据科学理论知识。她还希望探索人工智能如何/可以促进人类寿命的不同方式。作为一个积极学习者，她寻求拓宽自己的技术知识和写作技能，同时帮助指导他人。'
- en: More On This Topic
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Exploring Infinite Iterators in Python''s itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[探索 Python 的 itertools 中的无限迭代器](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
- en: '[Understanding Python''s Iteration and Membership: A Guide to…](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解 Python 的迭代和成员资格：`__contains__`和`__iter__`魔法方法指南](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
- en: '[Understanding and Implementing Genetic Algorithms in Python](https://www.kdnuggets.com/understanding-and-implementing-genetic-algorithms-in-python)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解和实现 Python 中的遗传算法](https://www.kdnuggets.com/understanding-and-implementing-genetic-algorithms-in-python)'
- en: '[3 Ways Understanding Bayes Theorem Will Improve Your Data Science](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解贝叶斯定理的三种方式将提升你的数据科学能力](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
- en: '[Understanding by Implementing: Decision Tree](https://www.kdnuggets.com/2023/02/understanding-implementing-decision-tree.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过实现来理解：决策树](https://www.kdnuggets.com/2023/02/understanding-implementing-decision-tree.html)'
- en: '[Understanding Agent Environment in AI](https://www.kdnuggets.com/2022/05/understanding-agent-environment-ai.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解人工智能中的代理环境](https://www.kdnuggets.com/2022/05/understanding-agent-environment-ai.html)'
