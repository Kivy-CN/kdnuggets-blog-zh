["```py\npip install pyjanitor\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('train.csv')\ndf.head()\n```", "```py\nimport janitor\ndf.remove_columns([\"Cabin\"]).expand_column(column_name = 'Embarked').clean_names()\n```", "```py\npip install pingouin\n```", "```py\nimport pingouin as pg\n\n#T-Test\nprint('T-Test example')\npg.ttest( df['Age'], df['Fare'])\n\nprint('\\n')\n# ANOVA test\nprint('ANOVA test example')\npg.anova(data=df, dv='Age', between='SibSp', detailed=True)\n```", "```py\npip install pycaret\n```", "```py\nfrom pycaret.classification import *\nclf_exp = setup(data = df, target = 'Survived') \n```", "```py\nbest_model = compare_models(sort = 'precision')\n```", "```py\nprint(best_model)\n```", "```py\npip install bentoml \n```", "```py\nfrom sklearn import svm, datasets\n\niris = datasets.load_iris()\nX, y = iris.data, iris.target\n\niris_clf = svm.SVC()\niris_clf.fit(X, y)\n```", "```py\nimport bentoml\n\nbentoml.sklearn.save_model(\"iris_clf\", iris_clf)\n```", "```py\n# Create a Runner instance and implement a runner instance in local\niris_clf_runner = bentoml.sklearn.get(\"iris_clf:latest\").to_runner()\niris_clf_runner.init_local()\n\n# Using the predictor on unseen data\niris_clf_runner.predict.run([[4.1, 2.3, 5.5, 1.8]])\n```", "```py\narray([2])\n```", "```py\n%%writefile service.py\nimport numpy as np\nimport bentoml\nfrom bentoml.io import NumpyNdarray\n\niris_clf_runner = bentoml.sklearn.get(\"iris_clf:latest\").to_runner()\n\nsvc = bentoml.Service(\"iris_clf_service\", runners=[iris_clf_runner])\n\n@svc.api(input=NumpyNdarray(), output=NumpyNdarray())\ndef classify(input_series: np.ndarray) -> np.ndarray:\n    return iris_clf_runner.predict.run(input_series)\n```", "```py\n!bentoml serve service.py:svc --reload\n```", "```py\npip install streamlit \n```", "```py\n%%writefile streamlit_example.py\nimport streamlit as st\nimport pandas as pd\nimport numpy as np\n\nst.title('Titanic Data')\n\ndata = pd.read_csv('train.csv')\n\nst.write('Shows top 5 of the data')\nst.dataframe(data.head())\n\nst.title('Bar Chart Visualization with Age')\n\ncol = st.selectbox('Select the categorical columns', data.select_dtypes('object').columns)\n\nst.bar_chart(data, x = col, y='Age')\n```", "```py\n!streamlit run streamlit_example.py\n```"]