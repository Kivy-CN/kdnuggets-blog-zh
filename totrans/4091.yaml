- en: Python String Matching Without Complex RegEx Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python String Matching Without Complex RegEx Syntax](../Images/5943947bd74ec9e16ea6fb4b391f5096.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: I have a love-and-hate relationship with regular expressions (RegEx), especially
    in Python. I love how you can extract or match strings without writing multiple
    logical functions. It is even better than the String search function.
  prefs: []
  type: TYPE_NORMAL
- en: What I don’t like is how it is hard for me to learn and understand RegEx patterns.
    I can deal with simple String matching, such as extracting all alpha-numerical
    characters and cleaning the text for NLP tasks. Things get harder when it comes
    to extracting IP addresses, emails, and IDs from junk text. You have to write
    a complex RegEx String pattern to extract the required item.
  prefs: []
  type: TYPE_NORMAL
- en: To make complex RegEx tasks simple, we will learn about a simple Python Package
    called [pregex](https://pypi.org/project/pregex/). Furthermore, we will also look
    at a few examples of extracting dates and emails from a long string of text.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with PRegEx
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Pregex](https://pypi.org/project/pregex/) is a higher-level API built on top
    of the `re` module. It is a RegEx without complex RegEx patterns that make it
    easy for any programmer to understand and remember regular expressions. Moreover,
    you don’t have to group patterns or escape metacharacters, and it is modular.'
  prefs: []
  type: TYPE_NORMAL
- en: You can simply install the library using PIP.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To test the powerful functionality of PRegEx, we will use modified sample code
    from the [documentation](https://pregex.readthedocs.io/en/latest/introduction.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the example below, we are extracting either HTTP URL or an IPv4 address with
    a port number. We don’t have to create complex logic for it. We can use built-in
    functions `HttpUrl` and `IPv4`.
  prefs: []
  type: TYPE_NORMAL
- en: Create a port number using AnyDigit(). The first digit of the port should not
    be zero, and the next three digits can be any number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Either() to add multiple logics to extract, either HTTP URL or IP address
    with a port number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will use a long string of text with characters and descriptions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Before we extract the matching string, let’s look at the RegEx pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, it is hard to read or even understand what is going on. This
    is where PRegEx shines. To provide you with a human-friendly API for performing
    complex regular expression tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Just like `re.match`, we will use `.get_matches(text)` to extract the required
    string.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: We have extracted both the IP address with port number and two web URLs.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 1: Date Format'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s look at a couple of examples where we can understand the full potential
    of PRegEx.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we will be extracting certain kinds of date patterns from the
    text below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: By using Exactly() and AnyDigit(), we will create the day, month, and year of
    the date. The day and month have two digits, whereas the year has 4 digits. They
    are separated by “-” dashes.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the pattern, we will run `get_match` to extract the matching
    String.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Let’s look at the RegEx pattern by using the `get_pattern()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, it has a simple RegEx syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Example 2: Email Extraction'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The second example is a bit complex, where we will extract valid email addresses
    from junk text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a **user** pattern with `OneOrMore()`. We will use `AnyButFrom()` to
    remove “@” and space from the logic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar to a **user** pattern we create a **company** pattern by removing the
    additional character “.” from the logic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the **domain,**  we will use `MatchAtLineEnd()` to start the search from
    the end with any two or more characters except "@", space, and full stop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Combine all three to create the final pattern: **user@company.domain**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: As we can see, PRegEx has identified two valid email address.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** both code examples are modified versions of work by [The PyCoach](https://towardsdatascience.com/pregex-regular-expressions-in-plain-english-in-python-4670425d0eb5).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a data scientist, analyst, or NLP enthusiast, you should use PRegEx
    to clean the text and create simple logic. It will reduce your dependency on NLP
    frameworks as most of the matching can be done using simple API.
  prefs: []
  type: TYPE_NORMAL
- en: In this mini tutorial, we have learned about the Python package PRegEx and its
    use cases with examples. You can learn more by reading the official [documentation](https://pregex.readthedocs.io/en/latest/introduction.html)
    or solving a [wordle](https://pregex.readthedocs.io/en/latest/introduction.html#solving-wordle-with-pregex)
    problem using programmable regular expressions.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Python String Processing Cheatsheet](https://www.kdnuggets.com/2020/01/python-string-processing-primer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python String Methods](https://www.kdnuggets.com/2022/12/python-string-methods.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Get Your First Job in Data Science without Any Work Experience](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Find a Picture in an Image Without Marking it Up](https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
