["```py\nimport numpy as np \n\n    import pandas as pd\n\n    import matplotlib.pyplot as plt\n\n    import seaborn as sns\n\n    from sklearn import linear_model\n\n    from sklearn.model_selection import train_test_split\n\n    import os\n```", "```py\ndf = pd.read_csv(\"../input/random-linear-regression/train.csv\")\n\n    df=df.sample(50)\n\n    df=round(df,2)\n```", "```py\ndef clean_dataset(df):\n\n       assert isinstance(df, pd.DataFrame), \"df needs to be a pd.DataFrame\"\n\n       df.dropna(inplace=True)\n\n       indices_to_keep = ~df.isin([np.nan, np.inf, -np.inf]).any(1)\n\n       return df[indices_to_keep].astype(np.float64)\n\n    df=clean_dataset(df)\n```", "```py\nx_train,  x_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=1)\n```", "```py\nlm=linear_model.LinearRegression()\n\n    lm.fit(x_train,y_train)\n```", "```py\ndf.plot(kind=\"scatter\", x=\"x\", y=\"y\")\n```", "```py\nplt.plot(X,lm.predict(X), color=\"red\")\n```", "```py\nimport numpy as np \n\n    import pandas as pd \n\n    from sklearn.model_selection import train_test_split\n\n    import warnings\n\n    warnings.filterwarnings('ignore')\n```", "```py\ndata = pd.read_csv('../input/iris-dataset-logistic-regression/iris.csv')\n```", "```py\nX = data[['x0','x1','x2','x3','x4']]\n\n    y = data[['type']]\n```", "```py\nX_train,X_test,y_train,y_test = train_test_split(X,y, test_size=0.2, random_state=1)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\n\n    model = LogisticRegression(random_state = 0)\n\n    model.fit(X_train, y_train)\n```", "```py\nprint(lm.score(x_test, y_test))\n```", "```py\nimport matplotlib.pyplot as plt\n\n    %matplotlib inline\n\n    plt.plot(range(len(X_test)), pred,'o',c='r')\n```", "```py\nimport numpy as np\n\n    import pandas as pd\n\n    from sklearn.model_selection import train_test_split\n\n    from sklearn.datasets import load_iris\n```", "```py\ndata = pd.read_csv(‘../input/iris-flower-dataset/IRIS.csv’)\n```", "```py\nX = data.drop(‘species’, axis=1)\n\n    y = data[‘species’]\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n```", "```py\nfrom sklearn.svm import SVC\n\n    model = SVC( )\n\n    model.fit(X_train, y_train)\n```", "```py\nmodel.score(X_test, y_test)\n```"]