- en: Python Data Structures Compared
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据结构比较
- en: 原文：[https://www.kdnuggets.com/2021/07/python-data-structures-compared.html](https://www.kdnuggets.com/2021/07/python-data-structures-compared.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/07/python-data-structures-compared.html](https://www.kdnuggets.com/2021/07/python-data-structures-compared.html)
- en: '[comments](#comments)![Figure](../Images/beb472629858f9167f198fa19ad0f9ce.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图](../Images/beb472629858f9167f198fa19ad0f9ce.png)'
- en: Photo by [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 照片由 [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Choosing a structure for storing your data is an important part of solving programming
    tasks and implementing solutions, yet it is often not given the attention a choice
    of such potential weight deserves. Unfortunately, in Python I often see the list
    used as a catch-all data structure. The list has its advantages, of course, but
    also its drawbacks. There are lots of other data structure options as well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 选择存储数据的结构是解决编程任务和实施解决方案的重要部分，但通常没有得到应有的关注。不幸的是，在 Python 中，我常看到列表被用作万用数据结构。列表当然有其优点，但也有其缺点。还有许多其他数据结构选项。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的捷径。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Let's take a look at 5 different Python data structures and see how they could
    be used to store data we might be processing in our everyday tasks, as well as
    the relative memory they use for storage and time they take to create and access.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解 5 种不同的 Python 数据结构，看看它们如何用于存储我们在日常任务中处理的数据，以及它们在存储所需的内存和创建、访问所需的时间。
- en: Types of Data Structures
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据结构类型
- en: First, let's lay out the 5 data structures we will consider herein, and provide
    some preliminary insight.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们列出本文中考虑的 5 种数据结构，并提供一些初步见解。
- en: '**Class**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**类**'
- en: 'In this case we are talking about vanilla classes (as opposed to data classes
    below), which are described at a high level in Python [documentation](https://docs.python.org/3/tutorial/classes.html)
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，我们讨论的是普通类（与下面的数据类相比），Python [文档](https://docs.python.org/3/tutorial/classes.html)
    高级描述如下：
- en: Classes provide a means of bundling data and functionality together. Creating
    a new class creates a new *type* of object, allowing new *instances* of that type
    to be made. Each class instance can have attributes attached to it for maintaining
    its state. Class instances can also have methods (defined by its class) for modifying
    its state.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 类提供了一种将数据和功能捆绑在一起的方法。创建一个新类会创建一种新的 *类型* 对象，允许创建该类型的新 *实例*。每个类实例可以附加属性以维护其状态。类实例还可以具有由其类定义的用于修改状态的方法。
- en: The advantages of using classes is that they are conventional, and are well-used
    and -understood. Whether or not they are overkill in terms of relative required
    memory or time is something to look at.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类的优势在于它们是传统的，且被广泛使用和理解。是否在相对所需内存或时间方面显得过于复杂，是一个需要探讨的问题。
- en: '**Data Class**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据类**'
- en: Added in Python 3.7, the [data class](https://www.python.org/dev/peps/pep-0557/)
    is a special class meant for mainly holding data, which comes with some freebie
    methods out of the box for typical functionality like instantiating and printing
    instance contents. Creating a data class is accomplished using the `@dataclass`
    decorator.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 3.7 中新增的 [数据类](https://www.python.org/dev/peps/pep-0557/) 是一种专门用于存储数据的特殊类，内置了一些免费的典型功能方法，如实例化和打印实例内容。创建数据类是通过
    `@dataclass` 装饰器来完成的。
- en: 'Although they use a very different mechanism, Data Classes can be thought of
    as "mutable namedtuples with defaults". Because Data Classes use normal class
    definition syntax, you are free to use inheritance, metaclasses, docstrings, user-defined
    methods, class factories, and other Python class features. Such a class is called
    a Data Class, but there''s really nothing special about the class: the decorator
    adds generated methods to the class and returns the same class it was given.'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 尽管它们使用非常不同的机制，但数据类可以被认为是“带有默认值的可变命名元组”。由于数据类使用正常的类定义语法，你可以自由使用继承、元类、文档字符串、用户定义的方法、类工厂以及其他Python类功能。这样的类称为数据类，但这个类本身并没有什么特别之处：装饰器为类添加了生成的方法，并返回了它所给出的相同类。
- en: As you can see, the [automatically generated methods](https://www.python.org/dev/peps/pep-0557/#id32)
    and the related time-savings are the main reason to consider data classes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，[自动生成的方法](https://www.python.org/dev/peps/pep-0557/#id32)和相关的时间节省是考虑数据类的主要原因。
- en: '**Named Tuple**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**命名元组**'
- en: Named tuples are an [elegant implementation](https://docs.python.org/3/library/collections.html#collections.namedtuple)
    of a useful data structure, essentially tuple subclasses with named fields.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 命名元组是 [一种优雅的实现](https://docs.python.org/3/library/collections.html#collections.namedtuple)
    的有用数据结构，本质上是具有命名字段的元组子类。
- en: Named tuples assign meaning to each position in a tuple and allow for more readable,
    self-documenting code. They can be used wherever regular tuples are used, and
    they add the ability to access fields by name instead of position index.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 命名元组为元组中的每个位置分配意义，并允许更具可读性、自文档化的代码。它们可以在任何使用普通元组的地方使用，并且提供了通过名称而不是位置索引访问字段的能力。
- en: At first look, named tuples appear to be the closest thing to simple C-like
    struct types natively available in Python, making them naively attractive to many.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 初看，命名元组似乎是Python中最接近简单的类似C的结构体类型，使其对许多人具有天然的吸引力。
- en: '**Dictionary**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**字典**'
- en: The Python [dictionary](https://python-reference.readthedocs.io/en/latest/docs/dict/)
    is a collection of key-value pairs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python [字典](https://python-reference.readthedocs.io/en/latest/docs/dict/)是键值对的集合。
- en: '[Python Dictionaries](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html)
    are mutable unordered collections (they do not record element position or order
    of insertion) of key-value pairs. Keys within the dictionary must be unique and
    must be hashable. That includes types like numbers, strings and tuples. Lists
    and dicts can not be used as keys since they are mutable.'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[Python字典](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html)是可变的无序集合（它们不记录元素位置或插入顺序）的键值对。字典中的键必须唯一且必须是可哈希的。这包括数字、字符串和元组等类型。列表和字典不能用作键，因为它们是可变的。'
- en: The advantage of dictionaries is that they are simple, the data within are easily
    accessible, and they are well-used and -understood.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 字典的优点在于它们简单，数据易于访问，并且广泛使用和理解。
- en: '**List**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表**'
- en: 'Here it is, the one-size-fits-all Python data superstructure, or so lots of
    code would have you believe. Here is what the [list](https://python-reference.readthedocs.io/en/latest/docs/list/)
    really is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通用的Python数据超级结构，或许许多代码都认为如此。这就是 [列表](https://python-reference.readthedocs.io/en/latest/docs/list/)
    的真实情况：
- en: Lists are mutable ordered and indexed collections of objects. The items of a
    list are arbitrary Python objects. Lists are formed by placing a comma-separated
    list of expressions in square brackets.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 列表是可变的、有序且按索引排列的对象集合。列表中的项目是任意的Python对象。列表通过将用逗号分隔的表达式放入方括号中形成。
- en: Why the widespread use of the list? It's very simple to understand and implement,
    and is usually the first structure one learns when picking up Python. Are there
    disadvantages related to speed and memory usage? Let's take a look.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么列表被广泛使用？它非常简单易懂和实现，通常是学习Python时第一个学习的结构。是否存在与速度和内存使用相关的缺点？让我们看看。
- en: Implementations
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现
- en: First off, let's have a look at the creation process of each of these structures
    and how they compare to one another.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看这些结构的创建过程以及它们之间的比较。
- en: The reason we might be using any of these data structures to store our data
    would vary widely, but for the unimaginative, let's imagine we are extracting
    data from a SQL database and need to store each record in one such structure in
    order to perform some processing prior to moving the data further along our pipeline.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能使用这些数据结构来存储数据的原因差异很大，但对于缺乏想象力的人来说，假设我们从SQL数据库中提取数据，并需要将每条记录存储在一个这样的结构中，以便在将数据进一步传输到管道之前进行一些处理。
- en: With that in mind, here is instantiation code for creating each of the five
    structures.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这一点，下面是创建每种五种结构的实例化代码。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意以下几点：
- en: The creation of an instance of the built-in types dictionary and list have been
    place inside functions
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置类型字典和列表的实例创建被放置在函数中。
- en: The difference between the class and the data class implementations, in light
    of the discussion above
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据上述讨论，类与数据类实现之间的区别。
- en: The (clearly subjective) elegance and simplicity of the named tuple
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名元组的（明显主观的）优雅和简单性
- en: Let's have a look at instantiation of these structures, and a comparison of
    the resources required to do so.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些结构的实例化以及进行比较所需的资源。
- en: Testing and Results
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试和结果
- en: We will create a single instance of each of the 5 structures, each housing a
    single data record. We will repeat this process using the same data fields for
    each structure 1,000,000 times to get a better sense of average time, performing
    this process on my modest Dell notebook, using an Ubuntu-derived operating system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每种结构创建一个单一实例，每个实例包含一个数据记录。我们将重复这个过程，使用相同的数据字段对每个结构进行1,000,000次，以更好地了解平均时间，过程将在我的普通戴尔笔记本电脑上进行，使用的是Ubuntu派生的操作系统。
- en: '![Image](../Images/b4fba0e02b2ae02ceba2ec1d33b38e96.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/b4fba0e02b2ae02ceba2ec1d33b38e96.png)'
- en: Compare the code between the 5 structure instantiations below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 比较下面五种结构实例化的代码。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is the output of the above:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上述过程的输出：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, another useful piece of data would be to know the relative access times
    of values stored within our structures (in the case below, the address). The same
    retrieval will be repeated 1,000,000 times, and the average time reported below.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一条有用的信息是知道我们结构中存储的值的相对访问时间（在下面的例子中，是地址）。相同的检索将重复1,000,000次，下面报告平均时间。
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And the output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The intent of this article is not to make a recommendation one way or another
    as to which data structure to use, nor is it to suggest that there is a universal
    best structure for every case. Instead, we wanted to have a look at some different
    options and their relative strength and weakness. As with all things, there are
    trade-offs to be made, and less quantitative considerations such as understandability,
    ease of use, etc. are to be taken into account when making these types of decisions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的意图不是建议使用哪种数据结构，也不是暗示在每种情况下都有一种通用的最佳结构。相反，我们想要了解一些不同选项及其相对优缺点。像所有事物一样，有权衡之处，理解性、易用性等较少量化的考虑因素在做出这些决策时也应考虑在内。
- en: 'That said, a few things do stand out from the above analysis:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，上述分析中有一些内容突出：
- en: The dictionary uses the greatest amount of storage of all the structures, in
    our case almost 3 times as much as the next greatest — though we should be careful
    about generalizing until we look at the effects of scaling and internal field
    data types
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有结构中，字典使用的存储量最大，在我们的案例中几乎是第二大者的三倍——尽管在我们查看扩展和内部字段数据类型的影响之前应谨慎概括。
- en: Unsurprisingly, the list is the fastest to instantiate, yet not the fastest
    from which to retrieve an element (it's almost the slowest)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不出所料，列表是实例化最快的，但从中检索元素却不是最快的（它几乎是最慢的）。
- en: In our case, the named tuple is the slowest structure from which to retrieve
    an element, yet is middle of the pack for storage space
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的案例中，命名元组是从中检索元素最慢的结构，但在存储空间上位于中等水平。
- en: Both classes take relatively longer to instantiate (expected), but element retrieval
    and space used, in both cases, are very competitive with the other structures
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两种类的实例化时间相对较长（这是预期的），但在元素检索和使用空间方面，两者与其他结构的竞争非常激烈。
- en: So not only are we not looking to recommend a single structure in every case,
    there is no clear winner that could be recommended in every case. Even taking
    the caution to generalize based on our small experiment, it is clear that priorities
    will need to be taken into account for making a decision as to which structure
    you use for a particular job. At the very least, this limited experimentation
    has provided some small window of insight into the performance of data structures
    available in Python.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们不仅不打算在每种情况下推荐单一的结构，而且没有一个明确的胜者可以在所有情况下推荐。即便是基于我们的小实验进行概括，也明显需要考虑优先级，以决定在特定任务中使用哪种结构。至少，这些有限的实验为我们提供了一个小窗口，了解了Python中可用数据结构的性能。
- en: '**Related**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关**：'
- en: '[Managing Your Reusable Python Code as a Data Scientist](/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家管理您的可重用Python代码](/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[5 Python Data Processing Tips & Code Snippets](/2021/07/python-tips-snippets-data-processing.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个Python数据处理技巧和代码片段](/2021/07/python-tips-snippets-data-processing.html)'
- en: '[Date Processing and Feature Engineering in Python](/2021/07/date-pre-processing-feature-engineering-python.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的日期处理和特征工程](/2021/07/date-pre-processing-feature-engineering-python.html)'
- en: More On This Topic
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步入门Python数据结构](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python基础：语法、数据类型和控制结构](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
- en: '[Super Study Guide: A Free Algorithms and Data Structures eBook](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超级学习指南：一本免费的算法和数据结构电子书](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
- en: '[A Starter Guide to Data Structures for AI and Machine Learning](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI和机器学习的数据结构入门指南](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)'
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过《快速Python数据科学》提升您的Python技能！](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化Python代码性能：深入探讨Python分析工具](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
