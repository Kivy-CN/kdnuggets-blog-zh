- en: You Don’t Have to Use Docker Anymore
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不再需要使用 Docker
- en: 原文：[https://www.kdnuggets.com/2020/10/use-docker-anymore.html](https://www.kdnuggets.com/2020/10/use-docker-anymore.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/10/use-docker-anymore.html](https://www.kdnuggets.com/2020/10/use-docker-anymore.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Martin Heinz](https://www.linkedin.com/in/heinz-martin/), DevOps Engineer
    at IBM**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Martin Heinz](https://www.linkedin.com/in/heinz-martin/), IBM 的 DevOps
    工程师**'
- en: In the ancient times of containers (really more like 4 years ago) *Docker* was
    the only player in the container game. That’s not the case anymore though and
    Docker is not *the only*, but rather *just another* container engine on the landscape.
    Docker allows us to build, run, pull, push or inspect container images, but for
    each of these tasks there are other alternative tools, which might just do better
    job at it than Docker. So, let’s explore the landscape and (just *maybe*) uninstall
    and forget about Docker altogether…
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器的古老时代（实际上大约是 4 年前），*Docker* 是容器领域的唯一玩家。然而现在情况已不再如此，Docker 并不是 *唯一* 的容器引擎，而只是
    *另一个* 容器引擎。Docker 允许我们构建、运行、拉取、推送或检查容器镜像，但对于每一项任务，还有其他替代工具，可能比 Docker 做得更好。所以，让我们深入了解一下这些工具，并且（*也许*）彻底卸载和忘记
    Docker……
- en: '![Figure](../Images/f504eeb72a30558da7db944a64f471d0.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/f504eeb72a30558da7db944a64f471d0.png)'
- en: Photo by [Nicole Chen](https://unsplash.com/@917sunny?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/@917sunny?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Nicole Chen](https://unsplash.com/@917sunny?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    拍摄于 [Unsplash](https://unsplash.com/@917sunny?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)'
- en: Why Not Use Docker, Though?
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么为什么不使用 Docker 呢？
- en: 'If you’ve been a docker user for long time, I think it will take some persuading
    for you to even consider to switch to different tooling. So, here goes:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经使用 Docker 很长时间，我认为需要一些说服才能让你考虑切换到不同的工具。所以，下面就是：
- en: First of all, Docker is a monolithic tool. It’s a tool that tries to do everything,
    which generally is not the best approach. Most of the time it’s better to choose
    a specialized tool that does just one thing, but does it really well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Docker 是一个整体的工具。它试图做所有事情，这通常不是最好的方法。大多数情况下，选择一个只做一件事但做得非常好的专业工具更为理想。
- en: If you are scared of switching to different set of tools, because you would
    have to learn to work with different CLI, different API or in general different
    concepts, then that won’t be a problem. Choosing any of the tools shown in this
    article can be completely seamless as they all (including Docker) adhere to same
    specification under OCI, which is short for [Open Container Initiative](https://opencontainers.org/).
    This initiative contains specifications for [container runtime](https://github.com/opencontainers/runtime-spec), [container
    distribution](https://github.com/opencontainers/distribution-spec) and [container
    images](https://github.com/opencontainers/image-spec), which covers all the features
    needed for working with containers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你担心切换到不同的工具集，因为你需要学习使用不同的 CLI、不同的 API 或一般的不同概念，那也不会成为问题。选择本文中展示的任何工具都可以完全无缝过渡，因为它们（包括
    Docker）都遵循 OCI 的相同规范。OCI 即 [Open Container Initiative](https://opencontainers.org/)，该倡议包含了
    [容器运行时](https://github.com/opencontainers/runtime-spec)、[容器分发](https://github.com/opencontainers/distribution-spec)
    和 [容器镜像](https://github.com/opencontainers/image-spec) 的规范，这涵盖了处理容器所需的所有功能。
- en: Thanks to the OCI you can choose a set of tools that best suit your needs and
    at the same time you can still enjoy using the same APIs and same CLI commands
    as with Docker.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 OCI，你可以选择最适合自己需求的一套工具，同时你仍然可以使用与 Docker 相同的 API 和 CLI 命令。
- en: So, if you’re open to trying out new tools, then let’s compare the advantages,
    disadvantages and features of Docker and it’s competitors to see whether it actually
    makes sense to even consider ditching Docker for some new shiny tool.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意尝试新的工具，那我们可以比较 Docker 及其竞争对手的优缺点和特点，看看是否有必要考虑抛弃 Docker 转而使用一些新的闪亮工具。
- en: Container Engines
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器引擎
- en: When comparing Docker with any other tool we need to break it down by its components
    and first thing we should talk about are *container engines*. Container engine
    is a tool that provides user interface for working with images and containers
    so that you don’t have to mess with things like `SECCOMP` rules or SELinux policies.
    Its job is also to pull images from remote repositories and expand them to your
    disk. It also *seemingly* runs the containers, but in reality its job is to create
    container manifest and directory with image layers. It then passes them to *container
    runtime* like `runc` or `crun` (which we will talk about little later).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在比较 Docker 与任何其他工具时，我们需要分解它的组件，首先要谈的是*容器引擎*。容器引擎是一个提供用户界面以操作镜像和容器的工具，这样你就不必处理像`SECCOMP`规则或
    SELinux 策略之类的事务。它的工作也是从远程仓库拉取镜像并将其展开到你的磁盘上。它还*似乎*运行容器，但实际上它的工作是创建容器清单和包含镜像层的目录。然后，它将这些传递给*容器运行时*，如`runc`或`crun`（我们稍后会讨论）。
- en: 'There are many container engines available, but the most prominent competitor
    to Docker is *Podman*, developed by *Red Hat*. Unlike Docker, Podman doesn’t need
    daemon to run and also doesn’t need root privileges which has been long-standing
    concern with Docker. Based on the name, Podman can not only run containers, but
    also *pods*. In case you are not familiar with concept of pods, then pod is the
    smallest compute unit for Kubernetes. It consists of one or more containers —
    the main one and so-called *sidecars* — that perform supporting tasks. This makes
    it easier for Podman users to later migrate their workloads to Kubernetes. So,
    as a simple demonstration, this is how you would run 2 containers in a single
    pod:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有许多容器引擎可用，但与 Docker 竞争最突出的对手是*Podman*，由*Red Hat*开发。与 Docker 不同，Podman 不需要守护进程运行，也不需要
    root 权限，这长期以来一直是 Docker 的一个问题。根据名称，Podman 不仅可以运行容器，还可以运行*pods*。如果你不熟悉 pods 的概念，那么
    pod 是 Kubernetes 的最小计算单元。它由一个或多个容器组成——主要容器和所谓的*sidecars*——执行支持任务。这使得 Podman 用户更容易将工作负载迁移到
    Kubernetes。所以，作为一个简单的演示，这就是如何在一个 pod 中运行 2 个容器：
- en: Finally, Podman provides the exact same CLI commands as Docker so you can just
    do `alias docker=podman` and pretend that nothing changed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Podman 提供了与 Docker 完全相同的 CLI 命令，因此你可以直接使用`alias docker=podman`，假装什么都没有改变。
- en: 'There are other container engines besides Docker and Podman, but I would consider
    all of them a dead-end tech or not a suitable option for local development and
    usage. But to have a complete picture, let’s at least mention what’s out there:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Docker 和 Podman，还有其他容器引擎，但我认为它们都属于死胡同技术，或不适合本地开发和使用。但为了全面了解，我们至少提一下现有的选择：
- en: '[LXD](https://linuxcontainers.org/lxd/introduction/) — LXD is container manager
    (daemon) for LXC (Linux Containers). This tool offers ability to run *system* containers
    that provide container environment that is more similar to VMs. It sits in very
    narrow space and doesn’t have many users, so unless you have very specific use
    case, then you’re probably better off using Docker or Podman.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LXD](https://linuxcontainers.org/lxd/introduction/) — LXD 是 LXC（Linux Containers）的容器管理器（守护进程）。这个工具提供运行*系统*容器的能力，这些容器提供的环境更类似于虚拟机。它处于一个非常狭窄的领域，没有很多用户，所以除非你有非常特定的用例，否则你可能还是使用
    Docker 或 Podman 更好。'
- en: '[CRI-O](https://cri-o.io/) — When you google what is cri-o, you might find
    it described as container engine. It really is container runtime, though. Apart
    from the fact that it isn’t actually an engine, it also is not suitable for *“normal”* use.
    And by that I mean that it was specifically built to be used as Kubernetes runtime
    (CRI) and not for an end-user usage.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CRI-O](https://cri-o.io/) — 当你搜索 cri-o 是什么时，你可能会发现它被描述为容器引擎。但它实际上是容器运行时。除了它实际上不是引擎外，它也不适合*“正常”*使用。我的意思是，它是专门为
    Kubernetes 运行时 (CRI) 构建的，而不是供终端用户使用。'
- en: '[rkt](https://coreos.com/rkt/) — rkt (*“rocket”*) is container engine developed
    by *CoreOS*. This project is mentioned here really just for completeness, because
    the project ended and its development was halted — and therefore it should not
    be used.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[rkt](https://coreos.com/rkt/) — rkt (*“rocket”*) 是由*CoreOS*开发的容器引擎。提到这个项目只是为了完整性，因为该项目已结束，开发被暂停——因此不应使用它。'
- en: Building Images
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建镜像
- en: With container engines there was really only one alternative to Docker. When
    it comes to building images though, we have many more options to choose from.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在容器引擎方面，实际上只有一个替代 Docker 的选择。然而，在构建镜像方面，我们有更多的选择。
- en: First, let me introduce [Buildah](https://buildah.io/). Buildah is another tool
    developed by Red Hat and it plays very nicely with Podman. If you already installed
    Podman, you might have even noticed the `podman build` subcommand, which is really
    just Buildah in disguise, as its binary is included in Podman.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我介绍一下 [Buildah](https://buildah.io/)。Buildah 是 Red Hat 开发的另一种工具，它与 Podman
    非常兼容。如果你已经安装了 Podman，你可能已经注意到 `podman build` 子命令，这实际上就是 Buildah 的伪装，因为它的二进制文件包含在
    Podman 中。
- en: As for its features, it follows same route as Podman — it’s daemonless and rootless
    and produces OCI compliant images, so it’s guaranteed that your images will run
    the same way as the ones built with Docker. It’s also able to build images from `Dockerfile` or
    (more suitably named) `Containerfile` which is the same thing with different name.
    Apart from that, Buildah also provides finer control over image layers, allowing
    you to commit many changes into single layer. One unexpected but (in my opinion)
    nice difference from Docker is that images built by Buildah are user specific,
    so you will be able to list only images you built yourself.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 就其功能而言，它遵循与 Podman 相同的路线——它是无守护进程和无根的，并且生成符合 OCI 标准的镜像，因此可以保证你的镜像会以与 Docker
    构建的镜像相同的方式运行。它还能够从 `Dockerfile` 或更适合命名的 `Containerfile` 构建镜像，这两者本质上是相同的，只是名称不同。除此之外，Buildah
    还提供了对镜像层的更精细控制，允许你将多个更改提交到单个层中。与 Docker 的一个意外但（在我看来）不错的区别是，Buildah 构建的镜像是特定于用户的，因此你只能列出你自己构建的镜像。
- en: Now, considering that Buildah is already included in Podman CLI, you might be
    asking why even use the separate `buildah` CLI? Well, the `buildah` CLI is superset
    of commands included in `podman build`, so you might not need to ever touch the `buildah` CLI,
    but by using it you might also discover some extra useful features (For specifics
    about differences between `podman build` and `buildah` see following [article](https://podman.io/blogs/2018/10/31/podman-buildah-relationship.html)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，考虑到 Buildah 已经包含在 Podman CLI 中，你可能会问为什么还要使用单独的 `buildah` CLI？实际上，`buildah`
    CLI 是 `podman build` 命令的超集，因此你可能不需要触及 `buildah` CLI，但通过使用它你可能会发现一些额外的有用功能（有关 `podman
    build` 和 `buildah` 之间差异的具体信息，请参见以下 [文章](https://podman.io/blogs/2018/10/31/podman-buildah-relationship.html)）。
- en: 'With that said, let’s see a little demonstration:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，让我们来看一个小演示：
- en: From the above script you can see that you can build images simply using `buildah
    bud`, where `bud` stands for *build using Dockerfile*, but you can also use more
    scripted approach using Buildahs `from`, `run` and `copy`, which are equivalent
    commands to the commands in Dockerfile ( `FROM image`, `RUN ...`, `COPY ...`).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 从上述脚本中你可以看到，你可以简单地使用 `buildah bud` 来构建镜像，其中 `bud` 代表 *使用 Dockerfile 构建*，但你也可以使用更具脚本化的方法，使用
    Buildah 的 `from`、`run` 和 `copy`，这些命令与 Dockerfile 中的命令（ `FROM image`、`RUN ...`、`COPY
    ...` ）是等效的。
- en: Next up is Google’s [Kaniko](https://github.com/GoogleContainerTools/kaniko).
    Kaniko also builds container images from Dockerfile and similarly to Buildah,
    it also doesn’t need a daemon. The major difference from Buildah is that Kaniko
    is more focused on building images in Kubernetes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是 Google 的 [Kaniko](https://github.com/GoogleContainerTools/kaniko)。Kaniko
    也从 Dockerfile 构建容器镜像，类似于 Buildah，它也不需要守护进程。与 Buildah 的主要区别是 Kaniko 更专注于在 Kubernetes
    中构建镜像。
- en: Kaniko is meant to be run as an image, using `gcr.io/kaniko-project/executor`,
    which makes sense for Kubernetes, but isn't very convenient for local builds and
    kind of defeats the purpose as you would need to use Docker to run Kaniko image
    to build your images. That being said, if you are looking for tool for building
    images in your Kubernetes cluster (e.g. in CI/CD pipeline), then Kaniko might
    be a good option, considering that it's daemonless and ([maybe](https://github.com/GoogleContainerTools/kaniko#security))
    more secure.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Kaniko 旨在作为一个镜像运行，使用 `gcr.io/kaniko-project/executor`，这对于 Kubernetes 是有意义的，但对本地构建不是很方便，实际上有点违背了目的，因为你需要使用
    Docker 来运行 Kaniko 镜像以构建你的镜像。也就是说，如果你正在寻找在 Kubernetes 集群中构建镜像的工具（例如在 CI/CD 管道中），那么考虑到
    Kaniko 是无守护进程的且（[也许](https://github.com/GoogleContainerTools/kaniko#security)）更安全，它可能是一个不错的选择。
- en: From my personal experience though — I used both Kaniko and Buildah to build
    images in Kubernetes/OpenShift clusters and I think both will do the job just
    fine, but with Kaniko I’ve seen some random build crashes and fails when pushing
    images to registry.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 从我的个人经验来看——我使用过 Kaniko 和 Buildah 在 Kubernetes/OpenShift 集群中构建镜像，我认为这两者都能完成任务，但使用
    Kaniko 时我遇到过一些随机的构建崩溃和推送镜像到注册表时的失败。
- en: The third contender here is [buildkit](https://github.com/moby/buildkit), which
    could be also called *the next-generation* `docker build`. It's part of *Moby* project
    (as is Docker) and can be enabled with Docker as an experimental feature using `DOCKER_BUILDKIT=1
    docker build ...`. Well, but what exactly will this bring to you? It introduces
    bunch of improvements and cool features including parallel build steps, skipping
    unused stages, better incremental builds and rootless builds. On the other hand
    however, it still requires daemon to run ( `buildkitd`). So, if you don't want
    to get rid of Docker, but want some new features and nice improvements, then using
    buildkit might be the way to go.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个竞争者是 [buildkit](https://github.com/moby/buildkit)，也可以称为*下一代*`docker build`。它是
    *Moby* 项目（和 Docker 一样）的一部分，可以通过 `DOCKER_BUILDKIT=1 docker build ...` 将其作为实验性功能在
    Docker 中启用。那么，这到底会带来什么呢？它引入了一系列改进和很酷的功能，包括并行构建步骤、跳过未使用的阶段、更好的增量构建和无根构建。然而，它仍然需要运行守护进程（`buildkitd`）。所以，如果你不想摆脱
    Docker，但希望获得一些新功能和改进，使用 buildkit 可能是一个不错的选择。
- en: 'As in the previous section, here we also have a few *“honorable mentions”* which
    fill some very specific use cases and wouldn’t be one of my top choices:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一节一样，这里我们也有一些*“值得一提”*的工具，它们填补了一些非常特定的使用场景，但不会是我的首选：
- en: '[Source-To-Image (S2I)](https://github.com/openshift/source-to-image) is a
    toolkit for building images directly from source code without Dockerfile. This
    tool works well for simple, expected scenarios and workflows but quickly becomes
    annoying and clumsy if you need little too much customization or if your project
    doesn’t have the expected layout. You might consider using S2I if you are not
    very confident with Docker yet or if you build your images on OpenShift cluster,
    as builds with S2I are a built-in feature.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Source-To-Image (S2I)](https://github.com/openshift/source-to-image) 是一个直接从源代码构建镜像的工具包，无需
    Dockerfile。这个工具在简单、预期的场景和工作流程中表现良好，但如果需要稍微多一些定制，或者项目的布局不符合预期，它很快就会变得麻烦和笨拙。如果你对
    Docker 还不太自信，或者在 OpenShift 集群上构建镜像，考虑使用 S2I，因为 S2I 是一个内置的功能。'
- en: '[Jib](https://github.com/GoogleContainerTools/jib) is another tool by Google,
    specifically for building Java images. It includes [Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#quickstart) and [Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#quickstart) plugins,
    which can make it easy for you to build images without messing with Dockerfiles.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Jib](https://github.com/GoogleContainerTools/jib) 是 Google 另一个工具，专门用于构建 Java
    镜像。它包括 [Maven](https://github.com/GoogleContainerTools/jib/tree/master/jib-maven-plugin#quickstart)
    和 [Gradle](https://github.com/GoogleContainerTools/jib/tree/master/jib-gradle-plugin#quickstart)
    插件，可以让你轻松构建镜像，而无需处理 Dockerfile。'
- en: Last but not least is [Bazel](https://github.com/bazelbuild/bazel), which is
    anoooother tool by Google. This one is not just for building container images,
    but rather a complete build system. If you *just* want to build an image, then
    diving into Bazel might be a bit of an overkill, but definitely a good learning
    experience, so if you’re up for it, then [rules_docker](https://github.com/bazelbuild/rules_docker) section
    is a good starting point for you.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后但同样重要的是 [Bazel](https://github.com/bazelbuild/bazel)，这是 Google 另一个工具。它不仅仅用于构建容器镜像，而是一个完整的构建系统。如果你*仅仅*想构建一个镜像，那么深入研究
    Bazel 可能有些过于复杂，但绝对是一个很好的学习经验，所以如果你愿意的话，[rules_docker](https://github.com/bazelbuild/rules_docker)
    部分是一个很好的起点。
- en: Container Runtime
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 容器运行时
- en: 'Last big piece of a puzzle is *container runtime* which is responsible for,
    well, running containers. Container runtime is one part of the whole container
    lifecycle/stack, which you will most likely not going to mess with, unless you
    have some very specific requirement for speed, security, etc. So, if you’re tired
    of me already, then you might want skip this one section. If on the other hand,
    you just want to know what are the options, then here goes:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一块大拼图是*容器运行时*，负责运行容器。容器运行时是整个容器生命周期/堆栈的一部分，你很可能不会去碰它，除非你有一些非常特定的速度、安全性等要求。所以，如果你已经厌倦了我，那么你可能想跳过这一部分。如果你只是想了解有哪些选项，那么接下来是：
- en: '[runc](https://github.com/opencontainers/runc) is the most popular container
    runtime created based on OCI container runtime specification. It’s used by Docker
    (through *containerd*), Podman and CRI-O, so pretty much everything expect for
    LXD (which uses LXC). There’s not much else I can add. It’s default for (almost)
    everything, so even if you ditch Docker after reading this article, you will most
    likely still use runc.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[runc](https://github.com/opencontainers/runc)是最流行的容器运行时，基于OCI容器运行时规范创建。它被Docker（通过*containerd*）、Podman和CRI-O使用，所以几乎涵盖了除LXD（使用LXC）以外的一切。我没什么其他可以补充的。它是（几乎）所有事物的默认运行时，所以即使你在读完这篇文章后放弃Docker，你很可能仍然会使用runc。'
- en: One alternative to runc is similarly (and confusingly) named [crun](https://github.com/containers/crun).
    This is tool developed by Red Hat and fully written in C (runc is written in Go).
    This makes it much faster and more memory efficient than runc. Considering that
    it’s also OCI compliant runtime, you should be able switch to it easily enough,
    if you want to check for yourself. Even though it’s not very popular right now,
    it will be in tech preview as an alternative OCI runtime as of the RHEL 8.3 release
    and considering that it’s Red Hat product we might eventually see as default for
    Podman or CRI-O.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与`runc`类似且容易混淆的一个替代品是[crun](https://github.com/containers/crun)。这是由Red Hat开发的工具，完全用C语言编写（而runc是用Go语言编写的）。这使得它比runc更快且更节省内存。考虑到它也是OCI兼容的运行时，如果你想亲自检查一下，应该能轻松切换。尽管目前它还不太流行，但从RHEL
    8.3版本起，它将作为OCI运行时的替代品进行技术预览，鉴于它是Red Hat的产品，我们最终可能会看到它成为Podman或CRI-O的默认运行时。
- en: Speaking of CRI-O. Earlier I said that CRI-O isn’t really a container engine,
    but rather container runtime. That’s because CRI-O doesn’t include features like
    pushing images, which is what you would expect from container engine. CRI-O as
    a runtime uses runc internally to run containers. This runtime is not the one
    you should try using on your machine, as it’s built to be used as runtime on Kubernetes
    nodes and you can see it described as *“all the runtime Kubernetes needs and nothing
    more”*. So, unless you are setting up Kubernetes cluster (or OpenShift cluster
    — CRI-O is default there already), then you probably should not touch this one.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 说到CRI-O，之前我提到CRI-O实际上不是一个容器引擎，而是一个容器运行时。这是因为CRI-O不包括推送镜像等功能，而这是你从容器引擎中期望的。CRI-O作为运行时内部使用runc来运行容器。这个运行时并不适合在你的机器上使用，因为它是为Kubernetes节点设计的运行时，你可以看到它被描述为*“Kubernetes所需的所有运行时功能而无其他”*。所以，除非你在设置Kubernetes集群（或OpenShift集群——CRI-O在这里已经是默认的），否则你可能不应该使用它。
- en: Last one for this section is [containerd](https://containerd.io/), which is
    a CNCF graduating project. It’s a daemon that acts as an API facade for various
    container runtimes and OS. In the background it relies on runc and it’s the default
    runtime for Docker engine. It’s also used by Google Kubernetes Engine (GKE) and
    IBM Kubernetes Service (IKS). It’s an implementation of Kubernetes Container Runtime
    Interface (same as CRI-O), therefore it’s a good candidate for runtime of your
    Kubernetes cluster.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这一部分的最后一个工具是[containerd](https://containerd.io/)，它是CNCF的一个毕业项目。它是一个作为各种容器运行时和操作系统的API外观的守护进程。在后台，它依赖于runc，并且是Docker引擎的默认运行时。它也被Google
    Kubernetes Engine（GKE）和IBM Kubernetes Service（IKS）使用。它是Kubernetes容器运行时接口（与CRI-O相同）的实现，因此它是你的Kubernetes集群的一个很好的运行时候选。
- en: Image Inspection and Distribution
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 镜像检查和分发
- en: Last part of container stack is image inspection and distribution. This effectively
    replaces `docker inspect` and also (optionally) adds ability to copy/mirror images
    between remote registries.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 容器栈的最后一部分是镜像检查和分发。这有效地替代了`docker inspect`，并且（可选地）增加了在远程注册表之间复制/镜像镜像的能力。
- en: The only tool which I will mention here that can do these tasks is [Skopeo](https://github.com/containers/skopeo).
    It’s made by Red Hat and it’s an accompanying tool for Buildah, Podman and CRI-O.
    Apart from the basic `skopeo inspect` which we all know from Docker, Skopeo is
    also able to copy images using `skopeo copy` which allows you to mirror images
    between remote registries without first pulling them to local registry. This feature
    can also act as pull/push if you use local registry.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在这里提到的唯一可以完成这些任务的工具是[Skopeo](https://github.com/containers/skopeo)。它由Red Hat制作，是Buildah、Podman和CRI-O的配套工具。除了我们都熟悉的基本`skopeo
    inspect`，Skopeo还能够使用`skopeo copy`来复制镜像，这使得你可以在远程注册表之间镜像镜像，而不需要首先将它们拉取到本地注册表。如果你使用本地注册表，这个功能也可以作为拉取/推送使用。
- en: As a little bonus, I want to also mention [Dive](https://github.com/wagoodman/dive),
    which is a tool for inspecting, exploring and analyzing images. It’s little more
    user friendly, provides more readable output and can dig (or *dive*, I guess)
    a bit deeper into your image and analyze and measure its efficiency. It’s also
    suitable for use in CI pipelines, where it can measure whether your image is *“efficient
    enough”* or in other words — whether it wastes too much space or not.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个小小的奖励，我还想提到 [。Dive](https://github.com/wagoodman/dive)，这是一个用于检查、探索和分析镜像的工具。它更具用户友好性，提供了更易读的输出，并可以深入挖掘（或*潜入*，我想）你的镜像，分析并测量其效率。它也适用于CI管道中，可以测量你的镜像是否*“足够高效”*，换句话说——是否浪费了过多空间。
- en: Conclusion
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: This article wasn’t meant to persuade you to completely ditch Docker, rather
    its goal was to show you the whole landscape and all the options for building,
    running, managing and distributing containers and their images. Each of these
    tools including Docker, has its pros and cons and it’s important to evaluate what
    set of tools suits your workflow and use case the best and I hope this article
    will help you with that.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章并非旨在说服你完全放弃Docker，而是展示了构建、运行、管理和分发容器及其镜像的整个领域和所有选项。包括Docker在内的每种工具都有其优缺点，重要的是评估哪一组工具最适合你的工作流程和用例，希望这篇文章能帮助你做到这一点。
- en: Resources
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 资源
- en: '[Let’s Try Every CRI Runtime Available for Kubernetes. No, Really!](https://www.youtube.com/watch?v=FKoVztEQHss&ab_channel=CNCF%5BCloudNativeComputingFoundation%5D)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[让我们尝试所有可用的CRI运行时用于Kubernetes。真的！](https://www.youtube.com/watch?v=FKoVztEQHss&ab_channel=CNCF%5BCloudNativeComputingFoundation%5D)'
- en: '[How Container Runtimes matter in Kubernetes?](https://events19.linuxfoundation.org/wp-content/uploads/2017/11/How-Container-Runtime-Matters-in-Kubernetes_-OSS-Kunal-Kushwaha.pdf)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[容器运行时在Kubernetes中的重要性](https://events19.linuxfoundation.org/wp-content/uploads/2017/11/How-Container-Runtime-Matters-in-Kubernetes_-OSS-Kunal-Kushwaha.pdf)'
- en: '[A Practical Introduction to Container Terminology](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[容器术语实用介绍](https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction)'
- en: '[Comparing Next-Generation Container Image Building Tools](https://events19.linuxfoundation.org/wp-content/uploads/2017/11/Comparing-Next-Generation-Container-Image-Building-Tools-OSS-Akihiro-Suda.pdf)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[比较下一代容器镜像构建工具](https://events19.linuxfoundation.org/wp-content/uploads/2017/11/Comparing-Next-Generation-Container-Image-Building-Tools-OSS-Akihiro-Suda.pdf)'
- en: '[A Comprehensive Container Runtime Comparison](https://www.capitalone.com/tech/cloud/container-runtime/)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[全面的容器运行时比较](https://www.capitalone.com/tech/cloud/container-runtime/)'
- en: '[Building containers without Docker](https://blog.alexellis.io/building-containers-without-docker/)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[没有Docker构建容器](https://blog.alexellis.io/building-containers-without-docker/)'
- en: '**Bio: [Martin Heinz](https://www.linkedin.com/in/heinz-martin/)** is a DevOps
    Engineer at IBM. A software developer, Martin is passionate about computer security,
    privacy and cryptography, focused on cloud and serverless computing, and is always
    ready to take on a new challenge.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介： [马丁·海因茨](https://www.linkedin.com/in/heinz-martin/)** 是IBM的一名DevOps工程师。作为一名软件开发者，马丁对计算机安全、隐私和密码学充满热情，专注于云计算和无服务器计算，并时刻准备接受新的挑战。'
- en: '[Original](https://martinheinz.dev/blog/35?utm_source=tds&utm_medium=referral&utm_campaign=blog_post_35).
    Reposted with permission.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://martinheinz.dev/blog/35?utm_source=tds&utm_medium=referral&utm_campaign=blog_post_35)。经许可转载。'
- en: '**Related:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Strategies of Docker Images Optimization](/2020/10/strategies-docker-images-optimization.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Docker镜像优化策略](/2020/10/strategies-docker-images-optimization.html)'
- en: '[Automating Every Aspect of Your Python Project](/2020/09/automating-every-aspect-python-project.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自动化你Python项目的各个方面](/2020/09/automating-every-aspect-python-project.html)'
- en: '[Making Python Programs Blazingly Fast](/2020/09/making-python-programs-blazingly-fast.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[让Python程序运行得更快](/2020/09/making-python-programs-blazingly-fast.html)'
- en: More On This Topic
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多主题
- en: '[How to Get Into Data Analytics If You Don''t Have the Right Degree](https://www.kdnuggets.com/2021/12/how-to-get-into-data-analytics.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如果没有相关学位如何进入数据分析领域](https://www.kdnuggets.com/2021/12/how-to-get-into-data-analytics.html)'
- en: '[How To Use Docker Tags to Manage Image Versions Effectively](https://www.kdnuggets.com/how-to-use-docker-tags-to-manage-image-versions-effectively)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何有效管理镜像版本的Docker标签](https://www.kdnuggets.com/how-to-use-docker-tags-to-manage-image-versions-effectively)'
- en: '[How To Use Docker Volumes for Persistent Data Storage](https://www.kdnuggets.com/how-to-use-docker-volumes-for-persistent-data-storage)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用Docker卷进行持久数据存储](https://www.kdnuggets.com/how-to-use-docker-volumes-for-persistent-data-storage)'
- en: '[We Don''t Need Data Scientists, We Need Data Engineers](https://www.kdnuggets.com/2021/02/dont-need-data-scientists-need-data-engineers.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我们不需要数据科学家，我们需要数据工程师](https://www.kdnuggets.com/2021/02/dont-need-data-scientists-need-data-engineers.html)'
- en: '[Deep Neural Networks Don''t Lead Us Towards AGI](https://www.kdnuggets.com/2021/12/deep-neural-networks-not-toward-agi.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深度神经网络不会引领我们走向通用人工智能](https://www.kdnuggets.com/2021/12/deep-neural-networks-not-toward-agi.html)'
- en: '[Don''t Become a Commoditized Data Scientist](https://www.kdnuggets.com/2022/10/commoditized-data-scientist.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[不要成为一个商品化的数据科学家](https://www.kdnuggets.com/2022/10/commoditized-data-scientist.html)'
