["```py\npip install --user torchlayers\n```", "```py\nimport torch\nimport torchlayers as tl\n\n# torch.nn and torchlayers can be mixed easily\nmodel = torch.nn.Sequential(\n    tl.Conv(64),                   # specify ONLY out_channels\n    torch.nn.ReLU(),               # use torch.nn wherever you wish\n    tl.BatchNorm(),                # BatchNormNd inferred from input\n    tl.Conv(128),                  # Default kernel_size equal to 3\n    tl.ReLU(),\n    tl.Conv(256, kernel_size=11),  # \"same\" padding as default\n    tl.GlobalMaxPool(),            # Known from Keras\n    tl.Linear(10),                 # Output for 10 classes\n)\n```", "```py\n# Image...\nmnist_model = tl.build(model, torch.randn(1, 3, 28, 28))\n\n# ...or text\n# [batch, embedding, timesteps], first dimension > 1 for BatchNorm1d to work\ntext_model = tl.build(model, torch.randn(2, 300, 1))\n\n```", "```py\nclass _MyModuleImpl(torch.nn.Linear):\n    def post_build(self):\n        # You can do anything here really\n        torch.nn.init.eye_(self.weights)\n```"]