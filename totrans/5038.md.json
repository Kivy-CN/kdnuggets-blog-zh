["```py\nfrom skimage import data, io, filters\n\nimage = data.coins() # or any NumPy array!\nedges = filters.sobel(image)\nio.imshow(edges)\nio.show()\n\n```", "```py\nlet nlp = require('nlp_compromise'); // or nlp = window.nlp_compromise\n\nnlp.noun('dinosaur').pluralize();\n// 'dinosaurs'\n\nnlp.verb('speak').conjugate();\n// { past: 'spoke',\n//   infinitive: 'speak',\n//   gerund: 'speaking',\n//   actor: 'speaker',\n//   present: 'speaks',\n//   future: 'will speak',\n//   perfect: 'have spoken',\n//   pluperfect: 'had spoken',\n//   future_perfect: 'will have spoken'\n// }\n\nnlp.statement('She sells seashells').negate().text()\n// \"She doesn't sell seashells\"\n\nnlp.sentence('I fed the dog').replace('the [Noun]', 'the cat').text()\n// 'I fed the cat'\n\nnlp.text('Tony Hawk did a kickflip').people();\n// [ Person { text: 'Tony Hawk' ..} ]\n\nnlp.noun('vacuum').article();\n// 'a'\n\nnlp.person('Tony Hawk').pronoun();\n// 'he'\n\n```", "```py\nimport datatest\n\ndef setUpModule():\n    global subjectData\n    subjectData = datatest.CsvSource('users.csv')\n\nclass TestUserData(datatest.DataTestCase):\n    def test_columns(self):\n        self.assertDataColumns(required={'user_id', 'active'})\n\n    def test_user_id(self):\n        def must_be_digit(x):  # <- Helper function.\n            return str(x).isdigit()\n        self.assertDataSet('user_id', required=must_be_digit)\n\n    def test_active(self):\n        self.assertDataSet('active', required={'Y', 'N'})\n\nif __name__ == '__main__':\n    datatest.main()\n\n```"]