- en: Every Complex DataFrame Manipulation, Explained & Visualized Intuitively
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 每一种复杂 DataFrame 操作，直观地解释与可视化
- en: 原文：[https://www.kdnuggets.com/2020/11/dataframe-manipulation-explained-visualized.html](https://www.kdnuggets.com/2020/11/dataframe-manipulation-explained-visualized.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/11/dataframe-manipulation-explained-visualized.html](https://www.kdnuggets.com/2020/11/dataframe-manipulation-explained-visualized.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Andre Ye](https://www.linkedin.com/in/andre-ye-501746150/), Cofounder
    at Critiq, Editor & Top Writer at Medium**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Andre Ye](https://www.linkedin.com/in/andre-ye-501746150/)，Critiq 的联合创始人，Medium
    的编辑和顶级作者**。'
- en: '![](../Images/192e134ecba0ea1bad5e37024965a72f.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/192e134ecba0ea1bad5e37024965a72f.png)'
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Pandas offers a wide range of DataFrame manipulations, but many of them are
    complex and may not seem approachable. This article presents 8 essential DataFrame
    manipulation methods that cover almost all of the manipulation functions a data
    scientist would need to know. Each method will include an explanation, visualization,
    code, and tricks to remember it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas 提供了广泛的 DataFrame 操作，但其中许多操作复杂且不易上手。本文介绍了 8 种基本的 DataFrame 操作方法，涵盖了数据科学家需要了解的几乎所有操作函数。每种方法将包括解释、可视化、代码以及记忆技巧。
- en: Pivot
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Pivot
- en: Pivoting a table creates a new ‘pivoted table’ that projects existing columns
    in the data as elements of a new table, being the index, column, and the values.
    The columns in the initial DataFrame that will become the index and the columns
    are displayed as unique values, and combinations of these two columns will be
    displayed as the value. This means that pivots cannot handle duplicate values.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转一个表格会创建一个新的“旋转表”，将现有的数据列投影为新表中的元素，包括索引、列和值。初始 DataFrame 中将成为索引和列的列显示为唯一值，这两个列的组合将显示为值。这意味着旋转不能处理重复值。
- en: '![](../Images/367020d75f24e109d31f8a72808fdd0e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/367020d75f24e109d31f8a72808fdd0e.png)'
- en: 'The code to pivot a DataFrame named *df *is as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 代码以旋转名为 *df* 的 DataFrame 如下：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*To memorize*: A pivot is — outside the realm of data manipulation — a turn
    around some sort of object. In sports, one can ‘pivot’ around their foot to spin:
    pivots in pandas are similar. The state of the original DataFrame is pivoted around
    central elements of a DataFrame into a new one. Some elements very literally pivot
    in that they are rotated or transformed (like column ‘*bar*’).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*记忆技巧*：在数据操作的领域之外，旋转是围绕某种对象进行的转动。在体育中，人们可以通过脚来“旋转”：pandas 中的旋转也是类似的。原始 DataFrame
    的状态围绕 DataFrame 的中心元素旋转成一个新的 DataFrame。有些元素非常字面意义上旋转或转换（如列 *bar*）。'
- en: Melt
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Melt
- en: Melting can be thought of as an ‘unpivot,’ in that it converts matrix-based
    data (has two dimensions) into list-based data (columns represent values and rows
    indicate unique data points), whereas pivots do the opposite. Consider a two-dimensional
    matrix with one dimension ‘*B*’ and ‘*C*’ (column names), with the other dimension
    ‘*a’*, ‘*b*’, and ‘*c*’ (row indices).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Melt 可以被视为一种“反旋转”，因为它将基于矩阵的数据（具有两个维度）转换为基于列表的数据（列表示值，行表示唯一数据点），而旋转则相反。考虑一个二维矩阵，其中一个维度为
    *B* 和 *C*（列名），另一个维度为 *a*、*b* 和 *c*（行索引）。
- en: 'We select an ID, one of the dimensions, and a column/columns to contain values.
    The column(s) that contain values are transformed into two columns: one for the
    variable (the name of the value column) and another for the value (the number
    contained in it).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择一个 ID、一个维度以及一个或多个列来包含值。包含值的列被转换为两列：一列用于变量（值列的名称），另一列用于值（包含的数字）。
- en: '![](../Images/3bc36709af67c589c9d6ed6bef85e4d2.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3bc36709af67c589c9d6ed6bef85e4d2.png)'
- en: The result is every combination of the ID column’s values (*a, b, c*) and the
    value columns (*B, C*), with its corresponding value, organized in list format.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是 ID 列值（*a, b, c*）和值列（*B, C*）的每种组合，以及其对应的值，以列表格式组织。
- en: 'The melt operation can be performed like such on DataFrame *df*:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: melt 操作可以这样在 DataFrame *df* 上执行：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*To memorize*: Melting something like a candle is to turn a solidified and
    composite object into several much smaller, individual elements (wax droplets).
    Melting a two-dimensional DataFrame unpacks its solidified structure and records
    its pieces as individual entries in a list.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*: 将某物像蜡烛一样融化，是将一个固化的复合物转变为几个更小的独立元素（蜡滴）。融化一个二维 DataFrame 会解开其固化的结构，并将其各部分记录为列表中的独立条目。'
- en: Explode
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 爆炸
- en: Exploding is a helpful method to get rid of lists in the data. When a column
    is exploded, all lists inside of it are listed as new rows under the same index
    (to prevent this, simply call *.reset_index()* afterward). Non-list items like
    strings or numbers are not affected, and empty lists are NaN values (you can cleanse
    these using *.dropna()*).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 爆炸是一个有用的方法，可以清除数据中的列表。当某列被爆炸时，列中的所有列表都作为新行列出在相同的索引下（为避免此情况，只需在之后调用 *.reset_index()*）。非列表项如字符串或数字不会受到影响，空列表是
    NaN 值（可以使用 *.dropna()* 清理这些）。
- en: '![](../Images/8ccb6230eae6b6cab6ea6310ac933642.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8ccb6230eae6b6cab6ea6310ac933642.png)'
- en: 'Exploding a column ‘*A*’ in DataFrame *df* is very simple:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 爆炸 DataFrame *df* 中的列 ‘*A*’ 非常简单：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*To remember*: Exploding something releases all its internal contents — exploding
    a list separates its elements.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*: 爆炸某物会释放其所有内部内容——爆炸一个列表会将其元素分开。'
- en: Stack
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 堆叠
- en: Stacking takes a DataFrame of any size and ‘stacks’ the columns as subindices
    of existing indices. Hence, the resulting DataFrame has only one column and two
    levels of indices.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠将任何大小的 DataFrame 进行‘堆叠’，将列作为现有索引的子索引。因此，结果 DataFrame 只有一列和两个层级的索引。
- en: '![](../Images/496b8b6fade8aebd1a78f684b34a1a3a.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/496b8b6fade8aebd1a78f684b34a1a3a.png)'
- en: Stacking a table named *df* is as simple as *df.stack()*.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对名为 *df* 的表格进行堆叠非常简单，使用 *df.stack()*。
- en: In order to access the value of, say, the dog’s height, simply call an index-based
    retrieval twice, like *df.loc[‘dog’].loc[‘height’]*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问，比如说，狗的身高，只需调用基于索引的检索两次，如 *df.loc[‘dog’].loc[‘height’]*。
- en: '*To remember*: Visually, *stack* takes the two-dimensionality of a table and
    stacks the columns into multi-level indices.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*: 从视觉上看，*stack* 将表格的二维性转换为将列堆叠成多层索引。'
- en: Unstack
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Unstack
- en: Unstacking takes a multi-index DataFrame and unstacks it, converting the indices
    in a specified level into columns of a new DataFrame with its corresponding values.
    Calling a stack followed by an unstack on a table will not change it (excusing
    the existence of a ‘*0*’).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Unstacking 将一个多层索引的 DataFrame 进行“展开”，将指定层级的索引转换为新 DataFrame 的列，并附上其对应的值。对一个表格执行一次
    stack 再执行一次 unstack 不会改变它（不考虑存在的‘*0*’）。
- en: '![](../Images/9ee5f14a02aebb804806f543ad924317.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ee5f14a02aebb804806f543ad924317.png)'
- en: A parameter in unstacking is its level. In list indexing, an index of -1 will
    return the last element; this is the same with levels. A level of -1 indicates
    that the last index level (the one rightmost) will be unstacked. As a further
    example, when the level is set to 0 (the first index level), values in it become
    columns and the following index level (the second) becomes the transformed DataFrame’s
    index.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Unstacking 的一个参数是层级。在列表索引中，-1 索引会返回最后一个元素；层级也是如此。层级为 -1 表示将最后一个索引层级（最右边的那个）展开。举个进一步的例子，当层级设置为
    0（第一个索引层级）时，它中的值会变成列，而接下来的索引层级（第二个）则会变成变换后 DataFrame 的索引。
- en: '![](../Images/fe321ae0b445c7229f94b09c3d0c05ed.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fe321ae0b445c7229f94b09c3d0c05ed.png)'
- en: Unstacking can be performed the same as stacking, but with the level parameter: *df.unstack(level=-1)*.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Unstacking 的操作方式与 stacking 相同，但需要层级参数：*df.unstack(level=-1)*。
- en: '*To remember*: Unstack means “to undo a stack.”'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*: Unstack 意思是“撤销堆叠”。'
- en: Merge
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 合并
- en: To merge two DataFrames is to combine them column-wise (horizontally) among
    a shared ‘key’. This key allows for the tables to be combined, even if they are
    not ordered similarly. The finished merged DataFrame will add suffixes *_x* and *_y* to
    value columns by default.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 合并两个 DataFrame 是在共享的‘键’上将它们按列（水平）组合起来。这个键允许将表格合并，即使它们的顺序不同。完成合并的 DataFrame 将默认在值列上添加后缀
    *x* 和 *y*。
- en: '![](../Images/4b7c9f494929a29c1e248ba37f54c193.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b7c9f494929a29c1e248ba37f54c193.png)'
- en: 'In order to merge two DataFrames *df1 *and *df2 *(where *df1 *contains the *leftkey *and *df2 *contains
    the *rightkey*), call:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要合并两个DataFrames *df1* 和 *df2*（其中 *df1* 包含 *leftkey*，*df2* 包含 *rightkey*），调用：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Merges are not functions of pandas but are attached to a DataFrame. It is always
    assumed that the DataFrame in which the merge is being attached to is the ‘left
    table’, and the DataFrame called as a parameter in the function is the ‘right
    table’, with corresponding keys.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 合并不是pandas的函数，而是附加到DataFrame上的。总是假定合并附加到的DataFrame是‘左表’，而在函数中作为参数调用的DataFrame是‘右表’，并具有对应的键。
- en: 'The merge function performs by default what is called an inner join: if each
    of the DataFrames has a key not listed in the other’s, it is not included in the
    merged DataFrame. On the other hand, if a key is listed twice in the same DataFrame,
    every combination of values for the same keys is listed in the merged table. For
    example, if *df1* has 3 values for key *foo *and *df2 *had 2 values for the same
    key, there would be 6 entries with *leftkey=foo* and *rightkey=foo* in the final
    DataFrame.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 合并函数默认执行的是所谓的内连接（inner join）：如果每个DataFrame中有一个在另一个DataFrame中未列出的键，则该键不会包含在合并后的DataFrame中。另一方面，如果一个键在同一个DataFrame中列出两次，那么所有相同键的值组合都会在合并后的表中列出。例如，如果
    *df1* 中的键 *foo* 有 3 个值，而 *df2* 中有 2 个相同键的值，则最终DataFrame中会有 6 个条目，其中 *leftkey=foo*
    和 *rightkey=foo*。
- en: '![](../Images/962c8295ba621a22e5715c85fc8da0d5.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/962c8295ba621a22e5715c85fc8da0d5.png)'
- en: '*To remember*: You merge DataFrames like you merge lanes when driving — horizontally.
    Imagine each of the columns as one lane on the highway; in order to merge, they
    must combine horizontally.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*：合并DataFrames 就像在驾驶时合并车道 —— 水平地进行。想象每一列都是高速公路上的一个车道；为了合并，它们必须水平结合。'
- en: Join
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接（Join）
- en: 'Joins are generally preferred over merge because it has a cleaner syntax and
    a wider range of possibilities in joining two DataFrames horizontally. The syntax
    of a join is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 连接（Joins）通常比合并（merge）更受青睐，因为它具有更简洁的语法和更广泛的水平合并DataFrames的可能性。连接的语法如下：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When using joins, the common key column (analogous to *right_on* and *left_on* in
    merge) must be named the same name. The how parameter is a string referring to
    one of four methods *join *can combine two DataFrames:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用连接时，公共键列（类似于合并中的 *right_on* 和 *left_on*）必须命名相同。 *how* 参数是一个字符串，指代 *join* 可以将两个DataFrame组合在一起的四种方法之一：
- en: '‘*left*’: Include all elements of *df1*, accompanied with elements of *df2*
    only if their key is a key of *df1*. Otherwise, the missing portion of the merged
    DataFrame for *df2* will be marked as NaN.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘*left*’：包括所有 *df1* 的元素，仅当 *df2* 的键是 *df1* 的键时才附加 *df2* 的元素。否则，合并后的DataFrame中
    *df2* 的缺失部分将标记为 NaN。
- en: ‘*right*’: ‘*left*’, but on the other DataFrame. Include all elements of *df2*,
    accompanied with elements of *df1* only if their key is a key of *df2*.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘*right*’：‘*left*’，但在另一个 DataFrame 上。包括所有 *df2* 的元素，仅当 *df1* 的键是 *df2* 的键时。
- en: '‘*outer*’: Include all elements from both DataFrames, even if a key is not
    present in the other’s — missing elements are marked as NaN.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘*outer*’：包括两个DataFrame中的所有元素，即使一个键在另一个DataFrame中不存在 —— 缺失的元素标记为 NaN。
- en: '‘*inner*’: Include only elements whose keys are present in both DataFrame keys
    (intersection). Default for merge.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘*inner*’：仅包括键在两个DataFrame键中都存在的元素（交集）。合并的默认设置。
- en: '*To remember*: If you’ve worked with SQL, the word ‘join’ should immediately
    be associated with column-wise addition. If not, ‘join’ and ‘merge’ have very
    similar meanings definition-wise.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*：如果你曾使用SQL，那么‘join’一词应该立即与你的列级添加关联。如果没有，那么‘join’和‘merge’在定义上非常相似。'
- en: Concat
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接（Concat）
- en: 'Whereas merges and joins work horizontally, concatenations, or concats for
    short, attach DataFrames row-wise (vertically). Consider, for example, two DataFrames *df1* and *df2 *with
    the same column names, concatenated using *pandas.concat([df1, df2])*:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 合并（merges）和连接（joins）是水平操作，而连接（concatenations）或简称为concats，则是按行（垂直）附加DataFrames。例如，考虑两个具有相同列名的DataFrames
    *df1* 和 *df2*，使用 *pandas.concat([df1, df2])* 进行连接：
- en: '![](../Images/1cda4fbd10fe600a5fa28427292c4649.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1cda4fbd10fe600a5fa28427292c4649.png)'
- en: Although you can use concat for column-wise joining by turning the axis parameter
    to *1*, it would be easier just to use join.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以通过将轴参数设置为 *1* 使用 concat 进行列级连接，但直接使用 join 会更方便。
- en: Note that concat is a pandas function and not one of a DataFrame. Hence, it
    takes in a list of DataFrames to be concatenated.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，concat 是 pandas 的函数，而不是 DataFrame 的函数。因此，它接收一个需要连接的 DataFrame 列表。
- en: If a DataFrame has a column not included in the other, by default, it will be
    included, with missing values listed as NaN. To prevent this, add an additional
    parameter, *join=’inner’*, which will only concatenate columns both DataFrames
    have in common.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果DataFrame有一个不包含在另一个DataFrame中的列，默认情况下，该列会被包括在内，缺失值列为NaN。为了避免这种情况，添加一个额外的参数，*join=’inner’*，这将只连接两个DataFrame共有的列。
- en: '![](../Images/66b0963eca891dec54a8f3e9bebe01bf.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/66b0963eca891dec54a8f3e9bebe01bf.png)'
- en: '*To remember*: In lists and strings, additional items can be concatenated.
    Concatenation is the appendage of additional elements to an existing body, not
    the adding of new information (as is column-wise joining). Since each index/row
    is an individual item, concatenation adds additional items to a DataFrame, which
    can be thought of as a list of rows.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '*记住*: 在列表和字符串中，可以追加额外的项目。连接是将额外的元素附加到现有内容中，而不是添加新信息（如按列连接）。由于每个索引/行是一个单独的项，连接会将额外的项添加到DataFrame中，可以将其视为行的列表。'
- en: Append is another method to combine two DataFrames, but it performs the same
    functionality as concat and is less efficient and versatile.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Append是另一种合并两个DataFrame的方法，但它执行与concat相同的功能，效率和灵活性较低。
- en: Sometimes built-in functions aren’t enough.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 有时内置函数不够用。
- en: Although these functions cover a wide range of what you may need to manipulate
    your data for, sometimes the data manipulation required is too complex for one
    or even a series of functions to perform. Explore complex data manipulation methods
    like parser functions, iterative projection, efficient parsing, and more [here](https://medium.com/analytics-vidhya/tips-tricks-techniques-to-take-your-data-wrangling-skills-to-the-next-level-c912c23b20cb).
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些函数覆盖了你可能需要的数据操作范围，但有时所需的数据操作过于复杂，一个或一系列函数无法完成。探索复杂的数据操作方法，如解析函数、迭代投影、高效解析等，更多内容请见[这里](https://medium.com/analytics-vidhya/tips-tricks-techniques-to-take-your-data-wrangling-skills-to-the-next-level-c912c23b20cb)。
- en: '[Original](https://medium.com/analytics-vidhya/every-dataframe-manipulation-explained-visualized-intuitively-dbeea7a5529e).
    Reposted with permission.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始文档](https://medium.com/analytics-vidhya/every-dataframe-manipulation-explained-visualized-intuitively-dbeea7a5529e)。经许可转载。'
- en: '**Related:**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Exploratory Data Analysis on Steroids](https://www.kdnuggets.com/2020/07/exploratory-data-analysis-steroids.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[强化版探索性数据分析](https://www.kdnuggets.com/2020/07/exploratory-data-analysis-steroids.html)'
- en: '[How to Prepare Your Data](https://www.kdnuggets.com/2020/06/how-prepare-your-data.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何准备你的数据](https://www.kdnuggets.com/2020/06/how-prepare-your-data.html)'
- en: '[Introduction to Pandas for Data Science](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的Pandas简介](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)'
- en: More On This Topic
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该知道的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并以目标去…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个90亿美元的AI失败，进行检讨](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
