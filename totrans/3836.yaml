- en: Understanding Iterables vs Iterators in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/01/understanding-iterables-iterators-python.html](https://www.kdnuggets.com/2022/01/understanding-iterables-iterators-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Understanding Iterables vs Iterators in Python](../Images/f687a94152e04fa892eb31852b49e233.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [geralt on Pixabay](https://pixabay.com/users/geralt-9301/)
  prefs: []
  type: TYPE_NORMAL
- en: Iterables and Iterators are often confused for one another, however, they are
    two distinct concepts. This article will explain the difference between the two,
    and how they are used. Let’s first briefly look at what Iteration is.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In layman’s terms, Iteration means ‘repeating steps’. In programming terms,
    Iterations is the repetition of a statement/block of code a specific number of
    times, producing an output one after another. Iterations can be executed by using
    for loops for example.
  prefs: []
  type: TYPE_NORMAL
- en: Iterables in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iterables are objects which can be looped/iterated over by using a for loop.
    Iterables contain data or have value, where executing a for loop will perform
    an iteration, producing outputs one after another.
  prefs: []
  type: TYPE_NORMAL
- en: An iterable implements the `__iter__()` method and returns an iterator object.
    However, if the `__iter__()` method is not defined, Python will use `__getitem__()`
    instead.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of Iterables are lists, dictionaries, strings, tuples, and more. As
    long as you can loop over it, it is an Iterable.
  prefs: []
  type: TYPE_NORMAL
- en: To figure out whether an object is iterable or not, you will have to check if
    it supports `__iter__`. In order to do this, we use the `dir()` function, which
    returns all properties and methods of the specified object, excluding values.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Iterators in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Iterator is also an object which uses the `__iter__()` and `__next__()` methods,
    this is called the Iterator protocol. It is an iterable object with a state, meaning
    it remembers what stage it is at during iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Iterators return values, one element at a time. As the next value of an Iterable
    object is being returned, the state of the iterator is updated and knows how to
    get to the next value using the `__next__()` method. Iterators can only move forward,
    they cannot go back or reset themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Iterators also raise a StopIteration exception when there are no more elements
    or the object is exhausted.
  prefs: []
  type: TYPE_NORMAL
- en: '**Example Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: Here I have created an iterator called ‘numbers’. I have put in a line of code
    to check its type. We are expecting the iteration to output all the numbers. However,
    I have asked it to print the 6th output, although there are only 5 values in the
    iterator. Let’s see what happens
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the type is a ‘list_iterator’. The output stopped at 10 and
    raised a `StopIteration` as there were no more elements in the numbers list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Limitations of Iterators:**'
  prefs: []
  type: TYPE_NORMAL
- en: Iterators only move in a forward direction, they do not go backwards or reset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterators cannot be copied as it is a one-way object that can only move forward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to its one-way direction, there is no way to retrieve the previous element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarities and Differences Between Iterables and Iterators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '|  | **Iterable** | **Iterator** |'
  prefs: []
  type: TYPE_TB
- en: '| **Iterated by using:** | for loop  | for loop  |'
  prefs: []
  type: TYPE_TB
- en: '| **Methods used: ** | __iter__()     | __iter__() and __next__() |'
  prefs: []
  type: TYPE_TB
- en: An Iterator is an Iterable, as it also implements the `__iter__()` method.
  prefs: []
  type: TYPE_NORMAL
- en: '**Remember:** Every Iterator is an Iterable, however not every Iterable is
    an Iterator.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example of `dir()` of an Iterable:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: In this output, I have highlighted `__iter__`, showing that it is a method of
    an Iterable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Example of `dir()` of an Iterator:**'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we are iterating the numbers list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: In this output, I have highlighted `__iter__` and `__next__`, showing that it
    is a method of an Iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: I hope this short blog has given you a better understanding of the differences
    between an Iterable and an Iterator.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Nisha Arya](https://www.linkedin.com/in/nisha-arya-ahmed/)** is a Data Scientist
    and freelance Technical writer. She is particularly interested in providing Data
    Science career advice or tutorials and theory based knowledge around Data Science.
    She also wishes to explore the different ways Artificial Intelligence is/can benefit
    the longevity of human life. A keen learner, seeking to broaden her tech knowledge
    and writing skills, whilst helping guide others.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Exploring Infinite Iterators in Python''s itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Python''s Iteration and Membership: A Guide to…](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding and Implementing Genetic Algorithms in Python](https://www.kdnuggets.com/understanding-and-implementing-genetic-algorithms-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways Understanding Bayes Theorem Will Improve Your Data Science](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding by Implementing: Decision Tree](https://www.kdnuggets.com/2023/02/understanding-implementing-decision-tree.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Agent Environment in AI](https://www.kdnuggets.com/2022/05/understanding-agent-environment-ai.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
