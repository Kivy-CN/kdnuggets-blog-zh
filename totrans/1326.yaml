- en: Software Engineering Tips and Best Practices for Data Science
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学的软件工程技巧与最佳实践
- en: 原文：[https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html](https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html](https://www.kdnuggets.com/2020/10/software-engineering-best-practices-data-science.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Ahmed Besbes](https://ahmedbesbes.com), AI Engineer // Blogger // Runner**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Ahmed Besbes](https://ahmedbesbes.com)，AI 工程师 // 博主 // 跑者**。'
- en: '![](../Images/78dbf50aeffb2874715d1afcd7beab53.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/78dbf50aeffb2874715d1afcd7beab53.png)'
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'If you’re into data science, then you’re probably familiar with this workflow:
    you start a project by firing up a jupyter notebook, then begin writing your python
    code, running complex analyses, or even training a model. As the notebook file
    grows in size with all the functions, the classes, the plots, and the logs, you
    find yourself with an enormous blob of monolithic code sitting up in one place
    in front of you. If you’re lucky, things can go well. Good for you then!'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对数据科学感兴趣，那么你可能对这种工作流程很熟悉：你通过启动一个 Jupyter notebook 开始一个项目，然后开始编写 Python 代码，进行复杂分析，甚至训练模型。随着
    notebook 文件中函数、类、图表和日志的增多，你会发现自己面前有一大块单一的代码块。如果你运气好，事情可能会顺利。那就祝贺你了！
- en: However, jupyter notebooks hide some serious pitfalls that may turn your coding
    into a living hell. Let’s see how this happens and then discuss coding best practices
    to prevent it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Jupyter notebooks 隐藏了一些严重的问题，这些问题可能会让你的编码变成一场噩梦。让我们看看这些问题是如何出现的，然后讨论防止这些问题的编码最佳实践。
- en: The problems with Jupyter Notebook
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Jupyter Notebook 的问题
- en: '![](../Images/c6d5b3b1ae9a15554525c6807fa87a01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c6d5b3b1ae9a15554525c6807fa87a01.png)'
- en: '*source: [datascience.foundation](https://datascience.foundation/datatalk/setting-up-a-python-jupyter-notebook-online-working-with-python-on-the-cloud).*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源: [datascience.foundation](https://datascience.foundation/datatalk/setting-up-a-python-jupyter-notebook-online-working-with-python-on-the-cloud)。*'
- en: 'Quite often, things may not go the way you intend if you want to take your
    jupyter prototyping to the next level. Here are some situations I encountered
    while using this tool, and that should sound familiar to you:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 很多时候，如果你想将你的 Jupyter 原型开发提升到一个新的水平，事情可能不会如你所愿。这些是我在使用该工具时遇到的一些情况，你可能也会感到熟悉：
- en: 'With all the objects (functions or classes) defined and instantiated in one
    place,**maintainability becomes really hard**: even if you want to make a small
    change to a function, you have to locate it somewhere in the notebook, fix it
    and rerun the code all over again. You don’t want that, believe me. Wouldn’t it
    be simple to have your logic and processing functions separated in external scripts?'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于所有对象（函数或类）都在一个地方定义和实例化，**维护性变得非常困难**：即使你只想对某个函数做一个小改动，你也必须在 notebook 中找到它，修复它并重新运行整个代码。你不希望这样，相信我。把你的逻辑和处理函数分离到外部脚本中不是更简单吗？
- en: Because of its interactivity and instant feedback, jupyter notebooks push data
    scientists to declare variables in the global namespace instead of using functions.
    This is considered [bad practice](https://stackoverflow.com/questions/19158339/why-are-global-variables-evil/19158418#19158418) in
    python development because it **limits effective code reuse. **It also harms reproducibility
    because your notebook turns into a large state machine holding all your variables.
    In this configuration, you’ll have to remember which result is cached and which
    is not, and you’ll also have to expect other users to follow your cell execution
    order.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于其互动性和即时反馈，jupyter笔记本推动数据科学家在全局命名空间中声明变量，而不是使用函数。这在python开发中被认为是[不良实践](https://stackoverflow.com/questions/19158339/why-are-global-variables-evil/19158418#19158418)，因为它**限制了有效的代码重用。**它也有害于可重复性，因为你的笔记本变成了一个包含所有变量的大型状态机。在这种配置下，你必须记住哪个结果被缓存了，哪个没有，同时还要期望其他用户遵循你的单元格执行顺序。
- en: 'The way notebooks are formatted behind the scenes (JSON objects) makes **code
    versioning difficult. **This is why I rarely see data scientists using GIT to
    commit different versions of a notebook or merging branches for specific features.
    Consequently, team collaboration becomes inefficient and clunky: team members
    start exchanging code snippets and notebooks via e-mail or Slack, rolling back
    to a previous version of the code is a nightmare, and the file organization starts
    to be messy. Here’s what I commonly see in projects after two or three weeks of
    using a jupyter notebook without proper versioning:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 笔记本的格式在后台是JSON对象，这使得**代码版本控制变得困难。**这就是为什么我很少看到数据科学家使用GIT提交笔记本的不同版本或合并特定功能的分支。因此，团队合作变得低效且笨拙：团队成员开始通过电子邮件或Slack交换代码片段和笔记本，回滚到代码的前一个版本是一场噩梦，文件组织也开始变得混乱。这是我常见的情况，在使用jupyter笔记本没有适当版本控制的两三周后：
- en: '****analysis.**ipynb** **analysis_COPY(1).ipynb'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '****analysis.**ipynb** **analysis_COPY(1).ipynb'
- en: analysis_COPY(2).ipynb
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: analysis_COPY(2).ipynb
- en: analysis_FINAL.ipynb
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: analysis_FINAL.ipynb
- en: analysis_FINAL_2.ipynb**
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: analysis_FINAL_2.ipynb**
- en: Jupyter notebooks are good for exploration and quick prototyping. They’re certainly not
    designed for reusability or production-use.If you developed a data processing
    pipeline using a jupyter notebook, the best you can state is that your code is
    only working on your laptop or your VM in a linear synchronous fashion following
    the execution order of the cells. This doesn’t say anything about the way your
    code would behave in a more complex environment with, for instance, larger input
    datasets, other asynchronous parallel tasks, or less allocated resources.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jupyter笔记本适合探索和快速原型设计。它们显然不是为了可重用性或生产用途而设计的。如果你用jupyter笔记本开发了一个数据处理管道，你最多只能说你的代码仅在你的笔记本电脑或虚拟机上以线性同步的方式按单元格的执行顺序工作。这并没有说明你的代码在更复杂的环境下如何表现，比如更大的输入数据集、其他异步并行任务或较少的资源分配。
- en: '**Notebooks are, in fact, hard to test since their behavior is sometimes unpredictable.**'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**笔记本实际上很难测试，因为它们的行为有时是不可预测的。**'
- en: As someone who spends most of his time on VSCode taking advantage of powerful
    extensions for code [linting](https://marketplace.visualstudio.com/items?itemName=ms-python.python),
    style [formatting](https://prettier.io/), code structuring, autocompletion, and
    codebase search, I can’t help but feel a bit powerless when switching back to
    jupyter.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为一个大部分时间都在VSCode中利用强大扩展功能进行代码[linting](https://marketplace.visualstudio.com/items?itemName=ms-python.python)、样式[格式化](https://prettier.io/)、代码结构、自动补全和代码库搜索的人，我在切换回jupyter时不禁感到有些无力。
- en: '**Compared to VSCode, jupyter notebook lacks extensions that enforce coding
    best practices.**'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**与VSCode相比，jupyter notebook缺乏强制编码最佳实践的扩展。**'
- en: Ok, folks, enough bashing for now. I honestly love jupyter, and I think it’s
    great for what’s designed to do. You can definitely use it to bootstrap small
    projects or quickly prototype ideas.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，各位，暂时别再吐槽了。我真的很喜欢jupyter，我认为它在设计上做得很好。你绝对可以用它来启动小项目或快速原型设计。
- en: But in order to ship these ideas in an industrial fashion, you have to follow
    software engineering principles that happen to get lost when data scientists use
    notebooks. So let’s review some of them together and see why they’re important.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了以工业化的方式推出这些想法，你必须遵循一些在数据科学家使用笔记本时可能会丢失的软件工程原则。让我们一起回顾其中的一些，看看它们为什么重要。
- en: Tips to make your code great again
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使你的代码再次出色的技巧
- en: '**These tips have been compiled from different projects, meetups I attended,
    and discussions with software engineers and architects I’ve worked with in the
    past. If you have other suggestions and ideas to share, feel free to bring your
    contributions in the comment section, and I’ll credit your answer in the post.*'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**这些建议来源于不同的项目、我参加的会议，以及与我过去合作的软件工程师和架构师的讨论。如果你有其他建议和想法，欢迎在评论区分享，我会在帖子中给予你的答案以信用。**'
- en: '**The following sections assume that we’re writing python scripts. Not notebooks.*'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**以下部分假设我们正在编写 Python 脚本，而不是笔记本。**'
- en: 1 - Clean your code
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1 - 清理你的代码
- en: '![](../Images/da7e4c6d843c484a8b08c17bfbdc3a2c.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/da7e4c6d843c484a8b08c17bfbdc3a2c.png)'
- en: '*Photo by [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral).*'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*照片由 [Florian Olivo](https://unsplash.com/@florianolv?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral) 提供。*'
- en: One of the most important aspects of code quality is clarity. Clear and readable
    code is crucial for collaboration and maintainability.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 代码质量的一个重要方面是清晰性。清晰和可读的代码对协作和维护至关重要。
- en: 'Here’s what may help you have a cleaner code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可能帮助你保持代码更清晰的建议：
- en: 'Use **meaningful variable names **that are descriptive and imply type. For
    example, if you’re declaring a boolean variable about an attribute (age, for example)
    to check whether a person is old, you can make it both descriptive and type-informative
    by using The same goes for the way you declare your data: make it explanatory.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**有意义的变量名**，它们应具有描述性并暗示类型。例如，如果你要声明一个关于某个属性（例如年龄）的布尔变量，以检查一个人是否年长，你可以通过使用有描述性和类型信息的命名来使其更具解释性。声明数据时也是如此：使其具有解释性。
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Avoid abbreviations **that no one but you can understand and **long variable
    names **that no one can bear.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免使用只有你自己能理解的缩写**和**没有人能忍受的长变量名**。'
- en: '**Don’t hard code “magic numbers” **directly in code. Define them in a variable
    so that everyone can understand what they refer to.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不要在代码中硬编码“魔法数字”**。将它们定义在变量中，以便每个人都能理解它们指的是什么。'
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Follow PEP8 conventions **when naming your objects: for example, functions
    and methods names are in lowercase and words are separated by an underscore, class
    names follow the UpperCaseCamelCase convention, constants are fully capitalized,
    etc.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在命名对象时遵循 PEP8 约定**：例如，函数和方法的名称使用小写字母，单词之间用下划线分隔；类名称遵循 UpperCaseCamelCase
    约定；常量全大写等。'
- en: Learn more about these conventions [here](https://visualgit.readthedocs.io/en/latest/pages/naming_convention.html).
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 了解更多关于这些约定的信息，[点击这里](https://visualgit.readthedocs.io/en/latest/pages/naming_convention.html)。
- en: '**Use indentation and whitespaces **to let your code breathe. There are standard
    conventions such as “using 4 space for each indent”, “separate sections should
    have additional blank lines”… Since I never remember those, I use a very nice **VSCode
    extension called **[**prettier**](https://prettier.io/)** that automatically reformat
    my code** when pressing ctrl+s.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用缩进和空白**让你的代码有呼吸的空间。存在一些标准约定，比如“每个缩进使用 4 个空格”、“不同部分之间应有额外的空行”等……由于我总是记不住这些，我使用了一个非常好的**VSCode
    插件 [**prettier**](https://prettier.io/)**，它可以在按下 ctrl+s 时自动重新格式化我的代码**。'
- en: '![](../Images/cc1aada2ec1307d7795092311db43747.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/cc1aada2ec1307d7795092311db43747.png)'
- en: '*Source: [https://prettier.io/](https://prettier.io/).*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源：[https://prettier.io/](https://prettier.io/)。*'
- en: 2 - Make your code modular
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2 - 使你的代码模块化
- en: When you start building something that you feel can be reused in the same or
    other projects, you’ll have to organize your code into logical functions and modules.
    This helps for better organization and maintainability.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始构建一些你认为可以在相同或其他项目中重用的东西时，你需要将代码组织成逻辑函数和模块。这有助于更好的组织和维护。
- en: For example, you’re working on an NLP project, and you may have different processing
    functions to handle text data (tokenizing, stripping URLs, lemmatizing, etc.).
    You can put all these units in a python module called text_processing.py and import
    them from it. Your main program will be way lighter!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你正在进行一个 NLP 项目，你可能有不同的处理函数来处理文本数据（如分词、去除 URL、词形还原等）。你可以将这些单元放在一个名为 text_processing.py
    的 Python 模块中，并从中导入它们。这样，你的主程序会轻得多！
- en: 'These are some good tips I learned about writing modular code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我学习到的一些编写模块化代码的好建议：
- en: '**DRY: Don’t Repeat Yourself. **Generalize and consolidate your code whenever
    possible.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DRY: 不要重复自己。** 尽可能地将代码通用化和整合。'
- en: '**Functions should do one thing**. If a function does multiple operations,
    it becomes more difficult to generalize.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数应该做一件事**。如果一个函数执行多个操作，就会变得更难以概括。'
- en: '**Abstract your logic in functions but ****without over-engineering it: **there’s
    the slight possibility that you’ll end up with too many modules. Use your judgment,
    and if you’re inexperienced, have a look at popular GitHub repositories such as [scikit-learn](https://github.com/scikit-learn/scikit-learn) and
    check out their coding style.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将你的逻辑抽象到函数中，但** **不要过度工程化**：你可能会遇到模块过多的情况。根据你的判断，如果你经验不足，可以查看流行的GitHub库，例如 [scikit-learn](https://github.com/scikit-learn/scikit-learn) 并查看他们的编码风格。'
- en: 3 - Refactor your code
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3 - 重构你的代码
- en: Refactoring aims at reorganizing the internal structure of the code without
    altering its functionalities. It’s usually done on a working (but still not fully
    organized) version of the code. It helps de-duplicate functions, reorganize the
    file structure, and add more abstraction.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 重构旨在重新组织代码的内部结构，而不改变其功能。通常在一个有效（但尚未完全组织）的代码版本上进行。它有助于去重函数，重组文件结构，并增加更多抽象。
- en: To learn more about python refactoring, this article is a great [resource](https://realpython.com/python-refactoring/).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于Python重构的内容，这篇文章是一个很好的 [resource](https://realpython.com/python-refactoring/)。
- en: 4 - Make your code efficient
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4 - 提高代码效率
- en: Writing efficient code that executes fast and consumes less memory and storage
    is another important skill in software development.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 编写高效的代码，使其执行迅速且占用更少的内存和存储是软件开发中的另一项重要技能。
- en: 'Writing efficient code takes years of experience, but here are some quick tips
    that may help your find out if your code is running slow and how to boost it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 编写高效代码需要多年的经验，但这里有一些快速提示，可能会帮助你发现代码运行缓慢的原因以及如何提升性能：
- en: Before running anything, check the complexity of your algorithm to evaluate
    its execution time
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行任何代码之前，检查算法的复杂性以评估其执行时间
- en: Check the possible bottlenecks of your script by inspecting the running time
    of every operation
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过检查每个操作的运行时间来检查脚本的可能瓶颈
- en: Avoid for-loops as much as possible and vectorize your operations, especially
    if you’re using libraries such as [NumPy](https://numpy.org/) or [pandas](https://pandas.pydata.org/)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽量避免使用for循环，并向量化你的操作，特别是如果你使用像 [NumPy](https://numpy.org/) 或 [pandas](https://pandas.pydata.org/)这样的库
- en: Leverage the CPU cores of your machine by using multiprocessing
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用多进程来利用机器的CPU核心
- en: 5 - Use GIT or any other version control system
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 5 - 使用GIT或任何其他版本控制系统
- en: In my personal experience, using GIT + Github helped me improve my coding skills
    and better organize my projects. Since I used it while collaborating with friends
    and/or colleagues, it made me stick to standards I didn’t obey to in the past.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的个人经验，使用GIT + Github帮助我提高了编码技能并更好地组织了我的项目。由于我在与朋友和/或同事合作时使用了它，这使我遵守了过去没有遵守的标准。
- en: '![](../Images/414a1e5ca6eb074cff85a8e61606fdb3.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/414a1e5ca6eb074cff85a8e61606fdb3.png)'
- en: '*Source: [freecodecamp](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/).*'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源: [freecodecamp](https://www.freecodecamp.org/news/the-beginners-guide-to-git-github/)。*'
- en: There are lots of benefits to using a version control system, be it in data
    science or software development.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用版本控制系统有很多好处，无论是在数据科学还是软件开发中。
- en: Keeping track of your changes
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪你的更改
- en: Rolling back to any previous version of the code
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚到任何先前的代码版本
- en: Efficient collaboration between team members via merge and pull requests
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过合并和拉取请求实现团队成员之间的高效协作
- en: Increase of code quality
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高代码质量
- en: Code review
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码审查
- en: Assigning tasks to team members and monitoring their progress over time
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为团队成员分配任务并监控他们的进展
- en: Platforms such as Github or Gitlab go even further and provide, among other
    things, Continuous Integration and Continuous Delivery hooks to automatically
    build and deploy your projects.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 像Github或Gitlab这样的平台甚至提供了持续集成和持续交付钩子，用于自动构建和部署你的项目。
- en: 'If you’re new to Git, then I recommend having a look at this [tutorial](https://nvie.com/posts/a-successful-git-branching-model/).
    Or you can have a look at this cheat sheet:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是Git的新手，那么我推荐查看这个 [tutorial](https://nvie.com/posts/a-successful-git-branching-model/)。或者你可以查看这个备忘单：
- en: '![](../Images/85a170b7c85c43de0628582251eb0eac.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85a170b7c85c43de0628582251eb0eac.png)'
- en: '*source: [Atlassian](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet).*'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源: [Atlassian](https://www.atlassian.com/git/tutorials/atlassian-git-cheatsheet)。*'
- en: If you want to specifically learn about how to version machine learning models,
    then have a look at this [article](https://algorithmia.com/blog/how-to-version-control-your-production-machine-learning-models).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想专门了解如何为机器学习模型进行版本控制，可以查看这篇[文章](https://algorithmia.com/blog/how-to-version-control-your-production-machine-learning-models)。
- en: 6 - Test your code
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6 - 测试你的代码
- en: If you’re building a data pipeline that executes a series of operations, one
    way to make sure it performs according to what it’s designed to do, is to write **tests **that
    check an expected behavior.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在构建一个执行一系列操作的数据管道，确保它按设计执行的一种方法是编写**测试**来检查预期的行为。
- en: Tests can be as simple as checking an output shape or an expected value returned
    by a function.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 测试可以简单到检查输出形状或函数返回的预期值。
- en: '![](../Images/14b4af8b9d46b3df6fa8c98dbc2053b5.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/14b4af8b9d46b3df6fa8c98dbc2053b5.png)'
- en: '*[https://pytest-c-testrunner.readthedocs.io/](https://pytest-c-testrunner.readthedocs.io/)*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*[https://pytest-c-testrunner.readthedocs.io/](https://pytest-c-testrunner.readthedocs.io/)*'
- en: 'Writing tests for your functions and modules brings many benefits:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的函数和模块编写测试带来了许多好处：
- en: It improves the stability of the code and makes mistakes easier to spot
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提高了代码的稳定性，并使错误更容易被发现。
- en: It prevents unexpected outputs
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它防止了意外输出。
- en: It helps to detect edge cases
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于检测边界情况。
- en: It prevents from pushing broken code to production
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它防止了将损坏的代码推送到生产环境中。
- en: 7 - Use logging
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 7 - 使用日志记录
- en: Once the first version of your code is running, you definitely want to monitor
    it at every step to understand what happens, track the progress, or spot faulty
    behavior. Here’s where you can use logging.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的代码的第一个版本运行起来，你肯定会希望在每一步进行监控，以了解发生了什么、跟踪进展或发现故障行为。这就是你可以使用日志记录的地方。
- en: 'Here are some tips on efficiently using logging:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是高效使用日志记录的一些技巧：
- en: Use different levels (debug, info, warning) depending on the nature of the message
    you want to log
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你想记录的消息的性质，使用不同的级别（调试、信息、警告）。
- en: Provide useful information in the logs to help solve the related issues.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在日志中提供有用的信息，以帮助解决相关问题。
- en: '[PRE2]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/de411838c7bf41eeb639cad1aa115d46.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/de411838c7bf41eeb639cad1aa115d46.png)'
- en: '*source: [realpython](https://realpython.com/python-logging-source-code/).*'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '*来源: [realpython](https://realpython.com/python-logging-source-code/)。*'
- en: Conclusion
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Long gone are the days when data scientists found their way around by producing
    reports and jupyter notebooks that didn’t communicate in any way with the company
    systems and infrastructure. Nowadays, data scientists start producing testable
    and runnable code that seamlessly integrates with the IT systems. **Following
    software engineering best practices becomes, therefore, a must.**
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家通过生成与公司系统和基础设施不相关的报告和jupyter笔记本来解决问题的时代早已过去。如今，数据科学家开始生成可测试和可运行的代码，与IT系统无缝集成。**因此，遵循软件工程最佳实践成为了必需。**
- en: '[Original](https://medium.com/swlh/software-engineering-tips-and-best-practices-for-data-science-5d85dbcf87fd).
    Reposted with permission.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://medium.com/swlh/software-engineering-tips-and-best-practices-for-data-science-5d85dbcf87fd)。经许可转载。'
- en: '**Bio:** [Ahmed Besbes](https://ahmedbesbes.com)is a data scientist living
    in France working across many industries, such as financial services, media, and
    the public sector. Part of Ahmed’s work includes crafting, building, and deploying
    AI applications to answer business issues. Ahmed also blogs about technical topics,
    such as deep learning.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介:** [Ahmed Besbes](https://ahmedbesbes.com)是一位居住在法国的数据科学家，工作领域涵盖金融服务、媒体和公共部门。Ahmed的工作包括设计、构建和部署AI应用程序以解决业务问题。Ahmed还博客分享技术话题，如深度学习。'
- en: '**Related:**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[5 Best Practices for Putting Machine Learning Models Into Production](https://www.kdnuggets.com/2020/10/5-best-practices-machine-learning-models-production.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将机器学习模型投入生产的5大最佳实践](https://www.kdnuggets.com/2020/10/5-best-practices-machine-learning-models-production.html)'
- en: '[Software engineering fundamentals for Data Scientists](https://www.kdnuggets.com/2020/06/software-engineering-fundamentals-data-scientists.html)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的软件工程基础](https://www.kdnuggets.com/2020/06/software-engineering-fundamentals-data-scientists.html)'
- en: '[Coding habits for data scientists](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的编码习惯](https://www.kdnuggets.com/2020/05/coding-habits-data-scientists.html)'
- en: More On This Topic
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目的，并找到目的……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应该知道的三个R语言库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个90亿美元的人工智能失败案例分析](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
