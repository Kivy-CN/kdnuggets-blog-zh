- en: How to Start Using Natural Language Processing With PyTorch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何开始使用 PyTorch 进行自然语言处理
- en: 原文：[https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html](https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html](https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html)
- en: '![How to Start Using Natural Language Processing With PyTorch](../Images/066862a1fb6ff3bdba76bd0aa0c61f13.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何开始使用 PyTorch 进行自然语言处理](../Images/066862a1fb6ff3bdba76bd0aa0c61f13.png)'
- en: Natural language processing (NLP) is continuing to grow in popularity, and necessity,
    as artificial intelligence and deep learning programs grow and thrive in the coming
    years. Natural language processing with PyTorch is the best bet to implement these
    programs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着人工智能和深度学习程序在未来几年中不断增长和发展，自然语言处理 (NLP) 也在不断增长，变得越来越重要。使用 PyTorch 进行自然语言处理是实现这些程序的最佳选择。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的 3 个最佳课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 工作'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this guide, we will address some of the obvious questions that may arise
    when starting to dive into natural language processing, but we will also engage
    with deeper questions and give you the right steps to get started working on your
    own NLP programs.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本指南中，我们将解答一些在开始深入自然语言处理时可能会出现的明显问题，但我们也会探讨更深层次的问题，并给你提供开始自己 NLP 程序的正确步骤。
- en: Can PyTorch Be Used For NLP?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyTorch 可以用于 NLP 吗？
- en: First and foremost, NLP is an applied science. It is a branch of engineering
    that blends artificial intelligence, computational linguistics, and computer science
    in order to "understand" natural language, i.e., spoken and written language.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，NLP 是一门应用科学。它是工程学的一个分支，将人工智能、计算语言学和计算机科学结合在一起，以“理解”自然语言，即口语和书面语言。
- en: Second, NLP does not mean Machine Learning or Deep Learning. Instead, these
    artificial intelligence programs need to be taught how to process natural language
    and then use other systems to make use of what is being input into the programs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，NLP 并不意味着机器学习或深度学习。相反，这些人工智能程序需要学习如何处理自然语言，然后使用其他系统来利用输入程序的数据。
- en: While it is simpler to refer to some AI programs as NLP programs, that is not
    strictly the case. Instead, they are able to make sense of language, after being
    properly trained, but there is an entirely different system and process involved
    in helping these programs understand natural language.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将一些 AI 程序称为 NLP 程序比较简单，但情况并非完全如此。相反，它们能够理解语言，在经过适当训练之后，但涉及到完全不同的系统和过程来帮助这些程序理解自然语言。
- en: This is why natural language processing with PyTorch comes in handy. [PyTorch](https://pytorch.org/) is
    built off of Python and has the benefit of having pre-written codes, called classes,
    all designed around NLP. This makes the entire process quicker and easier for
    everyone involved.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么使用 PyTorch 进行自然语言处理非常方便的原因。[PyTorch](https://pytorch.org/) 基于 Python，并具有预先编写的代码（称为类），这些代码都围绕
    NLP 设计。这使得整个过程对所有参与者来说都更快、更容易。
- en: With these PyTorch classes at the ready and the various other Python libraries
    at PyTorch’s disposal, there is no better machine learning framework for natural
    language processing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些 PyTorch 类和 PyTorch 可用的各种其他 Python 库，自然语言处理没有比这更好的机器学习框架了。
- en: How Do I Start Learning Natural Language Processing?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我如何开始学习自然语言处理？
- en: To get started using NLP with PyTorch, you will need to be familiar with Python
    for coding.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 PyTorch 进行 NLP，你需要熟悉 Python 编程。
- en: '![How to Start Using Natural Language Processing With PyTorch](../Images/dd8c3f7e350614195e1ef2fcaf69d250.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![如何开始使用 PyTorch 进行自然语言处理](../Images/dd8c3f7e350614195e1ef2fcaf69d250.png)'
- en: '[Image Source](https://www.pexels.com/photo/woman-sitting-in-front-laptop-1181677/)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[图片来源](https://www.pexels.com/photo/woman-sitting-in-front-laptop-1181677/)'
- en: Once you are familiar with Python, you will begin to see plenty of other frameworks
    that can be used for various deep learning projects. However, natural language
    processing with PyTorch is optimal because of PyTorch **Tensors**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你熟悉了 Python，你会发现许多其他框架可以用于各种深度学习项目。然而，使用 PyTorch 进行自然语言处理是最优的，因为 PyTorch **张量**。
- en: Simply put, **tensors** allow you to perform computations with the use of a
    GPU which can significantly increase the speed and performance of your program
    for NLP with PyTorch. This means you can train your deep learning program quicker
    to be able to utilize NLP for whatever desired outcome you have.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，**张量** 允许你使用 GPU 进行计算，这可以显著提高你在 PyTorch 上进行自然语言处理程序的速度和性能。这意味着你可以更快地训练你的深度学习程序，以实现你期望的
    NLP 结果。
- en: As mentioned above, there are different PyTorch **classes** with the ability
    to function well for NLP and accompanying programs. We will break down six of
    these classes and their use cases to help you get started making the right selection.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如上所述，PyTorch 中有不同的 **类**，这些类在自然语言处理及相关程序中表现良好。我们将详细介绍这六个类及其使用场景，以帮助你开始选择合适的类。
- en: '**1\. torch.nn.RNN**'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**1\. torch.nn.RNN**'
- en: The first three **classes** we are going to look at are **multi-layer classes**,
    which means they can represent bi-directional recurrent neural networks. To simplify
    what this means, it allows the deep learning program to learn from past states
    as well as learn from new/future states as computations continue to run and process.
    This allows these programs to learn and process natural language inputs and even
    understand deeper language quirks.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要查看的前三个 **类** 是 **多层类**，这意味着它们可以表示双向递归神经网络。简单来说，它允许深度学习程序从过去的状态中学习，同时在计算和处理继续进行时从新的/未来的状态中学习。这使得这些程序能够学习和处理自然语言输入，甚至理解更深层次的语言特征。
- en: '![How to Start Using Natural Language Processing With PyTorch](../Images/774f076f600ae02a346591e430b64d39.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![如何开始使用 PyTorch 进行自然语言处理](../Images/774f076f600ae02a346591e430b64d39.png)'
- en: torch.nn.RNN many to many diagram, [Image Source](https://discuss.pytorch.org/t/pytorch-rnn-many-to-many-learning-one-to-many-test/91874)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: torch.nn.RNN 多对多图示，[图片来源](https://discuss.pytorch.org/t/pytorch-rnn-many-to-many-learning-one-to-many-test/91874)
- en: torch.nn.RNN stands for **R**ecurring **N**eural **N**etwork and lets you know
    what to expect from the class. This is the simplest recurring neural network PyTorch
    class to use to get started with natural language processing.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: torch.nn.RNN 代表 **递归神经网络**，这让你知道这个类的基本功能。这是使用 PyTorch 进行自然语言处理时最简单的递归神经网络类。
- en: '**2\. torch.nn.LSTM**'
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**2\. torch.nn.LSTM**'
- en: torch.nn.LSTM is another multi-layer PyTorch class. It has all the same benefits
    as torch.nn.RNN but with **L**ong **S**hort **T**erm **M**emory. Essentially,
    this means deep learning programs using this class can go beyond one-to-one data
    point connections and process entire data sequences.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: torch.nn.LSTM 是另一个多层 PyTorch 类。它具有与 torch.nn.RNN 相同的所有优点，但增加了 **长短期记忆**。这意味着使用这个类的深度学习程序可以处理超越一对一数据点连接的数据序列。
- en: For natural language processing with PyTorch, torch.nn.LSTM is one of the more
    common classes used because it can begin to understand connections between not
    only written or typed data input but can also recognize speech and other vocalizations.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 PyTorch 进行自然语言处理时，torch.nn.LSTM 是更常用的类之一，因为它不仅可以理解书写或输入的数据，还可以识别语音和其他声音。
- en: Being able to process more complex data sequences makes it a necessary component
    in being able to capably perform for programs utilizing the full potential of
    natural language processing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 能够处理更复杂的数据序列使其成为能够有效执行利用自然语言处理全部潜力的程序的必要组成部分。
- en: '**3\. torch.nn.GRU**'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**3\. torch.nn.GRU**'
- en: torch.nn.GRU builds on the RNN and LSTM classes by creating **G**ated **R**ecurrent **U**nits.
    In brief, this translates to torch.nn.GRU class programs having a gated output.
    This means they function similarly to torch.nn.LSTM but actually have processes
    to simply forget datasets that do not fit or align with the rest of the desired
    outcomes or conclusions of the majority of datasets.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: torch.nn.GRU 在 RNN 和 LSTM 类的基础上，通过创建 **门控递归单元** 进行扩展。简而言之，这意味着 torch.nn.GRU
    类程序具有门控输出。这使得它们的功能类似于 torch.nn.LSTM，但实际上有处理机制来简单地忘记不符合或与大多数数据集的预期结果或结论不一致的数据集。
- en: torch.nn.GRU class programs are another great way to get started in NLP with
    PyTorch because they are simpler but produce similar results to torch.nn.LSTM
    in less time. However, they can be less accurate without close monitoring if the
    program ignores datasets that might be important to its learning.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: torch.nn.GRU 类程序是入门 NLP 的另一个很好的方式，因为它们更简单，但在更短时间内产生与 torch.nn.LSTM 类似的结果。然而，如果程序忽略了可能对学习重要的数据集，在没有仔细监控的情况下，它们可能会准确性较低。
- en: '**4\. torch.nn.RNNCell**'
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**4\. torch.nn.RNNCell**'
- en: The next three classes are simplified versions of their predecessors, so they
    all function similarly with different benefits. These classes are all **cell-level
    classes** and basically run one operation at a time rather than process multiple
    datasets or sequences simultaneously.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的三个类是其前身的简化版本，因此它们都以不同的好处类似地运行。这些类都是**细胞级类**，基本上一次只运行一个操作，而不是同时处理多个数据集或序列。
- en: '![How to Start Using Natural Language Processing With PyTorch](../Images/2fb630b75b45de81688bad801f019773.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![如何开始使用 PyTorch 进行自然语言处理](../Images/2fb630b75b45de81688bad801f019773.png)'
- en: Output result of NLP with PyTorch using words assigned to corresponding images,[Image
    Source](https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分配给相应图像的单词输出 PyTorch 的 NLP 结果，[图像来源](https://pytorch.org/tutorials/beginner/blitz/cifar10_tutorial.html)
- en: The going is slower this way, but the outcome can be far more accurate with
    enough time. Being a RNNCell, this class program can still learn from past and
    future states.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式进展较慢，但只要时间足够，结果可能会更为准确。作为 RNNCell，这个类程序仍然可以从过去和未来的状态中学习。
- en: '**5\. torch.nn.LSTMCell**'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**5\. torch.nn.LSTMCell**'
- en: The torch.nn.LSTMCell functions similarly to the regular torch.nn.LSTM class
    with the ability to process datasets and sequences, but not multiple simultaneously.
    As with RNNCell programs, this means the going is slower and less intensive but
    it can actually increase accuracy with time.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: torch.nn.LSTMCell 的功能类似于普通的 torch.nn.LSTM 类，能够处理数据集和序列，但不能同时处理多个。与 RNNCell 程序一样，这意味着进展较慢，负担较轻，但实际上随着时间的推移可以提高准确性。
- en: Each of these cell-level classes have small variations from their predecessors,
    but to dive too much into detail for these differences would be far beyond the
    scope of this guide.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这些细胞级类与其前身有一些小的变化，但深入探讨这些差异会超出本指南的范围。
- en: '**6\. torch.nn.GRUCell**'
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '**6\. torch.nn.GRUCell**'
- en: One of the most interesting classes used in natural language processing with
    PyTorch is torch.nn.GRUCell. It still maintains the functionality of having gated
    outputs, which means it can ignore or even forget outlier datasets while still
    learning from past and future operations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然语言处理领域，使用 PyTorch 的最有趣的类之一是 torch.nn.GRUCell。它仍然保持有门控输出的功能，这意味着它可以忽略甚至忘记离群的数据集，同时仍然从过去和未来的操作中学习。
- en: This is, arguably, one of the more popular PyTorch classes used for those starting
    out because it has the most potential with the lowest number of requirements for
    optimal operations.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，这是那些入门者使用的较受欢迎的 PyTorch 类之一，因为它在需求最少的情况下具有最大的潜力。
- en: The main sacrifice here is time and effort in making sure the program is trained
    properly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里主要的牺牲是确保程序得到正确训练所需的时间和精力。
- en: Implementing Natural Language Processing With PyTorch
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyTorch 实现自然语言处理
- en: There is still much to be said about how to get started with natural language
    processing with PyTorch, but one more major factor to understand once you have
    selected a PyTorch class that is appropriate for your deep learning model is to
    decide how you will implement NLP within your model.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何开始使用 PyTorch 进行自然语言处理还有很多要说的，但在选择了适合您深度学习模型的 PyTorch 类之后，还需理解一个主要因素，那就是决定如何在模型中实现
    NLP。
- en: Encoding words into your model is probably one of the most obvious and important
    processes to having a fully-optimized and operational deep learning model with
    natural language processing. NLP with PyTorch requires having some sort of word
    encoding method.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 将单词编码到模型中可能是拥有一个完全优化和操作的深度学习模型的最明显且重要的过程之一。PyTorch 的 NLP 需要某种单词编码方法。
- en: 'There are many ways to have models process individual letters, but the point
    of creating NLP deep learning models is to, presumably, focus not on individual
    words and letters but the semantics and linguistic meanings of those words and
    phrases. Here are three basic word embedding models for NLP with PyTorch:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以让模型处理单个字母，但创建 NLP 深度学习模型的关键在于，假设不是关注单个单词和字母，而是这些单词和短语的语义和语言学意义。以下是三个基本的
    PyTorch NLP 词嵌入模型：
- en: '**Simple word encoding**: training the model to focus on each individual word
    in a sequence and letting them derive similarities and differences on their own.
    This is the simplest but can be difficult for the model to accurately understand
    or predict semantics.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简单词编码**：训练模型关注序列中的每个单独单词，并让模型自行推导相似性和差异性。这是最简单的方法，但模型可能难以准确理解或预测语义。'
- en: '**N-Gram language modeling**: the model is trained to learn words with respect
    to the words in the sequence. This means they can learn how words function in
    relationship to one another and in sentences as a whole.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**N-Gram 语言建模**：模型被训练来学习序列中单词之间的关系。这意味着它们可以学习单词在彼此关系中的作用以及在句子中的作用。'
- en: '**Continuous bag-of-words (CBOW)**: an expanded version of N-Gram language
    modeling, the deep learning model is trained to sequence data of a set amount
    of words before and a set amount of words after each word in a sequence in order
    to deeply learn how words function with surrounding words and how they function
    in their sequence. This is, by far, the most popular method used by those using
    natural language processing with PyTorch.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连续词袋模型（CBOW）**：N-Gram 语言建模的扩展版本，该深度学习模型被训练来处理序列中每个单词之前和之后一定数量的单词，以便深入学习单词在周围单词中的作用以及它们在序列中的功能。这是目前使用
    PyTorch 进行自然语言处理的最受欢迎的方法。'
- en: Once you have your PyTorch class selected and a method of embedding words you
    are ready to get started utilizing natural language processing in your next deep
    learning project!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你选择了 PyTorch 类和词嵌入方法，你就准备好开始在下一个深度学习项目中利用自然语言处理了！
- en: '![How to Start Using Natural Language Processing With PyTorch](../Images/c339c410c2c3d261b2043451392f9813.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何开始使用 PyTorch 进行自然语言处理](../Images/c339c410c2c3d261b2043451392f9813.png)'
- en: Using natural language processing with PyTorch to create end result like Siri, [Image
    Source](https://unsplash.com/photos/AGRtDoZlpYw)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 PyTorch 进行自然语言处理来创建像 Siri 这样的最终结果，[图片来源](https://unsplash.com/photos/AGRtDoZlpYw)
- en: More Information On Natural Language Processing and PyTorch
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多有关自然语言处理和 PyTorch 的信息
- en: Natural language processing is one of the hottest topics in deep learning and
    AI with many industries trying to figure out ways to utilize this type of deep
    learning model for internal and external use.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言处理是深度学习和人工智能中最热门的话题之一，许多行业正在探索如何利用这种类型的深度学习模型来进行内部和外部应用。
- en: There is so much more to see and learn, but let us know if you think we missed
    anything. If you have any questions about how to start implementing NLP or PyTorch,
    then do not hesitate to reach out!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多内容可以了解和学习，但如果你认为我们遗漏了什么，请告诉我们。如果你对如何开始实施 NLP 或 PyTorch 有任何问题，请随时联系！
- en: What do you think? Are you ready to tackle natural language processing with
    PyTorch? Feel free to comment below with any questions you have.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你怎么看？你准备好使用 PyTorch 处理自然语言处理了吗？如果你有任何问题，请随时在下面留言。
- en: '**[Kevin Vu](https://www.kdnuggets.com/author/kevin-vu)** manages Exxact Corp
    blog and works with many of its talented authors who write about different aspects
    of Deep Learning.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Kevin Vu](https://www.kdnuggets.com/author/kevin-vu)** 管理 Exxact Corp 博客，并与许多才华横溢的作者合作，他们撰写有关深度学习各个方面的内容。'
- en: '[Original](https://www.exxactcorp.com/blog/Deep-Learning/natural-language-processing-with-pytorch).
    Reposted with permission.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.exxactcorp.com/blog/Deep-Learning/natural-language-processing-with-pytorch)。经许可转载。'
- en: More On This Topic
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[N-gram Language Modeling in Natural Language Processing](https://www.kdnuggets.com/2022/06/ngram-language-modeling-natural-language-processing.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理中的 N-gram 语言建模](https://www.kdnuggets.com/2022/06/ngram-language-modeling-natural-language-processing.html)'
- en: '[Natural Language Processing Key Terms, Explained](https://www.kdnuggets.com/2017/02/natural-language-processing-key-terms-explained.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理关键术语解释](https://www.kdnuggets.com/2017/02/natural-language-processing-key-terms-explained.html)'
- en: '[Data Representation for Natural Language Processing Tasks](https://www.kdnuggets.com/2018/11/data-representation-natural-language-processing.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理任务的数据表示](https://www.kdnuggets.com/2018/11/data-representation-natural-language-processing.html)'
- en: '[Transfer Learning for Image Recognition and Natural Language Processing](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于图像识别和自然语言处理的迁移学习](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
- en: '[A Gentle Introduction to Natural Language Processing](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理的温和入门](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
- en: '[Natural Language Processing with spaCy](https://www.kdnuggets.com/2023/01/natural-language-processing-spacy.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用spaCy进行自然语言处理](https://www.kdnuggets.com/2023/01/natural-language-processing-spacy.html)'
