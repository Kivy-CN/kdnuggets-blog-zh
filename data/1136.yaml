- en: GitHub Desktop for Data Scientists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对数据科学家的 GitHub Desktop
- en: 原文：[https://www.kdnuggets.com/2021/09/github-desktop-data-scientists.html](https://www.kdnuggets.com/2021/09/github-desktop-data-scientists.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/09/github-desktop-data-scientists.html](https://www.kdnuggets.com/2021/09/github-desktop-data-scientists.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Drew Seewald](https://realdrewdata.medium.com/), Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Drew Seewald](https://realdrewdata.medium.com/)，数据科学家**'
- en: 'Version control is important for collaborating on code, sharing it with others,
    being able to view old versions of the code, and even deploying the code automatically.
    It can be a bit confusing at first, but is well worth your time, especially if
    you work in the open source space or on a team where you will frequently be using
    version control for projects. Here are some of the biggest features that make
    it worth using:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制对代码协作、与他人共享代码、查看旧版本代码甚至自动部署代码都非常重要。刚开始时可能会有些困惑，但绝对值得花时间学习，特别是如果你在开源领域工作或在一个团队中频繁使用版本控制来处理项目。以下是一些使其值得使用的主要功能：
- en: Storing file change history with comments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储文件更改历史记录及注释
- en: Organizing multiple users editing the same project simultaneously
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织多个用户同时编辑同一个项目
- en: Facilitating code review procedures
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进代码审查程序
- en: Automating workflows to report issues, request improvements, and deploy code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化工作流程以报告问题、请求改进和部署代码
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你在 IT 领域的职业生涯'
- en: '* * *'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![Relax, you don’t have to use the command line](../Images/5f68391a85d401b6be5755e36c39b571.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![放轻松，你不必使用命令行](../Images/5f68391a85d401b6be5755e36c39b571.png)'
- en: Relax, you don’t have to use the command line
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 放轻松，你不必使用命令行
- en: Photo by [Dennis van Dalen](https://unsplash.com/@dennisvandalen?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Dennis van Dalen](https://unsplash.com/@dennisvandalen?utm_source=medium&utm_medium=referral)
    拍摄，来源于 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: Version Control Features
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制功能
- en: One of the main features of version control is the file change history for every
    file in the repository. This serves as a change log for each and every file, so
    it is always possible to see what code was running at any point in the past. Every
    time someone updates a file and pushes the new version to the repository, they
    have to add a short comment. In a perfect world, this details what the changes
    were and why they were made. If there is ever a question on why something was
    changed or why, the person responsible will be tagged in the commit, along with
    the additional information they provided.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制的主要功能之一是每个文件的更改历史记录。这作为每个文件的变更日志，始终可以查看过去任何时刻运行的代码。每当有人更新文件并将新版本推送到仓库时，他们必须添加一个简短的注释。在理想情况下，这将详细说明更改内容和原因。如果对某项更改的原因有疑问，责任人将被标记在提交中，并附上他们提供的额外信息。
- en: Another feature of version control is the ability to create branches. A branch
    is a new version of the code that is kept separate. This is helpful for making
    and testing changes to the code as it doesn’t change the main branch, where the
    most up to date working version is. Branches can also be used by different users
    to work on different code or features at the same time. These branches can be
    merged back to the master when they are ready, and there is a process to reconcile
    the differences between them when merging.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制的另一个功能是能够创建分支。分支是一个新版本的代码，保持独立。这对于修改和测试代码非常有用，因为它不会改变主分支，主分支是最更新的工作版本。不同的用户也可以使用这些分支同时处理不同的代码或功能。这些分支可以在准备好时合并回主分支，合并时有一个过程来解决它们之间的差异。
- en: Code review is a best practice when working with teams. One person may do all
    the work on a new feature in a new branch, but before blindly merging it into
    the main branch, it should be reviewed by the team. When a pull request is created
    to move code to the main branch, it also starts a discussion where team members
    can talk about the code and request changes before it gets merged to the main
    branch. This process should help improve the code that makes it into production
    to prevent bugs and breaks, improve the efficiency of the code, or even have it
    match a standard for formatting the code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查是与团队合作时的最佳实践。一个人可能在一个新的分支上完成所有新功能的工作，但在盲目地将其合并到主分支之前，应该由团队进行审查。当创建一个拉取请求以将代码移动到主分支时，它也会启动一个讨论，团队成员可以讨论代码并请求更改，然后再将其合并到主分支。这一过程有助于改善进入生产的代码，以防止出现错误和问题，提高代码的效率，甚至使其符合代码格式的标准。
- en: A final noteworthy benefit of using GitHub for version control is the automation
    options it offers. If there is a standard code review checklist, it can be added
    as a template that will be available when a pull request is created, ready to
    be filled out as review tasks are completed. Templates can also be used when people
    create issues so that they remember all of the details they need to input as they
    are creating an issue. GitHub also offers actions to support automation. These
    can be triggered by different events, such as merging code into the master branch.
    An action can run unit tests, build/compile package components, and even deploy
    code to production.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GitHub 进行版本控制的另一个值得注意的好处是它提供的自动化选项。如果有标准的代码审查清单，它可以作为模板添加，当创建拉取请求时，模板将可用，准备在审查任务完成时填写。模板也可以在创建问题时使用，以确保人们记得输入所有必要的细节。GitHub
    还提供了支持自动化的操作。这些操作可以由不同的事件触发，例如将代码合并到主分支中。操作可以运行单元测试、构建/编译包组件，甚至将代码部署到生产环境中。
- en: Version Control Flavors
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 版本控制类型
- en: There are a few big names version control you may have heard of. Some of the
    most popular are Git and GitHub. [Git](https://git-scm.com/about) is the underlying
    technology for version control, and [GitHub](https://github.com/features) is software
    that simplifies the version control workflow.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过几个著名的版本控制工具。最受欢迎的包括 Git 和 GitHub。 [Git](https://git-scm.com/about) 是版本控制的基础技术，而 [GitHub](https://github.com/features) 是简化版本控制工作流程的软件。
- en: Git can be used locally, without any need for an external repository. You can
    do all of your version control tasks on your computer’s hard drive. Local Git
    repositories are ideal for personal projects or for when you aren’t quite ready
    to share your code with your entire team, but still want the benefits of version
    control.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Git 可以在本地使用，无需外部代码库。你可以在计算机的硬盘上完成所有版本控制任务。本地 Git 仓库非常适合个人项目或当你还不准备与整个团队分享你的代码时，但仍希望享受版本控制的好处。
- en: The GitHub website is a repository to store code. A lot of open source projects,
    such as Python and R packages, are hosted on the GitHub website. For public repositories,
    anyone can view revision history, issues with the package, and documentation related
    to it.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 网站是一个存储代码的代码库。许多开源项目，如 Python 和 R 包，都托管在 GitHub 网站上。对于公共代码库，任何人都可以查看修订历史、包中的问题以及相关文档。
- en: To connect to a repository on the GitHub website, we can use Git or GitHub Desktop.
    For those of you who love a command line interface (CLI), [Rebecca Vickery](https://rebecca-vickery.medium.com/) has
    a great article on [using the Git CLI for Data Science](https://towardsdatascience.com/introduction-to-github-for-data-scientists-2cf8b9b25fba).
    So why should you keep reading? **Command lines can be intimidating**. There is
    nothing wrong with wanting a graphical user interface (GUI) to manage your version
    control. GitHub Desktop provides a clear and simple interface with your repository.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要连接到 GitHub 网站上的代码库，我们可以使用 Git 或 GitHub Desktop。对于喜欢命令行界面的用户， [Rebecca Vickery](https://rebecca-vickery.medium.com/) 有一篇关于 [使用
    Git CLI 进行数据科学](https://towardsdatascience.com/introduction-to-github-for-data-scientists-2cf8b9b25fba)的很棒的文章。那么你为什么要继续阅读呢？**命令行可能会让人感到不安**。希望使用图形用户界面
    (GUI) 来管理你的版本控制是完全没问题的。GitHub Desktop 提供了一个清晰且简单的界面来处理你的代码库。
- en: GitHub Desktop Process Flow
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Desktop 处理流程
- en: 'While everyone will have a slightly different process flow for their repository,
    there are a few general steps to make changes to code on GitHub:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个人对其代码库的处理流程可能会有所不同，但在 GitHub 上更改代码有几个一般步骤：
- en: Creating a branch
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个分支
- en: Adding commits
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加提交
- en: Creating a new pull request
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建新的拉取请求
- en: Completing code review
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成代码审查
- en: Merging the pull request
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 合并拉取请求
- en: Creating a branch makes a copy of the current production code. A developer will
    make changes to the files, committing any changes to the new branch. Next, a pull
    request will open discussion to add the new branch’s changes to the production
    code, typically in the master or main branch. Code reviewers can add comments
    and request clarification on the changes made on the pull request. Once the review
    is complete and any necessary changes made, the pull request can be merged to
    the master or main branch and closed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个分支会复制当前的生产代码。开发者会对文件进行更改，并将更改提交到新的分支。接下来，拉取请求会开启讨论，将新分支的更改添加到生产代码中，通常是在主分支或主分支中。代码审阅者可以添加评论并要求澄清拉取请求中所做的更改。一旦审查完成并且做出任何必要的更改，拉取请求可以被合并到主分支中并关闭。
- en: Let’s walk through these steps in more detail, looking at how to do each one
    using GitHub Desktop.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨这些步骤，看看如何使用 GitHub Desktop 完成每一个步骤。
- en: Creating a Branch (separating the new code from the old)
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建分支（将新代码与旧代码分开）
- en: To make a change, first create a new branch. If you have full access to the
    repository, you can simply create a new branch on the repository’s GitHub site.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更改，首先创建一个新分支。如果你有对仓库的完全访问权限，你可以直接在仓库的 GitHub 网站上创建新分支。
- en: '1a. Click on Branch: main'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 1a. 点击分支：main
- en: '![](../Images/7a2f5a3a8e875300d915e791ef68f11e.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7a2f5a3a8e875300d915e791ef68f11e.png)'
- en: Image by the author
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 2a. Type the name of the new branch in the text box. There may be some branch
    naming conventions to consider from your organization to keep things organized
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 2a. 在文本框中输入新分支的名称。可能需要考虑你所在组织的分支命名规范，以保持组织的条理。
- en: '![](../Images/b4b06ee888375539073d6da2d0995beb.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4b06ee888375539073d6da2d0995beb.png)'
- en: Image by the author
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 3a. Click on Create branch
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 3a. 点击创建分支
- en: '![](../Images/bfc6ec4d3df0e70160c5b667546635f3.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bfc6ec4d3df0e70160c5b667546635f3.png)'
- en: Image by the author
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: The new branch will now be selected.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将选择新的分支。
- en: '![](../Images/9fc334b1ae45f64ce831e9fab827279a.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9fc334b1ae45f64ce831e9fab827279a.png)'
- en: Image by the author
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'If you don’t have full access to the repository, which is common for public
    projects, you will have to fork the repository. A new branch and a fork are synonymous.
    A fork will be created in a new repository as opposed to the same one as the production
    code, typically under your personal profile. To fork:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有对仓库的完全访问权限，这在公共项目中很常见，你需要 fork 该仓库。新的分支和 fork 是同义的。一个 fork 会在新的仓库中创建，而不是在生产代码的同一个仓库中，通常在你的个人资料下创建。要进行
    fork：
- en: 1b. In the top right, click on Fork
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 1b. 在右上角，点击 Fork
- en: '![](../Images/aabe81e12567cf1fc0e97073fa2cb706.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aabe81e12567cf1fc0e97073fa2cb706.png)'
- en: Image by the author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 2b. Wait for the files to copy
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 2b. 等待文件复制完成
- en: '![](../Images/630c695aff8621eea6cd0b9d1599a985.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/630c695aff8621eea6cd0b9d1599a985.png)'
- en: Image by the author
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 3b. The new fork will be selected
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 3b. 将选择新的 fork
- en: '![](../Images/d1d7c3809adeb2a04cf0988553e5c71d.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1d7c3809adeb2a04cf0988553e5c71d.png)'
- en: Image by the author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Adding Commits (enhancing the code/adding features)
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加提交（增强代码/添加功能）
- en: 'To make commits to the code, you will clone the repository to your local computer.
    This copies the code for you to work on before sending the updates back to the
    repository. To clone the repository to your local machine:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要对代码进行提交，你需要将仓库克隆到你的本地计算机。这会复制代码供你工作，然后再将更新发送回仓库。要将仓库克隆到本地计算机：
- en: Click clone or download.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 clone 或 download。
- en: '![](../Images/5ceaf9ad18aad68cac50c1fc848e7a60.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5ceaf9ad18aad68cac50c1fc848e7a60.png)'
- en: Image by the author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Click open with GitHub desktop.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 点击用 GitHub Desktop 打开。
- en: '![](../Images/07acf88809c00832c3162bfa8664ba7e.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/07acf88809c00832c3162bfa8664ba7e.png)'
- en: Image by the author
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: If you don’t have GitHub Desktop, click download GitHub Desktop.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有 GitHub Desktop，请点击下载 GitHub Desktop。
- en: '![](../Images/c8c6cca6e38fcf5a1b904b1cefa5c627.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c8c6cca6e38fcf5a1b904b1cefa5c627.png)'
- en: Image by the author
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: GitHub desktop will ask where to clone the repository to on your local machine.
    This is the Local path field.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Desktop 会询问将仓库克隆到本地计算机的哪个位置。这是本地路径字段。
- en: '![](../Images/6bf04bf406e9f8bafbc1a50272752676.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6bf04bf406e9f8bafbc1a50272752676.png)'
- en: Image by the author
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Click on the branch and select the newly created branch. This will update the
    files on your local machine with any updates on that branch and make it the active
    one to add commits to.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 点击分支并选择新创建的分支。这将更新你本地计算机上的文件，使其与该分支上的更新一致，并将其设为添加提交的活动分支。
- en: '![](../Images/f3202aa31e053e9bd96cb480bc43801a.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f3202aa31e053e9bd96cb480bc43801a.png)'
- en: Image by the author
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: To make changes, open the directory you chose when cloning and make changes
    with your text editor or integrated development environment (IDE) as normal. Save
    the files.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行更改，请打开你在克隆时选择的目录，并使用你的文本编辑器或集成开发环境（IDE）进行更改。保存文件。
- en: Return to GitHub Desktop. GitHub Desktop is constantly scanning the repository
    folder tree and will see any changes you make. These changes will show up on the
    left pane. The right pane will preview changes to the selected file (certain file
    types won’t preview).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 GitHub Desktop。GitHub Desktop 会不断扫描仓库文件夹树，并会看到你所做的任何更改。这些更改会显示在左侧窗格中。右侧窗格将预览选定文件的更改（某些文件类型不会预览）。
- en: '![](../Images/e9843042959d6dcb82ac53305d44bf32.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e9843042959d6dcb82ac53305d44bf32.png)'
- en: Image by the author
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Each time you make a set of related changes, commit those changes to your repository.
    Remember to add comments to the commits so that people can easily identify what
    was changed. The upper text box is for a quick description, but if you have more
    notes to add about the commit, put them in the larger description text box.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你进行一组相关更改时，都要将这些更改提交到你的仓库。记得为提交添加评论，以便人们可以轻松识别出所做的更改。上面的文本框用于快速描述，如果你有更多关于提交的备注，请将它们放在较大的描述文本框中。
- en: With changes made and comments added, commit the changes.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行更改并添加评论后，提交更改。
- en: '![](../Images/1ea3c17098321267a72fa0ba6c5f0e09.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ea3c17098321267a72fa0ba6c5f0e09.png)'
- en: Image by the author
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Committing changes only saves them on the local files. To push the changes back
    to the GitHub server, click push origin. If there are commits made that haven’t
    been pushed back to the server, a message will appear on the right pane that says **Push
    xx commit(s) to the origin remote**. The origin is just a name for where the repository
    was cloned from.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 提交更改仅将它们保存到本地文件。要将更改推送回 GitHub 服务器，请点击推送 origin。如果有未推送到服务器的提交，右侧窗格上会出现一条消息，显示**推送
    xx 次提交到 origin 远程**。origin 只是一个表示从中克隆了仓库的名称。
- en: '![](../Images/9cc725a65a3afc5a37efc05a0025d4be.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9cc725a65a3afc5a37efc05a0025d4be.png)'
- en: Image by the author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Open a Pull Request
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开拉取请求
- en: Navigate to your repository on the GitHub server. Make sure you are on the correct
    branch. If you created a new branch on the original repository, navigate there.
    If you had to fork the repository, navigate to the repository on your personal
    profile.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 GitHub 服务器上的你的仓库。确保你在正确的分支上。如果你在原始仓库中创建了新分支，请导航到该分支。如果你必须 fork 仓库，请导航到你个人资料上的仓库。
- en: On the **Pull requests** tab, click on **New pull request**.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在**拉取请求**标签下，点击**新建拉取请求**。
- en: '![](../Images/8a3f66c066514f4951860cd8817ced77.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8a3f66c066514f4951860cd8817ced77.png)'
- en: Image by the author
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Select the new branch as the one to compare, and **click create pull request**.
    In our case, the pull request is automatically populated with our commit comments.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 选择新分支作为比较的分支，然后**点击创建拉取请求**。在我们的案例中，拉取请求会自动填充我们的提交评论。
- en: '![](../Images/3a5b0d3de61eeca6143b9f3fa5622809.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3a5b0d3de61eeca6143b9f3fa5622809.png)'
- en: Image by the author
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Code Review
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码审查
- en: Code review helps make sure that the code we are adding or changing is correct
    and has been reviewed and approved by multiple people. Whether you have access
    to a repository or not, you should always have reviewers check the changes. If
    there are any questions, go over them as a team.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 代码审查有助于确保我们添加或更改的代码是正确的，并已被多个人审查和批准。无论你是否有权限访问仓库，你总是应该让审查者检查更改。如果有任何问题，请作为团队进行讨论。
- en: Pull requests show up under the Pull request tab of the repository. Each pull
    request has a conversation, commits, and files changed tabs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 拉取请求会显示在仓库的拉取请求标签下。每个拉取请求都有对话、提交和文件更改标签。
- en: Conversation is where people can add questions or comments about the code. You
    can format your comments and tag people and issues in your comments.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对话区是人们可以添加关于代码的问题或评论的地方。你可以格式化你的评论，并在评论中标记人员和问题。
- en: Commits shows all of the commits and comments made in the pull request
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 提交显示拉取请求中所有的提交和评论
- en: Files changed shows which files were changed, added, or deleted along with line
    by line comparisons of code where available
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 更改的文件显示了哪些文件被更改、添加或删除，并提供了逐行的代码比较（如果有的话）
- en: '![](../Images/fd0fd1d02f26feb7ac4e6ea318ca4942.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fd0fd1d02f26feb7ac4e6ea318ca4942.png)'
- en: Image by the author
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Merge the Pull Request
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合并拉取请求
- en: In my case, my main branch was changed while I was working on the new branch.
    This is why there are messages saying that there are conflicts to resolve. Clicking
    the Resolve conflicts button opens an editor. It will show the version of the
    file from each branch, allowing you to delete one and keep the other, or create
    some version of both.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的情况下，我在新分支上工作时，主分支发生了更改。这就是为什么会有冲突需要解决的消息。点击“解决冲突”按钮会打开一个编辑器。它将显示每个分支的文件版本，允许你删除一个并保留另一个，或者创建两个版本的组合。
- en: '![](../Images/fabb8f794787fcb4b1cabde497d343aa.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fabb8f794787fcb4b1cabde497d343aa.png)'
- en: Image by the author
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: In this case, the version from the main branch is correct. The changes from
    the other branch and the separators can be deleted. The conflict can be marked
    as resolved, and committed to the merge.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，来自主分支的版本是正确的。可以删除其他分支的更改和分隔符。可以将冲突标记为已解决，并提交合并。
- en: '![](../Images/fbac7272763c6caff22817bfa1a2f691.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fbac7272763c6caff22817bfa1a2f691.png)'
- en: Image by the author
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: With code review and conflicts out of the way, the pull request can be merged.
    Once again there will be an option to give a comment on what the merge accomplishes.
    After merging, the code will be part of the master or main branch!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 解决了代码审查和冲突之后，可以合并拉取请求。再次会有一个选项来评论合并完成的内容。合并后，代码将成为主分支或主分支的一部分！
- en: '![](../Images/38cde93dd454a07a5b3ecbf7da8fd8d5.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/38cde93dd454a07a5b3ecbf7da8fd8d5.png)'
- en: Image by the author
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: And there you have it, you now know how to complete the most basic version control
    tasks using GitHub and GitHub Desktop!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你现在知道如何使用 GitHub 和 GitHub Desktop 完成最基本的版本控制任务了！
- en: '*I write about data science, analytics, and programming concepts. You can connect
    with me on *[*Medium*](https://realdrewdata.medium.com/lists)*, *[*Twitter*](https://twitter.com/RealDrewData)*,
    and *[*LinkedIn*](https://www.linkedin.com/in/realdrewdata/)*.*'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '*我写关于数据科学、分析和编程概念的文章。你可以在*[*Medium*](https://realdrewdata.medium.com/lists)*、*[*Twitter*](https://twitter.com/RealDrewData)*
    和 *[*LinkedIn*](https://www.linkedin.com/in/realdrewdata/)* 上与我联系。*'
- en: Further Reading
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[**Understanding the GitHub flow**](https://guides.github.com/introduction/flow/)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[**理解 GitHub 工作流**](https://guides.github.com/introduction/flow/)'
- en: When you're working on a project, you're going to have a bunch of different
    features or ideas in progress at any given…
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在项目中工作时，你会有一堆不同的功能或想法在进行中…
- en: '[**Version Control with Git**](https://swcarpentry.github.io/git-novice/)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '[**使用 Git 的版本控制**](https://swcarpentry.github.io/git-novice/)'
- en: Wolfman and Dracula have been hired by Universal Missions (a space services
    spinoff from Euphoric State University) to…
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Wolfman 和 Dracula 被 Universal Missions（一个来自 Euphoric State University 的空间服务公司）雇佣来…
- en: '[**What is version control | Atlassian Git Tutorial**](https://www.atlassian.com/git/tutorials/what-is-version-control)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[**什么是版本控制 | Atlassian Git 教程**](https://www.atlassian.com/git/tutorials/what-is-version-control)'
- en: Version control, also known as source control, is the practice of tracking and
    managing changes to software code…
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制，也称为源代码控制，是跟踪和管理软件代码更改的实践…
- en: '**Bio: [Drew Seewald](https://realdrewdata.medium.com/)** is a Data Scientist
    at Mercedes-Benz Financial Services. Follow Drew on Twitter [@RealDrewData](https://twitter.com/realdrewdata?lang=en)
    or connect on [LinkedIn](https://www.linkedin.com/in/realdrewdata/).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Drew Seewald](https://realdrewdata.medium.com/)** 是梅赛德斯-奔驰金融服务公司的数据科学家。可以在推特上关注Drew
    [@RealDrewData](https://twitter.com/realdrewdata?lang=en) 或在 [LinkedIn](https://www.linkedin.com/in/realdrewdata/)
    上联系他。'
- en: '[Original](https://towardsdatascience.com/github-desktop-for-data-scientists-b9d8a3afc5ea).
    Reposted with permission.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/github-desktop-for-data-scientists-b9d8a3afc5ea)。经允许转载。'
- en: '**Related:**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[GitHub Copilot Open Source Alternatives](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub Copilot 开源替代品](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
- en: '[3 Data Acquisition, Annotation, and Augmentation Tools](/2021/08/3-data-labeling-synthesizing-augmentation-tools.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 个数据获取、标注和增强工具](/2021/08/3-data-labeling-synthesizing-augmentation-tools.html)'
- en: '[GitHub Copilot and the Rise of AI Language Models in Programming Automation](/2021/09/github-copilot-rise-ai-language-models-programming-automation.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub Copilot 和编程自动化中 AI 语言模型的崛起](/2021/09/github-copilot-rise-ai-language-models-programming-automation.html)'
- en: More On This Topic
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Learn Data Science From These GitHub Repositories](https://www.kdnuggets.com/2022/12/learn-data-science-github-repositories.html)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从这些 GitHub 仓库学习数据科学](https://www.kdnuggets.com/2022/12/learn-data-science-github-repositories.html)'
- en: '[Learn Data Engineering From These GitHub Repositories](https://www.kdnuggets.com/2023/02/learn-data-engineering-github-repositories.html)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从这些 GitHub 仓库学习数据工程](https://www.kdnuggets.com/2023/02/learn-data-engineering-github-repositories.html)'
- en: '[GitHub CLI for Data Science Cheat Sheet](https://www.kdnuggets.com/2023/03/github-cli-data-science-cheat-sheet.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学 GitHub CLI 备忘单](https://www.kdnuggets.com/2023/03/github-cli-data-science-cheat-sheet.html)'
- en: '[Optimizing Data Analytics: Integrating GitHub Copilot in Databricks](https://www.kdnuggets.com/optimizing-data-analytics-integrating-github-copilot-in-databricks)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化数据分析：在 Databricks 中集成 GitHub Copilot](https://www.kdnuggets.com/optimizing-data-analytics-integrating-github-copilot-in-databricks)'
- en: '[The Top 5 Alternatives to GitHub for Data Science Projects](https://www.kdnuggets.com/the-top-5-alternatives-to-github-for-data-science-projects)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学项目中 GitHub 的 5 个最佳替代方案](https://www.kdnuggets.com/the-top-5-alternatives-to-github-for-data-science-projects)'
- en: '[10 GitHub Repositories to Master Data Engineering](https://www.kdnuggets.com/10-github-repositories-to-master-data-engineering)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握数据工程的 10 个 GitHub 仓库](https://www.kdnuggets.com/10-github-repositories-to-master-data-engineering)'
