["```py\nwith all_users as (\n    SELECT date_part('month', time_id) AS month,\n           count(DISTINCT user_id) as all_users\n    FROM fact_events\n    GROUP BY month),\nnew_users as (\n    SELECT date_part('month', new_user_start_date) AS month,\n           count(DISTINCT user_id) as new_users\n    FROM\n         (SELECT user_id,\n           min(time_id) as new_user_start_date\n          FROM fact_events\n          GROUP BY user_id) sq\n    GROUP BY month\n)\nSELECT\n  au.month,\n  new_users / all_users::decimal as share_new_users,\n  1- (new_users / all_users::decimal) as share_existing_users\nFROM all_users au\nJOIN new_users nu ON nu.month = au.month\n\n```", "```py\npublic ListNode addTwoNumbers(ListNode l1, ListNode l2) {\n    ListNode dummyHead = new ListNode(0);\n    ListNode p = l1, q = l2, curr = dummyHead;\n    int carry = 0;\n    while (p != null || q != null) {\n        int x = (p != null) ? p.val : 0;\n        int y = (q != null) ? q.val : 0;\n        int sum = carry + x + y;\n        carry = sum / 10;\n        curr.next = new ListNode(sum % 10);\n        curr = curr.next;\n        if (p != null) p = p.next;\n        if (q != null) q = q.next;\n    }\n    if (carry > 0) {\n        curr.next = new ListNode(carry);\n    }\n    return dummyHead.next;\n}\n\n```"]