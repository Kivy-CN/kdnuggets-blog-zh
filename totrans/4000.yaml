- en: How to Convert JSON Data into a DataFrame with Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将 JSON 数据转换为 Pandas DataFrame
- en: 原文：[https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas](https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas](https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas)
- en: '![How to Convert JSON Data into a DataFrame with Pandas](../Images/fa74b95a9eefac11201e50b260ab9d9f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何将 JSON 数据转换为 Pandas DataFrame](../Images/fa74b95a9eefac11201e50b260ab9d9f.png)'
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供 | DALLE-3 和 Canva
- en: If you've ever had the chance to work with data, you've probably come across
    the need to load JSON files (short for JavaScript Object Notation) into a Pandas
    DataFrame for further analysis. JSON files store data in a format that is clear
    for people to read and also simple for computers to understand. However, JSON
    files can sometimes be complicated to navigate through. Therefore, we load them
    into a more structured format like DataFrames - that is set up like a spreadsheet
    with rows and columns.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经有机会处理数据，你可能会遇到将 JSON 文件（即 JavaScript 对象表示法的缩写）加载到 Pandas DataFrame 中以便进一步分析的需求。JSON
    文件以一种人类易读且计算机易懂的格式存储数据。然而，JSON 文件有时可能会复杂且难以浏览。因此，我们将其加载到像 DataFrames 这样的更结构化的格式中——这种格式像电子表格一样有行和列。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持你所在组织的
    IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I will show you two different ways to convert JSON data into a Pandas DataFrame.
    Before we discuss these methods, let's suppose this dummy nested JSON file that
    I'll use as an example throughout this article.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我将展示两种将 JSON 数据转换为 Pandas DataFrame 的不同方法。在讨论这些方法之前，让我们假设一个示例的嵌套 JSON 文件，整个文章中我将使用这个文件作为示例。
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above-mentioned JSON data represents a list of books, where each book has
    a title, author, and a list of reviews. Each review, in turn, has a reviewer (with
    a name and location) and a rating and comments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 JSON 数据表示一本书的列表，每本书都有一个标题、作者和一系列评论。每条评论又有一个评论者（包括姓名和位置）、评分和评论。
- en: 'Method 1: Using the `json.load()` and `pd.DataFrame()` functions'
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 1：使用 `json.load()` 和 `pd.DataFrame()` 函数
- en: 'The easiest and most straightforward approach is to use the built-in `json.load()`
    function to parse our JSON data. This will convert it into a Python dictionary,
    and we can then create the DataFrame directly from the resulting Python data structure.
    However, it has a problem - it can only handle single nested data. So, for the
    above case, if you only use these steps with this code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单且直接的方法是使用内置的 `json.load()` 函数来解析我们的 JSON 数据。这将把数据转换为一个 Python 字典，然后我们可以直接从这个
    Python 数据结构创建 DataFrame。然而，它有一个问题 - 只能处理单层嵌套数据。因此，对于上述情况，如果仅使用这些步骤和这段代码：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Your output might look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你的输出可能如下所示：
- en: '**Output:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![json.load() output](../Images/d6a0bc76237fccb0517b96e06c256f35.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![json.load() 输出](../Images/d6a0bc76237fccb0517b96e06c256f35.png)'
- en: 'In the reviews column, you can see the entire dictionary. Therefore, if you
    want the output to appear correctly, you have to manually handle the nested structure.
    This can be done as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在评论列中，你可以看到整个字典。因此，如果你希望输出显示正确，你必须手动处理嵌套结构。这可以通过以下方法完成：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Updated Output:**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新后的输出：**'
- en: '![json.load() output](../Images/71a41ceca3f53ee5d93f7cb39d2a0373.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![json.load() 输出](../Images/71a41ceca3f53ee5d93f7cb39d2a0373.png)'
- en: Here, we are using list comprehension to create a flat list of dictionaries,
    where each dictionary contains the book information and the corresponding review.
    We then create the Pandas DataFrae using this.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用列表推导式创建一个平坦的字典列表，其中每个字典包含书籍信息和相应的评论。然后，我们使用此数据创建 Pandas DataFrame。
- en: However the issue with this approach is that it demands more manual effort to
    manage the nested structure of the JSON data. So, what now? Do we have any other
    option?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 但这种方法的问题在于，它需要更多的手动工作来管理JSON数据的嵌套结构。那么，现在怎么办？我们还有其他选项吗？
- en: Totally! I mean, come on. Given that we're in the 21st century, facing such
    a problem without a solution seems unrealistic. Let's see the other approach.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 完全正确！我的意思是，来吧。考虑到我们已经进入21世纪，面对没有解决方案的问题似乎不切实际。让我们看看另一种方法。
- en: 'Method 2 (Recommended): Using the `json_normalize()` function'
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法2（推荐）：使用`json_normalize()`函数
- en: 'The `json_normalize()` function from the Pandas library is a better way to
    manage nested JSON data. It automatically flattens the nested structure of the
    JSON data, creating a DataFrame from the resulting data. Let''s take a look at
    the code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas库中的`json_normalize()`函数是管理嵌套JSON数据的更好方法。它会自动将JSON数据的嵌套结构展平，从而创建一个DataFrame。让我们看一下代码：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output:**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![json.load() output](../Images/635999752d1f4cf50ebdfcd910803e24.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![json.load() 输出](../Images/635999752d1f4cf50ebdfcd910803e24.png)'
- en: 'The `json_normalize()` function takes the following parameters:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`json_normalize()`函数接受以下参数：'
- en: '**data:** The input data, which can be a list of dictionaries or a single dictionary.
    In this case, it''s the data dictionary loaded from the JSON file.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据：** 输入数据，可以是字典的列表或单个字典。在这种情况下，它是从JSON文件加载的数据字典。'
- en: '**record_path:** The path in the JSON data to the records you want to normalize.
    In this case, it''s the ''reviews'' key.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**record_path：** JSON数据中要规范化的记录路径。在这种情况下，它是''reviews''键。'
- en: '**meta:** Additional fields to include in the normalized output from the JSON
    document. In this case, we''re using the ''title'' and ''author'' fields. Note
    that columns in metadata usually appear at the end. This is how this function
    works. As far as the analysis is concerned, it doesn''t matter, but for some magical
    reason, you want these columns to appear before. Sorry, but you have to do them
    manually.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元数据：** 需要包括在从JSON文档规范化输出中的附加字段。在这种情况下，我们使用了''title''和''author''字段。请注意，元数据中的列通常出现在最后。这就是该函数的工作方式。就分析而言，这并不重要，但出于某种神奇的原因，你希望这些列出现在前面。抱歉，你得手动处理它们。'
- en: '**errors:** The error handling strategy, which can be ''ignore'', ''raise'',
    or ''warn''. We have set it to ''raise'', so if there are any errors during the
    normalization process, it will raise an exception.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误：** 错误处理策略，可以是''ignore''、''raise''或''warn''。我们将其设置为''res''，因此如果在规范化过程中出现任何错误，它将引发异常。'
- en: Wrapping Up
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: Both of these methods have their own advantages and use cases, and the choice
    of method depends on the structure and complexity of the JSON data. If the JSON
    data has a very nested structure, the `json_normalize()` function might be the
    most suitable option, as it can handle the nested data automatically. If the JSON
    data is relatively simple and flat, the `pd.read_json()` function might be the
    easiest and most straightforward approach.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法各有优缺点，选择哪种方法取决于JSON数据的结构和复杂性。如果JSON数据有非常嵌套的结构，`json_normalize()`函数可能是最合适的选择，因为它可以自动处理嵌套数据。如果JSON数据相对简单和扁平，`pd.read_json()`函数可能是最简单直接的方法。
- en: When dealing with large JSON files, it's crucial to think about memory usage
    and performance since loading the whole file into memory might not work. So, you
    might have to look into other options like streaming the data, lazy loading, or
    using a more memory-efficient format like Parquet.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 处理大型JSON文件时，考虑内存使用和性能至关重要，因为将整个文件加载到内存中可能行不通。因此，你可能需要考虑其他选项，如流式传输数据、延迟加载或使用更节省内存的格式，如Parquet。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一位机器学习工程师和技术作家，对数据科学以及人工智能与医学的交叉领域充满深厚的热情。她共同编写了电子书《利用 ChatGPT 提高生产力》。作为
    2022 年亚太地区 Google Generation Scholar，她倡导多样性和学术卓越。她还被认定为 Teradata 技术多样性学者、Mitacs
    Globalink 研究学者和哈佛 WeCode 学者。Kanwal 是变革的热心倡导者，她创办了 FEMCodes，以赋能女性进入 STEM 领域。'
- en: More On This Topic
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Convert Python Dict to JSON: A Tutorial for Beginners](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将 Python 字典转换为 JSON：初学者教程](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
- en: '[How to Use ChatGPT to Convert Text into a PowerPoint Presentation](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 ChatGPT 将文本转换为 PowerPoint 演示文稿](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
- en: '[Pandas vs. Polars: A Comparative Analysis of Python''s Dataframe Libraries](https://www.kdnuggets.com/pandas-vs-polars-a-comparative-analysis-of-python-dataframe-libraries)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pandas 与 Polars：Python 数据框库的比较分析](https://www.kdnuggets.com/pandas-vs-polars-a-comparative-analysis-of-python-dataframe-libraries)'
- en: '[How to Implement Complex Filters on DataFrame Columns with Pandas](https://www.kdnuggets.com/how-to-implement-complex-filters-on-dataframe-columns-with-pandas)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Pandas 中对数据框列实现复杂的过滤器](https://www.kdnuggets.com/how-to-implement-complex-filters-on-dataframe-columns-with-pandas)'
- en: '[How to Process a DataFrame with Millions of Rows in Seconds](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在几秒钟内处理包含百万行的数据框](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
- en: '[How to Convert an RGB Image to Grayscale](https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何将 RGB 图像转换为灰度图像](https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html)'
