- en: The Last SQL Guide for Data Analysis You’ll Ever Need
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/10/last-sql-guide-data-analysis-ever-need.html](https://www.kdnuggets.com/2019/10/last-sql-guide-data-analysis-ever-need.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Muhsin Warfa](https://www.linkedin.com/in/muhsinwarfa/), Systems Developer/Technical
    Writer**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/487f5a9c2b02e6c40b505f658dda8f7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Tobias Fischer](https://unsplash.com/@tofi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/database?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: By 2020, it’s estimated that 1.7 MB of data will be created every second for
    every person on earth. Absurd! Data is going to be the new oil of our digital
    era. The growth of data creates a need to make meaning out of it. This has spawned
    many professions which manage and analyze data to make smarter business decisions.
    Many of these professions require you to be proficient in managing data in databases.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common way to manage data is with a relational database management system.
    A relational database stores data in a tabular form consisting of rows and columns.
    These databases usually consist of both data and metadata. Data is the information
    stored in the tables while metadata is the data that describes the data’s structure
    or data types within the database.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to communicate with these databases directly, we use SQL, which is
    an abbreviation for Structured Query Language. SQL is used to perform tasks such
    as creating, reading, updating, and deleting tables in a database.
  prefs: []
  type: TYPE_NORMAL
- en: SQL is a declarative and domain-specific language mostly used by business analysts,
    software engineers, data analysts, and many other professions that make use of
    data. You don’t need to be a programmer or know programming languages such as
    Python to master SQL. SQL’s syntax is similar to English. With a little bit of
    memorization of simple syntax, you’re ready to work comfortably with database
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: “Declarative programming is where you say what you want without having to say
    how to do it. With procedural programming, you have to specify exact steps to
    get the result.” — Stack Overflow
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My objective in this article is to get you comfortable with SQL and to cover
    SQL concepts individually while simultaneously coming up with queries to handle
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Database Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this tutorial, we won’t use an RDBMS (relational database management system),
    but rather use a test database to write our own queries. We’ll edit the test database
    using W3school’s SQL editor found [here](https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all).
    It requires no installation so we can just focus on writing queries.
  prefs: []
  type: TYPE_NORMAL
- en: '**Cheatsheet**'
  prefs: []
  type: TYPE_NORMAL
- en: Since SQL is a declarative language, it’ll help immensely if we memorize the
    SQL statements. Having a reference guide nearby at all times will help quickly
    grasp the keywords used in querying the tables. [Here](https://docs.google.com/spreadsheets/d/1_HkCVTOpkaDPzg4dmFLJRYQhODKiVBRdX7F3GUI6O3s/edit?usp=sharing) is
    a spreadsheet of keywords that I created for reference. Remember, half the battle
    of leashing this SQL beast is memorizing/knowing the keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Definition Language (DDL)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of our queries will involve some form of *action* to be performed on a
    table. Actions fall into four categories: creating, inserting, updating and deleting
    tables.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a table**'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we want to create tables in a database, we use the `CREATE TABLE`statement.
    Type the following code into the editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This creates a table named `countries` that has four columns. The minimum that
    is required to create a table in SQL is to state the column name, the data types,
    and length. You can, of course, have more characteristics such as `Not Null` meaning
    an empty value won't be entered in the table, but these are optional attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Insert a table**'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating a table we can insert rows by using the `INSERT INTO`method
    statement. Type in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This statement adds `Somali` as a new country into the `countries` table. It
    is a good practice to specify the column names and values when inserting rows
    into the table.
  prefs: []
  type: TYPE_NORMAL
- en: '**Read a table**'
  prefs: []
  type: TYPE_NORMAL
- en: When we want to look up the data that we stored in the database, we use the `Select` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This statement returns a table that displays the row we just inserted with our
    insert statement. The `*` wildcard means “show me all the rows in the table.”
    If you want your table to only display the `Population` column we remove the asterisk
    and replace it with its column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Update a table**'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to modify existing records in a table we use the `UPDATE` statement
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This statement updates the`country_name` column in the row with the `country_id` of `1` to `Kenya`.
    We have to specify which country ID, because we only want to change that row.
    If we remove the `WHERE` statement, SQL will assume that we want to update all
    the rows in the table.
  prefs: []
  type: TYPE_NORMAL
- en: '**Delete records in a table**'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to delete all rows in a table, we would then use a `DELETE FROM` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you want to delete the table instead of all records, we use the `DROP TABLE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** This removes the whole table from the database and can result in
    loss of data!'
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we’re only interested in part of the data in the table we can filter the
    table. We have multiple statements that allow us to filter our tables. Filters
    basically select rows that match certain criteria and return the results back
    as a filtered data set. Filtering tables does not mutate the original table.
  prefs: []
  type: TYPE_NORMAL
- en: '**WHERE**'
  prefs: []
  type: TYPE_NORMAL
- en: The `WHERE` clause is used to filter records. In our editor we have a table
    called `Customers`. If we want to filter customers that are from country `“USA”` we
    use the `WHERE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**AND, OR, and NOT**'
  prefs: []
  type: TYPE_NORMAL
- en: In our previous example, we had only one condition which was “where country
    is USA.” We can also combine multiple conditions using `AND`, `OR`, and `NOT`.
    For example, if you want customers from the USA or Brazil, you use the `OR` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**ORDER BY**'
  prefs: []
  type: TYPE_NORMAL
- en: Most of the time when we filter the table, the data set we get back is unsorted.
    We can sort this filtered unsorted data set using an `ORDER BY` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This will order the filtered results alphabetically . If we want to sort it
    descending, we replace `ASC` with `DESC`.
  prefs: []
  type: TYPE_NORMAL
- en: '**BETWEEN**'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we would like to select rows whose values satisfy a specific range.
    We use the `BETWEEN` statement to select and choose the range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The statement above filters products whose price falls between 10 and 20.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** In a `BETWEEN` operation, the lower bound and upper bound are both
    inclusive in nature.'
  prefs: []
  type: TYPE_NORMAL
- en: '**LIKE**'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we want to filter the table with a specific pattern in mind. To do
    so we use the `LIKE` statement.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The SQL statement above filters the table to show only customers whose name
    begin with the letter A. If you bring the percentage sign forward it would filter
    customers whose name ends with the letter A.
  prefs: []
  type: TYPE_NORMAL
- en: '**GROUP BY**'
  prefs: []
  type: TYPE_NORMAL
- en: '`GROUP BY` groups the filtered result set into groups. Think of it as a summary
    group for each column data set.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This statement counts the number of customers from each country, then groups
    it into countries. `GROUP BY` is mostly used with aggregate functions which we’ll
    talk about in detail later in the article.
  prefs: []
  type: TYPE_NORMAL
- en: '**HAVING**'
  prefs: []
  type: TYPE_NORMAL
- en: '`HAVING` was introduced because the `WHERE` statement doesn’t work with aggregate
    functions; it only deals with direct values in the database.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This statement does the same thing as the last example. The only difference
    is that we only include countries that have more than three customers.
  prefs: []
  type: TYPE_NORMAL
- en: Joins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine you’d like to know which customer ordered what products. If a database
    follows a proper database normalization technique, then products, customers, and
    orders would be in separate tables. If we want to see which customer ordered what
    products, we would then have to look at the customer ID inside the order table,
    then go to the customer table and see the products purchases, then use the product
    ID to look up the product table. As you can see, this is a huge headache if were
    to repeat it multiple times. In order to do this more easily, SQL has a statement
    called `JOIN`**.**This clause is used to combine two or more rows of tables based
    on a shared related column.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02d6e47454a5298a90e09de2b21b7a3c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**INNER JOIN**'
  prefs: []
  type: TYPE_NORMAL
- en: '`INNER JOIN`, commonly known as just “`JOIN`,**”** is used to merge related
    tables at a shared column into a single table.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The statement above returns the column’s order ID and customer names. We join
    the table orders (left) and customers (right), but only rows that have matching
    customer IDs. Re-read this sentence while looking at the inner join Venn diagram
    and hopefully this will be easier to grasp.
  prefs: []
  type: TYPE_NORMAL
- en: '**LEFT JOIN**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `LEFT JOIN` statement, we join the left table (customer) and right table
    (order) returns all rows from the left table and matching records from the right
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '**RIGHT JOIN**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`RIGHT JOIN` returns all rows from the right table and matched records from
    the left table. This returns all employees and any order they might have placed.'
  prefs: []
  type: TYPE_NORMAL
- en: '**OUTER JOIN**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Also known as `FULL OUTER JOIN` and is used to combine all rows from one or
    more tables. No rows will be left out, all will be included in the joined tables.
  prefs: []
  type: TYPE_NORMAL
- en: SQL Aggregate Functions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A function is a set of procedures that takes an input and spits out an output.
    A SQL function is basically a set of SQL statements that takes an input, performs
    SQL actions on the input, then gives back the results as an output.
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of functions in SQL:* set functions* and *value functions*.
    Any function that manipulates rows of data in a table and returns a single value
    is called a set function. Programmers usually call them aggregate functions because
    they take rows in the table and return an aggregation of information.
  prefs: []
  type: TYPE_NORMAL
- en: '**MIN**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This SQL function returns the least expensive price of all the products in the
    Products table.
  prefs: []
  type: TYPE_NORMAL
- en: '**MAX**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This SQL function returns the most expensive price of all the products in the
    Products table.
  prefs: []
  type: TYPE_NORMAL
- en: '**AVG**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This SQL function returns the average price of all the products in the Products
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '**COUNT**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This returns the number of products in the Products table.
  prefs: []
  type: TYPE_NORMAL
- en: SUM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This returns the sum of all the orders in the Order Details table.
  prefs: []
  type: TYPE_NORMAL
- en: Indexes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, all the queries that we’ve looked at are basic queries. Practically
    speaking, the queries that we execute in our day to day life usually consist of
    a combination of multiple SQL statements or functions. When operations are complex,
    this will lower the execution time of the queries.
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, SQL has something called *indexing* which allows for faster lookup
    time. An index is a data structure that has a pointer to the data in a table.
    Without an index, the searching data in a table would be *linear*meaning it would
    go through one row after the other. Indexing is well suited for tabular data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating an index**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This will create an index to look up data from the column quickly. It is to
    be noted that indexes are not stored in the table and are invisible to the naked
    eye. We most often use indexes when we have a lot of data retrieval on tables.
  prefs: []
  type: TYPE_NORMAL
- en: Database Transactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Transactions* are a collection of of SQL statements that must be executed
    for a successful operation. Transactions are all or nothing kinds of operations.
    If all but one operation fails, we consider that transaction to have failed.'
  prefs: []
  type: TYPE_NORMAL
- en: A common example of the use of transactions is transferring money from one account
    to another in a bank. In order for a transfer to be successful money must be removed
    from account A and added to account B. Otherwise, we would roll back the transaction
    to start fresh. When the transaction is complete we say that the transaction is *committed.* This
    ensures the database maintains data integrity and consistency.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn about database transactions in-depth, I suggest you take
    a look at [this](https://www.youtube.com/watch?v=is03uRYFgqc) excellent video
    explanation of database transactions.
  prefs: []
  type: TYPE_NORMAL
- en: Database Triggers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all SQL queries are individual and isolated. Sometimes we would like to
    perform an action on table A when a different event happens to another table B.
    This is where we get to use a *database trigger***.**
  prefs: []
  type: TYPE_NORMAL
- en: A database trigger is a bunch of SQL statements that are run when a specific
    action occurs within a database. Triggers are defined to run when changes are
    made to a table’s data, mostly before or after actions such as `DELETE`, `UPDATE`,
    and `CREATE`. The most common use case of database triggers is to validate input
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Tips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All SQL reserved words are uppercase. Everything else (tables, columns, etc.)
    is lowercase.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Divide your queries into multiple lines instead of one long statement in a single
    line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can’t add a column at a specific position in a table, so be cautious when
    designing the tables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be aware when using `AS` alias statements; the columns are not being renamed
    in the table. The aliases only appear in the dataset result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SQL evaluates these clauses in the order: `FROM`, `WHERE`, `GROUP BY`, `HAVING`,
    and finally, `SELECT`. Therefore, each clause receives the filtered results of
    the previous filter. It would look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can generate powerful queries from endless permutations of the SQL statements
    we saw in this article. Remember, the best way to cement the concepts and get
    better at SQL is by practicing and solving SQL problems. Some of the examples
    above were inspired by [W3School ](https://www.w3schools.com/). You can find more
    interactive exercises in websites like [hackerrank](http://hackerrank.com/) and [LeetCode](https://leetcode.com/) which
    have engaging UI to help you study longer.
  prefs: []
  type: TYPE_NORMAL
- en: '**The more you practice the better you’ll be, the harder you train the great
    in you they’ll see.*** — Alcurtis Turner*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Wishing you peace and prosperity!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Muhsin Warfa](https://www.linkedin.com/in/muhsinwarfa/)** builds and
    designs full stack web software applications for your organizational needs. As
    a Software product developer, he has worked on multiple projects ranging from
    commercial apps to student in-course apps having worked on all the life cycles
    of development from conceptualization and ideas to testing and deployment of apps.
    If you like this article, feel free to [reach out and stay connected on LinkedIn](https://www.linkedin.com/in/muhsinwarfa/?locale=de_DE)
    and tune in for more articles/posts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/better-programming/the-last-sql-guide-for-data-analysis-youll-ever-need-17ae10fa4a6f).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top Handy SQL Features for Data Scientists](/2019/08/top-handy-sql-feature-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering SQL for Data Science — 2019 Edition](/2019/05/7-steps-mastering-sql-data-science-2019-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Is SQL needed to be a data scientist?](/2019/07/sql-needed-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
