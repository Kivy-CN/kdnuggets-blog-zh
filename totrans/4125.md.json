["```py\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn import tree\n\n# Load iris\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n# Build decision tree classifier\ndt = tree.DecisionTreeClassifier(criterion='entropy')\ndt.fit(X, y)\n```", "```py\ndotfile = open(\"dt.dot\", 'w')\ntree.export_graphviz(dt, out_file=dotfile, feature_names=iris.feature_names)\ndotfile.close()\n```", "```py\nfrom sklearn.tree import _tree\n\ndef tree_to_code(tree, feature_names):\n\t\"\"\"\n\tOutputs a decision tree model as a Python function\n\n\tParameters:\n\t-----------\n\ttree: decision tree model\n\t\tThe decision tree to represent as a function\n\tfeature_names: list\n\t\tThe feature names of the dataset used for building the decision tree\n\t\"\"\"\n\n\ttree_ = tree.tree_\n\tfeature_name = [\n\t\tfeature_names[i] if i != _tree.TREE_UNDEFINED else \"undefined!\"\n\t\tfor i in tree_.feature\n\t]\n\tprint(\"def tree({}):\".format(\", \".join(feature_names)))\n\n\tdef recurse(node, depth):\n\t\tindent = \"  \" * depth\n\t\tif tree_.feature[node] != _tree.TREE_UNDEFINED:\n\t\t\tname = feature_name[node]\n\t\t\tthreshold = tree_.threshold[node]\n\t\t\tprint(\"{}if {} <= {}:\".format(indent, name, threshold))\n\t\t\trecurse(tree_.children_left[node], depth + 1)\n\t\t\tprint(\"{}else:  # if {} > {}\".format(indent, name, threshold))\n\t\t\trecurse(tree_.children_right[node], depth + 1)\n\t\telse:\n\t\t\tprint(\"{}return {}\".format(indent, tree_.value[node]))\n\n\trecurse(0, 1)\n```", "```py\ntree_to_code(dt, list(iris.feature_names))\n```", "```py\ndef tree(sepal length (cm), sepal width (cm), petal length (cm), petal width (cm)):\n  if petal length (cm) <= 2.45000004768:\n    return [[ 50\\.   0\\.   0.]]\n  else:  # if petal length (cm) > 2.45000004768\n    if petal width (cm) <= 1.75:\n      if petal length (cm) <= 4.94999980927:\n        if petal width (cm) <= 1.65000009537:\n          return [[  0\\.  47\\.   0.]]\n        else:  # if petal width (cm) > 1.65000009537\n          return [[ 0\\.  0\\.  1.]]\n      else:  # if petal length (cm) > 4.94999980927\n        if petal width (cm) <= 1.54999995232:\n          return [[ 0\\.  0\\.  3.]]\n        else:  # if petal width (cm) > 1.54999995232\n          if petal length (cm) <= 5.44999980927:\n            return [[ 0\\.  2\\.  0.]]\n          else:  # if petal length (cm) > 5.44999980927\n            return [[ 0\\.  0\\.  1.]]\n    else:  # if petal width (cm) > 1.75\n      if petal length (cm) <= 4.85000038147:\n        if sepal length (cm) <= 5.94999980927:\n          return [[ 0\\.  1\\.  0.]]\n        else:  # if sepal length (cm) > 5.94999980927\n          return [[ 0\\.  0\\.  2.]]\n      else:  # if petal length (cm) > 4.85000038147\n        return [[  0\\.   0\\.  43.]]\n```", "```py\ndef tree_to_pseudo(tree, feature_names):\n\t\"\"\"\n\tOutputs a decision tree model as if/then pseudocode\n\n\tParameters:\n\t-----------\n\ttree: decision tree model\n\t\tThe decision tree to represent as pseudocode\n\tfeature_names: list\n\t\tThe feature names of the dataset used for building the decision tree\n\t\"\"\"\n\n\tleft = tree.tree_.children_left\n\tright = tree.tree_.children_right\n\tthreshold = tree.tree_.threshold\n\tfeatures = [feature_names[i] for i in tree.tree_.feature]\n\tvalue = tree.tree_.value\n\n\tdef recurse(left, right, threshold, features, node, depth=0):\n\t\tindent = \"  \" * depth\n\t\tif (threshold[node] != -2):\n\t\t\tprint(indent,\"if ( \" + features[node] + \" <= \" + str(threshold[node]) + \" ) {\")\n\t\t\tif left[node] != -1:\n\t\t\t\trecurse (left, right, threshold, features, left[node], depth+1)\n\t\t\t\tprint(indent,\"} else {\")\n\t\t\t\tif right[node] != -1:\n\t\t\t\t\trecurse (left, right, threshold, features, right[node], depth+1)\n\t\t\t\tprint(indent,\"}\")\n\t\telse:\n\t\t\tprint(indent,\"return \" + str(value[node]))\n\n\trecurse(left, right, threshold, features, 0)\n```", "```py\ntree_to_pseudo(dt, list(iris.feature_names))\n```", "```py\n if ( petal length (cm) <= 2.45000004768 ) {\n   return [[ 50\\.   0\\.   0.]]\n } else {\n   if ( petal width (cm) <= 1.75 ) {\n     if ( petal length (cm) <= 4.94999980927 ) {\n       if ( petal width (cm) <= 1.65000009537 ) {\n         return [[  0\\.  47\\.   0.]]\n       } else {\n         return [[ 0\\.  0\\.  1.]]\n       }\n     } else {\n       if ( petal width (cm) <= 1.54999995232 ) {\n         return [[ 0\\.  0\\.  3.]]\n       } else {\n         if ( petal length (cm) <= 5.44999980927 ) {\n           return [[ 0\\.  2\\.  0.]]\n         } else {\n           return [[ 0\\.  0\\.  1.]]\n         }\n       }\n     }\n   } else {\n     if ( petal length (cm) <= 4.85000038147 ) {\n       if ( sepal length (cm) <= 5.94999980927 ) {\n         return [[ 0\\.  1\\.  0.]]\n       } else {\n         return [[ 0\\.  0\\.  2.]]\n       }\n     } else {\n       return [[  0\\.   0\\.  43.]]\n     }\n   }\n }\n\n```"]