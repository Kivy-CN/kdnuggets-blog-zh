- en: Building a Recommendation System with Hugging Face Transformers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/building-a-recommendation-system-with-hugging-face-transformers](https://www.kdnuggets.com/building-a-recommendation-system-with-hugging-face-transformers)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Building a Recommendation System with Hugging Face Transformers](../Images/a61a757863330ab6619d9dd0c0bdd909.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image by jcomp on Freepik](https://www.freepik.com/free-vector/man-who-thinks-idea-is-admired-by-thumbs-up_11879378.htm#fromView=search&page=1&position=31&uuid=f9d98eb0-c0b9-4681-a4df-3026685c1dea)'
  prefs: []
  type: TYPE_NORMAL
- en: We have relied on software in our phones and computers in the modern era. Many
    applications, such as e-commerce, movie streaming, game platforms, and others,
    have changed how we live, as these applications make things easier. To make things
    even better, the business often provides features that allow recommendations from
    the data.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The basis of recommendation systems is to predict what the user might interested
    in based on the input. The system would provide the closest items based on either
    the similarity between the items (content-based filtering) or the behavior (collaborative
    filtering).
  prefs: []
  type: TYPE_NORMAL
- en: With many approaches to the recommendation system architecture, we can use the
    [Hugging Face Transformers](https://huggingface.co/docs/transformers/en/index)
    package. If you didn’t know, Hugging Face Transformers is an open-source Python
    package that allows APIs to easily access all the pre-trained NLP models that
    support tasks such as text processing, generation, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: This article will use the Hugging Face Transformers package to develop a simple
    recommendation system based on embedding similarity. Let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Develop a Recommendation System with Hugging Face Transformers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we start the tutorial, we need to install the required packages. To
    do that, you can use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You can select the suitable version for your environment via their website for
    the [Torch](https://pytorch.org/get-started/locally/) installation.
  prefs: []
  type: TYPE_NORMAL
- en: As for the dataset example, we would use the Anime recommendation dataset example
    from [Kaggle](https://www.kaggle.com/datasets/CooperUnion/anime-recommendations-database?select=anime.csv).
  prefs: []
  type: TYPE_NORMAL
- en: Once the environment and the dataset are ready, we will start the tutorial.
    First, we need to read the dataset and prepare them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we read the dataset with Pandas and dropped all the missing
    data. Then, we create a feature called "description" that contains all the information
    from the available data, such as name, genre, type, and episode number. The new
    column would become our basis for the recommendation system. It would be better
    to have more complete information, such as the anime plot and summary, but let’s
    be content with this one for now.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we would use Hugging Face Transformers to load an embedding model and
    transform the text into a numerical vector. Specifically, we would use sentence
    embedding to transform the whole sentence.
  prefs: []
  type: TYPE_NORMAL
- en: The recommendation system would be based on the embedding from all the anime
    “description” we will perform soon. We would use the cosine similarity method,
    which measures the similarity of two vectors. By measuring the similarity between
    the anime “description” embedding and the user's query input embedding, we can
    get precise items to recommend.
  prefs: []
  type: TYPE_NORMAL
- en: The embedding similarity approach sounds simple, but it can be powerful compared
    to the classic recommendation system model, as it can capture the semantic relationship
    between words and provide contextual meaning for the recommendation process.
  prefs: []
  type: TYPE_NORMAL
- en: We would use the embedding model sentence transformers from the Hugging Face
    for this tutorial. To transform the sentence into embedding, we would use the
    following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Try the embedding process and see the vector result with the following code.
    However, I would not show the output as it’s pretty long.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To make things easier, Hugging Face maintains a Python package for embedding
    sentence transformers, which would minimize the whole transformation process in
    3 lines of code. Install the necessary package using the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then, we can transform the whole anime “description” with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With the embedding database is ready, we would create a function to take user
    input and perform cosine similarity as a recommendation system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that everything is ready, we can try the recommendation system. Here is
    an example of acquiring the top five anime recommendations from the user input
    query.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The result is all of the comedy anime, as we want the funny anime. Most of them
    also include anime, which is suitable to watch with friends from the genre. Of
    course, the recommendation would be even better if we had more detailed information.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Recommendation System is a tool for predicting what users might be interested
    in based on the input. Using Hugging Face Transformers, we can build a recommendation
    system that uses the embedding and cosine similarity approach. The embedding approach
    is powerful as it can account for the text's semantic relationship and contextual
    meaning.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**[Cornellius Yudha
    Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**** is a data science
    assistant manager and data writer. While working full-time at Allianz Indonesia,
    he loves to share Python and data tips via social media and writing media. Cornellius
    writes on a variety of AI and machine learning topics.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Fine-Tune BERT for Sentiment Analysis with Hugging Face Transformers](https://www.kdnuggets.com/how-to-fine-tune-bert-sentiment-analysis-hugging-face-transformers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use GPT for Generating Creative Content with Hugging Face…](https://www.kdnuggets.com/how-to-use-gpt-for-generating-creative-content-with-hugging-face-transformers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Hugging Face Transformers for Emotion Detection in Text](https://www.kdnuggets.com/using-hugging-face-transformers-for-emotion-detection-in-text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Recommender System for Amazon Products with Python](https://www.kdnuggets.com/2023/02/building-recommender-system-amazon-products-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ten Key Lessons of Implementing Recommendation Systems in Business](https://www.kdnuggets.com/2022/07/ten-key-lessons-implementing-recommendation-systems-business.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Build a Real-Time Recommendation Engine Using Graph Databases](https://www.kdnuggets.com/2023/08/build-realtime-recommendation-engine-graph-databases.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
