["```py\nselectbox = st.sidebar.selectbox(SELECT_BOX_TEXT,\n                       [None] + healthy_sidebar_list + sick_sidebar_list)\n\nfile_buffer = st.sidebar.file_uploader(\"\", type=SUPPORTED_IMG_TYPE)\n```", "```py\nif selectbox:\n        predict_for_selectbox(selectbox, my_bar, latest_iteration)\n        dict_of_img_lists = load_image_pool()\n\nif file_buffer:\n        predict_for_file_buffer(file_buffer, my_bar, latest_iteration)\n```", "```py\n@st.cache(suppress_st_warning=True)\ndef get_prediction(img):\n    with open(CLASS_NAME_PATH, \"r\") as textfile:\n        class_names = textfile.read().split(',')\n\n    img_expand = np.expand_dims(img, 0)\n\n    model = tf.keras.models.load_model(PROD_MODEL_PATH)\n    predictions = model.predict(img_expand)\n    display_prediction(class_names[np.rint(predictions[0][0]).astype(int)])\n```", "```py\nlatest_iteration = st.empty()\nmy_bar = st.progress(0)\n\ndef display_prediction(pred):\n    if pred == 'sick':\n        st.warning(WARNING_MSG)\n    else:\n        st.success(SUCCESS_MSG)\n```", "```py\ndef predict_for_selectbox(selectbox, my_bar, latest_iteration):\n    img_class = selectbox.split()[0]\n    img_position = int(selectbox.split()[-1]) - 1\n    img = dict_of_img_lists[img_class][img_position]\n    my_bar.progress(50)\n\n    latest_iteration.text('Processing image')\n    get_prediction(img)\n    my_bar.progress(100)\n```", "```py\ndef predict_for_file_buffer(file_buffer, my_bar, latest_iteration):\n    latest_iteration.text('Loading image')\n    img = load_n_resize_image(file_buffer)\n    markdown_format(MID_FONT, \"Your chest X-ray\")\n    st.image(img, use_column_width=True)\n    my_bar.progress(50)\n\n    latest_iteration.text('Processing image')\n    get_prediction(img)\n    my_bar.progress(100)\n```", "```py\nimport os\nif \"DYNO\" in os.environ and os.path.isdir(\".dvc\"):\n    print(\"Running DVC\")\n    os.system(\"dvc config cache.type copy\")\n    os.system(\"dvc config core.no_scm true\")\n    if os.system(f\"dvc pull {PROD_MODEL_PATH} {HEALTHY_IMAGE_ONE_PATH} {HEALTHY_IMAGE_TWO_PATH} {SICK_IMAGE_ONE_PATH} {SICK_IMAGE_TWO_PATH}\") != 0:\n        exit(\"dvc pull failed\")\n    os.system(\"rm -r .dvc .apt/usr/lib/dvc\")\n```", "```py\ngit add .\ngit commit -m \"first deployment\" \ngit push heroku master\n```"]