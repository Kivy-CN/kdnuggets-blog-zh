["```py\npip install pytorch-lightning\n```", "```py\nimport torch\nfrom torch import nn\nimport pytorch_lightning as pl\nfrom torch.utils.data import DataLoader, random_split\nfrom torch.nn import functional as F\nfrom torchvision.datasets import MNIST\nfrom torchvision import datasets, transforms\nimport os\n\nclass PLClassifier(pl.LightningModule):\n    def __init__(self):\n        super(PLClassifier, self).__init__()\n        self.input = torch.nn.Linear(28 * 28, 128)\n        self.hidden1 = torch.nn.Linear(128, 256)\n        self.hidden2 = torch.nn.Linear(256, 10)\n\n    def forward(self, x):\n        batch, channels, width, height = x.size()\n        x = x.view(batch, -1)\n        x = self.input(x)\n        x = torch.relu(x)\n        x = self.hidden1(x)\n        x = torch.relu(x)\n        x = self.hidden2(x)\n        x = torch.log_softmax(x, dim=1)\n        return x\n\n    def training_step(self, batch, batch_idx):\n        x, y = train_batch\n        logits = self.forward(x)\n        loss = F.nll_loss(logits, y)\n        self.log('train_loss', loss)\n        return loss\n\n    def validation_step(self, batch, batch_idx):\n        x, y = train_batch\n        logits = self.forward(x)\n        loss = F.nll_loss(logits, y)\n        self.log('val_loss', loss)\n\n    def configure_optimizers(self):\n        opt = torch.optim.Adam(self.parameters(), lr=1e-3)\n        return opt\n\n# initialize and train\nmodel = PLClassifier()\ntrainer = pl.Trainer()\n\ntrainer.fit(model)\n```", "```py\ntrain = MNIST(os.getcwd(), train=True, download=True)\ntest = MNIST(os.getcwd(), train=False, download=True) \n```", "```py\ntrain, val = random_split(train, [50000, 10000])\n```"]