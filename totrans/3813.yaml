- en: The 5 Rules For Good Data Science Project Documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/12/5-rules-good-data-science-project-documentation.html](https://www.kdnuggets.com/2022/12/5-rules-good-data-science-project-documentation.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![The 5 Rules For Good Data Science Project Documentation](../Images/a75cb618c0d6df2db54bb9cca3764126.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: So you finished your project, got some excellent data, processed it, cleaned
    it, trained your model, applied it to your data, and got terrific results. That's
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Not really.
  prefs: []
  type: TYPE_NORMAL
- en: Often, the software is developed for others to use, so once the programmer or
    data scientist finishes building the project, they will need to do the task that
    most of us hate…
  prefs: []
  type: TYPE_NORMAL
- en: Documenting the code.
  prefs: []
  type: TYPE_NORMAL
- en: In software engineering, in general, writing documentation refers to the process
    where the programmer of the main developer of the code writes a script explaining
    in detail what the code does, its goal, and how it achieves that. The main reason
    programmers hate to write documentation is that, as a programmer, you would instead
    write code than an explanation of it.
  prefs: []
  type: TYPE_NORMAL
- en: Not just that, for documentation to be good, it needs to be simple for anyone
    to understand, even if they are not professional programmers. And as we all know
    — maybe not all — programmers are good at writing code but bad at explaining its
    theory.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. A Good Description
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the beginning of your documentation, there must be a short, concise description.
    This description should be only a few sentences long and clearly explain what
    the project does and how it does it.
  prefs: []
  type: TYPE_NORMAL
- en: You already used some open-source projects in your previous work, so here are
    some excellent descriptions from well-known data science projects.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Pandas**:](https://pandas.pydata.org/) "pandas is a fast, powerful, flexible
    and easy to use open source data analysis and manipulation tool, built on top
    of the [Python](https://www.python.org/) programming language." — Pandas documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Matplotlib**:](https://matplotlib.org/) "Matplotlib is a comprehensive library
    for creating static, animated, and interactive visualizations in Python. Matplotlib
    makes easy things easy and hard things possible." — Matplotlib documentation'
  prefs: []
  type: TYPE_NORMAL
- en: '[**Bokeh**](https://docs.bokeh.org/en/latest/): "Bokeh is an interactive visualization
    library for modern web browsers. It provides elegant, concise construction of
    versatile graphics and affords high-performance interactivity over large or streaming
    datasets. Bokeh can help anyone who would like to quickly and easily make interactive
    plots, dashboards, and data applications." — Bokeh documentation.'
  prefs: []
  type: TYPE_NORMAL
- en: 2.  A Clear and Concise Installation Guide
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you develop a project, you often host it on a remote server for people
    to use. They will probably need to clone it from GitHub, install it using pip,
    or download it from the official website.
  prefs: []
  type: TYPE_NORMAL
- en: This might seem straightforward for experienced programmers; after all, they
    installed many libraries during their careers. However, what if a new programmer
    is trying to use your project? They may need a little help.
  prefs: []
  type: TYPE_NORMAL
- en: After describing your project and what it does, the following should be a "Getting
    Started" section. That section's primary goal is to provide the user with simple
    steps to installing the project and running a small example proving it was installed
    correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, it often contains the dependencies — other libraries or modules —
    that this project depends on to function properly.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Tutorials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At this point, the user knows what the project does and how to install it. Now,
    it's time to dig deep and start using it. Good documentation will often contain
    tutorials about the different use cases of the project and how to get it done
    using the project's inner functions.
  prefs: []
  type: TYPE_NORMAL
- en: Many tutorials don't equal good documentation; it's not about quantity but quality.
    However, some projects have a few tutorials highlighting the project's usage,
    clearly stating how it can be extended to apply to other cases. This means the
    user only needs to read 2 or 3 tutorials to understand the project's code's inner
    workings.
  prefs: []
  type: TYPE_NORMAL
- en: The most used tutorial format is to have a few lines of explanation followed
    by some code, more description, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Detailed API Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part usually comes to mind when you hear — or read — the word documentation.
    This section is where you go through all functions, public variables, and classes
    within your project, explaining its functionality, attributes briefly, and returns.
  prefs: []
  type: TYPE_NORMAL
- en: The brief explanation is often two or three sentences and directly explains
    the purpose of the function/class, showing its type, the common types of its attributes,
    and its return in the form of a function header. This header often includes an
    embedded link to the source code's function/class definition (wherever it is hosted).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Architecture Explanation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, your documentation has explained how the inner core of your project
    works, the main functions, and some use cases. The last section of the documentation
    should explain why your project works the way it does.
  prefs: []
  type: TYPE_NORMAL
- en: Not all code contains this section; it is, after all, not as essential as the
    other sections we went through. However, this section may be necessary to make
    your project open source. In this case, this section can guide the contributors
    to how they may add new functions to the code without affecting its core functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, more than writing robust code is required; to prove your capabilities
    and how well you're familiar with the project and the field, you will need to
    provide well-written documentation and highlight how your code work and how it
    can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Producing good documentation depends on many factors; in this article, we went
    through 5 sections that, if included, will add value to your documentation and
    make it as helpful as possible.
  prefs: []
  type: TYPE_NORMAL
- en: You must think the term "good documentation" is very vague and depends on the
    person. For example, I might see some documentation as good and helpful, while
    you may think the opposite. If we can't set rigid rules to what makes good documentation,
    *how can we decide if documentation is good?*
  prefs: []
  type: TYPE_NORMAL
- en: The simple answer to that is feedback. Most modern documentation often includes
    a "*give us feedback*" section. Users can contact the programmer about missing
    or inaccurate information in the documentation to make it better and more helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Sara Metwalli](https://www.linkedin.com/in/sara-a-metwalli/)** is a Ph.D.
    candidate at Keio University researching ways to test and debug quantum circuits.
    I am an IBM research intern and Qiskit advocate helping build a more quantum future.
    I am also a writer on Medium, Built-in, She Can Code, and KDN writing articles
    about programming, data science, and tech topics. I am also a lead in the Woman
    Who Code Python international chapter, a train enthusiast, a traveler, and a photography
    lover.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Data Quality: The Good, The Bad, and The Ugly](https://www.kdnuggets.com/2022/01/data-quality-good-bad-ugly.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[When Would Ensemble Techniques be a Good Choice?](https://www.kdnuggets.com/2022/07/would-ensemble-techniques-good-choice.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What makes a visualization good?](https://www.kdnuggets.com/2022/10/sphere-makes-visualization-good.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Your Features Are Important? It Doesn’t Mean They Are Good](https://www.kdnuggets.com/your-features-are-important-it-doesnt-mean-they-are-good)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning is Not Like Your Brain Part Seven: What Neurons…](https://www.kdnuggets.com/2022/08/machine-learning-like-brain-part-seven-neurons-good.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[From Data Collection to Model Deployment: 6 Stages of a Data…](https://www.kdnuggets.com/2023/01/data-collection-model-deployment-6-stages-data-science-project.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
