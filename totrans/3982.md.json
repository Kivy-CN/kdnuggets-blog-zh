["```py` ```", "```py    Where <method> is the specific formatting function you want to apply, and <arguments> are the parameters required by that function. The Styler object returns the formatted dataframe without changing the original one. There are two approaches to using conditional formatting with the Styler object:    *   **Built-in Styles:** To apply quick formatting styles to your dataframe *   **Custom Stylization:** Create your own formatting rules for the Styler object and pass them through one of the following methods (`Styler.applymap`: element-wise or `Styler.apply`: column-/row-/table-wise)    Now, we will cover some examples of both approaches to help you enhance the visualization of your data.    ## Examples: Built-in-Styles    Let’s create a dummy stock price dataset with columns for Date, Cost Price, Satisfaction Score, and Sales Amount to demonstrate the examples below:    ```", "```py    **Output:**  ![Unformatted Dataframe](../Images/15fc76c92d11a45123d147ea7b658a94.png) Original Unformatted Dataframe  ### 1\\. Highlighting Maximum and Minimum Values    We can use `highlight_max` and `highlight_min` functions to highlight the maximum and minimum values in a column or row. For column set axis=0 like this:    ```", "```py    **Output:**     ![Max & Min Values](../Images/6a4236a60bc20497169452e52e534e91.png) Max & Min Values  ### 2\\. Applying Color Gradients    Color gradients are an effective way to visualize the values in your data. In this case, we will apply the gradient to satisfaction scores using the colormap set to 'viridis'. This is a type of color coding that ranges from purple (low values) to yellow (high values). Here is how you can do this:    ```", "```py    **Output:**  ![Colormap - viridis](../Images/fa241491f182afa61960458e3e801b40.png) Colormap - viridis  ### 3\\. Highlighting Null or Missing Values    When we have large datasets, it becomes difficult to identify null or missing values. You can use conditional formatting using the built-in `df.style.highlight_null` function for this purpose. For example, in this case, the sales amount of the 6th entry is missing. You can highlight this information like this:    ```", "```py    **Output:**     ![Highlighting Missing Values](../Images/6607099267b8f80f864fe6fd061d5803.png) Highlighting Missing Values  ## Examples: Custom Stylization Using `apply()` & `applymap()`    ### 1\\.  Conditional Formatting for Outliers    Suppose that we have a housing dataset with their prices, and we want to highlight the houses with outlier prices (i.e., prices that are significantly higher or lower than the other neighborhoods). This can be done as follows:    ```", "```py    **Output:**  ![Highlighting Outliers](../Images/4a5ae4a1dde8b02da05ba9ce0194ba76.png) Highlighting Outliers  ### 2\\. Highlighting Trends    Consider that you run a company and are recording your sales daily. To analyze the trends, you want to highlight the days when your daily sales increase by 5% or more. You can achieve this using a custom function and the apply method in pandas. Here’s how:    ```", "```py    **Output:**  ![Highlight data-lazy-src=](../Images/c34cd0782d5c04bc3eab8470c1095a41.png)  ### 3\\. Highlighting Correlated Columns    Correlated columns are important because they show relationships between different variables. For example, if we have a dataset containing age, income, and spending habits and our analysis shows a high correlation (close to 1) between age and income, then it suggests that older people generally have higher incomes. Highlighting correlated columns helps to visually identify these relationships. This approach becomes extremely helpful as the dimensionality of your data increases. Let's explore an example to better understand this concept:    ```", "```py    **Output:**  ![Correlated Columns](../Images/3d28987fc33dc0bd053090e9ce7f26eb.png) Correlated Columns  ## Wrapping Up    These are just some of the examples I showed as a starter to up your game of data visualization. You can apply similar techniques to various other problems to enhance the data visualization, such as highlighting duplicate rows, grouping into categories and selecting different formatting for each category, or highlighting peak values. Additionally, there are many other CSS options you can explore in the [official documentation](https://pandas.pydata.org/pandas-docs/version/1.0/user_guide/style.html). You can even define different properties on hover, like magnifying text or changing color. Check out the \"[Fun Stuff](https://pandas.pydata.org/pandas-docs/version/1.0/user_guide/style.html#Fun-stuff)\" section for more cool ideas. This article is part of my Pandas series, so if you enjoyed this, there's plenty more to explore. Head over to my author page for more tips, tricks, and tutorials.    **[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)**** Kanwal is a machine learning engineer and a technical writer with a profound passion for data science and the intersection of AI with medicine. She co-authored the ebook \"Maximizing Productivity with ChatGPT\". As a Google Generation Scholar 2022 for APAC, she champions diversity and academic excellence. She's also recognized as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded FEMCodes to empower women in STEM fields.     ### More On This Topic    *   [Five Ways to do Conditional Filtering in Pandas](https://www.kdnuggets.com/2022/12/five-ways-conditional-filtering-pandas.html) *   [7 AI-Powered Tools to Enhance Productivity for Data Scientists](https://www.kdnuggets.com/2023/02/7-aipowered-tools-enhance-productivity-data-scientists.html) *   [Enhance Your Python Coding Style with Ruff](https://www.kdnuggets.com/enhance-your-python-coding-style-with-ruff) *   [6 ChatGPT Prompts to Enhance your Productivity at Work](https://www.kdnuggets.com/6-chatgpt-prompts-to-enhance-your-productivity-at-work) *   [Revamping Data Visualization: Mastering Time-Based Resampling in Pandas](https://www.kdnuggets.com/revamping-data-visualization-mastering-timebased-resampling-in-pandas) *   [7 Pandas Plotting Functions for Quick Data Visualization](https://www.kdnuggets.com/7-pandas-plotting-functions-for-quick-data-visualization) ```"]