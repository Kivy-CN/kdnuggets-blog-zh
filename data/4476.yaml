- en: 'Complex logic at breakneck speed: Try Julia for data science'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂逻辑以飞快速度：尝试使用 Julia 进行数据科学
- en: 原文：[https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html](https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html](https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '![](../Images/5d6555e62b617548bbed3402d2839b51.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d6555e62b617548bbed3402d2839b51.png)'
- en: 'NOTE: I am building a Github repo with Julia fundamentals and data science
    examples. [**Check it out here**](https://github.com/tirthajyoti/Julia-data-science).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我正在建立一个包含 Julia 基础和数据科学示例的 Github 仓库。 [**点击这里查看**](https://github.com/tirthajyoti/Julia-data-science)。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: '*“Walks like Python, runs like C”* — this has been said about Julia, a modern
    programming language, **focused on scientific computing**,and having an ever-increasing
    base of followers and developers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*“像 Python 一样行走，像 C 一样运行”* — 这是对 Julia 的描述，这是一种现代编程语言，**专注于科学计算**，并且拥有越来越多的追随者和开发者。'
- en: Julia, a general-purpose programming language, is made specifically for scientific
    computing. It is a [**flexible**](https://docs.julialang.org/en/v1/manual/types/)[**dynamically-typed**](https://android.jlelse.eu/magic-lies-here-statically-typed-vs-dynamically-typed-languages-d151c7f95e2b) language
    with **performance comparable to traditional statically-typed languages**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是一种通用编程语言，专门用于科学计算。它是一种[**灵活的**](https://docs.julialang.org/en/v1/manual/types/)[**动态类型**](https://android.jlelse.eu/magic-lies-here-statically-typed-vs-dynamically-typed-languages-d151c7f95e2b)语言，**性能可与传统静态类型语言相媲美**。
- en: Julia tries to provide a single environment productive enough for prototyping
    and efficient for industrial-grade applications. It is a multi-paradigm language
    encompassing both [functional](https://codeburst.io/a-beginner-friendly-intro-to-functional-programming-4f69aa109569) and
    object-oriented programming components, although the **majority of the users like
    its functional programming aspects**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 试图提供一个足够高效的环境，既适合原型设计，又适合工业级应用。它是一种多范式语言，包含[函数式](https://codeburst.io/a-beginner-friendly-intro-to-functional-programming-4f69aa109569)和面向对象编程组件，尽管**大多数用户喜欢它的函数式编程方面**。
- en: The inception of this programming language can be traced back to 2009\. The
    lead developers Alan Edelman, Jeff Bezanson, Stefan Karpinski, and Viral Shah
    started working on creating a language that can be used for better and faster
    numerical computing. The developers were able to launch a commercial release in
    February 2012.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 该编程语言的起源可以追溯到 2009 年。首席开发者 Alan Edelman、Jeff Bezanson、Stefan Karpinski 和 Viral
    Shah 开始致力于创建一种可以用于更好、更快数值计算的语言。开发者们在 2012 年 2 月推出了商业版本。
- en: Why is it awesome for data science?
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么它对数据科学如此出色？
- en: '![](../Images/10599c0ed770099e3221c65b266532a5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10599c0ed770099e3221c65b266532a5.png)'
- en: Julia is an excellent choice for data science and machine learning work, for
    much of the same reason, that it is a great choice for fast numerical computing.
    The advantages include,
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是数据科学和机器学习工作的优秀选择，因为它在快速数值计算方面也表现出色。其优势包括，
- en: '**A smooth learning curve**, and the extensive underlying functionality. Especially,
    if you are already familiar with the more popular data science languages like
    Python and R, picking up Julia will be a walk in the park.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑的学习曲线**，以及广泛的基础功能。尤其是，如果你已经熟悉像 Python 和 R 这样的流行数据科学语言，掌握 Julia 将轻松自如。'
- en: '**Performance**: Originally, Julia is a compiled language, while Python and
    R are interpreted. This means that the Julia code is executed on the processor
    as a direct executable code.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：Julia 最初是编译语言，而 Python 和 R 是解释型语言。这意味着 Julia 代码直接在处理器上执行作为可执行代码。'
- en: '**GPU Support**: It is directly related to performance. GPU support is transparently
    controlled by some packages such as `TensorFlow.jl` and `MXNet.jl`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU 支持**：这与性能直接相关。GPU 支持由一些包如 `TensorFlow.jl` 和 `MXNet.jl` 透明地控制。'
- en: '**Distributed and Parallel Computing Support**: Julia supports parallel and
    distributed computing transparently using many topologies. And there is also support
    for coroutines, like in Go programming language, which are helper functions that
    work in parallel on the Multicore architecture. Extensive support for threads
    and synchronization is primarily designed to maximize performance and reduce the
    risk of race conditions.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式和并行计算支持**：Julia 通过多种拓扑结构透明地支持并行和分布式计算。同时，它也支持协程，例如 Go 编程语言中的协程，这些协程在多核架构上并行工作。对线程和同步的广泛支持主要旨在最大化性能并减少竞争条件的风险。'
- en: '**Rich data science and visualization libraries**: Julia community understands
    that it was conceived as a go-to language for data scientists and statisticians.
    Therefore, high-performance libraries focusing on data science and analytics are
    always in development.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丰富的数据科学和可视化库**：Julia 社区了解到它被设想为数据科学家和统计学家的首选语言。因此，专注于数据科学和分析的高性能库正在不断开发中。'
- en: '**Teamwork (with other languages/frameworks)**: Julia plays really really well
    with other established languages and frameworks for data science and machine learning.
    Using `PyCall` or `RCall` one can use native Python or R code inside a Julia script.
    The `Plots` package works with various backend including `Matplotlib` and `Plotly`.
    Popular machine learning libraries like `Scikit-learn` or `TensorFlow` already
    have Julia equivalent or wrappers.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与其他语言/框架的协作**：Julia 与其他成熟的数据科学和机器学习语言及框架配合得非常好。使用 `PyCall` 或 `RCall` 可以在
    Julia 脚本中使用原生的 Python 或 R 代码。`Plots` 包支持包括 `Matplotlib` 和 `Plotly` 在内的各种后端。流行的机器学习库如
    `Scikit-learn` 或 `TensorFlow` 已经有 Julia 等效的实现或封装。'
- en: Julia is an excellent choice for data science and machine learning work, for
    much of the same reason, that it is a great choice for fast numerical computing.
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Julia 是数据科学和机器学习工作的绝佳选择，原因之一是它在快速数值计算方面表现出色。
- en: Some benchmarking with Python scripting
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一些与 Python 脚本的基准测试
- en: 'There is a lot of controversy with regard to the question: “**Is Julia faster
    than Python?**”'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于“**Julia 比 Python 更快吗？**”的问题存在很多争议。
- en: Like almost anything else in life, the answer is: ***It depends.***
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像生活中的几乎所有事情一样，答案是：***这要看情况。***
- en: The official Julia language portal has some data about it, although the benchmark
    tests were done with respect to various languages other than Python.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Julia 语言门户有一些相关数据，尽管基准测试是针对除了 Python 之外的各种语言进行的。
- en: '[**The Julia Language**](https://julialang.org/benchmarks/)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Julia 语言**](https://julialang.org/benchmarks/)'
- en: In fact, the question almost always assumes that one is talking about the comparison
    between Julia and some kind of optimized/vectorized Python code (like used by
    Numpy functions). Otherwise, native Julia is almost always faster than Python
    because of compiled code execution, and [native Python is way slower than Numpy-type
    execution](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个问题几乎总是涉及 Julia 与某种优化/矢量化的 Python 代码（如 Numpy 函数使用的代码）的比较。否则，由于编译代码执行，原生
    Julia 几乎总是比 Python 快，而 [原生 Python 远慢于 Numpy 类型的执行](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f)。
- en: Numpy is seriously fast. It is a library with super-optimized functions (many
    of them pre-compiled), with a dedicated focus of giving Python users (particularly
    useful for data scientists and ML engineers) near-C speed. Simple Numpy functions
    like sum or standard deviation [can match or beat equivalent Julia implementations
    closely (particularly for large input array size](https://github.com/kbarbary/website/blob/master/posts/julia-vs-numpy-arrays.rst)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 的速度确实非常快。它是一个超优化函数的库（许多函数已经预编译），专注于为 Python 用户（尤其是数据科学家和 ML 工程师）提供接近 C
    的速度。简单的 Numpy 函数如 sum 或标准差 [可以与等效的 Julia 实现相媲美或超越（尤其是对于大型输入数组）](https://github.com/kbarbary/website/blob/master/posts/julia-vs-numpy-arrays.rst)。
- en: However, to take full advantage of Numpy functions, you have to think in terms
    of vectorizing your code. And it is not easy at all to write complex logic in
    a program in the form vectorized code all the time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，为了充分利用 Numpy 函数，你必须从向量化代码的角度来思考。而且将复杂的逻辑写成向量化代码并不容易。
- en: Therefore, the speed comparison with Julia should be done for situations where
    somewhat complex logic is applied to an array for some kind of processing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，与 Julia 的速度比较应在对数组进行某种处理时应用较复杂的逻辑时进行。
- en: In this article, we will show a couple of such examples to illustrate the point.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将展示几个这样的例子以说明这一点。
- en: However, to take full advantage of Numpy functions, you have to think in terms
    of vectorizing your code
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 但是，为了充分利用 Numpy 函数，你必须从向量化代码的角度来思考。
- en: Julia for-loop beats Python for-loop handsomely
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Julia 的 for 循环比 Python 的 for 循环表现得更好
- en: Let’s compute the sum of a million random integers to test this out.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算一百万个随机整数的总和来测试一下。
- en: Julia code is below. The function takes a little over **1 millisecond.**
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 代码如下。该函数耗时稍微超过 **1 毫秒**。
- en: '![](../Images/f00f6dcec5f39578a8e4d64e816ea9c5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f00f6dcec5f39578a8e4d64e816ea9c5.png)'
- en: Python code is below. We kept the same functional nature of the code (Julia
    is a functional language) to keep the comparison fair and easy to verify. The
    for-loop takes **over 200 milliseconds**!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python 代码如下。我们保持了代码的相同功能性质（Julia 是函数式语言），以保持比较公平且易于验证。for 循环耗时 **超过 200 毫秒**！
- en: '![](../Images/892c5d3f6b017da7b0182bd6a7a05834.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/892c5d3f6b017da7b0182bd6a7a05834.png)'
- en: But how does a Julia array compare to Numpy array?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么 Julia 数组与 Numpy 数组相比如何？
- en: In the code above, we created an array variable. This is the most useful data
    structure in Julia for data science as it can be directly used for statistical
    computation or linear algebra operations, right out of the box.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了一个数组变量。这是 Julia 中最有用的数据结构，因为它可以直接用于统计计算或线性代数操作，开箱即用。
- en: No need for a separate library or anything. Julia arrays are order-of-magnitude
    faster than Python lists.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要额外的库或其他东西。Julia 数组的速度比 Python 列表快几个数量级。
- en: But, Numpy arrays are fast and let’s benchmark the same summing operation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但 Numpy 数组很快，让我们基准测试一下相同的求和操作。
- en: Julia code below using the `sum()` function on the array. It takes ~**451 msec** (faster
    than the for-loop approach but only half the time).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 代码使用 `sum()` 函数对数组进行求和。它需要约 **451 毫秒**（比 for 循环方法快，但仅为一半时间）。
- en: '![](../Images/5cf9fb542ccb1d3cb22357d95d349654.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cf9fb542ccb1d3cb22357d95d349654.png)'
- en: And here is Numpy execution,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Numpy 执行的结果，
- en: '![](../Images/d0d136a018840ab08c222a0606783be8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0d136a018840ab08c222a0606783be8.png)'
- en: Wow! **353 msec** which beats the Julia speed and almost 628 times faster than
    naive Python for-loop code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！ **353 毫秒**，这比 Julia 的速度还要快，几乎比天真的 Python for 循环代码快 628 倍。
- en: So, is the verdict settled in favor of Numpy array?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，最终判决是倾向于 Numpy 数组吗？
- en: Not so fast. What if we wanted to sum up only the odd numbers in the array?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 不要太快。那如果我们只想对数组中的奇数求和呢？
- en: No need for a separate library. Julia arrays are order-of-magnitude faster than
    Python lists.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不需要额外的库。Julia 数组的速度比 Python 列表快几个数量级。
- en: Here comes the logic
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下面是逻辑
- en: For Julia, the code change will be fairly straightforward. We will just use
    the for-loop, check if an element of the array is divisible by 2, and if not (odd
    number), then add it to the running sum. As pedantic as one can get!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Julia，代码的更改将非常直接。我们只需使用 for 循环，检查数组的一个元素是否能被 2 整除，如果不能（即奇数），则将其添加到累加和中。尽可能的细致！
- en: '![](../Images/120bec7547204a263b62e8657dd52363.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/120bec7547204a263b62e8657dd52363.png)'
- en: So, that ran in **close to 4 milliseconds**. Certainly slower than just the
    blind sum (using the for loop) but not too much (the for-loop plain sum too ~1.1
    milliseconds).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这运行了 **接近 4 毫秒**。确实比单纯的盲目求和（使用 for 循环）慢，但差别不大（for 循环的普通求和也大约 1.1 毫秒）。
- en: Now, we certainly cannot compete with this speed with a Python for-loop! We
    know how that will turn out, don’t we? So, we have to use a Numpy vectorized code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们显然无法用 Python 的 for 循环与这种速度竞争！我们知道结果会如何，对吧？所以，我们必须使用 Numpy 向量化代码。
- en: But how do we check for odd numbers and only then sum them up in case of a Numpy
    array? Fortunately, we have the `np.where()` method.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如何在 Numpy 数组中检查奇数并只对其求和呢？幸运的是，我们有 `np.where()` 方法。
- en: Here is the Python code. Not that straightforward (unless you know how to use
    the `np.where` (correctly), is it?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 代码。并不那么直接（除非你知道如何正确使用 `np.where`，对吧？
- en: '![](../Images/0b980fcdff9cddf459accbf33b0a8d7e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b980fcdff9cddf459accbf33b0a8d7e.png)'
- en: But look at the speed. Even with a single-line of vectorized code using Numpy
    method, that took **16.7 milliseconds** on average.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但看看速度吧。即使是使用 Numpy 方法的一行矢量化代码，平均也花费了**16.7 毫秒**。
- en: Julia code was simpler and ran faster!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 的代码更简单，运行得更快！
- en: Another slightly complicated operation
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另一个稍微复杂的操作
- en: 'Let’s say we have three arrays (say ***W***, ***X***, and ***B***) with random
    floating-point numbers ranging from -2 to 2 and we want to compute a special quantity:
    product of two of these arrays, added to the third i.e. ***A***.***X***+***B*** but
    the quantity will be added to the final sum only if the element-wise linear combination
    exceeds zero***.***'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有三个数组（比如 ***W***、***X*** 和 ***B***），其浮点数在 -2 到 2 之间随机分布，我们想计算一个特殊的量：两个数组的乘积加到第三个数组上，即
    ***A***.***X***+***B***，但只有当逐元素线性组合超过零时，这个量才会被加到最终和中***。***
- en: Does this logic look familiar to you? It is a variation on any densely connected
    neural network (or even a single perceptron), where the linear combination of
    weight, feature, and bias vector has to exceed a certain threshold to propagate
    to the next layer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑对你来说熟悉吗？这是任何密集连接神经网络（甚至是单个感知器）的变体，其中权重、特征和偏置向量的线性组合必须超过某个阈值才能传播到下一层。
- en: So, here is the Julia code. Again, simple and sweet. Took ~**1.8 milliseconds**.
    Note, it uses a special function called `muladd()` which multiplies two numbers
    and adds to a third.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这里是 Julia 的代码。再次，简单且高效。花费了 ~**1.8 毫秒**。注意，它使用了一个名为 `muladd()` 的特殊函数，该函数将两个数字相乘并加到第三个数字上。
- en: '![](../Images/87526a916a991ca9c76654020058bb2e.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87526a916a991ca9c76654020058bb2e.png)'
- en: We tried the Python using a similar code (using for-loop), and the result was
    terrible, as expected! It took **more than a second** on average.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用类似的代码（使用 for 循环）尝试了 Python，结果如预期般糟糕！平均花费了**超过一秒**。
- en: '![](../Images/db66467a4bdbd3e65d459946fc811de6.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db66467a4bdbd3e65d459946fc811de6.png)'
- en: Again, we tried to be creative and use a Numpy vectorized code and the result
    was much better than the for-loop case, but worse than the Julia case ~ **14.9
    milliseconds**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次尝试发挥创意，使用 Numpy 矢量化代码，结果比 for 循环要好，但比 Julia 的情况差，约为 **14.9 毫秒**。
- en: '![](../Images/b615c50f8439981ee85950423df97973.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b615c50f8439981ee85950423df97973.png)'
- en: So, how does it look like?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么，它看起来如何？
- en: At this point, the trend is becoming clear. For numerical operations, where
    complex logic needs to be checked before some mathematical operation can happen,
    Julia beats Python (even Numpy) hands down because **we can just write the logic
    in the simplest possible code in Julia and forget it**. It will still run at breakneck
    speed, thanks to the [just-in-time (JIT) compiler](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html) and
    internal type-related optimizations (Julia has an [extremely elaborate type system](https://en.wikibooks.org/wiki/Introducing_Julia/Types) to
    make programs runs fast with correct data types for each variable and optimizing
    code and memory correspondingly).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，趋势变得清晰。对于需要在某些数学操作之前检查复杂逻辑的数值操作，Julia 击败 Python（即使是 Numpy），因为**我们可以在 Julia
    中用尽可能简单的代码编写逻辑，并将其遗忘**。得益于[即时编译器（JIT）](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html)和内部类型相关的优化（Julia
    具有[极其复杂的类型系统](https://en.wikibooks.org/wiki/Introducing_Julia/Types)来使程序以正确的数据类型快速运行，并相应地优化代码和内存）。
- en: Writing the same code using native Python data structures and for-loop is hopelessly
    slow. Even with a Numpy vectorized code, the speed is slower than that of Julia
    as the complexity grows.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生 Python 数据结构和 for 循环编写相同的代码效率极低。即使是 Numpy 的矢量化代码，随着复杂性的增加，其速度也比 Julia 慢。
- en: Numpy is great for the simple methods that an array already comes with such
    as `sum()` or `mean()` or `std()`, but using logic along with them is not always
    straightforward and it slows the operation down considerably.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 在处理数组自带的简单方法（如 `sum()`、`mean()` 或 `std()`）时非常出色，但与这些方法结合使用逻辑并不总是直观的，而且会显著降低操作速度。
- en: '**In Julia, there is not much headache of thinking hard to vectorize your code**.
    Even an apparently stupid-looking code, with a plain vanilla for-loop and element-by-element
    logic checking, runs amazingly fast!'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**在 Julia 中，不用费心思考如何矢量化你的代码**。即使是看起来很笨的代码，使用普通的 for 循环和逐元素逻辑检查，也能运行得惊人快速！'
- en: For numerical operations, where complex logic needs to be checked before some
    mathematical operation can happen, Julia beats Python (even Numpy) hands down
    because we can just write the logic in the simplest possible code in Julia and
    forget it.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于需要在某些数学操作发生之前检查复杂逻辑的数值操作，Julia 绝对超过 Python（甚至 Numpy），因为我们可以用最简单的代码在 Julia
    中编写逻辑，并且可以不用再考虑它。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 摘要
- en: In this article, we showed some comparative benchmark of numerical computation
    between Julia and Python — both native Python code and optimized Numpy functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们展示了 Julia 和 Python 之间的数值计算对比基准——包括本地 Python 代码和优化的 Numpy 函数。
- en: Although in the case of straightforward functions, Numpy is on par with Julia
    in terms of speed, Julia scores higher when complex logic is introduced in the
    computing problem. Julia code is inherently simple to write without the need to
    think hard about vectorizing the functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在处理简单函数时，Numpy 的速度与 Julia 不相上下，但当计算问题中引入复杂逻辑时，Julia 的表现更胜一筹。Julia 代码本身很简单，无需过多考虑如何向量化函数。
- en: With many ongoing developments in the data science and machine learning support
    systems, Julia is one of the most exciting new languages to look forward to in
    the coming days. This is one tool, that budding data scientists should add to
    their repertoire.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据科学和机器学习支持系统的不断发展，Julia 是未来几天最令人期待的新语言之一。这是一个初学数据科学者应该加入到他们工具库中的工具。
- en: I am building a Github repo with Julia fundamentals and data science examples. [**Check
    it out here**](https://github.com/tirthajyoti/Julia-data-science).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在构建一个包含 Julia 基础和数据科学示例的 Github 仓库。[**点击这里查看**](https://github.com/tirthajyoti/Julia-data-science)。
- en: '**Additional reading**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加阅读**'
- en: '[https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1)'
- en: '[https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html)'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html)'
- en: '[https://en.wikibooks.org/wiki/Introducing_Julia/Types](https://en.wikibooks.org/wiki/Introducing_Julia/Types)'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://en.wikibooks.org/wiki/Introducing_Julia/Types](https://en.wikibooks.org/wiki/Introducing_Julia/Types)'
- en: '[https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df](https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df)'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df](https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df)'
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com).
    Also, you can check the author’s [**GitHub**](https://github.com/tirthajyoti?tab=repositories)** repositories **for
    code, ideas, and resources in machine learning and data science. If you are, like
    me, passionate about AI/machine learning/data science, please feel free to [add
    me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/) or [follow
    me on Twitter](https://twitter.com/tirthajyotiS).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题或想法，请通过 [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com)
    联系作者。同时，你也可以查看作者的 [**GitHub**](https://github.com/tirthajyoti?tab=repositories)**
    代码库 **，了解机器学习和数据科学的代码、想法和资源。如果你像我一样，对 AI/机器学习/数据科学充满热情，请随时 [在 LinkedIn 上添加我](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)
    或 [在 Twitter 上关注我](https://twitter.com/tirthajyotiS)。
- en: '**Bio: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    is Sr Principal Engineer at ON Semiconductor.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介： [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    是 ON Semiconductor 的高级首席工程师。'
- en: '[Original](https://towardsdatascience.com/complex-logic-at-breakneck-speed-try-julia-for-data-science-bcd4dfa23541).
    Reposted with permission.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/complex-logic-at-breakneck-speed-try-julia-for-data-science-bcd4dfa23541)。转载已获许可。'
- en: '**Related:**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关信息：**'
- en: '[The Guerrilla Guide to Machine Learning with Julia](/2017/07/guerrilla-guide-machine-learning-julia.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《使用 Julia 的游击学习指南》](/2017/07/guerrilla-guide-machine-learning-julia.html)'
- en: '[The Whole Data Science World in Your Hands](/2019/06/whole-data-science-world.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《掌握数据科学的全世界》](/2019/06/whole-data-science-world.html)'
- en: '[Introducing Gen: MIT’s New Language That Wants to be the TensorFlow of Programmable
    Inference](/2019/07/introducing-gen-language-progammable-inference.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《介绍 Gen：MIT 的新语言，想成为可编程推理的 TensorFlow》](/2019/07/introducing-gen-language-progammable-inference.html)'
- en: More On This Topic
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Free Julia Books For Data Science](https://www.kdnuggets.com/2023/06/5-free-julia-books-data-science.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 本免费的 Julia 数据科学书籍](https://www.kdnuggets.com/2023/06/5-free-julia-books-data-science.html)'
- en: '[3 Julia Packages for Data Visualization](https://www.kdnuggets.com/2023/02/3-julia-packages-data-visualization.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 个用于数据可视化的 Julia 包](https://www.kdnuggets.com/2023/02/3-julia-packages-data-visualization.html)'
- en: '[Learn Data Analysis with Julia](https://www.kdnuggets.com/learn-data-analysis-with-julia)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Julia 学习数据分析](https://www.kdnuggets.com/learn-data-analysis-with-julia)'
- en: '[Should I Learn Julia?](https://www.kdnuggets.com/2022/11/learn-julia.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我应该学习 Julia 吗？](https://www.kdnuggets.com/2022/11/learn-julia.html)'
- en: '[How to Setup Julia on Jupyter Notebook](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Jupyter Notebook 上设置 Julia](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
- en: '[10 Simple Things to Try Before Neural Networks](https://www.kdnuggets.com/2021/12/10-simple-things-try-neural-networks.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在神经网络之前尝试的 10 件简单事](https://www.kdnuggets.com/2021/12/10-simple-things-try-neural-networks.html)'
