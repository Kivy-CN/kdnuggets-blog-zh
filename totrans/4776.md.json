["```py\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom scipy.stats import probplot\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndata = pd.read_csv('data.csv', names=['x', 'y'])\ndata.head()\n\n```", "```py\n\ndata.plot.scatter('x', 'y', title='data')\n\n```", "```py\n\ndata = data[data['x'] < 600]\ndata.plot.scatter('x', 'y', title='data without outliers')\n\n```", "```py\n\nlr = LinearRegression().fit(data[['x']], data['y'])\ndata.plot.scatter('x', 'y', title='linear regression')\nlr_predicted_y = lr.predict(data[['x']])\nplt.plot(data['x'], lr_predicted_y)\n\n```", "```py\n\nresiduals = lr_predicted_y - data['y']\nplt.scatter(x=lr_predicted_y, y=residuals)\nplt.title('residuals')\n\n```", "```py\n\nprobplot(residuals, plot=plt)\n\n```", "```py\n\nprint 'y = %f + %f*x'  % (lr.intercept_, lr.coef_)\n\n>>> y = 70.023655 + 2.973585*x\n\n```", "```py\n\ncov = data.cov()\nmean_x = data['x'].mean()\nmean_y = data['y'].mean()\ns_xx = cov['x']['x']\ns_yy = cov['y']['y']\ns_xy = cov['x']['y']\ndelta = 2 ** 2\n\nslope = (s_yy  - delta * s_xx + np.sqrt((s_yy - delta * s_xx) ** 2 + 4 * delta * s_xy ** 2)) / (2 * s_xy)\nintercept = mean_y - slope  * mean_x\n\n```", "```py\n\nprint 'y = %f + %f*x'  % (intercept, slope)\n\n>>> y = 19.575797 + 3.391855*x\n\n```", "```py\n\ndata.plot.scatter('x', 'y', title='linear regression with & without accounting for $x$ error measurements')\nplt.plot(data['x'], lr_predicted_y, label='ignoring errors in $x$')\nX = [data['x'].min(), data['x'].max()]\nplt.plot(X, map(lambda x: intercept + slope * x, X), label='accounting for errors in $x$')\nplt.legend(loc='best')\n\n```"]