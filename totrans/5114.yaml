- en: The Essential Guide to SQL’s Execution Order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/the-essential-guide-to-sql-execution-order](https://www.kdnuggets.com/the-essential-guide-to-sql-execution-order)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![The Essential Guide to SQL’s Execution Order](../Images/4df5e29a889174c6f93c2c6175d256c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: SQL has become a must-have language for any data professional.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Most of us use SQL in our daily work, and after writing many queries, we all
    get our own style and have our habits, both good and bad.
  prefs: []
  type: TYPE_NORMAL
- en: SQL is usually learned by use, and in most cases, people do not usually understand
    the logic behind it.
  prefs: []
  type: TYPE_NORMAL
- en: This is why, today, we're diving into the intriguing world of SQL’s execution
    order, where the sequence of events can sometimes feel like a puzzle.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's fine-tune our understanding with a spotlight on the most common SQL
    query structure.
  prefs: []
  type: TYPE_NORMAL
- en: SQL as a declarative language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing to understand is that SQL is a declarative programming language,
    which means that we specify the desired result but not what steps are required
    to achieve it.
  prefs: []
  type: TYPE_NORMAL
- en: This is quite the opposite of procedural languages, which define each step that
    needs to be performed to achieve our desired output.
  prefs: []
  type: TYPE_NORMAL
- en: But what does this mean?
  prefs: []
  type: TYPE_NORMAL
- en: It means that SQL requires commands to be coded in a certain syntax. Yet the
    order in which we write these commands doesn't mirror the order in which SQL processes
    them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, a query unfolds with a structure like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Essential Guide to SQL’s Execution Order](../Images/6d28ace4db36e78dc8c55fa7dfa3a4c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Even though a person would read and code, following the previous structure,
    when considering how this code is executed, the order changes completely.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Essential Guide to SQL’s Execution Order](../Images/b9b1c383746d8f1b61b4d20f393ef3a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: For instance, though written as the first command, the SELECT clause isn’t evaluated
    until almost the end.
  prefs: []
  type: TYPE_NORMAL
- en: Visual representation of the execution order
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further understand this execution order, let’s go step by step and see what
    SQL does with every command we code.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Essential Guide to SQL’s Execution Order](../Images/9d01702d7b4b51c9139f78b82c78cce4.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Step 1 - FROM and JOIN
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The journey of a SQL query begins with the FROM clause, which points to the
    data's origin. While straightforward queries might tap into just one table, the
    data we seek frequently is contained across several tables.
  prefs: []
  type: TYPE_NORMAL
- en: That's where the JOIN command steps in, hand in hand with FROM, to merge together
    the data strands.
  prefs: []
  type: TYPE_NORMAL
- en: This pairing always takes the lead, setting the stage by pinpointing the data
    that will play a role in our query.
  prefs: []
  type: TYPE_NORMAL
- en: Step 2 - WHERE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Following the initial selection, the WHERE clause takes center stage.
  prefs: []
  type: TYPE_NORMAL
- en: Its primary role is to sift through the foundational table or the merged output
    from the join, ensuring only the rows that satisfy a specific condition are kept.
  prefs: []
  type: TYPE_NORMAL
- en: Step 3 - GROUP BY
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The GROUP BY clause steps in to orchestrate the data, arranging it into clusters
    according to the values in one or more columns. This enables us to perform aggregations
    or summaries.
  prefs: []
  type: TYPE_NORMAL
- en: Consider it the maestro of data, reducing the multitude of variables to a singular
    value for each unique element or combination of elements.
  prefs: []
  type: TYPE_NORMAL
- en: This clause is the core command behind data aggregation, setting the stage for
    summary performances with functions like COUNT(), SUM(), MIN() and MAX() among
    others.
  prefs: []
  type: TYPE_NORMAL
- en: Step 4 - HAVING
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HAVING clause comes into play as a discerning filter, eliminating those
    groupings that fail to meet the set criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine it as a gatekeeper, ensuring that only the groups that align with our
    aggregate conditions are allowed to proceed. It steps in after the GROUP BY clause
    has done its part, allowing us to apply filters on the now aggregated data.
  prefs: []
  type: TYPE_NORMAL
- en: At this juncture, the database is already aware of the computed aggregations,
    which means we can use these aggregated values in subsequent statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To address the common misconception of why the WHERE clause can’t call aggregated
    variables while HAVE can:'
  prefs: []
  type: TYPE_NORMAL
- en: It's because WHERE takes the stage before the GROUP BY clause, at a time when
    individual data points haven't yet been compiled into groups. On the other hand,
    HAVING takes place when the GROUP BY has already been computed.
  prefs: []
  type: TYPE_NORMAL
- en: Step 5 - SELECT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The SELECT clause defines the columns we want to keep in our table, along with
    any grouped or aggregated fields - that have been computed during the execution
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can apply column aliases using the AS operator.
  prefs: []
  type: TYPE_NORMAL
- en: The SELECT command is usually used together with the DISTINCT, which allows
    us to discard any row with duplicate values in all columns marked as DISTINCT.
  prefs: []
  type: TYPE_NORMAL
- en: Step 6 - ORDER BY
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the foundational tasks completed, the ORDER BY clause steps in, orchestrating
    the sorted presentation of values in either ascending (ASC) or descending (DESC)
    order.
  prefs: []
  type: TYPE_NORMAL
- en: Picture this as the final act in our query.
  prefs: []
  type: TYPE_NORMAL
- en: We've gathered the data from our source tables, refined it with filters, crafted
    meaningful groups and summaries, and pinpointed the columns to showcase in our
    final output.
  prefs: []
  type: TYPE_NORMAL
- en: Step 7 - LIMIT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, the LIMIT clause helps define the number of rows we want back.
  prefs: []
  type: TYPE_NORMAL
- en: It is particularly useful when dealing with large tables, especially during
    the development and testing stages.
  prefs: []
  type: TYPE_NORMAL
- en: Why is this important?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding the sequence of SQL's execution order might seem trivial at the
    outset, especially when queries are yielding the correct results.
  prefs: []
  type: TYPE_NORMAL
- en: Why fuss over the mechanics if the engine runs fine, right?
  prefs: []
  type: TYPE_NORMAL
- en: Yet, for those diving into the deeper waters of complex queries, knowledge of
    this order isn't just useful—it's crucial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Without this insight, troubleshooting becomes a maze of confusion, with errors
    lurking like all around. For adept debugging and smoother query crafting, a solid
    grasp of how SQL processes its clauses is indispensable. Two common mistakes are:'
  prefs: []
  type: TYPE_NORMAL
- en: Mistake 1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A typical pitfall in SQL is the attempt to filter aggregated data using the
    WHERE clause—a misstep that leads to an error.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Essential Guide to SQL’s Execution Order](../Images/25dce99fe8a7428141cb87ba177a2a81.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: As we have already seen throughout this article, the WHERE clause is computed
    before the GROUP BY one, therefore, we cannot use aggregated values during the
    WHERE step.
  prefs: []
  type: TYPE_NORMAL
- en: Mistake 2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Referencing column aliases of aggregated values that have not been set yet.
    In this case, we cannot use an alias that has been defined in the very same SELECT,
    as the computation phase is the same.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, SQL is not aware of this new alias yet.
  prefs: []
  type: TYPE_NORMAL
- en: '![The Essential Guide to SQL’s Execution Order](../Images/61a6fb9fcbd7723510f8140106e01ae1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Final Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding SQL's execution order is crucial for data professionals to craft
    effective, efficient queries.
  prefs: []
  type: TYPE_NORMAL
- en: This insight allows one to anticipate query behavior, especially in complex
    datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Mastering SQL involves moving beyond syntax and embracing its logic for strategic
    data manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: The journey we have performed together, from the FROM clause to LIMIT, is a
    strategic blueprint for data handling and shaping information to fit specific
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: Hope next time you are coding SQL, you keep this execution order in mind!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/josep-ferrer-sanchez/)**[Josep Ferrer](https://www.linkedin.com/in/josep-ferrer-sanchez)****
    is an analytics engineer from Barcelona. He graduated in physics engineering and
    is currently working in the data science field applied to human mobility. He is
    a part-time content creator focused on data science and technology. Josep writes
    on all things AI, covering the application of the ongoing explosion in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[3 Tools to Track and Visualize the Execution of Your Python Code](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n01, Jan 5: 3 Tools to Track and Visualize…](https://www.kdnuggets.com/2022/n01.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Essential SQL Commands for Data Science](https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Boost Your Data Science Skills: The Essential SQL Certifications You Need](https://www.kdnuggets.com/boost-your-data-science-skills-the-essential-sql-certifications-you-need)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Machine Learning Algorithms: A Beginner''s Guide](https://www.kdnuggets.com/2021/05/essential-machine-learning-algorithms-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Data Scientist’s Essential Guide to Exploratory Data Analysis](https://www.kdnuggets.com/2023/06/data-scientist-essential-guide-exploratory-data-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
