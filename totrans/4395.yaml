- en: Getting Started with PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/10/getting-started-pytorch.html](https://www.kdnuggets.com/2020/10/getting-started-pytorch.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/0a89ffdfb417c456d45d0bf297c1c911.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Ihor Malytskyi](https://unsplash.com/@ihor_malytskyi?utm_source=medium&utm_medium=referral)
    on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PyTorch is nowadays one of the fastest-growing Python frameworks for Deep Learning.
    This library was in fact first used mainly by researchers in order to create new
    models, but thanks to recent advancements is gaining lots of interests also from
    many companies. Some of the reasons for the interest in this framework are:'
  prefs: []
  type: TYPE_NORMAL
- en: GPU optimized tensor computation (matrix-like data structures) using an interface
    closely resembling Numpy in order to facilitate adoption.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Neural Networks training using [Automatic Differentiation](https://pytorch.org/tutorials/beginner/blitz/autograd_tutorial.html#sphx-glr-beginner-blitz-autograd-tutorial-py) (to
    keep track of all the operations which happened to a tensor and automatically
    calculate gradients).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic Computation Graph (using PyTorch it is not necessary in order to run
    a model to define first the entire computational graph like in Tensorflow).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'PyTorch is freely available to be installed on any operating system following
    the [documentation instructions](https://pytorch.org/get-started/locally/). Some
    of the main elements which compose this library are the:'
  prefs: []
  type: TYPE_NORMAL
- en: '***Autograd*** module: is used to record the operations performed on a tensor
    and perform them backwards to compute gradients (this property can be extremely
    useful to speed up neural networks operations and to allow PyTorch to follow the [imperative
    programming](https://en.wikipedia.org/wiki/Imperative_programming) paradigm).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Optim*** module: is used in order to easily import and apply various optimization
    algorithms for neural networks training such as Adam, Stochastic Gradient Descent,etc..'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***nn*** module: provides a set of functions which can help us to quickly design
    any type of neural network layer by layer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Demonstration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this article, I will walk you through a practical example in order to get
    started using PyTorch. All the code used throughout this article (and more!) is
    available on my [GitHub](https://github.com/pierpaolo28/Kaggle-Challenges/blob/master/rain-prediction.ipynb) and [Kaggle](https://www.kaggle.com/pierpaolo28/rain-prediction) accounts.
    For this example, we are going to use the [Kaggle Rain in Australia](https://www.kaggle.com/jsphyg/weather-dataset-rattle-package) dataset
    in order to predict if tomorrow is going to rain or not.
  prefs: []
  type: TYPE_NORMAL
- en: Importing Libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First of all, we need to import all the necessary libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Data Preprocessing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this example, we will focus to just use the ***RISK_MM*** and ***Location*** indicators
    as our model features (Figure 1). Once divided our data into training and test
    sets, we can then convert our Numpy arrays into PyTorch tensors and create a training
    and test data-loader to use in order to fed in data to our neural network.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d045070e0bdc58ec3061c5afd523698e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Reduced Dataframe'
  prefs: []
  type: TYPE_NORMAL
- en: Modelling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At this point, using PyTorch ***nn*** module, we can then design our Artificial
    Neural Network (ANN). In PyTorch, neural networks can be defined as classes constituted
    by two main functions: ***__inti__()*** and ***forward()***.
  prefs: []
  type: TYPE_NORMAL
- en: In the ***__inti__() ***function, we can set up our network layers while in
    the ***forward()*** function we decide how to stack the different elements of
    our network together. In this way, debugging and experimenting can take place
    relatively easily by just adding print statements in the ***forward()*** function
    to inspect any part of the network at any point in time.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, PyTorch provides also a [Sequential Interface](https://pytorch.org/docs/stable/nn.html#sequential) which
    can be used in order to create models in a similar way to how they are constructed
    using Keras Tensorflow API.
  prefs: []
  type: TYPE_NORMAL
- en: In this simple network, we are taking as input 50 features since that we previously
    converted our input categorical variables into dummy/indicator variables using
    the Pandas **get_dummies() **functionality. Therefore, our network will be composed
    of 50 neurons at the input, a hidden layer of 20 neurons and an output layer of
    a single neuron. The size of the hidden layer can certainly be varied and more
    hidden layer can be easily added, but this would probably lead to risking overfitting
    to our data, considering the limited amount of data available. When staking together
    successive layers, we then just need to make sure the number of output features
    of one layer is equal to the number of input features in the successive layer.
  prefs: []
  type: TYPE_NORMAL
- en: Once instantiated our model, we can then also print out the network architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: ANN Training
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are now finally ready to train our model. In the following code snippet,
    we first define Binary Cross Entropy as our loss function and Adam as the optimiser
    for our model parameters. Finally, we create a training loop of 7 iterations and
    store some key metrics parameters such as the overall loss and model accuracy
    for each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As can be summarised in Figure 2, our model successfully managed to achieve
    a good accuracy without risking to overfit the original data (both the training
    loss and accuracy are just about to reach a plateau). This can be furthermore
    validated by implementing also a train/validation split to train our model and
    tune its parameters (as demonstrated in this [GitHub](https://github.com/pierpaolo28/Kaggle-Challenges/blob/master/rain-prediction.ipynb) notebook).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/251310b5154f3cd2c8cb1777febd7c9b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Training Report'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we can now create a second loop to test our model against some brand
    new data (in order to ensure our model is not training anymore and can be used
    just for inference, please note the ***model.eval()*** statement).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As can be seen from the printed output, our model testing accuracy closely matched
    our final training accuracy (74.66 % vs 74.13%).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In case you are interested in finding out more about PyTorch potentialities,
    [PyTorch Lighting](https://pytorch-lightning.readthedocs.io/en/latest/) and [Livelossplot](https://github.com/stared/livelossplot)
    are two great packages which can help you in developing, debugging and evaluating
    your PyTorch models.
  prefs: []
  type: TYPE_NORMAL
- en: '*I hope you enjoyed this article, thank you for reading!*'
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to keep updated with my latest articles and projects [follow me
    on Medium](https://medium.com/@pierpaoloippolito28?source=post_page---------------------------) and
    subscribe to my [mailing list](http://eepurl.com/gwO-Dr?source=post_page---------------------------).
    These are some of my contacts details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Linkedin](https://uk.linkedin.com/in/pier-paolo-ippolito-202917146?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personal Blog](https://pierpaolo28.github.io/blog/?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personal Website](https://pierpaolo28.github.io/?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Medium Profile](https://towardsdatascience.com/@pierpaoloippolito28?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/pierpaolo28?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kaggle](https://www.kaggle.com/pierpaolo28?source=post_page---------------------------)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Pier Paolo Ippolito](https://www.linkedin.com/in/pierpaolo28/)** is
    a Data Scientist and MSc in Artificial Intelligence graduate from the University
    of Southampton. He has a strong interest in AI advancements and machine learning
    applications (such as finance and medicine). Connect with him on [Linkedin](https://www.linkedin.com/in/pierpaolo28/).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/getting-started-with-pytorch-9bae16926744).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Most Complete Guide to PyTorch for Data Scientists](/2020/09/most-complete-guide-pytorch-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyTorch LSTM: Text Generation Tutorial](/2020/07/pytorch-lstm-text-generation-tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyTorch for Deep Learning: The Free eBook](/2020/07/pytorch-deep-learning-free-ebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Getting Started with PyTorch Lightning](https://www.kdnuggets.com/2022/12/getting-started-pytorch-lightning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with PyTorch in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started Cleaning Data](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with spaCy for NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
