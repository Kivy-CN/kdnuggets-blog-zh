- en: Dealing with categorical features in machine learning
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理机器学习中的类别特征
- en: 原文：[https://www.kdnuggets.com/2019/07/categorical-features-machine-learning.html](https://www.kdnuggets.com/2019/07/categorical-features-machine-learning.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/07/categorical-features-machine-learning.html](https://www.kdnuggets.com/2019/07/categorical-features-machine-learning.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**By [Hugo Ferreira](https://www.linkedin.com/in/hugo-ferreira8), Data Scientist
    | Machine Learning Enthusiast | Physicist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由[Hugo Ferreira](https://www.linkedin.com/in/hugo-ferreira8)，数据科学家 | 机器学习爱好者
    | 物理学家**'
- en: How to easily implement one-hot encoding in Python
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如何在Python中轻松实现独热编码
- en: '![figure-name](../Images/dc204dce3ab7ebd72a010b66b8188048.png)Photo by [Max
    Nelson](https://unsplash.com/@maxcodes?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/dc204dce3ab7ebd72a010b66b8188048.png)照片由[Max Nelson](https://unsplash.com/@maxcodes?utm_source=medium&utm_medium=referral)提供，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)'
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织的IT需求'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Categorical data are commonplace in many Data Science and Machine Learning problems
    but are usually more challenging to deal with than numerical data. In particular,
    many machine learning algorithms require that their input is numerical and therefore
    categorical features must be transformed into numerical features before we can
    use any of these algorithms.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 类别数据在许多数据科学和机器学习问题中很常见，但通常比数值数据更具挑战性。特别是，许多机器学习算法要求其输入为数值，因此必须将类别特征转换为数值特征，才能使用这些算法。
- en: One of the most common ways to make this transformation is to **one-hot encode** the
    categorical features, especially when there does not exist a natural ordering
    between the categories (e.g. a feature ‘City’ with names of cities such as ‘London’,
    ‘Lisbon’, ‘Berlin’, etc.). For each unique value of a feature (say, ‘London’)
    one column is created (say, ‘City_London’) where the value is 1 if for that instance
    the original feature takes that value and 0 otherwise.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 转换这些特征的最常见方法之一是**独热编码**类别特征，特别是当类别之间没有自然顺序时（例如，一个包含城市名称如‘伦敦’，‘里斯本’，‘柏林’等的特征‘City’）。对于特征的每一个唯一值（比如‘伦敦’），会创建一列（例如‘City_London’），当实例的原始特征取该值时，该列的值为1，否则为0。
- en: Even though this type of encoding is used very frequently, it can be frustrating
    to try to implement it using scikit-learn in Python, as there isn’t currently
    a simple transformer to apply, especially if you want to use it as a step of your
    machine learning pipeline. In this post, I’m going to describe how you can still
    implement it using only scikit-learn and pandas (but with a bit of effort). But,
    after that, I’ll also show you how you can use the [category encoders library](http://contrib.scikit-learn.org/categorical-encoding/index.html) to
    achieve the same thing in a much easier fashion.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种编码方式非常常见，但在使用Python中的scikit-learn时实现起来可能会很令人沮丧，因为目前没有简单的转换器可用，特别是当你想将其作为机器学习管道的一部分使用时。在这篇文章中，我将描述如何仅使用scikit-learn和pandas来实现它（但需要一点努力）。但是，在那之后，我还会展示如何使用[类别编码库](http://contrib.scikit-learn.org/categorical-encoding/index.html)以更简单的方式实现相同的功能。
- en: To illustrate the whole process, I’m going to use the [Breast Cancer Data Set](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer)from
    the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.html),
    which has many categorical features on which to implement the one-hot encoding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明整个过程，我将使用[乳腺癌数据集](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer)来自[UCI
    机器学习仓库](https://archive.ics.uci.edu/ml/index.html)，该数据集有许多分类特征，可以用来实现一热编码。
- en: Load the data
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载数据
- en: The data we’re going to use is the [Breast Cancer Data Set](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer) from
    the [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.html).
    This data set is small and contains several categorical features, which will allow
    us to quickly explore a few ways to implement the one-hot encoding using Python,
    pandas and scikit-learn.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要使用的数据是来自[UCI 机器学习仓库](https://archive.ics.uci.edu/ml/index.html)的[乳腺癌数据集](https://archive.ics.uci.edu/ml/datasets/Breast+Cancer)。这个数据集较小，包含几个分类特征，这将允许我们快速探索几种使用
    Python、pandas 和 scikit-learn 实现一热编码的方法。
- en: After downloading the data from the repository, we read it into a pandas dataframe `df`.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从仓库下载数据后，我们将其读入一个 pandas dataframe `df`。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This data set has 286 instances with 9 features and one target (‘Class’). The
    target and features are described in the data set description as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集有286个实例，包含9个特征和一个目标（‘Class’）。目标和特征在数据集描述中如下：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’ll take all columns to be of ‘object’ type and split the training and test
    sets using the `train_test_split` of scikit-learn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将所有列都视为‘object’类型，并使用 scikit-learn 的`train_test_split`来拆分训练集和测试集。
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One-hot encoding
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一热编码
- en: There are several ways to encode categorical features (see, for example, [here](http://psych.colorado.edu/~carey/courses/psyc5741/handouts/Coding%20Categorical%20Variables%202006-03-03.pdf)).
    In this post, we will focus on one of the most common and useful ones, **one-hot
    encoding**. After the transformation, each column of the resulting data set corresponds
    to one unique value of each original feature.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编码分类特征有几种方法（例如，参见[这里](http://psych.colorado.edu/~carey/courses/psyc5741/handouts/Coding%20Categorical%20Variables%202006-03-03.pdf)）。在这篇文章中，我们将重点关注其中一种最常见和有用的方法——**一热编码**。经过转换后，结果数据集的每一列对应于每个原始特征的一个唯一值。
- en: For example, suppose we have the following categorical feature with three different
    unique values.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们有以下具有三种不同唯一值的分类特征。
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After one-hot encoding, the data set looks like:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一热编码后，数据集如下所示：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We want to implement the one-hot encoding to the breast cancer data set, in
    such a way that the resulting sets are suitable to use in machine learning algorithms.
    Note that for many of the features of this data set there is a natural ordering
    between the categories (e.g. the tumour size) and, therefore, other types of encoding
    might be more appropriate, but for concreteness we will focus only on one-hot
    encoding in this post.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望对乳腺癌数据集实现一热编码，使得结果数据集适合用于机器学习算法。请注意，数据集中的许多特征具有类别之间的自然顺序（例如，肿瘤大小），因此其他类型的编码可能更合适，但为了具体说明，我们在这篇文章中只关注一热编码。
- en: Using scikit-learn
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 scikit-learn
- en: Let’s see how we would implement one-hot encoding using scikit-learn. There
    is a [transformer](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html) conveniently
    named `OneHotEncoder` which, at first glance, seems to be exactly what we’re looking
    for.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 scikit-learn 实现一热编码。这里有一个方便的[转换器](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html)，名为`OneHotEncoder`，乍一看，它似乎正是我们所寻找的。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If we try to apply the above code, we obtain an `ValueError`, as `OneHotEncoder` requires
    that all values are integers, and not strings as we have. This means we first
    have to encode all the possible values as integers: for a given feature, if it
    has *n* possible values (given by *n* different strings), we encode them with
    integers between 0 and *n*-1\. Thankfully, there is another [transformer](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html) in
    scikit-learn, called `LabelEncoder`, which does just that!'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试应用上述代码，会得到一个`ValueError`，因为`OneHotEncoder`要求所有值必须是整数，而不是我们所用的字符串。这意味着我们首先必须将所有可能的值编码为整数：对于一个特征，如果它有*n*个可能值（由*n*个不同的字符串给出），我们将它们编码为介于0和*n*-1之间的整数。幸运的是，scikit-learn中还有另一个[转换器](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html)，叫做`LabelEncoder`，正是用来做这件事的！
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: And… we obtain another `ValueError`! In reality, `LabelEncoder` is only intended
    to be used for the target vector, and as such it doesn’t work with more than one
    column. Unfortunately, in version 0.19 of scikit-learn, there is no transformer
    which can deal with several columns (there is some [hope for version 0.20](http://scikit-learn.org/dev/modules/generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder)).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 而且……我们得到了另一个 `ValueError`！实际上，`LabelEncoder` 仅打算用于目标向量，因此它不能与多列一起使用。不幸的是，在 scikit-learn
    0.19 版本中，没有可以处理多列的转换器（对版本 0.20 有一些[希望](http://scikit-learn.org/dev/modules/generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder)）。
- en: One solution is to make our own transformer, which we creatively call `MultiColumnLabelEncoder`,
    which applies the `LabelEncoder` in each of the features.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一个解决方案是制作我们自己的转换器，我们创意性地称之为 `MultiColumnLabelEncoder`，它在每个特征上应用 `LabelEncoder`。
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Will this work this time?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这次会有效吗？
- en: It worked! To better understand what happened, let’s check the original training
    set.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效！为了更好地理解发生了什么，让我们查看原始训练集。
- en: We see, for instance, that the age group 30–39 was given the label 0, 40–49
    was given the label 1, etc, and analogously for the other features.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，例如，年龄段 30–39 被标记为 0，40–49 被标记为 1，等等，其他特征也是类似的。
- en: After applying the `MultiColumnLabelEncoder`, we can (finally!) use the `OneHotEncoder` to
    implement the one-hot encoding to both the training and test sets.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 `MultiColumnLabelEncoder` 后，我们可以（终于！）使用 `OneHotEncoder` 对训练集和测试集进行独热编码。
- en: 'Some comments:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一些评论：
- en: The `OneHotEncoder` is fitted to the training set, which means that for each
    unique value *present in the training set*, for each feature, a new column is
    created. We have 39 columns after the encoding.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OneHotEncoder` 被拟合到训练集中，这意味着对于每个在训练集中*存在的*唯一值，对于每个特征，都创建了一个新列。编码后我们有 39 列。'
- en: The output is a numpy array (when the option `sparse=False` is used), which
    has the disadvantage of losing all the information about the original column names
    and values.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出是一个 numpy 数组（当使用选项 `sparse=False` 时），这有一个缺点，就是丢失了原始列名和值的所有信息。
- en: When we try to transform the test set, after having fitted the encoder to the
    training set, we obtain (again!) a `ValueError`. This is because the there are *new,
    previously unseen* unique values in the test set and the encoder doesn’t know
    how to handle these values. In order to use both the transformed training and
    test sets in machine learning algorithms, we need them to have the same number
    of columns.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们尝试将测试集转换为训练集时，经过编码器拟合后，我们再次得到一个 `ValueError`。这是因为测试集中存在*新的、之前未见过*的唯一值，编码器不知道如何处理这些值。为了在机器学习算法中同时使用转换后的训练集和测试集，我们需要它们具有相同数量的列。
- en: This last problem can be solved by using the option `handle_unknown='ignore'` of
    the `OneHotEncoder`, which, as the name suggests, will ignore previously unseen
    values when transforming the test set.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的问题可以通过使用 `OneHotEncoder` 的 `handle_unknown='ignore'` 选项来解决，正如其名所示，它会在转换测试集时忽略之前未见过的值。
- en: And that’s it! Both the training and test sets have 39 columns and are now in
    a suitable form to be used in machine learning algorithms which require numerical
    data.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！训练集和测试集都具有 39 列，现在以适合用于需要数值数据的机器学习算法的形式存在。
- en: However, the procedure shown above is quite inelegant and we lose the dataframe
    format for the data. Is there an easier way to implement all of this?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，上述过程相当不优雅，我们丧失了数据的 dataframe 格式。有没有更简单的方法来实现这一切？
- en: There is!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 确实有！
- en: Using category encoders
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用类别编码器
- en: '[**Category Encoders**](http://contrib.scikit-learn.org/categorical-encoding/index.html) is
    a library of scikit-learn-compatible categorical variable encoders, such as:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[**类别编码器**](http://contrib.scikit-learn.org/categorical-encoding/index.html)是一个与
    scikit-learn 兼容的分类变量编码器库，例如：'
- en: Ordinal
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序数
- en: One-Hot
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独热编码
- en: Binary
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二进制
- en: Helmert Contrast
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赫尔默特对比
- en: Sum Contrast
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总和对比
- en: Polynomial Contrast
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多项式对比
- en: Backward Difference Contrast
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向后差分对比
- en: Hashing
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希
- en: BaseN
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: BaseN
- en: LeaveOneOut
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 留一法
- en: Target Encoding
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标编码
- en: 'The Ordinal, One-Hot and Hashing encoders are improved versions of the ones
    present in scikit-learn with the following advantages:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 序数编码器、独热编码器和哈希编码器是对 scikit-learn 中现有编码器的改进版本，具有以下优点：
- en: Support for pandas dataframes as an input and, optionally, as output;
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 pandas 数据框作为输入，并且可选地作为输出；
- en: Can explicitly configure which columns in the data are encoded by name or index,
    or infer non-numeric columns regardless of input type;
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过名称或索引显式配置数据中编码的列，或者推断非数字列，无论输入类型如何；
- en: Compatibility with scikit-learn pipelines.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兼容 scikit-learn 管道。
- en: For our purposes, we’re going to use the improved `OneHotEncoder` and see how
    much we can simplify the workflow. First, we import the category encoders library.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们将使用改进的`OneHotEncoder`并查看我们可以简化多少工作流程。首先，我们导入类别编码器库。
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, let’s try to apply the `OneHotEncoder` directly to both the training and
    test sets.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，让我们尝试将`OneHotEncoder`直接应用于训练集和测试集。
- en: It worked immediately! No need to use `LabelEncoder` first!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 它立刻生效了！无需先使用`LabelEncoder`！
- en: 'Some observations:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 一些观察：
- en: The outputs are dataframes, which allows us to more easily check how the several
    features were transformed. As before, each transformed set has 39 columns and
    it can be checked that the matrices of 0’s and 1’s are identical to the ones obtained
    previously.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出是数据框，这使我们可以更容易地检查各个特征如何被转换。与之前一样，每个转换后的数据集有 39 列，可以检查 0 和 1 的矩阵是否与之前获得的相同。
- en: I used the option `use_cat_names=True` so that the possible values of each feature
    are added to the feature name in each new column (e.g. `age_60-69`). This was
    done for clarity, but by default it simply adds an index (e.g. `age_1`, `age_2`,
    etc).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我使用了`use_cat_names=True`选项，以便将每个特征的可能值添加到每个新列的特征名称中（例如`age_60-69`）。这样做是为了清晰起见，但默认情况下，它只是添加一个索引（例如`age_1`、`age_2`等）。
- en: We can now more easily understand why we previously obtained an error when we
    didn’t require that unseen values in the test set were ignored. Below, we show
    all the columns of the test set after one-hot encoding, when the encoder is fitted
    to the training set (first) and when is fitted to the test set (second). We see
    that, in the second case, there are now 42 columns, as 3 new columns were created: `age_20-29`, `tumor-size_5-9` and `breast-quad_unknown`.
    These corresponds to three values in the test set (20–29 in `age`, 5–9 in `tumor-size`and
    unknown in `breast-quad`) that *are not present* in the training set.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们现在可以更容易理解为什么在不要求忽略测试集中的未见值时会得到错误。下面，我们展示了在将编码器拟合到训练集（第一）和测试集（第二）后，经过独热编码的测试集的所有列。在第二种情况下，我们看到现在有
    42 列，因为创建了 3 列新列：`age_20-29`、`tumor-size_5-9` 和 `breast-quad_unknown`。这些对应于测试集中的三个值（`age`中的
    20–29，`tumor-size`中的 5–9 和 `breast-quad`中的未知），这些值在训练集中*不存在*。
- en: Comparing the two approaches above, it’s clear that we should use the`OneHotEncoder` from
    the category encoders library if we intend to one-hot encode the categorical features
    in our data set.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 比较以上两种方法，我们可以明显看出，如果我们打算对数据集中的分类特征进行独热编码，应该使用类别编码器库中的`OneHotEncoder`。
- en: As remarked in the beginning, one-hot encoding is not the only possible way
    to encode categorical features and the category encoders library has [several
    encoders](http://contrib.scikit-learn.org/categorical-encoding/index.html) which
    you should explore, as others might be more appropriate for different categorical
    features and machine learning problems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 正如开始时提到的，独热编码不是编码分类特征的唯一方法，类别编码器库有[几种编码器](http://contrib.scikit-learn.org/categorical-encoding/index.html)可供探索，因为其他编码器可能更适合不同的分类特征和机器学习问题。
- en: 'You can find my LinkedIn in:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下位置找到我的 LinkedIn：
- en: '[Hugo Ferreira - Researcher - Instituto Superior Técnico | LinkedIn'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[Hugo Ferreira - 研究员 - Instituto Superior Técnico | LinkedIn'
- en: View Hugo Ferreira's profile on LinkedIn, the world's largest professional community.
    Hugo has 3 jobs listed on their…](https://www.linkedin.com/in/hugo-ferreira8)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在 LinkedIn 上查看 Hugo Ferreira 的个人资料，这是世界上最大的专业社区。Hugo 在他们的…](https://www.linkedin.com/in/hugo-ferreira8)
- en: '**Bio: [Hugo Ferreira](https://medium.com/@hugorcf)** is a Data Scientist with
    a background in Mathematics and Physics and spent several years doing research
    in the framework and computational tools to analyse previously unexplored complex
    systems of interest to Astrophysics and Quantum Physics.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历: [Hugo Ferreira](https://medium.com/@hugorcf)** 是一名数据科学家，拥有数学和物理学背景，并在分析天体物理学和量子物理学中感兴趣的复杂系统的框架和计算工具方面进行了多年的研究。'
- en: '[Original](https://medium.com/hugo-ferreiras-blog/dealing-with-categorical-features-in-machine-learning-1bb70f07262d).
    Reposted with permission.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://medium.com/hugo-ferreiras-blog/dealing-with-categorical-features-in-machine-learning-1bb70f07262d)。经许可转载。'
- en: '**Related:**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[The Hitchhiker’s Guide to Feature Extraction](/2019/06/hitchhikers-guide-feature-extraction.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特征提取的外星人指南](/2019/06/hitchhikers-guide-feature-extraction.html)'
- en: '[7 Steps to Mastering Data Preparation for Machine Learning with Python — 2019
    Edition](/2019/06/7-steps-mastering-data-preparation-python.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握机器学习数据准备的7个步骤（Python版）— 2019年版](/2019/06/7-steps-mastering-data-preparation-python.html)'
- en: '[A Quick Guide to Feature Engineering](/2019/02/quick-guide-feature-engineering.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特征工程快速指南](/2019/02/quick-guide-feature-engineering.html)'
- en: More On This Topic
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以找到目标，并找到目标来…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学学习统计学的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个90亿美元的AI失败，深入分析](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司理想的编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该知道的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
