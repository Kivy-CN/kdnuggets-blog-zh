["```py\nimport pandas as pd\ndata = pd.read_csv('data.csv') \n```", "```py\nimport sqlalchemy\n\nengine = sqlalchemy.create_engine('sqlite:///example.db')\ndata = pd.read_sql('SELECT * FROM table_name', engine)\n```", "```py\nimport requests\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\n```", "```py\nfrom bs4 import BeautifulSoup\nresponse = requests.get('https://example.com')\nsoup = BeautifulSoup(response.content, 'html.parser')\n```", "```py\n# Data Cleaning\ndata.dropna(inplace=True)\ndata.drop_duplicates(inplace=True)\n```", "```py\n# Data Transformation\ndata['date'] = pd.to_datetime(data['date'])  \ndata['category_encoded'] = pd.get_dummies(data['category'])\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndata[['feature1', 'feature2']] = scaler.fit_transform(data[['feature1', 'feature2']]) \n```", "```py\n# Feature Engineering\ndata['new_feature'] = data['feature1'] * data['feature2']\n```", "```py\n# Data Splitting\nfrom sklearn.model_selection import train_test_split\ntrain, test = train_test_split(data, test_size=0.2, random_state=42)\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ncorr_matrix = data.corr()\n\nsns.heatmap(corr_matrix, annot=True)\nplt.title('Correlation Heatmap')\nplt.show()\n```", "```py\nsns.pairplot(data, hue='target', diag_kind='kde') \nplt.title('Pair Plot') \nplt.show()\n```", "```py\nimportance = model.coef_[0]\nfeatures = np.array(numeric_features.tolist() + list(preprocessor.named_transformers_['cat']['onehot'].get_feature_names_out(categorical_features)))\n\nplt.figure(figsize=(10, 8))\nsns.barplot(x=importance, y=features)\nplt.xlabel('Importance')\nplt.title('Feature Importance')\nplt.show()\n```", "```py\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\ncm = confusion_matrix(y_test, model.predict(X_test))\n\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=model.classes_)\ndisp.plot(cmap=plt.cm.Blues)\nplt.title('Confusion Matrix')\nplt.show()\n```", "```py\nimport pandas as pd\n\nurl = 'https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv'\ndf_titanic = pd.read_csv(url)\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\n\ndf_titanic = df_titanic[['Survived', 'Pclass', 'Sex','Parch', 'Fare','Age', 'Embarked']]\n\ndf_titanic = df_titanic.dropna(subset=['Survived'])\n\nX = df_titanic.drop('Survived', axis=1)\ny = df_titanic['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nnumeric_features = ['Age', 'Parch', 'Fare']\ncategorical_features = ['Pclass', 'Sex', 'Embarked']\n\nnumeric_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='median')),\n    ('scaler', StandardScaler())])\n\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore'))])\n\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numeric_transformer, numeric_features),\n        ('cat', categorical_transformer, categorical_features)])\n\nX_train = preprocessor.fit_transform(X_train)\nX_test = preprocessor.transform(X_test)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nimport joblib\n\nmodel = LogisticRegression(random_state=42)\nmodel.fit(X_train, y_train)\n\njoblib.dump(model, 'titanic_logistic_regression_model.joblib')\njoblib.dump(preprocessor, 'titanic_preprocessor.joblib')\n\naccuracy = model.score(X_test, y_test)\nprint(accuracy)\n```", "```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nimportance = model.coef_[0]\nfeatures = np.array(numeric_features + list(preprocessor.named_transformers_['cat']['onehot'].get_feature_names_out(categorical_features)))\n\nplt.figure(figsize=(10, 8))\nplt.barh(features, importance)\nplt.xlabel('Importance')\nplt.title('Feature Importance')\nplt.show()\n```"]