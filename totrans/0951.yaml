- en: Introduction to Pandas for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Introduction to Pandas for Data Science](../Images/7c932944c4b641a632fd107fd28bf1f3.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image by benzoix](https://www.freepik.com/free-vector/panda-mascot-logo-esport-gaming_11760508.htm#query=pandas&position=23&from_view=search&track=sph)
    on Freepik'
  prefs: []
  type: TYPE_NORMAL
- en: What is Pandas actually, and why is it so famous? Think of Pandas as an Excel
    sheet, but a next-level Excel sheet with more features and flexibility than Excel.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Why Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a lot of reasons to choose pandas, some of them are
  prefs: []
  type: TYPE_NORMAL
- en: Open Source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to Learn
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Great Community
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built on Top of Numpy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy to Analyze and pre-process data in it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in Data Visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lot of Built-in functions to help in Exploratory Data Analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in support for CSV, SQL, HTML, JSON, pickle, excel, clipboard and a lot
    more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: and a lot more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using Anaconda, you will automatically have pandas in it, but for
    some reason, if you do not have it, just run this command
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you are not using Anaconda, install via pip by
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Importing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To import pandas, use
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: It is better to import numpy with pandas to have access to more numpy features,
    which helps us in Exploratory Data Analysis (EDA).
  prefs: []
  type: TYPE_NORMAL
- en: Pandas Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pandas has two main data structures.
  prefs: []
  type: TYPE_NORMAL
- en: Series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of Series as a single column in an Excel sheet. You can also think of
    it as a 1d Numpy array. The only thing that differentiates it from 1d Numpy array
    is that we can have Index Names.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax to create a pandas Series is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Data can be of Any type from Python’s dictionary to list or tuple. It can also
    be a numpy array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s build a series from Python List:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/314cccf6adc18392f9bf86ed3f9b5237.png)'
  prefs: []
  type: TYPE_IMG
- en: Output of newSeries.
  prefs: []
  type: TYPE_NORMAL
- en: It is not necessary to add an index in a pandas Series. In that case, it will
    automatically start index from 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/db6ab16b2ad6fb7298c5e767599f1d2b.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see that the index starts from 0 and goes on till the Series end.
    Now let’s see how we can create a Series using a [Python Dictionary](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html),
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8cc86f7cf20db2ad2512282c3c880f1c.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see that we do not have to explicitly pass the index values as they
    are automatically assigned from the keys in the dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing data from Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The normal pattern to access the data from Pandas Series is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Let’s take the example of mySeries we created earlier. To get the value of Name,
    Age, and Career, all we have to do is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/731668986bd3ec59bc1b4ffe05466651.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic Operations on Pandas Series
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create two new series to perform operations on them
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/66bad4155f568f5d8de191d9271209a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Basic Arithmetic operations include +-*/ operations. These are done over-index,
    so let’s perform them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c360748cc9c2a747e56e176141fe6bdf.png)'
  prefs: []
  type: TYPE_IMG
- en: Here we can see that since London and NEWYORK index are present in both Series,
    so it has added the value of both and output of rest is NaN (Not a number).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/41100455557a3b9362ef33bdaf33a8b8.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c9f8567d040d3e456cd94f1999196aea.png)'
  prefs: []
  type: TYPE_IMG
- en: Element Wise Operations/Broadcasting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are familiar with Numpy, you must be aware of the Broadcasting concept.
    Refer to [this link](https://www.geeksforgeeks.org/python-broadcasting-with-numpy-arrays/) if
    you are not familiar with the concept of broadcasting.
  prefs: []
  type: TYPE_NORMAL
- en: Now using our newSeries Series, we will see operations performed using the broadcasting
    concept.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/bb9f77aafeade733e05820e62036069e.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, it added 5 to every single element in Series newSeries. This is also known
    as element-wise operations. Similarly, for other operations such as *, /, -, **,
    and other operators as well. We will see only ** operator, and you should try
    it for other operators too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e9f736d264dc48221607416762b416d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we take the element-wise square root of each number. Remember, the square
    root is any number raised to power 1/2.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas DataFrame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dataframe is indeed the most commonly used and important data structure of Pandas.
    Think of a data frame as an excel sheet.
  prefs: []
  type: TYPE_NORMAL
- en: Main ways to create Data Frame are
  prefs: []
  type: TYPE_NORMAL
- en: Reading a CSV/Excel File
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Dictionary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ndarray
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s take an example of how to create a data frame using a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: We can create a data frame by passing in a dictionary where each value of the
    dictionary is a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To convert this dictionary into a data frame, we simply have to call the dataframe
    function on this dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d872e788d8650798f50112d4cd77d76f.png)df1'
  prefs: []
  type: TYPE_NORMAL
- en: Getting Values from a Column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get values from a column, we can use this syntax
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Both of these syntaxes are correct, but we have to be careful about choosing
    one. If our column name has space in it, then definitely we can not use the 2nd
    method. We have to use the first method. We can only use the 2nd method when there
    is no space in the column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/68ef167ed2e8a38a5e2ad5ebc29e806d.png)df1.Name'
  prefs: []
  type: TYPE_NORMAL
- en: Here we can see the values of the column, their index number, name of the column,
    and datatype of the column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/51feecdbad37e6d507cbf7501fd8db96.png)df1[‘Age’]'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that using both syntaxes returns the column of the data frame where
    we can analyze it.
  prefs: []
  type: TYPE_NORMAL
- en: Values of Multiple Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get values of Multiple columns in a data frame, pass the name of columns
    as a list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f3e2df68cdcf0a5fe482caf94d6c0b4c.png)df1[[“Name”,”Age”]]'
  prefs: []
  type: TYPE_NORMAL
- en: We can see that it returned the dataframe with two columns Name and Age.
  prefs: []
  type: TYPE_NORMAL
- en: Important functions of Dataframe in Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s explore important functions of DataFrame by using a dataset known as ‘Titanic’.
    This data set is commonly Available online, or you can get it at [Kaggle](https://www.kaggle.com/c/titanic/data).
  prefs: []
  type: TYPE_NORMAL
- en: Reading Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pandas has good built-in support to read data of various types, including CSV,
    fether, excel, HTML, JSON, pickle, SAS, SQL, and many more.
  prefs: []
  type: TYPE_NORMAL
- en: The common syntax to read data is
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: CSV
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To read data from a CSV file, all you have to do is to use pandas read_csv function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Since titanic is also available in CSV format, so we will read it using read_csv
    function. When you download the dataset, you will have two files named train.csv
    and test.csv, which will help in testing machine learning models, so we will only
    focus on the train_csv file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now df is automatically a data frame. Let’s explore some of its functions.
  prefs: []
  type: TYPE_NORMAL
- en: head()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you print your dataset normally, it will show a complete dataset, which may
    have a million rows or columns, which is hard to see and analyze. df.head() function
    allows us to see the first ’n’ rows of the data set (by default 5) so that we
    can make a rough estimate of our dataset, and what important functions to apply
    on it next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/6809138a901745575a553a2a32df58e9.png)df.head()'
  prefs: []
  type: TYPE_IMG
- en: Now we can see our columns in the data set, & their values for the first 5 rows.
    Since we haven’t passed any value, so it is showing the first 5 rows.
  prefs: []
  type: TYPE_NORMAL
- en: tail()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to the head function, we have a tail function that shows last *n* values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/21eb4f5febca316bff45b34bfbd128d4.png)df.tail(3)'
  prefs: []
  type: TYPE_IMG
- en: We can see the last 3 rows from our data set, as we passed df.tail(3).
  prefs: []
  type: TYPE_NORMAL
- en: shape()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The shape() is one another important function to analyze the shape of the dataset,
    which is pretty helpful when we are making our machine learning models, and we
    want our dimensions to be exact.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/82749010f211e57a998c104bfa3c5599.png)df.shape()'
  prefs: []
  type: TYPE_IMG
- en: Here we can see that our output is (891,12), which is equal to 891 rows and
    12 columns, which means that in total, we have 12 features or 12 columns and 891
    rows or 891 examples.
  prefs: []
  type: TYPE_NORMAL
- en: Previously when we used the df.tail() function, the index number of our last
    column was 890 because our index started from 0, not from 1\. If the index number
    started from 1, then we would have an index number of the last column as 891.
  prefs: []
  type: TYPE_NORMAL
- en: isnull()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another important function that is used to find the null values in a
    dataset. We can see in previous outputs that some values are NaN, which means
    “Not a Number”, and we have to deal with these missing values to get good results.
    isnull() is an important function to deal with these null values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: I am using the head function so that we can see the first 5 examples, not the
    whole data set.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/83de576c429ae703321b77b4484fa58e.png)'
  prefs: []
  type: TYPE_IMG
- en: df.isnull().head()
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can see that some values in “Cabin” columns are True. True means that
    the value is NaN or missing. We can see that this is unclear to see and understand,
    so we can use the sum() function to get more detailed info.
  prefs: []
  type: TYPE_NORMAL
- en: sum()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sum function is used to sum all the values in a data frame. Remember that
    True meaning 1 and False meaning 0, so to get all the True values returned by
    isnull() function, we can use sum() function. Let’s check it out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a56bed68de5735aba3c0809c8b4146bf.png)df.isnull().sum()'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see that only missing values are in columns of “Age”, “Cabin”,
    & “Embarked”.
  prefs: []
  type: TYPE_NORMAL
- en: info()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The info function is also a commonly used pandas function, which “Prints a concise
    summary of a DataFrame.”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c20d616c8ff237b204f0ba62b0a457d1.png)df.info()'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see that it tells us how many non-null entities we have, such as
    in-case of Age, we have 714 Non-Null float64 type entities. It also tells us about
    memory usage, which is 83.6 KB in this case.
  prefs: []
  type: TYPE_NORMAL
- en: describe()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Describe is also a super useful function to analyze the data. It tells us about
    the descriptive statistics of a data frame, including those that summarize the
    central tendency, dispersion, and shape of a dataset’s distribution, excluding
    values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3aa801ab8f71ceab689c9250d04e3708.png)df.describe()'
  prefs: []
  type: TYPE_IMG
- en: Here we can see some important statistical analysis of each column, including
    the mean, standard deviation, minimum value, and much more. Read more about it
    in its [documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.describe.html).
  prefs: []
  type: TYPE_NORMAL
- en: Boolean Indexing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is also one of the important and widely used concepts both in Numpy and
    Pandas.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, we index using boolean variables, i.e., True and False.
    If the index is True, show that row, and if the Index is False, do not show that
    row.
  prefs: []
  type: TYPE_NORMAL
- en: It helps us a lot when we are trying to extract important features from our
    dataset. Let’s take an example where we only want to see the entries where “Sex”
    is “male”. Let’s see how we are going to approach this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This is going to return a Series of Boolean values True and False, where True
    is the row where “Sex” is “male” else False.
  prefs: []
  type: TYPE_NORMAL
- en: In order to see the first 10 results only, I can use the head function as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/508840d2a0fe27bcd0c66b643c8dfb88.png)(df[“sex”]==”male”).head(10)'
  prefs: []
  type: TYPE_IMG
- en: Now, in order to see the complete dataframe with only those rows where “Sex”
    is “male”, we should pass df[“Sex”]==”male” in dataframe to get all the results
    where “Sex” is “male”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/63c60b477e7170ef67fba61dc0a8a9e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we can see that all the results we have are those where Sex is Male.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s derive some useful information using Boolean indexing.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get rows based on multiple conditions, we use parenthesis “()” and
    “&,|,!=” signs between multiple conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s find out what is the percentage of all the male passengers who have survived.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a6d01eb337b12de53bb73107aafbf734.png)'
  prefs: []
  type: TYPE_IMG
- en: Give this code a second to read and understand what is happening. We are collecting
    all the rows from the dataframe where df[“Sex”] == “male” and df[“Survived”]==1\.
    The returned value is a dataframe with all the rows of male passengers who survived.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s find out the percentage of male passengers survived.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the formula for the percentage of male passengers who survived is Total
    Number of Male Survived / Total Number of Male Passengers
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a3309603d8f6718e8642122df0f8de1a.png)'
  prefs: []
  type: TYPE_IMG
- en: In pandas, we can write this as
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Let’s break this code step by step.
  prefs: []
  type: TYPE_NORMAL
- en: df[‘Sex’]==’male’ will return a boolean Series of examples where sex is male.
  prefs: []
  type: TYPE_NORMAL
- en: df[df[“Sex”]==”male”] will return the complete data frame with all examples
    where “Sex” is “male”.
  prefs: []
  type: TYPE_NORMAL
- en: men = df[df[‘Sex’]==’male’][‘Survived’] will return the “Survived” column of
    data frame of all the passengers who are male.
  prefs: []
  type: TYPE_NORMAL
- en: sum(men) will sum all the men who survived. As it is a Series of 0 and 1\. len(men)
    will return the Number of Total men.
  prefs: []
  type: TYPE_NORMAL
- en: Now put these in the formula given above and we will find the percentage of
    all the men survived in Titanic which is
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff899cef506259b24ce2800648fb5efd.png)'
  prefs: []
  type: TYPE_IMG
- en: 18%!!!!!. Yes, only 18% of men in our data set have survived the Titanic disaster.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, we can code it for females, which I won’t, but it is your task, we
    find out that 74 % of female passengers have survived this disaster.
  prefs: []
  type: TYPE_NORMAL
- en: This brings us to the end of this article. Now obviously there are tons of other
    important functions in Pandas which are very important such as groupby, apply,
    iloc, rename, replace etc. I recommend you to check the [“Python for Data Analysis”](https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1491957662/ref=sr_1_1?crid=2YVHIUW4AOLTD&dchild=1&keywords=python+for+data+analysis&qid=1590067346&sprefix=Python+for+Data+ANa%2Caps%2C348&sr=8-1) book
    by Wes, who is the creator of this Pandas library.
  prefs: []
  type: TYPE_NORMAL
- en: Also, check out [this cheat sheet](https://www.dataquest.io/blog/pandas-cheat-sheet/) by
    Dataquest for quick reference.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Ahmad](https://twitter.com/AhmadMustafaAn1)** is interested in Machine Learning,
    Deep Learning, and Computer Vision. Currently working as a Jr. Machine Learning
    engineer at Redbuffer.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Numpy and Pandas](https://www.kdnuggets.com/introduction-to-numpy-and-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Data Science Pipelines Using Pandas](https://www.kdnuggets.com/building-data-science-pipelines-using-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Visual Introduction to Singular…](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Data Science: A Beginner''s Guide](https://www.kdnuggets.com/2023/07/introduction-data-science-beginner-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Databases in Data Science](https://www.kdnuggets.com/introduction-to-databases-in-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Cloud Computing for Data Science](https://www.kdnuggets.com/introduction-to-cloud-computing-for-data-science)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
