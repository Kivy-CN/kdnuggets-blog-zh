- en: Mastering Regular Expressions with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精通Python中的正则表达式
- en: 原文：[https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html](https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html](https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html)
- en: '![Time to power up regular expressions](../Images/b2ffc730a091c45a10dbb74f4e4d22fc.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![是时候提升正则表达式技能了](../Images/b2ffc730a091c45a10dbb74f4e4d22fc.png)'
- en: Image created by Author with Midjourney
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者使用Midjourney创建
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在的组织IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Regular expressions, or regex, are a powerful tool for manipulating text and
    data. They provide a concise and flexible means to 'match' (specify and recognize)
    strings of text, such as particular characters, words, or patterns of characters.
    Regex are used in various programming languages, but in this article, we will
    focus on using regex with Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式或称regex，是操作文本和数据的强大工具。它们提供了一种简洁而灵活的方式来‘匹配’（指定和识别）文本字符串，例如特定字符、单词或字符模式。正则表达式在多种编程语言中使用，但在本文中，我们将重点讨论如何在Python中使用正则表达式。
- en: Python, with its clear, readable syntax, is a great language for learning and
    applying regex. The Python [re module](https://docs.python.org/3/library/re.html)
    provides support for regex operations in Python. This module contains functions
    to search, replace, and split text based on specified patterns. By mastering regex
    in Python, you can efficiently manipulate and analyze text data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python以其清晰、易读的语法，是学习和应用正则表达式的绝佳语言。Python的[re模块](https://docs.python.org/3/library/re.html)提供了正则表达式操作的支持。该模块包含了根据指定模式搜索、替换和拆分文本的功能。通过掌握Python中的正则表达式，你可以高效地处理和分析文本数据。
- en: This article will guide you from the basics to the more complex operations with
    regex in Python, giving you the tools to handle any text processing challenge
    that comes your way. We'll start with simple character matches, then explore more
    complex pattern matching, grouping, and lookaround assertions. Let's get started!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本文将指导你从正则表达式的基础到更复杂的操作，为你提供应对任何文本处理挑战的工具。我们将从简单的字符匹配开始，然后探讨更复杂的模式匹配、分组和前瞻断言。让我们开始吧！
- en: Basic Regex Patterns
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本正则表达式模式
- en: At its core, regex operates on the principle of pattern matching in a string.
    The most straightforward form of these patterns are literal matches, where the
    pattern sought is a direct sequence of characters. But regex patterns can be more
    nuanced and capable than simple literal matching.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式的核心原理是对字符串中的模式进行匹配。这些模式最简单的形式是字面匹配，其中寻找的模式是字符的直接序列。但正则表达式模式可以比简单的字面匹配更为复杂和强大。
- en: 'In Python, the [re](https://docs.python.org/3/library/re.html) module provides
    a suite of functions to handle regular expressions. The `re.search()` function,
    for example, scans through a given string, looking for any location where a regex
    pattern matches. Let''s illustrate with an example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，[re](https://docs.python.org/3/library/re.html)模块提供了一整套处理正则表达式的函数。例如，`re.search()`函数扫描给定的字符串，寻找正则表达式模式匹配的位置。我们用一个例子来说明：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This Python code searches the string in the variable `text` for the pattern
    defined in the variable `pattern`. The `re.search()` function returns a Match
    object if the pattern is found within the text, or None if it isn't.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这段Python代码在变量`text`中搜索变量`pattern`定义的模式。如果在文本中找到该模式，`re.search()`函数返回一个Match对象，否则返回None。
- en: The Match object includes information about the match, including the original
    input string, the regular expression used, and the location of the match. For
    instance, using `match.start()` and `match.end()` will provide the start and end
    positions of the match in the string.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Match 对象包括关于匹配的信息，包括原始输入字符串、使用的正则表达式和匹配的位置。例如，使用 `match.start()` 和 `match.end()`
    可以提供字符串中匹配的起始和结束位置。
- en: 'However, often we don''t just look for exact words - we want to match patterns.
    That''s where special characters come into play. For example, the dot (.) matches
    any character except a newline. Let''s see this in action:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们通常不仅仅是寻找精确的单词 - 我们希望匹配模式。这就是特殊字符发挥作用的地方。例如，点 (.) 匹配除换行符之外的任何字符。让我们看看实际应用：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code searches the string for any five-letter word that starts with a "P",
    ends with an "n", and has "th" in the middle. The dot stands for any character,
    so it matches both "Python" and "Pithon". As you can see, even with just literal
    characters and the dot, regex provides a powerful tool for pattern matching.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码搜索字符串中任何一个以 "P" 开头、以 "n" 结尾并且中间包含 "th" 的五个字母单词。点代表任何字符，因此它匹配 "Python" 和
    "Pithon"。如你所见，即使只有字面字符和点，正则表达式也提供了一个强大的模式匹配工具。
- en: In subsequent sections, we will delve into more complex patterns and powerful
    features of regex. By understanding these building blocks, you can construct more
    complex patterns to match nearly any text processing and manipulation task.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续章节中，我们将深入探讨正则表达式的更复杂模式和强大功能。通过理解这些基本构建块，你可以构建更复杂的模式，以匹配几乎任何文本处理和操作任务。
- en: Meta Characters
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元字符
- en: 'While literal characters form the backbone of regular expressions, meta characters
    amplify their power by providing flexible pattern definitions. Meta characters
    are special symbols with unique meanings, shaping how the regex engine matches
    patterns. Here are some commonly used meta characters and their significance and
    usage:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然字面字符构成了正则表达式的基础，但元字符通过提供灵活的模式定义来增强其功能。元字符是具有独特含义的特殊符号，决定了正则表达式引擎如何匹配模式。以下是一些常用元字符及其意义和用法：
- en: '**. (dot)** - The dot is a wildcard that matches any character except a newline.
    For instance, the pattern "a.b" can match "acb", "a+b", "a2b", etc.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**. (点)** - 点是一个通配符，匹配除换行符之外的任何字符。例如，模式 "a.b" 可以匹配 "acb"、"a+b"、"a2b" 等。'
- en: '**^ (caret)** - The caret symbol denotes the start of a string. "^a" would
    match any string that starts with "a".'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**^ (脱字符)** - 脱字符表示字符串的开头。"^a" 将匹配任何以 "a" 开头的字符串。'
- en: '**$ (dollar)** - Conversely, the dollar sign corresponds to the end of a string.
    "a$" would match any string ending with "a".'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**$ (美元符号)** - 相反，美元符号对应于字符串的结尾。"a$" 将匹配任何以 "a" 结尾的字符串。'
- en: '*** (asterisk)** - The asterisk denotes zero or more occurrences of the preceding
    element. For instance, "a*" matches "", "a", "aa", "aaa", etc.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*** (星号)** - 星号表示前一个元素的零次或多次出现。例如，"a*" 匹配 ""、"a"、"aa"、"aaa" 等。'
- en: '**+ (plus)** - Similar to the asterisk, the plus sign represents one or more
    occurrences of the preceding element. "a+" matches "a", "aa", "aaa", etc., but
    not an empty string.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**+ (加号)** - 与星号类似，加号表示前一个元素的一次或多次出现。"a+" 匹配 "a"、"aa"、"aaa" 等，但不匹配空字符串。'
- en: '**? (question mark)** - The question mark indicates zero or one occurrence
    of the preceding element. It makes the preceding element optional. For example,
    "a?" matches "" or "a".'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**? (问号)** - 问号表示前一个元素的零次或一次出现。它使前一个元素变为可选。例如，"a?" 匹配 "" 或 "a"。'
- en: '**{ } (curly braces)** - Curly braces quantify the number of occurrences. "{n}"
    denotes exactly n occurrences, "{n,}" means n or more occurrences, and "{n,m}"
    represents between n and m occurrences.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**{ } (大括号)** - 大括号量化出现的次数。"{n}" 表示恰好 n 次出现，"{n,}" 表示 n 次或更多次出现，"{n,m}" 表示
    n 到 m 次之间的出现次数。'
- en: '**[ ] (square brackets)** - Square brackets specify a character set, where
    any single character enclosed in the brackets can match. For example, "[abc]"
    matches "a", "b", or "c".'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**[ ] (方括号)** - 方括号指定一个字符集，方括号内的任何单个字符都可以匹配。例如，"[abc]" 匹配 "a"、"b" 或 "c"。'
- en: '**\ (backslash)** - The backslash is used to escape special characters, effectively
    treating the special character as a literal. "\$" would match a dollar sign in
    the string instead of denoting the end of the string.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\ (反斜杠)** - 反斜杠用于转义特殊字符，实际上将特殊字符视为字面字符。"\$" 将匹配字符串中的美元符号，而不是表示字符串的结尾。'
- en: '**| (pipe)** - The pipe works as a logical OR. Matches the pattern before or
    the pattern after the pipe. For instance, "a|b" matches "a" or "b".'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**| (管道符)** - 管道符作为逻辑或使用。匹配管道符前的模式或管道符后的模式。例如，"a|b" 匹配 "a" 或 "b"。'
- en: '**( ) (parentheses)** - Parentheses are used for grouping and capturing matches.
    The regex engine treats everything within parentheses as a single element.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**( ) (圆括号)** - 圆括号用于分组和捕获匹配。正则表达式引擎将括号内的所有内容视为一个单一的元素。'
- en: Mastering these meta characters opens up a new level of control over your text
    processing tasks, allowing you to create more precise and flexible patterns. The
    true power of regex becomes apparent as you learn to combine these elements into
    complex expressions. In the following section, we'll explore some of these combinations
    to showcase the versatility of regular expressions.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 掌握这些元字符可以让你在文本处理任务中获得新的控制水平，使你能够创建更精确和灵活的模式。正则表达式的真正威力在于你学会将这些元素组合成复杂的表达式。在接下来的部分，我们将探索这些组合，以展示正则表达式的多样性。
- en: Character Sets
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符集
- en: Character sets in regex are powerful tools that allow you to specify a group
    of characters you'd like to match. By placing characters inside square brackets
    "[]", you create a character set. For example, "[abc]" matches "a", "b", or "c".
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式中的字符集是强大的工具，允许你指定你希望匹配的字符组。通过将字符放在方括号 "[]" 中，你可以创建一个字符集。例如，"[abc]" 匹配 "a"、"b"
    或 "c"。
- en: 'But character sets offer more than just specifying individual characters -
    they provide the flexibility to define ranges of characters and special groups.
    Let''s take a look:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但字符集不仅仅是指定单个字符的工具 - 它们提供了定义字符范围和特殊组的灵活性。让我们来看一下：
- en: '**Character ranges**: You can specify a range of characters using the dash
    ("-"). For example, "[a-z]" matches any lowercase alphabetic character. You can
    even define multiple ranges within a single set, like "[a-zA-Z0-9]" which matches
    any alphanumeric character.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符范围**: 你可以使用短横线 ("-") 指定一个字符范围。例如，"[a-z]" 匹配任何小写字母。你甚至可以在一个集合中定义多个范围，如 "[a-zA-Z0-9]"
    匹配任何字母数字字符。'
- en: '**Special groups**: Some predefined character sets represent commonly used
    groups of characters. These are convenient shorthands:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**特殊组**: 一些预定义的字符集代表常用的字符组。这些是方便的简写：'
- en: '**\d**: Matches any decimal digit; equivalent to [0-9]'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\d**: 匹配任何十进制数字；等同于 [0-9]'
- en: '**\D**: Matches any non-digit character; equivalent to [^0-9]'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\D**: 匹配任何非数字字符；等同于 [^0-9]'
- en: '**\w**: Matches any alphanumeric word character (letter, number, underscore);
    equivalent to [a-zA-Z0-9_]'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\w**: 匹配任何字母数字单词字符（字母、数字、下划线）；等同于 [a-zA-Z0-9_]'
- en: '**\W**: Matches any non-word character; equivalent to [^a-zA-Z0-9_]'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\W**: 匹配任何非字母数字字符；等同于 [^a-zA-Z0-9_]'
- en: '**\s**: Matches any whitespace character (spaces, tabs, line breaks)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\s**: 匹配任何空白字符（空格、制表符、换行符）'
- en: '**\S**: Matches any non-whitespace character'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**\S**: 匹配任何非空白字符'
- en: '**Negated character sets**: By placing a caret "^" as the first character inside
    the brackets, you create a negated set, which matches any character not in the
    set. For example, "[^abc]" matches any character except "a", "b", or "c".'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**否定字符集**: 通过在方括号内将插入符号 "^" 作为第一个字符，你可以创建一个否定集合，它匹配集合中不存在的任何字符。例如，"[^abc]"
    匹配任何不是 "a"、"b" 或 "c" 的字符。'
- en: 'Let''s see some of this in action:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些在实际中的应用：
- en: '[PRE2]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code searches for a pattern of a U.S. phone number in the text. The pattern
    "\d{3}-\d{3}-\d{4}" matches any three digits, followed by a hyphen, followed by
    any three digits, another hyphen, and finally any four digits. It successfully
    matches "123-456-7890" in the text.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码在文本中搜索美国电话号码的模式。模式 "\d{3}-\d{3}-\d{4}" 匹配任何三个数字，后跟一个短横线，然后是任意三个数字，再跟一个短横线，最后是任意四个数字。它成功匹配了文本中的
    "123-456-7890"。
- en: Character sets and the associated special sequences offer a significant boost
    to your pattern matching capabilities, providing a flexible and efficient way
    to specify the characters you wish to match. By grasping these elements, you're
    well on your way to harnessing the full potential of regular expressions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 字符集和相关的特殊序列大大增强了你的模式匹配能力，提供了一种灵活且高效的方式来指定你希望匹配的字符。通过掌握这些元素，你就能充分发挥正则表达式的潜力。
- en: Some Common Patterns
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些常见模式
- en: 'While regex may seem daunting, you''ll find that many tasks require only simple
    patterns. Here are five common ones:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然正则表达式可能看起来令人生畏，但你会发现许多任务只需要简单的模式。这里有五个常见的模式：
- en: Emails
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邮件
- en: 'Extracting emails is a common task that can be done with regex. The following
    pattern matches most common email formats:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 提取电子邮件是一个常见的任务，可以通过正则表达式完成。以下模式匹配大多数常见的电子邮件格式：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Phone Numbers
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电话号码
- en: 'Phone numbers can vary in format, but here''s a pattern that matches North
    American phone numbers:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 电话号码的格式可能会有所不同，但以下是匹配北美电话号码的模式：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: IP Addresses
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IP 地址
- en: 'To match an IP address, we need four numbers (0-255) separated by periods:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要匹配 IP 地址，我们需要四个用句点分隔的数字（0-255）：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Web URLs
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络网址
- en: 'Web URLs follow a consistent format that can be matched with this pattern:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 网络网址遵循一致的格式，可以用以下模式匹配：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: HTML Tags
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML 标签
- en: 'HTML tags can be matched with the following pattern. Be careful, as this won''t
    catch attributes within the tags:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 标签可以使用以下模式进行匹配。要小心，因为这不会捕捉标签内的属性：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Python regex workflow](../Images/408c5716ae70eef500aba9afafeda87f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![Python 正则表达式工作流程](../Images/408c5716ae70eef500aba9afafeda87f.png)'
- en: A Python regular expression matching workflow
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Python 正则表达式匹配工作流程
- en: Tips & Suggestions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提示与建议
- en: Here are some practical tips and best practices to help you use regex effectively.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些实用技巧和最佳实践，帮助你有效使用正则表达式。
- en: '**Start Simple**: Start with simple patterns and gradually add complexity.
    Trying to solve a complex problem in one go can be overwhelming.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从简单开始**：从简单模式开始，逐渐增加复杂性。一开始解决复杂问题可能会让人不知所措。'
- en: '**Test Incrementally**: After each change, test your regex. This makes it easier
    to locate and fix problems.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**增量测试**：每次更改后测试你的正则表达式。这使得定位和修复问题更加容易。'
- en: '**Use Raw Strings**: In Python, use raw strings for regex patterns (i.e., r"text").
    This ensures that Python interprets the string literally, preventing conflicts
    with Python''s escape sequences.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用原始字符串**：在 Python 中，使用原始字符串作为正则表达式模式（即 r"text"）。这确保 Python 文字解释字符串，防止与 Python
    的转义序列冲突。'
- en: '**Be Specific**: The more specific your regex, the less likely it will accidentally
    match unwanted text. For example, instead of .*, consider using .+? to match text
    in a non-greedy way.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具体明确**：你的正则表达式越具体，就越不容易意外匹配到不需要的文本。例如，与其使用 .*，不如考虑使用 .+? 以非贪婪的方式匹配文本。'
- en: '**Use Online Tools**: Online regex testers can help you build and test your
    regex. These tools can show real-time matches, groups, and provide explanations
    for your regex. Some popular ones are [regex101](https://regex101.com/) and [regextester](https://www.regextester.com/).'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用在线工具**：在线正则表达式测试工具可以帮助你构建和测试你的正则表达式。这些工具可以实时显示匹配、分组，并提供正则表达式的解释。一些流行的工具有
    [regex101](https://regex101.com/) 和 [regextester](https://www.regextester.com/)。'
- en: '**Readability Over Brevity**: While regex allows for very compact code, it
    can quickly become hard to read. Prioritize readability over brevity. Use whitespace
    and comments when necessary.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可读性优于简洁性**：虽然正则表达式允许非常紧凑的代码，但它可能很快变得难以阅读。优先考虑可读性而非简洁性。在必要时使用空白和注释。'
- en: Remember, mastering regex is a journey, and is very much an exercise in assembling
    building blocks. With practice and perseverance, you'll be able to tackle any
    text manipulation task.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，掌握正则表达式是一个过程，实际上是一种组装构建块的练习。通过练习和坚持，你将能够处理任何文本处理任务。
- en: Conclusion
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Regular expressions, or regex, is indeed a powerful tool in Python's arsenal.
    Its complexity might be intimidating at first glance, but once you delve into
    its intricacies, you start realizing its true potential. It provides an unmatched
    robustness and versatility for handling, parsing, and manipulating text data,
    making it an essential utility in numerous fields such as data science, natural
    language processing, web scraping, and many more.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式，或称为 regex，确实是 Python 工具箱中的一个强大工具。它的复杂性可能会让人一开始感到困惑，但一旦你深入探讨它的细节，你会开始认识到它的真正潜力。它为处理、解析和操控文本数据提供了无与伦比的强大和多功能性，使其在数据科学、自然语言处理、网页抓取等众多领域中成为一个必不可少的工具。
- en: One of the primary strengths of regex lies in its ability to perform intricate
    pattern matching and extraction operations on massive volumes of text with minimal
    code. Think of it as a sophisticated search engine that can locate not only precise
    strings of text but also patterns, ranges, and specific sequences. This enables
    it to identify and extract key pieces of information from raw, unstructured text
    data, which is a common necessity in tasks like information retrieval, data cleaning,
    and sentiment analysis.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 正则表达式的主要优点之一在于它能够在大量文本中执行复杂的模式匹配和提取操作，代码量极少。把它想象成一个精密的搜索引擎，不仅能定位准确的文本字符串，还能识别模式、范围和特定的序列。这使得它能够从原始的非结构化文本数据中识别和提取关键信息，这在信息检索、数据清理和情感分析等任务中非常必要。
- en: Furthermore, the learning curve of regex, while seemingly steep, shouldn't deter
    the enthusiastic learner. Yes, regex has its own unique syntax and special characters
    that may seem cryptic at first. However, with some dedicated learning and practice,
    you will soon appreciate its logical structure and elegance. The efficiency and
    time saved in processing text data with regex far outweigh the initial learning
    investment. Thus, mastery over regex, albeit challenging, provides invaluable
    rewards that make it a critical skill for any data scientist, programmer, or anyone
    dealing with text data in their work.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，尽管正则表达式的学习曲线看似陡峭，但不应让热情的学习者气馁。是的，正则表达式有其独特的语法和特殊字符，刚开始可能显得难以理解。然而，通过一些专注的学习和实践，你很快会欣赏到其逻辑结构和优雅。正则表达式在处理文本数据时的效率和节省的时间远远超过了初始学习的投资。因此，尽管掌握正则表达式具有挑战性，但其带来的宝贵回报使其成为任何数据科学家、程序员或处理文本数据的人员的重要技能。
- en: The concepts and examples we've discussed here are just the tip of the iceberg.
    There are many more regex concepts to explore, such as quantifiers, groups, lookaround
    assertions, and more. So continue practicing, experimenting, and mastering regex
    with Python. Happy ~~coding~~ pattern matching!
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论的概念和例子只是冰山一角。还有许多正则表达式的概念值得深入探讨，如量词、分组、环视断言等。因此，继续练习、实验并掌握 Python 中的正则表达式。祝你*编码愉快*！
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    是数据科学家，也是 KDnuggets 的主编，KDnuggets 是著名的数据科学和机器学习在线资源。他的兴趣包括自然语言处理、算法设计与优化、无监督学习、神经网络以及自动化机器学习方法。Matthew
    拥有计算机科学硕士学位和数据挖掘研究生文凭。他可以通过 editor1 at kdnuggets[dot]com 联系。'
- en: More On This Topic
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Tips for Using Regular Expressions in Data Cleaning](https://www.kdnuggets.com/5-tips-for-using-regular-expressions-in-data-cleaning)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用正则表达式进行数据清理的 5 个技巧](https://www.kdnuggets.com/5-tips-for-using-regular-expressions-in-data-cleaning)'
- en: '[7 Steps to Mastering Machine Learning with Python in 2022](https://www.kdnuggets.com/2022/02/7-steps-mastering-machine-learning-python.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2022 年掌握 Python 机器学习的 7 个步骤](https://www.kdnuggets.com/2022/02/7-steps-mastering-machine-learning-python.html)'
- en: '[KDnuggets™ News 22:n05, Feb 2: 7 Steps to Mastering Machine…](https://www.kdnuggets.com/2022/n05.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets™ 新闻 22:n05, 2 月 2 日: 掌握机器学习的 7 个步骤…](https://www.kdnuggets.com/2022/n05.html)'
- en: '[7 Steps to Mastering Python for Data Science](https://www.kdnuggets.com/2022/06/7-steps-mastering-python-data-science.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握数据科学中 Python 的 7 个步骤](https://www.kdnuggets.com/2022/06/7-steps-mastering-python-data-science.html)'
- en: '[Mastering GPUs: A Beginner''s Guide to GPU-Accelerated DataFrames in Python](https://www.kdnuggets.com/2023/07/mastering-gpus-beginners-guide-gpu-accelerated-dataframes-python.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握 GPU：Python 中 GPU 加速 DataFrames 的初学者指南](https://www.kdnuggets.com/2023/07/mastering-gpus-beginners-guide-gpu-accelerated-dataframes-python.html)'
- en: '[Mastering the Art of Data Cleaning in Python](https://www.kdnuggets.com/mastering-the-art-of-data-cleaning-in-python)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握 Python 中数据清理的艺术](https://www.kdnuggets.com/mastering-the-art-of-data-cleaning-in-python)'
