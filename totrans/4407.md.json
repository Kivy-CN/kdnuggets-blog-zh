["```py\nx = torch.randn((100,784))\nmodel = myCrazyNeuralNet()\nmodel(x).size()\n--------------------------\ntorch.Size([100, 10])\n```", "```py\nconv_layer = nn.Conv2d(in_channels = 3, out_channels = 64, kernel_size = (3,3), stride = 1, padding=1)\n```", "```py\nx = torch.randn((100,3,24,24))\nconv_layer(x).size()\n--------------------------------\ntorch.Size([100, 64, 24, 24])\n```", "```py\ndata\n    train\n        sailboat\n        kayak\n        .\n        .\n```", "```py\nfor i in range(0,len(train_dataset)):\n    image ,label = train_dataset[i]\n    pred = model(image)\n```", "```py\ntrain_dataloader = **DataLoader**(train_dataset,batch_size = 64, shuffle=True, num_workers=10)\n```", "```py\nfor image_batch, label_batch in train_dataloader:\n    print(image_batch.size(),label_batch.size())\n    break\n------------------------------------------------------------------\ntorch.Size([64, 3, 224, 224]) torch.Size([64])\n```", "```py\nmodel = BiLSTM()\ninput_batch_1 = torch.randint(low = 0,high = 10000, size = (100,**10**))\ninput_batch_2 = torch.randint(low = 0,high = 10000, size = (100,**25**))\nprint(model(input_batch_1).size())\nprint(model(input_batch_2).size())\n------------------------------------------------------------------\ntorch.Size([100, 1])\ntorch.Size([100, 1])\n```", "```py\ntrain_dataset = CustomTextDataset(X,y)\n```", "```py\ntrain_dataloader = DataLoader(train_dataset,batch_size = 64, shuffle=False, num_workers=10)\nfor xb,yb in train_dataloader:\n    print(xb.size(),yb.size())\n```", "```py\ntrain_dataloader = DataLoader(train_dataset,batch_size = 64, shuffle=False, num_workers=10,**collate_fn** **=** **collate_text**)for xb,yb in train_dataloader:\n    print(xb.size(),yb.size())\n```", "```py\n# some random input:X = torch.randn(100,784)\ny = torch.randint(low = 0,high = 10,size = (100,))\n```", "```py\nmodel = myClassificationNet()\npreds = model(X)\n```", "```py\ncriterion = nn.NLLLoss()\nloss = criterion(preds,y)\nloss\n------------------------------------------\ntensor(2.4852, grad_fn=<NllLossBackward>)\n```", "```py\ndef customMseLoss(output,target):\n    loss = torch.mean((output - target)**2)     \n    **return** loss\n```", "```py\noutput = model(x)\nloss = customMseLoss(output, target)\nloss.backward()\n```", "```py\noptimizer **=** torch.optim.Adam(model.parameters(), lr=0.01, betas=(0.9, 0.999))\n```"]