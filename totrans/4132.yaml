- en: How to Select Rows and Columns in Pandas Using [ ], .loc, iloc, .at and .iat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/06/select-rows-columns-pandas.html](https://www.kdnuggets.com/2019/06/select-rows-columns-pandas.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How to Select Rows and Columns in Pandas using [ ], .loc, iloc, .at and .iat](../Images/702ba22e874a73b4bd1f47dd5e07b6a6.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by [catalyststuff](https://www.freepik.com/free-vector/cute-panda-lifting-barbell-gym-fitness-cartoon-vector-icon-illustration-animal-sports-icon-isolated_29456470.htm#query=panda&position=36&from_view=search)
    on Freepik
  prefs: []
  type: TYPE_NORMAL
- en: '*You can download the Jupyter notebook of this tutorial [here](https://nbviewer.jupyter.org/github/manujeevanprakash/Selecting-rows-and-columns-pandas/blob/master/Selecting%20rows%20and%20columns%20-%20Pandas%20tutorial.ipynb).*'
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, I will show you how to select subsets of data in Pandas using
    `[ ]`, `.loc`, `.iloc`, `.at`, and `.iat`.  I will be using the wine quality dataset
    hosted on the [UCI](http://archive.ics.uci.edu/ml/datasets/Wine) website. This
    data record 11 chemical properties (such as the concentrations of sugar, citric
    acid, alcohol, pH, etc.) of thousands of red and white wines from northern Portugal,
    as well as the quality of the wines, recorded on a scale from 1 to 10\. We will
    only look at the data for red wine.
  prefs: []
  type: TYPE_NORMAL
- en: First, I import the Pandas library, and read the dataset into a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![import_pandas_1](../Images/cebadef539bd97f3ff603820d6fd41d4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here are the first 5 rows of the DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Pandas dataframe head](../Images/c4045109d9fabcb1d3a2c82aa0eca343.png)'
  prefs: []
  type: TYPE_IMG
- en: I rename the columns to make it easier for me call the column names for future
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Different Ways to Select Columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selecting a single column
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To select the first column 'fixed_acidity', you can pass the column name as
    a string to the indexing operator.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/08276394e3dac0b88e392f7ccbb07266.png)'
  prefs: []
  type: TYPE_IMG
- en: You can perform the same task using the dot operator.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6e270715c30162d3bb8555074680c0cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting multiple columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To select multiple columns, you can pass a list of column names to the indexing
    operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can assign all your columns to a list variable and pass that
    variable to the indexing operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c8ad3f9275eaf80b4ce68eca60b1e459.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting columns using "select_dtypes" and "filter" methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To select columns using `select_dtypes` method, you should first find out the
    number of columns for each data types.
  prefs: []
  type: TYPE_NORMAL
- en: '![selecting columns using dtypes](../Images/024adac40939d295865a670cb353cfa6.png)'
  prefs: []
  type: TYPE_IMG
- en: In this example, there are 11 columns that are float and one column that is
    an integer. To select only the float columns,  use `wine_df.select_dtypes(include
    = ['float'])`. The `select_dtypes` method takes in a list of datatypes in its
    include parameter. The list values can be a string or a Python object.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the `filter` method to select columns based on the column names
    or index labels.
  prefs: []
  type: TYPE_NORMAL
- en: '![filter_method for selecting columns](../Images/0efdf55372d05c339e7235361c2e3c1d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the above example, the `filter` method returns columns that contain the exact
    string 'acid'. The `like` parameter takes a string as an input and returns columns
    that has the string.
  prefs: []
  type: TYPE_NORMAL
- en: You can use regular expressions with the `regex` parameter in the `filter` method.
  prefs: []
  type: TYPE_NORMAL
- en: '![regular_exp_filter](../Images/66cfbe43313d8970181b71e5374850b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, I first rename the *ph* and *quality* columns. Then, I pass the regex
    parameter to the `filter` method to find all the columns that has a number.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Order of Columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I would like to change the order of my columns.
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the order of columns](../Images/ee3e2116ca847c37fce7083a5f00a1bc.png)'
  prefs: []
  type: TYPE_IMG
- en: '`wine_df.columns` shows all the column names. I organize the names of my columns
    into three list variables, and concatenate all these variables to get the final
    column order.'
  prefs: []
  type: TYPE_NORMAL
- en: '![reordering columns in pandas](../Images/ecbfd932b084cd60eb70a39f893ee9df.png)'
  prefs: []
  type: TYPE_IMG
- en: I use the Set module to check if `new_cols` contains all the columns from the
    original.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I pass the `new_cols` variable to the indexing operator and store the
    resulting DataFrame in a variable `"wine_df_2" `. Now, the `wine_df_2 `DataFrame
    has the columns in the order that I wanted.
  prefs: []
  type: TYPE_NORMAL
- en: '![pass the names of the columns](../Images/d30a144433d06a5dd1f6837a112bdc67.png)'
  prefs: []
  type: TYPE_IMG
- en: Different Ways to Select Rows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selecting rows using .iloc and loc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's see how to use .iloc and loc for selecting rows from our DataFrame. To
    illustrate this concept better, I remove all the duplicate rows from the "density"
    column and change the index of `wine_df `DataFrame to 'density'.
  prefs: []
  type: TYPE_NORMAL
- en: '![selecting rows](../Images/7c4042a7e32fefcc04f9cfce34a8f788.png)'
  prefs: []
  type: TYPE_IMG
- en: To select the third row in `wine_df `DataFrame, I pass number 2 to the `.iloc`
    indexer.
  prefs: []
  type: TYPE_NORMAL
- en: '![selecting rows using iloc](../Images/a448f8d8c2d6b3c86d59f8d4f54efceb.png)'
  prefs: []
  type: TYPE_IMG
- en: To do the same thing, I use the `.loc` indexer.
  prefs: []
  type: TYPE_NORMAL
- en: '![selecting rows using loc](../Images/8a65f1489636c3726e3f9f4a92f8691b.png)'
  prefs: []
  type: TYPE_IMG
- en: To select rows with different index positions, I pass a list to the `.iloc`
    indexer.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c24b78400b8a99f912ff6ea37609ece9.png)'
  prefs: []
  type: TYPE_IMG
- en: I pass a list of density values to the `.iloc` indexer to reproduce the above
    DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![loc to reproduce the dataframe](../Images/95cb1c8eac0b7cc8f4badb152229b320.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use slicing to select multiple rows . This is similar to slicing a list
    in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3462ee8575270be3c2b35ec530b43342.png)'
  prefs: []
  type: TYPE_IMG
- en: The above operation selects rows 2, 3 and 4.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform the same thing using `loc`.
  prefs: []
  type: TYPE_NORMAL
- en: '![list slicing using loc](../Images/87e74a4a029aff959363eb55873efac0.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, I am selecting the rows between  the indexes *0.9970 *and *0.9959*.
  prefs: []
  type: TYPE_NORMAL
- en: Selecting Rows and Columns Simultaneously
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have to pass parameters for both row and column inside the `.iloc` and `loc`
    indexers to select rows and columns simultaneously. The rows and column values
    may be scalar values, lists, slice objects or boolean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select all the rows, and 4th, 5th and 7th column:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9da68dbe538dae687906056ce52542da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To replicate the above DataFrame, pass the column names as a list to the `.loc`
    indexer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![columns and rows using loc](../Images/8e1e5339b7e70ac65522052f4092b66d.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting disjointed rows and columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To select a particular number of rows and columns, you can do the following
    using `.iloc`.
  prefs: []
  type: TYPE_NORMAL
- en: '![disjointed rows using iloc](../Images/94fc33523cb1194e1d0e196e896b35fd.png)'
  prefs: []
  type: TYPE_IMG
- en: To select a particular number of rows and columns, you can do the following
    using `.loc`.
  prefs: []
  type: TYPE_NORMAL
- en: '![selecting particular rows using loc](../Images/998d994536c63a89fa911e883576a542.png)'
  prefs: []
  type: TYPE_IMG
- en: To select a single value from the DataFrame, you can do the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![selecting a single scalar value](../Images/271ba1ff98120b2e81dbde5634b4902b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use slicing to select a particular column.
  prefs: []
  type: TYPE_NORMAL
- en: '![slicing to selecting rows and columns](../Images/898c7280e9c1c6e38632cf78c8249ac1.png)'
  prefs: []
  type: TYPE_IMG
- en: To select rows and columns simultaneously, you need to understand the use of
    comma in the square brackets. The parameters to the left of the comma always selects
    rows based on the row index, and parameters to the right of the comma always selects
    columns based on the column index.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to select a set of rows and all the columns, you don't need to use
    a colon following a comma.
  prefs: []
  type: TYPE_NORMAL
- en: '![no need to use comma](../Images/3161e81a4b1cebe9e837a6f236e80b1f.png)'
  prefs: []
  type: TYPE_IMG
- en: '![iloc - for selecting all columns and selected number of rows](../Images/64d16cc79ebda9e257120ba3e39197e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting rows and columns using "get_loc" and "index" methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![rows and columns using get_loc](../Images/c462379dac125653e38a3dd3238eee91.png)'
  prefs: []
  type: TYPE_IMG
- en: In the above example, I use the `get_loc ` method to find the integer position
    of the column 'volatile_acidity' and assign it to the variable `col_start`. Again,
    I use the `get_loc `method to find the integer position of the column that is
    2 integer values more than  'volatile_acidity' column, and assign it to the variable
    called `col_end`.I then use the `iloc `method to select the first 4 rows, and
    `col_start` and `col_end`columns.  If you pass an index label to the `get_loc `method,
    it returns its integer location.
  prefs: []
  type: TYPE_NORMAL
- en: You can perform a very similar operation using .`loc`.  The following shows
    how to select the rows from 3 to 7, along with columns "volatile_acidity" to "chlorides".
  prefs: []
  type: TYPE_NORMAL
- en: '![index and getloc](../Images/e57abad54bd2b8c8143d4ec75759394d.png)'
  prefs: []
  type: TYPE_IMG
- en: Subselection using .iat and at
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Indexers, `.iat` and `.at`, are much more faster than .iloc and .loc for selecting a
    single element from a DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: '![density val](../Images/45c9d021cd058bd93952e9d841399bd1.png)'
  prefs: []
  type: TYPE_IMG
- en: '![subselection using iat and at](../Images/42741047c28f39e6234eb5e8c48d23c4.png)'
  prefs: []
  type: TYPE_IMG
- en: '![subselection using iat and at part 2](../Images/9c82dd5edc43a1d89a6e15a0fd7eb726.png)'
  prefs: []
  type: TYPE_IMG
- en: I will be writing more tutorials on manipulating data using Pandas. Stay Tuned!
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Pandas Cookbook](https://www.packtpub.com/big-data-and-business-intelligence/pandas-cookbook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python for Data Analysis](https://www.amazon.com/Python-Data-Analysis-Wrangling-IPython-ebook/dp/B075X4LT6K)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[4 Ways to Rename Pandas Columns](https://www.kdnuggets.com/2022/11/4-ways-rename-pandas-columns.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Ways to Append Rows to Pandas DataFrames](https://www.kdnuggets.com/2022/08/3-ways-append-rows-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Process a DataFrame with Millions of Rows in Seconds](https://www.kdnuggets.com/2022/01/process-dataframe-millions-rows-seconds.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Correctly Select a Sample From a Huge Dataset in Machine Learning](https://www.kdnuggets.com/2019/05/sample-huge-dataset-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using SQL with Python: SQLAlchemy and Pandas](https://www.kdnuggets.com/using-sql-with-python-sqlalchemy-and-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using the apply() Method with Pandas Dataframes](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
