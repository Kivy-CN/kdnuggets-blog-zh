["```py\nimport numpy as np \n\n#15 random integers from the \"discrete uniform\" distribution\nages = np.random.randint(0, 100, 15)\n\n#evenly spaced bins\nages_binned = np.floor_divide(ages, 10)\n\nprint(f\"Ages: {ages} \\nAges Binned: {ages_binned} \\n\")\n>>> Ages: [97 56 43 73 89 68 67 15 18 36  4 97 72 20 35]\nAges Binned: [9 5 4 7 8 6 6 1 1 3 0 9 7 2 3]\n\n#numbers spanning several magnitudes\nviews = [300, 5936, 2, 350, 10000, 743, 2854, 9113, 25, 20000, 160, 683, 7245, 224]\n\n#map count -> exponential width bins\nviews_exponential_bins = np.floor(np.log10(views))\n\nprint(f\"Views: {views} \\nViews Binned: {views_exponential_bins}\")\n>>> Views: [300, 5936, 2, 350, 10000, 743, 2854, 9113, 25, 20000, 160, 683, 7245, 224]\nViews Binned: [2\\. 3\\. 0\\. 2\\. 4\\. 2\\. 3\\. 3\\. 1\\. 4\\. 2\\. 2\\. 3\\. 2.]\n\n```", "```py\nimport pandas as pd\n\n#map the counts to quantiles (adaptive binning)\nviews_adaptive_bin = pd.qcut(views, 5, labels=False)\n\nprint(f\"Adaptive bins: {views_adaptive_bin}\")\n>>> Adaptive bins: [1 3 0 1 4 2 3 4 0 4 0 2 3 1]\n\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndf = pd.read_csv(\"../data/raw/train.csv\")\n\n# applying various transformations\nx_log = np.log(df[\"GrLivArea\"].copy()) # log \nx_square_root = np.sqrt(df[\"GrLivArea\"].copy()) # square root x_boxcox, _ = stats.boxcox(df[\"GrLivArea\"].copy()) # boxcox\nx = df[\"GrLivArea\"].copy() # original data\n\n# creating the figures\nfig = make_subplots(rows=2, cols=2,\n                    horizontal_spacing=0.125,\n                    vertical_spacing=0.125,\n                    subplot_titles=(\"Original Data\",\n                                    \"Log Transformation\",\n                                    \"Square root transformation\",\n                                    \"Boxcox Transformation\")\n                    )\n\n# drawing the plots\nfig.add_traces([\n                go.Histogram(x=x,\n                             hoverinfo=\"x\",\n                             showlegend=False),\n                go.Histogram(x=x_log,\n                             hoverinfo=\"x\",\n                             showlegend=False),\n                go.Histogram(x=x_square_root,\n                             hoverinfo=\"x\",\n                             showlegend=False),\n                go.Histogram(x=x_boxcox,\n                             hoverinfo=\"x\",\n                             showlegend=False),\n               ],\n               rows=[1, 1, 2, 2],\n               cols=[1, 2, 1, 2]\n)\n\nfig.update_layout(\n    title=dict(\n               text=\"GrLivArea with various Power Transforms\",\n               font=dict(\n                         family=\"Arial\",\n                         size=20)),\n    showlegend=False,\n    width=800,\n    height=500)\n\nfig.show() # display figure\n\n```", "```py\nimport pandas as pd\nfrom sklearn.datasets import load_wine\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\nimport plotly.graph_objects as go\n\nwine_json= load_wine() # load in dataset\n\ndf = pd.DataFrame(data=wine_json[\"data\"], columns=wine_json[\"feature_names\"]) # create pandas dataframe\n\ndf[\"Target\"] = wine_json[\"target\"] # created new column and added target labels\n\n# standardization\nstd_scaler = StandardScaler().fit(df[[\"alcohol\", \"malic_acid\"]])\ndf_std = std_scaler.transform(df[[\"alcohol\", \"malic_acid\"]])\n\n# minmax scaling\nminmax_scaler = MinMaxScaler().fit(df[[\"alcohol\", \"malic_acid\"]])\ndf_minmax = minmax_scaler.transform(df[[\"alcohol\", \"malic_acid\"]])\n\n# l2 normalization\nl2norm = Normalizer().fit(df[[\"alcohol\", \"malic_acid\"]])\ndf_l2norm = l2norm.transform(df[[\"alcohol\", \"malic_acid\"]])\n\n# creating traces\ntrace1 = go.Scatter(x= df_std[:, 0],\n                    y= df_std[:, 1],\n                    mode= \"markers\",\n                    name= \"Standardized Scale\")\n\ntrace2 = go.Scatter(x= df_minmax[:, 0],\n                    y= df_minmax[:, 1],\n                    mode= \"markers\",\n                    name= \"MinMax Scale\")\n\ntrace3 = go.Scatter(x= df_l2norm[:, 0],\n                    y= df_l2norm[:, 1],\n                    mode= \"markers\",\n                    name= \"L2 Norm Scale\")\n\ntrace4 = go.Scatter(x= df[\"alcohol\"],\n                    y= df[\"malic_acid\"],\n                    mode= \"markers\",\n                    name= \"Original Scale\")\n\nlayout = go.Layout(\n         title= \"Effects of Feature scaling\",\n         xaxis=dict(title= \"Alcohol\"),\n         yaxis=dict(title= \"Malic Acid\")\n         )\n\ndata = [trace1, trace2, trace3, trace4]\nfig = go.Figure(data=data, layout=layout)\nfig.show()\n\n```", "```py\nimport numpy as np\nfrom sklearn.preprocessing import PolynomialFeatures\n\n# creating dummy dataset\nX = np.arange(10).reshape(5, 2)\nX.shape\n>>> (5, 2)\n\n# interactions between features only\ninteractions = PolynomialFeatures(interaction_only=True)\nX_interactions= interactions.fit_transform(X)\nX_interactions.shape\n>>> (5, 4)\n\n# polynomial features \npolynomial = PolynomialFeatures(5)\nX_poly = polynomial.fit_transform(X)\nX_poly.shape\n>>> (5, 6)\n\n```"]