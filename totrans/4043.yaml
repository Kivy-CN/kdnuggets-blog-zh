- en: 11 Python Magic Methods Every Programmer Should Know
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![11 Python Magic Methods Every Programmer Should Know](../Images/c6e4055e8f998e4027bd282946ee7fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In Python, magic methods help you emulate the behavior of built-in functions
    in your Python classes. These methods have leading and trailing double underscores
    (__), and hence are also called **dunder methods**.
  prefs: []
  type: TYPE_NORMAL
- en: 'These magic methods also help you implement operator overloading in Python.
    You’ve probably seen examples of this. Like using the multiplication operator
    * with two integers gives the product. While using it with a string and an integer
    `k` gives the string repeated `k` times:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this article, we’ll explore magic methods in Python by creating a simple
    two-dimensional vector `Vector2D` class.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start with methods you’re likely familiar with and gradually build up
    to more helpful magic methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start writing some magic methods!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. __init__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following `Vector2D` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you create a class and instantiate an object, you can add attributes like
    so: `obj_name.attribute_name = value`.'
  prefs: []
  type: TYPE_NORMAL
- en: However, instead of manually adding attributes to every instance that you create
    (not interesting at all, of course!), you need a way to initialize these attributes
    when you instantiate an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so you can define the `__init__` method. Let''s define the define the
    `__init__` method for our `Vector2D` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2\. __repr__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you try to inspect or print out the object you instantiated, you’ll see
    that you don't get any helpful information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This is why you should add a representation string, a string representation
    of the object. To do so, add a `__repr__` method like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `__repr__` should include all the attributes and information needed to create
    an instance of the class. The `__repr__` method is typically used for the purpose
    of debugging.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. __str__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `__str__` is also used to add a string representation of the object. In
    general, the `__str__` method is used to provide info to the end users of the
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a `__str__` method to our class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If there is no implementation of `__str__`, it falls back to `__repr__`. So
    for every class that you create, you should—at the minimum—add a `__repr__` method.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. __eq__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let's add a method to check for equality of any two objects of the `Vector2D`
    class. Two vector objects are equal if they have identical x and y coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create two `Vector2D` objects with equal values for both x and y and compare
    them for equality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The result is False. Because by default the comparison checks for equality of
    the object IDs in memory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add the `__eq__` method to check for equality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The equality checks should now work as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 5\. __len__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python’s built-in `len()` function helps you compute the length of built-in
    iterables. Let’s say, for a vector, length should return the number of elements
    that the vector contains.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let’s add a `__len__` method for the `Vector2D` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'All objects of the `Vector2D` class are of length 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 6\. __add__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's think of common operations we’d perform on vectors. Let's add magic
    methods to add and subtract any two vectors.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you directly try to add two vector objects, you’ll run into errors. So you
    should add an `__add__` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now add any two vectors like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 7\. __sub__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, let’s add a `__sub__` method to calculate the difference between any
    two objects of the `Vector2D` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 8\. __mul__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can also define a `__mul__` method to define multiplication between objects.
  prefs: []
  type: TYPE_NORMAL
- en: Let's implement let's handle
  prefs: []
  type: TYPE_NORMAL
- en: 'Scalar multiplication: the multiplication of a vector by scalar and'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inner product: the dot product of two vectors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now we’ll take a couple of examples to see the `__mul__` method in action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 9\. __getitem__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `__getitem__` magic method allows you to index into the objects and access
    attributes or slice of attributes using the familiar square-bracket [ ] syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'For an object `v` of the `Vector2D` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`v[0]`: x coordinate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v[1]`: y coordinate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you try accessing by index, you’ll run into errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s implement the `__getitem__` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now access the elements using their indexes as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 10\. __call__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With an implementation of the `__call__` method, you can call objects as if
    they were functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Vector2D` class, we can implement a `__call__` to scale a vector by
    a given factor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'So if you now call 3, you’ll get the vector scaled by factor of 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 11\. __getattr__
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `__getattr__` method is used to get the values of specific attributes of
    the objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, we can add a `__getattr__` dunder method that gets called
    to compute the [magnitude (L2-norm) of the vector](/2023/05/vector-matrix-norms-numpy-linalg-norm.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s verify if this works as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's all for this tutorial! I hope you learned how to add magic methods to
    your class to emulate the behavior of built-in functions.
  prefs: []
  type: TYPE_NORMAL
- en: We’ve covered some of the most useful magic methods. But this is not this is
    not an exhaustive list. To further your understanding, create a Python class of
    your choice and add magic methods depending on the functionality required. Keep
    coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Python f-Strings Magic: 5 Game-Changing Tricks Every Coder Needs to Know](https://www.kdnuggets.com/python-fstrings-magic-5-gamechanging-tricks-every-coder-needs-to-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Python''s Iteration and Membership: A Guide to…](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 6 Python Machine Learning Tools Every Data Scientist Should Know About](https://www.kdnuggets.com/2022/05/6-python-machine-learning-tools-every-data-scientist-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, May 25: The 6 Python Machine Learning Tools Every…](https://www.kdnuggets.com/2022/n21.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
