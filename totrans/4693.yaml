- en: R vs Python for Data Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: R 与 Python 数据可视化
- en: 原文：[https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html](https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html](https://www.kdnuggets.com/2019/03/r-vs-python-data-visualization.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)![figure-name](../Images/fe68e9c1a794ebf6ac60a5f9d083dfdc.png)ggplot2
    vs seaborn'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)![图像名称](../Images/fe68e9c1a794ebf6ac60a5f9d083dfdc.png)ggplot2
    vs seaborn'
- en: R and Python have inundated us with the ability to generate complex and attractive
    statistical graphics in order to gain insights and explore our data. Both are
    well equipped to handle millions of data points (maybe billions depending on the
    platform).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: R 和 Python 使我们能够生成复杂且吸引人的统计图形，以便获得见解和探索数据。两者都能处理数百万的数据点（可能取决于平台，甚至数十亿）。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三推荐课程
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Visualizing Data in Python
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Python 可视化数据
- en: Seaborn is built on top of Matplotlib and is a comparatively simpler syntax
    and structure to Matplotlib.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Seaborn 建立在 Matplotlib 之上，语法和结构相对简单。
- en: First we use `import seaborn as sns; sns.set()` to load and set the seaborn
    theme defaults to the Python session. Matplotlib has to be loaded as well since
    both libraries are used in tandem.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们使用 `import seaborn as sns; sns.set()` 加载并设置 seaborn 主题默认值到 Python 会话中。由于两个库是一起使用的，Matplotlib
    也必须加载。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`sns.set_style()` sets the background theme of the plot. "ticks" is the closest
    to the plot made in R.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sns.set_style()` 设置图表的背景主题。"ticks" 是最接近 R 中制作的图表的样式。'
- en: '`sns.set_context()` will apply predefined formatting to the plot to fit the
    reason or context the visualization is to be used. `font_scale=1` is used to set
    the scaele of the font size for all the text in the graph.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sns.set_context()` 将应用预定义的格式以适应可视化的用途或背景。`font_scale=1` 用于设置图表中所有文本的字体大小比例。'
- en: '`plt.figure()`is a command to control different aspects of the matpltlib graph
    (as stated before seaborn graphs are just Matplotlib plots under the hood).'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plt.figure()` 是一个命令，用于控制 matpltlib 图形的不同方面（如前所述，seaborn 图形实际上是 Matplotlib
    图形）。'
- en: '`sns.scatterplot()`is the command used to pass arguments to create the seaborn
    style scatterplot.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sns.scatterplot()` 是用于传递参数以创建 seaborn 风格散点图的命令。'
- en: '`x="wt"`maps the weight to the x-axis.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x="wt"` 将重量映射到 x 轴。'
- en: '`y="hp"`maps the horsepower to the y-axis.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y="hp"` 将马力映射到 y 轴。'
- en: '`hue="cyl"`will fill and color the scatterpoints.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`hue="cyl"` 将填充和着色散点。'
- en: '`palette=[''red'',''green'',''blue'']`manually overrides the color palette
    that is set by `hue`to red, green and blue.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`palette=[''red'',''green'',''blue'']` 手动覆盖 `hue` 设置的颜色调色板，将其改为红色、绿色和蓝色。'
- en: '`data="mtcars"`allows us to use the data in the dataset.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data="mtcars"` 允许我们使用数据集中的数据。'
- en: '`style=''cyl''`assigns shapes to each cyinder category.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`style=''cyl''` 为每个气缸类别分配形状。'
- en: '`legend=''brief''`will assign the `hue`&`size`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`legend=''brief''` 将分配 `hue` 和 `size`。'
- en: '`sizes=(800,1000)`'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sizes=(800,1000)`'
- en: controls the minimim and maximum size of the scatterpoints on the plot.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 控制图表上散点的最小和最大大小。
- en: '`plt.title()` gives the plot its main title. *If you are an experienced Matplotlib
    user or used plt.suptitle() before you know the confusion when using the two together.*
    The arguments are self-explanatory.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plt.title()` 为图表设置主标题。*如果你是经验丰富的 Matplotlib 用户，或者之前使用过 plt.suptitle()，你会知道同时使用这两个函数时的困惑。*
    参数很明显。'
- en: '`plt.xlabel()`will format the x-axis label. I use `set_..` to access the class
    to include the aesthetic properties. This can get cluttered at times but there
    are many ways to format a seaborn/matplotlib plot. This is useful for after the
    plot has been created. The plot was already made with `sns.scatterplot` so now
    we need to override the default formats in this manner.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plt.xlabel()` 将格式化 x 轴标签。我使用 `set_..` 访问类来包含美学属性。这有时可能会显得杂乱，但有许多方法可以格式化 seaborn/matplotlib
    图形。这在图形创建后非常有用。图形已经用 `sns.scatterplot` 创建，因此我们需要以这种方式覆盖默认格式。'
- en: '`plt.ylabel()`works in the exact same way just for the y-axis.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`plt.ylabel()` 的工作方式与 x 轴完全相同，只是针对 y 轴。'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![figure-name](../Images/b27016c26864a2941fd95d362e2d8a21.png)Seaborn: mtcars
    scatterplot'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![figure-name](../Images/b27016c26864a2941fd95d362e2d8a21.png)Seaborn：mtcars
    散点图'
- en: As we can see the plot is qute similar to the one made in ggplot2\. To the next
    step of faceting this plot, Seaborn is an easier alternative to Matplotlib.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，该图形与 ggplot2 创建的图形非常相似。对于对这个图进行分面处理，Seaborn 是 Matplotlib 的一个更简单的替代方案。
- en: Faceting in Seaborn requires a new plot to be created. There are a number of
    ways to do it and `sns.relplot()` is one such way.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Seaborn 中进行分面处理需要创建一个新图形。有多种方法可以实现，`sns.relplot()` 就是其中之一。
- en: '`sns.set()`will set the default Seaborn theme into the Python environment and
    it can also be used to override the default parameters as we see with `rc={''figure.figsize'':(20,20)}`'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sns.set()` 将默认的 Seaborn 主题设置到 Python 环境中，也可以用于覆盖默认参数，如 `rc={''figure.figsize'':(20,20)}`。'
- en: '`sns.relplot()`has many of the same parameters discussed above and here we
    will discuss the new ones as this plot is geared towards faceting.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`sns.relplot()` 具有许多与上述讨论相同的参数，这里我们将讨论针对分面处理的新参数。'
- en: '`col="gear"` specifies which column in the mtcars dataset to use for faceting.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col="gear"` 指定了在 mtcars 数据集中用于分面化的列。'
- en: '`col_wrap=3` specifies the placement of the plots. In this case, the plots
    will be placed in 3 columns. It will be in one row since the number of rows were
    not specified but this can be done if needed.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`col_wrap=3` 指定了图形的排列方式。在这种情况下，图形将被放置在 3 列中。由于没有指定行数，所以它将位于一行中，但如果需要，可以指定行数。'
- en: '`aspect=0.6` is a control for the size of the plot. I suggest reading the documentation
    on this as it can become confusing to explain at this point.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aspect=0.6` 是控制图形大小的参数。我建议阅读相关文档，因为这个部分的解释可能会变得复杂。'
- en: '`g.fig.suptitle()`creates the title for the plot.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`g.fig.suptitle()` 为图形创建标题。'
- en: '`position=(0.5,1.05)`is an interesting argument because it controls the position
    of the title. Even small changes can drastically change the position of the title.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`position=(0.5,1.05)` 是一个有趣的参数，因为它控制标题的位置。即使是小的变化也能显著改变标题的位置。'
- en: '`g.set_xlabels` & `g.set_ylabels` will work as previously discussed.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`g.set_xlabels` 和 `g.set_ylabels` 将按之前讨论的方式工作。'
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![figure-name](../Images/0c776efeb28b7f1b013d98d5d18ca611.png)Seaborn: mtcars
    faceted scatterplot'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![figure-name](../Images/0c776efeb28b7f1b013d98d5d18ca611.png)Seaborn：mtcars
    分面散点图'
- en: Visualizing Data in R
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 R 中可视化数据
- en: Using ggplot2 we can create easy and customizable graphics by adding layers
    of aesthetics to the plot. A great feature for new users is that besides the step
    of loading the data to be used in ggplot2 and giving the geometric shape, the
    layers of aesthetics can be (mostly) done in any order. This is because ggplot2
    was built on the principles of the grammar of graphics. These principles enable
    us to create stunning and informative visualizations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ggplot2，我们可以通过向图形添加美学层来创建简单且可自定义的图形。对新用户来说，一个很棒的功能是，除了加载数据和指定几何形状外，美学层（大部分情况下）可以按照任何顺序添加。这是因为
    ggplot2 建立在图形语法的原则之上。这些原则使我们能够创建引人注目且信息丰富的可视化。
- en: The following R code will load the ggplot2 package (probably the most prominent
    visualization package in R) and will generate a scatter plot for us.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 R 代码将加载 ggplot2 包（可能是 R 中最突出的可视化包），并为我们生成一个散点图。
- en: '`ggplot(mtcars, aes(x=wt, y=hp))` will load the mtcars dataset to be used in
    ggplot2 and `aes(x=wt, y=hp)` will map the aesthetics for our plot with the *x*
    aesthetic as weight for the x-axis and *y* aesthetic with Horsepower for the y-axis.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ggplot(mtcars, aes(x=wt, y=hp))` 将加载 mtcars 数据集以供 ggplot2 使用，`aes(x=wt, y=hp)`
    将为我们的图形映射美学，其中 *x* 美学表示 x 轴的重量，*y* 美学表示 y 轴的马力。'
- en: '`geom_point(size=1,aes(color=cyl, shape=cyl, fill=cyl))` will generate the
    scatter plot with the predefined aesthetics mentioned before and the new aesthetics.
    `color=cyl` will give the outline of the scatterpoints a unique color based on
    the number of cylinders. `shape=cyl` will give a unique shape to the scatterpoints
    and will work in tandem with `color`. `fill=cyl` will fill the scatterpoints with
    colorsn instead of just the outline. It is best to use `color` and `fill` together
    (there is a small aesthetic difference that will be obvious if you look closely.)'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`geom_point(size=1,aes(color=cyl, shape=cyl, fill=cyl))` 将生成具有之前定义的美学属性和新的美学属性的散点图。`color=cyl`
    将根据气缸数为散点的轮廓赋予独特的颜色。`shape=cyl` 将为散点赋予独特的形状，并与 `color` 一起工作。`fill=cyl` 将填充散点的颜色，而不仅仅是轮廓。最好将
    `color` 和 `fill` 一起使用（如果你仔细查看，会发现有一个细微的美学差异）。'
- en: '`theme_bw()` provides a pre-made theme in ggplot2 for us to get started. This
    can then be easily adjusted with the right commands. ggplot2 has a simple and
    easy to learn syntax for this task which makes it easy to manipulate.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`theme_bw()` 提供了 ggplot2 中的一个预制主题，我们可以用来开始。然后可以使用正确的命令轻松调整。ggplot2 的语法简单易学，这使得调整变得容易。'
- en: '`theme()` is the command that allows you to change the default settings of
    any theme that is already set in point 3 (you can also use it to change the other
    aesthetics of the plot).'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`theme()` 是允许你更改在第 3 点中设置的任何主题的默认设置的命令（你也可以用它来更改图表的其他美学属性）。'
- en: '`axis.text=element_text(face=''bold'', size=7`formats the text of the y-axis
    and x-axis (the numbers on the axis). `face=''bold''` will bold the text while
    `size="7"` will increase its size to the specified amount.'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axis.text=element_text(face=''bold'', size=7` 格式化了 y 轴和 x 轴的文本（轴上的数字）。`face=''bold''`
    将加粗文本，而 `size="7"` 将其大小增加到指定的值。'
- en: '`axis.title=element_text(face=''bold'', size=10)`works the same as the command
    above but for the axis titles only.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axis.title=element_text(face=''bold'', size=10)` 与上述命令类似，但仅适用于轴标题。'
- en: '`axis.ticks=element_line(size=0.5)` will make the ticks on the graph have a
    more obvious appearance.'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axis.ticks=element_line(size=0.5)` 将使图表上的刻度线更加明显。'
- en: '`panel.background=element_rect(colour = NA)`is an aesthetic measure I decided
    to add which gets rid of the rectangular border surrounding the graph.'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`panel.background=element_rect(colour = NA)` 是我决定添加的一个美学措施，它去掉了包围图表的矩形边框。'
- en: '`plot.title=element_text(face=''bold'', size=11,hjust = 0.5))` simply bolds
    and changes the size of the main title. `***hjust=0.5***`will ***center align***
    the title.'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`plot.title=element_text(face=''bold'', size=11,hjust = 0.5))` 仅仅是加粗并更改主标题的大小。`***hjust=0.5***`
    将 ***使标题居中对齐***。'
- en: '`scale_color_manual(breaks = c("4", "6", "8"), values=c("red", "green", "blue"))`will
    override the default color scheme and add red to ''4'', green to ''6'' and blue
    to ''8''. This manually overrides the outline color of the scatterpoints.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale_color_manual(breaks = c("4", "6", "8"), values=c("red", "green", "blue"))`
    将覆盖默认的颜色方案，并将红色添加到 ''4''，绿色添加到 ''6''，蓝色添加到 ''8''。这会手动覆盖散点的轮廓颜色。'
- en: '`scale_fill_manual(breaks = c("4", "6", "8"), values=c("red", "green", "blue"))`
    will do the same as above but for the inside of the scatterpoints this time.'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale_fill_manual(breaks = c("4", "6", "8"), values=c("red", "green", "blue"))`
    将对散点的内部进行与上述相同的操作。'
- en: '`scale_y_continuous(breaks = seq(0,350,50))` manually overrides the numbers
    on the y-axis to start from zero and end at 350 with 50 unit increments. This
    will show on the major ticks.'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale_y_continuous(breaks = seq(0,350,50))` 手动覆盖 y 轴上的数字，使其从零开始，到 350 结束，单位增量为
    50。这将显示在主要刻度上。'
- en: '`scale_x_continuous(breaks = seq(1.5,5.5,0.5), minor_breaks=seq(1.5,5.5,1))`
    does the same as above for the x-axis and manually overrides the minor ticks but
    this will not be as obvious.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale_x_continuous(breaks = seq(1.5,5.5,0.5), minor_breaks=seq(1.5,5.5,1))`
    对 x 轴做了与上述相同的操作，并手动覆盖了次要刻度，但这不会那么明显。'
- en: '`scale_shape_manual(values=c(21,4,22))` will define what type of shape to give
    each category of cylinders.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scale_shape_manual(values=c(21,4,22))` 将定义每个气缸类别的形状类型。'
- en: '`options(repr.plot.width=4, repr.plot.height=3)`is a handy command when you
    want to manipulate the width and height of the figure. It is particularly useful
    in Jupyter.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`options(repr.plot.width=4, repr.plot.height=3)` 是一个方便的命令，当你想要调整图形的宽度和高度时特别有用。它在
    Jupyter 中尤其实用。'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/552abdef0c06ea1c173f6e3b00afff86.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/552abdef0c06ea1c173f6e3b00afff86.png)'
- en: 'ggplot: mtcars scatterplot'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'ggplot: mtcars 散点图'
- en: Another great aspect of ggplot2 is its **ability to facet data to create multiple
    plots in just one line of code**
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: ggplot2 的另一个优点是其 **能够在一行代码中对数据进行分面，创建多个图表**。
- en: '`facet_grid(~gear)`will subdivide the data by the number of gears and create
    a number of the same plots with the same theme aesthetics.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`facet_grid(~gear)`将按齿轮数量细分数据，并创建多个具有相同主题美学的相同图形。'
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/bea7dacd109dcf7417fa2129f2ed95b8.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bea7dacd109dcf7417fa2129f2ed95b8.png)'
- en: 'ggplot: mtcars faceted scatterplot'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'ggplot: mtcars分面散点图'
- en: Conclusion
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: One of the main differences I believe is that the Seaborn plots have a better
    defult resolution than the ggplot2 graphics and the syntax required can be much
    less (but this is dependent on circumstance). Seaborn uses a programmatic approach
    whereby the user can access the classes in Seaborn and Matplotlib to manipulate
    the plots. ggplot2 uses a layered approach wherein the user can add aesthetics
    and formats in any order to create the figure (which I believe can be more simpler
    despite the amount of code required). Most people do not notice and this may be
    more significant to some more than others, Python plots when saved as graphics
    take up significantly more disk space than R generated graphics. Among the graphics
    in this article, the Seaborn/Matplotlib graphics take up approximately 6x more
    disk space than the ggplot2 graphics.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为主要的区别之一是，Seaborn绘图的默认分辨率优于ggplot2图形，所需的语法也可能少得多（但这取决于具体情况）。Seaborn使用编程方法，用户可以访问Seaborn和Matplotlib中的类来操作图形。ggplot2使用分层方法，用户可以以任意顺序添加美学和格式来创建图形（尽管所需的代码量更多，我认为这种方法可能更简单）。大多数人不会注意到这一点，而这对某些人可能比其他人更为重要，Python图形在保存为图像时占用的磁盘空间显著大于R生成的图形。在本文中的图形中，Seaborn/Matplotlib图形占用的磁盘空间约为ggplot2图形的6倍。
- en: Recreating the same plot — albeit with minor differences — is very possible
    with Seaborn and ggplot2\. While the tools are different, they can still be used
    to create the same object.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有些细微的差别，但使用Seaborn和ggplot2重新创建相同的图形是非常可能的。虽然工具不同，但仍然可以用它们创建相同的对象。
- en: '**Related:**'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[The Python Graph Gallery](/2017/11/python-graph-gallery.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python图形画廊](/2017/11/python-graph-gallery.html)'
- en: '[The Five Best Data Visualization Libraries](/2019/01/five-best-data-visualization-libraries.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[五大最佳数据可视化库](/2019/01/five-best-data-visualization-libraries.html)'
- en: '[Data Visualization Cheat Sheet](/2018/08/data-visualization-cheatsheet.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据可视化备忘单](/2018/08/data-visualization-cheatsheet.html)'
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: More On This Topic
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家都应该掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的Python代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
