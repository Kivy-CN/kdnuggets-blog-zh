- en: Database Key Terms, Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库关键术语，解释
- en: 原文：[https://www.kdnuggets.com/2016/07/database-key-terms-explained.html](https://www.kdnuggets.com/2016/07/database-key-terms-explained.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/07/database-key-terms-explained.html](https://www.kdnuggets.com/2016/07/database-key-terms-explained.html)
- en: Data has value. Actually, data **is** value. Data has proven to be the most
    important commodity in the digital economy. Data's *actual* value continues to
    grow, and the limits of its *prospective* value are pushed every day. Data is
    [the new everything](/2016/03/data-new-every-thing.html).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据有价值。实际上，数据**就是**价值。数据已经证明是数字经济中最重要的商品。数据的*实际*价值持续增长，它的*潜在*价值每天都在被推动。数据是[新一切](/2016/03/data-new-every-thing.html)。
- en: '![Data/information/knowledge pyramid](../Images/fcba6856f9d93514b15b4a585e1fb548.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![数据/信息/知识金字塔](../Images/fcba6856f9d93514b15b4a585e1fb548.png)'
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 工作'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Data needs to be curated, coddled, and cared for. It needs to be stored and
    processed, so that it may be transformed into information, and further refined
    into knowledge. The mechanism for storing data, subsequently facilitating these
    transformations, is, clearly, the database.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据需要被策划、呵护和关心。它需要被存储和处理，以便转化为信息，并进一步精炼成知识。存储数据的机制，从而促进这些转化，显然就是数据库。
- en: This post presents 16 key database concepts and their corresponding concise,
    straightforward definitions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本文介绍了 16 个关键的数据库概念及其简明、直观的定义。
- en: The selection of terms for this topic is especially difficult, so a whole host
    of reasons. Suffice it to say that these 16 concepts do not adequately represent
    all important terminology related to databases. I hope that they do, however,
    provide a jumping off point for those interested in learning more about databases,
    and their design and management.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 选择这个主题的术语特别困难，有很多原因。仅仅说这些 16 个概念并不能充分代表所有与数据库相关的重要术语。然而，我希望它们能为那些希望深入了解数据库及其设计和管理的人提供一个起点。
- en: '**1\. Relational Database**'
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**1\. 关系型数据库**'
- en: A relational database is one which employs the **relational model**, in which
    the raw data is organized into sets of tuples, and the tuples organized into relations.
    This relational model imposes structure on its contents, in contrast to unstructured
    or semi-structured data of the various NoSQL architectures.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库是使用**关系模型**的数据库，其中原始数据被组织成元组集合，元组则组织成关系。这种关系模型对其内容施加了结构，相对于各种 NoSQL 架构的非结构化或半结构化数据而言。
- en: '**2\. Database Management System (DBMS)**'
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**2\. 数据库管理系统 (DBMS)**'
- en: A database management system is a software system which facilitates the organization
    of housed data into a particular database architecture, be it relational (Relational
    Database Management System, or RDBMS), document store, key-value store, column-oriented,
    graph, or other. Popular DBMSs include MongoDB, Cassandra, Redis, MySQL, Microsoft
    SQL Server, SQLite, and Oracle, among many, many, many others.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库管理系统是一种软件系统，它使得存储的数据能够组织成特定的数据库架构，无论是关系型（关系型数据库管理系统，或 RDBMS）、文档存储、键值存储、列式存储、图形存储还是其他。流行的数据库管理系统包括
    MongoDB、Cassandra、Redis、MySQL、Microsoft SQL Server、SQLite 和 Oracle 等等。
- en: '**3\. Primary Key**'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**3\. 主键**'
- en: In the relational model, a primary key is a single attribute, or combination
    of attributes, which can be used to uniquely identify a row of data in a givn
    table. Common primary keys include vendor ID, user ID, email address, or combination
    of attributes considered together such as first name, last name, and city of residence,
    all considered together as a single entity. It should be noted that what is an
    acceptable primary key in one situation may not uniquely identify data instances
    in another.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系模型中，主键是一个单一属性或属性组合，用于唯一标识给定表中的一行数据。常见的主键包括供应商ID、用户ID、电子邮件地址，或诸如名字、姓氏和居住城市的属性组合，所有这些一起被视为一个单一实体。需要注意的是，在一种情况下可以接受的主键在另一种情况下可能无法唯一标识数据实例。
- en: '**4\. Foreign Key**'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**4\. 外键**'
- en: Again in the relational model, a foreign key is an attribute or collection of
    attributes from one relational table whose values must match another relational
    table's primary key. A common use for such an organizational scheme would be to
    link a street address in one table to a city in another, and perhaps to a country
    in a third. This eliminates repetitive data input, and reduces the possibility
    of error, increasing data accuracy.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系模型中，外键是来自一个关系表的一个属性或属性集合，其值必须匹配另一个关系表的主键。这种组织方案的常见用途是将一个表中的街道地址与另一个表中的城市关联起来，可能还与第三个表中的国家相关联。这消除了重复的数据输入，减少了错误的可能性，提高了数据准确性。
- en: '![Primary/foreign key relationship](../Images/f4e080ee54996996d94f8d1af6fc0fcf.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![主键/外键关系](../Images/f4e080ee54996996d94f8d1af6fc0fcf.png)'
- en: '**5\. Structured Query Language (SQL)**'
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**5\. 结构化查询语言（SQL）**'
- en: SQL is a relational database query and manipulation language. Its power and
    flexibility allows for the creation of databases and tables, and the manipulation
    and query of data. More recently, the term has become conflated with relational
    databases, relational database management systems, and the relational model, at
    least as a term used in contrast to the term "NoSQL."
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是一种关系数据库查询和操作语言。它的强大和灵活性允许创建数据库和表格，以及对数据的操作和查询。最近，这个术语已经与关系数据库、关系数据库管理系统和关系模型混为一谈，至少在与“
    NoSQL”这个术语对比时是这样。
- en: '**6\. NoSQL**'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**6\. NoSQL**'
- en: 'NoSQL is an umbrella term, one which encompasses a number of different technologies.
    These different technologies aren''t even necessarily related in any way beyond
    the single defining characteristic of NoSQL: they are not relational in nature.
    This lack of relational **structure** results in unstructured or semi-structured
    data in storage; there may be structure, but it is loose in nature, lax in enforcement.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL是一个总括性术语，涵盖了许多不同的技术。这些不同的技术不一定与NoSQL的唯一定义特征相关：它们本质上不是关系型的。这种缺乏关系的**结构**导致存储中的数据是非结构化或半结构化的；可能存在结构，但性质上较为松散，执行较为宽松。
- en: Often, NoSQL is used to mean "not only SQL," meaning that these solutions are
    more flexible and less rigid in nature. I'm sure there are die-hards in this argument
    of terminology ownership, but just be aware of the potential difference in definition.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，NoSQL被用来表示“不仅仅是SQL”，意味着这些解决方案在本质上更灵活、较少受限。我相信在这一术语所有权的争论中会有一些坚定的支持者，但请注意潜在的定义差异。
- en: '**7\. Metadata**'
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**7\. 元数据**'
- en: This is the data about the data. Metadata describes data relationships and characteristics,
    and is often referred to as a data dictionary, though that seems to be a term
    more prevalent in the relational world (though not exclusive to it by any means).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于数据的数据。元数据描述数据关系和特征，通常被称为数据字典，尽管这个术语在关系世界中更为常见（但并不独占）。
- en: '**8\. Consistency**'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**8\. 一致性**'
- en: A database is consistent when all of its imposed integrity constraints have
    been satisfied. Consistency can only be ensured if each database transaction,
    or data access request, begins in a known consistent state; otherwise, guarantees
    of consistency cannot be made. A database containing data that cannot be verified
    as consistent is problematic, especially to the extent to which its inconsistency
    is not known.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据库的所有完整性约束都已满足时，它就是一致的。只有当每个数据库事务或数据访问请求都以已知的一致状态开始时，才能确保一致性；否则，无法保证一致性。包含无法验证为一致的数据的数据库是有问题的，特别是当其不一致性未被发现时。
- en: '**9\. Data Redundancy**'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**9\. 数据冗余**'
- en: Data redundancy is a situation in a database in which copies of a given piece
    of data are housed in 2 different places. This redundancy can be achieved if data
    is held in multiple places in the same database, in multiple databases on the
    same computer, or in multiple databases across multiple computers, perhaps even
    using different database management server software. This redundancy can be leveraged
    for both data access and permanence.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 数据冗余是指在数据库中，给定数据的副本被存储在两个不同的地方。这种冗余可以通过在同一数据库中的多个地方、同一计算机上的多个数据库或跨多台计算机的多个数据库中存储数据来实现，甚至使用不同的数据库管理服务器软件。这种冗余可以用于数据访问和持久性。
- en: '**10\. ACID**'
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**10\. ACID**'
- en: ACID is an acronym referring to a set of database transaction properties, namely
    Atomicity, Consistency, Isolation, and Durability. A single database operation,
    or transaction, must be atomic, consistent, isolated, and durable in order to
    be valid. In other words, the set of steps which make up a transaction must either
    be completed in full or rolled back (atomic), consistent (see above definition),
    must be isolated from other potential transactions, and must be permanent (durable).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ACID 是一个缩写，指一组数据库事务属性，即原子性、一致性、隔离性和持久性。单个数据库操作或事务必须是原子性的、一致的、隔离的，并且是持久的，以便有效。换句话说，构成事务的步骤必须要么完全完成，要么回滚（原子性），保持一致（见上述定义），与其他潜在事务隔离，并且是持久的（持久性）。
- en: '**11\. CAP Theorem**'
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**11\. CAP 定理**'
- en: 'The CAP Theorem concludes that it is not possible for a distributed computer
    system (including distributed database management software and their housed data)
    to provide all of the following guarantees at the same time: Consistency, which
    states that each computer node contain all of the same data at the same time;
    availability, which states that each database request is responded to as either
    successful or failure; and partition tolerance, which states that the database
    system continues operating even when not all nodes are connected to one another
    and suffer communication issues. At best, only 2 of these guarantees can be made
    concurrently.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CAP 定理得出结论，分布式计算机系统（包括分布式数据库管理软件及其包含的数据）不可能同时提供以下所有保证：一致性，指的是每个计算机节点同时包含相同的数据；可用性，指的是每个数据库请求得到成功或失败的响应；以及分区容错性，指的是即使不是所有节点都连接在一起且出现通信问题，数据库系统仍能继续运行。最多只能同时保证这三个保证中的两个。
- en: '![CAP Theorem](../Images/f9aff6a5ee70d754465d7d543b17d7e1.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![CAP 定理](../Images/f9aff6a5ee70d754465d7d543b17d7e1.png)'
- en: '**12\. Sharding**'
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**12\. 分片**'
- en: Sharding is a technique for partitioning data. A database shard is a horizontal
    (think rows, not columns) partition of data within a database, with each partition
    being referred to as a shard. These shards are then spread across computer nodes,
    in order to balance the load. Data may then be included in one or more of these
    shards.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 分片是一种数据分区技术。数据库分片是数据库内的数据的水平（考虑行，而不是列）分区，每个分区被称为一个分片。这些分片随后被分布在计算机节点上，以平衡负载。数据可能会包含在一个或多个这些分片中。
- en: '**13\. Key-value Store**'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**13\. 键值存储**'
- en: 'Key-value stores are one of the predominant NoSQL architectures. Key-value
    stores are simple paradigms at a high-level: assign values to keys to facilitate
    the access and storage of these values, which are always found via their keys.
    Data values are added to the database with a identifying keys; the same data values
    are later accessed with the same key. If you have an understanding of hash maps
    then you are a step ahead (dictionaries in Python). Redis is an example of a key-value
    store.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 键值存储是主要的 NoSQL 架构之一。键值存储是一种简单的高层次范式：将值分配给键以便于这些值的访问和存储，这些值总是通过其键来找到。数据值通过标识键添加到数据库中；相同的数据值后来通过相同的键访问。如果你了解哈希映射，那么你已经领先一步（Python
    中的字典）。Redis 是一个键值存储的例子。
- en: '**14\. Document Store**'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**14\. 文档存储**'
- en: A document store is another NoSQL database architecture. As is the requirement
    for NoSQL engines, MongoDB does not use a relational schema; instead, document
    stores use JSON-like "documents" to store data. The document is akin to a record,
    housing fields and values. MongoDB is a free and open source exemplar.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 文档存储是另一种 NoSQL 数据库架构。正如 NoSQL 引擎的要求，MongoDB 不使用关系型模式；相反，文档存储使用类似 JSON 的“文档”来存储数据。文档类似于记录，包含字段和值。MongoDB
    是一个免费的开源示例。
- en: '![Document store](../Images/a7c0d8af61680463c9a71630a026baae.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![文档存储](../Images/a7c0d8af61680463c9a71630a026baae.png)'
- en: '**15\. Column-oriented Database**'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**15\. 列式数据库**'
- en: Another NoSQL architecture, column-oriented databases' rows actually contain
    what we most usually think of as vertical data, or what is traditionally held
    in relational columns (Rows contains columns? Huh?). The advantage of column-oriented
    database design is that some types of data lookups can become very fast, given
    that the desired data could be stored consecutively in a single row (compare this
    with having to search and read from multiple, nonconsecutive rows to attain the
    same field value in row-oriented database). Cassandra is a popular example of
    a column-oriented database.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种 NoSQL 架构，列导向数据库的行实际上包含我们通常认为的纵向数据，或者传统上在关系型列中保存的数据（行包含列？啊？）。列导向数据库设计的优势在于某些类型的数据查找可以变得非常快速，因为所需的数据可能被连续存储在单一行中（与需要从多个不连续的行中搜索和读取以获取相同字段值的行导向数据库相比）。Cassandra
    是列导向数据库的一个流行例子。
- en: '**16\. Graph Database**'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**16. 图数据库**'
- en: The graph database is premised on edges acting as relationships, directly relating
    data instances to one another. Graph databases have advantages in some use cases,
    including potentially in certain data mining and pattern recognition scenarios,
    given that associations between data instances are explicitly stated. Neo4j is
    the most widely-used graph database available.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图数据库基于边作为关系的前提，直接将数据实例关联在一起。图数据库在某些使用案例中具有优势，包括在特定的数据挖掘和模式识别场景中，因为数据实例之间的关联被明确指出。Neo4j
    是最广泛使用的图数据库。
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    是数据科学家及 KDnuggets 的总编辑，KDnuggets 是开创性的在线数据科学和机器学习资源。他的兴趣包括自然语言处理、算法设计和优化、无监督学习、神经网络以及机器学习的自动化方法。Matthew
    拥有计算机科学硕士学位和数据挖掘研究生文凭。他可以通过 editor1 at kdnuggets[dot]com 联系到。'
- en: More On This Topic
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 主题拓展
- en: '[Descriptive Statistics Key Terms, Explained](https://www.kdnuggets.com/2017/05/descriptive-statistics-key-terms-explained.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[描述性统计关键术语解释](https://www.kdnuggets.com/2017/05/descriptive-statistics-key-terms-explained.html)'
- en: '[Machine Learning Key Terms, Explained](https://www.kdnuggets.com/2016/05/machine-learning-key-terms-explained.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习关键术语解释](https://www.kdnuggets.com/2016/05/machine-learning-key-terms-explained.html)'
- en: '[Deep Learning Key Terms, Explained](https://www.kdnuggets.com/2016/10/deep-learning-key-terms-explained.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深度学习关键术语解释](https://www.kdnuggets.com/2016/10/deep-learning-key-terms-explained.html)'
- en: '[Natural Language Processing Key Terms, Explained](https://www.kdnuggets.com/2017/02/natural-language-processing-key-terms-explained.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理关键术语解释](https://www.kdnuggets.com/2017/02/natural-language-processing-key-terms-explained.html)'
- en: '[Generative AI Key Terms Explained](https://www.kdnuggets.com/generative-ai-key-terms-explained)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[生成性 AI 关键术语解释](https://www.kdnuggets.com/generative-ai-key-terms-explained)'
- en: '[Genetic Algorithm Key Terms, Explained](https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[遗传算法关键术语解释](https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html)'
