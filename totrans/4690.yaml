- en: A Beginner’s Guide to Linear Regression in Python with Scikit-Learn
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/03/beginners-guide-linear-regression-python-scikit-learn.html](https://www.kdnuggets.com/2019/03/beginners-guide-linear-regression-python-scikit-learn.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](/2019/03/beginners-guide-linear-regression-python-scikit-learn.html?page=2#comments)![Figure](../Images/356303905f8bf03d1984d3975e42033d.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Source](https://www.disruptordaily.com/category/digital-transformation/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two types of supervised machine learning algorithms: Regression and
    classification. The former predicts continuous value outputs while the latter
    predicts discrete outputs. For instance, predicting the price of a house in dollars
    is a regression problem whereas predicting whether a tumor is malignant or benign
    is a classification problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will briefly study what linear regression is and how it
    can be implemented for both two variables and multiple variables using **Scikit-Learn,** which
    is one of the most popular machine learning libraries for Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear Regression Theory**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The term “linearity” in algebra refers to a linear relationship between two
    or more variables. If we draw this relationship in a two-dimensional space (between
    two variables), we get a straight line.
  prefs: []
  type: TYPE_NORMAL
- en: Linear regression performs the task to predict a dependent variable value (y)
    based on a given independent variable (x). So, this regression technique finds
    out a linear relationship between x (input) and y(output). Hence, the name is
    Linear Regression. If we plot the independent variable (x) on the x-axis and dependent
    variable (y) on the y-axis, linear regression gives us a straight line that best
    fits the data points, as shown in the figure below.
  prefs: []
  type: TYPE_NORMAL
- en: 'We know that the equation of a straight line is basically:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/841ab07c32a291e11b30076660e2d9e7.png)'
  prefs: []
  type: TYPE_IMG
- en: '[source](https://pythonprogramming.net/regression-introduction-machine-learning-tutorial/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The equation of the above line is :'
  prefs: []
  type: TYPE_NORMAL
- en: '**Y= mx + b**'
  prefs: []
  type: TYPE_NORMAL
- en: Where b is the intercept and m is the slope of the line. So basically, the linear
    regression algorithm gives us the most optimal value for the intercept and the
    slope (in two dimensions). The y and x variables remain the same, since they are
    the data features and cannot be changed. The values that we can control are the
    intercept(b) and slope(m). There can be multiple straight lines depending upon
    the values of intercept and slope. Basically what the linear regression algorithm
    does is it fits multiple lines on the data points and returns the line that results
    in the least error.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This same concept can be extended to cases where there are more than two variables.
    This is called multiple linear regression. For instance, consider a scenario where
    you have to predict the price of the house based upon its area, number of bedrooms,
    the average income of the people in the area, the age of the house, and so on.
    In this case, the dependent variable(target variable) is dependent upon several
    independent variables. A regression model involving multiple variables can be
    represented as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**y = b[***0***] + m[***1***]b[***1***] + m[***2***]b[***2***] + m[***3***]b[***3***]
    + ... m[***n***]b[***n***]**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the equation of a [hyperplane](https://en.wikipedia.org/wiki/Hyperplane).
    Remember, a linear regression model in two dimensions is a straight line; in three
    dimensions it is a plane, and in more than three dimensions, a hyperplane.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will see how Python’s Scikit-Learn library for machine learning
    can be used to implement regression functions. We will start with simple linear
    regression involving two variables and then we will move towards linear regression
    involving multiple variables.
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple Linear Regression**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/613e8158b697fafba5ecfb203ea7df14.png)'
  prefs: []
  type: TYPE_IMG
- en: Linear Regression
  prefs: []
  type: TYPE_NORMAL
- en: While exploring the Aerial Bombing Operations of World War Two dataset and recalling
    that the D-Day landings were nearly postponed due to poor weather, I downloaded
    these weather reports from the period to compare with missions in the bombing
    operations dataset.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the dataset from [**here**](https://drive.google.com/open?id=1fiHg5DyvQeRC4SyhsVnje5dhJNyVWpO1).
  prefs: []
  type: TYPE_NORMAL
- en: The dataset contains information on weather conditions recorded on each day
    at various weather stations around the world. Information includes precipitation,
    snowfall, temperatures, wind speed and whether the day included thunderstorms
    or other poor weather conditions.
  prefs: []
  type: TYPE_NORMAL
- en: So our task is to predict the maximum temperature taking input feature as minimum
    temperature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start coding :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import all the required libraries :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following command imports the CSV dataset using pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let’s explore the data a little bit by checking the number of rows and columns
    in our datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should receive output as (119040, 31), which means the data contains 119040
    rows and 31 columns.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the statistical details of the dataset, we can use `describe()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/95dd67f2c1cfc57f012b1cacb85b4921.png)'
  prefs: []
  type: TYPE_IMG
- en: statistical view of the dataset
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, let’s plot our data points on a 2-D graph to eyeball our dataset
    and see if we can manually find any relationship between the data using the below
    script :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We have taken MinTemp and MaxTemp for doing our analysis. Below is a 2-D graph
    between MinTemp and MaxTemp.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4f691610ca26b042c2037848bb977a42.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s check the average max temperature and once we plot it we can observe that
    the Average Maximum Temperature is Between Nearly 25 and 35.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/4d2a30c5da6ae5bf33274839cf4367a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Average maximum temperature which is in between 25 and 35.
  prefs: []
  type: TYPE_NORMAL
- en: Our next step is to divide the data into “attributes” and “labels”.
  prefs: []
  type: TYPE_NORMAL
- en: Attributes are the independent variables while labels are dependent variables
    whose values are to be predicted. In our dataset, we only have two columns. We
    want to predict the MaxTemp depending upon the MinTemp recorded. Therefore our
    attribute set will consist of the “MinTemp” column which is stored in the X variable,
    and the label will be the “MaxTemp” column which is stored in y variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Next, we split 80% of the data to the training set while 20% of the data to
    test set using below code.
  prefs: []
  type: TYPE_NORMAL
- en: The test_size variable is where we actually specify the proportion of the test
    set.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: After splitting the data into training and testing sets, finally, the time is
    to train our algorithm. For that, we need to import LinearRegression class, instantiate
    it, and call the `fit()` method along with our training data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As we have discussed that the linear regression model basically finds the best
    value for the intercept and slope, which results in a line that best fits the
    data. To see the value of the intercept and slop calculated by the linear regression
    algorithm for our dataset, execute the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The result should be approximately 10.66185201 and 0.92033997 respectively.
  prefs: []
  type: TYPE_NORMAL
- en: This means that for every one unit of change in Min temperature, the change
    in the Max temperature is about 0.92%.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have trained our algorithm, it’s time to make some predictions.
    To do so, we will use our test data and see how accurately our algorithm predicts
    the percentage score. To make predictions on the test data, execute the following
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now compare the actual output values for `X_test` with the predicted values,
    execute the following script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/696c3cda82e3d3e4ba71b48ae9e8ecea.png)'
  prefs: []
  type: TYPE_IMG
- en: comparison of Actual and Predicted value
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also visualize comparison result as a bar graph using the below script :'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: As the number of records is huge, for representation purpose I’m taking
    just 25 records.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/7b628b084f3c68daaf6554a4977a3dad.png)'
  prefs: []
  type: TYPE_IMG
- en: Bar graph showing the comparison of Actual and Predicted values.
  prefs: []
  type: TYPE_NORMAL
- en: Though our model is not very precise, the predicted percentages are close to
    the actual ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s plot our straight line with the test data :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/c923a92e331e7fbae77751d4f607d7a7.png)'
  prefs: []
  type: TYPE_IMG
- en: prediction vs test data
  prefs: []
  type: TYPE_NORMAL
- en: The straight line in the above graph shows our algorithm is correct.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final step is to evaluate the performance of the algorithm. This step is
    particularly important to compare how well different algorithms perform on a particular
    dataset. For regression algorithms, three evaluation metrics are commonly used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Mean Absolute Error **(MAE) is the mean of the absolute value of the
    errors. It is calculated as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cedb5bff739e459b15fe7db3b7512a94.png)'
  prefs: []
  type: TYPE_IMG
- en: '**2\. Mean Squared Error** (MSE) is the mean of the squared errors and is calculated
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0f81969d38f5691f4279106f9bbee73f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**3\. Root Mean Squared Error** (RMSE) is the square root of the mean of the
    squared errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3203e40e4845fb4cc39c83007d1d37e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily, we don’t have to perform these calculations manually. The Scikit-Learn
    library comes with pre-built functions that can be used to find out these values
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s find the values for these metrics using our test data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You should receive output like this (but probably slightly different):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the value of root mean squared error is 4.19, which is more
    than 10% of the mean value of the percentages of all the temperature i.e. 22.41\.
    This means that our algorithm was not very accurate but can still make reasonably
    good predictions.
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Making Predictions: A Beginner''s Guide to Linear Regression in Python](https://www.kdnuggets.com/2023/06/making-predictions-beginner-guide-linear-regression-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comparing Linear and Logistic Regression](https://www.kdnuggets.com/2022/11/comparing-linear-logistic-regression.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linear vs Logistic Regression: A Succinct Explanation](https://www.kdnuggets.com/2022/03/linear-logistic-regression-succinct-explanation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News 22:n12, March 23: Best Data Science Books for…](https://www.kdnuggets.com/2022/n12.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linear Regression for Data Science](https://www.kdnuggets.com/2022/07/linear-regression-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
