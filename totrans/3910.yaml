- en: 10 Python Tips and Tricks You Should Learn Today
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html](https://www.kdnuggets.com/2020/01/10-python-tips-tricks-learn-today.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/1ef0f4e1d43dc885d3291909d85ff6ef.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Rifqi Ali Ridho](https://unsplash.com/@rifqialiridho?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/paintbrush?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: According to Stack Overflow, Python is the fastest growing programming language.
    The latest [report from Forbes](https://www.whatech.com/development/press-release/442278-why-developers-vote-python-as-the-best-application-programming-language) states
    that Python showed a 456-percent growth in last year. Netflix uses Python, IBM
    uses Python, and hundreds of other companies all use Python. Let’s not forget
    Dropbox. Dropbox is also created in Python. According to [research by Dice](https://insights.dice.com/2016/02/01/whats-hot-and-not-in-tech-skills/) Python
    is also one of the hottest skills to have and also the most popular programming
    language in the world based on the [Popularity of Programming Language Index](https://pypl.github.io/PYPL.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the advantages Python offers when compared to other programming languages
    are:'
  prefs: []
  type: TYPE_NORMAL
- en: Compatible with major platforms and operating systems
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many open-source frameworks and tools
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Readable and maintainable code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Robust standard library
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Standard test-driven development
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Python Tips and Tricks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this piece, I’ll present 10 useful code tips and tricks that can help you
    in your day-to-day tasks. So without further ado, let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Concatenating Strings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you need to concatenate a list of strings, you can do this using a *for
    loop* by adding each element one by one. However, this would be very inefficient,
    especially if the list is long. In Python, strings are immutable, and thus the
    left and right strings would have to be copied into the new string for every pair
    of concatenation.
  prefs: []
  type: TYPE_NORMAL
- en: 'A better approach is to use the `join()` function as shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Using List Comprehensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: List comprehensions are used for creating new lists from other iterables. As
    list comprehensions returns lists, they consist of brackets containing the expression,
    which is executed for each element along with the for loop to iterate over each
    element. List comprehension is faster because it is optimized for the Python interpreter
    to spot a predictable pattern during looping.
  prefs: []
  type: TYPE_NORMAL
- en: As an example let’s find the squares of the first five whole numbers using list
    comprehensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now let’s find the common numbers from two list using list comprehension
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Iterate With `enumerate()`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enumerate() method adds a counter to an iterable and returns it in a form of
    enumerate object.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s solve the classic coding interview question named popularly as the Fizz
    Buzz problem.
  prefs: []
  type: TYPE_NORMAL
- en: Write a program that prints the numbers in a list, for multiples of ‘3’ print
    “fizz” instead of the number, for the multiples of ‘5’ print “buzz” and for multiples
    of both 3 and 5 it prints “fizzbuzz”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Using ZIP When Working with Lists
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Suppose you were given a task to combine several lists with the same length
    and print out the result? Again, here is a more generic way to get the desired
    result by utilizing `zip()` as shown in the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Using itertools
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Python `itertools` module is a collection of tools for handling iterators. `itertools` has
    multiple tools for generating iterable sequences of input data. Here I will be
    using `itertools.combinations()` as an example. `itertools.combinations()` is
    used for building combinations. These are also the possible groupings of the input
    values.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a real world example to make the above point clear.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose there are four teams playing in a tournament. In the league stages every
    team plays against every other team. Your task is to generate all the possible
    teams that would compete against each other.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s take a look at the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The important thing to notice is that order of the values doesn’t matter. Because `('Team
    1', 'Team 2')` and `('Team 2', 'Team 1')` represent the same pair, only one of
    them would be included in the output list. Similarly we can use `itertools.permutations()` as
    well as other functions from the module. For a more complete reference, check
    out [this amazing tutorial](https://medium.com/@jasonrigden/a-guide-to-python-itertools-82e5a306cdf8).
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Using Python Collections
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Python collections are container data types, namely lists, sets, tuples, dictionary.
    The collections module provides high-performance datatypes that can enhance your
    code, making things much cleaner and easier. There are a lot of functions provided
    by the collections module. For this demonstration, I will be using `Counter()` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `Counter()` function takes an iterable, such as a list or tuple, and returns
    a Counter Dictionary. The dictionary’s keys will be the unique elements present
    in the iterable, and the values for each key will be the count of the elements
    present in the iterable.
  prefs: []
  type: TYPE_NORMAL
- en: To create a `counter` object, pass an iterable (list) to `Counter()` function
    as shown in the code below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For a more complete reference, check out my [python collections tutorial](https://towardsdatascience.com/a-hands-on-guide-to-python-collections-aa350cb399e3).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Convert Two Lists Into a Dictionary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s say we have two lists, one list contains names of the students and second
    contains marks scored by them. Let’s see how we can convert those two lists into
    a single dictionary. Using the zip function, this can be done using the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Using Python Generators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Generator functions allow you to declare a function that behaves like an iterator.
    They allow programmers to make an iterator in a fast, easy, and clean way. Let’s
    take an example to explain this concept.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you’ve been given to find the sum of the first 100000000 perfect squares,
    starting with 1.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Looks easy right? This can easily be done using list comprehension but the
    problem is the large inputs size. As an example let’s take a look at the below
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'On increasing the perfect numbers we need to sum over, we realize that this
    method is not feasible due to higher computation time. Here’s where Python Generators
    come to the rescue. On replacing the brackets with parentheses we change the list
    comprehension into a generator expression. Now let’s calculate the time taken:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, time taken has been reduced quite a bit. This effect will be
    even more pronounced for larger inputs.
  prefs: []
  type: TYPE_NORMAL
- en: For a more complete reference, check out my article [Reduce Memory Usage and
    Make Your Python Code Faster Using Generators](https://towardsdatascience.com/reduce-memory-usage-and-make-your-python-code-faster-using-generators-bd79dbfeb4c).
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Return Multiple Values From a Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Python has the ability to return multiple values from a function call, something
    missing from many other popular programming languages. In this case the return
    values should be a comma-separated list of values and Python then constructs a *tuple* and
    returns this to the caller. As an example see the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 10\. Using sorted() Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sorting any sequence is very easy in Python using the built-in method `sorted()`which
    does all the hard work for you. `sorted()`sorts any sequence (list, tuple) and
    always returns a list with the elements in sorted manner. Let’s take an example
    to sort a list of numbers in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Taking another example, let’s sort a list of strings in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Conclusions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this article, I’ve presented 10 Python tips and tricks that can be used as
    a reference in your day-to-day work. I hope you enjoyed this article. Stay tuned
    for my next piece, “Tips and Tricks to Speed Up Your Python Code”.
  prefs: []
  type: TYPE_NORMAL
- en: References/Further Readings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[30-seconds/30-seconds-of-python](https://github.com/30-seconds/30-seconds-of-python)'
  prefs: []
  type: TYPE_NORMAL
- en: Curated collection of useful Python snippets that you can understand in 30 seconds
    or less. Contributions welcome…
  prefs: []
  type: TYPE_NORMAL
- en: '[50+ Python 3 Tips & Tricks](https://medium.com/towards-artificial-intelligence/50-python-3-tips-tricks-e5dbe05212d7)'
  prefs: []
  type: TYPE_NORMAL
- en: These Python Gems Will Make Your Code Beautiful and Elegant
  prefs: []
  type: TYPE_NORMAL
- en: '[A Guide to Python Itertools](https://medium.com/@jasonrigden/a-guide-to-python-itertools-82e5a306cdf8)'
  prefs: []
  type: TYPE_NORMAL
- en: Those iterables are more powerful than you can possibly imagine.
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to keep updated with my latest articles and projects [follow me
    on Medium](https://medium.com/@abhinav.sagar). These are some of my contacts details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Personal Website](https://abhinavsagar.github.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linkedin](https://in.linkedin.com/in/abhinavsagar4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Medium Profile](https://medium.com/@abhinav.sagar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/abhinavsagar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Kaggle](https://www.kaggle.com/abhinavsagar)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy reading, happy learning, and happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Abhinav Sagar](https://www.linkedin.com/in/abhinavsagar4)** is a senior
    year undergrad at VIT Vellore. He is interested in data science, machine learning
    and their applications to real-world problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/10-python-tips-and-tricks-you-should-learn-today-a05c23a39dc5).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Lists and List Manipulation](/2019/11/python-lists-list-manipulation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Dictionary and Dictionary Methods](/2019/12/python-dictionary-methods.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why Python is One of the Most Preferred Languages for Data Science?](/2020/01/python-preferred-languages-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
