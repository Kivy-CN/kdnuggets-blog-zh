- en: 'Text Mining in Python: Steps and Examples'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/05/text-mining-python-steps-examples.html](https://www.kdnuggets.com/2020/05/text-mining-python-steps-examples.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Dhilip Subramanian](https://medium.com/@sdhilip), Data Scientist and
    AI Enthusiast**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/c3cf17396251256b2cdd50b7e755ab3e.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In today’s scenario, one way of people’s success identified by how they are
    communicating and sharing information to others. That’s where the concepts of
    language come into picture. However, there are many languages in the world. Each
    has many standards and alphabets, and the combination of these words arranged
    meaningfully resulted in the formation of a sentence. Each language has its own
    rules while developing these sentences and these set of rules are also known as
    grammar.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c5f6849132542f8ff523affcaf749f20.png)'
  prefs: []
  type: TYPE_IMG
- en: In today’s world, according to the industry estimates, only 20 percent of the
    data is being generated in the structured format as we speak, as we tweet, as
    we send messages on WhatsApp, Email, Facebook, Instagram or any text messages.
    And, the majority of this data exists in the textual form which is a highly unstructured
    format. In order to produce meaningful insights from the text data then we need
    to follow a method called Text Analysis.
  prefs: []
  type: TYPE_NORMAL
- en: What is Text Mining?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Text Mining is the process of deriving meaningful information from natural
    language text.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e9b57d93f95c884eb9b1ee9923b3b2ed.png)'
  prefs: []
  type: TYPE_IMG
- en: '**What is NLP?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Natural Language Processing(NLP) is a part of computer science and artificial
    intelligence which deals with human languages.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In other words, NLP is a component of text mining that performs a special kind
    of linguistic analysis that essentially **helps a machine “read” text**. It uses
    a different methodology to** decipher the ambiguities in human language**, including
    the following: automatic summarization, part-of-speech tagging, disambiguation,
    chunking, as well as disambiguation and natural language understanding and recognition.
    We will see all the processes in a step by step manner using Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/74d22d2e6faa0c42f09efa9b50e4cff2.png)'
  prefs: []
  type: TYPE_IMG
- en: First, we need to install the NLTK library that is the natural language toolkit
    for building Python programs to work with human language data and it also provides
    easy to use interface.
  prefs: []
  type: TYPE_NORMAL
- en: Terminologies in NLP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tokenization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tokenization is the first step in NLP. It is the process of breaking strings
    into tokens which in turn are small structures or units. Tokenization involves
    three steps which are breaking a complex sentence into words, understanding the
    importance of each word with respect to the sentence and finally produce structural
    description on an input sentence.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: From the above output, we can see the text split into tokens. Words, comma,
    punctuations are called tokens.
  prefs: []
  type: TYPE_NORMAL
- en: Finding frequency distinct in the text
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Code 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: ‘the’ is found 3 times in the text, ‘Brazil’ is found 2 times in the text, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code 2**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Stemming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stemming usually refers to normalizing words into its base form or root form.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e754c6c3775f95075828815ef3e9d82d.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we have words waited, waiting and waits. Here the root word is ‘wait’. There
    are two methods in Stemming namely, Porter Stemming (removes common morphological
    and inflectional endings from words) and Lancaster Stemming (a more aggressive
    stemming algorithm).
  prefs: []
  type: TYPE_NORMAL
- en: '**Code 1**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Code 2**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Code 3**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Lancaster is more aggressive than Porter stemmer
  prefs: []
  type: TYPE_NORMAL
- en: Lemmatization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/d690d47d94309e2d45e733a64aa0cea6.png)'
  prefs: []
  type: TYPE_IMG
- en: In simpler terms, it is the process of converting a word to its base form. The
    difference between stemming and lemmatization is, lemmatization considers the
    context and converts the word to its meaningful base form, whereas stemming just
    removes the last few characters, often leading to incorrect meanings and spelling
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: For example, lemmatization would correctly identify the base form of ‘caring’
    to ‘care’, whereas, stemming would cutoff the ‘ing’ part and convert it to car.
  prefs: []
  type: TYPE_NORMAL
- en: Lemmatization can be implemented in python by using Wordnet Lemmatizer, Spacy
    Lemmatizer, TextBlob, Stanford CoreNLP
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Stop Words
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: “Stop words” are the most common words in a language like “the”, “a”, “at”,
    “for”, “above”, “on”, “is”, “all”. These words do not provide any meaning and
    are usually removed from texts. We can remove these stop words using nltk library
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Part of speech tagging (POS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/7bc7db51d2c88556da7a5d29f2c05ef8.png)'
  prefs: []
  type: TYPE_IMG
- en: Part-of-speech tagging is used to assign parts of speech to each word of a given
    text (such as nouns, verbs, pronouns, adverbs, conjunction, adjectives, interjection)
    based on its definition and its context. There are many tools available for POS
    taggers and some of the widely used taggers are NLTK, Spacy, TextBlob, Standford
    CoreNLP, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Named entity recognition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is the process of detecting the named entities such as the person name, the
    location name, the company name, the quantities and the monetary value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/c4655974cf144518f570af57ebcd0416.png)'
  prefs: []
  type: TYPE_IMG
- en: Ref: [Sujit Pal](https://www.slideshare.net/sujitpal/soda-v2-named-entity-recognition-from-streaming-test-106598233)
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Chunking
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Chunking means picking up individual pieces of information and grouping them
    into bigger pieces. In the context of NLP and text mining, chunking means a grouping
    of words or tokens into chunks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/bafbf88d5ed750b51f406187fe96c82b.png)'
  prefs: []
  type: TYPE_IMG
- en: ref: [nltk.org](https://www.nltk.org/book/ch07.html)
  prefs: []
  type: TYPE_NORMAL
- en: '**Code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Output**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This blog summarizes text preprocessing and covers the NLTK steps including
    Tokenization, Stemming, Lemmatization, POS tagging, Named entity recognition and
    Chunking.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading. Keep learning and stay tuned for more!
  prefs: []
  type: TYPE_NORMAL
- en: 'Reference:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://www.expertsystem.com/natural-language-processing-and-text-mining/](https://www.expertsystem.com/natural-language-processing-and-text-mining/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.nltk.org](https://www.nltk.org/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.edureka.co](https://www.geeksforgeeks.org/nlp-chunk-tree-to-text-and-chaining-chunk-transformation/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.geeksforgeeks.org/nlp-chunk-tree-to-text-and-chaining-chunk-transformation/](https://www.geeksforgeeks.org/nlp-chunk-tree-to-text-and-chaining-chunk-transformation/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://www.geeksforgeeks.org/part-speech-tagging-stop-words-using-nltk-python/](https://www.learntek.org/blog/categorizing-pos-tagging-nltk-python/)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bio: [Dhilip Subramanian](https://medium.com/@sdhilip)** is a Mechanical
    Engineer and has completed his Master''s in Analytics. He has 9 years of experience
    with specialization in various domains related to data including IT, marketing,
    banking, power, and manufacturing. He is passionate about NLP and machine learning.
    He is a contributor to the [SAS community](https://communities.sas.com/t5/user/viewprofilepage/user-id/271305)
    and loves to write technical articles on various aspects of data science on the
    Medium platform.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/towards-artificial-intelligence/text-mining-in-python-steps-and-examples-78b3f8fd913b).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Tokenization and Text Data Preparation with TensorFlow & Keras](/2020/03/tensorflow-keras-tokenization-text-data-prep.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Five Cool Python Libraries for Data Science](/2020/04/five-cool-python-libraries-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing Recipes: Best Practices and Examples](/2020/05/natural-language-processing-recipes-best-practices-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[SQL LIKE Operator Examples](https://www.kdnuggets.com/2022/09/sql-like-operator-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ensemble Learning with Examples](https://www.kdnuggets.com/2022/10/ensemble-learning-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Picking Examples to Understand Machine Learning Model](https://www.kdnuggets.com/2022/11/picking-examples-understand-machine-learning-model.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Between Dreams and Reality: Generative Text and Hallucinations](https://www.kdnuggets.com/between-dreams-and-reality-generative-text-and-hallucinations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Text-to-Speech Converter with Python in 5 Minutes](https://www.kdnuggets.com/2022/09/build-texttospeech-converter-python-5-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Text Summarization Development: A Python Tutorial with GPT-3.5](https://www.kdnuggets.com/2023/04/text-summarization-development-python-tutorial-gpt35.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
