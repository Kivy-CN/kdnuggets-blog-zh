- en: Better data apps with Streamlit’s new layout options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/11/streamlit-better-data-apps-new-layout-options.html](https://www.kdnuggets.com/2020/11/streamlit-better-data-apps-new-layout-options.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By Austin Chen, Senior Software Engineer at [Streamlit](https://www.streamlit.io/)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/9b2babdb6d159e02462402110fdb758d.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit is all about simplicity. It’s pure Python. Your script runs from top
    to bottom. Your app renders from top to bottom too. Perfect, right? Well...not
    quite. Users noted that our thinking was a bit *too* vertical. The group griped
    about grids. The community clamored for columns. Fervent friends favored flexibility.
    You get the idea.
  prefs: []
  type: TYPE_NORMAL
- en: So move aside, vertical layout. Make a little space for... horizontal layout! *And* a
    bunch more layout primitives. *And* some syntactic goodies too. In fact, today,
    we're introducing *four* new layout features giving you much more control over
    your app’s presentation.
  prefs: []
  type: TYPE_NORMAL
- en: '`st.beta_columns`: Side-by-side columns where you can insert Streamlit elements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`st.beta_expander`: An expand/collapse widget to selectively show stuff'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`st.beta_container`: The fundamental building block of layout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`with column1: st.write("hi!")`: Syntax sugar to specify which container to
    use'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Go horizontal with columns
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`st.beta_columns` acts similarly to our beloved `st.sidebar`, except now you
    can put the columns anywhere in your app. Just declare each column as a new variable,
    and then you can add in ANY element or component available from the Streamlit
    library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use columns to compare things side-by-side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b9e61f8c570f35d3f712ff4729be44a0.png)'
  prefs: []
  type: TYPE_IMG
- en: In fact, by calling `st.beta_columns` *inside* a loop, you get a grid layout!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/9bb9144a3e597e1fafacab80ebf3e603.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can even get quite complex (which can be great for wide monitors!) Here''s
    an example that uses *variable-width* columns in conjunction with the wide-mode
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/22a15c82c5e6e7c3541b282e6b52cdbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And just in case you were wondering: yes, columns are beautiful across devices
    and automatically resize for mobile and different browser widths.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/394f3e92a243711cdc265db3a42a756d.png)'
  prefs: []
  type: TYPE_IMG
- en: Clean things up with expanders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we've maximized horizontal space, try `st.beta_expander`, to maximize
    your *vertical* space! Some of you may have been using `st.checkbox` for this
    before, and expander is a prettier, more performant replacement ????
  prefs: []
  type: TYPE_NORMAL
- en: It's a great way to hide your secondary controls, or provide longer explanations
    that users can toggle!
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4681f72c8fe1fac1f6a17f64988d99fc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Adding a new concept: containers!'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you squint a bit, `st.beta_columns`, `st.beta_expander`, and `st.sidebar` look
    kind of similar. They all return Python objects, which allow you to call all the
    Streamlit functions.  We've given these objects a new name: **containers**. And
    since it would be nice to create containers directly, you can!
  prefs: []
  type: TYPE_NORMAL
- en: '`st.beta_container` is a building block that helps you organize your app. Just
    like `st.empty`, `st.beta_container` lets you set aside some space, and then later
    write things to it out of order. But while subsequent calls to the same `st.empty`
    *replace* the item inside it, subsequent calls to the same `st.beta_container` *append* to
    it. Once again, this works just like the `st.sidebar` you''ve come to know and
    love.'
  prefs: []
  type: TYPE_NORMAL
- en: Organize your code with... with
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Finally, we're introducing a new syntax to help you manage all these new containers: `with
    container`. How does it work? Well, instead of making function calls directly
    on the container...
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Use the container as a [Context Manager](https://book.pythontips.com/en/latest/context_managers.html) and
    call functions from the `st.` namespace!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Why? This way, you can compose your own widgets in pure Python, and reuse them
    in different containers!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4cfde842be0a439f3e017f0b7aa190fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'One last thing: the `with` syntax lets you put your Custom Components inside
    any container you like. [Check out this app by community member Sam Dobson](https://share.streamlit.io/samdobson/streamlit-sandbox/main/app.py),
    which embeds the [Streamlit Ace](https://pypi.org/project/streamlit-ace/) editor
    in a column right next to the app itself — so a user can edit the code and see
    the changes LIVE!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/619a52b470a3c9f92801f98334e46293.png)'
  prefs: []
  type: TYPE_IMG
- en: That's all, folks!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To start playing with layout today, simply upgrade to the latest version of
    Streamlit (v0.68).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Coming up are updates with padding, alignment, responsive design, and UI customization.
    Stay tuned for that, but most importantly, let us know what YOU want from layout.
    Questions? Suggestions? Or just have a neat app you want to show off? Join us
    on the [Streamlit community forum](https://discuss.streamlit.io/) — we can't wait
    to see what you create ????
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Documentation](https://docs.streamlit.io/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub](https://github.com/streamlit/streamlit)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Changelog](https://docs.streamlit.io/changelog.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Kudos
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A shoutout to the Streamlit Community and Creators, whose feedback really shaped
    the implementation of Layout: Jesse, José, Charly, and Synode — and a special
    callout to Fanilo for going the extra mile to find bugs, suggest APIs, and overall
    try out a bunch of our prototypes. Thank you all so much ❤️'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Austin Chen](https://blog.streamlit.io/author/austin/)** is a Senior
    Software Engineer at **[Streamlit](https://www.streamlit.io/)**.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://blog.streamlit.io/introducing-new-layout-options-for-streamlit/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Build an app to generate photorealistic faces using TensorFlow and Streamlit](/2020/04/app-generate-photorealistic-faces-tensorflow-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploying Streamlit Apps Using Streamlit Sharing](/2020/10/deploying-streamlit-apps-streamlit-sharing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploying Secure and Scalable Streamlit Apps on AWS with Docker Swarm, Traefik
    and Keycloak](/2020/10/deploying-secure-scalable-streamlit-apps-aws-docker-swarm-traefik-keycloak.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Best Architecture for Your Text Classification Task: Benchmarking…](https://www.kdnuggets.com/2023/04/best-architecture-text-classification-task-benchmarking-options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Answering Questions with HuggingFace Pipelines and Streamlit](https://www.kdnuggets.com/2021/10/simple-question-answering-web-app-hugging-face-pipelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DIY Automated Machine Learning with Streamlit](https://www.kdnuggets.com/2021/11/diy-automated-machine-learning-app.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LangChain + Streamlit + Llama: Bringing Conversational AI to Your…](https://www.kdnuggets.com/2023/08/langchain-streamlit-llama-bringing-conversational-ai-local-machine.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploying a Streamlit WebApp to Heroku using DAGsHub](https://www.kdnuggets.com/2022/02/deploying-streamlit-webapp-heroku-dagshub.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12 Essential Commands for Streamlit](https://www.kdnuggets.com/2023/01/12-essential-commands-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
