["```py\nimport pandas as pd\n\ndf = pd.read_csv('dc.csv')\n\ndf = df.rename(columns = {'Unnamed: 0' : 'Time'})\ndf['Time'] = pd.to_datetime(df['Time'])\ndf = df.iloc[::-1].set_index('Time')\n\ndf.head()\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.plot(df['close_USD'])\nplt.show()\n```", "```py\n# Split the data\ntrain = df.iloc[:-200] \ntest = df.iloc[-200:]\n```", "```py\nfrom statsmodels.tsa.arima.model import ARIMA\n\n#sample parameters\nmodel = ARIMA(train, order=(2, 1, 0)) \nresults = model.fit()\n\n# Make predictions for the test set\nforecast = results.forecast(steps=200)\nforecast \n```", "```py\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport numpy as np\n\n#mean absolute error\nmae = mean_absolute_error(test, forecast)\n\n#root mean square error\nmse = mean_squared_error(test, forecast)\nrmse = np.sqrt(mse)\n\n#mean absolute percentage error\nmape = (forecast - test).abs().div(test).mean()\n\nprint(f\"MAE: {mae:.2f}\")\nprint(f\"RMSE: {rmse:.2f}\")\nprint(f\"MAPE: {mape:.2f}%\")\n```", "```py\nMAE: 7956.23\n\nRMSE: 11705.11\n\nMAPE: 0.35%\n```", "```py\nplt.plot(train.index, train, label='Train')\nplt.plot(test.index, test, label='Test')\nplt.plot(forecast.index, forecast, label='Forecast')\nplt.legend()\nplt.show()\n```", "```py\npip install prophet\n```", "```py\ndf_p = df.reset_index()[[\"Time\", \"close_USD\"]].rename(\n    columns={\"Time\": \"ds\", \"close_USD\": \"y\"}\n)\n```", "```py\nimport pandas as pd\nfrom prophet import Prophet\n\nmodel = Prophet()\n\n# Fit the model\nmodel.fit(df_p)\n\n# create date to predict\nfuture_dates = model.make_future_dataframe(periods=365)\n\n# Make predictions\npredictions = model.predict(future_dates)\n\npredictions.head() \n```", "```py\nmodel.plot(predictions)\n```", "```py\nmodel.plot_components(predictions)\n```", "```py\nfrom prophet.diagnostics import cross_validation, performance_metrics\n\n# Perform cross-validation with initial 365 days for the first training data and the cut-off for every 180 days.\n\ndf_cv = cross_validation(model, initial='365 days', period='180 days', horizon = '365 days')\n\n# Calculate evaluation metrics\nres = performance_metrics(df_cv)\n\nres \n```", "```py\nfrom prophet.plot import plot_cross_validation_metric\n#choose between 'mse', 'rmse', 'mae', 'mape', 'coverage'\n\nplot_cross_validation_metric(df_cv, metric= 'mape')\n```"]