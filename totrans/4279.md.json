["```py\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nbagging = BaggingClassifier(base_estimator=DecisionTreeClassifier(),n_estimators=10, max_samples=0.5, max_features=0.5)\n```", "```py\nbagging.fit(X_train, y_train)\nbagging.score(X_test,y_test)\n```", "```py\nfrom sklearn.ensemble import BaggingRegressor\nbagging = BaggingRegressor(DecisionTreeRegressor())\nbagging.fit(X_train, y_train)\nmodel.score(X_test,y_test)\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nclf = RandomForestClassifier(n_estimators=10, max_depth=None,  min_samples_split=2, random_state=0)\nclf.fit(X_train, y_train)\nclf.score(X_test,y_test)\n\nclf = ExtraTreesClassifier(n_estimators=10, max_depth=None, min_samples_split=2, random_state=0)\nclf.fit(X_train, y_train)\nclf.score(X_test,y_test)\n```", "```py\nfrom sklearn.ensemble import AdaBoostClassifier\nmodel = AdaBoostClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\nmodel.score(X_test,y_test)\n```", "```py\nfrom sklearn.ensemble import GradientBoostingClassifier\nmodel = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)\nmodel.fit(X_train, y_train)\nmodel.score(X_test,y_test)\n```", "```py\nimport xgboost as xgb\nparams = {\"objective\":\"binary:logistic\",'colsample_bytree': 0.3,'learning_rate': 0.1,\n                'max_depth': 5, 'alpha': 10}\nmodel = xgb.XGBClassifier(**params)\nmodel.fit(X_train, y_train)\nmodel.fit(X_train, y_train)\nmodel.score(X_test,y_test)\n```", "```py\nimport lightgbm as lgb\nlgb_train = lgb.Dataset(X_train, y_train)\nlgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)\nparams = {'boosting_type': 'gbdt',\n              'objective': 'binary',\n              'num_leaves': 40,\n              'learning_rate': 0.1,\n              'feature_fraction': 0.9\n              }\ngbm = lgb.train(params,\n    lgb_train,\n    num_boost_round=200,\n    valid_sets=[lgb_train, lgb_eval],\n    valid_names=['train','valid'],\n   )\n```", "```py\nfrom catboost import CatBoostClassifier\ncat = CatBoostClassifier()\ncat.fit(X_train,y_train,verbose=False, plot=True\n```", "```py\nestimators = [\n  ('knn', KNeighborsClassifier()),\n   ('rf', RandomForestClassifier(n_estimators=10, random_state=42)),\n   ('svr', LinearSVC(random_state=42))\n]\n```", "```py\nfrom sklearn.ensemble import StackingClassifier\nclf = StackingClassifier(\n estimators=estimators, final_estimator=LogisticRegression()\n )\n```", "```py\nclf.fit(X_train, y_train)\nclf.score(X_test,y_test)\n```", "```py\nfrom sklearn.ensemble import VotingClassifier\nvoting = VotingClassifier(\n    estimators=estimators,\n    voting='soft')\n```", "```py\nknn = KNeighborsClassifier(n_neighbors=1)\nrf = RandomForestClassifier(random_state=1)\ngnb = GaussianNB()\nlr = LogisticRegression()\nestimators = [knn,gnb,rf,lr]\nstack = StackingCVClassifier(classifiers = estimators,\n                            shuffle = False,\nuse_probas = True,\ncv = 5, \nmeta_classifier = LogisticRegression())\n```"]