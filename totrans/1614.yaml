- en: '6 Steps To Write Any Machine Learning Algorithm From Scratch: Perceptron Case
    Study'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/09/6-steps-write-machine-learning-algorithm.html](https://www.kdnuggets.com/2018/09/6-steps-write-machine-learning-algorithm.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By John Sullivan,** [**DataOptimal**](https://www.dataoptimal.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: Writing an [algorithm from scratch](https://www.dataoptimal.com/machine-learning-from-scratch/)
    is a rewarding experience, providing you with that "ah ha!" moment where it finally
    clicks, and you understand what's really going on under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Am I saying that even if you've implemented the algorithm before with [scikit-learn](http://scikit-learn.org/stable/index.html),
    it's going to be easy to write from scratch? Absolutely not.
  prefs: []
  type: TYPE_NORMAL
- en: Some algorithms are just more complicated than others, so start with something
    simple, such as the single layer [Perceptron](https://en.wikipedia.org/wiki/Perceptron).
  prefs: []
  type: TYPE_NORMAL
- en: I'll walk you through a [6-step process to write algorithms from scratch](https://www.dataoptimal.com/machine-learning-from-scratch/),
    using the Perceptron as a case-study. This methodology can easily be translated
    to other machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '![Machine Learning Algorithm](../Images/4b81fa33346d72d5c70e3448dbeff8f2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Get a Basic Understanding of the Algorithm**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This goes back to what I originally stated. If you don’t understand the basics,
    don’t tackle an algorithm from scratch. At the very least, you should be able
    to answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What is it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is it typically used for?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When CAN’T I use this?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the Perceptron, let’s go ahead and answer these questions:'
  prefs: []
  type: TYPE_NORMAL
- en: The single layer Perceptron is the most basic neural network. It’s typically
    used for binary classification problems (1 or 0, “yes” or “no”).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s a linear classifier, so it can only really be used when there’s a linear
    decision boundary. Some simple uses might be sentiment analysis (positive or negative
    response) or loan default prediction (“will default”, “will not default”). For
    both cases, the decision boundary would need to be linear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the decision boundary is non-linear, you really can’t use the Perceptron.
    For those problems, you’ll need to use something different.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Linear vs Nonlinear](../Images/0306980e0facdaf5f2331addb1d39bc3.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Find Some Different Learning Sources**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have a basic understanding of the model, it’s time to start doing
    your research. I recommend using numerous sources. Some people learn better with
    textbooks, some people learn
  prefs: []
  type: TYPE_NORMAL
- en: better with video. Personally, I like to bounce around and use various types
    of sources. For the mathematical details, textbooks do a great job, but for more
    practical examples, I prefer blog posts and YouTube videos.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the perceptron, here''s some great resources:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Textbooks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Elements of Statistical Learning](https://web.stanford.edu/~hastie/Papers/ESLII.pdf),
    Section 4.5.1'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding Machine Learning: From Theory To Algorithms](https://www.cs.huji.ac.il/~shais/UnderstandingMachineLearning/understanding-machine-learning-theory-algorithms.pdf),
    Section 21.4'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Blogs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jason Brownlee’s article on his Machine Learning Mastery blog, [How To Implement
    The Perceptron Algorithm From Scratch In Python](https://machinelearningmastery.com/implement-perceptron-algorithm-scratch-python/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastian Raschka’s blog post, [Single-Layer Neural Networks and Gradient Descent](https://sebastianraschka.com/Articles/2015_singlelayer_neurons.html)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Videos:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Perceptron Training](https://www.youtube.com/watch?v=5g0TPrxKK6o)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How the Perceptron Algorithm Works](https://www.youtube.com/watch?v=1XkjVl-j8MM)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Understanding Machine Learning book](../Images/db7cde17660e8739987822512d67dca2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Break the algorithm into chunks**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we’ve gathered our sources, it’s time to start learning. Start by grabbing
    some paper and a pencil. Rather than read a chapter or blog post all the way through,
    start by skimming for section headings, and other important info. Write down bullet
    points, and try to outline the algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'After going through the sources, I’ve broken down the Perceptron algorithm
    into the following chunks:'
  prefs: []
  type: TYPE_NORMAL
- en: Initialize the weights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiply weights by inputs and sum them up
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compare the result against the threshold to compute the output (1 or 0)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Update the weights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repeat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Breaking the algorithm up into chunks like this makes it easier to learn. Basically
    I’ve outlined the algorithm with pseudocode, and now I can go back and fill in
    the fine details. Here’s a picture of my notes for the second step, which is the
    dot product of the weights and inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Breaking the algorithm into chunks](../Images/71149fd3ff8a3c8366ee4543c134714b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Start with a simple example**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After I’ve put together my notes on the algorithm, It’s time to start implementing
    it in code. Before I dive in to a complicated problem, I like to start with a
    simple example. For the Perceptron, a [NAND gate](https://en.wikipedia.org/wiki/NAND_gate)
    is a perfect simple data set. If both inputs are true (1) then the output is false
    (0), otherwise, the output is true. Here’s an example of what the data set looks
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple Data Set](../Images/d493d481cc91becd452580782930498a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that I have a simple data set, I’ll start implementing the algorithm that
    I outlined in Step 3\. It’s good practice to write the algorithm in chunks and
    test it, rather than trying to write it all in one sitting. This makes it easier
    to debug when you’re first starting out. Of course at the end you can go back
    and clean it up to make it look a little nicer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of the Python code for the dot product part of the algorithm
    that I outlined in Step 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python code dot product](../Images/b7e7c39fd4317a23be668a6f8796ccca.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Validate with a trusted implementation**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we’ve written up our code and tested it against a small data set, it’s
    time to scale things up to a [larger dataset](https://github.com/dataoptimal/posts/tree/master/algorithms
    from scratch). To make sure that our code is working correctly on this more complicated
    dataset, it’s good to test it against a trusted implementation. For the Perceptron
    we can use the implementation from [sci-kit learn](http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Perceptron.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Python sci-kit code](../Images/3a654185564dafe9a220fdf9aab15d56.png)'
  prefs: []
  type: TYPE_IMG
- en: To test [my code](https://github.com/dataoptimal/posts/tree/master/algorithms
    from scratch) I’m going to look at the weights. If I’ve implemented the algorithm
    correctly, my weights should match up with those of the sci-kit learn Perceptron.
  prefs: []
  type: TYPE_NORMAL
- en: '![Test code](../Images/5e20ea4c8902f4813b4496c38479e0b9.png)'
  prefs: []
  type: TYPE_IMG
- en: At first, I didn’t get the same weights, and this is because I had to tweak
    the default settings in the scikit-learn Perceptron. I wasn’t implementing a new
    random state every time, just a fixed seed, so I had to turn this off. The same
    goes for shuffling, I also needed to turn that off. To match my learning rate,
    I changed eta0 to 0.1\. Finally, I turned off the fit_intercept option. I included
    a dummy column of 1’s in my feature dataset, so I was already automatically fitting
    the intercept (aka bias term).
  prefs: []
  type: TYPE_NORMAL
- en: This brings up another important point. When you validate against an existing
    implementation of a model, you need to be very aware of the inputs to the model.
    You should never blindly use a model, always question your assumptions, and exactly
    what each input means.
  prefs: []
  type: TYPE_NORMAL
- en: '**Write up your process**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This last step in the process is probably the most important. You’ve just gone
    through all the work of learning, taking notes, writing the algorithm from scratch,
    and comparing it with a trusted implementation. Don’t let all that good work go
    to waste! Writing up the process is important for two reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll gain an even deeper understanding because you’re teaching others what
    you just learned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can showcase it to potential employers. It’s one thing to show that you
    can implement an algorithm from a machine learning library, but it’s even more
    impressive if you can implement it yourself from scratch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A great way to showcase your work is with a [GitHub Pages](https://pages.github.com/)
    portfolio.
  prefs: []
  type: TYPE_NORMAL
- en: '![GitHub pages](../Images/0caf7b335e22b399e5383a40fc1c2260.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Conclusion**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Writing an algorithm from scratch can be a very rewarding experience. It’s a
    great way to gain a deeper understanding of the model, while building an impressive
    portfolio project at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to take it slow, and start with something simple. Most importantly,
    make sure to document and share your work.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio**: John Sullivan is the founder of the data science learning blog, DataOptimal.
    You can follow him on Twitter [@DataOptimal](https://twitter.com/dataoptimal).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top /r/MachineLearning posts, August 2018: Everybody Dance Now; Stanford class
    Machine Learning cheat sheets; Academic Torrents for sharing enormous datasets](https://www.kdnuggets.com/2018/09/top-reddit-machine-learning-august.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Key Takeaways from KDD 2018: a Deconfounder, Machine Learning at Pinterest,
    Knowledge Graph](https://www.kdnuggets.com/2018/09/kdd-2018-key-takeaways.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Everything You Need to Know About AutoML and Neural Architecture Search](https://www.kdnuggets.com/2018/09/everything-need-know-about-automl-neural-architecture-search.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
