- en: Introduction to Time Series Analysis in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中时间序列分析简介
- en: 原文：[https://www.kdnuggets.com/2020/09/introduction-time-series-analysis-python.html](https://www.kdnuggets.com/2020/09/introduction-time-series-analysis-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/09/introduction-time-series-analysis-python.html](https://www.kdnuggets.com/2020/09/introduction-time-series-analysis-python.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: 'According to Wikipedia:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科：
- en: '*A **time series** is a series of data points indexed (or listed or graphed)
    in time order. Most commonly, a time series is a sequence taken at successive
    equally spaced points in time. Thus it is a sequence of discrete-time data. Examples
    of time series are heights of ocean tides, counts of sunspots, and the daily closing
    value of the Dow Jones Industrial Average.*'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一个**时间序列**是按时间顺序索引（或列出或绘制）的数据点序列。最常见的是，时间序列是按等间隔的连续时间点采集的序列。因此，它是一个离散时间数据序列。时间序列的例子包括海洋潮汐的高度、太阳黑子的计数和道琼斯工业平均指数的每日收盘值。*'
- en: So any dataset in which is taken at successive equally spaced points in time.
    For example, we can see [this](https://fred.stlouisfed.org/series/UMTMVS) data
    set that is **Value of Manufacturers’ Shipments for All Manufacturing Industries.**
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何在连续等间隔时间点上采集的数据集。例如，我们可以看到 [这个](https://fred.stlouisfed.org/series/UMTMVS)数据集，其为**所有制造业制造商出货量的值**。
- en: 'We will see some important points that can help us in analyzing any time-series
    dataset. These are:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到一些重要的要点，这些要点可以帮助我们分析任何时间序列数据集。这些要点包括：
- en: '**Loading time series dataset correctly in Pandas**'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在 Pandas 中正确加载时间序列数据集**'
- en: '**Indexing in Time-Series Data**'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间序列数据中的索引**'
- en: '**Time-Resampling using Pandas**'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Pandas 进行时间重采样**'
- en: '**Rolling Time Series**'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动时间序列**'
- en: '**Plotting Time-series Data using Pandas**'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Pandas 绘制时间序列数据**'
- en: Loading time series dataset correctly in Pandas
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Pandas 中正确加载时间序列数据集
- en: Let’s load the dataset mentioned above in pandas.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 pandas 中加载上述数据集。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/b7d76e43e78d255bac44c5590c53ff64.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b7d76e43e78d255bac44c5590c53ff64.png)'
- en: Since we want our “DATE” column as our index, but simply by reading, it is not
    doing it, so we have to add some extra parameters.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望将“DATE”列作为我们的索引，但仅通过读取并没有实现，因此我们需要添加一些额外的参数。
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/17c957b5b7a0fe94c3df4b73ff4efdee.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/17c957b5b7a0fe94c3df4b73ff4efdee.png)'
- en: Great, now we have added our DATE column as the index, but let’s check it’s
    data type to know that if pandas is dealing with the index as simple objects or
    pandas built-in DateTime datatype.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们已经将我们的 DATE 列添加为索引，但让我们检查一下它的数据类型，以了解 Pandas 是否将索引视为简单对象还是 Pandas 内置的
    DateTime 数据类型。
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](../Images/df912a9a7cb0bcdf86d7592b138e05e4.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/df912a9a7cb0bcdf86d7592b138e05e4.png)'
- en: 'Here we can see that Pandas is dealing with our Index column as a simple object,
    so let’s convert it into DateTime. We can do it as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们可以看到 Pandas 将我们的索引列处理为一个简单对象，所以我们需要将其转换为 DateTime。我们可以按照以下步骤进行：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![](../Images/dc43a616452b6175e8cbf211e96589c0.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc43a616452b6175e8cbf211e96589c0.png)'
- en: Now we can see that *dtype* of our dataset is *datetime64[ns]*. This “[ns]”
    shows that it is precise in nanoseconds. We can change it to “Days” or “Months”
    if we want.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到我们数据集的*dtype*是*datetime64[ns]*。这个“[ns]”表示它在纳秒级别上是精确的。如果我们愿意，可以将其更改为“天”或“月”。
- en: Alternatively, to avoid all this fuss, we can load data in single line of code
    using Pandas as follows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，为了避免所有这些麻烦，我们可以使用 Pandas 在一行代码中加载数据，如下所示。
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/080600941b728c349994e5a00d52b0fd.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/080600941b728c349994e5a00d52b0fd.png)'
- en: Here we have added *parse_dates=True*, so it will automatically use our *index *as
    dates.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了*parse_dates=True*，所以它将自动使用我们的*index*作为日期。
- en: Indexing in Time-Series Data
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时间序列数据中的索引
- en: Let’s say I want to get all the data from *2000-01-01* till *2015-05-01*. In
    order to do this, we can simply use indexing in Pandas like this.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想获取从*2000-01-01*到*2015-05-01*的所有数据。为了做到这一点，我们可以像这样简单地在 Pandas 中使用索引。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/55b0c65bb2f602f0da3a2ef948052092.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55b0c65bb2f602f0da3a2ef948052092.png)'
- en: Here we have data for all the months from *2000-01-01* till *2015-01-01*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有从*2000-01-01*到*2015-01-01*的所有月份的数据。
- en: Let’s say we want to get all the data of all the first months from *1992-01-01* to *2000-01-01*.
    We can simply do it by adding another argument that is similar to when we slice
    the list in python, and we add a step argument in the end.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想获取从*1992-01-01*到*2000-01-01*的所有第一个月份的数据。我们可以通过添加另一个参数来简单地实现，这个参数类似于我们在
    Python 中切片列表时的操作，并在末尾添加步长参数。
- en: The syntax for this in Pandas is *['starting date':'ending date':step].* Now,
    if we observe our dataset, it is in months format, so we want data every 12 months,
    from 1992 till 2000\. We can do it as follows.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Pandas中，这种语法是*['开始日期':'结束日期':步长]*。现在，如果我们观察我们的数据集，它是按月份格式的，所以我们想要从1992年到2000年每12个月的数据。我们可以如下操作。
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![](../Images/8485eb5bedf8bda1bc3238ba1c9bcd5f.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8485eb5bedf8bda1bc3238ba1c9bcd5f.png)'
- en: And here, we can see that we can get the values of the first month of every
    year.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到我们可以获得每年第一月的值。
- en: Time-Resampling using Pandas
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Pandas进行时间重采样
- en: Think of resampling as *groupby()* where we group by based on any column and
    then apply an aggregate function to check our results. Whereas in the Time-Series
    index, we can resample based on any *rule *in which we specify whether we want
    to resample based on “Years” or “Months” or “Days or anything else.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 把重采样看作是*groupby()*，我们根据任何列进行分组，然后应用聚合函数来检查我们的结果。而在时间序列索引中，我们可以基于任何*rule*进行重采样，其中我们指定是否要基于“年”或“月”或“天”或其他任何东西进行重采样。
- en: 'Some important rules for which we resample our time series index are:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们重采样时间序列索引的一些重要规则是：
- en: M = Month End
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: M = 月末
- en: A = Year-End
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A = 年末
- en: MS = Month Start
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MS = 月开始
- en: AS = Year Start
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AS = 年开始
- en: and so on. You can check the detailed aliases in the [official documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。你可以在[官方文档](https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#offset-aliases)中查看详细的别名。
- en: Let’s apply this to our dataset.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将其应用于我们的数据集。
- en: Let’s say we want to calculate the mean value of shipment at the start of every
    year. We can do this by calling resample at *rule='AS'* for Year Start and then
    calling the aggregate function *mean *on it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想计算每年开始时的运输均值。我们可以通过调用*resample*，其中*rule='AS'*表示年开始，然后调用*mean*聚合函数来实现。
- en: We can see the *head *of it as follows.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以如下查看它的*头部*。
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/60bfe327ed139f0258cff428ea35c299.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60bfe327ed139f0258cff428ea35c299.png)'
- en: Here we have resampled the index based on starting of every year(remember what
    “AS” does), then applied the *mean *function on it, and now we have the mean of
    Shipping at the start of every year.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据每年的开始对索引进行了重采样（记住“AS”做了什么），然后应用了*mean*函数，现在我们得到了每年开始时的Shipping均值。
- en: We can even use our own custom functions with *resample*. Let’s say we want
    to calculate the sum of every year with a custom function. We can do that as follows.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以使用自定义函数与*resample*一起使用。假设我们想要用自定义函数计算每年的总和。我们可以如下操作。
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And then we can apply it via resampling as follows.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以通过重采样来应用它，如下所示。
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can confirm that it is working correctly by comparing it to
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将其与进行比较来确认它工作正常
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/868be6bc4ec05c49f3be9e3ffe110d78.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/868be6bc4ec05c49f3be9e3ffe110d78.png)'
- en: And they both are equal.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而且它们两个是相等的。
- en: Rolling Time Series
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 滚动时间序列
- en: Rolling is also similar to Time Resampling, but in Rolling, we take a window
    of any size and perform any function on it. In simple words, we can say that a
    rolling window of size *k* means *k* consecutive values.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动也类似于时间重采样，但在滚动中，我们取任意大小的窗口，并对其执行任何函数。简单来说，我们可以说大小为*k*的滚动窗口意味着*k*个连续的值。
- en: Let’s see an example. If we want to calculate the rolling average of 10 days,
    we can do it as follows.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个例子。如果我们想计算10天的滚动平均值，我们可以如下操作。
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/77600abc3bb38ace716cbfbdae02a765.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/77600abc3bb38ace716cbfbdae02a765.png)'
- en: Now here, we can see that the first 10 values are *NaN *because there are not
    enough values to calculate the rolling mean for the first 10 values. It starts
    calculating the mean from the 11th value and goes on.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到，前10个值是*NaN*，因为没有足够的值来计算前10个值的滚动均值。它从第11个值开始计算均值，并继续进行。
- en: Similarly, we can check out the maximum value from a window of 30 days as follows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以如下检查30天窗口的最大值。
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/51cdce074f53c0680ea2c2cc121a8ba8.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/51cdce074f53c0680ea2c2cc121a8ba8.png)'
- en: Note that here I have added* [30:] *just because the first 30 entries, i.e.,
    the first window, do not have values to calculate the *max *function, so they
    are *NaN*, and for adding a screenshot, to show the first 20 values, I just skipped
    the first 30 rows, but you do not need to do it in practice.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我在这里添加了* [30:] *，仅仅是因为前30个条目，即第一个窗口，没有值来计算*max*函数，因此它们是*NaN*，为了添加截图以显示前20个值，我只是跳过了前30行，但在实际操作中你不需要这样做。
- en: And here, we can see that we have maximum values over a rolling window of 30
    days.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到在30天的滚动窗口上具有最大值。
- en: Plotting Time-series Data using Pandas
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Pandas 绘制时间序列数据
- en: Interestingly, Pandas offer a good set of built-in visualization tools and tricks
    which can help you in visualizing any kind of data.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Pandas 提供了一整套内置的可视化工具和技巧，可以帮助你可视化任何类型的数据。
- en: A basic line plot can be obtained just by calling *.plot* function over the
    dataframe.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在数据框上调用 *.plot* 函数，就可以获得基本的折线图。
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/0c56aa1b82b128cc585575dce23b89e4.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0c56aa1b82b128cc585575dce23b89e4.png)'
- en: And here, we can see the value of Manufactures Shipment over time. Notice that
    how nicely Pandas has handled our x-axis, which is our Time Series Index.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到制造商出货量随时间的变化。注意 Pandas 如何很好地处理我们的 x 轴，即我们的时间序列索引。
- en: We can further modify it by adding a title, and y-label by using *.set* on our
    plot.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在图上使用 *.set* 来进一步修改它，添加标题和 y 轴标签。
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![](../Images/041707aa6f9a85da1ae96fd71a932a94.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/041707aa6f9a85da1ae96fd71a932a94.png)'
- en: Similarly, we can change the plot size via *figsize *parameter in *.plot*.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过 *.plot* 中的 *figsize* 参数来改变图表的大小。
- en: '[PRE15]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/af1f81d7743f010359bee424f87e619d.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/af1f81d7743f010359bee424f87e619d.png)'
- en: Let’s now Plot the mean of the starting value of every year. We can do it via
    calling *.plot* after resampling with the rule ‘AS’ as ‘AS’ is the rule for the
    starting of the year.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们绘制每年开始值的均值。我们可以通过在重采样后调用 *.plot* 来完成，因为 'AS' 是开始年的规则。
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/18b700aa0ce959c99ed70e3867a37255.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18b700aa0ce959c99ed70e3867a37255.png)'
- en: We can also do the bar plot for the mean of starting of every year by calling *.bar* on
    top of *.plot*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过在 *.plot* 上调用 *.bar* 来绘制每年开始的平均值的条形图。
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![](../Images/199cb8f73f8b04c278e576509308aaa0.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/199cb8f73f8b04c278e576509308aaa0.png)'
- en: Similarly, we can plot the rolling mean and normal mean for the starting of
    the month as follows.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以按如下方式绘制月初的滚动均值和正常均值。
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, first, we have plotted the mean of the starting of every month via resampling
    on rule = “MS” (Month start). Then we have set *autoscale(tight=True)*. This will
    remove the extra plot portion, which is empty. Then we have plotted the rolling
    mean on 30 days window. Remember that the first 30 Days are null, and you will
    observe this in the plot. Then we have set Label, Title, and Legend.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先通过规则 = “MS”（月初）重采样绘制了每个月开始的均值。然后我们设置了 *autoscale(tight=True)*。这将移除额外的空白图部分。然后我们绘制了
    30 天窗口的滚动均值。请记住，前 30 天是空的，你会在图中观察到这一点。接着，我们设置了标签、标题和图例。
- en: The output of this plot is
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个图表的输出是
- en: '![](../Images/70c9f04160d547b08a217dd17d73fdbf.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70c9f04160d547b08a217dd17d73fdbf.png)'
- en: Notice how the first 30 days are missing in Rolling Average, and since it is
    rolling average, it is pretty smooth, as compared to resample one.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 注意滚动平均数的前 30 天缺失，由于这是滚动平均数，与重采样相比，它非常平滑。
- en: Similarly, you can plot for specific dates as per your choice. Let’s say I want
    to plot the maximum values for the start of every year from 1995 till 2005\. I
    can do it as follows.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，你可以根据自己的选择绘制特定日期的图表。假设我想绘制从 1995 年到 2005 年每年开始的最大值。我可以如下操作。
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, we have specified the *xlim *and *ylim*. See how I have added the dates
    in *xlim*. The main pattern is *xlim=['starting date', 'ending date']*.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们指定了 *xlim* 和 *ylim*。请看我如何在 *xlim* 中添加了日期。主要的模式是 *xlim=['起始日期', '结束日期']*。
- en: '![](../Images/decd5fd34aa25934a01b7b491ada8b32.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/decd5fd34aa25934a01b7b491ada8b32.png)'
- en: And here, you can see the output of Maximum Values at the Start of Year from
    1999 till 2014.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到 1999 年至 2014 年每年开始的最大值的输出。
- en: Learning Outcomes
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 学习成果
- en: This brings us to the end of this article. Hopefully, you are now aware of the
    basics of
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章到此为止。希望你现在已经了解了基础知识。
- en: '**Loading time series dataset correctly in Pandas**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正确加载 Pandas 中的时间序列数据集**'
- en: '**Indexing in Time-Series Data**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**时间序列数据中的索引**'
- en: '**Time-Resampling using Pandas**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Pandas 进行时间重采样**'
- en: '**Rolling Time Series**'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动时间序列**'
- en: '**Plotting Time-series Data using Pandas**'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用 Pandas 绘制时间序列数据**'
- en: these topics correctly and can apply them in your own datasets too.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正确掌握这些主题，并可以将其应用到自己的数据集中。
- en: '**Related:**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Understanding Time Series with R](https://www.kdnuggets.com/2020/07/understanding-time-series-r.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 R 理解时间序列](https://www.kdnuggets.com/2020/07/understanding-time-series-r.html)'
- en: '[How (not) to use Machine Learning for time series forecasting: The sequel](https://www.kdnuggets.com/2020/03/machine-learning-time-series-forecasting-sequel.html)'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何（不）使用机器学习进行时间序列预测：续集](https://www.kdnuggets.com/2020/03/machine-learning-time-series-forecasting-sequel.html)'
- en: '[How to Use Python’s datetime](https://www.kdnuggets.com/2019/06/how-use-datetime.html)'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用Python的datetime](https://www.kdnuggets.com/2019/06/how-use-datetime.html)'
- en: '* * *'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织在IT方面'
- en: '* * *'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为一名优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应该掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的Python代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
