- en: 'Jupyter Notebook for Beginners: A Tutorial'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/05/jupyter-notebook-beginners-tutorial.html/2](https://www.kdnuggets.com/2018/05/jupyter-notebook-beginners-tutorial.html/2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/05/jupyter-notebook-beginners-tutorial.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: Kernels
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Behind every notebook runs a kernel. When you run a code cell, that code is
    executed within the kernel and any output is returned back to the cell to be displayed.
    The kernel's state persists over time and between cells — it pertains to the document
    as a whole and not individual cells.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you import libraries or declare variables in one cell, they
    will be available in another. In this way, you can think of a notebook document
    as being somewhat comparable to a script file, except that it is multimedia. Let's
    try this out to get a feel for it. First, we'll import a Python package and define
    a function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Once we've executed the cell above, we can reference `np` and `square` in any
    other cell.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will work regardless of the order of the cells in your notebook. You can
    try it yourself, let's print out our variables again.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: No surprises here! But now let's change `y`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What do you think will happen if we run the cell containing our `print` statement
    again? We will get the output `Is 4 squared is 10?`!
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of the time, the flow in your notebook will be top-to-bottom, but it''s
    common to go back to make changes. In this case, the order of execution stated
    to the left of each cell, such as `In [6]`, will let you know whether any of your
    cells have stale output. And if you ever wish to reset things, there are several
    incredibly useful options from the Kernel menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart: restarts the kernel, thus clearing all the variables etc that were
    defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restart & Clear Output: same as above but will also wipe the output displayed
    below your code cells.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Restart & Run All: same as above but will also run all your cells in order
    from first to last.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If your kernel is ever stuck on a computation and you wish to stop it, you can
    choose the Interupt option.
  prefs: []
  type: TYPE_NORMAL
- en: '**Choosing a kernal**'
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that Jupyter gives you the option to change kernel, and
    in fact there are many different options to choose from. Back when you created
    a new notebook from the dashboard by selecting a Python version, you were actually
    choosing which kernel to use.
  prefs: []
  type: TYPE_NORMAL
- en: Not only are there kernels for different versions of Python, but also for [over
    100 languages](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels) including
    Java, C, and even Fortran. Data scientists may be particularly interested in the
    kernels for [R](https://irkernel.github.io/) and [Julia](https://github.com/JuliaLang/IJulia.jl),
    as well as both [imatlab](https://github.com/imatlab/imatlab) and the [Calysto
    MATLAB Kernel](https://github.com/calysto/matlab_kernel) for Matlab. The [SoS
    kernel](https://github.com/vatlab/SOS) provides multi-language support within
    a single notebook. Each kernel has its own installation instructions, but will
    likely require you to run some commands on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: Example analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we've looked at *what* a Jupyter Notebook is, it's time to look at *how* they're
    used in practice, which should give you a clearer understanding of *why* they
    are so popular. It's finally time to get started with that Fortune 500 data set
    mentioned earlier. Remember, our goal is to find out how the profits of the largest
    companies in the US changed historically.
  prefs: []
  type: TYPE_NORMAL
- en: It's worth noting that everyone will develop their own preferences and style,
    but the general principles still apply, and you can follow along with this section
    in your own notebook if you wish, which gives you the scope to play around.
  prefs: []
  type: TYPE_NORMAL
- en: Naming your notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before you start writing your project, you'll probably want to give it a meaningful
    name. Perhaps somewhat confusingly, you cannot name or rename your notebooks from
    the notebook app itself, but must use either the dashboard or your file browser
    to rename the `.ipynb` file. We'll head back to the dashboard to rename the file
    you created earlier, which will have the default notebook file name `Untitled.ipynb`.
  prefs: []
  type: TYPE_NORMAL
- en: You cannot rename a notebook while it is running, so you've first got to shut
    it down. The easiest way to do this is to select "File > Close and Halt" from
    the notebook menu. However, you can also shutdown the kernel either by going to
    "Kernel > Shutdown" from within the notebook app or by selecting the notebook
    in the dashboard and clicking "Shutdown" (see image below).
  prefs: []
  type: TYPE_NORMAL
- en: '![A running notebook](../Images/beb3b6fedbb2c81625553af42f03e64e.png)'
  prefs: []
  type: TYPE_IMG
- en: You can then select your notebook and and click "Rename" in the dashboard controls.
  prefs: []
  type: TYPE_NORMAL
- en: '![A running notebook](../Images/90719bbcf4b73a92d1a4b6cf21b8ff48.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that closing the notebook tab in your browser will **not** "close" your
    notebook in the way closing a document in a traditional application will. The
    notebook's kernel will continue to run in the background and needs to be shut
    down before it is truly "closed" — though this is pretty handy if you accidentally
    close your tab or browser! If the kernel is shut down, you can close the tab without
    worrying about whether it is still running or not.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've named your notebook, open it back up and we'll get going.
  prefs: []
  type: TYPE_NORMAL
- en: Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's common to start off with a code cell specifically for imports and setup,
    so that if you choose to add or change anything, you can simply edit and re-run
    the cell without causing any side-effects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We import [pandas](https://pandas.pydata.org/) to work with our data, [Matplotlib](https://matplotlib.org/) to
    plot charts, and [Seaborn](https://seaborn.pydata.org/) to make our charts prettier.
    It's also common to import [NumPy](http://www.numpy.org/) but in this case, although
    we use it via pandas, we don't need to explicitly. And that first line isn't a
    Python command, but uses something called a line magic to instruct Jupyter to
    capture Matplotlib plots and render them in the cell output; this is one of a
    range of advanced features that are out of the scope of this article.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go ahead and load our data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: It's sensible to also do this in a single cell in case we need to reload it
    at any point.
  prefs: []
  type: TYPE_NORMAL
- en: Save and Checkpoint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we've got started, it's best practice to save regularly. Pressing `Ctrl
    + S` will save your notebook by calling the "Save and Checkpoint" command, but
    what this checkpoint thing?
  prefs: []
  type: TYPE_NORMAL
- en: Every time you create a new notebook, a checkpoint file is created as well as
    your notebook file; it will be located within a hidden subdirectory of your save
    location called `.ipynb_checkpoints` and is also a `.ipynb` file. By default,
    Jupyter will autosave your notebook every 120 seconds to this checkpoint file
    without altering your primary notebook file. When you "Save and Checkpoint," both
    the notebook and checkpoint files are updated. Hence, the checkpoint enables you
    to recover your unsaved work in the event of an unexpected issue. You can revert
    to the checkpoint from the menu via "File > Revert to Checkpoint."
  prefs: []
  type: TYPE_NORMAL
- en: Investigating our data set
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we're really rolling! Our notebook is safely saved and we've loaded our
    data set `df` into the most-used pandas data structure, which is called a `DataFrame` and
    basically looks like a table. What does ours look like?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '|  | Year | Rank | Company | Revenue (in millions) | Profit (in millions) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1955 | 1 | General Motors | 9823.5 | 806 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 1955 | 2 | Exxon Mobil | 5661.4 | 584.8 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 1955 | 3 | U.S. Steel | 3250.4 | 195.4 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | 1955 | 4 | General Electric | 2959.1 | 212.6 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | 1955 | 5 | Esmark | 2510.8 | 19.1 |'
  prefs: []
  type: TYPE_TB
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '|  | Year | Rank | Company | Revenue (in millions) | Profit (in millions) |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 25495 | 2005 | 496 | Wm. Wrigley Jr. | 3648.6 | 493 |'
  prefs: []
  type: TYPE_TB
- en: '| 25496 | 2005 | 497 | Peabody Energy | 3631.6 | 175.4 |'
  prefs: []
  type: TYPE_TB
- en: '| 25497 | 2005 | 498 | Wendy''s International | 3630.4 | 57.8 |'
  prefs: []
  type: TYPE_TB
- en: '| 25498 | 2005 | 499 | Kindred Healthcare | 3616.6 | 70.6 |'
  prefs: []
  type: TYPE_TB
- en: '| 25499 | 2005 | 500 | Cincinnati Financial | 3614.0 | 584 |'
  prefs: []
  type: TYPE_TB
- en: Looking good. We have the columns we need, and each row corresponds to a single
    company in a single year.
  prefs: []
  type: TYPE_NORMAL
- en: Let's just rename those columns so we can refer to them later.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to explore our data set. Is it complete? Did pandas read it as
    expected? Are any values missing?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Okay, that looks good — that's 500 rows for every year from 1955 to 2005, inclusive.
  prefs: []
  type: TYPE_NORMAL
- en: Let's check whether our data set has been imported as we would expect. A simple
    check is to see if the data types (or dtypes) have been correctly interpreted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Uh oh. It looks like there's something wrong with the profits column — we would
    expect it to be a `float64` like the revenue column. This indicates that it probably
    contains some non-integer values, so let's take a look.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '|  | year | rank | company | revenue | profit |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 228 | 1955 | 229 | Norton | 135.0 | N.A. |'
  prefs: []
  type: TYPE_TB
- en: '| 290 | 1955 | 291 | Schlitz Brewing | 100.0 | N.A. |'
  prefs: []
  type: TYPE_TB
- en: '| 294 | 1955 | 295 | Pacific Vegetable Oil | 97.9 | N.A. |'
  prefs: []
  type: TYPE_TB
- en: '| 296 | 1955 | 297 | Liebmann Breweries | 96.0 | N.A. |'
  prefs: []
  type: TYPE_TB
- en: '| 352 | 1955 | 353 | Minneapolis-Moline | 77.4 | N.A. |'
  prefs: []
  type: TYPE_TB
- en: Just as we suspected! Some of the values are strings, which have been used to
    indicate missing data. Are there any other values that have crept in?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: That makes it easy to interpret, but what should we do? Well, that depends how
    many values are missing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It's a small fraction of our data set, though not completely inconsequential
    as it is still around 1.5%. If rows containing `N.A.` are, roughly, uniformly
    distributed over the years, the easiest solution would just be to remove them.
    So let's have a quick look at the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '![Missing value distribution](../Images/9a7b7cae1a0e30a28f5faaa379801552.png)'
  prefs: []
  type: TYPE_IMG
- en: At a glance, we can see that the most invalid values in a single year is fewer
    than 25, and as there are 500 data points per year, removing these values would
    account for less than 4% of the data for the worst years. Indeed, other than a
    surge around the 90s, most years have fewer than half the missing values of the
    peak. For our purposes, let's say this is acceptable and go ahead and remove these
    rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We should check that worked.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Great! We have finished our data set setup.
  prefs: []
  type: TYPE_NORMAL
- en: If you were going to present your notebook as a report, you could get rid of
    the investigatory cells we created, which are included here as a demonstration
    of the flow of working with notebooks, and merge relevant cells (see the Advanced
    Functionality section below for more on this) to create a single data set setup
    cell. This would mean that if we ever mess up our data set elsewhere, we can just
    rerun the setup cell to restore it.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we can get to addressing the question at hand by plotting the average
    profit by year. We might as well plot the revenue as well, so first we can define
    some variables and a method to reduce our code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Now let's plot!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![Increase in mean Fortune 500 company profits from 1955 to 2005](../Images/c6061d92ec4e570f1803e0a2db5bc8f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Wow, that looks like an exponential, but it's got some huge dips. They must
    correspond to the [early 1990s recession](https://en.wikipedia.org/wiki/Early_1990s_recession) and
    the [dot-com bubble](https://en.wikipedia.org/wiki/Dot-com_bubble). It's pretty
    interesting to see that in the data. But how come profits recovered to even higher
    levels post each recession?
  prefs: []
  type: TYPE_NORMAL
- en: Maybe the revenues can tell us more.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '![Increase in mean Fortune 500 company revenues from 1955 to 2005](../Images/44f82f195a35df4340d486dc1dd59663.png)'
  prefs: []
  type: TYPE_IMG
- en: That adds another side to the story. Revenues were no way nearly as badly hit,
    that's some great accounting work from the finance departments.
  prefs: []
  type: TYPE_NORMAL
- en: With a little help [from Stack Overflow](https://stackoverflow.com/a/47582329/604687),
    we can superimpose these plots with +/- their standard deviations.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '![jupyter-notebook-tutorial_48_0](../Images/963bf0012aa11cc05a286b3550d46f63.png)'
  prefs: []
  type: TYPE_IMG
- en: That's staggering, the standard deviations are huge. Some Fortune 500 companies
    make billions while others lose billions, and the risk has increased along with
    rising profits over the years. Perhaps some companies perform better than others;
    are the profits of the top 10% more or less volatile than the bottom 10%?
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of questions that we could look into next, and it's easy to
    see how the flow of working in a notebook matches one's own thought process, so
    now it's time to draw this example to a close. This flow helped us to easily investigate
    our data set in one place without context switching between applications, and
    our work is immediately sharable and reproducible. If we wished to create a more
    concise report for a particular audience, we could quickly refactor our work by
    merging cells and removing intermediary code.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing your notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When people talk of sharing their notebooks, there are generally two paradigms
    they may be considering. Most often, individuals share the end-result of their
    work, much like this article itself, which means sharing non-interactive, pre-rendered
    versions of their notebooks; however, it is also possible to collaborate on notebooks
    with the aid version control systems such as [Git](https://git-scm.com/).
  prefs: []
  type: TYPE_NORMAL
- en: That said, there are [some](https://mybinder.org/) nascent [companies](https://kyso.io/) popping
    up on the web offering the ability to run interactive Jupyter Notebooks in the
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Before you share
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A shared notebook will appear exactly in the state it was in when you export
    or save it, including the output of any code cells. Therefore, to ensure that
    your notebook is share-ready, so to speak, there are a few steps you should take
    before sharing:'
  prefs: []
  type: TYPE_NORMAL
- en: Click "Cell > All Output > Clear"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click "Kernel > Restart & Run All"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Wait for your code cells to finish executing and check they did so as expected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will ensure your notebooks don't contain intermediary output, have a stale
    state, and executed in order at the time of sharing.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting your notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Jupyter has built-in support for exporting to HTML and PDF as well as several
    other formats, which you can find from the menu under "File > Download As." If
    you wish to share your notebooks with a small private group, this functionality
    may well be all you need. Indeed, as many researchers in academic institutions
    are given some public or internal webspace, and because you can export a notebook
    to an HTML file, Jupyter Notebooks can be an especially convenient way for them
    to share their results with their peers.
  prefs: []
  type: TYPE_NORMAL
- en: But if sharing exported files doesn't cut it for you, there are also some immensely
    popular methods of sharing `.ipynb` files more directly on the web.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With the [number of public notebooks on GitHub](https://github.com/parente/nbestimate) exceeding
    1.8 million by early 2018, it is surely the most popular independent platform
    for sharing Jupyter projects with the world. GitHub has integrated support for
    rendering `.ipynb` files directly both in repositories and gists on its website.
    If you aren't already aware, [GitHub](https://github.com/) is a code hosting platform
    for version control and collaboration for repositories created with [Git](https://git-scm.com/).
    You'll need an account to use their services, but standard accounts are free.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have a GitHub account, the easiest way to share a notebook on GitHub
    doesn''t actually require Git at all. Since 2008, GitHub has provided its Gist
    service for hosting and sharing code snippets, which each get their own repository.
    To share a notebook using Gists:'
  prefs: []
  type: TYPE_NORMAL
- en: Sign in and browse to [gist.github.com](https://gist.github.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your `.ipynb` file in a text editor, select all and copy the JSON inside.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Paste the notebook JSON into the gist.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your Gist a filename, remembering to add `.iypnb` or this will not work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click either "Create secret gist" or "Create public gist."
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This should look something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Gist](../Images/d52a64eb4a582f70fdebcd1036e8850b.png)'
  prefs: []
  type: TYPE_IMG
- en: If you created a public Gist, you will now be able to share its URL with anyone,
    and others will be able to [fork and clone](https://help.github.com/articles/forking-and-cloning-gists/) your
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your own Git repository and sharing this on GitHub is beyond the scope
    of this tutorial, but [GitHub provides plenty of guides](https://guides.github.com/) for
    you to get started on your own.
  prefs: []
  type: TYPE_NORMAL
- en: An extra tip for those using git is to [add an exception](https://stackoverflow.com/q/35916658/604687) to
    your `.gitignore` for those hidden `.ipynb_checkpoints` directories Jupyter creates,
    so as not to commit checkpoint files unnecessarily to your repo.
  prefs: []
  type: TYPE_NORMAL
- en: Nbviewer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Having grown to render [hundreds of thousands](https://blog.jupyter.org/rendering-notebooks-on-github-f7ac8736d686) of
    notebooks every week by 2015, NBViewer is the most popular notebook renderer on
    the web. If you already have somewhere to host your Jupyter Notebooks online,
    be it GitHub or elsewhere, NBViewer will render your notebook and provide a shareable
    URL along with it. Provided as a free service as part of Project Jupyter, it is
    available at [nbviewer.jupyter.org](https://nbviewer.jupyter.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Initially developed before GitHub's Jupyter Notebook integration, NBViewer allows
    anyone to enter a URL, Gist ID, or GitHub username/repo/file and it will render
    the notebook as a webpage. A Gist's ID is the unique number at the end of its
    URL; for example, the string of characters after the last backslash in `https://gist.github.com/username/50896401c23e0bf417e89cd57e89e1de`.
    If you enter a GitHub username or username/repo, you will see a minimal file browser
    that lets you explore a user's repos and their contents.
  prefs: []
  type: TYPE_NORMAL
- en: The URL NBViewer displays when displaying a notebook is a constant based on
    the URL of the notebook it is rendering, so you can share this with anyone and
    it will work as long as the original files remain online — NBViewer doesn't cache
    files for very long.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Starting with the basics, we have come to grips with the natural workflow of
    Jupyter Notebooks, delved into IPython's more advanced features, and finally learned
    how to share our work with friends, colleagues, and the world. And we accomplished
    all this from a notebook itself!
  prefs: []
  type: TYPE_NORMAL
- en: It should be clear how notebooks promote a productive working experience by
    reducing context switching and emulating a natural development of thoughts during
    a project. The power of Jupyter Notebooks should also be evident, and we covered
    plenty of leads to get you started exploring more advanced features in your own
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: If you'd like further inspiration for your own Notebooks, Jupyter has put together [a
    gallery of interesting Jupyter Notebooks](https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks) that
    you may find helpful and the [Nbviewer homepage](https://nbviewer.jupyter.org/) links
    to some really fancy examples of quality notebooks. Also check out our list of [Jupyter
    Notebook tips](https://www.dataquest.io/blog/jupyter-notebook-tips-tricks-shortcuts/).
  prefs: []
  type: TYPE_NORMAL
- en: '*Want to learn more about Jupyter Notebooks? We have [a guided project](https://www.dataquest.io/m/207/guided-project%3A-using-jupyter-notebook) you
    may be interested in.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Bio: [Benjamin Pryke](https://twitter.com/BenjaminPryke)** is a Python and
    web developer with a background in computer science and machine learning. Co-founder
    of FinTech firm Machina Capital. Part-time gymnast and digital bohemian.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://www.dataquest.io/blog/jupyter-notebook-tutorial/?utm_source=kdnuggets&utm_medium=blog).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top 5 Best Jupyter Notebook Extensions](/2018/03/top-5-best-jupyter-notebook-extensions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Things to Know About Machine Learning](/2018/03/5-things-know-about-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fast.ai Lesson 1 on Google Colab (Free GPU)](/2018/02/fast-ai-lesson-1-google-colab-free-gpu.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Setup Julia on Jupyter Notebook](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Jupyter Notebook Tips and Tricks for Data Scientists](https://www.kdnuggets.com/2023/06/10-jupyter-notebook-tips-tricks-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python in Finance: Real Time Data Streaming within Jupyter Notebook](https://www.kdnuggets.com/python-in-finance-real-time-data-streaming-within-jupyter-notebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free Templates for Data Science Projects on Jupyter Notebook](https://www.kdnuggets.com/5-free-templates-for-data-science-projects-on-jupyter-notebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
