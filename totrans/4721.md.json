["```py\nnlp = spacy.load('en_core_web_md')\n\n#text represents our raw text document\n\ntext = text.lower().replace('\\n', ' ').replace('\\t', ' ').replace('\\xa0',' ') #get rid of problem chars\ntext = ' '.join(text.split()) #a quick way of removing excess whitespace\ndoc = nlp(text)\n\nsentences = []\nfor i in doc.sents:\n  if len(i)>1:\n    sentences.append(i.string.strip()) #tokenize into sentences\n```", "```py\nurl = \"https://tfhub.dev/google/elmo/2\"\nembed = hub.Module(url)\n```", "```py\n# This tells the model to run through the 'sentences' list and return the default output (1024 dimension sentence vectors).\nembeddings = embed(\n    sentences,\n    signature=\"default\",\n    as_dict=True)[\"default\"]\n\n#Start a session and run ELMo to return the embeddings in variable x\nwith tf.Session() as sess:\n  sess.run(tf.global_variables_initializer())\n  sess.run(tf.tables_initializer())\n  x = sess.run(embeddings)\n```", "```py\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=50) #reduce down to 50 dim\ny = pca.fit_transform(x)\n\nfrom sklearn.manifold import TSNE\n\ny = TSNE(n_components=2).fit_transform(y) # further reduce to 2 dim using t-SNE\n```", "```py\nimport plotly.plotly as py\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ninit_notebook_mode(connected=True)\n\ndata = [\n    go.Scatter(\n        x=[i[0] for i in y],\n        y=[i[1] for i in y],\n        mode='markers',\n        text=[i for i in sentences],\n    marker=dict(\n        size=16,\n        color = [len(i) for i in sentences], #set color equal to a variable\n        opacity= 0.8,\n        colorscale='Viridis',\n        showscale=False\n    )\n    )\n]\nlayout = go.Layout()\nlayout = dict(\n              yaxis = dict(zeroline = False),\n              xaxis = dict(zeroline = False)\n             )\nfig = go.Figure(data=data, layout=layout)\nfile = plot(fig, filename='Sentence encode.html')\n\nfrom google.colab import files\nfiles.download('Sentence encode.html')\n```", "```py\nsearch_string = \"example text\" #@param {type:\"string\"}\n```"]