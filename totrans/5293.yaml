- en: SlamData Open Source Analytics Tool for MongoDB
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2014/12/slamdata-open-source-analytics-tool-mongodb.html](https://www.kdnuggets.com/2014/12/slamdata-open-source-analytics-tool-mongodb.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: By John A. De Goes (SlamData), Dec 2014.
  prefs: []
  type: TYPE_NORMAL
- en: SlamData is an open source tool that makes analytics on MongoDB easy and accessible
    to developers and non-developers alike. We just launched v1.1, which greatly increases
    the power of the tool and fixes a number of issues identified in the 1.0 release.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why SlamData?**'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB is currently the fastest growing and most successful NoSQL database.
    Companies are using the database primarily to build web and mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Successful applications built on MongoDB end up capturing or generating large
    amounts of data. The process of understanding this data, which I call *Application
    Intelligence*, is vital to multiple stakeholders in the business:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Product**. How can we use this data to improve the product or better understand
    users? How can we allow users to learn from the data themselves?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketing**. What does this data tell us about how users are using the application?
    Can this application data help us better understand marketing ROI?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Support**. How can this data be used to help identify and resolve issues
    that users are having?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Managers**. What does this data tell us about resource allocation? How can
    we tie this data to sales and other data sets?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IT**. What type of data is being generated by the application, and how might
    we tune the database for this kind of data?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB does not have rigid schemas (every “row” may have a different structure
    from every other “row), and allows arbitrary nesting of data (“rows” can contain
    other “tables”).
  prefs: []
  type: TYPE_NORMAL
- en: 'While this flexibility leads to faster application development and better performance
    and scaling properties, it comes at a cost: *existing analytics tools don''t work
    with MongoDB*.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the relational world, to answer these types of questions you’d simply use
    a data discovery and ad hoc analytics tool. But in the world of MongoDB, if you
    need Application Intelligence, you have **exactly** two choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Coding**. Have a developer write low-level, one-off code to interact with
    the MongoDB API to discover the data stored there and answer relevant questions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ETL**. Develop a workflow to migrate, homogenize, and normalize the data
    into an RDBMS, where you can use existing analytics tooling (albeit on a data
    model which does *not* accurately represent the underlying data).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ultimately, neither approach is scalable, which is why we started [SlamData](http://slamdata.com),
    an open source project based on the premise that NoSQL data is *here to stay*,
    and analytics tooling needs to *catch up* with modern data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Introducing SlamData**'
  prefs: []
  type: TYPE_NORMAL
- en: SlamData provides a standard SQL interface to NoSQL data stored in MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Every SQL query is executed 100% in the database (or in a replica set), and
    operates on the actual structure of the data.
  prefs: []
  type: TYPE_NORMAL
- en: This approach differs substantially from other solutions to the problem, which
    stream data from the database to handle complex queries, and which superimpose
    a fake relational view of the underlying data (even when it is not relational).
  prefs: []
  type: TYPE_NORMAL
- en: SlamData’s dialect of SQL (called *SlamSQL*) extends ANSI SQL to support nested
    data, heterogeneous data, and aggregation over nested dimensions (for example,
    summing elements in an array stored inside a row).
  prefs: []
  type: TYPE_NORMAL
- en: 'An example SlamSQL query is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In this query, documents which are doubly-nested in arrays are being used to
    filter and sum values in the overall result. This query would be impossible in
    an RDBMS, and the equivalent code for the MongoDB API would be very difficult
    to write, troubleshoot, and understand.
  prefs: []
  type: TYPE_NORMAL
- en: '![SlamData Rabid Fans](../Images/d262db620b20a3a56e07749e94d87e46.png)'
  prefs: []
  type: TYPE_IMG
- en: By leveraging industry standard SQL, SlamData makes it possible for a wide range
    of users and tools to interface with MongoDB, and helps teams quickly and easily
    understand the data generated or collected by their MongoDB applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the current 1.1 release, all standard SQL clauses are supported, including
    SELECT, AS, FROM, JOIN, WHERE, GROUP BY, HAVING, OUTER JOIN, CROSS, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '![SlamData interactive prompt example](../Images/a90c5f3443723356da2ce9826d235f4a.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Opening up the Box**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The SlamData project innovates in several key ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Structural type inference**. SlamData does not scan the database to learn
    the structure of the data. Instead, SlamData uses a structural type system, complete
    with bidirectional type inference, which allows SlamData to parse the intent of
    a query and generate an execution plan consistent with that intent. For example,
    if your query uses a field as if it were a string, then SlamData will look for
    documents in which the field is a string. SlamData will also warn you when you
    attempt to do nonsensical things, like adding 4 to a string, because even though
    SlamData doesn’t know what’s in the database, it does know what operations make
    sense on what data types.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Multi-dimensional relational algebra**. SlamSQL is built on a formal extension
    of relational algebra called *multi-dimensional relational algebra* (MRA). This
    more powerful (but backward-compatible) foundation allows slicing, dicing, and
    aggregating nested, non-uniform data. As a pleasant side-effect, it also gives
    a sensible semantic to many SQL queries which are not allowed in ANSI SQL (for
    example, *SELECT price / SUM(price) AS percent FROM ORDERS*).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Advanced multi-staged compilation**. MongoDB has three distinct mechanisms
    for executing a query (one of them being full-fledged map/reduce), and each has
    different strengths and weaknesses. In general, efficiently executing a complex
    query might require a combination of all three. SlamData has an advanced multi-stage,
    optimizing planner which attempts to find the optimal combination of all three
    mechanisms.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In-database execution**. SlamData is extremely aggressive about pushing execution
    of queries into the database. In fact, 100% of every query will be executed directly
    in the database, with no streaming back to the client for post-processing. Other
    attempts at solving this problem rely on client-side processing for most queries,
    because executing *every part of every query* inside the database is extremely
    difficult to do in a performant way (hence the need for the advanced, multi-staged
    compilation).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The combination of these features make SlamData “point and query”: point SlamData
    at your MongoDB database, and do *whatever* you want on *any kind* of data. SlamData
    will generate the optimal query plan and execute it 100% in the database.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning More**'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using MongoDB and would like to try SlamData, you can find [installers
    on the official website](http://slamdata.com), or you can [compile the project
    from source code](https://github.com/slamdata/) on Github.
  prefs: []
  type: TYPE_NORMAL
- en: 'SlamData is a 100% open source project, so if you like what you see, please
    consider supporting the project in various ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Watching, forking, and starring](https://github.com/slamdata/slamengine) the
    repositories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitting [pull requests](https://github.com/slamdata/slamengine/pulls), [bug
    reports](https://github.com/slamdata/slamengine/issues), and [feature requests](https://github.com/slamdata/slamengine/issues).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spreading the word about SlamData ([Twitter](https://twitter.com/slamdata),
    Reddit, etc.).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also have a newsletter you can sign up for on [the official website](http://slamdata.com).
    Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: '[John A. De Goes, @jdegoes](https://twitter.com/jdegoes), is a founder and
    CTO of SlamData, and a contributor to the open source SlamData project. Previously,
    he was General Manager of DataMesh, Principal Architect at RichRelevance, and
    CEO/CTO of Precog.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[MongoHQ becomes Compose, combines ElasticSearch and MongoDB](/2014/08/mongohq-becomes-compose-combines-elasticsearch-mongodb.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Interview: Prateek Jain, Director of Engineering, eHarmony on Fast Search
    and Sharding](/2014/05/interview-prateek-jain-eharmony-search-sharding.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top KDnuggets tweets, Aug 8-10: Forget SQL vs NoSQL. New trend is HTAP: Hybrid
    Transaction/Analytical Processing](/2014/08/top-tweets-aug08-10.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Closed Source VS Open Source Image Annotation](https://www.kdnuggets.com/closed-source-vs-open-source-image-annotation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing Objectiv: Open-source product analytics infrastructure](https://www.kdnuggets.com/2022/06/objectiv-introducing-objectiv-opensource-product-analytics-infrastructure.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RAG vs Finetuning: Which Is the Best Tool to Boost Your LLM Application?](https://www.kdnuggets.com/rag-vs-finetuning-which-is-the-best-tool-to-boost-your-llm-application)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Nota AI releases beta version of NetPresso Model Search, their…](https://www.kdnuggets.com/2022/04/nota-ai-releases-beta-version-netpresso-model-search-hardwareaware-automl-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
