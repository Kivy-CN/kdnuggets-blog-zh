- en: Using Numpy’s argmax()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/07/using-numpy-argmax.html](https://www.kdnuggets.com/2022/07/using-numpy-argmax.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Using Numpy''s argmax()](../Images/8f28a3c503b099a667bf10b17d928f5b.png)'
  prefs: []
  type: TYPE_IMG
- en: And argmax() returns... 9?!? Yep, that's correct!
  prefs: []
  type: TYPE_NORMAL
- en: Explaining `argmax()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recall the 5 Ws: *who, what, when, where, and why*.'
  prefs: []
  type: TYPE_NORMAL
- en: When approaching a question, framing it with the proper 'W' can mean the difference
    between getting the answer you are looking for and absolute confusion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**When** is your name?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Where** do you do for a living?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Why** street do you live on?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These questions make very little sense as they are posed, and so the answer
    one is looking for might not come as quickly as hoped.
  prefs: []
  type: TYPE_NORMAL
- en: Similar confusion can arise when one is writing Python code and uses Numpy's
    `argmax()` function. `argmax` is useful when working with matrices, or multidimensional
    arrays, of any number of dimensions, and searching for the maximum value. However,
    and rather importantly, `argmax` returns the indices of the maximum values along
    an axis, as opposed to the maximum values themselves.
  prefs: []
  type: TYPE_NORMAL
- en: '`argmax` will tell you the **where**, not the **what**. This is a critical
    point that is often misunderstood by those using the Numpy library, and one which
    can lead to frustration.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding `argmax()`
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at how Numpy's `argmax` is designed to work.
  prefs: []
  type: TYPE_NORMAL
- en: According to the [Numpy documentation](https://numpy.org/doc/stable/reference/generated/numpy.argmax.html),
    `argmax` "[r]eturns the indices of the maximum values along an axis."
  prefs: []
  type: TYPE_NORMAL
- en: This means that actual maximum values are not being returned, just the positions
    of those maximum values.
  prefs: []
  type: TYPE_NORMAL
- en: Its important parameters include the input array from which to locate the maximum
    values of a particular axis and return its position, along with a particular axis
    (which is optional). One can additionally optionally pass an output array, and
    a boolean value to retain any reduced axes in the results. Regarding the optional
    axis argument, if none is specified, the returned index is into the flattened
    input array.
  prefs: []
  type: TYPE_NORMAL
- en: '`argmax` returns an array of indices into the original array, the dimensions
    of which depend on the function''s input.'
  prefs: []
  type: TYPE_NORMAL
- en: Why `argmax()`?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to Jason Brownlee in an article on [Machine Learning Mastery](https://machinelearningmastery.com/argmax-in-machine-learning):'
  prefs: []
  type: TYPE_NORMAL
- en: Argmax is most commonly used in machine learning for finding the class with
    the largest predicted probability.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[...]'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most common situation for using argmax that you will encounter in applied
    machine learning is in finding the index of an array that results in the largest
    value.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: If we consider the probabilities of predictions of class membership, the `argmax`
    function can determine the index position into an array which contains the max
    value and, hence, the highest probability prediction. This is clearly useful for
    machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at how `argmax` works in practice.
  prefs: []
  type: TYPE_NORMAL
- en: Using argmax()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at `argmax` in action.
  prefs: []
  type: TYPE_NORMAL
- en: Single Dimension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After importing Numpy in the usual manner, we create a single dimension array
    and pass it to `argmax`. Look at the array and code to figure out what you think
    the output should be.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Does this output match what you expected?
  prefs: []
  type: TYPE_NORMAL
- en: If you recall that `argmax` is returning an index as oppposed to a value, and
    that indexing begins at 0, we see that we have been returned index 9 — which is
    actually the tenth position — which holds the value '10', the max value in the
    array.
  prefs: []
  type: TYPE_NORMAL
- en: Make sense?
  prefs: []
  type: TYPE_NORMAL
- en: Multiple Dimensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's have a look at how `argmax` works with an array of multiple dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now we have a 2-dimensional array. We did not pass an axis parameter, and so
    the default behavior of `argmax` is to flatten the multidimensional array into
    a single dimension, and return the index of the maximum value into this flattened
    array.
  prefs: []
  type: TYPE_NORMAL
- en: As such, the result is is the same as the single dimension array in the previous
    example, and it should now be apparent as to why.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying an Axis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: But what if we specify an axis?
  prefs: []
  type: TYPE_NORMAL
- en: First, recall that axis 0 refers to *rows* while axis 1 refers to *columns*.
    Let's see what happens when we pass `axis=0` to `argmax`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What's this all about?
  prefs: []
  type: TYPE_NORMAL
- en: We specified `axis=0`, and so `argmax` will be returning the maximum value along
    the rows of the multidimensional array.
  prefs: []
  type: TYPE_NORMAL
- en: '**What** is the maximum value? As established previously, for this array it
    is ''10''.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Where** is the maximum value? It is in the last column of the second row.'
  prefs: []
  type: TYPE_NORMAL
- en: Since we have already specified that we are interested in knowing what **row**
    it is in (`axis=0`), for each column in the array Numpy is reporting the row in
    which this maximum value appears. Recalling that indexing begins with 0, we can
    see that, for each of the columns in this array, the maximum value occurs in the
    row with the index of 1, or the second row. Looking to our code to see where the
    value '10' is located, it appears as though `argmax` is correct.
  prefs: []
  type: TYPE_NORMAL
- en: What would you expect the output to be if we instead specified `axis=1`? I will
    eave this as an exercise for the reader.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post we learned what `argmax` is, why we would use it, and have covered
    several examples using Numpy's `argmax` function.
  prefs: []
  type: TYPE_NORMAL
- en: You should now know how `argmax` works.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Using NumPy to Perform Date and Time Calculations](https://www.kdnuggets.com/using-numpy-to-perform-date-and-time-calculations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vector and Matrix Norms with NumPy Linalg Norm](https://www.kdnuggets.com/2023/05/vector-matrix-norms-numpy-linalg-norm.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Beyond Numpy and Pandas: Unlocking the Potential of Lesser-Known…](https://www.kdnuggets.com/2023/08/beyond-numpy-pandas-unlocking-potential-lesserknown-python-libraries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Numpy and Pandas](https://www.kdnuggets.com/introduction-to-numpy-and-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Elevate Math Efficiency: Navigating Numpy Array Operations](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linear Regression from Scratch with NumPy](https://www.kdnuggets.com/linear-regression-from-scratch-with-numpy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
