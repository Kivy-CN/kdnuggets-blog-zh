- en: 10 Advanced Git Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/10-advanced-git-techniques](https://www.kdnuggets.com/10-advanced-git-techniques)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![10 Advanced Git Techniques](../Images/25cf21f99ae6ce54a3340ab056432ef1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Author
  prefs: []
  type: TYPE_NORMAL
- en: Ever wonder what you could do to look like a pro in front of your manager when
    using Git? In this post, we'll learn about 10 advanced Git techniques and shortcuts
    that will make you more efficient at versioning, maintaining, and sharing code.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: You likely already know the basics of committing, pushing, pulling, and branching
    with Git. But there are many lesser-known commands and features that can level
    up your skills. After reading this, you'll have a few slick tricks up your sleeve
    to impress coworkers with your Git proficiency.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Add & Commit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have added and committed the files this way multiple times, but what if
    I tell you it can be done in one line with the `-am` flag?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Try this instead, and it will add the file changes and create the commit using
    the message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Amend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can rename your current commit message using the `--amend` flag and write
    the new message. This will help you with accidental messages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can include additional changes to the current commit before pushing it to
    the remote repository. To do so, you need to add the file changes and then commit
    using the `--amend` flag. To retain the previous commit message, simply use the
    `--no-edit` flag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Override Remote History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to push a local commit and override the remote history without dealing
    with resolving issues, you can use the `--force` flag. However, it's important
    to note that using the force flag is not recommended and should only be used when
    you're absolutely sure of what you're doing. Keep in mind that using the force
    flag will rewrite the remote history.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Revert
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To undo a commit in Git, you can use the `revert` command. However, this command
    does not remove any commits. Instead, it creates a new commit that undoes the
    changes made by the original commit.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `log` with `--oneline` flag to view commit history in a shorter
    form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To revert to a previous commit, we use the `git revert` command followed by
    the commit ID. This creates a new commit with the changes from the previous commit.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Codespace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Do you want to increase your productivity on GitHub? With GitHub Code Spaces,
    you can now edit and run your code directly in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: To access this feature, simply navigate to your favorite repository, press the
    period key (".") on your keyboard, and it will redirect you to the VSCode UI.
  prefs: []
  type: TYPE_NORMAL
- en: '![10 Advanced Git Techniques](../Images/eda67b5669fef0b6619e8501be3e8d39.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Author
  prefs: []
  type: TYPE_NORMAL
- en: You can make changes to the code and push them to your remote repository. However,
    if you want to run the code in the terminal, you need to run the Codespace in
    the cloud. The free version offers an excellent option for running your Python
    code in your browser. Isn't that awesome? I just found out about it today.
  prefs: []
  type: TYPE_NORMAL
- en: '![10 Advanced Git Techniques](../Images/0cab25164ac9919bc0dcfd7d22fd2190.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from Author
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Stash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working on a project, you can add files to a staging area and then commit
    them to save your current progress. However, there is another way to save your
    work easily using the `stash` command. When you use `stash`, you save your current
    progress without adding it to the staging area or committing it. This allows you
    to save your progress and restore it whenever you need to.
  prefs: []
  type: TYPE_NORMAL
- en: We will save our current progress by providing a name and stashing it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can view your stash list and note the corresponding index to retrieve it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Our stash of "new ideas" is saved at index 0\. To retrieve it, use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 7\. Rename Branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have the option to rename your default branch name to something more appropriate.
    In this case, we will rename "master" to "main".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![10 Advanced Git Techniques](../Images/78efe97dc4d0a4a1ab5bafdd5854a44d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can verify the changes using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Decorate the Logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to view a detailed history of all the commits made in the current
    repository, you can use the `git log` command. However, the output can be difficult
    to read. To make it more readable, you can use the `graph`, `decorate`, and `oneline`
    flags. This will display the changes made in multiple branches and how they merge.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '![10 Advanced Git Techniques](../Images/9de6dc561076347a289db767e7758a57.png)'
  prefs: []
  type: TYPE_IMG
- en: 9\. Switch Back Branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On several occasions, I have switched to a new branch and forgotten the name
    of the previous branch. Consequently, I had to use the `git branch -a` command
    to view the list of branch names. However, there is a simpler way to return to
    the original branch by using the dash “-” after the `git checkout` command.
  prefs: []
  type: TYPE_NORMAL
- en: We will first create the new Git branch “neo”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: We will switch to the “neo” branch.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To go back to the original branch, we will use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 10\. Copy Remote Changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned about overriding the remote repository. Let's learn how to override
    the local repository using the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the `fetch` command to get the latest changes from the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Then, we will use the 'reset' command with the 'hard' flag to override any local
    changes with the remote version. Please note that this will permanently discard
    any local changes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If there are still untracked files, they can be removed using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I was inspired to write this article after watching a [YouTube video](https://www.youtube.com/watch?v=ecK3EnyGD8o&list=WL&index=1)
    by Fireship. I admire the creator for his ability to explain complex topics in
    a simple way. By following his method, I have learned a lot about Git features.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we have covered advanced Git techniques that are crucial for
    data scientists and software engineers who are working on a collaborative data
    project. Knowing these techniques can help you avoid accidents and resolve issues
    much faster.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you found this blog useful. Please let me know if you would like to read
    more posts with byte-sized information about commonly used tools in the data science
    world.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://www.polywork.com/kingabzpro)****[Abid Ali Awan](https://www.polywork.com/kingabzpro)****
    ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan)) is a certified data
    scientist professional who loves building machine learning models. Currently,
    he is focusing on content creation and writing technical blogs on machine learning
    and data science technologies. Abid holds a Master''s degree in technology management
    and a bachelor''s degree in telecommunication engineering. His vision is to build
    an AI product using a graph neural network for students struggling with mental
    illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[14 Essential Git Commands for Data Scientists](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, October 5: Top Free Git GUI Clients for Beginners •…](https://www.kdnuggets.com/2022/n39.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Git for Data Science Cheatsheet](https://www.kdnuggets.com/2022/11/git-data-science-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Free Git GUI Clients for Beginners](https://www.kdnuggets.com/2022/10/top-free-git-gui-clients-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Advanced Feature Selection Techniques for Machine Learning Models](https://www.kdnuggets.com/2023/06/advanced-feature-selection-techniques-machine-learning-models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Research-Driven Advanced Prompting Techniques for LLM Efficiency…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
