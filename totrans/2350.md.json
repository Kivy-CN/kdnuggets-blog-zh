["```py\nsklearn.ensemble.AdaBoostClassifier\n```", "```py\nsklearn.ensemble.AdaBoostClassifier(base_estimator = None, * ,\n    n_estimators = 50, learning_rate = 1.0, algorithm = 'SAMME.R',\n    random_state = None)\n```", "```py\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.datasets import load_breast_cancer\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import LabelEncoder\n```", "```py\nbreast_cancer = load_breast_cancer()\nX = pd.DataFrame(breast_cancer.data, columns=breast_cancer.feature_names)\ny = pd.Categorical.from_codes(breast_cancer.target, breast_cancer.target_names)\n```", "```py\nencoder = LabelEncoder()\nbinary_encoded_y = pd.Series(encoder.fit_transform(y))\n```", "```py\ntrain_X, test_X, train_y, test_y = train_test_split(X,\n    binary_encoded_y, random_state = 1)\n```", "```py\nclassifier = AdaBoostClassifier(\n    DecisionTreeClassifier(max_depth = 1),\n    n_estimators = 200\n)\nclassifier.fit(train_X, train_y)\n```", "```py\n​​predictions = classifier.predict(test_X)\n```", "```py\nconfusion_matrix(test_y, predictions)\n```", "```py\narray([[86,  2],\n       [ 3, 52]])\n\n```", "```py\nsklearn.ensemble.AdaBoostRegressor\n```", "```py\nsklearn.ensemble.AdaBoostRegressor(base_estimator = None, * ,\n    n_estimators = 50, learning_rate = 1.0, loss = 'linear',\n    random_state = None)\n```", "```py\n#evaluate adaboost ensemble\nfor regression\nfrom numpy\nimport mean\nfrom numpy\nimport std\nfrom sklearn.datasets\nimport make_regression\nfrom sklearn.model_selection\nimport cross_val_score\nfrom sklearn.model_selection\nimport RepeatedKFold\nfrom sklearn.ensemble\nimport AdaBoostRegressor\n\n# define dataset\nX, y = make_regression(n_samples = 1000, n_features = 20,\n    n_informative = 15, noise = 0.1, random_state = 6)\n\n# define the model\nmodel = AdaBoostRegressor()\n\n# evaluate the model\ncv = RepeatedKFold(n_splits = 10, n_repeats = 3, random_state = 1)\nn_scores = cross_val_score(model, X, y, scoring =\n    'neg_mean_absolute_error', cv = cv, n_jobs = -1, error_score =\n    'raise')\n\n# report performance\nprint('MAE: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))\n```"]