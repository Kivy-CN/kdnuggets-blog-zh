["```py\n# Import Tensorflow and numpy\nimport Tensorflow as tf\nimport numpy as np\n\n# ======================\n# Define the Graph\n# ======================\n\n# Create Placeholders For X And Y (for feeding in data)\nX = tf.placeholder(\"float\",[10, 10],name=\"X\") # Our input is 10x10\nY = tf.placeholder(\"float\", [10, 1],name=\"Y\") # Our output is 10x1\n\n# Create a Trainable Variable, \"W\", our weights for the linear transformation\ninitial_W = np.zeros((10,1))\nW = tf.Variable(initial_W, name=\"W\", dtype=\"float32\")\n\n# Define Your Loss Function\nLoss = tf.pow(tf.add(Y,-tf.matmul(X,W)),2,name=\"Loss\")\n\n```", "```py\n# Import Tensorflow and Numpy\nimport Tensorflow as tf\nimport numpy as np\n\n# ======================\n# Define the Graph\n# ======================\n\n# Create Placeholders For X And Y (for feeding in data)\nX = tf.placeholder(\"float\",[10, 10],name=\"X\") # Our input is 10x10\nY = tf.placeholder(\"float\", [10, 1],name=\"Y\") # Our output is 10x1\n\n# Create a Trainable Variable, \"W\", our weights for the linear transformation\ninitial_W = np.zeros((10,1))\nW = tf.Variable(initial_W, name=\"W\", dtype=\"float32\")\n\n# Define Your Loss Function\nLoss = tf.pow(tf.add(Y,-tf.matmul(X,W)),2,name=\"Loss\")\n\nwith tf.Session() as sess: # set up the session\n    sess.run(tf.initialize_all_variables())\n    Model_Loss = sess.run(\n                Loss, # the first argument is the name of the Tensorflow variabl you want to return\n                { # the second argument is the data for the placeholders\n                  X: np.random.rand(10,10),\n                  Y: np.random.rand(10).reshape(-1,1)\n                })\n    print(Model_Loss)\n\n```", "```py\n#  GRAPH CODE\n# ============\n\n# Import Tensorflow\nimport Tensorflow as tf\n\n# ======================\n# Define the Graph\n# ======================\n\n# Define the Placeholders\nX = tf.placeholder(\"float\", [10, 10], name=\"X\")\nY1 = tf.placeholder(\"float\", [10, 1], name=\"Y1\")\nY2 = tf.placeholder(\"float\", [10, 1], name=\"Y2\")\n\n# Define the weights for the layers\nshared_layer_weights = tf.Variable([10,20], name=\"share_W\")\nY1_layer_weights = tf.Variable([20,1], name=\"share_Y1\")\nY2_layer_weights = tf.Variable([20,1], name=\"share_Y2\")\n\n# Construct the Layers with RELU Activations\nshared_layer = tf.nn.relu(tf.matmul(X,shared_layer_weights))\nY1_layer = tf.nn.relu(tf.matmul(shared_layer,Y1_layer_weights))\nY2_layer_weights = tf.nn.relu(tf.matmul(shared_layer,Y2_layer_weights))\n\n# Calculate Loss\nY1_Loss = tf.nn.l2_loss(Y1,Y1_layer)\nY2_Loss = tf.nn.l2_loss(Y2,Y2_layer)\n\n```"]