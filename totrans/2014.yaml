- en: Overcome Your Data Quality Issues with Great Expectations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/01/overcome-data-quality-issues-great-expectations.html](https://www.kdnuggets.com/2023/01/overcome-data-quality-issues-great-expectations.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Gartner, Inc. estimates that [bad data costs](https://www.forbes.com/sites/forbestechcouncil/2022/08/08/no-more-garbage-in-garbage-out-taking-control-of-your-data-quality/?sh=7d64e8561e95)
    organizations an average of 12.9 million USD yearly.
  prefs: []
  type: TYPE_NORMAL
- en: We deal with Petabytes of data daily, and data quality issues are common with
    such huge volumes of data. Bad data costs organizations money, reputation, and
    time. Hence it is very important to monitor and validate data quality continuously.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What is Bad data?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bad data includes inaccurate information, missing data, incorrect information,
    non-conforming data, and duplicate data. Bad data will result in incorrect data
    analysis, resulting in bad decisions and ineffective strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Experian data quality found that the average company loses 12% of its revenue
    due to insufficient data. Apart from money, companies also suffer a loss of wasted
    time. **'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying the anomalies in data before processing will help organizations
    gain more valuable insights into their customer behavior and helps in reduced
    costs.
  prefs: []
  type: TYPE_NORMAL
- en: Great expectations library helps organizations to verify and assert such anomalies
    in the data with more than 200+ out-of-the-box rules readily available.
  prefs: []
  type: TYPE_NORMAL
- en: What are Great Expectations (GE)?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Great Expectations is an open-source Python library that helps us in validating
    data. [Great expectations](https://greatexpectations.io/) provide a set of methods
    or functions to [help the data engineers](https://www.anblicks.com/insights/data-sheets/cloud-data-engineering/)
    quickly validate a given data set.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we will look into the steps involved in validating the data
    by the Great Expectations library.
  prefs: []
  type: TYPE_NORMAL
- en: How Great Expectations Work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GE is like unit tests for data. GE provides assertions called Expectations to
    apply some rules to the data under test. For example, the policy ID/number should
    not be empty for an insurance policy document. To set up and execute GE, you must
    follow the steps below. Though there are multiple ways to work with GE (using
    its CLI), I will explain the programmatic way of setting up things in this article.
    All the source code explained in this article is available in this [GitHub repo](https://github.com/saisyam/great-expectations-sample).
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Set Up the Data Config'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GE has a concept of stores. Stores are nothing but the physical location on
    the disk where it can store the expectations (rules/assertions), run details,
    checkpoint details, validation results, and data docs (static HTML versions of
    the validation results). [Click here](https://docs.greatexpectations.io/docs/terms/store/)
    to learn more about stores.
  prefs: []
  type: TYPE_NORMAL
- en: 'GE supports various store backends. In this article, we use file store backend
    and defaults. GE supports other store backends like AWS (Amazon Web Services)
    S3, Azure Blobs, PostgreSQL, etc. Refer this to [know more about backends](https://docs.greatexpectations.io/docs/guides/setup/setup_overview).
    The code snippet below shows a very simple data config:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The above configuration uses the File store backend with defaults. GE will automatically
    create the necessary folders needed to run expectations. We will add data sources
    in our next step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Set Up Data Source Config'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GE supports three types of data sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spark
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SQLAlchemy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Data source config tells GE to use a specific execution engine to process the
    provided data set. For example, if you configure your data source to use the Pandas
    execution engine, you need to provide a Pandas data frame with data to GE to run
    your expectations. Below is a sample for using Pandas as the data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Please refer to [this documentation](https://docs.greatexpectations.io/docs/guides/connecting_to_your_data/connect_to_data_overview)
    for more information on data sources.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Create an Expectation Suite and Add Expectations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This step is the crucial part. In this step, we will create a suite and add
    expectations to the suite. You can consider a suite as a group of expectations
    that will run as a batch. The expectations we create here are to validate a sample
    sales report. You can download the [sales.csv](https://github.com/saisyam/great-expectations-sample/blob/master/sales.csv)
    file.
  prefs: []
  type: TYPE_NORMAL
- en: The code snippet below shows how to create a suite and add expectations. We
    will add two expectations to our suite.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The first expectation, “expect_column_values_to_be_in_set” checks whether the
    column (product_group) values are equal to any of the values in the given value_set.
    The second expectation checks whether the “id” column values are unique.
  prefs: []
  type: TYPE_NORMAL
- en: Once the expectations are added and saved, now we can run these expectations
    on a data set which we will see in step 4.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Load and Validate the Data'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this step, we will load our CSV file into pandas.DataFrame and create a checkpoint
    to run the expectations we created above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We create a batch request for our data, providing the data source name, which
    will tell GE to use a specific execution engine, in our case, Pandas. We create
    a checkpoint config and then validate our batch request against the checkpoint.
    You can add multiple batch requests if the expectations apply to the data in the
    batch in a single checkpoint. The `run_checkpoint` method returns the result in
    JSON format and can be used for further processing or analytics.
  prefs: []
  type: TYPE_NORMAL
- en: Results
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once we have run the expectations on our data set, GE creates a static HTML
    dashboard with the results for our checkpoint. The results contain the number
    of evaluated expectations, successful expectations, unsuccessful expectations,
    and success percentages. Any records that do not match the given expectations
    will be highlighted on the page. Below is a sample for successful execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overcome Your Data Quality Issues with Great Expectations](../Images/136ca963d99848386ae42f35bda3ad76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Great Expectations'
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is a sample of the failed expectation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Overcome Your Data Quality Issues with Great Expectations](../Images/49a6cbce10d75f5607a527c640139f56.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: Great Expectations'
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have set up GE in four steps and successfully ran expectations on a given
    dataset. GE has more advanced features like writing your custom expectations,
    which we will cover in future articles. Many organizations use GE extensively
    to customize their clients' requirements and write custom expectations.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Saisyam Dampuri](https://www.linkedin.com/in/saisyam/)** comes with 18+
    years of software development experience and is passionate about exploring new
    technologies and tools. He is currently working as a Sr. Cloud Architect at Anblicks,
    TX, US. While not coding, he will be busy with photography, cooking, and traveling.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Data Quality Dimensions: Assuring Your Data Quality with Great Expectations](https://www.kdnuggets.com/2023/03/data-quality-dimensions-assuring-data-quality-great-expectations.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Most Common Data Quality Issues and How to Fix Them](https://www.kdnuggets.com/2022/11/10-common-data-quality-issues-fix.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science Career: 7 Expectations vs Reality](https://www.kdnuggets.com/2022/06/data-science-career-7-expectations-reality.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science: Reality vs Expectations](https://www.kdnuggets.com/2022/03/data-science-reality-expectations.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Key Issues Associated with Classification Accuracy](https://www.kdnuggets.com/2023/03/key-issues-associated-classification-accuracy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Use Synthetic Data To Overcome Data Shortages For Machine…](https://www.kdnuggets.com/2022/03/synthetic-data-overcome-data-shortages-machine-learning-model-training.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
