- en: Five Command Line Tools for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/07/five-command-line-tools-data-science.html](https://www.kdnuggets.com/2019/07/five-command-line-tools-data-science.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Rebecca Vickery](https://www.linkedin.com/in/rebecca-vickery-20b94133/),
    Data Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b3a4c4cf95682a42ce49ef0eb6473477.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Toa Heftiba](https://unsplash.com/@heftiba?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText&source=post_page---------------------------) on [Unsplash](https://unsplash.com/search/photos/five?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText&source=post_page---------------------------)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '*One of the most frustrating aspects of data science can be the constant switching
    between different tools whilst working. You can be editing some code in a Jupyter
    Notebook, having to install a new tool on the command line and maybe editing a
    function in an IDE all whilst working on the same task. Sometimes it is nice to
    find ways of doing more things in the same piece of software.*'
  prefs: []
  type: TYPE_NORMAL
- en: In the following post, I am going to list some of the best tools I have found
    for doing data science on the command line. It turns out there are many tasks
    that can be completed via simple terminal commands than I first thought and I
    wanted to share some of those here.
  prefs: []
  type: TYPE_NORMAL
- en: '[cURL](https://curl.haxx.se/?source=post_page---------------------------)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a useful tool for obtaining data from any server via a variety of protocols
    including HTTP.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll give a couple of example use cases for obtaining publically available data
    sets. The [UCI Machine Learning Repository](https://archive.ics.uci.edu/ml/index.php?source=post_page---------------------------) is
    an excellent resource for obtaining datasets for machine learning projects. I
    am going to use a simple curl command to download a data set taken from the blood
    transfusion centre in Hsin-Chu City, Taiwan. If we simply run `curl [url]` which
    in our example will be `curl [https://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data](https://archive.ics.uci.edu/ml/machine-learning-databases/blood-transfusion/transfusion.data?source=post_page---------------------------)`
    this will print the data to the terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some additional arguments will download and save the data using a specified
    filename. The file will now be available in your current working directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Another common method of obtaining data for data science projects is via an
    API. This tool also supports both `GET` and `POST` requests for interacting with
    an API. Running the following command will obtain a single record from the [OpenWeatherMap](https://openweathermap.org/api?source=post_page---------------------------) API
    and save as a JSON file named `weather.json` . For a more comprehensive tutorial
    on cURL see this excellent [article](https://zaiste.net/introduction_to_curl/?source=post_page---------------------------) by
    Zaiste.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[csvkit](https://csvkit.readthedocs.io/en/latest/tutorial/1_getting_started.html?source=post_page---------------------------#about-this-tutorial)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'csvkit is a set of command line tools for working with CSV files. The tasks
    that it can execute can be divided into three areas: input, processing and output.
    Let’s look at a quick real-world example of how you can use this.'
  prefs: []
  type: TYPE_NORMAL
- en: Firstly let’s install the tool using pip install.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For the purposes of this example, I am going to be using the same CSV file I
    created from the UCI Machine Learning Repository via a curl command above.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s use `csvclean` to make sure that our CSV file is in the correct
    format. This function will automatically fix common CSV errors and remove any
    bad rows. A useful aspect of this function is that it automatically outputs a
    new cleaned version of the CSV file so that the raw data is preserved. The new
    file always has the following naming convention `[filename]_out.csv`. If you would
    prefer for the original file to be overwritten you can add the optional `-n` argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the example file I have, there are no errors but this can be a really useful
    way to reduce errors further down the line when working with CSV files.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s say we want to quickly inspect the file. We can use `csvcut` and `csvgrep` to
    do this.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly let’s print out the column names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let’s now determine how many classes there are in the target column `whether
    he/she donated blood in March 2007`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `csvgrep` function allows you to filter CSV files based on regular expression
    matching.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use this function to extract only the rows that match class 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can also use `csvkit` to perform simple data analysis using the `csvstat`function.
  prefs: []
  type: TYPE_NORMAL
- en: Simply running `csvstat data_dl_out.csv` prints descriptive statistics for the
    entire file to the command line. You can also just request the result of only
    one statistic with an optional command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: IPython
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: IPython gives access to enhanced interactive python from the shell. In essence,
    it means you can do most of the things that you can do in a Jupyter Notebook from
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: You can follow these [steps](https://ipython.org/ipython-doc/3/install/install.html?source=post_page---------------------------) to
    install it if you do not already have it available in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: To initiate IPython simply type `ipython` at the command line. You are now in
    the interactive shell. Here you can import python installed libraries and I find
    this tool most useful for doing some quick data analysis on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s perform some basic tasks on the data set we have already been using. First
    I will import pandas, read in the file and inspect the first few rows of data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The file column names are quite long so next, I am going to use pandas to rename
    them, and then export the resulting dataframe to a new CSV file for later use.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As a final exercise let’s inspect the correlation between the features and the
    target variable using the pandas `corr()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/688fe2f89ef19211cf18326fff7daa88.png)'
  prefs: []
  type: TYPE_IMG
- en: To exit IPython simply type `exit` .
  prefs: []
  type: TYPE_NORMAL
- en: '[csvsql](https://csvkit.readthedocs.io/en/1.0.2/scripts/csvsql.html?source=post_page---------------------------)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At times you may also want to obtain a data set via a SQL query on a database.
    The tool csvsql, which is also part of the csvkit tool, supports querying, writing
    and creating tables directly on a database. It also supports SQL statements for
    querying a CSV file. Let’s run an example query on the cleaned dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[SciKit-Learn Laboratory](https://scikit-learn-laboratory.readthedocs.io/en/latest/?source=post_page---------------------------)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Yes, you can perform machine learning at the command line! There are a few tools
    for this but SciKit-Learn Laboratory is probably one of the most accessible. Let’s
    build a model using our blood donations data set.
  prefs: []
  type: TYPE_NORMAL
- en: SciKit-Learn laboratory relies on the correct files being placed in consistently
    named directories. So to begin with we will make a directory named `train` and
    copy, move and rename the data file to `features.csv` .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to create a config file named `predict-donations.cfg` and place
    it in our `data` directory.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Then we simply run this command `run_experiment -l predict-donations.cfg`.
  prefs: []
  type: TYPE_NORMAL
- en: This automatically runs the experiment and creates an output folder containing
    the results.
  prefs: []
  type: TYPE_NORMAL
- en: We can run a SQL query to summarise the results in the `Blood_Donations_summary.tsv` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There are many other command line tools that can be useful for data science
    but I wanted to highlight here those that I had found useful in my work. For a
    really comprehensive view of data science at the command line, I found the book
    Data Science at the Command Line which is freely available [online](https://www.datascienceatthecommandline.com/?source=post_page---------------------------) to
    be extremely useful.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Rebecca Vickery](https://www.linkedin.com/in/rebecca-vickery-20b94133/)**
    is learning data science through self study. Data Scientist @ Holiday Extras.
    Co-Founder of alGo.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/five-command-line-tools-for-data-science-29f04e5b9c16).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top 12 Essential Command Line Tools for Data Scientists](/2018/03/top-12-essential-command-line-tools-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science at the Command Line: Exploring Data](/2018/02/data-science-command-line-book-exploring-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploratory Data Analysis in Python](/2017/07/exploratory-data-analysis-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 More Command Line Tools for Data Science](https://www.kdnuggets.com/2023/03/5-command-line-tools-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science at the Command Line: The Free eBook](https://www.kdnuggets.com/2022/03/data-science-command-line-free-ebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ChatGPT CLI: Transform Your Command-Line Interface Into ChatGPT](https://www.kdnuggets.com/2023/07/chatgpt-cli-transform-commandline-interface-chatgpt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Master The Art Of Command Line With This GitHub Repository](https://www.kdnuggets.com/master-the-art-of-command-line-with-this-github-repository)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n03, Jan 19: A Deep Look Into 13 Data…](https://www.kdnuggets.com/2022/n03.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
