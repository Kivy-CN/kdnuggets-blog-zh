["```py\nimport pandas as pd\nfrom sklearn.cluster import KMeans\ndf = pd.read_csv('wine-clustering.csv')\n\nkmeans = KMeans(n_clusters=4, random_state=0)\nkmeans.fit(df)\n```", "```py\nwcss = []\nfor k in range(1, 11):\n    kmeans = KMeans(n_clusters=k, random_state=0)\n    kmeans.fit(df)\n    wcss.append(kmeans.inertia_)\n\n# Plot the elbow method\nplt.plot(range(1, 11), wcss, marker='o')\nplt.xlabel('Number of Clusters (k)')\nplt.ylabel('WCSS')\nplt.title('Elbow Method')\nplt.show()\n```", "```py\n# Calculate Silhouette Coefficient\nfrom sklearn.metrics import silhouette_score\n\nsil_coeff = silhouette_score(df.drop(\"labels\", axis=1), df[\"labels\"])\nprint(\"Silhouette Coefficient:\", round(sil_coeff, 3))\n```", "```py\n# Calculate Calinski-Harabasz Index\nfrom sklearn.metrics import calinski_harabasz_score\n\nch_index = calinski_harabasz_score(df.drop('labels', axis=1), df['labels'])\nprint(\"Calinski-Harabasz Index:\", round(ch_index, 3))\n```", "```py\n# Calculate Davies-Bouldin Index\nfrom sklearn.metrics import davies_bouldin_score\n\ndbi = davies_bouldin_score(df.drop('labels', axis=1), df['labels'])\nprint(\"Davies-Bouldin Index:\", round(dbi, 3))\n```", "```py\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\n\n#Scaled the data\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df)\n\npca = PCA()\npca.fit(df_scaled)\n```", "```py\n#Calculate Cumulative Explained Variance\ncev = np.cumsum(pca.explained_variance_ratio_)\n\nplt.plot(range(1, len(cev) + 1), cev, marker='o')\nplt.xlabel('Number of PC')\nplt.ylabel('CEV')\nplt.title('CEV vs. Number of PC')\nplt.grid()\n```", "```py\nfrom sklearn.manifold import trustworthiness\n\n# Calculate Trustworthiness. Tweak the number of neighbors depends on the dataset size.\ntw = trustworthiness(df_scaled, df_pca, n_neighbors=5)\nprint(\"Trustworthiness:\", round(tw, 3))\n```", "```py\npip install sammon-mapping\n```", "```py\n# Calculate Sammon's Stress\nfrom sammon import sammon\n\npca_res, sammon_st = sammon.sammon(np.array(df))\n\nprint(\"Sammon's Stress:\", round(sammon_st, 5))\n```"]