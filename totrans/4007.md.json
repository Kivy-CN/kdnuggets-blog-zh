["```py\n!pip install Faker\n```", "```py\nimport pandas as pd\nfrom faker import Faker\nimport random\n\n# Initialize Faker to generate synthetic data\nfake = Faker()\n\n# Set seed for reproducibility\nFaker.seed(42)\n\n# Generate synthetic data\ndata = []\nfor _ in range(1000):\n    data.append({\n        'Name': fake.name(),\n        'Age': random.randint(18, 70),\n        'Email': fake.email(),\n        'Phone': fake.phone_number(),\n        'Address': fake.address(),\n        'Salary': random.randint(20000, 150000),\n        'Join_Date': fake.date_this_decade(),\n        'Employment_Status': random.choice(['Full-Time', 'Part-Time', 'Contract']),\n        'Department': random.choice(['IT', 'Engineering','Finance', 'HR', 'Marketing'])\n    }) \n```", "```py\n# Let's tweak the records a bit!\n# Introduce missing values\nfor i in random.sample(range(len(data)), 50):\n    data[i]['Email'] = None\n\n# Introduce duplicate records\ndata.extend(random.sample(data, 100))\n\n# Introduce outliers\nfor i in random.sample(range(len(data)), 20):\n    data[i]['Salary'] = random.randint(200000, 500000)\n```", "```py\n# Create dataframe\ndf = pd.DataFrame(data)\n```", "```py\ndf.info()\n```", "```py\nOutput >>>\n <class>RangeIndex: 1100 entries, 0 to 1099\nData columns (total 9 columns):\n #   Column             Non-Null Count  Dtype \n---  ------             --------------  ----- \n 0   Name               1100 non-null   object\n 1   Age                1100 non-null   int64 \n 2   Email              1047 non-null   object\n 3   Phone              1100 non-null   object\n 4   Address            1100 non-null   object\n 5   Salary             1100 non-null   int64 \n 6   Join_Date          1100 non-null   object\n 7   Employment_Status  1100 non-null   object\n 8   Department         1100 non-null   object\ndtypes: int64(2), object(7)\nmemory usage: 77.5+ KB</class>\n```", "```py\ndf.head()\n```", "```py\n# Check for duplicate rows\nduplicates = df.duplicated().sum()\nprint(\"Number of duplicate rows:\", duplicates)\n\n# Removing duplicate rows\ndf.drop_duplicates(inplace=True)\n```", "```py\nOutput >>>\nNumber of duplicate rows: 100\n```", "```py\n# Check for missing values\nmissing_values = df.isna().sum()\nprint(\"Missing Values:\")\nprint(missing_values)\n```", "```py\nOutput >>>\nMissing Values:\nName                  0\nAge                   0\nEmail                50\nPhone                 0\nAddress               0\nSalary                0\nJoin_Date             0\nEmployment_Status     0\nDepartment            0\ndtype: int64\n```", "```py\n # Handling missing values by filling with a placeholder\ndf['Email'].fillna('unknown@example.com', inplace=True)\n```", "```py\n# Convert 'Join_Date' to datetime\ndf['Join_Date'] = pd.to_datetime(df['Join_Date'])\nprint(\"Join_Date after conversion:\")\nprint(df['Join_Date'].head())\n```", "```py\nOutput >>>\nJoin_Date after conversion:\n0   2023-07-12\n1   2020-12-31\n2   2024-05-09\n3   2021-01-19\n4   2023-10-04\nName: Join_Date, dtype: datetime64[ns]\n```", "```py\n# Creating a new feature 'Years_Employed' based on 'Join_Date'\ndf['Years_Employed'] = pd.Timestamp.now().year - df['Join_Date'].dt.year\nprint(\"New feature 'Years_Employed':\")\nprint(df[['Join_Date', 'Years_Employed']].head())\n```", "```py\nOutput >>>\nNew feature 'Years_Employed':\n   Join_Date  Years_Employed\n0 2023-07-12               1\n1 2020-12-31               4\n2 2024-05-09               0\n3 2021-01-19               3\n4 2023-10-04               1\n```", "```py\n# Clean address strings\ndf['Address'] = df['Address'].str.replace('\\n', ' ', regex=False)\nprint(\"Address after text cleaning:\")\nprint(df['Address'].head())\n```", "```py\nOutput >>>\nAddress after text cleaning:\n0    79402 Peterson Drives Apt. 511 Davisstad, PA 35172\n1     55341 Amanda Gardens Apt. 764 Lake Mark, WI 07832\n2                 710 Eric Estate Carlsonfurt, MS 78605\n3                 809 Burns Creek Natashaport, IA 08093\n4    8713 Caleb Brooks Apt. 930 Lake Crystalbury, CA...\nName: Address, dtype: object\n```", "```py\n# Detecting outliers using z-score\nz_scores = (df['Salary'] - df['Salary'].mean()) / df['Salary'].std()\noutliers = df[abs(z_scores) > 3]\nprint(\"Outliers based on Salary:\")\nprint(outliers[['Name', 'Salary']].head())\n```", "```py\nOutput >>>\nOutliers based on Salary:\n                Name  Salary\n16    Michael Powell  414854\n131    Holly Jimenez  258727\n240  Daniel Williams  371500\n328    Walter Bishop  332554\n352     Ashley Munoz  278539\n```"]