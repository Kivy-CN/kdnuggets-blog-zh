- en: Introduction to Memory Profiling in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的内存分析简介
- en: 原文：[https://www.kdnuggets.com/introduction-to-memory-profiling-in-python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/introduction-to-memory-profiling-in-python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)
- en: '![Introduction to Memory Profiling in Python](../Images/d58b33ad6dcd7195d29965577c93d88b.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python中的内存分析简介](../Images/d58b33ad6dcd7195d29965577c93d88b.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Profiling Python code is helpful to understand how the code works and identify
    opportunities for optimization. You’ve probably profiled your Python scripts for
    [time-related metrics](/profiling-python-code-using-timeit-and-cprofile)—measuring
    execution times of specific sections of code.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 对Python代码进行性能分析有助于了解代码的工作原理并识别优化机会。你可能已经对你的Python脚本进行了[时间相关的度量](/profiling-python-code-using-timeit-and-cprofile)—测量代码特定部分的执行时间。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: But profiling for memory—to understand memory allocation and deallocation during
    execution—is just as important. Because memory profiling can help identify memory
    leaks, resource utilization, and potential issues with scaling.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但进行内存分析—了解执行过程中内存的分配和释放—同样重要。因为内存分析可以帮助识别内存泄漏、资源利用情况以及潜在的扩展问题。
- en: In this tutorial, we’ll explore profiling Python code for memory usage using
    the Python package [memory-profiler](https://pypi.org/project/memory-profiler/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将探索使用Python包[memory-profiler](https://pypi.org/project/memory-profiler/)对Python代码进行内存使用分析。
- en: Installing the memory-profiler Python Package
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装memory-profiler Python包
- en: 'Let’s start by installing the memory-profiler Python package using pip:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先使用pip安装memory-profiler Python包：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Note**: Install memory-profiler in a dedicated [virtual environment](https://docs.python.org/3/library/venv.html)
    for the project instead of in your global environment. We''ll also be using the
    plotting capabilities available in memory-profiler to plot the memory usage, which
    requires [matplotlib](https://matplotlib.org/). So make sure you also have matplotlib
    installed in the project’s virtual environment.'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：在项目的[虚拟环境](https://docs.python.org/3/library/venv.html)中安装memory-profiler，而不是在全局环境中。我们还将使用memory-profiler中可用的绘图功能来绘制内存使用情况，这需要[matplotlib](https://matplotlib.org/)。因此，请确保在项目的虚拟环境中也安装了matplotlib。'
- en: Profiling Memory Usage with the @profile Decorator
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用@profile装饰器进行内存使用分析
- en: 'Let''s create a Python script (say main.py) with a function `process_strs`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来创建一个Python脚本（比如main.py），其中包含一个函数`process_strs`：
- en: The function creates two super long Python strings `str1` and `str2` and concatenates
    them.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该函数创建了两个超长的Python字符串`str1`和`str2`并将它们连接在一起。
- en: The keyword argument `reps` controls the number of times the hardcoded strings
    are to be repeated to create `str1` and `str2`. And we give it a default value
    of 10**6 which will be used if the function called does not specify the value
    of `reps`.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数`reps`控制硬编码字符串重复的次数，以创建`str1`和`str2`。我们将其默认值设置为10**6，如果调用函数时未指定`reps`的值，将使用此默认值。
- en: We then explicitly delete `str2`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们显式地删除`str2`。
- en: The function returns the concatenated string `str3`.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该函数返回连接后的字符串`str3`。
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Running the script should give you a similar output:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 运行脚本应给你类似的输出：
- en: '![Introduction to Memory Profiling in Python](../Images/6f098866cdf88bcd70a3cfaebcb864e6.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Python中的内存分析简介](../Images/6f098866cdf88bcd70a3cfaebcb864e6.png)'
- en: As seen in the output, we’re able to see the memory used, the increment with
    each subsequent string creation and the string deletion step freeing up some of
    the used memory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中可以看出，我们能够看到使用的内存，每次创建字符串时的增量，以及删除字符串步骤释放的一部分内存。
- en: Running the mprof command
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行mprof命令
- en: 'Instead of running the Python script as shown above, you can also run the `mprof`
    command like so:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 除了运行上面显示的 Python 脚本，你还可以这样运行 `mprof` 命令：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: When you run this command, you should also be able to see a .dat file with the
    memory usage data. You’ll have one .dat file every time you run the `mprof` command—identified
    by the timestamp.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，你还应该能够看到一个包含内存使用数据的 .dat 文件。每次运行 `mprof` 命令时，你会有一个 .dat 文件——通过时间戳来识别。
- en: '![Introduction to Memory Profiling in Python](../Images/405aef5bf7187af89b0222bc460bc92a.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Python 中内存分析简介](../Images/405aef5bf7187af89b0222bc460bc92a.png)'
- en: Plotting Memory Usage
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绘制内存使用情况
- en: Sometimes it's easier to analyze memory usage from a plot instead of looking
    at numbers. Remember we discussed matplotlib being a required dependency to use
    the plotting capabilities.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时从图形中分析内存使用情况比查看数字更容易。记住，我们讨论了 matplotlib 是使用绘图功能的必备依赖项。
- en: 'You can use the `mprof plot` command to plot the data in the .dat file and
    save it to an image file (here output.png):'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `mprof plot` 命令将 .dat 文件中的数据绘制成图像文件（此处为 output.png）：
- en: '[PRE3]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By default, `mprof plot` used the data from the most recent run of the `mprof`
    command.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`mprof plot` 使用最近一次运行 `mprof` 命令的数据。
- en: '![Introduction to Memory Profiling in Python](../Images/99137eda0d7575aad3048180925e9d0d.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Python 中内存分析简介](../Images/99137eda0d7575aad3048180925e9d0d.png)'
- en: You can see the timestamps mentioned in the plot as well.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在图中看到提到的时间戳。
- en: Logging Memory Usage Profile to a Log File
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将内存使用分析记录到日志文件
- en: 'Alternatively, you can log the memory usage statistics to a preferred log file
    in the working directory. Here, we create a file handler `mem_logs` to the log
    file, and set the `stream` argument in the `@profile` decorator to the file handler:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，你也可以将内存使用统计信息记录到工作目录中的首选日志文件。这里，我们创建了一个文件处理器 `mem_logs`，并在 `@profile` 装饰器中将
    `stream` 参数设置为文件处理器：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you now run the script, you should be able to see the mem_profile.log
    file in your working directory with the following contents:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行脚本时，你应该能够在工作目录中看到 `mem_profile.log` 文件，其内容如下：
- en: '![Introduction to Memory Profiling in Python](../Images/9b3d264491646af8f32dd27a1b578add.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![Python 中内存分析简介](../Images/9b3d264491646af8f32dd27a1b578add.png)'
- en: Profiling Using the memory_usage Function
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 memory_usage 函数进行分析
- en: You can also use the `memory_usage()` function to understand the resources required
    for a specific function to execute—sampled at regular time intervals.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 `memory_usage()` 函数了解特定函数执行所需的资源——以固定时间间隔进行采样。
- en: The `memory_usage` function takes in the function to profile, positional and
    keyword arguments as a tuple.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`memory_usage` 函数接收要分析的函数、位置参数和关键字参数作为一个元组。'
- en: 'Here, we’d like to find the memory usage of the `process_strs` function with
    the keyword argument `reps` set to 10**7\. We also set the sampling interval to
    0.1 s:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们希望找到 `process_strs` 函数在 `reps` 关键字参数设置为 10**7 时的内存使用情况。我们还将采样间隔设置为 0.1
    秒：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here’s the corresponding output:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是相应的输出：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: You can also adjust the sampling interval based on how often you want the memory
    usage to be captured. As an example, we set the interval to 0.01 s; meaning we’ll
    now get a more granular view of the memory utilized.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以根据希望捕获内存使用情况的频率来调整采样间隔。例如，我们将间隔设置为 0.01 秒；这意味着我们将获得更详细的内存使用情况视图。
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should be able to see a similar output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能够看到类似的输出：
- en: '[PRE8]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Conclusion
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this tutorial, we learned how to get started with profiling Python scripts
    for memory usage.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们学习了如何开始对 Python 脚本进行内存使用分析。
- en: Specifically, we learned how to do this using the memory-profiler package. We
    used the `@profile` decorator and the `memory_usage()` function to get the memory
    usage of a sample Python script. We also learned how to use the capabilities such
    as plotting the memory usage and capturing the stats in a log file.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们学习了如何使用 memory-profiler 包来实现这一点。我们使用了 `@profile` 装饰器和 `memory_usage()`
    函数来获取示例 Python 脚本的内存使用情况。我们还学习了如何使用绘图功能和将统计信息捕获到日志文件中。
- en: If you’re interested in profiling your Python script for execution times, consider
    reading [Profiling Python Code Using timeit and cProfile](/profiling-python-code-using-timeit-and-cprofile).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对分析 Python 脚本的执行时间感兴趣，可以考虑阅读 [使用 timeit 和 cProfile 分析 Python 代码](/profiling-python-code-using-timeit-and-cprofile)。
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)**
    是一位来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过撰写教程、操作指南、观点文章等与开发者社区分享她的知识。Bala
    还创建了引人入胜的资源概述和编码教程。**'
- en: More On This Topic
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Profiling Python Code Using timeit and cProfile](https://www.kdnuggets.com/profiling-python-code-using-timeit-and-cprofile)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 timeit 和 cProfile 对 Python 代码进行性能分析](https://www.kdnuggets.com/profiling-python-code-using-timeit-and-cprofile)'
- en: '[How to Perform Memory-Efficient Operations on Large Datasets with Pandas](https://www.kdnuggets.com/how-to-perform-memory-efficient-operations-on-large-datasets-with-pandas)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Pandas 执行内存高效的大数据集操作](https://www.kdnuggets.com/how-to-perform-memory-efficient-operations-on-large-datasets-with-pandas)'
- en: '[Memory Complexity with Transformers](https://www.kdnuggets.com/2022/12/memory-complexity-transformers.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[变压器模型的内存复杂度](https://www.kdnuggets.com/2022/12/memory-complexity-transformers.html)'
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 进行 Python 聚类介绍](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
- en: '[Introduction to Python Libraries for Data Cleaning](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数据清洗库介绍](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
- en: '[Introduction to Statistical Learning, Python Edition: Free Book](https://www.kdnuggets.com/2023/07/introduction-statistical-learning-python-edition-free-book.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[《统计学习导论，Python 版：免费书籍》](https://www.kdnuggets.com/2023/07/introduction-statistical-learning-python-edition-free-book.html)'
