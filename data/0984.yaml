- en: Customize Your Data Frame Column Names in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中自定义数据框列名
- en: 原文：[https://www.kdnuggets.com/2022/08/customize-data-frame-column-names-python.html](https://www.kdnuggets.com/2022/08/customize-data-frame-column-names-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/08/customize-data-frame-column-names-python.html](https://www.kdnuggets.com/2022/08/customize-data-frame-column-names-python.html)
- en: '![Customize Your Data Frame Column Names in Python](../Images/870b0ab6c500f79158301a70882fd8c8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/870b0ab6c500f79158301a70882fd8c8.png)'
- en: Image by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑图片
- en: Be it any profession in data science apart from the regular data cleaning and
    model pipeline building, an individual is also required to produce results in
    a way which is easily interpretable to the business. In this tutorial we will
    explore four scenarios in which you can apply different transformations to all
    Data Frame columns simultaneously.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 无论数据科学中的哪个职业，除了常规的数据清洗和模型构建外，个人还需要以易于业务理解的方式呈现结果。在本教程中，我们将探索四种场景，在这些场景中，你可以同时对所有数据框列应用不同的转换。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**Before deep diving into the scenarios lets import pandas library and create
    a Data Frame named df with the following column names:**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**在深入探讨这些场景之前，让我们导入 pandas 库，并创建一个名为 df 的数据框，列名如下：**'
- en: week_one_attendance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: week_one_attendance
- en: week_two_attendance
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: week_two_attendance
- en: week_three_attendance
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: week_three_attendance
- en: week_four_attendance
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: week_four_attendance
- en: '**Code:**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Output:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/09b34401e88dbc1af33bcd7e19633c95.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/09b34401e88dbc1af33bcd7e19633c95.png)'
- en: '**LET’S GET KICKSTARTED WITH THE SCENARIOS**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**让我们开始探索这些场景吧**'
- en: Scenario 1
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景 1
- en: In the code below a [for loop](https://www.programiz.com/python-programming/for-loop)
    is used to iterate over all the columns of the Data Frame, where in every iteration
    each column is converted to upper case using the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html)
    method
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，使用了[for 循环](https://www.programiz.com/python-programming/for-loop)来迭代数据框的所有列，在每次迭代中，每列都通过[rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html)方法转换为大写。
- en: '**Code:**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Output:**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/6fd09eeff594fd3192843055a83cf9a6.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/6fd09eeff594fd3192843055a83cf9a6.png)'
- en: Scenario2
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景2
- en: In the code below we will be declaring an empty [dictionary](https://www.w3schools.com/python/python_dictionaries.asp)
    named **columnnames** and then declare another **variable** named **count to 0**
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将声明一个名为**columnnames**的空[字典](https://www.w3schools.com/python/python_dictionaries.asp)，然后声明另一个名为**count
    to 0**的**变量**。
- en: We would then be using [for loop](https://www.programiz.com/python-programming/for-loop)
    to iterate over all the columns of the Data Frame, where in every iteration the
    count variable would be incremented by 1\. The incremented value would then be
    used inside the [fstring](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)
    to generate a new column name. The original and new column names will be added
    to the dictionary as key, value pairs in every iteration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用[for 循环](https://www.programiz.com/python-programming/for-loop)来迭代数据框的所有列，在每次迭代中，**count**变量将增加
    1。增加后的值将被用在[fstring](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)中生成新的列名。每次迭代时，原始列名和新列名将作为键值对添加到字典中。
- en: After constructing the dictionary columnnames with the original and new column
    names we will then passing the dictionary to the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) 
    method
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建包含原始列名和新列名的字典 `columnnames` 后，我们将把字典传递给 [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html)
    方法
- en: '**Code:**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Output:**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/01e7f112fa72eef5530e7a50ca151d7e.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/01e7f112fa72eef5530e7a50ca151d7e.png)'
- en: '**Code:**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output:**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/73b0babe14a5b32c3a0d1ca52d0bb993.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/73b0babe14a5b32c3a0d1ca52d0bb993.png)'
- en: Scenario 3
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景 3
- en: In the code below we will declare an empty [dictionary](https://www.w3schools.com/python/python_dictionaries.asp)
    named **columnnames**
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将声明一个名为 **columnnames** 的空 [字典](https://www.w3schools.com/python/python_dictionaries.asp)
- en: We would then be using [for loop](https://www.programiz.com/python-programming/for-loop) 
    to iterate over all the columns of the Data Frame, where in every iteration the
    first occurrence of the underscore will be replaced by no space. The original
    and new column names will be added to the dictionary as key, value pairs in every
    iteration.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用 [for loop](https://www.programiz.com/python-programming/for-loop) 遍历数据框的所有列，每次迭代中，第一个下划线的出现将被替换为空格。每次迭代中，原始列名和新列名将作为键值对添加到字典中。
- en: After constructing the dictionary columnnames with the original and new column
    names, we will then passing the dictionary to the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) 
    method
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建包含原始列名和新列名的字典 `columnnames` 后，我们将把字典传递给 [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html)
    方法
- en: '**Code:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/4b99f216a947e92c7f0c2b9c60f7ef9f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/4b99f216a947e92c7f0c2b9c60f7ef9f.png)'
- en: '**Code:**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output:**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/f6b74516170f875b804d8b6e35969ffd.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/f6b74516170f875b804d8b6e35969ffd.png)'
- en: Scenario 4
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景 4
- en: In the code below we will be declaring an empty [dictionary](https://www.w3schools.com/python/python_dictionaries.asp)
    named **columnnames** and then declare another **variable** named **count to 0**
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将声明一个名为 **columnnames** 的空 [字典](https://www.w3schools.com/python/python_dictionaries.asp)，然后声明另一个名为
    **count to 0** 的 **变量**
- en: We would then be using [for loop](https://www.programiz.com/python-programming/for-loop)
    to iterate over all the columns of the Data Frame, where in every iteration the
    count variable would be incremented by 1\. The incremented value would then be
    used inside the [fstring](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)
    to generate a new column name having the positions of the first and last word
    swapped. The original and new column names will be added to the dictionary as
    key, value pairs in every iteration.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将使用 [for loop](https://www.programiz.com/python-programming/for-loop) 遍历数据框的所有列，每次迭代中
    `count` 变量将增加 1。增量值将被用于 [fstring](https://www.geeksforgeeks.org/formatted-string-literals-f-strings-python/)
    中，以生成一个新列名，其中第一个和最后一个单词的位置被交换。每次迭代中，原始列名和新列名将作为键值对添加到字典中。
- en: After constructing the dictionary column names with the original and new column
    names we will then passing the dictionary to the [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html) 
    method
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建包含原始列名和新列名的字典后，我们将把字典传递给 [rename](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.rename.html)
    方法
- en: '**Code:**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/8ef393a9428224fe5b830f4192d2f893.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/8ef393a9428224fe5b830f4192d2f893.png)'
- en: '**Code:**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**代码：**'
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output:**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Customize Your Data Frame Column Names in Python](../Images/2971a94c297be8f98d7951ad060fb7a2.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![在 Python 中自定义数据框列名](../Images/2971a94c297be8f98d7951ad060fb7a2.png)'
- en: Conclusion
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Rather than manually updating every column name one by one, by using for loops
    and different methods available with Python Strings we were able to update the
    values of all the columns of a Data Frame simultaneously hence saving an ample
    amount of time
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于逐个手动更新每个列名，我们通过使用 `for` 循环和 Python 字符串的不同方法，能够同时更新数据框的所有列的值，从而节省了大量时间
- en: '**[Priya Sengar](https://www.linkedin.com/in/priya-sengar/)** (**Medium**,
    **Github**) is a Data Scientist with Old Dominion University. Priya is passionate
    about solving problems in data and converting them into solutions.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Priya Sengar](https://www.linkedin.com/in/priya-sengar/)** (**Medium**,
    **Github**) 是来自 Old Dominion University 的数据科学家。Priya 热衷于解决数据问题并将其转化为解决方案。'
- en: More On This Topic
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多相关话题
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过《快速 Python 数据科学》提升你的 Python 技能！](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
- en: '[Best Architecture for Your Text Classification Task: Benchmarking…](https://www.kdnuggets.com/2023/04/best-architecture-text-classification-task-benchmarking-options.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文本分类任务的最佳架构：基准测试…](https://www.kdnuggets.com/2023/04/best-architecture-text-classification-task-benchmarking-options.html)'
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家如何管理你的可重用 Python 代码](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[How To Comment Your Python Code as a Data Scientist](https://www.kdnuggets.com/how-to-comment-your-python-code-as-a-data-scientist)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家如何注释你的 Python 代码](https://www.kdnuggets.com/how-to-comment-your-python-code-as-a-data-scientist)'
- en: '[KDnuggets™ News 22:n01, Jan 5: 3 Tools to Track and Visualize…](https://www.kdnuggets.com/2022/n01.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets™ 新闻 22:n01，1月5日：跟踪和可视化的 3 个工具…](https://www.kdnuggets.com/2022/n01.html)'
- en: '[Novice to Ninja: Why Your Python Skills Matter in Data Science](https://www.kdnuggets.com/novice-to-ninja-why-your-python-skills-matter-in-data-science)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从新手到高手：为什么你的 Python 技能在数据科学中至关重要](https://www.kdnuggets.com/novice-to-ninja-why-your-python-skills-matter-in-data-science)'
