- en: Building a Basic Keras Neural Network Sequential Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/06/basic-keras-neural-network-sequential-model.html](https://www.kdnuggets.com/2018/06/basic-keras-neural-network-sequential-model.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: As the title suggest, this post approaches building a basic Keras neural network
    using the Sequential model API. The specific task herein is a common one (training
    a classifier on the MNIST dataset), but this can be considered an example of a
    template for approaching any such similar task.
  prefs: []
  type: TYPE_NORMAL
- en: The approach basically coincides with Chollet's [Keras 4 step workflow](/2018/06/keras-4-step-workflow.html),
    which he outlines in his book "[Deep Learning with Python](https://www.amazon.com/Deep-Learning-Python-Francois-Chollet/dp/1617294438),"
    and really amounts to little more than what can be found as an example in the
    early chapters of the book, or the official Keras tutorials.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The motivation for producing such a post is to use it is a foundational reference
    for a series of upcoming posts configuring Keras in a variety of different ways.
    This seemed a better idea than covering the same things over and over again at
    the start of each post. The content should be useful on its own for those who
    do not have experience approaching building a neural network in Keras.
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/2f500fab517e06ac7164e13b054b02a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image taken from screenshot of the [Keras documentation website](https://keras.io/models/sequential/)
  prefs: []
  type: TYPE_NORMAL
- en: The dataset used is MNIST, and the model built is a Sequential network of Dense
    layers, intentionally avoiding CNNs for now.
  prefs: []
  type: TYPE_NORMAL
- en: First are the imports and a few hyperparameter and data resizing variables.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next is a function for outputting some simple (but useful) metadata of our dataset.
    Since we will be using it a few times, it makes sense to put the few lines in
    a callable function. Reusable code is an end in and of itself :)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next we load our dataset (MNIST, using Keras' dataset utilities), and then use
    the function above to get some dataset metadata.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To feed MNIST instances into a neural network, they need to be reshaped, from
    a 2 dimensional image representation to a single dimension sequence. We also convert
    our class vector to a binary matrix (using `to_categorical`). This is accomplished
    below, after which the same function defined above is called again in order to
    show the effects of our data reshaping.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Both of the required data transformations have been accomplished. Now it's time
    to build, compile, and train a neural network. You can see more about this process
    in [this previous post](/2018/06/keras-4-step-workflow.html).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The only unorthodox (as far as using the Keras library standalone) step has
    been the use of the [Live Loss Plot callback](https://github.com/stared/livelossplot)
    which outputs epoch-by-epoch loss functions and accuracies at the end of each
    epoch of training. Make sure you have installed Live Loss Plot prior to running
    the above code. We are also given the final loss and accuracy on our test dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/a2adbfb18cdab3aa422284c8325f9b93.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Almost done, but first let's output a summary of the neural network we built.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, visualize the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Image](../Images/18b8a2587d440a56daa34f40129a7bfb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The full code is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: As previously stated, this post doesn't cover anything innovative, but we will
    publish a series of upcoming posts using Keras which hopefully will be more interesting
    to the reader, and this common starting point should be beneficial for reference.
  prefs: []
  type: TYPE_NORMAL
- en: Also, for those looking for a streamlined approach to building neural networks
    using the Keras Sequential model, this post should serve as a basic guide to hitting
    all the important points along the way. What you do after training is up to you
    (at this point), but we will circle back around to this in the future as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[The Keras 4 Step Workflow](/2018/06/keras-4-step-workflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Deep Learning with Keras](/2017/10/seven-steps-deep-learning-keras.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Today I Built a Neural Network During My Lunch Break with Keras](/2017/12/today-built-neural-network-during-lunch-break-keras.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Building and Training Your First Neural Network with TensorFlow and Keras](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn Deep Learning by Building 15 Neural Network Projects in 2022](https://www.kdnuggets.com/2022/01/15-neural-network-projects-build-2022.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Convolutional Neural Network with PyTorch](https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Neural Network Optimization with AIMET](https://www.kdnuggets.com/2022/04/qualcomm-neural-network-optimization-aimet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Importance of Permutation in Neural Network Predictions](https://www.kdnuggets.com/2022/12/importance-permutation-neural-network-predictions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Keras 3.0: Everything You Need To Know](https://www.kdnuggets.com/2023/07/keras-30-everything-need-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
