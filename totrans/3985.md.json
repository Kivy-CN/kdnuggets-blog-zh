["```py\nfrom unittest.mock import Mock, patch\n```", "```py\nmy_mock = Mock()\n```", "```py\nmy_mock.some_method.return_value = 'Hello, World!'\nprint(my_mock.some_method()) \n```", "```py\nHello, World!\n```", "```py\ndef raise_exception():\n    raise ValueError(\"An error occurred\")\n\nmy_mock.some_method.side_effect = raise_exception\n\n# This will raise a ValueError\ntry:\n    my_mock.some_method()\nexcept ValueError as e:\n    print(e) \n```", "```py\nAn error occurred\n```", "```py\nmy_mock.calculate_length('foo', 'bar')\nmy_mock.calculate_length.assert_called()\nmy_mock.calculate_length.assert_called_once()\nmy_mock.calculate_length.assert_called_with('foo', 'bar')\nmy_mock.calculate_length.assert_called_once_with('foo', 'bar')\n```", "```py\n# my_module.py\nimport requests\n\ndef fetch_data(url):\n    response = requests.get(url)\n    return response.json()\n```", "```py\n# test_my_module.py\nimport unittest\nfrom unittest.mock import patch\nimport my_module\n\nclass TestFetchData(unittest.TestCase):\n    @patch('my_module.requests.get')\n\n    def test_fetch_data(self, mock_get):\n        # Set up the mock to return a specific response\n        mock_get.return_value.json.return_value = {'key': 'value'}\n\n        # Call the function to test\n        result = my_module.fetch_data('http://example.com')\n\n        # Check the result\n        self.assertEqual(result, {'key': 'value'})\n\n        # Verify that requests.get was called correctly\n        mock_get.assert_called_once_with('http://example.com')\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n# database.py\nclass Database:\n    def connect(self):\n        pass\n\n    def save_user(self, user):\n        pass\n\n    def get_user(self, user_id):\n        pass\n\n# test_database.py\nfrom unittest.mock import Mock\n\n# Creating a mock database object\nmock_db = Mock(spec=Database)\n\n# Simulating method calls\nmock_db.connect()\nmock_db.save_user({\"id\": 1, \"name\": \"Alice\"})\nmock_db.get_user(1)\n\n# Verifying that the methods were called\nmock_db.connect.assert_called_once()\nmock_db.save_user.assert_called_once_with({\"id\": 1, \"name\": \"Alice\"})\nmock_db.get_user.assert_called_once_with(1)\n```"]