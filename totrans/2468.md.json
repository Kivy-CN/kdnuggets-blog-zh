["```py\n# test_math.py\nfrom my_math_project import add, subtract\n\ndef test_add():\n    assert add(1, 1) == 2\n\ndef test_subtract():\n    assert subtract(43, 1) == 42 \n```", "```py\ntests/\n    test_math.py\n    test_stuff.py\n    ...\n    test_other.py \n```", "```py\n# collect rests, run them, and report results\npytest \n```", "```py\nsrc/\nexploratory/\ntests/ \n```", "```py\nploomber\nscikit-learn\npandas \n```", "```py\nploomber==0.13\nscikit-learn==0.24.2\npandas==1.2.4\n# more packages required by your dependencies... \n```", "```py\nfrom my_project import generate_features_and_label\n\ndef test_generate_training_set():\n    my_project.generate_features_and_label(sample=True) \n```", "```py\nfrom my_project import generate_features_and_label, train_model\n\ndef test_train_model():\n    # test we can generate features\n    X, y = my_project.generate_features_and_label(sample=True)\n    # test we can train a model\n    model = train_model(X, y) \n```", "```py\ndef clean(df)\n    # clean data frame with raw data\n    # ...\n    # ...\n\n    # integration test: check age column has a minimum value of 0\n    assert df.age.min() > 0 \n```", "```py\nimport transform\n\ndef clean(df):\n    # some data cleaning code...\n    # ...\n\n    df['chest_pain_type'] = transform.chest_pain_type(df.chest_pain_type)\n\n    # ...\n    # more data cleaning code... \n```", "```py\ndef test_transform_chest_pain_type():\n    # sample input\n    series = pd.Series([0, 1, 2, 3])\n\n    # expected output\n    expected = pd.Series([\n        'typical angina',\n        'atypical angina',\n        'non-anginal pain',\n        'asymptomatic',\n    ])\n\n    # test\n    assert transform.chest_pain_type(series).equals(expected) \n```"]