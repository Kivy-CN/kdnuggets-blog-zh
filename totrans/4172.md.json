["```py\n#Mount google drive\nfrom google.colab import drive\ndrive.mount(‘/content/drive’)\n!pip install  neo4j\n!pip install -U spacy\n!pip install -U pip setuptools wheel\n!python -m spacy download en_core_web_trf\n!wget https://developer.nvidia.com/compute/cuda/9.2/Prod/local_installers/cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64 -O cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb\n!dpkg -i cuda-repo-ubuntu1604-9-2-local_9.2.88-1_amd64.deb\n!apt-key add /var/cuda-repo-9-2-local/7fa2af80.pub\n!apt-get update\n!apt-get install cuda-9.2\n!pip install torch==1.7.1+cu92 torchvision==0.8.2+cu92 torchaudio==0.7.2 -f https://download.pytorch.org/whl/torch_stable.html\n!pip install -U spacy[cuda92,transformers]\n```", "```py\nimport spacy\nnlp = spacy.load(\"/content/drive/MyDrive/Public/model_science/model-best\")\n```", "```py\nimport pandas as pd\npath = \"/content/drive/MyDrive/Public/Database_ABI_updated.csv\"\ndf = pd.read_csv(path)[[\"Title\",\"Authors\",\"Journal\",\"DOI\",\"Abstract\"]]\ndf.head()\n```", "```py\nimport hashlib\nls = list(df.Authors)\nls_authors = []\nfor e in ls:\n  sep = \";\"\nif \";\" in e:\n  sep = \";\"\nelse:\n   sep = \",\"\nls_authors.extend(e.split(sep))\nprint(len(ls_authors))\nls_authors = list(set(ls_authors))\nprint(len(ls_authors))\ndef hash_text(text):\n   return hashlib.sha256(str(text).encode('utf-8')).hexdigest()\nauthors = []\nfor e in ls_authors:\nauthors.append({\"name\":e,\"id\":hash_text(e)})\n```", "```py\njournals = []\nfor j in list(df.Journal.unique()):\n   journals.append({\"name\":j,\"id\":hash_text(j)})\njournals[0]\n```", "```py\nimport copy\nrecords = df.to_dict(\"records\")\ndef extract_authors(text):\n   ls_authors = []\n   sep = \";\"\n   if \";\" in text:\n     sep = \";\"\n   else:\n     sep = \",\"\n   ls_authors.extend(text.split(sep))\n   return ls_authors\narticles = copy.deepcopy(records)\nfor r in articles:\n    r[\"Authors\"] = extract_authors(r['Authors'])\n```", "```py\nfor article in articles:\n  article[\"text\"]= article[\"Title\"]+\" \"+article[\"Abstract\"]\n  article[\"id\"] = hash_text(article[\"text\"])\narticle\n```", "```py\ndef extract_ents(articles,nlp):\n  texts = []\n  for article in articles:\n    texts.append(article[\"text\"])\n  docs = list()\n  for doc in nlp.pipe(texts, disable=[\"tagger\", \"parser\"]):\n    dictionary=dict.fromkeys([\"text\", \"annotations\"])\n    dictionary[\"text\"]= str(doc)\n    dictionary['id'] =  hash_text(dictionary[\"text\"])\n    annotations=[]\n    for e in doc.ents:\n      ent_id = hash_text(e.text)\n      ent = {\"start\":e.start_char,\"end\":e.end_char, \"label\":e.label_.upper(),\"text\":e.text,\"id\":ent_id}\n    annotations.append(ent)\n    dictionary[\"annotations\"] = annotations\n    docs.append(dictionary)\n  return docs\ndocs = extract_ents(articles,nlp)\n```", "```py\nfor e in docs[0]['annotations']:\n  print(e['text'],' --> ',e['label'])\n```", "```py\nfor i in range(len(docs)):\n  articles[i]['annotations'] = copy.deepcopy(docs[i]['annotations'])\n```", "```py\nfrom neo4j import GraphDatabase\nimport pandas as pd\nuri =\"your uri here\"\nuser=\"your username here\"\npassword='your password here'\ndriver = GraphDatabase.driver(uri,auth=(user, password))\ndef neo4j_query(query, params=None):\n  with driver.session() as session:\n    result = session.run(query, params)\n    return pd.DataFrame([r.values() for r in result],    columns=result.keys())\n```", "```py\n#create journals\nneo4j_query(\"\"\"\nUNWIND $data as journal\nMERGE (j:JOURNAL {id:journal.id})\nSET j.name = journal.name\nRETURN count(j)\n\"\"\",{\"data\":journals})\n#create authors\nneo4j_query(\"\"\"\nUNWIND $data as author\nMERGE (a:AUTHOR {id:author.id})\nSET a.name = author.name\nRETURN count(a)\n\"\"\",{\"data\":authors})\n#create articles\nneo4j_query(\"\"\"\nUNWIND $data as row\nMERGE (a:ARTICLE{id:row.id})\nON CREATE SET a.title = row.Title, a.DOI = row.DOI, a.abstract = row.Abstract,\na.authors = row.Authors, a.journal=row.Journal\nRETURN count(*)\n\"\"\", {'data': articles})\n# Match articles with their authors\nneo4j_query(\"\"\"\nMATCH (a:ARTICLE)\nWITH a\nUNWIND a.authors as name\nMATCH (author:AUTHOR) where author.name = name\nMERGE (author)-[:WROTE]->(a)\n\"\"\")\n# Match articles with their journals\nneo4j_query(\"\"\"\nMATCH (a:ARTICLE)\nWITH a\nMATCH (j:JOURNAL) where j.name = a.journal\nMERGE (j)-[:PUBLISHED]->(a)\n\"\"\")\n```", "```py\n# Add entities (Material, Process, Task) and match them with any article that mentions them.\nneo4j_query(\"\"\"\nUNWIND $data as row\nMATCH (a:ARTICLE) where row.id = a.id\nWITH a, row.annotations as entities\nUNWIND entities as entity\nMERGE (e:ENTITY {id:entity.id})\nON CREATE SET\ne.name = entity.text,\ne.label = entity.label\nMERGE (a)-[m:MENTIONS]->(e)\nON CREATE SET m.count = 1\nON MATCH SET m.count = m.count + 1\nWITH e as e\nCALL apoc.create.addLabels( id(e), [ e.label ] )\nYIELD node\nREMOVE node.label\nRETURN node\n\"\"\", {'data': articles})\n```", "```py\nneo4j_query(\"\"\"\nMATCH (e) where e:PROCESS OR e:MATERIAL\nMATCH (e)-[]-(a:ARTICLE)-[]-(j:JOURNAL)\nRETURN e.name as entity, labels(e) as label, count(*) as freq ORDER by freq DESC LIMIT 10\n\"\"\")\n```", "```py\nneo4j_query(\"\"\"\nMATCH (a:AUTHOR)-[]-(ar:ARTICLE)-[]-(j:JOURNAL)\nRETURN a.name as author, count(*) as freq\nORDER BY freq DESC\nLIMIT 10\n\"\"\")\n```", "```py\nneo4j_query(\"\"\"\nMATCH (m:MATERIAL)<-[:MENTIONS]-(a:ARTICLE)-[:MENTIONS]->(p:PROCESS)\nWHERE id(m) < id(p)\nRETURN m.name as MATERIAL, p.name as PROCESS, count(*) as cooccurrence\nORDER BY cooccurrence\nDESC LIMIT 5\n\"\"\")\n```", "```py\nMATCH (a1:AUTHOR ),\n(a2:AUTHOR ),\np = shortestPath((a1)-[*]-(a2))\nwhere a1.id = '6a2552ac2861474da7da6ace1240b92509f56a6ec894d3e166b3475af81e65ae' AND a2.id='3b7d8b78fc7b097e2fd29c2f12df0abc90537971e2ac5c774d677bcdf384a3b7'\nRETURN p\n```"]