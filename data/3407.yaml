- en: A Beginner’s Guide to Neural Networks with Python and SciKit Learn 0.18!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 SciKit Learn 0.18 的神经网络初学者指南！
- en: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html)
- en: '**By Jose Portilla, Udemy Data Science Instructor.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：Jose Portilla，Udemy 数据科学讲师。**'
- en: I'm Jose Portilla and I [teach thousands of students on Udemy](https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/?couponCode=KDNUGGETSPY) about
    Data Science and Programming and I also conduct [in-person programming and data
    science training](www.pieriandata.com). Check out the end of the article for discount
    coupons on my courses!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 Jose Portilla，我在[Udemy 教授数以千计的学生](https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/?couponCode=KDNUGGETSPY)
    数据科学和编程，同时也进行[面对面的编程和数据科学培训](www.pieriandata.com)。请查看文章末尾的优惠券，获取我的课程折扣！
- en: The most popular machine learning library for Python is [SciKit Learn](http://scikit-learn.org/).
    The newest version (0.18) was just released a few days ago and now has built in
    support for Neural Network models. In this article we will learn how Neural Networks
    work and how to implement them with the Python programming language and latest
    version of SciKit-Learn! Basic understanding of Python is necessary to understand
    this article, and it would also be helpful (but not necessary) to have some experience
    with Sci-Kit Learn.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的 Python 机器学习库是[SciKit Learn](http://scikit-learn.org/)。最新版本（0.18）刚刚发布，并且现在支持神经网络模型。在这篇文章中，我们将学习神经网络是如何工作的，并且如何使用
    Python 编程语言和最新版本的 SciKit-Learn 实现它们！理解这篇文章需要对 Python 有基本的了解，同时拥有一些 Sci-Kit Learn
    经验也是有帮助的（但不是必须的）。
- en: '*Also as a quick side note, I wrote a sister article to this one detailing
    the same topic but in R, you can find it [here](/2016/08/begineers-guide-neural-networks-r.html).*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*另外作为一个快速的旁注，我写了一篇与这篇文章主题相同的姐妹文章，但使用 R 语言，你可以在[这里](/2016/08/begineers-guide-neural-networks-r.html)找到它。*'
- en: Neural Networks
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 神经网络
- en: Neural Networks are a machine learning framework that attempts to mimic the
    learning pattern of natural biological neural networks. Biological neural networks
    have interconnected neurons with dendrites that receive inputs, then based on
    these inputs they produce an output signal through an axon to another neuron.
    We will try to mimic this process through the use of Artificial Neural Networks
    (ANN), which we will just refer to as neural networks from now on. The process
    of creating a neural network begins with the most basic form, a single perceptron.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络是一个尝试模仿自然生物神经网络学习模式的机器学习框架。生物神经网络具有相互连接的神经元，神经元有树突接收输入，然后基于这些输入通过轴突向另一个神经元产生输出信号。我们将通过使用人工神经网络（ANN），即我们今后称之为神经网络，来尝试模仿这一过程。创建神经网络的过程从最基本的形式开始，即单个感知器。
- en: The Perceptron
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 感知器
- en: 'Let''s start our discussion by talking about the Perceptron! A perceptron has
    one or more inputs, a bias, an activation function, and a single output. The perceptron
    receives inputs, multiplies them by some weight, and then passes them into an
    activation function to produce an output. There are many possible activation functions
    to choose from, such as the logistic function, a trigonometric function, a step
    function etc. We also make sure to add a bias to the perceptron, this avoids issues
    where all inputs could be equal to zero (meaning no multiplicative weight would
    have an effect). Check out the diagram below for a visualization of a perceptron:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过讨论感知器开始吧！一个感知器有一个或多个输入，一个偏置，一个激活函数和一个单一的输出。感知器接收输入，将其乘以一些权重，然后传递到激活函数以产生输出。可以选择许多不同的激活函数，如逻辑函数、三角函数、阶跃函数等。我们还会确保给感知器添加一个偏置，这样可以避免所有输入都可能为零（即没有乘法权重会产生效果）的问题。请查看下面的图示来了解感知器的可视化：
- en: '![Perceptron](../Images/69a72f3fc8c8769ca45c4f6f4af93290.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![感知器](../Images/69a72f3fc8c8769ca45c4f6f4af93290.png)'
- en: Once we have the output we can compare it to a known label and adjust the weights
    accordingly (the weights usually start off with random initialization values).
    We keep repeating this process until we have reached a maximum number of allowed
    iterations, or an acceptable error rate.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到了输出，我们可以将其与已知标签进行比较，并相应地调整权重（权重通常以随机初始化值开始）。我们不断重复这一过程，直到达到允许的最大迭代次数或可接受的错误率。
- en: 'To create a neural network, we simply begin to add layers of perceptrons together,
    creating a multi-layer perceptron model of a neural network. You''ll have an input
    layer which directly takes in your feature inputs and an output layer which will
    create the resulting outputs. Any layers in between are known as hidden layers
    because they don''t directly "see" the feature inputs or outputs. For a visualization
    of this check out the diagram below (source: Wikipedia).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个神经网络，我们只需开始将感知机层逐层添加在一起，创建一个多层感知机模型。你将有一个输入层，直接接收你的特征输入，以及一个输出层，生成最终的输出。介于两者之间的任何层称为隐藏层，因为它们不能直接“看到”特征输入或输出。有关此的可视化，请查看下方的图示（来源：维基百科）。
- en: '![ANN](../Images/a2b9be4c6961af29d8ecd46eeff7b949.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![ANN](../Images/a2b9be4c6961af29d8ecd46eeff7b949.png)'
- en: Let's move on to actually creating a neural network with Python!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们用 Python 实际创建一个神经网络吧！
- en: SciKit-Learn
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciKit-Learn
- en: In order to follow along with this tutorial, you'll need to have the latest
    version of SciKit Learn installed! It is easily installable either through pip
    or conda, but you can reference the [official installation documentation](http://scikit-learn.org/stable/install.html) for
    complete details on this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本教程，你需要安装最新版本的 SciKit Learn！它可以通过 pip 或 conda 轻松安装，但你可以参考[官方安装文档](http://scikit-learn.org/stable/install.html)以获取详细信息。
- en: Data
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据
- en: We'll use SciKit Learn's built in Breast Cancer Data Set which has several features
    of tumors with a labeled class indicating whether the tumor was Malignant or Benign.
    We will try to create a neural network model that can take in these features and
    attempt to predict malignant or benign labels for tumors it has not seen before.
    Let's go ahead and start by getting the data!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 SciKit Learn 内置的乳腺癌数据集，该数据集包含了几个肿瘤的特征，并带有标签，指示肿瘤是恶性还是良性。我们将尝试创建一个神经网络模型，该模型可以接受这些特征并尝试预测未见过的肿瘤的恶性或良性标签。让我们开始获取数据吧！
- en: 'This object is like a dictionary, it contains a description of the data and
    the features and targets:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象类似于字典，它包含了数据及其特征和目标的描述：
- en: '[PRE0]   dict_keys([''DESCR'', ''feature_names'', ''target_names'', ''target'',
    ''data''])   [PRE1]`  [PRE2]   (569, 30)   [PRE3]`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]   dict_keys([''DESCR'', ''feature_names'', ''target_names'', ''target'',
    ''data''])   [PRE1]`  [PRE2]   (569, 30)   [PRE3]`'
