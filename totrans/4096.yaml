- en: 3 Tools to Track and Visualize the Execution of Your Python Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3个工具来跟踪和可视化你的Python代码执行
- en: 原文：[https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)
- en: Motivation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动机
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Have you ever seen an error output like below:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否见过如下的错误输出：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: and wish the output can be a little bit easier to understand as shown here?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 并希望输出能像这里所示的那样更容易理解？
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/962accaf97a22ca097cf2d14df1e8603.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![3个工具来跟踪和可视化你的Python代码执行](../Images/962accaf97a22ca097cf2d14df1e8603.png)'
- en: Image by Author
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的图片
- en: 'You might also want to visualize which lines of code are being executed and
    how many times they are executed in real-time:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还希望实时可视化哪些代码行正在执行以及它们被执行了多少次：
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/25971c2f33939d70ea82d74d5f274160.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![3个工具来跟踪和可视化你的Python代码执行](../Images/25971c2f33939d70ea82d74d5f274160.png)'
- en: GIF by Author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的 GIF
- en: 'If so, this article will give you the tools to do exactly the above. Those
    3 tools are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这样，这篇文章将提供工具来实现上述目标。这三个工具是：
- en: Loguru — print better exceptions
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Loguru — 打印更好的异常
- en: snoop — print the lines of code being executed in a function
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: snoop — 打印函数中正在执行的代码行
- en: heartrate — visualize the execution of a Python program in real-time
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: heartrate — 实时可视化Python程序的执行
- en: And all it takes to use these tools is one line of code!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些工具只需要一行代码！
- en: Loguru — Print Better Exceptions
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Loguru — 打印更好的异常
- en: '[Loguru](https://github.com/Delgan/loguru) is a library that aims to make logging
    in Python enjoyable. Loguru provides many interesting functionalities, but one
    functionality that I found to be the most helpful is the ability to **catch unexpected
    errors** and **display which value of a variable causes your code to fail**.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[Loguru](https://github.com/Delgan/loguru) 是一个旨在让Python日志记录变得愉快的库。Loguru 提供了许多有趣的功能，但我发现最有用的功能是**捕捉意外错误**并**显示导致代码失败的变量值**。'
- en: To install Loguru, type
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Loguru，输入
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To understand how Loguru can be useful, imagine that you have 2 functions `division` and `divide_numbers`and
    the function `divide_numbers` is executed.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解Loguru的有用性，假设你有2个函数`division`和`divide_numbers`，并且函数`divide_numbers`被执行。
- en: 'Note that `combinations([2,1,0], 2)` returns `[(2, 1), (2, 0), (1, 0)]` . After
    running the code above, we get this error:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`combinations([2,1,0], 2)`返回`[(2, 1), (2, 0), (1, 0)]`。在运行上述代码后，我们遇到了这个错误：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From the output, we know that the line `return num1/num2` is where the error
    occurs, but we don’t know which values of `num1` and `num2` cause the error. Luckily,
    this can be easily tracked by adding Loguru’s `logger.catch` decorator:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出结果中，我们知道`return num1/num2`是错误发生的地方，但我们不知道`num1`和`num2`的哪些值导致了错误。幸运的是，通过添加Loguru的`logger.catch`装饰器，这可以很容易地追踪：
- en: 'Output:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/ce4f69f8803361d1611d2677959da0ca.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![3个工具来跟踪和可视化你的Python代码执行](../Images/ce4f69f8803361d1611d2677959da0ca.png)'
- en: Image by Author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作者的图片
- en: By adding `logger.catch`, the exceptions are much easier to understand! It turns
    out that the error occurs when dividing `2` by `0`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加`logger.catch`，异常更容易理解了！原来错误发生在将`2`除以`0`时。
- en: snoop — Print the Lines of Code being Executed in a Function
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: snoop — 打印正在执行的代码行
- en: What if there is no error in the code, but we want to figure out what is going
    on in the code? That is when snoop comes in handy.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码没有错误，但我们想了解代码中发生了什么，这时snoop就派上用场了。
- en: '[snoop](https://github.com/alexmojaki/snoop) is a Python package that prints
    the lines of code being executed along with the values of each variable by adding
    only one decorator.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[snoop](https://github.com/alexmojaki/snoop)是一个Python包，它通过添加一个装饰器打印被执行的代码行及每个变量的值。'
- en: 'To install snoop, type:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装snoop，请输入：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let’s imagine we have a function called`factorial` that [finds the factorial
    of an integer](https://www.programiz.com/python-programming/recursion).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设有一个叫做`factorial`的函数，它[计算整数的阶乘](https://www.programiz.com/python-programming/recursion)。
- en: 'Output:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To understand why the output of `factorial(5)` is `20` , we can add `snoop` decorator
    to the function `factorial` .
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解`factorial(5)`的输出是`20`，我们可以将`snoop`装饰器添加到`factorial`函数中。
- en: 'Output:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/c35264b221cf1e5eaf66c3a639bf5ca0.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/c35264b221cf1e5eaf66c3a639bf5ca0.png)'
- en: Image by Author
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In the output above, we can view the values of the variables and which lines
    of code are executed. Now we can understand how recursion works much better!
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的输出中，我们可以查看变量的值以及哪些代码行被执行。现在我们可以更好地理解递归是如何工作的！
- en: heartrate — Visualize the Execution of a Python Program in Real-Time
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: heartrate — 实时可视化Python程序的执行
- en: If you want to visualize which lines are executed and how many times they are
    executed, try heartrate.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想可视化哪些行被执行以及执行了多少次，可以尝试使用heartrate。
- en: '[heartrate](https://github.com/alexmojaki/heartrate) is also created by the
    creator of snoop. To install heartrate, type:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[heartrate](https://github.com/alexmojaki/heartrate)也是snoop的创建者开发的。要安装heartrate，请输入：'
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now let’s add `heartrate.trace(browser=True)` to our previous code. This will
    open a browser window displaying the visualization of the file where `trace()` was
    called.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们将`heartrate.trace(browser=True)`添加到之前的代码中。这将打开一个浏览器窗口，显示调用`trace()`的文件的可视化图。
- en: 'A new browser should pop up when you run the code above. If not, go to [http://localhost:9999](http://localhost:9999/file/?filename=heartrate_example.py).
    You should see the output like below:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码时应该会弹出一个新的浏览器窗口。如果没有，请访问[http://localhost:9999](http://localhost:9999/file/?filename=heartrate_example.py)。你应该会看到如下输出：
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/cf6f9946252fc1264116a11f4fb7f19f.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/cf6f9946252fc1264116a11f4fb7f19f.png)'
- en: Image by Author
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Cool! The bars show the lines that have been hit. The longer bars mean more
    hits, lighter colors mean more recent.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！这些条形图展示了被命中的行。条形图越长，命中次数越多，颜色越浅，表示越新近。
- en: 'From the output above, we can see that the program executes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从上面的输出中，我们可以看到程序执行了：
- en: '`if x==1` 5 times'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`if x==1` 5次'
- en: '`return 1` once'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return 1` 一次'
- en: '`return (x * factorial(x-1))` 4 times'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`return (x * factorial(x-1))` 4次'
- en: The output makes sense since the initial value of `x` is 5 and the function
    is called repetitively until `x` equals to `1` .
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是有意义的，因为`x`的初始值为5，并且函数会重复调用，直到`x`等于`1`。
- en: Now let’s see what it is like to visualize the execution of a Python program
    in real-time using heartrate. Let’s add `sleep(0.5)` so that the program runs
    a little bit slower and increase `num` to `20` .
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看使用heartrate实时可视化Python程序的执行是什么样的。让我们添加`sleep(0.5)`，使程序运行得稍慢一点，并将`num`增加到`20`。
- en: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/25971c2f33939d70ea82d74d5f274160.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![3 Tools to Track and Visualize the Execution of Your Python Code](../Images/25971c2f33939d70ea82d74d5f274160.png)'
- en: GIF by Author
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: GIF由作者提供
- en: Awesome! We can see which lines of code are being executed and how many times
    each of them has been executed in real-time.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们可以实时看到哪些代码行正在执行，以及每行代码的执行次数。
- en: Conclusion
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Congratulations! You have just learned 3 tools to track and visualize the execution
    of your Python code. I hope debugging will be less painful for you when using
    these 3 tools. Since these tools only require one line of code, why not give them
    a try to see how helpful they are?
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你刚刚学习了跟踪和可视化Python代码执行的3个工具。我希望使用这3个工具时调试会变得不那么痛苦。既然这些工具只需要一行代码，何不尝试一下，看看它们有多么有用？
- en: Feel free to play and fork the [source code of this article here](https://github.com/khuyentran1401/Data-science/tree/master/python/debug_tools).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 随意玩耍并[在这里叉开这篇文章的源代码](https://github.com/khuyentran1401/Data-science/tree/master/python/debug_tools)。
- en: Star [this repo](https://github.com/khuyentran1401/Data-science).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 给这个 [仓库](https://github.com/khuyentran1401/Data-science) 点个星。
- en: '**[Khuyen Tran](https://www.linkedin.com/in/khuyen-tran-1401/)** is a prolific
    data science writer, and has written [an impressive collection of useful data
    science topics along with code and articles](https://github.com/khuyentran1401/Data-science).
    Khuyne is currently looking for a machine learning engineer role, a data scientist
    role, or a developer advocate role in Bay Area after May 2022, so please reach
    out if you are looking for someone with her set of skills.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Khuyen Tran](https://www.linkedin.com/in/khuyen-tran-1401/)** 是一位多产的数据科学作家，她编写了
    [一系列令人印象深刻的有用数据科学主题及其代码和文章](https://github.com/khuyentran1401/Data-science)。Khuyen
    目前正在寻找一份机器学习工程师、数据科学家或开发者倡导者的职位，地点在 2022 年 5 月后湾区，如果你在寻找拥有她技能的人，请与她联系。'
- en: '[Original](https://towardsdatascience.com/3-tools-to-track-and-visualize-the-execution-of-your-python-code-666a153e435e).
    Reposted with permission.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/3-tools-to-track-and-visualize-the-execution-of-your-python-code-666a153e435e)。经许可转载。'
- en: More On This Topic
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[KDnuggets™ News 22:n01, Jan 5: 3 Tools to Track and Visualize…](https://www.kdnuggets.com/2022/n01.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets™ 新闻 22:n01, 1月5日: 追踪和可视化的 3 个工具…](https://www.kdnuggets.com/2022/n01.html)'
- en: '[The Essential Guide to SQL’s Execution Order](https://www.kdnuggets.com/the-essential-guide-to-sql-execution-order)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 执行顺序的基本指南](https://www.kdnuggets.com/the-essential-guide-to-sql-execution-order)'
- en: '[Fast-track your next move with in-demand data skills](https://www.kdnuggets.com/2023/01/datacamp-fast-track-next-move-indemand-data-skills.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过热门数据技能加速你的下一步行动](https://www.kdnuggets.com/2023/01/datacamp-fast-track-next-move-indemand-data-skills.html)'
- en: '[How to Track the Location of an IP Address using Python](https://www.kdnuggets.com/2023/01/track-location-ip-address-python.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Python 跟踪 IP 地址的位置](https://www.kdnuggets.com/2023/01/track-location-ip-address-python.html)'
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家管理你的可重用 Python 代码](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加快 Python 代码执行的 3 种简单方法](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
