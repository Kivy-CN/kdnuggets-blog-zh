- en: WTF is a Tensor?!?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/05/wtf-tensor.html](https://www.kdnuggets.com/2018/05/wtf-tensor.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: What is a Tensor?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we represent data for machine learning, this generally needs to be done
    numerically. Especially when referring specifically of neural network data representation,
    this is accomplished via a data repository known as the *tensor*.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: So what is the meaning of a tensor? A tensor is a container which can house
    data in *N* dimensions. Often and erroneously used interchangeably with the matrix
    (which is specifically a 2-dimensional tensor), tensors are generalizations of
    matrices to *N*-dimensional space.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematically speaking, tensors are more than simply a data container, however.
    Aside from holding numeric data, tensors also include descriptions of the valid
    linear transformations *between* tensors. Examples of such transformations, or
    relations, include the [cross product](https://en.wikipedia.org/wiki/Cross_product)
    and the [dot product](https://en.wikipedia.org/wiki/Dot_product). From a computer
    science perspective, it can be helpful to think of tensors as being objects in
    an object-oriented sense, as opposed to simply being a data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Tensors in Machine Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the above is all true, there is nuance in what tensors technically are
    and what we refer to as tensors as relates to machine learning practice. If we
    temporarily consider them simply to be *data structures*, below is an overview
    of where tensors fit in with scalars, vectors, and matrices, and some simple code
    demonstrating how Numpy can be used to create each of these data types. We will
    look at some tensor transformations in a subsequent post.
  prefs: []
  type: TYPE_NORMAL
- en: '![Scalar vector matrix tensor](../Images/a7c8c3d96856b768ea32fbe7386578ec.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Image source](https://hadrienj.github.io/posts/Deep-Learning-Book-Series-2.1-Scalars-Vectors-Matrices-and-Tensors/)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalar**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A single number is what constitutes a scalar. A scalar is a 0-dimensional (0D)
    tensor. It, thus, has 0 axes, and is of rank 0 (tensor-speak for 'number of axes').
  prefs: []
  type: TYPE_NORMAL
- en: 'And this is where the nuance comes in: though a single number can be expressed
    as a tensor, this doesn''t mean it should be, or that in generally is. There is
    good reason to be able to treat them as such (which will become evident when we
    discuss tensor operations), but as a storage mechanism, this ability can be confounding.'
  prefs: []
  type: TYPE_NORMAL
- en: Numpy's multidimensional array [`ndarray`](https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.ndarray.html)
    is used below to create the example constructs discussed. Recall that the `ndim`
    attribute of the multidimensional array returns the number of array dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Vector**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A vector is a single dimension (1D) tensor, which you will more commonly hear
    referred to in computer science as an array. An vector is made up of a series
    of numbers, has 1 axis, and is of rank 1.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Matrix**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A matrix is a tensor of rank 2, meaning that it has 2 axes. You are familiar
    with these from all sorts of places, notably what you wrangle your datasets into
    and feed to your Scikit-learn machine learning models :) A matrix is arranged
    as a grid of numbers (think rows and columns), and is technically a 2 dimension
    (2D) tensor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**3D Tensor & Higher Dimensionality**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While, technically, all of the above constructs are valid tensors, colloquially
    when we speak of tensors we are generally speaking of the generalization of the
    concept of a matrix to *N* ≥ 3 dimensions. We would, then, normally refer only
    to tensors of 3 dimensions or more as tensors, in order to avoid confusion (referring
    to the scalar '42' as a tensor would not be beneficial or lend to clarity, generally
    speaking).
  prefs: []
  type: TYPE_NORMAL
- en: The code below creates a 3D tensor. If we were to pack a series of these into
    a higher order tensor container, it would be referred to as a 4D tensor; pack
    those into another order higher, 5D, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: What you do with a tensor is your business, though understanding what one is,
    and its relationship to related numerical container constructs, should now be
    clear.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Matthew Mayo**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[WTF is the Difference Between GBM and XGBoost?](https://www.kdnuggets.com/wtf-is-the-difference-between-gbm-and-xgboost)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[WTF is Regularization and What is it For?](https://www.kdnuggets.com/wtf-is-regularization-and-what-is-it-for)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
