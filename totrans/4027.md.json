["```py\nfrom enum import Enum\n\nclass TaskStatus(Enum):\n    TODO = 0\n    IN_PROGRESS = 1\n    DONE = 2\n    ABANDONED = -1\n```", "```py\nprint(isinstance(TaskStatus.TODO,Enum))\n```", "```py\nOutput >>> True\n```", "```py\nprint(list(TaskStatus))\n```", "```py\nOutput >>>\n\n[<TaskStatus.TODO: 0>, <TaskStatus.IN_PROGRESS: 1>, <TaskStatus.DONE: 2>, <TaskStatus.ABANDONED: -1>]\n```", "```py\nnum_statuses = len(TaskStatus)\nprint(num_statuses)\n```", "```py\nOutput >>> 4\n```", "```py\nfor status in TaskStatus:\n    print(status.name, status.value)\n```", "```py\nOutput >>> \n\nTODO 0\nIN_PROGRESS 1\nDONE 2\nABANDONED -1\n```", "```py\nfrom enum import Enum, auto\n\nclass TaskStatus(Enum):\n    TODO = auto()\n    IN_PROGRESS = auto()\n    DONE = auto()\n    ABANDONED = auto()\n```", "```py\nprint(list(TaskStatus))\n```", "```py\nOutput >>>\n\n[<TaskStatus.TODO: 1>, <TaskStatus.IN_PROGRESS: 2>, <TaskStatus.DONE: 3>, <TaskStatus.ABANDONED: 4>]\n```", "```py\n# task.py\n\nfrom enum import Enum\n\nclass TaskState(Enum):\n    TODO = 0\n    IN_PROGRESS = 1\n    DONE = 2\n    ABANDONED = -1\n```", "```py\nclass Task:\n    def __init__(self, name, state):\n        self.name = name\n        self.state = state\n\n    def update_state(self, new_state):\n        # Define valid state transitions based on the current state\n        valid_transitions = {\n        \tTaskState.TODO: [TaskState.IN_PROGRESS, TaskState.ABANDONED],\n        \tTaskState.IN_PROGRESS: [TaskState.DONE, TaskState.ABANDONED],\n        \tTaskState.DONE: [],\n        \tTaskState.ABANDONED: []\n    \t}\n\n        # Check if the new state is a valid transition from the current state\n        if new_state in valid_transitions[self.state]:\n            self.state = new_state\n        else:\n            raise ValueError(f\"Invalid state transition from {self.state.name} to {new_state.name}\")\n```", "```py\n# Create a new task with the initial state \"To Do\"\ntask = Task(\"Write Report\", TaskState.TODO)\n\n# Print the task details\nprint(f\"Task Name: {task.name}\")\nprint(f\"Current State: {task.state.name}\")\n```", "```py\nOutput >>>\nTask Name: Write Report\nCurrent State: TODO\n```", "```py\n# Update the task state to \"In Progress\"\ntask.update_state(TaskState.IN_PROGRESS)\nprint(f\"Updated State: {task.state.name}\")\n```", "```py\nOutput >>> Updated State: IN_PROGRESS\n```", "```py\n# Update the task state to \"DONE\"\ntask.update_state(TaskState.DONE)\nprint(f\"Updated State: {task.state.name}\")\n```", "```py\nOutput >>> Updated State: DONE\n```", "```py\n# Attempt to update the task state to an invalid state\ntask.update_state(TaskState.TODO)\n```", "```py\nTraceback (most recent call last):\n  File \"/home/balapriya/enums/task.py\", line 46, in <module>\n\ttask.update_state(TaskState.TODO)\n  File \"/home/balapriya/enums/task.py\", line 30, in update_state\n\traise ValueError(f\"Invalid state transition from {self.state.name} to {new_state.name}\")\nValueError: Invalid state transition from DONE to TODO</module>\n```"]