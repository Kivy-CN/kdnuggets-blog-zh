- en: 'Convert Python Dict to JSON: A Tutorial for Beginners'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Convert Python Dict to JSON: A Tutorial for Beginners](../Images/7de3ba9f91c9442043b2613b19bcdda1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: When building applications in Python, JSON is one of the common data formats
    you’ll work with. And if you’ve ever worked with APIs, you're probably already
    familiar with parsing JSON responses from APIs.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: As you know, JSON is a text-based format for data interchange, which stores
    data in key-value pairs and is human readable. And Python dictionaries store data
    in key-value pairs. Which makes it intuitive to load JSON strings into dictionaries
    for processing and also dump data from dictionaries into the JSON strings.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we’ll learn how to convert a Python dictionary to JSON using
    the [built-in json module](https://docs.python.org/3/library/json.html). So let's
    start coding!
  prefs: []
  type: TYPE_NORMAL
- en: Converting a Python Dictionary to a JSON String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To convert a Python dictionary to JSON string, you can use the `dumps()` function
    from the json module. The `dumps()` function takes in a Python object and returns
    the JSON string representation. In practice, however, you’ll need to convert not
    a single dictionary but a collection such as a list of dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: 'So let’s choose such an example. Say we have `books`, a list of dictionaries,
    where each dictionary holds information on a book. So each book record is in a
    Python dictionary with the following keys: title, author, publication_year, and
    genre.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When calling `json.dumps()`, we set the optional `indent` parameter—the indentation
    in the JSON string as it helps improve readability (yes, pretty printing json
    we are ??):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the above code, you should get a similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Converting a Nested Python Dictionary to a JSON String
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, let’s take a list of nested Python dictionaries and obtain the JSON representation
    of it. Let’s extend the `books` dictionary by adding a “reviews” key. Whose value
    is a list of dictionaries with each dictionary containing information on a review,
    namely, “user”, “rating”, and “comment”.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we modify the `books` dictionary like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we use the same indent value of 4, and running the script gives the
    following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sorting Keys When Converting a Python Dictionary to JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dumps` function has several optional parameters. We’ve already used one
    such optional parameter `indent`.  Another useful parameter is `sort_keys`. This
    is especially helpful when you need to sort the keys of the Python dictionary
    when converting it to JSON
  prefs: []
  type: TYPE_NORMAL
- en: Because `sort_keys` is set to `False` by default, so you can set it to `True`
    if you need to sort the keys when converting to JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a simple `person` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen, the keys are sorted in alphabetical order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Handling Non-Serializable Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the examples we’ve coded so far, the keys and values of the dictionary are
    all JSON serializable. The values were all strings or integers to be specific.
    But this may not always be the case. Some common non-serializable data types include
    `datetime`, `Decimal`, and `set`.
  prefs: []
  type: TYPE_NORMAL
- en: No worries, though. You can handle such non-serializable data types by defining
    custom serialization functions for those data types. And then setting the `default`
    parameter of `json.dumps()` to the custom functions you define.
  prefs: []
  type: TYPE_NORMAL
- en: These custom serialization functions should convert the non-serializable data
    into a JSON-serializable format (who would’ve guessed!).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a simple `data` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ve used `json.dumps()` as before, so we’ll run into the following TypeError
    exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The relevant part of the error is: Object of type datetime is not JSON serializable.
    Okay, now let’s do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Define a `serialize_datetime` function that converts `datetime` objects to ISO
    8601 format using the `isoformat()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When calling `json.dumps()`, we set the `default` parameter to the `serialize_datetime`
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So the code looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: And there you have it!
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap: we went over converting a Python dictionary to JSON, and using the
    `indent` and `sort_keys` parameters as needed. We also learned how to handle JSON
    serialization errors.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code examples [on GitHub](https://github.com/balapriyac/python-basics/tree/main/dict-to-json).
    I’ll see you all in another tutorial. Until then, keep coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Convert JSON Data into a DataFrame with Pandas](https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Convert an RGB Image to Grayscale](https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use ChatGPT to Convert Text into a PowerPoint Presentation](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convert Text Documents to a TF-IDF Matrix with tfidfvectorizer](https://www.kdnuggets.com/2022/09/convert-text-documents-tfidf-matrix-tfidfvectorizer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
