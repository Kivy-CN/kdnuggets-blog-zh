- en: Docker Tutorial for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/07/docker-tutorial-data-scientists.html](https://www.kdnuggets.com/2023/07/docker-tutorial-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Docker Tutorial for Data Scientists](../Images/9c5138903fba5d31dcb5396014fb2ce5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Python and the suite of Python data analysis and machine learning libraries
    like pandas and scikit-learn help you develop data science applications with ease.
    However, dependency management in Python is a challenge. When working on a data
    science project, you’ll have to spend substantial time installing the various
    libraries and keeping track of the version of the libraries you’re using amongst
    others.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What if other developers want to run your code and contribute to the project?
    Well, other developers who want to replicate your data science application should
    first *set up* the project environment on their machine—before they can go ahead
    and run the code. Even small differences such as differing library versions can
    introduce breaking changes to the code. **Docker** to the rescue. Docker simplifies
    the development process and facilitates seamless collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: This guide will introduce you to the basics of Docker and teach you how to containerize
    data science applications with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: What Is Docker?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Docker Tutorial for Data Scientists](../Images/577682a67594d7d65ebf5bf6577c66f8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: '[Docker](https://www.docker.com/) is a containerization tool that lets you
    build and share applications as portable artifacts called **images**.'
  prefs: []
  type: TYPE_NORMAL
- en: Aside from source code, your application will have a set of dependencies, required
    configuration, system tools, and more. For example, in a data science project,
    you’ll install all the required libraries in your development environment (preferably
    inside a virtual environment). You’ll also ensure that you’re using an updated
    version of Python that the libraries support.
  prefs: []
  type: TYPE_NORMAL
- en: However, you may still run into problems when trying to run your application
    on another machine. These problems often arise from mismatched configuration and
    library versions—in the development environment—between the two machines.
  prefs: []
  type: TYPE_NORMAL
- en: With Docker, you can package your application—along with the dependencies and
    configuration. So you can define an isolated, reproducible, and consistent environment
    for your applications across the range of host machines.
  prefs: []
  type: TYPE_NORMAL
- en: 'Docker Basics: Images, Containers, and Registries'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s go over a few concepts/terminologies:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Docker image is the portable artifact of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you run an image, you’re essentially getting the application running inside
    the container environment. So a running instance of an image is a container.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Registry
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Docker registry is a system for *storing* and *distributing* Docker images.
    After containerizing an application into a Docker image, you can make it available
    for the developer community by pushing them to an image registry. DockerHub is
    the largest public registry, and all images are pulled from DockerHub by default.
  prefs: []
  type: TYPE_NORMAL
- en: How Does Docker Simplify Development?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because containers provide an isolated environment for your applications, other
    developers now only need to have Docker set up on their machine. And they can
    start containers they can pull the Docker image and start containers using a single
    command—without having to worry about complex installations—on the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: When developing an application, it is also common to build and test multiple
    versions of the same app. If you use Docker, you can have multiple versions of
    the same app running inside different containers—*without* any conflicts—in the
    same environment.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to simplifying development, Docker also also simplifies deployment
    and helps the development and operations teams to collaborate effectively. On
    the server side, the operations team doesn't have to spend time resolving complex
    version and dependency conflicts. They only need to have a docker runtime set
    up
  prefs: []
  type: TYPE_NORMAL
- en: Essential Docker Commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s quickly go over some basic Docker commands most of which we’ll use in
    this tutorial. For a more detailed overview read: [12 Docker Commands Every Data
    Scientist Should Know](/2023/01/12-docker-commands-every-data-scientist-know.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Function** |'
  prefs: []
  type: TYPE_TB
- en: '| `docker ps` | Lists all running containers |'
  prefs: []
  type: TYPE_TB
- en: '| `docker pull image-name` | Pulls image-name from DockerHub by default |'
  prefs: []
  type: TYPE_TB
- en: '| `docker images` | Lists all the available images |'
  prefs: []
  type: TYPE_TB
- en: '| `docker run image-name` | Starts a container from an image |'
  prefs: []
  type: TYPE_TB
- en: '| `docker start container-id` | Restarts a stopped container |'
  prefs: []
  type: TYPE_TB
- en: '| `docker stop container-id` | Stops a running container |'
  prefs: []
  type: TYPE_TB
- en: '| `docker build path` | Builds an image at the path using instructions in the
    Dockerfile |'
  prefs: []
  type: TYPE_TB
- en: '**Note**: Run all the commands by prefixing `sudo` if you haven’t created the
    **docker** group with the user.'
  prefs: []
  type: TYPE_NORMAL
- en: How to Containerize a Data Science App Using Docker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve learned the basics of Docker, and it’s time to apply what we’ve learned.
    In this section, we’ll containerize a simple data science application using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: House Price Prediction Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s take the following linear regression model that predicts the target value:
    the median house price based on the input features. The model is built using the
    [California housing dataset](https://scikit-learn.org/stable/modules/generated/sklearn.datasets.fetch_california_housing.html):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We know that scikit-learn is a required dependency. If you go through the code,
    we set `as_frame` equal to True when loading the dataset . So we also need pandas.
    And the `requirements.txt` file looks like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![Docker Tutorial for Data Scientists](../Images/e5b3ad97278fcb3d702f2fc354717f60.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Create the Dockerfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have the source code file `house_price_prediction.py` and the `requirements.txt`
    file. We should now define *how* to build an image from our application. The **Dockerfile**
    is used to create this definition of building an image from the application source
    code files.
  prefs: []
  type: TYPE_NORMAL
- en: So what is a Dockerfile? It is a text document that contains step-by-step instructions
    to build the Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Docker Tutorial for Data Scientists](../Images/c1d34b207f02fc63c1705edf07d304fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the Dockerfile for our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the contents of the Dockerfile:'
  prefs: []
  type: TYPE_NORMAL
- en: All Dockerfiles start with a `FROM` instruction specifying the base image. Base
    image is that image on which your image is based. Here we use an available image
    for Python 3.9\. The `FROM` instruction tells Docker to build the current image
    from the specified base image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `WORKDIR` command is used to set the working directory for all the following
    commands (*app* in this example).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then copy the `requirements.txt` file to the container’s file system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RUN` instruction executes the specified command—in a shell—inside the container.
    Here we install all the required dependencies using `pip`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then copy the source code file—the Python script `house_price_prediction.py`—to
    the container’s file system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally `CMD` refers to the instruction to be executed—when the container starts.
    Here we need to run the `house_price_prediction.py` script. The Dockerfile should
    contain only one `CMD` instruction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build the Image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’ve defined the Dockerfile, we can build the docker image by running
    the `docker build`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The option **-t** allows us to specify a name and tag for the image in the **name:tag**
    format. The default tag is *latest*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The build process takes a couple of minutes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: After the Docker image has been built, run the `docker images` command. You
    should see the `ml-app` image listed, too.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Docker Tutorial for Data Scientists](../Images/3afe943cb4d073124528e98f182fdfe0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can run the Docker image `ml-app` using the `docker run` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Docker Tutorial for Data Scientists](../Images/21ce8f3f69f0e5256b06f86d62506fd1.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You’ve just dockerized your first data science application.
    By creating a DockerHub account, you can push the image to it (or to a private
    repository within the organization).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hope you found this introductory Docker tutorial helpful. You can find the code
    used in this tutorial in [this GitHub repository](https://github.com/balapriyac/docker-data-science).
    As a next step, set up Docker on your machine and try this example. Or dockerize
    an application of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to install Docker on your machine is using [Docker Desktop](https://www.docker.com/products/docker-desktop/):
    you get both the  Docker CLI client as well as a GUI to manage your containers
    easily. So set up Docker and get coding right away!'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a developer
    and technical writer from India. She likes working at the intersection of math,
    programming, data science, and content creation. Her areas of interest and expertise
    include DevOps, data science, and natural language processing. She enjoys reading,
    writing, coding, and coffee! Currently, she''s working on learning and sharing
    her knowledge with the developer community by authoring tutorials, how-to guides,
    opinion pieces, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[12 Docker Commands Every Data Scientist Should Know](https://www.kdnuggets.com/2023/01/12-docker-commands-every-data-scientist-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Docker for Data Science Cheat Sheet](https://www.kdnuggets.com/2023/02/docker-data-science-cheat-sheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating A Simple Docker Data Science Image](https://www.kdnuggets.com/2023/08/simple-docker-data-science-image.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Use Docker Volumes for Persistent Data Storage](https://www.kdnuggets.com/how-to-use-docker-volumes-for-persistent-data-storage)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[High Availability SQL Server Docker Containers in Kubernetes](https://www.kdnuggets.com/2022/04/high-availability-sql-server-docker-containers-kubernetes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Containerize Python Apps with Docker in 5 Easy Steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
