- en: 'How To Write Efficient Python Code: A Tutorial for Beginners'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/fbb354c3b1dea917f46b644f09631a9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Beginner programmers enjoy coding in Python because of its simplicity and easy-to-read
    syntax. Writing efficient Python code, however, is more involved than you think.
    It requires understanding of some of the features of the language (they’re just
    as simple to pick up, though).
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re coming from another programming language such as C++ or JavaScript,
    this tutorial is for you to learn some tips to write efficient code in Python.
    But if you are a beginner—learning Python as your first (programming) language—then
    this tutorial will help you write Pythonic code from the get go.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll focus on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Pythonic loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: List and dictionary comprehension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Context managers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collection classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's dive in!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Write Pythonic Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding loop constructs is important regardless of the language you’re
    programming in. If you’re coming from languages such as C++ or JavaScript, it's
    helpful to learn how to write Pythonic loops.
  prefs: []
  type: TYPE_NORMAL
- en: Generate a Sequence of Numbers with range
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `range()` function generates a sequence of numbers, often used as an iterator
    in loops.
  prefs: []
  type: TYPE_NORMAL
- en: The `range()` function returns a range object that starts from 0 by default
    and goes up to (but doesn't include) the specified number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: When using the `range()` function, you can customize the starting point, ending
    point, and step size as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Access Both Index and Item with enumerate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `enumerate()` function is useful when you want both the index and the value
    of each element in an iterable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we use the index to tap into the `fruits` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'But with the `enumerate()` function, you can access both the index and the
    element like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Iterate in Parallel Over Multiple Iterables with zip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `zip()` function is used to iterate over multiple iterables in parallel.
    It pairs corresponding elements from different iterables together.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example where you need to loop through both `names`
    and `scores` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This outputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a much more readable loop with the `zip()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The Pythonic version using `zip()` is more elegant and avoids the need for manual
    indexing—making the code cleaner and more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Use List and Dictionary Comprehensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, list comprehensions and dictionary comprehensions are concise one-liners
    to create lists and dictionaries, respectively. They can also include conditional
    statements to filter items based on certain conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the loop version and then move on to comprehension expressions
    for both lists and dictionaries.
  prefs: []
  type: TYPE_NORMAL
- en: List Comprehension in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Say you have a `numbers` list. And you’d like to create a `squared_numbers`
    list. You can use a for loop like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: But list comprehensions provide a cleaner and simpler syntax to do this. They
    allow you to create a new list by applying an expression to each item in an iterable.
  prefs: []
  type: TYPE_NORMAL
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/834dac015d44de3b2c62355bee951c6a.png)'
  prefs: []
  type: TYPE_IMG
- en: List Comprehension Syntax | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a concise alternative using a list comprehension expression:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here, the list comprehension creates a new list containing the squares of each
    number in the `numbers` list.
  prefs: []
  type: TYPE_NORMAL
- en: List Comprehension with Conditional Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also add filtering conditions within the list comprehension expression.
    Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the list comprehension creates a new list containing only the
    odd numbers from the `numbers` list.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary Comprehension in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With a syntax similar to list comprehension, dictionary comprehension allows
    you to create dictionaries from existing iterables.
  prefs: []
  type: TYPE_NORMAL
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/21e98d330d1a850a65d653b892ec8cde.png)'
  prefs: []
  type: TYPE_IMG
- en: Dictionary Comprehension Syntax | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Say you have a `fruits` list. You’d like to create a dictionary with `fruit:len(fruit)`
    key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s how you can do this with a for loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now write the dictionary comprehension equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This dictionary comprehension creates a dictionary where keys are the fruits
    and values are the lengths of the fruit names.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary Comprehension with Conditional Filtering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s modify our dictionary comprehension expression to include a condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here, the dictionary comprehension creates a dictionary with fruit names as
    keys and their lengths as values, but only for fruits with names longer than 5
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Use Context Managers for Effective Resource Handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Context managers in Python help you manage resources efficiently. With context
    managers, you can set up and tear down (clean up) resources easily. The simplest
    and the most common example of context managers is in file handling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the code snippet below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It doesn't close the file descriptor resulting in resource leakage.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll probably come up with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: While this attempts to close the descriptor, it does not account for the errors
    that may arise during the write operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, you may now implement exception handling to try to open a file and write
    something in the absence of any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'But this is verbose. Now look at the following version using the `with` statement
    that supports `open()` function which is a context manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We use the `with` statement to create a context in which the file is opened.
    This ensures that the file is properly closed when the execution exits the `with`
    block—even if an exception is raised during the operation.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Use Generators for Memory-Efficient Processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Generators provide an elegant way to work with large datasets or infinite sequences—improving
    code efficiency and reducing memory consumption.
  prefs: []
  type: TYPE_NORMAL
- en: What Are Generators?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Generators are functions that use the `yield` keyword to return values one at
    a time, preserving their internal state between invocations. Unlike regular functions
    that compute all values at once and return a complete list, generators compute
    and yield values on-the-fly as they are requested, making them suitable for processing
    large sequences.
  prefs: []
  type: TYPE_NORMAL
- en: How Do Generators Work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![How To Write Efficient Python Code: A Tutorial for Beginners](../Images/f84840331325804f35f889783903659b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s learn how generators work:'
  prefs: []
  type: TYPE_NORMAL
- en: A generator function is defined like a regular function, but instead of using
    the `return` keyword, you’ll use `yield` to yield a value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you call a generator function, it returns a generator object. Which you
    can iterate over using a loop or by calling `next()`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the `yield` statement is encountered, the function's state is saved, and
    the yielded value is returned to the caller. The function's execution pauses,
    but its local variables and state are retained.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the generator's `next()` method is called again, execution resumes from
    where it was paused, and the function continues until the next `yield` statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the function exits or raises a `StopIteration`exception, the generator
    is considered exhausted, and further calls to `next()` will raise `StopIteration`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can create generators using either generator functions or generator expressions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example generator function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Generator expressions are similar to list comprehension but they create generators
    instead of lists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Leverage Collection Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll wrap up the tutorial by learning about two useful collection classes:'
  prefs: []
  type: TYPE_NORMAL
- en: NamedTuple
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Counter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More Readable Tuples with NamedTuple
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Python, a [namedtuple](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html%23collections.namedtuple&sa=D&source=editors&ust=1699804716906412&usg=AOvVaw3u8nY9OIf6hzmfClcR1woI) in
    the [collections module](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html&sa=D&source=editors&ust=1699804716906824&usg=AOvVaw0ZnueyvpsC8tcF6R59HImz) is
    a subclass of the built-in tuple class. But it provides named fields. Which makes
    it more readable and self-documenting than regular tuples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example of creating a simple tuple for a point in 3D space and accessing
    the individual elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'And here’s the namedtuple version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: NamedTuples, therefore, let you write cleaner and more maintainable code than
    regular tuples.
  prefs: []
  type: TYPE_NORMAL
- en: Use Counter to Simplify Counting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Counter](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html%23collections.Counter&sa=D&source=editors&ust=1699804716911084&usg=AOvVaw1l3sRFtUOoTYOGxmXgvsV3) is
    a class in the [collections module](https://www.google.com/url?q=https://docs.python.org/3/library/collections.html&sa=D&source=editors&ust=1699804716911412&usg=AOvVaw3kdFmHhIoOUaxhjTo0ufmE) that
    is designed for counting the frequency of elements in an iterable such as a list
    or a string). It returns a Counter object with `{element:count}` key-value pairs.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take the example of counting character frequencies in a long string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the conventional approach to counting character frequencies using loops:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: We manually iterate through the string, update a dictionary to count character
    frequencies, and find the most common character.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s achieve the same task using the Counter  class using the syntax
    `Counter(iterable)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: So `Counter` provides a much simpler way to count character frequencies without
    the need for manual iteration and dictionary management.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I hope you found a few useful tips to add to your Python toolbox. If you are
    looking to learn Python or are preparing for coding interviews, here are a couple
    of resources to help you in your journey:'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 Free Books to Help You Master Python](https://www.google.com/url?q=/5-free-books-to-help-you-master-python&sa=D&source=editors&ust=1699804716920444&usg=AOvVaw3obUh_MCpu386ETLYVGayY)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Must-Know Python Tips for Coding Interviews](https://www.google.com/url?q=/2023/03/7-mustknow-python-tips-coding-interviews.html&sa=D&source=editors&ust=1699804716921117&usg=AOvVaw2_kKapgZNvaTIeg6R3B2pw)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Happy learning!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Pydon''ts - Write elegant Python code: Free Book Review](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mastering Python: 7 Strategies for Writing Clear, Organized, and…](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convert Python Dict to JSON: A Tutorial for Beginners](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
