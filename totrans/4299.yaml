- en: How to build a DAG Factory on Airflow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在Airflow上构建DAG工厂
- en: 原文：[https://www.kdnuggets.com/2021/03/build-dag-factory-airflow.html](https://www.kdnuggets.com/2021/03/build-dag-factory-airflow.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/03/build-dag-factory-airflow.html](https://www.kdnuggets.com/2021/03/build-dag-factory-airflow.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Axel Furlan](https://www.linkedin.com/in/axelfurlan/), Data Engineer**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由[Axel Furlan](https://www.linkedin.com/in/axelfurlan/)，数据工程师**'
- en: '![](../Images/a9f359d219ec76580f36b27ce2a8d4ae.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a9f359d219ec76580f36b27ce2a8d4ae.png)'
- en: Photo by [Chris Ried](https://unsplash.com/@cdr6934?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Chris Ried](https://unsplash.com/@cdr6934?utm_source=medium&utm_medium=referral)提供，来自[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 在IT领域支持你的组织'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Why a DAG Factory?
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么选择DAG工厂？
- en: Let’s look at a pretty simple DAG with 2 tasks…
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个有2个任务的简单DAG……
- en: Isn’t it weird the amount of boilerplate code necessary in order to execute
    2 simple python scripts on Airflow? No matter how many DAGs you write, most certainly
    you will find yourself writing almost all the same variables with the slightest
    of changes in a lot of different DAGs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在Airflow中执行2个简单的Python脚本需要这么多的样板代码，难道不奇怪吗？无论你编写多少DAG，你几乎都会发现自己在不同的DAG中编写几乎相同的变量，只是有细微的变化。
- en: Remember that, in coding, it’s generally better to **write a piece of code that
    you can later call, instead of writing the same piece of code every time you need
    that procedure**. This is called being [**DRY**](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在编码中，通常**编写一段可以后续调用的代码，而不是每次需要该过程时都编写相同的代码**是更好的。这被称为[**DRY**](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself)。
- en: If many of your DAGs share similar values, e.g the *email address*, the *start
    date*, the *schedule interval*, the number of *retries*, and so-on, it’s probably
    better to have a piece of code that fulfills those values for you. This is what
    we try to achieve with a Factory class.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你许多DAG共享相似的值，例如*电子邮件地址*、*开始日期*、*调度间隔*、*重试次数*等，那么拥有一段代码来完成这些值可能更好。这就是我们尝试通过工厂类实现的目标。
- en: Using a DAG Factory on Airflow, we can **reduce the number of lines necessary
    to create a DAG by half**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Airflow上的DAG工厂，我们可以**将创建DAG所需的行数减少一半**。
- en: Let’s look at the following examples
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们看一下以下示例
- en: Here, we want a simple DAG that prints today’s date and then prints “hi”.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要一个简单的DAG，它会先打印今天的日期，然后打印“hi”。
- en: 'This is how it looks on Airflow:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它在Airflow上的样子：
- en: '![DAG](../Images/28ce7700d8cfbc5cdf7afda622a439ab.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![DAG](../Images/28ce7700d8cfbc5cdf7afda622a439ab.png)'
- en: Notice how much we reduced clutter. We haven’t specified what operator we use,
    what are the tasks’ ids, the schedule interval, who created the DAG nor when was
    it created.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们减少了多少冗余。我们没有指定使用了什么操作符、任务的ID、调度间隔、DAG的创建者或创建时间。
- en: We can also see that we specified tasks and dependencies using a dictionary
    and that ultimately translates into the correct tasks dependencies ????
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到，我们使用字典指定了任务和依赖关系，这最终转化为正确的任务依赖关系 ????
- en: 'Let’s look at a slightly more complex example:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个稍微复杂的示例：
- en: In this DAG, I specified 2 arguments that I wanted to override from the defaults.
    Those are the DAG’s owner and its number of retries. I also specified in the `get_airflow_dag()` method
    that I wanted for the schedule to be daily.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个DAG中，我指定了2个我希望覆盖默认值的参数。它们是DAG的所有者及其重试次数。我还在`get_airflow_dag()`方法中指定了希望调度为每日执行。
- en: This DAG has 3 tasks. Both `say_bye()` and `print_date()` depend on `say_hi()`.
    Let’s see how this looks like on Airflow.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![DAG](../Images/9a353147bdd205ed61664413027c2749.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Now, let’s look at how we can build the DAG Factory ????
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: How to code it?
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be honest, it is pretty simple. We first create a class that will have all
    methods that we need to run in order to create a DAG with its tasks.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Below is the full code for the DAG Factory.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: The main method that we’re going to call in order to get a fully usable DAG
    is `get_airflow_dag()`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'This method will receive 2 mandatory parameters: the DAG’s name and the tasks
    that it should run. The rest of the parameters are optional since we can set a
    default in the function’s implementation. When implementing, feel free to make
    any of those optional parameters mandatory, depending on your use case, it may
    be useful to make the *cron* (`schedule_interval`) a mandatory parameter or even
    the DAG’s owner, for instance.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The `default_args` parameter is going to be a dictionary that will hold any
    keys and values that you may want to override. If not specified, the default default_args
    are going to be used.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the defaults are:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The other 3 parameters are the main ones used to describe a DAG. There are more
    options so feel free to specify more.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '`get_airflow_dag()` will run `create_dag()` in order to create the DAG object
    and return it. `add_tasks_to_dag()` is a little bit more complicated since we
    want to make it easy for the user to specify a way to create dependencies on tasks
    without having to write the *Operators*.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we always use the *PythonOperator* for our tasks, so it made sense
    for us to assume that as the norm.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The implementation aims to facilitate the data engineer’s job, so we avoid setting
    extra things like the task’s name, we just assume it’s the same as the function’s
    name — so we use a little bit of *reflection* to figure it out.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The function first creates an auxiliary dictionary to hold a key value pair
    of task name: task object. This is done to only have one set of tasks objects
    and to use that later to set dependencies. Then for each key in the tasks dictionary
    provided originally, the dependencies get set making use of the auxiliary dictionary.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: After this is done, the DAG object is ready to be returned and used by the team
    ????.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Gotcha!
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There’s a little trick in the file in order for Airflow to recognize it’s a
    proper DAG that we’re returning.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'When Airflow starts, the so-called DagBag process will parse all the files
    looking for DAGs. The way the current implementation works is something like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The DagBag spawns different processes that look through the files of the dag
    folder.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function called `process_file` [here](https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/dagbag.html) runs
    for each file to figure out if there’s a DAG there.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code runs `might_contain_dag` which returns a True depending if the file
    contains both “dag” and “airflow” in their code. Implementation [here](https://github.com/apache/airflow/blob/c61f3d45b4a1799e92ead1532d36f232ebc4686e/airflow/utils/file.py#L198).
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码运行 `might_contain_dag`，根据文件中是否同时包含 “dag” 和 “airflow” 来返回 True。实现 [见这里](https://github.com/apache/airflow/blob/c61f3d45b4a1799e92ead1532d36f232ebc4686e/airflow/utils/file.py#L198)。
- en: That’s why the function `get_airflow_dag` is called like that, in order to have
    both keywords in the file that will result in the file being correctly parsed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么 `get_airflow_dag` 函数是这样命名的，以便在文件中包含两个关键字，从而确保文件被正确解析。
- en: This was a hard thing to find, I spent many hours trying to figure out why my
    DAG factory was not working. There’s not much documentation about what to take
    into account in order to create DAGs in a non-traditional way, so this is one
    of the big gotchas that you will have to take into account when doing something
    like this.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一件很难找到的事情，我花了很多小时试图弄清楚为什么我的 DAG 工厂不工作。关于如何以非传统方式创建 DAG 的文档不多，因此这是你在做类似事情时必须考虑的一个大坑。
- en: Conclusion
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: This simple article aimed to explain how to make a Data Engineer’s life easier
    by utilizing the [Factory pattern](https://www.tutorialspoint.com/design_pattern/factory_pattern.htm) on
    Airflow.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇简单的文章旨在解释如何通过在 Airflow 上利用 [工厂模式](https://www.tutorialspoint.com/design_pattern/factory_pattern.htm)
    来简化数据工程师的工作。
- en: Hope you liked it! Feel free to click on my profile to see other useful Airflow
    and Data Engineering articles! ????
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢！可以点击我的个人资料，查看其他有用的 Airflow 和数据工程文章！
- en: '**Bio: [Axel Furlan](https://www.linkedin.com/in/axelfurlan/)** is a Data Engineer
    from Argentina ???????? and a software engineering student. Axel started as a
    Data Scientist and then combined both software eng and data and fell in love with
    how versatile the role can be. He is writing to make other DEs lives easier.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历： [Axel Furlan](https://www.linkedin.com/in/axelfurlan/)** 是来自阿根廷的**数据工程师**和软件工程专业的学生。Axel
    起初是数据科学家，然后将软件工程与数据结合起来，爱上了这个角色的多样性。他写作的目的是为了让其他数据工程师的生活更轻松。'
- en: '[Original](https://towardsdatascience.com/how-to-build-a-dag-factory-on-airflow-9a19ab84084c).
    Reposted with permission.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/how-to-build-a-dag-factory-on-airflow-9a19ab84084c)。经允许转载。'
- en: '**Related:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Data Science Learning Roadmap for 2021](/2021/02/data-science-learning-roadmap-2021.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021 年数据科学学习路线图](/2021/02/data-science-learning-roadmap-2021.html)'
- en: '[9 Skills You Need to Become a Data Engineer](/2021/03/9-skills-become-data-engineer.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为数据工程师所需的 9 项技能](/2021/03/9-skills-become-data-engineer.html)'
- en: '[Faster machine learning on larger graphs with NumPy and Pandas](/2020/05/faster-machine-learning-larger-graphs-numpy-pandas.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 NumPy 和 Pandas 在更大的图上加速机器学习](/2020/05/faster-machine-learning-larger-graphs-numpy-pandas.html)'
- en: More On This Topic
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[5 Airflow Alternatives for Data Orchestration](https://www.kdnuggets.com/5-airflow-alternatives-for-data-orchestration)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个 Airflow 替代方案用于数据编排](https://www.kdnuggets.com/5-airflow-alternatives-for-data-orchestration)'
- en: '[Build a Machine Learning Web App in 5 Minutes](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 分钟内构建机器学习 Web 应用](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
- en: '[How to Build Strong Data Science Portfolio as a Beginner](https://www.kdnuggets.com/2021/10/strong-data-science-portfolio-as-beginner.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何作为初学者建立强大的数据科学作品集](https://www.kdnuggets.com/2021/10/strong-data-science-portfolio-as-beginner.html)'
- en: '[6 Data Science Technologies You Need to Build Your Supply Chain Pipeline](https://www.kdnuggets.com/2022/01/6-data-science-technologies-need-build-supply-chain-pipeline.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建供应链管道所需的 6 种数据科学技术](https://www.kdnuggets.com/2022/01/6-data-science-technologies-need-build-supply-chain-pipeline.html)'
- en: '[Build a Web Scraper with Python in 5 Minutes](https://www.kdnuggets.com/2022/02/build-web-scraper-python-5-minutes.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 分钟内用 Python 构建一个网页爬虫](https://www.kdnuggets.com/2022/02/build-web-scraper-python-5-minutes.html)'
- en: '[Sky''s the Limit: Learn how JetBlue uses Monte Carlo and Snowflake…](https://www.kdnuggets.com/2022/12/monte-carlo-jetblue-snowflake-build-trust-improve-model-accuracy.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[天高地厚：了解 JetBlue 如何使用 Monte Carlo 和 Snowflake…](https://www.kdnuggets.com/2022/12/monte-carlo-jetblue-snowflake-build-trust-improve-model-accuracy.html)'
