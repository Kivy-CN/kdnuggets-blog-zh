["```py\n# let's import the libraries first\nimport sklearn\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.pipeline import Pipeline\nfrom datasets import load_dataset\n\n# Load the data and split\ndata = load_dataset(\"scikit-learn/breast-cancer-wisconsin\")\ndf = data[\"train\"].to_pandas()\ny = df[\"diagnosis\"]\nX = df.drop(\"diagnosis\", axis=1)\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.3, random_state=42\n)\npipe = Pipeline(\n    steps=[\n\t\t\t\t(\"imputer\", SimpleImputer()),\n        (\"scaler\", StandardScaler()),\n        (\"model\", LogisticRegression())\n    ]\n)\npipe.fit(X_train, y_train)\n```", "```py\nimport skops.io as sio\nsio.dump(pipe, \"pipeline.skops\")\n```", "```py\n# passing `True`\nsio.load(\"pipeline.skops\", trusted=True)\n# result\nPipeline(steps=[('imputer', SimpleImputer()), ('scaler', StandardScaler()),\n                ('model', LogisticRegression())])\n```", "```py\nunknown_types = sio.get_untrusted_types(file=\"pipeline.skops\")\nprint(unknown_types)\n# output\n['numpy.int64']\n```", "```py\nloaded_model = sio.load(\"pipeline.skops\", trusted=unknown_types)\n```", "```py\nloaded_model = sio.load(\"pipeline.skops\", trusted=unknown_types[1:])\n# output\nUntrustedTypesFoundException: Untrusted types found in the file: ['numpy.int64'].\n```", "```py\nloaded_model = sio.load(\"pipeline.skops\")\n# output\nUntrustedTypesFoundException: Untrusted types found in the file: ['numpy.int64'].\n```", "```py\nfrom skops import hub_utils\nimport pickle\n# let's save the model\nmodel_path = \"example.pkl\"\nlocal_repo = \"my-awesome-model\"\nwith open(model_path, mode=\"bw\") as f:\n    pickle.dump(pipe, file=f)\n# we will now initialize a local repository\nhub_utils.init(\n    model=model_path,\n    requirements=[f\"scikit-learn={sklearn.__version__}\"],\n    dst=local_repo,\n    task=\"tabular-classification\",\n    data=X_test,\n)\n```", "```py\nfrom skops import card\nfrom pathlib import Path\n\n# create the card\nmodel_card = card.Card(pipe, metadata=card.metadata_from_config(Path(local_repo)))\nlimitations = \"This model is not ready to be used in production.\"\nmodel_description = (\n    \"This is a LogisticRegression model trained on breast cancer dataset.\"\n)\n# add information to the model card\nmodel_card.add(**{\"Model description/Intended uses & limitations\": limitations})\n# set the license in the metadata\nmodel_card.metadata.license = \"mit\"\n```", "```py\nfrom sklearn.metrics import (ConfusionMatrixDisplay, confusion_matrix,\n                            accuracy_score, f1_score)\n# let's make a prediction and evaluate the model\ny_pred = pipe.predict(X_test)\n# we can pass metrics using add_metrics and pass details with add\nmodel_card.add_metrics(accuracy=accuracy_score(y_test, y_pred))\nmodel_card.add_metrics(**{\"f1 score\": f1_score(y_test, y_pred, average=\"micro\")})\n```", "```py\nimport matplotlib.pyplot as plt\n# we will create a confusion matrix\ncm = confusion_matrix(y_test, y_pred, labels=pipe.classes_)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=pipe.classes_)\ndisp.plot()\n\n# save the plot\nplt.savefig(Path(local_repo) / \"confusion_matrix.png\")\n\n# the plot will be written to the model card under the name confusion_matrix\n# we pass the path of the plot itself\nmodel_card.add_plot(**{\n    \"Confusion Matrix\": \"path-to-confusion-matrix.png\"})\n```", "```py\nmodel_card.save(Path(local_repo) / \"README.md\")\n```", "```py\n# set create_remote to True if the repository doesn't exist remotely on the Hugging Face Hub\nhub_utils.push(\n    repo_id=\"scikit-learn/blog-example\",\n    source=local_repo,\n    commit_message=\"pushing files to the repo from the example!\",\n    create_remote=True,\n)\n```", "```py\n# pass repository ID that our model is hosted on the Hub, destination directory can be any path\nhub_utils.download(repo_id=\"scikit-learn/blog-example\", dst=\"downloaded-model\") \n```", "```py\nimport gradio as gr\ngr.Interface.load(\"huggingface/scikit-learn/skops-blog-example\").launch()\n```", "```py\nimport gradio as gr\n\ngr.Interface.load(\"huggingface/scikit-learn/blog-example\", \ntitle=\"Logistic Regression on Breast Cancer\").launch()\n```"]