- en: 'Pydantic Tutorial: Data Validation in Python Made Simple'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple](https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Pydantic Tutorial: Data Validation in Python Made Simple](../Images/472c573b553fe701a75ff772541202af.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Why Use Pydantic?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Python is a dynamically typed language. So you can create variables without
    explicitly specifying the data type. And you can always assign a completely different
    value to the same variable. **While this makes things easier for beginners, it
    also makes it just as easy to create invalid objects in your Python application.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, you can create data classes which allow defining fields with type hints.
    But they do not offer direct support for validating data. Enter [Pydantic](https://docs.pydantic.dev/latest/),
    a popular data validation and serialization library. Pydantic offers out-of-the-box
    support for data validation and serialization. Meaning you can:'
  prefs: []
  type: TYPE_NORMAL
- en: leverage Python’s type hints to validate fields,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: use the custom fields and built-in validators Pydantic offers, and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: define custom validators as needed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this tutorial, we’ll model a simple ‘Employee’ class and validate the values
    of the different fields using the data validation functionality of Pydantic. Let’s
    get started!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Pydantic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have Python 3.8 or a later version, you can install Pydantic using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you need email validation in your application, you can install the optional
    [email-validator](https://github.com/JoshData/python-email-validator) dependency
    when installing Pydantic like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can run the following command to install email-validator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: In our example, we’ll use email validation. So please install the
    dependency if you’d like to code along.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Basic Pydantic Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s create a simple `Employee` class. FIrst, we create a class that
    inherits from the `BaseModel` class. The various fields and the expected types
    are specified as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice that we’ve specified email to be of the `EmailStr` type that Pydantic
    supports instead of a regular Python string. This is because *all valid strings
    may not be valid emails*.
  prefs: []
  type: TYPE_NORMAL
- en: Validating Fields in the Employee Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Because the `Employee` class is simple, let''s add validation for the following
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email`: should be a valid email. Specifying the `EmailStr` accounts for this,
    and we run into errors creating objects with invalid email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`employee_id`: should be a valid employee ID. We’ll implement a custom validation
    for this field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Custom Validation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, let's say the `employee_id` should be a string of length 6
    containing only alphanumeric characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `@validator` decorator with the `employee_id` field at the argument
    and define the `validate_employee_id` method as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now this method checks if the `employee_id` is valid for the Employee objects
    we try to create.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, your script should look like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Loading and Parsing JSON Data Using Pydantic Models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In practice, it''s very common to parse JSON responses from APIs into data
    structures like Python dictionaries. Say we have an ‘employees.json’ file (in
    the current directory) with the following records:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that in the third record corresponding to ‘Alice Brown’, we have
    two fields that are invalid: the `email` and the `employee_id`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pydantic Tutorial: Data Validation in Python Made Simple](../Images/d740eb545c95d03f1e265ba994f3f067.png)'
  prefs: []
  type: TYPE_IMG
- en: Because we’ve specified that email should be `EmailStr`, the email string will
    be automatically validated. We’ve also added the `validate_employee_id` class
    method to check if the objects have a valid employee ID.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s add the code to parse the JSON file and create employee objects
    (we’ll use the built-in [json module](https://docs.python.org/3/library/json.html)
    for this).  We also import the `ValidationError` class from Pydantic. In essence,
    we try to create objects, handle ValidationError exceptions when the data validation
    fails, and also print out the errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run the script, you should see a similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As expected, only the record corresponding to ‘Alice Brown’ is *not* a valid
    employee object. Zooming in to the relevant part of the output, you can see a
    detailed message on why the `email` and `employee_id` fields are invalid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That's all for this tutorial! This is an introductory tutorial to Pydantic.
    I hope you learned the basics of modeling your data, and using both built-in and
    custom validations that Pydantic offers. All the code used in this tutorial is
    [on GitHub](https://github.com/balapriyac/python-basics/tree/main/pydantic-basics).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you may try using Pydantic in your Python projects and also explore serialization 
    capabilities. Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Ollama Tutorial: Running LLMs Locally Made Super Simple](https://www.kdnuggets.com/ollama-tutorial-running-llms-locally-made-super-simple)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Made Simple for Data Analysts with BigQuery ML](https://www.kdnuggets.com/machine-learning-made-simple-for-data-analysts-with-bigquery-ml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Combining Pandas DataFrames Made Simple](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Personalized AI Made Simple: Your No-Code Guide to Adapting GPTs](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MarshMallow: The Sweetest Python Library for Data Serialization and…](https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Validation for PySpark Applications using Pandera](https://www.kdnuggets.com/2023/08/data-validation-pyspark-applications-pandera.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
