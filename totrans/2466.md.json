["```py\nimport numpy as np\nimport matplotlib.pyplot as plt \nimport pandas as pd\n```", "```py\ndata = pd.read_csv('/Users/ML/DecisionTree/Social.csv')\ndata.head()\n```", "```py\nfeature_cols = ['Age','EstimatedSalary' ]X = data.iloc[:,[2,3]].values\ny = data.iloc[:,4].values\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test =  train_test_split(X,y,test_size = 0.25, random_state= 0)\n```", "```py\n#feature scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier()\nclassifier = classifier.fit(X_train,y_train)\n```", "```py\n#prediction\ny_pred = classifier.predict(X_test)#Accuracy\nfrom sklearn import metricsprint('Accuracy Score:', metrics.accuracy_score(y_test,y_pred))\n```", "```py\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)Output:\narray([[64,  4],\n       [ 2, 30]])\n```", "```py\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:,0].min()-1, stop= X_set[:,0].max()+1, step = 0.01),np.arange(start = X_set[:,1].min()-1, stop= X_set[:,1].max()+1, step = 0.01))\nplt.contourf(X1,X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha=0.75, cmap = ListedColormap((\"red\",\"green\")))plt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())for i,j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set==j,0],X_set[y_set==j,1], c = ListedColormap((\"red\",\"green\"))(i),label = j)\nplt.title(\"Decision Tree(Test set)\")\nplt.xlabel(\"Age\")\nplt.ylabel(\"Estimated Salary\")\nplt.legend()\nplt.show()\n```", "```py\nfrom sklearn.tree import export_graphviz\nfrom sklearn.externals.six import StringIO  \nfrom IPython.display import Image  \nimport pydotplusdot_data = StringIO()\nexport_graphviz(classifier, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True,feature_names = feature_cols,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())\n```", "```py\n# Create Decision Tree classifer object\nclassifier = DecisionTreeClassifier(criterion=\"entropy\", max_depth=3)# Train Decision Tree Classifer\nclassifier = classifier.fit(X_train,y_train)#Predict the response for test dataset\ny_pred = classifier.predict(X_test)# Model Accuracy, how often is the classifier correct?\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\n```", "```py\ndot_data = StringIO()\nexport_graphviz(classifier, out_file=dot_data,  \n                filled=True, rounded=True,\n                special_characters=True, feature_names = feature_cols,class_names=['0','1'])\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \nImage(graph.create_png())\n```"]