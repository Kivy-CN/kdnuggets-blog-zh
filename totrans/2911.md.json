["```py\nfrom lightgbm import LGBMClassifier\nX = df[df.columns[1:]]\ny = df[df.columns[0]]\nclf = LGBMClassifier(random_state=0, n_estimators=100)\nfitted_clf = clf.fit(X, y)\n\n```", "```py\nfrom sklearn.model_selection import cross_val_score\nscores_accuracy = cross_val_score(clf, X, y, cv=10)\nscores_balanced = cross_val_score(clf, X, y, cv=10,scoring=\"balanced_accuracy\")\n\n```", "```py\nimport seaborn as sns\ncorr = raw_df.corr()\nsns.heatmap(corr, \n xticklabels=corr.columns,\n yticklabels=corr.columns)\n\n```", "```py\nfrom pdpbox import pdp\npdp_fare = pdp.pdp_isolate(\n    model=clf, dataset=df[df.columns[1:]], model_features=df.columns[1:], feature='Capital_gain'\n)\nfig, axes = pdp.pdp_plot(pdp_fare, 'Capital_gain', plot_pts_dist=True)\n\n```", "```py\npdp_race = pdp.pdp_isolate(\n    model=clf, dataset=df[df.columns[1:]],    \n    model_features=df.columns[1:], \n    feature=[i for i in df.columns if 'O_' in i if i not in \n                          ['O_ Adm-clerical', \n                           'O_ Armed-Forces', \n                           'O_ Armed-Forces',\n                           'O_ Protective-serv', \n                           'O_ Sales', \n                           'O_ Handlers-cleaners']])\nfig, axes = pdp.pdp_plot(pdp_race, 'Occupation', center=True, \n                         plot_lines=True, frac_to_plot=100,  \n                         plot_pts_dist=True)\n\n```", "```py\ninter1 = pdp.pdp_interact(\n    model=clf, dataset=df[df.columns[1:]], \n    model_features=df.columns[1:], features=['Age', 'Hours/Week'])\nfig, axes = pdp.pdp_interact_plot(\n    pdp_interact_out=inter1, feature_names=['Age', 'Hours/Week'], \n    plot_type='grid', x_quantile=True, plot_pdp=True)\n\n```", "```py\nfrom lime.lime_tabular import LimeTabularExplainer\nexplainer = LimeTabularExplainer(X.values, feature_names=X.columns, \n                                 class_names=[\"<=50K\", \">50K\"], \n                                 discretize_continuous=True,\n                                 kernel_width=5)\ni = 304\nexp = explainer.explain_instance(X.values[i], clf.predict_proba, \n                                 num_features=5)\nexp.show_in_notebook(show_table=True, show_all=False)\n\n```", "```py\nimport shap\nexplainer = shap.TreeExplainer(clf)\nshap_values = explainer.shap_values(X)\nshap.initjs()\nshap.force_plot(explainer.expected_value, shap_values[1,:],  \n                X.iloc[1,:])\n\n```", "```py\n# Fit model with target Age\nX = df[df.columns[2:]]\ny = df[df.columns[1]]\nclf = LGBMRegressor(random_state=0, n_estimators=100)\nfitted_clf = clf.fit(X, y)\n# Create Shapley plot for one row\nexplainer = shap.TreeExplainer(clf)\nshap_values = explainer.shap_values(X)\nshap.initjs()\ni=200\nshap.force_plot(explainer.expected_value, shap_values[i,:], X.iloc[i,:])\n\n```", "```py\nshap.summary_plot(shap_values, X, plot_type=\"bar\", show=False)\n\n```", "```py\nsummary_df = pd.DataFrame([X.columns, \n                           abs(shap_values).mean(axis=0)]).T\nsummary_df.columns = ['Feature', 'mean_SHAP']\nmapping = {}\nfor feature in summary_df.Feature.values:\n    mapping[feature] = feature\nfor prefix, alternative in zip(['Workclass', 'Education',  \n                                    'Marital_status', 'O_',  \n                                    'Relationship', 'Gender',   \n                                    'Native_country', 'Capital',  \n                                    'Race'],\n                                   ['Workclass', 'Education', \n                                    'Marital_status', 'Occupation', \n                                    'Relationship', 'Gender', \n                                    'Country', 'Capital', 'Race']):\n        if feature.startswith(prefix):\n            mapping[feature] = alternative\n            break\n\nsummary_df['Feature'] = summary_df.Feature.map(mapping)\nshap_df = (summary_df.groupby('Feature')\n                    .sum()\n                    .sort_values(\"mean_SHAP\", ascending=False)\n                    .reset_index())\n\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set(style=\"whitegrid\")\nf, ax = plt.subplots(figsize=(6, 15))\nsns.barplot(x=\"mean_SHAP\", y=\"Feature\", data=shap_df[:5],\n            label=\"Total\", color=\"b\")\n\n```"]