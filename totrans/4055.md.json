["```py\n>>> nums=[6,9,2,3,7]\n>>> list(reversed(nums))\n[7, 3, 2, 9, 6]\n>>> nums[::-1]\n[7, 3, 2, 9, 6]\n```", "```py\n$ python -m timeit -s 'setup-code' -n 'number' -r 'repeat' 'stmt'\n```", "```py\n$ python -m timeit -s 'nums=[6,9,2,3,7]' 'list(reversed(nums))'\n500000 loops, best of 5: 695 nsec per loop\n```", "```py\n$ python -m timeit -s 'nums=[6,9,2,3,7]' -n 100Bu000 'list(reversed(nums))'\n100000 loops, best of 5: 540 nsec per loop\n```", "```py\n$ python3 -m timeit -s 'nums=[6,9,2,3,7]' -r 3 'list(reversed(nums))'\n500000 loops, best of 3: 663 nsec per loop\n```", "```py\n$ python3 -m timeit -s 'nums=[6,9,2,3,7]' 'nums[::-1]'\n1000000 loops, best of 5: 142 nsec per loop\n```", "```py\nimport timeit\n\nsetup = 'nums=[9,2,3,7,6]'\nnumber = 100000\nstmt1 = 'list(reversed(nums))'\nstmt2 = 'nums[::-1]'\n\nt1 =  timeit.timeit(setup=setup,stmt=stmt1,number=number)\nt2 = timeit.timeit(setup=setup,stmt=stmt2,number=number)\n\nprint(f\"Using reversed() fn.: {t1}\")\nprint(f\"Using list slicing: {t2}\")\n```", "```py\nOutput >>\nUsing reversed() fn.: 0.08982690000000002\nUsing list slicing: 0.015550800000000004\n```", "```py\nimport timeit\n\nsetup = 'nums=[9,2,3,7,6]'\nnumber = 100000\nstmt1 = 'list(reversed(nums))'\nstmt2 = 'nums[::-1]'\n\nt1 =  min(timeit.repeat(setup=setup,stmt=stmt1,number=number))\nt2 = min(timeit.repeat(setup=setup,stmt=stmt2,number=number))\n\nprint(f\"Using reversed() fn.: {t1}\")\nprint(f\"Using list slicing: {t2}\")\n```", "```py\nOutput >>\nUsing reversed() fn.: 0.055375300000000016\nUsing list slicing: 0.015101400000000043\n```", "```py\n# main.py\nimport time\n\ndef func(num):\n    for i in range(num):\n        print(i)\n\ndef another_func(num):\n    time.sleep(num)\n    print(f\"Slept for {num} seconds\")\n\ndef useful_func(nums, target):\n    if target in nums:\n        return nums.index(target)\n\nif __name__ == \"__main__\":\n    func(1000)\n    another_func(20)\n    useful_func([2, 8, 12, 4], 12)\n```", "```py\npython3 -m file-name.py\n```", "```py\npython3 -m main.py\n```", "```py\n Output >>\n  0\n  ...\n  999\n  Slept for 20 seconds\n```", "```py\n# main.py\nimport pstats\nimport time\nimport cProfile\n\ndef func(num):\n    for i in range(num):\n        print(i)\n\ndef another_func(num):\n    time.sleep(num)\n    print(f\"Slept for {num} seconds\")\n\ndef useful_func(nums, target):\n    if target in nums:\n        return nums.index(target)\n\nif __name__ == \"__main__\":\n    with cProfile.Profile() as profile:\n        func(1000)\n        another_func(20)\n        useful_func([2, 8, 12, 4], 12)\n    profile_result = pstats.Stats(profile)\n    profile_result.print_stats()\n```", "```py\n...\nif __name__ == \"__main__\":\n    with cProfile.Profile() as profile:\n        func(1000)\n        another_func(20)\n        useful_func([2, 8, 12, 4], 12)\n    profile_result = pstats.Stats(profile)\n    profile_result.sort_stats(pstats.SortKey.TIME)\n    profile_result.print_stats()\n```"]