["```py\ngit init\ngit commit -m \"first commit\"\ngit branch -M master\ngit remote add origin https://github.com/<username>/<name-repository>.git\ngit push -u origin master</name-repository></username>\n```", "```py\nimport streamlit as st\nimport requests\nimport zipfile \nimport json\nfrom time import sleep\nimport yaml\n\ndef retrieve_url_podcast(parameters,episode_id):\n    url_episodes_endpoint = 'https://listen-api.listennotes.com/api/v2/episodes'\n    headers = {\n    'X-ListenAPI-Key': parameters[\"api_key_listennotes\"],\n    }\n    url = f\"{url_episodes_endpoint}/{episode_id}\"\n    response = requests.request('GET', url, headers=headers)\n    print(response.json())\n    data = response.json()\n    audio_url = data['audio']\n    return audio_url\n```", "```py\napi_key:{your-api-key-assemblyai}\napi_key_listennotes:{your-api-key-listennotes}\n```", "```py\n## send transcription request\ndef send_transc_request(headers, audio_url):\n    transcript_endpoint = \"https://api.assemblyai.com/v2/transcript\"\n    transcript_request = {\n        \"audio_url\": audio_url,\n        \"iab_categories\": True,\n    }\n    transcript_response = requests.post(\n        transcript_endpoint, json=transcript_request, headers=headers\n    )\n    transcript_id = transcript_response.json()[\"id\"]\n    return transcript_id\n\n##retrieve transcription and topics\ndef obtain_polling_response(headers, transcript_id):\n    polling_endpoint = (\n        f\"https://api.assemblyai.com/v2/transcript/{transcript_id}\"\n    )\n    polling_response = requests.get(polling_endpoint, headers=headers)\n    i = 0\n    while polling_response.json()[\"status\"] != \"completed\":\n        sleep(5)\n        polling_response = requests.get(\n            polling_endpoint, headers=headers\n        )\n    return polling_response\n```", "```py\ndef save_files(polling_response):\n    with open(\"transcript.txt\", 'w') as f:\n        f.write(polling_response.json()['text'])\n        f.close()\n    with open('only_topics.json', 'w') as f:\n        topics = polling_response.json()['iab_categories_result']\n        json.dump(topics, f, indent=4) \n\ndef save_zip():\n    list_files = ['transcript.txt','only_topics.json','barplot.html']\n    with zipfile.ZipFile('final.zip', 'w') as zipF:\n      for file in list_files:\n         zipF.write(file, compress_type=zipfile.ZIP_DEFLATED)\n      zipF.close()\n```", "```py\nHi everyone. Welcome to Unconfirmed, the podcast that reveals how the marketing names and crypto are reacting to the week's top headlines and gets the insights you on what they see on the horizon. I'm your host, Laura Shin. Crypto, aka Kelman Law, is a New York law firm run by some of the first lawyers to enter crypto in 2013 with expertise in litigation, dispute resolution and anti money laundering. Email them at info at kelman law. ....\n```", "```py\n{\n    \"status\": \"success\",\n    \"results\": [\n        {\n            \"text\": \"Hi everyone. Welcome to Unconfirmed, the podcast that reveals how the marketing names and crypto are reacting to the week's top headlines and gets the insights you on what they see on the horizon. I'm your host, Laura Shin. Crypto, aka Kelman Law, is a New York law firm run by some of the first lawyers to enter crypto in 2013 with expertise in litigation, dispute resolution and anti money laundering. Email them at info at kelman law.\",\n            \"labels\": [\n                {\n                    \"relevance\": 0.015229620970785618,\n                    \"label\": \"PersonalFinance>PersonalInvesting\"\n                },\n                {\n                    \"relevance\": 0.007826927118003368,\n                    \"label\": \"BusinessAndFinance>Industries>FinancialIndustry\"\n                },\n                {\n                    \"relevance\": 0.007203377783298492,\n                    \"label\": \"BusinessAndFinance>Business>BusinessBanking&Finance>AngelInvestment\"\n                },\n                {\n                    \"relevance\": 0.006419596262276173,\n                    \"label\": \"PersonalFinance>PersonalInvesting>HedgeFunds\"\n                },\n                {\n                    \"relevance\": 0.0057992455549538136,\n                    \"label\": \"Hobbies&Interests>ContentProduction\"\n                },\n                {\n                    \"relevance\": 0.005361487623304129,\n                    \"label\": \"BusinessAndFinance>Economy>Currencies\"\n                },\n                {\n                    \"relevance\": 0.004509655758738518,\n                    \"label\": \"BusinessAndFinance>Industries>LegalServicesIndustry\"\n                },\n                {\n                    \"relevance\": 0.004465851932764053,\n                    \"label\": \"Technology&Computing>Computing>Internet>InternetForBeginners\"\n                },\n                {\n                    \"relevance\": 0.0021628723479807377,\n                    \"label\": \"BusinessAndFinance>Economy>Commodities\"\n                },\n                {\n                    \"relevance\": 0.0017050291644409299,\n                    \"label\": \"PersonalFinance>PersonalInvesting>StocksAndBonds\"\n                }\n            ],\n            \"timestamp\": {\n                \"start\": 4090,\n                \"end\": 26670\n            }\n        },...],\n    \"summary\": {\n        \"Careers>JobSearch\": 1.0,\n        \"BusinessAndFinance>Business>BusinessBanking&Finance>VentureCapital\": 0.9733043313026428,\n        \"BusinessAndFinance>Business>Startups\": 0.9268804788589478,\n        \"BusinessAndFinance>Economy>JobMarket\": 0.7761372327804565,\n        \"BusinessAndFinance>Business>BusinessBanking&Finance>AngelInvestment\": 0.6847236156463623,\n        \"PersonalFinance>PersonalInvesting>StocksAndBonds\": 0.6514145135879517,\n        \"BusinessAndFinance>Business>BusinessBanking&Finance>PrivateEquity\": 0.3943130075931549,\n        \"BusinessAndFinance>Industries>FinancialIndustry\": 0.3717447817325592,\n        \"PersonalFinance>PersonalInvesting\": 0.3703657388687134,\n        \"BusinessAndFinance>Industries\": 0.29375147819519043,\n        \"BusinessAndFinance>Economy>Currencies\": 0.27661699056625366,\n        \"BusinessAndFinance\": 0.1965470314025879,\n        \"Hobbies&Interests>ContentProduction\": 0.1607944369316101,\n        \"BusinessAndFinance>Economy>FinancialRegulation\": 0.1570006012916565,\n        \"Technology&Computing\": 0.13974210619926453,\n        \"Technology&Computing>Computing>ComputerSoftwareAndApplications>SharewareAndFreeware\": 0.13566900789737701,\n        \"BusinessAndFinance>Industries>TechnologyIndustry\": 0.13414880633354187,\n        \"BusinessAndFinance>Industries>InformationServicesIndustry\": 0.12478621304035187,\n        \"BusinessAndFinance>Economy>FinancialReform\": 0.12252965569496155,\n        \"BusinessAndFinance>Business>BusinessBanking&Finance>MergersAndAcquisitions\": 0.11304120719432831\n    }\n}\n```", "```py\nst.markdown(\"# **Web App for Topic Modeling**\")\nbar = st.progress(0)\nst.sidebar.header(\"Input parameter\")\nwith st.sidebar.form(key=\"my_form\"):\n    episode_id = st.text_input(\"Insert Episode ID:\")\n    # 7b23aaaaf1344501bdbe97141d5250ff\n    submit_button = st.form_submit_button(label=\"Submit\")\nif submit_button:\n    f = open(\"secrets.yaml\", \"rb\")\n    parameters = yaml.load(f, Loader=yaml.FullLoader)\n    f.close()\n    # step 1 - Extract episode's url from listen notes\n    audio_url = retrieve_url_podcast(parameters, episode_id)\n    # bar.progress(30)\n    api_key = parameters[\"api_key\"]\n    headers = {\n        \"authorization\": api_key,\n        \"content-type\": \"application/json\",\n    }\n\n    # step 2 - retrieve id of transcription response from AssemblyAI\n    transcript_id = send_transc_request(headers, audio_url)\n    # bar.progress(70)\n\n    # step 3 - topics\n    polling_response = obtain_polling_response(headers, transcript_id)\n    save_files(polling_response)\n    df = create_df_topics()\n\n    import plotly.express as px\n\n    st.subheader(\"Top 5 topics extracted from the podcast's episode\")\n    fig = px.bar(\n        df.iloc[:5, :].sort_values(\n            by=[\"Probability\"], ascending=True\n        ),\n        x=\"Probability\",\n        y=\"Topics\",\n        text=\"Probability\",\n    )\n    fig.update_traces(\n        texttemplate=\"%{text:.2f}\", textposition=\"outside\"\n    )\n    fig.write_html(\"barplot.html\")\n    st.plotly_chart(fig)\n\n    save_zip()\n    with open(\"final.zip\", \"rb\") as zip_download:\n        btn = st.download_button(\n            label=\"Download\",\n            data=zip_download,\n            file_name=\"final.zip\",\n            mime=\"application/zip\",\n        )\n```", "```py\nstreamlit run topic_app.py\n```", "```py\npipreqs\n```", "```py\npandas==1.4.3\nplotly==5.10.0\nPyYAML==6.0\nrequests==2.28.1\nstreamlit==1.12.2\n```", "```py\nweb: sh setup.sh && streamlit run topic_app.py\n```", "```py\nmkdir -p ~/.streamlit/\necho \"\\\n[server]\\n\\\nport = $PORT\\n\\\nenableCORS = false\\n\\\nheadless = true\\n\\\n\\n\\\n\" > ~/.streamlit/config.toml\n```", "```py\nheroku login\n```", "```py\nheroku create topic-web-app-heroku\n```", "```py\nCreating â¬¢ topic-web-app-heroku... done\nhttps://topic-web-app-heroku.herokuapp.com/ | https://git.heroku.com/topic-web-app-heroku.git\n```", "```py\ngit push heroku master\n```", "```py\ngit add -A\ngit commit -m \"App over!\"\ngit push\n```"]