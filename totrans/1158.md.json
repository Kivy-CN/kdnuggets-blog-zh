["```py\nimport glob\nimport pandas as pd\ncsv_files = glob.glob(\"path/to/folder/with/csvs/*.csv\")\ndfs = [pd.read_csv(filename) for filename in csv_files]\n```", "```py\nimport pandas as pd\ndf = pd.read_csv(\"path/to/csv/file.csv\")\ndf[\"Item_Identifier\"].unique()array(['FDA15', 'DRC01', 'FDN15', ..., 'NCF55', 'NCW30', 'NCW05'],\n      dtype=object)\n```", "```py\nfrom IPython.display import display_html\nfrom itertools import chain,cycledef display_side_by_side(*args,titles=cycle([''])):\n    # source: https://stackoverflow.com/questions/38783027/jupyter-notebook-display-two-pandas-tables-side-by-side\n    html_str=''\n    for df,title in zip(args, chain(titles,cycle(['</br>'])) ):\n        html_str+='<th style=\"text-align:center\"><td style=\"vertical-align:top\">'\n        html_str+=\"<br>\"\n        html_str+=f'<h2>{title}</h2>'\n        html_str+=df.to_html().replace('table','table style=\"display:inline\"')\n        html_str+='</td></th>'\n    display_html(html_str,raw=True)\ndf1 = pd.read_csv(\"file.csv\")\ndf2 = pd.read_csv(\"file2\")\ndisplay_side_by_side(df1.head(),df2.head(), titles=['Sales','Advertising'])\n### Output\n```", "```py\ndf = pd.DataFrame(dict(a=[1,2,3,None]))\ndf\ndf.dropna(inplace=True)\ndf\n```", "```py\ndef findNaNCols(df):\n    for col in df:\n        print(f\"Column: {col}\")\n        num_NaNs = df[col].isnull().sum()\n        print(f\"Number of NaNs: {num_NaNs}\")\ndf = pd.DataFrame(dict(a=[1,2,3,None],b=[None,None,5,6]))\nfindNaNCols(df)# OutputColumn: a\nNumber of NaNs: 1\nColumn: b\nNumber of NaNs: 2\n```", "```py\ndf = pd.DataFrame(dict(a=[10,20,30,40,50]))\nsquare = lambda x: x**2\ndf[\"a\"]=df[\"a\"].apply(square)\ndf\n```", "```py\ndf = pd.DataFrame(dict(a=[\"a\",\"b\",\"c\"],b=[1,2,3]))\ndf_dictionary = dict(zip(df[\"a\"],df[\"b\"]))\ndf_dictionary{'a': 1, 'b': 2, 'c': 3}\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\nimport pandas as pd\n\ndf = pd.DataFrame(dict(a=np.random.randint(0,100,100),b=np.arange(0,100,1)))\nplt.figure(figsize=(15,7))\nplt.subplot(1,2,1)\ndf[\"b\"][df[\"a\"]>50].hist(color=\"green\",label=\"bigger than 50\")\nplt.legend()\nplt.subplot(1,2,2)\ndf[\"b\"][df[\"a\"]<50].hist(color=\"orange\",label=\"smaller than 50\")\nplt.legend()\nplt.show()\n```", "```py\nfrom scipy.stats import ttest_rel\n\ndata = np.arange(0,1000,1)\ndata_plus_noise = np.arange(0,1000,1) + np.random.normal(0,1,1000)\ndf = pd.DataFrame(dict(data=data, data_plus_noise=data_plus_noise))\nprint(ttest_rel(df[\"data\"],df[\"data_plus_noise\"]))# Output\nTtest_relResult(statistic=-1.2717454718006775, pvalue=0.20375954602300195)\n```", "```py\ndf1 = pd.DataFrame(dict(a=[1,2,3],b=[10,20,30],col_to_merge=[\"a\",\"b\",\"c\"]))\ndf2 = pd.DataFrame(dict(d=[10,20,100],col_to_merge=[\"a\",\"b\",\"c\"]))\ndf_merged = df1.merge(df2, on='col_to_merge')\ndf_merged\n```", "```py\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscores = scaler.fit_transform(df[\"a\"].values.reshape(-1,1))\n```", "```py\ndf.dropna(subset=[\"col_to_remove_NaNs_from\"],inplace=True)\n```", "```py\ndf = pd.DataFrame(dict(result=[\"Pass\",\"Fail\",\"Pass\",\"Fail\",\"Distinction\",\"Distinction\"]))\npass_index = (df[\"result\"]==\"Pass\") | (df[\"result\"]==\"Distinction\")\ndf_pass = df[pass_index]\ndf_pass\n```", "```py\nimport matplotlib.pyplot as plt\n\ndf = pd.DataFrame(dict(a=[10,20,50,10,10],b=[\"A\",\"B\",\"C\",\"D\",\"E\"]))\nlabels = df[\"b\"]\nsizes = df[\"a\"]\nplt.pie(sizes, labels=labels, autopct='%1.1f%%', shadow=True, startangle=140)\nplt.axis('equal')\nplt.show()\n```", "```py\ndef change_to_numerical(x):\n    try:\n        x = int(x.strip(\"%\")[:2])\n    except:\n        x = int(x.strip(\"%\")[:1])\n    return x\n\ndf = pd.DataFrame(dict(a=[\"A\",\"B\",\"C\"],col_with_percentage=[\"10%\",\"70%\",\"20%\"]))\ndf[\"col_with_percentage\"] = df[\"col_with_percentage\"].apply(change_to_numerical)\ndf\n```"]