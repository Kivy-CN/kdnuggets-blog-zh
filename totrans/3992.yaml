- en: 'Duck, Duck, Code: An Introduction to Python’s Duck Typing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python''s Duck Typing](../Images/b04a81a6c5518af2e2a602d8f549cd17.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: What is Duck Typing?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Duck typing is a concept in programming often related to dynamic languages like
    Python, that emphasizes more on the object’s behavior over its type or class.
    When you use duck typing, you check whether an object has certain methods or attributes,
    rather than checking for the exact class. The name comes from the saying,
  prefs: []
  type: TYPE_NORMAL
- en: If it looks like a duck, swims like a duck, and quacks like a duck, then it
    probably is a duck.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Duck typing brings several advantages to programming in Python. It allows for
    more flexible and reusable code and supports polymorphism, enabling different
    object types to be used interchangeably as long as they provide the required interface.
    This results in simpler and more concise code. However, duck typing also has its
    disadvantages. One major drawback is the potential for runtime errors. Additionally,
    it can make your code challenging to understand.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Dynamic Behavior in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In dynamically typed languages, variable types are not fixed. Instead, they
    are determined at runtime based on the assigned values. In contrast, statically
    typed languages check variable types at compile time. For instance, if you attempt
    to reassign a variable to a value of a different type in static typing, you will
    encounter an error. Dynamic typing provides greater flexibility in how variables
    and objects are used.
  prefs: []
  type: TYPE_NORMAL
- en: Let's consider the `*` Python operator; it behaves differently based on the
    type of the object it is used with. When used between two integers, it performs
    multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When used with a string and an integer, it repeats the string. This demonstrates
    Python’s dynamic typing system and adaptable nature.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How Duck Typing Works in Python?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Duck typing is preferred in dynamic languages because it encourages a more natural
    coding style. Developers can focus on designing interfaces based on what objects
    can do. In duck typing, methods defined inside the class are given more importance
    than the object itself. Let’s clarify this with a basic example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example No: 01'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We have two classes: Duck and Person. Ducks can make a quack sound, while people
    can speak. Each class has a method called sound that prints their respective sounds.
    The function `make_it_sound` takes any object that has a sound method and calls
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see how we can use duck typing to work for this example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, both `Duck` and `Person` classes have a `sound` method. It
    doesn't matter if the object is a Duck or a Person; as long as it has a `sound`
    method, the `make_it_sound` function will work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: However, duck typing can lead to runtime errors. For instance, changing the
    name of the method `sound` in the class Person to speak will raise an `AttributeError`
    on runtime. This is because the function `make_it_sound` expects all the objects
    to have a sound function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Example No: 02'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's explore another program that deals with calculating areas of different
    shapes without worrying about their specific types. Each shape (Rectangle, Circle,
    Triangle) has its own class with a method called area to calculate its area.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, we have a `print_areas` function that takes a list of
    shapes and prints their names along with their calculated areas. Notice that we
    don't need to check the type of each shape explicitly before calculating its area.
    As the method `circumference` is only present for the `Circle` class, it gets
    implemented only once. This example shows how duck typing can be used to write
    flexible code.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Duck typing is a powerful feature of Python that makes your code more dynamic
    and versatile, enabling you to write more generic and adaptable programs. While
    it brings many benefits, such as flexibility and simplicity, it also requires
    careful documentation and testing to avoid potential errors.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Brief Introduction to Papers With Code](https://www.kdnuggets.com/2022/04/brief-introduction-papers-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, April 27: A Brief Introduction to Papers With Code;…](https://www.kdnuggets.com/2022/n17.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
