- en: 'Python Basics: Syntax, Data Types, and Control Structures'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python基础：语法、数据类型和控制结构
- en: 原文：[https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/0df4813999f547470284c7df34c49b9d.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python基础：语法、数据类型和控制结构](../Images/0df4813999f547470284c7df34c49b9d.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Are you a beginner looking to learn programming with Python? If so, this beginner-friendly
    tutorial is for you to familiarize yourself with the basics of the language.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一个初学者，想学习Python编程吗？如果是的话，这个适合初学者的教程将帮助你熟悉语言的基础知识。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT需求'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: This tutorial will introduce you to Python’s—rather English-friendly—syntax.
    You’ll also learn to work with different data types, conditional statements, and
    loops in Python.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将介绍Python的——相当于英语友好的——语法。你还将学习如何处理不同的数据类型、条件语句和循环。
- en: If you already have Python installed in your development and environment, start
    a Python REPL and code along. Or if you want to skip the installation—and start
    coding right away—I recommend heading over to [Google Colab](https://colab.google/)
    and coding along.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经在开发环境中安装了Python，请启动一个Python REPL并开始编写代码。或者如果你想跳过安装——立即开始编码——我建议你前往[Google
    Colab](https://colab.google/)并开始编写代码。
- en: Hello, Python!
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你好，Python！
- en: Before we write the classic “Hello, world!” program in Python, here’s a bit
    about the language. Python is an *interpreted language*. What does this mean?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们用Python编写经典的“Hello, world!”程序之前，先了解一下这门语言。Python是*解释型语言*。这是什么意思？
- en: In any programming language, all source code that you write should be translated
    into machine language. While compiled languages like C and C++ need the entire
    machine code before the program is run, an *interpreter* parses the source code
    and interprets it on the fly.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何编程语言中，你编写的所有源代码都应该被翻译成机器语言。虽然像C和C++这样的编译语言需要在程序运行之前获得整个机器代码，但*解释器*会解析源代码并即时解释。
- en: 'Create a Python script, type in the following code, and run it:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Python脚本，输入以下代码并运行：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To print out *Hello, World!*, we've used the `print()` function, one of the
    many built-in functions in Python.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了打印出*Hello, World!*，我们使用了`print()`函数，它是Python中的众多内置函数之一。
- en: In this super simple example, notice that "Hello, World!" is a sequence—a string
    of characters. Python strings are delimited by a pair of single or double quotes.
    So to print out any message string, you can use `print("<message_string>")`.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个超简单的例子中，请注意“Hello, World!”是一个序列——一串字符。Python字符串由一对单引号或双引号界定。因此，要打印任何消息字符串，你可以使用`print("<message_string>")`。
- en: Reading in User Input
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取用户输入
- en: Now let's go a step further and read in some input from the user using the `input()`
    function. You should always prompt the user to let them know *what* they should
    input.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们更进一步，使用`input()`函数从用户那里读取一些输入。你应该始终提示用户，让他们知道*应该输入什么*。
- en: Here’s a simple program that takes in the user’s name as input and greets them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的程序，它接收用户的名字作为输入，并向他们问好。
- en: 'Comments help improve readability of your code by providing additional context
    to the user. Single-line comments in Python start with a #.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 注释通过提供额外的上下文来帮助提高代码的可读性。Python中的单行注释以#开头。
- en: 'Notice that the string in the code snippet below is preceded by an `f`. Such
    strings are called *formatted strings or f-strings*. To replace the value of a
    variable in an f-string, specify name of the variable within a pair of curly braces
    as shown:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When you run the program, you’ll be prompted for the input first, and then
    the greeting message will be printed out:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Let's move on to learning about variables and data types in Python.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Variables and Data Types in Python
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Variables, in any programming language, are like *containers* that store information.
    In the code that we’ve written so far, we’ve already created a variable `user_name`.
    When the user inputs their name (a string), it is stored in the `user_name` variable.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Basic Data Types in Python
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go through the basic data types in Python: `int`, `float`, `str`, and
    `bool`, using simple examples that build on each other:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '**Integer** (`int`): Integers are whole numbers without a decimal point. You
    can create integers and assign them to variables like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'These are assignment statements that assign a value to the variable. In languages
    like C, you’ll have to specify the data type when declaring variables, but Python
    is a **dynamically typed language**. It infers data type from the value. So you
    can re-assign a variable to hold a value of a totally different data type:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'You can check the data type of any variable in Python using the `type` function:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`number` is an integer:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We’re now assigning a string value to `number`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Floating-Point Number** (`float`): Floating-point numbers represent real
    numbers with a decimal point. You can create variables of `float` data type like
    so:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You can perform various operations—addition, subtraction, floor division, exponentiation,
    and more—on numeric data types. Here are some examples:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**String** (`str`): Strings are sequences of characters, enclosed in single
    or double quotes.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Boolean** (`bool`): Booleans represent either `True` or `False`, indicating
    the truth value of a condition.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Python's flexibility in working with different data types allows you to store,
    perform a wide range of operations, and manipulate data effectively.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an example putting together all the data types we’ve learned so far:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'And here’s the output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Beyond the Basic Data Types
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Say you're managing information about students in a classroom. It’d help to
    create a collection—to store info for all students—than to repeatedly define variables
    for each student.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Lists
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lists are ordered collections of items—enclosed within a pair of square brackets.
    The items in a list can all be of the same or different data types. Lists are
    *mutable*, meaning you can change their content after creation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, `student_names` contains the names of students:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Tuples
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tuples are ordered collections similar to lists, but they are *immutable*, meaning
    you cannot change their content after creation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Say you want `student_scores` to be an immutable collection that contains the
    exam scores of students.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Dictionaries
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dictionaries are collections of key-value pairs. The keys of a dictionary should
    be unique, and they map to corresponding values. They are mutable and allow you
    to associate information with specific keys.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 字典是键值对的集合。字典的键应该是唯一的，它们映射到对应的值。字典是可变的，允许你将信息与特定键关联起来。
- en: 'Here, `student_info` contains information about each student—names and scores—as
    key-value pairs:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`student_info`包含关于每个学生的姓名和分数作为键值对：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: But wait, there’s a more elegant way to create dictionaries in Python.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但请稍等，还有一种更优雅的方法来创建Python中的字典。
- en: 'We’re about to learn a new concept: **dictionary comprehension**. Don''t worry
    if it''s not clear right away. You can always learn more and work on it later.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将学习一个新概念：**字典推导式**。如果一开始不清楚没关系。你可以随时学习更多并在以后继续研究。
- en: 'But comprehensions are pretty intuitive to understand. If you want the `student_info`
    dictionary to have student names as keys and their corresponding exam scores as
    values, you can create the dictionary like this:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 但推导式相当直观。如果你想让`student_info`字典的键是学生姓名，对应的值是他们的考试分数，你可以这样创建字典：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice how we’ve used the [`zip()` function](https://www.freecodecamp.org/news/the-zip-function-in-python-explained-with-examples/)
    to iterate through both `student_names` list and `student_scores` tuple simultaneously.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意我们如何使用[`zip()`函数](https://www.freecodecamp.org/news/the-zip-function-in-python-explained-with-examples/)同时遍历`student_names`列表和`student_scores`元组。
- en: '[PRE19]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this example, the dictionary comprehension directly pairs each student name
    from the `student_names` list with the corresponding exam score from the `student_scores`
    tuple to create the `student_info` dictionary with names as keys and scores as
    values.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，字典推导式直接将`student_names`列表中的每个学生姓名与`student_scores`元组中的对应考试分数配对，创建了`student_info`字典，其中姓名作为键，分数作为值。
- en: 'Now that you’re familiar with the primitive data types and some sequences/iterables,
    let''s move on to the next part of the discussion: **control structures**.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经熟悉了基本数据类型以及一些序列/可迭代对象，让我们进入讨论的下一部分：**控制结构**。
- en: Control Structures in Python
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的控制结构
- en: When you run a Python script, the code execution occurs—sequentially—in the
    same order in which they occur in the script.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行一个Python脚本时，代码按脚本中的顺序依次执行。
- en: Sometimes, you’d need to implement logic to control the flow of execution based
    on certain conditions or loop through an iterable to process the items in it.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你需要实现逻辑来根据特定条件控制执行流程，或遍历可迭代对象以处理其中的项目。
- en: We’ll learn how the if-else statements facilitate branching and conditional
    execution. We’ll also learn how to iterate over sequences using loops and the
    loop control statements break and continue.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将学习如何通过if-else语句实现分支和条件执行。我们还将学习如何使用循环遍历序列，以及循环控制语句break和continue。
- en: If Statement
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: If语句
- en: When you need to execute a block of code only if a particular condition is true,
    you can use the `if` statement. If the condition evaluates to false, the block
    of code is not executed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要仅在特定条件为真时执行一块代码时，你可以使用`if`语句。如果条件为假，这块代码将不会被执行。
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/49d1d18138bc08a5de338721c2ee7a51.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![Python基础：语法、数据类型和控制结构](../Images/49d1d18138bc08a5de338721c2ee7a51.png)'
- en: Image by Author
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Consider this example:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这个例子：
- en: '[PRE20]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this example, the code inside the `if` block will be executed only if the
    `score` is greater than or equal to 60\. Since the `score` is 75, the message
    "Congratulations! You passed the exam." will be printed.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，只有当`score`大于或等于60时，`if`块中的代码才会被执行。由于`score`是75，因此将打印出“恭喜！你通过了考试。”
- en: '[PRE21]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If-else Conditional Statements
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: If-else 条件语句
- en: The `if-else` statement allows you to execute one block of code if the condition
    is true, and a different block if the condition is false.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`if-else`语句允许你在条件为真时执行一块代码，而在条件为假时执行另一块代码。'
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/6bc9a8173d76b970abae3f5f9781951b.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![Python基础：语法、数据类型和控制结构](../Images/6bc9a8173d76b970abae3f5f9781951b.png)'
- en: Image by Author
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'Let’s build on the test scores example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们基于测试分数的例子进行扩展：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Here, if the `score` is less than 60, the code inside the `else` block will
    be executed:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果`score`小于60，`else`块中的代码将被执行：
- en: '[PRE23]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If-elif-else Ladder
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: If-elif-else 结构
- en: The `if-elif-else` statement is used when you have multiple conditions to check.
    It allows you to test multiple conditions and execute the corresponding block
    of code for the first true condition encountered.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`if-elif-else`语句用于在有多个条件需要检查时。它允许你测试多个条件，并为第一个满足条件的情况执行相应的代码块。'
- en: If the conditions in the `if` and all `elif` statements evaluate to false, the
    `else` block is executed.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`if`和所有`elif`语句中的条件都为假，则执行`else`块。
- en: '![Python Basics: Syntax, Data Types, and Control Structures](../Images/6ce428852aa600f21cd1d49810f58463.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![Python基础：语法、数据类型和控制结构](../Images/6ce428852aa600f21cd1d49810f58463.png)'
- en: Image by Author
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: '[PRE24]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In this example, the program checks the `score` against multiple conditions.
    The code inside the first true condition''s block will be executed. Since the
    `score` is 82, we get:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，程序检查`score`是否符合多个条件。第一个满足条件的代码块将被执行。由于`score`是82，我们得到：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Nested If Statements
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套`if`语句
- en: Nested `if` statements are used when you need to check multiple conditions within
    another condition.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套的`if`语句用于在另一个条件内检查多个条件。
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this example, there is a nested `if` statement. First, the program checks
    if `name` is "Alice". If true, it checks the `score`. Since the `score` is 78,
    the inner `else` block is executed, printing "Good effort, Alice! Keep it up."
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，有一个嵌套的`if`语句。首先，程序检查`name`是否是"Alice"。如果为真，它会检查`score`。由于`score`是78，因此执行内部的`else`块，打印"Good
    effort, Alice! Keep it up."。
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Python offers several loop constructs to iterate over collections or perform
    repetitive tasks.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了几种循环结构来迭代集合或执行重复任务。
- en: For Loop
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`for`循环'
- en: 'In Python, the `for` loop provides a concise syntax to let us iterate over
    existing iterables. We can iterate over `student_names` list like so:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，`for`循环提供了一种简洁的语法，让我们能够迭代现有的可迭代对象。我们可以这样迭代`student_names`列表：
- en: '[PRE28]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The above code outputs:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出为：
- en: '[PRE29]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: While Loop
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`while`循环'
- en: If you want to execute a piece of code as long as a condition is true, you can
    use a `while` loop.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在某个条件为真时执行一段代码，你可以使用`while`循环。
- en: 'Let’s use the same `student_names` list:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用相同的`student_names`列表：
- en: '[PRE30]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this example, we have a list `student_names` containing the names of students.
    We use a `while` loop to iterate through the list by keeping track of the `index`
    variable.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们有一个包含学生姓名的`student_names`列表。我们使用`while`循环通过跟踪`index`变量来迭代列表。
- en: The loop continues as long as the `index` is less than the length of the list.
    Inside the loop, we print each student's name and increment the `index` to move
    to the next student. Notice the use of `len()` function to get the length of the
    list.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 循环会继续进行，只要`index`小于列表的长度。在循环内部，我们打印每个学生的姓名，并增加`index`以移动到下一个学生。注意使用`len()`函数来获取列表的长度。
- en: 'This achieves the same result as using a `for` loop to iterate over the list:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这与使用`for`循环迭代列表得到的结果相同：
- en: '[PRE31]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s use a `while` loop that pops elements from a list until the list is
    empty:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个`while`循环，从列表中弹出元素直到列表为空：
- en: '[PRE32]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The list method `pop` removes and returns the last element present in the list.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 列表方法`pop`移除并返回列表中的最后一个元素。
- en: In this example, the `while` loop continues as long as there are elements in
    the `student_names` list. Inside the loop, the `pop()` method is used to remove
    and return the last element from the list, and the name of the current student
    is printed.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`while`循环只要`student_names`列表中还有元素就会继续进行。在循环内部，使用`pop()`方法来移除并返回列表中的最后一个元素，并打印当前学生的姓名。
- en: The loop continues until all students have been processed, and a final message
    is printed outside the loop.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 循环会继续，直到所有学生都被处理完毕，并在循环外打印最终消息。
- en: '[PRE33]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `for` loop is generally more concise and easier to read for iterating over
    existing iterables like lists. But the `while` loop can offer more control when
    the looping condition is more complex.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`for`循环通常在迭代现有可迭代对象如列表时更为简洁且易读。但`while`循环在循环条件更复杂时可以提供更多控制。'
- en: Loop Control Statements
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环控制语句
- en: '`break` exits the loop prematurely, and `continue` skips the rest of the current
    iteration and moves to the next one.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`break`会提前退出循环，而`continue`会跳过当前迭代的其余部分并进入下一次迭代。'
- en: 'Here’s an example:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例：
- en: '[PRE34]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The control breaks out of the loop when the `name` is Charlie, giving us the
    output:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当`name`为Charlie时，控制从循环中跳出，输出结果为：
- en: '[PRE35]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Emulating Do-While Loop Behavior
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟Do-While循环行为
- en: 'In Python, there is no built-in `do-while` loop like in some other programming
    languages. However, you can achieve the same behavior using a `while` loop with
    a `break` statement. Here''s how you can emulate a `do-while` loop in Python:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，没有像某些其他编程语言中的 `do-while` 循环。然而，你可以使用带有 `break` 语句的 `while` 循环来实现相同的行为。下面是如何在
    Python 中模拟 `do-while` 循环：
- en: '[PRE36]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In this example, the loop will continue running indefinitely until the user
    enters 'exit'. The loop runs at least once because the condition is initially
    set to `True`, and then the user's input is checked inside the loop. If the user
    enters 'exit', the `break` statement is executed, which exits the loop.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，循环将无限运行，直到用户输入“exit”。循环至少运行一次，因为条件最初设置为 `True`，然后在循环内部检查用户的输入。如果用户输入“exit”，则会执行
    `break` 语句，从而退出循环。
- en: 'Here’s a sample output:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例输出：
- en: '[PRE37]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note that this approach is similar to a `do-while` loop in other languages,
    where the loop body is guaranteed to execute at least once before the condition
    is checked.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，这种方法类似于其他语言中的`do-while`循环，其中循环体在检查条件之前至少会执行一次。
- en: Wrap-up and Next Steps
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结与下一步
- en: I hope you were able to code along to this tutorial without any difficulty.
    Now that you’ve gained an understanding of the basics of Python, it's time to
    start coding some super simple projects applying all the concepts that you’ve
    learned.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你能顺利跟随这个教程进行编码。现在你已经掌握了 Python 的基础知识，是时候开始编码一些超级简单的项目，以应用你所学到的所有概念了。
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a developer
    and technical writer from India. She likes working at the intersection of math,
    programming, data science, and content creation. Her areas of interest and expertise
    include DevOps, data science, and natural language processing. She enjoys reading,
    writing, coding, and coffee! Currently, she''s working on learning and sharing
    her knowledge with the developer community by authoring tutorials, how-to guides,
    opinion pieces, and more.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** 是来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇点上工作。她的兴趣和专长领域包括
    DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编码和咖啡！目前，她正在通过撰写教程、使用指南、观点文章等，与开发者社区分享她的知识。'
- en: More On This Topic
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Python Control Flow Cheat Sheet](https://www.kdnuggets.com/2022/11/python-control-flow-cheatsheet.html)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 控制流备忘单](https://www.kdnuggets.com/2022/11/python-control-flow-cheatsheet.html)'
- en: '[Python String Matching Without Complex RegEx Syntax](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[没有复杂 RegEx 语法的 Python 字符串匹配](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)'
- en: '[Optimizing Data Storage: Exploring Data Types and Normalization in SQL](https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化数据存储：探索 SQL 中的数据类型和规范化](https://www.kdnuggets.com/optimizing-data-storage-exploring-data-types-and-normalization-in-sql)'
- en: '[Types of Visualization Frameworks](https://www.kdnuggets.com/types-of-visualization-frameworks)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[可视化框架类型](https://www.kdnuggets.com/types-of-visualization-frameworks)'
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 步骤入门 Python 数据结构](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
- en: '[Back to Basics Week 1: Python Programming & Data Science Foundations](https://www.kdnuggets.com/back-to-basics-week-1-python-programming-data-science-foundations)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[基础知识回顾 第1周：Python 编程与数据科学基础](https://www.kdnuggets.com/back-to-basics-week-1-python-programming-data-science-foundations)'
