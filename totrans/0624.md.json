["```py\ny_true = [\"positive\", \"negative\", \"negative\", \"positive\", \"positive\", \"positive\", \"negative\", \"positive\", \"negative\", \"positive\"]\n```", "```py\npred_scores = [0.7, 0.3, 0.5, 0.6, 0.55, 0.9, 0.4, 0.2, 0.4, 0.3]\n```", "```py\nimport numpy\n\npred_scores = [0.7, 0.3, 0.5, 0.6, 0.55, 0.9, 0.4, 0.2, 0.4, 0.3]\ny_true = [\"positive\", \"negative\", \"negative\", \"positive\", \"positive\", \"positive\", \"negative\", \"positive\", \"negative\", \"positive\"]\n\nthreshold = 0.5\ny_pred = [\"positive\" if score >= threshold else \"negative\" for score in pred_scores]\nprint(y_pred)\n```", "```py\n['positive', 'negative', 'positive', 'positive', 'positive', 'positive', 'negative', 'negative', 'negative', 'negative']\n```", "```py\nr = numpy.flip(sklearn.metrics.confusion_matrix(y_true, y_pred))\nprint(r)\n\nprecision = sklearn.metrics.precision_score(y_true=y_true, y_pred=y_pred, pos_label=\"positive\")\nprint(precision)\n\nrecall = sklearn.metrics.recall_score(y_true=y_true, y_pred=y_pred, pos_label=\"positive\")\nprint(recall)\n```", "```py\n# Confusion Matrix (From Left to Right & Top to Bottom: True Positive, False Negative, False Positive, True Negative)\n[[4 2]\n [1 3]]\n\n# Precision = 4/(4+1)\n0.8\n\n# Recall = 4/(4+2)\n0.6666666666666666\n```", "```py\nimport numpy\n\ny_true = [\"positive\", \"negative\", \"negative\", \"positive\", \"positive\", \"positive\", \"negative\", \"positive\", \"negative\", \"positive\", \"positive\", \"positive\", \"positive\", \"negative\", \"negative\", \"negative\"]\n\npred_scores = [0.7, 0.3, 0.5, 0.6, 0.55, 0.9, 0.4, 0.2, 0.4, 0.3, 0.7, 0.5, 0.8, 0.2, 0.3, 0.35]\n\nthresholds = numpy.arange(start=0.2, stop=0.7, step=0.05)\n```", "```py\n[0.2, \n 0.25, \n 0.3, \n 0.35, \n 0.4, \n 0.45, \n 0.5, \n 0.55, \n 0.6, \n 0.65]\n```", "```py\nimport sklearn.metrics\n\ndef precision_recall_curve(y_true, pred_scores, thresholds):\n    precisions = []\n    recalls = []\n\n    for threshold in thresholds:\n        y_pred = [\"positive\" if score >= threshold else \"negative\" for score in pred_scores]\n\n        precision = sklearn.metrics.precision_score(y_true=y_true, y_pred=y_pred, pos_label=\"positive\")\n        recall = sklearn.metrics.recall_score(y_true=y_true, y_pred=y_pred, pos_label=\"positive\")\n\n        precisions.append(precision)\n        recalls.append(recall)\n\n    return precisions, recalls\n```", "```py\nprecisions, recalls = precision_recall_curve(y_true=y_true, \n                                             pred_scores=pred_scores,\n                                             thresholds=thresholds)\n```", "```py\n[0.5625,\n 0.5714285714285714,\n 0.5714285714285714,\n 0.6363636363636364,\n 0.7,\n 0.875,\n 0.875,\n 1.0,\n 1.0,\n 1.0]\n```", "```py\n[1.0,\n 0.8888888888888888,\n 0.8888888888888888,\n 0.7777777777777778,\n 0.7777777777777778,\n 0.7777777777777778,\n 0.7777777777777778,\n 0.6666666666666666,\n 0.5555555555555556,\n 0.4444444444444444]\n```", "```py\nmatplotlib.pyplot.plot(recalls, precisions, linewidth=4, color=\"red\")\nmatplotlib.pyplot.xlabel(\"Recall\", fontsize=12, fontweight='bold')\nmatplotlib.pyplot.ylabel(\"Precision\", fontsize=12, fontweight='bold')\nmatplotlib.pyplot.title(\"Precision-Recall Curve\", fontsize=15, fontweight=\"bold\")\nmatplotlib.pyplot.show()\n```", "```py\nf1 = 2 * ((numpy.array(precisions) * numpy.array(recalls)) / (numpy.array(precisions) + numpy.array(recalls)))\n```", "```py\n[0.72, \n 0.69565217, \n 0.69565217, \n 0.7,\n 0.73684211,\n 0.82352941, \n 0.82352941, \n 0.8, \n 0.71428571, 0\n .61538462]\n```", "```py\nmatplotlib.pyplot.plot(recalls, precisions, linewidth=4, color=\"red\", zorder=0)\nmatplotlib.pyplot.scatter(recalls[5], precisions[5], zorder=1, linewidth=6)\n\nmatplotlib.pyplot.xlabel(\"Recall\", fontsize=12, fontweight='bold')\nmatplotlib.pyplot.ylabel(\"Precision\", fontsize=12, fontweight='bold')\nmatplotlib.pyplot.title(\"Precision-Recall Curve\", fontsize=15, fontweight=\"bold\")\nmatplotlib.pyplot.show()\n```", "```py\nAP = numpy.sum((recalls[:-1] - recalls[1:]) * precisions[:-1])\n```", "```py\nimport numpy\nimport sklearn.metrics\n\ndef precision_recall_curve(y_true, pred_scores, thresholds):\n    precisions = []\n    recalls = []\n\n    for threshold in thresholds:\n        y_pred = [\"positive\" if score >= threshold else \"negative\" for score in pred_scores]\n\n        precision = sklearn.metrics.precision_score(y_true=y_true, y_pred=y_pred, pos_label=\"positive\")\n        recall = sklearn.metrics.recall_score(y_true=y_true, y_pred=y_pred, pos_label=\"positive\")\n\n        precisions.append(precision)\n        recalls.append(recall)\n\n    return precisions, recalls\n\ny_true = [\"positive\", \"negative\", \"negative\", \"positive\", \"positive\", \"positive\", \"negative\", \"positive\", \"negative\", \"positive\", \"positive\", \"positive\", \"positive\", \"negative\", \"negative\", \"negative\"]\npred_scores = [0.7, 0.3, 0.5, 0.6, 0.55, 0.9, 0.4, 0.2, 0.4, 0.3, 0.7, 0.5, 0.8, 0.2, 0.3, 0.35]\nthresholds=numpy.arange(start=0.2, stop=0.7, step=0.05)\n\nprecisions, recalls = precision_recall_curve(y_true=y_true, \n                                             pred_scores=pred_scores, \n                                             thresholds=thresholds)\n\nprecisions.append(1)\nrecalls.append(0)\n\nprecisions = numpy.array(precisions)\nrecalls = numpy.array(recalls)\n\nAP = numpy.sum((recalls[:-1] - recalls[1:]) * precisions[:-1])\nprint(AP)\n```", "```py\ndef intersection_over_union(gt_box, pred_box):\n    inter_box_top_left = [max(gt_box[0], pred_box[0]), max(gt_box[1], pred_box[1])]\n    inter_box_bottom_right = [min(gt_box[0]+gt_box[2], pred_box[0]+pred_box[2]), min(gt_box[1]+gt_box[3], pred_box[1]+pred_box[3])]\n\n    inter_box_w = inter_box_bottom_right[0] - inter_box_top_left[0]\n    inter_box_h = inter_box_bottom_right[1] - inter_box_top_left[1]\n\n    intersection = inter_box_w * inter_box_h\n    union = gt_box[2] * gt_box[3] + pred_box[2] * pred_box[3] - intersection\n\n    iou = intersection / union\n\n    return iou, intersection, union\n```", "```py\ngt_box = [320, 220, 680, 900]\npred_box = [500, 320, 550, 700]\n```", "```py\nimport imageio\nimport matplotlib.pyplot\nimport matplotlib.patches\n\ndef intersection_over_union(gt_box, pred_box):\n    inter_box_top_left = [max(gt_box[0], pred_box[0]), max(gt_box[1], pred_box[1])]\n    inter_box_bottom_right = [min(gt_box[0]+gt_box[2], pred_box[0]+pred_box[2]), min(gt_box[1]+gt_box[3], pred_box[1]+pred_box[3])]\n\n    inter_box_w = inter_box_bottom_right[0] - inter_box_top_left[0]\n    inter_box_h = inter_box_bottom_right[1] - inter_box_top_left[1]\n\n    intersection = inter_box_w * inter_box_h\n    union = gt_box[2] * gt_box[3] + pred_box[2] * pred_box[3] - intersection\n\n    iou = intersection / union\n\n    return iou, intersection, union\n\nim = imageio.imread(\"cat.jpg\")\n\ngt_box = [320, 220, 680, 900]\npred_box = [500, 320, 550, 700]\n\nfig, ax = matplotlib.pyplot.subplots(1)\nax.imshow(im)\n\ngt_rect = matplotlib.patches.Rectangle((gt_box[0], gt_box[1]),\n                                       gt_box[2],\n                                       gt_box[3],\n                                       linewidth=5,\n                                       edgecolor='r',\n                                       facecolor='none')\n\npred_rect = matplotlib.patches.Rectangle((pred_box[0], pred_box[1]),\n                                         pred_box[2],\n                                         pred_box[3],\n                                         linewidth=5,\n                                         edgecolor=(1, 1, 0),\n                                         facecolor='none')\nax.add_patch(gt_rect)\nax.add_patch(pred_rect)\n\nax.axes.get_xaxis().set_ticks([])\nax.axes.get_yaxis().set_ticks([])\n```", "```py\niou, intersect, union = intersection_over_union(gt_box, pred_box)\nprint(iou, intersect, union)\n```", "```py\n0.5409582689335394 350000 647000\n```", "```py\nimport matplotlib.pyplot\nimport matplotlib.patches\nimport imageio\n\ndef intersection_over_union(gt_box, pred_box):\n    inter_box_top_left = [max(gt_box[0], pred_box[0]), max(gt_box[1], pred_box[1])]\n    inter_box_bottom_right = [min(gt_box[0]+gt_box[2], pred_box[0]+pred_box[2]), min(gt_box[1]+gt_box[3], pred_box[1]+pred_box[3])]\n\n    inter_box_w = inter_box_bottom_right[0] - inter_box_top_left[0]\n    inter_box_h = inter_box_bottom_right[1] - inter_box_top_left[1]\n\n    intersection = inter_box_w * inter_box_h\n    union = gt_box[2] * gt_box[3] + pred_box[2] * pred_box[3] - intersection\n\n    iou = intersection / union\n\n    return iou, intersection, union, \n\nim = imageio.imread(\"pets.jpg\")\n\ngt_box = [10, 130, 370, 350]\npred_box = [30, 100, 370, 350]\n\niou, intersect, union = intersection_over_union(gt_box, pred_box)\nprint(iou, intersect, union)\n\nfig, ax = matplotlib.pyplot.subplots(1)\nax.imshow(im)\n\ngt_rect = matplotlib.patches.Rectangle((gt_box[0], gt_box[1]),\n                                       gt_box[2],\n                                       gt_box[3],\n                                       linewidth=5,\n                                       edgecolor='r',\n                                       facecolor='none')\n\npred_rect = matplotlib.patches.Rectangle((pred_box[0], pred_box[1]),\n                                         pred_box[2],\n                                         pred_box[3],\n                                         linewidth=5,\n                                         edgecolor=(1, 1, 0),\n                                         facecolor='none')\nax.add_patch(gt_rect)\nax.add_patch(pred_rect)\n\ngt_box = [645, 130, 310, 320]\npred_box = [500, 60, 310, 320]\n\niou, intersect, union = intersection_over_union(gt_box, pred_box)\nprint(iou, intersect, union)\n\ngt_rect = matplotlib.patches.Rectangle((gt_box[0], gt_box[1]),\n                                       gt_box[2],\n                                       gt_box[3],\n                                       linewidth=5,\n                                       edgecolor='r',\n                                       facecolor='none')\n\npred_rect = matplotlib.patches.Rectangle((pred_box[0], pred_box[1]),\n                                         pred_box[2],\n                                         pred_box[3],\n                                         linewidth=5,\n                                         edgecolor=(1, 1, 0),\n                                         facecolor='none')\nax.add_patch(gt_rect)\nax.add_patch(pred_rect)\n\nax.axes.get_xaxis().set_ticks([])\nax.axes.get_yaxis().set_ticks([])\n```", "```py\ny_true = [\"positive\", \"negative\", \"positive\", \"negative\", \"positive\", \"positive\", \"positive\", \"negative\", \"positive\", \"negative\"]\n\npred_scores = [0.7, 0.3, 0.5, 0.6, 0.55, 0.9, 0.75, 0.2, 0.8, 0.3]\n```", "```py\ny_true = [\"negative\", \"positive\", \"positive\", \"negative\", \"negative\", \"positive\", \"positive\", \"positive\", \"negative\", \"positive\"]\n\npred_scores = [0.32, 0.9, 0.5, 0.1, 0.25, 0.9, 0.55, 0.3, 0.35, 0.85]\n```", "```py\nthresholds = numpy.arange(start=0.2, stop=0.9, step=0.05)\n```", "```py\nprecisions, recalls = precision_recall_curve(y_true=y_true, \n                                             pred_scores=pred_scores, \n                                             thresholds=thresholds)\n\nmatplotlib.pyplot.plot(recalls, precisions, linewidth=4, color=\"red\", zorder=0)\n\nmatplotlib.pyplot.xlabel(\"Recall\", fontsize=12, fontweight='bold')\nmatplotlib.pyplot.ylabel(\"Precision\", fontsize=12, fontweight='bold')\nmatplotlib.pyplot.title(\"Precision-Recall Curve\", fontsize=15, fontweight=\"bold\")\nmatplotlib.pyplot.show()\n\nprecisions.append(1)\nrecalls.append(0)\n\nprecisions = numpy.array(precisions)\nrecalls = numpy.array(recalls)\n\nAP = numpy.sum((recalls[:-1] - recalls[1:]) * precisions[:-1])\nprint(AP)\n```", "```py\nmAP = (0.949 + 0.958)/2 = 0.9535\n```"]