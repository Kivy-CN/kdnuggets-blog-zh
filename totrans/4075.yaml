- en: A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html](https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/c0ade46d6957288b62f2fea3cb11f979.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Web scraping is a technique that is used for extracting HTML content from different
    websites. These web scrapers are mainly computer bots that can directly access
    the World Wide Web using HTTP Protocol and use this information in various applications.
    The data is obtained in an unstructured format, which is then converted into a
    structured manner after performing multiple pre-processing steps. Users can save
    this data in a spreadsheet or export it through an API.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Web scraping can also be done manually for small web pages by simply copying
    and pasting the data from the web page. But this copy and pasting would not work
    if we require data at a large scale and from multiple web pages. Here automated
    web scrapers come into the picture. They use intelligent algorithms which can
    extract large amounts of data from numerous web pages in less time.
  prefs: []
  type: TYPE_NORMAL
- en: Uses of Web Scraping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web scraping is a powerful tool for businesses to gather and analyze information
    online. It has multiple applications across various industries. Below are some
    of these that you can check out.
  prefs: []
  type: TYPE_NORMAL
- en: '**Marketing:** Web scraping is used by many companies to collect information
    about their products or services from various social media websites to get a general
    public sentiment. Also, they extract email ids from various websites and then
    send bulk promotional emails to the owners of these email ids.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Content Creation:** Web scraping can gather information from multiple sources
    like news articles, research reports, and blog posts. It helps the creator to
    create quality and trending content.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Price Comparison:** Web scraping can be used to extract the prices of a particular
    product across multiple e-commerce websites to give a fair price comparison for
    the user. It also helps companies fix the optimal pricing of their products to
    compete with their competitors.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Job Postings:** Web Scraping can also be used to collect data on various
    job openings across multiple job portals so that this information can help many
    job seekers and recruiters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we will create a simple web scraper using Python and Beautiful Soup library.
    We will parse an HTML page and extract useful information from it. This tutorial
    requires a basic understanding of Python as its only prerequisite.
  prefs: []
  type: TYPE_NORMAL
- en: Code Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our implementation consists of four steps which are given below.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/ee055c249c099366e51422f4d41c386d.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 1 Tutorial Steps | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Setting Up the Environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a separate directory for the project and install the below libraries
    using the command prompt. Creating a virtual environment first is preferable,
    but you can also install them globally.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `requests` module extracts the HTML content from a URL. It extracts all
    the data in a raw format as a string that needs further processing.
  prefs: []
  type: TYPE_NORMAL
- en: The `bs4`  is the Beautiful Soup module. It will parse the raw HTML content
    obtained from the `request` module in a well-structured format.
  prefs: []
  type: TYPE_NORMAL
- en: Get the HTML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a Python file inside that directory and paste the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/cb9efafed6f9268457f47bd5cee9177b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This script will extract all the raw HTML content from the URL `[/](/)`. This
    raw data contains all the texts, paragraphs, anchor tags, divs, etc. Our next
    task is to parse that data and extract all the texts and tags separately.
  prefs: []
  type: TYPE_NORMAL
- en: Parse the HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here the role of Beautiful Soup comes in. It is used to parse and prettify the
    raw data obtained above. It creates a tree-like structure of our DOM, which can
    be traversed along the tree branches and able to find the target tags and objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/dc89bb4185c31370c2270965337289cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the above output that Beautiful Soup has presented the content
    in a more structured format with proper indentations. The function `BeautifulSoup()`
    takes two arguments, one is the input HTML, and another is a parser. We are currently
    using `html.parser`, but there are other parsers as well, like `lxml` or `html5lib`.
    All of them have their own pros and cons. Some have better leniency, while some
    are very fast. The selection of the parser entirely depends on the user's choice.
    Below is the list of parsers with their pros and cons that you can checkout.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/fd6d610d81a75334c4cc84b2825f7ee7.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 2 List of Parsers | Image by [crummy](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)
  prefs: []
  type: TYPE_NORMAL
- en: HTML Tree Traversal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will understand the tree structure of HTML and then extract
    the title, different tags, classes, lists, etc., from the parsed content using
    Beautiful Soup.
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/a9ebc016312d61b4c2ba615c2294282b.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig. 3 HTML Tree Structure | Image by [w3schools](https://www.w3schools.com/js/js_htmldom_navigation.asp)
  prefs: []
  type: TYPE_NORMAL
- en: The HTML tree represents a hierarchical information view. The root node is the
    <html> tag, which can have parents, children and siblings. The head tag and body
    tag follow the HTML tag. The head tag contains the metadata and the title, and
    the body tag contains the divs, paragraphs, heading, etc.
  prefs: []
  type: TYPE_NORMAL
- en: When an HTML document is passed through Beautiful Soup, it converts the complex
    HTML content into four major Python objects; these are
  prefs: []
  type: TYPE_NORMAL
- en: '**BeautifulSoup:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It represents the parsed document as a whole. It is the complete document that
    we are trying to scrap.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see the entire html content is an object of type Beautiful Soup.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tag:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The tag object corresponds to a particular tag in the HTML document. It can
    extract a tag from the whole document and return the first found tag if multiple
    tags with the same name are present in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**NavigableString:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It contains the text inside a tag in string format. Beautiful Soup uses the
    NavigableString object to store the texts of a tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Comments:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It reads the HTML comments that are present inside a tag. It is a special type
    of NavigableString.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, we will extract the title, different tags, classes, lists, etc., from the
    parsed HTML content.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Getting the title of the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Or, you can also print the title string only.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Find and Find All
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These functions are useful when you want to search for a specific tag in the
    HTML content. Find() will give only the first occurrence of that tag, while find_all()
    will give all the occurrences of that tag. You can also iterate through them.
    Let’s see this with an example below.
  prefs: []
  type: TYPE_NORMAL
- en: 'find():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'find_all():'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This will return the complete tag, but if you want to print only the string,
    you can write like that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We can also get the class, id, type, href, etc., of a particular tag. For example,
    getting the links of all the anchor tags present.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/8e7d3d3443adeb546e4e2dc0fd35d2e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: You can also get the class of every div.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 3\. Finding Elements using Id and Class Name
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can also find specific elements by giving a particular id or a class name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This will print the text of all the `li`s which belong to the `li-has-thumb`
    class. But writing the tag name is not always necessary if you are unsure about
    it. You can also write like this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: It will fetch all the tags with this class name.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will discuss some more interesting methods of Beautiful Soup
  prefs: []
  type: TYPE_NORMAL
- en: Some more Methods of Beautiful Soup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss some more functions of Beautiful Soup that
    will make your work easier and faster.
  prefs: []
  type: TYPE_NORMAL
- en: '`select()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The select() function allows us to find specific tags based on CSS selectors.
    CSS selectors are patterns that select certain HTML tags based on their class,
    id, attribute, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the example to find the image with the `alt` attribute starting with`KDnuggets`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](../Images/ed2800650550ce550abb7270aa9a2243.png)'
  prefs: []
  type: TYPE_IMG
- en: '`parent`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This attribute returns the parent of a given tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`contents`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This attribute returns the contents of the selected tag.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`attrs`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This attribute is used to get the attributes of a tag in a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`has_attr()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method checks if a tag has a particular attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: It will return True if the attribute is present, otherwise returns False.
  prefs: []
  type: TYPE_NORMAL
- en: '`find_next()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method finds the next tag after a given tag. It takes the name of the input
    tag that it needs to find next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '`find_previous()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This method is used to find the previous tag after a given tag. It takes the
    name of the input tag that it needs to find next.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: It will print the first anchor tag again.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other methods that you can give a try. These methods are available
    in this documentation of the [Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have discussed web scraping, its uses, and its Python and Beautiful Soup
    implementation. It is all for today. Feel free to comment below if you have any
    comments or suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Web Scraping Using Python](https://www.kdnuggets.com/2022/10/beginner-guide-web-scraping-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mastering Web Scraping with BeautifulSoup](https://www.kdnuggets.com/mastering-web-scraping-with-beautifulsoup)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating Beautiful Histograms with Seaborn](https://www.kdnuggets.com/2023/01/creating-beautiful-histograms-seaborn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Step by Step Guide to Reading and Understanding SQL Queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
