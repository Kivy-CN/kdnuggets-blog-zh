["```py\nnew_list = []\nfor item in iterable:\n    new_list.append(output)\n```", "```py\nnew_list = [output for item in iterable]\n```", "```py\nnew_list = []\nfor item in iterable:\n    if condition:\n        new_list.append(output)\n```", "```py\nnew_list = [output for item in iterable if condition]\n```", "```py\nimport math\n\nupper_limit = 50  \n\nprimes = [x for x in range(2, upper_limit + 1) if  x > 1 and all(x % i != 0 for i in range(2, int(math.sqrt(x)) + 1))]\n\nprint(primes)\n```", "```py\nOutput >>>\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n```", "```py\nimport math\n\nupper_limit = 50  \n\nprimes = [\n\tx\n\tfor x in range(2, upper_limit + 1)\n\tif x > 1 and all(x % i != 0 for i in range(2, int(math.sqrt(x)) + 1))\n]\n\nprint(primes)\n```", "```py\nimport math\n\ndef is_prime(num):\n    return num > 1 and all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1))\n\nupper_limit = 50  \n\nprimes = [\n\tx\n\tfor x in range(2, upper_limit + 1)\n\tif is_prime(x)\n]\n\nprint(primes)\n```", "```py\nOutput >>>\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n```", "```py\nimport math\nfrom pprint import pprint\n\nmy_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\ndef is_prime(num):\n    return num > 1 and all(num % i != 0 for i in range(2, int(math.sqrt(num)) + 1))\n\n# Flatten the matrix and filter to contain only prime numbers\nprimes = [\n\tx\n\tfor row in my_matrix\n\tfor x in row\n\tif is_prime(x)\n]\n\n# Find indices of prime numbers in the original matrix\nprime_indices = [\n\t(i, j)\n\tfor i, row in enumerate(my_matrix)\n\tfor j, x in enumerate(row)\n\tif x in primes\n]\n\n# Calculate the sum of prime numbers\nsum_of_primes = sum(primes)\n\n# Sort the prime numbers in descending order\nsorted_primes = sorted(primes, reverse=True)\n\n# Create a dictionary with the results\nresult = {\n\t\"primes\": primes,\n\t\"prime_indices\": prime_indices,\n\t\"sum_of_primes\": sum_of_primes,\n\t\"sorted_primes\": sorted_primes\n}\n\npprint(result)\n```", "```py\nOutput >>>\n\n{'primes': [2, 3, 5, 7],\n 'prime_indices': [(0, 1), (0, 2), (1, 1), (2, 0)],\n 'sum_of_primes': 17,\n 'sorted_primes': [7, 5, 3, 2]}\n```", "```py\nimport math\nfrom pprint import pprint\n\ndef is_prime(num):\n    return num > 1 and all(n % i != 0 for i in range(2, int(math.sqrt(num)) + 1))\n\ndef flatten_matrix(matrix):\n    flattened_matrix = []\n    for row in matrix:\n        for x in row:\n            if is_prime(x):\n                flattened_matrix.append(x)\n    return flattened_matrix\n\ndef find_prime_indices(matrix, flattened_matrix):\n    prime_indices = []\n    for i, row in enumerate(matrix):\n        for j, x in enumerate(row):\n            if x in flattened_matrix:\n                prime_indices.append((i, j))\n    return prime_indices\n\ndef calculate_sum_of_primes(flattened_matrix):\n    return sum(flattened_matrix)\n\ndef sort_primes(flattened_matrix):\n    return sorted(flattened_matrix, reverse=True)\n\nmy_matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nprimes = flatten_matrix(my_matrix)\nprime_indices = find_prime_indices(my_matrix, primes)\nsum_of_primes = calculate_sum_of_primes(primes)\nsorted_primes = sort_primes(primes)\n\nresult = {\n\t\"primes\": primes,\n\t\"prime_indices\": prime_indices,\n\t\"sum_of_primes\": sum_of_primes,\n\t\"sorted_primes\": sorted_primes\n}\n\npprint(result)\n```", "```py\nOutput >>>\n\n{'primes': [2, 3, 5, 7],\n 'prime_indices': [(0, 1), (0, 2), (1, 1), (2, 0)],\n 'sum_of_primes': 17,\n 'sorted_primes': [7, 5, 3, 2]}\n```", "```py\nimport json\n\njson_string = '{\"key1\": {\"inner_key1\": [1, 2, 3], \"inner_key2\": {\"sub_key\": \"value\"}}, \"key2\": {\"inner_key3\": \"text\"}}'\n\n# Parse the JSON string into a Python dictionary\ndata = json.loads(json_string)\n\nflattened_data = [\n\tvalue\n\tif isinstance(value, (int, str))\n\telse value\n\tif isinstance(value, list)\n\telse list(value)\n\tfor inner_dict in data.values()\n\tfor key, inner_item in inner_dict.items()\n\tfor value in (\n    \t[inner_item]\n    \tif not isinstance(inner_item, dict) and key.startswith(\"inner_key\")\n    \telse [inner_item[\"sub_key\"]]\n    \tif isinstance(inner_item, dict) and \"sub_key\" in inner_item\n    \telse [inner_item]\n    \tif isinstance(inner_item, (int, str))\n    \telse list(inner_item.values())\n\t)\n]\n\nprint(f\"Values: {flattened_data}\")\n```", "```py\nOutput >>>\nValues: [[1, 2, 3], 'value', 'text']\n```", "```py\nflattened_data = []\n\nfor inner_dict in data.values():\n    for key, inner_item in inner_dict.items():\n        if not isinstance(inner_item, dict) and key.startswith(\"inner_key\"):\n            flattened_data.append(inner_item)\n        elif isinstance(inner_item, dict) and \"sub_key\" in inner_item:\n            flattened_data.append(inner_item[\"sub_key\"])\n        elif isinstance(inner_item, (int, str)):\n            flattened_data.append(inner_item)\n        elif isinstance(inner_item, list):\n            flattened_data.extend(inner_item)\n        elif isinstance(inner_item, dict):\n            flattened_data.extend(inner_item.values())\n\nprint(f\"Values: {flattened_data}\")\n```", "```py\nOutput >>>\nValues: [[1, 2, 3], 'value', 'text']\n```"]