- en: Implementing Your Own k-Nearest Neighbor Algorithm Using Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 实现你自己的 k-最近邻算法
- en: 原文：[https://www.kdnuggets.com/2016/01/implementing-your-own-knn-using-python.html/3](https://www.kdnuggets.com/2016/01/implementing-your-own-knn-using-python.html/3)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/01/implementing-your-own-knn-using-python.html/3](https://www.kdnuggets.com/2016/01/implementing-your-own-knn-using-python.html/3)
- en: '**Getting the neighbours to vote on the class of the test points**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取邻居对测试点类别的投票**'
- en: Finally, using the nearest neighbours you just identified, you can get a prediction
    for the class of the test instance by majority voting - simply tally up which
    class comes up the most often among the nearest neighbours.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用你刚刚识别的最近邻居，你可以通过多数投票来获得测试实例的类别预测——只需统计在最近邻居中出现最频繁的类别。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The [neighbour[1] for neighbour in neighbours] just grabs the class of the nearest
    neighbours (that's why it was good to also keep the training instance information
    in _get_tuple_distance instead of keeping track of the distances only).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[neighbour[1] for neighbour in neighbours] 只是获取最近邻居的类别（这就是为什么在 _get_tuple_distance
    中保持训练实例信息也是好的，而不仅仅是跟踪距离）。'
- en: 'Next up, Counter, which is a dictionary subclass, counts the number of occurrences
    of objects. Try out:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，Counter，这是一个字典子类，用于计数对象的出现次数。试试：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, the most_common method of Counter can be used to return tuples with the
    most common elements and their frequencies:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用 Counter 的 most_common 方法返回包含最常见元素及其频率的元组：
- en: '[PRE2]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In a similar way, you can grab the classes of the nearest neighbours, tally
    up how frequently the different class labels occur, and then find the most common
    label. This most common label will be the class prediction of the test instance.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以类似的方式，你可以获取最近邻居的类别，统计不同类别标签出现的频率，然后找到最常见的标签。这个最常见的标签将是测试实例的类别预测。
- en: '**Running our algorithm**'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行我们的算法**'
- en: That's about it. Now, just string the data loading and these 3 primary functions
    together with a main method and run it. Let's set k equal to 5, i.e. look at the
    5 nearest neighbours to do the classification of new test instances. Once the
    predictions for classes of test cases are made, it would be useful to get a report
    of how good our predictions are. You can get these summary statistics from scikit's
    [accuracy_score](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html)
    and [classification_score](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html)
    functions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在，只需将数据加载和这 3 个主要函数与一个主方法串在一起并运行即可。我们将 k 设置为 5，即查看 5 个最近邻居来对新测试实例进行分类。一旦对测试用例的类别做出了预测，获取我们预测准确性报告将是有用的。你可以通过
    scikit 的 [accuracy_score](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html)
    和 [classification_score](http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html)
    函数获得这些汇总统计数据。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This method just brings together the previous functions and should be relatively
    self-explanatory. One potentially confusing point may be the very end of the script
    - instead of just calling main() to run the script, it is useful to instead first
    check if `__name__ == "__main__"`. This would make no difference at all if you
    only want to run this script as is from the command line or in an interactive
    shell - when reading the source code, the Python interpreter would set the special
    `__name__` variable to `"__main__"` and run everything. However, say that you
    wanted to just import the functions to another module (another .py file) without
    running all of the code. Then, __name__ would be set to the other module’s name.
    This would let us use the kNN code without having it execute every time. So, this
    check allows the script to behave differently based on whether the script is run
    directly or being imported from somewhere else.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将之前的函数汇总在一起，应该相对易于理解。一个潜在的混淆点可能是脚本的最后部分——与其直接调用 main() 来运行脚本，更有用的是首先检查 `__name__
    == "__main__"`。如果你只想从命令行或交互式 shell 中按原样运行此脚本，这样做没有任何区别——当读取源代码时，Python 解释器会将特殊的
    `__name__` 变量设置为 `"__main__"` 并运行所有内容。然而，假设你想将这些函数仅仅导入到另一个模块（另一个 .py 文件）中而不运行所有代码。那时，__name__
    将被设置为其他模块的名称。这将允许我们使用 kNN 代码而不会每次都执行它。所以，这个检查允许脚本根据脚本是直接运行还是从其他地方导入而表现不同。
- en: '**Refinements**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**改进**'
- en: In this implementation, when trying to classify new data points, we calculated
    the distance between each test instance and every single data point in our training
    set. This is inefficient, and there exist alterations to kNN which subdivide the
    search space in order to minimize the number of pairwise calculations (e.g. see
    [k-d trees](https://www.youtube.com/watch?v=TLxWtXEbtFE)). Another refinement
    to the kNN algorithm can be made by weighting the importance of specific neighbours
    based on their distance from the test case. This would allow closer neighbours
    to have more of an impact on the class voting process, which is intuitively sensible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实现中，当尝试对新的数据点进行分类时，我们计算了每个测试实例与训练集中每个数据点之间的距离。这种方法效率低下，存在对kNN的改进方法，它们通过细分搜索空间来减少成对计算的数量（例如，参见
    [k-d 树](https://www.youtube.com/watch?v=TLxWtXEbtFE)）。对kNN算法的另一个改进是通过根据测试实例与特定邻居的距离加权邻居的重要性。这将使得更近的邻居对类别投票过程产生更大的影响，这在直观上是合理的。
- en: A separate point to keep in mind is that, although here we arbitrarily chose
    k=5, we could have chosen other values (which would influence accuracy, noise
    sensitivity, etc.). Ideally, k would be optimized by seeing which value produces
    the most accurate predictions (see [cross-validation](http://scikit-learn.org/stable/modules/cross_validation.html)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要记住的点是，尽管我们在这里任意选择了k=5，但我们可以选择其他值（这会影响准确性、噪声敏感性等）。理想情况下，可以通过查看哪个值产生最准确的预测来优化k（参见
    [交叉验证](http://scikit-learn.org/stable/modules/cross_validation.html)）。
- en: An excellent overview of kNN can be read [here](https://saravananthirumuruganathan.wordpress.com/2010/05/17/a-detailed-introduction-to-k-nearest-neighbor-knn-algorithm/).
    A more in depth implementation with weighting and search trees is [here](http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_ml/py_knn/py_knn_understanding/py_knn_understanding.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对kNN的一个很好的概述可以在 [这里](https://saravananthirumuruganathan.wordpress.com/2010/05/17/a-detailed-introduction-to-k-nearest-neighbor-knn-algorithm/)
    阅读。一个更深入的实现，包括加权和搜索树，见 [这里](http://opencv-python-tutroals.readthedocs.org/en/latest/py_tutorials/py_ml/py_knn/py_knn_understanding/py_knn_understanding.html)。
- en: '**Full script**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**完整脚本**'
- en: 'The full script follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的脚本如下：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Want to learn more? Check out our two-day Data Science Bootcamp**:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**想了解更多？查看我们的两天数据科学训练营**：'
- en: '[https://cambridgecoding.com/datascience-bootcamp](https://cambridgecoding.com/datascience-bootcamp)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cambridgecoding.com/datascience-bootcamp](https://cambridgecoding.com/datascience-bootcamp)'
- en: '**Bio: [Natasha Latysheva](http://blog.cambridgecoding.com/author/natlat/)**
    is a computational biology PhD student at the MRC Laboratory of Molecular Biology.
    Her research is focused on cancer genomics, statistical network analysis, and
    protein structure. More generally, her research interests lie in data-intensive
    molecular biology, machine learning (especially deep learning) and data science.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Natasha Latysheva](http://blog.cambridgecoding.com/author/natlat/)**
    是MRC分子生物学实验室的计算生物学博士生。她的研究集中于癌症基因组学、统计网络分析和蛋白质结构。更广泛地说，她的研究兴趣包括数据密集型分子生物学、机器学习（特别是深度学习）和数据科学。'
- en: '[Original](http://blog.cambridgecoding.com/2016/01/16/machine-learning-under-the-hood-writing-your-own-k-nearest-neighbour-algorithm/).
    Reposted with permission.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](http://blog.cambridgecoding.com/2016/01/16/machine-learning-under-the-hood-writing-your-own-k-nearest-neighbour-algorithm/)。经允许转载。'
- en: '**Related:**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Scikit-learn and Python Stack Tutorials: Introduction, Implementing Classifiers](/2016/01/scikit-learn-tutorials-introduction-classifiers.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Scikit-learn 和 Python 堆栈教程：简介，分类器实现](/2016/01/scikit-learn-tutorials-introduction-classifiers.html)'
- en: '[7 Steps to Mastering Machine Learning With Python](/2015/11/seven-steps-machine-learning-python.html)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 Steps to Mastering Machine Learning With Python](/2015/11/seven-steps-machine-learning-python.html)'
- en: '[7 Steps to Understanding Deep Learning](/2016/01/seven-steps-deep-learning.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 Steps to Understanding Deep Learning](/2016/01/seven-steps-deep-learning.html)'
- en: '* * *'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速入门网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[From Theory to Practice: Building a k-Nearest Neighbors Classifier](https://www.kdnuggets.com/2023/06/theory-practice-building-knearest-neighbors-classifier.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从理论到实践：构建 k-最近邻分类器](https://www.kdnuggets.com/2023/06/theory-practice-building-knearest-neighbors-classifier.html)'
- en: '[Nearest Neighbors for Classification](https://www.kdnuggets.com/2022/04/nearest-neighbors-classification.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于分类的最近邻](https://www.kdnuggets.com/2022/04/nearest-neighbors-classification.html)'
- en: '[K-nearest Neighbors in Scikit-learn](https://www.kdnuggets.com/2022/07/knearest-neighbors-scikitlearn.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Scikit-learn 中的 K 最近邻](https://www.kdnuggets.com/2022/07/knearest-neighbors-scikitlearn.html)'
- en: '[LangChain 101: Build Your Own GPT-Powered Applications](https://www.kdnuggets.com/2023/04/langchain-101-build-gptpowered-applications.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LangChain 101：构建你自己的 GPT 驱动应用](https://www.kdnuggets.com/2023/04/langchain-101-build-gptpowered-applications.html)'
- en: '[Build Your Own PandasAI with LlamaIndex](https://www.kdnuggets.com/build-your-own-pandasai-with-llamaindex)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 LlamaIndex 构建你自己的 PandasAI](https://www.kdnuggets.com/build-your-own-pandasai-with-llamaindex)'
- en: '[Make Your Own GPTs with ChatGPT''s GPTs!](https://www.kdnuggets.com/make-your-own-gpts-with-chatgpts-gpts)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 ChatGPT 的 GPTs 创建你自己的 GPT](https://www.kdnuggets.com/make-your-own-gpts-with-chatgpts-gpts)'
