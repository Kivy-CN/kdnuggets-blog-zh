- en: How to Dockerize Any Machine Learning Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/04/dockerize-any-machine-learning-application.html](https://www.kdnuggets.com/2021/04/dockerize-any-machine-learning-application.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Arunn Thevapalan](https://www.linkedin.com/in/arunn-thevapalan/), Senior
    Data Scientist at Octave, Mentor, and Writer.**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/374bfc6c12e4d4a4c9cded164c94e76e.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '*Containerize and ship them, models! (Photo by [Andy Li](https://unsplash.com/@andasta?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral))*'
  prefs: []
  type: TYPE_NORMAL
- en: A month in, as a fresh graduate at work, the founder of our AI startup walks
    to me and asks, *“Arunn, I want you to be an expert in Docker. How long would
    you need?”* Not sure what Docker is, but unable to dodge the question. Eventually,
    I replied, *“Two weeks, 1 sprint.”*
  prefs: []
  type: TYPE_NORMAL
- en: My manager, who was also around, tried interrupting to save me, but I had already
    done the damage, and all I had was the next two weeks.
  prefs: []
  type: TYPE_NORMAL
- en: Looking back, I was never an expert (*nor am I now!)*, but I learned just enough
    to do what was required. In this article, I will tell you what’s just enough to
    dockerize any machine learning web applications.
  prefs: []
  type: TYPE_NORMAL
- en: What is Docker?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Docker **is a tool designed to create, deploy, and run applications by using
    containers. A **Container **is a standardized software unit, in simple terms —
    nothing but a packaged bundle of application code and required libraries and other
    dependencies. A **Docker Image **is an executable software package that includes
    everything needed to run an application and becomes a **Container **at runtime.'
  prefs: []
  type: TYPE_NORMAL
- en: It was a lot of new technical terms when I tried to understand Docker. But the
    idea is actually simple.
  prefs: []
  type: TYPE_NORMAL
- en: Think of it like you get a fresh mini Ubuntu machine. Then you install some
    packages on top of it. Then you add some code on top of it. And finally, you execute
    the codes to create an application. ***All of this happens on top of your existing
    machine with the operating system of your choice*****.** All you need is to have
    Docker installed in it.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have Docker installed on your machine, please find [instructions
    here to set up Docker](https://docs.docker.com/get-docker/).
  prefs: []
  type: TYPE_NORMAL
- en: Why Docker for Data Scientists?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I get it. You’re in the field of data science. You think the DevOps guys can
    take care of Docker. Your boss didn’t ask you to become an expert (*unlike mine!)*.
  prefs: []
  type: TYPE_NORMAL
- en: You feel you don’t really need to understand Docker.
  prefs: []
  type: TYPE_NORMAL
- en: That’s not true, and let me tell you why.
  prefs: []
  type: TYPE_NORMAL
- en: '*“Not sure why it’s not working on your machine, it’s working on mine. Do you
    want me to have a look?”*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ever heard these words uttered at your workplace? Once you (and your team) understand
    Docker, nobody will ever have to utter those words again. Your code will run smoothly
    in Ubuntu, Windows, AWS, Azure, Google Cloud, or anywhere, as a matter of fact.
  prefs: []
  type: TYPE_NORMAL
- en: '**The applications you build become reproducible anywhere.**'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll start spinning up environments much faster and distribute your applications
    the right way, and you’ll be saving a lot of time. You’ll (eventually) be known
    as a Data Scientist with software engineering best practices.
  prefs: []
  type: TYPE_NORMAL
- en: The 3 Simple Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As promised, I have simplified the process into 3 simple steps. Here let’s consider
    a use case of a diabetes prediction app, which can predict the onset of diabetes
    based on the diagnostic measure. This would give you an understanding of how we
    can approach containerization in a real-world use case scenario.
  prefs: []
  type: TYPE_NORMAL
- en: I highly recommend you go through [this article](https://medium.com/towards-artificial-intelligence/how-i-build-machine-learning-apps-in-hours-a1b1eaa642ed?source=friends_link&sk=66a5df0a2570e1cf0f12211f3b4f2fc2)
    in which we build this Machine Learning App from scratch in a step-by-step process
    using Streamlit.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d6e07d63154495339887923b7e8a35de.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Screencast of the Diabetes Prediction App by Author.*'
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at this [GitHub repository](https://github.com/arunnthevapalan/diabetes-prediction-app)
    with the complete implementation to follow along with the example. Now that we
    know the context, let’s tackle down our 3 steps!
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Defining the environment**'
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to ensure the exact required environment for the application
    to function properly. There are many ways to do this, but one of the simplest
    ideas is to define a *requirements.txt* file for the project.
  prefs: []
  type: TYPE_NORMAL
- en: Please have a look at all the libraries used in your code and list them down
    in a text file named *requirements.tx*t. It’s a good practice to list the exact
    version of the library, which you can find out when you run *pip freeze* on the
    terminal of your environment. My [requirements](https://github.com/arunnthevapalan/diabetes-prediction-app/blob/master/requirements.txt) file
    for the diabetes prediction example looks like this,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Writing the Dockerfile**'
  prefs: []
  type: TYPE_NORMAL
- en: The idea here is we are trying to create a file named *Dockerfile *that can
    be used to build the required virtual environment for our app to run on. Think
    of it as our instructions manual on building the required environment on top of
    any system!
  prefs: []
  type: TYPE_NORMAL
- en: Let’s write our Dockerfile for the example at hand,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That’s it. 6 lines of code. All in sequence. Every line builds on top of the
    previous one. Let’s dissect the lines.
  prefs: []
  type: TYPE_NORMAL
- en: Every Dockerfile has to start with a ***FROM***. What follows ***FROM ***must
    be an already existing image (either locally on your machine or from [the DockerHub
    repository](https://hub.docker.com/search?type=image)). Since our environment
    is based on Python, we use *python:3.7* as our base image and eventually create
    a new image using this Dockerfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Streamlit runs on a default port of 8501\. So for the app to run, it is important
    to expose that particular port. We use the ***EXPOSE ***command for that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***WORKDIR ***sets the working directory for the application. The rest of the
    commands will be executed from this path.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here ***COPY ***command copies all of the files from your Docker client’s current
    directory to the working directory of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***RUN ***command ensures that the libraries we defined in the *requirements.txt*
    are installed appropriately.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '***CMD ***specifies what command to run within the container as it starts.
    Hence, *streamlit run app.py* ensures that the Streamlit app runs as soon as the
    container has spun up.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Writing Dockerfiles takes some practice, and you can’t possibly master all of
    the commands available unless you spend a lot of time with Docker. I recommend
    getting comfortable with some basic commands and referring to [the docker's official
    documentation](https://docs.docker.com/engine/reference/commandline/docker/) for
    everything else.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Building the image**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined the Dockerfile, it’s time to build it and create an
    image. The idea is this image we create is the reproducible environment irrelevant
    to the underlying system.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As the name suggests *build *command builds the image layer by layer as defined
    in the Dockerfile. It’s always a good practice to tag an image with a name and
    version number as *<name>:version.number .*
  prefs: []
  type: TYPE_NORMAL
- en: The dot at the end signifies the path for the Dockerfile, which is the current
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Wait, I built the image, but what do I do with it? Depending on the requirements,
    you can [share the built images on DockerHub](https://docs.docker.com/get-started/part3/)
    or [deploy them on the cloud](https://docs.docker.com/engine/context/aci-integration/),
    and so on. But first, now you run the image to get the container.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, the *run *command runs the specified container on the
    host machine. *--publish 8501:8501* lets the port 8501 of the container to be
    mapped to the port 8501 of the host machine, while *-it* is needed for running
    interactive processes (like shell/terminal).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now follow the link prompted on your terminal to see the magic yourself! ;)
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8a5514c448dc9fd17532eea0db842931.png)'
  prefs: []
  type: TYPE_IMG
- en: '*You did it! (Photo by [Nghia Le](https://unsplash.com/@lephunghia?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral))*'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/how-to-dockerize-any-machine-learning-application-f78db654c601).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio:** [Arunn Thevapalan](https://www.linkedin.com/in/arunn-thevapalan/)
    is a Senior Data Scientist based in Sri Lanka with a mission to inspire enthusiasts
    to break in and grow in the world of data science by sharing learnings, approaches,
    and everything about the journey to become a successful data scientist.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 Reasons Why Containers Will Rule Data Science](https://www.kdnuggets.com/2020/11/gigantum-containers-will-rule-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Strategies of Docker Images Optimization](https://www.kdnuggets.com/2020/10/strategies-docker-images-optimization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a Machine Learning Pipeline to the Cloud Using a Docker Container](https://www.kdnuggets.com/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to NExT-GPT: Any-to-Any Multimodal Large Language Model](https://www.kdnuggets.com/introduction-to-nextgpt-anytoany-multimodal-large-language-model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SHAP: Explain Any Machine Learning Model in Python](https://www.kdnuggets.com/2022/11/shap-explain-machine-learning-model-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Get Your First Job in Data Science without Any Work Experience](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Read This Before You Take Any Free Data Science Course](https://www.kdnuggets.com/read-this-before-you-take-any-free-data-science-course)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Eigenvectors and Application to PCA](https://www.kdnuggets.com/2022/06/essential-math-data-science-eigenvectors-application-pca.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Creating a Web Application to Extract Topics from Audio with Python](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
