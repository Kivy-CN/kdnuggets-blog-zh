- en: Data Scientist’s Guide to Efficient Coding in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家的 Python 高效编码指南
- en: 原文：[https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html](https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html](https://www.kdnuggets.com/2021/08/data-scientist-guide-efficient-coding-python.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Dr. Varshita Sher](https://varshitasher.medium.com/), Data Scientist**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由[Dr. Varshita Sher](https://varshitasher.medium.com/)，数据科学家**'
- en: In this article, I wanted to share a few tips for writing cleaner codes that
    I have absorbed in the last year — mainly from pair programming. Generally speaking,
    including them as part of my everyday coding routine has helped me generate supreme
    quality Python scripts, that are easily maintainable and scalable over time.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我想分享一些我在过去一年中从配对编程中吸收的编写更清晰代码的技巧。一般来说，将它们作为我日常编码例程的一部分，帮助我生成了高质量的 Python
    脚本，这些脚本随着时间的推移容易维护和扩展。
- en: Ever thought why **senior developer’s code look so much better in comparison
    to a junior developer**. Read on to bridge the gap….
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有没有想过为什么**高级开发者的代码看起来比初级开发者的代码好得多**？继续阅读，来弥合这个差距……
- en: Rather than giving generic examples on how to use these techniques, I will be
    giving real-life coding scenarios where I have *actually* used them! Here is the [Jupyter
    Colab Notebook](https://colab.research.google.com/drive/1gSIJd_HY88A_bq-Z0zMMzFYb1hjRI8DO?usp=sharing) if
    you’d like to follow along!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我将提供实际的编码场景来说明如何使用这些技巧，而不是给出通用的示例！这是一个[Jupyter Colab Notebook](https://colab.research.google.com/drive/1gSIJd_HY88A_bq-Z0zMMzFYb1hjRI8DO?usp=sharing)，如果你想跟着一起操作！
- en: 1\. Use `tqdm` when working with `for `loops.
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 在处理`for`循环时使用`tqdm`。
- en: Imagine looping over a *large* iterable (list, dictionary, tuple, set), and
    not knowing whether the code has finished running! *Bummer*, *right*! In such
    scenarios make sure to use `tqdm` construct to display a progress bar alongside.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下遍历一个*大型*的可迭代对象（列表、字典、元组、集合），却不知道代码是否已经运行完成！*真糟糕*，*对吧*！在这种情况下，请确保使用`tqdm`构造来显示进度条。
- en: 'For instance, to display the progress as I read through all the files present
    in 44 different directories (whose paths I have already stored in a list called `fpaths`):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我读取存在于44个不同目录中的所有文件时（这些路径已经存储在名为`fpaths`的列表中），以显示进度：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![](../Images/9bcd861ff49e3bd8b0e25a728332679a.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9bcd861ff49e3bd8b0e25a728332679a.png)'
- en: Using tqdm with “for“ loop
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 tqdm 与 “for” 循环
- en: '*Note: Use the *`*desc*`* argument to specify a small description for the loop.*'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：使用*`*desc*`*参数来为循环指定一个简短的描述。*'
- en: 2\. Use `type hinting when writing functions.`
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 在编写函数时使用`类型提示`。
- en: In simple terms, it means explicitly stating the type of all the arguments in
    your Python function definition.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，就是在 Python 函数定义中明确声明所有参数的类型。
- en: I wish there were specific use cases I could provide to emphasize *when* I use
    type hinting for my work, but the truth is, I use them more often than not.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望有具体的用例来强调*何时*使用类型提示，但事实是，我经常使用它们。
- en: Here’s a hypothetical example of a function `update_df()`. It updates a given
    data frame by appending a row containing useful information from a simulation
    run — such as classifier used, accuracy scored, train-test split size, and additional
    remarks for that particular run.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个假设的函数`update_df()`示例。它通过附加一行包含来自模拟运行的有用信息（例如使用的分类器、得分的准确率、训练-测试分割大小以及该特定运行的额外备注）的数据帧来更新给定的数据帧。
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/930d1b32e90748482182847e086597d5.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/930d1b32e90748482182847e086597d5.png)'
- en: 'Few things to note:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 几点需要注意：
- en: The datatype following the `->` symbol in the function definition (`def update_df(.......) **->** pd.DataFrame`)
    indicates the type of the value returned by the functions, i.e. a Pandas’s dataframe
    in this case.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数定义中的`->`符号后面的数据类型（`def update_df(.......) **->** pd.DataFrame`）表示函数返回值的类型，即在这种情况下是
    Pandas 的数据框。
- en: 'The default value, if any, can be specified as usual in the form `param:type
    = value` . (For example: `split: float = 0.5`)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果有默认值，可以像往常一样以`param:type = value`的形式指定。（例如：`split: float = 0.5`）'
- en: 'In case a function does not return anything, feel free to use `None`. For example
    : `def func(a: str, b: int) -> None: print(a,b)`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '如果一个函数没有返回任何内容，可以自由使用`None`。例如：`def func(a: str, b: int) -> None: print(a,b)`'
- en: 'To return values of mixed types, for example, say a function could either print
    a statement if a flag `option`was set OR return an `int`if the flag was not set:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要返回混合类型的值，例如，假设一个函数可以在标志`option`设置时打印语句，或者在标志未设置时返回一个`int`：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Note: As of Python 3.10, *`*Union*`* is not required, so you can simply do:*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：从 Python 3.10 开始，*`*Union*`* 不再是必需的，因此你可以直接这样做：*'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You can go as specific as you’d like while defining the types of parameters,
    as we have done for `remarks: List[str]`. Not only do we specify it should be
    a `List`, but it should be a list of `str` only.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '在定义参数类型时，你可以尽可能具体，就像我们对 `remarks: List[str]` 所做的那样。我们不仅指定它应该是一个 `List`，而且它应该仅仅是
    `str` 类型的列表。'
- en: For fun, try passing a list of integers to `remarks`while calling the function.
    You’ll see no error returned! *Why is that? *Because Python interpreter doesn’t
    enforce any type checking based on your type-hints.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了好玩，尝试在调用函数时传递一个整数列表到 `remarks`。你会看到没有错误返回！*为什么会这样？* 因为 Python 解释器不会根据你的类型提示执行任何类型检查。
- en: '[Type-hints have no impact on your code other than adding documentation](https://www.pythonlikeyoumeanit.com/Module5_OddsAndEnds/Writing_Good_Code.html#What-is-It-Good-For?-(Absolutely-Nothing)).'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[类型提示对你的代码没有其他影响，只是增加了文档](https://www.pythonlikeyoumeanit.com/Module5_OddsAndEnds/Writing_Good_Code.html#What-is-It-Good-For?-(Absolutely-Nothing))。'
- en: It’s still good practice, though, to include it! I feel it lends more clarity
    to oneself when writing a function. In addition, when someone makes a call to
    such a function, they get to see nice prompts for the arguments it would take
    as inputs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，包含它仍然是一个好的实践！我觉得它在编写函数时能带来更多的清晰度。此外，当有人调用这样的函数时，他们会看到输入参数的清晰提示。
- en: '![](../Images/9f1d83d3b0fc37b952d7bfb93d64ea76.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f1d83d3b0fc37b952d7bfb93d64ea76.png)'
- en: Prompts when calling a function with type hinting
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 带类型提示的函数调用提示
- en: '3\. Use args and kwargs for functions with unknown # of arguments`.`'
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3. 使用 args 和 kwargs 处理参数数量未知的函数。
- en: 'Imagine this: you want to write a function that takes as input *some* directory
    paths and prints the number of files within each. The problem is, we do not know *how* many
    paths the user would input! Could be 2 could be 20! So we are unsure how many
    parameters should we define in our function definition. Clearly, writing a function
    like `def count_files(file1, file2, file3, …..file20)`would be silly. In such
    cases, `args` and (sometimes `kwargs`) come handy!'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下：你想写一个函数，接收 *一些* 目录路径，并打印每个目录中的文件数量。问题是，我们不知道用户会输入 *多少* 个路径！可能是 2 个，也可能是
    20 个！所以我们不确定应该在函数定义中定义多少个参数。显然，写一个像 `def count_files(file1, file2, file3, …..file20)`
    这样的函数会很傻。在这种情况下，`args` 和（有时 `kwargs`）非常有用！
- en: '**Args** is used for specifying an unknown number of **positional** arguments.'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Args** 用于指定未知数量的 **位置** 参数。'
- en: '**Kwargs** is used for specifying an unknown number of **keyword** arguments.'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Kwargs** 用于指定未知数量的 **关键字** 参数。'
- en: Args
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Args
- en: Here’s an example of a function `count_files_in_dir()`that takes in `project_root_dir` and
    an arbitrary number of folder paths within it (using `*fpaths` in the function
    definition). As an output, it prints the number of files within each of these
    folders.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个函数 `count_files_in_dir()` 的示例，它接收 `project_root_dir` 和一个任意数量的文件夹路径（在函数定义中使用
    `*fpaths`）。作为输出，它会打印每个这些文件夹中的文件数量。
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![](../Images/8e8c20d0e9910db055928a7971a3ff0a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8e8c20d0e9910db055928a7971a3ff0a.png)'
- en: 'Counting the # of files in Google Colab directories'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 Google Colab 目录中的文件数量
- en: In the function call, we pass in 5 arguments. As the function definition expects
    one *required* positional arguments i.e. `project_root_dir`, it automatically
    knows `"../usr"` must be it. All the remaining arguments (four in this case) are
    “soaked up” by `*fpaths`and are used for counting the files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数调用中，我们传入了 5 个参数。由于函数定义期望一个 *必需* 的位置参数，即 `project_root_dir`，它会自动知道 `"../usr"`
    必须是这个参数。其余的参数（在这个例子中是四个）都被 `*fpaths` 吸收，用于计算文件数量。
- en: '*Note: The proper terminology for this soaking up technique is “argument packing”
    i.e. remaining arguments are packed into *`**fpaths*`*.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：这种吸收技术的正确术语是“参数打包”，即剩余参数被打包成 *`**fpaths*`*。*'
- en: Kwargs
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kwargs
- en: 'Let’s look at functions that must take an unknown number of *keyword* arguments.
    In such scenarios, we must use `kwargs` instead of `args`. Here’s a short (useless)
    example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下必须接收未知数量的 *关键字* 参数的函数。在这种情况下，我们必须使用 `kwargs` 而不是 `args`。以下是一个简短的（无用的）示例：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/25cd205f9fd4647a869c6dfc99d2f52b.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/25cd205f9fd4647a869c6dfc99d2f52b.png)'
- en: The usage is quite similar to `*args` but now we are able to pass an arbitrary
    number of *keyword* arguments to a function. These arguments get stored as key-value
    pairs in `**results`dictionary. From hereon, it is easy to access the items within
    this dictionary using `.items()`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方式与`*args`非常相似，但现在我们能够将任意数量的*关键字*参数传递给函数。这些参数作为键值对存储在`**results`字典中。从这里开始，可以使用`.items()`轻松访问字典中的项。
- en: 'I have found two main applications for `kwargs` in my work:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我在工作中发现了`kwargs`的两个主要应用：
- en: merging dictionaries (*useful but less interesting*)
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并字典（*有用但较少有趣*）
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: extending an existing method (*more interesting*)
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展现有方法（*更有趣*）
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Note: Checkout *[*matplotlib’s plot function using *](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`[*kwargs*](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`* to
    specify optional embellishments for a plot such as linewidth and label.*'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：查看*[*matplotlib的绘图函数使用*](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`[*kwargs*](https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib-pyplot-plot)`* 来指定图表的可选修饰，如线宽和标签。*'
- en: 'Here’s a real practical use-case for extending methods using `**kwargs` from
    one of my recent projects:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个实际使用`**kwargs`扩展方法的案例，来自我最近的一个项目：
- en: We often use Sklearn’s `train_test_split()` for splitting `X` and `y`. While
    working on one of the GANs projects, I had to split the generated synthetic images
    into the *same* train-test split that is used for splitting real images and their
    respective labels. In addition, I also wanted to be able to pass any other arguments
    that one would normally pass to the `train_test_split()`. Finally, `stratify` must
    always be passed because I was working on a face recognition problem (and wanted
    all labels to be present in both train and test set).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常使用 Sklearn 的`train_test_split()`来拆分`X`和`y`。在处理其中一个 GAN 项目时，我需要将生成的合成图像拆分为与拆分真实图像及其相应标签所用的*相同*的训练测试集。此外，我还希望能够传递任何其他通常传递给`train_test_split()`的参数。最后，`stratify`必须始终传递，因为我在处理人脸识别问题（并希望所有标签都在训练集和测试集中存在）。
- en: To achieve this, we created a function called `custom_train_test_split()`. I’ve
    included a bunch of print statements to show what exactly is happening under the
    hood (and omitted some snippets for brevity).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们创建了一个名为`custom_train_test_split()`的函数。我包含了一些打印语句来展示内部发生的情况（并省略了一些片段以简化说明）。
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Note: While calling this function, instead of using the actual image vectors
    and labels (see figure below), I have replaced them with dummy data for ease of
    understanding. The code, however, should work for real images as well!*'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：在调用此函数时，为了便于理解，我使用了虚拟数据替换了实际的图像向量和标签（见下图）。不过，代码同样适用于真实图像！*'
- en: '![](../Images/5c62be74580ff4d94753b0667954be87.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5c62be74580ff4d94753b0667954be87.png)'
- en: Figure A Calling a function with kwargs in function definition
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 A 使用函数定义中的kwargs调用函数
- en: 'Bunch of things to note:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意事项：
- en: All the *keyword* arguments (**except **`stratify`), used in the function call
    statement (such as `train_size` and `random_state`) will be stored as a key-value
    pair in the `**split_args` dictionary. (To verify, check out the output in Blue.)
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在函数调用语句中使用的所有*关键字*参数（**除了**`stratify`），将作为键值对存储在`**split_args`字典中。（要验证，请查看蓝色输出。）
- en: Why not `stratify`, you might ask? This is because according to the function
    definition, it is a *required *keyword-onlyargument and not an *optional* one.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可能会问为什么不使用`stratify`？这是因为根据函数定义，它是一个*必需的*仅限关键字参数，而不是一个*可选的*参数。
- en: All the *non-keyword *(i.e. positional)arguments passed in the function call
    (such as `"SVM"`, `labels`, etc.) would be stored in the first three parameters
    in function definition i.e.`clf`, `y` and `*X`, (and yes the order in which they
    are passed matters). However, we have *four* arguments in function call i.e. `"SVM"`, `labels`, `ims` ,
    and `synthetic_ims`. *Where do we store the fourth one?*
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有*非关键字*（即位置）参数（如`"SVM"`、`labels`等）在函数调用中会存储在函数定义中的前三个参数，即`clf`、`y`和`*X`（是的，传递的顺序很重要）。然而，在函数调用中我们有*四个*参数，即`"SVM"`、`labels`、`ims`和`synthetic_ims`。*那第四个参数该存储在哪里？*
- en: Remember that we used `*X` as the third parameter in the function definition,
    hence all arguments passed to the function after the first two arguments are *packed *(soaked)
    into `*X`. (To verify, check output in Green).
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住我们在函数定义中使用了`*X`作为第三个参数，因此传递给函数的所有参数在前两个参数之后都被*打包*（浸泡）到`*X`中。（要验证，请检查绿色输出）。
- en: When calling `train_test_split()` method within our function, we are essentially *unpacking* the `X` and `split_args` arguments
    using the `*` operator,(`*X` and `**split_args`), so that all elements of it can
    be passed as different parameters.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在我们的函数中调用`train_test_split()`方法时，我们实际上是在使用`*`运算符解包`X`和`split_args`参数（`*X`和`**split_args`），以便将所有元素作为不同的参数传递。
- en: That is,
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，
- en: '[PRE9]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: is equivalent to writing
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于写
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When storing the results from the `train_test_split()` method, we again *pack* the `synthetic_train` and `synthetic_test` sets
    into a single `*synthetic` variable.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当存储`train_test_split()`方法的结果时，我们再次*打包*`synthetic_train`和`synthetic_test`集合到一个单独的`*synthetic`变量中。
- en: '![](../Images/eff64186647cd1a947a83aabcbda8884.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eff64186647cd1a947a83aabcbda8884.png)'
- en: To check what’s inside it, we can unpack it again using `*` operator (see the
    output in Pink).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查里面有什么，我们可以使用`*`运算符再次解包它（见粉色输出）。
- en: '*Note: For those of you who’d like a deep dive into packing & unpacking using *`***`* operator,
    do check out this *[*article*](https://realpython.com/python-kwargs-and-args/)*.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：如果你想深入了解使用*`***`*运算符进行打包和解包，请查看这篇*[*文章*](https://realpython.com/python-kwargs-and-args/)*。*'
- en: 4\. Use pre-commit hooks`.`
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 使用预提交hooks`。`
- en: The code we write is often messy and lacks proper formatting such as trailing
    whitespaces, trailing commas, unsorted import statements, spaces in indentation,
    etc.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的代码通常很凌乱，缺乏适当的格式，比如尾随空格、尾随逗号、未排序的导入语句、缩进中的空格等。
- en: While it is possible to fix all this manually, you will be saving yourself a
    great deal of time with [pre-commit hooks](https://pre-commit.com/). In simpler
    terms, these hooks can perform auto-formatting for you with one line of command
    — `pre-commit run`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可以手动修复所有这些问题，但使用[pre-commit hooks](https://pre-commit.com/)可以节省你大量的时间。简单来说，这些hooks可以通过一行命令进行自动格式化——`pre-commit
    run`。
- en: Here are some [simple steps](https://pre-commit.com/#install) from the official
    documentation to get started and [create a ](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`[.pre-commit-config.yaml](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`[ file](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration).
    It will contain [hooks](https://pre-commit.com/hooks.html) for all the formatting
    issues that you care about!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些来自官方文档的[简单步骤](https://pre-commit.com/#install)来开始并[创建一个](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`[.pre-commit-config.yaml](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)`[文件](https://pre-commit.com/index.html#2-add-a-pre-commit-configuration)。它将包含你关心的所有格式化问题的[hooks](https://pre-commit.com/hooks.html)！
- en: As a purely personal preference, I tend to keep my `.pre-commit-config.yaml` configuration
    file simple and stick with [Black’s](https://black.readthedocs.io/en/stable/integrations/source_version_control.html) pre-commit
    configuration.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 作为纯个人偏好，我倾向于保持我的`.pre-commit-config.yaml`配置文件简单，并使用[Black的](https://black.readthedocs.io/en/stable/integrations/source_version_control.html)预提交配置。
- en: '*Note: One thing to remember is that files must be staged i.e. *`*git add .*`* before
    you do *`*pre-commit run*`* , otherwise, you’ll see all the files will be Skipped
    :*'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：需要记住的一点是，文件必须被暂存，即在执行*`*pre-commit run*`*之前使用*`*git add .*`*，否则你会看到所有文件都会被跳过：*'
- en: '![](../Images/74bb1092d28f8ab78b952edfb55eebad.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/74bb1092d28f8ab78b952edfb55eebad.png)'
- en: 5\. Use .yml config files to store constants`.`
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 使用.yml配置文件来存储常量`。`
- en: If your project contains a lot of config variables such as database hostname,
    passwords, AWS credentials, etc. use a `.yml` file to keep track of all of them.
    You can later use this file in any Jupyter Notebook or script that you wish.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的项目包含大量配置变量，例如数据库主机名、密码、AWS凭证等，请使用`.yml`文件来跟踪所有这些变量。你可以在任何Jupyter Notebook或你希望的脚本中使用这个文件。
- en: Given most of my work is aimed at providing a model framework to clients so
    they can train it again on their own dataset, I usually use config files for storing
    paths to folders and files. It is also a nice way to make sure the client has
    to make changes to only one file when running your script at their end.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我大部分工作是为客户提供模型框架，以便他们可以在自己的数据集上重新训练它，我通常使用配置文件来存储文件夹和文件的路径。这也是确保客户在运行你的脚本时只需更改一个文件的好方法。
- en: Let’s go ahead and create a `fpaths.yml` file in the project directory. We will
    be storing the root directory where images must be stored. Additionally, the paths
    to the file names, labels, attributes, etc. Finally, we also store the paths to
    synthetic images.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目目录中创建一个`fpaths.yml`文件。我们将存储需要存放图像的根目录。此外，还会存储文件名、标签、属性等的路径。最后，我们还存储合成图像的路径。
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can read this file like:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样阅读这个文件：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '*Note: If you’d like to dig deeper, here’s a brilliant *[*tutorial*](https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started)* to
    get you started with yaml.*'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*注意：如果你想深入了解，这里有一个精彩的* [*教程*](https://www.cloudbees.com/blog/yaml-tutorial-everything-you-need-get-started)
    *来帮助你入门 yaml。*'
- en: '6\. Bonus: Useful VS-Code Extensions`.`'
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. 奖励：有用的 VS-Code 扩展
- en: 'While there are certainly many nice choices for Python editors, I must say
    VSCode is hands-down the best I have seen so far (*sorry, Pycharm*). To get even
    more use of it, consider installing these extensions from the marketplace:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然确实有很多不错的 Python 编辑器，但我必须说 VSCode 是我见过的最好的 (*对不起，Pycharm*)。为了更好地利用它，考虑从市场中安装这些扩展：
- en: '[Bracket Pair Colorizer ](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)—
    allows matching brackets to be identified with colors.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[括号配对着色器](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)——允许用颜色识别匹配的括号。'
- en: '![](../Images/22f7c332c972b0d391e893eca83873db.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/22f7c332c972b0d391e893eca83873db.png)'
- en: '[Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) —
    allows autocompleting filenames.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[路径智能感知](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)——允许自动补全文件名。'
- en: '![](../Images/bc298c53b24cd3daaed9de47e1e6b762.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/bc298c53b24cd3daaed9de47e1e6b762.png)'
- en: '[Python Dockstring generator](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring) —
    allows generating docstrings for Python functions.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Docstring 生成器](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring)——允许为
    Python 函数生成 docstring。'
- en: '![](../Images/85c8b32707fe9632374d81b585627221.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85c8b32707fe9632374d81b585627221.png)'
- en: Generating docstrings using VScode extension
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 VSCode 扩展生成 docstring
- en: '*Pro-tip: Generate the docstring (using *`*"""*`*) ****after**** you’ve written
    the function using type hinting. This way, the docstring generated will be even
    richer in information such as default value, argument types, etc. (See image on
    right above).*'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '*技巧：使用*`*"""*`* 在你编写了函数并使用了类型提示之后生成 docstring。这样生成的 docstring 将包含更多信息，如默认值、参数类型等（见上图右侧）。*'
- en: '[Python Indent](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent) —
    (*my favorite; published by *by [Kevin Rose](https://marketplace.visualstudio.com/publishers/KevinRose))
    allows proper indentation of code/brackets that runs on multiple lines.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Indent](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent)——(*我最喜欢的；由*
    [Kevin Rose](https://marketplace.visualstudio.com/publishers/KevinRose) *发布*)
    允许对多行代码/括号进行正确的缩进。'
- en: '![](../Images/eee5fbeebed8adbf8634e945e0bf7d3d.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eee5fbeebed8adbf8634e945e0bf7d3d.png)'
- en: Source: [VSCode Extensions Marketplace](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：[VSCode 扩展市场](https://marketplace.visualstudio.com/items?itemName=KevinRose.vsc-python-indent)
- en: '[Python Type Hint](https://marketplace.visualstudio.com/items?itemName=njqdev.vscode-python-typehint) —
    allows auto-completion for type hints when writing functions.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 类型提示](https://marketplace.visualstudio.com/items?itemName=njqdev.vscode-python-typehint)——允许在编写函数时自动补全类型提示。'
- en: '![](../Images/92497f3d02c0316705bc33017a00d027.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92497f3d02c0316705bc33017a00d027.png)'
- en: '[TODO tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree):
    (*second favorite*) keeps track of ALL the `TODO`''s at one place that were inserted
    while writing scripts.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TODO tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree)：(*第二喜欢*)
    追踪在编写脚本时插入的所有`TODO`。'
- en: '![](../Images/495629a719138e57c940c0da96e57c0b.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/495629a719138e57c940c0da96e57c0b.png)'
- en: Keep track of all TODO comments inserted in your project
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪项目中插入的所有 TODO 注释
- en: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance) —
    allows code completion, parameter suggestions (and a loootttt more for writing
    code faster).'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pylance](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)——允许代码自动补全、参数建议（还有很多其他功能，能更快地编写代码）。'
- en: Congrats on being one step closer to a professional Python developer. I intend
    to keep updating this article as and when I learn more cool tricks. As always,
    if there’s an easier way to do some of the things I mentioned in this article,
    please do let me know.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你离成为专业 Python 开发者更近了一步。我打算在学习到更多有趣的技巧时更新这篇文章。如有更简单的方法完成本文提到的某些任务，请随时告知我。
- en: Until next time :)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下次再见 :)
- en: Step by step guide to explaining your ML project during a data science interview.
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学面试中逐步解释你的 ML 项目的指南。
- en: Interviewer’s favorite question- How would you “scale your ML model?”
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 面试官最喜欢的问题 - 你会如何“扩展你的 ML 模型”？
- en: Time Series Analysis using Pandas in Python
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Pandas 进行时间序列分析
- en: 'Podurama: Podcast player'
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 'Podurama: 播客播放器'
- en: Read every story from Dr. Varshita Sher (and thousands of other writers on Medium)
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阅读 Varshita Sher 博士的每一篇故事（以及 Medium 上其他成千上万的作者的故事）
- en: '**Bio: [Dr. Varshita Sher](https://varshitasher.medium.com/)** is a Data Scientist
    at Alan Turing Institute, and an Oxford & SFU Alumni.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Varshita Sher 博士](https://varshitasher.medium.com/)** 是艾伦·图灵研究所的数据科学家，同时也是牛津大学和
    SFU 校友。'
- en: '[Original](https://towardsdatascience.com/data-scientists-guide-to-efficient-coding-in-python-670c78a7bf79).
    Reposted with permission.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/data-scientists-guide-to-efficient-coding-in-python-670c78a7bf79).
    已获得授权转载。'
- en: '**Related:**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[5 Tips for Writing Clean R Code](/2021/08/5-tips-writing-clean-r-code.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[编写干净 R 代码的 5 个技巧](/2021/08/5-tips-writing-clean-r-code.html)'
- en: '[Python Data Structures Compared](/2021/07/python-data-structures-compared.html)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 数据结构比较](/2021/07/python-data-structures-compared.html)'
- en: '[GitHub Copilot Open Source Alternatives](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[GitHub Copilot 开源替代品](/2021/07/github-copilot-open-source-alternatives-code-generation.html)'
- en: '* * *'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT 工作'
- en: '* * *'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[KDnuggets News, May 4: 9 Free Harvard Courses to Learn Data…](https://www.kdnuggets.com/2022/n18.html)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，5 月 4 日：9 门免费的哈佛课程来学习数据…](https://www.kdnuggets.com/2022/n18.html)'
- en: '[15 Python Coding Interview Questions You Must Know For Data Science](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你必须知道的 15 个 Python 编程面试问题](https://www.kdnuggets.com/2022/04/15-python-coding-interview-questions-must-know-data-science.html)'
- en: '[3 Hard Python Coding Interview Questions For Data Science](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 个困难的 Python 编程面试问题用于数据科学](https://www.kdnuggets.com/2023/03/3-hard-python-coding-interview-questions-data-science.html)'
- en: '[Free Python Project Coding Course](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[免费 Python 项目编码课程](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
- en: '[7 Must-Know Python Tips for Coding Interviews](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 个你必须知道的 Python 编程面试技巧](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)'
- en: '[Enhance Your Python Coding Style with Ruff](https://www.kdnuggets.com/enhance-your-python-coding-style-with-ruff)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Ruff 提升你的 Python 编码风格](https://www.kdnuggets.com/enhance-your-python-coding-style-with-ruff)'
