- en: Create and Deploy your First Flask App using Python and Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/09/flask-app-using-python-heroku.html](https://www.kdnuggets.com/2020/09/flask-app-using-python-heroku.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Divy Shah](https://www.linkedin.com/in/shahdivy/), Data Scientist**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a5ccb022ebe6f89aa4d938bcecd28598.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisites**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Python](https://www.python.org/downloads/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Flask](https://flask.palletsprojects.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Git](https://git-scm.com/downloads)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli#download-and-install)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: After installing Python, install the other frameworks and libraries listed.
    You can easily install flask using the following command.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Define the structure of your web app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The static directory contains your CSS files, and the template contains the
    HTML file, which is used for rendering.
  prefs: []
  type: TYPE_NORMAL
- en: You can create a separate .py file for your logic and other operations or write
    code in the same app.py. I suggest creating a separate file will reduce the confusion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Create your **app.py** file*'
  prefs: []
  type: TYPE_NORMAL
- en: I used the waitress service because using this library is meant to be a production-quality
    pure-Python WSGI server with very acceptable performance. It has no dependencies
    except ones that live in the Python standard library.
  prefs: []
  type: TYPE_NORMAL
- en: '**Install waitress**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/3f9487b64988aa7f716a0c17b97b57a5.png)'
  prefs: []
  type: TYPE_IMG
- en: '*app.py*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As shown above, we used the **GET **Method to send data from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several other methods also available, which are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**POST: **It is used to send user/form-data to the server and doesn’t cache
    the transmitted data.'
  prefs: []
  type: TYPE_NORMAL
- en: '**HEAD:** It is similar to GET, but the difference is it is used without the
    response body.'
  prefs: []
  type: TYPE_NORMAL
- en: '**PUT: **It isused to replace the current resource with uploaded content.'
  prefs: []
  type: TYPE_NORMAL
- en: '**DELETE:** It is used to delete the target resource provided in the URL.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create trending.py file, which is basically the file that contains your business
    logic. After creation import main function in app.py file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Below, my trending.py file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f2e8acd7ba4821456f678a8b129f6d51.png)'
  prefs: []
  type: TYPE_IMG
- en: '*trending.py*'
  prefs: []
  type: TYPE_NORMAL
- en: After collecting the data, we can render the output using an HTML file.
  prefs: []
  type: TYPE_NORMAL
- en: The output data will be displayed on the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create an HTML file to render the output that you collected from the response
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below is how my display.html file looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a88652b5452f9330530db7e9f82ca8f6.png)'
  prefs: []
  type: TYPE_IMG
- en: '*display.html*'
  prefs: []
  type: TYPE_NORMAL
- en: You are almost done with the coding part, and now it’s time to deploy our first
    flask app.
  prefs: []
  type: TYPE_NORMAL
- en: Before deploying the app, first, check the flask app on the localhost.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**1\. Login to your Heroku account using CLI**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can log in by writing the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Create a web app on Heroku**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a new application on Heroku using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Create *requirements.txt*file in the same project directory**'
  prefs: []
  type: TYPE_NORMAL
- en: To generate the requirement.txt file, you can use the following command”
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Create a Procfile**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Procfile* is a Process file that is required for all Heroku applications.
    *Procfile* specifies the commands that are executed by the app on startup.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Click here](https://devcenter.heroku.com/articles/procfile) to read more on *Procfile*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following in *Procfile*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, the app is the name of your main (.py) file. In my case, it is app.py.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you haven’t yet installed the gunicorn web server, then install it by using
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '*NOTE: you have to create a Procfile without any file extensions.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**5\. Create *runtime.txt *to specify the Python version at runtime**'
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating a runtime.txt, add your build Python version like below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, we are all set!
  prefs: []
  type: TYPE_NORMAL
- en: '**6\. Initialize an empty git repository and push the code**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, it is time to commit your final code using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Your app is live now, and you can see your web app using the generated URL.
  prefs: []
  type: TYPE_NORMAL
- en: '*Please check out my demo web application at: *[https://trending-shows.herokuapp.com/](https://trending-shows.herokuapp.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/towards-artificial-intelligence/create-and-deploy-your-first-flask-app-using-python-and-heroku-aee04eaddc71).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio:** [Divy Shah](https://www.linkedin.com/in/shahdivy/) is passionate about
    solving real life and FinTech industries problem with the help of Data Science
    and Machine Learning Algorithms, and is always eager to learn and explore new
    Data Science algorithms and frameworks.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Deployment of Machine learning models using Flask](https://www.kdnuggets.com/2019/12/excelr-deployment-machine-learning-flask.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build and deploy your first machine learning web app](https://www.kdnuggets.com/2020/05/build-deploy-machine-learning-web-app.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to build an API for a machine learning model in 5 minutes using Flask](https://www.kdnuggets.com/2019/01/build-api-machine-learning-model-using-flask.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploying a Streamlit WebApp to Heroku using DAGsHub](https://www.kdnuggets.com/2022/02/deploying-streamlit-webapp-heroku-dagshub.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tips & Tricks of Deploying Deep Learning Webapp on Heroku Cloud](https://www.kdnuggets.com/2021/12/tips-tricks-deploying-dl-webapps-heroku.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[From Zero to Hero: Create Your First ML Model with PyTorch](https://www.kdnuggets.com/from-zero-to-hero-create-your-first-ml-model-with-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create a Dashboard Using Python and Dash](https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
