- en: 3 Interesting Uses of Python’s Context Managers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3 种有趣的 Python 上下文管理器用法
- en: 原文：[https://www.kdnuggets.com/3-interesting-uses-of-python-context-managers](https://www.kdnuggets.com/3-interesting-uses-of-python-context-managers)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/3-interesting-uses-of-python-context-managers](https://www.kdnuggets.com/3-interesting-uses-of-python-context-managers)
- en: '![3 Interesting Uses of Python''s Context Managers](../Images/4634679c3b9355581de61827cbecda51.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![3 种有趣的 Python 上下文管理器用法](../Images/4634679c3b9355581de61827cbecda51.png)'
- en: Image by johnstocker on [Freepik](https://www.freepik.com/free-vector/young-programmer-working-laptop-computer-cartoon-character_33906144.htm#query=python%20programmer&position=7&from_view=search&track=ais&uuid=660bb4cc-54bf-4668-8bd8-114802f3425e)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 [Freepik](https://www.freepik.com/free-vector/young-programmer-working-laptop-computer-cartoon-character_33906144.htm#query=python%20programmer&position=7&from_view=search&track=ais&uuid=660bb4cc-54bf-4668-8bd8-114802f3425e)
    的 johnstocker
- en: A while ago, I wrote a tutorial on [writing efficient Python code](/how-to-write-efficient-python-code-a-tutorial-for-beginners).
    In it, I talked about using context managers and the with statement to manage
    resources efficiently.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 前一段时间，我写了一篇关于 [编写高效 Python 代码](/how-to-write-efficient-python-code-a-tutorial-for-beginners)
    的教程。在其中，我讨论了如何使用上下文管理器和 with 语句高效地管理资源。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织进行 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: I used a simple file handling example to show how files are automatically closed
    when the execution exits the with block—even if there is an exception.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了一个简单的文件处理示例，展示了当执行退出 with 块时，文件会被自动关闭——即使发生了异常。
- en: While file handling is a good first example, it can quickly get boring. That
    is why I'd like to go over other interesting uses of context managers—beyond file
    handling—in this tutorial. We’ll focus on handling database connections, managing
    subprocesses, and high-precision floating point arithmetic.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然文件处理是一个很好的初步示例，但它很快会变得乏味。这就是为什么我想在本教程中介绍其他有趣的上下文管理器用法——超越文件处理。我们将重点讲解处理数据库连接、管理子进程以及高精度浮点运算。
- en: What Are Context Managers in Python?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的上下文管理器是什么？
- en: 'Context managers in Python allow you to write cleaner code when working with
    resources. They provide a concise syntax to set up and tear down resources through:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的上下文管理器使你在处理资源时能够编写更简洁的代码。它们通过以下方式提供了设置和拆除资源的简洁语法：
- en: An **enter** logic that gets called when the execution enters the context and
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**进入**逻辑，当执行进入上下文时会被调用
- en: An **exit** logic the gets called when the execution exits the context
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**退出**逻辑，当执行退出上下文时会被调用
- en: 'The simplest example of this is in file handling. Here we use the `open()`
    function in the `with` statement to get a file handler:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的示例是文件处理。在这里，我们在 `with` 语句中使用 `open()` 函数来获取文件处理器：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This acquires the resource—the file object—that is used (we write to the file)
    within the code block. The file is closed once the execution exits the context;
    so there are no resource leaks.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这会获取资源——文件对象——在代码块中使用（我们写入文件）。当执行退出上下文时，文件会被关闭；因此不会有资源泄漏。
- en: 'You can write the generic version of this like so:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样编写通用版本：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now let’s proceed to the specific examples.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续看具体的示例。
- en: 1\. Handling Database Connections
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 处理数据库连接
- en: 'When you''re building Python applications, it''s quite common to connect to
    databases and query the tables they contain. And the workflow to do this will
    look like so:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当你构建 Python 应用程序时，连接到数据库并查询它们包含的表是相当常见的。执行此操作的工作流程如下：
- en: Install the database connector to work with the database (such as psycopg2 for
    Postgres and the mysql-connector-python for MySQL databases).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装数据库连接器以便与数据库配合使用（例如用于 Postgres 的 psycopg2 和用于 MySQL 数据库的 mysql-connector-python）。
- en: Parse the config file to retrieve the connection parameters.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析配置文件以检索连接参数。
- en: Use the `connect()` function to establish connection to the database.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `connect()` 函数建立与数据库的连接。
- en: '![3 Interesting Uses of Python''s Context Managers](../Images/a78e3dbbd7547d349932a4affb886e73.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Python 上下文管理器的 3 个有趣用途](../Images/a78e3dbbd7547d349932a4affb886e73.png)'
- en: Connecting to the db | Image by Author
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到数据库 | 图片来自作者
- en: Once you’ve connected to the database, you can create a database to query the
    database. Run queries and fetch the results of the query using the run and fetch
    cursor methods.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你连接到数据库，你可以创建一个数据库来查询数据库。运行查询并使用 run 和 fetch 游标方法获取查询结果。
- en: '![3 Interesting Uses of Python''s Context Managers](../Images/00ab54842a3ba36c0eaeb04eecef89e3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![Python 上下文管理器的 3 个有趣用途](../Images/00ab54842a3ba36c0eaeb04eecef89e3.png)'
- en: Querying the db | Image by Author
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 查询数据库 | 图片来自作者
- en: 'In doing so, you create the following resources: a database connection and
    a database cursor. Now let’s code a simple generic example to see how we can use
    the connection and the cursor objects as context managers.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你创建了以下资源：一个数据库连接和一个数据库游标。现在让我们编写一个简单的通用示例，看看如何将连接和游标对象用作上下文管理器。
- en: Parsing TOML Files in Python
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析 Python 中的 TOML 文件
- en: 'Consider a sample TOML file, say db_config.toml, containing the required info
    to connect to the database:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个示例 TOML 文件，例如 db_config.toml，包含连接数据库所需的信息：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note**: You need Python 3.11 or a later version to use [tomllib](https://docs.python.org/3/library/tomllib.html).'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：你需要 Python 3.11 或更高版本才能使用 [tomllib](https://docs.python.org/3/library/tomllib.html)。'
- en: 'Python has a built-in [tomllib](https://docs.python.org/3/library/tomllib.html)
    module (introduced in Python 3.11) that lets you parse TOML files. So you can
    open the db_config.toml file and parse its contents like so:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python 有一个内置的 [tomllib](https://docs.python.org/3/library/tomllib.html) 模块（在
    Python 3.11 中引入），可以让你解析 TOML 文件。因此，你可以打开 db_config.toml 文件并像这样解析其内容：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Notice that we tap into the ‘database’ section of the db_config.toml file.
    The `load()` function returns a Python dictionary. You can verify this by printing
    out the contents of `credentials`:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们访问了 db_config.toml 文件中的 ‘database’ 部分。`load()` 函数返回一个 Python 字典。你可以通过打印
    `credentials` 的内容来验证这一点：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Connecting to the Database
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接到数据库
- en: 'Say you want to connect to a Postgres database. You can install the [psycopg2
    connector](https://www.psycopg.org/docs/) using pip:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想连接到一个 Postgres 数据库。你可以使用 pip 安装 [psycopg2 连接器](https://www.psycopg.org/docs/)：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can use both the connection and the cursor objects in with statements as
    shown:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样在 `with` 语句中使用连接和游标对象：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In this code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中：
- en: We use the `with` statement to create a context for managing the database connection.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `with` 语句来创建一个管理数据库连接的上下文。
- en: Inside this context, we create another context to manage the database cursor.
    The cursor is automatically closed when exiting this inner context.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这个上下文中，我们创建了另一个上下文来管理数据库游标。游标在退出这个内部上下文时会自动关闭。
- en: Because the connection is also closed when exiting the outer context, this construct
    ensures that both the connection and cursor are properly managed—reducing the
    chance of resource leaks.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于在退出外部上下文时连接也会被关闭，这种构造确保了连接和游标都得到正确管理——减少了资源泄漏的可能性。
- en: You can use a similar construct when working with SQLite and MySQL databases
    too.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 SQLite 和 MySQL 数据库时，你也可以使用类似的构造。
- en: 2\. Managing Python Subprocesses
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 管理 Python 子进程
- en: 'Python’s subprocess module provides functionality to run external commands
    inside a Python script. The `subprocess.Popen()` constructor creates a new subprocess.
    Which you can use in a `with` statement like so:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 subprocess 模块提供了在 Python 脚本中运行外部命令的功能。`subprocess.Popen()` 构造函数创建一个新的子进程。你可以在
    `with` 语句中像这样使用它：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, we run the Bash command `ls -l` command to long list the files in the
    current directory:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们运行 Bash 命令 `ls -l` 来长列表显示当前目录中的文件：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The resources associated with the subprocess are freed once the execution exits
    the context of the `with` statement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦退出 `with` 语句的上下文，子进程相关的资源会被释放。
- en: 3\. High-Precision Floating-Point Arithmetic
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 高精度浮点运算
- en: The built-in float data type in Python is not suitable for high-precision floating-point
    arithmetic. But you do need high precision when working with financial data, sensor
    readings, and the like. For such applications, you can use the [decimal](https://docs.python.org/3/library/decimal.html)
    module instead.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的内置 float 数据类型不适合高精度浮点运算。但在处理财务数据、传感器读数等时，你确实需要高精度。对于这种应用，你可以使用 [decimal](https://docs.python.org/3/library/decimal.html)
    模块。
- en: 'The `localcontext()` function [returns a context manager](https://docs.python.org/3/library/decimal.html#decimal.localcontext).
    So you can use the `localcontext()` function in the `with` statement, and set
    the precision for the current context using as shown:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`localcontext()` 函数 [返回一个上下文管理器](https://docs.python.org/3/library/decimal.html#decimal.localcontext)。因此，你可以在
    `with` 语句中使用 `localcontext()` 函数，并按如下方式设置当前上下文的精度：'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here’s the output:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, the precision is set to 40 decimal places—but only within this `with`
    block. When the execution exits the current context, the precision is restored
    to the default precision (of 28 decimal places).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，精度设置为 40 位小数——但仅在当前 `with` 块内。当执行退出当前上下文时，精度将恢复为默认精度（28 位小数）。
- en: Wrapping Up
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this tutorial, we learned how context managers can be used for handling database
    connections, managing subprocesses and contexts in high-precision floating-point
    arithmetic.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们学习了如何使用上下文管理器处理数据库连接、管理子进程以及在高精度浮点运算中的上下文。
- en: In the next tutorial, we’ll see how we can create custom context managers in
    Python. Until then, happy coding!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节教程中，我们将探讨如何在 Python 中创建自定义上下文管理器。在此之前，祝编程愉快！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)**是来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专长领域包括
    DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正致力于通过撰写教程、使用指南、评论文章等方式学习并与开发者社区分享她的知识。Bala
    还创建了引人入胜的资源概述和编程教程。**'
- en: More On This Topic
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How To Create Custom Context Managers in Python](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Python 中创建自定义上下文管理器](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)'
- en: '[How LinkedIn Uses Machine Learning To Rank Your Feed](https://www.kdnuggets.com/2022/11/linkedin-uses-machine-learning-rank-feed.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LinkedIn 如何使用机器学习来排序你的动态](https://www.kdnuggets.com/2022/11/linkedin-uses-machine-learning-rank-feed.html)'
- en: '[Top Programming Languages and Their Uses](https://www.kdnuggets.com/2021/05/top-programming-languages.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[顶级编程语言及其用途](https://www.kdnuggets.com/2021/05/top-programming-languages.html)'
- en: '[KDnuggets™ News 22:n04, Jan 26: The High Paying Side Hustles…](https://www.kdnuggets.com/2022/n04.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets™ 新闻 22:n04，1 月 26 日：高薪兼职……](https://www.kdnuggets.com/2022/n04.html)'
- en: '[KDnuggets News, November 16: How LinkedIn Uses Machine Learning •…](https://www.kdnuggets.com/2022/n45.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，11 月 16 日：LinkedIn 如何使用机器学习 •…](https://www.kdnuggets.com/2022/n45.html)'
- en: '[Sky''s the Limit: Learn how JetBlue uses Monte Carlo and Snowflake…](https://www.kdnuggets.com/2022/12/monte-carlo-jetblue-snowflake-build-trust-improve-model-accuracy.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[天高任鸟飞：了解 JetBlue 如何使用 Monte Carlo 和 Snowflake……](https://www.kdnuggets.com/2022/12/monte-carlo-jetblue-snowflake-build-trust-improve-model-accuracy.html)'
