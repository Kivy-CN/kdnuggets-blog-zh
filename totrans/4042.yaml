- en: Introduction to Multithreading and Multiprocessing in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python](https://www.kdnuggets.com/introduction-to-multithreading-and-multiprocessing-in-python)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/cb420b3a256c558e26a8195c8f8b8f19.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will discuss leveraging Python’s capability to execute multithreading
    and multiprogramming tasks. They offer a gateway to perform concurrent operations
    within a single process or across multiple processes. Parallel and concurrent
    execution increases the speed and efficiency of the systems. After discussing
    the basics of multithreading and multiprogramming, we will also discuss their
    practical implementation using Python libraries. Let’s first briefly discuss the
    benefits of parallel systems.
  prefs: []
  type: TYPE_NORMAL
- en: '**Improved Performance:** With the capability to perform tasks concurrently,
    we can reduce the execution time and improve the system''s overall performance.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scalability:** We can divide a large task into various smaller sub-tasks
    and assign a separate core or thread to them for their independent execution.
    It can be helpful in large-scale systems.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Efficient I/O Operations:** With the help of concurrency, the CPU doesn’t
    have to wait for a process to complete its I/O operations. The CPU can immediately
    start executing the following process until the previous process is busy with
    its I/O.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Resource Optimization:** By dividing the resources, we can prevent a single
    process from taking up all the resources. This can avoid the problem of [Starvation](https://unstop.com/blog/starvation-in-os)
    for smaller processes.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/f451d0f072135ea807e674af48b2f151.png)'
  prefs: []
  type: TYPE_IMG
- en: Benefits of Parallel Computing | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: These are some common reasons for which you require concurrent or parallel executions.
    Now, move back to the main topics, i.e., Multithreading and Multiprogramming,
    and discuss their primary differences.
  prefs: []
  type: TYPE_NORMAL
- en: What is Multithreading?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multithreading is one of the ways to achieve parallelism in a single process
    and able to execute simultaneous tasks. Multiple threads can be created inside
    a single process and perform smaller tasks parallel within that process.
  prefs: []
  type: TYPE_NORMAL
- en: The threads present inside a single process share a common memory space, but
    their stack traces and registers are separate. They are less computationally expensive
    due to this shared memory.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/c8f8774c7606708d2d0b57d88e162529.png)'
  prefs: []
  type: TYPE_IMG
- en: Single Threaded & Multi Threaded Env. | Image by [GeeksForGeeks](https://www.geeksforgeeks.org/multithreading-python-set-1/)
  prefs: []
  type: TYPE_NORMAL
- en: Multithreading is primarily used in performing I/O operations, i.e., if some
    part of the program is busy in I/O operations, then the remaining program can
    be responsive. However, in Python’s implementation, multithreading cannot achieve
    true parallelism due to Global Interpreter Lock (GIL).
  prefs: []
  type: TYPE_NORMAL
- en: In short, GIL is a mutex lock that allows only one thread at a time to interact
    with the Python bytecode, i.e., even in the multithreaded mode, only one thread
    can execute the bytecode at a time.
  prefs: []
  type: TYPE_NORMAL
- en: It is done to maintain thread safety in CPython, but this limits the performance
    benefits of multithreading. To address this issue, python has a separate multiprocessing
    library, which we will discuss afterward.
  prefs: []
  type: TYPE_NORMAL
- en: '**What are Daemon Threads?**'
  prefs: []
  type: TYPE_NORMAL
- en: The threads which constantly run in the background are called the demon threads.
    Their main job is to support the main thread or the non-daemon threads. The daemon
    thread does not block the main thread from execution and even keeps running if
    it has completed its execution.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, the daemon threads are mainly used as a garbage collector. It will
    destroy all the useless objects and free the memory by default so that the main
    thread can be used and executed properly.
  prefs: []
  type: TYPE_NORMAL
- en: What is Multiprocessing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multiprocessing is used to perform the parallel execution of multiple processes.
    It helps us achieve true parallelism, as we execute separate processes simultaneously,
    having their own memory space. It uses separate cores of the CPU and is also helpful
    in performing inter-process communication to exchange data between multiple processes.
  prefs: []
  type: TYPE_NORMAL
- en: Multiprocessing is more computationally expensive as compared to multithreading,
    as we are not using a shared memory space. Still, it allows us for independent
    execution and overcomes Global Interpreter Lock's limitations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Multithreading and Multiprocessing in Python](../Images/7c416ec2fca38d97f879cfd44bbbb45c.png)'
  prefs: []
  type: TYPE_IMG
- en: Multiprocessing Environment | Image by [GeeksForGeeks](https://www.geeksforgeeks.org/multiprocessing-python-set-1/)
  prefs: []
  type: TYPE_NORMAL
- en: The above figure demonstrates a multi-processing environment in which a main
    process creates two separate processes and assigns separate work to them.
  prefs: []
  type: TYPE_NORMAL
- en: Multithreading Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s time to implement a basic example of multithreading using Python. Python
    has an inbuilt module `threading` used for the multithreading implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing Libraries:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Function to Calculate the Squares:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a simple function used to find the square of numbers. A list of numbers
    is given as input, and it outputs the square of each number of the list along
    with the name of the thread used and the process ID associated with that thread.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Main Function:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a list of numbers and we will divide that list equally and name them
    as fisrt_half and `second_half` respectively. Now we will assign two separate
    threads `t1` and `t2` to these lists.
  prefs: []
  type: TYPE_NORMAL
- en: '`Thread` function creates a new thread, which takes a function with a list
    of arguments to that function. You can also assign a separate name to a thread.'
  prefs: []
  type: TYPE_NORMAL
- en: '`.start()` function will start executing these threads and `.join()` function
    will block the execution of the main thread until the given thread is not executed
    completely.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** All the threads created above are non-daemon threads. To create a
    daemon thread, you need to write `t1.setDaemon(True)` to make the thread `t1`
    a daemon thread.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Now, we will understand the output generated by the above code. We can observe
    that the process ID (i.e., PID) will remain the same for both threads, which means
    that these two threads are part of the same process.
  prefs: []
  type: TYPE_NORMAL
- en: You can also observe that the output is not generated sequentially. In the first
    line, you will see the output generated by thread1, then in the 3rd line, the
    output generated by thread2, then again by thread1 in the fourth line. This clearly
    signifies that these threads work together concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: Concurrency doesn’t mean these two threads are executed parallelly, as only
    one thread is executed at a time. It doesn’t reduce the execution time. It takes
    the same time as sequential execution. CPU starts executing a thread but leaves
    it midway and moves to another thread, and after some time, comes back to the
    main thread and starts its execution from the same point it left last time.
  prefs: []
  type: TYPE_NORMAL
- en: Multiprocessing Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I hope you have a basic understanding of multithreading with its implementation
    and its limitations. Now, it’s time to learn about multiprocessing implementation
    and how we can overcome those limitations.
  prefs: []
  type: TYPE_NORMAL
- en: We will follow the same example, but instead of creating two separate threads,
    we will create two independent processes and discuss the observations.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing Libraries:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We will use the `multiprocessing` module to create independent processes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Function to Calculate the Squares:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That function will remain the same. We have just removed the print statement
    of threading information.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Main Function:**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are a few modifications in the main function. We have just created a separate
    process instead of a thread.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have observed that a separate process executes each list. Both have different
    process IDs. To check whether our processes have been executed parallelly, we
    need to create a separate environment, which we will discuss below.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating Runtime With and Without Multiprocessing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To check whether we get a true parallelism, we will calculate the algorithm's
    runtime with and without multiprocessing.
  prefs: []
  type: TYPE_NORMAL
- en: For this, we will require an extensive list of integers that contain more than
    10^6 integers. We can generate a list using `random` library. We will use the
    `time` module of Python to calculate the runtime. Below is the implementation
    for this. The code is self-explanatory, although you can always look at the code
    comments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You can observe that the time with multiprocessing is almost half as compared
    to without multiprocessing. This shows that these two processes are executed simultaneously
    at a time and show a behavior of true parallelism.
  prefs: []
  type: TYPE_NORMAL
- en: You can also read this article [Sequential vs Concurrent vs Parallelism](https://blog.bitsrc.io/sequential-vs-concurrent-vs-parallelism-87d1907e5be0)
    from Medium, which will help you to understand the basic difference between these
    Sequential, Concurrent and Parallel processes.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)****
    is a B.Tech. Electrical Engineering student, currently in the final year of his
    undergrad. His interest lies in the field of Web Development and Machine Learning.
    He have pursued this interest and am eager to work more in these directions.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multilabel Classification: An Introduction with Python''s Scikit-Learn](https://www.kdnuggets.com/2023/08/multilabel-classification-introduction-python-scikitlearn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Memory Profiling in Python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Duck, Duck, Code: An Introduction to Python''s Duck Typing](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to __getitem__: A Magic Method in Python](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Python Libraries for Data Cleaning](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
