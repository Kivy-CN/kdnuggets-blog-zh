- en: Building a Convolutional Neural Network with PyTorch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch](https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Building a Convolutional Neural Network with PyTorch](../Images/ef57307f5583535b4a1ad4932adafb8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: A Convolutional Neural Network (CNN or ConvNet) is a deep learning algorithm
    specifically designed for tasks where object recognition is crucial - like image
    classification, detection, and segmentation. CNNs are able to achieve state-of-the-art
    accuracy on complex vision tasks, powering many real-life applications such as
    surveillance systems, warehouse management, and more.
  prefs: []
  type: TYPE_NORMAL
- en: As humans, we can easily recognize objects in images by analyzing patterns,
    shapes, and colors. CNNs can be trained to perform this recognition too, by learning
    which patterns are important for differentiation. For example, when trying to
    distinguish between a photo of a Cat versus a Dog, our brain focuses on unique
    shape, textures, and facial features. A CNN learns to pick up on these same types
    of distinguishing characteristics. Even for very fine-grained categorization tasks,
    CNNs are able to learn complex feature representations directly from pixels.
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, we will learn about Convolutional Neural Networks and how
    to use them to build an image classifier with PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: How Convolutional Neural Networks Work?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Convolutional neural networks (CNNs) are commonly used for image classification
    tasks. At a high level, CNNs contain three main types of layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convolutional layers.** Apply convolutional filters to the input to extract
    features. The neurons in these layers are called filters and capture spatial patterns
    in the input.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pooling layers.** Downsample the feature maps from the convolutional layers
    to consolidate information. Max pooling and average pooling are commonly used
    strategies.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fully-connected layers.** Take the high-level features from the convolutional
    and pooling layers as input for classification. Multiple fully-connected layers
    can be stacked.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The convolutional filters act as feature detectors, learning to activate when
    they see specific types of patterns or shapes in the input image. As these filters
    are applied across the image, they produce feature maps that highlight where certain
    features are present.
  prefs: []
  type: TYPE_NORMAL
- en: For example, one filter might activate when it sees vertical lines, producing
    a feature map showing the vertical lines in the image. Multiple filters applied
    to the same input produce a stack of feature maps, capturing different aspects
    of the image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Convolutional Neural Network with PyTorch](../Images/d6733d2f3d9da90f08c34a309f0339f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Gif by [IceCream Labs](https://icecreamlabs.medium.com/3x3-convolution-filters-a-popular-choice-75ab1c8b4da8)
  prefs: []
  type: TYPE_NORMAL
- en: By stacking multiple convolutional layers, a CNN can learn hierarchies of features
    - building up from simple edges and patterns to more complex shapes and objects.
    The pooling layers help consolidate the feature representations and provide translational
    invariance.
  prefs: []
  type: TYPE_NORMAL
- en: The final fully-connected layers take these learned feature representations
    and use them for classification. For an image classification task, the output
    layer typically uses a softmax activation to produce a probability distribution
    over classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyTorch, we can define the convolutional, pooling, and fully-connected layers
    to build up a CNN architecture. Here is some sample code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We can then train the CNN on image data, using backpropagation and optimization.
    The convolutional and pooling layers will automatically learn effective feature
    representations, allowing the network to achieve strong performance on vision
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with CNNs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will load CIFAR10 and build and train a CNN-based classification
    model using PyTorch. The CIFAR10 dataset provides 32x32 RGB images across ten
    classes, which is useful for testing image classification models. There are ten
    classes labeled in integers 0 to 9.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** The example code is the modified version from [MachineLearningMastery.com](https://machinelearningmastery.com/building-a-convolutional-neural-network-in-pytorch/)
    blog.'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will use torchvision to download and load the CIFAR10 dataset. We
    will also use torchvision to transform both the testing and training sets to tensors.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: After that, we will use a data loader and split the images into the batches.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: To visualize the image in a single batch of the images, we will use matplotlib
    and torchvision utility function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As we can see, we have images of cars, animals, planes, and boats.
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a Convolutional Neural Network with PyTorch](../Images/b79babc9d3e180de665c0c58332fc19d.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will build our CNN model. For that, we have to create a Python class
    and initialize the convolutions, maxpool, and fully connected layers. Our architecture
    has 2 convolutional layers with pooling and linear layers.
  prefs: []
  type: TYPE_NORMAL
- en: After initializing, we will not connect all the layers sequentially in the forward
    function. If you are new to PyTorch, you should read [Interpretable Neural Networks
    with PyTorch](/2022/01/interpretable-neural-networks-pytorch.html) to understand
    each component in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will now initialize our model, set loss function, and optimizer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the training phase, we will train our model for 10 epochs.
  prefs: []
  type: TYPE_NORMAL
- en: We are using the forward function of the model for a forward pass, then a backward
    pass using the loss function, and finally updating the weights. This step is almost
    similar in all kinds of neural network models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, we are using a test data loader to evaluate model performance at
    the end of each epoch.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculating the accuracy of the model and printing the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Our simple model has achieved 57% accuracy, which is bad. But, you can improve
    the model performance by adding more layers, running it for more epochs, and hyperparameter
    optimization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With PyTorch, you don't have to create all the components of convolutional neural
    networks from scratch as they are already available. It becomes even simpler if
    you use `torch.nn.Sequential`. PyTorch is designed to be modular and offers greater
    flexibility in building, training, and assessing neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this post, we explored how to build and train a convolutional neural network
    for image classification using PyTorch. We covered the core components of CNN
    architectures - convolutional layers for feature extraction, pooling layers for
    downsampling, and fully-connected layers for prediction.
  prefs: []
  type: TYPE_NORMAL
- en: I hope this post provided a helpful overview of implementing convolutional neural
    networks with PyTorch. CNNs are fundamental architecture in deep learning for
    computer vision, and PyTorch gives us the flexibility to quickly build, train,
    and evaluate these models.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://www.linkedin.com/in/1abidaliawan/))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Learn Deep Learning by Building 15 Neural Network Projects in 2022](https://www.kdnuggets.com/2022/01/15-neural-network-projects-build-2022.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building and Training Your First Neural Network with TensorFlow and Keras](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Image Classification with Convolutional Neural Networks (CNNs)](https://www.kdnuggets.com/2022/05/image-classification-convolutional-neural-networks-cnns.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Comprehensive Guide to Convolutional Neural Networks](https://www.kdnuggets.com/2023/06/comprehensive-guide-convolutional-neural-networks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Neural Network Optimization with AIMET](https://www.kdnuggets.com/2022/04/qualcomm-neural-network-optimization-aimet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Importance of Permutation in Neural Network Predictions](https://www.kdnuggets.com/2022/12/importance-permutation-neural-network-predictions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
