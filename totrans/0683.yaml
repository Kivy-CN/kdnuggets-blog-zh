- en: Basic Image Data Analysis Using Numpy and OpenCV – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '![Image data analysis](../Images/127e44de481e6450fcc1ee887c8f133c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Introduction: A Little Bit About Pixel**'
  prefs: []
  type: TYPE_NORMAL
- en: Computer store images as a mosaic of tiny squares. This is like the ancient
    art form of tile mosaic, or the melting bead kits kids play with today. Now, if
    these square tiles are too big, it’s then hard to make smooth edges and curves.
    The more and smaller tiles we use, the smoother or as we say less pixelated, image
    will be. These sometimes gets referred to as resolution of the images.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Vector graphics are somewhat different method of storing images that aims to
    avoid pixel related issues. But even vector images, in the end, are displayed
    as a mosaic of pixels. The word pixel means a **picture element**. A simple way
    to describe each pixel is using a combination of three colors, namely **Red, Green,
    Blue**. This is what we call an **RGB** image.
  prefs: []
  type: TYPE_NORMAL
- en: In an RGB image, each pixel is represented by three **8 bit** numbers associated
    to the values for **Red, Green, Blue** respectively. Eventually using a magnifying
    glass, if we zoom a picture, we’ll see the picture is made up of tiny dots of
    little light or more specifically the pixels and what more interesting is to see
    that those tiny dots of little light are actually multiple tiny dots of little
    light of different colors which are nothing but **Red, Green, Blue** channels.
  prefs: []
  type: TYPE_NORMAL
- en: Pixel together from far away, create an image and upfront they’re just little
    lights that are **ON and OFF**. The combination of those create images and basically
    what we see on screen every single day.
  prefs: []
  type: TYPE_NORMAL
- en: Every photograph, in digital form, is made up of pixels. They are the smallest
    unit of information that makes up a picture. Usually round or square, they are
    typically arranged in a 2-dimensional grid.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if all three values are at full intensity, that means they’re 255, it then
    shows as white and if all three colors are muted, or has the value of 0, the color
    shows as black. The combination of these three will, in turn, give us a specific
    shade of the pixel color. Since each number is an **8-bit** number, the values
    range from 0-255.
  prefs: []
  type: TYPE_NORMAL
- en: '![Green RGB values](../Images/5495121edd0709f182bd817a0875f02a.png)'
  prefs: []
  type: TYPE_IMG
- en: Combination of these three color will possess tends to the highest value among
    them. Since each value can have 256 different intensity or brightness value, it
    makes **16.8** million total shades.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we'll observe some following stuffs which is very basic fundamental image
    data analysis with Numpy and some concern Python packages, like `imageio , matplotlib`
    etc.
  prefs: []
  type: TYPE_NORMAL
- en: '**Importing images and observe its properties**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Splitting the layers**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Grey scale**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Using Logical Operator on pixel values**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Masking using Logical Operator**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Satellite Image Data Analysis**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Importing Image**'
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s load an image and observe its various properties in general.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 1](../Images/e149c127896ae68cfb96020745d71da7.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Observe Basic Properties of Image**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The shape of the ndarray is a three layered matrix. The first two numbers here
    are length and width, and the third number (i.e. 3) is for the three layers: **Red,
    Green, Blue**. So, if we calculate the size of a RGB image, the total size will
    be counted as **height x width x 3**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These values are important to verify since the eight-bit color intensity is,
    cannot be outside of the 0 to 255 range.
  prefs: []
  type: TYPE_NORMAL
- en: Now, using the picture assigned variable we can also access any particular pixel
    value of an image and further can access each **RGB** channel separately.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In these case: R = 109; G = 143 ; B = 46 and we can realize that this particular
    pixel has a lot of GREEN in it. And now we could have also selected one of this
    number specifically by giving the index value of these three channel. Now we know
    for this'
  prefs: []
  type: TYPE_NORMAL
- en: '**0**index value for **Red** channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1**index value for **Green** channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**index value for **Blue** channel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But good to know that in OpenCV, Images takes as not RGB but BGR. **imageio.imread**
    loads image as RGB (or RGBA), but OpenCV assumes the image to be [BGR or BGRA](https://docs.opencv.org/trunk/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce)
    (BGR is the default OpenCV colour format).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: OK, now let’s take a quick view of each channels in the whole image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 2](../Images/c3c792d1b09ae6817ec777205dfe4160.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 3](../Images/bb7721ebe0b2d2c41528a9e1373f32c9.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 4](../Images/c288831fa64474147057f24bc963d2e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, here we can also able to change the number of RGB values. As an example,
    let’s set the Red, Green, Blue layer for following Rows values to full intensity.
  prefs: []
  type: TYPE_NORMAL
- en: 'R channel: Row- 100 to 110'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'G channel: Row- 200 to 210'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'B channel: Row- 300 to 310'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll load the image once, so that we can visualize each change simultaneously
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 5](../Images/a94e6429f1f8d7934a41a99977a101cf.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 6](../Images/fad38515e49e778ae04cfbeb906febf0.png)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 7](../Images/a4aae040b8720f289720f51659b527e5.png)'
  prefs: []
  type: TYPE_IMG
- en: To make it more clear let’s change the column section too and this time we’ll
    change the RGB channel simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 8](../Images/d7b5fa4a32e786a613144bb96f79f818.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Splitting Layers**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we know that each pixel of the image is represented by three integers.
    Splitting the image into separate color components is just a matter of pulling
    out the correct slice of the image array.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 9](../Images/368694b99a95b272d3c34e785aa9ba94.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Greyscale**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Black and white images are stored in 2-Dimentional arrays. There’re two types
    of Black and White images:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Greyscale**: Ranges of shades of grey: **0**~ **255**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Binary**: Pixel are either black or white: **0**or **255**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, Greyscaling is such process by which an image is converted from a full
    color to shades of grey. In image processing tools, for example: in OpenCV, many
    functions uses gray scale images before processing and this is done because it
    simplifies the image, acting almost as a noise reduction and increasing processing
    time as there’s less information in the images.'
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of ways to do this in python to [convert image to grayscale](https://stackoverflow.com/a/45338831/9215780).
    But a straight forward way using matplotlib is to take the weighted mean of the
    RGB value of original image using [this](https://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale)
    formula.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Image figure 10](../Images/5736a928c4b75d5ed525a79e22bfbb00.png)'
  prefs: []
  type: TYPE_IMG
- en: However, the [GIMP](https://docs.gimp.org/2.6/en/gimp-tool-desaturate.html)
    converting color to grayscale image software has three algorithms to do the task.
  prefs: []
  type: TYPE_NORMAL
- en: '**Lightness** The graylevel will be calculated as'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Luminosity** The gray level will be calculated as'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '**Average** The gray level will be calculated as'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let’s give a try one of their algorithm, what about Luminosity.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here is [the second part](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Mohammed Innat](https://twitter.com/innat_2k14)** is currently a fourth
    year undergraduate student majoring in electronics and communication. He is passionate
    about applying his knowledge of machine learning and data science to areas in
    healthcare and crime forecast where better solutions can be engineered in medical
    sector and security department.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[DIY Deep Learning Projects](https://www.kdnuggets.com/2018/06/diy-deep-learning-projects.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unleash a faster Python on Your Data.](https://www.kdnuggets.com/2018/05/intel-unleash-faster-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 20 Python Libraries for Data Science in 2018](https://www.kdnuggets.com/2018/06/top-20-python-libraries-data-science-2018.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy for Image Processing](https://www.kdnuggets.com/numpy-for-image-processing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Guide to Train an Image Classification Model Using Tensorflow](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How I Did Automatic Image Labeling Using Grounding DINO](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[It''s alive! Build your first robots with Python and some cheap,…](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
