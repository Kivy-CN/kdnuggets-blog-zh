["```py\nfrom datasets import load_dataset, list_datasets\n\nprint(f\"The Hugging Face datasets library contains {len(list_datasets())} datasets\")\n\nsquad_dataset = load_dataset('squad')\n\nprint(squad_dataset['train'][0])\nprint(squad_dataset)\n```", "```py\nThe Hugging Face datasets library contains 635 datasets\n\nReusing dataset squad (/home/matt/.cache/huggingface/datasets/squad/plain_text/1.0.0/4c81550d83a2ac7c7ce23783bd8ff36642800e6633c1f18417fb58c3ff50cdd7)\n\n{'answers': {'answer_start': [515], 'text': ['Saint Bernadette Soubirous']}, 'context': 'Architecturally, the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend \"Venite Ad Me Omnes\". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858\\. At the end of the main drive (and in a direct line that connects through 3 statues and the Gold Dome), is a simple, modern stone statue of Mary.', 'id': '5733be284776f41900661182', 'question': 'To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France?', 'title': 'University_of_Notre_Dame'}\n\nDatasetDict({\n    train: Dataset({\n        features: ['id', 'title', 'context', 'question', 'answers'],\n        num_rows: 87599\n    })\n    validation: Dataset({\n        features: ['id', 'title', 'context', 'question', 'answers'],\n        num_rows: 10570\n    })\n})\n```", "```py\nfrom datasets import load_metric, list_metrics\n\nprint(f\"The Hugging Face datasets library contains {len(list_metrics())} metrics\")\nprint(f\"Available metrics are: {list_metrics()}\")\n\n# Load a metric\nsquad_metric = load_metric('squad')\n```", "```py\nThe Hugging Face datasets library contains 19 metrics\n\nAvailable metrics are: ['accuracy', 'bertscore', 'bleu', 'bleurt', 'comet', 'coval', 'f1', 'gleu', 'glue', 'indic_glue', 'meteor', 'precision', 'recall', 'rouge', 'sacrebleu', 'seqeval', 'squad', 'squad_v2', 'xnli']\n\n```", "```py\ndef text_texthero():\n\timport texthero as hero\n\timport pandas as pd\n\n\tdf = pd.read_csv(\"https://github.com/jbesomi/texthero/raw/master/dataset/bbcsport.csv\")\n\n\tdf['pca'] = (\n\t\tdf['text']\n\t\t\t.pipe(hero.clean)\n\t\t\t.pipe(hero.tfidf)\n\t\t\t.pipe(hero.pca)\n\t\t)\n\n\thero.scatterplot(df, 'pca', color='topic', title=\"PCA BBC Sport news\")\n```", "```py\nsample = u\"I can't imagine spending $3000 for a single bedroom apartment in N.Y.C.\"\n```", "```py\nimport spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\n\nnlp = spacy.load('en')\ndoc = nlp(sample)\n```", "```py\n# Print out tokens\nprint(\"Tokens:\\n=======)\nfor token in doc:\n    print(token)\n\n# Identify stop words\nprint(\"Stop words:\\n===========\")\nfor word in doc:\n    if word.is_stop == True:\n        print(word)\n\n# POS tagging\nprint(\"POS tagging:\\n============\")\nfor token in doc:\n    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n          token.shape_, token.is_alpha, token.is_stop)\n\n# Print out named entities\nprint(\"Named entities:\\n===============\")\nfor ent in doc.ents:\n    print(ent.text, ent.start_char, ent.end_char, ent.label_)\n```", "```py\nTokens:\n=======\nI\nca\nn't\nimagine\nspending\n$\n3000\nfor\na\nsingle\nbedroom\napartment\nin\nN.Y.C.\n\nStop words:\n===========\nca\nfor\na\nin\n\nPOS tagging:\n============\nI -PRON- PRON PRP nsubj X True False\nca can VERB MD aux xx True True\nn't not ADV RB neg x'x False False\nimagine imagine VERB VB ROOT xxxx True False\nspending spend VERB VBG xcomp xxxx True False\n$ $ SYM $ nmod $ False False\n3000 3000 NUM CD dobj dddd False False\nfor for ADP IN prep xxx True True\na a DET DT det x True True\nsingle single ADJ JJ amod xxxx True False\nbedroom bedroom NOUN NN compound xxxx True False\napartment apartment NOUN NN pobj xxxx True False\nin in ADP IN prep xx True True\nN.Y.C. n.y.c. PROPN NNP pobj X.X.X. False False\n\nNamed entities:\n===============\n3000 26 30 MONEY\nN.Y.C. 65 71 GPE\n```", "```py\nfrom transformers import pipeline\n\n# Allocate a pipeline for sentiment-analysis\nclassifier = pipeline('sentiment-analysis')\n\n# Classify text\nprint(classifier('I am a fan of KDnuggets, its useful content, and its helpful editors!'))\n```", "```py\n[{'label': 'POSITIVE', 'score': 0.9954679012298584}]\n```", "```py\nfrom transformers import pipeline\n\n# Allocate a pipeline for question-answering\nquestion_answerer = pipeline('question-answering')\n\n# Ask a question\nanswer = question_answerer({\n\t'question': 'Where is KDnuggets headquartered?',\n\t'context': 'KDnuggets was founded in February of 1997 by Gregory Piatetsky in Brookline, Massachusetts.'\n})\n\n# Print the answer\nprint(answer)\n```", "```py\n{'score': 0.9153624176979065, 'start': 66, 'end': 90, 'answer': 'Brookline, Massachusetts'}\n```", "```py\nimport scattertext as st\n\ndf = st.SampleCorpora.ConventionData2012.get_data().assign(\n    parse=lambda df: df.text.apply(st.whitespace_nlp_with_sentences)\n)\n\ncorpus = st.CorpusFromParsedDocuments(\n    df, category_col='party', parsed_col='parse'\n).build().get_unigram_corpus().compact(st.AssociationCompactor(2000))\n\nhtml = st.produce_scattertext_explorer(\n    corpus,\n    category='democrat', category_name='Democratic', not_category_name='Republican',\n    minimum_term_frequency=0, pmi_threshold_coefficient=0,\n    width_in_pixels=1000, metadata=corpus.get_df()['speaker'],\n    transform=st.Scalers.dense_rank\n)\nopen('./demo_compact.html', 'w').write(html)\n```"]