- en: 'Computer Vision for Beginners: Part 1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算机视觉初学者：第 1 部分
- en: 原文：[https://www.kdnuggets.com/2019/07/computer-vision-beginners.html](https://www.kdnuggets.com/2019/07/computer-vision-beginners.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/07/computer-vision-beginners.html](https://www.kdnuggets.com/2019/07/computer-vision-beginners.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**By [Jiwon Jeong](https://jjone36.github.io/), Data Science Researcher at
    Yonsei University and Project Instructor at DataCamp**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者 [Jiwon Jeong](https://jjone36.github.io/)，延世大学数据科学研究员和 DataCamp 项目讲师**'
- en: '![figure-name](../Images/5007e1d7405109ae8a4dc2d54a52f3ed.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/5007e1d7405109ae8a4dc2d54a52f3ed.png)'
- en: Computer Vision is one of the hottest topics in artificial intelligence. It
    is making tremendous advances in self-driving cars, robotics as well as in various
    photo correction apps. Steady progress in object detection is being made every
    day. GANs is also a thing researchers are putting their eyes on these days. Vision
    is showing us the future of technology and we can’t even imagine what will be
    the end of its possibilities.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机视觉是人工智能中最热门的话题之一。它在自动驾驶汽车、机器人以及各种照片修正应用程序中取得了巨大进展。物体检测的稳步进展每天都在进行。GANs 也是研究人员当前关注的焦点。视觉展示了技术的未来，我们甚至无法想象它的最终可能性。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT 事务'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'So do you want to take your first step in Computer Vision and participate in
    this latest movement? Welcome you are at the right place. From this article, we’re
    going to have a series of tutorials on the basics of image processing and object
    detection. This is the first part of OpenCV tutorial for beginners and the complete
    set of the series is as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你想迈出计算机视觉的第一步并参与这场最新的潮流吗？欢迎，你来对地方了。通过这篇文章，我们将进行一系列关于图像处理和物体检测基础的教程。这是针对初学者的
    OpenCV 教程的第一部分，系列的完整内容如下：
- en: '***Understanding color models and drawing figures on images***'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '***理解颜色模型和在图像上绘制图形***'
- en: '[The basics of image processing with filtering](https://towardsdatascience.com/computer-vision-for-beginners-part-2-29b3f9151874)'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[图像处理基础与过滤](https://towardsdatascience.com/computer-vision-for-beginners-part-2-29b3f9151874)'
- en: '[From feature detection to face detection](https://towardsdatascience.com/computer-vision-for-beginners-part-3-79de62dbeef7)'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[从特征检测到人脸检测](https://towardsdatascience.com/computer-vision-for-beginners-part-3-79de62dbeef7)'
- en: '[Contour detection and having a little bit of fun](https://towardsdatascience.com/computer-vision-for-beginners-part-4-64a8d9856208)'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[轮廓检测和一点乐趣](https://towardsdatascience.com/computer-vision-for-beginners-part-4-64a8d9856208)'
- en: The first story of this series will be about installing OpenCV, explaining color
    models and drawing figures on images. The complete code for this tutorial is also
    available on [**Github**](https://github.com/jjone36/vision_4_beginners/blob/master/part1_introduction.ipynb).
    Now let’s get it started.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本系列的第一个故事将涉及安装 OpenCV，解释颜色模型和在图像上绘制图形。本教程的完整代码也可以在[**Github**](https://github.com/jjone36/vision_4_beginners/blob/master/part1_introduction.ipynb)上找到。现在让我们开始吧。
- en: Introduction to OpenCV
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: OpenCV 简介
- en: '[**Image processing**](https://en.wikipedia.org/wiki/Digital_image_processing) is
    performing some operations on images to get an intended manipulation. Think about
    what we do when we start a new data analysis. We do some data preprocessing and
    feature engineering. It’s the same with image processing. We do image processing
    to manipulate the pictures for extracting some useful information from them. We
    can reduce noises, control the brightness and color contrast. To learn detailed
    image processing fundamentals, visit [**this video**](https://www.youtube.com/watch?v=QMLbTEQJCaI)**.**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[**图像处理**](https://en.wikipedia.org/wiki/Digital_image_processing) 是对图像执行某些操作以获得预期的处理效果。想想我们在开始新的数据分析时会做什么。我们进行数据预处理和特征工程。图像处理也是一样的。我们进行图像处理以操控图片，从中提取有用的信息。我们可以减少噪声，控制亮度和颜色对比度。要学习详细的图像处理基础知识，请访问 [**这个视频**](https://www.youtube.com/watch?v=QMLbTEQJCaI)**。**'
- en: OpenCV stands for [***Open Source Computer Vision***](https://opencv.org/) library
    and it’s invented by Intel in 1999\. It’s first written in C/C++ so you may see
    tutorials more in C languages than Python. But now it’s also getting commonly
    used in Python for computer vision as well. First things first, let’s set up a
    proper environment for using OpenCV. The installation can be processed as follows
    but you can also find the detailed description [**here**](https://pypi.org/project/opencv-python/)**.**
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 代表 [***开源计算机视觉***](https://opencv.org/) 库，它由英特尔于 1999 年发明。它最初是用 C/C++
    编写的，因此你可能会看到更多的 C 语言教程而非 Python。不过，现在它在计算机视觉中也被广泛用于 Python。首先，我们需要为使用 OpenCV 设置一个合适的环境。安装过程如下所示，但你也可以在 [**这里**](https://pypi.org/project/opencv-python/)**找到详细说明**。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After you finish the installation, try importing the package to see if it works
    well. If you get the return without any errors, then you’re now ready to go!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，尝试导入包以查看它是否正常工作。如果没有出现任何错误返回，那么你现在可以开始使用了！
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first step we’re going to do with OpenCV is importing an image and it can
    be done as follows.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 OpenCV 的第一步是导入图像，可以按照如下步骤完成。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![figure-name](../Images/5ad18b325ea14b7b12dc6d4d9ab0a8d9.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/5ad18b325ea14b7b12dc6d4d9ab0a8d9.png)'
- en: Have you ever been to [Burano](https://en.wikipedia.org/wiki/Burano)? It’s one
    of the most beautiful islands in Italy. If you haven’t been there, you should
    definitely check this place for your next holidays. But if you already know this
    island, you’d probably notice there’s something different in this picture. It’s
    a little bit different from the pictures we usually see from Burano. It should
    be more delightful than this!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你去过[布拉诺](https://en.wikipedia.org/wiki/Burano)吗？它是意大利最美丽的岛屿之一。如果你还没去过，下一次假期你一定要去看看。但如果你已经知道这个岛屿，你可能会注意到这张图片有些不同。它与我们通常看到的布拉诺的图片有些许差异。它应该比这张图更令人愉快！
- en: This is because the default setting of the color mode in OpenCV comes in the
    order of BGR, which is different from that of Matplotlib. Therefore to see the
    image in RGB mode, we need to convert it from BGR to RGB as follows.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 OpenCV 的默认颜色模式设置为 BGR 顺序，这与 Matplotlib 的顺序不同。因此，为了以 RGB 模式查看图像，我们需要将其从
    BGR 转换为 RGB，方法如下。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![figure-name](../Images/c769820a7097aa5f0f97a50047f590a6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/c769820a7097aa5f0f97a50047f590a6.png)'
- en: Now, this is Burano! Such a lovely island in Italy!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这就是布拉诺！意大利的一个可爱岛屿！
- en: More than just RGB
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不仅仅是 RGB
- en: Let’s talk about color modes a little bit more. [***A color model***](https://www.designersinsights.com/designer-resources/understanding-color-models/)is
    a system for creating a full range of colors using the primary colors. There are
    two different color models here: ***additive color models ***and ***subtractive
    color models***. Additive models use light to represent colors in computer screens
    while subtractive models use inks to print those digital images on papers. The
    primary colors are red, green and blue (RGB) for the first one and cyan, magenta,
    yellow and black (CMYK) for the latter one. All the other colors we see on images
    are made by combining or mixing these primary colors. So the pictures can be depicted
    a little bit differently when they are represented in RGB and CMYK.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们多谈谈一下颜色模式。 [***颜色模型***](https://www.designersinsights.com/designer-resources/understanding-color-models/)是一种使用原色创建全范围颜色的系统。这里有两种不同的颜色模型：***加色模型***和***减色模型***。加色模型使用光来表示计算机屏幕上的颜色，而减色模型使用墨水在纸上打印这些数字图像。前者的原色是红色、绿色和蓝色
    (RGB)，而后者的原色是青色、品红色、黄色和黑色 (CMYK)。我们在图像中看到的所有其他颜色都是通过组合或混合这些原色得到的。因此，当图像以 RGB 和
    CMYK 模式表示时，可能会有些许不同。
- en: '![figure-name](../Images/17b953b15aad988f3ba2669a62d4a533.png)([Source](https://www.kinkos.co.kr/bbs/board.php?bo_table=k_magazine&wr_id=9&page=2))'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/17b953b15aad988f3ba2669a62d4a533.png)([来源](https://www.kinkos.co.kr/bbs/board.php?bo_table=k_magazine&wr_id=9&page=2))'
- en: You would be pretty accustomed to these two kinds of models. In the world of
    color models, however, there are more than two kinds of models. Among them, ***grayscale,
    HSV ***and ***HLS ***are the ones you’re going to see quite often in computer
    vision.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对这两种模型已经比较熟悉。然而，在颜色模型的世界中，还有不止两种模型。其中，***灰度、HSV*** 和 ***HLS*** 是你在计算机视觉中会经常看到的模型。
- en: A grayscale is simple. It represents images and morphologies by the intensity
    of black and white, which means it has only one channel. To see images in grayscale,
    we need to convert the color mode into gray just as what we did with the BGR image
    earlier.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 灰度图像很简单。它通过黑白的强度来表示图像和形态，这意味着它只有一个通道。要查看灰度图像，我们需要将颜色模式转换为灰色，就像我们之前处理 BGR 图像一样。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![figure-name](../Images/3aac07bc0481921b78e5c9c40a8d7211.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/3aac07bc0481921b78e5c9c40a8d7211.png)'
- en: 'Actually, RGB images are made up by stacking three channels: R, G, and B. So
    if we take each channel and depict them one by one, we can comprehend how the
    color channels are structured.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，RGB 图像是通过叠加三个通道（R、G 和 B）组成的。因此，如果我们逐一展示每个通道，就可以理解颜色通道的结构。
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![figure-name](../Images/64bd3365de212fee1b86604e14e60e5f.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/64bd3365de212fee1b86604e14e60e5f.png)'
- en: Take a look at the images above. The three images show you how each channel
    is composed of. In the R channel picture, the part with the high saturation of
    red colors looks white. Why is that? This is because the values in the red color
    parts will be near 255\. And in grayscale mode, the higher the value is, the whiter
    the color becomes. You can also check this with G or B channels and compare how
    certain parts differ one from another.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下上面的图像。这三张图展示了每个通道的组成。在 R 通道的图片中，高饱和度的红色部分看起来是白色的。这是为什么呢？这是因为红色部分的值接近 255。在灰度模式中，值越高，颜色越白。你也可以用
    G 或 B 通道来检查并比较某些部分的差异。
- en: '![figure-name](../Images/b1729b10ba99c22ed72bca22ca8e0374.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/b1729b10ba99c22ed72bca22ca8e0374.png)'
- en: HSV and HLS take a bit different aspect. As you can see above, they have a three-dimensional
    representation, and it’s more similar to the way of human perception. ***HSV ***stands
    for hue, saturation and value. ***HSL ***stands for hue, saturation and lightness.
    The center axis for HSV is the value of colors while that for HSL is the amount
    of light. Along the angles from the center axis, there is hue, the actual colors.
    And the distance from the center axis belongs to saturation. Transforming the
    color mode can be done as follows.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: HSV 和 HLS 采用了稍微不同的视角。如上图所示，它们有三维表示，并且更类似于人类的感知方式。***HSV*** 代表色调、饱和度和明度。***HSL***
    代表色调、饱和度和亮度。HSV 的中心轴是颜色的明度，而 HSL 的中心轴是光的量。沿着从中心轴的角度，有色调，即实际颜色。而从中心轴的距离属于饱和度。颜色模式的转换可以按如下方式进行。
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![figure-name](../Images/fb6826753e3e9e9e1ab340e93c462c71.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/fb6826753e3e9e9e1ab340e93c462c71.png)'
- en: But why do we have to transform the colors? What are these for? One example
    that can give the answer is lane detection. Please take a look at the picture
    below. See how the lanes are detected in different color modes. During the computer
    vision task, we do multiple color mode transformation along with masking. If you’d
    like to find more about how image processing is applied in the lane detection
    task, feel free to check out [**this post**](https://towardsdatascience.com/finding-lane-lines-simple-pipeline-for-lane-detection-d02b62e7572b) by [nachiket
    tanksale](https://towardsdatascience.com/u/26a6ee15a5c5).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么我们需要转换颜色？这些转换有什么用？一个可以回答这个问题的例子是车道检测。请看下面的图片。查看在不同颜色模式下车道是如何被检测到的。在计算机视觉任务中，我们进行多次颜色模式转换和掩模操作。如果你想了解更多关于图像处理在车道检测任务中的应用，请查看 [**这篇文章**](https://towardsdatascience.com/finding-lane-lines-simple-pipeline-for-lane-detection-d02b62e7572b) ，作者是 [nachiket
    tanksale](https://towardsdatascience.com/u/26a6ee15a5c5)。
- en: '![figure-name](../Images/c2ac8d7d19ecde6eebb7b5c59510ee32.png)[RGB vs Grayscale
    (darkened) vs HSV vs HSL](https://towardsdatascience.com/finding-lane-lines-simple-pipeline-for-lane-detection-d02b62e7572b)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![figure-name](../Images/c2ac8d7d19ecde6eebb7b5c59510ee32.png)[RGB 与灰度（加深）与
    HSV 与 HSL](https://towardsdatascience.com/finding-lane-lines-simple-pipeline-for-lane-detection-d02b62e7572b)'
- en: Now I believe you get the idea. Image processing is ‘data preprocessing.’ It’s
    reducing noises and extracting useful patterns to make classification and detection
    tasks easier. Therefore all these techniques including the ones we’ll discuss
    later, are for helping the model to detect the patterns easier.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Drawing on images
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s bring some figures on the image. Now, we’re going to Paris. Have you ever
    heard of [the wall of love](https://en.wikipedia.org/wiki/Wall_of_Love)? It’s
    a wall which is filled with the words “I love you” in all kinds of international
    languages. What we’re going to do is finding the words in our language and marking
    them with a rectangle. As I’m from South Korea, I’ll look up for ‘I love you’
    in Korean. First, I’ll make a copy of the original image and then draw a rectangle
    with `cv2.rectangle()`We need to give the coordinates values for the upper left
    point and the lower right point.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![figure-name](../Images/4ef02ff84e85b9b46ba6337d092e0631.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Great! I think I caught the right position. Let’s try again. I can see one more
    Korean word from the image so I’ll make a circle this time. With `cv2.circle()` ,
    we need to specify the point of its center and the length of its radius.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![figure-name](../Images/94488ee3f81ceb9af5f97d188da32fdf.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: We can also put text data on the image. Why don’t we write the name of this
    wall this time? With `cv2.putText()` , we can designate the position and the font
    style and size of the text.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![figure-name](../Images/206a3dd32322e441f68653601a9e92a2.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
- en: This is really a “lovely” wall, isn’t it? Try this yourself and find “I love
    you” in your language! ????
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: More than images
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now we’ve been to Italy and France. Where would you like to go next? Why don’t
    we put a map and mark the places? We’re going to create a window and draw figures
    not by designating the points but by clicking directly on the window. Let’s try
    a circle first. We first create a function which will draw a circle with the data
    for the position and clicking of the mouse.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: With `cv2.EVENT_LBUTTONDOWN` or `cv2.EVENT_RBUTTONDOWN` , we can bring the data
    for the position when we press the buttons of the mouse. The position of the mouse
    will be `(x, y)` and we’ll draw a circle whose center is at that point.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We’ll set a map as the background of the window and name the window as *my_drawing*.
    The name of the window can be anything, but it should be the same because this
    acts like the id of the window. Using the `cv2.setMouseCallback()` , we make a
    connection between the window and the function `draw_circle` we made at step 1.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we execute the window using while loop. Don’t forget to set the break unless
    you are making an infinite loop. The condition of the if clause is setting the
    window to be shut down when we press ESC on the keyboard. Save this as a file
    and import it on your terminal. If you’re to use jupyter lab, put the codes in
    one cell and execute. Now, tell me! Where do you want to go?
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/da5b0ca41e398dbd74c9dcb12c99aca8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
- en: Let’s try a rectangle. As a rectangle requires two points for **pt1** and **pt2** in `cv2.rectangle()` ,
    we need an additional step to set the first click point as **pt1** and the last
    point as **pt2**. And we’re going to detect the movement of the mouse with `cv2.EVENT_MOUSEMOVE` and `cv2.EVENT_LBUTTONUP` .
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: We first define `drawing = False` as a default. When the left button is pressed, `drawing` becomes
    true and we give that first position as **pt1**. If drawing is on, it’ll take
    the current point as **pt2 **and keep drawing rectangles while we move the mouse.
    It’s like overlapping the figures. When the left button is up, `drawing` becomes
    false and it takes the last position of the mouse as its final point of **pt2**.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Replace `draw_circle` function to `draw_rectangle` in step 1\. Please don’t
    forget to make a change inside the callback function, `cv2.setMouseCallback()` as
    well. So the whole code script will be as follows. Save this script file and run
    it on the terminal or the jupyter notebook.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: What’s next?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Did you enjoy the first time with OpenCV? You can also try other functions such
    as drawing a line or a polygon. Feel free to check the documentation for it, which
    can be found [**here**](https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html).
    Next time, we’re going to talk about more advanced technologies such as attaching
    two different images, image contour and object detection.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Are there errors you would love to correct? Please share your insight with us.
    I’m always open to talk, so feel free to leave comments below and share your thoughts.
    I also share interesting and useful resources on[ LinkedIn](https://www.linkedin.com/in/jiwon-jeong/) so
    feel free to follow or reach out to me. I’ll be back again with another interesting
    story next time!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Jiwon Jeong](https://jjone36.github.io/)**, is a Data Scientist currently
    undertaking a Master''s degree in Industrial Engineering and is a Project Instructor
    for DataCamp.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/computer-vision-for-beginners-part-1-7cca775f58ef).
    Reposted with permission.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[End-to-End Machine Learning: Making videos from images](/2019/05/making-videos-from-images.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Preprocessing for Deep Learning: From covariance matrix to image whitening](/2018/10/preprocessing-deep-learning-covariance-matrix-image-whitening.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Basic Image Data Analysis Using Numpy and OpenCV – Part 1](/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[TensorFlow for Computer Vision - Transfer Learning Made Easy](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Applications of Computer Vision](https://www.kdnuggets.com/2022/03/5-applications-computer-vision.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Things You Need To Know About Data Management And Why It Matters…](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关于数据管理你需要了解的6件事及其重要性](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻 2022年3月9日：在5分钟内构建一个机器学习网页应用](https://www.kdnuggets.com/2022/n10.html)'
- en: '[DINOv2: Self-Supervised Computer Vision Models by Meta AI](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DINOv2: Meta AI 自监督计算机视觉模型](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
