- en: How to Perform Unit Testing in Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/01/perform-unit-testing-python.html](https://www.kdnuggets.com/2023/01/perform-unit-testing-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How to Perform Unit Testing in Python?](../Images/98908d51693ac5a07f9369da920cb465.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Verifying the code in isolation is necessary to ensure our code meets the quality
    standards and works as expected. While making a simple recipe, we taste it at
    various stages and adjust the flavors accordingly. Extending this concept to code,
    we constantly look through our code to validate its correctness. When it comes
    to testing, we can perform either manual testing or automated but manual testing
    is a tedious and time-consuming process. Automated testing involves the execution
    of the tests by a script instead of a human. There are various kinds of testing
    in automated testing like unit testing, integration testing, stress testing, etc
    but we will focus on unit testing for this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Importance of Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing is the technique in which individual units are analyzed for errors
    to make your code stable and future-proof. These units may be individual functions,
    a complete class, or an entire module. In most cases, these units have no dependencies
    on the other part of the code. It is important because these units are the basic
    building blocks of your application and if they are faulty then your application
    to break. It also enhances the developer's productivity and encourages modular
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: UnitTest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many test runners are available for Python such as
  prefs: []
  type: TYPE_NORMAL
- en: Unittest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pytest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nose2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testify
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DocTest
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this tutorial, we will be using unittest which is the built-in testing
    framework in Python standard library. It contains both the testing framework and
    the test runner and offers a variety of features ranging from test automation
    and aggregating tests into collections to the independence of tests from reporting
    framework. It has the following requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: Each unit test can be created as a method extending the TestCase Class and prefix
    your method with a test to inform the test runner about the test methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the sequence of special assertion methods that determine whether the
    test case has passed or failed. Some of the most commonly used assertion methods
    are mentioned below:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| **Method** | **Description** |'
  prefs: []
  type: TYPE_TB
- en: '| .assertEqual(a, b) | a == b |'
  prefs: []
  type: TYPE_TB
- en: '| .assertNotEqual(a, b) | a != b |'
  prefs: []
  type: TYPE_TB
- en: '| .assertTrue(x) | bool(x) is True |'
  prefs: []
  type: TYPE_TB
- en: '| .assertFalse(x) | bool(x) is False |'
  prefs: []
  type: TYPE_TB
- en: '| .assertIs(a, b) | a is b |'
  prefs: []
  type: TYPE_TB
- en: '| .assertIs(a, b) | a is not b |'
  prefs: []
  type: TYPE_TB
- en: '| .assertIsNone(x) | x is None |'
  prefs: []
  type: TYPE_TB
- en: '| .assertIsNotNone(x) | x is not None |'
  prefs: []
  type: TYPE_TB
- en: '| .assertIn(a,b) | a in b |'
  prefs: []
  type: TYPE_TB
- en: '| .assertNotIn(a,b) | a not in b |'
  prefs: []
  type: TYPE_TB
- en: '| .assertIsInstance(a, b) | isinstance(a, b) |'
  prefs: []
  type: TYPE_TB
- en: '| .assertNotIsInstance(a, b) | not isinstance(a, b) |'
  prefs: []
  type: TYPE_TB
- en: 'Source: [unittest official documentation](https://docs.python.org/3/library/unittest.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Steps to Perform Unit Testing using UnitTest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write the code that you want to test in the Python File like **example.py.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a new Python file for your unit tests starting with the keyword test
    like **test_example.py.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Import the **unittest module** and **example.py.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a class extending the class **unittest.TestCase.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write the test methods starting with the test keyword like **test_functionName(self****)**
    and use assert methods to verify the behavior of the code being tested.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the command **python -m unittest test_example.py** in the terminal or invoke
    the main method of unittest in the test file and run **python test_example.py**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create a file named **calc.py** that calculates the area of the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a test file **test_calc.py** and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Run **python** **test_calc.py** in your terminal. The following output will
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, change the formula of the calculating rectangle to verify our test cases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Again run **python test_calc.py** in your terminal.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can also extend this code to handle errors like division by zero.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the unittest module provides us with the basic set of tools for writing
    and running unit tests, there are also third-party libraries offering more advanced
    features. Nonetheless, Unit testing remains an important part of the software
    development life cycle and can help you catch bugs early on resulting in more
    reliable and maintainable code. I hope you enjoyed reading the article. Please
    feel free to share your thoughts or feedback in the comment section.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1)** is an aspiring
    software developer with a keen interest in data science and applications of AI
    in medicine. Kanwal was selected as the Google Generation Scholar 2022 for the
    APAC region. Kanwal loves to share technical knowledge by writing articles on
    trending topics, and is passionate about improving the representation of women
    in tech industry.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Hypothesis Testing and A/B Testing](https://www.kdnuggets.com/hypothesis-testing-and-ab-testing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Perform Motion Detection Using Python](https://www.kdnuggets.com/2022/08/perform-motion-detection-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, August 17: How to Perform Motion Detection Using…](https://www.kdnuggets.com/2022/n33.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing the Testing Library for Natural Language Processing](https://www.kdnuggets.com/2023/04/introducing-testing-library-natural-language-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A/B Testing: A Comprehensive Guide](https://www.kdnuggets.com/ab-testing-a-comprehensive-guide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
