- en: Building and Training Your First Neural Network with TensorFlow and Keras
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/9cb7eead0e69b3990b8f32fcef9da07c.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: AI has gone so far now, and various state-of-the AI models are evolving that
    are used in Chatbots, Humanoid Robots, Self-driving cars, etc. It has become the
    fastest-growing technology, and Object Detection and Object Classification are
    trendy these days.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In this blog post, we will cover the complete steps of building and training
    an Image Classification model from scratch using Convolutional Neural Network.
    We will use the publicly available [Cifar-10](https://www.cs.toronto.edu/~kriz/cifar.html)
    dataset to train the model. This dataset is unique because it contains images
    of everyday seen objects like cars, aeroplanes, dogs, cats, etc. By training the
    neural network to these objects, we will develop intelligent systems to classify
    such things in the real world. It contains more than 60000 images of size 32x32
    of 10 different types of objects. By the end of this tutorial, you will have a
    model which can determine the object based on its visual features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/318b7682220fb53e7a4b4b88bc58d4ef.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Fig. 1 Sample Images of the Dataset | Image by [datasets.activeloop](https://datasets.activeloop.ai/docs/ml/datasets/cifar-10-dataset/)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: We will cover everything from scratch, so if you have yet to learn about the
    practical implementation of neural networks, it is completely fine. The only prerequisite
    of this tutorial is your time and the basic knowledge of Python. At the end of
    this tutorial, I will share the collaboratory file containing the entire code.
    Let’s get started!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Here is the complete workflow of this tutorial,
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Importing Necessary Libraries
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Loading of the Data
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preprocessing of the Data
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building the Model
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Evaluating the Model Performance
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/3504fcd934dd9aaa393cfa1477512c69.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Fig. 2 Complete Model Pipeline | Image by Author
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Importing Necessary Libraries
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have to install some modules to start with the project. I will use Google
    Colab as it provides free GPU training, and at the end, I will provide you with
    the collaboratory file containing the complete code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装一些模块来开始项目。我将使用Google Colab，因为它提供免费的GPU训练，最后我会提供一个包含完整代码的协作文件。
- en: 'Here is the command to install the required libraries:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是安装所需库的命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Importing the libraries into a Python file.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将库导入Python文件中。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Numpy:** It is used for efficient array computations of large datasets containing
    images.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Numpy：** 它用于高效地计算包含图像的大型数据集。'
- en: '**Tensorflow:** It is an open-source machine learning library developed by
    Google. It provides numerous functions to build large and scalable models.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Tensorflow：** 这是一个由Google开发的开源机器学习库。它提供了许多构建大型和可扩展模型的函数。'
- en: '**Keras:** Another high-level neural network API runs on top of TensorFlow.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Keras：** 另一个高级神经网络API，运行在TensorFlow之上。'
- en: '**Matplotlib:** This Python library creates plots and graphs, providing better
    data visualisation.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Matplotlib：** 这个Python库创建图表和图形，提供更好的数据可视化。'
- en: '**Sklearn:** It provides functions for performing data preprocessing and feature
    extraction tasks for the dataset. It contains inbuilt functions to find the evaluation
    metrics of a model like accuracy, precision, false positives, false negatives,
    etc.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Sklearn：** 它提供了进行数据预处理和特征提取的函数。它包含内置函数来查找模型的评估指标，如准确率、精确度、假阳性、假阴性等。'
- en: Now, let's move to the step of data loading.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进入数据加载的步骤。
- en: Loading the Data
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据
- en: This section will load our dataset and performs the train-test splitting.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将加载我们的数据集并执行训练-测试拆分。
- en: '**Loading & Splitting of Data:**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据加载与拆分：**'
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The cifar10 dataset is directly loaded from the Keras datasets library. And
    this data is also split into training data and testing data. Training data is
    used to train the model so that it can identify patterns in it. And the testing
    data remain unseen to the model, and it is used to check its performance, i.e.
    how many data points are correctly predicted wrt the total data points.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: cifar10数据集直接从Keras数据集库加载。这些数据也被拆分为训练数据和测试数据。训练数据用于训练模型，以便它能够识别其中的模式。测试数据对模型保持未知，用于检查其性能，即模型正确预测的数据点数与总数据点数的比率。
- en: '`training_label` contains the corresponding label to the image present in `training_data`.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`training_label` 包含与 `training_data` 中图像对应的标签。'
- en: Then the training data is again split into the validation data using the built-in
    sklearn `train_test_split` function. The validation data is used to select and
    tune the final model. Then finally, all the training, testing and validation data
    are converted into floating decimals of 32bit.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，训练数据再次通过内置的sklearn `train_test_split`函数拆分为验证数据。验证数据用于选择和调整最终模型。最后，所有的训练、测试和验证数据都被转换为32位浮点数。
- en: Now, the loading of our dataset is done. In the next section, we will perform
    some preprocessing steps to it.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的数据集加载完成。在下一节中，我们将对数据进行一些预处理步骤。
- en: Pre-processing of Data
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据预处理
- en: Data preprocessing is the first and most crucial step while developing a machine
    learning model. Let's see how to do it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 数据预处理是开发机器学习模型时的第一步，也是最重要的一步。让我们看看如何做到这一点。
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output:**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The dataset contains images of 10 classes, and the size of each image is 32x32
    pixels. Each pixel has a value from 0-255, and we need to normalise it between
    0-1 to ease the calculation process. And after that, we will convert the categorical
    labels into the one-hot encoded labels. This is done to convert the categorical
    data into numerical data so we can apply machine learning algorithms without any
    problem.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集包含10类图像，每张图像的大小为32x32像素。每个像素的值范围从0到255，我们需要将其标准化到0到1之间，以便于计算。之后，我们将类别标签转换为独热编码标签。这是为了将类别数据转换为数值数据，以便我们可以顺利应用机器学习算法。
- en: Now, move to the building of the CNN model.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，进入CNN模型的构建阶段。
- en: Building the CNN Model
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建CNN模型
- en: The CNN Model works in 3 stages. The first stage consists of convolutional layers
    that extract relevant features from the images. The second stage consists of pooling
    layers used to reduce the dimensionality of the images. It also helps to reduce
    the overfitting of the model. And the third stage consists of dense layers that
    convert the two-dimensional image to a one-dimensional array. And then finally,
    this array is fed onto the fully connected layers, which perform the final prediction.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: CNN 模型分为 3 个阶段。第一阶段由卷积层组成，用于从图像中提取相关特征。第二阶段由池化层组成，用于减少图像的维度，同时有助于降低模型的过拟合。第三阶段由全连接层组成，将二维图像转换为一维数组。最终，这个数组被输入到全连接层中，执行最终的预测。
- en: Here is the code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码。
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have applied the three sets of layers, each containing two convolutional
    layers, one max-pooling layer and one dropout layer. The Conv2D layer takes the
    `input_shape` as (32, 32, 3), which must be the same as the dimensions of the
    image.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应用了三组层，每组包含两个卷积层、一个最大池化层和一个 dropout 层。Conv2D 层接受 `input_shape` 为 (32, 32,
    3)，这必须与图像的尺寸相同。
- en: Each Conv2D layer also takes an activation function, i.e. ‘relu’. Activation
    functions are used to increase the non-linearity in the system. In simpler terms,
    it decides whether the neuron needs to be activated or not based on a certain
    threshold. There are many types of activation functions like ‘ReLu’, ‘Tanh’, ‘Sigmoid’,
    ‘Softmax’, etc., which use different algorithms to decide the firing of the neuron.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Conv2D 层还采用激活函数，即 ‘relu’。激活函数用于增加系统中的非线性。简单来说，它决定了神经元是否需要根据某个阈值被激活。激活函数有很多类型，如
    ‘ReLu’，‘Tanh’，‘Sigmoid’，‘Softmax’ 等，它们使用不同的算法来决定神经元的激发。
- en: After that, the Flattening Layer and the Fully Connected Layers are added, with
    several Dropout layers in between them. The dropout layer rejects some of the
    neurons' contribution towards the net layer randomly. The parameter inside it
    defines the degree of rejection. It is mainly used to avoid over-fitting.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，添加了 Flattening 层和全连接层，中间插入了几个 Dropout 层。Dropout 层随机拒绝一些神经元对网层的贡献。其内部参数定义了拒绝的程度。主要用于避免过拟合。
- en: Below is a sample image of what a CNN model architecture looks like.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 CNN 模型架构的示例图像。
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/2e7ac8569ec83f230107a500193881ad.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![用 TensorFlow 和 Keras 构建和训练您的第一个神经网络](../Images/2e7ac8569ec83f230107a500193881ad.png)'
- en: Fig. 3 Sampe CNN Architecture | Image by [researchgate](https://www.researchgate.net/figure/A-vanilla-Convolutional-Neural-Network-CNN-representation_fig2_339447623)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3 示例 CNN 架构 | 图片来源于 [researchgate](https://www.researchgate.net/figure/A-vanilla-Convolutional-Neural-Network-CNN-representation_fig2_339447623)
- en: Compiling the Model
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译模型
- en: Now, we will compile and prepare the model for the training.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编译并准备模型进行训练。
- en: '[PRE6]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output:**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/84fe154dca81ad2d192933c95c419c42.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![用 TensorFlow 和 Keras 构建和训练您的第一个神经网络](../Images/84fe154dca81ad2d192933c95c419c42.png)'
- en: Fig. 4 Model Summary | Image by Author
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4 模型总结 | 图片来源于作者
- en: We have used the Adam optimizer with a learning rate of 0.0001\. Optimizer decides
    how the model's behaviour changes in response to the output of the loss function.
    The Learning Rate is the amount of weights updated during training or the step
    size. It is a configurable hyperparameter that must not be too small or too large.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了学习率为 0.0001 的 Adam 优化器。优化器决定了模型如何根据损失函数的输出改变行为。学习率是训练过程中更新权重的步长，是一个可配置的超参数，不应过小或过大。
- en: Fitting the Model
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拟合模型
- en: Now, we will fit the model to our training data and start the training process.
    But before that, we will use Image Augmentation to increase the number of sample
    images.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将模型拟合到训练数据中，并开始训练过程。但在此之前，我们将使用图像增强技术来增加样本图像的数量。
- en: Image Augmentation used in Convolutional Neural Networks will increase the training
    images without requiring new images. It will replicate the images by producing
    some amount of variation in it. It can be done by rotating the image to some degree,
    adding noise, flipping it horizontally or vertically, etc.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在卷积神经网络中使用的图像增强将增加训练图像的数量，而无需新图像。它会通过产生一些变异来复制图像。这可以通过旋转图像、添加噪声、水平或垂直翻转等方式来完成。
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Output:**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/cfe89739896f1c3a0c892de6403495c3.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![用 TensorFlow 和 Keras 构建和训练第一个神经网络](../Images/cfe89739896f1c3a0c892de6403495c3.png)'
- en: Fig.5 Accuracy & Loss at each Epoch | Image by Author
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图5 每个 Epoch 的准确率与损失率 | 图片来源：作者
- en: '`ImageDataGenerator()` function is used to create augmented images. The `fit()`
    is used to fit the model. It takes the training and validation data, Batch Size,
    and the number of Epochs as input'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`ImageDataGenerator()` 函数用于创建增强图像。`fit()` 用于拟合模型。它接受训练和验证数据、批次大小（Batch Size）和迭代次数（Epochs）作为输入。'
- en: Batch Size is the number of samples processed before the model gets updated.
    A crucial hyperparameter must be greater than equal to one and less than equal
    to the number of samples. Usually, 32 or 64 are considered the best Batch Sizes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 批次大小（Batch Size）是指模型更新前处理的样本数量。一个关键的超参数，必须大于等于 1 并且小于等于样本数量。通常，32 或 64 被认为是最佳的批次大小。
- en: The number of Epochs represents how many times all the samples are processed
    once individually on both the forward and backward to the network. 100 epochs
    mean the whole dataset passes through the model 100 times, and the model runs
    100 times itself.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 迭代次数（Epochs）表示所有样本在网络的前向和反向传播中被处理的次数。100 次迭代意味着整个数据集通过模型 100 次，模型本身运行 100 次。
- en: Our model is trained, and now we will evaluate its performance on the test set.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型已经训练完成，现在我们将评估它在测试集上的表现。
- en: Evaluating Model Performance
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估模型表现
- en: In this section, we will check the accuracy and loss of the model on the test
    set. Also, we will draw a plot between the Accuracy Vs Epoch and Loss Vs Epoch
    for training and validation data.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查模型在测试集上的准确率和损失率。同时，我们将绘制准确率对比 Epoch 和损失率对比 Epoch 的图表，用于训练和验证数据。
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output:**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Our model achieved an accuracy of 75.34% with a loss of 0.8554\. This accuracy
    can be increased as this is not a state-of-the-art model. I used this model to
    explain the process and flow of building a model. The accuracy of the CNN model
    depends on many factors like choice of layers, selection of hyperparameters, the
    type of dataset used, etc.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的模型达到了 75.34% 的准确率和 0.8554 的损失率。由于这不是最先进的模型，所以准确率可以提高。我使用这个模型来解释构建模型的过程和流程。CNN
    模型的准确率取决于许多因素，如层的选择、超参数的选择、数据集的类型等。
- en: Now we will plot the curves to check overfitting in the model.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将绘制曲线以检查模型的过拟合情况。
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Building and Training Your First Neural Network with TensorFlow and Keras](../Images/9c6f3061bc69ad9bb4da9b0043d8b60a.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![用 TensorFlow 和 Keras 构建和训练第一个神经网络](../Images/9c6f3061bc69ad9bb4da9b0043d8b60a.png)'
- en: Fig.6 Accuracy and Loss Vs Epoch | Image by Author
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图6 准确率和损失率对比 Epoch | 图片来源：作者
- en: In our model, we can see that the model overfits the test dataset. The (blue)
    line indicates the training accuracy, and the (orange) line indicates the validation
    accuracy. The training accuracy continues improving, but the validation error
    worsens after 20 epochs.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的模型中，我们可以看到模型过拟合了测试数据集。蓝色线表示训练准确率，橙色线表示验证准确率。训练准确率持续提升，但验证错误在 20 次迭代后变得更糟。
- en: Please find the Google Colab link used in this article - [Link](https://colab.research.google.com/drive/1DjicDz2iTqcs3LWiPLUcHGvH6wRNTyTm?usp=sharing)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看本文中使用的 Google Colab 链接 - [链接](https://colab.research.google.com/drive/1DjicDz2iTqcs3LWiPLUcHGvH6wRNTyTm?usp=sharing)
- en: Conclusion
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article shows the entire process of building and training a Convolutional
    Neural Network from scratch.  We got around 75% accuracy. You can play with the
    hyperparameters and use different sets of convolutional and pooling layers to
    improve the accuracy. You can also try Transfer Learning, which uses pre-trained
    models like ResNet or VGGNet and gives very good accuracy in some cases. We can
    talk more about it in other articles if you want.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 本文展示了从头开始构建和训练卷积神经网络的整个过程。我们得到了大约 75% 的准确率。你可以尝试调整超参数，并使用不同的卷积和池化层组合来提高准确率。你还可以尝试迁移学习，它利用像
    ResNet 或 VGGNet 这样的预训练模型，并在某些情况下获得非常好的准确率。如果你想，我们可以在其他文章中详细讨论。
- en: Until then, keep reading and keep learning. Feel free to contact me on [Linkedin](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)
    in case of any questions or suggestions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在那之前，继续阅读和学习。如有任何问题或建议，欢迎通过 [Linkedin](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)
    联系我。
- en: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** is a B.Tech.
    Electrical Engineering student, currently in the final year of his undergrad.
    His interest lies in the field of Web Development and Machine Learning. He have
    pursued this interest and am eager to work more in these directions.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Aryan Garg](https://www.linkedin.com/in/aryan-garg-1bbb791a3/)** 是一名 B.Tech.
    电气工程学生，目前在本科最后一年。他对 Web 开发和机器学习领域感兴趣。他已经追求了这一兴趣，并渴望在这些方向上继续工作。'
- en: More On This Topic
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Learn Deep Learning by Building 15 Neural Network Projects in 2022](https://www.kdnuggets.com/2022/01/15-neural-network-projects-build-2022.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过在 2022 年构建 15 个神经网络项目学习深度学习](https://www.kdnuggets.com/2022/01/15-neural-network-projects-build-2022.html)'
- en: '[Building a Convolutional Neural Network with PyTorch](https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyTorch 构建卷积神经网络](https://www.kdnuggets.com/building-a-convolutional-neural-network-with-pytorch)'
- en: '[Step-by-Step Tutorial to Building Your First Machine Learning Model](https://www.kdnuggets.com/step-by-step-tutorial-to-building-your-first-machine-learning-model)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逐步教程：构建你的第一个机器学习模型](https://www.kdnuggets.com/step-by-step-tutorial-to-building-your-first-machine-learning-model)'
- en: '[Building Your First ETL Pipeline with Bash](https://www.kdnuggets.com/building-your-first-etl-pipeline-with-bash)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Bash 构建你的第一个 ETL 管道](https://www.kdnuggets.com/building-your-first-etl-pipeline-with-bash)'
- en: '[Neural Network Optimization with AIMET](https://www.kdnuggets.com/2022/04/qualcomm-neural-network-optimization-aimet.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 AIMET 进行神经网络优化](https://www.kdnuggets.com/2022/04/qualcomm-neural-network-optimization-aimet.html)'
- en: '[The Importance of Permutation in Neural Network Predictions](https://www.kdnuggets.com/2022/12/importance-permutation-neural-network-predictions.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[神经网络预测中置换的重要性](https://www.kdnuggets.com/2022/12/importance-permutation-neural-network-predictions.html)'
