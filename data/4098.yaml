- en: Python Lambda Functions, Explained
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python Lambda 函数详解
- en: 原文：[https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html](https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html](https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html)
- en: '![Python Lambda Functions, Explained](../Images/0ad70492b45ee5b7fe82629b3ae46a5a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python Lambda 函数详解](../Images/0ad70492b45ee5b7fe82629b3ae46a5a.png)'
- en: Image by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑者提供的图像
- en: Since the advent of computer programming, functions have played a key role by
    offering advantages such as reusability, readability, modularity, error reduction,
    and easy modification. Reusability is considered one of the most useful traits
    of a function but what if I tell you there are functions that are not reusable
    but still useful? To find out, read along!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 自计算机编程出现以来，函数通过提供如重用性、可读性、模块化、错误减少和易于修改等优势，扮演了重要角色。重用性被认为是函数最有用的特性之一，但如果我告诉你有一些函数虽然不可重用但仍然有用，你会怎么想？要了解更多，请继续阅读！
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织进行 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Lambda Functions and their Syntax
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 函数及其语法
- en: A lambda function does not have a name and is an immediately invoked function.
    It can accept any number of arguments but returns only one expression, unlike
    regular functions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数没有名称，是一个立即调用的函数。它可以接受任意数量的参数，但只返回一个表达式，这与普通函数不同。
- en: 'It has the following syntax:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它有如下语法：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The syntax of the lambda function, as shown above, has three elements:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 lambda 函数的语法包含三个元素：
- en: The keyword “lambda” — it is analogous to ‘def’ in user-defined functions
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字 “lambda” — 类似于用户定义函数中的‘def’
- en: parameters — analogous to arguments in normal functions
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: parameters — 类似于普通函数中的参数
- en: expression — it is the operation that gets evaluated to arrive at the result
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: expression — 这是用来计算结果的操作
- en: Unlike regular functions, the parameters are not surrounded by parentheses in
    lambda functions. Considering that the expression is a one-liner, it needs to
    be short but at the same time must perform the required operations over the parameters.
    A lambda function is consumed at the definition and thus cannot be reused without
    explicitly defining again.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 与普通函数不同，lambda 函数中的参数没有括号。考虑到表达式是一行代码，它需要简洁，但同时必须对参数执行所需的操作。lambda 函数在定义时被消耗，因此不能在未明确重新定义的情况下重用。
- en: Generally, a lambda function is passed as an argument to a higher-order function
    such as Python built-in functions – filter(), map(), or reduce(). But what is
    a higher-order function?
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，lambda 函数作为参数传递给高阶函数，如 Python 内置函数 – filter()、map() 或 reduce()。但什么是高阶函数呢？
- en: A higher-order function is defined as a function that takes in other functions
    as arguments (discussed in subsequent sections).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 高阶函数定义为接收其他函数作为参数的函数（将在后续章节中讨论）。
- en: Uses and Examples
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用途与示例
- en: 'Now that we are acquainted with the syntax, it’s time to understand the lambda
    functions with a simple example. Let’s say you want to find the square of a number.
    You can either define a function “square” or write a lambda function as shown
    below:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了语法，是时候用一个简单的例子来理解 lambda 函数了。假设你想计算一个数字的平方。你可以定义一个名为“square”的函数，或者编写一个如下所示的
    lambda 函数：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The lambda function above accepts a single argument x and returns its square.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 lambda 函数接受一个参数 x 并返回它的平方。
- en: Calling a Lambda Function
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调用 Lambda 函数
- en: Calling a lambda function is as simple as wrapping the construction of the lambda
    function first, followed by the argument in the parentheses.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 lambda 函数非常简单，首先包装 lambda 函数的构造，然后在括号中放入参数。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Calling With Multiple Arguments
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用多个参数调用
- en: For a lambda function with multiple arguments, the input parameters are separated
    by a comma. The corresponding arguments follow the same order at the time of execution.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多个参数的 lambda 函数，输入参数由逗号分隔。相应的参数在执行时遵循相同的顺序。
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Single Conditional Statement
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单一条件语句
- en: 'You can also perform conditional operations such as if-else block as shown
    the below example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以执行条件操作，例如下面示例中的 if-else 块：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Nested Conditional Statement
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套条件语句
- en: Because these are one-liner functions, conditional nesting is performed with
    the help of round braces rather than indentation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些是单行函数，条件嵌套是通过圆括号而不是缩进来完成的。
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The user-defined function corresponding to the above lambda function looks like
    below.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与上述 lambda 函数对应的用户定义函数如下所示。
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note that user-defined functions are a better choice in a nested condition scenario.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在嵌套条件场景中，用户定义的函数是更好的选择。
- en: Assigning to a Variable
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 赋值给变量
- en: A lambda function can also be assigned to a variable and called like a user-defined
    function.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数也可以赋值给变量，并像用户定义的函数一样调用。
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Even though it is possible to assign the function to a variable, it is sparingly
    used as it defeats the sole purpose of a lambda function i.e. immediate invocation.
    Variable assignment is rather useful when using lambda function inside another
    function.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管可以将函数赋值给变量，但这很少使用，因为它违背了 lambda 函数的唯一目的，即立即调用。变量赋值在将 lambda 函数用于另一个函数时比较有用。
- en: String Concatenation
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串连接
- en: Thw following example shows how to concatenate the two strings – where you print
    a welcome message with the person’s name that is passed as an argument.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了如何连接两个字符串——在其中，您打印包含作为参数传递的人的名字的欢迎消息。
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Nested Function
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套函数
- en: The Lambda function is most powerful when used inside another function.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数在另一个函数内部使用时最为强大。
- en: Let’s consider an example of a user-defined function that takes a single argument
    which is used as an exponent of any number.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个用户定义的函数示例，该函数接受一个参数，用作任何数字的指数。
- en: '[PRE17]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Calling by an Underscore
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过下划线调用
- en: Time for some magic! Let’s us go through another way to call a lambda function.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候来点魔法了！让我们通过另一种方式来调用 lambda 函数。
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: What just happened here? Once you define the lambda function which is essentially
    an anonymous function, it is called using an “_” and the arguments.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？一旦定义了 lambda 函数（本质上是匿名函数），它将使用“_”和参数进行调用。
- en: Using with map()
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 map() 一起使用
- en: Lambda functions are used quite often as a map() functions argument. It maps
    a sequence to a function and doesn’t require explicit definition (especially for
    trivial operation like the one shown below)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数经常作为 map() 函数的参数使用。它将序列映射到一个函数，并且不需要明确的定义（尤其是对于下面显示的这种简单操作）
- en: '[PRE21]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The map() maps the sequence from 1 to 10 to the lambda function and returns
    the square of all the elements of the sequence.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: map() 将从 1 到 10 的序列映射到 lambda 函数，并返回序列中所有元素的平方。
- en: Using with reduce()
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 reduce() 一起使用
- en: A reduce function operates on all the elements of the sequence with the operation
    defined in the lambda function to return a single output value. The example multiplies
    all the elements of the sequence from 1 to 4 and computes the output as 1*2*3*4
    = 24.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: reduce 函数对序列中的所有元素执行 lambda 函数中定义的操作，以返回一个单一的输出值。示例中将 1 到 4 的所有元素相乘，并计算输出为 1*2*3*4
    = 24。
- en: '[PRE23]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Lets examine another example where reduce is used with a lambda function to
    return the greater of the two elements. When a list is passed as the second argument,
    it returns the largest number from the list.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查另一个示例，其中 reduce 与 lambda 函数一起使用，以返回两个元素中较大的一个。当将列表作为第二个参数传递时，它返回列表中的最大数字。
- en: '[PRE25]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Using with filter()
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 filter() 一起使用
- en: Another great use of lambda functions is with filter(). The lambda function
    returns True if the number is odd in the following example. When used with the
    filter, it returns all odd numbers in the list.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数的另一个重要用途是与 filter() 一起使用。在以下示例中，如果数字是奇数，lambda 函数返回 True。当与 filter
    一起使用时，它返回列表中的所有奇数。
- en: '[PRE27]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Lambda functions are very handy and save a lot of coding effort. The post explained
    the syntax of the lambda function and how it is different from a user-defined
    function. Hope you found it useful to get started with the basics of lambda functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: lambda 函数非常方便，可以节省大量编码工作。本文解释了 lambda 函数的语法以及它与用户定义的函数的不同之处。希望您发现它对开始学习 lambda
    函数的基础知识有所帮助。
- en: '**[Vidhi Chugh](https://vidhi-chugh.medium.com/)** is an AI strategist and
    a digital transformation leader working at the intersection of product, sciences,
    and engineering to build scalable machine learning systems. She is an award-winning
    innovation leader, an author, and an international speaker. She is on a mission
    to democratize machine learning and break the jargon for everyone to be a part
    of this transformation.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Vidhi Chugh](https://vidhi-chugh.medium.com/)** 是一位人工智能策略师和数字化转型领导者，致力于在产品、科学和工程交汇处构建可扩展的机器学习系统。她是一位获奖的创新领袖、作者和国际演讲者。她的使命是使机器学习大众化，并打破术语，让每个人都能参与这一转型。'
- en: More On This Topic
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Statistical Functions in Python](https://www.kdnuggets.com/2022/10/statistical-functions-python.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 中的统计函数](https://www.kdnuggets.com/2022/10/statistical-functions-python.html)'
- en: '[4 Python Itertools Filter Functions You Probably Didn''t Know](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4 个你可能不知道的 Python Itertools 过滤函数](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
- en: '[5 Tips for Writing Better Python Functions](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升 Python 函数编写质量的 5 个技巧](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)'
- en: '[10 Python Statistical Functions](https://www.kdnuggets.com/10-python-statistical-functions)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10 个 Python 统计函数](https://www.kdnuggets.com/10-python-statistical-functions)'
- en: '[KDnuggets News, July 20: Machine Learning Algorithms Explained in…](https://www.kdnuggets.com/2022/n29.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，7月20日：机器学习算法详解…](https://www.kdnuggets.com/2022/n29.html)'
- en: '[What are Moment-Generating Functions?](https://www.kdnuggets.com/2022/12/momentgenerating-functions.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是矩量生成函数？](https://www.kdnuggets.com/2022/12/momentgenerating-functions.html)'
