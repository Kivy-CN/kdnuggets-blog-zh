- en: Column-Oriented Databases, Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/02/understanding-nosql-database-types-column-oriented-databases.html](https://www.kdnuggets.com/2021/02/understanding-nosql-database-types-column-oriented-databases.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL has become increasingly popular as a complementary tool to traditional
    SQL approaches to databases and database management. As we know, NoSQL doesn’t
    follow the same relational model that SQL does, which allows it to do quite a
    lot of powerful things. More importantly, it’s very flexible and scalable, which
    is excellent for newer projects that don’t have the time or budget to spend on
    designing an SQL database.
  prefs: []
  type: TYPE_NORMAL
- en: As such, we’re going to take a bit of a deeper look at how different [data models](https://hostingdata.co.uk/nosql-database/)
    work, with this article taking a look at column databases. If you’d like to take
    a more general look, you should check out our [NoSQL for Beginners](/2020/12/nosql-beginners.html)
    guide.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: How Does a Column Database Work?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'At a very surface level, column-store databases do exactly what is advertised
    on the tin: namely, that instead of organizing information into rows, it does
    so in columns. This essentially makes them function the same way that tables work
    in relational databases. Of course, since this *is* a NoSQL database, this data
    model makes them much more flexible.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/8e7c96a2dd6f24ce7573a605fae19e33.png)'
  prefs: []
  type: TYPE_IMG
- en: More specifically, column databases use the concept of *keyspace*, which is
    sort of like a schema in relational models. This keyspace contains all the column
    families, which then contain rows, which then contain columns. It’s a bit tricky
    to wrap your head around at first but it’s relatively straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/420e731f7baa234c5e633fd8f5dabfa2.png)![Image](../Images/fbb86c445be95d40bbd68cce53eb7a2d.png)'
  prefs: []
  type: TYPE_IMG
- en: By taking a quick look, we can see that a column family has several rows. Within
    each row, there can be several different columns, with different names, links,
    and even sizes (meaning they don’t need to adhere to a standard). Furthermore,
    these columns only exist within their own row and can contain a value pair, name,
    and a timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we take a specific row as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/693cf6110d5044826ce975d87d07376d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The *Row Key* is exactly that: the specific identifier of that row and is always
    unique. The column contains the name, value, and timestamp, so that’s straightforward.
    The name/value pair is also straight forward, and the timestamp is the date and
    time the data was entered into the database.'
  prefs: []
  type: TYPE_NORMAL
- en: Some examples of column-store databases include Casandra, CosmoDB, Bigtable,
    and HBase.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Column Databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are several benefits that go along with columnar databases:'
  prefs: []
  type: TYPE_NORMAL
- en: Column stores are excellent at compression and therefore are efficient in terms
    of storage. This means you can reduce disk resources while holding massive amounts
    of information in a single column
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since a majority of the information is stored in a column, aggregation queries
    are quite fast, which is important for projects that require large amounts of
    queries in a small amount of time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalability is excellent with column-store databases. They can be expanded nearly
    infinitely, and are often spread across large clusters of machines, even numbering
    in thousands. That also means that they are great for Massive Parallel Processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load times are similarly excellent, as you can easily load a billion-row table
    in a few seconds. That means you can load and query nearly instantly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Large amounts of flexibility as columns do not necessarily have to look like
    each other. That means you can add new and different columns without disrupting
    the whole database. That being said, entering completely new record queries requires
    a change to all tables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overall, column-store databases are great for analytics and reporting: fast
    querying speeds and abilities to hold large amounts of data without adding a lot
    of overhead make it ideal.'
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages of Column Databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As it usually is in life, nothing is perfect and there are a couple of disadvantages
    to using column-oriented databases as well:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing an indexing schema that’s effective is difficult and time consuming.
    Even then, the said schema would still not be as effective as simple relational
    database schemas.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While this may not be an issue for some users, incremental data loading is suboptimal
    and should be avoided if possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This goes for all NoSQL database types and not just columnar ones. Security
    [vulnerabilities in web applications](https://www.clouddefense.ai/blog/web-application-security)
    are ever present and the fact that NoSQL databases lack inbuilt security features
    doesn’t help. If security is your number one priority, you should either look
    into relational databases you could employ or employ a well-defined schema if
    possible.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Online Transaction Processing (OLTP) applications are also not compatible with
    columnar databases due to the way data is stored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are Column Databases Always NoSQL?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before closing out, we do want to point out that column-store databases aren’t
    necessarily NoSQL only. Often the argument goes that column-store is so different
    from relational database models, that it falls squarely in the NoSQL camp.
  prefs: []
  type: TYPE_NORMAL
- en: This isn’t necessarily always the case and the [NoSQL vs SQL](/2020/12/sql-vs-nosql-7-key-takeaways.html)
    argument, in general, is pretty complex.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of column-store databases, they are nearly identical to SQL methodologies.
    For example, keyspaces act as schema and therefore there is still some form of
    schema management. Another example is that the metadata can sometimes look exactly
    like that of a typical relational DBMS. Ironically, column-store databases also
    tend to be SQL and ACID compliant.
  prefs: []
  type: TYPE_NORMAL
- en: Even more so though, NoSQL databases are usually either document-store or key-store,
    of which column-store is neither.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it’s hard to argue that column-store is purely NoSQL.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While column-store databases are incredibly powerful, they *do* have their own
    sets of issues. For example, the way that it writes data means a certain lack
    of consistency since columns require multiple writes to the disk. This is compared
    to relational databases where row-data is written sequentially.
  prefs: []
  type: TYPE_NORMAL
- en: Nonetheless, column-store remains one of the most used data models out there.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Alex Williams](https://hostingdata.co.uk/author/alex-williams/)** is
    a seasoned full-stack developer and the owner of [Hosting Data UK](https://hostingdata.co.uk/).
    After graduating from the University of London, majoring in IT, Alex worked as
    a developer leading various projects for clients from all over the world for almost
    10 years. Recently, Alex switched to being an independent IT consultant and started
    his own blog. There, he explores web development, data management, digital marketing,
    and solutions for online business owners just starting out.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[SQL vs NoSQL: 7 Key Takeaways](/2020/12/sql-vs-nosql-7-key-takeaways.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NoSQL for Beginners](/2020/12/nosql-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[To SQL or not To SQL: that is the question!](/2018/05/sql-not-sql-question.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Key-Value Databases, Explained](https://www.kdnuggets.com/2021/04/nosql-explained-understanding-key-value-databases.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[From Oracle to Databases for AI: The Evolution of Data Storage](https://www.kdnuggets.com/2022/02/oracle-databases-ai-evolution-data-storage.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NoSQL Databases and Their Use Cases](https://www.kdnuggets.com/2023/03/nosql-databases-cases.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Vector Databases in AI and LLM Use Cases](https://www.kdnuggets.com/vector-databases-in-ai-and-llm-use-cases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Semantic Search with Vector Databases](https://www.kdnuggets.com/semantic-search-with-vector-databases)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Guide to Working with SQLite Databases in Python](https://www.kdnuggets.com/a-guide-to-working-with-sqlite-databases-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
