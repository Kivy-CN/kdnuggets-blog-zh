- en: How to Define a Machine Learning Problem Like a Detective
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/10/define-machine-learning-problem-detective.html](https://www.kdnuggets.com/2018/10/define-machine-learning-problem-detective.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Spencer Norris](https://www.spencernorris.xyz/), Data Scientist, Independent
    Journalist**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6b7db80ffebecc19b28072006a9b5680.png)'
  prefs: []
  type: TYPE_IMG
- en: This article was originally published on [OpenDataScience.com](https://OpenDataScience.com).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see if we can start down that direction by laying the groundwork for the
    very fundamentals of our understanding of machine learning – namely, what actually
    constitutes a machine learning problem? It’s kind of strange question that you
    might think you know the answer to, but it actually has a very formal definition
    that we’ll outline here.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the machine learning problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most important step you can take is to start by asking yourself: do I think
    there’s a pattern?'
  prefs: []
  type: TYPE_NORMAL
- en: The fundamental assumption that underlies all machine learning problems is that *there
    is a pattern*. You can’t make omelets without eggs; if there isn’t any pattern,
    then we’re already done. Ask yourself this question before you decide to embark
    on a project -; it might save you some heartbreak down the line.
  prefs: []
  type: TYPE_NORMAL
- en: If you still think there’s a pattern, then we can proceed. That pattern we’re
    looking for is some function *f*, which maps some input *X* onto an output *Y*.
    In the notation, this is *f:XY*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you don’t know *f* – you *can’t* know *f*, or you wouldn’t be reading
    this. This is the entire crux of machine learning: if I have some pattern that
    I can’t directly observe, how can I at least approximate it?'
  prefs: []
  type: TYPE_NORMAL
- en: Define the problem the way a detective would
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do it like a detective. If f has left behind evidence, or observations, we can
    begin to reconstruct what f looks like. Each observation is an input **xi** =[x1,x2,…xd]
    Ɛ Rd(that is, each xi is an array of real numbers of length *d*) and an observed
    output, yi. Collectively, these observations {(x1,y1), (x2,y2)… (xn,yn)}are our
    data set, *D*.
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that even with those observations, an infinite number of possibilities
    could explain them. For example, take a *D* with only the following two observations.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/34fede020a28b73c80591562bb2826a8.png)'
  prefs: []
  type: TYPE_IMG
- en: We have some good guesses about what kind of function f would explain these
    observations. In all likelihood, it’s a straight line – right?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fc260dbd08bc14bd0f43cbd57e402dcb.png)'
  prefs: []
  type: TYPE_IMG
- en: That would make the most sense. But why can’t it be a polynomial function as
    well?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/578cf61a8a8fb74eccd365e37ce77cd0.png)'
  prefs: []
  type: TYPE_IMG
- en: Why can’t it be something even more complicated?
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/91523165a11be2d56f8615c486a308dd.png)'
  prefs: []
  type: TYPE_IMG
- en: The fact of the matter is that there is no reason that any one of these explanations
    is completely implausible. *They are all equally valid hypotheses.*
  prefs: []
  type: TYPE_NORMAL
- en: So why even bother? If there’s no way of nailing down the truth, then aren’t
    we shot from the get-go?
  prefs: []
  type: TYPE_NORMAL
- en: 'If that were true, then you probably wouldn’t be looking at this page, and
    most crimes probably wouldn’t be solved. We’ll formalize this concept later on,
    but for now, take it at face value: we’re trying to formulate our hypothesis based
    on what is *probably* the case. We’re trying to pluck some hypothesis that we
    think works best, *g*, from an infinite space of different hypotheses, *H*.'
  prefs: []
  type: TYPE_NORMAL
- en: How do we go about that? With our detective, of course – the algorithm, *A*.
    The algorithm will be responsible for picking through our infinitely large hypothesis
    space *H* and figuring out which one makes the most sense. The one we land on
    is *g*, and we say it approximates our real function *f* well enough that we can
    use it: *gf*.
  prefs: []
  type: TYPE_NORMAL
- en: This is all there really is to formalizing a machine learning problem. We have
    some unknown target function *f:XY*. We don’t know what *f* is, but we have examples
    of inputs and outputs that we call *D*. We also have an infinite number of possible
    hypotheses *H*, which we’ll slowly whittle down until we find a hypothesis that
    looks good enough, *g*. We’ll hone in on *g* by feeding *D* to *A*, which is able
    to guess which is the closest to the real thing.
  prefs: []
  type: TYPE_NORMAL
- en: Solving the mystery
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In our detective analogy, Agent *A* has a pile of evidence *D* to figure out
    who the killer *f* is. A will look through a massive pool of suspects, *H*, until
    he thinks he has one, *g*, that fits the profile. There’s no guarantee that *g* is *f* –
    and in machine learning, we almost never have that guarantee – but this is his
    best guess based on the evidence that is available.
  prefs: []
  type: TYPE_NORMAL
- en: If there was more evidence available, we might arrive at a different conclusion.
    There’s a chance we’ll pin the wrong guy altogether, and that’s catastrophic.
    In practice, you’ll need to determine how much room for error you can allow for
    in your algorithm based on your requirements (something we’ll talk about later).
  prefs: []
  type: TYPE_NORMAL
- en: If it were a different agent looking at the evidence, they might suggest a totally
    different set of suspects. This is what happens when we switch the algorithm we’re
    using to evaluate the data. There’s a price to pay for this too, which we’ll discuss.
    For the meantime, choose your algorithm wisely.
  prefs: []
  type: TYPE_NORMAL
- en: All sorts of subtleties bubble to the surface as you spend more time delving
    into the theory. It can be a slog sometimes, but it will make you a better machine
    learning practitioner in the long run and will be vital if you ever want to use
    it in the real world.
  prefs: []
  type: TYPE_NORMAL
- en: Next time I’ll talk a bit about what it means to explore *H*, why it’s so hard
    to pick out the correct answer from this pile and why we can do it at all.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio**: [Spencer Norris](https://www.spencernorris.xyz/) is a data scientist
    and freelance journalist. He currently works as a contractor and publishes on
    his blog on [Medium](https://medium.com/@spencernorris).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://opendatascience.com/how-to-define-a-machine-learning-problem-like-a-detective/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Machine learning — Is the emperor wearing clothes?](https://www.kdnuggets.com/2018/10/machine-learning-emperor-wearing-clothes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What If the Data Tells You to Be Racist? When Algorithms Explicitly Penalize](https://www.kdnuggets.com/2018/09/siegel-when-algorithms-explicitly-penalize.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why understanding of truth is important in Data Science?](https://www.kdnuggets.com/2018/01/understanding-truth-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part One: Neurons Are Slow,…](https://www.kdnuggets.com/2022/04/machine-learning-like-brain-part-one-neurons-slow-slow-slow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to MLOps like a Boss: A Guide to Machine Learning without Tears](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part Two: Perceptrons vs Neurons](https://www.kdnuggets.com/2022/05/machine-learning-like-brain-part-two-perceptrons-neurons.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part 3: Fundamental Architecture](https://www.kdnuggets.com/2022/06/machine-learning-like-brain-part-3-fundamental-architecture.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part 4: The Neuron’s…](https://www.kdnuggets.com/2022/06/machine-learning-like-brain-part-4-neuron-limited-ability-represent-precise-values.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part 5: Biological Neurons…](https://www.kdnuggets.com/2022/07/machine-learning-like-brain-part-5-biological-neurons-cant-summation-inputs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
