- en: Data Structures Related to Machine Learning Algorithms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/01/data-structures-related-machine-learning-algorithms.html/2](https://www.kdnuggets.com/2018/01/data-structures-related-machine-learning-algorithms.html/2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/01/data-structures-related-machine-learning-algorithms.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**Heap**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A heap is another hierarchical, ordered data structure similar to a tree except
    instead of a horizontal ordering, it has a vertical ordering. This ordering applies
    along the hierarchy, but not across it: the parent is always larger than both
    its children, but a node of higher rank is not necessarily larger than a lower
    one that’s not directly beneath it.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8e8244886a065cc7cd6b56c0bb56db8.png)'
  prefs: []
  type: TYPE_IMG
- en: Both insertion and retrieval are performed by promotion. An element is first
    inserted in the highest available position. Then it is compared with its parent
    and promoted until it reaches the right rank. To take an element off the heap,
    the larger of the two children is promoted to the missing position, then the larger
    of those two children is promoted and so on until everything has trickled up the
    ranks.
  prefs: []
  type: TYPE_NORMAL
- en: Typically, the highest ranking value at the top is pulled off the heap in order
    to sort a list. Unlike a tree, most heaps are simply stored in an array with the
    relationships between elements only implicit.
  prefs: []
  type: TYPE_NORMAL
- en: '**Stack**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A stack is defined as “first in, last out.” An element is *pushed* onto the
    top of the stack where it covers the previous element. The top element must be *popped* off
    before any of the others can be accessed.
  prefs: []
  type: TYPE_NORMAL
- en: '*Stacks are mainly useful for parsing grammars and implementing computer languages.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are many machine learning applications for which a domain specific language
    (DSL) is the perfect solution. For instance, the [libAGF library](https://github.com/peteysoft/libmsci) uses
    a **recursive control language** to generalize binary classification to multi-class.
    A special character is used to repeat a previous option, but because the language
    is recursive, the option must be taken from the same hierarchical level or higher.
    This is implemented by a stack.
  prefs: []
  type: TYPE_NORMAL
- en: '**Queue**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A queue is defined as “first in, first out.” Think of the line at the bank teller
    (for those of us still old enough to remember a time before internet banking).
    Queues are useful **in real time programming** so that the program can maintain
    a list of jobs to be processed.
  prefs: []
  type: TYPE_NORMAL
- en: Consider an application to record split times of athletes. You type in the bib
    number and hit enter, except in the time it took you to do that the next athlete
    behind has also passed. So you type in a list of bib numbers of the nearest approaching
    athletes, then hit a separate key to register the next in the queue as having
    passed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Set**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A set consists of an un-ordered list of non-repeating elements. If you add an
    element that’s already in the set, there will be no change. Since much of the
    mathematics of machine learning deals with sets, they are very useful data structures.
  prefs: []
  type: TYPE_NORMAL
- en: '**Associative arrays**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In an associative array, there are two types of data which are stored in pairs:
    the *key* and its associated *value*. The data structure is relational in nature:
    the value is addressed by its key. Since much of the training data is also relational,
    this type of data structure would seem ideally suited to machine learning problems.'
  prefs: []
  type: TYPE_NORMAL
- en: In practice, it’s not used so much, in part because most associative arrays
    are only one-dimensional, whereas machine learning data is typically multi-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: '*Associative arrays are good for building dictionaries.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Suppose you are building a DSL, want to store a list of functions and variables,
    and need to distinguish between the two.
  prefs: []
  type: TYPE_NORMAL
- en: “sin” → function
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “var” → variable
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “exp” → function
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “x” → variable
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “sqrt” → function
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: “a” → variable
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Querying the array on “sqrt” would return, “function.”
  prefs: []
  type: TYPE_NORMAL
- en: '**Custom data structures**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you work on more problems, you are sure to encounter those for which the
    standard recipe box does not contain optimal structures. You will need to design
    your own data structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a multi-class classifier, which generalizes a binary classifier to
    work with classification problems having more than two classes. An obvious solution
    is bisection: recursively split the classes into two groups. You could use something
    similar to a binary tree to organize the binary classifiers, except that a hierarchical
    solution is not the only method of solving for multi-class.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Consider several partitions that are then used to solve for all the class
    probabilities simultaneously.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The most general solution would combine the two, thus each hierarchical partition
    need not be binary but could be solved by a non-hierarchical multi-class classifier.
    This is the approach taken in the *libAGF* library.
  prefs: []
  type: TYPE_NORMAL
- en: More complex data structures can also be composed of the basic structures. Consider
    a sparse matrix class. In a sparse matrix, most of the elements are zero and only
    the non-zero elements are stored. We could store the position and value for each
    element as a triplet and have a list of them in an **extensible array**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the 3 by 3 identity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a10fed70977baeb14c21b7a2fabd8b91.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Conclusions**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data structures are only occasionally interesting in their own right. What makes
    them truly interesting are the kinds of problems you can solve with them.
  prefs: []
  type: TYPE_NORMAL
- en: For most of the work I do, I’m using a lot of basic fixed-length arrays. I mostly
    use more sophisticated data structures to make the programs a little smoother
    in how they run and interface with the outside world and a little more user friendly.
    Less like the Fortran programs of yore where you had to endure a compile cycle
    of close to half an hour just to change the grid sizes (I actually worked on a
    program like this!).
  prefs: []
  type: TYPE_NORMAL
- en: Even if you can’t come up with an application off the top of your head I still
    I think it’s good to know about things like stacks and queues. You never know
    when one might come in handy.
  prefs: []
  type: TYPE_NORMAL
- en: Really sophisticated artificial intelligence applications might use things like
    directed and undirected graphs, which are really just generalizations of trees
    and linked lists. How are you going to build things like the former if you can’t
    cope with the latter?
  prefs: []
  type: TYPE_NORMAL
- en: '**Problems**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you want to practice and realize data structures for ML algorithm yourself,
    try to solve some of problems below:'
  prefs: []
  type: TYPE_NORMAL
- en: Encapsulate the matrix-vector multiplication code snippet into a subroutine
    called **matrix_times_vector**. Design the calling syntax for the subroutine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using **struct, typedef** or **class**, encapsulate both vectors and matrices
    into a pair of abstract types called **vect** and **matrix**, respectively. Design
    an API for the types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find at least three libraries online that do the above.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download and install the LIBSVM library. Consider the method **Kernel::k_function** on
    line 316 of “svm.cpp”. What are the advantages and disadvantages of the data structure
    used to hold vectors?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you re-factor calculation of kernel functions in the LIBSVM library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which data structures described in the text are abstract types?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What internal representation or data structure could you use to implement the
    abstract data types? Are there any that are not included in the list above?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using a binary tree, design an associative array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider the vector type in LIBSVM. How can this be used to represent a sparse
    matrix? Contrast this with the sparse matrix class described above. Look at [the
    complete type](https://github.com/peteysoft/libmsci/sparse/sparse.h). What are
    the advantages and disadvantages of each representation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement a treesort and a heapsort. Now use the same data structures to find
    the top *k* elements. What common machine learning algorithm is this good for?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement your favorite data structure in your favourite language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bio: [Peter Mills](https://blog.statsbot.co/@peteymills)** is passionate
    about science, and is interested in atmospheric physics, chaos theory and machine
    learning.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://blog.statsbot.co/data-structures-related-to-machine-learning-algorithms-5edf77c8bbf4?utm_source=kdnuggets&utm_medium=post&utm_campaign=data-structs).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top 10 Machine Learning Algorithms for Beginners](/2017/10/top-10-machine-learning-algorithms-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Much Mathematics Does an IT Engineer Need to Learn to Get Into Data Science?](/2017/12/mathematics-needed-learn-data-science-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data scientists mostly just do arithmetic and that’s a good thing](/2016/05/data-scientists-mostly-arithmetic-good-thing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
