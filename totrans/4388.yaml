- en: Deploying Streamlit Apps Using Streamlit Sharing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/10/deploying-streamlit-apps-streamlit-sharing.html](https://www.kdnuggets.com/2020/10/deploying-streamlit-apps-streamlit-sharing.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Tyler Richards](https://tylerjrichards.medium.com/), Data Scientist @
    Facebook**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/da899ce93e8e3a76f002562b9758b333.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: Over the past couple of weeks, I’ve been playing around with a new Streamlit
    feature called Streamlit sharing, which makes it super easy to deploy your custom
    apps. I’m going to go through a bit of background first, so if you want to see
    the docs for Streamlit sharing to get started you can find them [here](http://docs.streamlit.io/sharing).
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit background
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a bit of background, Streamlit is a framework that lets you quickly and
    confidently turn a python script into a web app and is an incredible tool for
    data scientists working on teams where they need to quickly share a model or an
    interactive analysis, or for data scientists working on personal projects they
    want to show the world. Here’s a [Streamlit beginner tutorial](https://docs.streamlit.io/en/stable/) if
    you want to try it out!
  prefs: []
  type: TYPE_NORMAL
- en: I’ve been using Streamlit for the past ~6 months, and it’s been **so** useful.
    Previously, if I knew I wanted to make a web app at the end of a project, I would
    always opt to switch to R for the wonderful R shiny framework, even though I am
    a much better python programmer than an R one. Going through Django or flask is
    just so much development friction to take on that it’s rarely worth it for a personal
    project and always takes too long for anything at work. But after using Streamlit,
    I now not only had options but found myself preferring python+Streamlit to R+shiny.
  prefs: []
  type: TYPE_NORMAL
- en: Streamlit sharing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This brings me to a couple of months ago. I started a [DS project](http://www.tylerjrichards.com/books_reco.html) focused
    on analyzing reading habits using data from the [Goodreads](http://www.tylerjrichards.com/books_reco.html) app.
    I decided to try Streamlit out, and it turned a multi-day long process of getting
    a Django/flask app running well locally into one that took around a half-hour
    for local Streamlit use. It really is as easy as throwing your analysis into a
    script, and calling Streamlit functions whenever you want to put a graph, widget,
    or text explainer on the app.
  prefs: []
  type: TYPE_NORMAL
- en: However, the most annoying process on Streamlit was the deployment and management
    process. The [tutorial I followed](https://towardsdatascience.com/how-to-deploy-a-streamlit-app-using-an-amazon-free-ec2-instance-416a41f69dc3) was
    straightforward, and didn’t take that much time, but was fairly extensive. It
    required launching an ec2 instance, configuring SSH, using tmux, and going back
    to this terminal every time you wanted to change anything about your web app. **It
    was doable but annoying.**
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/482aa157e9f35eb689684f3edd6299db.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: A few weeks ago, Streamlit saw my Goodreads app and asked if I wanted to test
    out their Streamlit sharing beta, which was supposed to remove the friction explained
    above. I, obviously, gave it a shot.
  prefs: []
  type: TYPE_NORMAL
- en: '**All I had to do was:**'
  prefs: []
  type: TYPE_NORMAL
- en: Push my app to a Github repo
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a requirements.txt file that listed all the python libraries I used
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point Streamlit to my app via the link to the repository
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Deploy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It genuinely was **that easy** to figure out. I had sectioned off a couple of
    hours to figure it out, as I expected various bugs to pop up (it is in beta!),
    but it took me fewer than 10 minutes to get it up and running.
  prefs: []
  type: TYPE_NORMAL
- en: I currently have three apps running, one is a test app, the second is the [Goodreads
    book recommendation app](https://share.streamlit.io/tylerjrichards/book_reco/master/books.py/+/) I
    mentioned earlier, and the third is an [interactive analysis](http://www.tylerjrichards.com/survey.html) of
    a tech survey that I spun up (from idea to functioning and deployed web app) in
    around an hour and a half.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to Streamlit sharing has also saved me the ~$5 a month AWS bill, which
    I would gladly pay for this feature just for the savings in time spent on deployment
    alone.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/02602e759d6c3d33c5ae17ecaad5e4b1.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If I wanted to try out a new app, I could just click the new app button, point
    it to my repo, and they would handle literally everything else.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/a598a9fb324268a376264fc793a6f7a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by author
  prefs: []
  type: TYPE_NORMAL
- en: If your Streamlit app uses any other packages, make sure to include a requirements.txt
    file in your repo — otherwise you’ll immediately get an error when deploying.
    You can use something like pip freeze to get requirements but that will give you
    all of the packages in the environment including those that you don’t use in your
    current project. And that will slow down your app deployment! So I’d suggest using
    something like pipreqs to keep it to just the core requirements for your app.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you have requirements for apt-get, add them to `packages.txt -`, one package
    per line.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So as a wrap-up, Streamlit sharing has saved me $ on both a development time
    saved and hosting cost basis (shoutout to the VC funds that make this all possible),
    has made my personal projects more interactive and prettier, and has taken away
    the headaches of deploying quick models or analyses. No wonder I’m a Streamlit
    fan.
  prefs: []
  type: TYPE_NORMAL
- en: Want to see more of this content? You can find me on [Twitter](https://twitter.com/tylerjrichards), [Substack](https://insignificantdatascience.substack.com/p/starting-a-data-science-newsletter),
    or on [my portfolio site](http://www.tylerjrichards.com/).
  prefs: []
  type: TYPE_NORMAL
- en: '**Happy Stream(lit)ing!**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Tyler Richards](https://tylerjrichards.medium.com/)** is a Data Scientist
    at Facebook.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/deploying-streamlit-apps-using-streamlit-sharing-16105d257852).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[12-Hour Machine Learning Challenge: Build & deploy an app with Streamlit and
    DevOps tools](/2020/02/machine-learning-challenge-build-deploy-app-streamlit-devops.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build an app to generate photorealistic faces using TensorFlow and Streamlit](/2020/04/app-generate-photorealistic-faces-tensorflow-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Model Deployment](/2020/09/machine-learning-model-deployment.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Deploying a Streamlit WebApp to Heroku using DAGsHub](https://www.kdnuggets.com/2022/02/deploying-streamlit-webapp-heroku-dagshub.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[New Ways of Sharing Code Blocks for Data Scientists](https://www.kdnuggets.com/2022/03/new-ways-sharing-code-blocks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Components of a Data Sharing Platform](https://www.kdnuggets.com/2022/05/5-key-components-data-sharing-platform.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tips & Tricks of Deploying Deep Learning Webapp on Heroku Cloud](https://www.kdnuggets.com/2021/12/tips-tricks-deploying-dl-webapps-heroku.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Feature Store Summit 2023: Practical Strategies for Deploying ML…](https://www.kdnuggets.com/2023/09/hopsworks-feature-store-summit-2023-practical-strategies-deploying-ml-models-production-environments)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploying Your First Machine Learning Model](https://www.kdnuggets.com/deploying-your-first-machine-learning-model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
