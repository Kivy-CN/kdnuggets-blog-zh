- en: Blockchain Explained in 7 Python Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/04/blockchain-explained-7-python-functions.html](https://www.kdnuggets.com/2018/04/blockchain-explained-7-python-functions.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Tom Cusack](https://www.linkedin.com/in/tomcusack1/), Data Scientist
    in the Banking Sector**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/2758aa7121cf5ad3e4d14237df683ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: I think for many people out there, Blockchain is this phenomenon, which is hard
    to get your head around. I started watching videos and reading articles, but for
    me personally, it wasn’t until I wrote my own simple Blockchain, that I truly
    understood what it is and the potential applications for it.
  prefs: []
  type: TYPE_NORMAL
- en: The way I think about blockchain is it is an encrypted database that is public.
    If you were Amazon and you wanted to use the technology to track your stock levels,
    would using Blockchain make sense? Probably not, since your customers won’t want
    to expend their resources verifying your blockchain, since they state on their
    website, ‘Only 1 left!’, anyway.
  prefs: []
  type: TYPE_NORMAL
- en: I’ll leave you to think about future applications. So without further ado, lets
    set up our 7 functions!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: At the heart of the blockchain is the hashing function. Without encryption,
    the blockchain will be easily manipulable and transactions will be able to be
    fraudulently inserted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The ‘state’ is the record of who owns want. For example, I have 10 coins and
    I give 1 to Medium, then the state will be the value of the dictionary below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The important thing to note is that overdrafts cannot exist. If there are only
    10 coins in existence, then I cannot give 11 coins to someone. The below function
    verifies that the transaction we attempt to make is indeed valid. Also, a transaction
    must balance. I cannot give 5 coins and have the recipient receive 4 coins, since
    that would allow the destruction and creation of coins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, we can make our block. The information from the previous block is read,
    and used to link it to the new block. This, too, is central to the idea of blockchain.
    Seemingly valid transactions can be attempted to fraudulently be inserted into
    the blockchain, but decrypting all the previous blocks is computationally (nearly)
    impossible, which preserves the integrity of the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Below is a small helper function to check the hash of the previous block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Once we have assembled everything together, its time to create our block. We
    will now update the blockchain.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we are finished, the chain must be verified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, need a transaction function, which hangs all of the above together:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So, now we have our 7 functions. How do we interact with it? Well, first we
    need to start our chain with a *Genesis Block. *This is the inception of our new
    coin (or stock inventory, etc). For the purposes of this article, I will say that
    I, Tom, will start off with 10 coins.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, look what happens when I give some coin to Medium:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The state gets updated to show who has what:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And the blockchain looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Our first new transaction has been created and inserted to the top of the stack.
    Now, I hope I have piqued your curiosity, and are interested in copying the code
    down and playing with it. In my opinion, this is the best way to learn a new technology — Get
    inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Play with the code and make your own coin. What happens if you try and give
    more coins than exist? What happens to the state if you keep creating new payees?
  prefs: []
  type: TYPE_NORMAL
- en: Can you think of future applications for blockchain? Feel free to ask me anything
    in the comments, and I’ll try and help.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Tom Cusack](https://www.linkedin.com/in/tomcusack1/)** is a Data Scientist
    in the Banking Sector.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/blockchain-explained-in-7-python-functions-c49c84f34ba5).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Blockchains and APIs](/2018/03/blockchains-apis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Convergence of AI and Blockchain: What’s the deal?](/2018/01/convergence-ai-blockchain-deal.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Swiftapply  – Automatically efficient pandas apply operations](/2018/04/swiftapply-automatically-efficient-pandas-apply-operations.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
