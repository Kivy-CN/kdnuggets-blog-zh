["```py\n# load dataset\nfrom pycaret.datasets import get_data\ndata = get_data('airline')\n\n# init setup\nfrom pycaret.time_series import *\ns = setup(data, fh = 12, session_id = 123)\n\n# compare models\nbest = compare_models()\n```", "```py\n# forecast plot\n\nplot_model(best, plot = 'forecast')\n```", "```py\n# forecast plot 36 days out in future\n\nplot_model(best, plot = 'forecast', data_kwargs = {'fh' : 36})\n```", "```py\n# Functional API (Existing)\n\n# load dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup\nfrom pycaret.classification import *\ns = setup(data, target = 'Purchase', session_id = 123)\n\n# compare models\nbest = compare_models()\n```", "```py\n# load dataset\nfrom pycaret.datasets import get_data\ndata = get_data('juice')\n\n# init setup 1\nfrom pycaret.classification import ClassificationExperiment\n\nexp1 = ClassificationExperiment()\nexp1.setup(data, target = 'Purchase', session_id = 123)\n\n# compare models init 1\nbest = exp1.compare_models()\n\n# init setup 2\nexp2 = ClassificationExperiment()\nexp2.setup(data, target = 'Purchase', normalize = True, session_id = 123)\n\n# compare models init 2\nbest2 = exp2.compare_models()\n```", "```py\nimport pandas as pd\n\n# generate leaderboard\nleaderboard_exp1 = exp1.get_leaderboard()\nleaderboard_exp2 = exp2.get_leaderboard()\nlb = pd.concat([leaderboard_exp1, leaderboard_exp2])\n```", "```py\n# print pipeline steps\nprint(exp1.pipeline.steps)\nprint(exp2.pipeline.steps)\n```", "```py\n# load dataset\nfrom pycaret.datasets import get_data\ndiabetes = get_data('diabetes')\n\n# init setup\nfrom pycaret.classification import *\nclf1 = setup(data = diabetes, target = 'Class variable', n_jobs = 1)\n\n# create pyspark session\nfrom pyspark.sql import SparkSession\nspark = SparkSession.builder.getOrCreate()\n\n# import parallel back-end\nfrom pycaret.parallel import FugueBackend\n\n# compare models\nbest = compare_models(parallel = FugueBackend(spark))\n```", "```py\n# install sklearnex\npip install scikit-learn-intelex\n```", "```py\n# Functional API (Existing)\n\n# load dataset\nfrom pycaret.datasets import get_data\ndata = get_data('bank')\n\n# init setup\nfrom pycaret.classification import *\ns = setup(data, target = 'deposit', session_id = 123)\n```", "```py\n%%time\nlr = create_model('lr')\n```", "```py\n%%time\nlr2 = create_model('lr', engine = 'sklearnex')\n```"]