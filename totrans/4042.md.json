["```py\nimport threading\nimport os\n```", "```py\ndef calculate_squares(numbers):\n    for num in numbers:\n        square = num * num\n        print(\n            f\"Square of the number {num} is {square} | Thread Name {threading.current_thread().name} | PID of the process {os.getpid()}\"\n        )\n```", "```py\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    half = len(numbers) // 2\n    first_half = numbers[:half]\n    second_half = numbers[half:]\n\n    t1 = threading.Thread(target=calculate_squares, name=\"t1\", args=(first_half,))\n    t2 = threading.Thread(target=calculate_squares, name=\"t2\", args=(second_half,))\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n```", "```py\nSquare of the number 1 is 1 | Thread Name t1 | PID of the process 345\nSquare of the number 2 is 4 | Thread Name t1 | PID of the process 345\nSquare of the number 5 is 25 | Thread Name t2 | PID of the process 345\nSquare of the number 3 is 9 | Thread Name t1 | PID of the process 345\nSquare of the number 6 is 36 | Thread Name t2 | PID of the process 345\nSquare of the number 4 is 16 | Thread Name t1 | PID of the process 345\nSquare of the number 7 is 49 | Thread Name t2 | PID of the process 345\nSquare of the number 8 is 64 | Thread Name t2 | PID of the process 345\n```", "```py\nfrom multiprocessing import Process\nimport os\n```", "```py\ndef calculate_squares(numbers):\n    for num in numbers:\n        square = num * num\n        print(\n            f\"Square of the number {num} is {square} | PID of the process {os.getpid()}\"\n        )\n```", "```py\nif __name__ == \"__main__\":\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8]\n    half = len(numbers) // 2\n    first_half = numbers[:half]\n    second_half = numbers[half:]\n\n    p1 = Process(target=calculate_squares, args=(first_half,))\n    p2 = Process(target=calculate_squares, args=(second_half,))\n\n    p1.start()\n    p2.start()\n\n    p1.join()\n    p2.join()\n```", "```py\nSquare of the number 1 is 1 | PID of the process 1125\nSquare of the number 2 is 4 | PID of the process 1125\nSquare of the number 3 is 9 | PID of the process 1125\nSquare of the number 4 is 16 | PID of the process 1125\nSquare of the number 5 is 25 | PID of the process 1126\nSquare of the number 6 is 36 | PID of the process 1126\nSquare of the number 7 is 49 | PID of the process 1126\nSquare of the number 8 is 64 | PID of the process 1126\n```", "```py\nfrom multiprocessing import Process\nimport os\nimport time\nimport random\n\ndef calculate_squares(numbers):\n    for num in numbers:\n        square = num * num\n\nif __name__ == \"__main__\":\n    numbers = [\n        random.randrange(1, 50, 1) for i in range(10000000)\n    ]  # Creating a random list of integers having size 10^7.\n    half = len(numbers) // 2\n    first_half = numbers[:half]\n    second_half = numbers[half:]\n\n    # ----------------- Creating Single Process Environment ------------------------#\n\n    start_time = time.time()  # Start time without multiprocessing\n\n    p1 = Process(\n        target=calculate_squares, args=(numbers,)\n    )  # Single process P1 is executing all list\n    p1.start()\n    p1.join()\n\n    end_time = time.time()  # End time without multiprocessing\n    print(f\"Execution Time Without Multiprocessing: {(end_time-start_time)*10**3}ms\")\n\n    # ----------------- Creating Multi Process Environment ------------------------#\n\n    start_time = time.time()  # Start time with multiprocessing\n\n    p2 = Process(target=calculate_squares, args=(first_half,))\n    p3 = Process(target=calculate_squares, args=(second_half,))\n\n    p2.start()\n    p3.start()\n\n    p2.join()\n    p3.join()\n\n    end_time = time.time()  # End time with multiprocessing\n    print(f\"Execution Time With Multiprocessing: {(end_time-start_time)*10**3}ms\")\n```", "```py\nExecution Time Without Multiprocessing: 619.8039054870605ms\nExecution Time With Multiprocessing: 321.70287895202637ms\n```"]