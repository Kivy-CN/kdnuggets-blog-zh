["```py\n\nEXPLAIN ANALYZE SELECT line_items.product_id, SUM(line_items.price)\nFROM line_items\nWHERE product_id > 80\nGROUP BY 1\n```", "```py\n\nHashAggregate (cost=13.81..14.52 rows=71 width=12) (actual time=0.137..0.141 rows=20 loops=1)\nGroup Key: product_id\n-> Seq Scan on line_items (cost=0.00..13.25 rows=112 width=8) (actual time=0.017..0.082 rows=112 loops=1)\nFilter: (product_id > 80)\nRows Removed by Filter: 388\nPlanning time: 0.082 ms\nExecution time: 0.187 ms\n```", "```py\n\nCREATE INDEX items_product_id ON line_items(product_id)\n```", "```py\n\nCREATE INDEX items_product_id_price ON line_items(product_id, price)\n```", "```py\n\nGroupAggregate (cost=0.27..7.50 rows=71 width=12) (actual time=0.034..0.090 rows=20 loops=1)\nGroup Key: product_id\n-> Index Only Scan using items_product_id_price on line_items (cost=0.27..6.23 rows=112 width=8) (actual time=0.024..0.049 rows=112 loops=1)\nIndex Cond: (product_id > 80)\nHeap Fetches: 0\nPlanning time: 0.271 ms\nExecution time: 0.136 ms\n```", "```py\n\nCREATE INDEX items_product_id_price_reversed ON line_items(price, product_id)\n```", "```py\n\nSELECT orders.product_id, SUM(line_items.price)\nFROM line_items\nLEFT JOIN orders ON line_items.order_id = orders.id\nWHERE line_items.created_at BETWEEN '2018-01-01' and '2018-01-02'\nGROUP BY 1\n```", "```py\n\nCREATE INDEX line_items_created_at_order_id_price ON line_items(created_at, order_id, price)\n```", "```py\n\nGroupAggregate (cost=12.62..12.64 rows=1 width=12) (actual time=0.029..0.029 rows=1 loops=1)\nGroup Key: orders.product_id\n-> Sort (cost=12.62..12.62 rows=1 width=8) (actual time=0.025..0.026 rows=1 loops=1)\nSort Key: orders.product_id\nSort Method: quicksort Memory: 25kB\n-> Nested Loop Left Join (cost=0.56..12.61 rows=1 width=8) (actual time=0.015..0.017 rows=1 loops=1)\n-> Index Only Scan using line_items_created_at_order_id_price on line_items (cost=0.27..4.29 rows=1 width=8) (actual time=0.009..0.010 rows=1 loops=1)\nIndex Cond: ((created_at >= '2018-01-01 00:00:00'::timestamp without time zone) AND (created_at <= '2018-01-02 00:00:00'::timestamp without time zone))\nHeap Fetches: 0\n-> Index Scan using orders_pkey on orders (cost=0.29..8.30 rows=1 width=8) (actual time=0.004..0.005 rows=1 loops=1)\nIndex Cond: (line_items.order_id = id)\nPlanning time: 0.303 ms\nExecution time: 0.072 ms\n```"]