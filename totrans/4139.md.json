["```py\ns = '   This is a sentence with whitespace.       \\n'\n\nprint('Strip leading whitespace: {}'.format(s.lstrip()))\nprint('Strip trailing whitespace: {}'.format(s.rstrip()))\nprint('Strip all whitespace: {}'.format(s.strip()))\n```", "```py\nStrip leading whitespace: This is a sentence with whitespace.       \n\nStrip trailing whitespace:    This is a sentence with whitespace.\nStrip all whitespace: This is a sentence with whitespace.\n```", "```py\ns = 'This is a sentence with unwanted characters.AAAAAAAA'\n\nprint('Strip unwanted characters: {}'.format(s.rstrip('A')))\n```", "```py\nStrip unwanted characters: This is a sentence with unwanted characters.\n```", "```py\ns = 'KDnuggets is a fantastic resource'\n\nprint(s.split())\n```", "```py\n['KDnuggets', 'is', 'a', 'fantastic', 'resource']\n```", "```py\ns = 'these,words,are,separated,by,comma'\nprint('\\',\\' separated split -> {}'.format(s.split(',')))\n\ns = 'abacbdebfgbhhgbabddba'\nprint('\\'b\\' separated split -> {}'.format(s.split('b')))\n```", "```py\n',' separated split -> ['these', 'words', 'are', 'separated', 'by', 'comma']\n'b' separated split -> ['a', 'ac', 'de', 'fg', 'hhg', 'a', 'dd', 'a']\n```", "```py\ns = ['KDnuggets', 'is', 'a', 'fantastic', 'resource']\n\nprint(' '.join(s))\n```", "```py\nKDnuggets is a fantastic resource\n```", "```py\ns = ['Eleven', 'Mike', 'Dustin', 'Lucas', 'Will']\n\nprint(' and '.join(s))\n```", "```py\nEleven and Mike and Dustin and Lucas and Will\n```", "```py\ns = 'KDnuggets'\n\nprint('The reverse of KDnuggets is {}'.format(s[::-1]))\n```", "```py\nThe reverse of KDnuggets is: steggunDK\n```", "```py\ns = 'KDnuggets'\n\nprint('\\'KDnuggets\\' as uppercase: {}'.format(s.upper()))\nprint('\\'KDnuggets\\' as lowercase: {}'.format(s.lower()))\nprint('\\'KDnuggets\\' as swapped case: {}'.format(s.swapcase()))\n```", "```py\n'KDnuggets' as uppercase: KDNUGGETS\n'KDnuggets' as lowercase: kdnuggets\n'KDnuggets' as swapped case: kdNUGGETS\n```", "```py\ns1 = 'perpendicular'\ns2 = 'pen'\ns3 = 'pep'\n\nprint('\\'pen\\' in \\'perpendicular\\' -> {}'.format(s2 in s1))\nprint('\\'pep\\' in \\'perpendicular\\' -> {}'.format(s3 in s1))\n```", "```py\n'pen' in 'perpendicular' -> True\n'pep' in 'perpendicular' -> False\n```", "```py\ns = 'Does this string contain a substring?'\n\nprint('\\'string\\' location -> {}'.format(s.find('string')))\nprint('\\'spring\\' location -> {}'.format(s.find('spring')))\n```", "```py\n'string' location -> 10\n'spring' location -> -1\n```", "```py\ns1 = 'The theory of data science is of the utmost importance.'\ns2 = 'practice'\n\nprint('The new sentence: {}'.format(s1.replace('theory', s2)))\n```", "```py\nThe new sentence: The practice of data science is of the utmost importance.\n```", "```py\ncountries = ['USA', 'Canada', 'UK', 'Australia']\ncities = ['Washington', 'Ottawa', 'London', 'Canberra']\n\nfor x, y in zip(countries, cities):\n  print('The capital of {} is {}.'.format(x, y))\n```", "```py\nThe capital of USA is Washington.\nThe capital of Canada is Ottawa.\nThe capital of UK is London.\nThe capital of Australia is Canberra.\n```", "```py\nfrom collections import Counter\ndef is_anagram(s1, s2):\n  return Counter(s1) == Counter(s2)\n\ns1 = 'listen'\ns2 = 'silent'\ns3 = 'runner'\ns4 = 'neuron'\n\nprint('\\'listen\\' is an anagram of \\'silent\\' -> {}'.format(is_anagram(s1, s2)))\nprint('\\'runner\\' is an anagram of \\'neuron\\' -> {}'.format(is_anagram(s3, s4)))\n```", "```py\n'listen' an anagram of 'silent' -> True\n'runner' an anagram of 'neuron' -> False\n```", "```py\ndef is_palindrome(s):\n  reverse = s[::-1]\n  if (s == reverse):\n    return True\n  return False\n\ns1 = 'racecar'\ns2 = 'hippopotamus'\n\nprint('\\'racecar\\' a palindrome -> {}'.format(is_palindrome(s1)))\nprint('\\'hippopotamus\\' a palindrome -> {}'.format(is_palindrome(s2)))\n```", "```py\n'racecar' is a palindrome -> True\n'hippopotamus' is a palindrome -> False\n```"]