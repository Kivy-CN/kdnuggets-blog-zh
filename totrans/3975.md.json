["```py\n# organize.py\n\nfrom pathlib import Path\n\ndef organize_files_by_extension(path_to_dir):\n    path = Path(path_to_dir).expanduser().resolve()\n    print(f\"Resolved path: {path}\")\n\n    if path.exists() and path.is_dir():\n        print(f\"The directory {path} exists. Proceeding with file organization...\")\n\n    for item in path.iterdir():\n        print(f\"Found item: {item}\")\n        if item.is_file():\n            extension = item.suffix.lower()\n            target_dir = path / extension[1:]  # Remove the leading dot\n\n            # Ensure the target directory exists\n            target_dir.mkdir(exist_ok=True)\n            new_path = target_dir / item.name\n\n            # Move the file\n            item.rename(new_path)\n\n            # Check if the file has been moved\n            if new_path.exists():\n                print(f\"Successfully moved {item} to {new_path}\")\n            else:\n                print(f\"Failed to move {item} to {new_path}\")\n\n\t  else:\n       print(f\"Error: {path} does not exist or is not a directory.\")\n\norganize_files_by_extension('new_project')\n```", "```py\n# search.py\nfrom pathlib import Path\n\ndef search_and_process_text_files(directory):\n    path = Path(directory)\n    path = path.resolve()\n    for text_file in path.glob('*.txt'):\n    # process text files as needed\n        print(f'Processing {text_file}...')\n        print(text_file.read_text())\n\nsearch_and_process_text_files('new_project')\n```", "```py\nfrom pathlib import Path\n\ndef search_and_process_text_files(directory):\n    path = Path(directory)\n    path = path.resolve()\n    for text_file in path.rglob('*.txt'):\n    # process text files as needed\n        print(f'Processing {text_file}...')\n        print(text_file.read_text())\n\nsearch_and_process_text_files('new_project')\n```", "```py\nOutput >>>\nProcessing /home/balapriya/new_project/txt/requirements.txt...\npsycopg2==2.9.0\nscikit-learn==1.5.0\n```", "```py\n#back_up.py\nimport shutil\nfrom pathlib import Path\n\ndef back_up_files(directory, backup_directory):\n    path = Path(directory)\n    backup_path = Path(backup_directory)\n    backup_path.mkdir(parents=True, exist_ok=True)\n\n    for important_file in path.rglob('*.py'):\n        shutil.copy(important_file, backup_path / important_file.name)\n        print(f'Backed up {important_file} to {backup_path}')\n\nback_up_files('new_project', 'backup')\n```"]