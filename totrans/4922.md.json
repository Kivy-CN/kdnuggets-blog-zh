["```py\n # import TensorFlow\nimport tensorflow as tf\n\nsess = tf.Session()\n\n# Verify we can print a string\nhello = tf.constant(\"Hello UNP from TensorFlow\")\nprint(sess.run(hello))\n\n# Perform some simple math\na = tf.constant(20)\nb = tf.constant(22)\nprint('a + b = {0}'.format(sess.run(a + b))) \n```", "```py\n import tensorflow as tf\nimport numpy as np\nimport math\nimport matplotlib.pyplot as plt\n\n#  generation some house sizes between 1000 and 3500 (typical sq ft of house)\nnum_house = 160\nnp.random.seed(42)\nhouse_size = np.random.randint(low=1000, high=3500, size=num_house )\n\n# Generate house prices from house size with a random noise added.\nnp.random.seed(42)\nhouse_price = house_size * 100.0 + \n              np.random.randint(low=20000, high=70000, size=num_house)  \n\n# Plot generated house and size \nplt.plot(house_size, house_price, \"bx\")  # bx = blue x\nplt.ylabel(\"Price\")\nplt.xlabel(\"Size\")\nplt.show() \n```", "```py\n # you need to normalize values to prevent under/overflows.\ndef normalize(array):\n    return (array - array.mean()) / array.std()\n\n# define number of training samples, 0.7 = 70%.  We can take the first 70% \n# since the values are randomized\nnum_train_samples = math.floor(num_house * 0.7)\n\n# define training data\ntrain_house_size = np.asarray(house_size[:num_train_samples])\ntrain_price = np.asanyarray(house_price[:num_train_samples:])\n\ntrain_house_size_norm = normalize(train_house_size)\ntrain_price_norm = normalize(train_price)\n\n# define test data\ntest_house_size = np.array(house_size[num_train_samples:])\ntest_house_price = np.array(house_price[num_train_samples:])\n\ntest_house_size_norm = normalize(test_house_size)\ntest_house_price_norm = normalize(test_house_price) \n```"]