- en: 'Integrating Python and R, Part 2: Executing R from Python and Vice Versa'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2015/10/integrating-python-r-executing-part2.html](https://www.kdnuggets.com/2015/10/integrating-python-r-executing-part2.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**By Chris Musselle ([Mango Solutions](http://www.mango-solutions.com))**.'
  prefs: []
  type: TYPE_NORMAL
- en: In a [previous article](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)
    we went over why you might want to integrate both R and Python into a single pipeline,
    and how to do so via the use of a flat file air-gap. In doing so we covered how
    to run a Python or R script from the command line, and how to access any additional
    arguments that are parsed in. In this post we complete the integration process
    by showing how the two scripts can be linked together by getting R to call Python
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0eb09d69ebb8a6b50ef17b89287ac9a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Command Line Execution and Executing Subprocesses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To better understand what’s happening when a subprocess is executed, it is worth
    revisiting in more detail what happens when a Python or R process is executed
    on the command line. When the following command is run, a new Python process is
    started to execute the script.
  prefs: []
  type: TYPE_NORMAL
- en: '`python path/to/myscript.py arg1 arg2 arg3`'
  prefs: []
  type: TYPE_NORMAL
- en: During executing, any outputs that are printed to the [standard output and standard
    error streams](https://en.wikipedia.org/wiki/Standard_streams) are displayed back
    to the console. The most common way this is achieved is via a built in function
    (`print()` in Python and `cat()` or `print()` in R), which writes a given string
    to the `stdout` stream. The Python process is then closed once the script has
    finished executing.
  prefs: []
  type: TYPE_NORMAL
- en: Running command line scripts in this fashion is useful, but can become tedious
    and error prone if there are a number of sequential but separate scripts that
    you wish to execute this way. However it is possible for a Python or R process
    to execute another directly in a similar way to the above command line approach.
    This is beneficial as it allows, say a parent Python process to fire up a child
    R process to run a specific script for the analysis. The outputs of this child
    R process can then be passed back to the parent Python process once the R script
    is complete, instead of being printed to the console. Using this approach removes
    the need to manually execute steps individually on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To illustrate the execution of one process by another we are going to use two
    simple examples: one where Python calls R, and one where R calls Python. The analysis
    performed in each case is trivial on purpose so as to focus on the machinery around
    how this is achieved.'
  prefs: []
  type: TYPE_NORMAL
- en: Sample R Script
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Our simple example R script is going to take in a sequence of numbers from the
    command line and return the maximum.
  prefs: []
  type: TYPE_NORMAL
- en: '`# max.R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Fetch command line arguments myArgs <- commandArgs(trailingOnly = TRUE)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Convert to numerics nums = as.numeric(myArgs)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# cat will write the result to the stdout stream cat(max(nums))`'
  prefs: []
  type: TYPE_NORMAL
- en: Executing an R Script from Python
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To execute this from Python we make use of the [subprocess](https://docs.python.org/3/library/subprocess.html)
    module, which is part of the standard library. We will be using the function,
    `check_output` to call the R script, which executes a command and stores the output
    of stdout.
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute the `max.R` script in R from Python, you first have to build up
    the command to be executed. This takes a similar format to the command line statement
    we saw in [part I](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)
    of this blog post series, and in Python terms is represented as a list of strings,
    whose elements correspond to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[''<command_to_run>'', ''<path_to_script>'', ''arg1'' , ''arg2'', ''arg3'',
    ''arg4'']`'
  prefs: []
  type: TYPE_NORMAL
- en: An example of executing an R script form Python is given in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`# run_max.py import subprocess`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Define command and arguments command =''Rscript'' path2script =''path/to
    your script/max.R''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Variable number of args in a list args = [''11'',''3'',''9'',''42'']`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Build subprocess command cmd = [command, path2script] + args`'
  prefs: []
  type: TYPE_NORMAL
- en: check_output will run the command and store to result
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: x = subprocess.check_output(cmd, universal_newlines=True)
  prefs: []
  type: TYPE_NORMAL
- en: '`print(''The maximum of the numbers is:'', x)`'
  prefs: []
  type: TYPE_NORMAL
- en: The argument `universal_newlines=True` tells Python to interpret the returned
    output as a text string and handle both Windows and Linux newline characters.
    If it is omitted, the output is returned as a byte string and must be decoded
    to text by calling `x.decode()` before any further string manipulation can be
    performed.
  prefs: []
  type: TYPE_NORMAL
- en: Sample Python Script
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For our simple Python script, we will split a given string (first argument)
    into multiple substrings based on a supplied substring pattern (second argument).
    The result is then printed to the console one substring per line.
  prefs: []
  type: TYPE_NORMAL
- en: '`# splitstr.py import sys`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Get the arguments passed in string = sys.argv[1] pattern = sys.argv[2]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Perform the splitting ans = string.split(pattern)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Join the resulting list of elements into a single newline # delimited string
    and print print(''\n''.join(ans))`'
  prefs: []
  type: TYPE_NORMAL
- en: Executing a Python Script from R
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When executing subprocess with R, it is recommended to use R’s [system2](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system2.html)
    function to execute and capture the output. This is because the inbuilt [system](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.html)
    function is trickier to use and is not cross-platform compatible.
  prefs: []
  type: TYPE_NORMAL
- en: Building up the command to be executed is similar to the above Python example,
    however `system2` expects the command to be parsed separately from its arguments.
    In addition the first of these arguments must always be the path to the script
    being executed.
  prefs: []
  type: TYPE_NORMAL
- en: One final complication can arise from dealing with spaces in the path name to
    the R script. The simplest method to solve this issue is to double quote the whole
    path name and then encapsulate this string with single quotes so that R preserves
    the double quotes in the argument itself.
  prefs: []
  type: TYPE_NORMAL
- en: An example of executing a Python script from R is given in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '`# run_splitstr.R`'
  prefs: []
  type: TYPE_NORMAL
- en: '`command ="python`“'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Note the single + double quotes in the string (needed if paths have spaces)
    path2script=''"path/to your script/splitstr.py"''`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Build up args in a vector string ="3523462---12413415---4577678---7967956---5456439"
    pattern ="---" args = c(string, pattern)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`# Add path to script as first arg allArgs = c(path2script, args)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`output = system2(command, args=allArgs, stdout=TRUE)`'
  prefs: []
  type: TYPE_NORMAL
- en: '`print(paste("The Substrings are:\n", output))`'
  prefs: []
  type: TYPE_NORMAL
- en: To capture the standard output in a character vector (one line per element),
    `stdout=TRUE` must be specified in `system2`, else just the exit status is returned.
    When `stdout=TRUE` the exit status is stored in an attribute called “status”.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is possible to integrate Python and R into a single application via the use
    of subprocess calls. These allow one parent process to call another as a child
    process, and capture any output that is printed to stdout. In this post we have
    gone through examples of using this approach to get an R script to call Python
    and vice versa.
  prefs: []
  type: TYPE_NORMAL
- en: In a future upcoming article will draw on the material of this post and [part
    I](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/),
    to show a real world example of using Python and R together in an application.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-part-ii-executing-r-from-python-and-vice-versa/
    ).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[R vs Python: head to head data analysis](/2015/10/r-vs-python-data-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science Programming: Python vs R](/2015/10/data-science-programming-python-vs-r.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[R vs Python for Data Science: The Winner is …](/2015/05/r-vs-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[R, Python users show surprising stability, but strong regional differences](/2015/07/poll-primary-analytics-language-r-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Cutting Down Implementation Time by Integrating Jupyter and KNIME](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Integrating ChatGPT Into Data Science Workflows: Tips and Best Practices](https://www.kdnuggets.com/2023/05/integrating-chatgpt-data-science-workflows-tips-best-practices.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Data Analytics: Integrating GitHub Copilot in Databricks](https://www.kdnuggets.com/optimizing-data-analytics-integrating-github-copilot-in-databricks)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Integrating Generative AI in Content Creation](https://www.kdnuggets.com/integrating-generative-ai-in-content-creation)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Is Not Like Your Brain Part 6: The Importance of…](https://www.kdnuggets.com/2022/08/machine-learning-like-brain-part-6-importance-precise-synapse-weights-ability-set-quickly.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Complete Collection of Data Science Cheat Sheets - Part 2](https://www.kdnuggets.com/2022/02/complete-collection-data-science-cheat-sheets-part-2.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
