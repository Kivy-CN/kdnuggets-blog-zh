["```py\nimport pandas as pd\nfrom catboost import Pool, CatBoostClassifier\n\n```", "```py\n# Replace missing categoricals with \"\"\ndf_train.loc[:,cat_cols] = df_train[cat_cols].fillna('')\ndf_test.loc[:,cat_cols] = df_test[cat_cols].fillna('')\n\n# Replace missing numeric with -999\ndf_train = df_train.fillna(-999)\ndf_test = df_test.fillna(-999)\n\n```", "```py\ndf_train['dataset_label'] = 0\ndf_test['dataset_label'] = 1\ntarget = 'dataset_label'\n\n```", "```py\ndef create_adversarial_data(df_train, df_test, cols, N_val=50000):\n    df_master = pd.concat([df_train[cols], df_test[cols]], axis=0)\n    adversarial_val = df_master.sample(N_val, replace=False)\n    adversarial_train = df_master[~df_master.index.isin(adversarial_val.index)]\n    return adversarial_train, adversarial_val\n\nfeatures = cat_cols + numeric_cols + ['TransactionDT']\nall_cols = features + [target]\nadversarial_train, adversarial_test = create_adversarial_data(df_train, df_test, all_cols)\n\n```", "```py\ntrain_data = Pool(\n    data=adversarial_train[features],\n    label=adversarial_train[target],\n    cat_features=cat_cols\n)\nholdout_data = Pool(\n    data=adversarial_test[features],\n    label=adversarial_test[target],\n    cat_features=cat_cols\n)\n\n```", "```py\nparams = {\n    'iterations': 100,\n    'eval_metric': 'AUC',\n    'od_type': 'Iter',\n    'od_wait': 50,\n}\n\nmodel = CatBoostClassifier(**params)\n_ = model.fit(train_data, eval_set=holdout_data)\n\n```", "```py\nparams2 = dict(params)\nparams2.update({\"ignored_features\": ['TransactionDT']})\nmodel2 = CatBoostClassifier(**params2)\n_ = model2.fit(train_data, eval_set=holdout_data)\n\n```", "```py\n[\n    '', 'samsung browser 6.2', 'mobile safari 11.0',\n    'chrome 62.0', 'chrome 62.0 for android', 'edge 15.0',\n    'mobile safari generic', 'chrome 49.0', 'chrome 61.0', 'edge 16.0'\n]\n\n```", "```py\ndef remove_numbers(df_train, df_test, feature):\n    df_train.loc[:, feature] = df_train[feature].str.replace(r'[^A-Za-z]', '', regex=True)\n    df_test.loc[:, feature] = df_test[feature].str.replace(r'[^A-Za-z]', '', regex=True)\n\nremove_numbers(df_train, df_test, 'id_31')\n\n```", "```py\n[\n    'UNK', 'samsungbrowser', 'mobilesafari',\n    'chrome', 'chromeforandroid', 'edge',\n    'mobilesafarigeneric', 'safarigeneric',\n]\n\n```", "```py\nadversarial_train_scrub, adversarial_test_scrub = create_adversarial_data(\n    df_train,\n    df_test,\n    all_cols,\n)\n\ntrain_data_scrub = Pool(\n    data=adversarial_train_scrub[features],\n    label=adversarial_train_scrub[target],\n    cat_features=cat_colsc\n)\n\nholdout_data_scrub = Pool(\n    data=adversarial_test_scrub[features],\n    label=adversarial_test_scrub[target],\n    cat_features=cat_colsc\n)\n\nmodel_scrub = CatBoostClassifier(**params2)\n_ = model_scrub.fit(train_data_scrub, eval_set=holdout_data_scrub)\n\n```"]