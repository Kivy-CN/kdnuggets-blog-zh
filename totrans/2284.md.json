["```py\nfrom sklearn.datasets import make_blobs\n\nX, y = make_blobs(n_samples=20, centers=[(0,0), (5,5), (-5, 5)], random_state=0)\n```", "```py\n# samples with label = c_1\n\narray([[ 0.14404357,  1.45427351],\n\n[ 0.97873798,  2.2408932 ],\n\n[ 1.86755799, -0.97727788],\n\n[ 1.76405235,  0.40015721],\n\n[ 0.76103773,  0.12167502],\n\n[-0.10321885,  0.4105985 ],\n\n[ 0.95008842, -0.15135721]])\n```", "```py\nfrom sklearn.datasets import make_blobs\nimport numpy as np\n\n# Create the data. The classes are c_1=0, c_2=1 and c_3=2.\nX, y = make_blobs(\n    n_samples=20, centers=[(0, 0), (5, 5), (-5, 5)], random_state=0\n)\n\n# The class probabilities.\n# np.bincounts counts the occurence of each label.\nprior = np.bincount(y) / len(y)\n\n# np.where(y==i) returns all indices where the y==i.\n# This is the filtering step.\nmeans = np.array([X[np.where(y == i)].mean(axis=0) for i in range(3)])\nstds = np.array([X[np.where(y == i)].std(axis=0) for i in range(3)]) \n```", "```py\n# priors\narray([0.35, 0.35, 0.3 ])\n# means \narray([[ 0.90889988,  0.49985176],\n       [ 5.4111385 ,  4.6491892 ],\n       [-4.7841679 ,  5.15385848]])\n# stds\narray([[0.6853714 , 0.9789976 ],\n       [1.40218915, 0.67078568],\n       [0.88192625, 1.12879666]])\n```", "```py\nx_new = np.array([-2, 5])\n\nfor j in range(3):\n    print(\n        f\"Probability for class {j}: {(1/np.sqrt(2*np.pi*stds[j]**2)*np.exp(-0.5*((x_new-means[j])/stds[j])**2)).prod()*p[j]:.12f}\"\n    ) \n```", "```py\nProbability for class 0: 0.000000000263\nProbability for class 1: 0.000000044359\nProbability for class 2: 0.000325643718\n```", "```py\nimport numpy as np\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom sklearn.utils.validation import check_X_y, check_array, check_is_fitted\n\nclass GaussianNaiveBayesClassifier(BaseEstimator, ClassifierMixin):\n    def fit(self, X, y):\n        X, y = check_X_y(X, y)\n        self.priors_ = np.bincount(y) / len(y)\n        self.n_classes_ = np.max(y) + 1\n\n        self.means_ = np.array(\n            [X[np.where(y == i)].mean(axis=0) for i in range(self.n_classes_)]\n        )\n        self.stds_ = np.array(\n            [X[np.where(y == i)].std(axis=0) for i in range(self.n_classes_)]\n        )\n\n        return self\n\n    def predict_proba(self, X):\n        check_is_fitted(self)\n        X = check_array(X)\n\n        res = []\n        for i in range(len(X)):\n            probas = []\n            for j in range(self.n_classes_):\n                probas.append(\n                    (\n                        1\n                        / np.sqrt(2 * np.pi * self.stds_[j] ** 2)\n                        * np.exp(-0.5 * ((X[i] - self.means_[j]) / self.stds_[j]) ** 2)\n                    ).prod()\n                    * self.priors_[j]\n                )\n            probas = np.array(probas)\n            res.append(probas / probas.sum())\n        return np.array(res)\n\n    def predict(self, X):\n        check_is_fitted(self)\n        X = check_array(X)\n\n        res = self.predict_proba(X)\n\n        return res.argmax(axis=1)\n```", "```py\nmy_gauss = GaussianNaiveBayesClassifier()\nmy_gauss.fit(X, y)\nmy_gauss.predict_proba([[-2, 5], [0,0], [6, -0.3]])\n```", "```py\narray([[8.06313823e-07, 1.36201957e-04, 9.99862992e-01],\n       [1.00000000e+00, 4.23258691e-14, 1.92051255e-11],\n       [4.30879705e-01, 5.69120295e-01, 9.66618838e-27]])\n```", "```py\n# my_gauss.predict([[-2, 5], [0,0], [6, -0.3]])\narray([2, 0, 1])\n```", "```py\nfrom sklearn.naive_bayes import GaussianNB\n\ngnb = GaussianNB()\ngnb.fit(X, y)\ngnb.predict_proba([[-2, 5], [0,0], [6, -0.3]])\n```", "```py\narray([[8.06314158e-07, 1.36201959e-04, 9.99862992e-01],\n       [1.00000000e+00, 4.23259111e-14, 1.92051343e-11],\n       [4.30879698e-01, 5.69120302e-01, 9.66619630e-27]])\n```"]