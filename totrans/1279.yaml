- en: 'Essential Math for Data Science: The Poisson Distribution'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/12/introduction-poisson-distribution-data-science.html](https://www.kdnuggets.com/2020/12/introduction-poisson-distribution-data-science.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)[![Image](../Images/45c05efbbd9635efb62adde614427da4.png)](https://www.essentialmathfordatascience.com/)'
  prefs: []
  type: TYPE_NORMAL
- en: The *Poisson distribution*, named after the French mathematician Denis Simon
    Poisson, is a discrete distribution function describing the probability that an
    event will occur a certain number of times in a fixed time (or space) interval.
    It is used to model count-based data, like the number of emails arriving in your
    mailbox in one hour or the number of customers walking into a shop in one day,
    for instance.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical Definition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start with an example, Figure 1 shows the number of emails received by
    Sarah in intervals of one hour.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/16fefd9b7e16e9dd894f9181fe7dea65.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 1: Emails received by Sarah in one-hour intervals for the last 100
    hours.*'
  prefs: []
  type: TYPE_NORMAL
- en: The bar heights show the number of one-hour intervals in which Sarah observed
    the corresponding number of emails. For instance, the highlighted bar shows that
    there were around 15 one-hour slots where she received a single email.
  prefs: []
  type: TYPE_NORMAL
- en: The Poisson distribution is parametrized by the expected number of events *λ* (pronounced
    “lambda”) in a time or space window. The distribution is a function that takes
    the number of occurrences of the event as input (the integer called *k* in the
    next formula) and outputs the corresponding probability (the probability that
    there are *k* events occurring).
  prefs: []
  type: TYPE_NORMAL
- en: 'The Poisson distribution, denoted as *Poi* is expressed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/9de3e85848358b7ecdf0662832dc08e0.png)'
  prefs: []
  type: TYPE_IMG
- en: for *k = 0, 1, 2, ...*
  prefs: []
  type: TYPE_NORMAL
- en: The formula of *Poi(k; λ)* returns the probability of observing *k* events given
    the parameter *λ* which corresponds to the expected number of occurrences in that
    time slot.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discrete Distributions**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Note that both the binomial and the Poisson distributions are discrete: they
    give probabilities of discrete outcomes: the number of times an event occurs for
    the Poisson distribution and the number of successes for the binomial distribution.
    However, while the binomial calculates this discrete number for a discrete number
    of trials (like a number of coin toss), the Poisson considers an infinite number
    of trials (each trial corresponds to a very small portion of time) leading to
    a very small probability associated with each event.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can refer to the section below to see how the Poisson distribution is derived
    from the binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Priya is recording birds in a national park, using a microphone placed in a
    tree. She is counting the number of times a bird is recorded singing and wants
    to model the number of birds singing in a minute. For this task, she’ll assume
    independence of the detected birds.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the data of the last few hours, Priya observes that in average, there
    are two birds detected in an interval of one minute. So the value 2 could be a
    good candidate for the parameter of the distribution *λ*. Her goal is to know
    the probability that a specific number of birds will sing in the next minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s implement the Poisson distribution function from the formula you saw
    above:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Remember that *λ* is the expected number of times a bird sings in a one-minute
    interval, so in this example, you have *λ=2*. The function `poisson_distribution(k,
    lambd)` takes the value of *k* and *λ* and returns the probability to observe
    *k* occurrences (that is, to record *k* birds singing).
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, the probability of Priya observing 5 birds in the next minute
    would be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The probability that 5 birds will sing in the next minute is around 0.036 (3.6%).
  prefs: []
  type: TYPE_NORMAL
- en: 'As with the binomial function, this will overflow for larger values of *k*.
    For this reason, you might want to use `poisson` from the module `scipy.stats`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s plot the distribution for various values of *k*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/f44fed18e97b9b6e5d474fb464ca55ab.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 2: Poisson distribution for *λ=2*.*'
  prefs: []
  type: TYPE_NORMAL
- en: The probabilities corresponding to the values of *k* are summarized in the probability
    mass function shown in Figure
  prefs: []
  type: TYPE_NORMAL
- en: You can see that it is most probable that Priya will hear one or two birds singing
    in the next minute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, you can plot the function for different values of *λ*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/56212362b7ea55e62140e2620765de9a.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Figure 3: Poisson distribution for various values of λ.*'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3 shows the Poisson distribution for various values of *λ*, which looks
    a bit like a normal distribution in some cases. However, the Poisson distribution
    is discrete, not symmetric when the value of *λ* is low, and bounded to zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus: Deriving the Poisson Distribution'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s see how the Poisson distribution is derived from the Binomial distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'You saw in [Essential Math for Data Science](https://bit.ly/3n8O2n1) that if
    you run a random experiment multiple times, the probability to get mm successes
    over *N* trials, with a probability of a success *μ* at each trial, is calculated
    through the binomial distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/08bf4492c868228ed3da70b3403c9c10.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Problem Statement**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'How can you use the binomial formula to model the probability to observe an
    event a certain number of times *in a given time interval* instead of in a certain
    number of trials? There are a few problems:'
  prefs: []
  type: TYPE_NORMAL
- en: You don’t know NN, since there is no specific number of trials, only a time
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don’t know μμ, but you have the expected number of times the event will
    occur. For instance, you know that in the past 100 hours, you received an average
    of 3 emails per hour, and you want to know the probability of receiving 5 emails
    in the next hour.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let’s handle these issues mathematically.
  prefs: []
  type: TYPE_NORMAL
- en: To address the first point, you can consider time as small discrete chunks.
    Let’s call these chunck ϵϵ (pronounced “epsilon”), as shown in Figure 4\. If you
    consider each chunk as a trial, you have *N* chunks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/29c00df79ca80abcda9f5ae4bfdc37b5.png)'
  prefs: []
  type: TYPE_IMG
- en: '>*Figure 4: You can split the continuous time in segments of length ϵ.*'
  prefs: []
  type: TYPE_NORMAL
- en: The estimation of a continuous time scale is more accurate when *ϵ* is very
    small. If ϵϵ is small, the number of segments *N* will be large. In addition,
    since the segments are small, the probability of success in each segment is also
    small.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, you want to modify the binomial distribution to be able model
    a very large number of trials, each with a very small probability of success.
    The trick is to consider that *N* tends toward infinity (because continuous time
    is approximated by having a value of *ϵ* that tends toward zero).
  prefs: []
  type: TYPE_NORMAL
- en: '**Update the Binomial Formula**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s find μμ in this case and replace it in the binomial formula. You know
    the expected number of event in a period of time *t*, which we’ll call *λ* (pronounced
    “lambda”). Since you split *t* into small intervals of length *ϵ*, you have the
    number of trials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/d3112c0038a94579eb3394fc72c3d489.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You have *λ* as the number of successes in the *N* trials. So the probability *μ* to
    have a success in one trial is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/7b95863f42d226c28c2dfc1dc908bbac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Replacing μμ in the binomial formula, you get:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/f89a1da3d2a7dd4c7080638f165c14d2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Developing the expression, writing the binomial coefficient as factorials (as
    you did in [Essential Math for Data Science](https://bit.ly/3n8O2n1)), and using
    the fact ![Equation](../Images/f58c698cc95abd27e85c2952c12c81d0.png), you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/53ffdeaa272bf96bc6235a0607c51eec.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s consider the first element of this expression. If you state that NN tends
    toward infinity (because *ϵ* tends toward zero), you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/6ad83c4f63afde3bc5dd9c6c7b8469e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is because *k* can be ignored when it is small in comparison to *N*. For
    instance, you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/1283fe5c029d40d1148cc0cf268e61c7.png)'
  prefs: []
  type: TYPE_IMG
- en: which approximates ![Equation](../Images/86a22344034f1866092c2252570e84e6.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'So you the first ratio becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/349e98e0ecc7248356e9671d3bc64369.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, using the fact that ![Equation](../Images/536b8d0759fbe9fae7c69c8af43e1ac0.png),
    you have:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/7fa39431fb19735eb035a4a916eab020.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, since ![Equation](../Images/7c477776dfcdddb6656b6a1d746b75e7.png) tends
    toward 1 when *N* tends toward the infinity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/84f8ca3b317a26c867268540503f2506.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let’s replace all of this in the formula of the binomial distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/1c77526394b64223a0ee3559445b49d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the Poisson distribution, denoted as *Poi*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/9de3e85848358b7ecdf0662832dc08e0.png)'
  prefs: []
  type: TYPE_IMG
- en: for *k = 0, 1, 2, ...*
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Hadrien Jean](https://hadrienj.github.io/)** is a machine learning
    scientist. He owns a Ph.D in cognitive science from the Ecole Normale Superieure,
    Paris, where he did research on auditory perception using behavioral and electrophysiological
    data. He previously worked in industry where he built deep learning pipelines
    for speech processing. At the corner of data science and environment, he works
    on projects about biodiversity assessement using deep learning applied to audio
    recordings. He also periodically creates content and teaches at Le Wagon (data
    science Bootcamp), and writes articles in his blog ([hadrienj.github.io](http://hadrienj.github.io)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://hadrienj.github.io/posts/Essential-Math-poisson_distribution/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Probability Density and Probability Mass
    Functions](/2020/12/essential-math-data-science-probability-density-probability-mass-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Integrals And Area Under The Curve](/2020/11/essential-math-data-science-integrals-area-under-curve.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Free Mathematics Courses for Data Science & Machine Learning](/2020/02/free-mathematics-courses-data-science-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Determine the Best Fitting Data Distribution Using Python](https://www.kdnuggets.com/2021/09/determine-best-fitting-data-distribution-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comprehensive Guide to the Normal Distribution](https://www.kdnuggets.com/2022/06/comprehensive-guide-normal-distribution.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Overcome The Fear of Math and Learn Math For Data Science](https://www.kdnuggets.com/2021/03/overcome-fear-learn-math-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Visual Introduction to Singular…](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Eigenvectors and Application to PCA](https://www.kdnuggets.com/2022/06/essential-math-data-science-eigenvectors-application-pca.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Much Math Do You Need in Data Science?](https://www.kdnuggets.com/2020/06/math-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
