- en: Simple Question Answering (QA) Systems That Use Text Similarity Detection in
    Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/04/simple-question-answering-systems-text-similarity-python.html](https://www.kdnuggets.com/2020/04/simple-question-answering-systems-text-similarity-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Andrew Zola](https://www.linkedin.com/in/andrew-zola/), Content Manager
    at Artmotion**'
  prefs: []
  type: TYPE_NORMAL
- en: Artificial Intelligence (AI) is no longer an abstract idea that conjures up
    images from sci-fi movies. Today, AI has evolved considerably, and it’s now able
    to recognize speech, make decisions, and work alongside humans to complete tasks
    at a larger scale.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: So instead of robots that are trying to take over the planet, we think about
    Alexa, Siri, or a customer service chatbot. But how exactly are these smart algorithms
    able to engage and communicate with us like humans?
  prefs: []
  type: TYPE_NORMAL
- en: The answer lies in [Question Answering (QA) systems](https://hub.packtpub.com/google-open-sources-active-question-answering-activeqa-a-reinforcement-learning-based-qa-system/)
    that are built on a foundation of Machine Learning (ML) and [Natural Language
    Processing (NLP)](https://hub.packtpub.com/spam-filtering-natural-language-processing-approach/).
  prefs: []
  type: TYPE_NORMAL
- en: '**What are QA Systems?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: QA systems can be described as [a technology that provides the right short answer
    to a question rather than giving a list of possible answers](https://intersog.com/blog/the-basics-of-qa-systems-from-a-single-function-to-a-pre-trained-nlp-model-using-python/).
    In this scenario, QA systems are designed to be alert to text similarity and answer
    questions that are asked in natural language.
  prefs: []
  type: TYPE_NORMAL
- en: But some also derive information from images to answer questions. For example,
    when you’re clicking on image boxes to prove that you’re not a robot, you’re actually
    teaching smart algorithms about what’s in a particular image.
  prefs: []
  type: TYPE_NORMAL
- en: This is only possible because of NLP technologies like Google’s [Bidirectional
    Encoder Representations from Transformers (BERT)](https://arxiv.org/abs/1810.04805).
    Anyone who wants to build a QA system can leverage NLP and train machine learning
    algorithms to answer domain-specific (or a defined set) or general (open-ended)
    questions.
  prefs: []
  type: TYPE_NORMAL
- en: There are plenty of datasets and resources online, so you can quickly start
    training smart algorithms to learn and process massive quantities of human language
    data.
  prefs: []
  type: TYPE_NORMAL
- en: To boost efficiency and accuracy, NLP programs also use both inference and probability
    to guess the right answer. Over time, they have become very good at it!
  prefs: []
  type: TYPE_NORMAL
- en: For businesses, the advantage of deploying QA systems is that they are highly
    user-friendly. Once the enterprise QA system is built, anyone can use it. In fact,
    if you have engaged with Alexa or used Google Translate, you have experienced
    NLP at work.
  prefs: []
  type: TYPE_NORMAL
- en: 'In an enterprise setting, they can be used for much more than chatbots and
    voice assistants. For example, smart algorithms can be trained to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Administration** (find and contextualize information to automate the process
    of searching, modifying, and managing documents)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer service** (with chatbots that can engage customers as well as identify
    new leads by analyzing profiles, phrases, and other data)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marketing** (by being alert to mentions about the company or brand online)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But circling back to the topic at hand, let’s take a look at how it works.
  prefs: []
  type: TYPE_NORMAL
- en: '**How Do You Build a Robust QA System?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To answer the question in a manner that can be technical and easily understood,
    I’ll show you how to build a simple QA system based on string similarity measurement,
    and sourced using a closed domain.
  prefs: []
  type: TYPE_NORMAL
- en: The following example is based on Ojokoh and Ayokunle’s research, [Fuzzy-Based
    Answer Ranking in Question Answering Communities](https://www.researchgate.net/publication/272093801_Fuzzy-Based_Answer_Ranking_in_Question_Answering_Communities).
  prefs: []
  type: TYPE_NORMAL
- en: 'QA system with approximate match function is simple as:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/16df69a55cefbfdcb50ab60bb5fbbcf0.png)'
  prefs: []
  type: TYPE_IMG
- en: In this scenario, we’ll use a small set of data of question-answer pairs in
    a [CSV file](https://github.com/jupyter/notebook). In the real world, enterprises
    will use [highly specialized databases](https://leaderboard.techqa.us-east.containers.appdomain.cloud)
    with hundreds of thousands of samples.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prerequisites**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To run these examples, you need [Python 3](https://www.python.org/), [Jupyter
    Lab](https://jupyter.org/install) and [python-Levenshtein](https://github.com/ztane/python-Levenshtein)
    module.
  prefs: []
  type: TYPE_NORMAL
- en: 'First load the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0] import pandas as pd  data = pd.read_csv(''qa.csv'')  *# this function
    is used to get printable results*  def getResults(questions, fn):      def getResult(q):          answer,
    score, prediction = fn(q)          return [q, prediction, answer, score]      return
    pd.DataFrame(list(map(getResult, questions)), columns=["Q", "Prediction", "A",
    "Score"])  test_data = [      "What is the population of Egypt?",      "What is
    the poulation of egypt",      "How long is a leopard''s tail?",      "Do you know
    the length of leopard''s tail?",      "When polar bears can be invisible?",      "Can
    I see arctic animals?",      "some city in Finland"  ]  data [PRE1]`'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Question** | **Answer** |'
  prefs: []
  type: TYPE_TB
- en: '| Who determined the dependence of the boiling o... | Anders Celsius |'
  prefs: []
  type: TYPE_TB
- en: '| Are beetles insects? | Yes |'
  prefs: []
  type: TYPE_TB
- en: '| Are Canada ''s two official languages English a... | yes |'
  prefs: []
  type: TYPE_TB
- en: '| What is the population of Egypt? | more than 78 million |'
  prefs: []
  type: TYPE_TB
- en: '| What is the biggest city in Finland? | Greater Helsinki |'
  prefs: []
  type: TYPE_TB
- en: '| What is the national currency of Liechtenstein? | Swiss franc |'
  prefs: []
  type: TYPE_TB
- en: '| Can polar bears be seen under infrared photogr... | Polar bears are nearly
    invisible under infrare... |'
  prefs: []
  type: TYPE_TB
- en: '| When did Tesla demonstrate wireless communicat... | 1893 |'
  prefs: []
  type: TYPE_TB
- en: '| What are violins made of? | different types of wood |'
  prefs: []
  type: TYPE_TB
- en: '| How long is a leopard''s tail? | 60 to 110cm |'
  prefs: []
  type: TYPE_TB
- en: In its simplest form, QA systems can only answer questions if the questions
    and answers are matched perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2] import re  def getNaiveAnswer(q):      *# regex helps to pass some punctuation
    signs*      row = data.loc[data[''Question''].str.contains(re.sub(r"[^\w''\s)]+",
    "", q),case=False)]      if len(row) > 0:          return row["Answer"].values[0],
    1, row["Question"].values[0]      return "Sorry, I didn''t get you.", 0, ""  getResults(test_data,
    getNaiveAnswer) [PRE3]`'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Q** | **Prediction** | **A** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | What is the population of Egypt? | What is the population of Egypt? |
    more than 78 million | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | What is the population of egypt |  | Sorry, I didn''t get you. | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | How long is a leopard''s tail? | How long is a leopard''s tail? | 60
    to 110cm | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Do you know the length of leopard''s tail? |  | Sorry, I didn''t get
    you. | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | When polar bears can be invisible? |  | Sorry, I didn''t get you. | 0
    |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Can I see arctic animals? |  | Sorry, I didn''t get you. | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | some city in Finland |  | Sorry, I didn''t get you. | 0 |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the above, a small grammatical mistake can quickly derail
    the whole process. It’s the same result if you use string pre-processing of source
    and query texts like punctuation symbols removal,lowercasing, etc.
  prefs: []
  type: TYPE_NORMAL
- en: So how can we improve our results?
  prefs: []
  type: TYPE_NORMAL
- en: To improve results, let’s switch things up a little and use [approximate string
    matching](https://github.com/topics/approximate-string-matching). In this scenario,
    our system will be enabled to accept grammatical mistakes and minor differences
    in the text.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to deploy approximate string matching protocols, but for
    our example, we will use one of the implementations of string metrics called Levenshtein
    distance. In this scenario, the distance between two words is the minimum number
    of single-character edits (insertions, deletions, or substitutions) that are needed
    to change one word into the other.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s deploy the [Levenshtein Python module](https://github.com/ztane/python-Levenshtein)
    on the system. It contains a set of approximate string matching functions that
    we can experiment with.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4] from Levenshtein import ratio  def getApproximateAnswer(q):      max_score
    = 0      answer = ""      prediction = ""      for idx, row in data.iterrows():          score
    = ratio(row["Question"], q)          if score >= 0.9: *# I''m sure, stop here*              return
    row["Answer"], score, row["Question"]          elif score > max_score: *# I''m
    unsure, continue*              max_score = score              answer = row["Answer"]              prediction
    = row["Question"]      if max_score > 0.8:          return answer, max_score,
    prediction      return "Sorry, I didn''t get you.", max_score, prediction  getResults(test_data,
    getApproximateAnswer) [PRE5]`'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Q** | **Prediction** | **A** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | What is the population of Egypt? | What is the population of Egypt? |
    more than 78 million | 1.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | What is the poulation of egypt | What is the population of Egypt? | more
    than 78 million | 0.935484 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | How long is a leopard''s tail? | How long is a leopard''s tail? | 60
    to 110cm | 1.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Do you know the length of leopard''s tail? | How long is a leopard''s
    tail? | Sorry, I didn''t get you. | 0.657143 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | When polar bears can be invisible? | Can polar bears be seen under infrared
    photogr... | Sorry, I didn''t get you. | 0.517647 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | Can I see arctic animals? | What is the biggest city in Finland? | Sorry,
    I didn''t get you. | 0.426230 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | some city in Finland | What is the biggest city in Finland? | Sorry,
    I didn''t get you. | 0.642857 |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the above, even minor grammatical mistakes can generate
    the correct answer (and a score below 1.0 is highly acceptable).
  prefs: []
  type: TYPE_NORMAL
- en: To make our QA system even better, go ahead and adjust max_score coefficient
    of our function to be more accommodating.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6] from Levenshtein import ratio  def getApproximateAnswer2(q):      max_score
    = 0      answer = ""      prediction = ""      for idx, row in data.iterrows():          score
    = ratio(row["Question"], q)          if score >= 0.9: *# I''m sure, stop here*              return
    row["Answer"], score, row["Question"]          elif score > max_score: *# I''m
    unsure, continue*              max_score = score              answer = row["Answer"]              prediction
    = row["Question"]      if max_score > 0.3: *# threshold is lowered*          return
    answer, max_score, prediction      return "Sorry, I didn''t get you.", max_score,
    prediction  getResults(test_data, getApproximateAnswer2) [PRE7]`'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Q** | **Prediction** | **A** | **Score** |'
  prefs: []
  type: TYPE_TB
- en: '| **0** | What is the population of Egypt? | What is the population of Egypt?
    | more than 78 million | 1.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **1** | What is the poulation of egypt | What is the population of Egypt?
    | more than 78 million | 0.935484 |'
  prefs: []
  type: TYPE_TB
- en: '| **2** | How long is a leopard''s tail? | How long is a leopard''s tail? |
    60 to 110cm | 1.000000 |'
  prefs: []
  type: TYPE_TB
- en: '| **3** | Do you know the length of leopard''s tail? | How long is a leopard''s
    tail? | 60 to 110cm | 0.657143 |'
  prefs: []
  type: TYPE_TB
- en: '| **4** | When polar bears can be invisible? | Can polar bears be seen under
    infrared photogr... | Polar bears are nearly invisible under infrare... | 0.517647
    |'
  prefs: []
  type: TYPE_TB
- en: '| **5** | Can I see arctic animals? | What is the biggest city in Finland?
    | Greater Helsinki | 0.426230 |'
  prefs: []
  type: TYPE_TB
- en: '| **6** | some city in Finland | What is the biggest city in Finland? | Greater
    Helsinki | 0.642857 |'
  prefs: []
  type: TYPE_TB
- en: The results above evidence that even when different words are used, the system
    can respond with the correct answer. But if you took a closer look, the 5th result
    looks like a false positive.
  prefs: []
  type: TYPE_NORMAL
- en: This means that we have to take it to the next level and leverage advanced libraries
    that have been made available by the likes of Facebook and Google to overcome
    these challenges.
  prefs: []
  type: TYPE_NORMAL
- en: The example above is a simple demonstration of how this works. The code is quite
    simple and impractical to use with large volumes and iterations on a massive dataset.
  prefs: []
  type: TYPE_NORMAL
- en: The well-known [BERT library](https://en.wikipedia.org/wiki/BERT_(language_model)),
    developed by Google, is better suited for enterprise tasks. AI-powered QA systems
    that you’ve already engaged with use far more advanced databases and engage in
    continuous machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: What’s your experience building enterprise QA systems? What challenges did you
    face? How did you overcome them? Share your thoughts and experiences in the **Comments**
    section below.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this article can be found [HERE](https://intersog.com/question-answering-system).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Andrew Zola](https://www.linkedin.com/in/andrew-zola/)** (**[@DrewZola](https://twitter.com/DrewZola)**)
    is Content Manager at Artmotion: A bank for your data. He has many passions, but
    the main one is writing about technology. Furthermore, learning about new things
    and connecting with diverse audiences is something that has always amazed and
    excited Andrew.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[This Microsoft Neural Network can Answer Questions About Scenic Images with
    Minimum Training](/2019/10/microsoft-neural-network-answer-questions-scenic-images-minimum-training.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Salesforce Open Sources a Framework for Open Domain Question Answering Using
    Wikipedia](/2020/03/salesforce-open-sources-framework-question-answering-wikipedia.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why you should NOT use MS MARCO to evaluate semantic search](/2020/04/ms-marco-evaluate-semantic-search.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Answering Questions with HuggingFace Pipelines and Streamlit](https://www.kdnuggets.com/2021/10/simple-question-answering-web-app-hugging-face-pipelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Post GPT-4: Answering Most Asked Questions About AI](https://www.kdnuggets.com/2023/04/post-gpt4-answering-asked-questions-ai.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Evaluating Methods for Calculating Document Similarity](https://www.kdnuggets.com/evaluating-methods-for-calculating-document-similarity)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Using Hugging Face Transformers for Emotion Detection in Text](https://www.kdnuggets.com/using-hugging-face-transformers-for-emotion-detection-in-text)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use NumPy to Solve Systems of Nonlinear Equations](https://www.kdnuggets.com/how-to-use-numpy-to-solve-systems-of-nonlinear-equations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use ChatGPT to Convert Text into a PowerPoint Presentation](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
