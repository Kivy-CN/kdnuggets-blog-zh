["```py\nimport sklearn.datasets\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nimport numpy as np\n\n```", "```py\ndataset= sklearn.datasets.load_breast_cancer()\ndata = dataset.data\ntarget = dataset.target\n\n```", "```py\nlr = LogisticRegression()\n\n```", "```py\n# Model accuracy using all the features\nnp.mean(cross_val_score(lr,data,target,cv=5,scoring=\"accuracy\"))\n# 0.9509041939207385\n\n```", "```py\nresult = []\n\n# Number of iterations\nN_search = 300\n\n# Random seed initialization\nnp.random.seed(1)\n\nfor i in range(N_search):\n    # Generate a random number of features\n    N_columns =  list(np.random.choice(range(data.shape[1]),1)+1)\n\n    # Given the number of features, generate features without replacement\n    columns = list(np.random.choice(range(data.shape[1]), N_columns, replace=False))\n\n    # Perform k-fold cross validation\n    scores = cross_val_score(lr,data[:,columns], target, cv=5, scoring=\"accuracy\")\n\n    # Store the result\n    result.append({'columns':columns,'performance':np.mean(scores)})\n\n# Sort the result array in descending order for performance measure\nresult.sort(key=lambda x : -x['performance'])\n\n```", "```py\nnp.mean(cross_val_score(lr, data[:,result[0][‘columns’]], target, cv=5, scoring=”accuracy”))\n# 0.9526741054251634\n\n```"]