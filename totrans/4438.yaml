- en: Building a REST API with Tensorflow Serving (Part 2)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Tensorflow Serving 构建 REST API（第 2 部分）
- en: 原文：[https://www.kdnuggets.com/2020/07/building-rest-api-tensorflow-serving-part-2.html](https://www.kdnuggets.com/2020/07/building-rest-api-tensorflow-serving-part-2.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/07/building-rest-api-tensorflow-serving-part-2.html](https://www.kdnuggets.com/2020/07/building-rest-api-tensorflow-serving-part-2.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Guillermo Gomez](https://www.linkedin.com/in/mlgxmez/), Data Scientist
    & Machine Learning Engineer**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Guillermo Gomez](https://www.linkedin.com/in/mlgxmez/)，数据科学家及机器学习工程师**'
- en: Once these Tensorflow objects have been generated, it’s time to make them publicly
    available to everyone. By building a REST API around the object, people will be
    able to use your service in their project. Let’s see how we can do it!
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦生成了这些 Tensorflow 对象，就该将它们公开供大家使用了。通过围绕这些对象构建 REST API，人们将能够在他们的项目中使用你的服务。让我们看看如何做到这一点！
- en: Docker in a nutshell
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Docker 概述
- en: 'For this part I’m assuming we have basic knowledge of Docker. For those unfamiliar
    with this, Docker is a tool to build isolated environments (containers) in your
    computer in such a way that it doesn’t get into conflict with any file or program
    in your local filesystem (the host). Among all its advantages, I would highlight
    these:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我假设我们对 Docker 有基本了解。对于那些不熟悉的人，Docker 是一种在计算机上构建隔离环境（容器）的工具，这样它不会与本地文件系统（主机）中的任何文件或程序冲突。它的所有优点中，我会特别强调这些：
- en: Unlike with virtual machines, you can run containers with only what’s strictly
    necessary to run a single component of your project. This helps you generate containers
    as light as you want.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与虚拟机不同，你可以仅用运行项目单一组件所需的内容来运行容器。这有助于你生成轻量级的容器。
- en: Docker networking capabilities allows you easily communicate multiple containers
    to each other.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 网络功能允许你轻松地让多个容器之间进行通信。
- en: Even if your OS is not fully compatible with the tool you want to use, with
    containers you don’t run into compatibility issues anymore.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使你的操作系统与所需工具不完全兼容，使用容器也不会再遇到兼容性问题。
- en: Docker containers will run in the same way regardless of the hosting environment,
    be in your computer or a server running in a cloud service.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论托管环境是你的计算机还是运行在云服务上的服务器，Docker 容器的运行方式都是相同的。
- en: 'Whenever I step into learning something new I recommend go for a tutorial or
    quick start in the documentation itself. Tensorflow Serving has a short one in
    its Github [repo](https://github.com/tensorflow/serving):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我开始学习新东西时，我建议查看文档中的教程或快速入门。Tensorflow Serving 在其 Github [仓库](https://github.com/tensorflow/serving)中有一个简短的教程：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Pay attention to the arguments passed to the `docker run` command, specifically
    the ones accepting external values:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意传递给 `docker run` 命令的参数，特别是那些接受外部值的参数：
- en: '`-p 8501:8501`, publishes the container’s port specified at the right of the
    colon, and is mapped to the same port in the host, specified at the left of the
    colon. For REST API, Tensorflow Serving makes use of this port, **so don’t change
    this parameter in your experiments**.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-p 8501:8501`，将容器的端口映射到主机上的相同端口。对于 REST API，Tensorflow Serving 使用这个端口，**所以在实验中不要更改这个参数**。'
- en: '`-v "$TESTDATA/saved_model_half_plus_two_cpu:/models/half_plus_two"`, attaches
    a volume to the container. This volume contains a copy of the folder where you
    saved your Tensorflow object. Just a level above the folder named `/1/`. This
    folder will appear in the container, under `/models/`.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-v "$TESTDATA/saved_model_half_plus_two_cpu:/models/half_plus_two"`，将一个卷附加到容器。这个卷包含你保存
    Tensorflow 对象的文件夹的副本。这个文件夹位于名为 `/1/` 的文件夹的上一层。这一文件夹将在容器中显示在 `/models/` 下。'
- en: '`-e MODEL_NAME=half_plus_two`, defines an environment variable. This variable
    is required to serve your model. For convenience, **use the same identifier as
    the container’s folder name where you attached your model**.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-e MODEL_NAME=half_plus_two`，定义一个环境变量。这个变量是服务你的模型所必需的。为了方便，**使用与容器中附加模型的文件夹名称相同的标识符**。'
- en: Deploying servables in containers
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在容器中部署可服务的模型
- en: You can design an API for your servable, but Tensorflow Serving abstracts away
    this step thanks to Docker. Once you deploy the container, you can make a request
    to the server where your container is located to perform some kind of computation.
    Within the body of the request you may attach some input (required to run the
    servable) and obtain some output in return.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以为你的可服务对象设计一个 API，但 Tensorflow Serving 通过 Docker 抽象化了这个步骤。一旦你部署了容器，你可以向容器所在的服务器发送请求以执行某种计算。在请求体中，你可以附加一些输入（这是运行可服务对象所必需的），并获得一些输出作为回报。
- en: 'In order to make the computation you need to specify the endpoint URL of the
    servable in your request. In the example shown above this endpoint URL is `[http://localhost:8501/v1/models/half_plus_two:predict](http://localhost:8501/v1/models/half_plus_two:predict)`.
    Now everything is ready to run our Tensorflow objects. We will start with the
    Keras model:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行计算，你需要在请求中指定可服务对象的端点 URL。在上面显示的示例中，这个端点 URL 是 `[http://localhost:8501/v1/models/half_plus_two:predict](http://localhost:8501/v1/models/half_plus_two:predict)`。现在一切都准备好运行我们的
    Tensorflow 对象了。我们将从 Keras 模型开始：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When this command was executed, the current directory was `tmp/`. This is the
    folder where I’ve been saving all my models. This is what the terminal returns:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行这个命令时，当前目录是 `tmp/`。这是我保存所有模型的文件夹。这是终端返回的内容：
- en: '![](../Images/0467661333e34c3820d348c02cf42e01.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0467661333e34c3820d348c02cf42e01.png)'
- en: The model is up and ready to be used.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 模型已经启动并准备好使用。
- en: Make requests to servables
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向可服务对象发起请求
- en: With `curl` library
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `curl` 库
- en: Now that the container is up and running we can make requests by sending an
    image to be recognized. I’ll show you two ways to achieve that. First I made a
    little shell script (download it from [here](https://gist.github.com/mlgxmez/6cd3b5824567ba69edd4468e8de97f1f))
    that receives the path of an image file as an argument and makes the call itself
    with the library `curl`. Here I show you how we make the request and what is the
    image that the model is trying to classify.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在容器已经启动并运行，我们可以通过发送需要识别的图像来发起请求。我将展示两种实现方式。首先，我写了一个小的 shell 脚本（可以从 [这里](https://gist.github.com/mlgxmez/6cd3b5824567ba69edd4468e8de97f1f)
    下载），它接收一个图像文件的路径作为参数，并使用 `curl` 库进行调用。在这里，我展示了如何发起请求以及模型正在尝试分类的图像。
- en: '![Figure](../Images/e3272e4cc1b764c9be9f1bbd38f2b71a.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/e3272e4cc1b764c9be9f1bbd38f2b71a.png)'
- en: This chilling panda wasn’t hurt during the experiment
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这只放松的熊猫在实验过程中没有受伤
- en: And this is how we make the call with the API we built.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们如何使用我们构建的 API 进行调用。
- en: '![](../Images/e45d2bd46cd9493b6929f1fbbee433cf.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e45d2bd46cd9493b6929f1fbbee433cf.png)'
- en: The second example involves the servable that adds 2 to every element of the
    vector. This is how the call is made after the container is up.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例涉及一个可服务对象，它将 2 添加到向量的每个元素中。这是容器启动后如何进行调用的示例。
- en: '![](../Images/18801fd31989f825c562ae42c3103389.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/18801fd31989f825c562ae42c3103389.png)'
- en: With `requests` library
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `requests` 库
- en: The library `requests` allows you doing the same thing but using Python code
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`requests` 库允许你做相同的事情，但使用 Python 代码'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this piece of code, you will notice there are some rules you have to follow
    when defining the JSON that is sent in your request, such as the naming of the
    keys and the presence of nested structures. This is explained more extensively
    in the Tensorflow [documentation](https://www.tensorflow.org/tfx/serving/api_rest#predict_api).
    Regarding images, they are binarized using the Base64 encoding before being sent
    to the servable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，你会注意到在定义发送到请求中的 JSON 时需要遵循一些规则，例如键的命名和嵌套结构的存在。这在 Tensorflow 的 [文档](https://www.tensorflow.org/tfx/serving/api_rest#predict_api)
    中有更详细的说明。关于图像，它们在发送到可服务对象之前使用 Base64 编码进行二值化处理。
- en: And this covers everything I wanted to explain with Tensorflow Serving (for
    now). I hope this tutorial will spark your motivation for building machine learning
    services. This is only the tip of the iceberg. Good luck!
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了我目前想用 Tensorflow Serving 解释的所有内容。我希望这个教程能激发你构建机器学习服务的动力。这只是冰山一角。祝你好运！
- en: '**Bio: [Guillermo Gomez](https://www.linkedin.com/in/mlgxmez/)** builds machine
    learning-based products in the public infrastructure and services industry. His
    website where more tutorials can be found: [http://thelongrun.blog](http://thelongrun.blog)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[Guillermo Gomez](https://www.linkedin.com/in/mlgxmez/)** 在公共基础设施和服务行业构建基于机器学习的产品。他的网站可以找到更多教程：[http://thelongrun.blog](http://thelongrun.blog)'
- en: '[Original](https://thelongrun.blog/2020/01/26/rest-api-tensorflow-serving-pt2/).
    Reposted with permission.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://thelongrun.blog/2020/01/26/rest-api-tensorflow-serving-pt2/)。经许可转载。'
- en: '**Related:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[Building a REST API with Tensorflow Serving (Part 1)](/2020/07/building-rest-api-tensorflow-serving-part-1.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 TensorFlow Serving 构建 REST API（第 1 部分）](/2020/07/building-rest-api-tensorflow-serving-part-1.html)'
- en: '[Optimize Response Time of your Machine Learning API In Production](/2020/05/optimize-response-time-machine-learning-api-production.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化机器学习 API 在生产环境中的响应时间](/2020/05/optimize-response-time-machine-learning-api-production.html)'
- en: '[Getting Started with TensorFlow 2](/2020/07/getting-started-tensorflow2.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 TensorFlow 2](/2020/07/getting-started-tensorflow2.html)'
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织在 IT 领域'
- en: '* * *'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Top 7 Model Deployment and Serving Tools](https://www.kdnuggets.com/top-7-model-deployment-and-serving-tools)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[前 7 名模型部署和服务工具](https://www.kdnuggets.com/top-7-model-deployment-and-serving-tools)'
- en: '[Building and Training Your First Neural Network with TensorFlow and Keras](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 TensorFlow 和 Keras 构建和训练你的第一个神经网络](https://www.kdnuggets.com/2023/05/building-training-first-neural-network-tensorflow-keras.html)'
- en: '[Building a Visual Search Engine - Part 1: Data Exploration](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-1.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建视觉搜索引擎 - 第 1 部分：数据探索](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-1.html)'
- en: '[Building a Visual Search Engine - Part 2: The Search Engine](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建视觉搜索引擎 - 第 2 部分：搜索引擎](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
- en: '[OpenAI’s Whisper API for Transcription and Translation](https://www.kdnuggets.com/2023/06/openai-whisper-api-transcription-translation.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI 的 Whisper API 用于转录和翻译](https://www.kdnuggets.com/2023/06/openai-whisper-api-transcription-translation.html)'
- en: '[Meet Gorilla: UC Berkeley and Microsoft’s API-Augmented LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[认识 Gorilla：UC 伯克利和微软的 API 增强 LLM…](https://www.kdnuggets.com/2023/06/meet-gorilla-uc-berkeley-microsoft-apiaugmented-llm-outperforms-gpt4-chatgpt-claude.html)'
