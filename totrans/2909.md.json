["```py\n#' reg_rf\n#' Fits a random forest with a continuous scaled features and target \n#' variable (regression)\n#'\n#' @param formula an object of class formula\n#' @param n_trees an integer specifying the number of trees to sprout\n#' @param feature_frac an numeric value defined between [0,1]\n#'                     specifies the percentage of total features to be used in\n#'                     each regression tree\n#' @param data a data.frame or matrix\n#'\n#' @importFrom plyr raply\n#' @return\n#' @export\n#'\n#' @examples # Complete runthrough see: www.github.com/andrebleier/cheapml\nreg_rf <- function(formula, n_trees, feature_frac, data) {\n\n  # source the regression tree function\n  source(\"algorithms/reg_tree_imp.R\")\n\n  # load plyr\n  require(plyr)\n\n  # define function to sprout a single tree\n  sprout_tree <- function(formula, feature_frac, data) {\n    # extract features\n    features <- all.vars(formula)[-1]\n\n    # extract target\n    target <- all.vars(formula)[1]\n\n    # bag the data\n    # - randomly sample the data with replacement (duplicate are possible)\n    train <-\n      data[sample(1:nrow(data), size = nrow(data), replace = TRUE)]\n\n    # randomly sample features\n    # - only fit the regression tree with feature_frac * 100 % of the features\n    features_sample <- sample(features,\n                              size = ceiling(length(features) * feature_frac),\n                              replace = FALSE)\n\n    # create new formula\n    formula_new <-\n      as.formula(paste0(target, \" ~ \", paste0(features_sample,\n                                              collapse =  \" + \")))\n\n    # fit the regression tree\n    tree <- reg_tree_imp(formula = formula_new,\n                         data = train,\n                         minsize = ceiling(nrow(train) * 0.1))\n\n    # save the fit and the importance\n    return(list(tree$fit, tree$importance))\n  }\n\n  # apply the rf_tree function n_trees times with plyr::raply\n  # - track the progress with a progress bar\n  trees <- plyr::raply(\n    n_trees,\n    sprout_tree(\n      formula = formula,\n      feature_frac = feature_frac,\n      data = data\n    ),\n    .progress = \"text\"\n  )\n\n  # extract fit\n  fits <- do.call(\"cbind\", trees[, 1])\n\n  # calculate the final fit as a mean of all regression trees\n  rf_fit <- apply(fits, MARGIN = 1, mean)\n\n  # extract the feature importance\n  imp_full <- do.call(\"rbind\", trees[, 2])\n\n  # build the mean feature importance between all trees\n  imp <- aggregate(IMPORTANCE ~ FEATURES, FUN = mean, imp_full)\n\n  # build the ratio for interpretation purposes\n  imp$IMPORTANCE <- imp$IMPORTANCE / sum(imp$IMPORTANCE)\n\n  # export\n  return(list(fit = rf_fit,\n              importance = imp[order(imp$IMPORTANCE, decreasing = TRUE), ]))\n}\n```", "```py\n# source the regression tree function\n  source(\"algorithms/reg_tree_imp.R\")\n\n  # load plyr\n  require(plyr)\n\n  # define function to sprout a single tree\n  sprout_tree <- function(formula, feature_frac, data) {\n    # extract features\n    features <- all.vars(formula)[-1]\n\n    # extract target\n    target <- all.vars(formula)[1]\n\n    # bag the data\n    # - randomly sample the data with replacement (duplicate are possible)\n    train <-\n      data[sample(1:nrow(data), size = nrow(data), replace = TRUE)]\n\n    # randomly sample features\n    # - only fit the regression tree with feature_frac * 100 % of the features\n    features_sample <- sample(features,\n                              size = ceiling(length(features) * feature_frac),\n                              replace = FALSE)\n\n    # create new formula\n    formula_new <-\n      as.formula(paste0(target, \" ~ \", paste0(features_sample,\n                                              collapse =  \" + \")))\n\n    # fit the regression tree\n    tree <- reg_tree_imp(formula = formula_new,\n                         data = train,\n                         minsize = ceiling(nrow(train) * 0.1))\n\n    # save the fit and the importance\n    return(list(tree$fit, tree$importance))\n  }\n```", "```py\n# apply the rf_tree function n_trees times with plyr::raply\n  # - track the progress with a progress bar\n  trees <- plyr::raply(\n    n_trees,\n    sprout_tree(\n      formula = formula,\n      feature_frac = feature_frac,\n      data = data\n    ),\n    .progress = \"text\"\n  )\n\n  # extract fit\n  fits <- do.call(\"cbind\", trees[, 1])\n\n  # calculate the final fit as a mean of all regression trees\n  rf_fit <- apply(fits, MARGIN = 1, mean)\n\n  # extract the feature importance\n  imp_full <- do.call(\"rbind\", trees[, 2])\n\n  # build the mean feature importance between all trees\n  imp <- aggregate(IMPORTANCE ~ FEATURES, FUN = mean, imp_full)\n\n  # build the ratio for interpretation purposes\n  imp$IMPORTANCE <- imp$IMPORTANCE / sum(imp$IMPORTANCE)\n\n  # export\n  return(list(fit = rf_fit,\n              importance = imp[order(imp$IMPORTANCE, decreasing = TRUE), ]))\n```", "```py\neq <- y ~ LIN_1 + LIN_2 + LIN_3 + LIN_4 + LIN_5 + NOISE_1 + NOISE_2 + NOISE_3 + NOISE_4 + NOISE_5\n```"]