- en: Command Line Tricks For Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/06/command-line-tricks-data-scientists.html](https://www.kdnuggets.com/2018/06/command-line-tricks-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Kade Killary](http://kadekillary.work/), Data Scientist & Engineer**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/41bfa054c7f477d9be3f2d3a5bcb3cee.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: For many data scientists, data manipulation begins and ends with Pandas or the
    Tidyverse. In theory, there is nothing wrong with this notion. It is, after all,
    why these tools exist in the first place. Yet, these options can often be overkill
    for simple tasks like delimiter conversion.
  prefs: []
  type: TYPE_NORMAL
- en: Aspiring to master the command line should be on every developer’s list, especially
    data scientists. Learning the ins and outs of your terminal will undeniably make
    you more productive. Beyond that, the command line serves as a great history lesson
    in computing. For instance, awk — a data-driven scripting language. Awk first
    appeared in 1977 with the help of [Brian Kernighan](https://en.wikipedia.org/wiki/Brian_Kernighan),
    the *K* in the legendary [K&R book](https://en.wikipedia.org/wiki/The_C_Programming_Language).
    Today, some near 50 years later, awk remains relevant with [new books](https://www.amazon.com/Learning-AWK-Programming-cutting-edge-text-processing-ebook/dp/B07BT98HDS) still
    appearing every year! Thus, it’s safe to assume that an investment in command
    line wizardry won’t depreciate any time soon.
  prefs: []
  type: TYPE_NORMAL
- en: What We’ll Cover
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ICONV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HEAD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SPLIT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SORT & UNIQ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PASTE
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JOIN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GREP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SED
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ICONV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: File encodings can be tricky. For the most part files these days are all UTF-8
    encoded. To understand some of the magic behind UTF-8, check out this [excellent
    video](https://www.youtube.com/watch?v=MijmeoH9LT4). Nonetheless, there are times
    where we receive a file that isn’t in this format. This can lead to some wonky
    attempts at swapping the encoding schema. Here, `iconv` is a life saver. Iconv
    is a simple program that will take text in one encoding and output the text in
    another.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iconv -l` list all known encodings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`iconv -c` silently discard characters that cannot be converted'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HEAD
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are a frequent Pandas user then `head` will be familiar. Often when dealing
    with new data the first thing we want to do is get a sense of what exists. This
    leads to firing up Pandas, reading in the data and then calling `df.head()` -
    strenuous, to say the least. Head, without any flags, will print out the first
    10 lines of a file. The true power of `head` lies in testing out cleaning operations.
    For instance, if we wanted to change the delimiter of a file from commas to pipes.
    One quick test would be: `head mydata.csv | sed 's/,/|/g'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`head -n` print a specific number of lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`head -c` print a specific number of bytes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TR
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tr is analogous to translate. This powerful utility is a workhorse for basic
    file cleaning. An ideal use case is for swapping out the delimiters within a file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Another feature of `tr` is all the built in `[:class:]` variables at your disposal.
    These include:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can chain a variety of these together to compose powerful programs. The
    following is a basic word count program you could use to check your READMEs for
    overuse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Another example using basic regex:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tr -d` delete characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tr -s` squeeze characters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\b` backspace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\f` form feed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\v` vertical tab'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\NNN` character with octal value NNN'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WC
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Word count. Its value is primarily derived from the `-l` flag, which will give
    you the line count.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This tool comes in handy to confirm the output of various commands. So, if we
    were to convert the delimiters within a file and then run `wc -l` we would expect
    the total lines to be the same. If not, then we know something went wrong.
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wc -c` print the byte counts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wc -m` print the character counts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wc -L` print length of longest line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wc -w` print word counts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SPLIT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'File sizes can range dramatically. And depending on the job, it could be beneficial
    to split up the file — thus `split`. The basic syntax for split is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Two quirks are the naming convention and lack of file extensions. The suffix
    convention can be numeric via the `-d` flag. To add file extensions, you’ll need
    to run the following `find` command. It will change the names of *ALL* files within
    the current directory by appending `.csv`, so be careful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`split -b` split by certain byte size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split -a` generate suffixes of length N'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`split -x` split using hex suffixes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SORT & UNIQ
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The preceding commands are obvious: they do what they say they do. These two
    provide the most punch in tandem (i.e. unique word counts). This is due to `uniq`,
    which only operates on duplicate adjacent lines. Thus, the reason to `sort` before
    piping the output through. One interesting note is that `sort -u`will achieve
    the same results as the typical `sort file.txt | uniq` pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sort does have a sneakily useful ability for data scientists: the ability to
    sort an entire CSV based on a particular column.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `-t` option here is to specify the comma as our delimiter. More often than
    not spaces or tabs are assumed. Furthermore, the `-k` flag is for specifying our
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sort -f` ignore case'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort -r` reverse sort order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sort -R` scramble order'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uniq -c` count number of occurrences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uniq -d` only print duplicate lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CUT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cut is for removing columns. To illustrate, if we only wanted the first and
    third columns.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To select every column other than the first.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In combination with other commands, `cut` serves as a filter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Finding out the number of unique values within the second column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: PASTE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Paste is a niche command with an interesting function. If you have two files
    that you need merged, and they are already sorted, `paste` has you covered.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For a more SQL-esque variant, see below.
  prefs: []
  type: TYPE_NORMAL
- en: JOIN
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Join is a simplistic, quasi-tangential, SQL. The largest differences being
    that `join`will return all columns and matches can only be on one field. By default, `join` will
    try and use the first column as the match key. For a different result, the following
    syntax is necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The standard join is an inner join. However, an outer join is also viable through
    the `-a` flag. Another noteworthy quirk is the `-e` flag, which can be used to
    substitute a value if a missing field is found.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Not the most user-friendly command, but desperate times, desperate measures.
  prefs: []
  type: TYPE_NORMAL
- en: 'Useful options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`join -a` print unpairable lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`join -e` replace missing input fields'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`join -j` equivalent to `-1 FIELD -2 FIELD`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GREP
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Global search for a regular expression and print, or `grep`; likely, the most
    well known command, and with good reason. Grep has a lot of power, especially
    for finding your way around large codebases. Within the realm of data science,
    it acts as a refining mechanism for other commands. Although its standard usage
    is valuable as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Count total number of lines containing word / pattern.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Grep for multiple values using the or operator — `\|`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Useful options
  prefs: []
  type: TYPE_NORMAL
- en: '`alias grep="grep --color=auto"` make grep colorful'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grep -E` use extended regexps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grep -w` only match whole words'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grep -l` print name of files with match'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grep -v` inverted matching'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: THE BIG GUNS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sed and Awk are the two most powerful commands in this article. For brevity,
    I’m not going to go into exhausting detail about either. Instead, I will cover
    a variety of commands that prove their impressive might. If you want to know more, [there
    is a book](https://www.amazon.com/sed-awk-Dale-Dougherty/dp/1565922255/ref=sr_1_1?ie=UTF8&qid=1524381457&sr=8-1&keywords=sed+and+awk) just
    for that.
  prefs: []
  type: TYPE_NORMAL
- en: SED
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: At its core `sed` is a stream editor that operates on a line-by-line basis.
    It excels at substitutions, but can also be leveraged for all out refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: The most basic `sed` command consists of `s/old/new/g`. This translates to search
    for old value, replace all occurences in-line with new. Without the `/g`our command
    would terminate after the first occurrence on the line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get a quick taste of the power lets dive into an example. In this scenario
    you’ve been given the following file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The first thing we may want to do is remove the dollar signs. The `-i` flag
    indicates in-place. The `''` is to indicate a zero-length file extension, thus
    overwriting our initial file. Ideally, you would test each of these individually
    and then output to a new file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Next up, the commas in our `balance` column values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Lastly, Jack up and decided to quit one day. So, au revoir, mon ami.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `sed` packs quite a punch, but the fun doesn’t stop there.
  prefs: []
  type: TYPE_NORMAL
- en: AWK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The best for last. Awk is much more than a simple command: it is a full-blown
    language. Of everything covered in this article, `awk` is by far the coolest.
    If you find yourself impressed there are loads of great resources - see [here](https://www.amazon.com/AWK-Programming-Language-Alfred-Aho/dp/020107981X/ref=sr_1_1?ie=UTF8&qid=1524388936&sr=8-1&keywords=awk), [here](http://www.grymoire.com/Unix/Awk.html)and [here](https://www.tutorialspoint.com/awk/index.htm).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Common use cases for `awk` include:'
  prefs: []
  type: TYPE_NORMAL
- en: Text processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Formatted text reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing arithmetic operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing string operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Awk can parallel `grep` in its most nascent form.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Or with a little more magic the combination of `grep` and `cut`. Here, `awk`prints
    the third and fourth column, tab separated, for all lines with our *word*. `-F,` merely
    changes our delimiter to a comma.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Awk comes with a lot of nifty variables built-in. For instance, `NF` - number
    of fields - and `NR` - number of records. To get the fifty-third record in a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: An added wrinkle is the ability to filter based off of one or more values. The
    first example, below, will print the line number and columns for records where
    the first column equals *string*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Multiple numerical expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Sum the third column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The sum of the third column, for values where the first column equals “something”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Get the dimensions of a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Print lines appearing twice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Remove duplicate lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Substitute multiple values using built-in function `gsub()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This `awk` command will combine multiple CSV files, ignoring the header and
    then append it at the end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Need to downsize a massive file? Welp, `awk` can handle that with help from `sed`.
    Specifically, this command breaks one big file into multiple smaller ones based
    on a line count. This one-liner will also add an extension.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: CLOSING
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The command line boasts endless power. The commands covered in this article
    are enough to elevate you from zero to hero in no time. Beyond those covered,
    there are many utilities to consider for daily data operations. [Csvkit](http://csvkit.readthedocs.io/en/1.0.3/), [xsv](https://github.com/BurntSushi/xsv) and [q](https://github.com/harelba/q) are
    three of note. If you’re looking to take an even deeper dive into command line
    data science, then look no further than [this book](https://www.amazon.com/Data-Science-Command-Line-Time-Tested/dp/1491947853/ref=sr_1_1?ie=UTF8&qid=1524390894&sr=8-1&keywords=data+science+at+the+command+line).
    It’s also available online [for free](https://www.datascienceatthecommandline.com/)!
  prefs: []
  type: TYPE_NORMAL
- en: '[More on my blog!](http://kadekillary.work/post/statusline/)'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: LINKS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Sed One-Liners](http://sed.sourceforge.net/sed1line.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Awk One-Liners](http://www.catonmat.net/blog/wp-content/uploads/2008/09/awk1line.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Working With CSVs on the Command Line](http://bconnelly.net/working-with-csvs-on-the-command-line/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Appending file extensions](https://stackoverflow.com/questions/1108527/recursively-add-file-extension-to-all-files)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[My Best AWK Tricks](http://blog.jpalardy.com/posts/my-best-awk-tricks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bioinformatics one-liners](https://github.com/stephenturner/oneliners)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The UNIX School](http://www.theunixschool.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sed — An Intro and Tutorial](http://www.grymoire.com/Unix/Sed.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Kade Killary](http://kadekillary.work/)** is a Data Scientist & Engineer
    at XMedia.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/@kadek/command-line-tricks-for-data-scientists-c98e0abe5da).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top 12 Essential Command Line Tools for Data Scientists](/2018/03/top-12-essential-command-line-tools-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science at the Command Line: Exploring Data](/2018/02/data-science-command-line-book-exploring-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Data Preparation with Python](/2017/06/7-steps-mastering-data-preparation-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Data Science at the Command Line: The Free eBook](https://www.kdnuggets.com/2022/03/data-science-command-line-free-ebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 More Command Line Tools for Data Science](https://www.kdnuggets.com/2023/03/5-command-line-tools-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ChatGPT CLI: Transform Your Command-Line Interface Into ChatGPT](https://www.kdnuggets.com/2023/07/chatgpt-cli-transform-commandline-interface-chatgpt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Master The Art Of Command Line With This GitHub Repository](https://www.kdnuggets.com/master-the-art-of-command-line-with-this-github-repository)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Jupyter Notebook Tips and Tricks for Data Scientists](https://www.kdnuggets.com/2023/06/10-jupyter-notebook-tips-tricks-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
