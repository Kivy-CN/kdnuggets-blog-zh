- en: Using the ‘What-If Tool’ to investigate Machine Learning models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/06/using-what-if-tool-investigate-machine-learning-models.html](https://www.kdnuggets.com/2019/06/using-what-if-tool-investigate-machine-learning-models.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Parul Pandey](https://twitter.com/pandeyparul)**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/19db90fa5b07c48dfbbef210a1d823cc.png)'
  prefs: []
  type: TYPE_IMG
- en: In this era of explainable and interpretable Machine Learning, one merely cannot
    be content with simply training the model and obtaining predictions from it. To
    be able to really make an impact and obtain good results, we should also be able
    to probe and investigate our models. Apart from that, algorithmic fairness constraints
    and bias should also be clearly kept in mind before going ahead with the model.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating a model requires asking a lot of questions and one needs to have
    an acumen of a detective to probe and look for issues and inconsistencies within
    the models. Also, such a task is usually complex requiring to write a lot of custom
    code. Fortunately, the **What-If Tool** has been created to address this issue
    making it easier for a broad set of people to examine, evaluate, and debug ML
    systems easily and accurately.
  prefs: []
  type: TYPE_NORMAL
- en: '**What-If Tool (WIT)**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/ced5ba147bd18f47dfd5eb6f8f61e042.png)'
  prefs: []
  type: TYPE_IMG
- en: '[**What-If Tool**](https://pair-code.github.io/what-if-tool) is an interactive
    visual tool that is designed to investigate the Machine Learning models. Abbreviated
    as WIT, it enables the understanding of a classification or regression model by
    enabling people to examine, evaluate, and compare machine learning models. Due
    to its user-friendly interface and less dependency on complex coding, everyone
    from a developer, a product manager, a researcher or a student can use it for
    their purpose.'
  prefs: []
  type: TYPE_NORMAL
- en: '**WIT** is an open-source visualisation tool released by Google under the [PAIR](https://ai.google/research/teams/brain/pair) (People
    + AI Research) initiative. PAIR brings together researchers across [Google](https://ai.google/) to
    study and redesign the ways people interact with AI systems.'
  prefs: []
  type: TYPE_NORMAL
- en: The tool can be accessed through TensorBoard or as an extension in a Jupyter
    or [Colab](https://colab.research.google.com/github/tensorflow/tensorboard/blob/master/tensorboard/plugins/interactive_inference/What_If_Tool_Notebook_Usage.ipynb) notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '**Advantages**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The purpose of the tool is to give people a simple, intuitive, and a powerful
    way to play with a trained ML model on a set of data through a visual interface
    only. Here are the major advantages of WIT.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0aa4b42f6b885521043890f2b15a90cb.png)What can you do with the
    What-If Tool?'
  prefs: []
  type: TYPE_NORMAL
- en: We shall cover all the above points during an example walkthrough using the
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: '**Demos**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To illustrate the capabilities of the What-If Tool, the PAIR team released a
    set of [demos](https://pair-code.github.io/what-if-tool/index.html#demos) using
    pre-trained models. You can either run the demos in the notebook or directly through
    the web.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/df7c594200249d4e99c44e5a0e45fb23.png)'
  prefs: []
  type: TYPE_IMG
- en: Take the What-If Tool for a spin!
  prefs: []
  type: TYPE_NORMAL
- en: '**Usage**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WIT can be used inside a [Jupyter](https://jupyter.org/) or [Colab](https://colab.research.google.com/) notebook,
    or inside the [TensorBoard](https://www.tensorflow.org/tensorboard) web application.
    This has been nicely and clearly explained in the [documentation](https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference#what-if-tool) and
    I highly encourage you to go through that since explaining the entire process
    wouldn’t be possible through this short article.
  prefs: []
  type: TYPE_NORMAL
- en: The whole idea is to first train a model and then visualize the results of the
    trained classifier on test data using the What-If Tool.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Using WIT with Tensorboard](https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference#what-do-i-need-to-use-it-in-tensorboard)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To use WIT within TensorBoard, your model needs to be served through a [TensorFlow
    Model Server](https://www.tensorflow.org/serving), and the data to be analyzed
    must be available on disk as a [TFRecords](https://medium.com/mostly-ai/tensorflow-records-what-they-are-and-how-to-use-them-c46bc4bbb564) file.
    For more details, refer to the [documentation](https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference#what-do-i-need-to-use-it-in-tensorboard) for
    using WIT in TensorBoard.
  prefs: []
  type: TYPE_NORMAL
- en: '[Using WIT with Notebooks](https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference#notebook-mode-details)'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To be able to access WIT within notebooks, you need a WitConfigBuilder object
    that specifies the data and model to be analyzed. This [documentation](https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference#notebook-mode-details)
    provides a step-by-step outline for using WIT in a notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7702a3d6bbc9fa6368136c5541ad9c11.png)'
  prefs: []
  type: TYPE_IMG
- en: You can also use a [demo notebook](https://colab.research.google.com/github/pair-code/what-if-tool/blob/master/WIT_Model_Comparison.ipynb) and
    edit the code to include your datasets to start working.
  prefs: []
  type: TYPE_NORMAL
- en: Walkthrough
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s now explore the capabilities of the WIT tool with an example. The example
    has been taken from the demos provided on the website and is called **Income Classification **wherein
    we need to predict whether a person earns more than $50k a year based on their
    census information. The Dataset belongs to the [UCI Census dataset](http://archive.ics.uci.edu/ml/datasets/Census+Income) consisting
    of a number of attributes such as age, marital status, and education level.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Let’s begin by doing some exploration of the dataset. Here is a [link](https://pair-code.github.io/what-if-tool/uci.html) to
    the web demo for following along.
  prefs: []
  type: TYPE_NORMAL
- en: WIT contains two main panels. The **right panel **contains a visualization of
    the individual data points in the data set you have loaded.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/320b9bb2f45a4900255583166675870d.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the **blue dots** are people for whom the model has inferred an
    income of **less than 50k** and the **red dots** are those that the model inferred
    earn **more than 50k. **By default, WIT uses a [positive classification threshold](https://developers.google.com/machine-learning/crash-course/classification/thresholding)
    of 0.5\. This means that if the inference score is 0.5 or more, the data point
    is considered to be in a positive class, i.e., high income.
  prefs: []
  type: TYPE_NORMAL
- en: What is interesting to note here is that the dataset is visualized in [Facets
    Dive](https://pair-code.github.io/facets/). Facets Dive is a part of the **FACETS**’
    tool developed again by the PAIR team and helps us to understand the various features
    of data and explore them. In case you are not familiar with the tool, you may
    want to refer to [this article](https://towardsdatascience.com/visualising-machine-learning-datasets-with-googles-facets-462d923251b3)
    on FACETS’ capabilities, which I had written a while ago.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: One can also organize the data points in tons of different ways including confusion
    matrices, scatter plots, histograms, and small multiples of plots by simply selecting
    the fields from the drop-down menu. A few examples are presented below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ddd8373657963ee2904a39e98a574532.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/47f116e961db5224d18d693e221816bf.png)'
  prefs: []
  type: TYPE_IMG
- en: The **left panel** contains three tabs called Datapoint Editor, Performance
    & Fairness, and Features.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Datapoint Editor Tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The Datapoint Editor helps to perform data analysis through:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Viewing and Editing details of Datapoints**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows diving into a selected data point which gets highlighted in yellow
    on the right panel. Let’s try changing the age from 53 to 58 and clicking the
    “Run inference” button to see what effect it has on the model’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/57f3ec05b3681bc1c4662774c8f4e64f.png)'
  prefs: []
  type: TYPE_IMG
- en: By simply changing the age of this person, the model now predicts that the person
    belongs to the high-income category. For this data point, earlier the inference
    score for the positive (high income) class was 0.473, and the score for negative
    (low income) class was 0.529\. However, by changing the age, the positive class
    score became 0.503.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding Nearest Counterfactuals**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Another way to understand the model’s behaviour is to look at what small set
    of changes can cause the model to flip its decision, which is called **counterfactual**s.
    With one click we can see the most similar counterfactual, which is highlighted
    in green, to our selected data point. In the data point editor tab we now also
    see the feature values for the counterfactual next to the feature values for our
    original data point. The green text represents features where the two data points
    differ. WIT uses [L1 and L2](https://www.kaggle.com/residentmario/l1-norms-versus-l2-norms) distances
    to calculate the similarity between the data points.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e949faf330b31a7d0160b2a7c796b035.png)'
  prefs: []
  type: TYPE_IMG
- en: In this case, the nearest counterfactual is slightly older and has a different
    occupation and capital gain, but is otherwise identical.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see the similarity between the selected points and others using
    the “**show similarity to selected datapoint**” button. WIT measures the distance
    from the selected point to every other data point. Let’s change our *X*-axis scatter
    to show the L1 distance to the selected data point.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/55644cb1048e3b4c5ab58a336e23f6e2.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Analysing partial dependence plots**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The partial dependence plot (PDP or PD plot) shows the marginal effect one or
    two features have on the predicted outcome of a machine learning model ([J. H.
    Friedman 2001](https://statweb.stanford.edu/~jhf/ftp/trebst.pdf)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The PDPs for age and education for a data point are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/28864d656c4cd343bcd92e652293ca60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The plot above shows that:'
  prefs: []
  type: TYPE_NORMAL
- en: The model has learned a positive correlation between age and income
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More advanced degrees give the model more confidence in higher income.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High capital gains is a very strong indicator of high income, much more than
    any other single feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2\. Performance & Fairness Tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This tab allows us to look at the overall model performance using confusion
    matrices and ROC curves.
  prefs: []
  type: TYPE_NORMAL
- en: '**Model Performance Analysis**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To measure the model’s performance, we need to tell the tool what is the ground
    truth feature, i.e., the feature that the model is trying to predict, which in
    this case is “**Over-50K**”.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a6b4a4ec218ede659d329ae87d7b5f70.png)'
  prefs: []
  type: TYPE_IMG
- en: We can see that at the default threshold level of 0.5, our model is incorrect
    about 15% of the time with about 5% of the time being false positives and 10%
    of the time being false negatives. Change the threshold values to see its impact
    on the model’s accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: There is also a setting for “**cost ratio**” and an “**optimize threshold**”
    button, which can also be tweaked.
  prefs: []
  type: TYPE_NORMAL
- en: '**ML Fairness**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fairness in Machine Learning is as important as model building and predicting
    an outcome. Any bias in the training data will be reflected in the trained model
    and if such a model is deployed, the resultant outputs will also be biased. The
    WIT can help investigate fairness concerns in a few different ways. We can set
    an input feature (or set of features) with which to slice the data. For example,
    let’s see the effect of gender on model performance.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fb7680f3deb18f3bbb883dacc75cccd3.png)'
  prefs: []
  type: TYPE_IMG
- en: Effect of gender on the model’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that the model is more accurate on females than males. Also, the
    model predicts high income for females much less than it does for males (9.3%
    of the time for females vs 28.6% of the time for males). One probable reason might
    be due to the under-representation of females in the dataset, which we explore
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the tool can optimally set the decision threshold for the two
    subsets while taking into account any of a number of constraints related to algorithmic
    fairness such as demographic parity or equal opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Features Tab
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The features tab gives the summary statistics of each of the features in the
    dataset including histograms, quantile charts, and bar charts. The tab also enables
    to look into the distribution of values for each feature in the dataset. For instance,
    let us explore the sex, capital gain, and race features.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6bc92034e3080e1e6e5f8ba8cb9e4606.png)'
  prefs: []
  type: TYPE_IMG
- en: We infer that *capital-gain* is very non-uniform, with most datapoints having
    being set to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/07ff3db185c48389ec89a8406715a01f.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/5f0be07f428d3c2096a01ace22c272d9.png)'
  prefs: []
  type: TYPE_IMG
- en: Native Country Distribution || Sex distribution
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, most data points belong to the United States while females are not
    well represented in the dataset. Since the data is biased, it is natural that
    its predictions are targeted towards one group only. After all, a model learns
    from the data it is provided and if the source is skewed so will be the results.
    Machine learning has proved its mettle in a lot of applications and areas. However,
    one of the key hurdles for industrial applications of machine learning models
    is to determine if the raw input data used to train the model contains discriminatory
    bias.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This was just a quick run-through of some of the what if tools features. WIT
    is a pretty handy tool which gives the ability to probe the models, into the hands
    of the people to whom it matters the most. Simply creating and training a model
    isn’t the purpose of machine learning but understanding why and how that model
    was created is machine learning in its true sense.
  prefs: []
  type: TYPE_NORMAL
- en: 'References:'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '[The What-If Tool: Code-Free Probing of Machine Learning Models](https://ai.googleblog.com/2018/09/the-what-if-tool-code-free-probing-of.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://pair-code.github.io/what-if-tool/walkthrough.html](https://pair-code.github.io/what-if-tool/walkthrough.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference](https://github.com/tensorflow/tensorboard/tree/master/tensorboard/plugins/interactive_inference)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/using-what-if-tool-to-investigate-machine-learning-models-913c7d4118f).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio:** [Parul Pandey](https://twitter.com/pandeyparul) is a Data Science
    enthusiast having worked in the Analytics wing of the Power industry. Now contributing
    articles related to Data Science and Artificial Intelligence to national and international
    publications, Parul tries to break the Data Science jargon for the masses.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Data Scientists Are Thinkers: Execution vs. exploration and what it means
    for you](https://www.kdnuggets.com/2019/06/data-scientists-thinkers-execution-exploration.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science at the Command Line: Exploring Data](https://www.kdnuggets.com/2018/02/data-science-command-line-book-exploring-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ultimate Guide to Getting Started with TensorFlow](https://www.kdnuggets.com/2018/09/ultimate-guide-tensorflow.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Nota AI releases beta version of NetPresso Model Search, their…](https://www.kdnuggets.com/2022/04/nota-ai-releases-beta-version-netpresso-model-search-hardwareaware-automl-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RAG vs Finetuning: Which Is the Best Tool to Boost Your LLM Application?](https://www.kdnuggets.com/rag-vs-finetuning-which-is-the-best-tool-to-boost-your-llm-application)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Predicting Cryptocurrency Prices Using Regression Models](https://www.kdnuggets.com/2022/05/predicting-cryptocurrency-prices-regression-models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Make Large Language Models Play Nice with Your Software…](https://www.kdnuggets.com/how-to-make-large-language-models-play-nice-with-your-software-using-langchain)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Strategies for Optimizing Performance and Costs When Using Large…](https://www.kdnuggets.com/strategies-for-optimizing-performance-and-costs-when-using-large-language-models-in-the-cloud)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
