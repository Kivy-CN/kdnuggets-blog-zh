- en: 'Moving from R to Python: The Libraries You Need to Know'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/02/moving-r-python-libraries.html](https://www.kdnuggets.com/2017/02/moving-r-python-libraries.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This post originally appeared on the [Yhat blog](http://blog.yhat.com/). [**Yhat**](https://www.yhat.com/)
    is a Brooklyn based company whose goal is to make data science applicable for
    developers, data scientists, and businesses alike. Yhat provides a software platform
    for deploying and managing predictive algorithms as REST APIs, while eliminating
    the painful engineering obstacles associated with production environments like
    testing, versioning, scaling and security.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Why the switch?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of my favorite parts of machine learning in Python is that it got the benefit
    of observing the R community and then emulating the best parts of it. I'm a big
    believer that a language is only as helpful as its libraries. So in this post
    I'm going to go over some critical packages that I use almost every time I work
    in R, and their counterpart(s) in Python.
  prefs: []
  type: TYPE_NORMAL
- en: '![R and Python](../Images/f572776fbe1859abeac7883ec931b77d.png)'
  prefs: []
  type: TYPE_IMG
- en: glm, knn, randomForest, e1071 -> scikit-learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing that is a blessing and a curse in R is that the machine learning algorithms
    are *generally* segmented by package. Meaning instead of having a single (or set)
    of ML libraries that each implement some common algorithms, each algorithm gets
    its own package. It's sort of nice because you can find very esoteric, cutting
    edge implementations of algorithms, but it can be a pain for day-to-day use where
    you might be switching between algorithms. This pain is something that Python's
    [`scikit-learn`](https://github.com/scikit-learn/scikit-learn) solves really well.
    [`scikit-learn`](https://github.com/scikit-learn/scikit-learn) provides a common
    set of ML algorithms all under the same API. It makes switching between LogisticRegression
    and GradientBoostingMachines a one-liner.
  prefs: []
  type: TYPE_NORMAL
- en: reshape/reshape2, plyr/dplyr -> pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This was actually the subject of one of [our first posts](http://blog.yhat.com/posts/R-and-pandas-and-what-ive-learned-about-each.html).
    [`pandas`](https://github.com/pydata/pandas) took the best parts of data munging
    in R and turned it into a Python package. This includes its own implementation
    of a data frame along with ways to modify and restructure it. Basically it took
    the best parts of [`reshape`](https://github.com/hadley/reshape)/[`reshape2`](https://github.com/hadley/reshape)
    and [`plyr`](https://github.com/hadley/plyr)/[`dplyr`](https://github.com/hadley/dplyr)
    and Pythonified it!
  prefs: []
  type: TYPE_NORMAL
- en: ggplot2 -> ggplot + seaborn + bokeh
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One thing that R still does better than Python is plotting. Hands down, R is
    better in just about every *facet*. Even so, Python plotting has matured though
    it's a fractured community. If you like the ggplot-style syntax, then look no
    further than [Yhat's own `ggplot`](https://github.com/yhat/ggplot). If you're
    after super statistical and technical plots then reach for [`seaborn`](https://github.com/mwaskom/seaborn).
    And if you're in the market for some super slick, great looking interactive plots
    then try out [`bokeh`](https://github.com/bokeh/bokeh).
  prefs: []
  type: TYPE_NORMAL
- en: stringr -> nothing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'String manipulation in "base R" is nearly as unintuitive as it is silly. Any
    time I''m working with strings in R I do 2 things (in order):'
  prefs: []
  type: TYPE_NORMAL
- en: briefly nod in appreciation to New Zealand for producing Hadley Wickham
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: import [`stringr`](https://github.com/hadley/stringr)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![stringr](../Images/502d9a7c007ce20bccf5bdabf0e1cba8.png)'
  prefs: []
  type: TYPE_IMG
- en: Much obliged, New Zealand
  prefs: []
  type: TYPE_NORMAL
- en: '[`stringr`](https://github.com/hadley/stringr) is an absolute lifesaver. It''s
    well written, performant (at least I think so), and easy to install (don''t overlook
    this last item. if people can''t install your software, there''s no sense in making
    it).'
  prefs: []
  type: TYPE_NORMAL
- en: Ok so [`stringr`](https://github.com/hadley/stringr) appreciation monologue
    complete. So the good news for you is that Python is so great for string manipulation,
    you don't really need a string library! It has a fantastic built-in regular expressions
    library, `re`, and a built-in string meta-libarary appropriately called `string`.
    So lucky for you, Python comes with all string-related batteries included!
  prefs: []
  type: TYPE_NORMAL
- en: RStudio -> Rodeo
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To many users, [`RStudio`](https://www.rstudio.com/products/rstudio/download/)
    is synonymous with R. And why not? It's a great IDE for data analysis in R. Historically
    speaking, there haven't been a lot of comparable options for Python. Of course
    this is no longer the case. We released the very first version of Rodeo just over
    a year ago and released the 2.0 for Windows, OSX, and Linux about a month ago.
  prefs: []
  type: TYPE_NORMAL
- en: '"Ever since we''ve used RStudio, we''ve been looking for an IDE like it for
    Python. We went through IDEs such as Sublime Text and Spyder, none of which suited
    our likings. We searched and found Rodeo and couldn''t have been more pleased
    with the IDE." -Stephen Hsu, University of California, Berkeley'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[**Download Rodeo!**](https://www.yhat.com/products/rodeo/)'
  prefs: []
  type: TYPE_NORMAL
- en: Knitr -> Jupyter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`Knitr`](https://github.com/yihui/knitr) is a great way to create reproducible
    and highly visual analysis using R. It''s been a staple in RStudio for a while
    now. In the Python world, the most analagous package is [`Jupyter`](https://github.com/jupyter).
    Jupyter notebooks provide an interactive environment for programming in Python
    (and other languages) that focuses on reproducibility and visualization--it even
    has a plugin for R!'
  prefs: []
  type: TYPE_NORMAL
- en: sqldf -> pandasql
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[`sqldf`](https://github.com/ggrothendieck/sqldf) is a great way for SQL users
    to comfortably manipulate data in R. I myself used it when I first started learning
    R. Way back when, Yhat actually built a similar package for Python called [`pandasql`](https://github.com/yhat/pandasql).
    Same concept: write SQL queries against your data frames, get data frames back!
    Fast-forward 3 years and `pandasql` has over 256 stars on GitHub :). Not bad for
    a library with only 358 lines of code!'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](http://blog.yhat.com/posts/moving-from-r-to-python.html). Reposted
    with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Eight Things an R user Will Find Frustrating When Trying to Learn Python](/2016/11/r-user-frustrating-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[R vs Python for Data Science: The Winner is...](/2015/05/r-vs-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[R vs Python: head to head data analysis](/2015/10/r-vs-python-data-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets News, April 13: Python Libraries Data Scientists Should…](https://www.kdnuggets.com/2022/n15.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Libraries Data Scientists Should Know in 2022](https://www.kdnuggets.com/2022/04/python-libraries-data-scientists-know-2022.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Level 50 Data Scientist: Python Libraries to Know](https://www.kdnuggets.com/level-50-data-scientist-python-libraries-to-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Python Libraries Every Data Engineer Should Know](https://www.kdnuggets.com/7-python-libraries-every-data-engineer-should-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Python Libraries Every Data Scientist Should Know](https://www.kdnuggets.com/10-python-libraries-every-data-scientist-should-know)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
