- en: Leveraging Geospatial Data in Python with GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/leveraging-geospatial-data-in-python-with-geopandas](https://www.kdnuggets.com/leveraging-geospatial-data-in-python-with-geopandas)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Spatial data consists of records associated with locations. This data can come
    from GPS tracks, earth observation imagery, and maps. Each spatial data point
    can be precisely placed on a map using coordinate reference systems like latitude/longitude
    pairs for exact placement on maps, which enables us to investigate relationships
    among them.
  prefs: []
  type: TYPE_NORMAL
- en: Spatial data's true potential lies in its ability to connect data points and
    their respective locations, creating endless possibilities for advanced analysis.
    Geospatial data science is an emerging field within data science that seeks to
    harness geospatial information and extract valuable insights through spatial algorithms
    and advanced techniques such as machine learning or deep learning to draw meaningful
    conclusions about what events have taken place and their causes. Geospatial data
    science gives us insight into where events happen as well as why they happen.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: GeoPandas is an open-source Python package specifically tailored for working
    with information. It expands upon pandas' array of datatypes by providing spatial
    operations on geometric objects - which facilitates spatial analyses in Python
    using pandas' data-manipulation tool, pandas. Since GeoPandas is built upon Pandas
    it offers an easy path for professionals familiar with Python syntax to become
    acquainted with GeoPandas syntax quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/57a482a9238b63706df83bbc2859b7b9.png)'
  prefs: []
  type: TYPE_IMG
- en: 1\. Installing GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have to install the GeoPandas package to be able to use it. However, it is
    critical to note that GeoPandas depends on other libraries that must be installed
    to use it without problems. These dependencies are [**shapely**](https://shapely.readthedocs.io/),
    [**Fiona**](https://fiona.readthedocs.io/), [**pyproj**](https://github.com/pyproj4/pyproj),
    and [**rtree**](https://github.com/Toblerity/rtree)**. **
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways you can download the GeoPandas package. First, you can use
    conda to install the GeoPandas conda package. This method is recommended as it
    will provide the dependencies of GeoPandas without the need to install them on
    your own. You can run the following command to install GeoPandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The second method is to use pip which is the standard package installer in Python.
    However, using this method will require installing the rest of the mentioned dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the GeoPandas package is installed you can import it into your Python
    code using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Reading & Writing Spatial Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GeoPandas is used to read spatial data and convert it into **GeoDataFrame**.
    However, it is important to note that there are two main types of spatial data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vector data:** The vector data describes the features of the geography of
    earth locations using discrete geometry using the following terms point, line,
    and polygon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Raster data**: The raster data encodes the world as a surface represented
    by a grid. Each pixel of this grid is represented by a continuous value or categorical
    class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'GeoPandas mainly works with vector data. However, it can be used in conjunction
    with other Python packages to handle raster data, such as [**rasterio**](https://geopandas-org.translate.goog/en/stable/gallery/geopandas_rasterio_sample.html?_x_tr_sl=en&_x_tr_tl=es&_x_tr_hl=es&_x_tr_pto=sc)**.**
    You can use the powerful **geopandas.read_file()** function to read most of the
    vector-based spatial data. There are two main data types of vector-based partial
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shapefile:** Shapfile is the most common data format and is considered the
    industry-level data type. It consists of three files that are compressed and usually
    provided as a zip file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The .**shp** file: This file contains the shape geometry.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **.dbf** file: This file holds attributes for each geometry,'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **.shx** file: This is the shape index file that helps link the attributes
    to the shapes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**GeoJSON:** This is a new file format of geospatial data released in 2016\.
    Since it consists of only a single file it is easier to use it compared to the
    **Shapefile**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this article, we will use the **geopandas.read_file()** function to read
    a GeoJSON file hosted in [**GitHub**](https://github.com/martgnz/bcn-geodata/blob/master/barris/barris.geojson)
    containing geospatial data about the different districts of the city of Barcelona.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let first start by loading the data and printing the first five columns of
    it using the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/93700d532c04edf9c9b30b5a7ba35eb6.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, to write the data into a file we can use the **GeoDataFrame.to_file()**
    function to write the data into a **Shapefile** by default but you can convert
    it into **GeoJSON** using the **driver** parameter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 3\. GeoDataFrames Properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since **GeoDataFrames** is a subclass of pandas DataFrame it inherits a lot
    of its properties. However, there are some differences the main difference is
    that it can store geometry columns (also known as GeoSeries) and perform spatial
    operations. The geometry column in a GeoDataFrame can contain various types of
    vector data, including points, lines, and polygons. However, only one column is
    considered the active geometry, and all spatial operations will be based on that
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another critical feature of it is that every column comes with its associated
    CRS information that tells us where the candidates are located on Earth. The reason
    why this feature is critical is that if you need to combine two spatial datasets
    you will need to make sure that they are expressed in the same CRS otherwise you
    will get the wrong results. The CRS information is stored in the crs attribute
    in GeoPandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/31f4b918a845cfe2fc153dadc09783da.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have set the right projected CRS, we’re ready to explore the attributes
    of GeoDataFrames.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Exploring GeoDataFrames
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'GeoPandas has four useful methods and attributes that can be used to explore
    the data. We will explore these four methods:'
  prefs: []
  type: TYPE_NORMAL
- en: Area
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Centroid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boundary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 4.1\. Area
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The area attribute returns the calculated area of a geometry. In the example
    below we will calculate the area of every district in km2.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/a8b24dcfbd134d7190d2d04c3b7d5971.png)'
  prefs: []
  type: TYPE_IMG
- en: 4.2\. Centroid
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The second attribute is the centroid which returns the center point of the
    geometry. In the code snippet below we will add a new column and save the centroid
    for each district:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/6d2b8590b1a6b19fad391c35978a61ed.png)'
  prefs: []
  type: TYPE_IMG
- en: 4.3\. Boundary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The third method is the boundary attribute which calculates the boundary of
    a polygon for every district. The code below returns it and saves it into a separate
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/b63de49bc7136f86a7b70e0127a4037e.png)'
  prefs: []
  type: TYPE_IMG
- en: 4.4\. Distance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The distance method calculates the minimum distance from a certain geometry
    to a specific location. So for example in the code below we will calculate the
    distance from the Sagrada Familia church to the centroids of every district in
    Barcelona. After that, we will add the distance in km2 and save it in a new column.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/dd7292d0c8b66796fbb93c818f0e6fc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 5\. Plotting Data with GeoPandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plotting and visualizing your data is a critical step to better understand your
    data. Plotting with GeoPandas is the same as plotting with Pandas pretty easy
    and super forward. This is done through the GeoDataFrame.plot() function that
    is built on the matplotlib python package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by exploring Barcelona by plotting a basic plot for its districts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/e5fd076ccf9a7edcc906b960ab6345f0.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a very basic plot that does not tell us a lot of information. However,
    we can make it more informative by coloring each district with a different color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/f7aeb7ee69677ada997d71de90cefe29.png)'
  prefs: []
  type: TYPE_IMG
- en: Finally, we can add more information to our plot by adding the centroids of
    the districts.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/4afa93df50e4a1c7ae79e3811d27a31a.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will explore a very important feature of GeoPandas which is the spatial
    relation and how they can relate to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Defining Spatial Relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Geospatial data relate to each other in space. GeoPandas uses pandas and shapely
    packages for spatial relationships. This section covers common operations. There
    are two main ways to merge GeoPandas DataFrames which are attribute and spatial
    joins. In this section, we will explore both of them.
  prefs: []
  type: TYPE_NORMAL
- en: 6.1.Attribute Joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Attribute joins allow you to join two GeoPandas DataFrames using non-geometry
    variables which makes it similar to the regular join operations in Pandas. The
    joining operation is done using the pandas.merge() method as shown in the example
    below. In this example, we will join the [**Barcelona population data**](https://opendata-ajuntament.barcelona.cat/data/es/dataset/est-padro-sexe/resource/cd3125e4-f7d3-4217-8f9d-6d7abdad6ab0)
    to our geospatial data to add more information to it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/3be56fdedc3a281dcc0ec5374743eff4.png)'
  prefs: []
  type: TYPE_IMG
- en: 6.2\. Spatial Joins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On the other hand spatial joins merge dataframes based on spatial relationships.
    In the example below we will identify the districts that have [**bicycle lanes**](https://opendata-ajuntament.barcelona.cat/data/en/dataset/carril-bici/resource/4608cf0c-2f11-4a25-891f-c5afc3af82c5)**.**
    We will first load the data as shown in the code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/706a8dba115cbce5d1eaccb75e93aeda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To spatially join two dataframes we can use the sjoin() function. The sjoin()
    function takes four main arguments: the first one is the GeoDataFrame, the second
    argument is the GeoDataFrame that we will add to the first GeoDataFrame, the third
    argument is the type of join and the final argument is the **predicate** which
    defines the spatial relation we want to use to match the two GeoDataFrames. The
    most common partial relationships are **intersects**, **contains**, and **within**.
    In this example, we will the **intersects** parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Leveraging Geospatial Data in Python with GeoPandas](../Images/db3714a05546bb3c038c019083c7fd79.png)'
  prefs: []
  type: TYPE_IMG
- en: In this article, I introduced you to Geospatial data analysis using the open-source
    GeoPandas library. We started with downloading the GeoPandas package, and then
    we discussed different types of Geospatial data and how to load them. Finally,
    we will explore basic operations to get your hands on the geospatial dataset.
    Although there is still to explore with the geospatial data analysis, this blog
    acts as a starting point in your learning journey.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Youssef Rafaat](https://www.linkedin.com/in/youssef-hosni-b2960b135)** is
    a computer vision researcher & data scientist. His research focuses on developing
    real-time computer vision algorithms for healthcare applications. He also worked
    as a data scientist for more than 3 years in the marketing, finance, and healthcare
    domain.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Python Packages For Geospatial Data Analysis](https://www.kdnuggets.com/2023/08/5-python-packages-geospatial-data-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Geospatial Application in Python with Google Earth…](https://www.kdnuggets.com/2022/03/building-geospatial-application-python-google-earth-engine-greppo.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Geospatial Data Analysis with Geemap](https://www.kdnuggets.com/geospatial-data-analysis-with-geemap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Leveraging the Power of GPUs with CuPy in Python](https://www.kdnuggets.com/leveraging-the-power-of-gpus-with-cupy-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[SQL For Data Science: Understanding and Leveraging Joins](https://www.kdnuggets.com/2023/08/sql-data-science-understanding-leveraging-joins.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[In-Database Analytics: Leveraging SQL''s Analytic Functions](https://www.kdnuggets.com/2023/07/indatabase-analytics-leveraging-sql-analytic-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
