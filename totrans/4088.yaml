- en: 'Python Function Arguments: A Definitive Guide'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 函数参数：终极指南
- en: 原文：[https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)
- en: '![Python Function Arguments: A Definitive Guide](../Images/d9c4eae2eb65b627d7d7af25bef3cf00.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python 函数参数：终极指南](../Images/d9c4eae2eb65b627d7d7af25bef3cf00.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Like all programming languages, Python lets you define functions. After you’ve
    defined a function, you can call it wherever you need in the script, and also
    import a function from a specific module inside another module. Functions make
    your code *modular* and *reusable*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 像所有编程语言一样，Python 允许你定义函数。定义函数后，你可以在脚本中随处调用它，还可以从一个模块中导入函数到另一个模块。函数使你的代码变得*模块化*和*可重用*。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In Python, you can define functions to take in different types of arguments.
    And this guide will teach you all about function arguments in Python. Let's begin.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以定义函数以接受不同类型的参数。本指南将教你所有关于 Python 函数参数的知识。让我们开始吧。
- en: A Quick Review of Python Functions
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 函数的快速回顾
- en: To define a  Python function, you can use the `def` keyword followed by the
    name of the function in parentheses. If you’d like the function to take in *arguments*,
    then the names of the arguments should be specified as *parameters* inside parentheses.
    After defining a function, you can call it with values for the parameters, called
    arguments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个 Python 函数，你可以使用`def`关键字后跟函数名称和括号。如果你希望函数接受*参数*，则应该在括号内指定参数名称。定义函数后，你可以用参数值（称为参数）调用它。
- en: 'For example, consider the definition of the `add()` function: `num1` and `num2`
    are the parameters and the values used for these parameters in the function call
    are the arguments.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑`add()`函数的定义：`num1`和`num2`是参数，函数调用中用于这些参数的值是参数。
- en: '![Python Function Arguments: A Definitive Guide](../Images/9439ddfa1c8901bec106c19a2adcc0e9.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Python 函数参数：终极指南](../Images/9439ddfa1c8901bec106c19a2adcc0e9.png)'
- en: Parameters vs. Arguments | Image by Author
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 参数与参数 | 图片由作者提供
- en: Positional Arguments
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置参数
- en: Consider the following function `meet()`. It takes in three strings and prints
    out the info of the person.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下函数`meet()`。它接受三个字符串并打印出该人的信息。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can call the function with arguments, as shown below:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按如下方式用参数调用函数：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In calling the function like this, the arguments are passed in as positional
    arguments. Positional arguments get mapped to the function parameters in the *same*
    order in which they appear in the function call.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方式调用函数时，参数作为位置参数传递。位置参数会按照它们在函数调用中出现的*相同*顺序映射到函数参数。
- en: Therefore, the first, second, and third arguments in the function call are used
    as the values of `name`, `job_title`, and `city`, respectively.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，函数调用中的第一个、第二个和第三个参数分别用作`name`、`job_title`和`city`的值。
- en: Here’s an example.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子。
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this case, the output, 'Meet Artist, a John from Austin.', does not make
    sense. Here is where *keyword arguments* can help.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，输出“Meet Artist, a John from Austin.”是不合理的。这时，*关键字参数*可以发挥作用。
- en: Keyword Arguments
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关键字参数
- en: When using keyword arguments in the function call, you should specify the *name*
    of the parameter and the *value* it takes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 使用关键字参数调用函数时，你应该指定参数的*名称*和它接受的*值*。
- en: You can specify the keyword arguments in any order so long as the names of the
    parameters are correct. Let’s call the same function `meet()`, but this time with
    keyword arguments.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照任何顺序指定关键字参数，只要参数的名称正确。我们可以调用相同的函数 `meet()`，但这次使用关键字参数。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: What if you’d like to use a mix of positional and keyword arguments? This will
    make your code less readable and is not recommended. But if you’re using both
    positional and keyword arguments in the function call, the positional arguments
    should *always* precede the keyword arguments. Otherwise, you’ll run into errors.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想同时使用位置参数和关键字参数怎么办？这会使你的代码不够清晰，不推荐这样做。但如果你在函数调用中使用位置参数和关键字参数，位置参数应 *始终* 置于关键字参数之前。否则，你会遇到错误。
- en: Calling Functions with a Variable Number of Arguments
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用具有可变参数数量的函数
- en: So far, we knew the number of arguments beforehand and defined the function
    accordingly. However, it may not always be the case. What if you'd like your function
    to take on a variable number of arguments each time it is called?
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们知道参数的数量，并相应地定义了函数。然而，这种情况并非总是如此。如果你希望你的函数每次被调用时都能接受可变数量的参数，该怎么办呢？
- en: '![Python Function Arguments: A Definitive Guide](../Images/55eacdf8e0e782dbac43496538b6dbd1.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Python 函数参数：终极指南](../Images/55eacdf8e0e782dbac43496538b6dbd1.png)'
- en: Image by Author
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: 'When working with Python code bases, you’ll have likely come across function
    definitions of the following form:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 Python 代码库时，你可能会遇到如下形式的函数定义：
- en: '[PRE7]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using `*args` and `**kwargs` in the function definition, you can make the function
    take in a variable number of positional and keyword arguments, respectively. They
    work as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `*args` 和 `**kwargs` 在函数定义中，你可以让函数分别接受可变数量的位置参数和关键字参数。它们的工作方式如下：
- en: '`args` collects a variable number of positional arguments as a tuple, which
    can then be unpacked using the * unpacking operator.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args` 将可变数量的位置参数收集为一个元组，然后可以使用 * 解包运算符进行解包。'
- en: '`kwargs` collects all the keyword arguments in the function call as a dictionary.
    These keyword arguments can then be unpacked using the ** operator.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`kwargs` 将函数调用中的所有关键字参数收集为一个字典。这些关键字参数可以通过 ** 运算符解包。'
- en: '**Note:** Using `*args` and `**kwargs` is not a strict requirement. You can
    use any name of your choice.'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 使用 `*args` 和 `**kwargs` 并不是严格要求。你可以使用任何你选择的名称。'
- en: Let's take examples to understand this better.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过示例更好地理解这一点。
- en: Variable Number of Positional Arguments
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变数量的位置参数
- en: The function `reverse_strings` takes in a variable number of strings and returns
    a list of reversed strings.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 函数 `reverse_strings` 接受可变数量的字符串并返回一个反转字符串的列表。
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can now call the function with one or more arguments as needed. Here are
    a few examples:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以根据需要调用函数，传递一个或多个参数。以下是一些示例：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Variable Number of Keyword Arguments
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变数量的关键字参数
- en: 'The following function `running_sum()` takes in a variable number of keyword
    arguments:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数 `running_sum()` 接受可变数量的关键字参数：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: As `nums` is a Python dictionary, you can call the `items()` method on the dict
    object to get a list of tuples. Each tuple is a key-value pair.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `nums` 是一个 Python 字典，你可以对字典对象调用 `items()` 方法以获取一个元组列表。每个元组都是一个键值对。
- en: 'Here are a couple of examples:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个例子：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '**Note:** When using `*args` and `**kwargs`, the positional and keyword arguments
    are not required. Therefore, this is one way you can make your function arguments
    *optional*.'
  id: totrans-63
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 当使用 `*args` 和 `**kwargs` 时，位置参数和关键字参数不是必需的。因此，这是一种使你的函数参数 *可选* 的方法。'
- en: Using Default Values for Arguments
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用参数的默认值
- en: When defining Python functions, you can provide default values for one or more
    parameters. If you provide a default value for a specific parameter, you don’t
    have to use the argument in the function call.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义 Python 函数时，你可以为一个或多个参数提供默认值。如果你为某个特定参数提供了默认值，你就不必在函数调用中使用该参数。
- en: If the argument corresponding to the parameter is provided in the function call,
    that value is used.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在函数调用中提供了与参数对应的值，该值会被使用。
- en: Else, the default value is used.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，将使用默认值。
- en: In the following example, the function `greet()` has a parameter, `name`, set
    to a default value of "there".
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，函数 `greet()` 具有一个参数 `name`，其默认值设置为 "there"。
- en: '[PRE18]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: So when you call `greet()` with a specific string as the argument, its value
    is used.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当你用特定字符串作为参数调用 `greet()` 时，它的值会被使用。
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: When you don’t pass in the name string, the default argument "there" is used.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你没有传递名称字符串时，将使用默认参数 "there"。
- en: '[PRE21]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Mutable Default Arguments - The Curious Case
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可变默认参数 - 奇特案例
- en: When using default arguments, you should be careful to not set the default value
    to a mutable object. But why? Let's take an example to understand.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认参数时，你应该小心不要将默认值设置为可变对象。那为什么呢？让我们通过一个例子来理解。
- en: '![Python Function Arguments: A Definitive Guide](../Images/7f0a4e840c1868954a962604a59fd92d.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![Python 函数参数：终极指南](../Images/7f0a4e840c1868954a962604a59fd92d.png)'
- en: Image by Author | Created on [imgflip](https://imgflip.com/)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 | 创建于 [imgflip](https://imgflip.com/)
- en: The following function `append_to_list()` takes in an element and a list as
    the arguments. It appends the element to the end of the list and returns the resultant
    list.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数`append_to_list()`接受一个元素和一个列表作为参数。它将元素追加到列表的末尾，并返回结果列表。
- en: '[PRE23]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You’d expect the following behavior:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你会期待以下行为：
- en: When the function is called with *both* the element and the list, it returns
    the list containing the element appended to the end of the original list.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当函数同时用元素和列表调用时，它会返回包含追加元素到原始列表末尾的列表。
- en: When you call the function with *only* the elements the argument, then it returns
    a list containing only that element.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你*仅*用元素作为参数调用函数时，它会返回一个仅包含该元素的列表。
- en: But let’s see what happens.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们看看会发生什么。
- en: Open up your terminal, run `python -i` to start a Python REPL. I’ve defined
    the `append_to_list()` function in the `def_args.py` file.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 打开你的终端，运行`python -i`以启动 Python REPL。我已在`def_args.py`文件中定义了`append_to_list()`函数。
- en: '[PRE24]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When you call the function with the number 4 and the list [1,2,3] as the arguments,
    we get [1,2,3,4], which is expected.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当你用数字 4 和列表 [1,2,3] 作为参数调用函数时，我们得到 [1,2,3,4]，这是预期的结果。
- en: '[PRE25]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, let us make a series of function calls with only the element to be appended
    to the list:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们进行一系列函数调用，仅将元素追加到列表中：
- en: '[PRE26]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Wait, this isn’t what we expected. The first time the function is called with
    7 as the argument (without the list), we get [7]. However, in the next calls,
    we see that the elements are appended to *this* list.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，这不是我们预期的结果。第一次函数用 7 作为参数（没有列表）被调用时，我们得到 [7]。然而，在随后的调用中，我们看到元素被追加到*这个*列表中。
- en: This is because default arguments are bound to the function definition only
    once—at the time of defining the function. The list is first modified during the
    function call `append_to_list(7)`. The list is not empty anymore. And all subsequent
    calls to the function—without the list—will modify the original list.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为默认参数只在函数定义时绑定一次。列表在函数调用`append_to_list(7)`期间首次被修改。列表不再为空。所有后续对函数的调用—即使没有列表—也会修改原始列表。
- en: Therefore, you should avoid using mutable default arguments. A possible workaround
    is to set the default value to `None`, and initialize an empty list whenever the
    function call does not contain the list.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你应该避免使用可变的默认参数。一个可能的解决方法是将默认值设置为`None`，并在函数调用没有包含列表时初始化一个空列表。
- en: Conclusion
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Here’s a summary of what you’ve learned in this tutorial. You’ve learned how
    to call Python functions with positional and keyword arguments, and how to use
    `*args` and `**kwargs` to pass in a variable number of positional and keyword
    arguments, respectively. You then learned how to set default values for certain
    parameters and the curious case of mutable default arguments. I hope you found
    this tutorial helpful. Keep coding!
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在本教程中学到的总结。你学会了如何使用位置参数和关键字参数调用Python函数，以及如何使用`*args`和`**kwargs`分别传递可变数量的位置参数和关键字参数。接着，你学习了如何为某些参数设置默认值，以及可变默认参数的奇特情况。希望你觉得这个教程对你有帮助。继续编码！
- en: '**[Bala Priya C](https://twitter.com/balawc27)** is a technical writer who
    enjoys creating long-form content. Her areas of interest include math, programming,
    and data science. She shares her learning with the developer community by authoring
    tutorials, how-to guides, and more.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Bala Priya C](https://twitter.com/balawc27)**是一位技术写作人员，喜欢创作长篇内容。她的兴趣领域包括数学、编程和数据科学。她通过撰写教程、操作指南等与开发者社区分享她的学习经验。'
- en: More On This Topic
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[The Definitive Guide To Switching Your Career Into Data Science](https://www.kdnuggets.com/2022/05/definitive-guide-switching-career-data-science.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将你的职业转向数据科学的终极指南](https://www.kdnuggets.com/2022/05/definitive-guide-switching-career-data-science.html)'
- en: '[The Definitive Guide to Solving the Phantom Read in MySQL](https://www.kdnuggets.com/2022/06/definitive-guide-solving-phantom-read-mysql.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解决 MySQL 中幻读的终极指南](https://www.kdnuggets.com/2022/06/definitive-guide-solving-phantom-read-mysql.html)'
- en: '[A Beginner''s Guide to Pandas Melt Function](https://www.kdnuggets.com/2023/03/beginner-guide-pandas-melt-function.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初学者指南：Pandas Melt 函数](https://www.kdnuggets.com/2023/03/beginner-guide-pandas-melt-function.html)'
- en: '[5 Concepts You Should Know About Gradient Descent and Cost Function](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该了解的关于梯度下降和成本函数的 5 个概念](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
- en: '[What is a Function?](https://www.kdnuggets.com/2022/11/function.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么是函数？](https://www.kdnuggets.com/2022/11/function.html)'
- en: '[3 More SQL Aggregate Function Interview Questions for Data Science](https://www.kdnuggets.com/2023/01/3-sql-aggregate-function-interview-questions-data-science.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 个 SQL 聚合函数面试问题，适用于数据科学](https://www.kdnuggets.com/2023/01/3-sql-aggregate-function-interview-questions-data-science.html)'
