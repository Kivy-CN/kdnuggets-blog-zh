- en: Automated Machine Learning in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/01/automated-machine-learning-python.html](https://www.kdnuggets.com/2019/01/automated-machine-learning-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '![](../Images/a06801a2d61f74023099372964a67cc4.png)'
  prefs: []
  type: TYPE_IMG
- en: As we already know, machine learning is a way of automating complex problem-solving.
    But can machine learning itself be automated? That’s what we’ll explore in this
    article. By its end, we’ll have answered that question and shown practical ways
    it can be accomplished.
  prefs: []
  type: TYPE_NORMAL
- en: Automated Machine Learning (AutoML)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When applying machine learning models, we’d usually do [data pre-processing](https://heartbeat.fritz.ai/data-preprocessing-and-visualization-implications-for-your-machine-learning-model-8dfbaaa51423), [feature
    engineering](https://heartbeat.fritz.ai/introduction-to-automated-feature-engineering-using-deep-feature-synthesis-dfs-3feb69a7c00b),
    [feature extraction](https://en.wikipedia.org/wiki/Feature_extraction) and, [feature
    selection](https://en.wikipedia.org/wiki/Feature_selection). After this, we’d
    select the best algorithm and [tune our parameters](https://en.wikipedia.org/wiki/Hyperparameter_optimization) in
    order to obtain the best results. AutoML is a series of concepts and techniques
    used to automate these processes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Benefits of AutoML**'
  prefs: []
  type: TYPE_NORMAL
- en: Applying machine learning models to our problems usually requires computer science
    skills, domain expertise, and mathematical expertise. Getting an expert with all
    these skills is not always a walk in the park.
  prefs: []
  type: TYPE_NORMAL
- en: AutoML also reduces bias and errors that occur when a human being is designing
    the machine learning models. An organization can also reduce the cost of hiring
    many experts by applying AutoML in their data pipeline. AutoML also reduces the
    amount of time it would take to develop and test a machine learning model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Drawbacks of AutoML**'
  prefs: []
  type: TYPE_NORMAL
- en: AutoML is a fairly new concept in the machine learning world. It is, therefore,
    important to exercise caution while applying some of the current AutoML solutions.
    This is because some of these technologies are still under development.
  prefs: []
  type: TYPE_NORMAL
- en: Another major challenge is the time it takes to run the AutoML models. This
    will really depend on the computational power of the machine we’re running. As
    we shall see soon, some of the AutoML solutions run well on our local machines,
    but some require an accelerated solution such as [Google Colab](https://www.inc.com/jeff-haden/the-worlds-most-successful-people-dont-actually-start-work-at-4-am-they-wake-work-whenever-heck-they-decide.html).
  prefs: []
  type: TYPE_NORMAL
- en: AutoML Concepts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are two major concepts to grasp as far as AutoML is concerned: neural
    architecture search and transfer learning.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Neural Architecture Search**'
  prefs: []
  type: TYPE_NORMAL
- en: Neural architecture search is the process of automating the design of neural
    networks. Usually, [reinforcement learning](https://en.wikipedia.org/wiki/Reinforcement_learning) or [evolutionary
    algorithms ](https://en.wikipedia.org/wiki/Evolutionary_algorithm)are used in
    the design of these networks. In [reinforcement learning](https://en.wikipedia.org/wiki/Reinforcement_learning),
    models are punished for low accuracies and rewarded for high accuracies. Using
    this technique the model will always strive to obtain higher accuracies.
  prefs: []
  type: TYPE_NORMAL
- en: Several neural architecture search papers have been published such as [Learning
    Transferable Architectures for Scalable Image Recognition](https://arxiv.org/abs/1707.07012), [Efficient
    Neural Architecture Search (ENAS)](https://arxiv.org/pdf/1802.03268.pdf)**,** and [Regularized
    Evolution for Image Classifier Architecture Search](https://arxiv.org/abs/1802.01548) just
    to mention a few.
  prefs: []
  type: TYPE_NORMAL
- en: '**Transfer Learning**'
  prefs: []
  type: TYPE_NORMAL
- en: Transfer learning, as the name suggests, is a technique where one uses pre-trained
    models to transfer what its learned when applying the model to a new but similar
    dataset. This enables us to obtain high accuracies while using less computation
    time and power. Neural architecture search is good for problems that require the
    discovering of new architectures, while transfer learning works best for problems
    where the datasets are similar to the ones used in pre-training models.
  prefs: []
  type: TYPE_NORMAL
- en: '**AutoML solutions**'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now look at some of the available automated machine learning solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '***Auto-Keras***'
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the [official site](https://autokeras.com/):'
  prefs: []
  type: TYPE_NORMAL
- en: Auto-Keras is an open source software library for automated machine learning
    (AutoML). It is developed by [DATA Lab](http://faculty.cs.tamu.edu/xiahu/index.html) at
    Texas A&M University and community contributors. The ultimate goal of AutoML is
    to provide easily accessible deep learning tools to domain experts with limited
    data science or machine learning background. Auto-Keras provides functions to
    automatically search for architecture and hyperparameters of deep learning models.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'It can be installed using a simple pip command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Auto-Keras is still undergoing final testing before its final release. The official
    site warns that they will not be held liable for any loss incurred as a result
    of using the libraries on the site. This package is based on the [Keras](https://heartbeat.fritz.ai/introduction-to-deep-learning-with-keras-c7c3d14e1527) deep
    learning package.
  prefs: []
  type: TYPE_NORMAL
- en: '***Auto-Sklearn***'
  prefs: []
  type: TYPE_NORMAL
- en: '[Auto-Sklearn ](https://automl.github.io/auto-sklearn/stable/)is an automated
    machine learning package based on S[cikit-learn](https://scikit-learn.org/). It’s
    a replacement for the Scikit-learn estimator. Its installation is also via a simple
    pip command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In Ubuntu, a C++11 building environment and SWIG are required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Installation via Anaconda is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: It isn’t possible to run Auto-Sklearn on Windows. However, one can try some
    hacks such as a docker image or running via a virtual machine.
  prefs: []
  type: TYPE_NORMAL
- en: '***The Tree-Based Pipeline Optimization Tool (TPOT)***'
  prefs: []
  type: TYPE_NORMAL
- en: 'According to its official [site](https://automl.info/tpot/):'
  prefs: []
  type: TYPE_NORMAL
- en: The goal of TPOT is to automate the building of ML pipelines by combining a
    flexible [expression tree](https://en.wikipedia.org/wiki/Binary_expression_tree) representation
    of pipelines with stochastic search algorithms such as [genetic programming](https://en.wikipedia.org/wiki/Genetic_programming).
    TPOT makes use of the Python-based [scikit-learn](http://scikit-learn.org/) library
    as its ML menu.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This software is open source and is available on [GitHub](https://github.com/EpistasisLab/tpot).
  prefs: []
  type: TYPE_NORMAL
- en: '***Google’s AutoML***'
  prefs: []
  type: TYPE_NORMAL
- en: 'Its official site states that:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud AutoML is a suite of machine learning products that enables developers
    with limited machine learning expertise to train high-quality models specific
    to their business needs, by leveraging Google’s state-of-the-art transfer learning,
    and Neural Architecture Search technology.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Google’s AutoML solution is not open source. Its pricing can be viewed [here](https://cloud.google.com/pricing/).
  prefs: []
  type: TYPE_NORMAL
- en: '***H20***'
  prefs: []
  type: TYPE_NORMAL
- en: '[H2O](https://www.h2o.ai/products/h2o/) is an open source distributed in-memory
    machine learning platform. It is available in both R and Python. This package
    provides support for statistical & machine learning algorithms.'
  prefs: []
  type: TYPE_NORMAL
- en: Applying AutoML to Real-World Problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now let’s see how we’d use Auto-Keras and Auto-Sklearn to solve a real problem.
  prefs: []
  type: TYPE_NORMAL
- en: '**Auto-Keras Implementation**'
  prefs: []
  type: TYPE_NORMAL
- en: I would highly recommend running the following example on [Google Colab](https://colab.research.google.com/)unless
    we’re using a machine with high computational power. It’s also important to ensure
    that we’re using the GPU runtime on our Google Colab. The first step here is to
    install Auto-Keras on our Colab runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/da06b51df5fff22d7fa251bb92167fc2.png)'
  prefs: []
  type: TYPE_IMG
- en: We’re going to run image classification on the MNIST dataset. The first step
    is to import that dataset and the image classifier. The dataset is imported from
    Keras, whereas the image classifier is imported from Auto-Keras. Since we are
    building a model that will recognize handwritten digits based on pre-trained models,
    we classify this as a supervised learning problem. We then test the accuracy of
    the model on images of digits that it hasn’t encountered.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the images and labels have already been formatted to numpy
    arrays, which is required in machine learning. The next step is to separate the
    data we just loaded into a training set and test set as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: Once the data has been separated into a training set and a test set, the next
    step is to fit the image classifier.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying `Verbose` as True means that the search process will be printed on
    the screen for us to see.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the fit method, `time_limit` refers to the time limit for the search in seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`final_fit` is the last training that occurs after the model has found the
    best architecture. Specifying `retrain` as true means that the weights of the
    model will be reinitialized.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Printing `y` will show us the accuracy after evaluating the model on the test
    set.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](../Images/2f3146b171f2586d4542ac79921d35b5.png)'
  prefs: []
  type: TYPE_IMG
- en: This is all we need to classify images using Auto-Keras. Very few lines of code,
    and Auto-Keras will do all the heavy lifting for us.
  prefs: []
  type: TYPE_NORMAL
- en: '**Auto-Sklearn Implementation**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Implementation on Auto-Sklearn is very similar to the Auto-Keras implementation
    above. We’ll run a similar classification using the digits dataset. First, we
    need to get a few imports out of the way:'
  prefs: []
  type: TYPE_NORMAL
- en: '`autosklearn.classification`that we’ll use to load the classifier later'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sklearn.model_selection`for model selection'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sklearn.datasets`for loading in the dataset'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`import sklearn.metrics` for measuring model performance'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As usual, we load in the dataset and split it into a training and test set.
    We then import the `AutoSklearnClassifier` from `autosklearn.classification`*.*
    Once this is done we fit the classifier to our dataset, make predictions and check
    the accuracy. That’s all you need to do.
  prefs: []
  type: TYPE_NORMAL
- en: What’s Next?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automated machine learning packages are still under active development. We expect
    to see more advancements in that arena in 2019\. One can keep tabs on the progress
    of these packages by following the official documentation sites. One can also
    contribute to these packages by making a pull request on GitHub. More information
    and examples about [Auto-Keras](https://autokeras.com/) and [Auto-Sklearn](https://automl.github.io/auto-sklearn/stable/)can
    be found on their official site.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discuss this post on **[**Hacker News**](https://news.ycombinator.com/item?id=18903668)** and **[**Reddit**](https://www.reddit.com/r/learnmachinelearning/comments/afww4m/automated_machine_learning_in_python/)**.**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Derrick Mwiti](https://derrickmwiti.com/)** is a data analyst, a writer,
    and a mentor. He is driven by delivering great results in every task, and is a
    mentor at Lapid Leaders Africa.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://heartbeat.fritz.ai/automated-machine-learning-in-python-5d7ddcf6bb9e).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Implementing Automated Machine Learning Systems with Open Source Tools](/2018/10/implementing-automated-machine-learning-open-source-path.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Deep Learning with Keras](/2018/10/introduction-deep-learning-keras.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Keras Hyperparameter Tuning in Google Colab Using Hyperas](/2018/12/keras-hyperparameter-tuning-google-colab-hyperas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Automated Machine Learning with Python: A Comparison of Different…](https://www.kdnuggets.com/2023/03/automated-machine-learning-python-comparison-different-approaches.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Automated Machine Learning with Python: A Case Study](https://www.kdnuggets.com/2023/04/automated-machine-learning-python-case-study.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DIY Automated Machine Learning with Streamlit](https://www.kdnuggets.com/2021/11/diy-automated-machine-learning-app.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Harnessing ChatGPT for Automated Data Cleaning and Preprocessing](https://www.kdnuggets.com/2023/08/harnessing-chatgpt-automated-data-cleaning-preprocessing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI-Automated Cybersecurity: What to Automate?](https://www.kdnuggets.com/ai-automated-cybersecurity-what-to-automate)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
