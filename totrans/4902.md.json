["```py\nimport pysentiment as ps\n\nlm = ps.LM()\ndf_news['SUMMARY_SCORES'] = df_news.SUMMARY.map(lambda x: lm.get_score(lm.tokenize(str(x))))\ndf_news['POLARITY'] = df_news['SUMMARY_SCORES'].map(lambda x: x['Polarity'])\n\n```", "```py\ndef cnn_model_fn(features, labels, mode):  \n\n\"\"\"Model function for CNN.\"\"\"  \n\n# Input Layer  \n\n  input_layer = tf.reshape(tf.cast(features[\"x\"], tf.float32), [-1, 154, 100, 2])\n\n  # Convolutional Layer #1\n\n  conv1 = tf.layers.conv2d(\n\n      inputs=input_layer,\n\n      filters=32,\n\n      kernel_size=[1, 5],\n\n      padding=\"same\",\n\n      activation=tf.nn.relu)\n\n  # Pooling Layer #1\n\n  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[1, 2], strides=[1,2])\n\n  # Convolutional Layer #2\n\n  conv2 = tf.layers.conv2d(\n\n      inputs=pool1,\n\n      filters=8,\n\n      kernel_size=[1, 5],\n\n      padding=\"same\",\n\n      activation=tf.nn.relu)\n\n  # Pooling Layer #2\n\n  pool2 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[1, 5], strides=[1,5])\n\n  # Convolutional Layer #3\n\n  conv3 = tf.layers.conv2d(\n\n          inputs=pool2,\n\n          filters=2,\n\n          kernel_size=[154, 5],\n\n          padding=\"same\",\n\n          activation=tf.nn.relu)\n\n  # Pooling Layer #3\n\n  pool3 = tf.layers.max_pooling2d(inputs=conv3, pool_size=[1, 2], strides=[1, 2])\n\n  # Dense Layer\n\n  pool3_flat = tf.reshape(pool3, [-1, 154 * 5 * 2])\n\n  dense = tf.layers.dense(inputs=pool3_flat, units=512, activation=tf.nn.relu)\n\n  dropout = tf.layers.dropout(\n\n      inputs=dense, rate=0.4, training=mode == tf.estimator.ModeKeys.TRAIN)\n\n  # Logits Layer\n\n  logits = tf.layers.dense(inputs=dropout, units=154)\n\n  predictions = {\n\n      # Generate predictions (for PREDICT and EVAL mode)\n\n      \"classes\": tf.argmax(input=logits, axis=1),\n\n      \"probabilities\": tf.nn.softmax(logits, name=\"softmax_tensor\")\n\n  }\n\n  if mode == tf.estimator.ModeKeys.PREDICT:\n\n    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)\n\n  # Calculate Loss (for both TRAIN and EVAL modes)\n\n  multiclass_labels = tf.reshape(tf.cast(labels, tf.int32), [-1, 154])\n\n  loss = tf.losses.sigmoid_cross_entropy(\n\n      multi_class_labels=multiclass_labels, logits=logits)\n\n  # Configure the Training Op (for TRAIN mode)\n\n  if mode == tf.estimator.ModeKeys.TRAIN:\n\n    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)\n\n    train_op = optimizer.minimize(\n\n        loss=loss,\n\n        global_step=tf.train.get_global_step())\n\n    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)\n```"]