["```py\n$pip install shapash\n\n```", "```py\nimport pandas as pd\nfrom shapash.data.data_loader import data_loading\n\nhouse_df, house_dict = data_loading('house_prices')\ny_df=house_df['SalePrice'].to_frame()\nX_df=house_df[house_df.columns.difference(['SalePrice'])]\nhouse_df.head(3)\n\n```", "```py\nfrom category_encoders import OrdinalEncoder\n\ncategorical_features = [col for col in X_df.columns if X_df[col].dtype == 'object']\nencoder = OrdinalEncoder(cols=categorical_features).fit(X_df)\nX_df=encoder.transform(X_df)\n\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\nXtrain, Xtest, ytrain, ytest = train_test_split(X_df, y_df, train_size=0.75)\nreg = RandomForestRegressor(n_estimators=200, min_samples_leaf=2).fit(Xtrain,ytrain)\n\n```", "```py\ny_pred = pd.DataFrame(reg.predict(Xtest), columns=['pred'], index=Xtest.index)\n\n```", "```py\nfrom shapash.explainer.smart_explainer import SmartExplainer\n\n```", "```py\nxpl = SmartExplainer(features_dict=house_dict) # Optional parameter \n\n```", "```py\nxpl.compile(\n    x=Xtest,\n    model=regressor,\n    preprocessing=encoder,# Optional: use inverse_transform method\n    y_pred=y_pred # Optional\n)\n\n```", "```py\napp = xpl.run_app()\n\n```", "```py\napp.kill()\n\n```", "```py\nsubset = [ 168, 54, 995, 799, 310, 322, 1374,\n          1106, 232, 645, 1170, 1229, 703, 66,  \n          886, 160, 191, 1183, 1037, 991, 482,  \n          725, 410, 59, 28, 719, 337, 36 ]\nxpl.plot.features_importance(selection=subset)\n\n```", "```py\nxpl.plot.contribution_plot(\"OverallQual\")\n\n```", "```py\nxpl.filter(max_contrib=8,threshold=100)\nxpl.plot.local_plot(index=560)\n\n```", "```py\nxpl.filter(max_contrib=3,threshold=1000)\nsummary_df = xpl.to_pandas()\nsummary_df.head()\n\n```", "```py\nxpl.plot.compare_plot(row_num=[0, 1, 2, 3, 4], max_features=8)\n\n```"]