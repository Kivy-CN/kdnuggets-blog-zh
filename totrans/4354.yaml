- en: Implementing the AdaBoost Algorithm From Scratch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/12/implementing-adaboost-algorithm-from-scratch.html](https://www.kdnuggets.com/2020/12/implementing-adaboost-algorithm-from-scratch.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [James Ajeeth J](https://www.linkedin.com/in/jamesajeeth/), Praxis Business
    School**'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this article, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Understand the working and math behind Adaptive Boosting (AdaBoost) Algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Able to write the AdaBoost python code from scratch.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction to Boosting:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Boosting is an ensemble technique that attempts to create strong classifiers
    from a number of weak classifiers. Unlike many machine learning models which focus
    on high quality prediction done using single model, boosting algorithms seek to
    improve the prediction power by training a sequence of weak models, each compensating
    the weaknesses of its predecessors. Boosting grants power to machine learning
    models to improve their accuracy of prediction.
  prefs: []
  type: TYPE_NORMAL
- en: '**AdaBoost:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AdaBoost, short for Adaptive [Boosting](https://en.wikipedia.org/wiki/Boosting_(meta-algorithm)),
    is a [machine learning](https://en.wikipedia.org/wiki/Machine_learning) [algorithm](https://en.wikipedia.org/wiki/Meta-algorithm) formulated
    by Yoav Freund and [Robert Schapire](https://en.wikipedia.org/wiki/Robert_Schapire).
    AdaBoost technique follows a decision tree model with a depth equal to one. AdaBoost
    is nothing but the forest of stumps rather than trees. AdaBoost works by putting
    more weight on difficult to classify instances and less on those already handled
    well. AdaBoost algorithm is developed to solve both classification and regression
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Idea behind AdaBoost:'
  prefs: []
  type: TYPE_NORMAL
- en: Stumps (one node and two leaves) are not great in making accurate classification
    so it is nothing but a week classifier/ weak learner. Combination of many weak
    classifier makes a strong classifier and this is the principle behind the AdaBoost
    algorithm.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some stumps get more performance or classify better than others.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consecutive stump is made by taking the previous stumps mistakes into account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AdaBoost Algorithm from scratch:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here I have used Iris dataset as an example in building the algorithm from scratch
    and also considered only two classes (Versicolor and Virginica) for better understanding.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/684d4d2f6b75e9cc52851b944bbcc8bb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 1: Assign Equal Weights to all the observations**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Initially assign same weights to each record in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample weight = 1/N**'
  prefs: []
  type: TYPE_NORMAL
- en: Where N = Number of records
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/523c83e9b569eaab7c22e1ac785e6e5f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 2: Classify random samples using stumps**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Draw random samples with replacement from original data with the probabilities
    equal to the sample weights and fit the model. Here **the model (base learners)
    used in AdaBoost is decision tree.** Decision trees are created with one depth
    which has one node and two leaves also referred to as stumps. Fit the model to
    the random samples and predict the classes for the original data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/75827366c2da5626c461e8a3b4899753.png)![Image](../Images/b7dfa69c1c768a0195e9d0676398754a.png)![Image](../Images/909572be292032a4501fb9286cf58f17.png)'
  prefs: []
  type: TYPE_IMG
- en: ‘pred1’ is the newly predicted class.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3: Calculate Total Error**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Total error is nothing but the sum of weights of misclassified record.
  prefs: []
  type: TYPE_NORMAL
- en: '**Total Error** = **Weights of misclassified records**'
  prefs: []
  type: TYPE_NORMAL
- en: Total error will be always between 0 and 1.
  prefs: []
  type: TYPE_NORMAL
- en: 0 represents perfect stump (correct classification)
  prefs: []
  type: TYPE_NORMAL
- en: 1 represents weak stump (misclassification)
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/f9fce9002733b6143b12c503b3b4449d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 4: Calculate Performance of the Stump**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using the Total Error, determine the performance of the base learner. The calculated
    performance of stump(α) value is used to update the weights in consecutive iteration
    and also used for final prediction calculation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Performance of the stump(**α**)** **= ½ ln (1 – Total error/Total error)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/71e36ca2c4146de740943dd37d0dea5c.png)![Image](../Images/820b41fa912784fd293e372d08a276e0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cases:'
  prefs: []
  type: TYPE_NORMAL
- en: If the total error is 0.5, then the performance of the stump will be zero.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the total error is 0 or 1, then the performance will become infinity or -infinity
    respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the total errors are equal to 1 or 0, the above equation will behave in
    a weird manner. So, in practice a small error term is added to prevent this from
    happening.
  prefs: []
  type: TYPE_NORMAL
- en: When the performance(α) is relatively large, the stump did a good job in classifying
    the records. When the performance(α) is relatively low, the stump did not do a
    good job in classifying the records. **Using the performance parameter(α), we
    can increase the weights of the wrongly classified records and decrease the weights
    of the correctly classified records.**
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 5: Update Weights**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Based on the performance of the stump(α) update the weights. We need the next
    stump to correctly classify the misclassified record by increasing the corresponding
    sample weight and decreasing the sample weights of the correctly classified records.
  prefs: []
  type: TYPE_NORMAL
- en: '**New weight = Weight * e^((performance))** **→** **misclassified records**'
  prefs: []
  type: TYPE_NORMAL
- en: '**New weight = Weight * e^(-(performance))** **→** **correctly classified records**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/26e66e6fc54b7e933e7bcad7f23eb31e.png)'
  prefs: []
  type: TYPE_IMG
- en: If the ‘Label’ and ‘pred1’ are same (i.e. 1 or -1) then substituting the values
    in the above equation will give the equation corresponding to correctly classified
    record. Similarly, if the values are different then substituting the values in
    the above equation will give the equation corresponding to misclassified record.
  prefs: []
  type: TYPE_NORMAL
- en: Short note on e^(performance) i.e. for misclassification
  prefs: []
  type: TYPE_NORMAL
- en: When the performance is relatively large the last stump did a good job in classifying
    the records now the new sample weight will be much larger than the old one. When
    the performance is relatively low the last stump did not do a good job in classifying
    the records now the new sample weight will only be little larger than the old
    one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/ed4a5934f9d10e91107f157793b6267b.png)'
  prefs: []
  type: TYPE_IMG
- en: Short note on e^-(performance) i.e. for no misclassification
  prefs: []
  type: TYPE_NORMAL
- en: When the performance is relatively large the last stump did a good job in classifying
    the records now the new sample weight will be very small than the old one. When
    the performance is relatively small the last stump did not do a good job in classifying
    the records now the new sample weight will only be little smaller than the old
    one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/531899bac550c7b6aa666076e92b70ee.png)'
  prefs: []
  type: TYPE_IMG
- en: Here the sum of the updated weights is not equal to 1\. whereas in case of initial
    sample weight the sum of total weights is equal to 1\. So, to achieve this we
    will be dividing it by a number which is nothing but the sum of the updated weights
    (normalizing constant).
  prefs: []
  type: TYPE_NORMAL
- en: '**Normalizing constant =** ∑ **New weight**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normalized weight = New weight / Normalizing constant**'
  prefs: []
  type: TYPE_NORMAL
- en: Now the sum of normalized weight is equal to 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/180a15354bbb57dbbe664b95b8e28bae.png)![Image](../Images/33557a613af3aae1bdd1b56638846780.png)'
  prefs: []
  type: TYPE_IMG
- en: ‘prob2’ is the newly updated weights.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 6: Update weights in iteration**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the normalized weight and make the second stump in the forest. Create a
    new dataset of same size of the original dataset with repetition based on the
    newly updated sample weight. So that the misclassified records get higher probability
    of getting selected. Repeat step 2 to 5 again by updating the weights for a particular
    number of iterations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/56cef35eaa73e308fdda007cbf2266a5.png)'
  prefs: []
  type: TYPE_IMG
- en: ‘prob4’ is the final weights of each observation.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 7: Final Predictions**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Final prediction is done by obtaining the sign of the weighted sum of final
    predicted value.
  prefs: []
  type: TYPE_NORMAL
- en: '**Final prediction/sign (weighted sum) = ∑ (α[i]* (predicted value at each
    iteration))**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: 5 weak classifiers may predict the values 1.0, 1.0, -1.0, 1.0,
    -1.0\. From a majority vote, it looks like the model will predict a value of 1.0
    or the first class. These same 5 weak classifiers may have the performance (α)
    values as 0.2, 0.5, 0.8, 0.2 and 0.9 respectively. Calculating the weighted sum
    of these predictions results in an output of -0.8, which would be an ensemble
    prediction of -1.0 or the second class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: t = 1.0*0.2 + 1.0*0.5 - 1.0*0.8 + 1.0*0.2 - 1.0*0.9 = -0.8
  prefs: []
  type: TYPE_NORMAL
- en: Taking the sign alone into consideration, the final prediction will be -1.0
    or the second class.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/c77356b05f968155144d230c1b761691.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Advantages of AdaBoost Algorithm:**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the many advantages of the AdaBoost Algorithm is it is fast, simple and
    easy to program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boosting has been shown to be robust to overfitting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has been extended to learning problems beyond binary classification (i.e.)
    it can be used with text or numeric data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawbacks:**'
  prefs: []
  type: TYPE_NORMAL
- en: AdaBoost can be sensitive to noisy data and outliers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weak classifiers being too weak can lead to low margins and overfitting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conclusion:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: AdaBoost helps in choosing the training set for each new classifier that is
    trained based on the results of the previous classifier. Also, while combining
    the results; it determines how much weight should be given to each classifier’s
    proposed answer. It combines the weak learners to create a strong one to correct
    classification errors which is also the first successful boosting algorithm for
    binary classification problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'GitHub Link for the code file and data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/jamesajeeth/Data-Science/tree/master/Adaboost%20from%20scratch](https://github.com/jamesajeeth/Data-Science/tree/master/Adaboost%20from%20scratch)'
  prefs: []
  type: TYPE_NORMAL
- en: '**References:**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Book:'
  prefs: []
  type: TYPE_NORMAL
- en: Hastie, Trevor, Tibshirani, Robert, Friedman, Jerome, *The Elements of Statistical
    Learning, Data Mining, Inference, and Prediction, Second Edition.*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sites:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Brief about Adaboost Algorithm](https://www.educba.com/adaboost-algorithm/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Statquest](https://statquest.org/adaboost-clearly-explained/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Wikipedia](https://en.wikipedia.org/wiki/AdaBoost)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio:** [**James Ajeeth J**](https://www.linkedin.com/in/jamesajeeth/) is
    a Postgraduate Student at Praxis Business School in Bangalore, India.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ensemble Methods for Machine Learning: AdaBoost](/2019/09/ensemble-methods-machine-learning-adaboost.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploring The Brute Force K-Nearest Neighbors Algorithm](/2020/10/exploring-brute-force-nearest-neighbors-algorithm.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Most Popular Distance Metrics Used in KNN and When to Use Them](/2020/11/most-popular-distance-metrics-knn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Implementing Adaboost in Scikit-learn](https://www.kdnuggets.com/2022/10/implementing-adaboost-scikitlearn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning from Scratch: Decision Trees](https://www.kdnuggets.com/2022/11/machine-learning-scratch-decision-trees.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Linear Regression from Scratch with NumPy](https://www.kdnuggets.com/linear-regression-from-scratch-with-numpy)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Build and Train a Transformer Model from Scratch with…](https://www.kdnuggets.com/how-to-build-and-train-a-transformer-model-from-scratch-with-hugging-face-transformers)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding by Implementing: Decision Tree](https://www.kdnuggets.com/2023/02/understanding-implementing-decision-tree.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ten Key Lessons of Implementing Recommendation Systems in Business](https://www.kdnuggets.com/2022/07/ten-key-lessons-implementing-recommendation-systems-business.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
