["```py\nimport pandas as pd\nimport datetime\nfrom os import listdir\nfrom os.path import isfile, join\nimport glob\nimport re\n\ndf = pd.read_csv(\"./data/pew-raw.csv\")\ndf\n```", "```py\nformatted_df = pd.melt(df,\n                       [\"religion\"],\n                       var_name=\"income\",\n                       value_name=\"freq\")\nformatted_df = formatted_df.sort_values(by=[\"religion\"])\nformatted_df.head(10)\n```", "```py\ndf = pd.read_csv(\"./data/billboard.csv\", encoding=\"mac_latin2\")\ndf.head(10)\n```", "```py\n# Melting\nid_vars = [\"year\",\n           \"artist.inverted\",\n           \"track\",\n           \"time\",\n           \"genre\",\n           \"date.entered\",\n           \"date.peaked\"]\n\ndf = pd.melt(frame=df,id_vars=id_vars, var_name=\"week\", value_name=\"rank\")\n\n# Formatting \ndf[\"week\"] = df['week'].str.extract('(\\d+)', expand=False).astype(int)\ndf[\"rank\"] = df[\"rank\"].astype(int)\n\n# Cleaning out unnecessary rows\ndf = df.dropna()\n\n# Create \"date\" columns\ndf['date'] = pd.to_datetime(df['date.entered']) + pd.to_timedelta(df['week'], unit='w') - pd.DateOffset(weeks=1)\n\ndf = df[[\"year\", \n         \"artist.inverted\",\n         \"track\",\n         \"time\",\n         \"genre\",\n         \"week\",\n         \"rank\",\n         \"date\"]]\ndf = df.sort_values(ascending=True, by=[\"year\",\"artist.inverted\",\"track\",\"week\",\"rank\"])\n\n# Assigning the tidy dataset to a variable for future usage\nbillboard = df\n\ndf.head(10)\n```", "```py\nsongs_cols = [\"year\", \"artist.inverted\", \"track\", \"time\", \"genre\"]\nsongs = billboard[songs_cols].drop_duplicates()\nsongs = songs.reset_index(drop=True)\nsongs[\"song_id\"] = songs.index\nsongs.head(10)\n```", "```py\nranks = pd.merge(billboard, songs, on=[\"year\",\"artist.inverted\", \"track\", \"time\", \"genre\"])\nranks = ranks[[\"song_id\", \"date\",\"rank\"]]\nranks.head(10)\n```", "```py\ndf = pd.read_csv(\"./data/tb-raw.csv\")\ndf\n```", "```py\ndf = pd.melt(df, id_vars=[\"country\",\"year\"], value_name=\"cases\", var_name=\"sex_and_age\")\n\n# Extract Sex, Age lower bound and Age upper bound group\ntmp_df = df[\"sex_and_age\"].str.extract(\"(\\D)(\\d+)(\\d{2})\")    \n\n# Name columns\ntmp_df.columns = [\"sex\", \"age_lower\", \"age_upper\"]\n\n# Create `age`column based on `age_lower` and `age_upper`\ntmp_df[\"age\"] = tmp_df[\"age_lower\"] + \"-\" + tmp_df[\"age_upper\"]\n\n# Merge \ndf = pd.concat([df, tmp_df], axis=1)\n\n# Drop unnecessary columns and rows\ndf = df.drop(['sex_and_age',\"age_lower\",\"age_upper\"], axis=1)\ndf = df.dropna()\ndf = df.sort(ascending=True,columns=[\"country\", \"year\", \"sex\", \"age\"])\ndf.head(10)\n```", "```py\ndf = pd.read_csv(\"./data/weather-raw.csv\")\ndf\n```", "```py\n# Extracting day\ndf[\"day\"] = df[\"day_raw\"].str.extract(\"d(\\d+)\", expand=False)  \ndf[\"id\"] = \"MX17004\"\n\n# To numeric values\ndf[[\"year\",\"month\",\"day\"]] = df[[\"year\",\"month\",\"day\"]].apply(lambda x: pd.to_numeric(x, errors='ignore'))\n\n# Creating a date from the different columns\ndef create_date_from_year_month_day(row):\n    return datetime.datetime(year=row[\"year\"], month=int(row[\"month\"]), day=row[\"day\"])\n\ndf[\"date\"] = df.apply(lambda row: create_date_from_year_month_day(row), axis=1)\ndf = df.drop(['year',\"month\",\"day\", \"day_raw\"], axis=1)\ndf = df.dropna()\n\n# Unmelting column \"element\"\ndf = df.pivot_table(index=[\"id\",\"date\"], columns=\"element\", values=\"value\")\ndf.reset_index(drop=False, inplace=True)\ndf\n```", "```py\ndef extract_year(string):\n    match = re.match(\".+(\\d{4})\", string) \n    if match != None: return match.group(1)\n\npath = './data'\nallFiles = glob.glob(path + \"/201*-baby-names-illinois.csv\")\nframe = pd.DataFrame()\ndf_list= []\nfor file_ in allFiles:\n    df = pd.read_csv(file_,index_col=None, header=0)\n    df.columns = map(str.lower, df.columns)\n    df[\"year\"] = extract_year(file_)\n    df_list.append(df)\n\ndf = pd.concat(df_list)\ndf.head(5)\n```"]