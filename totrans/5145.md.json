["```py\nSELECT Department,\n       AVG(Salary)\nFROM Employees\nWHERE Gender=\"F\"\nGROUP BY Department\nHAVING Department = \"Admin\";\n```", "```py\nAdmin | 17500.0\n```", "```py\nCASE expression\n\n   WHEN value_1 THEN result_1\n   WHEN value_2 THEN result_2\n   ...\n   WHEN value_n THEN result_n\n\n   ELSE result\n\nEND\n```", "```py\nSELECT student_name,\n       marks,\n       CASE\n           WHEN marks >= 85 THEN 'A'\n           WHEN marks >= 75\n                AND marks < 85 THEN 'B+'\n           WHEN marks >= 65\n                AND marks < 75 THEN 'B'\n           WHEN marks >= 55\n                AND marks < 65 THEN 'C'\n           WHEN marks >= 45\n                AND marks < 55 THEN 'D'\n           ELSE 'F'\n       END AS grading\nFROM Students;\n```", "```py\nDELETE\nFROM INSURANCE_CUSTOMERS\nWHERE AGE IN\n    (SELECT AGE\n     FROM INSURANCE_CUSTOMERS\n     WHERE AGE > 80 );\n```", "```py\nSELECT Student.Name\nFROM Student\nINNER JOIN Sports ON Student.ID = Sports.ID;\n```", "```py\nSELECT Student.Name\nFROM Student\nLEFT JOIN Sports ON Student.ID = Sports.ID;\n```", "```py\nSELECT Student.Name\nFROM Student\nRIGHT JOIN Sports ON Student.ID = Sports.ID;\n```", "```py\nSELECT Student.Name\nFROM Student\nFULL JOIN Sports ON Student.ID = Sports.ID;\n```", "```py\nCREATE PROCEDURE SelectStudents @Major nvarchar(30),\n                                       @Grade char(1) AS\nSELECT *\nFROM Students\nWHERE Major = @Major\n  AND Grade = @Grade GO;\n\nEXEC SelectStudents @Major = 'Data Science',\n                    @Grade = 'A';\n```", "```py\nSELECT CONCAT(Name, ' has a major of  ', Major)\nFROM Students\nWHERE student_Id = 37; \n```", "```py\nSELECT student_name,admission_date,\n     SUBSTR(admission_date, 4, 2) AS day\nFROM Students \n```", "```py\nSELECT age,\n   TRIM(trailing ' years' FROM age)\nFROM Students \n```", "```py\nSELECT INSERT(\"OldWebsite.com\", 1, 9, \"NewWebsite\"); \n```", "```py\nSELECT COALESCE (NULL, NULL, 10, 'Johnâ€™')\n```", "```py\nSELECT name,\n       AVG(salary) over (PARTITION BY department) \nFROM Employees; \n```", "```py\nSELECT \n\t bank_branch, month, income,\n\tLAG(income,1) OVER (\n\t\tPARTITION BY bank_branch\n\t\tORDER BY month\n\t) income_next_month\nFROM Bank; \n```", "```py\nSELECT\n\tproduct_name, price,\n\tRANK () OVER ( \n\t\tORDER BY list DESC\n\t) price_hightolow\nFROM Products; \n```"]