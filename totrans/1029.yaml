- en: Database Key Terms, Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2016/07/database-key-terms-explained.html](https://www.kdnuggets.com/2016/07/database-key-terms-explained.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Data has value. Actually, data **is** value. Data has proven to be the most
    important commodity in the digital economy. Data's *actual* value continues to
    grow, and the limits of its *prospective* value are pushed every day. Data is
    [the new everything](/2016/03/data-new-every-thing.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Data/information/knowledge pyramid](../Images/fcba6856f9d93514b15b4a585e1fb548.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Data needs to be curated, coddled, and cared for. It needs to be stored and
    processed, so that it may be transformed into information, and further refined
    into knowledge. The mechanism for storing data, subsequently facilitating these
    transformations, is, clearly, the database.
  prefs: []
  type: TYPE_NORMAL
- en: This post presents 16 key database concepts and their corresponding concise,
    straightforward definitions.
  prefs: []
  type: TYPE_NORMAL
- en: The selection of terms for this topic is especially difficult, so a whole host
    of reasons. Suffice it to say that these 16 concepts do not adequately represent
    all important terminology related to databases. I hope that they do, however,
    provide a jumping off point for those interested in learning more about databases,
    and their design and management.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Relational Database**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A relational database is one which employs the **relational model**, in which
    the raw data is organized into sets of tuples, and the tuples organized into relations.
    This relational model imposes structure on its contents, in contrast to unstructured
    or semi-structured data of the various NoSQL architectures.
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Database Management System (DBMS)**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A database management system is a software system which facilitates the organization
    of housed data into a particular database architecture, be it relational (Relational
    Database Management System, or RDBMS), document store, key-value store, column-oriented,
    graph, or other. Popular DBMSs include MongoDB, Cassandra, Redis, MySQL, Microsoft
    SQL Server, SQLite, and Oracle, among many, many, many others.
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Primary Key**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the relational model, a primary key is a single attribute, or combination
    of attributes, which can be used to uniquely identify a row of data in a givn
    table. Common primary keys include vendor ID, user ID, email address, or combination
    of attributes considered together such as first name, last name, and city of residence,
    all considered together as a single entity. It should be noted that what is an
    acceptable primary key in one situation may not uniquely identify data instances
    in another.
  prefs: []
  type: TYPE_NORMAL
- en: '**4\. Foreign Key**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Again in the relational model, a foreign key is an attribute or collection of
    attributes from one relational table whose values must match another relational
    table's primary key. A common use for such an organizational scheme would be to
    link a street address in one table to a city in another, and perhaps to a country
    in a third. This eliminates repetitive data input, and reduces the possibility
    of error, increasing data accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Primary/foreign key relationship](../Images/f4e080ee54996996d94f8d1af6fc0fcf.png)'
  prefs: []
  type: TYPE_IMG
- en: '**5\. Structured Query Language (SQL)**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL is a relational database query and manipulation language. Its power and
    flexibility allows for the creation of databases and tables, and the manipulation
    and query of data. More recently, the term has become conflated with relational
    databases, relational database management systems, and the relational model, at
    least as a term used in contrast to the term "NoSQL."
  prefs: []
  type: TYPE_NORMAL
- en: '**6\. NoSQL**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'NoSQL is an umbrella term, one which encompasses a number of different technologies.
    These different technologies aren''t even necessarily related in any way beyond
    the single defining characteristic of NoSQL: they are not relational in nature.
    This lack of relational **structure** results in unstructured or semi-structured
    data in storage; there may be structure, but it is loose in nature, lax in enforcement.'
  prefs: []
  type: TYPE_NORMAL
- en: Often, NoSQL is used to mean "not only SQL," meaning that these solutions are
    more flexible and less rigid in nature. I'm sure there are die-hards in this argument
    of terminology ownership, but just be aware of the potential difference in definition.
  prefs: []
  type: TYPE_NORMAL
- en: '**7\. Metadata**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is the data about the data. Metadata describes data relationships and characteristics,
    and is often referred to as a data dictionary, though that seems to be a term
    more prevalent in the relational world (though not exclusive to it by any means).
  prefs: []
  type: TYPE_NORMAL
- en: '**8\. Consistency**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A database is consistent when all of its imposed integrity constraints have
    been satisfied. Consistency can only be ensured if each database transaction,
    or data access request, begins in a known consistent state; otherwise, guarantees
    of consistency cannot be made. A database containing data that cannot be verified
    as consistent is problematic, especially to the extent to which its inconsistency
    is not known.
  prefs: []
  type: TYPE_NORMAL
- en: '**9\. Data Redundancy**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data redundancy is a situation in a database in which copies of a given piece
    of data are housed in 2 different places. This redundancy can be achieved if data
    is held in multiple places in the same database, in multiple databases on the
    same computer, or in multiple databases across multiple computers, perhaps even
    using different database management server software. This redundancy can be leveraged
    for both data access and permanence.
  prefs: []
  type: TYPE_NORMAL
- en: '**10\. ACID**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ACID is an acronym referring to a set of database transaction properties, namely
    Atomicity, Consistency, Isolation, and Durability. A single database operation,
    or transaction, must be atomic, consistent, isolated, and durable in order to
    be valid. In other words, the set of steps which make up a transaction must either
    be completed in full or rolled back (atomic), consistent (see above definition),
    must be isolated from other potential transactions, and must be permanent (durable).
  prefs: []
  type: TYPE_NORMAL
- en: '**11\. CAP Theorem**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The CAP Theorem concludes that it is not possible for a distributed computer
    system (including distributed database management software and their housed data)
    to provide all of the following guarantees at the same time: Consistency, which
    states that each computer node contain all of the same data at the same time;
    availability, which states that each database request is responded to as either
    successful or failure; and partition tolerance, which states that the database
    system continues operating even when not all nodes are connected to one another
    and suffer communication issues. At best, only 2 of these guarantees can be made
    concurrently.'
  prefs: []
  type: TYPE_NORMAL
- en: '![CAP Theorem](../Images/f9aff6a5ee70d754465d7d543b17d7e1.png)'
  prefs: []
  type: TYPE_IMG
- en: '**12\. Sharding**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sharding is a technique for partitioning data. A database shard is a horizontal
    (think rows, not columns) partition of data within a database, with each partition
    being referred to as a shard. These shards are then spread across computer nodes,
    in order to balance the load. Data may then be included in one or more of these
    shards.
  prefs: []
  type: TYPE_NORMAL
- en: '**13\. Key-value Store**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Key-value stores are one of the predominant NoSQL architectures. Key-value
    stores are simple paradigms at a high-level: assign values to keys to facilitate
    the access and storage of these values, which are always found via their keys.
    Data values are added to the database with a identifying keys; the same data values
    are later accessed with the same key. If you have an understanding of hash maps
    then you are a step ahead (dictionaries in Python). Redis is an example of a key-value
    store.'
  prefs: []
  type: TYPE_NORMAL
- en: '**14\. Document Store**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A document store is another NoSQL database architecture. As is the requirement
    for NoSQL engines, MongoDB does not use a relational schema; instead, document
    stores use JSON-like "documents" to store data. The document is akin to a record,
    housing fields and values. MongoDB is a free and open source exemplar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Document store](../Images/a7c0d8af61680463c9a71630a026baae.png)'
  prefs: []
  type: TYPE_IMG
- en: '**15\. Column-oriented Database**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another NoSQL architecture, column-oriented databases' rows actually contain
    what we most usually think of as vertical data, or what is traditionally held
    in relational columns (Rows contains columns? Huh?). The advantage of column-oriented
    database design is that some types of data lookups can become very fast, given
    that the desired data could be stored consecutively in a single row (compare this
    with having to search and read from multiple, nonconsecutive rows to attain the
    same field value in row-oriented database). Cassandra is a popular example of
    a column-oriented database.
  prefs: []
  type: TYPE_NORMAL
- en: '**16\. Graph Database**'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The graph database is premised on edges acting as relationships, directly relating
    data instances to one another. Graph databases have advantages in some use cases,
    including potentially in certain data mining and pattern recognition scenarios,
    given that associations between data instances are explicitly stated. Neo4j is
    the most widely-used graph database available.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Descriptive Statistics Key Terms, Explained](https://www.kdnuggets.com/2017/05/descriptive-statistics-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Key Terms, Explained](https://www.kdnuggets.com/2016/05/machine-learning-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deep Learning Key Terms, Explained](https://www.kdnuggets.com/2016/10/deep-learning-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing Key Terms, Explained](https://www.kdnuggets.com/2017/02/natural-language-processing-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generative AI Key Terms Explained](https://www.kdnuggets.com/generative-ai-key-terms-explained)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Genetic Algorithm Key Terms, Explained](https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
