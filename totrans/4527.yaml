- en: The 5 Most Useful Techniques to Handle Imbalanced Datasets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/01/5-most-useful-techniques-handle-imbalanced-datasets.html](https://www.kdnuggets.com/2020/01/5-most-useful-techniques-handle-imbalanced-datasets.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: Have you ever faced an issue where you have such a small sample for the positive
    class in your dataset that the model is unable to learn?
  prefs: []
  type: TYPE_NORMAL
- en: '***In such cases, you get a pretty high accuracy just by predicting the majority
    class, but you fail to capture the minority class, which is most often the point
    of creating the model in the first place.***'
  prefs: []
  type: TYPE_NORMAL
- en: Such datasets are a pretty common occurrence and are called as an imbalanced
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imbalanced datasets are a special case for classification problem where the
    class distribution is not uniform among the classes. Typically, they are composed
    by two classes: The majority (negative) class and the minority (positive) class'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Imbalanced datasets can be found for different use cases in various domains:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Finance**: Fraud detection datasets commonly have a fraud rate of ~1–2%'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ad Serving**: Click prediction datasets also don’t have a high clickthrough
    rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transportation**/**Airline**: Will Airplane failure occur?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Medical**: Does a patient has cancer?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content moderation**: Does a post contain NSFW content?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So how do we solve such problems?
  prefs: []
  type: TYPE_NORMAL
- en: '***This post is about explaining the various techniques you can use to handle
    imbalanced datasets.***'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Random Undersampling and Oversampling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/dc5e318bc4926bf091e11d5b4591bf5b.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://www.kaggle.com/rafjaa/resampling-strategies-for-imbalanced-datasets#t1)'
  prefs: []
  type: TYPE_NORMAL
- en: A widely adopted and perhaps the most straightforward method for dealing with
    highly imbalanced datasets is called resampling. It consists of removing samples
    from the majority class (under-sampling) and/or adding more examples from the
    minority class (over-sampling).
  prefs: []
  type: TYPE_NORMAL
- en: Let us first create some example imbalanced data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now do random oversampling and undersampling using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Undersampling and Oversampling using imbalanced-learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: imbalanced-learn(`imblearn`) is a Python Package to tackle the curse of imbalanced
    datasets.
  prefs: []
  type: TYPE_NORMAL
- en: It provides a variety of methods to undersample and oversample.
  prefs: []
  type: TYPE_NORMAL
- en: 'a. Undersampling using Tomek Links:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of such methods it provides is called Tomek Links. Tomek links are pairs
    of examples of opposite classes in close vicinity.
  prefs: []
  type: TYPE_NORMAL
- en: In this algorithm, we end up removing the majority element from the Tomek link,
    which provides a better decision boundary for a classifier.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b438cc09ae1ce6d6be99d948a836939b.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://www.kaggle.com/rafjaa/resampling-strategies-for-imbalanced-datasets#t1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'b. Oversampling using SMOTE:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In SMOTE (Synthetic Minority Oversampling Technique) we synthesize elements
    for the minority class, in the vicinity of already existing elements.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/d989e541f778e055e91e7a284125f32f.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://www.kaggle.com/rafjaa/resampling-strategies-for-imbalanced-datasets#t1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: There are a variety of other methods in the `[imblearn](https://github.com/scikit-learn-contrib/imbalanced-learn#id3)` package
    for both undersampling(Cluster Centroids, NearMiss, etc.) and oversampling(ADASYN
    and bSMOTE) that you can check out.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Class weights in the models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/4b2022f2f043a02a1b1a24858f55459d.png)'
  prefs: []
  type: TYPE_IMG
- en: Most of the machine learning models provide a parameter called `class_weights`.
    For example, in a random forest classifier using, `class_weights` we can specify
    a higher weight for the minority class using a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '***But what happens exactly in the background?***'
  prefs: []
  type: TYPE_NORMAL
- en: 'In logistic Regression, we calculate loss per example using binary cross-entropy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this particular form, we give equal weight to both the positive and the
    negative classes. When we set class_weight as `class_weight = {0:1,1:20}`, the
    classifier in the background tries to minimize:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '***So what happens exactly here?***'
  prefs: []
  type: TYPE_NORMAL
- en: If our model gives a probability of 0.3 and we misclassify a positive example,
    the NewLoss acquires a value of -20log(0.3) = 10.45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If our model gives a probability of 0.7 and we misclassify a negative example,
    the NewLoss acquires a value of -log(0.3) = 0.52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That means we penalize our model around twenty times more when it misclassifies
    a positive minority example in this case.
  prefs: []
  type: TYPE_NORMAL
- en: '***How can we compute class_weights?***'
  prefs: []
  type: TYPE_NORMAL
- en: '*There is no one method to do this, and this should be constructed as a hyperparameter
    search problem for your particular problem.*'
  prefs: []
  type: TYPE_NORMAL
- en: But if you want to get class_weights using the distribution of the y variable,
    you can use the following nifty utility from `sklearn`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 4\. Change your Evaluation Metric
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/4b467aa75f4bcb6e3e4cbe7e352cb9a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the right evaluation metric is pretty essential whenever we work with
    imbalanced datasets. Generally, in such cases, the F1 Score is what I want as
    my [***evaluation metric***](https://towardsdatascience.com/the-5-classification-evaluation-metrics-you-must-know-aa97784ff226).
  prefs: []
  type: TYPE_NORMAL
- en: The F1 score is a number between 0 and 1 and is the harmonic mean of precision
    and recall.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bd4bdbc8f8d459b73ed3c03de0723404.png)'
  prefs: []
  type: TYPE_IMG
- en: '***So how does it help?***'
  prefs: []
  type: TYPE_NORMAL
- en: Let us start with a binary prediction problem. ***We are predicting if an asteroid
    will hit the earth or not.***
  prefs: []
  type: TYPE_NORMAL
- en: So we create a model that predicts “No” for the whole training set.
  prefs: []
  type: TYPE_NORMAL
- en: '***What is the accuracy(Normally the most used evaluation metric)?***'
  prefs: []
  type: TYPE_NORMAL
- en: It is more than 99%, and so according to accuracy, this model is pretty good,
    but it is worthless.
  prefs: []
  type: TYPE_NORMAL
- en: '***Now, what is the F1 score?***'
  prefs: []
  type: TYPE_NORMAL
- en: Our precision here is 0\. What is the recall of our positive class? It is zero.
    And hence the F1 score is also 0.
  prefs: []
  type: TYPE_NORMAL
- en: And thus we get to know that the classifier that has an accuracy of 99% is worthless
    for our case. And hence it solves our problem.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f7ba297265c5c7338be06b63dc805cc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Precision-Recall Tradeoff
  prefs: []
  type: TYPE_NORMAL
- en: Simply stated the ***F1 score sort of maintains a balance between the precision
    and recall for your classifier***. If your precision is low, the F1 is low, and
    if the recall is low again, your F1 score is low.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a police inspector and you want to catch criminals, you want to be
    sure that the person you catch is a criminal (Precision) and you also want to
    capture as many criminals (Recall) as possible. The F1 score manages this tradeoff.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to Use?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can calculate the F1 score for binary prediction problems using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This is one of my functions which I use to get the best threshold for maximizing
    F1 score for binary predictions. The below function iterates through possible
    threshold values to find the one that gives the best F1 score.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 5\. Miscellaneous
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![Figure](../Images/34b289f50ee5da5e6ff32c72026a4019.png)'
  prefs: []
  type: TYPE_IMG
- en: Try new things and explore new places
  prefs: []
  type: TYPE_NORMAL
- en: 'Various other methods might work depending on your use case and the problem
    you are trying to solve:'
  prefs: []
  type: TYPE_NORMAL
- en: a) Collect more Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is a definite thing you should try if you can. Getting more data with more
    positive examples is going to help your models get a more varied perspective of
    both the majority and minority classes.
  prefs: []
  type: TYPE_NORMAL
- en: b) Treat the problem as anomaly detection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might want to treat your classification problem as an anomaly detection
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: '**Anomaly detection** is the identification of rare items, events or observations
    which raise suspicions by differing significantly from the majority of the data'
  prefs: []
  type: TYPE_NORMAL
- en: You can use Isolation forests or autoencoders for anomaly detection.
  prefs: []
  type: TYPE_NORMAL
- en: c) Model-based
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some models are particularly suited for imbalanced datasets.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in boosting models, we give more weights to the cases that get
    misclassified in each tree iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no one size fits all when working with imbalanced datasets. You will
    have to try multiple things based on your problem.
  prefs: []
  type: TYPE_NORMAL
- en: In this post, I talked about the usual suspects that come to my mind whenever
    I face such a problem.
  prefs: []
  type: TYPE_NORMAL
- en: A suggestion would be to try using all of the above approaches and try to see
    whatever works best for your use case.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to [learn](https://towardsdatascience.com/how-did-i-start-with-data-science-3f4de6b501b0?source=---------8------------------) more
    about imbalanced datasets and the problems they pose, I would like to call out
    this [***excellent course***](https://www.coursera.org/learn/machine-learning?ranMID=40328&ranEAID=lVarvwc5BD0&ranSiteID=lVarvwc5BD0-btd7XBdF681VKxRe2H_Oyg&siteID=lVarvwc5BD0-btd7XBdF681VKxRe2H_Oyg&utm_content=2&utm_medium=partners&utm_source=linkshare&utm_campaign=lVarvwc5BD0&source=post_page---------------------------) by
    Andrew Ng. This was the one that got me started. Do check it out.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for the read. I am going to be writing more beginner-friendly posts in
    the future too. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal?source=post_page---------------------------) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX?source=post_page---------------------------) to
    be informed about them. As always, I welcome feedback and constructive criticism
    and can be reached on Twitter [@mlwhiz](https://twitter.com/MLWhiz?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: Also, a small disclaimer — There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is Senior
    Statistical Analyst at WalmartLabs. Follow him on Twitter [@mlwhiz](https://twitter.com/MLWhiz).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/the-5-most-useful-techniques-to-handle-imbalanced-datasets-6cdba096d55a).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Classify A Rare Event Using 5 Machine Learning Algorithms](/2020/01/classify-rare-event-machine-learning-algorithms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Classification Evaluation Metrics Every Data Scientist Must Know](/2019/10/5-classification-evaluation-metrics-every-data-scientist-must-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Sampling Algorithms every Data Scientist need to know](/2019/09/5-sampling-algorithms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[7 Techniques to Handle Imbalanced Data](https://www.kdnuggets.com/2017/06/7-techniques-handle-imbalanced-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, August 31: The Complete Data Science Study Roadmap…](https://www.kdnuggets.com/2022/n35.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unsupervised Disentangled Representation Learning in Class…](https://www.kdnuggets.com/2023/01/unsupervised-disentangled-representation-learning-class-imbalanced-dataset-elastic-infogan.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Overcoming Imbalanced Data Challenges in Real-World Scenarios](https://www.kdnuggets.com/2023/07/overcoming-imbalanced-data-challenges-realworld-scenarios.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Useful Intermediate SQL Queries for Data Science](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Useful Python Automation Scripts](https://www.kdnuggets.com/2022/11/3-useful-python-automation-scripts.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
