- en: How To Calculate Algorithm Efficiency
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何计算算法效率
- en: 原文：[https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html](https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html](https://www.kdnuggets.com/2022/09/calculate-algorithm-efficiency.html)
- en: '![How To Calculate Algorithm Efficiency](../Images/81f2044792ac245d60f88e2c0c319390.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何计算算法效率](../Images/81f2044792ac245d60f88e2c0c319390.png)'
- en: Photo by [DeepMind](https://unsplash.com/@deepmind?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/ai?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[DeepMind](https://unsplash.com/@deepmind?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)提供，来源于[Unsplash](https://unsplash.com/s/photos/ai?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Almost all forms of technology use algorithms to perform complex functions,
    ranging from search engines to mobile apps and video games to social media. However,
    when [creating an algorithm](/2019/03/designing-ethical-algorithms.html), it is
    important to make it as streamlined as possible so it does not strain the software
    or device that runs it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有形式的技术都使用算法来执行复杂的功能，从搜索引擎到移动应用程序，再到视频游戏和社交媒体。然而，在[创建算法](/2019/03/designing-ethical-algorithms.html)时，重要的是使其尽可能简化，以免对运行它的软件或设备造成负担。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析水平'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this article, we will discuss how to calculate algorithm efficiency, focusing
    on two main ways to measure it and providing an overview of the calculation process.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将讨论如何计算算法效率，重点介绍两种主要的测量方法，并提供计算过程的概述。
- en: What is Algorithmic Efficiency, and Why is it Important?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是算法效率，为什么它很重要？
- en: Algorithm efficiency relates to how many resources a computer needs to expend
    to process an algorithm. The efficiency of an algorithm needs to be determined
    to ensure it can perform without the risk of crashes or severe delays. If an algorithm
    is not efficient, it is unlikely to be fit for its purpose.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 算法效率与计算机处理算法所需的资源量有关。需要确定算法的效率，以确保它在不发生崩溃或严重延迟的风险下能够运行。如果算法效率不高，它不太可能适合其目的。
- en: We measure an algorithm’s efficiency by how many resources are used to process
    it. An efficient algorithm uses minimal resources to perform its functions.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过处理算法所使用的资源量来衡量算法的效率。高效的算法使用最少的资源来执行其功能。
- en: Algorithms can be used for various functions, including machine learning algorithms,
    protection against cybercrime, and making the internet safer. When browsing the
    web, you should also always be aware of [how to protect yourself from identity
    theft](https://www.aura.com/learn/how-to-protect-yourself-from-identity-theft)
    and other criminal activity.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 算法可以用于各种功能，包括机器学习算法、对抗网络犯罪和使互联网更安全。当你浏览网页时，也应该始终了解[如何保护自己免受身份盗窃](https://www.aura.com/learn/how-to-protect-yourself-from-identity-theft)及其他犯罪活动。
- en: What are the Main Ways to Measure Algorithm Efficiency?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测量算法效率的主要方法是什么？
- en: This section will discuss the two main measures for calculating algorithm efficiency.
    These are time complexity and space complexity. However, a direct comparison cannot
    be made between them; therefore, we need to consider a combination of the two.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论计算算法效率的两种主要衡量标准。这些是时间复杂度和空间复杂度。然而，它们之间无法直接比较，因此我们需要考虑两者的组合。
- en: Space complexity
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 空间复杂度
- en: Simply put, space complexity refers to the amount of memory needed during the
    execution of a program compared to the function input, i.e., the amount of memory
    on a computer or device that is required. The memory type could include registers,
    cache, RAM, virtual memory, and secondary memory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，空间复杂度指的是在程序执行过程中与函数输入相关的所需内存量，即计算机或设备上所需的内存量。内存类型可能包括寄存器、缓存、RAM、虚拟内存和辅助内存。
- en: 'When [analyzing space complexity](https://www.baeldung.com/cs/space-complexity),
    you need to consider four key factors:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在[分析空间复杂度](https://www.baeldung.com/cs/space-complexity)时，你需要考虑四个关键因素：
- en: The memory required to hold the code for the algorithm
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储算法代码所需的内存
- en: The memory required to input the data
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据所需的内存
- en: The memory required to output the data (some algorithms, such as sorting algorithms,
    do not need memory to output data and usually just rearrange the input data).
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输出数据所需的内存（某些算法，例如排序算法，不需要内存来输出数据，通常只是重新排列输入数据）。
- en: The memory required for working space while the algorithm is calculated. This
    can include local variables and any stack space that is needed.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 算法计算时所需的工作空间内存。这可以包括局部变量和任何需要的栈空间。
- en: 'Mathematically, the space equals the sum of the two components below:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学上讲，空间等于下面两个组件的总和：
- en: '**A variable part** that includes structured variables dependent on the problem
    the algorithm is trying to solve.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变量部分**包括依赖于算法试图解决的问题的结构化变量。'
- en: '**A fixed part** that is independent of the problem and consists of instruction
    space, the space for constants, fixed-size structure variables, and simple variables.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**固定部分**指的是与问题无关的部分，包括指令空间、常量空间、固定大小的结构变量和简单变量。'
- en: 'Therefore, space complexity S(a) of any algorithm is calculated as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何算法的空间复杂度 S(a) 计算如下：
- en: S(a) = c (the fixed part) + v(i) (the variable part which depends on an instance
    characteristic i)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: S(a) = c（固定部分）+ v(i)（依赖于实例特征 i 的变量部分）
- en: Time complexity
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间复杂度
- en: Time complexity is the total [time required to execute an algorithm](/2020/06/time-complexity-measure-efficiency-algorithms.html),
    and it depends on all of the same factors used by space complexity, but these
    are broken down into a numerical function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 时间复杂度是[执行算法所需的总时间](/2020/06/time-complexity-measure-efficiency-algorithms.html)，它依赖于与空间复杂度相同的所有因素，但这些因素被分解成数值函数。
- en: This measure can be useful when comparing different algorithms, mainly when
    large quantities of data are being processed. However, if the amount of data is
    small, more detailed estimates will be needed when comparing the performance of
    algorithms. Time complexity is less effective when an algorithm uses parallel
    processing.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当比较不同算法时，这一度量方法非常有用，特别是在处理大量数据时。然而，如果数据量较小，比较算法性能时需要更详细的估算。当算法使用并行处理时，时间复杂度的效果较差。
- en: Time complexity is defined as T(num). It is measured by the number of steps,
    as long as each step equates to the constant time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 时间复杂度定义为 T(num)。它通过步骤数量来衡量，只要每一步等同于常量时间。
- en: Algorithm time complexity cases
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 算法时间复杂度情况
- en: 'An algorithm’s complexity is defined by some key criteria; namely, the movement
    of the data and the comparison of keys - for example, how many times the [data
    is moved](/2021/06/overcoming-simplicity-illusion-data-migration.html) and the
    key is compared. When measuring the complexity of an algorithm, we use three cases:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的复杂度由一些关键标准定义，即数据的移动和键的比较——例如，[数据的移动次数](/2021/06/overcoming-simplicity-illusion-data-migration.html)和键的比较次数。测量算法复杂度时，我们使用三种情况：
- en: Best case time complexity
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳情况的时间复杂度
- en: Average case time complexity
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平均情况下的时间复杂度
- en: Worst-case time complexity
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最坏情况的时间复杂度
- en: The Process of Calculating Algorithm Efficiency
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 计算算法效率的过程
- en: Two stages need to be completed when accurately calculating the efficiency of
    an algorithm - theoretical analysis and benchmarking (measuring the performance).
    We will provide a summary of each stage below.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 准确计算算法效率时需要完成两个阶段——理论分析和基准测试（性能测量）。我们将下面提供每个阶段的总结。
- en: Theoretical analysis
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理论分析
- en: In relation to algorithms, theoretical analysis is usually the process of estimating
    an algorithm’s complexity in an asymptotic manner (approaching a value or curve
    arbitrarily closely). The most common way of describing the number of resources
    an algorithm uses is by using Donald Knuth’s Big O notation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与算法相关的理论分析通常是以渐近方式估计算法复杂度的过程（接近一个值或曲线）。描述算法使用的资源数量最常用的方法是使用Donald Knuth的“大O符号”。
- en: Using the [Big O notation](https://triplebyte.com/blog/counterpoint-stop-trying-to-force-big-o-into-software-development),
    programmers will measure algorithms to ensure they scale efficiently, regardless
    of input data size.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[大O符号](https://triplebyte.com/blog/counterpoint-stop-trying-to-force-big-o-into-software-development)，程序员可以测量算法以确保其在不同输入数据规模下都能高效扩展。
- en: Benchmarking (measuring performance)
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基准测试（性能测量）
- en: When analyzing and testing new algorithms or software, benchmarks are used to
    measure their performance. This helps to gauge an algorithm’s efficiency compared
    to other well-performing algorithms.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在分析和测试新的算法或软件时，会使用基准测试来衡量其性能。这有助于评估算法与其他表现良好的算法相比的效率。
- en: Let’s take a sorting algorithm as an example. Using benchmarks set by a previous
    version of the sorting algorithm can determine how efficient the current algorithm
    is, using known data while also taking into account its functional improvements.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以排序算法为例。使用先前版本排序算法设置的基准测试可以确定当前算法的效率，利用已知数据同时考虑其功能改进。
- en: Benchmarking also allows analysis teams to compare algorithm speed against various
    other programming languages to establish if improvements can be made. In fact,
    benchmarking can be implemented in various ways to measure performance against
    any predecessors or similar software.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 基准测试还允许分析团队将算法速度与各种编程语言进行比较，以确定是否可以改进。实际上，基准测试可以以各种方式实施，以衡量性能与任何前身或类似软件的对比。
- en: Implementation Challenges
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施挑战
- en: Implementing a new algorithm can sometimes impact its overall efficiency. This
    could be down to the chosen [programming language](/2021/05/top-programming-languages.html),
    the compiler options used, the operating system, or just how the algorithm has
    been coded. In particular, the compiler used for a specific language can greatly
    impact speed.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 实现新算法有时可能会影响其整体效率。这可能与选择的[编程语言](/2021/05/top-programming-languages.html)、使用的编译器选项、操作系统或算法的编写方式有关。特别是，特定语言使用的编译器可能会对速度产生重大影响。
- en: When measuring space and time complexity, not everything can be dictated by
    the programmer. Issues such as cache locality and coherence, data alignment and
    granularity, multi-threading, and simultaneous multitasking can all impact performance,
    regardless of the programming language used or how the algorithm is written.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在测量空间和时间复杂度时，并非所有因素都由程序员决定。诸如缓存局部性和一致性、数据对齐和粒度、多线程以及同时多任务等问题都会影响性能，无论使用何种编程语言或算法编写方式。
- en: The processor used to run the software can also cause problems; some processors
    may support vector or parallel processing, whereas others may not. In some cases,
    utilizing such capabilities may not always be possible, making the algorithm less
    efficient and requiring some reconfiguration.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行软件的处理器也可能引发问题；一些处理器可能支持向量或并行处理，而另一些则不支持。在某些情况下，利用这些能力可能并不总是可行，这使得算法效率降低，并需要一些重新配置。
- en: Finally, the instruction set [used by a processor](/2020/05/tops-just-hype-dark-ai-silicon-disguise.html)
    (e.g., ARM or x86-64) may affect how quickly instructions are processed on various
    devices. This makes it difficult to optimize compilers due to the number of different
    hardware combinations that need to be considered.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，[处理器使用的指令集](/2020/05/tops-just-hype-dark-ai-silicon-disguise.html)（例如，ARM或x86-64）可能会影响指令在各种设备上的处理速度。这使得优化编译器变得困难，因为需要考虑的硬件组合非常多。
- en: Conclusion
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: An algorithm needs to be processed very quickly, so it must perform as flawlessly
    as possible. This is why every new algorithm goes through testing to calculate
    its efficiency, using theoretical analysis and benchmarking to compare it against
    other algorithms.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个算法需要非常迅速地处理，因此它必须尽可能完美地执行。这就是为什么每个新算法都要经过测试来计算其效率，通过理论分析和基准测试将其与其他算法进行比较。
- en: Time and space complexity are the two main measures for calculating algorithm
    efficiency, determining how many resources are needed on a machine to process
    it. Where time measures how long it takes to process the algorithm, space measures
    how much memory is used.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 时间复杂度和空间复杂度是计算算法效率的两个主要指标，决定了在机器上处理算法所需的资源数量。时间复杂度衡量处理算法所需的时间，而空间复杂度衡量所使用的内存量。
- en: Unfortunately, numerous challenges, such as the programming language used, the
    processor, the instruction set, etc., can arise during the implementation process,
    causing headaches for programmers.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在实施过程中可能会遇到许多挑战，例如使用的编程语言、处理器、指令集等，这些都会给程序员带来头疼的问题。
- en: Despite this, time and space complexity have proven to be very [effective ways
    of measuring](https://byjusexamprep.com/efficiency-of-an-algorithm-i) algorithm
    efficiency.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，时间复杂度和空间复杂度已被证明是非常[有效的测量方法](https://byjusexamprep.com/efficiency-of-an-algorithm-i)。
- en: '**[Nahla Davies](http://nahlawrites.com/)** is a software developer and tech
    writer. Before devoting her work full time to technical writing, she managed —
    among other intriguing things — to serve as a lead programmer at an Inc. 5,000
    experiential branding organization whose clients include Samsung, Time Warner,
    Netflix, and Sony.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Nahla Davies](http://nahlawrites.com/)** 是一位软件开发者和技术作家。在全职从事技术写作之前，她曾担任
    Inc. 5,000 的一家体验品牌机构的首席程序员，该机构的客户包括三星、时代华纳、Netflix 和索尼。'
- en: More On This Topic
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Calculate Computational Efficiency of Deep Learning Models with…](https://www.kdnuggets.com/2023/06/calculate-computational-efficiency-deep-learning-models-flops-macs.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[计算深度学习模型的计算效率…](https://www.kdnuggets.com/2023/06/calculate-computational-efficiency-deep-learning-models-flops-macs.html)'
- en: '[Efficiency Spells the Difference Between Biological Neurons and…](https://www.kdnuggets.com/2022/11/efficiency-spells-difference-biological-neurons-artificial-counterparts.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[效率是生物神经元与…的区别所在](https://www.kdnuggets.com/2022/11/efficiency-spells-difference-biological-neurons-artificial-counterparts.html)'
- en: '[Elevate Math Efficiency: Navigating Numpy Array Operations](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升数学效率：如何处理 Numpy 数组操作](https://www.kdnuggets.com/elevate-math-efficiency-navigating-numpy-array-operations)'
- en: '[Maximizing Efficiency in Data Analysis with ChatGPT](https://www.kdnuggets.com/maximizing-efficiency-in-data-analysis-with-chatgpt)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过 ChatGPT 最大化数据分析效率](https://www.kdnuggets.com/maximizing-efficiency-in-data-analysis-with-chatgpt)'
- en: '[3 Research-Driven Advanced Prompting Techniques for LLM Efficiency…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3 种基于研究的高级提示技术提升 LLM 效率…](https://www.kdnuggets.com/3-research-driven-advanced-prompting-techniques-for-llm-efficiency-and-speed-optimization)'
- en: '[5 Python Tips for Data Efficiency and Speed](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个提升 Python 数据效率和速度的小贴士](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
