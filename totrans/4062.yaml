- en: Create a Dashboard Using Python and Dash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html](https://www.kdnuggets.com/2023/08/create-dashboard-python-dash.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the realm of data science and analytics, the power of data is unleashed not
    just by extracting insights but also by effectively communicating these insights;
    this is where **data visualization** comes into play.
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a Dashboard Using Python and Dash](../Images/b8b4e5ee1e64e8038a4a0132d1912889.png)'
  prefs: []
  type: TYPE_IMG
- en: Data visualization is a graphical representation of information and data. It
    uses visual elements like charts, graphs, and maps, which make it easier to see
    patterns, trends, and outliers in the raw data. For data scientists and analysts,
    data visualization is an essential tool that facilitates a quicker and more precise
    understanding of the data, supports storytelling with data, and aids in making
    data-driven decisions.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, you’ll learn to use **Python ** and the **Dash ** framework
    to create a **dashboard **to visualize Netflix’s content distribution and classification.
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a Dashboard Using Python and Dash](../Images/f1d265e848985ebd2e61e3f46ed36fbd.png)'
  prefs: []
  type: TYPE_IMG
- en: What is Dash?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Dash](https://dash.plotly.com/) is an open-source low-code framework developed
    by **Plotly** to create analytical web applications in pure Python. Traditionally,
    for such purposes, one might need to use** JavaScript and HTML**, requiring you
    to have expertise in both backend (Python) and frontend (JavaScript, HTML) technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: However, Dash bridges this gap, enabling Data Scientists and Analysts to build
    interactive, aesthetic dashboards *only using Python*. This aspect of low-code
    development makes Dash a suitable choice for creating analytical dashboards, especially
    for those primarily comfortable with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Dataset Analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you’ve been acquainted with Dash, let’s begin our hands-on project.
    You’ll use the [**Netflix Movies and TV Shows dataset**](https://www.kaggle.com/datasets/shivamb/netflix-shows) available
    on **Kaggle, **created by **Shivam Bansal**.
  prefs: []
  type: TYPE_NORMAL
- en: This dataset comprises details about the movies and TV shows available on Netflix
    as of 2021, such as the type of content, title, director, cast, country of production,
    release year, rating, duration, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '**Even though the dataset was created in 2021, it’s still a valuable resource
    for developing data visualization skills and understanding trends in media entertainment.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Using this dataset, you’ll aim to create a dashboard that allows visualizing
    the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Geographical content distribution**: A map graph showcasing how content production
    varies across different countries over the years.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Content classification**: This visualization divides Netflix’s content into
    TV shows and movies to see which genres are most prominent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the Project Workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start creating a directory for the project named *netflix-dashboard,* then
    initialize and activate a Python virtual environment via the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, you’ll need to install some external packages. You’ll be using `pandas` for
    data manipulation, `dash` for creating the dashboard, `plotly` for creating the
    graphs, and `dash-bootstrap-components` to add some style to the dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Cleaning the Dataset
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going through the Netflix dataset, you’ll find missing values in the `director`, `cast`,
    and `country` columns. It would also be convenient to convert the `date_added` column `string` values
    to `datetime` for easier analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'To clean the dataset, you can create a new file *clean_netflix_dataset.py, *with
    the following code and then run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Getting started with Dash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With the workspace set up and the dataset cleaned, you’re ready to start working
    on your dashboard. Create a new file *app.py,* with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s break down the code within *app.py*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`app = Dash(__name__)`: This line initializes a new Dash app. Think of it as
    the foundation of your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.layout = html.Div(…)`: The `app.layout` attribute lets you write **HTML-like
    code** to design your application’s user interface. The above layout uses a `html.H1(…)` heading
    element for the dashboard title and a horizontal rule `html.Hr()` element below
    the title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`app.run(debug=True)`: This line starts a development server that serves your
    Dash app in local development mode. Dash uses [**Flask**](https://flask.palletsprojects.com/en/2.3.x/),
    a lightweight web server framework, to serve your applications to web browsers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After running *app.py*, you’ll see a message in your terminal indicating that
    your Dash app is running and accessible at [http://127.0.0.1:8050/](http://127.0.0.1:8050/).
    Open this URL in your web browser to view it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a Dashboard Using Python and Dash](../Images/ff7f8455e7d9825e3b9662936720dad6.png)'
  prefs: []
  type: TYPE_IMG
- en: Your first Dash app!
  prefs: []
  type: TYPE_NORMAL
- en: The result looks very plain, right? Don’t worry! This section aimed to showcase
    the most basic Dash app structure and components. You’ll soon add more features
    and components to make it an awesome dashboard!
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating Dash Bootstrap Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The next step is to write the code for the layout of your dashboard and add
    some style to it! For this, you can use **Dash Bootstrap Components (DBC)**, a
    library that provides Bootstrap components for Dash, enabling you to develop styled
    apps with responsive layouts.
  prefs: []
  type: TYPE_NORMAL
- en: The dashboard will be styled in a **tab layout**, which provides a compact way
    to organize different types of information within the same space. Each tab will
    correspond to a distinct visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go ahead and modify the contents of *app.py* to incorporate DBC:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In this modified layout, you’ll see new components:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbc.Container`: Using `dbc.Container` as the top-level component wraps the
    entire dashboard layout in a responsive and flexible container.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dcc.Store`: This Dash Core component allows you to store data client-side
    (on the user’s browser), enhancing the application’s performance by keeping the
    data locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbc.Tabs` and `dbc.Tab`: Each `dbc.Tab` represents an individual tab, which
    will contain different visualizations. The `label` property is what appears on
    the tab itself, and the `tab_id` is used to identify the tab. The `active_tab` property
    of `dbc.Tabs` is used to specify the active tab when the Dash app starts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now run *app.py. *The resulting dashboard will now have a Bootstrap-styled
    layout with two empty tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a Dashboard Using Python and Dash](../Images/1d67aef5135840393d49c1ec4cf84ac8.png)'
  prefs: []
  type: TYPE_IMG
- en: Incorporating Bootstrap for a tab-styled layout
  prefs: []
  type: TYPE_NORMAL
- en: Good going! You’re finally ready to add visualizations to the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Callbacks and Visualizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When working with Dash, interactivity is achieved through **callback functions**.
    A callback function is a function that gets automatically called when an input
    property changes. It’s named “callback” because it’s a function that is “called
    back” by Dash whenever a change happens in the application.
  prefs: []
  type: TYPE_NORMAL
- en: In this dashboard, you will use callbacks to render the relevant visualization
    in the selected tab, and each visualization will be stored within its own Python
    file under a new *components* directory for better organization and modularity
    of the project structure.
  prefs: []
  type: TYPE_NORMAL
- en: Geographical content distribution visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create a new directory named *components*, and within it, create the *geographical_content.py* file
    that will generate a **choropleth map** illustrating how Netflix’s content production
    varies by country over the years:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The above code filters and groups the data by `'country'` and `'year_added'` ,
    then computes the count of content produced by each country for each year within
    the `df_counts` DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the `px.choroplet` function builds the map graph using the columns from
    the `df_counts` DataFrame as values for its arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`locations=''country''`: Allows you to specify the geographic location values
    contained in the `''country''` column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locationmode=''country names''`: This argument “tells the function” that the
    provided `locations` are country names since Plotly Express also supports other
    location modes like ISO-3 country codes or USA states.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color=''count''`: It is used to specify the numeric data used to color the
    map. Here, it refers to the `''count''` column, which contains the count of content
    produced by each country for each year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color_continous_scale=''YlGnBu''`: Builds a continuous color scale for each
    country in the map when the column denoted by `color` contains numeric data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`animation_frame=''year_added''`: This argument creates an animation over the `''year_added''` column.
    It adds a year slider to the map graph, allowing you to view an animation that
    represents the evolution of this content production in each country year after
    year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`projection=''natural earth''`: This argument doesn’t use any columns from
    the `df_counts` DataFrame; however, the `''natural earth''` value is required
    to set the projection with the Earth''s world map.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: And right below the choropleth map, a **line chart with markers** is included
    showcasing the change in the content volume, categorized by type (TV shows or
    movies), over the years.
  prefs: []
  type: TYPE_NORMAL
- en: To generate the line chart, a new DataFrame `df_year_counts` is created, which
    groups the original `df` data by `'year_added'` and `'type'` columns, tallying
    the content count for each combination.
  prefs: []
  type: TYPE_NORMAL
- en: This grouped data is then used with `px.line` where the `'x'` and `'y'` arguments
    are assigned to the `'year_added'` and `'count'` columns respectively, and the `'color'` argument
    is set to `'type'` to differentiate between TV shows and movies.
  prefs: []
  type: TYPE_NORMAL
- en: Content classification visualization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The next step is to create a new file named c*ontent_classification.py*, which
    will generate a **treemap** graph to visualize Netflix’s content from a type and
    genre perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the above code, after loading the data, the `'listed_in'` column is adjusted
    to handle multiple genres per content by splitting and exploding the genres, creating
    a new row for each genre per content.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the `df_counts` DataFrame is created to group the data by `'type'`, and `'listed_in'` columns,
    and calculate the count of each type-genre combination.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the columns from the `df_counts` DataFrame are used as values for the `px.treemap` function
    arguments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`path=[''type'', ''listed_in'']`: These are the hierarchical categories represented
    in the treemap. The `''type''` and `''listed_in''` columns contain the types of
    content (TV shows or movies) and genres, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`values=''count''`: The size of each rectangle in the treemap corresponds to
    the `''count''` column, representing the content amount for each type-genre combination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color=''count''`: The `''count''` column is also used to color the rectangles
    in the treemap.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color_continous_scale=''Ice''`: Builds a continuous color scale for each rectangle
    in the treemap when the column denoted by `color` contains numeric data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After creating the two new visualization files, here is how your current project
    structure should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Implementing callbacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last step is to modify *app.py* to import the two new visualizations within
    the *components* directory and implement callback functions to render the graphs
    when selecting the tabs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The callback decorator `@app.callback` listen to changes in the `'active_tab'` property
    of the `'tabs'` component, represented by the `Input` object.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever the `'active_tab'` changes, the `switch_tab` function gets triggered.
    This function checks the `'active_tab'` id and returns the corresponding layout
    to be rendered in the `'tab-content'` Div, as indicated by the `Output` object.
    Therefore, when you switch tabs, the relevant visualization appears.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, run *app.py* once again to view the updated dashboard with the new
    visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Create a Dashboard Using Python and Dash](../Images/80de65f3d7f2a801cc3f1377172f0802.png)'
  prefs: []
  type: TYPE_IMG
- en: Netflix Movies and TV Shows Dashboard — Final result
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This article taught you how to create a dashboard to explore and visualize Netflix’s
    content distribution and classification. By harnessing the power of Python and
    Dash, you’re now equipped to create your own visualizations, providing invaluable
    insights into your data.
  prefs: []
  type: TYPE_NORMAL
- en: You can take a look at the entire code of this project in the following GitHub
    repository: [https://github.com/gutyoh/netflix-dashboard](https://github.com/gutyoh/netflix-dashboard)
  prefs: []
  type: TYPE_NORMAL
- en: If you found this article helpful and want to expand your knowledge on Python
    and Data Science, consider checking out the [**Introduction to Data Science track**](https://hyperskill.org/tracks?utm_source=fcc_hs&utm_medium=social&utm_campaign=dash&category=13) on
    Hyperskill.
  prefs: []
  type: TYPE_NORMAL
- en: Let me know in the comments below if you have any questions or feedback regarding
    this blog.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Hermann Rösch](https://www.linkedin.com/in/hrosch/)** is a Technical Author
    for the Go programming track at Hyperskill, where he blend my passion for EdTech
    to empower the next generation of software engineers. Simultaneously, delving
    into the world of data as a Master''s student at the University of Illinois at
    Urbana-Champaign.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://python.plainenglish.io/create-a-dashboard-using-python-and-dash-fdf2ec20f8ac).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Create a Time Series Ratio Analysis Dashboard](https://www.kdnuggets.com/2023/06/wolfer-create-time-series-ratio-analysis-dashboard.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Create Custom Context Managers in Python](https://www.kdnuggets.com/how-to-create-custom-context-managers-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Create Minimal Docker Images for Python Applications](https://www.kdnuggets.com/how-to-create-minimal-docker-images-for-python-applications)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Create a Sampling Plan for Your Data Project](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Create a Dataset for Machine Learning](https://www.kdnuggets.com/2022/02/create-dataset-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Create Efficient Combined Data Sources with Tableau](https://www.kdnuggets.com/2022/05/create-efficient-combined-data-sources-tableau.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
