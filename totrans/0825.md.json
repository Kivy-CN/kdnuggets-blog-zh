["```py\nclass InputSchema(pa.DataFrameModel):\n   year: Series[int] = pa.Field()\n   month: Series[int] = pa.Field()\n   day: Series[int] = pa.Field()\n```", "```py\nclass InputSchema(pa.DataFrameModel):\n   year: Series[int] = pa.Field(gt=2000, coerce=True)\n   month: Series[int] = pa.Field(ge=1, le=12, coerce=True)\n   day: Series[int] = pa.Field(ge=0, le=365, coerce=True)\n\nInputSchema.validate(df)\n```", "```py\neq: checks if value is equal to a given literal\nne: checks if value is not equal to a given literal\ngt: checks if value is greater than a given literal\nge: checks if value is greater than & equal to a given literal\nlt: checks if value is less than a given literal\nle: checks if value is less than & equal to a given literal\nin_range: checks if value is given range\nisin: checks if value is given list of literals\nnotin: checks if value is not in given list of literals\nstr_contains: checks if value contains string literal\nstr_endswith: checks if value ends with string literal\nstr_length: checks if value length matches\nstr_matches: checks if value matches string literal\nstr_startswith: checks if value starts with a string literal\n```", "```py\nschema = pa.DataFrameSchema({\n   \"column2\": pa.Column(str, [\n       pa.Check(lambda s: s.str.startswith(\"value\")),\n       pa.Check(lambda s: s.str.split(\"_\", expand=True).shape[1] == 2)\n   ]),\n})\n```", "```py\nfrom pyspark.sql import DataFrame, SparkSession\nimport pyspark.sql.types as T\nimport pandera.pyspark as pa\n\nspark = SparkSession.builder.getOrCreate()\n\nclass PanderaSchema(DataFrameModel):\n       \"\"\"Test schema\"\"\"\n       id: T.IntegerType() = Field(gt=5)\n       product_name: T.StringType() = Field(str_startswith=\"B\")\n       price: T.DecimalType(20, 5) = Field()\n       description: T.ArrayType(T.StringType()) = Field()\n       meta: T.MapType(T.StringType(), T.StringType()) = Field()\n\ndata_fail = [\n       (5, \"Bread\", 44.4, [\"description of product\"], {\"product_category\": \"dairy\"}),\n       (15, \"Butter\", 99.0, [\"more details here\"], {\"product_category\": \"bakery\"}),\n   ]\n\nspark_schema = T.StructType(\n       [\n           T.StructField(\"id\", T.IntegerType(), False),\n           T.StructField(\"product\", T.StringType(), False),\n           T.StructField(\"price\", T.DecimalType(20, 5), False),\n           T.StructField(\"description\", T.ArrayType(T.StringType(), False), False),\n           T.StructField(\n               \"meta\", T.MapType(T.StringType(), T.StringType(), False), False\n           ),\n       ],\n   )\ndf_fail = spark_df(spark, data_fail, spark_schema)\n```", "```py\nclass PanderaSchema(DataFrameModel):\n       \"\"\"Test schema\"\"\"\n       id: T.IntegerType() = Field(gt=5)\n       product_name: T.StringType() = Field(str_startswith=\"B\")\n       price: T.DecimalType(20, 5) = Field()\n       description: T.ArrayType(T.StringType()) = Field()\n       meta: T.MapType(T.StringType(), T.StringType()) = Field()\n```", "```py\nspark_schema = T.StructType(\n       [\n           T.StructField(\"id\", T.IntegerType(), False),\n           T.StructField(\"product\", T.StringType(), False),\n           T.StructField(\"price\", T.DecimalType(20, 5), False),\n           T.StructField(\"description\", T.ArrayType(T.StringType(), False), False),\n           T.StructField(\n               \"meta\", T.MapType(T.StringType(), T.StringType(), False), False\n           ),\n       ],\n   )\n\ndf_fail = spark_df(spark, data_fail, spark_schema)\n```", "```py\ndf_fail.show()\n\n   +---+-------+--------+--------------------+--------------------+\n   | id|product|   price|         description|                meta|\n   +---+-------+--------+--------------------+--------------------+\n   |  5|  Bread|44.40000|[description of p...|{product_category...|\n   | 15| Butter|99.00000| [more details here]|{product_category...|\n   +---+-------+--------+--------------------+--------------------+\n```", "```py\ndf_out = PanderaSchema.validate(check_obj=df)\n```", "```py\ndf_out = PanderaSchema.validate(check_obj=df)\n```", "```py\nprint(df_out.pandera.errors)\n```", "```py\n{\n  \"SCHEMA\":{\n     \"COLUMN_NOT_IN_DATAFRAME\":[\n        {\n           \"schema\":\"PanderaSchema\",\n           \"column\":\"PanderaSchema\",\n           \"check\":\"column_in_dataframe\",\n           \"error\":\"column 'product_name' not in dataframe Row(id=5, product='Bread', price=None, description=['description of product'], meta={'product_category': 'dairy'})\"\n        }\n     ],\n     \"WRONG_DATATYPE\":[\n        {\n           \"schema\":\"PanderaSchema\",\n           \"column\":\"description\",\n           \"check\":\"dtype('ArrayType(StringType(), True)')\",\n           \"error\":\"expected column 'description' to have type ArrayType(StringType(), True), got ArrayType(StringType(), False)\"\n        },\n        {\n           \"schema\":\"PanderaSchema\",\n           \"column\":\"meta\",\n           \"check\":\"dtype('MapType(StringType(), StringType(), True)')\",\n           \"error\":\"expected column 'meta' to have type MapType(StringType(), StringType(), True), got MapType(StringType(), StringType(), False)\"\n        }\n     ]\n  },\n  \"DATA\":{\n     \"DATAFRAME_CHECK\":[\n        {\n           \"schema\":\"PanderaSchema\",\n           \"column\":\"id\",\n           \"check\":\"greater_than(5)\",\n           \"error\":\"column 'id' with type IntegerType() failed validation greater_than(5)\"\n        }\n     ]\n  }\n}\n```", "```py\nexport PANDERA_VALIDATION_ENABLED=False\n```", "```py\nexport PANDERA_VALIDATION_DEPTH=SCHEMA_ONLY\n```", "```py\nclass PanderaSchema(DataFrameModel):\n       \"\"\"Pandera Schema Class\"\"\"\n       id: T.IntegerType() = Field(\n           gt=5,\n           metadata={\"usecase\": [\"RetailPricing\", \"ConsumerBehavior\"],\n              \"category\": \"product_pricing\"},\n       )\n       product_name: T.StringType() = Field(str_startswith=\"B\")\n       price: T.DecimalType(20, 5) = Field()\n\n       class Config:\n           \"\"\"Config of pandera class\"\"\"\n           name = \"product_info\"\n           strict = True\n           coerce = True\n           metadata = {\"category\": \"product-details\"}\n```", "```py\nPanderaSchema.get_metadata()\nThe output will be dictionary object as follows:\n{\n       \"product_info\": {\n           \"columns\": {\n               \"id\": {\"usecase\": [\"RetailPricing\", \"ConsumerBehavior\"],\n                      \"category\": \"product_pricing\"},\n               \"product_name\": None,\n               \"price\": None,\n           },\n           \"dataframe\": {\"category\": \"product-details\"},\n       }\n}\n```"]