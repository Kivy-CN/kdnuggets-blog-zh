- en: Software Interfaces for Machine Learning Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器学习部署的软件接口
- en: 原文：[https://www.kdnuggets.com/2020/03/software-interfaces-machine-learning-deployment.html](https://www.kdnuggets.com/2020/03/software-interfaces-machine-learning-deployment.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/03/software-interfaces-machine-learning-deployment.html](https://www.kdnuggets.com/2020/03/software-interfaces-machine-learning-deployment.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Luigi Patruno](https://mlinproduction.com/about/), Data Scientist and
    the founder of ML in Production**.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Luigi Patruno](https://mlinproduction.com/about/) 提供，数据科学家及 ML in Production
    的创始人**。'
- en: '![](../Images/741c813aec2c11d4c0beb00d70c39134.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/741c813aec2c11d4c0beb00d70c39134.png)'
- en: In our [previous post](https://www.kdnuggets.com/2020/02/deploy-machine-learning-model.html) on
    machine learning deployment, we introduced what it means to deploy a machine learning
    model. We learned that in order to make the predictions from a trained model available
    to users and other software systems we need to consider a number of factors including
    how frequently predictions should be generated and whether predictions should
    be generated on a single sample of data or batch of samples at a time. In this
    post, we’ll begin to examine **how to implement** the deployment process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们 [上一篇文章](https://www.kdnuggets.com/2020/02/deploy-machine-learning-model.html)
    关于机器学习部署的文章中，我们介绍了什么是部署机器学习模型。我们了解到，为了使训练好的模型的预测结果可供用户和其他软件系统使用，我们需要考虑许多因素，包括预测生成的频率以及是否一次生成单个样本的预测或批量样本的预测。在这篇文章中，我们将开始研究
    **如何实现** 部署过程。
- en: Whereas many blog posts rush directly to implementing Flask APIs or using workflow
    schedulers, we’re going to start at a more fundamental level. We’ll begin by discussing *software
    interfaces*, which can be thought of as the boundaries between pieces of software.
    An analogy is that a piece of software is a puzzle piece, and an entire software
    system is the completed puzzle. When properly designed, interfaces allow you to
    connect many different software components, leading to large and complex projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然许多博客文章直接跳到实现 Flask API 或使用工作流调度程序，我们将从更基础的层面开始。我们将首先讨论 *软件接口*，它可以被认为是软件之间的边界。一个类比是，软件是拼图的一块，整个软件系统是完整的拼图。设计得当时，接口允许你连接许多不同的软件组件，从而形成大型而复杂的项目。
- en: In terms of ML deployment, well-constructed interfaces facilitate reproducible,
    automated, plug-and-play deployments. A good interface lets you easily roll out
    model updates, version control the models you deploy, and more.
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在 ML 部署方面，良好构建的接口有助于实现可重复、自动化的即插即用部署。一个好的接口让你轻松推出模型更新，对你部署的模型进行版本控制，等等。
- en: Let’s get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 开始吧！
- en: What’s an Interface?
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是接口？
- en: 'Imagine a manager who assigns an employee the task of creating a report. A
    good manager might say: "I need you to produce a report with the following charts
    and figures. To produce that report, use customer transaction data." The manager
    has explicitly defined the desired outcome (the report) and hinted at a methodology
    (use of the customer transaction data).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个经理分配给员工创建报告的任务。一位好的经理可能会说：“我需要你生成一个包含以下图表和数据的报告。为生成该报告，请使用客户交易数据。”经理明确了期望的结果（报告），并暗示了一种方法（使用客户交易数据）。
- en: 'In contrast, a bad manager might do any of the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，一位不好的经理可能会做以下任何事情：
- en: '**Not specify the input **– Ask for the report but not specify which data to
    use or hint at whom the employee should speak with to discover appropriate datasets.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不指定输入**——要求报告但未指定使用哪些数据或暗示员工应与谁联系以发现合适的数据集。'
- en: '**Not make the deliverable clear **– Give the employee a bunch of data but
    not tell the employee what should be produced.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不明确交付物**——给员工一堆数据，但不告诉他们应该生产什么。'
- en: '**Micromanage **– Tell the employee what tools to use to produce the report,
    what steps to follow, and promise him that any deviance from this plan will be
    met by swift and firm punishment.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**微观管理**——告诉员工使用哪些工具生成报告，遵循哪些步骤，并承诺任何偏离此计划的行为都将受到迅速且严厉的惩罚。'
- en: '[Software interfaces](https://blog.robertelder.org/interfaces-most-important-software-engineering-concept/) are
    like managers. A good interface explicitly states the necessary inputs and the
    output it produces. For example, an interface implemented as a function will list
    all required arguments and what’s returned by the function. Interfaces can be
    thought of as the "boundaries" between separate chunks of software that define
    how different pieces of software communicate with one another. When interfaces
    are constructed well, different software, even software written by developers
    working on separate teams or companies, can communicate and work in tandem.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[软件接口](https://blog.robertelder.org/interfaces-most-important-software-engineering-concept/)就像管理者。一个好的接口明确说明了必要的输入和它产生的输出。例如，作为函数实现的接口将列出所有必需的参数和函数返回的内容。接口可以被看作是定义不同软件如何相互通信的“边界”。当接口构建良好时，不同的软件，甚至是由不同团队或公司开发的软件，可以相互通信并协同工作。'
- en: Software engineers are taught to focus on the interfaces they develop rather
    than how the functions are implemented. The implementation is important, but can
    always be updated. But it’s significantly harder to update an interface after
    it’s released, especially if your interface is external facing. Therefore time
    invested defining an interface is time well spent.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师被教导要关注他们开发的接口，而不是函数的实现。实现固然重要，但总是可以更新。但更新接口尤其是外部接口在发布后要困难得多。因此，定义接口所投入的时间是值得的。
- en: A Basic Interface for Machine Learning Models
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习模型的基本接口
- en: How would a software engineer think about what a machine learning model actually
    does? Abstractly speaking, a model accepts data, acts on that data in some way,
    and then returns a result. It’s really that simple. How the model is acting on
    the data could be incredibly involved, like a forward pass of a convolutional
    neural network applying convolutions to tensors of image data, but these are implementation
    details.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程师如何看待机器学习模型实际做了什么？从抽象的角度来看，模型接受数据，对这些数据进行某种处理，然后返回结果。就是这么简单。模型如何处理数据可能非常复杂，比如卷积神经网络对图像数据张量进行卷积的前向传播，但这些都是实现细节。
- en: 'The boundary of a machine learning model is made up of the inputs to the model,
    i.e. the features, and the output(s) the model predicts. Therefore a well-constructed
    interface must be built with both the input features and predicted outputs in
    mind. To illustrate, let’s define this interface with a simple function:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习模型的边界由模型的输入，即特征，以及模型预测的输出组成。因此，一个构建良好的接口必须同时考虑输入特征和预测输出。为了说明这一点，让我们用一个简单的函数来定义这个接口：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This function takes as its input a model and a set of input_features and returns
    a prediction. Notice that we haven’t *implemented* the function, i.e., we haven’t
    written *how* the function combines the model and the features to generate the
    prediction. We’ve simply created a contract or a promise – we guarantee the function
    will return a prediction if the caller provides a model and input_features.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的输入是一个*model*和一组*input_features*，并返回一个预测。注意我们还没有*实现*这个函数，即我们还没有编写*如何*将模型和特征结合以生成预测。我们只是创建了一个契约或承诺——我们保证如果调用者提供了一个*model*和*input_features*，函数将返回一个预测。
- en: Multiple Interfaces for Machine Learning Models
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习模型的多个接口
- en: 'The *predict() *method we defined accepts a single feature vector and returns
    a single prediction. How do we know this? The documentation states that *input_features* is
    a numpy array of shape* (1, n) *where *n* is the dimension of the feature vector.
    This is great if your model expects to predict a single instance at a time, but
    not so great if the model is also expected to predict on batches of samples. You
    could work around this by writing for-loops, but it’s unlikely that a loop will
    be very efficient. Instead, we should define another method that directly handles
    the batch case. Let’s call it *predict_batch*:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的*predict()*方法接受一个特征向量并返回一个预测。我们怎么知道这一点？文档说明*input_features*是一个形状为*(1, n)*的numpy数组，其中*n*是特征向量的维度。如果你的模型期望一次预测一个实例，这很好，但如果模型还需要对样本批次进行预测，就不太理想了。你可以通过编写for循环来解决这个问题，但循环的效率可能不高。相反，我们应该定义另一个直接处理批量情况的方法。我们称之为*predict_batch*：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This method defines a contract whereby it promises to return a batch of predictions
    if a model and batch of input features are provided. Again, we haven’t implemented
    the method – that’s left to the developer of the method. The developer may choose
    to use a loop and call *predict *over and over. Or the developer may do something
    else. This is irrelevant for the purposes of deployment. What *does matter* is
    that we have 2 interfaces: one that predicts a sample and another that predicts
    a batch of samples.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法定义了一个契约，承诺在提供模型和输入特征批次时返回一批预测。再次强调，我们尚未实现这个方法——这留给方法的开发者。开发者可以选择使用循环并重复调用*predict*。或者开发者可以做其他事情。这对于部署的目的并不重要。*重要的是*我们有两个接口：一个用于预测单个样本，另一个用于预测一批样本。
- en: Machine Learning Object Oriented Programming – MLOOP
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 机器学习面向对象编程 – MLOOP
- en: So far we’ve ignored the *model *parameter required by both the *predict *and *predict_batch* methods.
    Let me explain why this is problematic for machine learning.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们忽略了*model*参数，这对于*predict*和*predict_batch*方法都是必需的。让我来解释一下这对机器学习来说为什么是个问题。
- en: 'Most engineers developing machine learning models today want to use the best
    tool available. If the engineer is building a classic model, like logistic regression
    or random forest, the engineer might choose to use [scikit-learn](https://scikit-learn.org/stable/).
    But for deep learning, that engineer might choose to use [Tensorflow](https://www.tensorflow.org/) or [PyTorch](https://pytorch.org/).
    Even within classical ML, the engineer may opt for the [xgboost](https://xgboost.readthedocs.io/en/latest/) implementation
    of gradient boosted trees. The model objects from each library have slightly different
    APIs. And we can’t predict what APIs future ML libraries will implement. This
    would make the implementations of our interfaces very messy. For instance, we
    DO NOT want our implementation to look like this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，大多数开发机器学习模型的工程师都希望使用最佳工具。如果工程师正在构建经典模型，如逻辑回归或随机森林，工程师可能会选择使用[scikit-learn](https://scikit-learn.org/stable/)。但对于深度学习，该工程师可能会选择使用[Tensorflow](https://www.tensorflow.org/)或[PyTorch](https://pytorch.org/)。即使在经典机器学习中，工程师也可能选择[xgboost](https://xgboost.readthedocs.io/en/latest/)的梯度提升树实现。每个库中的模型对象具有略微不同的API。我们无法预测未来的ML库将实现哪些API。这将使我们接口的实现变得非常混乱。例如，我们不希望我们的实现看起来像这样：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This implementation would be hard to maintain and would make it difficult to
    debug runtime errors. Also, imagine what would happen if we wanted to pass additional
    parameters to predict when using one model but not another. For instance, what
    if we wished to pass additional parameters, only predicting with an sklearn model.
    The number of arguments to the function would grow, but these parameters would
    be useless for non-sklearn models. How would we describe that in the documentation?
    These are just a few reasons why object-oriented programming, creating classes
    and objects, is preferred.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这种实现方式将很难维护，也会使调试运行时错误变得困难。此外，想象一下，如果我们希望在使用一个模型时传递额外的参数而不是另一个模型会发生什么。例如，如果我们希望仅在预测sklearn模型时传递额外的参数。函数的参数数量将会增加，但这些参数对于非sklearn模型是无用的。我们将如何在文档中描述这一点？这些只是为什么面向对象编程、创建类和对象是更受欢迎的几个原因。
- en: 'Our interface is composed of two methods: *predict *and *predict_batch*. Let’s
    define a base class with these two methods:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的接口由两个方法组成：*predict*和*predict_batch*。让我们定义一个包含这两个方法的基类：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This base class acts as a *template* for our data science team. If a data scientist
    wants to use scikit-learn models, he just needs to subclass the Model class and
    implement the necessary methods. If another data scientist wants to use Tensorflow,
    no problem, just create a Tensorflow subclass! To illustrate, let’s create the
    sklearn subclass:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基类充当了我们数据科学团队的*模板*。如果数据科学家想使用scikit-learn模型，他只需要继承Model类并实现必要的方法。如果另一个数据科学家想使用Tensorflow，没问题，只需创建一个Tensorflow子类！为了说明这一点，让我们创建一个sklearn子类：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Since sklearn Predictors expect 2D input, we reshaped the input_features argument
    in the predict method. This is a key benefit of the object-oriented approach.
    We can define the interface that is relevant for the types of problems we’re solving *AND* take
    advantage of [excellent 3rd party machine learning libraries!](https://github.com/EthicalML/awesome-production-machine-learning)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 由于sklearn Predictors期望2D输入，我们在predict方法中重新调整了input_features参数。这是面向对象方法的一个关键好处。我们可以定义适用于我们解决的问题类型的接口*并且*利用[优秀的第三方机器学习库！](https://github.com/EthicalML/awesome-production-machine-learning)
- en: And the benefits don’t stop there. We can add additional methods that simplify
    our ML workflows. For example, once a model has been trained, we typically need
    a way to serialize the model and then deserialize it at inference time. Hence,
    we can add two methods, serialize() and deserialize(), to our interface. We can
    even provide default implementations of these methods in the base Model class
    and create library-specific implementations in the subclasses.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 好处不仅仅于此。我们可以添加更多简化 ML 工作流的方法。例如，一旦模型被训练，我们通常需要一种方式来序列化模型，然后在推理时进行反序列化。因此，我们可以在接口中添加两个方法，`serialize()`
    和 `deserialize()`。我们甚至可以在基类 `Model` 中提供这些方法的默认实现，并在子类中创建库特定的实现。
- en: Additional examples of useful interface methods include moving serialized models
    from a local filesystem to some model store or remote filesystem like S3\. There’s
    no limit to the methods you can add.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其他有用的接口方法示例包括将序列化模型从本地文件系统移动到某个模型存储或像 S3 这样的远程文件系统。你可以添加的方法没有限制。
- en: Creating good interfaces upfront will save your machine learning team A LOT
    of time as you take on additional projects by making deployments automated and
    repeatable.
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 提前创建良好的接口将为你的机器学习团队节省大量时间，使得在进行额外项目时，部署变得自动化和可重复。
- en: '[Original](https://mlinproduction.com/software-interfaces-for-machine-learning-deployment-deployment-series-02/).
    Reposted with permission.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[原始](https://mlinproduction.com/software-interfaces-for-machine-learning-deployment-deployment-series-02/)。已获许可转载。'
- en: '**Bio:** [Luigi Patruno](https://twitter.com/MLinProduction) is a data scientist
    and machine learning consultant. He is currently the Director of Data Science
    at 2U, where he leads a team of data scientists responsible for building machine
    learning models and infrastructure. As a consultant, Luigi helps companies generate
    value by applying modern data science methods to strategic business and product
    initiatives. He founded [MLinProduction.com](http://mlinproduction.com/) to collect
    and share best practices for operationalizing machine learning and he''s taught
    graduate courses in statistics, data analysis, and big data engineering.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：** [Luigi Patruno](https://twitter.com/MLinProduction) 是数据科学家和机器学习顾问。他目前是
    2U 的数据科学总监，负责领导一个数据科学团队，专注于构建机器学习模型和基础设施。作为顾问，Luigi 帮助公司通过应用现代数据科学方法来实现战略业务和产品目标。他创立了
    [MLinProduction.com](http://mlinproduction.com/) 以收集和分享机器学习操作化的最佳实践，并且教授过统计学、数据分析和大数据工程的研究生课程。'
- en: '**Related:**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[What Does it Mean to Deploy a Machine Learning Model?](https://www.kdnuggets.com/2020/02/deploy-machine-learning-model.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[部署机器学习模型是什么意思？](https://www.kdnuggets.com/2020/02/deploy-machine-learning-model.html)'
- en: '[MLOps for production-level machine learning](https://www.kdnuggets.com/2019/11/cnvrg-mlops-production-machine-learning.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用于生产级机器学习的MLOps](https://www.kdnuggets.com/2019/11/cnvrg-mlops-production-machine-learning.html)'
- en: '[Deployment of Machine learning models using Flask](https://www.kdnuggets.com/2019/12/excelr-deployment-machine-learning-flask.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Flask 部署机器学习模型](https://www.kdnuggets.com/2019/12/excelr-deployment-machine-learning-flask.html)'
- en: '* * *'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[A Full End-to-End Deployment of a Machine Learning Algorithm into a…](https://www.kdnuggets.com/2021/12/deployment-machine-learning-algorithm-live-production-environment.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将机器学习算法完全部署到...](https://www.kdnuggets.com/2021/12/deployment-machine-learning-algorithm-live-production-environment.html)'
- en: '[From Data Collection to Model Deployment: 6 Stages of a Data…](https://www.kdnuggets.com/2023/01/data-collection-model-deployment-6-stages-data-science-project.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从数据收集到模型部署：数据科学项目的 6 个阶段](https://www.kdnuggets.com/2023/01/data-collection-model-deployment-6-stages-data-science-project.html)'
- en: '[Back to Basics Week 4: Advanced Topics and Deployment](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归基础第4周：高级话题和部署](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
- en: '[Top 7 Model Deployment and Serving Tools](https://www.kdnuggets.com/top-7-model-deployment-and-serving-tools)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[顶级7款模型部署和服务工具](https://www.kdnuggets.com/top-7-model-deployment-and-serving-tools)'
- en: '[Software Developer vs Software Engineer](https://www.kdnuggets.com/2022/05/software-developer-software-engineer.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[软件开发人员与软件工程师](https://www.kdnuggets.com/2022/05/software-developer-software-engineer.html)'
- en: '[Software Mistakes and Tradeoffs: New book by Tomasz Lelek and…](https://www.kdnuggets.com/2021/12/manning-software-mistakes-tradeoffs-book.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[软件错误与权衡：Tomasz Lelek的新书](https://www.kdnuggets.com/2021/12/manning-software-mistakes-tradeoffs-book.html)'
