- en: Overview of Python Visualization Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2015/11/overview-python-visualization-tools.html](https://www.kdnuggets.com/2015/11/overview-python-visualization-tools.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**By [Chris Moffitt](http://pbpython.com/author/chris-moffitt.html)**.'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the python world, there are multiple options for visualizing your data.
    Because of this variety, it can be really challenging to figure out which one
    to use when. This article contains a sample of some of the more popular ones and
    illustrates how to use them to create a simple bar chart. I will create examples
    of plotting data with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Pandas](http://pandas.pydata.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Seaborn](http://stanford.edu/~mwaskom/software/seaborn/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ggplot](http://ggplot.yhathq.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Bokeh](http://bokeh.pydata.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[pygal](http://pygal.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Plotly](https://plot.ly/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the examples, I will use pandas to manipulate the data and use it to drive
    the visualization. In most cases these tools can be used without pandas but I
    think the combination of pandas + visualization tools is so common, it is the
    best place to start.
  prefs: []
  type: TYPE_NORMAL
- en: What About Matplotlib?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Matplotlib](http://matplotlib.org/) is the grandfather of python visualization
    packages. It is extremely powerful but with that power comes complexity. You can
    typically do anything you need using matplotlib but it is not always so easy to
    figure out. I am not going to walk through a pure Matplotlib example because many
    of the tools (especially Pandas and Seaborn) are thin wrappers over matplotlib.
    If you would like to read more about it, I went through several examples in my
    [simple graphing](http://pbpython.com/simple-graphing-pandas.html) article.'
  prefs: []
  type: TYPE_NORMAL
- en: My biggest gripe with Matplotlib is that it just takes too much work to get
    reasonable looking graphs. In playing around with some of these examples, I found
    it easier to get nice looking visualization without a lot of code. For one small
    example of the verbose nature of matplotlib, look at the faceting example on this
    [ggplot post](http://blog.yhathq.com/posts/ggplot-for-python.html).
  prefs: []
  type: TYPE_NORMAL
- en: Methodology
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One quick note on my methodology for this article. I am sure that as soon as
    people start reading this, they will point out better ways to use these tools.
    My goal was not to create the exact same graph in each example. I wanted to visualize
    the data in roughly the same way in each example with roughly the same amount
    of time researching the solution.
  prefs: []
  type: TYPE_NORMAL
- en: As I went through this process, the biggest challenge I had was formatting the
    x and y axes and making the data look reasonable given some of the large labels.
    It also took some time to figure out how each tool wanted the data formatted.
    Once I figured those parts out, the rest was relatively simple.
  prefs: []
  type: TYPE_NORMAL
- en: Another point to consider is that a bar plot is probably one of the simpler
    types of graphs to make. These tools allow you to do many more types of plots
    with data. My examples focus more on the ease of formatting than innovative visualization
    examples. Also, because of the labels, some of the plots take up a lot of space
    so I’ve taken the liberty of cutting them off – just to keep the article length
    manageable. Finally, I have resized images so any blurriness is an issue of scaling
    and not a reflection on the actual output quality.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, I’m approaching this from the mindset of trying to use another tool
    in lieu of Excel. I think my examples are more illustrative of displaying in a
    report, presentation, email or on a static web page. If you are evaluating tools
    for real time visualization of data or sharing via some other mechanism; then
    some of these tools offer a lot more capability that I don’t go into.
  prefs: []
  type: TYPE_NORMAL
- en: Data Set
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The [previous article](http://pbpython.com/web-scraping-mn-budget.html) describes
    the data we will be working with. I took the scraping example one layer deeper
    and determined the detail spending items in each category. This data set includes
    125 line items but I have chosen to focus only on showing the top 10 to keep it
    a little simpler. You can find the full data set [here](http://pbpython.com/extras/mn-budget-detail-2014.csv).
  prefs: []
  type: TYPE_NORMAL
- en: Pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I am using a pandas DataFrame as the starting point for all the various plots.
    Fortunately, pandas does supply a built in plotting capability for us which is
    a layer over matplotlib. I will use that as the baseline. First, import our modules
    and read in the data into a budget DataFrame. We also want to sort the data and
    limit it to the top 10 items.
  prefs: []
  type: TYPE_NORMAL
- en: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:10]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the same budget lines for all of our examples. Here is what the
    top 5 items look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '|  | category | detail | amount |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 46 | ADMINISTRATION | Capitol Renovation and Restoration Continued | 126300000
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | UNIVERSITY OF MINNESOTA | Minneapolis; Tate Laboratory Renovation | 56700000
    |'
  prefs: []
  type: TYPE_TB
- en: '| 78 | HUMAN SERVICES | Minnesota Security Hospital – St. Peter | 56317000
    |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | UNIVERSITY OF MINNESOTA | Higher Education Asset Preservation and Replac…
    | 42500000 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | MINNESOTA STATE COLLEGES AND UNIVERSITIES | Higher Education Asset Preservation
    and Replac… | 42500000 |'
  prefs: []
  type: TYPE_TB
- en: 'Now, setup our display to use nicer defaults and create a bar plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pd.options.display.mpl_style = ''default'' budget_plot = budget.plot(kind="bar",x=budget["detail"],
    title="MN Capital Budget - 2014", legend=False)`'
  prefs: []
  type: TYPE_NORMAL
- en: This does all of the heavy lifting of creating the plot using the “detail” column
    as well as displaying the title and removing the legend. Here is the additional
    code needed to save the image as a png.
  prefs: []
  type: TYPE_NORMAL
- en: '`fig = budget_plot.get_figure() fig.savefig("2014-mn-capital-budget.png")`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what it looks like (truncated to keep the article length manageable):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pandas image](../Images/9a85d90b9d744494b5e25628696021c3.png)'
  prefs: []
  type: TYPE_IMG
- en: The basics look pretty nice. Ideally, I’d like to do some more formatting of
    the y-axis but that requires jumping into some matplotlib gymnastics. This is
    a perfectly serviceable visualization but it’s not possible to do a whole lot
    more customization purely through pandas.
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Seaborn](http://stanford.edu/~mwaskom/software/seaborn/) is a visualization
    library based on matplotlib. It seeks to make default data visualizations much
    more visually appealing. It also has the goal of making more complicated plots
    simpler to create. It does integrate well with pandas. My example does not allow
    seaborn to significantly differentiate itself. One thing I like about seaborn
    is the various built in styles which allows you to quickly change the color palettes
    to look a little nicer. Otherwise, seaborn does not do a lot for us with this
    simple chart. Standard imports and read in the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import pandas as pd import seaborn as sns import matplotlib.pyplot as plt`'
  prefs: []
  type: TYPE_NORMAL
- en: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:>10]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'One thing I found out is that I explicitly had to set the order of the items
    on the x_axis using `x_order` This section of code sets the order, and styles
    the plot and bar chart colors:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sns.set_style("darkgrid") bar_plot = sns.barplot(x=budget["detail"],y=budget["amount"],
    palette="muted", x_order=budget["detail"].tolist()) plt.xticks(rotation=>90) plt.show()`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Pandas image](../Images/21b021e7e23ea41286f0a1bdd838c967.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, I had to use matplotlib to rotate the x axis titles so I could
    actually read them. Visually, the display looks nice. Ideally, I’d like to format
    the ticks on the y-axis but I couldn’t figure out how to do that without using
    `plt.yticks` from matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: ggplot
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[ggplot](http://ggplot.yhathq.com/) is similar to Seaborn in that it builds
    on top of matplotlib and aims to improve the visual appeal of matplotlib visualizations
    in a simple way. It diverges from seaborn in that it is a port of ggplot2 for
    R. Given this goal, some of the API is non-pythonic but it is a very powerful.
    I have not used ggplot in R so there was a bit of a learning curve. However, I
    can start to see the appeal of ggplot. The library is being actively developed
    and I hope it continues to grow and mature because I think it could be a really
    powerful option. I did have a few times in my learning where I struggled to figure
    out how to do something. After looking at the code and doing a little googling,
    I was able to figure most of it out. Go ahead and import and read our data:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import pandas as pd from ggplot import *`'
  prefs: []
  type: TYPE_NORMAL
- en: '`budget = pd.read_csv("mn-budget-detail-2014.csv") budget = budget.sort(''amount'',ascending=False)[:>10]`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we construct our plot by chaining together a several ggplot commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`p = ggplot(budget, aes(x="detail",y="amount")) + \ geom_bar(stat="bar", labels=budget["detail"].tolist())
    +\ ggtitle("MN Capital Budget - 2014") + \ xlab("Spending Detail") + \ ylab("Amount")
    + scale_y_continuous(labels=''millions'') + \ theme(axis_text_x=element_text(angle=>90))
    print p`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This seems a little strange – especially using `print p` to display the graph.
    However, I found it relatively straightforward to figure out. It did take some
    digging to figure out how to rotate the text 90 degrees as well as figure out
    how to order the labels on the x-axis. The coolest feature I found was `scale_y_continous`
    which makes the labels come through a lot nicer. If you want to save the image,
    it’s easy with `ggsave` :'
  prefs: []
  type: TYPE_NORMAL
- en: '`ggsave(p, "mn-budget-capital-ggplot.png")`'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the final image. I know it’s a lot of grey scale. I could color it but
    did not take the time to do so.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pandas image](../Images/07a6a2614bd0dd12f908e56d78acb594.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Data Labeling for Machine Learning: Market Overview, Approaches, and Tools](https://www.kdnuggets.com/2021/12/data-labeling-ml-overview-and-tools.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Comparative Overview of the Top 10 Open Source Data Science Tools in 2023](https://www.kdnuggets.com/a-comparative-overview-of-the-top-10-open-source-data-science-tools-in-2023)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 SQL Visualization Tools for Data Engineers](https://www.kdnuggets.com/2023/02/5-sql-visualization-tools-data-engineers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Approaches to Text Summarization: An Overview](https://www.kdnuggets.com/2019/01/approaches-text-summarization-overview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Overview of Logistic Regression](https://www.kdnuggets.com/2022/02/overview-logistic-regression.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[An Overview of Mercury: Creating Data Science Portfolio and…](https://www.kdnuggets.com/2022/05/overview-mercury-creating-data-science-portfolio-notebook-based-webapps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
