- en: 'Testing Like a Pro: A Step-by-Step Guide to Python’s Mock Library'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python''s Mock Library](../Images/73848bdfb2a79aaa807a8fb6a07d8705.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  prefs: []
  type: TYPE_NORMAL
- en: Testing software is crucial for ensuring reliability and functionality across
    different scenarios. However, if the code implementation depends on external services,
    it becomes quite a challenge. This is where mocking comes in. Python’s mock library
    provides tools to create mock objects to replace real objects, making your tests
    easier to maintain. Mocking facilitates focused testing of components and quicker
    testing cycles.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: What is Mocking?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mocking is a technique used in software testing to simulate real objects. Real
    objects are replaced by mock objects to simulate their functionality, allowing
    you to test code in different scenarios and isolation. Mocking is especially useful
    to test specific parts of the codebase without relying on the interaction with
    external systems, databases, or other complex services.
  prefs: []
  type: TYPE_NORMAL
- en: Let me explain this concept with an example. Consider that you have a web application
    that uses an external API to retrieve data. To test without depending on the real
    API, you can make a mock object that mimics the answers of the API. This way,
    you can test your application's functionality without being dependent on the real
    API, which might be slow, unreliable, or not even available during development.
  prefs: []
  type: TYPE_NORMAL
- en: Sounds interesting, right? Let's now go over a detailed how-to for actually
    using this library.
  prefs: []
  type: TYPE_NORMAL
- en: Step-by-Step Guide to Using Mock
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Step 1: Importing the Mock Library'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `unittest.mock` is the standard library in Python (3.3 and in all newer
    versions) that provides mock objects to control the behavior of real objects.
    First you need to import it the `unittest.mock` library.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 2: Creating a Mock Object'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Creating a mock object is straightforward. Once imported, you can instantiate
    a mock object like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, `my_mock` is a mock object that you can configure to simulate the behavior
    of a real object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Setting Return Values'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Mock library provides various ways to configure mock objects and control
    their behavior. For instance, you can specify what a method should return when
    called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Setting Side Effects'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Side effects are additional actions or behaviors triggered when a method of
    a mock object is called, such as raising exceptions or executing functions. Besides
    return values, you can also define attributes or specify side effects like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Output:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, `ValueError` raises whenever `some_method()` is called.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Asserting Calls'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Verifying the method calls is crucial for thorough testing. You can use assertions
    to specify whether a method was called, when, and with what arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`assert_called()`: Returns True if calculate_length was called at least once'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assert_called_once()`: Returns True if calculate_length was called exactly
    once'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assert_called_with(''foo'', ''bar'')`: Returns True if calculate_length was
    called with the same arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assert_called_once_with(''foo'', ''bar'')`: Returns True if calculate_length
    was called exactly once with the same arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If any of these assertions fail on the mock object, an `AssertionError` will
    be raised, indicating that the expected behavior did not match the actual behavior
    of the mock.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 6: Using Patch'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `patch` function allows you to replace real objects with mock objects during
    tests. As discussed earlier, this is particularly useful for simulating third-party
    libraries or APIs, ensuring your tests remain isolated from actual implementations.
    To demonstrate patching, consider the following example function that fetches
    data from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can avoid making real `HTTP` requests by patching the ‘requests.get’ like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The patch decorator is added just above the `test_fetch_data function` to replace
    the `requests.get` function with a mock.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Mocking Classes'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can mock entire classes and their methods to simulate interactions between
    objects. For instance, you can mock a database class to test your application''s
    interaction with the database without the need to set up a real database connection
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: That's it for today's article on `unittest.mock`, a powerful library for testing
    in Python. It enables developers to test code, ensuring smooth interactions between
    objects. With advanced features like specifying side effects, asserting calls,
    mocking classes, and using context managers, testing various scenarios becomes
    easier. Start using mocks in your tests today to ensure higher-quality code and
    smoother deployments.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Hypothesis Testing and A/B Testing](https://www.kdnuggets.com/hypothesis-testing-and-ab-testing)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing the Testing Library for Natural Language Processing](https://www.kdnuggets.com/2023/04/introducing-testing-library-natural-language-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Free Python Resources That Can Help You Become a Pro](https://www.kdnuggets.com/free-python-resources-that-can-help-you-become-a-pro)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to MLOps like a Boss: A Guide to Machine Learning without Tears](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Guide On How To Become A Data Scientist (Step By Step Approach)](https://www.kdnuggets.com/2021/05/guide-become-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
