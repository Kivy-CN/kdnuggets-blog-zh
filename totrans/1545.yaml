- en: Top 10 Coding Mistakes Made by Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html](https://www.kdnuggets.com/2019/04/top-10-coding-mistakes-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Norman Niemer](https://www.linkedin.com/in/normanniemer/), Chief Data
    Scientist**'
  prefs: []
  type: TYPE_NORMAL
- en: A data scientist is a "person who is better at statistics than any software
    engineer and better at software engineering than any statistician". Many data
    scientists have a statistics background and little experience with software engineering.
    I'm a senior data scientist ranked top 1% on Stackoverflow for python coding and
    work with a lot of (junior) data scientists. Here is my list of 10 common mistakes
    I frequently see.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/f1f471b811e4b07b98d166e825945e20.png)'
  prefs: []
  type: TYPE_IMG
- en: 1\. Don't share data referenced in code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data science needs code AND data. So for someone else to be able to reproduce
    your results, they need to have access to the data. Seems basic but a lot of people
    forget to share the data with their code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Use [d6tpipe](https://github.com/d6t/d6tpipe) to share data files
    with your code or upload to S3/web/google drive etc or save to a database so the
    recipient can retrieve files (but don''t add them to git, see below).'
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Hardcode inaccessible paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to mistake 1, if you hardcode paths others don't have access to, they
    can't run your code and have to look in lots of places to manually change paths.
    Booo!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Use relative paths, global path config variables or [d6tpipe](https://github.com/d6t/d6tpipe) to
    make your data easily accessible.'
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Mix data with code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since data science code needs data why not dump it in the same directory? And
    while you are at it, save images, reports and other junk there too. Yikes, what
    a mess!
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Organize your directory into categories, like data, reports,
    code etc. See [Cookiecutter Data Science](https://drivendata.github.io/cookiecutter-data-science/#directory-structure)
    or [d6tflow project templates](https://github.com/d6t/d6tflow-template) (see #5)
    and use tools mentioned in #1 to store and share data.'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Git commit data with source code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most people now version control their code (if you don't that's another mistake!!
    See [git](https://git-scm.com/)). In an attempt to share data, it might be tempting
    to add data files to version control. That's ok for very small files but git is
    not optimized for data, especially large files.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Use tools mentioned in #1 to store and share data. If you really
    want to version control data, see [d6tpipe](https://github.com/d6t/d6tpipe), [DVC](https://dvc.org/) and [Git
    Large File Storage](https://git-lfs.github.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Write functions instead of DAGs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Enough about data, lets talk about the actual code! Since one of the first things
    you learn when you learn to code are functions, data science code is mostly organized
    as a series of functions that are run linearly. That causes several problems,
    see [4 Reasons Why Your Machine Learning Code is Probably Bad](https://github.com/d6t/d6t-python/blob/master/blogs/reasons-why-bad-ml-code.rst).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Instead of linearly chaining functions, data science code is
    better written as a set of tasks with dependencies between them. Use [d6tflow](https://github.com/d6t/d6tflow) or [airflow](https://airflow.apache.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Write for loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like functions, for loops are the first thing you learn when you learn to code.
    Easy to understand, but they are slow and excessively wordy, typically indicating
    you are unaware of vectorized alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: [Numpy](http://www.numpy.org/), [scipy](https://www.scipy.org/) and [pandas](https://pandas.pydata.org/) have
    vectorized functions for most things that you think might require for loops.'
  prefs: []
  type: TYPE_NORMAL
- en: 7\. Don't write unit tests
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As data, parameters or user input change, your code might break, sometimes without
    you noticing. That can lead to bad output and if someone makes decisions based
    on your output, bad data will lead to bad decisions!
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Use `assert` statements to check for data quality. [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/general_utility_functions.html#testing-functions) has
    equality tests, [d6tstack](https://github.com/d6t/d6tstack) has checks for data
    ingestion and [d6tjoin](https://github.com/d6t/d6tjoin/blob/master/examples-prejoin.ipynb) for
    data joins. Code for example data checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 8\. Don't document code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I get it, you're in a hurry to produce some analysis. You hack things together
    to get results to your client or boss. Then a week later they come back and say
    "can you change xyz" or "can you update this please". You look at your code and
    can't remember why you did what you did. And now imagine someone else has to run
    it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Take the extra time, even if it''s after you''ve delivered the
    analysis, to document what you did. You will thank yourself and other will do
    so even more! You''ll look like a pro!'
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Save data as csv or pickle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Back data, it's DATA science after all. Just like functions and for loops, CSVs
    and pickle files are commonly used but they are actually not very good. CSVs don't
    include a schema so everyone has to parse numbers and dates again. Pickles solve
    that but only work in python and are not compressed. Both are not good formats
    to store large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**Solution**: Use [parquet](https://github.com/dask/fastparquet) or other binary
    data formats with data schemas, ideally ones that compress data. [d6tflow](https://github.com/d6t/d6tflow)automatically
    saves data output of tasks as parquet so you don''t have to deal with it.'
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Use jupyter notebooks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lets conclude with a controversial one: jupyter notebooks are as common as
    CSVs. A lot of people use them. That doesn''t make them good. Jupyter notebooks
    promote a lot of bad software engineering habits mentioned above, notably:'
  prefs: []
  type: TYPE_NORMAL
- en: You are tempted to dump all files into one directory
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You write code that runs top-bottom instead of DAGs
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don't modularize your code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Difficult to debug
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Code and output gets mixed in one file
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They don't version control well
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It feels easy to get started but scales poorly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**: Use [pycharm](https://www.jetbrains.com/pycharm/) and/or [spyder](https://www.spyder-ide.org/).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Norman Niemer](https://www.linkedin.com/in/normanniemer/)** is the
    Chief Data Scientist at a large asset manager where he delivers data-driven investment
    insights. He holds a MS Financial Engineering from Columbia University and a BS
    in Banking and Finance from Cass Business School (London).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://github.com/d6t/d6t-python/blob/master/blogs/top10-mistakes-coding.md).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[4 Reasons Why Your Machine Learning Code is Probably Bad](/2019/02/4-reasons-machine-learning-code-probably-bad.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Machine Learning Project Checklist](/2018/12/machine-learning-project-checklist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science Project Flow for Startups](/2019/01/data-science-project-flow-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Mistakes I Made While Switching to Data Science Career](https://www.kdnuggets.com/2023/07/5-mistakes-made-switching-data-science-career.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
