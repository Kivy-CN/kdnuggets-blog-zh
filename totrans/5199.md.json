["```py\nWITH class_count AS (\n    SELECT student_id, COUNT(*) AS num_of_class\n    FROM class_history\n    GROUP BY student_id\n)\nSELECT\n    c.student_id,\n    s.student_name,\n    c.num_of_class\nFROM class_count c\n-- CASE 1: include only active students\nJOIN student s ON c.student_id = s.student_id\n-- CASE 2: include all students\n-- LEFT JOIN student s ON c.student_id = s.student_id\n\n```", "```py\nSELECT\n    student_id,\n    school_year,\n    AVG(gpa) AS avg_gpa\nFROM gpa_history\nWHERE is_required = TRUE\nGROUP BY student_id, school_year\nHAVING AVG(gpa) >= 3.5\n\n```", "```py\nWITH T AS (\nSELECT\n    *,\n    ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY employee_salary DESC) AS rank_in_dep\nFROM employee_salary)\nSELECT * FROM T\nWHERE rank_in_dep <= 3\n-- Note: When using ROW_NUMBER, each row will have a unique rank number and ranks for tied records are assigned randomly. For exmaple, Rimsha and Tiah may be rank 2 or 3 in different query runs.\n\n```"]