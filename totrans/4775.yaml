- en: Basic Image Data Analysis Using Python – Part 4
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 的基础图像数据分析 – 第 4 部分
- en: 原文：[https://www.kdnuggets.com/2018/10/basic-image-analysis-python-p4.html](https://www.kdnuggets.com/2018/10/basic-image-analysis-python-p4.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/10/basic-image-analysis-python-p4.html](https://www.kdnuggets.com/2018/10/basic-image-analysis-python-p4.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '![Image data analysis Python fig 1](../Images/d57ffadf2576d47ee22925b301e894d4.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image data analysis Python fig 1](../Images/d57ffadf2576d47ee22925b301e894d4.png)'
- en: Previously, we’ve seen some of the very basic image analysis operations in Python.
    In this last part of basic image analysis, we’ll go through some of the following
    contents.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们已经看到了一些 Python 中非常基础的图像分析操作。在这最后一部分基础图像分析中，我们将探讨以下内容。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大推荐课程
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速通道进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Following contents is the reflection of my completed academic image processing
    course in the previous term. So, I am not planning on putting anything into production
    sphere. Instead, the aim of this article is to try and realize the fundamentals
    of a few basic image processing techniques. For this reason, I am going to stick
    to using [**SciKit-Image**](https://scikit-image.org/) - [**numpy**](http://www.numpy.org/) mainly
    to perform most of the manipulations, although I will use other libraries now
    and then rather than using most wanted tools like [**OpenCV**](https://opencv.org/) :'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容是我在上一学期完成的学术图像处理课程的反映。因此，我不打算将其应用于生产领域。相反，本文的目的是尝试实现一些基本图像处理技术的基础知识。为此，我将主要使用
    [**SciKit-Image**](https://scikit-image.org/) 和 [**numpy**](http://www.numpy.org/)
    来执行大部分操作，尽管我会不时使用其他库，而不是使用像 [**OpenCV**](https://opencv.org/) 这样的最受欢迎的工具：
- en: 'I wanted to complete this series into two section but due to fascinating contents
    and its various outcome, I have to split it into four parts. You can find the
    first three here:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我原本计划将这个系列分成两部分，但由于内容的吸引力及其各种结果，我不得不将其分为四部分。你可以在这里找到前三部分：
- en: '[Part 1](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)
    | [Part 2](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)
    | [Part 3](https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 1 部分](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)
    | [第 2 部分](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)
    | [第 3 部分](https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html)'
- en: Now, let's get started!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始吧！
- en: Thresholding
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阈值处理
- en: '**Ostu’s Method**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**大津法**'
- en: Thresholding is a very basic operation in image processing. Converting a greyscale
    image to monochrome is a common image processing task. And, a good algorithm always
    begins with a good basis!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 阈值处理是图像处理中的一种非常基础的操作。将灰度图像转换为单色图像是常见的图像处理任务。而且，一个好的算法总是以良好的基础开始！
- en: Otsu thresholding is a simple yet effective global automatic thresholding method
    for binarizing grayscale images such as foregrounds and backgrounds. In image
    processing, Otsu’s thresholding method (1979) is used for automatic **binarization** level
    decision, based on the shape of the **histogram**. It is based entirely on computation
    performed on the histogram of an image.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 大津阈值处理是一种简单而有效的全局自动阈值方法，用于将灰度图像（如前景和背景）二值化。在图像处理领域，大津阈值处理方法（1979年）用于基于**直方图**的形状进行自动**二值化**水平决策。它完全基于对图像直方图的计算。
- en: The algorithm assumes that the image is composed of two basic classes: **Foreground** and **Background**.
    It then computes an optimal threshold value that minimizes the weighted within
    class variances of these two classes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该算法假设图像由两类基本类别组成：**前景**和**背景**。然后计算一个最佳阈值，以最小化这两类的加权类内方差。
- en: Otsu threshold is used in many applications from medical imaging to low-level
    computer vision. It’s many advantages and assumptions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Otsu 阈值在从医学成像到低级计算机视觉的许多应用中被使用。它有许多优点和假设。
- en: '[Mathematical Formulation](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#5-bullet) of
    Otsu method. This will redirect you to my homepage where we explained mathematics
    behind Otsu method.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Otsu 方法的数学公式](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#5-bullet)。这将引导你到我的主页，在那里我们解释了
    Otsu 方法背后的数学。'
- en: '**Algorithm**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法**'
- en: 'If we incorporate a little math into that simple step-wise algorithm, such
    an explanation evolves:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个简单的逐步算法中加入一点数学，这样的解释就会演变：
- en: Compute histogram and probabilities of each intensity level.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算每个强度级别的直方图和概率。
- en: Set up initial wiand μi.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置初始 wi 和 μi。
- en: 'Step through from threshold **t = 0 **to **t = L-1**:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从阈值 **t = 0** 到 **t = L-1** 步进：
- en: update: wi and μi
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新： wi 和 μi
- en: compute: σ2b(t)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算： σ2b(t)
- en: The Desired threshold corresponds to the maximum value of σ2b(t).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 期望的阈值对应于 σ2b(t)的最大值。
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Image data analysis Python fig 2](../Images/ea7b345bb043849dbd160e1398ef47ac.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图像数据分析 Python 图 2](../Images/ea7b345bb043849dbd160e1398ef47ac.png)'
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Image data analysis Python fig 3](../Images/16c258ad0b5c430e2605845ba24097a9.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图像数据分析 Python 图 3](../Images/16c258ad0b5c430e2605845ba24097a9.png)'
- en: Nice but not Great. Otsu’s method exhibits the relatively good performance if
    the histogram can be assumed to have **bimodal distribution** and assumed to possess
    a deep and sharp valley between two peaks.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 好，但不完美。如果直方图可以假设具有**双峰分布**并假设在两个峰之间具有深且尖锐的谷，则 Otsu 方法表现相对较好。
- en: So, now if the object area is small compared with the background area, the histogram
    no longer exhibits bimodality and if the variances of the object and the background
    intensities are large compared to the mean difference, or the image is severely
    corrupted by additive noise, the sharp valley of the gray level histogram is degraded.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果物体区域相对于背景区域较小，则直方图不再表现出双峰性，并且如果物体和背景强度的方差与均值差异相比较大，或者图像被加性噪声严重污染，灰度直方图的尖锐谷值会被退化。
- en: As a result, the possibly incorrect threshold determined by Otsu’s method results
    in the segmentation error. But we can further [improve Otsu’s method](https://en.wikipedia.org/wiki/Otsu%27s_method#Improvements).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，Otsu 方法确定的可能不正确的阈值会导致分割错误。但我们可以进一步 [改进 Otsu 方法](https://en.wikipedia.org/wiki/Otsu%27s_method#Improvements)。
- en: '**KMeans Clustering**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**KMeans 聚类**'
- en: k-means clustering is a method of [vector quantization](https://en.wikipedia.org/wiki/Vector_quantization),
    originally from signal processing, that is popular for [cluster analysis](https://en.wikipedia.org/wiki/Cluster_analysis) in [data
    mining](https://en.wikipedia.org/wiki/Data_mining).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: k-means 聚类是一种 [向量量化](https://en.wikipedia.org/wiki/Vector_quantization)方法，源自信号处理，在 [聚类分析](https://en.wikipedia.org/wiki/Cluster_analysis) 和 [数据挖掘](https://en.wikipedia.org/wiki/Data_mining)中广受欢迎。
- en: In Otsu thresholding, we found the threshold which minimized the intra-segment
    pixel variance. So, rather than looking for a threshold from a gray level image,
    we can look for clusters in color space, and by doing so we end up with the [K-means
    clustering](https://en.wikipedia.org/wiki/K-means_clustering) technique.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Otsu 阈值处理中，我们找到最小化类内像素方差的阈值。因此，我们可以在色彩空间中寻找聚类，而不是从灰度图像中寻找阈值，这样我们就得到了 [K-means
    聚类](https://en.wikipedia.org/wiki/K-means_clustering) 技术。
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Image data analysis Python fig 4](../Images/e0c6906b53ae59c7e7ccfea9d4ef17b6.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图像数据分析 Python 图 4](../Images/e0c6906b53ae59c7e7ccfea9d4ef17b6.png)'
- en: For clustering the image, we need to convert it into a two-dimensional array.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了对图像进行聚类，我们需要将其转换为二维数组。
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Next, we use [scikit-learn’s cluster](http://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html)
    method to create clusters. We pass **n_clusters** as 5 to form five clusters.
    The clusters appear in the resulting image, dividing it into five parts with distinct
    colors.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用 [scikit-learn 的 cluster](http://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html)
    方法来创建聚类。我们将 **n_clusters** 设为 5 以形成五个聚类。结果图像中会出现这些聚类，将其分成五个具有不同颜色的部分。
- en: The clustering number 5 was chosen heuristically for this demonstration. One
    can change the number of clusters to visually validate image with different colors
    and decide that closely matches the required number of clusters.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类数5是通过启发式选择的用于演示。可以更改簇的数量，以视觉验证不同颜色的图像，并确定最接近所需簇数的设置。
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once the clusters are formed, we can recreate the image with the cluster centers
    and labels to display the image with grouped patterns.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦簇形成后，我们可以使用簇中心和标签重建图像，以显示具有分组模式的图像。
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Image data analysis Python fig 5](../Images/eb3e583500ef6bd783f1481e716410b2.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图像数据分析 Python 图 5](../Images/eb3e583500ef6bd783f1481e716410b2.png)'
- en: Line Detection
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线检测
- en: '**Hough Transform**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**霍夫变换**'
- en: Hough Transform is a popular technique to detect any shape if we can represent
    that shape in mathematical form. It can detect the shape even if it is broken
    or distorted a little bit. We won’t go too deeper to analyze the mechanism of
    Hough transform rather than giving intuitive mathematical description before implementing
    it on code and also provide some resource to understand it more in details.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 霍夫变换是一种流行的技术，用于检测任何形状，只要我们能够将该形状表示为数学形式。即使形状稍微破损或扭曲，它也能检测到。我们不会深入分析霍夫变换的机制，而是提供直观的数学描述，然后在代码中实现，并提供一些资源以便更详细地理解它。
- en: '[Mathematical Formulation of Hough Transform](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#7-bullet).
    This will redirect you to my homepage where we explained mathematics behind Hough
    Transform method.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[霍夫变换的数学公式](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#7-bullet)。这将会重定向到我的主页，在那里我们解释了霍夫变换方法背后的数学。'
- en: '![Image data analysis Python fig 6](../Images/268cf721de42490cda25029da2520da4.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图像数据分析 Python 图 6](../Images/268cf721de42490cda25029da2520da4.png)'
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Algorithm**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法**'
- en: Corner or edge detection
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角点或边缘检测
- en: ρrange and θ range creation
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ρ范围和θ范围的创建
- en: 'ρ : -Dmax to Dmax'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ρ：-Dmax 到 Dmax
- en: 'θ : -90 to 90'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: θ：-90 到 90
- en: Hough accumulator
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 霍夫累加器
- en: 2D array with the number of rows equal to the number of ρvalues and the number
    of columns equal to the number of θ
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D 数组，其中行数等于ρ值的数量，列数等于θ的数量。
- en: Voting in the accumulator
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在累加器中进行投票
- en: For each edge point and for each θ value, find the nearest ρvalue and increment
    that index in the accumulator.
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个边缘点和每个θ值，找到最近的ρ值，并在累加器中递增该索引。
- en: Peak finding
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 峰值寻找
- en: Local maxima in the accumulator indicate the parameters of the most prominent
    lines in the input image.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 累加器中的局部最大值表示输入图像中最突出的线条的参数。
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Edge Detection**'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**边缘检测**'
- en: Edge detection is an image processing technique for finding the boundaries of
    objects within images. It works by detecting discontinuities in brightness. Common
    edge detection algorithms include
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘检测是一种图像处理技术，用于找到图像中对象的边界。它通过检测亮度的不连续性来工作。常见的边缘检测算法包括：
- en: Sobel
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sobel
- en: Canny
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Canny
- en: Prewitt
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Prewitt
- en: Roberts and
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Roberts 和
- en: fuzzy logic methods.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模糊逻辑方法。
- en: Here, We’ll cover one of the most popular methods, which is the **Canny Edge
    Detection**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将介绍最流行的方法之一，即**Canny 边缘检测**。
- en: '**[Canny Edge Detection](https://en.wikipedia.org/wiki/Canny_edge_detector#Process_of_Canny_edge_detection_algorithm)**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Canny 边缘检测](https://en.wikipedia.org/wiki/Canny_edge_detector#Process_of_Canny_edge_detection_algorithm)**'
- en: 'A multi-stage edge detection operation capable of detecting a wide range of
    edges in images. Now, the Process of Canny edge detection algorithm can be broken
    down into 5 different steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一种多阶段边缘检测操作，能够检测图像中各种边缘。现在，Canny 边缘检测算法的过程可以分解为 5 个不同的步骤：
- en: Apply Gaussian Filter
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用高斯滤波器
- en: Find the intensity gradients
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到强度梯度
- en: Apply non-maximum suppression
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用非最大抑制
- en: Apply double threshold
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用双重阈值
- en: Track edge by hysteresis.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过滞后跟踪边缘。
- en: Let’s understand each of them intuitively. For a more comprehensive overview,
    please check the given link at the end of this article. However, this article
    is already becoming too big, so we decide not to provide the full implementation
    of code here rather than giving an intuitive overview of an algorithm of that
    code. But one can skip and jump to the [repo](https://github.com/iphton/Image-Data-Analysis-Using-Pythons/tree/gh-pages/Segmentation/Object%20Detection/Canny%20Edge%20Detector) for
    the code :)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直观地理解其中的每一个。有关更全面的概述，请查看本文末尾提供的链接。然而，本文已经变得很长，因此我们决定不在此处提供完整的代码实现，而是给出该代码算法的直观概述。但可以跳到[代码库](https://github.com/iphton/Image-Data-Analysis-Using-Pythons/tree/gh-pages/Segmentation/Object%20Detection/Canny%20Edge%20Detector)查看代码
    :)
- en: '[The process](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#8-bullet) of
    Canny Edge Detection. . This will redirect you to my homepage where we explained
    mathematics behind Canny Edge method.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[Canny边缘检测的过程](https://iphton.github.io/iphton.github.io/Image-Processing-in-Python-Part-2/#8-bullet)。这将重定向到我的主页，我们在其中解释了Canny边缘检测方法背后的数学原理。'
- en: At that ends the 4-part series on Basic Image-Processing in Python. I hope everyone
    was able to follow along, and if you feel that I have done an important mistake,
    please let me know in the comments!
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着Python中基础图像处理的4部分系列的结束。我希望大家能够跟上，如果你觉得我犯了重要错误，请在评论中告诉我！
- en: The entire source code is available on : [GitHub.](https://github.com/iphton/Image-Data-Analysis-Using-Pythons)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可以在：[GitHub.](https://github.com/iphton/Image-Data-Analysis-Using-Pythons)
- en: '**Related:**'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容：**'
- en: '[Basic Image Data Analysis Using Numpy and OpenCV – Part 1](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Numpy和OpenCV进行基础图像数据分析 – 第1部分](https://www.kdnuggets.com/2018/07/basic-image-data-analysis-numpy-opencv-p1.html)'
- en: '[Basic Image Processing in Python – Part 2](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的基础图像处理 – 第二部分](https://www.kdnuggets.com/2018/07/image-data-analysis-numpy-opencv-p2.html)'
- en: '[Basic Image Data Analysis Using Python – Part 3](https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Python进行基础图像数据分析 – 第3部分](https://www.kdnuggets.com/2018/09/image-data-analysis-python-p3.html)'
- en: More On This Topic
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets新闻，6月29日：数据科学的20个基本Linux命令……](https://www.kdnuggets.com/2022/n26.html)'
- en: '[It''s alive! Build your first robots with Python and some cheap,…](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[它活过来了！用Python和一些便宜的组件构建你的第一个机器人……](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
- en: '[A Guide to Train an Image Classification Model Using Tensorflow](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Tensorflow训练图像分类模型指南](https://www.kdnuggets.com/2022/12/guide-train-image-classification-model-tensorflow.html)'
- en: '[How I Did Automatic Image Labeling Using Grounding DINO](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我如何使用Grounding DINO进行自动图像标注](https://www.kdnuggets.com/2023/05/automatic-image-labeling-grounding-dino.html)'
- en: '[How to Implement Agentic RAG Using LangChain: Part 1](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用LangChain实现Agentic RAG：第1部分](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
- en: '[The 8 Basic Statistics Concepts for Data Science](https://www.kdnuggets.com/2020/06/8-basic-statistics-concepts.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学的8个基本统计概念](https://www.kdnuggets.com/2020/06/8-basic-statistics-concepts.html)'
