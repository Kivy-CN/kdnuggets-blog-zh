- en: Introduction to Memory Profiling in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/introduction-to-memory-profiling-in-python](https://www.kdnuggets.com/introduction-to-memory-profiling-in-python)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Introduction to Memory Profiling in Python](../Images/d58b33ad6dcd7195d29965577c93d88b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Profiling Python code is helpful to understand how the code works and identify
    opportunities for optimization. You’ve probably profiled your Python scripts for
    [time-related metrics](/profiling-python-code-using-timeit-and-cprofile)—measuring
    execution times of specific sections of code.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: But profiling for memory—to understand memory allocation and deallocation during
    execution—is just as important. Because memory profiling can help identify memory
    leaks, resource utilization, and potential issues with scaling.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we’ll explore profiling Python code for memory usage using
    the Python package [memory-profiler](https://pypi.org/project/memory-profiler/).
  prefs: []
  type: TYPE_NORMAL
- en: Installing the memory-profiler Python Package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start by installing the memory-profiler Python package using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: Install memory-profiler in a dedicated [virtual environment](https://docs.python.org/3/library/venv.html)
    for the project instead of in your global environment. We''ll also be using the
    plotting capabilities available in memory-profiler to plot the memory usage, which
    requires [matplotlib](https://matplotlib.org/). So make sure you also have matplotlib
    installed in the project’s virtual environment.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Profiling Memory Usage with the @profile Decorator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a Python script (say main.py) with a function `process_strs`:'
  prefs: []
  type: TYPE_NORMAL
- en: The function creates two super long Python strings `str1` and `str2` and concatenates
    them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The keyword argument `reps` controls the number of times the hardcoded strings
    are to be repeated to create `str1` and `str2`. And we give it a default value
    of 10**6 which will be used if the function called does not specify the value
    of `reps`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then explicitly delete `str2`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function returns the concatenated string `str3`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the script should give you a similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Memory Profiling in Python](../Images/6f098866cdf88bcd70a3cfaebcb864e6.png)'
  prefs: []
  type: TYPE_IMG
- en: As seen in the output, we’re able to see the memory used, the increment with
    each subsequent string creation and the string deletion step freeing up some of
    the used memory.
  prefs: []
  type: TYPE_NORMAL
- en: Running the mprof command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of running the Python script as shown above, you can also run the `mprof`
    command like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When you run this command, you should also be able to see a .dat file with the
    memory usage data. You’ll have one .dat file every time you run the `mprof` command—identified
    by the timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Memory Profiling in Python](../Images/405aef5bf7187af89b0222bc460bc92a.png)'
  prefs: []
  type: TYPE_IMG
- en: Plotting Memory Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes it's easier to analyze memory usage from a plot instead of looking
    at numbers. Remember we discussed matplotlib being a required dependency to use
    the plotting capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `mprof plot` command to plot the data in the .dat file and
    save it to an image file (here output.png):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: By default, `mprof plot` used the data from the most recent run of the `mprof`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Memory Profiling in Python](../Images/99137eda0d7575aad3048180925e9d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the timestamps mentioned in the plot as well.
  prefs: []
  type: TYPE_NORMAL
- en: Logging Memory Usage Profile to a Log File
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Alternatively, you can log the memory usage statistics to a preferred log file
    in the working directory. Here, we create a file handler `mem_logs` to the log
    file, and set the `stream` argument in the `@profile` decorator to the file handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you now run the script, you should be able to see the mem_profile.log
    file in your working directory with the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to Memory Profiling in Python](../Images/9b3d264491646af8f32dd27a1b578add.png)'
  prefs: []
  type: TYPE_IMG
- en: Profiling Using the memory_usage Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also use the `memory_usage()` function to understand the resources required
    for a specific function to execute—sampled at regular time intervals.
  prefs: []
  type: TYPE_NORMAL
- en: The `memory_usage` function takes in the function to profile, positional and
    keyword arguments as a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we’d like to find the memory usage of the `process_strs` function with
    the keyword argument `reps` set to 10**7\. We also set the sampling interval to
    0.1 s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the corresponding output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can also adjust the sampling interval based on how often you want the memory
    usage to be captured. As an example, we set the interval to 0.01 s; meaning we’ll
    now get a more granular view of the memory utilized.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You should be able to see a similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we learned how to get started with profiling Python scripts
    for memory usage.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, we learned how to do this using the memory-profiler package. We
    used the `@profile` decorator and the `memory_usage()` function to get the memory
    usage of a sample Python script. We also learned how to use the capabilities such
    as plotting the memory usage and capturing the stats in a log file.
  prefs: []
  type: TYPE_NORMAL
- en: If you’re interested in profiling your Python script for execution times, consider
    reading [Profiling Python Code Using timeit and cProfile](/profiling-python-code-using-timeit-and-cprofile).
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Profiling Python Code Using timeit and cProfile](https://www.kdnuggets.com/profiling-python-code-using-timeit-and-cprofile)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Perform Memory-Efficient Operations on Large Datasets with Pandas](https://www.kdnuggets.com/how-to-perform-memory-efficient-operations-on-large-datasets-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Memory Complexity with Transformers](https://www.kdnuggets.com/2022/12/memory-complexity-transformers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Python Libraries for Data Cleaning](https://www.kdnuggets.com/2023/03/introduction-python-libraries-data-cleaning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Statistical Learning, Python Edition: Free Book](https://www.kdnuggets.com/2023/07/introduction-statistical-learning-python-edition-free-book.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
