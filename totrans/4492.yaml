- en: Build PyTorch Models Easily Using torchlayers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 torchlayers 轻松构建 PyTorch 模型
- en: 原文：[https://www.kdnuggets.com/2020/04/pytorch-models-torchlayers.html](https://www.kdnuggets.com/2020/04/pytorch-models-torchlayers.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/04/pytorch-models-torchlayers.html](https://www.kdnuggets.com/2020/04/pytorch-models-torchlayers.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: PyTorch continues to enjoy an impressive level of general interest, judging
    by [online searches](https://trends.google.com/trends/explore?date=today%205-y&geo=US&q=%2Fg%2F11gd3905v1)
    and, more importantly, [continues to increase its rate of adoption](/2020/01/openai-pytorch-adoption.html).
    PyTorch is thought of as powerful and flexible, a pair of characteristics which
    are welcome by researchers. However, PyTorch has, in the past, been susceptible
    to criticism by practitioners for its lack of a simplified higher-level API, such
    as TensorFlow's Keras. This situation has recently changed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 [在线搜索](https://trends.google.com/trends/explore?date=today%205-y&geo=US&q=%2Fg%2F11gd3905v1)
    和更重要的 [PyTorch 采用率的持续增长](/2020/01/openai-pytorch-adoption.html) 来看，PyTorch 继续受到广泛关注。PyTorch
    被认为是强大而灵活的，这对研究人员来说是受欢迎的。然而，过去 PyTorch 因缺乏类似 TensorFlow 的 Keras 的简化高级 API 而受到批评。这个情况最近发生了变化。
- en: '![Figure](../Images/920a252480639f8131d0b2e4b22d5974.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/920a252480639f8131d0b2e4b22d5974.png)'
- en: '**[torchlayers](https://github.com/szymonmaszke/torchlayers)** aims to do for
    PyTorch what Keras has done for TensorFlow. Concisely defined via the project''s
    developers:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**[torchlayers](https://github.com/szymonmaszke/torchlayers)** 旨在为 PyTorch
    做到 Keras 对 TensorFlow 所做的事情。简洁地由项目开发者定义：'
- en: torchlayers is a library based on PyTorch providing **automatic shape and dimensionality
    inference of `torch.nn` layers** + additional building blocks featured in current
    SOTA architectures (e.g. Efficient-Net).
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: torchlayers 是一个基于 PyTorch 的库，提供 **`torch.nn` 层的自动形状和维度推断** + 当前 SOTA 架构中的附加构建块（例如
    Efficient-Net）。
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Above requires no user intervention (except single call to torchlayers.build)
    similarly to the one seen in Keras.
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 上述操作无需用户干预（除了对 torchlayers.build 的单次调用），类似于 Keras 中的操作。
- en: Aside from the shape and dimensionality inference mentioned above, torchlayers
    includes additional Keras-like layers such as `[torchlayers.Reshape](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=reshape#torchlayers.Reshape)`
    (reshapes input tenors while preserving batch dimensions), includes SOTA layers
    previously seen in ImageNet competitions (`[PolyNet](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.convolution.html?highlight=polynet#torchlayers.convolution.Poly)`,
    for example), and provides some useful defaults such as convolution kernel size
    (the default in torchlayers is 3).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述的形状和维度推断，torchlayers 还包括类似 Keras 的附加层，例如 `[torchlayers.Reshape](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=reshape#torchlayers.Reshape)`（在保持批次维度的同时重塑输入张量），包含之前在
    ImageNet 竞赛中看到的 SOTA 层（例如 `[PolyNet](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.convolution.html?highlight=polynet#torchlayers.convolution.Poly)`），并提供一些有用的默认设置，例如卷积核大小（torchlayers
    的默认值为 3）。
- en: 'Installation is simple using pip:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 pip 安装很简单：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Additional installation information (re: Docker images and GPUs) [can be found
    here](https://szymonmaszke.github.io/torchlayers/#installation). Full torchlayers
    documentation [can be found here](https://szymonmaszke.github.io/torchlayers/).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的安装信息（如 Docker 镜像和 GPU）[可以在这里找到](https://szymonmaszke.github.io/torchlayers/#installation)。完整的
    torchlayers 文档 [可以在这里找到](https://szymonmaszke.github.io/torchlayers/)。
- en: 'The torchlayers GitHub page provides a few examples to show off some of its
    features. I like the [Simple image and text classifier in one!](https://github.com/szymonmaszke/torchlayers#simple-image-and-text-classifier-in-one)
    example, the code for which I have replicated below. This example demonstrates:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: torchlayers 的 GitHub 页面提供了一些示例来展示其功能。我喜欢这个 [简单的图像和文本分类器！](https://github.com/szymonmaszke/torchlayers#simple-image-and-text-classifier-in-one)
    示例，下面我复制了它的代码。这个示例展示了：
- en: '`torch.nn` and `torchlayers` layer intermixing'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`torch.nn` 和 `torchlayers` 层的混合使用'
- en: shape and dimensionality inference (`Conv` and `Linear` input and `BatchNorm`)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 形状和维度推断（`Conv` 和 `Linear` 输入及 `BatchNorm`）
- en: default Conv kernel size
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认卷积核大小
- en: '`Conv` padding defaults to "same"'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Conv` 填充默认设置为 "same"'
- en: use of torchlayers pooling layer (`GlobalMaxPool`, similar to Keras)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 torchlayers 池化层（`GlobalMaxPool`，类似于 Keras）
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A defined network can then be built using `[torchlayers.build](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=build#torchlayers.build)`
    while specifying input shape (input shapes shown below for both image and text
    classification, for the model defined above):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 然后可以使用 `[torchlayers.build](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=build#torchlayers.build)`
    来构建一个定义的网络，同时指定输入形状（下面展示了图像和文本分类的输入形状，适用于上面定义的模型）：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`build` obviously works like in Keras, performing the equivalent of compiling
    the model to PyTorch primitives; it allows for some additional functionality via
    a `post_build` function (such as weight initialization, shown below), which you
    can [find more about here](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=build#torchlayers.build).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`build` 显然像在 Keras 中一样工作，将模型编译为 PyTorch 基本操作；它通过 `post_build` 函数（例如下面显示的权重初始化）提供一些附加功能，你可以在[这里查看更多](https://szymonmaszke.github.io/torchlayers/packages/torchlayers.html?highlight=build#torchlayers.build)。'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[torchlayers](https://github.com/szymonmaszke/torchlayers) provides some helpful
    features for Keras-like model building using PyTorch, and fills an obvious hole.
    Time will tell how the project develops and catches on long-term, but it''s certainly
    off to a promising start.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[torchlayers](https://github.com/szymonmaszke/torchlayers) 提供了一些有助于使用 PyTorch
    进行类似 Keras 的模型构建的功能，并填补了明显的空白。时间将证明该项目如何发展和长期受欢迎，但它无疑有一个有前途的开始。'
- en: '**Related**:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关**：'
- en: '[OpenAI is Adopting PyTorch... They Aren’t Alone](/2020/01/openai-pytorch-adoption.html)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OpenAI 正在采用 PyTorch... 他们并不孤单](/2020/01/openai-pytorch-adoption.html)'
- en: '[A Gentle Introduction to PyTorch 1.2](/2019/09/gentle-introduction-pytorch-12.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 1.2 的温和介绍](/2019/09/gentle-introduction-pytorch-12.html)'
- en: '[Tokenization and Text Data Preparation with TensorFlow & Keras](/2020/03/tensorflow-keras-tokenization-text-data-prep.html)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 TensorFlow 和 Keras 进行标记化和文本数据准备](/2020/03/tensorflow-keras-tokenization-text-data-prep.html)'
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Scrape Images Easily from Websites in A No-Coding Way](https://www.kdnuggets.com/2022/06/octoparse-scrape-images-easily-websites-nocoding-way.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[轻松从网站抓取图像，无需编码](https://www.kdnuggets.com/2022/06/octoparse-scrape-images-easily-websites-nocoding-way.html)'
- en: '[Explore LLMs Easily on Your Laptop with openplayground](https://www.kdnuggets.com/2023/04/explore-llms-easily-laptop-openplayground.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在你的笔记本电脑上轻松探索 LLMs 使用 openplayground](https://www.kdnuggets.com/2023/04/explore-llms-easily-laptop-openplayground.html)'
- en: '[Easily Integrate LLMs into Your Scikit-learn Workflow with Scikit-LLM](https://www.kdnuggets.com/easily-integrate-llms-into-your-scikit-learn-workflow-with-scikit-llm)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Scikit-LLM 将 LLMs 轻松集成到你的 Scikit-learn 工作流中](https://www.kdnuggets.com/easily-integrate-llms-into-your-scikit-learn-workflow-with-scikit-llm)'
- en: '[How to Start Using Natural Language Processing With PyTorch](https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何开始使用 PyTorch 进行自然语言处理](https://www.kdnuggets.com/2022/04/start-natural-language-processing-pytorch.html)'
- en: '[A Practical Guide to Transfer Learning using PyTorch](https://www.kdnuggets.com/2023/06/practical-guide-transfer-learning-pytorch.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyTorch 进行迁移学习的实用指南](https://www.kdnuggets.com/2023/06/practical-guide-transfer-learning-pytorch.html)'
- en: '[How to Build a Real-Time Recommendation Engine Using Graph Databases](https://www.kdnuggets.com/2023/08/build-realtime-recommendation-engine-graph-databases.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用图形数据库构建实时推荐引擎](https://www.kdnuggets.com/2023/08/build-realtime-recommendation-engine-graph-databases.html)'
