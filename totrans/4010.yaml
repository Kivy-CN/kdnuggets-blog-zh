- en: 'Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient
    Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 掌握 Python：编写清晰、有组织和高效代码的 7 种策略
- en: 原文：[https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)
- en: '![Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient
    Code](../Images/3e0d360397d3de2ed95cd5185703e278.png)Image by Author'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '![掌握 Python：编写清晰、有组织和高效代码的 7 种策略](../Images/3e0d360397d3de2ed95cd5185703e278.png)
    作者提供的图片'
- en: Have you ever compared your Python code to that of experienced developers and
    felt a stark difference? Despite learning Python from online resources, there's
    often a gap between beginner and expert-level code. That's because experienced
    developers adhere to best practices established by the community. These practices
    are often overlooked in online tutorials but are crucial for large-scale applications.
    In this article, I will be sharing 7 tips that I use in my production code for
    clearer and more organized code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您是否曾将自己的 Python 代码与经验丰富的开发者的代码进行比较，感到差异很大？尽管从在线资源中学习 Python，但初学者和专家级代码之间常常存在差距。这是因为经验丰富的开发者遵循了社区建立的最佳实践。这些实践在在线教程中经常被忽视，但对于大规模应用程序至关重要。在本文中，我将分享我在生产代码中使用的
    7 个技巧，以编写更清晰、更有组织的代码。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您的组织在 IT 方面'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 1\. Type Hinting and Annotations
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 类型提示和注解
- en: Python is a dynamically typed programming language, where the variable types
    are inferred at runtime. While it allows for flexibility, it significantly reduces
    code readability and understanding in a collaborative setting.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种动态类型编程语言，变量类型在运行时推断。虽然它允许灵活性，但在协作环境中会显著降低代码的可读性和理解度。
- en: Python provides support for type hinting in function declarations that serve
    as an annotation of the function argument types and the return types. Even though
    *Python doesn't enforce these types during runtime*, it's still helpful because
    it makes your code easier to understand for other people (and yourself!).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在函数声明中提供了类型提示支持，作为函数参数类型和返回类型的注解。尽管*Python 在运行时不会强制这些类型*，但它仍然有助于使您的代码更容易被其他人（以及您自己！）理解。
- en: 'Starting with a basic example, here is a simple function declaration with type
    hinting:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个简单的例子开始，这里是一个带有类型提示的简单函数声明：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, even though the function is fairly self-explanatory, we see that the function
    parameters and return values are denoted as int type. The function body could
    be a single line, as here, or several hundred lines. Yet, we can understand the
    pre-conditions and return types just by looking at the function declaration.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，即使函数本身比较直观，我们仍然可以看到函数参数和返回值被标注为 int 类型。函数体可以是一行代码，如这里的例子，或者是数百行代码。然而，我们可以仅通过查看函数声明来理解前置条件和返回类型。
- en: '*It''s important to know that these annotations are just for clarity and guidance;
    they don''t enforce the types during execution.* So, even if you pass in values
    of different types, like strings instead of integers, the function will still
    run. But be cautious: if you don''t provide the expected types, it might lead
    to unexpected behavior or errors during runtime. For instance, in the provided
    example, the function **sum()** expects two integers as arguments. But if you
    try to add a string and an integer, Python will throw a runtime error. Why? Because
    it doesn''t know how to add a string and an integer together! It''s like trying
    to add apples and oranges – it just doesn''t make sense. However, if both arguments
    are strings, it will concatenate them without any issue.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*了解这些注释仅用于清晰和指导非常重要；它们在执行过程中并不会强制类型。* 因此，即使你传入不同类型的值，如字符串而不是整数，函数仍然会运行。但要小心：如果你没有提供预期的类型，可能会导致运行时出现意外行为或错误。例如，在提供的示例中，函数**sum()**期望两个整数作为参数。但是，如果你尝试将字符串和整数相加，Python
    会抛出运行时错误。为什么？因为它不知道如何将字符串和整数相加！这就像尝试将苹果和橙子相加——这根本没有意义。然而，如果两个参数都是字符串，它将毫无问题地连接它们。'
- en: 'Here''s the clarified version with test cases:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是带有测试用例的澄清版本：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Typing Library for Advanced Type Hinting
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级类型提示的类型库
- en: For advanced annotations, Python includes the typing standard library. Let us
    see its use in a more interesting approach.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于高级注释，Python 包含了 typing 标准库。让我们以更有趣的方式来看看它的使用。
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, we alter the same summation function that now accepts a numpy array or
    list iterable. It computes and returns their sum as a floating-point value. We
    utilize the Union annotation from the typing library to specify the possible types
    that the variable parameter can accept.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了相同的求和函数，使其现在接受一个 numpy 数组或列表可迭代对象。它计算并返回它们的和作为浮点值。我们利用 typing 库中的 Union
    注释来指定变量参数可以接受的可能类型。
- en: Let us further change the function declaration to show that the list members
    should also be of type float.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步修改函数声明，以显示列表成员也应该是 float 类型。
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These are just some beginner examples to help understand type hinting in Python.
    As projects grow, and codebases become more modular, type annotations significantly
    enhance readability and maintainability. The typing library offers a rich set
    of features including Optional, various iterables, Generics, and support for custom-defined
    types, empowering developers to express complex data structures and relationships
    with precision and clarity.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些初学者的示例，帮助理解 Python 中的类型提示。随着项目的增长，代码库变得更加模块化，类型注释显著提高了可读性和可维护性。typing
    库提供了丰富的功能，包括 Optional、各种可迭代对象、Generics 和对自定义类型的支持，使开发人员能够以精确和清晰的方式表达复杂的数据结构和关系。
- en: 2\. Writing Defensive Functions and Input Validation
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 编写防御性函数和输入验证
- en: Even though type-hinting seems helpful, it is still error-prone as the annotations
    are not enforced. These are just extra documentation for the developers but the
    function will still be executed if different argument types are used. Therefore,
    there is a need to enforce the pre-conditions for a function and code in a defensive
    manner. Hence, we manually check these types and raise appropriate errors if the
    conditions are violated.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 即使类型提示看起来很有帮助，它仍然容易出错，因为这些注释并没有被强制执行。这些只是额外的文档供开发人员参考，但如果使用了不同的参数类型，函数仍然会被执行。因此，需要强制执行函数的前置条件，并以防御性方式编写代码。因此，我们手动检查这些类型，并在条件违反时引发适当的错误。
- en: The below function shows how interest is calculated using the input parameters.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的函数展示了如何使用输入参数计算利息。
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is a simple operation, yet will this function work for every possible solution?
    No, not for the edge cases where the invalid values are passed as input. We need
    to ensure that the input values are bound within a valid range for the function
    to execute correctly. In essence, some pre-conditions must be satisfied for the
    function implementation to be correct.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的操作，但这个函数会适用于所有可能的解决方案吗？不，不适用于传递无效值作为输入的边界情况。我们需要确保输入值在函数正确执行所需的有效范围内。实质上，函数实现必须满足一些前置条件才能正确。
- en: 'We do this as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照如下方式进行：
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note, that we use conditional statements for input validation. Python also has
    assertion statements that are sometimes used for this purpose. However, *assertions
    for input validation are not a best practice* as they can disabled easily and
    will lead to unexpected behaviour in production. The use of explicit Python conditional
    expressions is preferable for input validation and enforcing pre-conditions, post-conditions,
    and code invariants.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们使用条件语句进行输入验证。Python还有断言语句，有时也用于此目的。然而，*用于输入验证的断言不是最佳实践*，因为它们可以很容易地被禁用，并且会导致生产环境中的意外行为。显式的Python条件表达式更适用于输入验证以及强制执行前置条件、后置条件和代码不变式。
- en: 3\. Lazy Loading with Generators and Yield Statements
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 使用生成器和`yield`语句进行延迟加载
- en: Consider a scenario, where you are provided with a large dataset of documents.
    You need to process the documents and perform certain operations on each document.
    However, due to the large size, you can not load all the documents in memory and
    pre-process them simultaneously.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑这样一个场景，你被提供了一个大型文档数据集。你需要处理这些文档并对每个文档执行特定操作。然而，由于数据集的巨大规模，你不能将所有文档同时加载到内存中并进行预处理。
- en: A possible solution is to only load a document in memory when required and process
    only a single document at a time, also called lazy loading. Even though we know
    what documents we will need, we do not load a resource until it is required. There
    is no need to retain the bulk of documents in memory when they are not in active
    use in our code. This is exactly how generators and yield statements approach
    the problem.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可能的解决方案是仅在需要时将文档加载到内存中，并且一次只处理一个文档，这也被称为延迟加载。即使我们知道需要哪些文档，我们也不会在需要之前加载资源。当文档在代码中不处于活动使用状态时，无需将大量文档保留在内存中。这正是生成器和`yield`语句处理问题的方式。
- en: Generators allow lazy-loading that improves the memory efficiency of Python
    code execution. Values are generated on the fly as needed, reducing memory footprint
    and increasing execution speed.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 生成器允许延迟加载，从而提高了Python代码执行的内存效率。值在需要时动态生成，减少了内存占用并提高了执行速度。
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the above function, the load_documents function uses the yield keyword. The
    method returns an object of type <class generator>. When we iterate over this
    object, it continues execution from where the last yield statement is. Therefore,
    a single document is loaded and processed, improving Python code efficiency.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述函数中，`load_documents`函数使用了`yield`关键字。该方法返回一个类型为<class generator>的对象。当我们迭代这个对象时，它会从上一个`yield`语句的位置继续执行。因此，单个文档被加载和处理，提高了Python代码的效率。
- en: 4\. Preventing Memory Leaks using Context Managers
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 使用上下文管理器防止内存泄漏
- en: For any language, efficient use of resources is of primary importance. We only
    load something in memory when required as explained above through the use of generators.
    However, it is equally important to close a resource when it is no longer needed
    by our program. We need to prevent memory leaks and perform proper resource teardown
    to save memory.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何语言，资源的高效使用是最重要的。我们只在需要时将资源加载到内存中，如上文通过生成器的使用所述。然而，当程序不再需要某个资源时，关闭该资源同样重要。我们需要防止内存泄漏，并执行适当的资源拆解以节省内存。
- en: '*Context managers simplify the common use case of resource setup and teardown*.
    It is important to release resources when they are not required anymore, even
    in case of exceptions and failures. Context managers reduce the risk of memory
    leaks using automatic cleanup while keeping the code concise and readable.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*上下文管理器简化了资源设置和拆解的常见用例*。当资源不再需要时，释放资源是重要的，即使在出现异常和故障的情况下也是如此。上下文管理器通过自动清理减少了内存泄漏的风险，同时保持代码简洁和可读。'
- en: 'Resources can have multiple variants such as database connections, locks, threads,
    network connections, memory access, and file handles. Let''s focus on the simplest
    case: file handles. The challenge here is ensuring that each file opened is closed
    exactly once. Failure to close a file can lead to memory leaks, while attempting
    to close a file handle twice results in runtime errors. To address this, file
    handles should be wrapped inside a **try-except-finally** block. This ensures
    that the file is closed properly, regardless of whether an error occurs during
    execution. Here''s how the implementation might look:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 资源可以有多种变体，如数据库连接、锁、线程、网络连接、内存访问和文件句柄。我们先关注最简单的情况：文件句柄。挑战在于确保每个打开的文件只关闭一次。未能关闭文件可能导致内存泄漏，而尝试关闭文件句柄两次会导致运行时错误。为了解决这个问题，文件句柄应放在**try-except-finally**块中。这确保了文件被正确关闭，无论执行过程中是否发生错误。以下是实现的可能方式：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'However, Python provides a more elegant solution using context managers, which
    handle resource management automatically. Here''s how we can simplify the above
    code using the file context manager:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Python 提供了一个更优雅的解决方案，即使用上下文管理器，它自动处理资源管理。下面是如何使用文件上下文管理器简化上述代码：
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this version, we don't need to explicitly close the file. The context manager
    takes care of it, preventing potential memory leaks.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个版本中，我们不需要显式地关闭文件。上下文管理器会处理这个问题，防止潜在的内存泄漏。
- en: '​​While Python offers built-in context managers for file handling, we can also
    create our own for custom classes and functions. For class-based implementation,
    we define **__enter__** and **__exit__** dunder methods. Here''s a basic example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Python 提供了用于文件处理的内置上下文管理器，我们也可以为自定义类和函数创建自己的上下文管理器。对于基于类的实现，我们定义**__enter__**和**__exit__**双下划线方法。下面是一个基本示例：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, we can use this custom context manager within **‘with’** blocks:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在**‘with’**块中使用这个自定义上下文管理器：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This approach maintains the clean and concise syntax of context managers while
    allowing us to handle resources as needed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法保持了上下文管理器的简洁语法，同时允许我们根据需要处理资源。
- en: 5\. Separation of Concern with Decorators
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 使用装饰器分离关注点
- en: We often see multiple functions with the same logic implemented explicitly.
    This is a prevalent code smell, and excessive code duplication makes the code
    difficult to maintain and unscalable. Decorators are used to encapsulate similar
    functionality in a single place. When a similar functionality is to be used by
    multiple other functions, we can reduce code duplication by implementing common
    functionality within a decorator. It follows Aspect-Oriented Programming (AOP)
    and the Single Responsibility principle.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常看到多个函数具有相同的逻辑被显式实现。这是一种常见的代码异味，过多的代码重复使代码难以维护和不可扩展。装饰器用于将类似的功能封装在一个地方。当多个函数需要使用类似的功能时，我们可以通过在装饰器中实现公共功能来减少代码重复。这符合面向切面编程（AOP）和单一职责原则。
- en: Decorators are heavily used in the Python web frameworks such as Django, Flask
    and FastAPI. Let me explain the effectiveness of decorators by using it as a middleware
    in Python for logging. In a production setting, we need to know how long it takes
    to service a request. It is a common use case and will be shared across all endpoints.
    So, let us implement a simple decorator-based middleware that will log the time
    taken to service a request.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器在 Python 网络框架中被广泛使用，如 Django、Flask 和 FastAPI。让我通过在 Python 中将装饰器作为日志记录中间件来解释装饰器的有效性。在生产环境中，我们需要知道服务请求所需的时间。这是一个常见的用例，并且会在所有端点之间共享。所以，让我们实现一个简单的基于装饰器的中间件，它将记录服务请求所需的时间。
- en: The dummy function below is used to service a user request.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的虚拟函数用于服务用户请求。
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we need to log the time it takes for this function to execute. One way
    is to add logging within this function as follows:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要记录这个函数执行所需的时间。一种方法是在这个函数中添加日志记录，如下所示：
- en: '[PRE12]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While this approach works, it leads to code duplication. If we add more routes,
    we'd have to repeat the logging code in each function. This increases code duplication
    as this shared logging functionality needs to be added to each implementation.
    We remove this with the use of decorators.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种方法有效，但会导致代码重复。如果我们添加更多的路由，就需要在每个函数中重复日志记录代码。这增加了代码重复，因为这个共享的日志记录功能需要在每个实现中添加。我们通过使用装饰器来解决这个问题。
- en: 'The logging middleware will be implemented as below:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录中间件将如下实现：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this implementation, the outer function is the decorator, which accepts a
    function as input. The inner function implements the logging functionality, and
    the input function is called within the wrapper.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实现中，外部函数是装饰器，它接受一个函数作为输入。内部函数实现日志记录功能，输入函数在包装器内部被调用。
- en: 'Now, we simply decorate the original **service_request** function with our
    **request_logger decorator**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们只需用我们的 **request_logger 装饰器** 装饰原始的 **service_request** 函数：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using the @ symbol passes the service_request function to the request_logger
    decorator. It logs the time taken and calls the original function without modifying
    its code. This separation of concerns allows us to easily add logging to other
    service methods in a similar manner like this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `@` 符号将 `service_request` 函数传递给 `request_logger` 装饰器。它记录所花费的时间，并在不修改其代码的情况下调用原始函数。这种关注点分离使我们可以以类似的方式轻松地将日志记录添加到其他服务方法中。
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 6\. Match Case Statements
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6\. `match case` 语句
- en: Match statements were introduced in Python3.10 so it is a fairly new addition
    to the Python syntax. It allows for simpler and more readable pattern matching,
    preventing excessive boilerplate and branching in the typical if-elif-else statements.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`match` 语句是在 Python3.10 中引入的，因此它是 Python 语法中相对较新的补充。它允许更简单、更可读的模式匹配，防止了典型的
    `if-elif-else` 语句中过多的样板代码和分支。'
- en: For pattern-matching, match case statements are the more natural way of writing
    it as they do not necessarily need to return boolean values as in conditional
    statements. The following example from the Python documentation shows how match
    case statements offer flexibility over conditional statements.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于模式匹配，`match case` 语句是更自然的写法，因为它们不需要像条件语句那样返回布尔值。以下来自 Python 文档的示例展示了 `match
    case` 语句如何相比条件语句提供更大的灵活性。
- en: '[PRE16]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: As per the documentation, without pattern matching, this function’s implementation
    would require several *isinstance()* checks, one or two *len()* calls, and a more
    convoluted control flow. Under the hood, the match example and the traditional
    Python version translate into similar code. However, with familiarity with pattern
    matching, the match case approach is likely to be preferred as it provides a clearer
    and more natural syntax.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档，没有模式匹配的情况下，这个函数的实现需要几个 *isinstance()* 检查，一两个 *len()* 调用，以及更复杂的控制流程。在内部，`match`
    示例和传统的 Python 版本转化为类似的代码。然而，熟悉模式匹配后，`match case` 方法可能会更受欢迎，因为它提供了更清晰和自然的语法。
- en: Overall, match case statements offer an improved alternative for pattern matching,
    which will likely become more prevalent in newer codebases.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，`match case` 语句为模式匹配提供了一种改进的替代方案，这在较新的代码库中可能会变得更加普遍。
- en: 7\. External Configuration Files
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 7\. 外部配置文件
- en: In production, the majority of our code relies on external configuration parameters
    like API keys, passwords, and various settings. Hardcoding these values directly
    into the code is considered poor practice for scalability and security reasons.
    Instead, it's crucial to keep configurations separate from the code itself. We
    commonly achieve this using configuration files such as JSON or YAML to store
    these parameters, ensuring they're easily accessible to the code without being
    directly embedded within it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，我们的大部分代码依赖于外部配置参数，如 API 密钥、密码和各种设置。将这些值直接硬编码到代码中被认为是不利于可扩展性和安全性的做法。相反，将配置与代码本身分开是至关重要的。我们通常使用配置文件，如
    JSON 或 YAML，来存储这些参数，确保它们对代码易于访问，而不是直接嵌入其中。
- en: An everyday use case is database connections that have multiple connection parameters.
    We can keep these parameters in a separate YAML file.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个日常使用的场景是数据库连接，它有多个连接参数。我们可以将这些参数保存在一个单独的 YAML 文件中。
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To handle this configuration, we define a class called **DatabaseConfig**:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个配置，我们定义了一个名为**DatabaseConfig**的类：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, the **from_dict** class method serves as a builder method for the DatabaseConfig
    class, allowing us to create a database configuration instance from a dictionary.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，**from_dict** 类方法作为 `DatabaseConfig` 类的构建器方法，使我们能够从字典创建数据库配置实例。
- en: 'In our main code, we can employ parameter hydration and the builder method
    to create a database configuration. By reading the external YAML file, we extract
    the database dictionary and use it to instantiate the config class:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的主要代码中，我们可以使用参数注入和构建器方法来创建数据库配置。通过读取外部 YAML 文件，我们提取数据库字典并用它来实例化配置类：
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This approach eliminates the need for hardcoding database configuration parameters
    directly into the code. It also offers an improvement over using argument parsers,
    as we no longer need to pass multiple parameters every time we run our code. Moreover,
    by accessing the config file path through an argument parser, we can ensure that
    the code remains flexible and doesn't rely on hardcoded paths. This method facilitates
    easier management of configuration parameters, which can be modified at any time
    without requiring changes to the codebase.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法消除了将数据库配置参数硬编码到代码中的需要。它比使用参数解析器有所改进，因为我们不再需要每次运行代码时传递多个参数。此外，通过通过参数解析器访问配置文件路径，我们可以确保代码保持灵活，并且不依赖于硬编码的路径。这种方法简化了配置参数的管理，可以随时修改，而无需更改代码库。
- en: Ending Notes
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结束语
- en: In this article, we discussed some of the best practices used in the industry
    for production-ready code. These are common industry practices that alleviate
    multiple problems one can face in real-life situations.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们讨论了用于生产就绪代码的一些最佳实践。这些是行业中的常见实践，可以缓解在现实情况下可能遇到的多种问题。
- en: Nonetheless, it is worth noting that despite all such best practices, documentation,
    docstrings, and test-driven development are by far the most essential practices.
    It is important to think about what a function is supposed to do and then document
    all design decisions and implementations for the future as people working on a
    codebase change over time. If you have any insights or practices you swear by,
    please do not hesitate to let us know in the comment section below.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有所有这些最佳实践，但值得注意的是，文档、文档字符串和测试驱动开发仍然是最重要的实践。考虑一个函数应该做什么，然后记录所有设计决策和实现对未来非常重要，因为随着时间的推移，参与代码库的人会发生变化。如果你有任何见解或坚持的实践，请随时在下面的评论区告知我们。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)**
    Kanwal 是一位机器学习工程师和技术作家，对数据科学以及人工智能与医学的交汇处有着深厚的热情。她共同撰写了电子书《用 ChatGPT 最大化生产力》。作为
    2022 年 APAC 的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认定为 Teradata 多样性技术学者、Mitacs
    Globalink 研究学者以及哈佛 WeCode 学者。Kanwal 是变革的热心倡导者，创办了 FEMCodes，以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何编写高效的 Python 代码：初学者教程](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
- en: '[5 Tips for Writing Better Python Functions](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升 Python 函数编写的 5 个技巧](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)'
- en: '[Announcing a Blog Writing Contest, Winner Gets an NVIDIA GPU!](https://www.kdnuggets.com/2022/11/blog-writing-contest-nvidia-gpu.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布博客写作竞赛，获胜者将获得 NVIDIA GPU！](https://www.kdnuggets.com/2022/11/blog-writing-contest-nvidia-gpu.html)'
- en: '[Free MIT Course: TinyML and Efficient Deep Learning Computing](https://www.kdnuggets.com/free-mit-course-tinyml-and-efficient-deep-learning-computing)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[免费 MIT 课程：TinyML 和高效的深度学习计算](https://www.kdnuggets.com/free-mit-course-tinyml-and-efficient-deep-learning-computing)'
- en: '[Data Masking: The Core of Ensuring GDPR and other Regulatory…](https://www.kdnuggets.com/2023/05/data-masking-core-ensuring-gdpr-regulatory-compliance-strategies.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据掩码：确保 GDPR 和其他法规合规的核心](https://www.kdnuggets.com/2023/05/data-masking-core-ensuring-gdpr-regulatory-compliance-strategies.html)'
- en: '[LLM Handbook: Strategies and Techniques for Practitioners](https://www.kdnuggets.com/llm-handbook-strategies-and-techniques-for-practitioners)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LLM 手册：从业者的策略和技术](https://www.kdnuggets.com/llm-handbook-strategies-and-techniques-for-practitioners)'
