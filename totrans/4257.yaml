- en: Get Interactive Plots Directly With Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/06/interactive-plots-directly-pandas.html](https://www.kdnuggets.com/2021/06/interactive-plots-directly-pandas.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Parul Pandey](https://pandeyparul.medium.com/), Data Science at H2O.ai
    | Editor @wicds**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/968a61e7731ce2f257dea78119cb80ae.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '*[Infographic vector created by macrovector — www.freepik.com](https://www.freepik.com/vectors/infographic).*'
  prefs: []
  type: TYPE_NORMAL
- en: Data exploration is by far one of the most important aspects of any data analysis
    task. The initial probing and preliminary checks that we perform, using the vast
    catalog of visualization tools, give us actionable insights into the nature of
    data. However, the choice of visualization tool at times is more complicated than
    the task itself. On the one hand, we have libraries that are easier to use but
    are not so helpful in showing complex relationships in data. Then there are others
    that render interactivity but have a considerable learning curve. Fortunately,
    some open-source libraries have been created that try to address this pain point
    effectively.
  prefs: []
  type: TYPE_NORMAL
- en: In this article, we’ll look at two such libraries, namely **pandas_bokeh** and
    **cufflinks**. We’ll learn how to create plotly and bokeh charts with the basic
    pandas plotting syntax, which we all are comfortable with. Since the article's
    emphasis is on the syntax rather than the types of plots, we’ll limit ourselves
    to the five basic charts, i.e., line charts, bar charts, histograms, scatter plots,
    and pie charts. We’ll create each of these charts first with pandas plotting library
    and then recreate them in plotly and bokeh, albeit with a twist.
  prefs: []
  type: TYPE_NORMAL
- en: Import the Dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We’ll work with the **NIFTY-50 dataset**. The NIFTY 50 index is the [National
    Stock Exchange of India’s](https://en.wikipedia.org/wiki/National_Stock_Exchange_of_India) benchmark
    for the Indian equity market. The dataset is openly available on [Kaggle](https://www.kaggle.com/sudalairajkumar/nifty-indices-dataset),
    but we’ll be using a subset of the data containing the stock value of only four
    sectors, i.e., bank, pharma, IT, and FMCG.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can download the sample dataset from *[*here*](https://github.com/parulnith/Data-Science-Articles/tree/main/Get%20Interactive%20plots%20directly%20with%C2%A0pandas.)*.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Let’s import the necessary libraries and dataset required for the visualization
    purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5757588301ba14734a8189a4e9271c47.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Combined dataframe consisting of NIFTY indices of the bank, pharma, IT, and
    FMCG sectors.*'
  prefs: []
  type: TYPE_NORMAL
- en: We can also resample/aggregate the data by month-end. The pandas’ library has
    a *[resample()](https://pandas.pydata.org/docs/reference/api/pandas.Series.resample.html)* function,
    which resamples the time series data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/38aa1885b05d487b5e89f909a74b4b61.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have our dataframes ready, it is time to visualize them via different
    plots.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with Pandas directly
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s begin with the most straightforward plotting technique — pandas’ [plotting
    functions](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#plotting-tools).
    To plot a graph using pandas, we’ll call the *.plot()* method on the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: '**Syntax**: *dataframe.plot()*'
  prefs: []
  type: TYPE_NORMAL
- en: 'The *plot *method is just a simple wrapper around matplotlib’s *[plt.plot()](https://matplotlib.org/api/_as_gen/matplotlib.axes.Axes.plot.html#matplotlib.axes.Axes.plot)***. **We
    can also specify some additional parameters like the ones mentioned below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For a complete list of the parameters and their usage, please refer to the [documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html#basic-plotting-plot).
    Let’s now look at ways to create different plots. In this article, we’ll not go
    into detail explaining each plot. We’ll only focus on the syntax, which is self-explanatory
    if you have some experience in pandas. For a detailed understanding of the pandas’
    plots, [this article](https://neptune.ai/blog/pandas-plot-deep-dive-into-plotting-directly-with-pandas)
    will be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '**Line Plot**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4cb5475c62f79164170c11b619b3472f.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Line plot with pandas plotting.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter Plot**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/55094fa001774b0a62c9a08624f9a470.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Scatter plot with pandas plotting.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/dcbf63b106a61115bdaf62702c863fcc.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Histogram with pandas plotting.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bar plots**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/39a8f04e95478d1d6e90ec049924bfc8.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Bar plot with pandas plotting.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stacked bar plots**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f8ae46c325dd38fb9ae64fe870a613c7.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Stacked Bar plot with pandas plotting.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pie Charts**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/7a494b9bcdeec1fd6f68f54ef3d8447e.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Pie Chart with pandas plotting.*'
  prefs: []
  type: TYPE_NORMAL
- en: These were some of the charts that can be directly created with pandas’ dataframes.
    However, these charts lack interactivity and capabilities like zoom and pan. Let’s
    now change these existing charts in syntax into their fully interactive counterparts
    with just a slight change in the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Bokeh Backend for Pandas — plotting with Pandas-Bokeh.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/85dd71f67809047542c956a3ae667922.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image by Author.*'
  prefs: []
  type: TYPE_NORMAL
- en: The [bokeh](https://docs.bokeh.org/en/latest/) library clearly stands out when
    it comes to data visualizations*. *The[Pandas-Bokeh](https://github.com/PatrikHlobil/Pandas-Bokeh) provides
    a bokeh plotting backend for [Pandas](https://pandas.pydata.org/), [GeoPandas](http://geopandas.org/),
    and [Pyspark](https://spark.apache.org/docs/latest/api/python/index.html) DataFrames.
    This backend adds a plot_bokeh() method to the DataFrames and Series.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pandas-Bokeh can be installed from [PyPI](https://pypi.org/project/pandas-bokeh/) via *pip*
    or *conda*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: The Pandas-Bokeh library should be imported after Pandas, GeoPandas, or Pyspark.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Then one needs to define the plotting output, which can be either of the two:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Syntax**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, the plotting API is accessible for a Pandas DataFrame via the *dataframe.plot_bokeh()*.
  prefs: []
  type: TYPE_NORMAL
- en: For more details about the plotting outputs, see the reference here or the Bokeh
    documentation. Let’s now plot all the five kinds of plots as plotted in the above
    section. We’ll be using the same datasets as used above.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/4bcc6e22d687af83f3a7f0b1e76b60df.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Line Plot**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/8325f213afe3184739b6db992da01636.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Line plot with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter Plot**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a210dfcaa36cfae21c28ee53e94baf76.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Scatter plot with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/900cde9b590c4092369825c14a12c526.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Histogram with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bar plots**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/506b06965bcd30dcb74a888e659653e6.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Bar plot with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stacked bar plots**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a4677e8551b90690b55f6d94d916112f.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Stacked bar plot with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pie Charts**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d06da34bb0163c4b5b9ebf1753c6aceb.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Pie chart with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can also create multiple nested pie plots within the same
    plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/439ee72f9cb86f3698b3227a343ae6d5.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Nested pie chart with pandas_bokeh.*'
  prefs: []
  type: TYPE_NORMAL
- en: This section saw how we could seamlessly create bokeh plots without any significant
    change in the pandas plotting syntax. Now we can have the best of both worlds
    without having to learn any new format.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Backend for Pandas — plotting with Cufflinks.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '![](../Images/50ca2394513e21c8fab1a5cb37006404.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image by Author.*'
  prefs: []
  type: TYPE_NORMAL
- en: Another commonly used library for data visualization is [Plotly](https://plotly.com/graphing-libraries/).
    With plotly, you can make interactive charts in Python, R, and JavaScript. As
    of version 4.8, Plotly came out with a [Plotly Express-powered](https://plotly.com/python/plotly-express/) backend
    for Pandas plotting, which meant that one even does not need to import plotly
    to create plotly like visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: However, the library I want to mention here is not plotly express, but an independent
    third-party wrapper library around Plotly called [**Cufflinks**](https://github.com/santosjorge/cufflinks)**. **The
    beauty of cufflinks is that it is more versatile, has more functionalities, and
    has an API similar to pandas plotting. This means you only need to add a *.iplot() *method
    to Pandas dataframes for plotting graphs.
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation**'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have plotly installed before installing cufflinks. Read [this](https://plotly.com/python/getting-started/) guide
    for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '**Usage**'
  prefs: []
  type: TYPE_NORMAL
- en: The [repository](https://nbviewer.jupyter.org/gist/santosjorge/aba934a0d20023a136c2) has
    a lot of useful examples and notebooks to get started.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: That is all. We can now create visualizations with the power of plotly but with
    the ease of pandas. The only change in the syntax is *dataframe.iplot()*.
  prefs: []
  type: TYPE_NORMAL
- en: '**Line Plot**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/521251ca2f2a1ebf69ee391119286827.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Line plot with cufflinks.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scatter Plot**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You need to mention the plotting **mode** for scatter trace while creating a
    scatterplot. The mode could be lines, markers, text, or a combination of either
    of them.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b8abd1e76d29c5055309eb68f37e66ef.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Scatter plot with cufflinks.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Histograms**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/46214cdbb9c319d9a843d050aeda0efd.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Histogram with cufflinks.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bar plots**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f3df2db115caa94e2bc77745d9e95df9.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Barplots with cufflinks.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Stacked bar plots**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d20b4f330f7f63ffe043dbe00c0fe163.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Stacked bar plots with cufflinks.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pie Charts**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a478d6c6135e343a8b134e169135807d.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Pie charts with cufflinks.*'
  prefs: []
  type: TYPE_NORMAL
- en: The Cufflinks library provides an easy way to get the power of plotly within
    plotly. The similarity in syntax is another point of advantage.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Bokeh or a Plotly plot is self-sufficient in conveying the entire information.
    Based on your choice and preference, you can choose both or either of them while
    keeping a focus on the primary purpose of making visualizations more intuitive
    and interactive at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/get-interactive-plots-directly-with-pandas-13a311ebf426).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Animated Bar Chart Races in Python](https://www.kdnuggets.com/2021/05/animated-race-bar-charts-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Make Sure Your Analysis Actually Gets Used](https://www.kdnuggets.com/2021/04/make-analysis-used.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Know your data much faster with the new Sweetviz Python library](https://www.kdnuggets.com/2021/03/know-your-data-much-faster-sweetviz-python-library.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
