["```py\n\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import Select\nfrom selenium.common.exceptions import ElementClickInterceptedException\nimport pandas as pd\nimport time\nfrom openpyxl import load_workbook\nfrom random import randint\n\nwb_name = \"xxx.xlsx\" #file name\n\nwb = load_workbook(wb_name, data_only = True)\nws = wb['sheet_name']\naddress_list =[]\nlink_col = xx  #column number\n\ncoord_prospects = pd.DataFrame() \n\nfor row in ws.iter_rows(min_row = x , max_row = x, min_col = link_col, max_col=link_col):\n    if str(row[0].value) != \"None\":\n        address_list.append(row[0].value)\n\ndriver = webdriver.Chrome(options=options)\n#driver.minimize_window() #this is optional if the opening google chrome window gets annoying\ndriver.get('https://www.mapdevelopers.com/geocode_tool.php')\nadd = driver.find_element_by_class_name('form-control')\n\nfor t,a in enumerate(address_list):\n    print (\"Geocoding...\",t+1,\"/\",len(address_list),str(round(t/len(address_list)*100,2)),\"%\",\" : \", a)\n    add.clear()\n    add.send_keys(a)\n    try:\n        search1 = driver.find_element_by_xpath('//*[@id=\"search-form\"]/div[1]/span[2]').click()\n        time.sleep(3)\n        search2 = driver.find_element_by_xpath('//*[@id=\"search-form\"]/div[1]/span[2]').click()\n        time.sleep(3)\n    except ElementClickInterceptedException:\n        time.sleep(2)\n        search = driver.find_element_by_xpath('//*[@id=\"search-form\"]/div[1]/span[2]').click()\n    lat=driver.find_element_by_id('display_lat')\n    lng=driver.find_element_by_id('display_lng')\n    street=driver.find_element_by_id('display_address')\n    city=driver.find_element_by_id('display_city')\n    postcode=driver.find_element_by_id('display_zip')\n    state=driver.find_element_by_id('display_state')\n    county=driver.find_element_by_id('display_county')\n    country=driver.find_element_by_id('display_country')\n    latlng = pd.DataFrame({'Latitude':pd.Series(lat.text),\n                            'Longitude':pd.Series(lng.text),\n                            'Street':pd.Series(street.text),\n                            'City':pd.Series(city.text),\n                            'Postcode':pd.Series(postcode.text),\n                            'State':pd.Series(state.text),\n                            'County':pd.Series(county.text),\n                            'Country':pd.Series(country.text)})\n    coord_prospects = coord_prospects.append(latlng, ignore_index=True)\n    print(coord_prospects.tail(1))\n    print(\"   \")\n\ncoord_prospects.to_excel('xxxx.xlsx') #name of output excel file\n\ndriver.close()\n\n```", "```py\n\nimport pandas as pd\nimport googlemaps\n\napi = \"xxx\" #API Key\n\ndf = pd.read_excel(\"xxx.xlsx\") #file name\n\ngeocoder = googlemaps.Client(key=api)\ndf['Latitude'] = None\ndf['Longitude'] = None\ndf['Google Address'] = None\n\nfor i in range(len(df)):\n    print(\"Geocoding...\"+\" \"+str(i)+\"/\"+str(len(df)) + \" \" + str(round(i/len(df)*100,2))+\"%\")\n    result = geocoder.geocode(df.loc[i,\"xxx\"]) # xxx is the name of the column with the full address\n    try:\n        lat = result[0][\"geometry\"][\"location\"][\"lat\"]\n        lng = result[0][\"geometry\"][\"location\"][\"lng\"]\n        address = result[0][\"formatted_address\"]\n        df.loc[i,\"Latitude\"] = lat\n        df.loc[i,\"Longitude\"] = lng\n        df.loc[i,\"Google Address\"] = address\n    except:\n        lat=None\n        lng=None\n        location=None\nprint(df)\ndf.to_excel(\"xxx.xlsx\") #name of output file\n\n```"]