["```py\nimport pandas as pd\n\ndf = pd.read_csv('churn.csv')\ndf['Exited'].value_counts().plot(kind = 'bar', color = ['blue', 'red'])\n```", "```py\nimport seaborn as sns\nsns.scatterplot(data =df, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\n```", "```py\npip install imblearn\n```", "```py\nfrom imblearn.over_sampling import SMOTE\nsmote = SMOTE(random_state = 42)\n\nX, y = smote.fit_resample(df[['EstimatedSalary', 'Age']], df['Exited'])\ndf_smote = pd.DataFrame(X, columns = ['EstimatedSalary', 'Age'])\ndf_smote['Exited'] = y\n```", "```py\ndf_smote['Exited'].value_counts().plot(kind = 'bar', color = ['blue', 'red'])\n```", "```py\nimport matplotlib.pyplot as plt\n\nsns.scatterplot(data = df_smote, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\nplt.title('SMOTE')\n```", "```py\npd.crosstab(df['HasCrCard'], df['Exited'])\n```", "```py\nfrom imblearn.over_sampling import SMOTENC\n\nsmotenc = SMOTENC([1],random_state = 42)\nX_os_nc, y_os_nc = smotenc.fit_resample(df[['Age', 'HasCrCard']], df['Exited'])\n```", "```py\npd.crosstab(X_os_nc['HasCrCard'], y_os_nc)\n```", "```py\nfrom imblearn.over_sampling import BorderlineSMOTE\nbsmote = BorderlineSMOTE(random_state = 42, kind = 'borderline-1')\nX_bd, y_bd = bsmote.fit_resample(df[['EstimatedSalary', 'Age']], df['Exited'])\ndf_bd = pd.DataFrame(X_bd, columns = ['EstimatedSalary', 'Age'])\ndf_bd['Exited'] = y_bd\n```", "```py\nsns.scatterplot(data = df_bd, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\nplt.title('Borderline-SMOTE')\n```", "```py\nfrom imblearn.combine import SMOTETomek\n\ns_tomek = SMOTETomek(random_state = 42)\nX_st, y_st = s_tomek.fit_resample(df[['EstimatedSalary', 'Age']], df['Exited'])\ndf_st = pd.DataFrame(X_st, columns = ['EstimatedSalary', 'Age'])\ndf_st['Exited'] = y_st\n```", "```py\ndf_st['Exited'].value_counts().plot(kind = 'bar', color = ['blue', 'red'])\n```", "```py\nsns.scatterplot(data = df_st, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\nplt.title('SMOTE-Tomek')\n```", "```py\nfrom imblearn.combine import SMOTEENN\n\ns_enn = SMOTEENN(random_state=42)\nX_se, y_se = s_enn.fit_resample(df[['EstimatedSalary', 'Age']], df['Exited'])\ndf_se = pd.DataFrame(X_se, columns = ['EstimatedSalary', 'Age'])\ndf_se['Exited'] = y_se\n```", "```py\ndf_se['Exited'].value_counts().plot(kind = 'bar', color = ['blue', 'red'])\n```", "```py\nsns.scatterplot(data = df_se, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\nplt.title('SMOTE-ENN')\n```", "```py\npip install crucio \n```", "```py\nfrom crucio import SCUT\ndf_sample = df[['EstimatedSalary', 'Age', 'Exited']].copy()\n\nscut = SCUT()\ndf_scut= scut.balance(df_sample, 'Exited')\n```", "```py\ndf_scut['Exited'].value_counts().plot(kind = 'bar', color = ['blue', 'red'])\n```", "```py\nsns.scatterplot(data = df_scut, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\nplt.title('SMOTE-CUT')\n```", "```py\nfrom crucio import ADASYN\ndf_sample = df[['EstimatedSalary', 'Age', 'Exited']].copy()\n\nada = ADASYN()\ndf_ada= ada.balance(df_sample, 'Exited')\n```", "```py\ndf_ada['Exited'].value_counts().plot(kind = 'bar', color = ['blue', 'red'])\n```", "```py\nsns.scatterplot(data = df_ada, x ='EstimatedSalary', y = 'Age', hue = 'Exited')\nplt.title('ADASYN')\n```"]