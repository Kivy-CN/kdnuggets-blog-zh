["```py\nimport numpy as np\n\n# Creating a datetime64 array\ndates = np.array(['2024-07-15', '2024-07-16', '2024-07-17'], dtype='datetime64')\n\n# Performing arithmetic operations\nnext_day = dates + np.timedelta64(1, 'D')\n\nprint(\"Original Dates:\", dates)\nprint(\"Next Day:\", next_day) \n```", "```py\nnp.datetime64('2024-07-15T12:00', 'm')  # Minute resolution\nnp.datetime64('2024-07-15', 'D')        # Day resolution \n```", "```py\ndate = np.datetime64('2024-07-15')\nnext_week = date + np.timedelta64(7, 'D') \n```", "```py\ndates = np.array(['2024-07-15', '2024-07-16', '2024-07-17'], dtype='datetime64')\nsubset = dates[1:3] \n```", "```py\ndate1 = np.datetime64('2024-07-15')\ndate2 = np.datetime64('2024-07-16')\nis_before = date1 < date2  # True \n```", "```py\ndate = np.datetime64('2024-07-15')\ndate_str = date.astype('str') \n```", "```py\n# Loading and Converting Data\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Sample data: timestamps of sales transactions\nsales_data = np.array(['2023-07-01T12:34:56', '2023-07-02T15:45:30', '2023-07-03T09:12:10'], dtype='datetime64')\n\n# Extracting Specific Time Periods\n# Extracting sales data for July 2023\njuly_sales = sales_data[(sales_data >= np.datetime64('2023-07-01')) & (sales_data < np.datetime64('2023-08-01'))]\n\n# Calculating Daily Sales Counts\n# Converting timestamps to dates\nsales_dates = july_sales.astype('datetime64[D]')\n\n# Counting sales per day\nunique_dates, sales_counts = np.unique(sales_dates, return_counts=True)\n\n# Analyzing Sales Trends\nplt.plot(unique_dates, sales_counts, marker='o')\nplt.xlabel('Date')\nplt.ylabel('Number of Sales')\nplt.title('Daily Sales Counts for July 2023')\nplt.xticks(rotation=45)  # Rotates x-axis labels for better readability\nplt.tight_layout()  # Adjusts layout to prevent clipping of labels\nplt.show() \n```", "```py\nimport numpy as np\n\n# Define a date\nstart_date = np.datetime64('2024-07-15')\n\n# Add 5 days to the date\nend_date = start_date + np.timedelta64(5, 'D')\n\nprint(\"Start Date:\", start_date)\nprint(\"End Date after adding 5 days:\", end_date) \n```", "```py\nimport numpy as np\n\n# Define two dates\ndate1 = np.datetime64('2024-07-15T12:00')\ndate2 = np.datetime64('2024-07-17T10:30')\n\n# Calculate the time difference in hours\ntime_diff = (date2 - date1) / np.timedelta64(1, 'h')\n\nprint(\"Date 1:\", date1)\nprint(\"Date 2:\", date2)\nprint(\"Time difference in hours:\", time_diff) \n```", "```py\nimport numpy as np\nimport pandas as pd\n\n# Define two dates\nstart_date = np.datetime64('2024-07-01')\nend_date = np.datetime64('2024-07-15')\n\n# Convert to pandas Timestamp for more complex calculations\nstart_date_ts = pd.Timestamp(start_date)\nend_date_ts = pd.Timestamp(end_date)\n\n# Calculate the number of business days between the two dates\nbusiness_days = pd.bdate_range(start=start_date_ts, end=end_date_ts).size\n\nprint(\"Start Date:\", start_date)\nprint(\"End Date:\", end_date)\nprint(\"Number of Business Days:\", business_days) \n```"]