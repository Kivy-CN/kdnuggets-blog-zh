["```py\n# Import data\nonline = pd.read_excel('Online Retail.xlsx')\n# drop the row missing customer ID \nonline = online[online.CustomerID.notnull()]\nonline = online.sample(frac = .3).reset_index(drop = True)\nonline.head()\n\n```", "```py\n# extract year, month and day\nonline['InvoiceDay'] = online.InvoiceDate.apply(lambda x: dt.datetime(x.year, x.month, x.day))\nonline.head()\n```", "```py\n # print the time period\nprint('Min : {}, Max : {}'.format(min(online.InvoiceDay), max(online.InvoiceDay)))\n\n```", "```py\n# pin the last date\npin_date = max(online.InvoiceDay) + dt.timedelta(1)\n\n```", "```py\n# Create total spend dataframe\nonline['TotalSum'] = online.Quantity * online.UnitPrice\nonline.head()\n```", "```py\n# calculate RFM values\nrfm = online.groupby('CustomerID').agg({\n    'InvoiceDate' : lambda x: (pin_date - x.max()).days,\n    'InvoiceNo' : 'count', \n    'TotalSum' : 'sum'})\n# rename the columns\nrfm.rename(columns = {'InvoiceDate' : 'Recency', \n                      'InvoiceNo' : 'Frequency', \n                      'TotalSum' : 'Monetary'}, inplace = True)\nrfm.head()\n\n```", "```py\n# create labels and assign them to tree percentile groups \nr_labels = range(4, 0, -1)\nr_groups = pd.qcut(rfm.Recency, q = 4, labels = r_labels)\nf_labels = range(1, 5)\nf_groups = pd.qcut(rfm.Frequency, q = 4, labels = f_labels)\nm_labels = range(1, 5)\nm_groups = pd.qcut(rfm.Monetary, q = 4, labels = m_labels)\n\n```", "```py\n# make a new column for group labels\nrfm['R'] = r_groups.values\nrfm['F'] = f_groups.values\nrfm['M'] = m_groups.values\n# sum up the three columns\nrfm['RFM_Segment'] = rfm.apply(lambda x: str(x['R']) + str(x['F']) + str(x['M']), axis = 1)\nrfm['RFM_Score'] = rfm[['R', 'F', 'M']].sum(axis = 1)\nrfm.head()\n\n```", "```py\n# calculate average values for each RFM\nrfm_agg = rfm.groupby('RFM_Score').agg({\n    'Recency' : 'mean',\n    'Frequency' : 'mean',\n    'Monetary' : ['mean', 'count']\n})\nrfm_agg.round(1).head()\n\n```", "```py\n# assign labels from total score\nscore_labels = ['Green', 'Bronze', 'Silver', 'Gold']\nscore_groups = pd.qcut(rfm.RFM_Score, q = 4, labels = score_labels)\nrfm['RFM_Level'] = score_groups.values\nrfm.head()\n\n```"]