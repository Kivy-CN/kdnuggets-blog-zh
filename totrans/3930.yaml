- en: 5 “Clean Code” Tips That Will Dramatically Improve Your Productivity
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5 个“清洁代码”技巧将显著提高你的生产力
- en: 原文：[https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html](https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html](https://www.kdnuggets.com/2018/10/5-clean-code-tips-dramatically-improve-productivity.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [注释](#comments)'
- en: '![Header image](../Images/ab00e67ab5eb926a175bae5a4420ce63.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Header image](../Images/ab00e67ab5eb926a175bae5a4420ce63.png)'
- en: Quality code. Lots of people talk about it, but few actually do it right.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 高质量的代码。很多人谈论这个，但很少有人真正做到这一点。
- en: Most people who code naturally know what quality code should look or *feel *like.
    It should be very easy to read and understand quickly, there shouldn’t be any
    major faults, edge cases should be handled, and it should be “self documenting”.
    Still, many people miss the mark when trying (hopefully) to write quality code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数编程的人自然知道高质量的代码应该是什么样的或*感觉*如何。它应该非常易于阅读和快速理解，不应该有任何重大缺陷，边界情况应该得到处理，并且应该是“自我文档化”的。然而，许多人在尝试（希望）编写高质量代码时仍然会偏离目标。
- en: The cause of the mistakes are understandable in many cases. It can be challenging
    to predict how people will interpret your code, whether they will find it easy
    to read or an absolute nightmare. Not only that, once your project gets very big
    even **you** might not be able to read it!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 错误的原因在许多情况下是可以理解的。预测人们如何解读你的代码、他们是否会觉得它易于阅读或是一场噩梦可能很具挑战性。而且，一旦你的项目变得非常庞大，即使是**你**也可能无法阅读它！
- en: In such a case, it’s always good to establish some principals that you can rely
    on. Some go-to rules that you can always reference whenever you’re designing or
    writing code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，建立一些你可以依赖的原则总是很好的。一些你可以在设计或编写代码时随时参考的规则。
- en: The following 5 clean coding principals are the ones I code by! They’ve given
    me a massive productivity boost in my work and helped both myself and my colleagues
    be able to easily interpret and expand the code base which I’ve worked on. Hopefully
    they help you code faster and better too!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 5 个清洁编码原则是我编写代码时遵循的！它们为我的工作带来了巨大的生产力提升，并帮助我和我的同事能够轻松解读和扩展我所工作的代码库。希望它们也能帮助你更快、更好地编写代码！
- en: '**If it isn’t tested, it’s broken**'
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**如果没有经过测试，那就是坏的**'
- en: Test, test, test. We know we should always do it, but sometimes we cut corners
    so we can push the project out faster. But without thorough testing, how will
    you **100%** fully know that the code works? Yes there are very simple pieces
    of code, but one is always surprised when that crazy edge case comes up that you
    thought you didn’t need to test for!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试，测试，再测试。我们知道我们应该始终进行测试，但有时我们为了加快项目进度而走捷径。但没有彻底的测试，你如何**100%**完全知道代码是否有效？是的，有些代码非常简单，但当你遇到那些你认为不需要测试的疯狂边界情况时，总是会感到惊讶！
- en: Do yourself and everyone on your team a favour and regularly test the code you
    write. You’ll want to test in a *coarse to fine *style. Start small with unit
    tests to make sure every small part works on its own. Then slowly start testing
    the different subsystems together working your way up towards testing the whole
    new system end to end. Testing in this way allows you to easily track where the
    system breaks, since you can easily verify each individual component or the small
    subsystems as the source of any issues.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 给自己和团队中的每个人一个好处，定期测试你编写的代码。你会想以*粗略到细致*的方式进行测试。从小规模的单元测试开始，确保每个小部分独立工作。然后逐渐开始测试不同的子系统，逐步测试整个新系统的端到端。这种测试方式可以让你轻松追踪系统崩溃的地方，因为你可以轻松验证每个单独的组件或小的子系统是否是问题的源头。
- en: Choose meaningful names
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选择有意义的名称
- en: This is what makes code self-documenting. When you read over your old code,
    you shouldn’t have to look over every little comment and run every small piece
    of code to figure out what it all does!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使代码自我文档化的原因。当你回顾旧代码时，你不应该需要查看每一个小注释并运行每一小段代码来弄清楚它的作用！
- en: The code should *roughly* read like plain English. This is especially true for
    variable names, classes, and functions. Those three items should always have names
    that are self-explanatory. Rather than use a default name like “x” for example,
    call it “width” or “distance” or whatever the variable is supposed to represent
    in “read-world” terms. Coding in “real-world” terms will help make your code read
    in that way
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码应该*大致*像普通英语一样易读。这对于变量名、类和函数尤为重要。这三者的名称应该始终具有自我解释性。与其使用像“x”这样的默认名称，不如用“width”或“distance”或变量在“实际世界”中应代表的其他名称。用“实际世界”术语进行编码将有助于让你的代码以这种方式易读。
- en: '**Classes and functions should be small and obey the Single Responsibility
    Principle (SRP)**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**类和函数应该小且遵守单一职责原则（SRP）**'
- en: Small classes and functions make code approximately 9832741892374 times easier
    to read...
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 小的类和函数使代码的可读性大约提高了9832741892374倍……
- en: But seriously they really do. First off, they allow for very isolated unit testing.
    If the piece of code you are testing is small, it’s easy to source and debug any
    issues that come up in the test or during deployment. Small classes and functions
    also allow for better readability. Instead of having a giant block of code with
    many loops and variables, you can reduce that block to a function that runs several *smaller* functions.
    You can then name each of those functions according to what they do and voila,
    human readable code!
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但说真的，它们真的很重要。首先，它们允许非常独立的单元测试。如果你测试的代码片段很小，那么在测试或部署过程中出现的任何问题都很容易追踪和调试。小的类和函数也有助于提高可读性。与其有一个包含许多循环和变量的大块代码，不如将其减少到一个运行多个*较小*函数的函数。然后你可以根据这些函数的功能给它们命名，结果就是人类可读的代码！
- en: SRP gives you similar benefits. One responsibility means you only have to test
    a handful of edge cases and those cases are quite easy to debug. In addition it’s
    quite easy to name the function so it has real-world meaning. Since it only has
    one single purpose, it’ll just be named after it’s purpose, rather than trying
    to name a function that’s trying to accomplish so many different things.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SRP带来类似的好处。一个职责意味着你只需测试少量边缘情况，这些情况相对容易调试。此外，命名函数也很简单，因为它具有现实意义。由于它只有一个单一目的，所以它的名称将直接与其目的相关，而不是尝试给一个试图完成多种不同任务的函数命名。
- en: Catch and handle exceptions, even if you don’t think you need to
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 捕获并处理异常，即使你觉得不需要这样做。
- en: Exceptions in code are usually edges case or errors that we would like to handle
    in our own specific way. For example, normally when an error is raised the program
    will stop; this definitely will not work for code we have deployed to production
    that is serving users! We’ll want to handle that error separately, perhaps try
    to see if it’s super critical or if we should just pass over it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 代码中的异常通常是边缘情况或我们希望以特定方式处理的错误。例如，通常当错误被抛出时，程序会停止；这对我们已经部署到生产环境中并为用户服务的代码显然是不适用的！我们需要单独处理这些错误，也许试着判断它是否非常关键，或者我们是否应该忽略它。
- en: You should always be catching and handling exceptions specifically, even if
    you don’t think you need to. Better to be safe than sorry. Exception handling
    will give you a better sense of order and control over your code, since you know *specifically* what
    will happen if a certain exception is triggered or a piece of code fails. Having
    a deeper understand of your code like this makes it easier to debug and makes
    your code more fault tolerant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终具体地捕获和处理异常，即使你认为不需要这样做。小心总比后悔好。异常处理将让你对代码有更好的顺序感和控制感，因为你知道*具体*在某个异常被触发或某段代码失败时会发生什么。对代码有更深刻的理解，使其更容易调试，并提高代码的容错性。
- en: Logs, logs, logs
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志，日志，*日志*
- en: Log it. What you may ask? …. Everything that’s what! There’s no such thing as
    too much logs!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记录日志。你可能会问记录什么？……一切，没错！没有什么叫做“日志过多”！
- en: Logs are your absolute number 1 source for debugging your code and monitoring
    your application when it’s in production. You should be logging every major “step”
    your program takes, any important calculations it makes, any errors, exceptions,
    or out of the ordinary results. It may also be useful to log the date and time
    that these events occur for easy tracking. All of this will make it easy to trace
    exactly which *step in the pipeline the program failed*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 日志是调试代码和监控应用程序在生产环境中运行的绝对首要来源。你应该记录程序的每一个重要“步骤”，它进行的任何重要计算，任何错误、异常或异常结果。记录这些事件发生的日期和时间也可能有助于跟踪。所有这些都将使你更容易追踪程序在*管道中的哪个步骤失败*。
- en: Many common programming languages such as Python come with their own logging
    libraries that have some very useful functions you can play with. If your application
    is to run as a SaaS app, then you may want to consider off-device, centralised
    logging. This way if one of your servers dies you can easily recover the logs!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多常见的编程语言，如 Python，都附带有一些非常有用的日志库。如果你的应用程序将作为 SaaS 应用运行，那么你可能需要考虑离设备的集中日志记录。这样，如果你的服务器出现故障，你可以轻松地恢复日志！
- en: TL;DR
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TL;DR
- en: (1) If it isn’t tested, it’s broken
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: (1) 如果没有测试，那就是坏的
- en: (2) Choose meaningful names
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: (2) 选择有意义的名称
- en: (3) Classes and functions should be small and obey the Single Responsibility
    Principle (SRP)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: (3) 类和函数应该小且遵循单一职责原则（SRP）
- en: (4) Catch and handle exceptions, even if you don’t think you need to
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: (4) 捕获和处理异常，即使你认为不需要也要处理
- en: (5) Logs, logs, logs
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: (5) 日志，日志，日志
- en: '**Like to read about tech?**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**喜欢阅读关于技术的内容吗？**'
- en: Follow me on [twitter](https://twitter.com/GeorgeSeif94) where I post all about
    the latest and greatest tech!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [twitter](https://twitter.com/GeorgeSeif94) 上关注我，了解最新和最棒的技术！
- en: Thanks to [David Smooke](https://medium.com/@DavidSmooke?source=post_page).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 [David Smooke](https://medium.com/@DavidSmooke?source=post_page)。
- en: '**Bio: [George Seif](https://towardsdatascience.com/@george.seif94)** is a
    Certified Nerd and AI / Machine Learning Engineer.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[George Seif](https://towardsdatascience.com/@george.seif94)** 是一位认证的极客及
    AI / 机器学习工程师。'
- en: '[Original](https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b).
    Reposted with permission.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://medium.com/@george.seif94/these-5-clean-code-tips-will-dramatically-improve-your-productivity-b20c152783b)。已获许可转载。'
- en: '**Related:**'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[5 Quick and Easy Data Visualizations in Python with Code](/2018/07/5-quick-easy-data-visualizations-python-code.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 和代码创建的 5 种快速简易数据可视化](/2018/07/5-quick-easy-data-visualizations-python-code.html)'
- en: '[The 5 Clustering Algorithms Data Scientists Need to Know](/2018/06/5-clustering-algorithms-data-scientists-need-know.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家需要了解的 5 种聚类算法](/2018/06/5-clustering-algorithms-data-scientists-need-know.html)'
- en: '[Selecting the Best Machine Learning Algorithm for Your Regression Problem](/2018/08/selecting-best-machine-learning-algorithm-regression-problem.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为回归问题选择最佳机器学习算法](/2018/08/selecting-best-machine-learning-algorithm-regression-problem.html)'
- en: '* * *'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的 3 大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 加速你的网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 管理'
- en: '* * *'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Top 6 Tools to Improve Your Productivity on Snowflake](https://www.kdnuggets.com/2023/08/top-6-tools-improve-productivity-snowflake.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提升你在 Snowflake 上生产力的 6 大工具](https://www.kdnuggets.com/2023/08/top-6-tools-improve-productivity-snowflake.html)'
- en: '[PyTorch Tips to Boost Your Productivity](https://www.kdnuggets.com/2023/08/pytorch-tips-boost-productivity.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PyTorch 提升你生产力的小贴士](https://www.kdnuggets.com/2023/08/pytorch-tips-boost-productivity.html)'
- en: '[3 Ways Understanding Bayes Theorem Will Improve Your Data Science](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解贝叶斯定理将如何提升你的数据科学能力的 3 种方法](https://www.kdnuggets.com/2022/06/3-ways-understanding-bayes-theorem-improve-data-science.html)'
- en: '[Why Humbling Yourself Will Improve Your Data Science Skills](https://www.kdnuggets.com/2022/01/humbling-improve-data-science-skills.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[谦逊将如何提升你的数据科学技能](https://www.kdnuggets.com/2022/01/humbling-improve-data-science-skills.html)'
- en: '[8 Ways to Improve Your Search Application this Week](https://www.kdnuggets.com/2022/09/corise-8-ways-improve-search-application-week.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[本周提升搜索应用的 8 种方法](https://www.kdnuggets.com/2022/09/corise-8-ways-improve-search-application-week.html)'
- en: '[How to Use ChatGPT to Improve Your Data Science Skills](https://www.kdnuggets.com/2023/03/chatgpt-improve-data-science-skills.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 ChatGPT 提升你的数据科学技能](https://www.kdnuggets.com/2023/03/chatgpt-improve-data-science-skills.html)'
