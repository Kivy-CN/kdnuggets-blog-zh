["```py\nimport numpy as np\n\nlist = [1, 2, 3]\nc = np.asarray(list)\n\n```", "```py\n# Array items as ndarray \nc = np.array([1, 2, 3])\n\n# A 2x2 2d array shape for the arrays in the format (rows, columns)\nshape = (2, 2)\n\n# Random values\nc = np.empty(shape)\n\nd = np.ones(shape)\ne = np.zeros(shape)\n\n```", "```py\n# Creating ndarray from list\nc = np.array([[1., 2.,],[1., 2.]])\n\n# Creating new array in the shape of c, filled with 0\nd = np.empty_like(c)\n\n```", "```py\na = np.asarray([[1,1,2,3,4], # 1st row\n                [2,6,7,8,9], # 2nd row\n                [3,6,7,8,9], # 3rd row\n                [4,6,7,8,9], # 4th row\n                [5,6,7,8,9]  # 5th row\n              ])\n\nb = np.asarray([[1,1],\n                [1,1]])\n\n# Select row in the format a[start:end], if start or end omitted it means all range.\ny = a[:1]  # 1st row\ny = a[0:1] # 1st row\ny = a[2:5] # select rows from 3rd to 5th row\n\n# Select column in the format a[start:end, column_number]\nx = a[:, -1] # -1 means first from the end\nx = a[:,1:3] # select cols from 2nd col until 3rd\n\n```", "```py\na = np.array([1, 2, 3])\nb = np.array([5, 6])\nprint np.concatenate([a, b, b])  \n# >>  [1 2 3 5 6 5 6]\n\n```", "```py\na2 = np.array([[1, 2], [3, 4]])\n\n# axis=0 - concatenate along rows\nprint np.concatenate((a2, b), axis=0)\n# >>   [[1 2]\n#       [3 4]\n#       [5 6]]\n\n# axis=1 - concatenate along columns, but first b needs to be transposed:\nb.T\n#>> [[5]\n#    [6]]\nnp.concatenate((a2, b.T), axis=1)\n#>> [[1 2 5]\n#    [3 4 6]]\n\n```", "```py\n# 1d arrays\nprint np.append(a, a2)\n# >> [1 2 3 1 2 3 4]\n\nprint np.append(a, a)\n# >> [1 2 3 1 2 3]\n\n```", "```py\nprint np.append(a2, b, axis=0)\n# >> [[1 2]\n#     [3 4]\n#     [5 6]]\n\nprint np.append(a2, b.T, axis=1)\n# >> [[1 2 5]\n#     [3 4 6]]\n\n```", "```py\nprint np.hstack([a, b])\n# >> [1 2 3 5 6]\n\nprint np.vstack([a, a])\n# >> [[1 2 3]\n#     [1 2 3]]\n\n```", "```py\nprint np.hstack([a2,a2]) # arrays must match shape\n# >> [[1 2 1 2]\n#     [3 4 3 4]]\n\nprint np.vstack([a2, b])\n# >> [[1 2]\n#     [3 4]\n#     [5 6]]\n\n```", "```py\na = np.array([1, 2, 3.3])\nprint a\n# >> [ 1\\.   2\\.   3.3]\n\n```", "```py\na = np.array([1, 2, 3.3])\nprint a\n# >> [ 1\\.   2\\.   3.3]print a.astype(int)\n# >> [1 2 3]\n\n```", "```py\nchararray = np.chararray([3,3], itemsize=3)\nchararray[:] = 'abc' # assing value to all fields \nprint chararray\n#>> [['abc' 'abc' 'abc']\n#    ['abc' 'abc' 'abc']\n#    ['abc' 'abc' 'abc']]\n\n```", "```py\na2 = np.array([\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1],\n    [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1]\n])\n\nnp.savetxt('test.txt', a2, delimiter=',')\na2_new = np.loadtxt('test.txt', delimiter=',')\n\n```", "```py\nfrom sklearn.datasets import dump_svmlight_file, load_svmlight_file\n\nmatrix = [\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2],\n    [1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 2],\n    [1, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 1, 2]\n]\n\nlabels = [1,1,1,1,1,2,2]\n\ndump_svmlight_file(matrix, labels, 'svmlight.txt', zero_based=True)\n\n# The file looks like this:\n\n# 1 0:1 13:1 14:2\n# 1 0:1 13:1 14:2\n# 1 0:1 13:1 14:2\n# 1 0:1 13:1 14:2\n# 1 0:1 13:1 14:2\n# 2 0:1 5:3 13:1 14:2\n# 2 0:1 5:3 13:1 14:2\n\nsvm_loaded = load_svmlight_file('svmlight.txt', zero_based=True)\n\n```", "```py\nsvm_loaded[0].toarray() # matrix element at index 0\nsvm_loaded[1] # labels at index 1\n\n```"]