["```py\nimport pandas as pd\n# Assuming 'airbnb_search_details' is the DataFrame containing your dataset\n# Replace 'airbnb_search_details' with the actual name of your DataFrame if different\n# Filter the DataFrame based on the condition: number of bedrooms == number of bathrooms\nresult = airbnb_search_details[airbnb_search_details['bedrooms'] == airbnb_search_details['bathrooms']]\n# Display the resulting DataFrame\nprint(result) \n```", "```py\nimport pandas as pd\n# Assuming 'airbnb_search_details' is the DataFrame containing your dataset\n# Replace 'airbnb_search_details' with the actual name of your DataFrame if different\n# Filter the DataFrame based on the condition: number of bedrooms == number of bathrooms\nresult = airbnb_search_details[airbnb_search_details['bedrooms'] == airbnb_search_details['bathrooms']]\n# Display the resulting DataFrame\nresult\n```", "```py\nclass Solution:\n    def removeElement(self, nums: List[int], val: int) -> int:\n        k = 0  # Counter for elements not equal to val\n\n        # Iterate through the array\n        for i in range(len(nums)):\n            if nums[i] != val:\n                nums[k] = nums[i]  # Move the element to the kth position\n                k += 1\n\n        return k \n```", "```py\nSELECT\n    product_id,\n    SUM(quantity) AS total_sold,\n    CASE\n        WHEN SUM(quantity) >= 30 THEN 'Outstanding'\n        WHEN SUM(quantity) BETWEEN 20 AND 29 THEN 'Satisfactory'\n        WHEN SUM(quantity) BETWEEN 10 AND 19 THEN 'Unsatisfactory'\n        WHEN SUM(quantity) BETWEEN 1 AND 9 THEN 'Poor'\n    END AS ad_performance\nFROM\n    marketing_campaign\nGROUP BY\n    product_id\nORDER BY\n    total_sold DESC; \n```", "```py\nSELECT s.product_id, s.year AS first_year, s.quantity, s.price\nFROM Sales s\nJOIN (\n    SELECT product_id, MIN(year) AS first_year\n    FROM Sales\n    GROUP BY product_id\n) t ON s.product_id = t.product_id AND s.year = t.first_year\nORDER BY s.product_id; \n```", "```py\n# Select necessary columns from airbnb_reviews and filter rows where from_type is 'guest'\nfiltered_reviews <- airbnb_reviews[airbnb_reviews$from_type == 'guest', c('from_user', 'to_user', 'review_score')]\n\n# Group by from_user and get the maximum review score for each guest\nmax_scores <- aggregate(review_score ~ from_user, filtered_reviews, max)\n\n# Perform inner join to get the rows with the maximum review score for each guest\njoined_df <- merge(filtered_reviews, max_scores, by = c('from_user', 'review_score'))\n\n# Perform inner join with airbnb_hosts to get the nationality of the favorite host\nfinal_df <- merge(joined_df, airbnb_hosts, by.x = 'to_user', by.y = 'host_id')\n\n# Select the necessary columns from the final joined dataframe\nresult <- final_df[, c('from_user', 'nationality')]\n\n# Remove duplicate rows based on nationality\ndistinct_result <- distinct(result, .keep_all = TRUE)\n\n# Print the final result\ndistinct_result\n```", "```py\nimport pandas as pd\n\n# Load dataset\ndata = pd.read_csv('dataset_2.csv')\n\n# Convert 'Accept Rate' from string percentage to float\ndata['Accept Rate'] = data['Accept Rate'].str.rstrip('%').astype('float') / 100.0\n\n# Calculate bonus under both options\ndata['Option 1 Bonus'] = ((data['Supply Hours'] >= 8) & (data['Accept Rate'] >= 0.9) & \n                          (data['Trips Completed'] >= 10) & (data['Rating'] >= 4.7)) * 50\ndata['Option 2 Bonus'] = ((data['Trips Completed'] >= 12) & (data['Rating'] >= 4.7)) * data['Trips Completed'] * 4\n\n# Compute total payout for each option\ntotal_payout_option1 = data['Option 1 Bonus'].sum()\ntotal_payout_option2 = data['Option 2 Bonus'].sum()\n\n# Compute number of drivers who qualify under Option 1 but not Option 2\nnum_option1_only = ((data['Option 1 Bonus'] > 0) & (data['Option 2 Bonus'] == 0)).sum()\n\n# Compute percentage of drivers who complete less than 10 trips, had an acceptance rate of less than 90% and had a rating of 4.7 or higher\npercent_undesirable_drivers = ((data['Trips Completed'] < 10) & (data['Accept Rate'] < 0.9) & (data['Rating'] >= 4.7)).mean() * 100\n\nprint('Total bonus payout for Option 1: $', total_payout_option1)\nprint('Total bonus payout for Option 2: $', total_payout_option2)\nprint('Number of drivers who qualify under Option 1 but not Option 2: ', num_option1_only)\nprint('Percentage of drivers who complete less than 10 trips, had an acceptance rate of less than 90%, and had a rating of 4.7 or higher: ', percent_undesirable_drivers) \n```", "```py\n# Calculate the taxi driver's yearly income and expenses\ndaily_income = 200\nweekly_income = daily_income * 6  # Working 6 days a week\nyearly_income = weekly_income * 52  # Working all year\nyearly_expenses = (200 * 49) + (400 * 12) + (500 * 49)  # No expenses on off weeks\nyearly_net = yearly_income - yearly_expenses\n\n# Calculate the new expenses and net income if the driver partners with Uber\nnew_yearly_expenses = (200 * 1.05 * 49) + (400 * 0.8 * 12)  # 5% increase in gas, 20% decrease in insurance\nnew_yearly_net = yearly_income - new_yearly_expenses - 40000  # Subtract car cost\n\n# Calculate the increase in gross fares necessary to maintain the same profit margin\nadditional_income_required = yearly_net - new_yearly_net\nadditional_income_required_weekly = additional_income_required / 52\n\nprint('Taxi driver yearly net income: $', yearly_net)\nprint('Required increase in weekly gross fares: $', additional_income_required_weekly)\n```", "```py\n# Weeks off per year\nweeks_off = 3\n\n# Total weeks per year\ntotal_weeks_per_year = 52\n\n# Weeks of work per year\nworking_weeks = total_weeks_per_year - weeks_off\n\n# Total months per year\ntotal_months_per_year = 12\n\n# Expenses\ngas_per_week = 200\ninsurance_per_month = 400\nvehicle_rent_per_week = 500\n\n# Revenue\nfare_per_day = 200 \nwork_days_per_week = 6\ntotal_revenue = fare_per_day * work_days_per_week * working_weeks\n\n# Total Expenses\ntotal_expenses = (gas_per_week + vehicle_rent_per_week) * working_weeks + insurance_per_month * total_months_per_year\n\n# Net Income\nnet_income = total_revenue - total_expenses\n\nprint(\"Net Income per year: $\", net_income)\n\n# For Question 6:\n\n# Expenses changes\nnew_gas_per_week = gas_per_week * 1.05  # 5% increase\nnew_insurance_per_month = insurance_per_month * 0.8  # 20% decrease\ncar_cost = 40000\n\n# New Total Expenses\nnew_total_expenses = car_cost + (new_gas_per_week * working_weeks) + (new_insurance_per_month * total_months_per_year)\n\n# To maintain the same net income, the new revenue should be:\nnew_total_revenue = new_total_expenses + net_income\n\n# This translates to a required increase in weekly fares:\nadditional_fare_per_week = (new_total_revenue - total_revenue) / working_weeks\n\nprint(\"Required increase in weekly fares: $\", additional_fare_per_week)\n```"]