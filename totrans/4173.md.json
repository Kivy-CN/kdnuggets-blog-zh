["```py\npip install pycaret\n```", "```py\npip install pycaret[full] \n```", "```py\n**# loading the dataset** from pycaret.datasets import get_data\ndataset = get_data('credit')\n```", "```py\n**# check the shape of data** dataset.shape>>> (24000, 24)\n```", "```py\n**# sample 5% of data to be used as unseen data**\ndata = dataset.sample(frac=0.95, random_state=786)\ndata_unseen = dataset.drop(data.index)\ndata.reset_index(inplace=True, drop=True)\ndata_unseen.reset_index(inplace=True, drop=True)**# print the revised shape** print('Data for Modeling: ' + str(data.shape))\nprint('Unseen Data For Predictions: ' + str(data_unseen.shape))>>> Data for Modeling: (22800, 24)\n>>> Unseen Data For Predictions: (1200, 24)\n```", "```py\n**# init setup** from pycaret.classification import *\ns = setup(data = data, target = 'default', session_id=123)\n```", "```py\nbest_model = compare_models()\n```", "```py\nprint(best_model)**>>> OUTPUT**RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,\n                max_iter=None, normalize=False, random_state=123, solver='auto',\n                tol=0.001)\n```", "```py\n**# check available models** models()\n```", "```py\ndt = create_model('dt')\n```", "```py\n**# trained model object is stored in the variable 'dt'.** \nprint(dt)**>>> OUTPUT**DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n                       max_depth=None, max_features=None, max_leaf_nodes=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=2,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=123, splitter='best')\n```", "```py\nknn = create_model('knn')\n```", "```py\nrf = create_model('rf')\n```", "```py\ntuned_dt = tune_model(dt)\n```", "```py\n**# tuned model object is stored in the variable 'tuned_dt'.** print(tuned_dt)**>>> OUTPUT**DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',\n                       max_depth=6, max_features=1.0, max_leaf_nodes=None,\n                       min_impurity_decrease=0.002, min_impurity_split=None,\n                       min_samples_leaf=5, min_samples_split=5,\n                       min_weight_fraction_leaf=0.0, presort='deprecated',\n                       random_state=123, splitter='best')\n```", "```py\nimport numpy as np\ntuned_knn = tune_model(knn, custom_grid = {'n_neighbors' : np.arange(0,50,1)})\n```", "```py\nprint(tuned_knn)**>>> OUTPUT**KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n                     metric_params=None, n_jobs=-1, n_neighbors=42, p=2,\n                     weights='uniform')\n```", "```py\ntuned_rf = tune_model(rf)\n```", "```py\nplot_model(tuned_rf, plot = 'auc')\n```", "```py\nplot_model(tuned_rf, plot = 'pr')\n```", "```py\nplot_model(tuned_rf, plot='feature')\n```", "```py\nplot_model(tuned_rf, plot = 'confusion_matrix')\n```", "```py\nevaluate_model(tuned_rf)\n```", "```py\npredict_model(tuned_rf);\n```", "```py\n**# finalize rf model**\nfinal_rf = finalize_model(tuned_rf)**# print final model parameters**\nprint(final_rf)**>>> OUTPUT**RandomForestClassifier(bootstrap=False, ccp_alpha=0.0, class_weight={},\n                       criterion='entropy', max_depth=5, max_features=1.0,\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0002, min_impurity_split=None,\n                       min_samples_leaf=5, min_samples_split=10,\n                       min_weight_fraction_leaf=0.0, n_estimators=150,\n                       n_jobs=-1, oob_score=False, random_state=123, verbose=0,\n                       warm_start=False)\n```", "```py\npredict_model(final_rf);\n```", "```py\nunseen_predictions = predict_model(final_rf, data=data_unseen)\nunseen_predictions.head()\n```", "```py\n**# check metric on unseen data** from pycaret.utils import check_metric\ncheck_metric(unseen_predictions['default'], unseen_predictions['Label'], metric = 'Accuracy')**>>> OUTPUT** 0.8167\n```", "```py\n**# saving the final model** save_model(final_rf,'Final RF Model 11Nov2020')>>> Transformation Pipeline and Model Successfully Saved\n```", "```py\n**# loading the saved model**\nsaved_final_rf = load_model('Final RF Model 11Nov2020')>>> Transformation Pipeline and Model Successfully Loaded\n```", "```py\n**# predict on new data** new_prediction = predict_model(saved_final_rf, data=data_unseen)\nnew_prediction.head()\n```", "```py\nfrom pycaret.utils import check_metric\ncheck_metric(new_prediction['default'], new_prediction['Label'], metric = 'Accuracy')>>> 0.8167\n```"]