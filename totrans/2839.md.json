["```py\nimport pandas as pd\nimport numpy as np\nimport h2o\npd.set_option('display.width', 5000)\n```", "```py\nh2o.init()\n```", "```py\nbank_df = h2o.upload_file(\"bank-additional-full.csv\")\n```", "```py\n# show 6th row\nprint(bank_df[5,:])\n# show 6-7 rows\nprint(bank_df[5:7,:])\n# show first 4 columns from 6-7 rows\nprint(bank_df[5:7,0:4])\n# show job,education and y columns from 6-7 rows\nprint(bank_df[5:7, ['job', 'education', 'y']])\n```", "```py\nx = bank_df.names\nx.remove(\"y\")\nprint(x)\nY = \"y\"\n```", "```py\ntrain, test = bank_df.split_frame([0.7], seed=42)\n\n```", "```py\nfrom h2o.estimators import H2ORandomForestEstimator\n```", "```py\nrf = H2ORandomForestEstimator(ntrees=200)\nrf.train(x=x,\n         y=y,\n         training_frame=train,\n         validation_frame=test)\n```", "```py\nrf = H2ORandomForestEstimator(ntrees=200)\nrf.train(x=x,\n         y=y,\n         training_frame=train,\n         validation_frame=test\n```", "```py\n(predictions[\"predict\"] == test[\"y\"]).mean()\n```", "```py\nfrom h2o.estimators.deeplearning import H2ODeepLearningEstimator\ndl = H2ODeepLearningEstimator(hidden=[100, 10, 4],activation='Tanh')\ndl.train(x=x, y=y, training_frame=train, validation_frame=test)\npredictions_dl = dl.predict(test)\nprint((predictions_dl[\"predict\"] == test[\"y\"]).mean())\n```", "```py\nfrom h2o.estimators.glm import H2OGeneralizedLinearEstimator\nlm = H2OGeneralizedLinearEstimator(family=\"binomial\",\n                                   lambda_search=True)\nlm.train(x=x,\n         y=y,\n         training_frame=train,\n         validation_frame=test)\n```", "```py\npredictions_lm = lm.predict(test)\nprint((predictions_lm[\"predict\"] == test[\"y\"]).mean())\n```", "```py\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\ngb = H2OGradientBoostingEstimator()\ngb.train(x=x,\n         y=y,\n         training_frame=train,\n         validation_frame=test)\n```", "```py\npredictions_gb = gb.predict(test)\nprint((predictions_gb[\"predict\"] == test[\"y\"]).mean())\n```", "```py\nparam = {\n         \"ntrees\" : 400,\n         \"max_depth\" : 4,\n         \"learn_rate\" : 0.01,\n         \"sample_rate\" : 0.4,\n         \"col_sample_rate_per_tree\" : 0.8,\n         \"min_rows\" : 5,\n         \"seed\": 4241,\n         \"score_tree_interval\": 100\n         }\npredictions_xgb = xgb.predict(test)\nprint((predictions_xgb[\"predict\"] == test[\"y\"]).mean())\n```", "```py\nrf_cv = H2ORandomForestEstimator(ntrees=200, nfolds=3)\nrf_cv.train(x=x, y=y, training_frame=bank_df)\n```", "```py\nfrom h2o.grid.grid_search import H2OGridSearch\n```", "```py\nxgb_parameters = {'max_depth': [3, 6],\n                  'sample_rate': [0.4, 0.7],\n                  'col_sample_rate': [0.8, 1.0],\n                  'ntrees': [200, 300]}\n```", "```py\nxgb_grid_search = H2OGridSearch(model=H2OXGBoostEstimator,\n                                grid_id='example_grid',\n                                hyper_params=xgb_parameters)\n```", "```py\nxgb_grid_search.train(x=x,\n                      y=y,\n                      training_frame=train,\n                      validation_frame=test,\n                      learn_rate=0.3,\n                      seed=42)\n```", "```py\ngrid_results = xgb_grid_search.get_grid(sort_by='accuracy',\n                                        decreasing=True)\nprint(grid_results)\n```", "```py\nfrom h2o.automl import H2OAutoML\nautoML = H2OAutoML(max_runtime_secs=120)\nautoML.train(x=x,\n             y=y,\n             training_frame=bank_df)\n```", "```py\nleaderboard = autoML.leaderboard\nprint(leaderboard)\n```", "```py\npredictionAML = autoML.predict(test)\n```"]