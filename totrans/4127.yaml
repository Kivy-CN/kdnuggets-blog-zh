- en: Find a Picture in an Image Without Marking it Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图像中找到未标记的图片
- en: 原文：[https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html](https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html](https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html)
- en: '![Find a Picture in an Image Without Marking it Up](../Images/c8e88b597a7b216d33b872bae4f8a214.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/c8e88b597a7b216d33b872bae4f8a214.png)'
- en: Image by Author | Edited by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片 | 编辑者编辑
- en: 'We often see pictures in images: comics, for example, combine several pictures
    into one. And if you have an entertainment app where people post memes, like in
    our iFunny, you''re going to run into that all the time. Neural networks are already
    capable of finding animals, people, or other objects, but what if we need to find
    but another image in the image? Let''s take a closer look at our algorithm so
    that you can test it with [a notebook](https://colab.research.google.com/drive/1u42OGNz4OEZCb7RakFhw6TETWpLCG3sb?usp=sharing)
    in Google Colaboratory and even implement it in your project.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常看到图像中的图片：例如，漫画将几张图片合并成一张。如果你有一个娱乐应用程序，用户在其中发布迷因，就像我们的iFunny，你会经常遇到这种情况。神经网络已经能够找到动物、人或其他物体，但如果我们需要在图像中找到另一张图片怎么办？让我们更详细地了解我们的算法，以便你可以在Google
    Colaboratory中使用[一个笔记本](https://colab.research.google.com/drive/1u42OGNz4OEZCb7RakFhw6TETWpLCG3sb?usp=sharing)进行测试，甚至在你的项目中实现它。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全领域'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持你的组织IT需求'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'So, memes. Many of them consist of a picture and its caption, with the former
    serving as the context to the verbal joke:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，迷因。许多迷因由图片及其标题组成，前者作为语言笑话的背景：
- en: '![Find a Picture in an Image Without Marking it Up](../Images/9aa85b245aa2501e310b9c303a932d6e.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/9aa85b245aa2501e310b9c303a932d6e.png)'
- en: 'A meme can include several images with text:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一张迷因可能包含多个带有文字的图片：
- en: '![Find a Picture in an Image Without Marking it Up](../Images/221b84c117a986122e16da9fc4b989b1.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/221b84c117a986122e16da9fc4b989b1.png)'
- en: One of the popular types of memes is screenshots of social network posts e.g.
    from Twitter. The picture occupies a relatively small area in them.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一种流行的迷因类型是社交网络帖子截图，例如来自Twitter。图片在其中占据了相对较小的区域。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/faab49e34222707e3e662b92e57e6c00.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/faab49e34222707e3e662b92e57e6c00.png)'
- en: Initially, the task of finding a picture in the image came up when we were sending
    push notifications. Before the advent of full-page push messages on Android, all
    the pictures in such messages were very small. The text was unreadable (Why would
    the user need it then?), and all the objects in the notification image were hardly
    informative. They were also less attractive.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，寻找图片的任务出现在我们发送推送通知的时候。在Android全面页面推送消息出现之前，这些消息中的所有图片都非常小。文字难以阅读（那用户需要它干嘛？），通知图片中的所有对象几乎没有信息量。它们也不够吸引人。
- en: We decided to bet on pictures from memes. To increase the visual part, we made
    an algorithm that cuts out all the frames around the image, regardless of what
    is shown on it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定押注于迷因中的图片。为了增强视觉效果，我们制作了一个算法，可以裁剪图片周围的所有框架，无论上面显示了什么。
- en: Let's see the algorithm in action on a few examples
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们通过几个例子来看看算法的实际效果
- en: 'Here''s how the algorithm handled the black background and the app watermark:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是算法如何处理黑色背景和应用程序水印的方式：
- en: '![Find a Picture in an Image Without Marking it Up](../Images/9aa85b245aa2501e310b9c303a932d6e.png)
    ![Find a Picture in an Image Without Marking it Up](../Images/6f80913f6e05d01a8f9123ed967679d6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/9aa85b245aa2501e310b9c303a932d6e.png) ![在图像中查找图片而不标记](../Images/6f80913f6e05d01a8f9123ed967679d6.png)'
- en: In the following example, it did not separate the images, even though there
    was a large line between them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，尽管它们之间有一条大线，但算法并未将这些图像分开。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/af311ed5f6a73eea5c7fe0dd7d1dccc1.png)
    ![Find a Picture in an Image Without Marking it Up](../Images/181c8402915f6cdc65961e90522a56ea.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/af311ed5f6a73eea5c7fe0dd7d1dccc1.png) ![在图像中查找图片而不标记](../Images/181c8402915f6cdc65961e90522a56ea.png)'
- en: This method is also suitable for large vertical text, which occupies about 50%
    of the area of the entire image.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法也适用于占据整个图像约50%面积的大型竖直文本。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/221b84c117a986122e16da9fc4b989b1.png)
    ![Find a Picture in an Image Without Marking it Up](../Images/1f277aa6d4cc39e6d06c80e8feb20a62.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/221b84c117a986122e16da9fc4b989b1.png) ![在图像中查找图片而不标记](../Images/1f277aa6d4cc39e6d06c80e8feb20a62.png)'
- en: '*However, the algorithm missed the application watermark (there is still work
    to be done).*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*然而，算法未能识别应用水印（仍需改进）。*'
- en: The algorithm handled the following example with flying colors, even though
    the desired image occupied a relatively small percentage of the meme. The algorithm
    also trimmed the white frames on the sides.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 算法在处理以下示例时表现出色，即使目标图像在整个表情包中所占比例相对较小。算法还修剪了侧边的白色边框。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/faab49e34222707e3e662b92e57e6c00.png)
    ![Find a Picture in an Image Without Marking it Up](../Images/83034fad8066afe3ff6b39e0a915cfb5.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/faab49e34222707e3e662b92e57e6c00.png) ![在图像中查找图片而不标记](../Images/83034fad8066afe3ff6b39e0a915cfb5.png)'
- en: In the next example, there were two backgrounds at once (white and black), but
    the algorithm coped with this. However, it left the white frames on the sides.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，图像中同时有两个背景（白色和黑色），但算法成功处理了这一情况。然而，它保留了侧边的白色边框。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/70bdcaa9b72cff3264fadf36ae2bce1f.png)
    ![Find a Picture in an Image Without Marking it Up](../Images/2ec933a697142f461d77b86f81f04bd9.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/70bdcaa9b72cff3264fadf36ae2bce1f.png) ![在图像中查找图片而不标记](../Images/2ec933a697142f461d77b86f81f04bd9.png)'
- en: The last example is particularly interesting because the image itself contains
    many lines. But even this did not confuse our algorithm. The upper boundary is
    a little bigger than we wanted it to be, but it's a great result for such a difficult
    case!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个例子特别有趣，因为图像本身包含许多线条。但即便如此，也未能困扰我们的算法。上边界比我们期望的稍大，但对于如此困难的情况来说，这是一个很好的结果！
- en: '![Find a Picture in an Image Without Marking it Up](../Images/5431b4496b7a25f47b04adebff729b34.png)
    ![Find a Picture in an Image Without Marking it Up](../Images/15a5f532b42c120e31830db9b0100f5b.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/5431b4496b7a25f47b04adebff729b34.png) ![在图像中查找图片而不标记](../Images/15a5f532b42c120e31830db9b0100f5b.png)'
- en: Recall that it was possible to achieve these results without markup.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 请回忆一下，这些结果是在没有标记的情况下取得的。
- en: The Algorithm
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 算法
- en: Let's skip the uninformative parts of the code. You can find and run them yourself
    in the full [implementation](https://colab.research.google.com/drive/1u42OGNz4OEZCb7RakFhw6TETWpLCG3sb?usp=sharing)
    of the algorithm. In this article, we will focus only on the main idea.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 跳过代码中无关紧要的部分。你可以在算法的完整[实现](https://colab.research.google.com/drive/1u42OGNz4OEZCb7RakFhw6TETWpLCG3sb?usp=sharing)中找到并运行这些部分。在这篇文章中，我们将重点关注主要思想。
- en: Let's take this image with the puppies as an example.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以这张小狗的图片为例。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/2dd41777378e3e81cab6cffd74e02b75.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/2dd41777378e3e81cab6cffd74e02b75.png)'
- en: It has text at the top and a small strip of white background along with a watermark
    of our application at the bottom.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它在顶部有文本和一条白色背景的小条纹，以及底部的应用水印。
- en: To get just the picture with the puppies, we need to remove the two horizontal
    rectangles at the bottom and top. The basic idea is to recognize all the straight
    lines with the image using the [Hough Transform](https://en.wikipedia.org/wiki/Hough_transform)
    and then select those that border a white or black monotone area, which we will
    consider the background.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了仅获取小狗的图片，我们需要去除上下两个水平矩形。基本思路是使用[霍夫变换](https://en.wikipedia.org/wiki/Hough_transform)识别图像中的所有直线，然后选择那些与白色或黑色单色区域相邻的直线，我们将这些区域视为背景。
- en: Step 1\. Conversion of the image to Grayscale
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第1步。将图像转换为灰度图像
- en: The first step of image processing here is converting it to a monochrome format.
    There are many ways to do this, but I prefer getting the L-channel (lightness)
    in the [Lab](https://en.wikipedia.org/wiki/CIELAB_color_space) color space. This
    approach has proven to be the best in most cases. But you can try other approaches,
    say the V-channel (value) of the [HSV](https://en.wikipedia.org/wiki/HSL_and_HSV)
    color space.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图像处理的第一步是将其转换为单色格式。有很多方法可以实现这一点，但我更喜欢获取[Lab](https://en.wikipedia.org/wiki/CIELAB_color_space)颜色空间中的L通道（亮度）。这种方法在大多数情况下被证明是最好的。不过，你可以尝试其他方法，比如[HSV](https://en.wikipedia.org/wiki/HSL_and_HSV)颜色空间中的V通道（值）。
- en: To eliminate the sharp contrast differences that create unnecessary lines in
    the image, we apply the Gaussian filter to the resulting black-and-white image.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了消除图像中产生不必要线条的强对比度差异，我们对生成的黑白图像应用高斯滤波器。
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here we used functions from the OpenCV library. In addition to the image, the
    cv2.GaussianBlur function accepts the Gaussian kernel size (width, height) and
    the standard deviation along the X axis (along the Y axis, it is 0 by default).
    When using 0 as the standard deviation, it is [calculated](https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#gac05a120c1ae92a6060dd0db190a61afa)
    based on the size of the kernel. The parameters we use are based on subjective
    experience.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用了OpenCV库中的函数。除了图像外，cv2.GaussianBlur函数接受高斯内核大小（宽度，高度）和X轴上的标准差（默认情况下，Y轴为0）。当使用0作为标准差时，它会根据内核的大小进行[计算](https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#gac05a120c1ae92a6060dd0db190a61afa)。我们使用的参数基于主观经验。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/99abc872fafeeb532d2a0308fe09852a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/99abc872fafeeb532d2a0308fe09852a.png)'
- en: This is what we get at this point.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们目前得到的结果。
- en: You can find and use similar methods from the [scikit-image](https://scikit-image.org)
    library, but be careful, as they differ in both results and input parameters.
    The Lightness channel of the [skimage.color.rgb2lab](https://scikit-image.org/docs/stable/api/skimage.color.html#skimage.color.rgb2lab)
    function result is in the range [0,100], and the Gaussian filter [skimage.filters.gaussian](https://scikit-image.org/docs/stable/api/skimage.filters.html#skimage.filters.gaussian)
    is more sensitive to kernel parameters. This affects the end result.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[scikit-image](https://scikit-image.org)库中找到并使用类似的方法，但要小心，因为它们在结果和输入参数上有所不同。[skimage.color.rgb2lab](https://scikit-image.org/docs/stable/api/skimage.color.html#skimage.color.rgb2lab)函数的亮度通道结果在[0,100]范围内，高斯滤波器[skimage.filters.gaussian](https://scikit-image.org/docs/stable/api/skimage.filters.html#skimage.filters.gaussian)对内核参数更为敏感，这会影响最终结果。
- en: Step 2\. Detecting edges
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第2步。检测边缘
- en: The Hough Transform, which is the basis of our algorithm, can only work with
    binary images that consist of a background and edges taking the values 0 and 1.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 霍夫变换是我们算法的基础，只能处理由背景和边缘组成、值为0和1的二值图像。
- en: We use [the Canny Transform](https://opencv24-python-tutorials.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html)
    to create a binary image. In short, this algorithm calculates the gradient in
    the intensity function of the pixel coordinate and finds its local maxima, the
    areas of which are defined as the desired edge.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用[边缘检测算法](https://opencv24-python-tutorials.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_canny/py_canny.html)来创建二值图像。简而言之，该算法计算像素坐标的强度函数的梯度，并找到其局部最大值，这些区域被定义为所需的边缘。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/6e20048a154222c90e73f8908e79705e.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中查找图片而不标记](../Images/6e20048a154222c90e73f8908e79705e.png)'
- en: Result of the Transform
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 变换结果
- en: We use the Canny function of the Feature module from the [scikit-image](https://scikit-image.org)
    library to perform the transform. You can find a similar function in the OpenCV
    library, but its implementation includes a 5x5 Gaussian filter smoothing, which
    makes it a bit difficult to control the situation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用来自[scikit-image](https://scikit-image.org)库的 Feature 模块中的 Canny 函数来执行变换。你可以在
    OpenCV 库中找到类似的函数，但它的实现包括一个 5x5 的高斯滤波器平滑，这使得控制情况有点困难。
- en: '[PRE1]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Step 3\. The Hough Transform
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 3 步：Hough 变换
- en: Now we need to detect the straight lines among all the lines we have found.
    Hough's straight line transformation excels at this task. The algorithm draws
    a line at a given distance ? from the origin and a certain angle ? to the X-axis,
    as shown below.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在找到的所有线条中检测直线。Hough 的直线变换在这方面表现出色。算法在原点的给定距离 ? 处和 X 轴的某个角度 ? 绘制一条直线，如下所示。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/b25bfa629d23e33535a3584b20ed8e4b.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/b25bfa629d23e33535a3584b20ed8e4b.png)'
- en: For each such line, it calculates the number of the binary image light pixels
    that lie on the drawn line. The procedure is repeated for all ? and ? values in
    the selected range. The result is an intensity map in (?, ?) coordinates. Thus,
    the maxima in the resulting graph will be reached when the drawn straight line
    and the line in the image coincide.![Find a Picture in an Image Without Marking
    it Up](../Images/b01b061c663c9c41883a58d77b69e3cc.png)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每条这样的线，它计算位于绘制直线上的二值图像的亮像素数量。这个过程会对选定范围内的所有 ? 和 ? 值重复进行。结果是 (?, ?) 坐标系中的强度图。因此，当绘制的直线与图像中的线条重合时，结果图中的极大值将会出现。![在图像中找到未标记的图片](../Images/b01b061c663c9c41883a58d77b69e3cc.png)
- en: Illustration of the Hough Transform (right figure) for the two black lines in
    the figure on the left.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 右图中是对左侧图中两条黑线的 Hough 变换的示意图。
- en: In our algorithm, we use [this](https://scikit-image.org/docs/stable/auto_examples/edges/plot_line_hough_transform.html)
    implementation from scikit-image because it is easier to configure. Also, this
    library provides a convenient method for selecting local maxima that resemble
    the lines the most. The OpenCV [implementation](https://opencv24-python-tutorials.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_houghlines/py_houghlines.html)
    doesn't have a similar feature.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的算法中，我们使用[这个](https://scikit-image.org/docs/stable/auto_examples/edges/plot_line_hough_transform.html)来自
    scikit-image 的实现，因为它更易于配置。此外，这个库提供了一个方便的方法来选择最类似于直线的局部极大值。OpenCV 的[实现](https://opencv24-python-tutorials.readthedocs.io/en/latest/py_tutorials/py_imgproc/py_houghlines/py_houghlines.html)没有类似的功能。
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The transform outputs the angles and distances to the found lines. Drawing these
    lines is a bit trickier than the lines we are used to, so here is an additional
    snippet of code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 变换输出了找到的线条的角度和距离。绘制这些线条比我们习惯的直线要复杂一些，因此这里有一个额外的代码片段。
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The found distance is the hypotenuse and the position of the line along the
    y-axis is the cathetus, so we divide the distance value by the sine of the resulting
    angle.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 计算得到的距离是斜边，而直线在 y 轴上的位置是直角边，因此我们将距离值除以所得角度的正弦值。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/9e192008b469877c437bb925df6a153a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/9e192008b469877c437bb925df6a153a.png)'
- en: As a result of running this code, you will see the following
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此代码后，你将看到以下内容：
- en: Our algorithm found all the necessary lines! The border of our app watermark
    at the very bottom is also detected.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的算法找到了所有必要的线条！应用水印的边界也被检测到。
- en: Step 4\. Classification of lines
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 4 步：直线分类
- en: Finally, we need to determine which is the bottom line and which is the top
    one while also removing unnecessary lines, such as the one above the black bar.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要确定哪一条是底部线，哪一条是顶部线，同时去除不必要的线条，例如黑条上方的那一条。
- en: '![Find a Picture in an Image Without Marking it Up](../Images/e5ee01f7e7c83b4e391967bfbaf01842.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![在图像中找到未标记的图片](../Images/e5ee01f7e7c83b4e391967bfbaf01842.png)'
- en: Final result
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果
- en: 'To solve this problem, we added a check of the areas above and below the found
    lines. Since we work with memes and their captions, we expect the background outside
    the picture to be white and the text on it to be black. Or vice versa: black background
    and white letters.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们添加了对找到的线条上下区域的检查。由于我们处理的是表情包及其字幕，我们期望图像外的背景是白色的，而文字是黑色的。或者反过来：黑色背景和白色文字。
- en: Therefore, our algorithm is based on checking the percentage of white and black
    pixels in the separated areas.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的算法基于检查分离区域中白色和黑色像素的百分比。
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In this approach, we used 3 variables:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，我们使用了3个变量：
- en: white_limit is the lower limit for defining the white color. All pixels with
    a value in the range (230; 256) will be considered white.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: white_limit是定义白色的下限。所有值在(230; 256)范围内的像素将被视为白色。
- en: black_limit is the upper limit for defining the black color. All pixels with
    a value in the range (0; 35) will be considered black.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: black_limit是定义黑色的上限。所有值在(0; 35)范围内的像素将被视为黑色。
- en: percent_limit is the minimum percentage of white/black pixels in the area at
    which the area will be considered as background with text.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: percent_limit是将区域视为带有文本的背景时白色/黑色像素的最小百分比。
- en: In addition, the comparison takes place in each color channel independently,
    which is a general enough condition that allows you to correctly handle rare exceptions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，比较在每个颜色通道中独立进行，这是一种通用的条件，允许你正确处理稀有的例外情况。
- en: The next few lines of code select the lowest line among the upper limits and
    the top line among the lower limits. We also added a condition for the size of
    the selected area. If the resulting vertical line cuts off more than 60% of the
    image height, we consider it an error and return the top or bottom border of the
    original image. This parameter is chosen based on the assumption of the area occupied
    by the meme image.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的几行代码选择了上限中的最低线和下限中的最高线。我们还添加了一个关于所选区域大小的条件。如果结果的垂直线裁剪掉了图像高度的超过60%，我们将其视为错误，并返回原始图像的顶部或底部边框。这个参数是基于对表情包图像占用区域的假设来选择的。
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The final algorithm, which you can find in the Functions section [here](https://colab.research.google.com/drive/1u42OGNz4OEZCb7RakFhw6TETWpLCG3sb?usp=sharing),
    also includes finding and adjusting vertical borders, allowing you to remove frames
    on the sides of the image.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 最终算法，你可以在[这里](https://colab.research.google.com/drive/1u42OGNz4OEZCb7RakFhw6TETWpLCG3sb?usp=sharing)的Functions部分找到，还包括了寻找和调整垂直边框的功能，让你能够去除图像两侧的边框。
- en: What's next?
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接下来是什么？
- en: To improve results, you need to learn how to measure quality, and for that you
    need markup. If you want to create a training dataset, our algorithm will make
    your manual markup easier, allowing you to collect the required number of examples
    faster.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改善结果，你需要学习如何测量质量，而这需要标记。如果你想创建一个训练数据集，我们的算法将使你的手动标记更容易，从而使你能更快地收集到所需数量的样本。
- en: To generalize our approach for more cases, you can replace the background color
    check in the algorithm with a monochrome check. This will allow the method to
    be used regardless of the background color.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我们的方法适用于更多情况，你可以将算法中的背景色检查替换为单色检查。这样，无论背景色是什么，方法都可以使用。
- en: '[**Yaroslav Murzaev**](https://funcorp.dev/blog) is a Data Scientist at Funcorp.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[**亚罗斯拉夫·穆尔扎耶夫**](https://funcorp.dev/blog)是Funcorp的数据科学家。'
- en: More On This Topic
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标并寻找目标…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[How to Get Your First Job in Data Science without Any Work Experience](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在没有任何工作经验的情况下获得你的第一份数据科学工作](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
- en: '[Python String Matching Without Complex RegEx Syntax](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 字符串匹配无复杂 RegEx 语法](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)'
- en: '[How to MLOps like a Boss: A Guide to Machine Learning without Tears](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何像老板一样进行 MLOps：无泪的机器学习指南](https://www.kdnuggets.com/2023/06/mlops-like-boss-guide-machine-learning-without-tears.html)'
- en: '[How To Find The Best Data Science Remote Jobs](https://www.kdnuggets.com/2022/12/find-best-data-science-remote-jobs.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何找到最佳的数据科学远程工作](https://www.kdnuggets.com/2022/12/find-best-data-science-remote-jobs.html)'
- en: '[A Quick Guide to Find the Right Minds for Annotation](https://www.kdnuggets.com/2022/04/quick-guide-find-right-minds-annotation.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[快速指南：如何找到合适的标注人才](https://www.kdnuggets.com/2022/04/quick-guide-find-right-minds-annotation.html)'
