- en: 'Pydantic Tutorial: Data Validation in Python Made Simple'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pydantic教程：简化Python中的数据验证
- en: 原文：[https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple](https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple](https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple)
- en: '![Pydantic Tutorial: Data Validation in Python Made Simple](../Images/472c573b553fe701a75ff772541202af.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Pydantic教程：简化Python中的数据验证](../Images/472c573b553fe701a75ff772541202af.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Why Use Pydantic?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么使用Pydantic？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Python is a dynamically typed language. So you can create variables without
    explicitly specifying the data type. And you can always assign a completely different
    value to the same variable. **While this makes things easier for beginners, it
    also makes it just as easy to create invalid objects in your Python application.**
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种动态类型语言。因此，你可以创建变量而无需明确指定数据类型。你也可以随时将完全不同的值赋给同一个变量。**虽然这使得初学者更容易上手，但也同样容易在你的Python应用程序中创建无效对象。**
- en: 'Well, you can create data classes which allow defining fields with type hints.
    But they do not offer direct support for validating data. Enter [Pydantic](https://docs.pydantic.dev/latest/),
    a popular data validation and serialization library. Pydantic offers out-of-the-box
    support for data validation and serialization. Meaning you can:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以创建数据类，允许定义带有类型提示的字段。但它们不直接支持数据验证。引入 [Pydantic](https://docs.pydantic.dev/latest/)，一个流行的数据验证和序列化库。Pydantic提供开箱即用的数据验证和序列化支持。这意味着你可以：
- en: leverage Python’s type hints to validate fields,
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Python的类型提示来验证字段，
- en: use the custom fields and built-in validators Pydantic offers, and
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pydantic提供的自定义字段和内置验证器，并
- en: define custom validators as needed.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据需要定义自定义验证器。
- en: In this tutorial, we’ll model a simple ‘Employee’ class and validate the values
    of the different fields using the data validation functionality of Pydantic. Let’s
    get started!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将建模一个简单的‘员工’类，并使用Pydantic的数据验证功能来验证不同字段的值。让我们开始吧！
- en: Installing Pydantic
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Pydantic
- en: 'If you have Python 3.8 or a later version, you can install Pydantic using pip:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有Python 3.8或更高版本，你可以使用pip安装Pydantic：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you need email validation in your application, you can install the optional
    [email-validator](https://github.com/JoshData/python-email-validator) dependency
    when installing Pydantic like so:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在应用程序中需要电子邮件验证，可以在安装Pydantic时像这样安装可选的 [email-validator](https://github.com/JoshData/python-email-validator)
    依赖：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, you can run the following command to install email-validator:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以运行以下命令安装email-validator：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**Note**: In our example, we’ll use email validation. So please install the
    dependency if you’d like to code along.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：在我们的示例中，我们将使用电子邮件验证。如果你希望跟随代码进行，请安装相应的依赖。'
- en: Creating a Basic Pydantic Model
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个基本的Pydantic模型
- en: 'Now let''s create a simple `Employee` class. FIrst, we create a class that
    inherits from the `BaseModel` class. The various fields and the expected types
    are specified as shown:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们创建一个简单的`Employee`类。首先，我们创建一个继承自`BaseModel`类的类。各种字段和预期类型如下所示：
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that we’ve specified email to be of the `EmailStr` type that Pydantic
    supports instead of a regular Python string. This is because *all valid strings
    may not be valid emails*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已将电子邮件指定为Pydantic支持的`EmailStr`类型，而不是普通的Python字符串。这是因为*所有有效的字符串可能不是有效的电子邮件*。
- en: Validating Fields in the Employee Model
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在员工模型中验证字段
- en: 'Because the `Employee` class is simple, let''s add validation for the following
    fields:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`Employee`类很简单，让我们为以下字段添加验证：
- en: '`email`: should be a valid email. Specifying the `EmailStr` accounts for this,
    and we run into errors creating objects with invalid email.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`：应为有效的电子邮件。指定`EmailStr`可以满足这个要求，我们在创建具有无效电子邮件的对象时会遇到错误。'
- en: '`employee_id`: should be a valid employee ID. We’ll implement a custom validation
    for this field.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`employee_id`：应为有效的员工 ID。我们将为该字段实现自定义验证。'
- en: Implementing Custom Validation
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现自定义验证
- en: For this example, let's say the `employee_id` should be a string of length 6
    containing only alphanumeric characters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，假设`employee_id`应该是一个长度为 6 的仅包含字母数字字符的字符串。
- en: 'We can use the `@validator` decorator with the `employee_id` field at the argument
    and define the `validate_employee_id` method as shown:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`@validator`装饰器与`employee_id`字段作为参数，并定义`validate_employee_id`方法，如下所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now this method checks if the `employee_id` is valid for the Employee objects
    we try to create.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这种方法检查我们尝试创建的 Employee 对象的`employee_id`是否有效。
- en: 'At this point, your script should look like so:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你的脚本应该如下所示：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Loading and Parsing JSON Data Using Pydantic Models
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pydantic 模型加载和解析 JSON 数据
- en: 'In practice, it''s very common to parse JSON responses from APIs into data
    structures like Python dictionaries. Say we have an ‘employees.json’ file (in
    the current directory) with the following records:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，将 API 的 JSON 响应解析为像 Python 字典这样的数据结构是非常常见的。假设我们有一个名为‘employees.json’的文件（在当前目录中），其记录如下：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can see that in the third record corresponding to ‘Alice Brown’, we have
    two fields that are invalid: the `email` and the `employee_id`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，在对应于‘Alice Brown’的第三条记录中，我们有两个无效的字段：`email`和`employee_id`：
- en: '![Pydantic Tutorial: Data Validation in Python Made Simple](../Images/d740eb545c95d03f1e265ba994f3f067.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Pydantic 教程：简化 Python 数据验证](../Images/d740eb545c95d03f1e265ba994f3f067.png)'
- en: Because we’ve specified that email should be `EmailStr`, the email string will
    be automatically validated. We’ve also added the `validate_employee_id` class
    method to check if the objects have a valid employee ID.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们已经指定电子邮件应为`EmailStr`，所以电子邮件字符串将自动进行验证。我们还添加了`validate_employee_id`类方法来检查对象是否具有有效的员工
    ID。
- en: 'Now let''s add the code to parse the JSON file and create employee objects
    (we’ll use the built-in [json module](https://docs.python.org/3/library/json.html)
    for this).  We also import the `ValidationError` class from Pydantic. In essence,
    we try to create objects, handle ValidationError exceptions when the data validation
    fails, and also print out the errors:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加代码来解析 JSON 文件并创建员工对象（我们将使用内置的[json 模块](https://docs.python.org/3/library/json.html)）。我们还从
    Pydantic 中导入`ValidationError`类。实际上，我们尝试创建对象，当数据验证失败时处理 ValidationError 异常，并打印出错误：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you run the script, you should see a similar output:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行脚本时，你应该会看到类似的输出：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As expected, only the record corresponding to ‘Alice Brown’ is *not* a valid
    employee object. Zooming in to the relevant part of the output, you can see a
    detailed message on why the `email` and `employee_id` fields are invalid.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 正如预期的那样，只有对应于‘Alice Brown’的记录*不是*有效的员工对象。放大输出的相关部分，你可以看到关于为什么`email`和`employee_id`字段无效的详细信息。
- en: 'Here’s the complete code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的代码：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Wrapping Up
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: That's all for this tutorial! This is an introductory tutorial to Pydantic.
    I hope you learned the basics of modeling your data, and using both built-in and
    custom validations that Pydantic offers. All the code used in this tutorial is
    [on GitHub](https://github.com/balapriyac/python-basics/tree/main/pydantic-basics).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程到此为止！这是一个 Pydantic 的入门教程。希望你了解了建模数据的基础知识，并使用了 Pydantic 提供的内置和自定义验证。本教程中使用的所有代码都在[GitHub](https://github.com/balapriyac/python-basics/tree/main/pydantic-basics)上。
- en: Next, you may try using Pydantic in your Python projects and also explore serialization 
    capabilities. Happy coding!
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以尝试在你的 Python 项目中使用 Pydantic，并探索序列化功能。编程愉快！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)**
    是一位来自印度的开发者和技术作者。她喜欢在数学、编程、数据科学和内容创作的交汇点工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过撰写教程、操作指南、评论文章等与开发者社区分享她的知识。Bala
    还创建了引人入胜的资源概述和编程教程。**'
- en: More On This Topic
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Ollama Tutorial: Running LLMs Locally Made Super Simple](https://www.kdnuggets.com/ollama-tutorial-running-llms-locally-made-super-simple)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Ollama 教程：本地运行 LLMs 的简单方法](https://www.kdnuggets.com/ollama-tutorial-running-llms-locally-made-super-simple)'
- en: '[Machine Learning Made Simple for Data Analysts with BigQuery ML](https://www.kdnuggets.com/machine-learning-made-simple-for-data-analysts-with-bigquery-ml)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[让数据分析师使用 BigQuery ML 简化机器学习](https://www.kdnuggets.com/machine-learning-made-simple-for-data-analysts-with-bigquery-ml)'
- en: '[Combining Pandas DataFrames Made Simple](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[简化 Pandas DataFrames 的合并](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)'
- en: '[Personalized AI Made Simple: Your No-Code Guide to Adapting GPTs](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[个性化 AI 变得简单：你的无代码 GPT 适配指南](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
- en: '[MarshMallow: The Sweetest Python Library for Data Serialization and…](https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MarshMallow：用于数据序列化和…的最甜 Python 库](https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation)'
- en: '[Data Validation for PySpark Applications using Pandera](https://www.kdnuggets.com/2023/08/data-validation-pyspark-applications-pandera.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Pandera 对 PySpark 应用进行数据验证](https://www.kdnuggets.com/2023/08/data-validation-pyspark-applications-pandera.html)'
