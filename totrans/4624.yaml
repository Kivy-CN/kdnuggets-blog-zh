- en: 'Practical Speech Recognition with Python: The Basics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/07/practical-speech-recognition-python-basics.html](https://www.kdnuggets.com/2019/07/practical-speech-recognition-python-basics.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: Have you ever wanted to try out a speech recognition project but found it all
    just too intimidating?
  prefs: []
  type: TYPE_NORMAL
- en: What about creating something a few steps beyond and a bit more complex, like
    a full audio chatbot or a voice assistant?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Putting together skeleton code for this type of a project is actually quite
    straightforward, thanks to a few open source libraries which we can lean on. With
    that in mind, let's have a look at how to start creating a basic toy speech recognition
    app with Python. Once we get the basics down we can discuss ways to make it much
    more useful.
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/c0581b7a709c7285150f2a47121bf610.png)'
  prefs: []
  type: TYPE_IMG
- en: Our toy Python app will be pretty useless, to be honest. But it will introduce
    us to a few concepts which will be useful for building more complex things afterwards.
    If we build this toy properly, modifying it to do anything more should be relatively
    painless. At least, to an extent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s *exactly* what our app will do when we''re done: it will listen to
    what we say and parrot it back to us. That''s it! The pair of useful things we
    will take away are building speech recognition and audio playback into our app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s import the few libraries that we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s the reasoning:'
  prefs: []
  type: TYPE_NORMAL
- en: '**`[speech_recognition](https://pypi.org/project/SpeechRecognition/)`** - "Library
    for performing speech recognition, with support for several engines and APIs,
    online and offline"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`[pydub](http://pydub.com/)`** - "Manipulate audio with a simple and easy
    high level interface"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`[gTTS](https://pypi.org/project/gTTS/)`** - "Python library and CLI tool
    to interface with Google Translate''s text-to-speech API"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next thing to do — and likely most importantly for a speech recognition
    app — is to recognize speech. To do so, we'll need to first capture incoming audio
    from the microphone, and then perform the speech recognition. This is all handled
    via the `speech_recognition` library.
  prefs: []
  type: TYPE_NORMAL
- en: Here's a function to capture speech.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: That's it. Speech captured and recognized. Still think this is intimidating?
  prefs: []
  type: TYPE_NORMAL
- en: Note that once this app starts running, it will listen in 5 seconds intervals,
    and process these 5 second intervals one at a time. Practical? No, not really,
    but once we do something more complex we can tweak this to, perhaps, listen for
    an activation keyword, and then listen for the full duration of our speaking,
    regardless of length. However, this is a simple enough way to start.
  prefs: []
  type: TYPE_NORMAL
- en: So, what will we do after we capture speech? We'll process it. What exactly
    does this mean?
  prefs: []
  type: TYPE_NORMAL
- en: What kind of app you are building will largely determine what "process it" means.
    This time around, our processing will more or less be a placeholder function to
    do other things in the future. So for now, our toy app will process captured speech
    by parroting it back to us (and outputting it to the console, for good measure).
  prefs: []
  type: TYPE_NORMAL
- en: Here's a simple function for our processing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We also want our app to speak, so let's write a function which uses the Google
    text-to-speech engine to accomplish this.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First we print out what was passed to the function to the console; then Google
    text-to-speech is used to create an audio file from the text; the audio file is
    saved to disk; and then the file is re-opened and played using the `pydub` library.
  prefs: []
  type: TYPE_NORMAL
- en: That's the "difficult" stuff taken care of. Now we just need a few lines to
    drive the process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Both the `speak()` and `capture()` functions are used to get the user's name
    when prompted, and then greet them. Then a while loop is entered which cycles
    between capturing speech input and performing some very elementary checks to ensure
    that *something* was captured and the user did not say 'quit' to exit. The captured
    text is passed to the `process_text()` function, which echoes what was said. This
    is then repeated *ad infinitum*.
  prefs: []
  type: TYPE_NORMAL
- en: 'I''ll say it again: there isn''t anything of much complexity going on here.'
  prefs: []
  type: TYPE_NORMAL
- en: Save all of the above code to a file, `voice_recognition_test.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's check out a conversation with our minimalist speech recognition app.
    Run it with the following line and see the results below (while imagining I'm
    talking and having my words repeated back to me, of course).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]   $ python voice_recognition_test.py [PRE6] What is your name?  I''M
    LISTENING...  Hello, Matthew.  What do you have to say?  I''M LISTENING...  Matthew,
    you said: "where are you from".  What do you have to say?  I''M LISTENING...  Matthew,
    you said: "i''d like some pizza".  What do you have to say?  I''M LISTENING...  Matthew,
    you said: "what is the meaning of life".  What do you have to say?  I''M LISTENING...  OK,
    bye, Matthew.    Process finished with exit code 0 [PRE7]`'
  prefs: []
  type: TYPE_NORMAL
