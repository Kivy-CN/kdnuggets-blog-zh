- en: 'Getting Started with TensorFlow: A Machine Learning Tutorial'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html/2](https://www.kdnuggets.com/2017/12/getting-started-tensorflow.html/2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Transforming Data**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '**Reduction**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: TensorFlow supports different kinds of reduction. Reduction is an operation
    that removes one or more dimensions from a tensor by performing certain operations
    across those dimensions. A list of supported reductions for the current version
    of TensorFlow can be found here. We will present a few of them in the example
    below.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Output:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first parameter of reduction operators is the tensor that we want to reduce.
    The second parameter is the indexes of dimensions along which we want to perform
    the reduction. That parameter is optional, and if not passed, reduction will be
    performed along all dimensions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: We can take a look at the [reduce_sum](https://www.tensorflow.org/versions/master/api_docs/python/tf/reduce_sum)
    operation. We pass a 2-d tensor, and want to reduce it along dimension 1.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the resulting sum would be:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we passed dimension 0, the result would be:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we don’t pass any axis, the result is just the overall sum of:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All reduction functions have a similar interface and are listed in the TensorFlow
    [reduction documentation](https://www.tensorflow.org/versions/r0.12/api_docs/python/math_ops/reduction).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '**Segmentation**'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Segmentation is a process in which one of the dimensions is the process of mapping
    dimensions onto provided segment indexes, and the resulting elements are determined
    by an index row.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Segmentation is actually grouping the elements under repeated indexes, so for
    example, in our case, we have segmented ids `[0, 0, 1, 2, 2]` applied on tensor
    `tens1`, meaning that the first and second arrays will be transformed following
    segmentation operation (in our case summation) and will get a new array, which
    looks like `(2, 8, 1, 0) = (2+0, 5+3, 3-2, -5+5)`. The third element in tensor
    `tens1` is untouched because it isn’t grouped in any repeated index, and last
    two arrays are summed in same way as it was the case for the first group. Beside
    summation, TensorFlow supports [product](https://www.tensorflow.org/versions/master/api_docs/python/tf/segment_prod),
    [mean](https://www.tensorflow.org/versions/master/api_docs/python/tf/segment_mean),
    [max](https://www.tensorflow.org/versions/master/api_docs/python/tf/segment_max),
    and [min](https://www.tensorflow.org/versions/master/api_docs/python/tf/segment_min).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8626a778161812ae5f56cd7be77da7ed.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Sequence Utilities**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequence utilities include methods such as:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[argmin](https://www.tensorflow.org/versions/master/api_docs/python/tf/argmin)
    function, which returns the index with min value across the axes of the input
    tensor,'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[argmax](https://www.tensorflow.org/versions/master/api_docs/python/tf/argmax)
    function, which returns the index with max value across the axes of the input
    tensor,'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[setdiff](https://www.tensorflow.org/versions/master/api_docs/python/tf/setdiff1d),
    which computes the difference between two lists of numbers or strings,'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[where](https://www.tensorflow.org/api_docs/python/tf/where) function, which
    will return elements either from two passed elements x or y, which depends on
    the passed condition, or'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[unique](https://www.tensorflow.org/versions/master/api_docs/python/tf/unique)
    function, which will return unique elements in a 1-D tensor.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We demonstrate a few execution examples below:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Output:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Machine Learning with TensorFlow**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will present a machine learning use case with TensorFlow.
    The first example will be an algorithm for classifying data with the [kNN](https://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm)
    approach, and the second will use the [linear regression algorithm](https://en.wikipedia.org/wiki/Linear_regression).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '**kNN**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'The first algorithm is k-Nearest Neighbors (kNN). It’s a supervised learning
    algorithm that uses distance metrics, for example Euclidean distance, to classify
    data against training. It is one of the simplest algorithms, but still really
    powerful for classifying data. Pros of this algorithm:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Gives high accuracy when the training model is big enough, and
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isn’t usually sensitive to outliers, and we don’t need to have any assumptions
    about data.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cons of this algorithm:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Computationally expensive, and
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requires a lot of memory where new classified data need to be added to all initial
    training instances.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](../Images/61b097d4eeb897b627e93adfa030aa28.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
- en: 'The distance which we will use in this code sample is Euclidean, which defines
    the distance between two points like this:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6379458d1999e254d668ef45cbb393d3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: In this formula, `n` is the number of dimensions of the space, `x` is the vector
    of the training data, and `y` is a new data point that we want to classify.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The dataset which we used in above example is one which can be found on the
    [Kaggle datasets](https://www.kaggle.com/datasets) section. We used the [one](https://www.kaggle.com/dalpozz/creditcardfraud)
    which contains transactions made by credit cards of European cardholders. We are
    using the data without any cleaning or filtering and as per the description in
    Kaggle for this dataset, it is highly unbalanced. The dataset contains 31 variables:
    Time, V1, …, V28, Amount, and Class. In this code sample we use only V1, …, V28
    and Class. Class labels transactions which are fraudulent with 1 and those which
    aren’t with 0.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The code sample contains mostly the things which we described in previous sections
    with exception where we introduced the function for loading a dataset. The function
    `load_data(filepath)` will take a CSV file as an argument and will return a tuple
    with data and labels defined in CSV.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Just below that function, we have defined placeholders for the test and trained
    data. Trained data are used in the prediction model to resolve the labels for
    the input data that need to be classified. In our case, kNN use Euclidian distance
    to get the nearest label.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: The error rate can be calculated by simple division with the number when a classifier
    missed by the total number of examples which in our case for this dataset is 0.2
    (i.e., the classifier gives us the wrong data label for 20% of test data).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Linear Regression
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The linear regression algorithm looks for a linear relationship between two
    variables. If we label the dependent variable as y, and the independent variable
    as x, then we’re trying to estimate the parameters of the function `y = Wx + b`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: 'Linear regression is a widely used algorithm in the field of applied sciences.
    This algorithm allows adding in implementation two important concepts of machine
    learning: [Cost function](https://en.wikipedia.org/wiki/Loss_function) and the
    [gradient descent method](https://en.wikipedia.org/wiki/Gradient_descent) for
    finding the minimum of the function.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: A machine learning algorithm that is implemented using this method must predict
    values of `y` as a function of `x` where a linear regression algorithm will determinate
    values `W` and `b`, which are actually unknowns and which are determined across
    training process. A cost function is chosen, and usually the mean square error
    is used where the gradient descent is the optimization algorithm used to find
    a local minimum of the cost function.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The gradient descent method is only a local function minimum, but it can be
    used in the search for a global minimum by randomly choosing a new start point
    once it has found a local minimum and repeating this process many times. If the
    number of minima of the function is limited and there are very high number of
    attempts, then there is a good chance that at some point the global minimum is
    spotted. Some more details about this technique we will leave for the [article](https://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer)
    which we mentioned in the introduction section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the above example, we have two new variables, which we called `cost` and
    `train`. With those two variables, we defined an optimizer which we want to use
    in our training model and the function which we want to minimize.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: At the end, the output parameters of `W` and `b` should be identical as those
    defined in the `generate_test_values` function. In line 17, we actually defined
    a function which we used to generate the linear data points to train where `w1=2`,
    `w2=3`, `w3=7` and `b=4`. Linear regression from the above example is multivariate
    where more than one independent variable are used.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from this TensorFlow tutorial, TensorFlow is a powerful framework
    that makes working with mathematical expressions and multi-dimensional arrays
    a breeze—something fundamentally necessary in machine learning. It also abstracts
    away the complexities of executing the data graphs and scaling.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Over time, TensorFlow has grown in popularity and is now being used by developers
    for solving problems using deep learning methods for image recognition, video
    detection, text processing like sentiment analysis, etc. Like any other library,
    you may need some time to get used to the concepts that TensorFlow is built on.
    And, once you do, with the help of documentation and community support, representing
    problems as data graphs and solving them with TensorFlow can make machine learning
    at scale a less tedious process.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://www.toptal.com/machine-learning/tensorflow-machine-learning-tutorial).
    Reposted with permission.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Dino](https://www.toptal.com/resume/dino-causevic)** has over five
    years of experience as a software developer. For the past two years, he has worked
    in Java and related technologies, mostly in implementing big data solutions using
    NoSQL technologies and in implementing REST services. He is based in Sarajevo
    and is a member of Toptal.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[**NIPS 2017 Key Points & Summary Notes**](https://www.kdnuggets.com/2017/12/nips-2017-key-points-summary-notes.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**TensorFlow for Short-Term Stocks Prediction**](https://www.kdnuggets.com/2017/12/tensorflow-short-term-stocks-prediction.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Accelerating Algorithms: Considerations in Design, Algorithm Choice and
    Implementation**](https://www.kdnuggets.com/2017/12/accelerating-algorithms-design-choice-implementation.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Federated Learning: Collaborative Machine Learning with a Tutorial…](https://www.kdnuggets.com/2021/12/federated-learning-collaborative-machine-learning-tutorial-get-started.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Scikit-learn for Classification in Machine Learning](https://www.kdnuggets.com/getting-started-with-scikit-learn-for-classification-in-machine-learning)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started Cleaning Data](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 入门速查表](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
- en: '[Getting Started with spaCy for NLP](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[spaCy 入门指南](https://www.kdnuggets.com/2022/11/getting-started-spacy-nlp.html)'
