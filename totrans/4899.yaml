- en: 'Accelerating Algorithms: Considerations in Design, Algorithm Choice and Implementation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加速算法：设计、算法选择和实现中的注意事项
- en: 原文：[https://www.kdnuggets.com/2017/12/accelerating-algorithms-design-choice-implementation.html](https://www.kdnuggets.com/2017/12/accelerating-algorithms-design-choice-implementation.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2017/12/accelerating-algorithms-design-choice-implementation.html](https://www.kdnuggets.com/2017/12/accelerating-algorithms-design-choice-implementation.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2017/12/accelerating-algorithms-design-choice-implementation.html/#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2017/12/accelerating-algorithms-design-choice-implementation.html/#comments)'
- en: '![](../Images/546d443636f0c7cf6486c8f12e2311d8.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/546d443636f0c7cf6486c8f12e2311d8.png)'
- en: '**By [Tom Radcliffe](https://www.activestate.com/blog/authors/tomr)**.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Tom Radcliffe](https://www.activestate.com/blog/authors/tomr)**。'
- en: 'The pursuit of speed is one of the few constants in computing, and it is driven
    by two things: ever-increasing amounts of data, and limited hardware resources.
    Today in the era of Big Data and the Internet of Things we are getting pinched
    in both directions. Fortunately we are getting much better at distributed and
    parallel computing, but the need for raw speed at the algorithmic level is never
    going to go away. If we can make our algorithms inherently faster we will get
    more out of our expensive hardware, and that is always going to be a good thing.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 追求速度是计算中的少数不变因素之一，这由两个因素驱动：数据量的不断增加和有限的硬件资源。在大数据和物联网时代，我们在这两个方向上都面临压力。幸运的是，我们在分布式和并行计算方面取得了很大进步，但算法层面对原始速度的需求永远不会消失。如果我们能让我们的算法本质上更快，我们将能更好地利用昂贵的硬件，这始终是件好事。
- en: There are many approaches to faster algorithms. Some are sensitively dependent
    on context, some are generic. I’ll look at overall design choices, algorithm choice,
    and implementation details. My background and experience is primarily in optimization
    problems and numerical algorithms, so that will be the general area of focus.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多加速算法的方法。一些方法对上下文依赖性强，有些则较为通用。我将探讨整体设计选择、算法选择和实现细节。我的背景和经验主要集中在优化问题和数值算法上，所以这将是主要关注的领域。
- en: 'It’s traditional to start any discussion of optimization with an imprecation
    to be cautious. Knuth’s First Law of Optimization is: “Don’t do it” and his second
    is like unto it: “Don’t do it yet.” We are also told that “premature optimization
    is the root of all evil”, but what constitutes “premature”? When is too soon?'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，讨论优化时都会提到要谨慎。Knuth的第一条优化法则是：“不要做”而他的第二条类似：“还不要做。”我们还被告知“过早优化是万恶之源”，但什么算作“过早”？何时为时已晚？
- en: 'My own law of optimization is intended to answer that question: “No optimization
    without quantification.” We should never try to accelerate an algorithm without
    first both measuring its current performance and profiling it to determine where
    it is using the most time. It is very difficult to correctly infer where an algorithm
    is spending most of its time.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己的优化法则旨在回答这个问题：“没有量化就没有优化。”我们不应该在没有先测量当前性能和对代码进行性能分析以确定时间消耗最多的地方之前尝试加速算法。正确推断算法花费大部分时间的地方是非常困难的。
- en: For example, an optical Monte Carlo simulation I wrote turned out to be using
    a full quarter of its runtime taking square roots of numbers very close to 1\.
    This was due to the process of renormalizing direction vectors after scattering
    events. By writing some highly optimized code for this special case I was able
    to avoid the slow general implementation in the math co-processor and gain about
    20% in overall performance, which is not a small thing when runs take many days.
    There is no way I could have found this time-sink without profiling the code.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，我写的一个光学蒙特卡罗模拟程序发现其运行时间有四分之一是用于对接近1的数字进行平方根运算。这是由于在散射事件后重新归一化方向向量的过程。通过为这种特殊情况编写一些高度优化的代码，我能够避免在数学协处理器中使用较慢的通用实现，从而在整体性能上提高了约20%，在运行时间长达数天的情况下，这并非小事。如果没有对代码进行性能分析，我不可能发现这个时间消耗点。
- en: The cProfile and profile modules in Python (both of which are part of the [ActivePython
    distribution](https://www.activestate.com/activepython "Download and install Python
    with ActivePython") provide deterministic profiling, which makes the results reasonably
    easy to interpret. Other languages may support profiling based on program counter
    sampling, which can vary from run to run due to statistical effects. Even with
    deterministic profiling, some parts of the program may have variations in performance
    due to resource constraints or the use of random numbers within the code itself.
    I/O and communications are both areas where external dependencies can affect performance,
    so it is best to profile these separately if possible.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的cProfile和profile模块（它们都是[ActivePython发行版](https://www.activestate.com/activepython
    "Download and install Python with ActivePython")的一部分）提供了确定性性能分析，使结果相对容易解读。其他语言可能支持基于程序计数器采样的性能分析，由于统计效应，这种方法可能会因运行而异。即使是确定性性能分析，程序的某些部分由于资源限制或代码中的随机数使用，可能会有性能波动。I/O和通信都是外部依赖可能影响性能的领域，因此如果可能的话，最好单独对这些进行性能分析。
- en: 'This assumes we have code in place to profile, but algorithmic acceleration
    can take place at several different levels in the development process: design,
    algorithm choice, and implementation.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设我们已有代码来进行性能分析，但算法加速可以在开发过程的多个不同层面进行：设计、算法选择和实现。
- en: '**DESIGN**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计**'
- en: Design for optimization is a huge topic that I’ll only just touch on here. Depending
    on the application area there are many different approaches to efficient design.
    One of the most important is to look out for proxy calculations that can stand
    in for the final result.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 设计优化是一个庞大的话题，我这里只能简单提及。根据应用领域，有许多不同的高效设计方法。其中最重要的一点是寻找可以代替最终结果的代理计算。
- en: 'This is particularly useful when working on optimization problems. One frequently
    sees code like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这在处理优化问题时特别有用。经常会看到这样的代码：
- en: X = sqrt(some complicated expression)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: X = sqrt(some complicated expression)
- en: 'Taking the square root--an unreasonably expensive operation even in these days
    of fast math hardware--adds nothing to the calculation, except possibly in the
    end-game of the optimization, where the curvature of the surface near the minimum
    can become critically important to the efficiency of the algorithm. This is true
    of any monotonic function wrapping your final result: it can often be dispensed
    with.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 取平方根——即便在如今高速数学硬件的时代，也是一个不合理昂贵的操作——除了在优化的最终阶段，表面在最小值附近的曲率可能对算法的效率至关重要外，其他地方不会对计算有任何帮助。这对于任何包裹最终结果的单调函数都是正确的：通常可以省略。
- en: 'Another quite general design approach is to sample the data rather than slavishly
    using every available data point. This was the trick behind [pseudo-correlation](https://www.ncbi.nlm.nih.gov/pubmed/7935212
    "https://www.ncbi.nlm.nih.gov/pubmed/7935212"), which is an ultra-fast image registration
    algorithm: by using a small sub-set of pixels to estimate a cross-correlation
    integral it was possible to speed up registration by orders of magnitude. A similar
    approach was used in the mutual information algorithm several years later.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种相当通用的设计方法是对数据进行采样，而不是盲目使用每一个可用的数据点。这就是[伪相关](https://www.ncbi.nlm.nih.gov/pubmed/7935212
    "https://www.ncbi.nlm.nih.gov/pubmed/7935212")的技巧，这是一种超高速图像配准算法：通过使用小的像素子集来估计交叉相关积分，可以将配准速度提高几个数量级。几年后，互信息算法中也使用了类似的方法。
- en: 'The overarching design question should be: “Do I really need to compute that?”
    There may be something that is strongly correlated with the result you care about,
    but which can be computed much more quickly.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 总体设计问题应该是：“我真的需要计算那个吗？”可能有一些与您关心的结果强相关的东西，但可以更快地计算出来。
- en: '**ALGORITHM CHOICE**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**算法选择**'
- en: 'The order of an algorithm gets a lot of academic attention but is surprisingly
    unimportant. The reasons for this are:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 算法的阶数获得了大量学术关注，但意外地并不重要。原因如下：
- en: Problems often come with a given scale, so the scaling behaviour of the algorithm
    is irrelevant. If something runs well on ten million datapoints, its performance
    on a hundred million is irrelevant if we never see datasets that large.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 问题通常具有一定的规模，因此算法的缩放行为并不相关。如果在一千万数据点上运行良好的算法，其在一亿数据点上的性能并不重要，前提是我们从未看到过如此大的数据集。
- en: 'Leading factors matter: an O(N**2) algorithm may have a much smaller leading
    factor than an equivalent O(N*log(N)) algorithm due to lower complexity.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 领先因素很重要：一个 O(N**2) 的算法可能比等效的 O(N*log(N)) 算法具有更小的领先因素，因为其复杂度较低。
- en: Speaking of complexity, algorithms with better big-O performance are often more
    complex, making them more fragile, difficult to debug, and difficult to maintain.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 说到复杂性，具有更好大 O 性能的算法通常更复杂，使它们更脆弱、难以调试和维护。
- en: The most famous case of fragility is probably quicksort, which degrades from
    O(N*log(N)) to O(N**2) when the input is already sorted. This is a fortunately
    easy case to spot, but more complex algorithms with good average performance can
    still fail badly on special cases, and debugging this behaviour can be complex
    and time-consuming. Because such failures are typically rare, it is also not uncommon
    to encounter them after deployment, and be faced with a weird situation where
    “sometimes things run slowly” for no readily apparent reason.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最著名的脆弱性案例可能是快速排序，当输入已经排序时，它的复杂度从 O(N*log(N)) 降低到 O(N**2)。这是一个比较容易发现的情况，但更复杂的算法虽然平均性能良好，在特殊情况下仍可能表现不佳，调试这种行为可能很复杂且耗时。因为这种失败通常比较少见，所以在部署后遇到这种“有时运行缓慢”的奇怪情况也是不
    uncommon 的。
- en: In algorithm choice it is best to implement the simplest thing first, then quantify
    its performance on realistic datasets and decide if more complex algorithms are
    required. More often than not they won’t be. I once worked on some mesh registration
    code that used KD trees to match points, and found that because the datasets were
    reasonably small a simple linear search with a few easily understood heuristics
    would comfortably out-perform the nominally much-better KD tree implementation,
    which was a fragile and complex mess whose unmaintainability prompted me to fall
    back on something simpler so I could understand what was going on with it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择算法时，最好先实现最简单的东西，然后在现实数据集上量化其性能，并决定是否需要更复杂的算法。通常情况下，可能不需要更复杂的算法。我曾经处理过一些使用
    KD 树匹配点的网格配准代码，发现由于数据集相对较小，使用几个易于理解的启发式方法的简单线性搜索可以轻松超越标称上性能更好的 KD 树实现，后者是一个脆弱且复杂的烂摊子，其不可维护性使我不得不回退到更简单的东西，以便理解其运行情况。
- en: '**IMPLEMENTATION DETAILS**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**实现细节**'
- en: An algorithm is not its implementation. Even relatively simple and efficient
    algorithms can be badly implemented, which may result in slower performance. Unnecessary
    function calls are one common case. Use of recursion rather than loops can impact
    speed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 算法不是它的实现。即使是相对简单和高效的算法也可能实现不佳，从而导致性能变慢。不必要的函数调用是一个常见的情况。使用递归而不是循环可能会影响速度。
- en: 'In many cases, high-performance code is written in a relatively low-level language
    like C, C++ or even Fortran, and called from a high-level language. How these
    calls are ordered and organized can make a big difference to performance: in general
    calling across language boundaries is an expensive operation, so using interfaces
    in such a way as to minimize this is recommended.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，高性能代码是用相对底层的语言编写，如 C、C++ 或者 Fortran，并从高层语言中调用。这些调用的顺序和组织方式对性能影响很大：通常来说，跨语言边界的调用是一个代价高昂的操作，因此建议以最小化这种调用的方式来使用接口。
- en: High level languages often include tricks that speed things up. For example,
    Python’s sum() and map() functions are both much faster on arrays than loops.
    Looping over 100,000,000 integers and summing them up takes 4.4 seconds on my
    desktop machine, but 0.63 seconds if I use sum() on the array. Furthermore, generators
    in loops (xrange rather than range in Python 2, range() in Python 3) are generally
    faster than non-lazy list creation functions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 高级语言通常包括一些加速技巧。例如，Python 的 sum() 和 map() 函数在处理数组时比循环快得多。对 100,000,000 个整数进行求和，在我的台式机上需要
    4.4 秒，而使用 sum() 对数组求和只需 0.63 秒。此外，循环中的生成器（Python 2 中的 xrange 而不是 range，Python
    3 中的 range()）通常比非懒加载的列表创建函数更快。
- en: 'The map() function is much faster than looping: looping over an array of 100,000,000
    integers and taking the square root takes 10 seconds on my desktop, but the same
    process using `map(math.sqrt, lstData)` takes half that time.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: map() 函数比循环更快：对一个包含 100,000,000 个整数的数组进行平方根计算，在我的台式机上需要 10 秒，而使用 `map(math.sqrt,
    lstData)` 进行相同操作只需半倍的时间。
- en: '**LOWER LEVEL APPROACHES**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**底层方法**'
- en: There are even more powerful techniques available in Python, such as using [NumPy](https://ipython-books.github.io/featured-01/
    "Getting the Best Performance out of NumPy") and [Cython](https://cython.org/
    "https://cython.org/") and Intel's Math Kernel Library (MKL), which is available
    in ActiveState’s [ActivePython](https://www.activestate.com/activepython "Download
    and install Python with ActivePython"). There may be constraints that prevent
    the use of one or more of these techniques for a given problem, but they are worth
    keeping in mind as part of your “efficiency arsenal”. Just be sure to quantify
    your algorithm’s performance first!
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中还有更强大的技术，比如使用 [NumPy](https://ipython-books.github.io/featured-01/
    "Getting the Best Performance out of NumPy") 和 [Cython](https://cython.org/ "https://cython.org/")
    以及 Intel 的数学核心库（MKL），该库可以在 ActiveState 的 [ActivePython](https://www.activestate.com/activepython
    "Download and install Python with ActivePython") 中找到。虽然可能会有一些限制使得这些技术不能用于特定问题，但它们值得作为“效率武器库”的一部分加以考虑。只需确保首先量化你的算法性能！
- en: To learn more about accelerating algorithms and get more insights into Intel’s
    MKL optimizations, watch my webinar, ["Accelerating Your Algorithms in Production
    with Python and Intel MKL"](https://www.activestate.com/webinars/accelerating-your-algorithms-production-python-and-intel-mkl
    "Webinar - Accelerating Your Algorithms with Python and Intel MKL"), co-hosted
    with Sergey Maidanov, Software Engineering Manager from Intel.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于加速算法的信息，并深入了解 Intel 的 MKL 优化，请观看我的网络研讨会，["使用 Python 和 Intel MKL 加速你的算法"](https://www.activestate.com/webinars/accelerating-your-algorithms-production-python-and-intel-mkl
    "Webinar - Accelerating Your Algorithms with Python and Intel MKL")，由我和 Intel
    的软件工程经理 Sergey Maidanov 共同主持。
- en: '[Original](https://www.activestate.com/blog/2017/11/accelerating-your-algorithms-considerations-design-algorithm-choice-and-implementation).
    Reposted with permission.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.activestate.com/blog/2017/11/accelerating-your-algorithms-considerations-design-algorithm-choice-and-implementation)。已获授权转载。'
- en: '**Related**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容**'
- en: '[**Robust Algorithms for Machine Learning**](https://www.kdnuggets.com/2017/12/robust-algorithms-machine-learning.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**机器学习的鲁棒算法**](https://www.kdnuggets.com/2017/12/robust-algorithms-machine-learning.html)'
- en: '[**7 Super Simple Steps From Idea To Successful Data Science Project**](https://www.kdnuggets.com/2017/11/7-super-simple-steps-idea-successful-data-science-project.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**从创意到成功数据科学项目的 7 个超级简单步骤**](https://www.kdnuggets.com/2017/11/7-super-simple-steps-idea-successful-data-science-project.html)'
- en: '[**Top Data Science and Machine Learning Methods Used in 2017**](https://www.kdnuggets.com/2017/12/top-data-science-machine-learning-methods.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[**2017年使用的顶级数据科学与机器学习方法**](https://www.kdnuggets.com/2017/12/top-data-science-machine-learning-methods.html)'
- en: '* * *'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多相关内容
- en: '[When Would Ensemble Techniques be a Good Choice?](https://www.kdnuggets.com/2022/07/would-ensemble-techniques-good-choice.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[什么时候集成技术会是一个好选择？](https://www.kdnuggets.com/2022/07/would-ensemble-techniques-good-choice.html)'
- en: '[The Role of Open Source Tools in Accelerating Data Science Progress](https://www.kdnuggets.com/2023/05/role-open-source-tools-accelerating-data-science-progress.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开源工具在加速数据科学进步中的作用](https://www.kdnuggets.com/2023/05/role-open-source-tools-accelerating-data-science-progress.html)'
- en: '[Cutting Down Implementation Time by Integrating Jupyter and KNIME](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过集成 Jupyter 和 KNIME 来缩短实施时间](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
- en: '[First Open Source Implementation of DeepMind’s AlphaTensor](https://www.kdnuggets.com/2023/03/first-open-source-implementation-deepmind-alphatensor.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DeepMind 的 AlphaTensor 的首个开源实现](https://www.kdnuggets.com/2023/03/first-open-source-implementation-deepmind-alphatensor.html)'
- en: '[Learn how to design, measure and implement trustworthy A/B tests…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[了解如何设计、测量和实施可靠的A/B测试…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
- en: '[Leveraging AI to Design Fair and Equitable EV Charging Grids](https://www.kdnuggets.com/leveraging-ai-to-design-fair-and-equitable-ev-charging-grids)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[利用人工智能设计公平和公正的电动车充电网络](https://www.kdnuggets.com/leveraging-ai-to-design-fair-and-equitable-ev-charging-grids)'
