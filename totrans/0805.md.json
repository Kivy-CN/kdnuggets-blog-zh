["```py\nimport pandas as pd\n# Sample daily stock price data\ndata = {\n'Date': pd.date_range(start='2023-01-01', periods=365, freq='D'),\n'StockPrice': [100 + i + 10 * (i % 7) for i in range(365)]\n}\ndf = pd.DataFrame(data)\n# Resample to monthly frequency\nmonthly_data = df.resample('M', on='Date').mean()\nprint(monthly_data.head())\n```", "```py\n# Sample minute-level temperature data\ndata = {\n    'Timestamp': pd.date_range(start='2023-01-01', periods=525600, freq='T'),\n    'Temperature': [20 + 10 * (i % 1440) / 1440 for i in range(525600)]\n}\n\ndf = pd.DataFrame(data)\n\n# Resample to different frequencies\ndaily_avg = df.resample('D', on='Timestamp').mean()\nmonthly_avg = df.resample('M', on='Timestamp').mean()\nyearly_avg = df.resample('Y', on='Timestamp').mean()\n\nprint(daily_avg.head())\nprint(monthly_avg.head())\nprint(yearly_avg.head())\n```", "```py\n# Sample daily sales data\ndata = {\n'Date': pd.date_range(start='2023-01-01', periods=365, freq='D'),\n'Sales': [1000 + i * 10 + 5 * (i % 30) for i in range(365)]\n}\ndf = pd.DataFrame(data)\n\n# Calculate monthly and yearly sales with the aggregation method\nmonthly_totals = df.resample('M', on='Date').sum()\nyearly_totals = df.resample('Y', on='Date').sum()\n\nprint(monthly_totals.head())\nprint(yearly_totals.head())\n```", "```py\n# Sample temperature data with missing values\ndata = {\n    'Date': pd.date_range(start='2023-01-01', periods=365, freq='D'),\n    'Temperature': [25 + np.random.randn() * 5 if np.random.rand() > 0.2 else np.nan for _ in range(365)]\n}\ndf = pd.DataFrame(data)\n\n# Forward-fill missing values (fill with the previous day's temperature)\ndf['Temperature'].fillna(method='ffill', inplace=True)\n\n# Visualize the temperature data\nimport matplotlib.pyplot as plt\nplt.figure(figsize=(12, 6))\nplt.plot(df['Date'], df['Temperature'], label='Temperature', color='blue')\nplt.title('Daily Temperature Over Time')\nplt.xlabel('Date')\nplt.ylabel('Temperature (Â°C)')\nplt.grid(True)\nplt.show()\n```", "```py\n# Sample daily website traffic data\ndata = {\n'Date': pd.date_range(start='2019-01-01', periods=1095, freq='D'),\n'Visitors': [500 + 10 * ((i % 365) - 180) + 50 * (i % 30) for i in range(1095)]\n}\ndf = pd.DataFrame(data)\n\n# Create a line plot to visualize the trend\nplt.figure(figsize=(12, 6))\nplt.plot(df['Date'], df['Visitors'], label='Daily Visitors', color='blue')\nplt.title('Website Traffic Over Time')\nplt.xlabel('Date')\nplt.ylabel('Visitors')\nplt.grid(True)\n\n# Add seasonal decomposition plot\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nresult = seasonal_decompose(df['Visitors'], model='additive', freq=365)\nresult.plot()\nplt.show()\n```"]