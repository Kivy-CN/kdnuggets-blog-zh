- en: Simplify Data Processing with Pandas Pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/08/simplify-data-processing-pandas-pipeline.html](https://www.kdnuggets.com/2022/08/simplify-data-processing-pandas-pipeline.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Simplify Data Processing with Pandas Pipeline](../Images/dac07a1e2d0545f432c9878310efc11d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In the R language, we use %>% to create pipelines and perform multiple operations
    on a dataset. Similarly, for creating a machine learning pipeline, we use scikit-learn’s
    [Pipeline](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html)
    to process the data, build and evaluate the model. So, what do we use for creating
    data pipelines in Python? We use a pandas [pipe](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pipe.html)
    to apply chainable functions.
  prefs: []
  type: TYPE_NORMAL
- en: Pandas Pipe Tutorial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we will learn to create a pandas pipe and add multiple chainable
    functions to perform data processing and visualization.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the [Deepnote](https://deepnote.com/) environment to run the
    code and display sharp-looking pandas data frames.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will load and display the [Mall Customer Segmentation](https://www.kaggle.com/datasets/vjchoudhary7/customer-segmentation-tutorial-in-python)
    dataset from Kaggle using `read_csv()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: It contains customer ID, age, gender, income, and spending score.
  prefs: []
  type: TYPE_NORMAL
- en: '![Simplify Data Processing with Pandas Pipeline](../Images/da71e40975b21df97bc1f9dad0076c89.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating data processing functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now write the simple Python functions that take one or more than one arguments.
    Every function must have a dataframe as the first argument to create a chainable
    pipe.
  prefs: []
  type: TYPE_NORMAL
- en: '**filter_male_income**: the function takes two columns and filters the data
    for male customers with an annual income greater than 15.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**mean_group**: it groups the dataframe on a single column with mean and drops
    the CustomerID column.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**uppercase_column_name**: it transforms columns name to uppercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bar_plot**: the function uses the single columns and plots the bar chart.
    It is using `matplotlib.pyplot` on the back end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Pipeline with one function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this part, we will create a simple pipeline with a single function. We will
    add `.pipe()` after the pandas dataframe (data) and add a function with two arguments.
    In our case, the two columns are “Gender” and "Annual Income (k$)".
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Simplify Data Processing with Pandas Pipeline](../Images/2a9097f1a48e73978843c5b1402ab086.png)'
  prefs: []
  type: TYPE_IMG
- en: Pipeline with multiple functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s try a bit of a complex example and add 2 more functions into the pipeline.
    To add the other function, just add `.pipe()` after the first pipe function. We
    can add as many pipes into the data pipeline with multiple arguments. The results
    are reproducible, and the code is easily readable and clean.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we have filtered the dataset, grouped it by “Age”, and converted
    the column names to uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: It is simple, just like initiating a Python function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Simplify Data Processing with Pandas Pipeline](../Images/092e4c5a392d84645a3e41e1d38d9250.png)'
  prefs: []
  type: TYPE_IMG
- en: A complete pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A complete pipeline processes the data and displays some analytical results.
    In our case, it is a simple bar chart of the customer’s **Annual Income** vs.
    **Age**. We have filtered the dataframe, grouped it by Age, converted the columns
    to uppercase, and plotted the bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Simplify Data Processing with Pandas Pipeline](../Images/d188b3a9a0daba7a0ce3edb355683486.png)'
  prefs: []
  type: TYPE_IMG
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The pipe can be applied to pandas dataframe and series. It is quite effective
    during data processing and the experimental stage. Where you can easily switch
    the functions to get an optimal solution. The pipe allows us to have a structure
    and organized way of combining multiple functions into a single operation. It
    is clean, readable, and reproducible. You can use it to simplify the data processing
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: In the tutorial, we have learned about pandas pipe functions and their use case.
    We have also created multiple pipelines with single and multiple functions. The
    pipe functions can also be used for advanced processes such as data analytics,
    data visualization, and machine learning tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[6 Data Science Technologies You Need to Build Your Supply Chain Pipeline](https://www.kdnuggets.com/2022/01/6-data-science-technologies-need-build-supply-chain-pipeline.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ETL vs ELT: Which One is Right for Your Data Pipeline?](https://www.kdnuggets.com/2023/03/etl-elt-one-right-data-pipeline.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Formula 1 Streaming Data Pipeline With Kafka and Risingwave](https://www.kdnuggets.com/building-a-formula-1-streaming-data-pipeline-with-kafka-and-risingwave)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Data Pipeline with Prefect](https://www.kdnuggets.com/building-data-pipeline-with-prefect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Pipeline Optimization with TPOT](https://www.kdnuggets.com/2021/05/machine-learning-pipeline-optimization-tpot.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Tractable, Feature Engineering Pipeline for Multivariate…](https://www.kdnuggets.com/2022/03/building-tractable-feature-engineering-pipeline-multivariate-time-series.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
