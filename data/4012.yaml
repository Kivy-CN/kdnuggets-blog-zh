- en: 'Understanding Python’s Iteration and Membership: A Guide to __contains__ and
    __iter__ Magic Methods'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Python 的迭代和成员资格：__contains__ 和 __iter__ 魔法方法指南
- en: 原文：[https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods](https://www.kdnuggets.com/understanding-pythons-iteration-and-membership-a-guide-to-__contains__-and-__iter__-magic-methods)
- en: '![A Guide to __contains__ and __iter__ Magic Methods](../Images/0e31af489ddc2b5846ca89419af9c6ec.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![__contains__ 和 __iter__ 魔法方法指南](../Images/0e31af489ddc2b5846ca89419af9c6ec.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图像
- en: If you're new to Python, you may have come across the terms **"iteration"**
    and **"membership"** and wondered what they mean. These concepts are fundamental
    to understanding how Python handles collections of data, such as lists, tuples,
    and dictionaries. Python employs special dunder methods to enable these functionalities.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是 Python 新手，你可能遇到过 **"iteration"** 和 **"membership"** 这些术语，可能会想知道它们的意思。这些概念对于理解
    Python 如何处理数据集合（如列表、元组和字典）是基础的。Python 使用特殊的 dunder 方法来实现这些功能。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'But what exactly are dunder methods? Dunder/Magic methods are special methods
    in Python that start and end with a double underscore, hence the name "dunder."
    They are used to implement various protocols and can be used to perform a wide
    range of tasks, such as checking membership, iterating over elements, and more.
    In this article, we will be focusing on two of the most important dunder methods:
    **__contains__** and **__iter__**. So, let''s get started.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，什么是 dunder 方法呢？Dunder/魔法方法是 Python 中以双下划线开始和结束的特殊方法，因此得名“dunder”。它们用于实现各种协议，并可以执行广泛的任务，如检查成员资格、迭代元素等。在本文中，我们将重点关注两个最重要的
    dunder 方法：**__contains__** 和 **__iter__**。那么，开始吧。
- en: Understanding Pythonic Loops with Iter Method
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Iter 方法理解 Pythonic 循环
- en: 'Consider a basic implementation of a file directory using Python classes as
    follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑使用 Python 类实现的文件目录的基本示例：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A straightforward code where the directory has an instance parameter that contains
    a list of File objects. Now, if we want to iterate over the directory object,
    we should be able to use a for loop as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的代码示例，其中目录有一个包含 File 对象列表的实例参数。如果我们想遍历目录对象，我们应该能够使用如下的 for 循环：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We initialize a directory object with ten randomly named files and use a for
    loop to iterate over each item. Simple enough, But whoops! You get an error message:
    **TypeError: ''Directory'' object is not iterable**.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '我们用十个随机命名的文件初始化一个目录对象，并使用 for 循环遍历每个项目。很简单，但哎呀！你会收到一个错误信息：**TypeError: ''Directory''
    object is not iterable**。'
- en: What went wrong? ​​Well, our Directory class isn't set up to be looped through.
    In Python, for a class object to become iterable, it must implement the **__iter__**
    dunder method. All iterables in Python like List, Dictionaries, and Set implement
    this functionality so we can use them in a loop.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 问题出在哪里了？我们的 Directory 类没有设置为可遍历。在 Python 中，要使类对象变为可迭代对象，它必须实现 **__iter__** dunder
    方法。Python 中的所有可迭代对象，如列表、字典和集合，都实现了这一功能，因此我们可以在循环中使用它们。
- en: So, to make our Directory object iterable, we need to create an iterator. Think
    of an iterator as a helper that gives us items one by one when we ask for them.
    For example, when we loop over a list, the iterator object will provide us with
    the next element on each iteration until we reach the end of the loop. That is
    simply how an iterator is defined and implemented in Python.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了使我们的目录对象可迭代，我们需要创建一个迭代器。可以将迭代器看作是一个助手，当我们要求它时，它会一个一个地给我们项。例如，当我们遍历一个列表时，迭代器对象会在每次迭代时提供下一个元素，直到我们到达循环的末尾。这就是迭代器在
    Python 中的定义和实现方式。
- en: In Python, an iterator must know how to provide the next item in a sequence.
    It does this using a method called **__next__**. When there are no more items
    to give, it raises a special signal called **StopIteration** to say, "Hey, we're
    done here." In the case of an infinite iteration, we do not raise the **StopIteration**
    exception.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，迭代器必须知道如何提供序列中的下一个项。它通过一个名为**__next__**的方法来实现。当没有更多项可提供时，它会引发一个名为**StopIteration**的特殊信号，表示“嘿，我们完成了。”在无限迭代的情况下，我们不会引发**StopIteration**异常。
- en: 'Let us create an iterator class for our directory. It will take in the list
    of files as an argument and implement the next method to give us the next file
    in the sequence. It keeps track of the current position using an index. The implementation
    looks as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为目录创建一个迭代器类。它将接受文件列表作为参数，并实现 `next` 方法来给我们序列中的下一个文件。它使用索引跟踪当前位置。实现如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We initialize an index value at 0 and accept the files as an initialization
    argument. The **__next__** method checks if the index overflows. If it is, it
    raises a **StopIteration** exception to signal the end of the iteration. Otherwise,
    it returns the file at the current index and moves to the next one by incrementing
    the index. This process continues until all files have been iterated over.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们初始化一个索引值为0，并接受文件作为初始化参数。**__next__** 方法检查索引是否溢出。如果是，它会引发**StopIteration**异常以表示迭代结束。否则，它返回当前索引的文件，并通过递增索引移动到下一个文件。这个过程会持续直到所有文件都被迭代过。
- en: However, we are not done yet! We have still not implemented the iter method.
    The iter method must return an iterator object. Now that we have implemented the
    FileIterator class, we can finally move towards the iter method.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我们还没有完成！我们仍然没有实现 `iter` 方法。`iter` 方法必须返回一个迭代器对象。现在我们已经实现了 `FileIterator`
    类，我们可以最终转向 `iter` 方法。
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The iter method simply initializes a FileIterator object with its list of files
    and returns the iterator object. That''s all it takes! With this implementation,
    we can now loop over our Directory structure using Python''s loops. Let''s see
    it in action:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`iter` 方法只是用其文件列表初始化了一个 `FileIterator` 对象，并返回该迭代器对象。就这么简单！通过这个实现，我们现在可以使用 Python
    的循环遍历我们的目录结构。让我们看看实际效果：'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The for loop internally calls the **__iter__** method to display this result.
    Although this works, you might still be confused about the underlying workings
    of the iterator in Python. To understand it better, let's use a while loop to
    implement the same mechanism manually.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环内部调用**__iter__**方法来显示结果。虽然这样做有效，但你可能仍然对 Python 中迭代器的底层工作机制感到困惑。为了更好地理解它，我们可以使用
    `while` 循环手动实现相同的机制。'
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We invoke the iter function on the directory object to acquire the FileIterator.
    Then, we manually utilize the next operator to invoke the next dunder method on
    the FileIterator object. We handle the StopIteration exception to gracefully terminate
    the while loop once all items have been exhausted. As expected, we obtained the
    same output as before!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对目录对象调用 `iter` 函数以获取 `FileIterator`。然后，我们手动使用 `next` 操作符来调用 `FileIterator`
    对象上的下一个 dunder 方法。我们处理 **StopIteration** 异常，以便在所有项耗尽后优雅地终止 `while` 循环。正如预期的那样，我们得到了与之前相同的输出！
- en: Testing for Membership with Contains Method
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用包含方法测试成员资格
- en: It is a fairly common use case to check for the existence of an item in a collection
    of objects. For example in our above example, we will need to check if a file
    exists in a directory quite often. So Python makes it simpler syntactically using
    the "in" operator.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个对象集合中检查某项是否存在是一个相当常见的用例。例如，在我们上面的例子中，我们经常需要检查一个文件是否存在于目录中。因此，Python 通过使用
    "in" 操作符在语法上简化了这一过程。
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These are majorly used with conditional expressions and evaluations. But what
    happens if we try this with our directory example?
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些通常与条件表达式和评估一起使用。但是如果我们用我们的目录示例尝试这样做会发生什么？
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Both give us False, which is incorrect! Why? To check for membership, we want
    to implement the **__contains__** dunder method. When it is not implemented, Python
    fall backs to using the **__iter__** method and evaluates each item with the ==
    operator. In our case, it will iterate over each item and check if the **“file_1”**
    string matches any File object in the list. Since we're comparing a string to
    custom File objects, none of the objects match, resulting in a False evaluation
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 两者都给出 False，这是不正确的！为什么？要检查成员资格，我们需要实现 **__contains__** dunder 方法。当它没有实现时，Python
    会回退到使用 **__iter__** 方法，并使用 == 运算符评估每个项目。在我们的例子中，它将迭代每个项目，并检查 **“file_1”** 字符串是否与列表中的任何
    File 对象匹配。由于我们比较的是字符串与自定义的 File 对象，因此没有对象匹配，结果是 False 评估。
- en: To fix this, we need to implement the **__contains__** dunder method in our
    Directory class.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要在我们的 Directory 类中实现 **__contains__** dunder 方法。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we change the functionality to iterate over each object and match the
    file_path from the File object with the string being passed to the function. Now
    if we run the same code to check for existence, we get the correct output!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将功能更改为迭代每个对象，并将 File 对象中的 file_path 与传递给函数的字符串进行匹配。现在，如果我们运行相同的代码来检查存在性，我们会得到正确的输出！
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Wrapping Up
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: And that’s it! Using our simple directory structure example, we built a simple
    iterator and membership checker to understand the internal workings of the Pythonic
    loops. We see such design decisions and implementations fairly often in production-level
    code and using this real-world example, we went over the integral concepts behind
    the __iter__ and __contains__ methods. Keep practicing with these techniques to
    strengthen your understanding and become a more proficient Python programmer!
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！通过我们的简单目录结构示例，我们构建了一个简单的迭代器和成员检查器，以理解 Pythonic 循环的内部工作原理。我们在生产级代码中相当常见这种设计决策和实现，通过这个现实世界的例子，我们探讨了
    **__iter__** 和 **__contains__** 方法背后的基本概念。继续练习这些技巧，以增强理解并成为更熟练的 Python 程序员！
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一位机器学习工程师和技术作家，对数据科学以及 AI 与医学的交叉领域充满热情。她共同撰写了电子书《用 ChatGPT 最大化生产力》。作为
    2022 年 APAC 区域的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认可为 Teradata 多样性技术奖学者、Mitacs
    Globalink 研究学者和哈佛 WeCode 学者。Kanwal 是变革的热情倡导者，她创办了 FEMCodes，以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[11 Python Magic Methods Every Programmer Should Know](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个程序员都应该知道的 11 个 Python 魔法方法](https://www.kdnuggets.com/11-python-magic-methods-every-programmer-should-know)'
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Jupyter Notebook 魔法方法速查表](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
- en: '[Introduction to __getitem__: A Magic Method in Python](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍 **__getitem__**：Python 中的魔法方法](https://www.kdnuggets.com/2023/03/introduction-getitem-magic-method-python.html)'
- en: '[Python f-Strings Magic: 5 Game-Changing Tricks Every Coder Needs to Know](https://www.kdnuggets.com/python-fstrings-magic-5-gamechanging-tricks-every-coder-needs-to-know)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python f-Strings 魔法：每个编码者需要了解的 5 个颠覆性技巧](https://www.kdnuggets.com/python-fstrings-magic-5-gamechanging-tricks-every-coder-needs-to-know)'
- en: '[Diving into the Pool: Unraveling the Magic of CNN Pooling Layers](https://www.kdnuggets.com/diving-into-the-pool-unraveling-the-magic-of-cnn-pooling-layers)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深入池塘：揭示 CNN 池化层的魔力](https://www.kdnuggets.com/diving-into-the-pool-unraveling-the-magic-of-cnn-pooling-layers)'
- en: '[Unveiling Neural Magic: A Dive into Activation Functions](https://www.kdnuggets.com/unveiling-neural-magic-a-dive-into-activation-functions)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[揭示神经魔法：深入激活函数](https://www.kdnuggets.com/unveiling-neural-magic-a-dive-into-activation-functions)'
