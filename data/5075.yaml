- en: 'Integrating Python and R, Part 2: Executing R from Python and Vice Versa'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成 Python 和 R，第 2 部分：从 Python 执行 R 及反之亦然
- en: 原文：[https://www.kdnuggets.com/2015/10/integrating-python-r-executing-part2.html](https://www.kdnuggets.com/2015/10/integrating-python-r-executing-part2.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2015/10/integrating-python-r-executing-part2.html](https://www.kdnuggets.com/2015/10/integrating-python-r-executing-part2.html)
- en: '**By Chris Musselle ([Mango Solutions](http://www.mango-solutions.com))**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：Chris Musselle ([Mango Solutions](http://www.mango-solutions.com))**。'
- en: In a [previous article](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)
    we went over why you might want to integrate both R and Python into a single pipeline,
    and how to do so via the use of a flat file air-gap. In doing so we covered how
    to run a Python or R script from the command line, and how to access any additional
    arguments that are parsed in. In this post we complete the integration process
    by showing how the two scripts can be linked together by getting R to call Python
    and vice versa.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[上一篇文章](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)中，我们讨论了为什么你可能想将
    R 和 Python 集成到一个管道中，以及如何通过使用平面文件隔离来实现这一点。在此过程中，我们介绍了如何从命令行运行 Python 或 R 脚本，以及如何访问传入的任何附加参数。在这篇文章中，我们通过展示如何将两个脚本链接在一起，完成集成过程，方法是让
    R 调用 Python，反之亦然。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![](../Images/0eb09d69ebb8a6b50ef17b89287ac9a4.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0eb09d69ebb8a6b50ef17b89287ac9a4.png)'
- en: Command Line Execution and Executing Subprocesses
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令行执行和执行子进程
- en: To better understand what’s happening when a subprocess is executed, it is worth
    revisiting in more detail what happens when a Python or R process is executed
    on the command line. When the following command is run, a new Python process is
    started to execute the script.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解子进程执行时发生的情况，值得详细回顾在命令行上执行 Python 或 R 进程时发生的事情。当运行以下命令时，会启动一个新的 Python
    进程来执行脚本。
- en: '`python path/to/myscript.py arg1 arg2 arg3`'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`python path/to/myscript.py arg1 arg2 arg3`'
- en: During executing, any outputs that are printed to the [standard output and standard
    error streams](https://en.wikipedia.org/wiki/Standard_streams) are displayed back
    to the console. The most common way this is achieved is via a built in function
    (`print()` in Python and `cat()` or `print()` in R), which writes a given string
    to the `stdout` stream. The Python process is then closed once the script has
    finished executing.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行过程中，任何输出打印到[标准输出和标准错误流](https://en.wikipedia.org/wiki/Standard_streams)的内容都会显示在控制台上。实现这一点最常见的方法是通过内置函数（Python
    中的`print()`和 R 中的`cat()`或`print()`），这些函数将给定的字符串写入`stdout`流。Python 进程将在脚本执行完成后关闭。
- en: Running command line scripts in this fashion is useful, but can become tedious
    and error prone if there are a number of sequential but separate scripts that
    you wish to execute this way. However it is possible for a Python or R process
    to execute another directly in a similar way to the above command line approach.
    This is beneficial as it allows, say a parent Python process to fire up a child
    R process to run a specific script for the analysis. The outputs of this child
    R process can then be passed back to the parent Python process once the R script
    is complete, instead of being printed to the console. Using this approach removes
    the need to manually execute steps individually on the command line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式运行命令行脚本是有用的，但如果有多个顺序但独立的脚本需要以这种方式执行，则可能变得繁琐且容易出错。然而，Python 或 R 进程可以以类似于上述命令行方法的方式直接执行另一个进程。这是有益的，因为它允许，例如，父
    Python 进程启动子 R 进程来运行特定的分析脚本。一旦 R 脚本完成，这个子 R 进程的输出可以传递回父 Python 进程，而不是打印到控制台。使用这种方法可以消除在命令行上手动逐步执行的需要。
- en: Examples
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例
- en: 'To illustrate the execution of one process by another we are going to use two
    simple examples: one where Python calls R, and one where R calls Python. The analysis
    performed in each case is trivial on purpose so as to focus on the machinery around
    how this is achieved.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一个进程如何执行另一个进程，我们将使用两个简单的示例：一个是 Python 调用 R，另一个是 R 调用 Python。每个案例中执行的分析故意简化，以便集中于实现这种调用机制的过程。
- en: Sample R Script
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例 R 脚本
- en: Our simple example R script is going to take in a sequence of numbers from the
    command line and return the maximum.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的简单示例 R 脚本将从命令行接收一系列数字并返回最大值。
- en: '`# max.R`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`# max.R`'
- en: '`# Fetch command line arguments myArgs <- commandArgs(trailingOnly = TRUE)`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 获取命令行参数 myArgs <- commandArgs(trailingOnly = TRUE)`'
- en: '`# Convert to numerics nums = as.numeric(myArgs)`'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 转换为数字 nums = as.numeric(myArgs)`'
- en: '`# cat will write the result to the stdout stream cat(max(nums))`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`# cat 将结果写入 stdout 流 cat(max(nums))`'
- en: Executing an R Script from Python
  id: totrans-24
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从 Python 执行 R 脚本
- en: To execute this from Python we make use of the [subprocess](https://docs.python.org/3/library/subprocess.html)
    module, which is part of the standard library. We will be using the function,
    `check_output` to call the R script, which executes a command and stores the output
    of stdout.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Python 执行此操作，我们使用 [subprocess](https://docs.python.org/3/library/subprocess.html)
    模块，这是标准库的一部分。我们将使用 `check_output` 函数来调用 R 脚本，该函数执行一个命令并存储 stdout 的输出。
- en: 'To execute the `max.R` script in R from Python, you first have to build up
    the command to be executed. This takes a similar format to the command line statement
    we saw in [part I](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)
    of this blog post series, and in Python terms is represented as a list of strings,
    whose elements correspond to the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 Python 执行 `max.R` 脚本，你首先需要构建要执行的命令。这的格式类似于我们在 [第一部分](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)
    的博文系列中看到的命令行语句，在 Python 中表示为一个字符串列表，其中的元素对应于以下内容：
- en: '`[''<command_to_run>'', ''<path_to_script>'', ''arg1'' , ''arg2'', ''arg3'',
    ''arg4'']`'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`[''<command_to_run>'', ''<path_to_script>'', ''arg1'' , ''arg2'', ''arg3'',
    ''arg4'']`'
- en: An example of executing an R script form Python is given in the following code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Python 执行 R 脚本的一个示例见以下代码。
- en: '`# run_max.py import subprocess`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`# run_max.py 导入 subprocess`'
- en: '`# Define command and arguments command =''Rscript'' path2script =''path/to
    your script/max.R''`'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 定义命令和参数 command =''Rscript'' path2script =''path/to your script/max.R''`'
- en: '`# Variable number of args in a list args = [''11'',''3'',''9'',''42'']`'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 列表中的变量数量 args = [''11'',''3'',''9'',''42'']`'
- en: '`# Build subprocess command cmd = [command, path2script] + args`'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 构建 subprocess 命令 cmd = [command, path2script] + args`'
- en: check_output will run the command and store to result
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: check_output 将运行命令并将结果存储到变量中
- en: x = subprocess.check_output(cmd, universal_newlines=True)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: x = subprocess.check_output(cmd, universal_newlines=True)
- en: '`print(''The maximum of the numbers is:'', x)`'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(''这些数字的最大值是:'', x)`'
- en: The argument `universal_newlines=True` tells Python to interpret the returned
    output as a text string and handle both Windows and Linux newline characters.
    If it is omitted, the output is returned as a byte string and must be decoded
    to text by calling `x.decode()` before any further string manipulation can be
    performed.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 参数 `universal_newlines=True` 告诉 Python 将返回的输出解释为文本字符串，并处理 Windows 和 Linux 的换行符。如果省略该参数，输出将以字节字符串形式返回，并且必须通过调用
    `x.decode()` 将其解码为文本，才能进行进一步的字符串操作。
- en: Sample Python Script
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 示例 Python 脚本
- en: For our simple Python script, we will split a given string (first argument)
    into multiple substrings based on a supplied substring pattern (second argument).
    The result is then printed to the console one substring per line.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的简单 Python 脚本，我们将根据提供的子字符串模式（第二个参数）将给定字符串（第一个参数）分割成多个子字符串。结果将逐行打印到控制台。
- en: '`# splitstr.py import sys`'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`# splitstr.py import sys`'
- en: '`# Get the arguments passed in string = sys.argv[1] pattern = sys.argv[2]`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 获取传递的参数 string = sys.argv[1] pattern = sys.argv[2]`'
- en: '`# Perform the splitting ans = string.split(pattern)`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 执行分割 ans = string.split(pattern)`'
- en: '`# Join the resulting list of elements into a single newline # delimited string
    and print print(''\n''.join(ans))`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 将结果元素列表连接成一个以换行符分隔的字符串并打印 print(''\n''.join(ans))`'
- en: Executing a Python Script from R
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从 R 执行 Python 脚本
- en: When executing subprocess with R, it is recommended to use R’s [system2](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system2.html)
    function to execute and capture the output. This is because the inbuilt [system](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.html)
    function is trickier to use and is not cross-platform compatible.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 R 的子进程时，建议使用 R 的[system2](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system2.html)函数来执行和捕获输出。这是因为内置的[system](https://stat.ethz.ch/R-manual/R-devel/library/base/html/system.html)函数使用起来更复杂，且不具备跨平台兼容性。
- en: Building up the command to be executed is similar to the above Python example,
    however `system2` expects the command to be parsed separately from its arguments.
    In addition the first of these arguments must always be the path to the script
    being executed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 构建要执行的命令类似于上述 Python 示例，但`system2`期望命令与其参数分开解析。此外，这些参数的第一个必须始终是要执行的脚本的路径。
- en: One final complication can arise from dealing with spaces in the path name to
    the R script. The simplest method to solve this issue is to double quote the whole
    path name and then encapsulate this string with single quotes so that R preserves
    the double quotes in the argument itself.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 处理 R 脚本路径中的空格可能会带来一个最终的复杂问题。解决这个问题的最简单方法是将整个路径名用双引号括起来，然后用单引号将这个字符串包裹起来，以便 R
    保留参数中的双引号。
- en: An example of executing a Python script from R is given in the following code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 Python 脚本的 R 示例见以下代码。
- en: '`# run_splitstr.R`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`# run_splitstr.R`'
- en: '`command ="python`“'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`command ="python`'
- en: '`# Note the single + double quotes in the string (needed if paths have spaces)
    path2script=''"path/to your script/splitstr.py"''`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 注意字符串中的单引号 + 双引号（如果路径中有空格需要） path2script=''"path/to your script/splitstr.py"''`'
- en: '`# Build up args in a vector string ="3523462---12413415---4577678---7967956---5456439"
    pattern ="---" args = c(string, pattern)`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 在向量中构建参数 string ="3523462---12413415---4577678---7967956---5456439" pattern
    ="---" args = c(string, pattern)`'
- en: '`# Add path to script as first arg allArgs = c(path2script, args)`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 将脚本路径作为第一个参数添加 allArgs = c(path2script, args)`'
- en: '`output = system2(command, args=allArgs, stdout=TRUE)`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`output = system2(command, args=allArgs, stdout=TRUE)`'
- en: '`print(paste("The Substrings are:\n", output))`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`print(paste("子字符串为：\n", output))`'
- en: To capture the standard output in a character vector (one line per element),
    `stdout=TRUE` must be specified in `system2`, else just the exit status is returned.
    When `stdout=TRUE` the exit status is stored in an attribute called “status”.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要将标准输出捕获到字符向量中（每个元素一行），必须在`system2`中指定`stdout=TRUE`，否则仅返回退出状态。当`stdout=TRUE`时，退出状态会存储在一个名为“status”的属性中。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 总结
- en: It is possible to integrate Python and R into a single application via the use
    of subprocess calls. These allow one parent process to call another as a child
    process, and capture any output that is printed to stdout. In this post we have
    gone through examples of using this approach to get an R script to call Python
    and vice versa.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用子进程调用将 Python 和 R 集成到一个应用程序中。这些调用允许一个父进程调用另一个子进程，并捕获打印到 stdout 的任何输出。在这篇文章中，我们展示了如何使用这种方法让
    R 脚本调用 Python 及反之亦然。
- en: In a future upcoming article will draw on the material of this post and [part
    I](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/),
    to show a real world example of using Python and R together in an application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的文章中将基于这篇文章的内容以及[第一部分](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-into-a-data-analysis-pipeline-part-1/)，展示一个实际的示例，说明如何在应用程序中将
    Python 和 R 结合使用。
- en: '[Original](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-part-ii-executing-r-from-python-and-vice-versa/
    ).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](http://www.mango-solutions.com/wp/2015/10/integrating-python-and-r-part-ii-executing-r-from-python-and-vice-versa/
    )。'
- en: '**Related:**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[R vs Python: head to head data analysis](/2015/10/r-vs-python-data-analysis.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[R 与 Python：正面交锋的数据分析](/2015/10/r-vs-python-data-analysis.html)'
- en: '[Data Science Programming: Python vs R](/2015/10/data-science-programming-python-vs-r.html)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学编程：Python 与 R](/2015/10/data-science-programming-python-vs-r.html)'
- en: '[R vs Python for Data Science: The Winner is …](/2015/05/r-vs-python-data-science.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学中的 R 与 Python：赢家是…](/2015/05/r-vs-python-data-science.html)'
- en: '[R, Python users show surprising stability, but strong regional differences](/2015/07/poll-primary-analytics-language-r-python.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[R 和 Python 用户表现出惊人的稳定性，但地区差异显著](/2015/07/poll-primary-analytics-language-r-python.html)'
- en: More On This Topic
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Cutting Down Implementation Time by Integrating Jupyter and KNIME](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过整合 Jupyter 和 KNIME 减少实施时间](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
- en: '[Integrating ChatGPT Into Data Science Workflows: Tips and Best Practices](https://www.kdnuggets.com/2023/05/integrating-chatgpt-data-science-workflows-tips-best-practices.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将 ChatGPT 融入数据科学工作流程：提示和最佳实践](https://www.kdnuggets.com/2023/05/integrating-chatgpt-data-science-workflows-tips-best-practices.html)'
- en: '[Optimizing Data Analytics: Integrating GitHub Copilot in Databricks](https://www.kdnuggets.com/optimizing-data-analytics-integrating-github-copilot-in-databricks)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化数据分析：在 Databricks 中整合 GitHub Copilot](https://www.kdnuggets.com/optimizing-data-analytics-integrating-github-copilot-in-databricks)'
- en: '[Integrating Generative AI in Content Creation](https://www.kdnuggets.com/integrating-generative-ai-in-content-creation)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在内容创作中整合生成式人工智能](https://www.kdnuggets.com/integrating-generative-ai-in-content-creation)'
- en: '[Machine Learning Is Not Like Your Brain Part 6: The Importance of…](https://www.kdnuggets.com/2022/08/machine-learning-like-brain-part-6-importance-precise-synapse-weights-ability-set-quickly.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习不像你的大脑 第 6 部分：…的重](https://www.kdnuggets.com/2022/08/machine-learning-like-brain-part-6-importance-precise-synapse-weights-ability-set-quickly.html)'
- en: '[The Complete Collection of Data Science Cheat Sheets - Part 2](https://www.kdnuggets.com/2022/02/complete-collection-data-science-cheat-sheets-part-2.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学备忘单的完整合集 - 第 2 部分](https://www.kdnuggets.com/2022/02/complete-collection-data-science-cheat-sheets-part-2.html)'
