["```py\n >>> 3 * 4\n12\n>>> 'code' * 3\n'codecodecode'\n```", "```py\nclass Vector2D:\n    pass\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\nv = Vector2D(3, 5)\n```", "```py\nv = Vector2D(3, 5)\nprint(v)\n```", "```py\nOutput >>> <__main__.Vector2D object at 0x7d2fcfaf0ac0>\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\nv = Vector2D(3, 5)\nprint(v)\n```", "```py\nOutput >>> Vector2D(x=3, y=5)\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __str__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\nv = Vector2D(3, 5)\nprint(v)\n```", "```py\nOutput >>> Vector2D(x=3, y=5)\n```", "```py\nv1 = Vector2D(3, 5)\nv2 = Vector2D(3, 5)\nprint(v1 == v2)\n```", "```py\nOutput >>> False\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y\n```", "```py\nv1 = Vector2D(3, 5)\nv2 = Vector2D(3, 5)\nprint(v1 == v2)\n```", "```py\nOutput >>> True \n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __len__(self):\n        return 2\n\nv = Vector2D(3, 5)\nprint(len(v))\n```", "```py\nOutput >>> 2\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __add__(self, other):\n        return Vector2D(self.x + other.x, self.y + other.y)\n```", "```py\nv1 = Vector2D(3, 5)\nv2 = Vector2D(1, 2)\nresult = v1 + v2\nprint(result)\n```", "```py\nOutput >>> Vector2D(x=4, y=7)\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __sub__(self, other):\n        return Vector2D(self.x - other.x, self.y - other.y)\n```", "```py\nv1 = Vector2D(3, 5)\nv2 = Vector2D(1, 2)\nresult = v1 - v2\nprint(result)\n```", "```py\nOutput >>> Vector2D(x=2, y=3)\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __mul__(self, other):\n        # Scalar multiplication\n        if isinstance(other, (int, float)):\n            return Vector2D(self.x * other, self.y * other)\n        # Dot product\n        elif isinstance(other, Vector2D):\n            return self.x * other.x + self.y * other.y\n        else:\n            raise TypeError(\"Unsupported operand type for *\")\n```", "```py\nv1 = Vector2D(3, 5)\nv2 = Vector2D(1, 2)\n\n# Scalar multiplication\nresult1 = v1 * 2\nprint(result1)  \n# Dot product\nresult2 = v1 * v2\nprint(result2)\n```", "```py\nOutput >>>\n\nVector2D(x=6, y=10)\n13\n```", "```py\nv = Vector2D(3, 5)\nprint(v[0],v[1])\n```", "```py\n---------------------------------------------------------------------------\n\nTypeError                             \tTraceback (most recent call last)\n\n <ipython-input-6-3fbbbf13d881>in <cell line:=\"\">()\n----> 1 print(v[0],v[1])\n\nTypeError: 'Vector2D' object is not subscriptable</cell></ipython-input-6-3fbbbf13d881>\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __getitem__(self, key):\n        if key == 0:\n            return self.x\n        elif key == 1:\n            return self.y\n        else:\n            raise IndexError(\"Index out of range\")\n```", "```py\nv = Vector2D(3, 5)\nprint(v[0])  \nprint(v[1])\n```", "```py\nOutput >>>\n\n3\n5\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __call__(self, scalar):\n        return Vector2D(self.x * scalar, self.y * scalar)\n```", "```py\nv = Vector2D(3, 5)\nresult = v(3)\nprint(result)\n```", "```py\nOutput >>> Vector2D(x=9, y=15)\n```", "```py\nclass Vector2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __repr__(self):\n        return f\"Vector2D(x={self.x}, y={self.y})\"\n\n    def __getattr__(self, name):\n        if name == \"magnitude\":\n            return (self.x ** 2 + self.y ** 2) ** 0.5\n        else:\n            raise AttributeError(f\"'Vector2D' object has no attribute '{name}'\")\n```", "```py\nv = Vector2D(3, 4)\nprint(v.magnitude)\n```", "```py\nOutput >>> 5.0\n```"]