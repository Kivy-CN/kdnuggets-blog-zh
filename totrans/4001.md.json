["```py\n    pip install watchdog\n    ```", "```py\nimport time\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n```", "```py\nclass MyHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        print(f'File {event.src_path} has been modified')\n\n    def on_created(self, event):\n        print(f'File {event.src_path} has been created')\n\n    def on_deleted(self, event):\n        print(f'File {event.src_path} has been deleted')\n```", "```py\nif __name__ == \"__main__\":\n    event_handler = MyHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path='.', recursive=True)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n```", "```py\npython main.py\n```", "```py\nFile .\\File1.txt has been modified\nFile .\\New Text Document (2).txt has been created\nFile .\\New Text Document (2).txt has been deleted\nFile .\\New Text Document.txt has been deleted\n```", "```py\npip install pytest\n```", "```py\nmy_project/\n│\n├── src/\n│   ├── __init__.py\n│   └── example.py\n│\n├── tests/\n│   ├── __init__.py\n│   └── test_example.py\n│\n└── watchdog_test_runner.py\n```", "```py\ndef add(a, b):\n    return a + b\n\ndef subtract(a, b):\n    return a - b \n```", "```py\nimport pytest\nfrom src.example import add, subtract\n\ndef test_add():\n    assert add(1, 2) == 3\n    assert add(-1, 1) == 0\n    assert add(-1, -1) == -2\n\ndef test_subtract():\n    assert subtract(2, 1) == 1\n    assert subtract(1, 1) == 0\n    assert subtract(1, -1) == 2\n```", "```py\nimport time\nimport subprocess\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass TestRunnerHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        if event.src_path.endswith('.py'):\n            self.run_tests()\n\n    def run_tests(self):\n        try:\n            result = subprocess.run(['pytest'], check=False, capture_output=True, text=True)\n            print(result.stdout)\n            print(result.stderr)\n            if result.returncode == 0:\n                print(\"Tests passed successfully.\")\n            else:\n                print(\"Some tests failed.\")\n        except subprocess.CalledProcessError as e:\n            print(f\"Error running tests: {e}\")\n\nif __name__ == \"__main__\":\n    path = \".\"  # Directory to watch\n    event_handler = TestRunnerHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n\n    observer.start()\n    print(f\"Watching for changes in {path}...\")\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n\n    observer.join()\n```", "```py\npython watchdog_test_runner.py\n```", "```py\nWatching for changes in ....\n========================= test session starts =============================\nplatform win32 -- Python 3.9.13, pytest-8.2.1, pluggy-1.5.0\nrootdir: F:\\Web Dev\\watchdog\nplugins: anyio-3.7.1\ncollected 2 items\n\ntests\\test_example.py ..                                                 [100%]\n\n========================== 2 passed in 0.04s ==============================\n\nTests passed successfully. \n```"]