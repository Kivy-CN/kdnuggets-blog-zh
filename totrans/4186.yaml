- en: Simple Text Scraping, Parsing, and Processing with this Python Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/10/simple-text-scraping-parsing-processing-python-library.html](https://www.kdnuggets.com/2021/10/simple-text-scraping-parsing-processing-python-library.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![Figure](../Images/b28dd1fbd4a8a10b7a5abf6e3115fd20.png)'
  prefs: []
  type: TYPE_NORMAL
- en: Photo by [Peter Lawrence](https://unsplash.com/@chesterfordhouse?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/s/photos/newspapers?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  prefs: []
  type: TYPE_NORMAL
- en: Looking for a library to help with scraping, parsing, processing, and extracting
    metadata from news articles? [**Newspaper**](https://github.com/codelucas/newspaper)
    can help. Newspaper is a "[n]ews, full-text, and article metadata extraction in
    Python 3." I would say, with the utmost respect, that Newspaper is a quick and
    dirty text parsing and processing library. It isn't foolproof, and won't always
    be able to fulfill your every need with every article. It will generally do a
    very good job, however, and do so quickly.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and get started in order to see what you can accomplish quickly
    and easily with the library. If you''re using Python 3, installation is accomplished
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install newspaper3k`'
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, Newspaper is very easy to use.
  prefs: []
  type: TYPE_NORMAL
- en: Let's import the library, define an article on the web we want to use for processing,
    and download the article. We will use the recent KDnuggets article **[Avoid These
    Five Behaviors That Make You Look Like A Data Novice](https://www.kdnuggets.com/2021/10/avoid-five-behaviors-data-novice.html)**
    by Tessa Xie for these purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see what we have downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This is the entire HTML page for the article. This isn't very useful; let's
    take out first processing step and parse the article with Newspaper. Once we do
    so, let's print the text for the parsed article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: That looks better. We have removed the HTML not related to the article we downloaded,
    and have otherwise extracted the useful text from within the remaining portions
    of HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what metadata we can extract from the parsed article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You can see from the above that some metadata has been easily extracted, while
    in the case of the publication date and authors, Newspaper has come up empty handed.
    This is what I referred to at the start of the article; the library isn't magic,
    and so if an article is not formatted in such a way that facilitates Newspaper's
    pattern matching, identification and extraction of these metadata won't happen.
  prefs: []
  type: TYPE_NORMAL
- en: Find out what else you can accomplish with a parsed article [here](https://newspaper.readthedocs.io/en/latest/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving on to something more interesting... once an article has been downloaded
    and parsed, it can also be processed using Newspaper''s built-in NLP capabilities,
    which is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Here are a few tasks we can perform on a processed article.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This is certainly more interesting than the parsed article metadata extraction
    above, though both the processed and parsed data extracted from an article could
    certainly be useful.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that there are numerous ways to automate the summarization an article
    with the use of a variety of different libraries and tools; however, Newspaper
    provides a way to do so that provides reasonable results, and does so in a single
    line of code without even the need for the testing of parameters. You can compare
    this with implementing a similar extractive summarization process, using a simple
    word frequency approach, in Python from scratch, in my previous article [Getting
    Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html);
    you will find that significantly more code is required for similar results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interested in only leveraging Newspaper''s summarization functionality? Here''s
    a quick, self-contained example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: And there you have it.
  prefs: []
  type: TYPE_NORMAL
- en: Find out what more you can accomplish with a processed article [here](https://newspaper.readthedocs.io/en/latest/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: Newspaper isn't perfect and has its limitations, but you can see how quickly
    and easily it can be invoked and leveraged, and how useful it can be even in cases
    where some of its limitations are met. Personally, I have written my own code
    to perform a number of the steps above, and have also leveraged several different
    libraries to accomplish some of the others, generally with more elbow grease needed
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: There is actually much more you can accomplish with the library, and I encourage
    you to [investigate the possibilities](https://newspaper.readthedocs.io/en/latest/index.html).
    Hopefully you are able to use Newspaper for your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Simple Question Answering Web App with HuggingFace Pipelines](/2021/10/simple-question-answering-web-app-hugging-face-pipelines.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Applied Language Technology: A No-Nonsense Approach](/2021/06/applied-language-technology.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Date Processing and Feature Engineering in Python](/2021/07/date-pre-processing-feature-engineering-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Step-by-Step Guide to Web Scraping with Python and Beautiful Soup](https://www.kdnuggets.com/2023/04/stepbystep-guide-web-scraping-python-beautiful-soup.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Web Scraping Using Python](https://www.kdnuggets.com/2022/10/beginner-guide-web-scraping-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Octoparse 8.5: Empowering Local Scraping and More](https://www.kdnuggets.com/2022/02/octoparse-85-empowering-local-scraping.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing the Testing Library for Natural Language Processing](https://www.kdnuggets.com/2023/04/introducing-testing-library-natural-language-processing.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use the Hugging Face Tokenizers Library to Preprocess Text Data](https://www.kdnuggets.com/how-to-use-the-hugging-face-tokenizers-library-to-preprocess-text-data)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
