- en: 'Prefect: How to Write and Schedule Your First ETL Pipeline with Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/08/prefect-write-schedule-etl-pipeline-python.html](https://www.kdnuggets.com/2021/08/prefect-write-schedule-etl-pipeline-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Dario Radečić](https://www.linkedin.com/in/darioradecic/), Consultant
    at NEOS**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5249229d128331d161c3d8fb44a6d46d.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [**Helena Lopes**](https://www.pexels.com/@wildlittlethingsphoto?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels) from [**Pexels**](https://www.pexels.com/photo/young-man-writing-reminder-on-fridge-and-drinking-coffee-at-home-3867001/?utm_content=attributionCopyText&utm_medium=referral&utm_source=pexels)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Prefect is a Python-based workflow management system based on a simple premise *—
    Your code probably works, but sometimes it doesn’t* ([source](https://docs.prefect.io/core/)).
    No one thinks about workflow systems when everything works as expected. But when
    things go south, Prefect will guarantee your code fails successfully.
  prefs: []
  type: TYPE_NORMAL
- en: As a workflow management system, Prefect makes it easy to add logging, retries,
    dynamic mapping, caching, failure notifications, and more to your data pipelines.
    It is invisible when you don’t need it — when everything works as expected, and
    visible when you do. Something like insurance.
  prefs: []
  type: TYPE_NORMAL
- en: While Prefect isn’t the only available workflow management system for Python
    users, it is undoubtedly the most proficient one. Alternatives such as Apache
    Airflow usually work well, but introduce a lot of headaches when working on big
    projects. You can read a detailed comparison between Prefect and Airflow [here](https://docs.prefect.io/core/getting_started/why-not-airflow.html#overview).
  prefs: []
  type: TYPE_NORMAL
- en: This article covers the basics of the library, such as tasks, flows, parameters,
    failures, and schedules, and also explains how to set up the environment both
    locally and in the cloud. We’ll use [Saturn Cloud](https://www.saturncloud.io/s/?utm_source=dario-radecic) for
    that part, as it makes the configuration effortless. It is a cloud platform made
    by data scientists, so most of the heavy lifting is done for you.
  prefs: []
  type: TYPE_NORMAL
- en: Saturn Cloud can handle Prefect workflows without breaking a sweat. It is also
    a cutting-edge solution for anything from dashboards to distributed machine learning,
    deep learning, and GPU training.
  prefs: []
  type: TYPE_NORMAL
- en: 'Today you’ll learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Prefect locally
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write a simple ETL pipeline with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use Prefect to declare tasks, flows, parameters, schedules and handle failures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run Prefect in Saturn Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to Install Prefect Locally
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll install the Prefect library inside a virtual environment. The following
    commands will create and activate the environment named `prefect_env` through
    Anaconda, based on Python 3.8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll have to enter `y` a couple of times to instruct Anaconda to proceed,
    but that’s the case with every installation. Library-wise, we’ll need *Pandas* for
    data manipulation, *Requests* for downloading the data, and of course, *Prefect* for
    workflow management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We now have everything needed to start writing Python code. Let’s do that next.
  prefs: []
  type: TYPE_NORMAL
- en: Writing an ETL Pipeline With Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll use Prefect to complete a relatively simple task today — run an ETL pipeline.
    This pipeline will download the data from a dummy API, transform it, and save
    it as a CSV. The [JSON Placeholder](https://jsonplaceholder.typicode.com/) website
    will serve as our dummy API. Among other things, it contains fake data for ten
    users:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/bcfa7885385bdf0fd93c4cf2ac283a07.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 1 — Fake user data (source: *[*https://jsonplaceholder.typicode.com/users)*](https://jsonplaceholder.typicode.com/users))* (image
    by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start by creating a Python file — I’ve named mine `01_etl_pipeline.py`.
    Also, make sure to have a folder where extracted and transformed data will be
    saved. I’ve called it `data`, and it’s located right where the Python scripts
    are.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any ETL pipeline needs three functions implemented — for extracting, transforming,
    and loading the data. Here’s what these functions will do in our case:'
  prefs: []
  type: TYPE_NORMAL
- en: '`extract(url: str) -> dict` — makes a GET request to the `url` parameter. Tests
    to see if some data was returned — in that case, it is returned as a dictionary.
    Otherwise, an exception is raised.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transform(data: dict) -> pd.DataFrame `— transforms the data so only specific
    attributes are kept: ID, name, username, email, address, phone number, and company.
    Returns the transformed data as a Pandas DataFrame.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`load(data: pd.DataFrame, path: str) -> None` — saves the previously transformed `data` to
    a CSV file at `path`. We’ll also append a timestamp to the file name, so the files
    don’t get overwritten.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After function declaration, all three are called when the Python script is
    executed. Here’s the complete code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now run the script by executing the following from the Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You shouldn’t see any output if everything ran correctly. However, you should
    see CSV file(s) in the `data` folder (I’ve run the file twice):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d3079cf5ba91efe531e3ead0424c981e.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 2 — List of CSV files in the data folder after running the ETL pipeline
    twice (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the ETL pipeline runs and finishes without any errors. But what
    if you want to run the pipeline at a schedule? That’s where *Prefect* comes in.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Basics of Prefect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you’ll learn the basics of *Prefect* tasks, flows, parameters,
    schedules, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: Prefect Tasks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start with the most simple one — tasks. It’s basically a single step of
    your workflow. To follow along, create a new Python file called `02_task_conversion.py`.
    Copy everything from `01_etl_pipeline.py`, and you’re ready to go.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert a Python function to a Prefect Task, you first need to make the
    necessary import — `from prefect import task`, and decorate any function of interest.
    Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'That’s all you have to do! Here’s the updated version of our ETL pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run it and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/f77285a7859419a9f8af5f5a4caa7b1e.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 3 — Function to Task conversion with Prefect (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: It looks like something is wrong. That’s because *Prefect Task* can’t be run
    without the *Prefect Flow.* Let’s implement it next.
  prefs: []
  type: TYPE_NORMAL
- en: Prefect Flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Copy everything from `02_task_conversion.py` to a new file — `03_flow.py`. You’ll
    need to import `Flow` from the `prefect` library before declaring it.
  prefs: []
  type: TYPE_NORMAL
- en: To declare a Flow, we’ll write another Python function — `prefect_flow()`. It
    won’t accept any parameters and won’t be decorated with anything. Inside the function,
    we’ll use Python’s context manager to create a flow. The flow should contain the
    same three lines that were previously inside the `if __name__ == ‘__main__”` code
    block.
  prefs: []
  type: TYPE_NORMAL
- en: In the mentioned block, we’ll now have to run the flow with the corresponding `run()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete code for this file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run it and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e9143ea481b80645655a29a2fdbabdc9.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 4 — Running the Prefect Flow for the first time (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that’s something! Not only is the ETL pipeline executed, but we also get
    detailed information about when every task started and finished. I’ve run the
    file twice, so two new CSV files should get saved to the `data` folder. Let’s
    verify if that’s the case:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2669022cbf0222d1245d5ff7cef47ee1.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 5 — CSV files generated by the Prefect Flow (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And that’s how you can run a simple ETL pipeline with Prefect. It doesn’t have
    many benefits over a pure Python implementation yet, but we’ll change that quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Prefect Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hardcoding parameter values is never a good idea. That’s where *Prefect Parameters* come
    in. To start, copy everything from `03_flow.py` to a new file — `04_parameters.py`.
    You’ll need to import the `Parameter` class from the `prefect` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use this class inside the flow context manager. Here are the arguments
    you’ll find helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` — name of the parameter, will be used later upon running the flow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required` — a boolean value, specifies if the parameter is required for the
    flow to execute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default` — specifies the default value for the parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll declare a parameter for the API URL — `param_url = Parameter(name=’p_url’,
    required=True)`.
  prefs: []
  type: TYPE_NORMAL
- en: To assign values to the parameters, you’ll need to specify the `parameters` dictionary
    as an argument to the `run()` function. Parameter names and values should be written
    as key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the complete code for this file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the file and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/d1c9d67e156af243c384a1e213f22675.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 6 — Running the Prefect Flow containing Parameters (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve run the file twice, so two new CSV files should appear in the `data` folder.
    Let’s verify if that’s true:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/fd67d3d16e5347058c72fd92f0e7cc86.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 7 — CSV files generated by Prefect Flow containing Parameters (image
    by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And there you have it — parameter value specification at one place. It makes
    it easy to make changes down the road and also to manage more complex workflows.
  prefs: []
  type: TYPE_NORMAL
- en: Up next, we’ll explore a feature of Prefect that makes it particularly useful
    — schedules.
  prefs: []
  type: TYPE_NORMAL
- en: Prefect Schedules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll explore two ways to schedule tasks today — *Interval schedule* and *Cron
    schedule*. The second one might sound familiar, as Cron is a well-known method
    of scheduling tasks on Unix.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll begin with the **Interval Scheduler**. To start, copy everything from `04_intervals.py` to `05_interval_scheduler.py`.
    You’ll have to import `IntervalScheduler` from `prefect.schedules`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we’ll make an instance of the imported class right before the `prefect_flow()` function
    declaration and instruct it to run every ten seconds. That can be done by setting
    the value of the `interval` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: To connect a scheduler to the workflow, you’ll have to specify the value for
    the `schedule` parameter when initializing the `Flow` class with the context manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole script file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the file and see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/c78581f0667eedf10c00cad7735337d4.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 8 — Using Interval Schedule (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the entire ETL pipeline ran two times. Prefect will report to
    the Terminal when the next execution will occur.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s explore the **Cron Scheduler**. Copy everything from `05_interval_scheduler.py` to `06_cron_scheduler.py`.
    This time you’ll import `CronSchedule` instead of `IntervalSchedule`.
  prefs: []
  type: TYPE_NORMAL
- en: Upon class initialization, you’ll specify a cron pattern to the `cron` parameter.
    Five star symbols will ensure the workflow runs every minute. That’s the lowest
    possible interval with Cron.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the file remains identical. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/e150c047bec34dc8d3ca8f32bee62a5e.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 9 — Using Cron Schedule (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the ETL pipeline was run twice every full minute, as specified
    by the Cron pattern. For the final part of this section, we’ll explore how to
    handle failure — and explain why you should always prepare for it.
  prefs: []
  type: TYPE_NORMAL
- en: Prefect Failures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sooner or later, an unexpected error will happen in your workflow. Prefect provides
    a ridiculously easy way to retry the execution of a task. To start, copy everything
    from `04_parameters.py` to a new file — `07_failures.py`.
  prefs: []
  type: TYPE_NORMAL
- en: The `extract()` function could fail for different network reasons. For example,
    maybe the API isn’t available at the moment but will be in a couple of seconds.
    These things happen in a production environment and shouldn’t crash your application
    altogether.
  prefs: []
  type: TYPE_NORMAL
- en: To avoid unwanted crashes, we can extend our `task` decorator a bit. It can
    accept different parameters, and today we’ll use `max_retries` and `retry_delay`.
    Both are self-explanatory, so I won’t bother with further explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only problem is — our workflow won’t fail as is. But it will if we place
    a non-existing URL as a parameter value inside `flow.run()`. Here’s the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/a04275dc4d17dbd8e87e9e0e2949d3b3.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 10 — Preventing failures with Prefect (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: The task failed, but the workflow didn’t crash. Of course, it will crash after
    ten retries, but you can always change the parameter specification.
  prefs: []
  type: TYPE_NORMAL
- en: And that does it for working with Prefect locally. Next, let’s move our code
    to the cloud and explore the changes.
  prefs: []
  type: TYPE_NORMAL
- en: Running Prefect in Saturn Cloud
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s get our hands dirty right away. To start, sign up for a free version of
    a [Prefect Cloud](https://www.prefect.io/cloud/) account. The registration process
    is straightforward and requires no further explanation. Once registered, create
    a project. I’ve named mine `SaturnCloudDemo`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before going over to [Saturn Cloud](https://www.saturncloud.io/s/?utm_source=dario-radecic),
    you’ll have to create an API key in Prefect that will connect the two. You’ll
    find the *API Key* option under settings. As you can see, I’ve named mine `SaturnDemoKey`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/51a921e70591960e8bb016d1cb1a8878.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 11 — Prefect Cloud API key creation (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You now have everything needed, so go over to [Saturn Cloud](https://www.saturncloud.io/s/?utm_source=dario-radecic) and
    create a free account. Once on the dashboard, you’ll see multiple options for
    project creation. Select the *Prefect* option, like the one you can see below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6f2a97587fad4691545cb6573270fad3.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 12 — Creating a Prefect project in Saturn Cloud (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Saturn Cloud will now automatically do all the heavy lifting for you, and a
    couple of minutes later, you’ll be able to open a JupyterLab instance by clicking
    on the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cc518b006f6e7688278f377bbb321d64.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 13 — Opening JupyterLab in Saturn Cloud (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll have access to two notebooks — the second one shows a quick demonstration
    of using Prefect in Saturn Cloud. Here’s how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a040269b2120ae00bcc1a264f5c2b070.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 14 — Prefect Cloud notebook in Saturn Cloud (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll need to change only two things for a notebook to work. First, change
    the project name to the name of your project in Prefect Cloud. Second, replace `<your_api_key_here>` with
    an API key generated a couple of minutes ago. If you did everything correctly,
    you should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e1632b0fc736cfe7b6c53c700f27baee.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 15 — Login successful message in Saturn Cloud (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: 'To test, run every cell that follows in the notebook. Then go over to the Prefect
    Cloud dashboard and open up your project. It won’t be empty as it was a couple
    of minutes ago:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c6def1d6bd1f03d8c29ba18bfc905410.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image 16 — Successful Prefect task scheduling (image by author)*'
  prefs: []
  type: TYPE_NORMAL
- en: And that’s all you have to do! Feel free to copy/paste our ETL pipeline and
    verify that it works. That’s where Saturn Cloud shines — you can copy/paste the
    code from the local machine with minimal changes, as everything tedious is configured
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s wrap things up in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: And there you have it — the basics of Prefect explained, both locally and on
    the cloud. I hope you can see the value of workflow management systems for production
    applications even if you knew nothing about the topic before reading this article.
  prefs: []
  type: TYPE_NORMAL
- en: For more advanced guides, i.e., configuring logging and Slack notifications,
    please refer to the [official documentation](https://docs.prefect.io/core/). The
    provided examples are more than enough to get you started.
  prefs: []
  type: TYPE_NORMAL
- en: Stay Connected
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow me on [Medium](https://medium.com/@radecicdario) for more stories like
    this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sign up for my [newsletter](https://mailchi.mp/46a3d2989d9b/bdssubscribe)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect on [LinkedIn](https://www.linkedin.com/in/darioradecic/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Dario Radečić](https://www.linkedin.com/in/darioradecic/)** is a consultant
    at NEOS.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/prefect-how-to-write-and-schedule-your-first-etl-pipeline-with-python-54005a34f10b).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Development & Testing of ETL Pipelines for AWS Locally](/2021/08/development-testing-etl-pipelines-aws-locally.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What’s ETL?](/2021/04/whats-etl.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[dbt for Data Transformation – Hands-on Tutorial](/2021/07/dbt-data-transformation-tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Your First ETL Pipeline with Bash](https://www.kdnuggets.com/building-your-first-etl-pipeline-with-bash)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Data Pipeline with Prefect](https://www.kdnuggets.com/building-data-pipeline-with-prefect)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
