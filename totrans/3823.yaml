- en: 90% of Today’s Code is Written to Prevent Failure, and That’s a Problem
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 90% 的今天的代码是为了防止失败而编写的，这是一种问题
- en: 原文：[https://www.kdnuggets.com/2022/07/90-today-code-written-prevent-failure-problem.html](https://www.kdnuggets.com/2022/07/90-today-code-written-prevent-failure-problem.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/07/90-today-code-written-prevent-failure-problem.html](https://www.kdnuggets.com/2022/07/90-today-code-written-prevent-failure-problem.html)
- en: '![90% of Today’s Code is Written to Prevent Failure, and That’s a Problem](../Images/5a4ded8e8356b840efe3d6216a5262cc.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![90% 的今天的代码是为了防止失败而编写的，这是一种问题](../Images/5a4ded8e8356b840efe3d6216a5262cc.png)'
- en: Photo by [cottonbro](https://www.pexels.com/photo/man-with-binary-code-projected-on-his-face-5474031/)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[cottonbro](https://www.pexels.com/photo/man-with-binary-code-projected-on-his-face-5474031/)
- en: No data scientist or engineer wants to learn that their code failed. For example,
    your data may have arrived malformed. The database might have gone down. Or, the
    computer running the code failed. There are an infinite number of reasons for
    failure that can prevent your code from achieving its prescribed objective. Trying
    to anticipate and defend against these failures is the constant uphill battle
    that today’s engineers are up against. But it doesn’t have to be, if we only change
    our perspective and frameworks to say, **“Failures will happen—and that’s okay.”**
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 没有数据科学家或工程师愿意知道他们的代码失败了。例如，你的数据可能格式错误。数据库可能宕机。或者，运行代码的计算机可能出现故障。有无数的失败原因可能导致你的代码未能实现其预定目标。尝试预测和防御这些失败是今天工程师面临的持续的艰难挑战。但如果我们只是改变我们的视角和框架，去说**“失败会发生——这没关系。”**，情况就不会如此。
- en: Positive vs. Negative Engineering
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 积极工程与消极工程
- en: Productive code written to achieve an intended outcome can be categorized as
    **positive engineering**. Companies hire engineers with the aim of writing positive
    code and building solutions to meet business-critical and analytical objectives.
    Conversely, **negative engineering** is the defensive code written to provide
    preemptive guardrails against anticipated failures and ensure that the positive
    code actually runs.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为实现预期结果而编写的高效代码可以被归类为**积极工程**。公司雇佣工程师的目的是编写积极的代码，构建解决方案以满足业务关键和分析目标。相反，**消极工程**是为了对抗预期的失败并确保积极代码实际运行而编写的防御性代码。
- en: Trying to anticipate the multitude of ways things can go wrong makes writing
    negative code both a time-consuming and frustrating endeavor, with engineers reporting
    that they typically spend 90% of their time on negative or defensive issues alone.
    This time unfortunately detracts from overall productivity and primary objective
    and leaves just 10% for the positive solutions that engineers were hired to build.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试预测可能出现的各种问题使得编写消极代码既费时又令人沮丧，工程师报告说，他们通常将90%的时间花在消极或防御性问题上。不幸的是，这段时间会影响整体生产力和主要目标，只剩下10%
    的时间用于工程师被雇佣来构建的积极解决方案。
- en: Engineers may think that such a defensive approach is necessary to the success
    of their positive code and is helping to reduce the risks of failure. But as someone
    who has spent their entire career in risk management, I can say that effective
    risk mitigation doesn’t attempt to predict and hedge every possible result. Instead,
    one develops a framework with useful tools specific enough to tackle the task
    at hand, but generalized enough to handle the unknown. **It’s about enabling a
    negative engineering framework where users can work with failure, rather than
    against it.**
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 工程师可能认为这种防御性的方法对他们的积极代码的成功是必要的，并且有助于减少失败的风险。但作为一个在风险管理领域工作了整个职业生涯的人，我可以说，有效的风险缓解并不试图预测和对冲所有可能的结果。相反，人们应当建立一个具有足够具体工具的框架，以应对手头的任务，同时又足够通用以处理未知问题。**这就是关于建立一个消极工程框架，让用户可以与失败共处，而不是对抗失败。**
- en: Insurance for Positive Engineering
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 积极工程的保险
- en: I liken a negative engineering framework to home insurance. Purchasing home
    insurance won’t prevent your house from burning down or flooding, but it can significantly
    reduce the financial burden of the ramifications. Similarly, implementing a negative
    engineering framework won’t prevent failures from occurring, but it can reduce
    the time, headache and talent required to identify and correct the problem.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我将消极工程框架比作家庭保险。购买家庭保险不会阻止你的房子着火或被淹，但它可以显著减少财务负担。同样，实现消极工程框架不会阻止失败的发生，但可以减少识别和修复问题所需的时间、麻烦和人才。
- en: An effective framework encompasses proper instrumentation, observability, and
    orchestration of code. As insurance for your positive code, it allows you to go
    beyond just scheduling a process to run to knowing if that process failed in order
    to insure your solutions’ outcomes. A failed code may require a simple retry or
    for engineers to go in and quickly modify the code to mitigate failure cases.
    The problem may be—and often is—a seemingly trivial issue but one that can cause
    a butterfly effect of problems if left unchecked. For instance, failures with
    mission-critical analytics pipelines may result in companies making strategic
    decisions from bad data.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的框架包括适当的仪表化、可观察性和代码编排。作为你正面代码的保险，它不仅让你安排进程运行，还能知道该进程是否失败，从而确保解决方案的结果。失败的代码可能需要简单的重试，或工程师快速修改代码以缓解失败情况。问题可能是——并且通常是——看似微不足道的问题，但如果不加以检查，可能会引发蝴蝶效应。例如，关键任务分析管道的失败可能导致公司从错误的数据中做出战略决策。
- en: It’s important to note that a negative engineering framework takes more than
    being able to capture error messages. Users need to set clear expectations of
    what successful execution of the positive code looks like. For example, if a process
    running on a computer suddenly crashes, the machine may not even have the opportunity
    to send an error message that the failure occurred. But by creating a logic where
    the framework can infer that a process failed when the expectation wasn’t met,
    engineers can derive defensive insights and take action on any deviations from
    the set objectives—even in face of the unexpected.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，负面工程框架不仅仅是能够捕获错误信息。用户需要明确成功执行正面代码的预期。例如，如果计算机上运行的一个进程突然崩溃，机器可能甚至没有机会发送失败的错误信息。但是，通过创建一种逻辑，使框架能够推断出在预期未能实现时进程失败，工程师可以获得防御性见解，并对任何偏离设定目标的情况采取行动——即使面对意外情况。
- en: Task Failed Successfully
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务成功失败
- en: The fact is, no matter how much negative code you write or how many safeguards
    you try to put in place, failures are an inevitable part of the life of an engineer.
    Moreover, the catalyst for a failure may be outside of your control. Take for
    instance a real-life situation that happened with a data team at a high-growth
    startup. The team of five engineers was managing an analytics stack when their
    entire infrastructure completely failed, leaving them with reports full of errors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，无论你写多少负面代码或尝试实施多少保障措施，失败都是工程师生活中不可避免的一部分。此外，失败的催化剂可能超出你的控制范围。以一家高增长初创公司的数据团队为例，这支由五名工程师组成的团队在管理分析堆栈时，其整个基础设施完全失败，导致报告中充满错误。
- en: 'Starting from their broken dashboard and working backward, the team discovered
    one error after another, at nearly every layer of their stack. The team eventually
    found this was because each stage was passing its failure to the subsequent stages,
    resulting in chain reaction of failures at each step. After three days of investigative
    work, the team uncovered the source of their failures: it was as trivial as the
    credit card attached to a SaaS vendor had expired. As the vendor’s API was integrated
    with an early stage of the team’s pipeline, the billing error created a domino
    effect of failures down to the end-user dashboard.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从他们破损的仪表盘开始倒推，团队发现几乎在每一层堆栈中都有一个又一个错误。团队最终发现这是因为每个阶段将其失败传递给后续阶段，导致每一步的失败链反应。在经过三天的调查工作后，团队揭示了失败的根源：问题竟然如此简单——附加在SaaS供应商上的信用卡已过期。由于供应商的API集成在团队管道的早期阶段，账单错误造成了一连串的失败，直至终端用户仪表盘。
- en: Once they found the problem, the team was fortunately able to resolve it. All
    they needed was awareness of the root cause and the solution was simple. Defensive,
    negative code wouldn’t have been able to prevent such a failure—given the catalyst
    was external—but an insurance framework would be able to mitigate its impact.
    A good workflow tool could identify the root failure and prevent the downstream
    tasks from executing at all, with the expectation that if they did it would only
    result in a wave of failures. This visibility would have helped the five-member
    team whittle three days of investigation time down to a matter of minutes and
    raised productivity dramatically.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦他们找到了问题，团队幸运地解决了它。他们只需要了解根本原因，解决方案就很简单。防御性、消极的代码无法阻止这种失败——因为催化剂是外部的——但一个保险框架可以减轻其影响。一个好的工作流程工具可以识别根本故障，并防止下游任务的执行，预期如果这些任务继续执行，将只会导致一系列失败。这种可见性将帮助五人团队将三天的调查时间缩短到几分钟，并大幅提高生产力。
- en: Productivity gains are perhaps the greatest benefit to a negative engineering
    framework where engineers come to accept the occurrence of failures and have the
    tools to mitigate their impacts. Rather than spending 90% of their time on trying
    to prevent failures, they can dedicate more time to writing positive code that
    drives business outcomes. Even bringing the hours spent on negative code down
    to 80% would mean raising positive engineering time from 10% to 20%—effectively
    doubling productivity time. That’s an extraordinary gain from just a shift in
    mindset. Engineers can thereby confidently ensure their positive codes run as
    designed and manage the unknown and all the risks it brings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 生产力提升可能是消极工程框架的最大好处，工程师接受失败的发生，并拥有减轻其影响的工具。与其花费90%的时间去防止失败，他们可以更多地投入到编写积极的代码中，从而推动业务成果。即使将消极代码的时间减少到80%，也意味着将积极工程时间从10%提升到20%——有效地使生产力时间翻倍。这仅仅是心态转变带来的非凡收益。工程师因此可以自信地确保他们的积极代码按照设计运行，并管理未知及其带来的所有风险。
- en: '**[Jeremiah Lowin](https://www.linkedin.com/in/jlowin/)** is Founder & CEO
    at [Prefect](https://www.prefect.io/).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Jeremiah Lowin](https://www.linkedin.com/in/jlowin/)** 是 [Prefect](https://www.prefect.io/)
    的创始人兼首席执行官。'
- en: '* * *'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT需求'
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How Big Data Is Saving Lives in Real Time: IoV Data Analytics Helps…](https://www.kdnuggets.com/how-big-data-is-saving-lives-in-real-time-iov-data-analytics-helps-prevent-accidents)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[大数据如何实时拯救生命：物联网数据分析帮助…](https://www.kdnuggets.com/how-big-data-is-saving-lives-in-real-time-iov-data-analytics-helps-prevent-accidents)'
- en: '[5 Skills All Marketing Analytics and Data Science Pros Need Today](https://www.kdnuggets.com/2023/08/mads-5-skills-marketing-analytics-data-science-pros-need-today.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[今天所有营销分析和数据科学专业人士需要的5项技能](https://www.kdnuggets.com/2023/08/mads-5-skills-marketing-analytics-data-science-pros-need-today.html)'
- en: '[Navigating Today’s Data and AI Market Uncertainty](https://www.kdnuggets.com/2024/02/altair-navigating-todays-data-ai-market-uncertainty)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[导航当今的数据和人工智能市场不确定性](https://www.kdnuggets.com/2024/02/altair-navigating-todays-data-ai-market-uncertainty)'
- en: '[Vanishing Gradient Problem: Causes, Consequences, and Solutions](https://www.kdnuggets.com/2022/02/vanishing-gradient-problem.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[消失梯度问题：原因、后果和解决方案](https://www.kdnuggets.com/2022/02/vanishing-gradient-problem.html)'
- en: '[Data Orchestration: The Dividing Line Between Generative AI Success…](https://www.kdnuggets.com/2024/07/astronomer/data-orchestration-the-dividing-line-between-generative-ai-success-and-failure)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据编排：生成型人工智能成功与失败的分界线](https://www.kdnuggets.com/2024/07/astronomer/data-orchestration-the-dividing-line-between-generative-ai-success-and-failure)'
- en: '[Genetic Programming in Python: The Knapsack Problem](https://www.kdnuggets.com/2023/01/knapsack-problem-genetic-programming-python.html)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的遗传编程：背包问题](https://www.kdnuggets.com/2023/01/knapsack-problem-genetic-programming-python.html)'
