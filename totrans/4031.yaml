- en: 'Python in Finance: Real Time Data Streaming within Jupyter Notebook'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/python-in-finance-real-time-data-streaming-within-jupyter-notebook](https://www.kdnuggets.com/python-in-finance-real-time-data-streaming-within-jupyter-notebook)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python in Finance: Real Time Data Streaming within Jupyter Notebook](../Images/e67d02a474ac207061cc940e51dfd470.png)'
  prefs: []
  type: TYPE_IMG
- en: In this blog, you will learn to visualize live data streams in real time, all
    within the comfort of your favorite tool, the Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In most projects, dynamic charts within Jupyter Notebooks need manual updates;
    for example, it may require you to hit reload to fetch new data to update the
    charts. This doesn’t work well for any fast-paced industry, including finance.
    Consider missing out on crucial buy indications or fraud alerts because your user
    did not hit reload at that instance.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we'll show you how to move from manual updates to a streaming or real-time
    method in Jupyter Notebook, making your projects more efficient and reactive.
  prefs: []
  type: TYPE_NORMAL
- en: '**What’s covered:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Real-Time Visualization:** You''ll learn how to bring data to life, watching
    it evolve second by second, right before your eyes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jupyter Notebook Mastery:** Harness the full power of Jupyter Notebook, not
    just for static data analysis but for dynamic, streaming data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python in Quant Finance Use Case:** Dive into a practical financial application,
    implementing a widely used in finance with real-world data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stream Data Processing:** Understand the foundations and benefits of processing
    data in real-time, a skill becoming increasingly crucial in today''s fast-paced
    data world.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this blog, you'll know how to build similar real-time visualizations
    like the one below within your Jupyter Notebook.
  prefs: []
  type: TYPE_NORMAL
- en: '![Python in Finance: Real Time Data Streaming within Jupyter Notebook](../Images/b12587d34bb4fd82f3163f1d92b4b826.png)'
  prefs: []
  type: TYPE_IMG
- en: Quick recap of real time data processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the heart of our project lies the concept of stream processing.
  prefs: []
  type: TYPE_NORMAL
- en: Simply put, stream processing is about handling and analyzing data in real-time
    as it's generated. Think of it like Google Maps during a rush hour drive, where
    you see traffic updates live, enabling immediate and efficient route changes.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, according to the CIO of Goldman Sachs in this Forbes [podcast](https://youtu.be/tleX4KGNnWo?t=1439),
    moving towards stream or real-time data processing is one of the significant trends
    we’re headed toward.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter Notebooks as a Real-time Data Analytics Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s about combining the power of real-time data processing with an interactive
    and familiar environment of Jupyter Notebooks.
  prefs: []
  type: TYPE_NORMAL
- en: Besides that, Jupyter Notebooks play well with containerized environments. Therefore,
    our projects aren't just stuck on local machines; we can take them anywhere –
    running them smoothly on anything from a colleague's laptop to a cloud server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our use-case in Python in finance: Bollinger Bands'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In finance, every second counts, whether for fraud detection or trading, and
    that’s why stream data processing has become essential. The spotlight here is
    on [Bollinger Bands](https://www.fidelity.com/learning-center/trading-investing/technical-analysis/technical-indicator-guide/bollinger-bands),
    a tool helpful for financial trading. This tool comprises:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Middle Band:** This is a 20-period moving average, which calculates the
    average stock price over the past 20 periods (such as 20 minutes for high-frequency
    analysis), giving a snapshot of recent price trends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Outer Bands:** Located 2 standard deviations above and below the middle band,
    they indicate market volatility - wider bands suggest more volatility, and narrower
    bands, less.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Python in Finance: Real Time Data Streaming within Jupyter Notebook](../Images/12033530f350bac815001b66708c6a4a.png)'
  prefs: []
  type: TYPE_IMG
- en: In Bollinger Bands, potentially overbought conditions are signaled when the
    moving average price touches or exceeds the upper band (a cue to sell, often marked
    in red), and oversold conditions are indicated when the price dips below the lower
    band (a cue to buy, typically marked in green).
  prefs: []
  type: TYPE_NORMAL
- en: Algo traders usually pair Bollinger Bands with other technical indicators.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we made an essential tweak while generating our Bollinger Bands by integrating
    trading volumes. Traditionally, Bollinger Bands do not consider trading volume
    and are calculated solely based on price data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus, we have indicated Bollinger Bands at a distance of VWAP ± 2 × VWSTD where:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VWAP: A **1-minute volume-weighted average price** for a more volume-sensitive
    perspective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VWSTD: Represents a focused, **20-minute standard deviation**, i.e., a measure
    of market volatility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical implementation:**'
  prefs: []
  type: TYPE_NORMAL
- en: We use temporal [sliding windows](https://towardsdatascience.com/reservoir-sampling-for-fficient-stream-processing-97f47f85c11b)
    (‘pw.temporal.sliding’) to analyze data in 20-minute segments, akin to moving
    a magnifying glass over the data in real time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We employ [reducers](https://pathway.com/developers/api-docs/reducers) (‘pw.reducers’),
    which process data within each window to yield a particular outcome for each window,
    i.e., the standard deviations in this case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Glance at tools used for enabling real time streaming data within our Jupyter
    Notebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Polygon.io:** Provider of real-time and historical market data. While you
    can certainly use its API for live data, we''ve pre-saved some data into a CSV
    file for this demo, making it easy to follow without needing an API key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pathway:** An open-source Pythonic framework for fast data processing. It
    handles both batch (static) and streaming (real-time) data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bokeh:** Ideal for creating dynamic visualizations, Bokeh brings our streaming
    data to life with engaging, interactive charts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Panel**: Enhances our project with real-time dashboard capabilities, working
    alongside Bokeh to update our visualizations as new data streams come in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step-by-Step Tutorial: Visualizing Real-Time Data within Jupyter Notebook.'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This involves six steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Doing pip install for relevant frameworks and importing relevant libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fetching sample data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the data source for computation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculating the stats essential for Bollinger Bands
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dashboard Creation using Bokeh and Panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hitting the run command
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. Imports and Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let’s quickly install the necessary components.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Start by importing the necessary libraries. These libraries will help in data
    processing, visualization, and building interactive dashboards.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 2\. Fetching Sample Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, download the sample data from GitHub. This step is crucial for accessing
    our data for visualization. Here, we have fetched Apple Inc (AAPL) stock prices.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** This tutorial leverages a showcase published [*here*](https://pathway.com/developers/showcases/live_data_jupyter)'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3\. Data Source Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a streaming data source using the CSV file. This simulates a live data
    stream, offering a practical way to work with real-time data without necessitating
    an API key while building the project for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**Note:** No data processing occurs immediately, but at the end when we hit
    the run command.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 4\. Calculating the stats essential for Bollinger Bands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will briefly build the trading algorithm we discussed above. We have
    a dummy stream of Apple Inc. stock prices. Now, to make Bollinger Bands,
  prefs: []
  type: TYPE_NORMAL
- en: We’ll calculate the weighted 20-minute standard deviation (VWSTD)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The 1-minute weighted running average of prices (VWAP)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join the two above.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can check out the notebook [here](https://colab.research.google.com/github/pathwaycom/pathway-examples/blob/main/showcases/live-data-jupyter.ipynb)
    for a deeper understanding of the computations.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Dashboard Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's time to bring our analysis to life with a Bokeh plot and Panel table visualization.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you run this cell, placeholder containers are created in your notebook
    for the plot and table. They'll be filled with live data once the computation
    starts.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. Running the Computation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the preparations are complete, and it's time to run the data processing
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: As the dashboard updates in real-time, you'll see how the Bollinger Bands trigger
    actions - green markers for buying and red for selling, often at a slightly higher
    price.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** You should manually run pw.run() after the widget is initialized
    and visible. You can find more details in this GitHub issue [here](https://github.com/jupyter/notebook/issues/1622).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: TL;DR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this blog, we understand Bollinger Bands and take you through a journey of
    visualizing real-time financial data in Jupyter Notebook. We showed how to transform
    live data streams into actionable insights using Bollinger Bands and a blend of
    open-source Pythonic tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The tutorial provides a practical example of real-time financial data analysis,
    leveraging open source for an end-to-end solution from data fetching to interactive
    dashboarding. You can create similar projects by:'
  prefs: []
  type: TYPE_NORMAL
- en: Doing this for a stock of your choice by fetching live stock prices from APIs
    like Yahoo Finance, Polygon, Kraken, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Doing this for a group of your favorite stocks, ETFs, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging some other trading tool apart from Bollinger Bands.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By integrating these instruments with real-time data within a Jupyter Notebook,
    you’re not just analyzing the market but experiencing it as it unfolds.
  prefs: []
  type: TYPE_NORMAL
- en: Happy streaming!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://linkedin.com/in/muditjps)**[Mudit Srivastava](https://linkedin.com/in/muditjps)****
    works at Pathway. Prior to this, he was a founding member of AI Planet and is
    an active community builder in the domain of LLMs and Real-time ML.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[10 Jupyter Notebook Tips and Tricks for Data Scientists](https://www.kdnuggets.com/2023/06/10-jupyter-notebook-tips-tricks-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free Templates for Data Science Projects on Jupyter Notebook](https://www.kdnuggets.com/5-free-templates-for-data-science-projects-on-jupyter-notebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Setup Julia on Jupyter Notebook](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Jupyter Notebook Magic Methods Cheat Sheet](https://www.kdnuggets.com/jupyter-notebook-magic-methods-cheat-sheet)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Digest 15 Billion Logs Per Day and Keep Big Queries Within 1 Second](https://www.kdnuggets.com/how-to-digest-15-billion-logs-per-day-and-keep-big-queries-within-1-second)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cutting Down Implementation Time by Integrating Jupyter and KNIME](https://www.kdnuggets.com/2021/12/cutting-implementation-time-integrating-jupyter-knime.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
