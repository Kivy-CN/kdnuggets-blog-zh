- en: 'Pandas: How to One-Hot Encode Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/07/pandas-onehot-encode-data.html](https://www.kdnuggets.com/2023/07/pandas-onehot-encode-data.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Pandas: How to One-Hot Encode Data](../Images/c0f8134b033e517c4d51e4349fe07d0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image from [Pexels](https://www.pexels.com/photo/a-woman-looking-afar-5473955/)
  prefs: []
  type: TYPE_NORMAL
- en: What is One-Hot Encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: One-hot encoding is a data preprocessing step to convert categorical values
    into compatible numerical representations.
  prefs: []
  type: TYPE_NORMAL
- en: '| categorical_column | bool_col | col_1 | col_2 | label |'
  prefs: []
  type: TYPE_TB
- en: '| value_A | True | 9 | 4 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| value_B | False | 7 | 2 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| value_D | True | 9 | 5 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| value_D | False | 8 | 3 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| value_D | False | 9 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| value_D | False | 5 | 4 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| value_B | True | 8 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| value_D | True | 6 | 6 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| value_C | True | 0 | 5 | 0 |'
  prefs: []
  type: TYPE_TB
- en: For example for this dummy dataset, the categorical column has multiple string
    values. Many machine learning algorithms require the input data to be in numerical
    form. Therefore, we need some way to convert this data attribute to a form compatible
    with such algorithms. Thus, we break down the categorical column into multiple
    binary-valued columns.
  prefs: []
  type: TYPE_NORMAL
- en: How to use Pandas Library for One-Hot Encoding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Firstly, read the .csv file or any other associated file into a Pandas data
    frame.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: To check unique values and better understand our data, we can use the following
    Panda functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For this dummy data, the functions return the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'For the categorical column, we can break it down into multiple columns. For
    this, we use [pandas.get_dummies()](https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html)
    method. It takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Argument |  |'
  prefs: []
  type: TYPE_TB
- en: '| **data:** array-like, Series, or DataFrame | The original panda''s data frame
    object |'
  prefs: []
  type: TYPE_TB
- en: '| **columns:** list-like, default None | List of categorical columns to hot-encode
    |'
  prefs: []
  type: TYPE_TB
- en: '| **drop_first:** bool, default False | Removes the first level of categorical
    labels |'
  prefs: []
  type: TYPE_TB
- en: To better understand the function, let us work on one-hot encoding the dummy
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Hot-Encoding the Categorical Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use the get_dummies method and pass the original data frame as **data** input.
    In **columns**, we pass a list containing only the *categorical_column* header.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The following commands drops the categorical_column and creates a new column
    for each unique value. Therefore, the single categorical column is converted into
    4 new columns where only one of the 4 columns will have a 1 value, and all of
    the other 3 are encoded 0\. This is why it is called One-Hot Encoding.
  prefs: []
  type: TYPE_NORMAL
- en: '| categorical_column_value_A | categorical_column_value_B | categorical_column_value_C
    | categorical_column_value_D |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: The problem occurs when we want to one-hot encode the boolean column. It creates
    two new columns as well.
  prefs: []
  type: TYPE_NORMAL
- en: Hot Encoding Binary Columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| bool_col_False | bool_col_True |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: We unnecessarily increase a column when we can have only one column where True
    is encoded to 1 and False is encoded to 0\. To solve this, we use the **drop_first**
    argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| bool_col_True |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 |'
  prefs: []
  type: TYPE_TB
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dummy dataset is one-hot encoded where the final result looks like
  prefs: []
  type: TYPE_NORMAL
- en: '| col_1 | col_2 | bool | A | B | C | D | label |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | 4 | 1 | 1 | 0 | 0 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | 2 | 0 | 0 | 1 | 0 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | 5 | 1 | 0 | 0 | 0 | 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 3 | 0 | 0 | 0 | 0 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | 0 | 0 | 0 | 0 | 0 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | 4 | 0 | 0 | 0 | 0 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | 1 | 1 | 0 | 1 | 0 | 0 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | 6 | 1 | 0 | 0 | 0 | 1 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 5 | 1 | 0 | 0 | 1 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 8 | 1 | 0 | 0 | 0 | 1 | 0 |'
  prefs: []
  type: TYPE_TB
- en: The categorical values and boolean values have been converted to numerical values
    that can be used as input to machine learning algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Muhammad Arham](https://www.linkedin.com/in/muhammad-arham-a5b1b1237/)**
    is a Deep Learning Engineer working in Computer Vision and Natural Language Processing.
    He has worked on the deployment and optimizations of several generative AI applications
    that reached the global top charts at Vyro.AI. He is interested in building and
    optimizing machine learning models for intelligent systems and believes in continual
    improvement.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Introduction to Pandas for Data Science](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Ingestion with Pandas: A Beginner Tutorial](https://www.kdnuggets.com/2022/04/data-ingestion-pandas-beginner-tutorial.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Simplify Data Processing with Pandas Pipeline](https://www.kdnuggets.com/2022/08/simplify-data-processing-pandas-pipeline.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Pandas One Liners for Data Access, Manipulation, and Management](https://www.kdnuggets.com/2023/01/pandas-one-liners-data-access-manipulation-management.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Optimal Way to Input Missing Data with Pandas fillna()](https://www.kdnuggets.com/2023/02/optimal-way-input-missing-data-pandas-fillna.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Cleaning with Pandas](https://www.kdnuggets.com/data-cleaning-with-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
