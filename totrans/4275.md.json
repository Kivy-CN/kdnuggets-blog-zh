["```py\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 7667792 entries, 0 to 7667791\nData columns (total 18 columns):\n #   Column                 Dtype         \n---  ------                 -----         \n 0   VendorID               int64         \n 1   tpep_pickup_datetime   datetime64[ns]\n 2   tpep_dropoff_datetime  datetime64[ns]\n 3   passenger_count        int64         \n 4   trip_distance          float64       \n 5   RatecodeID             int64         \n 6   store_and_fwd_flag     object        \n 7   PULocationID           int64         \n 8   DOLocationID           int64         \n 9   payment_type           int64         \n 10  fare_amount            float64       \n 11  extra                  float64       \n 12  mta_tax                float64       \n 13  tip_amount             float64       \n 14  tolls_amount           float64       \n 15  improvement_surcharge  float64       \n 16  total_amount           float64       \n 17  congestion_surcharge   float64       \ndtypes: datetime64[ns](2), float64(9), int64(6), object(1)\nmemory usage: 1.0+ GB\n```", "```py\ndef calculate_total_per_mile(row):\n try:\n     total_per_mile = row.total_amount / row.trip_distance\n except ZeroDivisionError:\n     total_per_mile = 0\n return total_per_mile\n```", "```py\ntaxi_df = pd.read_csv(\n “s3://nyc-tlc/trip data/yellow_tripdata_2019–01.csv”,\n parse_dates=[“tpep_pickup_datetime”, “tpep_dropoff_datetime”]\n)\n```", "```py\ntaxi_df[‘total_per_mile’] = taxi_df.apply(lambda x: calculate_total_per_mile(x), axis=1)\n```", "```py\ntaxi_df[‘total_per_mile’] = taxi_df.swifter.apply(lambda x: calculate_total_per_mile(x), axis=1)\n```", "```py\ndef calculate_total_per_mile(total_amount, trip_distance, out):\n for i, (ta, td) in enumerate(zip(total_amount, trip_distance)):\n     total_per_mile = ta / td\n     out[i] = total_per_mile\n```", "```py\ntaxi = taxi.apply_rows(calculate_total_per_mile,\n     incols={‘total_amount’:’total_amount’,   ‘trip_distance’:’trip_distance’},\n     outcols={‘out’: np.float64},\n     kwargs={}\n )\n```", "```py\nfrom dask.distributed import Client, wait\nfrom dask_saturn import SaturnClustern_workers = 3\ncluster = SaturnCluster(n_workers=n_workers)\nclient = Client(cluster)\nclient.wait_for_workers(n_workers)\n```", "```py\nimport dask_cudftaxi_dc = dask_cudf.read_csv(\n “s3://nyc-tlc/trip data/yellow_tripdata_2019–01.csv”,\n parse_dates=[“tpep_pickup_datetime”, “tpep_dropoff_datetime”],\n storage_options={“anon”: True},\n assume_missing=True,\n)\n```"]