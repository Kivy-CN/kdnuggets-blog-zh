- en: How to Write SQL in Native Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何用原生 Python 编写 SQL
- en: 原文：[https://www.kdnuggets.com/2022/02/easy-sql-native-python.html](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/02/easy-sql-native-python.html](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)
- en: '![How to Write SQL in Native Python](../Images/fc98e8330f52fbe4e098c359fec1932e.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何用原生 Python 编写 SQL](../Images/fc98e8330f52fbe4e098c359fec1932e.png)'
- en: '[Technology vector created by freepik - www.freepik.com](https://www.freepik.com/vectors/technology)'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[技术矢量图由 freepik 创建 - www.freepik.com](https://www.freepik.com/vectors/technology)'
- en: Do you write a lot of SQL? Do you end up calling a lot of this SQL from within
    Python? Does the idea of being able to link with SQL databases and define, manipulate,
    and query using Python sound appealing?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常编写 SQL 吗？你是否经常从 Python 中调用这些 SQL？能够通过 Python 链接 SQL 数据库并定义、操作和查询它们的想法是否吸引你？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的快车道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[SQLModel](https://github.com/tiangolo/sqlmodel) is a Python library for interacting
    with SQL databases in pure, native Python. Its design motivations include intuitiveness,
    ease of use, compatibility, and robustness. SQLModel employs Python [type annotation](https://docs.python.org/3/library/typing.html),
    enforced and managed by [Pydantic](https://pydantic-docs.helpmanual.io/), as well
    as [SQLAlchemy](https://www.sqlalchemy.org/), "Python SQL toolkit and Object Relational
    Mapper," for its SQL interaction.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[SQLModel](https://github.com/tiangolo/sqlmodel) 是一个用于在纯 Python 中与 SQL 数据库交互的
    Python 库。它的设计动机包括直观性、易用性、兼容性和健壮性。SQLModel 使用 Python 的 [类型注解](https://docs.python.org/3/library/typing.html)，由
    [Pydantic](https://pydantic-docs.helpmanual.io/) 强制和管理，以及 [SQLAlchemy](https://www.sqlalchemy.org/)，即“Python
    SQL 工具包和对象关系映射器”，用于其 SQL 交互。'
- en: The library was written by [Sebastián Ramírez](https://github.com/tiangolo),
    the author of [FastAPI](https://fastapi.tiangolo.com/), and the 2 libraries are
    designed to interoperate seamlessly.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库是由 [Sebastián Ramírez](https://github.com/tiangolo)，即 [FastAPI](https://fastapi.tiangolo.com/)
    的作者编写的，这两个库设计上无缝协作。
- en: 'The key features of SQLModel, taken directly from the project''s GitHub repository,
    are:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SQLModel 的关键特性，直接取自项目的 GitHub 仓库，包含：
- en: '**Intuitive to write**: Great editor support. Completion everywhere. Less time
    debugging. Designed to be easy to use and learn. Less time reading docs.'
  id: totrans-14
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编写直观**：编辑器支持优秀。处处有自动完成。减少调试时间。设计上易于使用和学习。减少阅读文档的时间。'
- en: '**Easy to use**: It has sensible defaults and does a lot of work underneath
    to simplify the code you write.'
  id: totrans-15
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易于使用**：它具有合理的默认值，并且在底层做了大量工作，以简化你编写的代码。'
- en: '**Compatible**: It is designed to be compatible with FastAPI, Pydantic, and
    SQLAlchemy.'
  id: totrans-16
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容**：设计上与 FastAPI、Pydantic 和 SQLAlchemy 兼容。'
- en: '**Extensible**: You have all the power of SQLAlchemy and Pydantic underneath.'
  id: totrans-17
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展**：你拥有 SQLAlchemy 和 Pydantic 所提供的所有强大功能。'
- en: '**Short**: Minimize code duplication. A single type annotation does a lot of
    work. No need to duplicate models in SQLAlchemy and Pydantic.'
  id: totrans-18
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简短**：最小化代码重复。一个类型注解可以完成大量工作。不需要在 SQLAlchemy 和 Pydantic 中重复模型。'
- en: Let's have a quick look at how SQLModel works.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看看 SQLModel 是如何工作的。
- en: Create a SQLModel Model (SQL Table)
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 SQLModel 模型（SQL 表）
- en: Want to create a table using SQLModel?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 想要使用 SQLModel 创建一个表格吗？
- en: Here's a simple [example](https://github.com/tiangolo/sqlmodel#create-a-sqlmodel-model)
    of a code excerpt using SQLModel, from the library's GitHub repo.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的 [示例](https://github.com/tiangolo/sqlmodel#create-a-sqlmodel-model)，来自库的
    GitHub 仓库中的代码片段。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the code above, the `Hero` class is a SQLModel object. SQLModel objects are
    equivalent to SQL tables in the SQLModel library. Class attributes, such as `id`
    and `name`, are table columns.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`Hero` 类是一个 SQLModel 对象。SQLModel 对象等同于 SQLModel 库中的 SQL 表。类属性，如 `id`
    和 `name`，是表中的列。
- en: Create Rows (Table Instances)
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建行（表实例）
- en: Want to create a row in the table, aka a data instance?
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 想要在表中创建一行，也就是一个数据实例？
- en: Here's an [example](https://github.com/tiangolo/sqlmodel#create-rows) from the
    library's GitHub repo demonstrating how to do so. Note that each row is an instance
    of the above defined model.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个来自库的 GitHub 仓库的[示例](https://github.com/tiangolo/sqlmodel#create-rows)，演示了如何操作。请注意，每一行都是上面定义模型的一个实例。
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that only conventional Python code has been used to achieve the creation
    of a table and enter data into it row by row, with no SQL code needed as a go-between
    for our Python objects and the backend SQL database.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，仅使用了传统的 Python 代码来创建表并逐行输入数据，无需 SQL 代码作为 Python 对象和后端 SQL 数据库之间的中介。
- en: Write to the SQL Database
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 写入 SQL 数据库
- en: Note that no table or data has yet been written to any existing database, which
    can be accomplished as follows. The following full code [example](https://github.com/tiangolo/sqlmodel#write-to-the-database)
    builds on the above code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，目前尚未将任何表或数据写入现有数据库，可以按如下方式实现。以下完整代码[示例](https://github.com/tiangolo/sqlmodel#write-to-the-database)基于上述代码。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The above code will write a new table to the existing database, and add the
    3 "hero" entries to it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将把一个新表写入现有数据库，并添加 3 个“英雄”条目。
- en: Of course, there is an awful lot more that SQLModel can do. For a full treatment
    of what is possible with the library, and how to accomplish it, have a look at
    the [full documentation](https://sqlmodel.tiangolo.com/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，SQLModel 还可以做很多其他事情。有关库可以实现的所有内容及其实现方法，请查看[完整文档](https://sqlmodel.tiangolo.com/)。
- en: '[**Matthew Mayo**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[**马修·梅奥**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    是数据科学家以及 KDnuggets 的主编，这是一个开创性的在线数据科学和机器学习资源。他的兴趣包括自然语言处理、算法设计与优化、无监督学习、神经网络以及机器学习的自动化方法。马修拥有计算机科学硕士学位和数据挖掘研究生文凭。他可以通过
    editor1 at kdnuggets[dot]com 联系到。'
- en: More On This Topic
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Cloud-Native Super Computing](https://www.kdnuggets.com/2022/03/nvidia-cloud-native-super-computing.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[云原生超级计算](https://www.kdnuggets.com/2022/03/nvidia-cloud-native-super-computing.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[How To Write Efficient Python Code: A Tutorial for Beginners](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何编写高效的 Python 代码：初学者教程](https://www.kdnuggets.com/how-to-write-efficient-python-code-a-tutorial-for-beginners)'
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8 个内置 Python 装饰器，编写优雅代码](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
- en: '[Getting Started with PyTest: Effortlessly Write and Run Tests in Python](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 PyTest：轻松编写和运行 Python 测试](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
- en: '[Pydon''ts - Write elegant Python code: Free Book Review](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydon''ts - 编写优雅的 Python 代码：免费书评](https://www.kdnuggets.com/2022/05/pydonts-write-elegant-python-code-free-book-review.html)'
