- en: Getting Started with PyTorch in 5 Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/5-steps-getting-started-pytorch](https://www.kdnuggets.com/5-steps-getting-started-pytorch)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Getting Started with PyTorch in 5 Steps](../Images/85ff1f259e44794911a7f7d810b43ab6.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to PyTorch and PyTorch Lightning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PyTorch](https://pytorch.org/) is a popular open-source machine learning framework
    based on Python and optimized for GPU-accelerated computing. Originally developed
    by developed by Meta AI in 2016 and now part of the Linux Foundation, PyTorch
    has quickly become one of the most widely used frameworks for deep learning research
    and applications.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike some other frameworks like TensorFlow, PyTorch uses dynamic computation
    graphs which allow for greater flexibility and debugging capabilities. The key
    benefits of PyTorch include:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple and intuitive Python API for building neural networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Broad support for GPU/TPU acceleration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in support for automatic differentiation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed training capabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interoperability with other Python libraries like NumPy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PyTorch Lightning](https://lightning.ai/docs/pytorch/stable/) is a lightweight
    wrapper built on top of PyTorch that further simplifies the process of researcher
    workflow and model development. With Lightning, data scientists can focus more
    on designing models rather than boilerplate code. Key advantages of Lightning
    include:'
  prefs: []
  type: TYPE_NORMAL
- en: Provides structure to organize PyTorch code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handles training loop boilerplate code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accelerates research experiments with hyperparameters tuning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplifies model scaling and deployment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By combining the power and flexibility of PyTorch with the high-level APIs of
    Lightning, developers can quickly build scalable deep learning systems and iterate
    faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Installation and Setup'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start using PyTorch and Lightning, you''ll first need to install a few prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.6 or higher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pip package installer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An NVidia GPU is recommended for accelerated operations (CPU-only setup possible
    but slower)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python and PyTorch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s recommended to use Anaconda for setting up a Python environment for data
    science and deep learning workloads. Follow the steps below:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and install Anaconda for your OS from [here](https://www.anaconda.com/products/distribution)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a Conda environment (or using another Python environment manager): `conda
    create -n pytorch python=3.8`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Activate the environment: `conda activate pytorch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install PyTorch: `conda install pytorch torchvision torchaudio -c pytorch`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Verify that PyTorch is installed correctly by running a quick test in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This will print out a random 3x3 tensor, confirming PyTorch is working properly.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyTorch Lightning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With PyTorch installed, we can now install Lightning using pip:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install lightning`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s confirm Lightning is set up correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This should print out the version number, such as `0.6.0`.
  prefs: []
  type: TYPE_NORMAL
- en: Now we're ready to start building deep learning models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Building a Model with PyTorch'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyTorch uses tensors, similar to NumPy arrays, as its core data structure. Tensors
    can be operated on by GPUs and support automatic differentiation for building
    neural networks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s define a simple neural network for image classification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This defines a convolutional neural network with two convolutional layers and
    three fully connected layers for classifying 10 classes. The `forward()` method
    defines how data passes through the network.
  prefs: []
  type: TYPE_NORMAL
- en: We can now train this model on sample data using Lightning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: Training the Model with Lightning'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Lightning provides a `LightningModule` class to encapsulate PyTorch model code
    and the training loop boilerplate. Let''s convert our model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `training_step()` defines the forward pass and loss calculation. We configure
    an Adam optimizer with learning rate 0.02.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can train this model easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The Trainer handles the epoch looping, validation, logging automatically. We
    can evaluate the model on test data (more on [data modules here](https://lightning.ai/docs/pytorch/stable/data/datamodule.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For comparison, here is the network and training loop code in pure PyTorch:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Lightning makes PyTorch model development incredibly fast and intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Advanced Topics'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lightning provides many built-in capabilities for hyperparameter tuning, preventing
    overfitting, and model management.
  prefs: []
  type: TYPE_NORMAL
- en: Hyperparameter Tuning
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can optimize hyperparameters like learning rate using Lightning''s `tuner`
    module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This performs a Bayesian search over the hyperparameter space.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Overfitting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Strategies like dropout layers and early stopping can reduce overfitting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Model Saving and Loading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Lightning makes it simple to save and reload models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This preserves the full model state and hyperparameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 5: Comparing PyTorch & PyTorch Lightning'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both PyTorch and PyTorch Lightning are powerful libraries for deep learning,
    but they serve different purposes and offer unique features. While PyTorch provides
    the foundational blocks for designing and implementing deep learning models, PyTorch
    Lightning aims to simplify the repetitive parts of model training, thereby accelerating
    the development process.
  prefs: []
  type: TYPE_NORMAL
- en: Key Differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a summary of the key differences between PyTorch and PyTorch Lightning:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | PyTorch | PyTorch Lightning |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Training Loop | Manually coded | Automated |'
  prefs: []
  type: TYPE_TB
- en: '| Boilerplate Code | Required | Minimal |'
  prefs: []
  type: TYPE_TB
- en: '| Hyperparameter Tuning | Manual setup | Built-in support |'
  prefs: []
  type: TYPE_TB
- en: '| Distributed Training | Available but manual setup | Automated |'
  prefs: []
  type: TYPE_TB
- en: '| Code Organization | No specific structure | Encourages modular design |'
  prefs: []
  type: TYPE_TB
- en: '| Model Saving and Loading | Custom implementation needed | Simplified with
    checkpoints |'
  prefs: []
  type: TYPE_TB
- en: '| Debugging | Advanced but manual | Easier with built-in logs |'
  prefs: []
  type: TYPE_TB
- en: '| GPU/TPU Support | Available | Easier setup |'
  prefs: []
  type: TYPE_TB
- en: Flexibility vs Convenience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyTorch is renowned for its flexibility, particularly with dynamic computation
    graphs, which is excellent for research and experimentation. However, this flexibility
    often comes at the cost of writing more boilerplate code, especially for the training
    loop, distributed training, and hyperparameter tuning. On the other hand, PyTorch
    Lightning abstracts away much of this boilerplate while still allowing full customization
    and access to the lower-level PyTorch APIs when needed.
  prefs: []
  type: TYPE_NORMAL
- en: Speed of Development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're starting a project from scratch or conducting complex experiments,
    PyTorch Lightning can save you a lot of time. The LightningModule class streamlines
    the training process, automates logging, and even simplifies distributed training.
    This allows you to focus more on your model architecture and less on the repetitive
    aspects of model training and validation.
  prefs: []
  type: TYPE_NORMAL
- en: The Verdict
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In summary, PyTorch offers more granular control and is excellent for researchers
    who need that level of detail. PyTorch Lightning, however, is designed to make
    the research-to-production cycle smoother and faster, without taking away the
    power and flexibility that PyTorch provides. Whether you choose PyTorch or PyTorch
    Lightning will depend on your specific needs, but the good news is that you can
    easily switch between the two or even use them in tandem for different parts of
    your project.
  prefs: []
  type: TYPE_NORMAL
- en: Moving Forward
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this article, we covered the basics of using PyTorch and PyTorch Lightning
    for deep learning:'
  prefs: []
  type: TYPE_NORMAL
- en: PyTorch provides a powerful and flexible framework for building neural networks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyTorch Lightning simplifies training and model development workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Key features like hyperparameters optimization and model management accelerate
    deep learning research
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these foundations you can start building and training advanced models like
    CNNs, RNNs, GANs and more. The active open source community also offers Lightning
    support and additions like Bolt, a component and optimization library.
  prefs: []
  type: TYPE_NORMAL
- en: Happy deep learning!
  prefs: []
  type: TYPE_NORMAL
- en: '[**Matthew Mayo**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    holds a Master''s degree in computer science and a graduate diploma in data mining.
    As Editor-in-Chief of KDnuggets, Matthew aims to make complex data science concepts
    accessible. His professional interests include natural language processing, machine
    learning algorithms, and exploring emerging AI. He is driven by a mission to democratize
    knowledge in the data science community. Matthew has been coding since he was
    6 years old.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Getting Started with PyTorch Lightning](https://www.kdnuggets.com/2022/12/getting-started-pytorch-lightning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with SQL in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-with-sql)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Scikit-learn in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-scikit-learn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Google Cloud Platform in 5 Steps](https://www.kdnuggets.com/5-steps-google-cloud-platform)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Simple Steps Series: Master Python, SQL, Scikit-learn, PyTorch &…](https://www.kdnuggets.com/5-simple-steps-series-master-python-sql-scikit-learn-pytorch-google-cloud)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
