- en: Build a Command-Line App with Python in 7 Easy Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/adfbc1490240615cbb4432af75a24c12.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Building simple projects is a great way to learn Python and any programming
    language in general. You can learn the syntax to write for loops, use built-in
    functions, read files, and much more. But it’s only when you start building something
    that you actually “learn”.
  prefs: []
  type: TYPE_NORMAL
- en: Following the “learning by building” approach, let’s code a simple TO-DO list
    app that we can run at the command line. Along the way we’ll explore concepts
    like parsing command-line arguments and working with files and file paths. We’ll
    as well revisit basics like defining custom functions.
  prefs: []
  type: TYPE_NORMAL
- en: So let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: What You’ll Build
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By coding along to this tutorial, you’ll be able to build a TO-DO list app you
    can run at the command line. Okay, so what would you like the app to do?
  prefs: []
  type: TYPE_NORMAL
- en: Like TO-DO lists on paper, you need to be able to add tasks, look up all tasks,
    and remove tasks (yeah, strikethrough or mark them done on paper) after you’ve
    completed them, yes? So we’ll build an app that lets us do the following.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add tasks to the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/30e5521fc97f097d0038bc3e4fe3c4f3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Get a list of all tasks on the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/122c08c7195318e0e83e01aa44bd4882.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'And also remove a task (using its index) after you’ve finished it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build a Command-Line App with Python in 7 Easy Steps](../Images/85939a9a2447db626be2653cf89a2e53.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s start coding!
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Get Started'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, create a directory for your project. And inside the project directory,
    create a Python script file. This will be the main file for our to-do list app.
    Let's call it `todo.py`.
  prefs: []
  type: TYPE_NORMAL
- en: You don't need any third-party libraries for this project. So only make sure
    you’re using a recent version of Python. This tutorial uses Python 3.11.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Import Necessary Modules'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `todo.py` file, start by importing the required modules. For our simple
    to-do list app, we''ll need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[argparse](https://docs.python.org/3/library/argparse.html) for command-line
    argument parsing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[os](https://docs.python.org/3/library/os.html) for file operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So let’s import them both:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 3: Set Up the Argument Parser'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recall that we’ll use command-line flags to add, list, and remove tasks. We
    can use both short and long options for each argument. For our app, let’s use
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-a` or `--add` to add tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-l` or `--list` to list all tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-r` or `--remove` to remove tasks using index'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here’s where we’ll use the argparse module to parse the arguments provided
    at the command line. We define the `create_parser()` function that does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializes an `ArgumentParser` object (let’s call it `parser`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds arguments for adding, listing, and removing tasks by calling the `add_argument()`
    method on the parser object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When adding arguments we add both the short and long options as well as the
    corresponding help message. So here’s the `create_parser()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 4: Add Task Management Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We now need to define functions to perform the following task management operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding a task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing all tasks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing a task by its index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following function `add_task` interacts with a simple text file to manage
    items on the TO-DO list. It opens the file in the ‘append’ mode and adds the task
    to the end of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice how we’ve used the `with` statement to manage the file. Doing so ensures
    that the file is closed after the operation—even if there’s an error—minimizing
    resource leaks.
  prefs: []
  type: TYPE_NORMAL
- en: To learn more, read the section on context managers for efficient resource handling
    in [this tutorial on writing efficient Python code](/how-to-write-efficient-python-code-a-tutorial-for-beginners).
  prefs: []
  type: TYPE_NORMAL
- en: 'The `list_tasks` function lists all the tasks by checking if the file exists.
    The file is created only when you add the first task. We first check if the file
    exists and then read and print out the tasks. If there are currently no tasks,
    we get a helpful message. :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'We also implement a `remove_task` function to remove tasks by index. Opening
    the file in the ‘write’ mode overwrites the existing file. So we remove the task
    corresponding to the index and write the updated TO-DO list to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 5: Parse Command-Line Arguments'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve set up the parser to parse command-line arguments. And we’ve also defined
    the functions to perform the tasks of adding, listing, and removing tasks. So
    what’s next?
  prefs: []
  type: TYPE_NORMAL
- en: You probably guessed it. We only need to call the correct function based on
    the command-line argument received. Let’s define a `main()` function to parse
    the command-line arguments using the `ArgumentParser` object we’ve created in
    step 3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on the provided arguments, call the appropriate task management functions.
    This can be done using a simple if-elif-else ladder like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 6: Run the App'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can now run the TO-DO list app from the command line. Use the short option
    `h` or the long option `help` to get information on the usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Initially, there are no tasks in the list, so using `--list` to list all tasks
    print out “No tasks found.”:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we add an item to the TO-DO list like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you list the items now,  you should be able to see the task added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we’ve added the first item the tasks.txt file has been created (Refer
    to the definition of the `list_tasks` function in step 4):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add another task to the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And another:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And now let’s get the list of all tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s remove a task by its index. Say we’re done with evening coffee (and
    hopefully for the day), so we remove it as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The modified TO-DO list is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Step 7: Test, Improve, and Repeat'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Okay, the simplest version of our app is ready. So how do we take this further?
    Here are a few things you can try:'
  prefs: []
  type: TYPE_NORMAL
- en: What happens when you use an invalid command-line option (say `-w` or `--wrong`)?
    The default behavior (if you recall from the if-elif-else ladder) is to print
    out the help message but there’ll be an exception, too. Try implementing error
    handling using try-except blocks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test your app by defining test cases that include edge cases. To start, you
    can use the built-in unittest module.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve the existing version by adding an option to specify the priority for
    each task. Also try to sort and retrieve tasks by priority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ▶️ [The code for this tutorial is on GitHub](https://github.com/balapriyac/python-projects/tree/main/command-line-app).
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we built a simple command-line TO-DO list app. In doing so,
    we learned how to use the built-in argparse module to parse command-line arguments.
    We also used the command-line inputs to perform corresponding operations on a
    simple text file under the hood.
  prefs: []
  type: TYPE_NORMAL
- en: So where do we go next? Well, Python libraries like [Typer](https://typer.tiangolo.com/)
    make building command-line apps a breeze. And we’ll build one using Typer in an
    upcoming Python tutorial. Until then, keep coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Machine Learning Web App in 5 Minutes](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Containerize Python Apps with Docker in 5 Easy Steps](https://www.kdnuggets.com/containerize-python-apps-with-docker-in-5-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Data Science Can Transform Mobile App Development?](https://www.kdnuggets.com/2023/03/data-science-transform-mobile-app-development.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a Machine Learning Web App with Heroku](https://www.kdnuggets.com/2022/04/deploy-machine-learning-web-app-heroku.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
