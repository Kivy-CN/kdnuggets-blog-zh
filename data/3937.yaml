- en: Data Structures Related to Machine Learning Algorithms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与机器学习算法相关的数据结构
- en: 原文：[https://www.kdnuggets.com/2018/01/data-structures-related-machine-learning-algorithms.html/2](https://www.kdnuggets.com/2018/01/data-structures-related-machine-learning-algorithms.html/2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/01/data-structures-related-machine-learning-algorithms.html/2](https://www.kdnuggets.com/2018/01/data-structures-related-machine-learning-algorithms.html/2)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/01/data-structures-related-machine-learning-algorithms.html?page=2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2018/01/data-structures-related-machine-learning-algorithms.html?page=2#comments)'
- en: '**Heap**'
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**堆**'
- en: 'A heap is another hierarchical, ordered data structure similar to a tree except
    instead of a horizontal ordering, it has a vertical ordering. This ordering applies
    along the hierarchy, but not across it: the parent is always larger than both
    its children, but a node of higher rank is not necessarily larger than a lower
    one that’s not directly beneath it.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 堆是另一种分层、有序的数据结构，类似于树，但与水平排序不同，它具有垂直排序。这种排序适用于层级结构，但不适用于跨层级：父节点总是比它的两个子节点都要大，但高等级的节点不一定比直接在其下方的低等级节点要大。
- en: '![](../Images/a8e8244886a065cc7cd6b56c0bb56db8.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a8e8244886a065cc7cd6b56c0bb56db8.png)'
- en: Both insertion and retrieval are performed by promotion. An element is first
    inserted in the highest available position. Then it is compared with its parent
    and promoted until it reaches the right rank. To take an element off the heap,
    the larger of the two children is promoted to the missing position, then the larger
    of those two children is promoted and so on until everything has trickled up the
    ranks.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 插入和检索都是通过提升来完成的。一个元素首先被插入到最高可用的位置。然后它与其父节点进行比较，并提升直到达到正确的等级。要从堆中取出一个元素，两个子节点中较大的一个被提升到缺失的位置，然后那两个子节点中较大的一个被提升，以此类推，直到所有元素都被提升到相应的等级。
- en: Typically, the highest ranking value at the top is pulled off the heap in order
    to sort a list. Unlike a tree, most heaps are simply stored in an array with the
    relationships between elements only implicit.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，最高等级的值会从堆的顶部取出以对列表进行排序。与树不同，大多数堆只是存储在一个数组中，元素之间的关系只是隐含的。
- en: '**Stack**'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**栈**'
- en: A stack is defined as “first in, last out.” An element is *pushed* onto the
    top of the stack where it covers the previous element. The top element must be *popped* off
    before any of the others can be accessed.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 栈的定义是“先进后出”。一个元素被*pushed*到栈的顶部，它会覆盖之前的元素。必须先*popped*顶部元素，才能访问其他元素。
- en: '*Stacks are mainly useful for parsing grammars and implementing computer languages.*'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*栈主要用于解析语法和实现计算机语言。*'
- en: There are many machine learning applications for which a domain specific language
    (DSL) is the perfect solution. For instance, the [libAGF library](https://github.com/peteysoft/libmsci) uses
    a **recursive control language** to generalize binary classification to multi-class.
    A special character is used to repeat a previous option, but because the language
    is recursive, the option must be taken from the same hierarchical level or higher.
    This is implemented by a stack.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多机器学习应用场景中，特定领域语言（DSL）是完美的解决方案。例如，[libAGF 库](https://github.com/peteysoft/libmsci)使用**递归控制语言**将二分类推广到多分类。使用特殊字符来重复先前的选项，但由于语言是递归的，该选项必须取自相同的层级或更高层级。这是通过栈来实现的。
- en: '**Queue**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**队列**'
- en: A queue is defined as “first in, first out.” Think of the line at the bank teller
    (for those of us still old enough to remember a time before internet banking).
    Queues are useful **in real time programming** so that the program can maintain
    a list of jobs to be processed.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 队列的定义是“先进先出”。想象一下银行柜台前的排队（对于那些还记得互联网银行之前的时代的人来说）。队列在**实时编程**中非常有用，这样程序可以保持一个待处理的任务列表。
- en: Consider an application to record split times of athletes. You type in the bib
    number and hit enter, except in the time it took you to do that the next athlete
    behind has also passed. So you type in a list of bib numbers of the nearest approaching
    athletes, then hit a separate key to register the next in the queue as having
    passed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 设想一个记录运动员分段时间的应用。你输入号码牌并按回车，但在你做这件事的时间里，下一个运动员已经通过了。所以你输入一系列最近接近的运动员的号码牌，然后按另一个键来注册下一个队列中的运动员已通过。
- en: '**Set**'
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**集合**'
- en: A set consists of an un-ordered list of non-repeating elements. If you add an
    element that’s already in the set, there will be no change. Since much of the
    mathematics of machine learning deals with sets, they are very useful data structures.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个集合由一个无序的、不重复的元素列表组成。如果你添加了一个已经在集合中的元素，则不会发生变化。由于机器学习中的许多数学运算涉及集合，因此它们是非常有用的数据结构。
- en: '**Associative arrays**'
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**关联数组**'
- en: 'In an associative array, there are two types of data which are stored in pairs:
    the *key* and its associated *value*. The data structure is relational in nature:
    the value is addressed by its key. Since much of the training data is also relational,
    this type of data structure would seem ideally suited to machine learning problems.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在关联数组中，有两种类型的数据以对的形式存储：*键*和其关联的*值*。数据结构本质上是关系型的：值由其键来访问。由于训练数据也通常是关系型的，这种数据结构似乎非常适合机器学习问题。
- en: In practice, it’s not used so much, in part because most associative arrays
    are only one-dimensional, whereas machine learning data is typically multi-dimensional.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，它的使用并不多，部分原因是大多数关联数组仅是单维的，而机器学习数据通常是多维的。
- en: '*Associative arrays are good for building dictionaries.*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*关联数组适合用于构建字典。*'
- en: Suppose you are building a DSL, want to store a list of functions and variables,
    and need to distinguish between the two.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在构建一个DSL，想要存储一个函数和变量的列表，并需要区分它们。
- en: “sin” → function
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “sin” → function
- en: “var” → variable
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “var” → variable
- en: “exp” → function
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “exp” → function
- en: “x” → variable
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “x” → variable
- en: “sqrt” → function
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “sqrt” → function
- en: “a” → variable
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “a” → variable
- en: Querying the array on “sqrt” would return, “function.”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在“sqrt”上查询会返回“function”。
- en: '**Custom data structures**'
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**自定义数据结构**'
- en: As you work on more problems, you are sure to encounter those for which the
    standard recipe box does not contain optimal structures. You will need to design
    your own data structure.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 随着你处理更多问题，你肯定会遇到那些标准食谱箱中没有最佳结构的情况。你需要设计自己的数据结构。
- en: 'Consider a multi-class classifier, which generalizes a binary classifier to
    work with classification problems having more than two classes. An obvious solution
    is bisection: recursively split the classes into two groups. You could use something
    similar to a binary tree to organize the binary classifiers, except that a hierarchical
    solution is not the only method of solving for multi-class.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个多类分类器，它将二元分类器推广到处理具有多个类别的分类问题。一种明显的解决方案是二分法：递归地将类别分成两组。你可以使用类似于二叉树的结构来组织二元分类器，但层次化解决方案并不是解决多类问题的唯一方法。
- en: '*Consider several partitions that are then used to solve for all the class
    probabilities simultaneously.*'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*考虑几个划分，然后用来同时解决所有类别概率。*'
- en: The most general solution would combine the two, thus each hierarchical partition
    need not be binary but could be solved by a non-hierarchical multi-class classifier.
    This is the approach taken in the *libAGF* library.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 最一般的解决方案是将两者结合起来，因此每个层次化的划分不一定是二元的，而可以通过非层次化的多类分类器来解决。这是*libAGF*库中采用的方法。
- en: More complex data structures can also be composed of the basic structures. Consider
    a sparse matrix class. In a sparse matrix, most of the elements are zero and only
    the non-zero elements are stored. We could store the position and value for each
    element as a triplet and have a list of them in an **extensible array**.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 更复杂的数据结构也可以由基本结构组成。考虑一个稀疏矩阵类。在稀疏矩阵中，大多数元素为零，仅存储非零元素。我们可以将每个元素的位置和值作为一个三元组存储，并将它们放在一个**可扩展数组**中。
- en: 'Consider the 3 by 3 identity:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑3乘3的单位矩阵：
- en: '![](../Images/a10fed70977baeb14c21b7a2fabd8b91.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a10fed70977baeb14c21b7a2fabd8b91.png)'
- en: '**Conclusions**'
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**结论**'
- en: Data structures are only occasionally interesting in their own right. What makes
    them truly interesting are the kinds of problems you can solve with them.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构本身有时并不那么有趣。真正让它们有趣的是你可以用它们解决的各种问题。
- en: For most of the work I do, I’m using a lot of basic fixed-length arrays. I mostly
    use more sophisticated data structures to make the programs a little smoother
    in how they run and interface with the outside world and a little more user friendly.
    Less like the Fortran programs of yore where you had to endure a compile cycle
    of close to half an hour just to change the grid sizes (I actually worked on a
    program like this!).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我做的大部分工作，我使用了许多基本的固定长度数组。我主要使用更复杂的数据结构使程序运行得更顺畅，与外界的接口更友好，用户体验也更佳。与过去的Fortran程序相比，后者在改变网格大小时需要忍受近半小时的编译周期（我实际上参与过这样的程序！）。
- en: Even if you can’t come up with an application off the top of your head I still
    I think it’s good to know about things like stacks and queues. You never know
    when one might come in handy.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你一时无法想到应用场景，我仍然认为了解像栈和队列这样的数据结构是有益的。你永远不知道它们何时会派上用场。
- en: Really sophisticated artificial intelligence applications might use things like
    directed and undirected graphs, which are really just generalizations of trees
    and linked lists. How are you going to build things like the former if you can’t
    cope with the latter?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很复杂的人工智能应用可能会使用诸如有向图和无向图的东西，这实际上只是树和链表的泛化。如果你无法处理链表，那你将如何构建前者？
- en: '**Problems**'
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**问题**'
- en: 'If you want to practice and realize data structures for ML algorithm yourself,
    try to solve some of problems below:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自己实践并实现机器学习算法的数据结构，可以尝试解决下面的一些问题：
- en: Encapsulate the matrix-vector multiplication code snippet into a subroutine
    called **matrix_times_vector**. Design the calling syntax for the subroutine.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将矩阵-向量乘法代码片段封装成一个名为**matrix_times_vector**的子程序。设计该子程序的调用语法。
- en: Using **struct, typedef** or **class**, encapsulate both vectors and matrices
    into a pair of abstract types called **vect** and **matrix**, respectively. Design
    an API for the types.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**struct, typedef**或**class**，将向量和矩阵封装成一对抽象类型，分别称为**vect**和**matrix**。为这些类型设计一个API。
- en: Find at least three libraries online that do the above.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在线找到至少三个做上述工作的库。
- en: Download and install the LIBSVM library. Consider the method **Kernel::k_function** on
    line 316 of “svm.cpp”. What are the advantages and disadvantages of the data structure
    used to hold vectors?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装LIBSVM库。考虑“svm.cpp”中第316行的**Kernel::k_function**方法。用于存储向量的数据结构的优缺点是什么？
- en: How would you re-factor calculation of kernel functions in the LIBSVM library?
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何重构LIBSVM库中的核函数计算？
- en: Which data structures described in the text are abstract types?
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文本中描述的哪些数据结构是抽象类型？
- en: What internal representation or data structure could you use to implement the
    abstract data types? Are there any that are not included in the list above?
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用什么内部表示或数据结构来实现抽象数据类型？有没有任何不在上面列表中的数据结构？
- en: Using a binary tree, design an associative array.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用二叉树设计一个关联数组。
- en: Consider the vector type in LIBSVM. How can this be used to represent a sparse
    matrix? Contrast this with the sparse matrix class described above. Look at [the
    complete type](https://github.com/peteysoft/libmsci/sparse/sparse.h). What are
    the advantages and disadvantages of each representation?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑LIBSVM中的向量类型。如何用它来表示稀疏矩阵？与上面描述的稀疏矩阵类相比，这有什么优缺点？查看[完整类型](https://github.com/peteysoft/libmsci/sparse/sparse.h)。每种表示方法的优缺点是什么？
- en: Implement a treesort and a heapsort. Now use the same data structures to find
    the top *k* elements. What common machine learning algorithm is this good for?
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现一个树排序和一个堆排序。现在使用相同的数据结构找出前*k*个元素。这对哪个常见的机器学习算法有用？
- en: Implement your favorite data structure in your favourite language.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你喜欢的编程语言中实现你最喜欢的数据结构。
- en: '**Bio: [Peter Mills](https://blog.statsbot.co/@peteymills)** is passionate
    about science, and is interested in atmospheric physics, chaos theory and machine
    learning.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [Peter Mills](https://blog.statsbot.co/@peteymills)** 对科学充满热情，感兴趣于大气物理学、混沌理论和机器学习。'
- en: '[Original](https://blog.statsbot.co/data-structures-related-to-machine-learning-algorithms-5edf77c8bbf4?utm_source=kdnuggets&utm_medium=post&utm_campaign=data-structs).
    Reposted with permission.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://blog.statsbot.co/data-structures-related-to-machine-learning-algorithms-5edf77c8bbf4?utm_source=kdnuggets&utm_medium=post&utm_campaign=data-structs)。经授权转载。'
- en: '**Related:**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[Top 10 Machine Learning Algorithms for Beginners](/2017/10/top-10-machine-learning-algorithms-beginners.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[初学者的前10种机器学习算法](/2017/10/top-10-machine-learning-algorithms-beginners.html)'
- en: '[How Much Mathematics Does an IT Engineer Need to Learn to Get Into Data Science?](/2017/12/mathematics-needed-learn-data-science-machine-learning.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[IT 工程师需要学习多少数学才能进入数据科学领域？](/2017/12/mathematics-needed-learn-data-science-machine-learning.html)'
- en: '[Data scientists mostly just do arithmetic and that’s a good thing](/2016/05/data-scientists-mostly-arithmetic-good-thing.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家主要只做算术，这其实是好事](/2016/05/data-scientists-mostly-arithmetic-good-thing.html)'
- en: '* * *'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的捷径'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT 工作'
- en: '* * *'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以找到目标，然后找到目标再学习数据科学](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计学的最佳资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的 5 个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应该知道的三个 R 语言库（即使你使用 Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个 90 亿美元的 AI 失败，经过分析](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让 Python 成为初创企业的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
