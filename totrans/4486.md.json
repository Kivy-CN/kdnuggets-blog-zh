["```py\npip install biopython\npip install Squiggle\n```", "```py\nimport numpy as np\nimport pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport os\n```", "```py\nfrom Bio import SeqIOfor sequence in SeqIO.parse('/coronavirus/MN908947.fna', \"fasta\"):\nprint(sequence.seq)\nprint(len(sequence),'nucliotides')\n```", "```py\nGCAATGGATACAACTAGCTACAGAGAAGCTGCTTGTTGTCATCTCGCAAAGGCTCTCAATGACTTCAGTAACTCAGGTTCTGATGTTCTTTACCAACCACCACAAACCTCTATCACCTCAGCTGTTTTGCAGAGTGGTTTTAGAAAAATGGCATTCCCATC......AGAATGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA29903 nucliotides\n```", "```py\nfrom Bio.SeqRecord import SeqRecord\nfrom Bio import SeqIO\nDNAsequence = SeqIO.read('/coronavirus/MN908947.fna', \"fasta\")\n```", "```py\nSeqRecord(seq=Seq('ATTAAAGGTTTATACCTTCCCAGGTAACAAACCAACCAACTTTCGATCTCTTGT...AAA', SingleLetterAlphabet()), id='MN908947.3', name='MN908947.3', description='MN908947.3 Severe acute respiratory syndrome coronavirus 2 isolate Wuhan-Hu-1, complete genome', dbxrefs=[])\n```", "```py\nDNA = DNAsequence.seq#Convert DNA into mRNA Sequence\nmRNA = DNA.transcribe() #Transcribe a DNA sequence into RNA.\nprint(mRNA)\nprint('Size : ',len(mRNA))\n```", "```py\nUAUUUUAGUGGAGCAAUGGAUACAACUAGCUACAGAGAAGCUGCUUGUUGUCAUCUCGCAAAGGCUCUCAAUGACUUCAGUAACUCAGGUUC...UAAUAGCUUCUUAGGAGAAUGACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nSize : 29903\n```", "```py\nAmino_Acid = mRNA.translate(table=1, cds=False)\nprint('Amino Acid', Amino_Acid)\nprint(\"Length of Protein:\",len(Amino_Acid))\nprint(\"Length of Original mRNA:\",len(mRNA))\n```", "```py\nAmino Acid :  IKGLYLPR*QTNQLSISCRSVL*TNFKICVAVTRLHA*CTHAV*LITNYCR*QDTSNSSIFCRLLTVSSVLQPIISTSRFRPGVTER*DGEPCPWFQRENTRPTQFACFTGSRRARTWLWRLRGGGLIRGTSTS*RWHLWLSRS*KRRFAST*TALCVHQTFGCSNCTSWSCYG...*SHIAIFNQCVTLGRT*KSHHIFTEATRSTIECTVNNARESCLYGRALMCKINFSSAIPM*F**LLRRMTKKKKKKKKKKLength of Protein :  9967 \nLength of Original mRNA :  29903\n```", "```py\nfrom Bio.Data import CodonTable\nprint(CodonTable.unambiguous_rna_by_name['Standard'])\n```", "```py\n#Identify all the Proteins (chains of amino acids)\nProteins = Amino_Acid.split('*') # * is translated stop codon\ndf = pd.DataFrame(Proteins)\ndf.describe()\nprint('Total proteins:', len(df))def conv(item):\n    return len(item)def to_str(item):\n    return str(item)df['sequence_str'] = df[0].apply(to_str)\ndf['length'] = df[0].apply(conv)\ndf.rename(columns={0: \"sequence\"}, inplace=True)\ndf.head()# Take only longer than 20\nfunctional_proteins = df.loc[df['length'] >= 20]\nprint('Total functional proteins:', len(functional_proteins))\nfunctional_proteins.describe()\n```", "```py\nfrom __future__ import division\npoi_list = []\nfrom Bio.SeqUtils import ProtParam\nfor record in Proteins[:]:\n    print(\"\\n\")\n    X = ProtParam.ProteinAnalysis(str(record))\n    POI = X.count_amino_acids()\n    poi_list.append(POI)\n    MW = X.molecular_weight()\n    MW_list.append(MW)\n    print(\"Protein of Interest = \", POI)\n    print(\"Amino acids percent =    \",str(X.get_amino_acids_percent()))\n    print(\"Molecular weight = \", MW_list)\n    print(\"Aromaticity = \", X.aromaticity())\n    print(\"Flexibility = \", X.flexibility())\n    print(\"Isoelectric point = \", X.isoelectric_point())\n    print(\"Secondary structure fraction = \",   X.secondary_structure_fraction())\n```", "```py\nMoW = pd.DataFrame(data = MW_list,columns = [\"Molecular Weights\"] )#plot POI\npoi_list = poi_list[48]\nplt.figure(figsize=(10,6));\nplt.bar(poi_list.keys(), list(poi_list.values()), align='center')\n```", "```py\n#Comparing Human Coronavirus RNA\nfrom Bio import pairwise2SARS = SeqIO.read(\"/coronavirus/sars.fasta\", \"fasta\")MERS = SeqIO.read(\"/coronavirus/mers.fasta\", \"fasta\")COV2 = SeqIO.read(\"/coronavirus/cov2.fasta\", \"fasta\")\n```", "```py\n#Execute on terminal\nSquiggle cov2.fasta sars.fasta mers.fasta --method=gates --separate\n```", "```py\n# Alignments using pairwise2 alghoritmSARS_COV = pairwise2.align.globalxx(SARS.seq, COV2.seq, one_alignment_only=True, score_only=True)print('SARS/COV Similarity (%):', SARS_COV / len(SARS.seq) * 100)MERS_COV = pairwise2.align.globalxx(MERS.seq, COV2.seq, one_alignment_only=True, score_only=True)print('MERS/COV Similarity (%):', MERS_COV / len(MERS.seq) * 100)MERS_SARS = pairwise2.align.globalxx(MERS.seq, SARS.seq, one_alignment_only=True, score_only=True)print('MERS/SARS Similarity (%):', MERS_SARS / len(SARS.seq) * 100)\n```", "```py\n# Plot the data\nX = ['SARS/COV2', 'MERS/COV2', 'MERS/SARS']\nY = [SARS_COV/ len(SARS.seq) * 100, MERS_COV/ len(MERS.seq)*100, MERS_SARS/len(SARS.seq)*100]\nplt.title('Sequence identity (%)')\nplt.bar(X,Y)\n```"]