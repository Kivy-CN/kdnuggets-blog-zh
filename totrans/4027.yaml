- en: 'Python Enum: How To Build Enumerations in Python'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/python-enum-how-to-build-enumerations-in-python](https://www.kdnuggets.com/python-enum-how-to-build-enumerations-in-python)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python Enum: How To Build Enumerations in Python](../Images/3e65f6a3b6634eddfaab25f2aaf94ca5.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: If you’ve programmed in a language like C++ or Java, you’ve likely used enums
    to create named constants. Enums are helpful when you have a variable that takes
    one of a fixed number of values—often related such as the days of the week, student
    grades, order status, and the like.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Python, however, does not have an explicit enum data type. But you can use the
    enum module in the Python standard library to create enumerations. And this tutorial
    will teach you how.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started!
  prefs: []
  type: TYPE_NORMAL
- en: What Are Enums, And Why Should You Use Them?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enum stands for “enumeration” and consists of a set of predefined named constants.
    These constants are often related. Common examples include months in a year, days
    of the week, grades, order and task statuses.
  prefs: []
  type: TYPE_NORMAL
- en: 'To sum up: An enum is essentially a collection of related constants, where
    each constant has a meaningful name associated with it.'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can create enums using the [enum module](https://docs.python.org/3/library/enum.html)
    (which we’ll do shortly!).
  prefs: []
  type: TYPE_NORMAL
- en: Why Use Enums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using enums helps improve code clarity and maintainability. Here''s'' how:'
  prefs: []
  type: TYPE_NORMAL
- en: Enums enhance code clarity by replacing magic numbers or strings with meaningful
    labels. They also make the code more self-documenting as the names of enum members
    convey their purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enums improve code maintainability by providing a simple way to define and manage
    related constants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By restricting variable assignments to only valid enum values, enums also ensure
    type safety.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enums facilitate easy iteration over and comparison of related constants.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now let’s create our first enumeration in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Enums Using Python’s Enum Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We’ll create a `TaskStatus` enum that takes the following four names and values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Enum: How To Build Enumerations in Python](../Images/5112ef4e5b244d82b0a35453f1b423d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: First, we import the `Enum` class from the enum module to create enums.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then define a new class `TaskStatus` that inherits from `Enum` to create
    an enumeration. Each member is defined with a unique name and an optional value
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'All enum members we create are instances of the Enum class. You may verify
    it by calling the `isinstance()` function as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s print out all the members in the `TaskStatus` enum by casting it into
    a list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: All enum members have a **name** and a **value**. Meaning you can access enum
    members using their names, like `TaskStatus.TODO`. Or you access them by value,
    like `TaskStatus(0)`.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Python Enums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve created a simple `TaskStatus` enum, let's learn how to perform
    simple tasks such as iterating over the enum members.
  prefs: []
  type: TYPE_NORMAL
- en: Iterating Over Enums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Python, you can work with enums pretty much the same way you work with any
    iterable. For example, you can use the `len()` function to count the number of
    enum members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also iterate over enums just the way you would over a Python iterable
    such as list. In the following for loop, we access both the name and value of
    each enum member and print them out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Ordering in Enums
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the example, the status and the corresponding numeric value are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'TODO: 0'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IN_PROGRESS: 1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DONE: 2'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ABANDONED: -1'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But you can also use the default ordering by using the `auto()` helper function.
    When you do so, if you have ‘n’ members in the enum, the values assigned are 1
    through n. But you can pass in a start value, say k, `auto(k)` for the enumeration
    to start at k and go up to k + n.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s modify the `TaskStatus` enum as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let’s print out the members:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We see that the values are 1 to 4 as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Building on the TaskStatus Enum – A More Helpful Example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s build on the `TaskStatus` enum that we have. Create a task.py file
    in your working directory with the following version of the enum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Say we have a task with a name and a current status. And the valid transitions
    between states are as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python Enum: How To Build Enumerations in Python](../Images/0a6c001697289295fc82d0f80e750f30.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a `Task` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We have an `update_status()` method that checks if the transition to the new
    state is valid given the current status. For invalid transitions, a ValueError
    exception  is raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s an Instance of the `Task` class: the “Write Report” task with status
    TODO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Updating the status of the task to IN_PROGRESS should work as it’s a valid
    state transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'And once the task is complete, we can update its status to DONE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'But if you try to update the status to an invalid one, such as trying to update
    DONE to TODO, you’ll run into ValueError exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the traceback of the ValueError raised because of invalid state transition
    from DONE to TODO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this tutorial, we learned how to build enumerations in Python by coding a
    simple TaskStatus enum. We learned how to access enum members and iterate over
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Also, we learned how default ordering works if you choose to use the `auto()`
    helper function to set the values for enum members. We then tried using the TaskStatus
    enum in a more helpful example.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the [code examples on GitHub](https://github.com/balapriyac/python-basics/tree/main/enums).
    I’ll see you all soon in another Python tutorial. Until then, happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Build a Web Scraper with Python in 5 Minutes](https://www.kdnuggets.com/2022/02/build-web-scraper-python-5-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[It''s alive! Build your first robots with Python and some cheap,…](https://www.kdnuggets.com/2023/06/manning-build-first-robots-python-cheap-basic-components.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[FastAPI Tutorial: Build APIs with Python in Minutes](https://www.kdnuggets.com/fastapi-tutorial-build-apis-with-python-in-minutes)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Text-to-Speech Converter with Python in 5 Minutes](https://www.kdnuggets.com/2022/09/build-texttospeech-converter-python-5-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Command-Line App with Python in 7 Easy Steps](https://www.kdnuggets.com/build-a-command-line-app-with-python-in-7-easy-steps)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
