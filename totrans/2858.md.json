["```py\ndef add_difference(asimov_dataset):\n    asimov_dataset['total_naughty_robots_previous_day'] =        \n        asimov_dataset['total_naughty_robots'].shift(1)\n\n    asimov_dataset['change_in_naughty_robots'] =    \n        abs(asimov_dataset['total_naughty_robots_previous_day'] -\n            asimov_dataset['total_naughty_robots'])\n\n    return asimov_dataset[['total_naughty_robots', 'change_in_naughty_robots', \n        'robot_takeover_type']]\n```", "```py\nimport pandas as pd\nfrom pandas.testing import assert_frame_equal\nimport numpy as np\nfrom unittest import TestCase\n\ndef test_change():\n    asimov_dataset_input = pd.DataFrame({\n        'total_naughty_robots': [1, 4, 5, 3],\n        'robot_takeover_type': ['A', 'B', np.nan, 'A']\n    })\n\n    expected = pd.DataFrame({\n        'total_naughty_robots': [1, 4, 5, 3],\n        'change_in_naughty_robots': [np.nan, 3, 1, 2],\n        'robot_takeover_type': ['A', 'B', np.nan, 'A']\n    })\n\n    result = add_difference(asimov_dataset_input)\n\n    assert_frame_equal(expected, result)\n```", "```py\ndef remove_nan_size(asimov_dataset):\n    return asimov_dataset.dropna(subset=['robot_takeover_type'])\n\ndef clean_data(asimov_dataset):\n    asimov_dataset_with_difference = add_difference(asimov_dataset)\n    asimov_dataset_without_na = remove_nan_size(asimov_dataset_with_difference)\n\n    return asimov_dataset_without_na\n```", "```py\ndef test_cleanup():\n    asimov_dataset_input = pd.DataFrame({\n        'total_naughty_robots': [1, 4, 5, 3],\n        'robot_takeover_type': ['A', 'B', np.nan, 'A']\n    })\n\n    expected = pd.DataFrame({\n        'total_naughty_robots': [1, 4, 3],\n        'change_in_naughty_robots': [np.nan, 3, 2],\n        'robot_takeover_type': ['A', 'B', 'A']\n    }).reset_index(drop=True)\n\n    result = clean_data(asimov_dataset_input).reset_index(drop=True)\n\n    assert_frame_equal(expected, result)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\n\ndef get_reression_training_score(asimov_dataset, seed=9787):\n    clean_set = clean_data(asimov_dataset).dropna()\n\n    input_features = clean_set[['total_naughty_robots', \n        'change_in_naughty_robots']]\n    labels = clean_set['robot_takeover_type']\n\n    model = LogisticRegression(random_state=seed).fit(input_features, labels)\n    return model.score(input_features, labels) * 100\n```", "```py\nfrom numpy.testing import assert_equal\n\ndef test_regression_score():\n    asimov_dataset_input = pd.DataFrame({\n        'total_naughty_robots': [1, 4, 5, 3, 6, 5],\n        'robot_takeover_type': ['A', 'B', np.nan, 'A', 'D', 'D']\n    })\n\n    result = get_reression_training_score(asimov_dataset_input, seed=1234)\n    expected = 40.0\n\n    assert_equal(result, 50.0)\n```"]