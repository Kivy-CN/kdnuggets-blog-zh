["```py\nSELECT FirstName,\n       LastName, \n       City, \n       State\nFROM Person p LEFT JOIN Address a\nON p.PersonId = a.PersonId\nORDER BY LastName ASC; \n```", "```py\nSELECT name \nFROM customer \nWHERE referee_id IS NULL OR referee_id <> 2; \n```", "```py\nSELECT *,\n       COALESCE(host_response_rate, '0%') AS edited_host_response_rate\nFROM airbnb_search_details; \n```", "```py\nSELECT business_name,\n       review_id,\n       user_id,\n       CAST(stars AS INTEGER) AS cast_stars,\n       review_date,\n       review_text,\n       funny,\n       useful,\n       cool\nFROM yelp_reviews\nWHERE stars  '?'; \n```", "```py\nSELECT u.name, \n       SUM(t.amount) AS balance\nFROM Users u\nJOIN Transactions t\nON u.account = t.account\nGROUP BY u.name\nHAVING SUM(t.amount) > 10000; \n```", "```py\nSELECT EXTRACT(YEAR FROM inspection_date) AS year_of_violation,\n       COUNT(*) AS n_violations\nFROM sf_restaurant_health_violations\nWHERE business_name = 'Roxanne Cafe' AND violation_id IS NOT NULL\nGROUP BY year_of_violation\nORDER BY year_of_violation ASC; \n```", "```py\nSELECT TO_CHAR(started_at, 'YYYY-MM'),\n       COUNT(*) AS n_registrations\nFROM noom_signups\nGROUP BY 1; \n```", "```py\nSELECT tweet_id \nFROM Tweets \nWHERE LENGTH(content) > 15; \n```", "```py\nSELECT host_id, \n       SUM(n_beds) AS number_of_beds,\n       DENSE_RANK() OVER(ORDER BY SUM(n_beds) DESC) AS rank\nFROM airbnb_apartments\nGROUP BY host_id\nORDER BY number_of_beds DESC; \n```", "```py\nSELECT DISTINCT user_id,\n       FIRST_VALUE(time_stamp) OVER (PARTITION BY user_id ORDER BY time_stamp DESC) AS last_stamp\nFROM Logins\nWHERE EXTRACT(YEAR FROM time_stamp) = 2020; \n```", "```py\nSELECT product_id, \n       year AS first_year, \n       quantity, \n       price \nFROM Sales \nWHERE (product_id, year) IN (\n    SELECT product_id, \n           MIN(year) AS year \n    FROM Sales \n    GROUP BY product_id\n); \n```", "```py\nWITH first_year_sales AS (\n    SELECT product_id, \n           MIN(year) AS first_year \n    FROM Sales \n    GROUP BY product_id\n)\n\nSELECT s.product_id, \n       s.year AS first_year, \n       s.quantity, \n       s.price \nFROM Sales s\nJOIN first_year_sales AS fys \nON s.product_id = fys.product_id AND s.year = fys.first_year; \n```", "```py\nSELECT sale_month,\n       description,\n       total_paid\nFROM\n  (SELECT DATE_PART('MONTH', invoicedate) AS sale_month,\n          description,\n          SUM(unitprice * quantity) AS total_paid,\n          RANK() OVER (PARTITION BY DATE_PART('MONTH', invoicedate) ORDER BY SUM(unitprice * quantity) DESC) AS sale_rank\n   FROM online_retail\n   GROUP BY sale_month,\n            description) AS ranking_sales\nWHERE sale_rank = 1; \n```", "```py\nSELECT t.month,\n       AVG(t.monthly_revenue) OVER(ORDER BY t.month ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS avg_revenue\nFROM\n  (SELECT TO_CHAR(created_at::DATE, 'YYYY-MM') AS month,\n          SUM(purchase_amt) AS monthly_revenue\n   FROM amazon_purchases\n   WHERE purchase_amt>0\n   GROUP BY 1\n   ORDER BY 1) AS t\nORDER BY t.month ASC; \n```"]