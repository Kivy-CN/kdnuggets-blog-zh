- en: A Gentle Guide to Starting Your NLP Project with AllenNLP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/07/gentle-guide-starting-nlp-project-allennlp.html](https://www.kdnuggets.com/2019/07/gentle-guide-starting-nlp-project-allennlp.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: '**By [Yasufumi Taniguchi](https://medium.com/@yasufumy), NLP Engineer**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ac5c93e8b81fcd6076cb2ecba7051cec.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: Photo by [Jamie Templeton](https://unsplash.com/@jamietempleton?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/search/photos/sign?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Do you happen to know the library, [AllenNLP](https://allennlp.org/)? If you’re
    working on Natural Language Processing (NLP), you might hear about the name. However,
    I guess a few people actually use it. Or the other has tried before but hasn’t
    know where to start because there are lots of functions. For those who aren’t
    familiar with AllenNLP, I will give a brief overview of the library and let you
    know the advantages of integrating it to your project.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: AllenNLP is the deep learning library for NLP. [Allen Institute for Artificial
    Intelligence](https://allenai.org/), which is one of the leading research organizations
    of Artificial Intelligence, develops this [PyTorch](https://pytorch.org/)-based
    library. Using AllenNLP to develop a model is much easier than building a model
    by PyTorch from scratch. Not only it provides easier development but also supports
    the management of the experiments and its evaluation after development. **AllenNLP
    has the feature to focus on research development**. More specifically, it’s possible
    to **prototype the model quickly** and makes **easier to manage the experiments**
    with a lot of different parameters. Also, it has consideration using readable
    variable names.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: We might have the experience to get messy codes or lost our important experimental
    result by coding from scratch.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/6a4ee2d5554ad55625ea5cc4d5aa35f5.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
- en: When I’ve got to know AllenNLP
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: In AllenNLP, we should follow the development and experiment flow below.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b2fb341b91c0b31e85006a7433a1a6e2.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
- en: Comparison between the typical process and the process with AllenNLP
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: According to your own research project, you only need to implement DatasetReader
    and Model, and then run your various experiments with config files. Basically,
    we need to understand three features below to start our project with AllenNLP
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Define Your DatasetReader
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define Your Model
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setup Your Config Files
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In other words, once you get to understand it, you are able to do scalable
    development. In this post, I’ll explain the three key features above with tackling
    a sentiment analysis task. Also, you can check the code using in the post as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[**yasufumy/allennlp_imdb**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '*The Simplest AllenNLP recipe. Contribute to yasufumy/allennlp_imdb development
    by creating an account on GitHub.*](https://github.com/yasufumy/allennlp_imdb)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: Let’s get started!
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '0\. Quick Recap: Sentiment Analysis'
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here I’ll explain the basis of sentiment analysis task for those who aren’t
    familiar with it. So if you’ve already known it well, please proceed the next
    section: 1\. Define DatasetReader.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Sentiment analysis is a task that tries to classify the polarity (positive
    or negative) of a given document. In this post, we use the movie reviews in [IMDB](https://www.imdb.com/)as
    given documents. For example, we’re going to find the positive and the negative
    reviews in [Avengers: Endgame’s User Reviews](https://www.imdb.com/title/tt4154796/reviews?ref_=tt_urv).
    In this time, we’ll use the dataset provided in the link below.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[**Sentiment Analysis**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '*This is a dataset for binary sentiment classification containing substantially
    more data than previous benchmark…*](https://ai.stanford.edu/~amaas/data/sentiment/)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to build the model takes the documents (the reviews) as input and
    predicts the label (the polarity) as output. We should prepare the pair of the
    document and the label as the dataset.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Define Your DatasetReader
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The figure below shows the DatasetReader class in AllenNLP. This class mainly
    handles the data using in the task.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/126ceac691f78d245ab5374720536624.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: The DatasetReader takes raw dataset as input and applies the preprocessing like
    lowercasing, tokenization and so on. Finally, it outputs the list of the Instance
    object which holds preprocessed each data as attributes. In this post, the Instance
    object has the document and the label information as attributes.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: First, we should inherit the DatasetReader class to make our own. Then we need
    to implement the three methods: `__init__` ,`_read`and`text_to_instance`. So let’s
    look at the way how to implement our own DatasetReader. I’ll skip the implementation
    of the `read` method because it doesn’t relate to the usage of AllenNLP so much.
    But if you’re interested in it, you can refer to [this link](https://github.com/yasufumy/allennlp_imdb/blob/master/allennlp_imdb/data/dataset_readers/imdb.py#L38) though.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: The implementation `__init__` will be as follows. We can control the arguments
    of this method via config files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this post, I set `token_indexers` and `tokenizer` as the arguments because
    I assume that we change the way of indexing or tokenization in the experiments.
    The `token_indexers` performs indexing and the `tokenizer`performs tokenization.
    The class I implemented has the [decorator](https://docs.python.org/3/glossary.html#term-decorator)(`DatasetReader.register('imdb')`)
    which enables us to control it by config files.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The implementation `text_to_instance` will be as follows. This method is the
    main process of DatasetReader. The `text_to_instance` takes each raw data as input,
    applies some preprocessing and output each raw data as a `Instance`. In IMDB,
    it takes the review string and the polarity label as input.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`text_to_instance`将如下所示。该方法是DatasetReader的主要过程。`text_to_instance`接受每个原始数据作为输入，进行一些预处理，并将每个原始数据输出为`Instance`。在IMDB中，它接受评论字符串和极性标签作为输入。
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In AllenNLP, the Instance’s attributes correspond to the Field. We can create
    the Instance from the dictionary of the Fields. The Instance’s attributes stand
    each data like a document or a label. In IMDB, the Instance hash two attributes:
    the review and the label. The review and the label correspond to the TextField
    and the LabelField respectively.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在AllenNLP中，Instance的属性对应于Field。我们可以从Fields的字典中创建Instance。Instance的属性代表每个数据，如文档或标签。在IMDB中，Instance有两个属性：评论和标签。评论和标签分别对应于TextField和LabelField。
- en: The mentioned above is the way to define our DatasetReader. You can refer to
    the whole code from [this link](https://github.com/yasufumy/allennlp_imdb/blob/master/allennlp_imdb/data/dataset_readers/imdb.py#L22).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述提到的是定义我们DatasetReader的方式。您可以通过[这个链接](https://github.com/yasufumy/allennlp_imdb/blob/master/allennlp_imdb/data/dataset_readers/imdb.py#L22)查看完整代码。
- en: 2\. Define Your Model
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 定义你的模型
- en: The figure below shows the Model class in AllenNLP. This class mainly builds
    the model to solve the task.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了AllenNLP中的Model类。这个类主要构建解决任务的模型。
- en: '![](../Images/1f2a255cb5e5a614eac16ef55823f6e8.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f2a255cb5e5a614eac16ef55823f6e8.png)'
- en: The Model takes the data as input and outputs the results of the forward computation
    and the evaluation metrics as the dictionary.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 模型接受数据作为输入，并输出前向计算的结果和评估指标作为字典。
- en: First, we should inherit the Model class to make our own. Then we need to implement
    the three methods: `__init__` ,`forward` and`get_metrics`. Here we implement the
    polarity classification model for IMDB’s reviews with Recurrent Neural Network
    (RNN).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该继承Model类以创建自己的类。然后我们需要实现三个方法：`__init__`、`forward`和`get_metrics`。在这里，我们实现了一个用于IMDB评论的极性分类模型，采用了递归神经网络（RNN）。
- en: The implementation `__init__` will be as follows. We can control the arguments
    of this method via config files the same as the DatasetReader.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`__init__`将如下所示。我们可以通过配置文件控制该方法的参数，与DatasetReader相同。
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this post, I set `text_field_embedder` and `seq2vec_encoder` as the arguments
    because I assume that we change the way of embedding or RNN types in the experiments.
    The `text_field_embedder` embeds the token as the vector and the `seq2vec_encoder`
    encodes the sequence of the tokens with RNN (Technically you can use other types
    except for RNN). The class I implemented has the decorator (`Model.register('rnn_classifier')`)
    which enables us to control it by config files.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我设置了`text_field_embedder`和`seq2vec_encoder`作为参数，因为我假设我们在实验中会更改嵌入方式或RNN类型。`text_field_embedder`将标记嵌入为向量，而`seq2vec_encoder`使用RNN对标记序列进行编码（技术上你可以使用除RNN之外的其他类型）。我实现的类具有装饰器（`Model.register('rnn_classifier')`），这使我们能够通过配置文件来控制它。
- en: The implementation of `forward` will be as follows. This method is the main
    process of Model. The `forward` takes the data as input, calculate by the forward
    computation, and outputs the results of predicted labels and the evaluation metrics
    as the dictionary. Most implementation is the same as the way of PyTorch. However,
    please note that we should return results as the dictionary.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`forward`的实现将如下所示。该方法是模型的主要过程。`forward`接受数据作为输入，通过前向计算进行计算，并将预测标签和评估指标的结果输出为字典。大部分实现方式与PyTorch相同。然而，请注意，我们应将结果返回为字典。'
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This implementation above computes the classification probabilities for polarity,
    the cross-entropy loss, and the accuracy. We compute the classification probabilities
    from the output of RNN through softmax. Also, we compute the model’s classification
    accuracy if the label is given. Finally, it outputs each computational result
    as the dictionary (`output_dict`).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述实现计算了极性分类的概率、交叉熵损失和准确率。我们通过softmax从RNN的输出中计算分类概率。如果给定标签，我们还计算模型的分类准确率。最后，它将每个计算结果输出为字典（`output_dict`）。
- en: The implementation `get_metrics` will be as follows.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`get_metrics`将如下所示。
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It returns the value of the accuracy as the dictionary. This is because we use
    the model’s accuracy as the metric in this time. We can use multiple values in
    the `get_metrics` method.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: The mentioned above is the way to define our Model. You can refer to the whole
    code from [this link](https://github.com/yasufumy/allennlp_imdb/blob/master/allennlp_imdb/model/rnn_classifier.py).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Setup Your Config Files
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The figure below shows the way how to run our experiments in AllenNLP. We can
    run our experiments by passing our config files to the `allennlp train`command.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/caa82e60e76dd46434d9d5264645a2a8.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
- en: I’ll explain the way how to make our config files to control our experiments.
    We can make config files with the GUI interface via the command below. But I’ll
    explain from scratch for better understanding.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The config file mainly consists of the `dataset_reader` field, the `model` field,
    and the `trainer` field.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `dataset_reader` field and the `model` field specify the settings of the
    DatasetReader and the Model we implemented so far respectively. Also, the `trainer`
    field specifies the settings for optimizers, the number of epochs, and devices
    (CPU/GPU). You can refer to the whole config files from [this link](https://github.com/yasufumy/allennlp_imdb/blob/master/training_config/base_cpu.jsonnet).
    Next, I’ll explain the important parts of these three fields each.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: The settings for DatasetReader will be as follows.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: First, we specify which DatasetReader we use in `type`. We can use our ImdbDatasetReader
    to set `type` as `imdb` because it’s ready to use by `@DatasetReader.register('imdb')`.
    AllenNLP provides a lot of popular datasets already. You can check these from [the
    document](https://allenai.github.io/allennlp-docs/api/allennlp.data.dataset_readers.html).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Then, we specify the arguments for the `ImdbDatasetReader.__init__` method.
    We use `[SingleIdTokenIndexer](https://github.com/allenai/allennlp/blob/master/allennlp/data/token_indexers/single_id_token_indexer.py#L12)`
    for `token_indexers` because we want the token to correspond to the single id.
    Also, we use `[WordTokenizer](https://github.com/allenai/allennlp/blob/master/allennlp/data/tokenizers/word_tokenizer.py#L12)`
    for `tokenizer` because we want the token to be the one word.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: The settings for Model will be as follows.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: First, we specify which Model we use in `type` the same as DatasetReader. We
    can use our RnnClassifier to set `type` as `rnn_classifier` because it’s ready
    to use by `@Model.register('rnn_classifier')`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Then, we specify the arguments for the `RnnClassifier.__init__` method. We use `[Embedding](https://allenai.github.io/allennlp-docs/api/allennlp.modules.token_embedders.html#embedding)` for `text_field_embedder` because
    we want to embed the word as the vector. Also, we use `[GRU](https://allenai.github.io/allennlp-docs/api/allennlp.modules.seq2vec_encoders.html)` for `seq2vec_encoder` because
    we want to encode the sequence of embedded words via GRU.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The settings for Trainer will be as follows.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `num_epochs` specifies the number of epochs to train. The `optimizer`specifies
    the optimizer to update the parameters, in this case, we choose to use `adam`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: The mentioned above is the way to set up your config file.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run the experiment by executing the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need to make our new config file when we want to change the experimental
    setting. But we can change the setting by the following command though if the
    changes are a few. The command below updates GRU to LSTM.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That’s all for the explanation. Thank you for reading my post. I hope you understand
    the way how to build your data loader and model and manage your experiments in
    AllenNLP.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to [BrambleXu](https://medium.com/@bramblexu?source=post_page).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Yasufumi Taniguchi](https://medium.com/@yasufumy)** is an NLP Engineer
    at a Japanese company. His interest lies in question answering, information retrieval,
    and open-source development.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/allennlp-startup-guide-24ffd773cd5b).
    Reposted with permission.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[NLP vs. NLU: from Understanding a Language to Its Processing](/2019/07/nlp-vs-nlu-understanding-language-processing.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Practical Speech Recognition with Python: The Basics](/2019/07/practical-speech-recognition-python-basics.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Examining the Transformer Architecture – Part 2: A Brief Description of How
    Transformers Work](/2019/07/transformer-architecture-part-2.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to Natural Language Processing](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to Support Vector Machines](https://www.kdnuggets.com/2023/07/gentle-introduction-support-vector-machines.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Ultimate Guide To Different Word Embedding Techniques In NLP](https://www.kdnuggets.com/2021/11/guide-word-embedding-techniques-nlp.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NLP, NLU, and NLG: What’s The Difference? A Comprehensive Guide](https://www.kdnuggets.com/2022/06/nlp-nlu-nlg-difference-comprehensive-guide.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Structure a Data Science Project: A Step-by-Step Guide](https://www.kdnuggets.com/2022/05/structure-data-science-project-stepbystep-guide.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Guide to Data Science Project Management Methodologies](https://www.kdnuggets.com/2023/07/guide-data-science-project-management-methodologies.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
