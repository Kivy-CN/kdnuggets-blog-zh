- en: Why You Should Not Overuse List Comprehensions in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你不应该过度使用 Python 列表推导式
- en: 原文：[https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)
- en: '![Your KDnuggets Post - Why You Should Not Overuse List Comprehensions in Python](../Images/5a6da7b859053098d6de4393508555c8.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![你的 KDnuggets 文章 - 为什么你不应该过度使用 Python 列表推导式](../Images/5a6da7b859053098d6de4393508555c8.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: In Python, list comprehensions provide a concise syntax to create new lists
    from existing lists and other iterables. However, once you get used to list comprehensions
    you may be tempted to use them even when you shouldn't.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，列表推导式提供了一种简洁的语法来从现有列表和其他可迭代对象中创建新列表。然而，一旦你习惯了列表推导式，你可能会被诱惑在不应该使用它们的情况下也使用它们。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Remember, your goal is to write simple and maintainable code; not complex code.
    It’s often helpful to revisit the [Zen of Python](https://peps.python.org/pep-0020/),
    a set of aphorisms for writing clean and elegant Python, especially the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你的目标是编写简单且易于维护的代码，而不是复杂的代码。通常，回顾一下[Python 之禅](https://peps.python.org/pep-0020/)，即一组编写干净且优雅
    Python 的箴言，会很有帮助，特别是以下几点：
- en: Beautiful is better than ugly.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优美胜于丑陋。
- en: Simple is better than complex.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单优于复杂。
- en: Readability counts.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可读性很重要。
- en: In this tutorial, we’ll code three examples—each more complex than the previous
    one—where list comprehensions make the code super difficult to maintain. We’ll
    then try to write a more maintainable version of the same.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将编写三个例子——每个例子都比前一个更复杂——其中列表推导式使代码变得非常难以维护。然后我们将尝试编写一个更易于维护的版本。
- en: So let’s start coding!
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始编码吧！
- en: 'Python List Comprehensions: A Quick Review'
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 列表推导式：快速回顾
- en: 'Let''s start by reviewing list comprehensions in Python. Suppose you have an
    existing iterable such as a list or a string. And you’d like to create a new list
    from it. You can loop through the iterable, process each item, and append the
    output to a new list like so:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从回顾 Python 中的列表推导式开始。假设你有一个现有的可迭代对象，如列表或字符串。你可以遍历该可迭代对象，处理每个项，并将结果附加到新列表中：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'But less comprehensions provide a concise one-line alternative to do the same:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 但列表推导式提供了一种简洁的一行替代方案来完成相同的任务：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In addition, you can also add filtering conditions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以添加过滤条件。
- en: 'The following snippet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Can be replaced by this list comprehension:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以用此列表推导式替代：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So list comprehensions help you write Pythonic code—often make your code cleaner
    by reducing visual noise.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 所以列表推导式帮助你编写 Pythonic 代码——通过减少视觉噪声，使代码更清晰。
- en: Now let's take three examples to understand why you shouldn't be using list
    comprehensions for tasks that require super complex expressions. Because in such
    cases, list comprehensions—instead of making your code elegant—make your code
    difficult to read and maintain.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过三个例子来理解为什么你不应该在需要超复杂表达式的任务中使用列表推导式。因为在这种情况下，列表推导式不仅不会使你的代码优雅，反而会使代码难以阅读和维护。
- en: 'Example 1: Generating Prime Numbers'
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 1：生成质数
- en: '**Problem**: Given a number `upper_limit`, generate a list of all the prime
    numbers up to that number.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：给定一个数字`upper_limit`，生成一个所有质数的列表直到该数字。'
- en: 'You can break down this problem into two key ideas:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这个问题拆解成两个关键概念：
- en: Checking if a number is prime
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查一个数字是否为质数
- en: Populating a list with all the prime numbers
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用所有质数填充列表
- en: 'The list comprehension expression to do this is as shown:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此任务的列表推导式如下所示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And here’s the output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是输出结果：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: At first glance, it is difficult to see what is going on…Let’s make it better.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，很难理解发生了什么……让我们把它做得更好。
- en: Perhaps, better?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 也许，更好？
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Easier to read, certainly. Now let’s write a *truly* better version.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 确实更容易阅读。现在让我们编写一个*真正*更好的版本。
- en: A Better Version
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更好的版本
- en: Though a list comprehension is actually a good idea to solve this problem, the
    logic to check for primes in the list comprehension is making it noisy.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然列表推导实际上是解决这个问题的一个好主意，但在列表推导中检查质数的逻辑使其显得冗杂。
- en: 'So let''s write a more maintainable version that moves the logic for checking
    if a number is prime to a separate function `is_prime()`. And call the function
    `is_prime()` in the comprehension expression:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们编写一个更易于维护的版本，将检查一个数字是否是质数的逻辑移到一个单独的函数 `is_prime()` 中。在列表推导表达式中调用 `is_prime()`
    函数：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Is the better version good enough?** This makes the comprehension expression
    much easier to understand. It''s now clear that the expression collects all numbers
    up to `upper_limit` that are prime (where `is_prime()` returns True).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好的版本是否足够好？** 这使得列表推导表达式更容易理解。现在很清楚，这个表达式收集了所有小于 `upper_limit` 的质数（其中 `is_prime()`
    返回 True）。'
- en: 'Example 2: Working with Matrices'
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 2：处理矩阵
- en: '**Problem**: Given a matrix, find the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：给定一个矩阵，找到以下内容：'
- en: All the prime numbers
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有的质数
- en: The indices of the prime numbers
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质数的索引
- en: Sum of the primes
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质数之和
- en: Prime numbers sorted in descending order
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按降序排列的质数
- en: '![Your KDnuggets Post - Why You Should Not Overuse List Comprehensions in Python](../Images/66942d59b73e757393b55ffbce7f7163.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![您的 KDnuggets 文章 - 为什么你不应该过度使用 Python 中的列表推导](../Images/66942d59b73e757393b55ffbce7f7163.png)'
- en: Image by Author
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: To flatten the matrix and collect the list of all prime numbers, we can  use
    a logic similar to the previous example.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展平矩阵并收集所有质数的列表，我们可以使用类似于前一个示例的逻辑。
- en: However, to find the indices, we have another complex list comprehension expression
    (I’ve formatted the code such that it is easy to read).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了找到索引，我们有另一个复杂的列表推导表达式（我已经格式化了代码，使其易于阅读）。
- en: You can combine checking for primes and getting their indices in a single comprehension.
    But that will not make things any simpler.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将质数检查和获取它们的索引结合在一个列表推导中。但这不会让事情变得更简单。
- en: 'Here’s the code:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是代码：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And the corresponding output:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以及相应的输出：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: So what is a better version?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么什么是更好的版本？
- en: A Better Version
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更好的版本
- en: Now for the better version, we can define a series of functions to separate
    out concerns. So that if there’s a problem, you know which function to go back
    to and fix the logic.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更好的版本，我们可以定义一系列函数以分离关注点。这样，如果出现问题，你知道哪个函数需要返回并修复逻辑。
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This code also gives the same output as before.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码也给出了与之前相同的输出。
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Is the better version good enough?** While this works for a small matrix
    such as the one in this example, returning a static list is generally not recommended.
    And for generalizing to larger dimensions, you can use [generators](/2023/02/getting-started-python-generators.html)
    instead.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好的版本是否足够好？** 虽然这对像本示例中的小矩阵有效，但返回静态列表通常不推荐。对于更大的维度，可以使用 [生成器](/2023/02/getting-started-python-generators.html)。'
- en: 'Example 3: Parsing Nested JSON Strings'
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 3：解析嵌套 JSON 字符串
- en: '**Problem**: Parse a given nested JSON string based on conditions and get a
    list of required values.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**问题**：根据条件解析给定的嵌套 JSON 字符串，并获取所需值的列表。'
- en: Parsing nested JSON strings is challenging because you have to account for the
    different levels of nesting, the dynamic nature of the JSON response, and diverse
    data types in your parsing logic.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 解析嵌套的 JSON 字符串具有挑战性，因为你必须考虑不同的嵌套层级、JSON 响应的动态特性以及解析逻辑中的多种数据类型。
- en: 'Let''s take an example of parsing a given JSON string based on conditions to
    get a list of all values that are:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以根据条件解析给定的 JSON 字符串来获取所有值的列表为例：
- en: Integers or list of integers
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数或整数列表
- en: Strings or list of strings
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串或字符串列表
- en: You can load a JSON string into a Python dictionary using the `loads` function
    from the built-in [json module](https://docs.python.org/3/library/json.html).
    So we’ll have a nested dictionary over which we have a list comprehension.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用内置的 [json 模块](https://docs.python.org/3/library/json.html) 中的 `loads` 函数将
    JSON 字符串加载到 Python 字典中。因此，我们将有一个嵌套的字典，并在其上使用列表推导。
- en: 'The list comprehension uses nested loops to iterate over the nested dictionary.
    For each value, it constructs a list based on the following conditions:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导使用嵌套循环来遍历嵌套的字典。对于每个值，它根据以下条件构建一个列表：
- en: If the value is not a dictionary and the key starts with 'inner_key', it uses
    `[inner_item]`.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值不是字典且键以 'inner_key' 开头，它使用 `[inner_item]`。
- en: If the value is a dictionary with 'sub_key', it uses `[inner_item['sub_key']]`.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值是包含 'sub_key' 的字典，它使用 `[inner_item['sub_key']]`。
- en: If the value is a string or integer, it uses `[inner_item]`.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值是字符串或整数，它使用 `[inner_item]`。
- en: If the value is a dictionary, it uses `list(inner_item.values())`.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果值是字典，它使用 `list(inner_item.values())`。
- en: 'Have a look at the code snippet below:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看下面的代码片段：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here’s the output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE14]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As seen, the list comprehension is very difficult to wrap your head around.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，列表推导式非常难以理解。
- en: '*Please do yourself and others on the team a favor by never writing such code.*'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '*请对自己和团队中的其他人好一点，避免编写这样的代码。*'
- en: A Better Version
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更好的版本
- en: I think the following snippet using nested for loops and if-elif ladder is better.
    Because it’s easier to understand what’s going on.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为以下使用嵌套 for 循环和 if-elif 阶梯结构的代码片段更好。因为它更容易理解发生了什么。
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This gives the expected output, too:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这也给出了预期的输出：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Is the better version good enough?** Well, not really.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**更好的版本是否足够好？** 嗯，不太够。'
- en: Because if-elif ladders are often considered a code smell. You may repeat logic
    across branches and adding more conditions will only make the code more difficult
    to maintain.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 if-elif 阶梯结构通常被认为是一种代码异味。你可能会在分支中重复逻辑，添加更多条件只会使代码更难维护。
- en: But for this example, the if-elif ladders and nested loops the version is easier
    to understand than the comprehension expression, though.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但对于这个例子来说，虽然 if-elif 阶梯结构和嵌套循环的版本比列表推导式更容易理解。
- en: Wrapping Up
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The examples we’ve coded thus far should give you an idea of how overusing a
    Pythonic feature such as list comprehension can often become too much of a good
    thing. This is true not just for list comprehensions (they’re the most frequently
    used, though) but also for dictionary and set comprehensions.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止我们编写的示例应该能让你明白，过度使用 Pythonic 特性，比如列表推导式，往往会适得其反。这不仅仅适用于列表推导式（虽然它们是最常用的），也适用于字典和集合推导式。
- en: You should always write code that’s easy to understand and maintain. So try
    to keep things simple even if it means **not** using some Pythonic features. Keep
    coding!
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终编写易于理解和维护的代码。因此，即使这意味着**不**使用一些 Pythonic 特性，也要尽量保持简单。继续编码！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇点工作。她的兴趣和专长包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过编写教程、操作指南、观点文章等与开发者社区分享她的知识。Bala
    还创建了引人入胜的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么你应该使用线性回归模型而不是…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
- en: '[Top 5 Reasons Why You Should Avoid a Data Science Career](https://www.kdnuggets.com/2022/04/top-5-reasons-avoid-data-science-career.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[避免数据科学职业的 5 个理由](https://www.kdnuggets.com/2022/04/top-5-reasons-avoid-data-science-career.html)'
- en: '[Top 4 tricks for competing on Kaggle and why you should start](https://www.kdnuggets.com/2022/05/packt-top-4-tricks-competing-kaggle-start.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Kaggle 竞赛中排名前 4 的技巧以及你为什么应该开始](https://www.kdnuggets.com/2022/05/packt-top-4-tricks-competing-kaggle-start.html)'
- en: '[5 Reasons Why You Should Get Certified](https://www.kdnuggets.com/2023/05/sas-5-reasons-get-certified.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么你应该获得认证的 5 个理由](https://www.kdnuggets.com/2023/05/sas-5-reasons-get-certified.html)'
- en: '[Why You Should Learn SQL in 2024](https://www.kdnuggets.com/why-you-should-learn-sql-in-2024)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么你应该在 2024 年学习 SQL](https://www.kdnuggets.com/why-you-should-learn-sql-in-2024)'
- en: '[Machine learning does not produce value for my business. Why?](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习为何没有为我的业务创造价值？](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
