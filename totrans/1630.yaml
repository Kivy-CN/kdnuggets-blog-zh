- en: Building A Data Science Product in 10 Days
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/07/building-data-science-product-10-days.html](https://www.kdnuggets.com/2018/07/building-data-science-product-10-days.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Houtao Deng](https://tech.instacart.com/@htaodeng), Data scientist at
    Instacart**.'
  prefs: []
  type: TYPE_NORMAL
- en: At startups, we often have the chance to create products from scratch. In this
    article, I’ll share how to quickly build valuable data science products, using
    my first project at Instacart as an example.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Here is the problem. After adding items to the shopping cart on Instacart, a
    customer can select a delivery window during checkout (illustrated in Figure 1).
    Then, an Instacart shopper would try to deliver the groceries to the customer
    within the window. During peak times, our system often accepted more orders than
    our shoppers could handle, and some orders would be delivered late.
  prefs: []
  type: TYPE_NORMAL
- en: We decided to leverage data science to address the lateness issue. The idea
    was to use data science models to estimate the delivery capacity for each window,
    and a window would be closed when the number of orders placed reaches its capacity.
  prefs: []
  type: TYPE_NORMAL
- en: Here is how we built a v1 product in 10 days.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4939b36a76ba97e8a0632278175424c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 1\. A customer can choose an available delivery window for the grocery items
    to be delivered.
  prefs: []
  type: TYPE_NORMAL
- en: '**Day 1. Planning**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We started with planning so that we could work on the right things and develop
    a solution fast.
  prefs: []
  type: TYPE_NORMAL
- en: First, we defined the metrics to measure the project progress.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, we identified an area that was achievable with a high impact (low-hanging
    fruit).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Third, we came up with a simple solution that could be implemented quickly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Metrics**. The percentage of late deliveries per day was used to measure
    lateness. We didn’t want to close delivery windows too early and fail to capture
    the orders that could be delivered on time. So, the number of deliveries per day
    was used as a counter metric. (We now use shopper utilization as a counter metric.)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low-hanging fruit**. Data showed that for days with a lot of late deliveries,
    the majority of the orders were placed one day before. Therefore, we decided to
    focus on the next-day delivery windows (**Tomorrow**’s windows in Figure 1).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Solution**. To deliver an order within time window *T *(between *T and T+1) , *a
    shopper may start working on the order before *T*. Figure 2 illustrates that a
    shopper begins to work on an order in window *T-2*, and delivers the order in
    window *T*. As most orders took less than two hours, the capacity of a delivery
    window *T* mostly depends on the number of shoppers attime window *T, T-1, *and* T-2.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/66979d0c2f395c731a9ac1c544c3a600.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 2\. Illustration of a shopper’s time spent on an order.Assuming a linear
    relationship, the capacity of a delivery window *T* can be written as
  prefs: []
  type: TYPE_NORMAL
- en: '*capacity(T) = a+b0*#shoppers(T)+b1*#shoppers(T-1)+b2*#shoppers(T-2)*'
  prefs: []
  type: TYPE_NORMAL
- en: There can be other factors (e.g., weather) also affecting capacity, but we decided
    to start simple.
  prefs: []
  type: TYPE_NORMAL
- en: Day 2–3\. First Iteration on Models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We followed a typical modeling process: feature engineering, creating training
    and testing data, and comparing different models. However, once we felt the models
    were reasonably accurate, we did not invest more time in models. Firstly, models
    were only one part of the system. Secondly, the improvement in model accuracy
    did not necessarily translate to the same degree of improvement in metrics.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Features and Data**. For each delivery window in the past, we had the following
    data: the orders delivered within the window, and shoppers’ time spent on the
    orders. Figure 3 illustrates for three orders delivered in time window *T* (between *T* and *T+1*),
    there were 2 shoppers worked in window *T-2, and *3 shoppers worked in both window *T-1 *and *T*.
    Figure 4 shows one row of data created from this example.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/43ba42ded616f1d761bdb9cea231a630.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 3\. For the three orders delivered within time window T (between T and T+1),
    2 shoppers worked in window T-2, and 3 shoppers worked in both window T-1 and
    T.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8034aaf6860bf7c05a73e4a77db8093d.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 4\. One row of data created from the example shown in Figure 3.
  prefs: []
  type: TYPE_NORMAL
- en: '**Linear model**. Using #orders(*T*) as the response variable, other variables
    as the predictors, we built a linear model on a training data set and tested it
    on a validation data set. The form of the model is as follows'
  prefs: []
  type: TYPE_NORMAL
- en: '*#orders(T) = a+b0*#shoppers(T)+b1*#shoppers(T-1)+b2*#shoppers(T-2)*'
  prefs: []
  type: TYPE_NORMAL
- en: The predicted values vs. actual values for the validation data are plotted in
    Figure 5 (left). The mean of the actual values at each predicted value and the
    45-degree line are also plotted.
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-linear model**. We built a random forest model for comparison. The predicted
    values vs. actual values are plotted in Figure 5 (right). The random forest model
    was not substantially better than the linear model, and so we felt comfortable
    to proceed with the linear model that is easier to interpret and implement.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prediction**. With the linear model, we can estimate the capacity for a future
    delivery window *T* with the following formula'
  prefs: []
  type: TYPE_NORMAL
- en: '*capacity(T) = a+b0*#shoppers(T)+b1*#shoppers(T-1)+b2*#shoppers(T-2)*'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in this formula, *#shoppers(t) *represents the number of shoppers
    scheduled at a future time window *t (t *=* T, T-1 *or *T-2)*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/002fbd8420ae4f5667cf2445f26d8947.png)![](../Images/e4d2b42997b384d49e8762376ee33c9e.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 5\. Predicted vs. actual plots from a linear model (left) and a random forest
    model (right).
  prefs: []
  type: TYPE_NORMAL
- en: Day 4–5\. End-to-End Integration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We used databases as the interfaces between data science and engineering components.
    In this way, the dependency between data science and engineering can be reduced
    (vs. embedding a data science model in the engineering code), and the ownership
    of different components can be clearly defined. Figure 6 illustrates how the system
    works.
  prefs: []
  type: TYPE_NORMAL
- en: '**Data science components**. There were two data science jobs, model training
    job and prediction job, both triggered by cron (a time-based scheduler) at pre-defined
    frequencies. The model training job ran every week, fetched the most recent order_shoppers
    data (orders and shoppers’ time spent on the orders), fitted the models and saved
    them into a database table (models). The prediction job ran every night, fetched
    the models and scheduled_hours (future scheduled shopper hours) data, and estimated
    the capacity for future delivery windows. The estimates were then saved to the
    capacity_estimates table.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Engineering components**. The capacity counting job was created to consume
    capacity estimates and provide the delivery availability of each window for the
    customer app. It was scheduled to run every minute, got the capacity estimates
    and existing orders, calculated if a delivery window was available, and saved
    the availability information to the delivery_availabilities table. Also, when
    a customer placed an order, the order information would be saved to the orders
    table, and the capacity counting job would be triggered.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2c75f3b0d9829de8441b75b29185bc43.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 6\. Integration of data science and engineering components.
  prefs: []
  type: TYPE_NORMAL
- en: Day 6–8\. Second Iteration on Models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We did a sanity check on capacity estimates, and two modeling issues were found
    and fixed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Sanity check**. We ran the prediction job that generated the capacity estimates
    for future delivery windows. Then, after a window became obsolete, we compared
    the estimated capacity of the window to the orders actually accepted by the existing
    system. We found that in some cases the existing system took fewer orders than
    the estimated capacity but with substantial lateness (illustrated in Figure 7).
    This indicated the capacity was over-estimated in those cases. Based on this insight,
    we found two issues.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e83a45d5550d321de2eaf5408b3db4a2.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 7\. Validate the capacity estimates by comparing them to the orders accepted
    by the existing system.
  prefs: []
  type: TYPE_NORMAL
- en: '**Issue 1: mean prediction**. The models we built predicted the mean. It can
    be seen from Figure 5 (left) that there are data points below the mean line. The
    mean predictions would over-estimate the capacity for those data points. To solve
    this, a prediction interval was constructed, and a lower percentile level was
    used. Figure 8 shows the 25th percentile and 75th percentile levels.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Issue 2: data inconsistency**. *#shoppers *used in prediction is the number
    of scheduled shoppers at a future window*, *and shoppers can cancel their scheduled
    hours before the window. However, *#shoppers *used in model training did not include
    canceled hours. So, the data used for prediction and training were not consistent.
    To fix it, cancellation rates were estimated and included in the formula'
  prefs: []
  type: TYPE_NORMAL
- en: '*capacity(T) = a+b0*#shoppers(T)*****{1-cancelation_rate(T)}****+ …*'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e2d28bee9201cf8d0266d03f7bdda7e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 8\. The 25th percentile and 75th percentile values of the actual values
    at each predicted value.
  prefs: []
  type: TYPE_NORMAL
- en: Day 9–10\. Adjustments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before launching the new system to customers, we started internal tests (without
    impacting customers) and made adjustments accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '**Percentile level**. We adjusted the percentile level to pass the sanity check
    mentioned in the previous section.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Caching**. Jobs were made faster by caching (storing frequently used data
    on the servers to avoid redundant calls to the databases).'
  prefs: []
  type: TYPE_NORMAL
- en: Launch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Figure 9 shows the percentage of late deliveries by day around the product launching
    time. The new system achieved our goal of substantially reducing late deliveries
    (without reducing the number of deliveries). It was a quick success. Since the
    initial launch, we’ve continued to iterate, including estimating the capacity
    for same-day delivery windows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/92d6d9f7df68f6bb74314f9ac3f6b000.png)'
  prefs: []
  type: TYPE_IMG
- en: Fig 9\. The percentage of late deliveries by day.
  prefs: []
  type: TYPE_NORMAL
- en: Takeaways
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a data scientist who joined a startup for the first time, I learned the following
    lessons in quickly building valuable data science products
  prefs: []
  type: TYPE_NORMAL
- en: identifying impactful and achievable work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reducing the dependency between engineering and data science components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: focusing on improving the metrics, not necessarily the model accuracy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: starting simple and iterating fast
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Four years later, Instacart is now a much larger company, but the learnings
    are still applicable to the data science projects we do to deliver business value
    quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: Andrew Kane contributed to the first version of the engineering components,
    and Tahir Mobashir and Sherin Kurian contributed to the later iterations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/@htaodeng/building-a-data-science-product-in-10-days-d2f4688567b0).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[SuperDataScience Podcast: Insights from the Founder of KDnuggets](https://www.kdnuggets.com/2018/07/superdatascience-podcast-insights-kdnuggets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Explaining the 68-95-99.7 rule for a Normal Distribution](https://www.kdnuggets.com/2018/07/explaining-68-95-99-7-rule-normal-distribution.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visualizing High Dimensional Data In Augmented Reality](https://www.kdnuggets.com/2017/09/ibm-visualizing-high-dimensional-data-augmented-reality.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[I Created An AI App In 3 Days](https://www.kdnuggets.com/2023/08/created-ai-app-3-days.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Certifications to Become Job-Ready in 30 Days](https://www.kdnuggets.com/4-certifications-to-become-job-ready-in-30-days)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Things You Should Know When Scaling Your Web Data-Driven Product](https://www.kdnuggets.com/2023/08/things-know-scaling-web-datadriven-product.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introducing Objectiv: Open-source product analytics infrastructure](https://www.kdnuggets.com/2022/06/objectiv-introducing-objectiv-opensource-product-analytics-infrastructure.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Free Platforms for Building a Strong Data Science Portfolio](https://www.kdnuggets.com/2022/10/7-free-platforms-building-strong-data-science-portfolio.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Free Platforms for Building a Strong Data Science Portfolio](https://www.kdnuggets.com/5-free-platforms-for-building-a-strong-data-science-portfolio)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
