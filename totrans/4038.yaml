- en: Too Many Python Versions to Manage? Pyenv to the Rescue
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需要管理的 Python 版本太多？Pyenv 来拯救
- en: 原文：[https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue)
- en: '![Too Many Python Versions to Manage? Pyenv to the Rescue](../Images/2139531f43a05fc40e1648d1dbb6ffed.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![需要管理的 Python 版本太多？Pyenv 来拯救](../Images/2139531f43a05fc40e1648d1dbb6ffed.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: Want to spend your morning trying out the new features in the latest Python
    version…And your lunch break sifting through a legacy Python codebase—all without
    breaking your development environment?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 想在早上尝试最新 Python 版本的新特性...午休时浏览旧版 Python 代码库——而不会破坏你的开发环境？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Yes, it is possible. And [Pyenv](https://github.com/pyenv/pyenv) is here to
    help. With Pyenv, you can install Python versions, switch between versions, and
    remove versions that you no longer need.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这是可能的。[Pyenv](https://github.com/pyenv/pyenv) 可以帮助你。使用 Pyenv，你可以安装 Python
    版本、切换版本和删除不再需要的版本。
- en: This tutorial is a quick introduction to setting up and using Pyenv. So let’s
    get started!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程是 Pyenv 设置和使用的简要介绍。现在，让我们开始吧！
- en: Installing Pyenv
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Pyenv
- en: 'The first step is to install Pyenv. I use Linux: Ubuntu 23.01\. So, if you
    are on a Linux machine, the simplest way to install Pyenv is by running the following
    `curl` command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是安装 Pyenv。我使用的是 Linux：Ubuntu 23.01。如果你使用的是 Linux 机器，安装 Pyenv 的最简单方法是运行以下
    `curl` 命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This installs Pyenv using the [pyenv-installer](https://github.com/pyenv/pyenv-installer).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了 [pyenv-installer](https://github.com/pyenv/pyenv-installer) 来安装 Pyenv。
- en: 'After the installation is complete, you’ll be prompted to finish setting up
    your shell environment to use Pyenv. To do so, you can add the following command
    to your `~/.bashrc` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你将被提示完成设置你的 shell 环境以使用 Pyenv。为此，你可以将以下命令添加到 `~/.bashrc` 文件中：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And you’re all set to start using Pyenv!
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪，开始使用 Pyenv 吧！
- en: '**Note**: If you are on a Mac or a Windows machine, check out these detailed
    instructions on [how to install Pyenv](https://github.com/pyenv/pyenv#installation).
    On Windows, you need to install Pyenv in the Windows Subsystem for Linux (WSL).'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：如果你使用的是 Mac 或 Windows 机器，请查看 [如何安装 Pyenv](https://github.com/pyenv/pyenv#installation)
    的详细说明。在 Windows 上，你需要在 Windows 子系统 for Linux (WSL) 中安装 Pyenv。'
- en: Installing Python Versions with Pyenv
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pyenv 安装 Python 版本
- en: 'Now that you’ve installed Pyenv, you can install specific Python versions by
    running the `pyenv install` command like so:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经安装了 Pyenv，你可以通过运行 `pyenv install` 命令来安装特定的 Python 版本，如下所示：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To check the list of installed Python versions, run the following command:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查已安装的 Python 版本列表，请运行以下命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I haven’t installed any new version yet, so the only version of Python is the
    system version. Which is Python 3.11 in my case:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我还没有安装任何新版本，所以唯一的 Python 版本是系统版本。在我的情况中是 Python 3.11：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let’s try to install Python 3.8 and 3.12\. Try running this command to install
    Python 3.8:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试安装 Python 3.8 和 3.12。尝试运行以下命令来安装 Python 3.8：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first time you try to install a specific version of Python with Pyenv, you
    may probably run into errors. Because of some missing build dependencies. No worries.
    It’s easy to fix!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次尝试用 Pyenv 安装特定版本的 Python 时，你可能会遇到错误，因为缺少一些构建依赖项。别担心，很容易修复！
- en: ⚙️ Some Troubleshooting Tips
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ⚙️ 一些故障排除提示
- en: When trying to install Pyenv on my Linux distro using the `pyenv install` command,
    I ran into errors because of missing build dependencies.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我尝试在我的 Linux 发行版上使用 `pyenv install` 命令安装 Pyenv 时，由于缺少构建依赖项而遇到了错误。
- en: '[This StackOverflow thread](https://stackoverflow.com/questions/60775172/pyenvs-python-is-missing-bzip2-module)
    contains helpful information on installing the required build dependencies for
    Pyenv. Run the following command to install the missing dependencies:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[这个 StackOverflow 讨论串](https://stackoverflow.com/questions/60775172/pyenvs-python-is-missing-bzip2-module)
    包含有关安装 Pyenv 所需的构建依赖项的有用信息。运行以下命令以安装缺少的依赖项：'
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You should now be able to install the Python versions without any errors:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你应该可以在没有任何错误的情况下安装 Python 版本：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Note**: When you install Python 3.x, by default, the most recent release
    is installed. But you also have more granular control and can specify 3.x.y for
    installing a specific release of a Python version. You can also run `pyenv install
    --list` to get a list of all available Python versions to install. This, however,
    is a very *long* list.'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意**：当你安装 Python 3.x 时，默认会安装最新的版本。但你也可以进行更细粒度的控制，指定 3.x.y 来安装特定版本的 Python。你还可以运行
    `pyenv install --list` 来获取所有可用 Python 版本的列表。然而，这个列表是非常 *长* 的。'
- en: 'Similarly run `pyenv install` to install Python 3.12:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，运行 `pyenv install` 来安装 Python 3.12：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now if you run `pyenv versions` you’ll see Python 3.8 and 3.12 in addition
    to the system version:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你运行 `pyenv versions`，除了系统版本，你会看到 Python 3.8 和 3.12：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Setting Global Python Version
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置全局 Python 版本
- en: With Pyenv, you can set a **global** Python version. As the name suggests, the
    global version is the version of Python that’s used anytime you use Python at
    the command line.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Pyenv，你可以设置一个 **全局** Python 版本。正如其名，全局版本是你在命令行中使用 Python 时使用的 Python 版本。
- en: But be careful to set it to a relatively recent version to avoid errors when
    running projects that use newer Python versions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但要小心将其设置为相对较新的版本，以避免在运行使用更新 Python 版本的项目时出现错误。
- en: For example, let's see what happens if we set the global version to Python 3.8.18.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，假设我们将全局版本设置为 Python 3.8.18 会发生什么。
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Create a project folder. In it, create a main.py file with the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个项目文件夹。在其中，创建一个 main.py 文件，并添加以下代码：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'As seen, this code uses the match-case statement which was introduced in Python
    3.10\. So you need Python 3.10 or a later version for this code to run successfully.
    If you try running the script, you’ll get the following error:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如所示，这段代码使用了在 Python 3.10 中引入的 match-case 语句。因此，你需要 Python 3.10 或更高版本才能成功运行这段代码。如果你尝试运行脚本，你会遇到以下错误：
- en: '[PRE12]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In my case, the system Python is version 3.11 which is quite recent. So I can
    set the global version to the system Python version like so:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 就我而言，系统 Python 版本是 3.11，非常新。因此，我可以将全局版本设置为系统 Python 版本，如下所示：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When you now running the same script, you should get the following output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当你现在运行相同的脚本时，你应该会看到以下输出：
- en: '[PRE14]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: If your system Python is an older version, say Python 3.6 or earlier, it's helpful
    to install a more recent version of Python and set it as the global version.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的系统 Python 是较旧的版本，例如 Python 3.6 或更早版本，安装一个更新的 Python 版本并将其设置为全局版本是很有帮助的。
- en: Setting Local Python Version for Your Project
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为你的项目设置本地 Python 版本
- en: When you want to work on projects that use earlier versions of Python, you’ll
    want to install that version to avoid any errors (like method calls that are no
    longer supported).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想要处理使用较早版本 Python 的项目时，你需要安装该版本以避免任何错误（如不再支持的方法调用）。
- en: Say you want to use Python 3.8 when working on project A, and Python 3.10 or
    later when working on project B.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，你想在处理项目 A 时使用 Python 3.8，在处理项目 B 时使用 Python 3.10 或更高版本。
- en: '![Too Many Python Versions to Manage? Pyenv to the Rescue](../Images/784d50c72897ae279e6b24fb94dce3bd.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Python 版本太多，难以管理？Pyenv 来救援](../Images/784d50c72897ae279e6b24fb94dce3bd.png)'
- en: Image by Author
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: 'In such cases, you can set the local Python version in the project A''s directory
    like so:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以在项目 A 的目录中这样设置本地 Python 版本：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can run `python --version` to check the Python version in the project directory:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以运行 `python --version` 来检查项目目录中的 Python 版本：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This is especially helpful when working on older Python codebases.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这在处理较旧的 Python 代码库时特别有用。
- en: Uninstalling a Python Version
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卸载 Python 版本
- en: 'If you no longer need a Python version, you can uninstall it by running the
    `pyenv uninstall` command. Say we don’t need Python 3.8.18 anymore, so we can
    uninstall it by running the following command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不再需要某个 Python 版本，你可以通过运行 `pyenv uninstall` 命令将其卸载。例如，如果我们不再需要 Python 3.8.18，我们可以通过运行以下命令将其卸载：
- en: '[PRE17]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'You should see a similar output at the terminal:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在终端中看到类似的输出：
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Wrapping Up
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'I hope you found this introductory tutorial on Pyenv helpful. Let''s review
    some of the most common commands for quick reference:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你觉得这个关于 Pyenv 的入门教程有帮助。我们来回顾一些最常用的命令以便快速参考：
- en: '| **Command** | **Function** |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **功能** |'
- en: '| `pyenv versions` | Lists all Python versions currently installed |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv versions` | 列出所有当前安装的 Python 版本 |'
- en: '| `pyenv install --list` | Lists all Python versions available to install |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv install --list` | 列出所有可供安装的 Python 版本 |'
- en: '| `pyenv install 3.x` | Installs the latest release of Python 3.x |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv install 3.x` | 安装 Python 3.x 的最新发布版 |'
- en: '| `pyenv install 3.x.y` | Installs release y of Python 3.x |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv install 3.x.y` | 安装 Python 3.x 的 y 版本 |'
- en: '| `pyenv global 3.x` | Sets Python 3.x as the global Python version |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv global 3.x` | 将 Python 3.x 设置为全局 Python 版本 |'
- en: '| `pyenv local 3.x` | Sets the local Python version for your project to 3.x
    |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv local 3.x` | 将本地 Python 版本设置为 3.x |'
- en: '| `pyenv uninstall 3.x.y` | Uninstalls release y of Python 3.x |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `pyenv uninstall 3.x.y` | 卸载 Python 3.x 的 y 版本 |'
- en: In case you’re wondering. Yes, you can [use Docker](/2023/07/docker-tutorial-data-scientists.html)
    which is an excellent option to make local development a breeze—without worrying
    about dependency conflicts. But you’d probably feel it’s overkill to use Docker
    or other containerization solutions everytime you need to work on a new project.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想。是的，你可以 [使用 Docker](/2023/07/docker-tutorial-data-scientists.html)，这是一个使本地开发变得轻松的绝佳选择——无需担心依赖冲突。但你可能会觉得每次需要进行新项目时使用
    Docker 或其他容器化解决方案有些过度。
- en: So I think it is still helpful to be able to install, manage, and switch between
    Python versions at the command-line. You can also explore the [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)
    plug-in to create and manage virtual environments. Happy coding!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我认为能够在命令行安装、管理和切换 Python 版本仍然很有用。你也可以探索 [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)
    插件来创建和管理虚拟环境。编码愉快！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发人员和技术作家。她喜欢在数学、编程、数据科学和内容创作的交集处工作。她的兴趣和专长领域包括 DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过编写教程、操作指南、观点文章等，学习并与开发者社区分享她的知识。Bala
    还创建了引人入胜的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How To Use Docker Tags to Manage Image Versions Effectively](https://www.kdnuggets.com/how-to-use-docker-tags-to-manage-image-versions-effectively)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何有效使用 Docker 标签管理镜像版本](https://www.kdnuggets.com/how-to-use-docker-tags-to-manage-image-versions-effectively)'
- en: '[Why Are So Many Data Scientists Quitting Their Jobs?](https://www.kdnuggets.com/2022/03/many-data-scientists-quitting-jobs.html)'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么那么多数据科学家辞职？](https://www.kdnuggets.com/2022/03/many-data-scientists-quitting-jobs.html)'
- en: '[How to Manage Multiple Inheritance in Python](https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何管理 Python 中的多重继承](https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html)'
- en: '[Be prepared to manage the threat with an MS in Cybersecurity from…](https://www.kdnuggets.com/2022/07/baypath-prepared-manage-threat-ms-cybersecurity.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备好通过…获得网络安全硕士学位来应对威胁](https://www.kdnuggets.com/2022/07/baypath-prepared-manage-threat-ms-cybersecurity.html)'
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化和管理机器学习生命周期的前 10 个 MLOps 工具](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
- en: '[Be prepared to manage the threat with an MS in Cybersecurity from…](https://www.kdnuggets.com/2022/12/baypath-prepared-manage-threat-ms-cybersecurity.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[准备好通过…获得网络安全硕士学位来应对威胁](https://www.kdnuggets.com/2022/12/baypath-prepared-manage-threat-ms-cybersecurity.html)'
