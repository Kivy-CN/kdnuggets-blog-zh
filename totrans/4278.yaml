- en: Applying Python’s Explode Function to Pandas DataFrames
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Python 的 Explode 函数应用于 Pandas DataFrames
- en: 原文：[https://www.kdnuggets.com/2021/05/applying-pythons-explode-function-pandas-dataframes.html](https://www.kdnuggets.com/2021/05/applying-pythons-explode-function-pandas-dataframes.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/05/applying-pythons-explode-function-pandas-dataframes.html](https://www.kdnuggets.com/2021/05/applying-pythons-explode-function-pandas-dataframes.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[comments](#comments)'
- en: '**By [Michael Mosesov](https://www.linkedin.com/in/michael-mosesov-2a04191a6/),
    Data Analyst**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Michael Mosesov](https://www.linkedin.com/in/michael-mosesov-2a04191a6/)，数据分析师**'
- en: '![](../Images/c17f6a5e21136f2e36c660d112b1ee87.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c17f6a5e21136f2e36c660d112b1ee87.png)'
- en: '**Initial csv file**'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**初始 csv 文件**'
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您组织的 IT 工作'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In our case we would use a historical data set of Russian leaders since the
    foundation of the Russian Empire in 1696, particularly their names, abbreviation
    of the government and years in power. The aim would be to clone/explode the dataset,
    so that each governor could be accessed by the year. For example, the current
    dataset format would not display who was the leader in year 1700 if you try to
    access that row.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们将使用一个自 1696 年俄罗斯帝国建立以来的俄罗斯领导者历史数据集，特别是他们的名字、政府缩写和在位年限。目标是克隆/展开数据集，以便可以按年份访问每位总督。例如，当前数据集格式无法显示在
    1700 年的领导者，如果您尝试访问该行。
- en: This could be solved by splaying the “Years” column by a hyphen (-) between
    two dates.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过在两个日期之间使用连字符（-）展开“Years”列来解决。
- en: '**Our aim is to transform each element of a list-like to a row, while keeping
    the same index that was assigned by Python to each row.**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**我们的目标是将列表样式的每个元素转换为一行，同时保持 Python 分配给每一行的相同索引。**'
- en: '*P.s. There were about 5 years between 1917 and 1922 of civil war with no single
    official state.*'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*P.s. 1917 年至 1922 年间有大约 5 年的内战，没有单一的官方国家。*'
- en: '*P.s.s. The dataset was cut down to last approximately 300 years, there were
    more leaders of Russia since 862.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*P.s.s. 数据集被缩减到大约 300 年，862 年以来俄罗斯有更多的领导者。*'
- en: 'In the beginning, we import the Pandas library into the Jupyter Notebook and
    take a look at the first and last rows of our data. The first step of data manipulation
    process is to create a data frame using the pd.DataFrame:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一开始，我们将 Pandas 库导入 Jupyter Notebook，并查看数据的第一行和最后一行。数据操作过程的第一步是使用 pd.DataFrame
    创建数据框：
- en: '![](../Images/488418ea54866050564b9005bf3a43d3.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/488418ea54866050564b9005bf3a43d3.png)'
- en: '**Quick Jupyter Notebook exploratory data preview**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**快速 Jupyter Notebook 数据预览**'
- en: The explode() function is used to transform each element of a list-like to a
    row, therefore our first task is to create a list, separated by commas, of the
    values in the “Years” column.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`explode()` 函数用于将列表样式的每个元素转换为一行，因此我们的第一个任务是创建一个用逗号分隔的“Years”列中的值列表。'
- en: But before that, it is vital to make all values numerical inside the “Years”
    column. Based on the observation of the last row, we see that extra editing is
    required for Python to apply the explode function and splaying the years in the
    “Years” column, converting all of the values to numbers, which means to replace
    the “currently” with “2021”, as this is the year when the article is written.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但在此之前，必须将“Years”列中的所有值转换为数字。根据最后一行的观察，我们看到 Python 需要额外的编辑才能应用 explode 函数并展开“Years”列中的年份，将所有值转换为数字，这意味着将“目前”替换为“2021”，因为这是文章撰写的年份。
- en: Replacement of values in such cases could be done using the lambda() function
    and x.replace, as demonstrated in the code below it also works for all the values
    in data frame if you need to change it in many rows.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，值的替换可以使用 lambda() 函数和 x.replace 完成，如下方代码所示，它也适用于数据框中的所有值，如果你需要在许多行中进行更改。
- en: '![](../Images/02cb016338c38638ce46238de8841d8b.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/02cb016338c38638ce46238de8841d8b.png)'
- en: '**Lambda function assists in replacing values in data frames of any size and
    rows at any place**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Lambda 函数帮助替换任何大小和行位置的数据框中的值**'
- en: 'The next step is to split the dates in the “Years” column by a hyphen in order
    to expand/splay the data frame. The aim of the action, as been mentioned above,
    is to automatically splay and expand the hyphen between the two years. The following
    functions would help us to create lists of dates which is separated by a comma
    instead of hyphen:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是通过破折号拆分“Years”列中的日期，以扩展/展开数据框。如上所述，这一操作的目的是自动展开和扩展两个年份之间的破折号。以下函数将帮助我们创建由逗号而非破折号分隔的日期列表：
- en: '![](../Images/1e74e9eaa8a1b5b51a01f5e527a87525.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1e74e9eaa8a1b5b51a01f5e527a87525.png)'
- en: '**Although those steps could be done separately, Python allows to fit them
    in one line of code**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**尽管这些步骤可以单独完成，但 Python 允许将它们合并为一行代码**'
- en: 'The following result should display after the manipulation with data frame:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 操作数据框后，以下结果应该显示出来：
- en: '![](../Images/9e3273bf825c03b2b4af30c69834a85e.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9e3273bf825c03b2b4af30c69834a85e.png)'
- en: After assuring that all of our values in rows of the “Years” column are in the
    format of lists, we can finally apply the explode function to the whole dataset.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在确认“Years”列中的所有值都是列表格式后，我们终于可以对整个数据集应用 explode 函数了。
- en: '![](../Images/e8a213805d892c3155b6d40f1669d992.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8a213805d892c3155b6d40f1669d992.png)'
- en: '**Result of applied explode() function to the entire data frame**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**对整个数据框应用 explode() 函数的结果**'
- en: 'Now we are able to see the result of explode function which could be used in
    the cases such as the following when there is a need to splay and expand on column
    in your data frame and make it more accessible. The reset_index() could be applied
    in case there is a need for an extra index in addition to the one initially assigned
    one to the unique row. It is also vital to create a new “exploded” pd.DataFrame
    to save the results to data set in csv format:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以看到 explode 函数的结果，它可以用于需要展开和扩展数据框列的情况，从而使其更易于访问。如果需要在原始分配给唯一行的索引之外添加额外的索引，可以应用
    reset_index()。创建一个新的“exploded” pd.DataFrame 以将结果保存到 CSV 格式的数据集中也是至关重要的。
- en: '![](../Images/9f55eda8ba31cd396d6b3017dbde2c4e.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9f55eda8ba31cd396d6b3017dbde2c4e.png)'
- en: '**Saving new, exploded data frame**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**保存新的、展开的数据框**'
- en: In result of the explode() the dates in the “Years” column have splayed throughout
    the data set and now each year of governing by each leader represents a new row.
    Prior to that, functions such as lambda(), list() and map() allowed us to save
    time and automatically expand the values (in our case years) between the dates.
    Such approach is useful when manipulating with dates and can be easily applied
    to small or large datasets in any field.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 explode() 处理后，“Years”列中的日期已经在数据集中展开，现在每个领导人的治理年份代表一个新行。在此之前，函数如 lambda()、list()
    和 map() 让我们节省了时间，并自动扩展了日期之间的值（在我们的例子中是年份）。这种方法在处理日期时很有用，并且可以轻松应用于任何领域的小型或大型数据集。
- en: 'Below is the preview of exported data set in csv. While initial “index” was
    left assigned to each unique value (from splayed “Years”), there is an added index
    on the left for each of 348 rows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是导出数据集的 CSV 预览。虽然初始“index”保留分配给每个唯一值（来自展开的“Years”），但左侧增加了一个索引，涵盖了 348 行：
- en: '![](../Images/b2fb008b83da219b93af67366983c814.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b2fb008b83da219b93af67366983c814.png)'
- en: '**Preview of the final edited version**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**最终编辑版本的预览**'
- en: '**Bio: [Michael Mosesov](https://www.linkedin.com/in/michael-mosesov-2a04191a6/)**
    is a Data Analyst located in Russia.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历：[Michael Mosesov](https://www.linkedin.com/in/michael-mosesov-2a04191a6/)**
    是一名位于俄罗斯的数据分析师。'
- en: '[Original](https://mosesov62.medium.com/applying-python-explode-function-to-pd-dataframe-e5f6dfc20690).
    Reposted with permission.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://mosesov62.medium.com/applying-python-explode-function-to-pd-dataframe-e5f6dfc20690)。经许可转载。'
- en: '**Related:**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[A Simple Way to Time Code in Python](/2021/03/simple-way-time-code-python.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中简单计时的方法](/2021/03/simple-way-time-code-python.html)'
- en: '[How to Speed Up Pandas with Modin](/2021/03/speed-up-pandas-modin.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Modin 加速 Pandas](/2021/03/speed-up-pandas-modin.html)'
- en: '[11 Essential Code Blocks for Complete EDA (Exploratory Data Analysis)](/2021/03/11-essential-code-blocks-exploratory-data-analysis.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[完整EDA（探索性数据分析）的11个必备代码块](/2021/03/11-essential-code-blocks-exploratory-data-analysis.html)'
- en: More On This Topic
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每位数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创企业理想的编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目的，并且找到目的来……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个90亿美元的AI失败，深入分析](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计的最佳资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5大特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
