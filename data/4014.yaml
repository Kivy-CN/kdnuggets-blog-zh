- en: 'Getting Started with PyTest: Effortlessly Write and Run Tests in Python'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyTest 入门：轻松编写和运行 Python 测试
- en: 原文：[https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)
- en: '![Getting Started with PyTest](../Images/e14abc30eccb9a742052e136c5e1a866.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![使用 PyTest 入门](../Images/e14abc30eccb9a742052e136c5e1a866.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于作者
- en: Have you ever encountered software that didn't work as expected? Maybe you clicked
    a button, and nothing happened, or a feature you were excited about turned out
    to be buggy or incomplete. These issues can be frustrating for users and can even
    lead to financial losses for businesses.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否遇到过软件无法按预期工作的情况？也许你点击了一个按钮，却没有任何反应，或者你期待的某个功能结果却存在缺陷或不完整。这些问题对用户来说可能会很令人沮丧，甚至可能导致企业的经济损失。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 管理'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: To address these challenges, developers follow a programming approach called
    **test-driven development**. TDD is all about minimizing software failures and
    ensuring that the software meets the intended requirements. These test cases describe
    the expected behavior of the code. By writing these tests upfront, developers
    get a clear understanding of what they want to achieve. Test pipelines are an
    essential part of the software development process for any organization. Whenever
    we make changes to our codebase, we need to ensure that they don't introduce new
    bugs. This is where test pipelines come in to help us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些挑战，开发人员采用一种称为**测试驱动开发**（TDD）的编程方法。TDD 旨在最小化软件故障，确保软件符合预期要求。这些测试用例描述了代码的预期行为。通过提前编写这些测试，开发人员可以清楚地了解他们想要实现的目标。测试管道是任何组织软件开发过程中的重要组成部分。每当我们对代码库进行更改时，我们需要确保这些更改不会引入新的错误。这就是测试管道发挥作用的地方。
- en: Now, let's talk about PyTest. PyTest is a Python package that simplifies the
    process of writing and running test cases. This full-featured testing tool has
    matured to become the de facto standard for many organizations, as it easily scales
    for complex codebases and functionalities.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈 PyTest。PyTest 是一个 Python 包，简化了编写和运行测试用例的过程。这个功能齐全的测试工具已经成熟，成为许多组织的事实标准，因为它能够轻松地扩展到复杂的代码库和功能。
- en: Benefits of the PyTest Module
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PyTest 模块的好处
- en: '**Improved Logging and Test Reports**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**改进的日志记录和测试报告**'
- en: Upon the execution of tests, we receive a complete log of all executed tests
    and the status of each test case. In the event of failure, a complete stack trace
    is provided for each failure, along with the exact values that caused an assert
    statement to fail. This is extremely beneficial for debugging and makes it easier
    to trace the exact issue in our code to solve the bugs.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在执行测试后，我们会收到所有执行的测试及每个测试用例状态的完整日志。如果出现失败，将提供每个失败的完整堆栈跟踪，以及导致断言语句失败的确切值。这对调试非常有帮助，使我们更容易追踪代码中的具体问题，以解决错误。
- en: '**Automatic Discovery of Test Cases**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例的自动发现**'
- en: We do not have to manually configure any test case to be executed. All files
    are recursively scanned, and all function names prefixed with "test" are executed
    automatically.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们不需要手动配置任何测试用例。所有文件都被递归扫描，所有以“test”开头的函数名称都会被自动执行。
- en: '**Fixtures and Parametrization**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**夹具和参数化**'
- en: During test cases, specific requirements may not always be accessible. For example,
    it is inefficient to fetch a resource from the network for testing, and internet
    access may not be available when running a test case. In such scenarios, if we
    want to execute a test that makes internet requests, we will need to add stubs
    that create a dummy response for that specific part. Moreover, it may be necessary
    to execute a function multiple times with different arguments to cover all possible
    edge cases. PyTest makes it simple to implement this using fixtures and parametrization
    decorators.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在测试用例中，特定的需求可能并不总是可以访问。例如，从网络获取资源进行测试效率低下，并且在运行测试用例时可能没有互联网访问。在这种情况下，如果我们想执行一个需要互联网请求的测试，我们需要添加存根以创建该特定部分的虚拟响应。此外，可能需要使用不同的参数多次执行函数，以覆盖所有可能的边界情况。PyTest
    使用 fixtures 和参数化装饰器使实现变得简单。
- en: Installation
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'PyTest is available as a PyPI package that can be easily installed using the
    Python package manager. To set up PyTest, it is good to start with a fresh environment.
    To create a new Python virtual environment, use the below commands:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: PyTest 作为 PyPI 包提供，可以通过 Python 包管理器轻松安装。为了设置 PyTest，最好从一个新的环境开始。要创建新的 Python
    虚拟环境，请使用以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To set up the PyTest module, you can install the official PyPI package using
    pip:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置 PyTest 模块，可以使用 pip 安装官方 PyPI 包：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running your First Test Case
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行你的第一个测试用例
- en: Let’s dive into writing and running your very first test case in Python using
    PyTest. We'll start from scratch and build a simple test to get a feel for how
    it works.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨如何使用 PyTest 编写和运行你的第一个测试用例。我们将从零开始，构建一个简单的测试，以便了解其工作原理。
- en: Structuring a Python Project
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结构化一个 Python 项目
- en: Before we start writing tests, it's essential to organize our project properly.
    This helps keep things tidy and manageable, especially as our projects grow. We'll
    follow a common practice of separating our application code from our test code.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写测试之前，必须妥善组织我们的项目。这有助于保持整洁和可管理，尤其是当项目扩大时。我们将遵循将应用程序代码与测试代码分开的常见做法。
- en: 'Here''s how we''ll structure our project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是我们将如何结构化我们的项目：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our root directory *pytest_demo* contains separate src and tests directories.
    Our application code resides in src, while our test code lives in tests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的根目录 *pytest_demo* 包含单独的 src 和 tests 目录。我们的应用程序代码位于 src，而测试代码则位于 tests。
- en: Writing a Simple Program and Its Associated Test Case
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写一个简单的程序及其关联的测试用例
- en: 'Now, let’s create a basic sorting program using the bubble sort algorithm.
    We''ll place this in src/sorting.py:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用冒泡排序算法创建一个基本的排序程序。我们将其放置在 src/sorting.py 中：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We've implemented a basic Bubble Sort algorithm, a simple yet effective way
    to sort elements in a list by repeatedly swapping adjacent elements if they are
    in the wrong order.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个基本的冒泡排序算法，这是一种简单而有效的方式，通过重复交换相邻元素（如果它们的顺序错误）来对列表中的元素进行排序。
- en: Now, let's ensure our implementation works by writing comprehensive test cases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过编写全面的测试用例来确保我们的实现有效。
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In our test file, we've written three different test cases. Note how each function
    name starts with the *test* prefix, which is a rule PyTest follows to recognize
    test functions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的测试文件中，我们编写了三个不同的测试用例。注意每个函数名称都以 *test* 前缀开头，这是 PyTest 用来识别测试函数的规则。
- en: We import the bubble sort implementation from the source code in the test file.
    This can now be used in our test cases. Each test must have an *"assert"* statement
    to check if it works as expected. We give the sorting function a list that's not
    in order and compare its output with what we expect. If they match, the test passes;
    otherwise, it fails.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从源代码中导入冒泡排序的实现到测试文件中。这现在可以在我们的测试用例中使用。每个测试必须有一个 *"assert"* 语句来检查是否按预期工作。我们给排序函数一个未排序的列表，并将其输出与预期进行比较。如果匹配，测试通过；否则，测试失败。
- en: In addition, We've also included two simple tests, one that always passes and
    another that always fails. These are just placeholder functions that are useful
    for checking if our testing setup is working correctly.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还包括了两个简单的测试，一个始终通过，另一个始终失败。这些只是占位函数，对于检查我们的测试设置是否正常工作很有用。
- en: Executing Tests and Understanding the Output
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 执行测试并理解输出
- en: 'We can now run our tests from the command line. Navigate to your project root
    directory and run:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以从命令行运行测试。导航到你的项目根目录并运行：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will recursively search all files in the tests directory. All functions
    and classes that start with the test prefix will be automatically recognized as
    a test case. From our tests directory, it will search in the test_sorting.py file
    and run all three test functions.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这将递归地搜索`tests`目录中的所有文件。所有以 `test` 前缀开头的函数和类将被自动识别为测试用例。从我们的 `tests` 目录中，它将搜索
    `test_sorting.py` 文件并运行所有三个测试函数。
- en: 'After running the tests, you’ll see an output similar to this:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 运行测试后，你会看到类似于以下的输出：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When running the PyTest command line utility, it displays the platform metadata
    and the total test cases that will be run. In our example, three test cases were
    added from the test_sorting.py file. Test cases are executed sequentially. A dot
    (".") represents that the test case passed whereas an “F” represents a failed
    test case.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行 PyTest 命令行工具时，它会显示平台元数据和将要运行的测试用例总数。在我们的例子中，从 `test_sorting.py` 文件中添加了三个测试用例。测试用例是顺序执行的。一个点（"."）表示测试用例通过，而
    "F" 表示测试用例失败。
- en: If a test case fails, PyTest provides a traceback, which shows the specific
    line of code and the arguments that caused the error. Once all the test cases
    have been executed, PyTest presents a final report. This report includes the total
    execution time and the number of test cases that passed and failed. This summary
    gives you a clear overview of the test results.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个测试用例失败，PyTest 会提供一个回溯，显示导致错误的特定代码行和参数。所有测试用例执行完毕后，PyTest 会提供最终报告。该报告包括总执行时间以及通过和失败的测试用例数量。这个总结让你清晰地了解测试结果。
- en: Function Parametrization for Multiple Test Cases
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多测试用例的函数参数化
- en: In our example, we test only one scenario for the sorting algorithm. Is that
    sufficient? Obviously not! We need to test the function with multiple examples
    and edge cases to ensure there are no bugs in our code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们仅测试了排序算法的一个场景。这是否足够？显然不！我们需要用多个示例和边界情况来测试函数，以确保代码中没有错误。
- en: 'PyTest makes this process easy for us. We use the parametrization decorator
    provided by PyTest to add multiple test cases for a single function. The code
    appears as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: PyTest 使这个过程变得简单。我们使用 PyTest 提供的参数化装饰器为一个函数添加多个测试用例。代码如下：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the updated code, we have modified the test_sorting function using the *pytest.mark.parametrize*
    decorator. This decorator allows us to pass multiple sets of input values to the
    test function. The decorator expects two parameters: a string representing the
    comma-separated names of the function parameters, and a list of tuples where each
    tuple contains the input values for a specific test case.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新的代码中，我们使用了*pytest.mark.parametrize*装饰器来修改了`test_sorting`函数。这个装饰器允许我们将多个输入值集传递给测试函数。该装饰器需要两个参数：一个字符串，表示函数参数的逗号分隔名称，以及一个包含多个元组的列表，其中每个元组包含特定测试用例的输入值。
- en: Note that the function parameters have the same names as the string passed to
    the decorator. This is a strict requirement to ensure the correct mapping of input
    values. If the names don't match, an error will be raised during test case collection.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，函数参数的名称与传递给装饰器的字符串名称相同。这是确保输入值正确映射的严格要求。如果名称不匹配，在测试用例收集期间将会引发错误。
- en: 'With this implementation, the test_sorting function will be executed four times,
    once for each set of input values specified in the decorator. Now, let''s take
    a look at the output of the test cases:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个实现，`test_sorting` 函数将被执行四次，每次针对装饰器中指定的一个输入值集。现在，让我们来看一下测试用例的输出：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this run, a total of six test cases were executed, including four from the
    test_sorting function and two dummy functions. As expected, only the dummy test
    case failed.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次运行中，总共执行了六个测试用例，包括来自 `test_sorting` 函数的四个测试用例和两个虚拟函数。如预期的那样，只有虚拟测试用例失败了。
- en: We can now confidently say that our sorting implementation is correct :)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以自信地说我们的排序实现是正确的 :)
- en: Fun Practice Task
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有趣的练习任务
- en: 'In this article, we have introduced the PyTest module and demonstrated its
    usage by testing a bubble sort implementation with multiple test cases. We covered
    the basic functionality of writing and executing test cases using the command
    line utility. This should be enough to get you started with implementing testing
    for your own code bases. To make your understanding of PyTest better, here''s
    a fun practice task for you:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们介绍了 PyTest 模块，并通过测试一个带有多个测试用例的冒泡排序实现来演示其用法。我们覆盖了使用命令行工具编写和执行测试用例的基本功能。这应该足够让你开始为自己的代码库实现测试。为了更好地理解
    PyTest，给你一个有趣的练习任务：
- en: 'Implement a function called **validate_password** that takes a password as
    input and checks if it meets the following criteria:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 实现一个名为**validate_password**的函数，该函数接受一个密码作为输入，并检查它是否满足以下标准：
- en: Contains at least 8 characters
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含至少 8 个字符
- en: Contains at least one uppercase letter
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含至少一个大写字母
- en: Contains at least one lowercase letter
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含至少一个小写字母
- en: Contains at least one digit
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含至少一个数字
- en: 'Contains at least one special character (e.g., !, @, #, $, %)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含至少一个特殊字符（例如 !、@、#、$、%）
- en: Write PyTest test cases to validate the correctness of your implementation,
    covering various edge cases. Good Luck!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编写 PyTest 测试用例以验证你的实现的正确性，涵盖各种边界情况。祝好运！
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一名机器学习工程师和技术作家，对数据科学以及人工智能与医学的交汇处有着深厚的热情。她合著了电子书《用 ChatGPT 最大化生产力》。作为
    2022 年 APAC 区的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认定为 Teradata 多样性技术学者、Mitacs
    Globalink 研究学者和哈佛 WeCode 学者。Kanwal 是变革的坚定倡导者，创立了 FEMCodes，以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[How to Make Python Code Run Incredibly Fast](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何让 Python 代码运行得非常快](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)'
- en: '[Schedule & Run ETLs with Jupysql and GitHub Actions](https://www.kdnuggets.com/2023/05/schedule-run-etls-jupysql-github-actions.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Jupysql 和 GitHub Actions 计划与运行 ETL](https://www.kdnuggets.com/2023/05/schedule-run-etls-jupysql-github-actions.html)'
- en: '[Distribute and Run LLMs with llamafile in 5 Simple Steps](https://www.kdnuggets.com/distribute-and-run-llms-with-llamafile-in-5-simple-steps)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过 llamafile 以 5 个简单步骤分发和运行 LLMs](https://www.kdnuggets.com/distribute-and-run-llms-with-llamafile-in-5-simple-steps)'
- en: '[Learn How to Run Alpaca-LoRA on Your Device in Just a Few Steps](https://www.kdnuggets.com/2023/05/learn-run-alpacalora-device-steps.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在你的设备上仅需几个步骤即可运行 Alpaca-LoRA](https://www.kdnuggets.com/2023/05/learn-run-alpacalora-device-steps.html)'
- en: '[Run an LLM Locally with LM Studio](https://www.kdnuggets.com/run-an-llm-locally-with-lm-studio)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 LM Studio 在本地运行 LLM](https://www.kdnuggets.com/run-an-llm-locally-with-lm-studio)'
- en: '[Getting Started with Python Generators](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 生成器入门](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)'
