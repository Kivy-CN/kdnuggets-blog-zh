["```py\n**# install slim version (default)** pip install pycaret**# install the full version**\npip install pycaret[full]\n```", "```py\n**# load the dataset from pycaret** from pycaret.datasets import get_data\ndata = get_data('diamond')\n```", "```py\n**# plot scatter carat_weight and Price**\nimport plotly.express as px\nfig = px.scatter(x=data['Carat Weight'], y=data['Price'], \n                 facet_col = data['Cut'], opacity = 0.25, template = 'plotly_dark', trendline='ols',\n                 trendline_color_override = 'red', title = 'SARAH GETS A DIAMOND - A CASE STUDY')\nfig.show()\n```", "```py\n**# plot histogram**\nfig = px.histogram(data, x=[\"Price\"], template = 'plotly_dark', title = 'Histogram of Price')\nfig.show()\n```", "```py\nimport numpy as np**# create a copy of data**\ndata_copy = data.copy()**# create a new feature Log_Price**\ndata_copy['Log_Price'] = np.log(data['Price'])**# plot histogram**\nfig = px.histogram(data_copy, x=[\"Log_Price\"], title = 'Histgram of Log Price', template = 'plotly_dark')\nfig.show()\n```", "```py\n**# initialize setup**\nfrom pycaret.regression import *\ns = setup(data, target = 'Price', transform_target = True, log_experiment = True, experiment_name = 'diamond')\n```", "```py\n**# compare all models**\nbest = compare_models()\n```", "```py\n**# check the residuals of trained model**\nplot_model(best, plot = 'residuals_interactive')\n```", "```py\n**# check feature importance**\nplot_model(best, plot = 'feature')\n```", "```py\n**# finalize the model**\nfinal_best = finalize_model(best)**# save model to disk** save_model(final_best, 'diamond-pipeline')\n```", "```py\nsave_model(final_best, 'c:/users/moez/models/diamond-pipeline'\n```", "```py\n**# within notebook (notice ! sign infront)** !mlflow ui**# on command line in the same folder** mlflow ui\n```", "```py\n**# load model**\nfrom pycaret.regression import load_model\npipeline = load_model('C:/Users/moezs/mlruns/1/b8c10d259b294b28a3e233a9d2c209c0/artifacts/model/model')**# print pipeline** print(pipeline)\n```", "```py\n**# create a copy of data and drop Price** data2 = data.copy()\ndata2.drop('Price', axis=1, inplace=True)**# generate predictions** from pycaret.regression import predict_model\npredictions = predict_model(pipeline, data=data2)\npredictions.head()\n```"]