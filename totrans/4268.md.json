["```py\n**# install slim version (default)** pip install pycaret**# install the full version**\npip install pycaret[full]\n```", "```py\n**# read data from pycaret repo** from pycaret.datasets import get_data\ndata = get_data('insurance')\n```", "```py\n**# initialize setup** from pycaret.regression import *\ns = setup(data, target = 'charges')\n```", "```py\n**# check all the available models** models()\n```", "```py\n**# train decision tree** dt = create_model('dt')\n```", "```py\nprint(dt)\n```", "```py\n**# train multiple models**\nmultiple_models = [create_model(i) for i in ['dt', 'lr', 'xgboost']]**# check multiple_models** type(multiple_models), len(multiple_models)\n>>> (list, 3)print(multiple_models)\n```", "```py\n**# compare all models**\nbest_model = compare_models()\n```", "```py\n**# check the best model**\nprint(best_model)\n```", "```py\n**# predict on hold-out** pred_holdout = predict_model(best_model)\n```", "```py\n**# create copy of data drop target column**\ndata2 = data.copy()\ndata2.drop('charges', axis=1, inplace=True)**# generate predictions** predictions = predict_model(best_model, data = data2)\n```", "```py\n**# install gplearn** pip install gplearn\n```", "```py\n**# import untrained estimator**\nfrom gplearn.genetic import SymbolicRegressor\nsc = SymbolicRegressor()**# train using create_model** sc_trained = create_model(sc)\n```", "```py\nprint(sc_trained)\n```", "```py\n**# check hold-out score** pred_holdout_sc = predict_model(sc_trained)\n```", "```py\n**# install ngboost**\npip install ngboost\n```", "```py\n**# import untrained estimator**\nfrom ngboost import NGBRegressor\nng = NGBRegressor()**# train using create_model** ng_trained = create_model(ng)\n```", "```py\nprint(ng_trained)\n```", "```py\n**# create custom estimator**\nimport numpy as npfrom sklearn.base import BaseEstimatorclass MyOwnModel(BaseEstimator):\n\n    def __init__(self):\n        self.mean = 0\n\n    def fit(self, X, y):\n        self.mean = y.mean()\n        return self\n\n    def predict(self, X):\n        return np.array(X.shape[0]*[self.mean])\n```", "```py\n**# import MyOwnModel class**\nmom = MyOwnModel()**# train using create_model** mom_trained = create_model(mom)\n```", "```py\n**# generate predictions on data**\npredictions = predict_model(mom_trained, data=data)\n```"]