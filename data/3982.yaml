- en: How to Use Conditional Formatting in Pandas to Enhance Data Visualization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在 Pandas 中使用条件格式化来提升数据可视化
- en: 原文：[https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization](https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization](https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization)
- en: '![Conditional Formatting in Pandas](../Images/83a5bcdbfe20e5be1658c142e925ff1f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas 中的条件格式化](../Images/83a5bcdbfe20e5be1658c142e925ff1f.png)'
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源 | DALLE-3 & Canva
- en: While pandas is mainly used for data manipulation and analysis, it can also
    provide basic data visualization capabilities. However, plain dataframes can make
    the information look cluttered and overwhelming. So, what can be done to make
    it better? If you've worked with Excel before, you know that you can highlight
    important values with different colors, font styles, etc. The idea of using these
    styles and colors is to communicate the information in an effective way. You can
    do similar work with pandas dataframes too, using conditional formatting and the
    Styler object.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 pandas 主要用于数据处理和分析，但它也可以提供基本的数据可视化功能。然而，普通的数据框可能会使信息显得杂乱无章。那怎么做才能改善呢？如果你以前使用过
    Excel，你知道可以用不同的颜色、字体样式等来突出重要值。使用这些样式和颜色的目的是有效地传达信息。你也可以在 pandas 数据框中做类似的工作，使用条件格式化和
    Styler 对象。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this article, we will see what conditional formatting is and how to use it
    to enhance your data readability.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨什么是条件格式化以及如何使用它来增强数据的可读性。
- en: Conditional Formatting
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件格式化
- en: Conditional formatting is a feature in pandas that allows you to format the
    cells based on some criteria. You can easily highlight the outliers, visualize
    trends, or emphasize important data points using it. The Styler object in pandas
    provides a convenient way to apply conditional formatting. Before covering the
    examples, let's take a quick look at how the Styler object works.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 条件格式化是 pandas 中的一个功能，允许你根据某些标准格式化单元格。你可以轻松突出异常值、可视化趋势或强调重要数据点。pandas 中的 Styler
    对象提供了一种方便的方法来应用条件格式化。在介绍示例之前，让我们快速了解一下 Styler 对象的工作原理。
- en: What is the Styler Object & How Does It Work?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Styler 对象是什么？它是如何工作的？
- en: You can control the visual representation of the dataframe by using the `property.
    This property returns a Styler object, which is responsible for styling the dataframe.
    The Styler object allows you to manipulate the CSS properties of the dataframe
    to create a visually appealing and informative display. The generic syntax is
    as follows:`
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用`property`来控制数据框的视觉呈现。这个属性返回一个 Styler 对象，负责数据框的样式设置。Styler 对象允许你操控数据框的
    CSS 属性，以创建视觉上吸引人且信息丰富的展示。其通用语法如下：
- en: '[PRE0] df.style.<method>(<arguments>) [PRE1] import pandas as pd  import numpy
    as np    data = {''Date'': [''2024-03-05'', ''2024-03-06'', ''2024-03-07'', ''2024-03-08'',
    ''2024-03-09'', ''2024-03-10''],          ''Cost Price'': [100, 120, 110, 1500,
    1600, 1550],          ''Satisfaction Score'': [90, 80, 70, 95, 85, 75],          ''Sales
    Amount'': [1000, 800, 1200, 900, 1100, None]}    df = pd.DataFrame(data)  df [PRE2]
    # Highlighting Maximum and Minimum Values  df.style.highlight_max(color=''green'',
    axis=0 , subset=[''Cost Price'', ''Satisfaction Score'', ''Sales Amount'']).highlight_min(color=''red'',
    axis=0 , subset=[''Cost Price'', ''Satisfaction Score'', ''Sales Amount'']) [PRE3]
    # Applying Color Gradients  df.style.background_gradient(cmap=''viridis'', subset=[''Satisfaction
    Score'']) [PRE4] # Highlighting Null or Missing Values  df.style.highlight_null(''yellow'',
    subset=[''Sales Amount'']) [PRE5] import pandas as pd  import numpy as np    #
    House prices dataset  df = pd.DataFrame({     ''Neighborhood'': [''H1'', ''H2'',
    ''H3'', ''H4'', ''H5'', ''H6'', ''H7''],     ''Price'': [50, 300, 360, 390, 420,
    450, 1000],  })    # Calculate Q1 (25th percentile), Q3 (75th percentile) and
    Interquartile Range (IQR)  q1 = df[''Price''].quantile(0.25)  q3 = df[''Price''].quantile(0.75)  iqr
    = q3 - q1    # Bounds for outliers  lower_bound = q1 - 1.5 * iqr  upper_bound
    = q3 + 1.5 * iqr    # Custom function to highlight outliers  def highlight_outliers(val):     if
    val < lower_bound or val > upper_bound:        return ''background-color: yellow;
    font-weight: bold; color: black''     else:        return ''''    df.style.applymap(highlight_outliers,
    subset=[''Price''])  [PRE6] import pandas as pd    # Dataset of Company''s Sales  data
    = {''date'': [''2024-02-10'', ''2024-02-11'', ''2024-02-12'', ''2024-02-13'',
    ''2024-02-14''],          ''sales'': [100, 105, 110, 115, 125]}    df = pd.DataFrame(data)    #
    Daily percentage change  df[''pct_change''] = df[''sales''].pct_change() * 100    #
    Highlight the day if sales increased by more than 5%  def highlight_trend(row):      return
    [''background-color: green; border: 2px solid black; font-weight: bold'' if row[''pct_change'']
    > 5 else '''' for _ in row]    df.style.apply(highlight_trend, axis=1) [PRE7]
    import pandas as pd    # Dataset of people  data = {      ''age'': [30, 35, 40,
    45, 50],      ''income'': [60000, 66000, 70000, 75000, 100000],      ''spending'':
    [10000, 15000, 20000, 18000, 12000]  }    df = pd.DataFrame(data)    # Calculate
    the correlation matrix  corr_matrix = df.corr()    # Highlight highly correlated
    columns  def highlight_corr(val):      if val != 1.0 and abs(val) > 0.5:   # Exclude
    self-correlation          return ''background-color: blue; text-decoration: underline''      else:          return
    ''''    corr_matrix.style.applymap(highlight_corr) [PRE8]`'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0] df.style.<method>(<arguments>) [PRE1] 导入 pandas 作为 pd  导入 numpy 作为 np    数据
    = {''日期'': [''2024-03-05'', ''2024-03-06'', ''2024-03-07'', ''2024-03-08'', ''2024-03-09'',
    ''2024-03-10''],          ''成本价格'': [100, 120, 110, 1500, 1600, 1550],          ''满意度评分'':
    [90, 80, 70, 95, 85, 75],          ''销售金额'': [1000, 800, 1200, 900, 1100, None]}    df
    = pd.DataFrame(data)  df [PRE2] # 高亮显示最大值和最小值  df.style.highlight_max(color=''green'',
    axis=0 , subset=[''成本价格'', ''满意度评分'', ''销售金额'']).highlight_min(color=''red'',
    axis=0 , subset=[''成本价格'', ''满意度评分'', ''销售金额'']) [PRE3] # 应用颜色渐变  df.style.background_gradient(cmap=''viridis'',
    subset=[''满意度评分'']) [PRE4] # 高亮显示空值或缺失值  df.style.highlight_null(''yellow'', subset=[''销售金额''])
    [PRE5] 导入 pandas 作为 pd  导入 numpy 作为 np    # 房价数据集  df = pd.DataFrame({     ''社区'':
    [''H1'', ''H2'', ''H3'', ''H4'', ''H5'', ''H6'', ''H7''],     ''价格'': [50, 300,
    360, 390, 420, 450, 1000],  })    # 计算 Q1 (25百分位数), Q3 (75百分位数) 和四分位距 (IQR)  q1
    = df[''价格''].quantile(0.25)  q3 = df[''价格''].quantile(0.75)  iqr = q3 - q1    #
    异常值的界限  lower_bound = q1 - 1.5 * iqr  upper_bound = q3 + 1.5 * iqr    # 自定义函数来高亮显示异常值  def
    highlight_outliers(val):     if val < lower_bound or val > upper_bound:        return
    ''background-color: yellow; font-weight: bold; color: black''     else:        return
    ''''    df.style.applymap(highlight_outliers, subset=[''价格''])  [PRE6] 导入 pandas
    作为 pd    # 公司销售数据集  数据 = {''日期'': [''2024-02-10'', ''2024-02-11'', ''2024-02-12'',
    ''2024-02-13'', ''2024-02-14''],          ''销售'': [100, 105, 110, 115, 125]}    df
    = pd.DataFrame(data)    # 每日百分比变化  df[''pct_change''] = df[''销售''].pct_change()
    * 100    # 如果销售增长超过 5%，则高亮显示该天  def highlight_trend(row):      return [''background-color:
    green; border: 2px solid black; font-weight: bold'' if row[''pct_change''] > 5
    else '''' for _ in row]    df.style.apply(highlight_trend, axis=1) [PRE7] 导入 pandas
    作为 pd    # 人员数据集  数据 = {      ''年龄'': [30, 35, 40, 45, 50],      ''收入'': [60000,
    66000, 70000, 75000, 100000],      ''支出'': [10000, 15000, 20000, 18000, 12000]  }    df
    = pd.DataFrame(data)    # 计算相关矩阵  corr_matrix = df.corr()    # 高亮显示高度相关的列  def
    highlight_corr(val):      if val != 1.0 and abs(val) > 0.5:   # 排除自相关          return
    ''background-color: blue; text-decoration: underline''      else:          return
    ''''    corr_matrix.style.applymap(highlight_corr) [PRE8]'
