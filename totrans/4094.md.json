["```py\nimport pandas as pd\n\n# Load dataset from csv to DataFrame\ndf = pd.read_csv('dataset.csv')\n\n# Initialize dictionary to track string to numeric conversions\nconversions = {}\n\n# Convert string values to numeric and track conversions in dictionary\nfor col in df.columns:\n    if df[col].dtype == object:\n        conversions[col] = {val: i for i, val in enumerate(df[col].unique())}\n        df[col] = df[col].map(conversions[col])\n\n# Check for missing values\nmissing_values = df.isna().sum()\n\n# Impute missing values for records with one missing value\nfor col in missing_values[missing_values == 1].index:\n    df[col].fillna(df[col].median(), inplace=True)\n\n# Drop records with more than one missing value\ndf.dropna(thresh=len(df.columns) - 1, inplace=True)\n\n# Split dataset into test and training sets\nfrom sklearn.model_selection import train_test_split\ntrain_df, test_df = train_test_split(df, test_size=0.2)\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndef load_and_convert_data(file_path):\n    # Load dataset from csv to DataFrame\n    df = pd.read_csv(file_path)\n\n    # Initialize dictionary to track string to numeric conversions\n    conversions = {}\n\n    # Convert string values to numeric and track conversions in dictionary\n    for col in df.columns:\n        if df[col].dtype == object:\n            conversions[col] = {val: i for i, val in enumerate(df[col].unique())}\n            df[col] = df[col].map(conversions[col])\n\n    return df, conversions\n\ndef handle_missing_values(df):\n    # Check for missing values\n    missing_values = df.isna().sum()\n\n    # Impute missing values for records with one missing value\n    for col in missing_values[missing_values == 1].index:\n        df[col].fillna(df[col].median(), inplace=True)\n\n    # Drop records with more than one missing value\n    df.dropna(thresh=len(df.columns) - 1, inplace=True)\n\n    return df\n\ndef split_data(df, test_size):\n    return train_test_split(df, test_size=test_size)\n\n# Use the functions\nfile_path = \"dataset.csv\"\ndf, conversions = load_and_convert_data(file_path)\ndf = handle_missing_values(df)\ntrain_df, test_df = split_data(df, 0.2)\n```", "```py\nimport pandas as pd\nimport argparse\nfrom sklearn.model_selection import train_test_split\n\ndef load_and_convert_data(file_path):\n    # Load dataset from csv to DataFrame\n    df = pd.read_csv(file_path)\n\n    # Initialize dictionary to track string to numeric conversions\n    conversions = {}\n\n    # Convert string values to numeric and track conversions in dictionary\n    for col in df.columns:\n        if df[col].dtype == object:\n            conversions[col] = {val: i for i, val in enumerate(df[col].unique())}\n            df[col] = df[col].map(conversions[col])\n\n    return df, conversions\n\ndef handle_missing_values(df, threshold):\n    # Check for missing values\n    missing_values = df.isna().sum()\n\n    # Impute missing values for records with one missing value\n    for col in missing_values[missing_values == 1].index:\n        df[col].fillna(df[col].median(), inplace=True)\n\n    # Drop records with more than threshold missing value\n    df.dropna(thresh=len(df.columns) - threshold, inplace=True)\n\n    return df\n\ndef split_data(df, test_size):\n    return train_test_split(df, test_size=test_size)\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"file_path\", help=\"path/name of the dataset csv file\")\n    parser.add_argument(\"test_size\", help=\"train/test split size\", type=float)\n    parser.add_argument(\"threshold\", help=\"threshold for the number of missing values per record\", type=int)\n    args = parser.parse_args()\n\n    # Use the functions\n    df, conversions = load_and_convert_data(args.file_path)\n    df = handle_missing_values(df, args.threshold)\n    train_df, test_df = split_data(df, args.test_size)\n```", "```py\nimport pandas as pd\nimport streamlit as st\nfrom sklearn.model_selection import train_test_split\n\ndef load_and_convert_data(file_path):\n    # Load dataset from csv to DataFrame\n    df = pd.read_csv(file_path)\n\n    # Initialize dictionary to track string to numeric conversions\n    conversions = {}\n\n    # Convert string values to numeric and track conversions in dictionary\n    for col in df.columns:\n        if df[col].dtype == object:\n            conversions[col] = {val: i for i, val in enumerate(df[col].unique())}\n            df[col] = df[col].map(conversions[col])\n\n    return df, conversions\n\ndef handle_missing_values(df, threshold):\n    # Check for missing values\n    missing_values = df.isna().sum()\n\n    # Impute missing values for records with one missing value\n    for col in missing_values[missing_values == 1].index:\n        df[col].fillna(df[col].median(), inplace=True)\n\n    # Drop records with more than threshold missing value\n    df.dropna(thresh=len(df.columns) - threshold, inplace=True)\n\n    return df\n\ndef split_data(df, test_size):\n    return train_test_split(df, test_size=test_size)\n\ndef main():\n    st.set_page_config(page_title=\"Data Preprocessing\", page_icon=\":guardsman:\", layout=\"wide\")\n    st.title(\"Data Preprocessing\")\n\n    file_path = st.text_input(\"Enter the path/name of the dataset csv file: \")\n    test_size = st.number_input(\"Enter the train/test split size (decimal between 0 and 1): \", step=0.01, value=0.2)\n    threshold = st.number_input(\"Enter the threshold for the number of missing values per record: \", step=1, value=1)\n\n    if st.button(\"Process Data\"):\n        df, conversions = load_and_convert_data(file_path)\n        df = handle_missing_values(df, threshold)\n        train_df, test_df = split_data(df, test_size)\n        st.success(\"Data preprocessing completed!\")\n\nif __name__ == '__main__':\n    main()\n```"]