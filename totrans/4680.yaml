- en: 'Data Visualization in Python: Matplotlib vs Seaborn'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html](https://www.kdnuggets.com/2019/04/data-visualization-python-matplotlib-seaborn.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)![matplotlib-vs-seaborn](../Images/46cbf075d0af69589d9b5b1f6db550f1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python offers a variety of packages for plotting data. This tutorial will use
    the following packages to demonstrate Python''s plotting capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Matplotlib](https://matplotlib.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Seaborn](https://seaborn.pydata.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the above code chunk, we import the Matplotliib library with the `PyPlot`
    module as `plt` This is to make it easier to execute commmands as we will see
    later on in the tutorial. `PyPlot` contains a range of commands required to create
    and edit plots. `%matplotlib inline` is run so that the plot will show underneath
    the code chunk automatically when it is executed. Otherwise the user will need
    to type `plt.show()` everytime a new plot is created. This functionality is exclusive
    to Jupyter Notebook/IPython. Matplotlib's highly customizable code structure makes
    it a great guide to other plotting libraries. Lets see how we can generate a scatter
    plot from matplotlib.
  prefs: []
  type: TYPE_NORMAL
- en: '***A handy tip is that whenever matplotlib is executed, the output will always
    include a text output that can be very visually unappealing. To fix this, add
    a semicolon - '';'' at the end of the last line of code when executing a code
    chunk to generate a figure.***'
  prefs: []
  type: TYPE_NORMAL
- en: The dataset used is the [Bike Sharing Dataset](https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset)
    from the UCI Machine Learning Repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Matplotlib: Scatter Plot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A scatter plot is one of the most influential, informative, and versatile plots
    in your arsenal. It can convey an array of information to the user without much
    work (as demonstrated below)
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.scatter()` will give us a scatter plot of the data we pass in as the initial
    arguments. `temp` is the x-axis and `cnt` is the y-axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c` determines the colors of the data points. Because we passed a string -
    ''season'' which is a column of the dataframe day, the colors correspond to the
    different seasons. This is a quick and easy method to group data in a visual format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![matplotlib-scatterplot](../Images/a237310524eecb5772508a747c5001e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Lets see the information that it shows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**   There were more than 8000 bike rentals at some point in time.'
  prefs: []
  type: TYPE_NORMAL
- en: The normalized temperature has gone above 0.8.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of bike rentals does not differ much with temperature or season.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a positive linear relationship between bike rentals and normalized
    temperature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**This graph does indeed give us much information. However, the graph does
    not produce a legend, which makes it difficult to decipher anything about the
    seasonal groups. This is due to the Matplotlib being unable to produce a legend
    when a plot is made in this fashion. In the next section we will see how the above
    plot is hiding and even misleading viewers.**'
  prefs: []
  type: TYPE_NORMAL
- en: '*Lets look at the same plot that has undergone thorough editing. The goal here
    will be to produce a legend to decipher differences between the groups.*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![matplotlib-scatterplot-2](../Images/ead72af98b85416fe378d8513bddccf2.png)'
  prefs: []
  type: TYPE_IMG
- en: '`plt.rcParams[''figure.figsize''] = [15, 10]` allows to control the size of
    the entire plot. This corresponds to a *15∗10 (length∗width)* plot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fontdict` is a dictionary that can be passed in as arguments for labeling
    axes. `fontdict` for the title, `fontdictx` for the x-axis and `fontdicty` for
    the y-axis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are now 4 `plt.scatter()` function calls corresponding to one of the four
    seasons. This is seen again in the data argument in which it has been subsetted
    to correspond to a single season. marker and color arguments correspond to using
    a `'o'` to visually represent a data point and the respective color of that marker.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[plt.legend()](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html)`
    is where we can pass our arguments to make a legend. The first two arguments are
    handles: the actual plots to be represented in the legend and labels: the names
    corresponding to each plot that will be shown in the legend. scatterpoints are
    the size of each marker for the scatter plot. `bbox_to_anchor=(1, 0.7), loc=2,
    borderaxespad=1`. These 3 arguments are used in tandem to correspond to the location
    of the legend; click on the link at the start of this sentence to find out the
    nature of these arguments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we can distinguish the seasons to check for more underlying information.
    However, even after adding these extra layers, the plot can still hide information
    and be prone to misinterpretation.
  prefs: []
  type: TYPE_NORMAL
- en: 'This plot:'
  prefs: []
  type: TYPE_NORMAL
- en: '**   had data overlapping each other.'
  prefs: []
  type: TYPE_NORMAL
- en: was cluttered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: did not reveal any discernable differences among the seasonality of bike rentals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: hid patterns such as bike rentals increasing in the spring and summer as temperatures
    rose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: shows an overall positive trend between total bike rentals and temperature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: does not clearly show which season had the lowest temperature in comparison.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subplots
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating subplots are probably one of the most attractive and professional charting
    techniques in the industry. Subplots are necessary when a single plot is overcrowded
    with information. That information cannot be assessed in that state.
  prefs: []
  type: TYPE_NORMAL
- en: '***Faceting*** is the process of creating multiple plots of a graph that share
    the same axes. Faceting is one of the most versatile techniques of data visualization.
    Faceted plots can convey information in many dimensions and can reveal information
    that was previously hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.figure()` will be used to create an empty plot canvas as explained before.
    It is saved as fig.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fig.add_subplot()` will be repeated 4 times to correspond to a respective
    season. The arguments correspond to `nrows`, `ncols`, index. For example in `ax1`
    it corresponds to the 1st plot of the figure (index starts at 1 in the upper left
    corner and increases to the right.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The remaining function calls are either self-explanatory or have been previously
    covered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![scatterplot-facet-matplotlib-subplot](../Images/49ac0e0f067f2c92418c8e2560bd6d23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can analyze each group independently and as we will see more effectively.
    First thing we should notice is that the relationship between temperature and
    bike rentals differs between seasons:'
  prefs: []
  type: TYPE_NORMAL
- en: '**   Positive linear relationship in the Spring.'
  prefs: []
  type: TYPE_NORMAL
- en: Quadratic non-linear relationship in the Winter and Summer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Weak Positive to No discernible relationship in Autumn.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, again there is a chance of misleading the viewers and it is for less
    than obvious reasons. The axes are all different among the 4 plots. Most people
    will not realize that this can cause misleading insights if no caution is taken.
    See below on how this issue can be fixed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![scatterplot-facet-subplots-sharex](../Images/504f53d184b6c9740a5a9194f8b63ad6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now this plot grid has been adjusted to share the same x-axis as Summer because
    it has a wider range for temperature. Now interestingly, this data shows us some
    new insights:'
  prefs: []
  type: TYPE_NORMAL
- en: '**   Spring had the lowest temperatures.'
  prefs: []
  type: TYPE_NORMAL
- en: Fall/Autumn had the highest temperatures.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The total number of bike rentals and temperature seem to have a quadratic relationship
    in the Summer and Autumn.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less bikes are rented in low temperatures regardless of season.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a clear positive linear relationship between temperature and total
    bike rentals in the Spring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There seems to be a mild negative linear relationship between temperature and
    bike rentals in the Fall/Autumn.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![scatterplot-facet-subplots-sharey](../Images/8e883df36b98acc495ecffa2249c253d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Re-angling/juxtaposing the plots now show another perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '**   All seasons had over 8000 bike rentals at some point in time.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a large clustering in Autumn and Spring compared to the other seasons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Winter and Summer had the most varied amount of bike rentals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Do not attempt to decipher a relationship between the variables from this
    angle. It can mislead you again because now it looks like there is a negative
    linear relationship between bike rentals and temperature in both Spring and Summer
    and we saw before that this is not the case.***'
  prefs: []
  type: TYPE_NORMAL
- en: Here is a link to an intuitive tutorial by [Real Python on using Matplotlib](https://realpython.com/python-matplotlib-guide/).
  prefs: []
  type: TYPE_NORMAL
- en: Seaborn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The seaborn package was developed based on the Matplotlib library. It is used
    to create more attractive and informative statistical graphics. While seaborn
    is a different package, it can also be used to develop the attractiveness of matplotlib
    graphics.
  prefs: []
  type: TYPE_NORMAL
- en: While matplotlib is great, we always want to do better. Run the code chunk below
    to import the seaborn library and create the previous plot and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: First we import the library with `import seaborn as sns`. The next line sns.set()
    will load seaborn's default theme and color palette to the session. Run the code
    below and watch the change in the chart area and the text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once we load seaborn into the session, everytime a matplotlib plot is executed,
    seaborn's default customizations are added as you see above. However, a huge problem
    that troubles many users is that the titles can overlap. Combine this with matplotlib's
    only confusing naming convention for its titles it becomes a nuisance. Nevertheless,
    the attractive visuals still make it usable for Data Scientist's work.
  prefs: []
  type: TYPE_NORMAL
- en: In order to get the titles in the fashion that we want and have more customizability,
    We need to use the structure below. *Note that this is only necessary if we use
    subtitles in our plots. Sometimes they are necessary so it is better to have it
    on hand.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![seaborn-python-titlefix](../Images/79df64d4b5230d57c1b58a7402c24595.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Going deeper into seaborn, we can recreate the above visualizations from
    the Bike Rentals dataset with fewer lines of code and similar syntax. Seaborn
    still uses Matplotlib syntax to execute seaborn plots with relatively minor but
    obvious synctactic differences.***'
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity and better visuals, I am going to rename and relabel the 'season'
    column of the bike rentals dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that the 'Season' column is edited to our liking, we will continue onto
    creating a seaborn style visualization of the previous plots.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first noticeable difference is the default theme that seaborn presents
    when its default aesthetics are loaded into the session. The default theme as
    you see directly above is a result of `sns.set_style(''whitegrid'')` being applied
    in the background when `sns.set()` is called. As we will see this is easily overridden
    according to our liking with the readily available themes as stated in the below
    cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sns.set_style()` must be one of ''white'', ''dark'', ''whitegrid'', ''darkgrid'',
    ''ticks''. This controls the plot area. Such as the color, grid and presence of
    ticks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sns.set_context()` must be in ''paper'', ''notebook'', ''talk'', ''poster''.
    This controls the layout of the plot in terms of how it is to be read. Such as
    if it was on a ''poster'' where we will see enlarged images and text. ''Talk''
    will create a plot with a more bold font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![seaborn-scatterplot-talk-ticks](../Images/3963b42dd222399f624bd4eeb0ffac9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now lets take a look at the same plot but with `sns.set_context('paper', font_scale=2)`
    and `sns.set_style('white')`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![seaborn-scatterplot-paper-white](../Images/d39f0d78ac0047837a939bd78cbc7cf3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we have finally recreated our previous matplotlib style plot with Seaborn
    using **fewer lines of code** and **better resolution** in my opinion. Let''s
    take it one step further and facet the plot to finish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![seaborn-scatterplot-talk-ticks-facet](../Images/8fc662673c2eae7da534dae2f56e8af0.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to change the shape of the figures, the `aspect` argument needs to
    be changed. Increasing the value of aspect here will create a more square shaped
    figure. It works in tandem with `height` so experiment with the size using both
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: To change the number of rows and columns, use the `col_wrap` argument to do
    this. This works in tandem with the `col` argument. It detects the number of categories
    and allocates it accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![figure-name](../Images/570390be3c0eace90dcebfda7cd49703.png)'
  prefs: []
  type: TYPE_IMG
- en: '***Note: Parts of this tutorial were used in a tutorial I prepared for the
    [Victorian Institute of Technology](https://www.vit.edu.au/)***'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[6 Data Visualization Disasters – How to Avoid Them](/2019/02/data-visualization-disasters-avoid.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Quick and Easy Data Visualizations in Python with Code](/2018/07/5-quick-easy-data-visualizations-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Useful Python Data Visualization Libraries for Any Discipline](/2016/06/python-data-visualization-libraries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Creating Visuals with Matplotlib and Seaborn](https://www.kdnuggets.com/creating-visuals-with-matplotlib-and-seaborn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News 22:n16, Apr 20: Top YouTube Channels for Learning…](https://www.kdnuggets.com/2022/n16.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Visualization in Python with Seaborn](https://www.kdnuggets.com/2022/04/data-visualization-python-seaborn.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Data Visualization Using Matplotlib](https://www.kdnuggets.com/2022/12/introduction-data-visualization-matplotlib.html)*****'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
