- en: How to Make Python Code Run Incredibly Fast
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何让 Python 代码运行得极快
- en: 原文：[https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html](https://www.kdnuggets.com/2021/06/make-python-code-run-incredibly-fast.html)
- en: '![How to Make Python Code Run Incredibly Fast](../Images/cf09bbaf063f4212ca4ecc13d7713603.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何让 Python 代码运行得极快](../Images/cf09bbaf063f4212ca4ecc13d7713603.png)'
- en: '[Image by brgfx](https://www.freepik.com/free-vector/young-boy-laptop-python-concept_3576656.htm#query=Python&position=5&from_view=search&track=sph)
    on Freepik'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[由 brgfx 制作的图片](https://www.freepik.com/free-vector/young-boy-laptop-python-concept_3576656.htm#query=Python&position=5&from_view=search&track=sph)
    在 Freepik 上'
- en: Python is one of the most popular programming languages among developers. It
    is used everywhere, whether it’s web development or machine learning.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是开发者中最受欢迎的编程语言之一。无论是网页开发还是机器学习，它都无处不在。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: There are many reasons for its popularity, such as its community support, its
    amazing libraries, its wide usage in Machine Learning and Big Data, and its easy
    syntax.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 其流行有很多原因，例如社区支持、惊人的库、在机器学习和大数据中的广泛使用以及简易的语法。
- en: Despite having these many qualities, python has one drawback, which is it's
    *slow* speed. Being an interpreted language, python is slower than other programming
    languages. Still, we can overcome this problem using some tips.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管有这些优点，Python 仍然有一个缺点，就是其 *速度较慢*。作为一种解释型语言，Python 比其他编程语言要慢。不过，我们可以通过一些技巧来克服这个问题。
- en: In this article, I will share some python tricks using which we can make our
    python code run faster than usual. Let’s get started!
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我将分享一些 Python 技巧，利用这些技巧，我们可以让 Python 代码运行得比平时更快。让我们开始吧！
- en: 1\. Proper Algorithm & Data Structure
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 合适的算法和数据结构
- en: Each data structure has a significant effect on runtime. There are many built-in
    data structures such as list, tuple, set, and dictionary in python. Most people
    use a list data structure in all cases.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每种数据结构对运行时间都有显著影响。Python 中有许多内置数据结构，如列表、元组、集合和字典。大多数人使用列表数据结构来处理所有情况。
- en: 'In python, sets and dictionaries have O(1) lookup performance as they use hash
    tables for that. You can use sets and dictionaries instead of lists in the following
    cases:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，集合和字典具有 O(1) 的查找性能，因为它们使用哈希表。你可以在以下情况下使用集合和字典代替列表：
- en: You do not have duplicate items in the collection.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你在集合中没有重复项。
- en: You need to search items repeatedly in the collection.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要在集合中重复搜索项目。
- en: The collection contains a large number of items.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该集合包含大量项目。
- en: 'You can see the time complexity of different data structures in python here:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里查看不同数据结构的时间复杂度：
- en: '[**Time Complexity via Python Wiki**](https://wiki.python.org/moin/TimeComplexity)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[**通过 Python Wiki 了解时间复杂度**](https://wiki.python.org/moin/TimeComplexity)'
- en: This page documents the time-complexity (aka "Big O" or "Big Oh") of various
    operations in current CPython...
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本页面记录了当前 CPython 中各种操作的时间复杂度（又称“Big O”或“Big Oh”）...
- en: 2\. Using Built-in Functions and Libraries
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 使用内置函数和库
- en: Python’s built-in functions are one of the best ways to speed up your code.
    You must use built-in python functions whenever needed. These built-in functions
    are well tested and optimized.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的内置函数是加速代码的最佳方法之一。你必须在需要时使用内置 Python 函数。这些内置函数经过良好测试和优化。
- en: The reason these built-in functions are fast is that python’s built-in functions,
    such as min, max, all, map, etc., are implemented in the C language.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内置函数之所以快，是因为 Python 的内置函数，如 min、max、all、map 等，是用 C 语言实现的。
- en: You should use these built-in functions instead of writing manual functions
    that will help you execute your code faster.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该使用这些内置函数，而不是编写手动函数，这将帮助你更快地执行代码。
- en: 'Example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'A better way to write this code is:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的代码写法是：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we are using the built-in **map** function, which is written in C. Therefore,
    it is much faster than using a loop.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用了内置的 **map** 函数，它是用 C 编写的。因此，它比使用循环要快得多。
- en: 3\. Use Multiple Assignments
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 使用多重赋值
- en: If you want to assign the values of multiple variables, then do not assign them
    line by line. Python has an elegant and better way to assign multiple variables.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想赋值多个变量，那么不要逐行赋值。Python 有一种优雅且更好的方式来赋值多个变量。
- en: 'Example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A better way to assign these variables is:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的变量赋值方式是：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This assignment of variables is much cleaner and elegant than the above one.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这种变量赋值方式比上述方法更简洁优雅。
- en: 4\. Prefer List Comprehension Over Loops
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 优先使用列表推导而非循环
- en: List comprehension is an elegant and better way to create a new list based on
    the elements of an existing list in just a single line of code.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导是一种优雅且更好的方式，可以基于现有列表的元素在一行代码中创建新列表。
- en: List comprehension is considered a more Pythonic way to create a new list than
    defining an empty list and adding elements to that empty list.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导被认为是一种比定义空列表并向其添加元素更具 Python 风格的创建新列表的方式。
- en: Another advantage of list comprehension is that it is faster than using the
    append method to add elements to a python list.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导的另一个优点是比使用追加方法向 Python 列表添加元素更快。
- en: 'Example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: 'Using list append method:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表追加方法：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A better way using list comprehension:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导的更好方式：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Code looks cleaner when using list comprehensions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用列表推导时代码更简洁。
- en: 5\. Proper Import
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 正确导入
- en: You should avoid importing unnecessary modules and libraries until and unless
    you need them. You can specify the module name instead of importing the complete
    library.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 应避免在不需要时导入不必要的模块和库。你可以指定模块名，而不是导入整个库。
- en: Importing the unnecessary libraries will result in slowing down your code performance.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 导入不必要的库会导致代码性能下降。
- en: 'Example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: 'Suppose you need to find out the square root of a number. Instead of this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要计算一个数的平方根。代替这样：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 6\. String Concatenation
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 字符串连接
- en: In python, we concatenate strings using the ‘+’ operator. But another way to
    concatenate the strings in python is using the **join** method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我们使用‘+’运算符连接字符串。但在 Python 中连接字符串的另一种方式是使用 **join** 方法。
- en: Join method is a more pythonic way to concatenate strings, and it is also faster
    than concatenating strings with the ‘+’ operator.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Join 方法是一种更具 Python 风格的字符串连接方式，并且比使用‘+’运算符连接字符串更快。
- en: The reason why the join() method is faster is that the ‘**+’** operator creates
    a new string and then copies the old string at each step, whereas the join() method
    does not work that way.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: join() 方法更快的原因是‘**+**’运算符每一步都会创建一个新字符串并复制旧字符串，而 join() 方法并不会这样工作。
- en: 'Example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Using join method:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 join 方法：
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output of both methods will be the same. The only difference is that the
    join() method is faster than the ‘+’ operator.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 两种方法的输出结果是相同的。唯一的区别是 join() 方法比‘+’运算符更快。
- en: Conclusion
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: That’s all from this article. In this article, we have discussed some tricks
    that can be used to make your code run faster. These tips can be used especially
    with competitive programming where the time limit is everything.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章到此为止。在这篇文章中，我们讨论了一些可以使代码运行更快的技巧。这些技巧特别适用于竞争编程，其中时间限制至关重要。
- en: I hope you liked this article. Thanks for reading!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你喜欢这篇文章。感谢阅读！
- en: '**[Pralabh Saxena](https://www.linkedin.com/in/pralabh-saxena-7a82b5124/)**
    is a software developer with 1 year of experience. Pralabh [writes articles](https://pralabhsaxena.medium.com/)
    on topics such as Python, Machine Learning, Data Science, and SQL.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Pralabh Saxena](https://www.linkedin.com/in/pralabh-saxena-7a82b5124/)**
    是一名拥有 1 年经验的软件开发人员。Pralabh [撰写文章](https://pralabhsaxena.medium.com/) 涉及 Python、机器学习、数据科学和
    SQL 等主题。'
- en: More On This Topic
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Getting Started with PyTest: Effortlessly Write and Run Tests in Python](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 PyTest：轻松编写和运行 Python 测试](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过《数据科学中的快速 Python》提升你的 Python 技能！](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
- en: '[How to Make Documenting Code Easier](https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何简化代码文档编写](https://www.kdnuggets.com/2022/12/make-documenting-code-easier.html)'
- en: '[Schedule & Run ETLs with Jupysql and GitHub Actions](https://www.kdnuggets.com/2023/05/schedule-run-etls-jupysql-github-actions.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Jupysql 和 GitHub Actions 安排和运行 ETL](https://www.kdnuggets.com/2023/05/schedule-run-etls-jupysql-github-actions.html)'
- en: '[Learn How to Run Alpaca-LoRA on Your Device in Just a Few Steps](https://www.kdnuggets.com/2023/05/learn-run-alpacalora-device-steps.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[了解如何在几步之内在你的设备上运行 Alpaca-LoRA](https://www.kdnuggets.com/2023/05/learn-run-alpacalora-device-steps.html)'
- en: '[Run an LLM Locally with LM Studio](https://www.kdnuggets.com/run-an-llm-locally-with-lm-studio)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 LM Studio 本地运行 LLM](https://www.kdnuggets.com/run-an-llm-locally-with-lm-studio)'
