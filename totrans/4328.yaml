- en: Getting Started with 5 Essential Natural Language Processing Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/02/getting-started-5-essential-nlp-libraries.html](https://www.kdnuggets.com/2021/02/getting-started-5-essential-nlp-libraries.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: Let's say that you have an understanding of how to [tackle natural language
    processing tasks](/2017/11/framework-approaching-textual-data-tasks.html). Let's
    also say that you have decided, more specifically, the type of [approach you will
    employ](/2018/10/main-approaches-natural-language-processing-tasks.html) in attempting
    to solve your task. You still need to put your plan into action, computationally,
    and there is a good chance you will be looking to leverage an existing NLP library
    to help you do so.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming you are programming in Python (I can't help you if not), there is quite
    a landscape of options to choose from. While this article is not an endorsement
    of any particular collection of such solutions, it serves as an overview to a
    curated list of 5 popular libraries you may look to in order to work on your problems.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/9ba55d4188bf9f2b2ebbe9669cfeb28c.png)'
  prefs: []
  type: TYPE_IMG
- en: 1\. [Hugging Face Datasets](https://github.com/huggingface/datasets)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hugging Face's Datasets library is, in essence, a packaged collection of publicly-available
    NLP datasets with a common set of APIs and data formats, as well as some ancillary
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The largest hub of ready-to-use NLP datasets for ML models with fast, easy-to-use
    and efficient data manipulation tools.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'One can easily install Datasets with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install datasets`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Datasets is further described as providing two main features: one-line dataloaders
    for many public datasets, and efficient data pre-processing. This description
    glosses over another major piece of the library, however: a number of built-in
    evaluation metrics relevant to NLP tasks. The library also has additional features
    such as back-end memory management of datasets and interoperability with popular
    Python tools such as NumPy, Pandas, along with major machine learning platforms
    TensorFlow and PyTorch.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first look at loading a dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Loading a metric is just as straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: What you do with them is up to you, but loading a publicly-accessible dataset
    and a tried and true evaluation metric has never been easier.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/a6beb9cb856e2446cd3b346147b3ffc6.png)'
  prefs: []
  type: TYPE_IMG
- en: 2\. [TextHero](https://github.com/jbesomi/texthero)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'TextHero is succinctly described in its Github repo as:'
  prefs: []
  type: TYPE_NORMAL
- en: Text preprocessing, representation and visualization from zero to hero.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Though this does a fine job of explaining in a few words what you might use
    this library for, the following answer to the question of "why TextHero?" from
    the repo sheds a little more light as to the reasoning behind the library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a very pragmatic way, texthero has just one goal: make the developer spare
    time. Working with text data can be a pain and in most cases, a default pipeline
    can be quite good to start. There is always time to come back and improve previous
    work.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now that you know why you might use TextHero, here''s how to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install texthero`'
  prefs: []
  type: TYPE_NORMAL
- en: A look at the [getting started guide](https://texthero.org/docs/getting-started)
    shows what you can accomplish in a few lines of code. With the below example from
    the TextHero Github repo, we will load a dataset, clean it, create a TF-IDF representation,
    perform principle component analysis, and plot the results of this PCA.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![Image](../Images/45004de2ba3bfec6fa40ae32d5e6c9ca.png)'
  prefs: []
  type: TYPE_IMG
- en: There is much more you can accomplish with TextHero, so check the rest of the
    [documentation](https://texthero.org/docs/api-preprocessing) for info on data
    cleaning and preprocessing, visualization, representation, basic NLP tasks, and
    more.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. [spaCy](https://spacy.io/)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: spaCy is specifically designed with the goal of being a useful library for implementing
    production-ready systems.
  prefs: []
  type: TYPE_NORMAL
- en: spaCy is designed to help you do real work — to build real products, or gather
    real insights. The library respects your time, and tries to avoid wasting it.
    It's easy to install, and its API is simple and productive. We like to think of
    spaCy as the Ruby on Rails of Natural Language Processing.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![spaCy](../Images/ac8b64d9ed3e4f4dabebdebe8a412eca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So when you are ready to get to doing some real work, you need to first install
    spaCy and at least one language model. In this example we will use its English
    language model. The installation of both the library and the language model can
    be accomplished with these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install spacy python -m spacy download en`'
  prefs: []
  type: TYPE_NORMAL
- en: 'To get started with spaCy, we will use this sentence of sample text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now let's import spaCy and a list of English stop words. We also load the English
    language model as a `Language` object (we will call it 'nlp' out of spaCy convention),
    and then call the `nlp` object on our sample text, which returns a processed `Doc`
    object (which we cleverly call 'doc').
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'So... that''s it? From the [spaCy documentation](https://spacy.io/usage/spacy-101):'
  prefs: []
  type: TYPE_NORMAL
- en: Even though a Doc is processed – e.g. split into individual words and annotated
    – it still holds **all information of the original text**, like whitespace characters.
    You can always get the offset of a token into the original string, or reconstruct
    the original by joining the tokens and their trailing whitespace. This way, you'll
    never lose any information when processing text with spaCy.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Now, let''s have a look at that processed sample:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: spaCy is powerful, opinionated, and can be useful for a wide array of NLP tasks,
    from preprocessing, to representation, to modeling. Check out the [spaCy documentation](https://spacy.io/usage/spacy-101)
    to see where you can go from here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/3ef26cbcf926105f40e47a653929b0dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 4\. [Hugging Face Transformers](https://github.com/huggingface/transformers)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It's hard to overstate how integral to the practice of NLP the Hugging Face
    Transformers library has become. By providing access to
  prefs: []
  type: TYPE_NORMAL
- en: 'The big picture, directly from the Github repo:'
  prefs: []
  type: TYPE_NORMAL
- en: '**State-of-the-art Natural Language Processing for PyTorch and TensorFlow 2.0**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Transformers provides thousands of pretrained models to perform tasks on texts
    such as classification, information extraction, question answering, summarization,
    translation, text generation, etc in 100+ languages. Its aim is to make cutting-edge
    NLP easier to use for everyone.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Transformers provides APIs to quickly download and use those pretrained models
    on a given text, fine-tune them on your own datasets then share them with the
    community on our model hub. At the same time, each python module defining an architecture
    can be used as a standalone and modified to enable quick research experiments.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Transformers is backed by the two most popular deep learning libraries, PyTorch
    and TensorFlow, with a seamless integration between them, allowing you to train
    your models with one then load it for inference with the other.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: You can test out the Transformer library online using [Write With Transformer](https://transformer.huggingface.co/),
    the official demo of just what the library is capable of.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation of this complex library is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install transformers`'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an awful lot to the Transformers library, and you could spend a lot
    of time learning all of its ins and outs. However, the inclusion of the pipeline
    API allows for the immediate use of a model out of the gate, with little configuration
    necessary. Here is an example of how to use a Transformers pipeline for classification
    (note that either TensorFlow or PyTorch should be installed to proceed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Ridiculously, that's it. The pipeline uses a pre-trained model as well as the
    preprocessing used for that model, and even without fine-tuning the results can
    be quite compelling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a second pipeline example, this time for question answering:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A simple pair of examples, to be sure, but these pipelines are much more powerful
    than only being able to solve trivial KDnuggets-related tasks! You can read more
    about pipelines [here](https://huggingface.co/transformers/main_classes/pipelines.html).
  prefs: []
  type: TYPE_NORMAL
- en: Transformers makes state of the art models easy to use, and available to everyone.
    Visit the library's [Github repo](https://github.com/huggingface/transformers)
    to start exploring more.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. [Scattertext](https://github.com/JasonKessler/scattertext)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Scattertext is made for creating attractive visualizations depicting how language
    differs among document types. From its Github repo:'
  prefs: []
  type: TYPE_NORMAL
- en: A tool for finding distinguishing terms in corpora, and presenting them in an
    interactive, HTML scatter plot. Points corresponding to terms are selectively
    labeled so that they don't overlap with other labels or points.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you can''t guess by now, installation is accomplished with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pip install scattertext`'
  prefs: []
  type: TYPE_NORMAL
- en: The following example is from the Github repo, visualizing terms used at the
    2012 US political conventions.
  prefs: []
  type: TYPE_NORMAL
- en: The 2,000 most party-associated unigrams are displayed as points in the scatter
    plot. Their x- and y- axes are the dense ranks of their usage by Republican and
    Democratic speakers respectively.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Note that running the example code produces an HTML file which can then be viewed
    and interacted with in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The results of the saved HTML file, when viewed (not this is a static image
    shown below, and is therefore not interactive):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/539bdcfecf11df6883253007c076844e.png)'
  prefs: []
  type: TYPE_IMG
- en: Scattertext serves a narrow and defined purpose, but does so very well. The
    visualizations are definitely beautiful, and, just as importantly, insightful.
    Visit their Github repository for more info and what else can be done with the
    library.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Top Python Libraries for Deep Learning, Natural Language Processing & Computer
    Vision](/2020/11/top-python-libraries-deep-learning-natural-language-processing-computer-vision.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Fantastic Natural Language Processing Books](/2020/07/5-fantastic-nlp-books.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best NLP with Deep Learning Course is Free](/2020/05/best-nlp-deep-learning-course-free.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
