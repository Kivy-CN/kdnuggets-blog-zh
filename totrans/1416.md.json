["```py\nclass node:\n    def __init__(self,val):\n        self.val = val\n        self.left = None\n        self.right = None\n```", "```py\nroot = node(1)\nroot.left = node(2)\nroot.right = node(3)\n```", "```py\ndef inorder(node):\n    if node:\n        inorder(node.left)\n        print(node.val)\n        inorder(node.right)\n```", "```py\ndef create_bst(array,min_index,max_index):\n    if max_index<min_index:\n        return None\n    mid = int((min_index+max_index)/2)\n    root = node(array[mid])\n    leftbst = create_bst(array,min_index,mid-1)\n    rightbst = create_bst(array,mid+1,max_index)\n    root.left = leftbst\n    root.right = rightbst\n    return root\na = [2,4,5,6,7]\nroot = create_bst(a,0,len(a)-1)\n```", "```py\ninorder(root)\n------------------------------------------------------------\n2\n4\n5\n6\n7\n```", "```py\n\ndef isValidBST(node, minval, maxval):\n    if node:\n        # Base case\n        if node.val<=minval or node.val>=maxval:\n            return False\n        # Check the subtrees changing the min and max values\n        return isValidBST(node.left,minval,node.val) &   isValidBST(node.right,node.val,maxval)\n    return True\nisValidBST(root,-float('inf'),float('inf'))\n--------------------------------------------------------------\nTrue\n```"]