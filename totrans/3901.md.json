["```py\n# bad example\n\ndf = get_data()\n\nprint(df)\n\n# do_other_stuff()\n\n# do_some_more_stuff()\n\ndf.head()\n\nprint(df.columns)\n\n# do_so_much_stuff()\n\nmodel = train_model(df)\n\n# good example\n\ndf    = get_data()\n\nmodel = train_model(df)\n\n```", "```py\n# bad example\npd.qcut(df['Fare'], q=4, retbins=True)[1] # returns array([0., 7.8958, 14.4542, 31.275, 512.3292])\n\ndf.loc[ df['Fare'] <= 7.90, 'Fare'] = 0 df.loc[(df['Fare'] > 7.90) & (df['Fare'] <= 14.454), 'Fare'] = 1 df.loc[(df['Fare'] > 14.454) & (df['Fare'] <= 31), 'Fare'] = 2 df.loc[ df['Fare'] > 31, 'Fare'] = 3\ndf['Fare'] = df['Fare'].astype(int)\ndf['FareBand'] = df['Fare']\n\n# good example (after refactoring into functions)\ndf['FareBand'] = categorize_column(df['Fare'], num_bins=4)\n\n```", "```py\n# good example\ndf = impute_nans(df, categorical_columns=['Embarked'],\n                     Continuous_columns =['Fare', 'Age'])\ndf = add_derived_title(df)\ndf = encode_title(df)\ndf = add_is_alone_column(df)\ndf = add_categorical_columns(df)\nX, y = split_features_and_labels(df)\n\n# an even better example. Notice how this reads like a story\nprepare_data = compose(impute_nans, \n                       add_derived_title, \n                       encode_title, \n                       add_is_alone_column, \n                       add_categorical_columns,\n                       split_features_and_labels)\n\nX, y = prepare_data(df)\n\n```", "```py\nimport unittest \nfrom sklearn.metrics import precision_score, recall_score\n\nfrom src.train import prepare_data_and_train_model\n\nclass TestModelMetrics(unittest.TestCase):\n    def test_model_precision_score_should_be_above_threshold(self):\n        model, X_test, Y_test = prepare_data_and_train_model()\n        Y_pred = model.predict(X_test)\n\n        precision = precision_score(Y_test, Y_pred)\n\n        self.assertGreaterEqual(precision, 0.7) \n\n```"]