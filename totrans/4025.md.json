["```py\n$ pip install pydantic\n```", "```py\n$ pip install pydantic[email]\n```", "```py\n$ pip install email-validator\n```", "```py\n# main.py\n\nfrom pydantic import BaseModel, EmailStr\n\nclass Employee(BaseModel):\n    name: str\n    age: int\n    email: EmailStr\n    department: str\n    employee_id: str\n```", "```py\n# main.py \n\nfrom pydantic import BaseModel, EmailStr, validator\n\n...\n\n@validator(\"employee_id\")\n    def validate_employee_id(cls, v):\n        if not v.isalnum() or len(v) != 6:\n            raise ValueError(\"Employee ID must be exactly 6 alphanumeric characters\")\n        return v\n```", "```py\n# main.py\n\nfrom pydantic import BaseModel, EmailStr, validator\n\nclass Employee(BaseModel):\n    name: str\n    age: int\n    email: EmailStr\n    department: str\n    employee_id: str\n\n    @validator(\"employee_id\")\n     def validate_employee_id(cls, v):\n         if not v.isalnum() or len(v) != 6:\n             raise ValueError(\"Employee ID must be exactly 6 alphanumeric characters\")\n         return v\n```", "```py\n# employees.json\n\n[\n\t{\n    \t\"name\": \"John Doe\",\n    \t\"age\": 30,\n    \t\"email\": \"john.doe@example.com\",\n    \t\"department\": \"Engineering\",\n    \t\"employee_id\": \"EMP001\"\n\t},\n\t{\n    \t\"name\": \"Jane Smith\",\n    \t\"age\": 25,\n    \t\"email\": \"jane.smith@example.com\",\n    \t\"department\": \"Marketing\",\n    \t\"employee_id\": \"EMP002\"\n\t},\n\t{\n    \t\"name\": \"Alice Brown\",\n    \t\"age\": 35,\n    \t\"email\": \"invalid-email\",\n    \t\"department\": \"Finance\",\n    \t\"employee_id\": \"EMP0034\"\n\t},\n\t{\n    \t\"name\": \"Dave West\",\n    \t\"age\": 40,\n    \t\"email\": \"dave.west@example.com\",\n    \t\"department\": \"HR\",\n    \t\"employee_id\": \"EMP005\"\n\t}\n]\n```", "```py\n# main.py\n\nimport json\nfrom pydantic import BaseModel, EmailStr, ValidationError, validator\n...\n\n# Load and parse the JSON data\nwith open(\"employees.json\", \"r\") as f:\n    data = json.load(f)\n\n# Validate each employee record\nfor record in data:\n    try:\n        employee = Employee(**record)\n        print(f\"Valid employee record: {employee.name}\")\n    except ValidationError as e:\n        print(f\"Invalid employee record: {record['name']}\")\n        print(f\"Errors: {e.errors()}\")\n```", "```py\nOutput >>>\n\nValid employee record: John Doe\nValid employee record: Jane Smith\nInvalid employee record: Alice Brown\nErrors: [{'type': 'value_error', 'loc': ('email',), 'msg': 'value is not a valid email address: The email address is not valid. It must have exactly one @-sign.', 'input': 'invalid-email', 'ctx': {'reason': 'The email address is not valid. It must have exactly one @-sign.'}}, {'type': 'value_error', 'loc': ('employee_id',), 'msg': 'Value error, Employee ID must be exactly 6 alphanumeric characters', 'input': 'EMP0034', 'ctx': {'error': ValueError('Employee ID must be exactly 6 alphanumeric characters')}, 'url': 'https://errors.pydantic.dev/2.6/v/value_error'}]\nValid employee record: Dave West\n```", "```py\n# main.py\n\nimport json\nfrom pydantic import BaseModel, EmailStr, ValidationError, validator\n\nclass Employee(BaseModel):\n    name: str\n    age: int\n    email: EmailStr\n    department: str\n    employee_id: str\n\n    @validator(\"employee_id\")\n     def validate_employee_id(cls, v):\n         if not v.isalnum() or len(v) != 6:\n             raise ValueError(\"Employee ID must be exactly 6 alphanumeric characters\")\n         return v\n\n# Load and parse the JSON data\nwith open(\"employees.json\", \"r\") as f:\n    data = json.load(f)\n\n# Validate each employee record\nfor record in data:\n    try:\n        employee = Employee(**record)\n        print(f\"Valid employee record: {employee.name}\")\n    except ValidationError as e:\n        print(f\"Invalid employee record: {record['name']}\")\n        print(f\"Errors: {e.errors()}\")\n```"]