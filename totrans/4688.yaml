- en: Explaining Random Forest® (with Python Implementation)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/03/random-forest-python.html](https://www.kdnuggets.com/2019/03/random-forest-python.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [The Learning Machine](https://www.thelearningmachine.ai )**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Random Forest (+Python implementation)**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**1\. Introduction**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: This article is written by **[The Learning Machine](https://www.thelearningmachine.ai/)**,
    a new open-source project that aims to create an interactive roadmap containing
    A-Z explanations of concepts, methods, algorithms and their code implementations
    in either Python or R, accessible for people with various backgrounds.
  prefs: []
  type: TYPE_NORMAL
- en: Check out our click-and-go **[Machine Learning Mind Map](https://www.thelearningmachine.ai/ml)**
    with algorithm explanations and Python implementation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Machine Learning](../Images/d92814dfa1d1e62c7770c4fa70df6c3f.png)'
  prefs: []
  type: TYPE_IMG
- en: '**2\. Random Forest**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Random Forest is a flexible, easy to use machine learning algorithm that produces,
    even without hyper-parameter tuning, a great result most of the time. It can be
    used for both classification and regression tasks. In this article, you are going
    to learn how the random forest algorithm deals with classification and regression
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: '*To understand the Random Forest algorithm, you have to be familiar with Decision
    Trees at first. Read an article on Decision Trees* *[here](https://www.thelearningmachine.ai/tree-id3)**.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the common problems with decision trees, especially the ones that have
    a table full of columns, is that they tend to ***overfit*** a lot. Sometimes it
    looks like the tree just *memorizes* the data. Here are the typical examples of
    decision trees that overfit, both for **categorical** and **continuous** data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**I. Categorical:**'
  prefs: []
  type: TYPE_NORMAL
- en: '*If the client is male, between 15 and 25, from the US, likes ice-cream, has
    a German friend, hates birds and ate pancakes on August 25th, 2012, - he is likely
    to download Pokemon Go.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**II. Continuous:**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Random Forests](../Images/845b1da88bfb7f1d15edc4a0c5c6c17c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Random Forest prevents this problem: it is an ensemble of multiple decision
    trees, not just one. And the more the number of these decision trees in Random
    Forest, the better the generalization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'More precisely, Random Forest works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Selects k features (columns) from the dataset (table) with a total of m features
    randomly (where k<<m). Then, it builds a Decision Tree from those k features.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeats n times so that you have ***n*** Decision Trees built from different
    random combinations of k features (or a different random sample of the data, called
    ***bootstrap*** ***sample***).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Takes each of the n built Decision Trees and passes a random variable to predict
    the outcome. Stores the predicted outcome (target), so that you have a total of
    ***n*** outcomes from the ***n*** Decision Trees.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculates the votes for each predicted target and takes the mode (most frequent
    target variable). In other words, considers the high voted predicted target as
    the final prediction from the random forest algorithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '** In case of a regression problem, for a new record, each tree in the forest
    predicts a value for Y (output). The final value can be calculated by taking the
    average of all the values predicted by all the trees in a forest. Or, in case
    of a classification problem, each tree in the forest predicts the category to
    which the new record belongs. Finally, the new record is assigned to the category
    that wins the majority vote.*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Example:**'
  prefs: []
  type: TYPE_NORMAL
- en: James wants to decide what places he should visit during his one week stay in
    Paris. He goes to a friend who lived there one year and asks what he visited in
    the past and if he liked it or not. Based on his experience, he will give James
    some advice.
  prefs: []
  type: TYPE_NORMAL
- en: This is a typical decision tree algorithm approach. James’ friend decided about
    what James should visit, based on his personal experience of a year.
  prefs: []
  type: TYPE_NORMAL
- en: Later, James starts asking more and more of his friends to advise him, and they
    recommend the places they have been to. Then James chooses the places that were
    recommend the most to him, which is the typical Random Forest algorithm approach.
  prefs: []
  type: TYPE_NORMAL
- en: '***Thus, Random Forest is an algorithm that builds n decision trees by randomly
    selecting k out of the total of m features for every decision tree, and takes
    the mode (average, if regression) of the predicted outcomes.***'
  prefs: []
  type: TYPE_NORMAL
- en: '**3\. Pros & Cons**'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Advantages:**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Can be used for both classification and regression problems:** Random Forest
    works well when you have both categorical and numerical features.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reduction in overfitting**: by averaging several trees, there is a significantly
    lower risk of overfitting.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Make a wrong prediction only when more than half of the base classifiers
    are wrong**: Random Forest is very stable - even if a new data point is introduced
    in the dataset, the overall algorithm is not affected much as new data may impact
    one tree, but it is very hard for it to impact all the trees.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Disadvantages:**'
  prefs: []
  type: TYPE_NORMAL
- en: Random forests have been observed to overfit for some datasets with noisy classification/regression
    tasks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: More complex and computationally expensive than decision tree algorithm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to their complexity, they require much more time to train than other comparable
    algorithms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**4\. Important Hyperparameters**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Hyperparameters in a random forest are either used to increase the predictive
    power of the model or to make the model faster. Below, hyperparameters of sklearn
    built-in random forest function is described:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Increasing the Predictive Power**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**n_estimators:** the number of trees the algorithm builds before taking the
    maximum voting or taking averages of predictions. In general, a higher number
    of trees increases the performance and makes the predictions more stable, but
    it also slows down the computation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**max_features:** the maximum number of features Random Forest is allowed to
    try in an individual tree. Sklearn provides several options, described in their
    [documentation](http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**min_sample_leaf:** determines the minimum number of leaves that are required
    to split an internal node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Increasing the Models Speed**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**n_jobs:** tells the engine how many processors it is allowed to use. If it
    has a value of 1, it can only use one processor. A value of “-1” means that there
    is no limit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**random_state:** makes the model’s output replicable. The model will always
    produce the same results when it has a definite value of random_state and if it
    has been given the same hyperparameters and the same training data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**oob_score:** (also called oob sampling) - a random forest cross-validation
    method. In this sampling, about one-third of the data is not used to train the
    model and can be used to evaluate its performance. These samples are called the
    out of bag samples. It is very similar to the leave-one-out cross-validation method,
    but almost no additional computational burden goes along with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5\. Python Implementation**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: View/download a template of Random Forest located in a git repository [here](https://github.com/the-learning-machine/ML/blob/master/Classification/random_forests.ipynb).
  prefs: []
  type: TYPE_NORMAL
- en: '**Resources:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[On-line and web-based: Analytics, Data Mining, Data Science, Machine Learning
    education](https://www.kdnuggets.com/education/online.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Software for Analytics, Data Science, Data Mining, and Machine Learning](https://www.kdnuggets.com/software/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Random forests explained intuitively](https://www.kdnuggets.com/2019/01/random-forests-explained-intuitively.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Scientist Interviews Demystified](https://www.kdnuggets.com/2018/08/data-scientist-interviews-demystified.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Tour of The Top 10 Algorithms for Machine Learning Newbies](https://www.kdnuggets.com/2018/02/tour-top-10-algorithms-machine-learning-newbies.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RANDOM FORESTS and RANDOMFORESTS are registered marks of Minitab, LLC.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Random Forest vs Decision Tree: Key Differences](https://www.kdnuggets.com/2022/02/random-forest-decision-tree-key-differences.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Does the Random Forest Algorithm Need Normalization?](https://www.kdnuggets.com/2022/07/random-forest-algorithm-need-normalization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tuning Random Forest Hyperparameters](https://www.kdnuggets.com/2022/08/tuning-random-forest-hyperparameters.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
