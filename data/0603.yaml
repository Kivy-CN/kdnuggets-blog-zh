- en: How to Convert an RGB Image to Grayscale
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何将RGB图像转换为灰度图像
- en: 原文：[https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html](https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html](https://www.kdnuggets.com/2019/12/convert-rgb-image-grayscale.html)
- en: Occasionally the need arises to convert a color image to grayscale. This need
    came up when loading images taken on the surface of Mars as part of [End-to-End
    Machine Learning Course 313, Advanced Neural Network Methods](https://end-to-end-machine-learning.teachable.com/p/advanced-neural-network-methods).
    We were working with a mixture of color and grayscale images and needed to transform
    them into a uniform format - all grayscale. We'll be working in Python using the
    Pillow, Numpy, and Matplotlib packages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要将彩色图像转换为灰度图像。这一需求在加载火星表面拍摄的图像时出现，作为[端到端机器学习课程313，高级神经网络方法](https://end-to-end-machine-learning.teachable.com/p/advanced-neural-network-methods)的一部分。我们处理了混合的彩色和灰度图像，需要将它们转换为统一的格式——全部为灰度图像。我们将使用Python，结合Pillow、Numpy和Matplotlib包。
- en: By the way, all the interesting information in this post all comes from [the
    Wikipedia entry on Grayscale](https://en.wikipedia.org/wiki/Grayscale). (If you
    find it helpful, [maybe send them a dollar](https://donate.wikimedia.org/w/index.php?title=Special:LandingPage&country=US&uselang=en&utm_medium=sidebar&utm_source=donate&utm_campaign=C13_en.wikipedia.org).)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便提一下，本帖子中的所有有趣信息都来自[维基百科上的灰度图](https://en.wikipedia.org/wiki/Grayscale)。（如果你觉得有帮助，[也许可以给他们捐一美元](https://donate.wikimedia.org/w/index.php?title=Special:LandingPage&country=US&uselang=en&utm_medium=sidebar&utm_source=donate&utm_campaign=C13_en.wikipedia.org)。）
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT需求'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Read in a Color Image
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取彩色图像
- en: 'The [code we''re working from](https://github.com/brohrer/cottonwood_martian_images/blob/master/image_loader.py) loads
    jpeg images for an autoencoder to use as inputs. This is accomplished with using
    Pillow and Numpy:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 该[代码](https://github.com/brohrer/cottonwood_martian_images/blob/master/image_loader.py)用于加载jpeg图像，供自编码器作为输入。这通过使用Pillow和Numpy实现：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This reads the image in and converts it into a Numpy array. For a detailed description
    of what this does and why, check out the prequel post to this one: [How to Convert
    a Picture into Numbers](https://brohrer.github.io/images_to_numbers.html). For
    grayscale images, the result is a two-dimensional array with the number of rows
    and columns equal to the number of pixel rows and columns in the image. Low numeric
    values indicate darker shades and higher values lighter shades. The range of pixel
    values is often 0 to 255\. We divide by 255 to get a range of 0 to 1.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将图像读取并转换为Numpy数组。有关此过程的详细描述，请查看上一篇文章：[如何将图片转换为数字](https://brohrer.github.io/images_to_numbers.html)。对于灰度图像，结果是一个二维数组，行数和列数等于图像的像素行数和列数。较低的数值表示较暗的阴影，较高的数值表示较亮的阴影。像素值的范围通常是0到255。我们将其除以255，以获得0到1的范围。
- en: Color images are represented as three-dimensional Numpy arrays - a collection
    of three two-dimensional arrays, one each for red, green, and blue channels. Each
    one, like grayscale arrays, has one value per pixel and their ranges are identical.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 彩色图像表示为三维Numpy数组——由三个二维数组组成，分别对应红色、绿色和蓝色通道。每个数组像灰度数组一样，每个像素一个值，其范围相同。
- en: '![Three dimensional image array structure](../Images/4ca9846e2120338949d3ec950a8e487e.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![三维图像数组结构](../Images/4ca9846e2120338949d3ec950a8e487e.png)'
- en: '![Figure](../Images/b61919db92ac4e6ae4bab1f098d97892.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/b61919db92ac4e6ae4bab1f098d97892.png)'
- en: 'Image credit: Diane Rohrer'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：黛安·罗赫
- en: 'Easy Peasy: Average the Channels'
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单易行：平均化通道
- en: An intuitive way to convert a color image 3D array to a grayscale 2D array is,
    for each pixel, take the average of the red, green, and blue pixel values to get
    the grayscale value. This combines the lightness or *luminance* contributed by
    each color band into a reasonable gray approximation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将彩色图像 3D 数组转换为灰度 2D 数组的直观方法是，对于每个像素，取红色、绿色和蓝色像素值的平均值以获得灰度值。这将每个颜色通道贡献的亮度或 *亮度*
    合并成一个合理的灰色近似值。
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `axis=2` argument tells `numpy.mean()` to average values across all three
    color channels. (`axis=0` would average across pixel rows and `axis=1` would average
    across pixel columns.)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`axis=2` 参数告诉 `numpy.mean()` 对所有三个颜色通道进行平均。 (`axis=0` 会在像素行之间平均，`axis=1` 会在像素列之间平均。)'
- en: '![Gray from averaging red, green, and blue channels](../Images/905b2292724d8aa2c01f659a0670ba6b.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![通过平均红色、绿色和蓝色通道得到的灰色](../Images/905b2292724d8aa2c01f659a0670ba6b.png)'
- en: Well, Actually... Channel-dependent Luminance Perception
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 好吧，实际上……通道相关的亮度感知
- en: To our eyes green looks about ten times brighter than blue. Through many repetitions
    of carefully designed experiments, psychologists have figured out how different
    we perceive the luminance or red, green, and blue to be. They have provided us
    a different set of weights for our channel averaging to get total luminance.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们眼中，绿色看起来比蓝色亮大约十倍。通过许多精心设计的实验，心理学家已经弄清楚了我们如何感知红色、绿色和蓝色的亮度差异。他们为我们的通道平均提供了一套不同的权重，以获得总亮度。
- en: '[![Equation for combining red, green, and blue channels](../Images/07e545e6886030e0ab53c00977c5dc85.png)](https://en.wikipedia.org/wiki/Grayscale#Colorimetric_(perceptual_luminance-preserving)_conversion_to_grayscale)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![红色、绿色和蓝色通道组合的方程](../Images/07e545e6886030e0ab53c00977c5dc85.png)](https://en.wikipedia.org/wiki/Grayscale#Colorimetric_(perceptual_luminance-preserving)_conversion_to_grayscale)'
- en: The results are noticeably different and, to my eye, more accurate.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 结果明显不同，对我来说，更加准确。
- en: '![Gray from weighted averaging red, green, and blue channels](../Images/5a1bcd7bc191e37523bd1f6dbb96e6f8.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![通过加权平均红色、绿色和蓝色通道得到的灰色](../Images/5a1bcd7bc191e37523bd1f6dbb96e6f8.png)'
- en: Well, Actually... Gamma Compression
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 好吧，实际上……Gamma 压缩
- en: We are able to see small differences when luminance is low, but at high luminance
    levels, we are much less sensitive to them. In order to avoid wasting effort representing
    imperceptible differences at high luminance, the color scale is warped, so that
    it concentrates more values in the lower end of the range, and spreads them out
    more widely in the higher end. This is called gamma compression.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当亮度较低时，我们能够看到细微的差异，但在高亮度水平下，我们对这些差异的敏感度要低得多。为了避免在高亮度下浪费精力表示不可察觉的差异，颜色尺度被扭曲，使其在范围的低端集中更多值，而在高端则分布得更广。这就是
    gamma 压缩。
- en: 'To undo the effects of gamma compression before calculating the grayscale luminance,
    it''s necessary to apply the inverse operation, gamma expansion:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算灰度亮度之前，为了撤销 gamma 压缩的效果，有必要应用逆操作，即 gamma 扩展：
- en: '[![Nonlinear transformation of gamma](../Images/2dc74756a003859bbd1e9b226f13bf20.png)](https://en.wikipedia.org/wiki/Grayscale#Colorimetric_(perceptual_luminance-preserving)_conversion_to_grayscale)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![Gamma 的非线性变换](../Images/2dc74756a003859bbd1e9b226f13bf20.png)](https://en.wikipedia.org/wiki/Grayscale#Colorimetric_(perceptual_luminance-preserving)_conversion_to_grayscale)'
- en: '![Gamma compression function](../Images/f5e98853566862762b4c0d81947a0c47.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Gamma 压缩函数](../Images/f5e98853566862762b4c0d81947a0c47.png)'
- en: The benefit of gamma compression is that it gets rid of banding in smoothly
    varying dark colors, like a photo of the sky at twilight. The downside is that
    if we want to do anything like adding, subtracting, or averaging bands, we first
    have to undo the compression and get the luminance back into a linear representation.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Gamma 压缩的好处在于它消除了在平滑变化的暗色中出现的带状效果，比如黄昏时天空的照片。缺点是如果我们要做加法、减法或平均值等操作，我们必须先撤销压缩，将亮度恢复为线性表示。
- en: '![Gray accounting for gamma compression](../Images/cba8097bba797dcffc9d6c8c8374fc0b.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![考虑 gamma 压缩的灰度](../Images/cba8097bba797dcffc9d6c8c8374fc0b.png)'
- en: There is lightening throughout the image after accounting for gamma compression.
    It brings the luminance up to be a closer match to that of the original image.
    Finally, we have a high quality grayscale representation.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在考虑 gamma 压缩后，图像的亮度得到增强，使其更接近原始图像的亮度。最终，我们得到高质量的灰度表示。
- en: Well, Actually... A Linear Approximation
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 好吧，实际上……线性近似
- en: 'The gamma decompression and re-compression rack up quite a large computation
    cost, compared to the weighted averages we were working with before. Sometimes
    speed is more desirable than accurate-as-possible luminance calculations. For
    situations like these, there is a linear approximation:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 相比于之前我们使用的加权平均，伽马解压和重新压缩的计算成本非常高。有时，速度比尽可能准确的亮度计算更为重要。对于这种情况，有一种线性近似方法：
- en: '![Equation for combining red, green, and blue channels](../Images/07a95fe9ad4c404e73d78bcba841f190.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![组合红色、绿色和蓝色通道的公式](../Images/07a95fe9ad4c404e73d78bcba841f190.png)'
- en: This lets you get a result that's a little closer to the gamma-compression-corrected
    version, but without the extra computation time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以让你得到一个更接近伽马压缩校正版本的结果，但不需要额外的计算时间。
- en: '![Linear approximation of gray accounting for gamma compression](../Images/3e371291a241ad99f52ca0f9aa662f7f.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![考虑伽马压缩的灰度线性近似](../Images/3e371291a241ad99f52ca0f9aa662f7f.png)'
- en: As you can see, the results are not bad at all. They tend to be a little darker,
    especially through the red mid-range values, but arguably just as good in most
    practical respects.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，结果一点也不好。它们往往稍显偏暗，尤其是在红色中间值范围，但在大多数实际方面可以说也非常好。
- en: This method of calculating luminance is codified in the standard [ITU-R BT.601
    Studio encoding parameters of digital television for standard 4:3 and wide screen
    16:9 aspect ratios. ](https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.601-7-201103-I!!PDF-E.pdf)which
    incidentally was awarded an Emmy in 1983.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种亮度计算方法在标准 [ITU-R BT.601 Studio encoding parameters of digital television for
    standard 4:3 and wide screen 16:9 aspect ratios.](https://www.itu.int/dms_pubrec/itu-r/rec/bt/R-REC-BT.601-7-201103-I!!PDF-E.pdf)中进行了规范，该标准在1983年获得了艾美奖。
- en: Which One Should I Use?
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我该使用哪个？
- en: 'If close is good enough or if you really care about speed, use the linear approximation
    of gamma correction. This is the approach used by [MATLAB](https://www.mathworks.com/help/matlab/ref/rgb2gray.html), [Pillow](https://pillow.readthedocs.io/en/3.1.x/reference/Image.html),
    and [OpenCV](https://github.com/opencv/opencv/blob/8c0b0714e76efef4a8ca2a7c410c60e55c5e9829/modules/imgproc/src/color.simd_helpers.hpp).
    It is included in my [Lodgepole image and video processing toolbox](https://github.com/brohrer/lodgepole/blob/master/lodgepole/image_tools.py):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果接近就足够好，或者你真的关心速度，可以使用伽马校正的线性近似。这是 [MATLAB](https://www.mathworks.com/help/matlab/ref/rgb2gray.html)、 [Pillow](https://pillow.readthedocs.io/en/3.1.x/reference/Image.html)
    和 [OpenCV](https://github.com/opencv/opencv/blob/8c0b0714e76efef4a8ca2a7c410c60e55c5e9829/modules/imgproc/src/color.simd_helpers.hpp) 使用的方法。它包含在我的 [Lodgepole
    图像和视频处理工具箱](https://github.com/brohrer/lodgepole/blob/master/lodgepole/image_tools.py)中：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But if you simply must have the best results, splurge on the whole gamma decompression
    - perceptual luminance corrected - gamma re-compression pipeline:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你确实追求最佳结果，可以花费在整个伽马解压 - 视觉亮度校正 - 伽马重新压缩流程上：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If after reading this far you insist on straight up averaging the three channels
    together, I will judge you.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果阅读到这里你仍坚持将三个通道直接平均，我会对你做出评判。
- en: Now go make beautiful grayscale images!
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在去制作美丽的灰度图像吧！
- en: '[Original](https://brohrer.github.io/convert_rgb_to_grayscale.html). Reposted
    with permission.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://brohrer.github.io/convert_rgb_to_grayscale.html)。经允许转载。'
- en: '[**Brandon Rohrer**](https://www.linkedin.com/in/brohrer/) is a Staff Machine
    Learning Engineer at LinkedIn. Brandon''s specialty is creating algorithms and
    computational methods. You can find examples of his work [here](https://brandonrohrer.com/portfolio).'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[**布兰登·罗赫**](https://www.linkedin.com/in/brohrer/) 是 LinkedIn 的高级机器学习工程师。布兰登的专长是创建算法和计算方法。你可以在
    [这里](https://brandonrohrer.com/portfolio) 找到他的工作实例。'
- en: More On This Topic
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[How to Use ChatGPT to Convert Text into a PowerPoint Presentation](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 ChatGPT 将文本转换为 PowerPoint 演示文稿](https://www.kdnuggets.com/2023/08/chatgpt-convert-text-powerpoint-presentation.html)'
- en: '[Convert Text Documents to a TF-IDF Matrix with tfidfvectorizer](https://www.kdnuggets.com/2022/09/convert-text-documents-tfidf-matrix-tfidfvectorizer.html)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 tfidfvectorizer 将文本文档转换为 TF-IDF 矩阵](https://www.kdnuggets.com/2022/09/convert-text-documents-tfidf-matrix-tfidfvectorizer.html)'
- en: '[Convert Python Dict to JSON: A Tutorial for Beginners](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将 Python 字典转换为 JSON：初学者教程](https://www.kdnuggets.com/convert-python-dict-to-json-a-tutorial-for-beginners)'
- en: '[How to Convert JSON Data into a DataFrame with Pandas](https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Pandas 将 JSON 数据转换为 DataFrame](https://www.kdnuggets.com/how-to-convert-json-data-into-a-dataframe-with-pandas)'
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中将字节转换为字符串：初学者教程](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
- en: '[Transfer Learning for Image Recognition and Natural Language Processing](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[图像识别与自然语言处理中的迁移学习](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
