["```py\nimport os\nos.environ['TF_CPP_MIN_LOG_LEVEL'] = '3' \n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport tensorflow as tf\n```", "```py\ndef init_data(train_dir: str, valid_dir: str) -> tuple:\n    train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n        rescale=1/255.0,\n        rotation_range=20,\n        width_shift_range=0.2,\n        height_shift_range=0.2,\n        shear_range=0.2,\n        zoom_range=0.2,\n        horizontal_flip=True,\n        fill_mode='nearest'\n    )\n    valid_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n        rescale=1/255.0\n    )\n\n    train_data = train_datagen.flow_from_directory(\n        directory=train_dir,\n        target_size=(224, 224),\n        class_mode='categorical',\n        batch_size=64,\n        seed=42\n    )\n    valid_data = valid_datagen.flow_from_directory(\n        directory=valid_dir,\n        target_size=(224, 224),\n        class_mode='categorical',\n        batch_size=64,\n        seed=42\n    )\n\n    return train_data, valid_data\n```", "```py\ntrain_data, valid_data = init_data(\n    train_dir='data/train/', \n    valid_dir='data/validation/'\n)\n```", "```py\ndef build_transfer_learning_model(base_model):\n    # `base_model` stands for the pretrained model\n    # We want to use the learned weights, and to do so we must freeze them\n    for layer in base_model.layers:\n        layer.trainable = False\n\n    # Declare a sequential model that combines the base model with custom layers\n    model = tf.keras.Sequential([\n        base_model,\n        tf.keras.layers.GlobalAveragePooling2D(),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(rate=0.2),\n        tf.keras.layers.Dense(units=2, activation='softmax')\n    ])\n\n    # Compile the model\n    model.compile(\n        loss='categorical_crossentropy',\n        optimizer=tf.keras.optimizers.Adam(),\n        metrics=['accuracy']\n    )\n\n    return model\n```", "```py\n# Let's use a simple and well-known architecture - VGG16\nfrom tensorflow.keras.applications.vgg16 import VGG16\n\n# We'll specify it as a base model\n# `include_top=False` means we don't want the top classification layer\n# Specify the `input_shape` to match our image size\n# Specify the `weights` accordingly\nvgg_model = build_transfer_learning_model(\n    base_model=VGG16(include_top=False, input_shape=(224, 224, 3), weights='imagenet')\n)\n\n# Train the model for 10 epochs\nvgg_hist = vgg_model.fit(\n    train_data,\n    validation_data=valid_data,\n    epochs=10\n)\n```", "```py\nimport random\nimport pathlib\nimport shutil\n\nrandom.seed(42)\ndir_data = pathlib.Path.cwd().joinpath('data_small')\ndir_train = dir_data.joinpath('train')\ndir_valid = dir_data.joinpath('validation')\n\nif not dir_data.exists(): dir_data.mkdir()\nif not dir_train.exists(): dir_train.mkdir()\nif not dir_valid.exists(): dir_valid.mkdir()\n\nfor cls in ['cat', 'dog']:\n    if not dir_train.joinpath(cls).exists(): dir_train.joinpath(cls).mkdir()\n    if not dir_valid.joinpath(cls).exists(): dir_valid.joinpath(cls).mkdir()\n```", "```py\n!ls -R data_small | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/   /' -e 's/-/|/'\n```", "```py\ndef copy_sample(src_folder: pathlib.PosixPath, tgt_folder: pathlib.PosixPath, n: int = 500):\n    imgs = random.sample(list(src_folder.iterdir()), n)\n\n    for img in imgs:\n        img_name = str(img).split('/')[-1]\n\n        shutil.copy(\n            src=img,\n            dst=f'{tgt_folder}/{img_name}'\n        )\n```", "```py\n# Train - cat\ncopy_sample(\n    src_folder=pathlib.Path.cwd().joinpath('data/train/cat/'), \n    tgt_folder=pathlib.Path.cwd().joinpath('data_small/train/cat/'), \n)\n\n# Train - dog\ncopy_sample(\n    src_folder=pathlib.Path.cwd().joinpath('data/train/dog/'), \n    tgt_folder=pathlib.Path.cwd().joinpath('data_small/train/dog/'), \n)\n\n# Valid - cat\ncopy_sample(\n    src_folder=pathlib.Path.cwd().joinpath('data/validation/cat/'), \n    tgt_folder=pathlib.Path.cwd().joinpath('data_small/validation/cat/'),\n    n=100\n)\n\n# Valid - dog\ncopy_sample(\n    src_folder=pathlib.Path.cwd().joinpath('data/validation/dog/'), \n    tgt_folder=pathlib.Path.cwd().joinpath('data_small/validation/dog/'),\n    n=100\n)\n```", "```py\ntrain_data, valid_data = init_data(\n    train_dir='data_small/train/', \n    valid_dir='data_small/validation/'\n)\n```", "```py\nvgg_model = build_transfer_learning_model(\n    base_model=VGG16(include_top=False, input_shape=(224, 224, 3), weights='imagenet')\n)\n\nvgg_hist = vgg_model.fit(\n    train_data,\n    validation_data=valid_data,\n    epochs=20\n)\n```"]