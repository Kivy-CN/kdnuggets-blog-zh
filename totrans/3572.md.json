["```py\nimport boto3\nimport pandas as pd\nimport sagemaker\n\nsagemaker_session = sagemaker.Session()\nrole = sagemaker.get_execution_role()\n\ndf = pd.read_csv('s3://telecom-churn-dataset/telecom_churn.csv')\n```", "```py\nfrom sklearn.model_selection import train_test_split\n\ntrain, test = train_test_split(df, test_size = 0.3, random_state = 42)\n```", "```py\nbucket = 'telecom-churn-dataset'\n\ntrain.to_csv(f's3://{bucket}/telecom_churn_train.csv', index = False)\ntest.to_csv(f's3://{bucket}/telecom_churn_test.csv', index = False)\n```", "```py\nimport argparse\nimport os\nimport io\nimport boto3\nimport json\nimport pandas as pd\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score\nimport joblib\n```", "```py\nif __name__ == '__main__':\n\n    parser = argparse.ArgumentParser()\n\n    parser.add_argument('--estimator', type=int, default=10)\n    parser.add_argument('--sm-model-dir', type=str, default=os.environ.get('SM_MODEL_DIR'))\n    parser.add_argument('--model_dir', type=str)\n    parser.add_argument('--train', type=str, default=os.environ.get('SM_CHANNEL_TRAIN'))\n\n    args, _ = parser.parse_known_args()\n\n    estimator = args.estimator\n    model_dir = args.model_dir\n    sm_model_dir = args.sm_model_dir\n    training_dir = args.train\n\n    s3_client = boto3.client('s3')\n    bucket = 'telecom-churn-dataset'\n\n    obj = s3_client.get_object(Bucket=bucket, Key='telecom_churn_train.csv')\n    train_data = pd.read_csv(io.BytesIO(obj['Body'].read()))\n\n    obj = s3_client.get_object(Bucket=bucket, Key='telecom_churn_test.csv')\n    test_data = pd.read_csv(io.BytesIO(obj['Body'].read()))\n\n    X_train = train_data.drop('Churn', axis =1)\n    X_test = test_data.drop('Churn', axis =1)\n\n    y_train = train_data['Churn']\n    y_test = test_data['Churn']\n\n    rfc = RandomForestClassifier(n_estimators=estimator)\n    rfc.fit(X_train, y_train)\n    y_pred = rfc.predict(X_test)\n\n    print('Accuracy Score: ',accuracy_score(y_test, y_pred))\n\n    joblib.dump(rfc, os.path.join(args.sm_model_dir, \"rfc_model.joblib\"))\n```", "```py\n#Deserialized model to load them\n\ndef model_fn(model_dir):\n    model = joblib.load(os.path.join(model_dir, \"rfc_model.joblib\"))\n    return model\n#The request input of the application\ndef input_fn(request_body, request_content_type):\n    if request_content_type == 'application/json':\n        request_body = json.loads(request_body)\n        inp_var = request_body['Input']\n        return inp_var\n    else:\n        raise ValueError(\"This model only supports application/json input\")\n#The prediction functions\ndef predict_fn(input_data, model):\n    return model.predict(input_data)\n\n#The output function\ndef output_fn(prediction, content_type):\n    res = int(prediction[0])\n    resJSON = {'Output': res}\n    return resJSON\n```", "```py\nfrom sagemaker.sklearn import SKLearn\n\nsklearn_estimator = SKLearn(entry_point='train.py', \n                          role=role,\n                          instance_count=1, \n                          instance_type='ml.c4.2xlarge',\n                          py_version='py3',\n                          framework_version='0.23-1',\n                          script_mode=True,\n                          hyperparameters={\n                              'estimator': 15})\nsklearn_estimator.fit()\n```", "```py\nmodel_artifact = sklearn_estimator.model_data\nimage_uri = sklearn_estimator.image_uri\n\nprint(f'The model artifact is saved at: {model_artifact}')\nprint(f'The image URI is: {image_uri}')\n```", "```py\nimport time\n\nchurn_endpoint_name='churn-rf-model-'+time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.gmtime())\n\nchurn_predictor=sklearn_estimator.deploy(initial_instance_count=1,instance_type='ml.m5.large',endpoint_name=churn_endpoint_name)\n```", "```py\nclient = boto3.client('sagemaker-runtime')\ncontent_type = \"application/json\"\n\n#replace with your intended input data\nrequest_body = {\"Input\": [[128,1,1,2.70,1,265.1,110,89.0, 9.87,10.0]]}\n\n#replace with your endpoint name\nendpoint_name = \"churn-rf-model-2023-09-24-12-29-04\" \n#Data serialization\ndata = json.loads(json.dumps(request_body))\npayload = json.dumps(data)\n\n#Invoke the endpoint\nresponse = client.invoke_endpoint(\n    EndpointName=endpoint_name,\n    ContentType=content_type,\n    Body=payload)\nresult = json.loads(response['Body'].read().decode())['Output']\nresult\n```", "```py\nfrom sagemaker import Session\n\nsagemaker_session = Session()\nsagemaker_session.delete_endpoint(endpoint_name='your-endpoint-name')\n```"]