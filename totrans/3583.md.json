["```py\npip install evidently\n```", "```py\nimport pandas as pd\n\ndf = pd.read_csv(\"insurance_claims.csv\")\n\n# Sort the data based on the Incident Data\ndf = df.sort_values(by=\"incident_date\").reset_index(drop=True)\n\n# Variable Selection\ndf = df[\n    [\n        \"incident_date\",\n        \"months_as_customer\",\n        \"age\",\n        \"policy_deductable\",\n        \"policy_annual_premium\",\n        \"umbrella_limit\",\n        \"insured_sex\",\n        \"insured_relationship\",\n        \"capital-gains\",\n        \"capital-loss\",\n        \"incident_type\",\n        \"collision_type\",\n        \"total_claim_amount\",\n        \"injury_claim\",\n        \"property_claim\",\n        \"vehicle_claim\",\n        \"incident_severity\",\n        \"fraud_reported\",\n    ]\n]\n\n# Data Cleaning and One-Hot Encoding\ndf = pd.get_dummies(\n    df,\n    columns=[\n        \"insured_sex\",\n        \"insured_relationship\",\n        \"incident_type\",\n        \"collision_type\",\n        \"incident_severity\",\n    ],\n    drop_first=True,\n)\n\ndf[\"fraud_reported\"] = df[\"fraud_reported\"].apply(lambda x: 1 if x == \"Y\" else 0)\n\ndf = df.rename(columns={\"incident_date\": \"timestamp\", \"fraud_reported\": \"target\"})\n\nfor i in df.select_dtypes(\"number\").columns:\n    df[i] = df[i].apply(float)\n\ndata = df[df[\"timestamp\"] < \"2015-02-20\"].copy()\nval = df[df[\"timestamp\"] >= \"2015-02-20\"].copy()\n```", "```py\nfrom evidently.report import Report\nfrom evidently.metric_preset import DataDriftPreset\n\ndata_drift_report = Report(metrics=[\n    DataDriftPreset(),\n])\n\ndata_drift_report.run(current_data=val, reference_data=data, column_mapping=None)\ndata_drift_report.show(mode='inline')\n```", "```py\ndata_drift_report.as_dict()\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier()\nrf.fit(data.drop(['target', 'timestamp'], axis = 1), data['target'])\n```", "```py\ndata['prediction'] = rf.predict(data.drop(['target', 'timestamp'], axis = 1))\nval['prediction'] = rf.predict(val.drop(['target', 'timestamp'], axis = 1))\n```", "```py\nfrom evidently.metric_preset import ClassificationPreset\n\nclassification_performance_report = Report(metrics=[\n    ClassificationPreset(),\n])\n\nclassification_performance_report.run(reference_data=data, current_data=val)\n\nclassification_performance_report.show(mode='inline')\n```", "```py\nclassification_performance_report.as_dict()\n```"]