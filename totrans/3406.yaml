- en: A Beginner’s Guide to Neural Networks with Python and SciKit Learn 0.18!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**By Jose Portilla, Udemy Data Science Instructor.**'
  prefs: []
  type: TYPE_NORMAL
- en: I'm Jose Portilla and I [teach thousands of students on Udemy](https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/?couponCode=KDNUGGETSPY) about
    Data Science and Programming and I also conduct [in-person programming and data
    science training](www.pieriandata.com). Check out the end of the article for discount
    coupons on my courses!
  prefs: []
  type: TYPE_NORMAL
- en: The most popular machine learning library for Python is [SciKit Learn](http://scikit-learn.org/).
    The newest version (0.18) was just released a few days ago and now has built in
    support for Neural Network models. In this article we will learn how Neural Networks
    work and how to implement them with the Python programming language and latest
    version of SciKit-Learn! Basic understanding of Python is necessary to understand
    this article, and it would also be helpful (but not necessary) to have some experience
    with Sci-Kit Learn.
  prefs: []
  type: TYPE_NORMAL
- en: '*Also as a quick side note, I wrote a sister article to this one detailing
    the same topic but in R, you can find it [here](/2016/08/begineers-guide-neural-networks-r.html).*'
  prefs: []
  type: TYPE_NORMAL
- en: Neural Networks
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Neural Networks are a machine learning framework that attempts to mimic the
    learning pattern of natural biological neural networks. Biological neural networks
    have interconnected neurons with dendrites that receive inputs, then based on
    these inputs they produce an output signal through an axon to another neuron.
    We will try to mimic this process through the use of Artificial Neural Networks
    (ANN), which we will just refer to as neural networks from now on. The process
    of creating a neural network begins with the most basic form, a single perceptron.
  prefs: []
  type: TYPE_NORMAL
- en: The Perceptron
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s start our discussion by talking about the Perceptron! A perceptron has
    one or more inputs, a bias, an activation function, and a single output. The perceptron
    receives inputs, multiplies them by some weight, and then passes them into an
    activation function to produce an output. There are many possible activation functions
    to choose from, such as the logistic function, a trigonometric function, a step
    function etc. We also make sure to add a bias to the perceptron, this avoids issues
    where all inputs could be equal to zero (meaning no multiplicative weight would
    have an effect). Check out the diagram below for a visualization of a perceptron:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Perceptron](../Images/69a72f3fc8c8769ca45c4f6f4af93290.png)'
  prefs: []
  type: TYPE_IMG
- en: Once we have the output we can compare it to a known label and adjust the weights
    accordingly (the weights usually start off with random initialization values).
    We keep repeating this process until we have reached a maximum number of allowed
    iterations, or an acceptable error rate.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a neural network, we simply begin to add layers of perceptrons together,
    creating a multi-layer perceptron model of a neural network. You''ll have an input
    layer which directly takes in your feature inputs and an output layer which will
    create the resulting outputs. Any layers in between are known as hidden layers
    because they don''t directly "see" the feature inputs or outputs. For a visualization
    of this check out the diagram below (source: Wikipedia).'
  prefs: []
  type: TYPE_NORMAL
- en: '![ANN](../Images/a2b9be4c6961af29d8ecd46eeff7b949.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's move on to actually creating a neural network with Python!
  prefs: []
  type: TYPE_NORMAL
- en: SciKit-Learn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to follow along with this tutorial, you'll need to have the latest
    version of SciKit Learn installed! It is easily installable either through pip
    or conda, but you can reference the [official installation documentation](http://scikit-learn.org/stable/install.html) for
    complete details on this.
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll use SciKit Learn's built in Breast Cancer Data Set which has several features
    of tumors with a labeled class indicating whether the tumor was Malignant or Benign.
    We will try to create a neural network model that can take in these features and
    attempt to predict malignant or benign labels for tumors it has not seen before.
    Let's go ahead and start by getting the data!
  prefs: []
  type: TYPE_NORMAL
- en: 'This object is like a dictionary, it contains a description of the data and
    the features and targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]   dict_keys([''DESCR'', ''feature_names'', ''target_names'', ''target'',
    ''data''])   [PRE1]`  [PRE2]   (569, 30)   [PRE3]`'
  prefs: []
  type: TYPE_NORMAL
