["```py\nFROM jupyterhub/jupyterhub:1.2# Copy the JupyterHub configuration in the container\nCOPY jupyterhub_config.py .# Download script to automatically stop idle single-user servers\nCOPY cull_idle_servers.py .# Install dependencies (for advanced authentication and spawning)\nRUN pip install dockerspawner\n```", "```py\nversion: '3'services:\n  # Configuration for Hub+Proxy\n  jupyterhub:\n    build: .                # Build the container from this folder.\n    container_name: jupyterhub_hub   # The service will use this container name.\n    volumes:                         # Give access to Docker socket.\n      - /var/run/docker.sock:/var/run/docker.sock\n      - jupyterhub_data:/srv/jupyterlab\n    environment:                     # Env variables passed to the Hub process.\n      DOCKER_JUPYTER_IMAGE: jupyter/tensorflow-notebook\n      DOCKER_NETWORK_NAME: ${COMPOSE_PROJECT_NAME}_default\n      HUB_IP: jupyterhub_hub\n    ports:\n      - 8000:8000\n    restart: unless-stopped  # Configuration for the single-user servers\n  jupyterlab:\n    image: jupyter/tensorflow-notebook\n    command: echovolumes:\n  jupyterhub_data:\n```", "```py\nCOMPOSE_PROJECT_NAME**=**jupyter_hub\n```", "```py\nimport os\nimport sysc.JupyterHub.spawner_class **=** 'dockerspawner.DockerSpawner'\nc.DockerSpawner.image **=** os.environ['DOCKER_JUPYTER_IMAGE']\nc.DockerSpawner.network_name **=** os.environ['DOCKER_NETWORK_NAME']\nc.JupyterHub.hub_connect_ip **=** os.environ['HUB_IP']\nc.JupyterHub.hub_ip **=** \"0.0.0.0\" *# Makes it accessible from anywhere on your network*c.JupyterHub.admin_access **=** Truec.JupyterHub.services **=** [\n    {\n        'name': 'cull_idle',\n        'admin': True,\n        'command': [sys.executable, 'cull_idle_servers.py', '--timeout=42000']\n    },\n]c.Spawner.default_url **=** '/lab'notebook_dir **=** os.environ.get('DOCKER_NOTEBOOK_DIR') **or** '/home/jovyan/work'\nc.DockerSpawner.notebook_dir **=** notebook_dir\nc.DockerSpawner.volumes **=** {\n    '/home/sidhu': '/home/jovyan/work'\n}\n```"]