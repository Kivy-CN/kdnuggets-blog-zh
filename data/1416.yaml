- en: Handling Trees in Data Science Algorithmic Interview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理数据科学中的树结构算法面试
- en: 原文：[https://www.kdnuggets.com/2020/01/handling-trees-data-science-algorithmic-interview.html](https://www.kdnuggets.com/2020/01/handling-trees-data-science-algorithmic-interview.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/01/handling-trees-data-science-algorithmic-interview.html](https://www.kdnuggets.com/2020/01/handling-trees-data-science-algorithmic-interview.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: Algorithms and data structures are an integral part of data science. While most
    of us data scientists don't take a proper algorithms course while studying, they
    are crucial all the same.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 算法和数据结构是数据科学的重要组成部分。虽然我们大多数数据科学家在学习过程中没有修过专门的算法课程，但它们依然至关重要。
- en: Many companies ask data structures and algorithms as part of their interview
    process for hiring data scientists.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多公司在招聘数据科学家时会将数据结构和算法作为面试的一部分。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行IT管理'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Now the question that many people ask here is what is the use of asking a data
    scientist such questions. ***The way I like to describe it is that a data structure
    question may be thought of as a coding aptitude test.***
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在许多人会问，为什么要问数据科学家这些问题。***我喜欢将其描述为数据结构问题可以被视为编码能力测试。***
- en: '*We all have given aptitude tests at various stages of our life, and while
    they are not a perfect proxy to judge someone, almost nothing ever really is. So,
    why not a standard algorithm test to judge people''s coding ability.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们都在生活中的不同阶段做过能力测试，虽然这些测试并不是完美的判断标准，但几乎没有什么是完美的。所以，为什么不使用标准算法测试来评估一个人的编码能力呢？*'
- en: But let's not kid ourselves, they will require the same zeal to crack as your
    Data Science interviews, and thus, you might want to give some time for the study
    of algorithms and Data structure questions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但不要自欺欺人，它们的难度与数据科学面试的难度相当，因此，你可能需要花些时间来学习算法和数据结构问题。
- en: '***This post is about fast-tracking this study and explaining tree concepts
    for the data scientists so that you breeze through the next time you get asked
    these in an interview.***'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '***这篇文章旨在加速学习过程，并为数据科学家解释树结构的概念，以便下次在面试中被问到时能够轻松应对。***'
- en: But First, Why are Trees important for Data Science?
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但首先，为什么树对数据科学如此重要？
- en: To data scientists, Trees mean a different thing than they mean for a Software
    Engineer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对数据科学家来说，树的意义与对软件工程师来说的不同。
- en: For a software engineer, a tree is just a simple Data Structure they can use
    to manage hierarchical relationships while for a Data Scientists trees form the
    basis of some of the most useful classification and regression algorithms.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件工程师而言，树只是一个简单的数据结构，用于管理层次关系，而对于数据科学家来说，树是一些最有用的分类和回归算法的基础。
- en: So where do these two meet?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这两者在哪里相遇呢？
- en: They are necessarily the same thing. Don't be surprised. Below is how data scientists
    and software engineer's look at trees.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它们实际上是同一个东西。不要感到惊讶。以下是数据科学家和软件工程师如何看待树结构的。
- en: '![Figure](../Images/0d6ea80e7c5eea532c15d9487cfa0855.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/0d6ea80e7c5eea532c15d9487cfa0855.png)'
- en: They are essentially the same
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它们本质上是相同的。
- en: The only difference is that Data science tree nodes keep much more information
    that helps us in identifying how to traverse the tree. For example, in the case
    of Data science tree for prediction, we will look at the feature in the node and
    determine which way we want to move based on the split value.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别在于，数据科学树节点包含了更多信息，这有助于我们确定如何遍历树。例如，在预测的数据科学树中，我们会查看节点中的特征，并根据分裂值确定我们要沿着哪个方向移动。
- en: If you want to write your decision tree from scratch, you might need to understand
    how trees work from a software engineering perspective too.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从头开始编写决策树，你可能还需要了解树在软件工程中的工作原理。
- en: 'Types of Trees:'
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 树的类型：
- en: In this post, I will only be talking about two kinds of trees that get asked
    a lot in Data Science interview questions. Binary Trees(BT) and an extension of
    Binary Trees called Binary Search Trees(BST).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我将只讨论两种在数据科学面试问题中经常出现的树。二叉树（BT）和二叉树的扩展，称为二叉搜索树（BST）。
- en: '1\. Binary Trees:'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 二叉树：
- en: A binary tree is simply a tree in which each node has up to two children. A
    decision tree is an example we see in our day to day lives.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉树仅仅是每个节点最多有两个子节点的树。决策树是我们日常生活中看到的一个例子。
- en: '![Figure](../Images/c6f04dde60176a1efe6b381cc205829f.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/c6f04dde60176a1efe6b381cc205829f.png)'
- en: 'Binary Tree: Each Node has up to 2 children'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉树：每个节点最多有2个子节点
- en: '2\. Binary Search Tree(BST):'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 二叉搜索树（BST）：
- en: 'A binary search tree is a binary tree in which:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉搜索树是二叉树的一种，其中：
- en: All left descendants of a node are less than or equal to the node, and
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的所有左侧后代都小于或等于该节点，且
- en: All right descendants of the node are greater than the node.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的所有右侧后代都大于该节点。
- en: There are variations to this definition when it comes to equalities. Sometimes
    the equalities are on the right-hand side or either side. Sometimes only distinct
    values are allowed in the tree.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关于等式，这一定义有一些变体。有时等式出现在右侧或任一侧。有时树中只允许不同的值。
- en: '![Figure](../Images/27b84aad70fd2e4011f509de90c91a5a.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/27b84aad70fd2e4011f509de90c91a5a.png)'
- en: '[Source](https://www.freecodecamp.org/news/data-structures-101-binary-search-tree-398267b6bff0/)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://www.freecodecamp.org/news/data-structures-101-binary-search-tree-398267b6bff0/)'
- en: 8 is greater than all the elements in the left subtree and smaller than all
    elements in the right subtree. The same could be said for any node in the tree.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 8大于左子树中的所有元素，并小于右子树中的所有元素。树中的任何节点也可以这样说。
- en: 'Creating a Simple Tree:'
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个简单的树：
- en: So How do we construct a simple tree?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何构造一个简单的树呢？
- en: By definition, a tree is made up of nodes. So we start by defining the `node` class
    which we will use to create nodes. Our node class is pretty simple as it holds
    value for a node, the location of the left child and the location of the right
    child.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 根据定义，树由节点组成。因此我们从定义`node`类开始，该类用于创建节点。我们的节点类相当简单，它保存节点的值、左子节点的位置和右子节点的位置。
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can create a simple tree now as:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建一个简单的树，如下：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now I have noticed that we cannot really get the hang of Tree-based questions
    without doing some coding ourselves.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我注意到，我们没有通过一些实际编程就很难掌握基于树的问题。
- en: '***So let us get a little deeper into the coding part with some problems I
    found most interesting when it comes to trees.***'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '***那么让我们更深入地探讨一下编码部分，特别是我在处理树时发现的最有趣的一些问题。***'
- en: 'Inorder Tree Traversal:'
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 中序树遍历：
- en: There are a variety of ways to traverse a tree, but I find the inorder traversal
    to be most intuitive.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历树有多种方法，但我发现中序遍历是最直观的。
- en: When we do an inorder traversal on the root node on a Binary Search tree, it
    visits/prints the node in ascending order.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们对二叉搜索树的根节点进行中序遍历时，它会按升序访问/打印节点。
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This above method is pretty important as it allows us to visit all the nodes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法非常重要，因为它允许我们访问所有节点。
- en: So if we want to search for a node in any binary tree, we might try to use inorder
    tree traversal.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在任何二叉树中搜索一个节点，我们可能会尝试使用中序树遍历。
- en: Creating a Binary Search Tree from a Sorted array
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从排序数组创建二叉搜索树
- en: What kind of coders will we be if we need to create a tree piece by piece manually
    as we did above?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们需要像上面那样一块一块手动创建树，我们会成为什么样的程序员呢？
- en: '***So can we create a BST from a sorted array of unique elements?***'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '***那么我们可以从一个排序的唯一元素数组中创建一个二叉搜索树吗？***'
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Trees are inherently recursive, and so we use recursion here. We take the mid
    element of the array and assign it as the node. We then apply the `create_bst` function
    to the left part of the array and assign it to `node.left` and do the same with
    the right part of the array.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 树本质上是递归的，因此我们在这里使用递归。我们取数组的中间元素并将其作为节点。然后我们将`create_bst`函数应用于数组的左部分并将其分配给`node.left`，右部分也做相同的操作。
- en: And we get our BST.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们就得到了我们的二叉搜索树。
- en: Have we done it right? We can check it by creating the BST and then doing an
    inorder traversal.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做对了吗？我们可以通过创建二叉搜索树然后进行中序遍历来检查。
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Seems Right!
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来对！
- en: Let's check if our tree is a Valid BST
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的树是否是有效的BST
- en: '![Figure](../Images/380b0d1a2fed9cfe40b8371b528cdea1.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/380b0d1a2fed9cfe40b8371b528cdea1.png)'
- en: Think Recursion!!!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 思考递归!!!
- en: But again what sort of coders are we if we need to print all the elements and
    check manually for the BST property being satisfied?
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，如果我们需要打印所有元素并手动检查是否满足BST属性，那我们算什么样的编码者呢？
- en: Here is a simple code to check if our BST is valid or not. We assume strict
    inequality in our Binary Search Tree.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个简单的代码，用于检查我们的BST是否有效。我们假设我们的二叉搜索树中严格不等。
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We check the subtrees recursively if they satisfy the Binary Search tree property
    or not. At each recursive call, we change the `minval` or `maxval` for the call
    to provide the function with the range of allowed values for the subtree.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们递归地检查子树是否满足二叉搜索树的性质。在每次递归调用时，我们更改`minval`或`maxval`，以为函数提供子树的允许值范围。
- en: Conclusion
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: '***In this post, I talked about Trees from a software engineering perspective.
    If you want to see trees from a data science perspective, you might take a look
    at this post.***'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '***在这篇文章中，我从软件工程的角度讨论了树。如果你想从数据科学的角度了解树，可以看看这篇文章。***'
- en: '[**The Simple Math behind 3 Decision Tree Splitting criterions**](https://towardsdatascience.com/the-simple-math-behind-3-decision-tree-splitting-criterions-85d4de2a75fe)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[**三种决策树分裂标准背后的简单数学**](https://towardsdatascience.com/the-simple-math-behind-3-decision-tree-splitting-criterions-85d4de2a75fe)'
- en: Understanding Splitting Criterions
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 理解分裂标准
- en: Trees form the basis of some of the most asked questions in Data Science algorithmic
    interviews. I used to despair such tree-based questions in the past, but now I
    have grown to like the mental exercise involved in them. And I love the recursive
    structure involved in such problems.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 树是数据科学算法面试中最常见问题的基础。我曾经对这些树形问题感到绝望，但现在我喜欢其中的思维锻炼。我喜欢这些问题中涉及的递归结构。
- en: And while you can go a fair bit in data science without learning them, you can
    learn them just for a little bit of fun and maybe to improve your programming
    skills.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以在数据科学中不学习它们，但你可以为了乐趣和提升编程技能而学习它们。
- en: Here is a small [notebook](https://www.kaggle.com/mlwhiz/tree-data-structure-and-algorithms) for
    you where I have put all these small concepts for you to try and run.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个小的[notebook](https://www.kaggle.com/mlwhiz/tree-data-structure-and-algorithms)，我在里面放置了所有这些小概念供你尝试和运行。
- en: Take a look at my other posts in the [Algorithmic Interviews Series](https://towardsdatascience.com/tagged/algorithms-interview),
    if you want to learn about [Recursion](https://towardsdatascience.com/three-programming-concepts-for-data-scientists-c264fc3b1de8), [Dynamic
    Programming](https://towardsdatascience.com/dynamic-programming-for-data-scientists-bb7154b4298b) or [Linked
    Lists](https://towardsdatascience.com/a-simple-introduction-of-linked-lists-for-data-scientists-a71f0eb31d87).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解[递归](https://towardsdatascience.com/three-programming-concepts-for-data-scientists-c264fc3b1de8)、[动态规划](https://towardsdatascience.com/dynamic-programming-for-data-scientists-bb7154b4298b)或[链表](https://towardsdatascience.com/a-simple-introduction-of-linked-lists-for-data-scientists-a71f0eb31d87)，可以查看我其他关于[算法面试系列](https://towardsdatascience.com/tagged/algorithms-interview)的帖子。
- en: Continue Learning
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继续学习
- en: If you want to read up more on Algorithms and Data structures, here is an [**Algorithm
    Specialization on Coursera by UCSanDiego**](https://click.linksynergy.com/deeplink?id=lVarvwc5BD0&mid=40328&murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fdata-structures-algorithms)**, **which
    I highly recommend.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于算法和数据结构的内容，这里有一个[**UCSanDiego的Coursera算法专项**](https://click.linksynergy.com/deeplink?id=lVarvwc5BD0&mid=40328&murl=https%3A%2F%2Fwww.coursera.org%2Fspecializations%2Fdata-structures-algorithms)**，**我强烈推荐。
- en: Thanks for the read. I am going to be writing more beginner-friendly posts in
    the future too. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal?source=post_page---------------------------) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX?source=post_page---------------------------) to
    be informed about them. As always, I welcome feedback and constructive criticism
    and can be reached on Twitter [@mlwhiz](https://twitter.com/MLWhiz?source=post_page---------------------------).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读。我将来还会写更多适合初学者的帖子。关注我在 [**Medium**](https://medium.com/@rahul_agarwal?source=post_page---------------------------) 或订阅我的 [**博客**](http://eepurl.com/dbQnuX?source=post_page---------------------------)，以便了解最新内容。欢迎反馈和建设性批评，可以在Twitter上找到我 [@mlwhiz](https://twitter.com/MLWhiz?source=post_page---------------------------)。
- en: 'Also, a small disclaimer: There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，小声明：本文中可能包含一些相关资源的附属链接，分享知识永远是好事。
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is Senior
    Statistical Analyst at WalmartLabs. Follow him on Twitter [@mlwhiz](https://twitter.com/MLWhiz).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** 是WalmartLabs的高级统计分析师。关注他的Twitter [@mlwhiz](https://twitter.com/MLWhiz)。'
- en: '[Original](https://towardsdatascience.com/handling-trees-in-data-science-algorithmic-interview-ea14dd1b6236).
    Reposted with permission.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/handling-trees-in-data-science-algorithmic-interview-ea14dd1b6236)。经授权转载。'
- en: '**Related:**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[6 bits of advice for Data Scientists](/2019/09/advice-data-scientists.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家6条建议](/2019/09/advice-data-scientists.html)'
- en: '[Good Feature Building Techniques and Tricks for Kaggle](/2018/12/feature-building-techniques-tricks-kaggle.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Kaggle的优质特征构建技巧和窍门](/2018/12/feature-building-techniques-tricks-kaggle.html)'
- en: '[The Hitchhiker’s Guide to Feature Extraction](/2019/06/hitchhikers-guide-feature-extraction.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[特征提取的搭车指南](/2019/06/hitchhikers-guide-feature-extraction.html)'
- en: More On This Topic
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[How Has the Adoption of AI in Algorithmic Trading Affected the…](https://www.kdnuggets.com/2022/04/adoption-ai-algorithmic-trading-affected-finance-industry.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[人工智能在算法交易中的应用如何影响…](https://www.kdnuggets.com/2022/04/adoption-ai-algorithmic-trading-affected-finance-industry.html)'
- en: '[Handling Missing Values in Time-series with SQL](https://www.kdnuggets.com/2022/09/handling-missing-values-timeseries-sql.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用SQL处理时间序列中的缺失值](https://www.kdnuggets.com/2022/09/handling-missing-values-timeseries-sql.html)'
- en: '[Machine Learning from Scratch: Decision Trees](https://www.kdnuggets.com/2022/11/machine-learning-scratch-decision-trees.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[从零开始学习机器学习：决策树](https://www.kdnuggets.com/2022/11/machine-learning-scratch-decision-trees.html)'
- en: '[Decision Trees vs Random Forests, Explained](https://www.kdnuggets.com/2022/08/decision-trees-random-forests-explained.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[决策树与随机森林的解释](https://www.kdnuggets.com/2022/08/decision-trees-random-forests-explained.html)'
- en: '[Demystifying Decision Trees for the Real World](https://www.kdnuggets.com/demystifying-decision-trees-for-the-real-world)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[揭开决策树在现实世界中的面纱](https://www.kdnuggets.com/demystifying-decision-trees-for-the-real-world)'
- en: '[Generalized and Scalable Optimal Sparse Decision Trees(GOSDT)](https://www.kdnuggets.com/2023/02/generalized-scalable-optimal-sparse-decision-treesgosdt.html)*'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[广义和可扩展的最优稀疏决策树(GOSDT)](https://www.kdnuggets.com/2023/02/generalized-scalable-optimal-sparse-decision-treesgosdt.html)*'
