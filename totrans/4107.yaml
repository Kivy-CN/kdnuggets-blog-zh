- en: Five Ways to do Conditional Filtering in Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/12/five-ways-conditional-filtering-pandas.html](https://www.kdnuggets.com/2022/12/five-ways-conditional-filtering-pandas.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/0480a3eadb799c1eabeb5cdd573d639c.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: When I started my journey into data science, I learned R as my first programming
    language.  I became very familiar using the dplyr package to filter data based
    on certain conditions.  Fast forward a few years to when I started using Python
    and I initially had an aversion to Pandas because of how different it was from
    dplyr.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: As time went on, I became more comfortable using Pandas methods to filter data
    and it became less intimidating.  This blog post is a walkthrough of five ways
    to conditionally filter data using Pandas, using a single condition filter and
    then a multi-condition filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The filtering techniques used in this post are:'
  prefs: []
  type: TYPE_NORMAL
- en: Pandas filtering with selection brackets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pandas series methods: isin(), between(), contains()'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining separate filters outside of selection bracket filtering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: query()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loc[]
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bonus: Using the pandas filter() method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The dataset for this post comes from “The Vehicle Dataset” by Nehla Birla hosted
    on [Kaggle.com](https://www.kaggle.com/datasets/nehalbirla/vehicle-dataset-from-cardekho)
    and contains information about used cars for sale.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, I import Pandas and read in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/7a7be2d09bfd9072799e7003b5a5f222.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To get a feeling for the syntax and readability of each method, this post looks
    at two examples to filter the vehicle dataset: one simple and one with multiple
    conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Simple filter: find all cars from the year 2013 and newer'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Multi-condition filter: Find all Hondas from the years 2013, 2014, and 2015
    between the prices 300000 and 450000 (inclusive).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Filtering Method 1: Selection Brackets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finding all the vehicles that have a year of 2013 or newer is a fairly standard
    Pandas filtering task: select the column of the dataset to filter on, tell it
    what value to filter against, and plug that condition into brackets for the entire
    dataframe.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
  prefs: []
  type: TYPE_IMG
- en: If we want to make our multi-condition search, we can put each individual filters
    inside parentheses () separated by our Boolean search criteria (& for and, | for
    or, and ~ for not).
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  prefs: []
  type: TYPE_IMG
- en: These multiple conditions technically work, but the readability of this code
    is not great.  There are brackets and parentheses all over the place.  To clean
    up the code and use fewer conditions, pandas has various methods that we can apply
    for the same results, one of which we just used in the code chunk above, called
    str.contains().
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering Method 2: Selection Brackets with Series Functions'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are numerous pandas.Series methods we can apply to our columns.  They
    are listed in the [Pandas documentation](https://pandas.pydata.org/docs/reference/api/pandas.Series.html). 
    The reason we look at series methods as we filter is because each column of our
    Pandas.DataFrame individually is a Pandas.Series element, so we can apply Pandas.Series
    methods and functionality to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are numerous methods we could use with the vehicles dataset, but to filter
    the data with our multiple condition example, we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: isin() – check to see if the series values are in a given list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: str.contains() – check to see if a string is in the series
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: between() – find series value that are between two values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use isin() to check which vehicles meet our years of interest, str.contains()
    to find which vehicles have Honda in the name, and between() to find vehicles
    in our price range.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  prefs: []
  type: TYPE_IMG
- en: This cleans up the code somewhat, and takes advantage of a few Pandas.Series
    methods, but the code still isn’t exactly readable.  To make this look better,
    we can drop our code across multiple lines, one line per filtering action.  The
    way to do that is by putting regular parentheses just inside our initial dataframe
    selection brackets, then inserting all conditions inside these parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Filtering Method 3: Selection Brackets with External Filters and Series Methods'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A blend of the two methods above, we can define filters outside of our selection
    brackets as variables and then call each variable inside the selection brackets. 
    This is a clean way to write each filter on its own individual line and then call
    all filters in one line of code.  It means less overall parentheses and line breaks
    throughout the code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Filtering Method 4: query()'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I first heard of pandas.Series.query a year or two ago on a podcast, and I
    wasn’t a fan at first.  Over time, it has really grown on me.  A query expression
    is a great way to subset data: they can be basic and easy or complex and powerful. 
    The query expression to subset vehicles with years 2013 and newer is simple. 
    You feed your filtering parameter(s) in as a string.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As you move on to multi-condition filters, you can make your query string more
    complex.  Instead of typing & or | between your filter parameters, you simply
    type and or or, respectively.  Below is the code to write a query expression for
    our multi-condition filter.  *Note: to call variables that are inside the environment
    but outside of the DataFrame/ Series you are querying, you need to use an @ before
    calling the variable.  See the use of @ immediately before calling the list “years.”'
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  prefs: []
  type: TYPE_IMG
- en: This is a really neat way to subset your data!  Yet, the more query parameters
    you add, the less readable it becomes.  To overcome this problem, using query,
    we can simply add \ at the place where we want a line break and continue the query
    expression on the next line.  If we want, we can maintain the notation of putting
    one filter condition per line.![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Filtering Method 5: loc[]'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I really enjoy the power that comes with using python lambda functions.  How
    can we translate lambda into filtering the vehicles dataset with our conditions? 
    With the simple, single condition filter we have been applying, we call loc off
    of our dataframe, and with lambda, we can insert our condition.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
  prefs: []
  type: TYPE_IMG
- en: If we want to add multiple conditions, we can just chain another loc off the
    results of the previous one.  However, if left on one line, there are brackets
    and periods everywhere!  It becomes very difficult to read.  To make this more
    readable, we can wrap the entire right side of our expression in parentheses and
    then can put each loc filter on its own line.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Filtering Bonus: Use Pandas.DataFrame.filter'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As an interesting aside, the Pandas.DataFrame method filter()does not allow
    you to filter datasets based on data inside the dataset, like the name implied
    to me originally.  Rather, the method filter() allows you to filter based on row/
    index names and/ or columns names as a way to subset data.
  prefs: []
  type: TYPE_NORMAL
- en: Filtering the vehicle dataset that only has a few columns and the index names
    as integers does not exactly demonstrate the power of filter().  We could make
    the values inside the “name” column the index, which consists of car make and
    model.  However, there are then various rows that have the same make and model
    and would have the same index, which is not a best practice.  Therefore, to use
    make and model but also make each index unique, the current integer index is concatenated
    to the row’s make and model, and then that becomes the new index.  You may or
    may not want to do that in practice, but I wanted to do it just to demonstrate
    the method.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/0075643c607d15f324d105eb346d0627.png)'
  prefs: []
  type: TYPE_IMG
- en: With this new index, we can use the Pandas.DataFrame method filter() to filter
    based on index name.  With filter(), we can search for particular indices using
    the input like (which is similar to str.contains() like we used before) or we
    can search for indices by using regular expressions.  To filter the data based
    on the multi-condition filter we have used throughout this post, we can return
    the same results shown in the other five techniques.  The only difference now
    is that we are using index values to help filter results.
  prefs: []
  type: TYPE_NORMAL
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/378c8e5cb3812c09022595e69afcb0a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That’s it!  We have seen five techniques and one bonus technique to help slice
    and dice your data given one or multiple filtering criteria.  I’m not sure which
    one I like the best; I suppose it depends on the use case.  I can see myself using
    query() for the ease and readability of query string expressions, but I can also
    see myself using loc[] with lambda functions!
  prefs: []
  type: TYPE_NORMAL
- en: I hope this post gave you a few ideas of how you can apply some powerful Pandas
    functionality to your data!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Bryan Kolano](https://www.linkedin.com/in/bryan-kolano/)** is an active
    duty U.S. Army officer and data scientist living outside of Washington, D.C. When
    he is not trying to improve his Python skills, he finds himself spending time
    with his wife and four kids or studying Spanish and French.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Ways of Filtering Python Lists](https://www.kdnuggets.com/2022/11/5-ways-filtering-python-lists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use Conditional Formatting in Pandas to Enhance Data Visualization](https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Become a Data Science Professional in Five Steps](https://www.kdnuggets.com/2022/03/become-data-science-professional-five-steps.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Five SQL Window Functions You Should Know For Data Science Interviews](https://www.kdnuggets.com/2022/01/top-five-sql-window-functions-know-data-science-interviews.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n03, Jan 19: A Deep Look Into 13 Data…](https://www.kdnuggets.com/2022/n03.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Five Signs of an Effective Data Science Manager](https://www.kdnuggets.com/2022/06/five-signs-effective-data-science-manager.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
