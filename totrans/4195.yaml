- en: Deploying Your First Machine Learning API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/10/deploying-first-machine-learning-api.html](https://www.kdnuggets.com/2021/10/deploying-first-machine-learning-api.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cbe3b5c834169f5e6ec43685940f6d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | Elements by [vectorjuice](https://www.freepik.com/vectorjuice)
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In this project, we will learn how we can build an application programming interface
    (API) for your machine learning model and then deploy it with simple code. It
    took me one hour to learn FastAPI and five minutes to learn how to deploy it to
    Deta servers. We will also test our API on both local server and remote server
    using Python ***Request***. Let’s go a little bit deeper into the technologies
    that we are going to use in our project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2cbf7f788c3ca73faca8112f4391667d.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: spaCy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: spaCy is more friendly towards application and deployment as compared to the
    famous NLTK Python library which is used for experimentation and evaluation. spaCy
    comes with prebuild statistical neural network NLP models with powerful features
    that are easy to use and implement in your project [spaCy](https://spacy.io/).
    We will be using quite a simple and small prebuilt English model to extract entities
    from our text.
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FastAPI is a fast web framework for building APIs with python, it comes with
    faster query time, easy and minimize code for you to design your first API within
    few minutes [FastAPI](https://fastapi.tiangolo.com/). In our project we will be
    learning how FastAPI works and how can we use our prebuilt model to get entities
    from the English text.
  prefs: []
  type: TYPE_NORMAL
- en: Deta
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using Deta Micros service for our API and Deploy our project without
    docker or YAML files. Deta platform comes with easy to deploy CLI, high scalability,
    secure API authentication keys, option to change subdomain, and logging of the
    web traffic. These functions are completely free to use on [Deta.](https://www.deta.sh/) In
    our project, we are going to use Deta CLI to deploy our Fast API with few lines
    of scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While I was learning FastAPI, I stumble upon the YouTube [video](https://www.youtube.com/watch?v=1zMQBe0l1bM&t=854s&pp=sAQA) that
    motivated me to write this article. [Sebastián Ramírez](https://dev.to/tiangolo) explained
    how the Fast API works and how it’s the fastest python web framework available.
    We will be writing two Python files. One contains a machine learning model, and
    another file contains your API code.
  prefs: []
  type: TYPE_NORMAL
- en: Requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we start, we need to create a new directory with a* requirements.txt* file.
    You can find all the necessary libraries that we are going to use below ????
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Either you can install them one by one or use ????
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We will be using a pretrained NLP model for this project, so we need to download
    it from the GitHub repository [https://github.com/explosion/spacy-models](https://github.com/explosion/spacy-models) or
    just run the requirement file and it will download and install it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Machine Learning Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using pretrained [Spacy](https://www.analyticsvidhya.com/blog/2021/07/creating-data-science-python-package-using-jupyter-notebook/) NLP
    model to extract the entities from the text. If you are using Jupyter notebook,
    try using *%%writefile* to create python file in your directory.
  prefs: []
  type: TYPE_NORMAL
- en: First, we loaded NLP model then extracted entities from CBS [News](https://www.cbsnews.com/news/gabby-thomas-womens-200-meter-bronze-medal-olympics/) article.
    With only few lines of code you are able to run your first machine learning model.
    You can also load trained model using same method.
  prefs: []
  type: TYPE_NORMAL
- en: API file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This is your main file which contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '**read_main**: use ***GET*, **which requests data from the resource in our
    case it will display a message saying ***Welcome*.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**class Article**: Use *pydantic* ***BaseModel* **to define objects and variables
    that will be used for your API [(helpmanual.io)](https://pydantic-docs.helpmanual.io/usage/models/).
    In our case, we are defining content as string and comments as lists of strings.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**analyze_article**: It takes a List of text with comments and displays entities
    using *NLP *objects from ml file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*I know it’s quite confusing, so let’s break it down into smaller parts to
    understand it well.*'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking Down
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have created an object of FastAPI then use it as [decorator](https://www.python.org/dev/peps/pep-0318/) on
    your function using ***@app. get(“/”)***.
  prefs: []
  type: TYPE_NORMAL
- en: '**@app** is your decorator of FastAPI object'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**.get or .post** if HTTP methods for returning data or processing inputs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(“/”)** is the location on web server. In our case its main page. If you
    want to add another directory, you can use (“/<new_section>/”)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: we have created **read_main** function to display message on main page, it’s
    that simple.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will create an ***Article*** class that inherits functions and variables
    from **BaseModel**. This function helps us create the type of argument that we
    are going to use as in the ***POST*** method. In our case, we have created content
    as a string variable and comments as Lists of strings.
  prefs: []
  type: TYPE_NORMAL
- en: In the last part, we are creating *a**** POST*** method (“/article/”) for our
    API. This means we will be creating a new section that will take arguments as
    input and return the results after processing them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Article class as Argument: **Creating articles argument using List of Article,
    which will allow us to add multiple entries of texts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extracting data from articles: **Creating loops to extract data from a list
    of articles and then from lists of comments. It also adds comments to an array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Loading text into NLP model: **loading content into ***nlp*** pretrained
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extracting entities: **extracting entities from the ***nlp*** object and
    then adding it to ***ents*** array. This will stack the results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Display:** The function will return a list of entities and comments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fast API was built on Uvicorn so the server also runs on Uvicorn. In Jupyter
    notebook, you can run the app using ???? or in the terminal just type ***uvicorn*** then
    the*** main*** file and with FastAPI object which is ***app*** in our case.
  prefs: []
  type: TYPE_NORMAL
- en: Our server is running smooth so let’s use ***request.get ***method to access
    it. The API is working by showing us “Welcome” message on main page.
  prefs: []
  type: TYPE_NORMAL
- en: now let's try adding single text and comments as dictionary in a list. We will
    be using ***POST*** request method and ***/article/*** to access our NLP model
    function. Convert your output into ***.json() ***to make it easy to extract the
    data.
  prefs: []
  type: TYPE_NORMAL
- en: we have our dictionary keys: **[‘ents’, ‘comments’]**
  prefs: []
  type: TYPE_NORMAL
- en: Let's check how our entire output looks like. It looks like we have ***ents*** with
    list of labels and entities. Same goes for ***comments*** key
  prefs: []
  type: TYPE_NORMAL
- en: Now let's extract single entity with its text to check the flexibility of our
    output. In our case we are extracting second entity from output.
  prefs: []
  type: TYPE_NORMAL
- en: '**The result shows perfection.**'
  prefs: []
  type: TYPE_NORMAL
- en: Deployment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to your terminal or you can do same steps with in your Jupyter notebook cell
    but adding “**!**” before any script. First your need to access your directory
    using ***cd*** where your ***main.py ***and ***ml.py*** files are located.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The three main file that are required by **Deta** are ***ml.py***, ***main.py***,and ***requirments.txt***.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a28c7a037b60b7d3cc2860e2d16fd698.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | Project Directory
  prefs: []
  type: TYPE_NORMAL
- en: If you are using **Windows** use bellow command in PowerShell to download and
    install Deta CLI
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: for **Linux**
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Then use*** deta login***, it will take you to the browser and ask you to enter *username* and *password*.
    If you are already logged in, it will take few seconds to authenticate.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/b9199c02fe614b513f6be456b2f9490e.png)'
  prefs: []
  type: TYPE_IMG
- en: Deta Authentication | [deta](https://www.deta.sh/)
  prefs: []
  type: TYPE_NORMAL
- en: These **two words** in your terminal are **magic words**, which will upload
    the files and deploy your app with in 2 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Your app is uploaded on an end point link. In our case [https://93t2gn.deta.dev/](https://93t2gn.deta.dev/)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If you see error check logs using ***deta logs***, make some changes and then
    use ***deta deploy*** to update the changes.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see our app is deployed and running on Deta servers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a8291c87931808399adc386616b0dd5d.png)'
  prefs: []
  type: TYPE_IMG
- en: Project summary | [deta](https://www.deta.sh/)
  prefs: []
  type: TYPE_NORMAL
- en: You can go to the link provided by **Deta** and check it yourself.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/d12e8abad67122f1150250b063d9be31.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Testing Web API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally let's test our remote API as a microservice on Deta platform. This time
    instead of adding local IP, we are going to add Deta end point link. We can run
    without header as we don't have API authentications enable. Deta also provide
    Free API keys when authentications are enabled. It means only you or the person
    who have API key can access web server. To learn more on authentication and subdomain
    I suggest you read [documentations](https://docs.deta.sh/docs/home/).
  prefs: []
  type: TYPE_NORMAL
- en: we are going to add same parameter and same code in order to get same result
    and voilà it works magic. You API is online and can be *easily* access by using
    the link.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After learning FastAPI, I was thinking about what’s next, so one day while scrolling
    through the web I stumble upon Deta which got my attention. It took me few minutes
    to install **Deta CLI** and deploy my API on a remote server. I am quite impressed
    by their subdomain and Free API key feature. It took me no time to understand
    how the service works and how I will be using it for my future projects.
  prefs: []
  type: TYPE_NORMAL
- en: We all ask this question after learning few machines learning models.
  prefs: []
  type: TYPE_NORMAL
- en: I know how to train my model and get predictions, but what’s next? How do I
    share my model with others? So that they can see what I have built and use these
    features in their projects.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This is where cloud platform like **Heroku**, **Google**, **Azure** comes in,
    but these platforms are quite complex understand and you need to learn to code
    for **Docker** file which can be frustrating sometimes. **Deta** solves all your
    problems with its simple two-word script which will deploy and run your app in
    seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '*You can also check my GitHub repo on this project: *[*kingabzpro/FastAPI-ML-Project*](https://github.com/kingabzpro/FastAPI-ML-Project)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: You can follow me on [LinkedIn](https://www.linkedin.com/in/1abidaliawan/) and [Polywork](https://www.polywork.com/kingabzpro) where
    I publish article every week.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Bio: [Abid Ali Awan](http://abidaliawan.me/)** is a certified data scientist
    professional, who loves building machine learning models and blogs about the latest
    AI technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/deploying-your-first-machine-learning-api-1649236c695e).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Working with Python APIs For Data Science Project](/2021/09/python-apis-data-science-project.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building RESTful APIs using Flask](/2021/05/building-restful-apis-flask.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Production-Ready Machine Learning NLP API with FastAPI and spaCy](/2021/04/production-ready-machine-learning-nlp-api-fastapi-spacy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
