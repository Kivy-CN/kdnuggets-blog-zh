- en: 'Genetic Programming in Python: The Knapsack Problem'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的遗传编程：背包问题
- en: 原文：[https://www.kdnuggets.com/2023/01/knapsack-problem-genetic-programming-python.html](https://www.kdnuggets.com/2023/01/knapsack-problem-genetic-programming-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/01/knapsack-problem-genetic-programming-python.html](https://www.kdnuggets.com/2023/01/knapsack-problem-genetic-programming-python.html)
- en: '![The Knapsack Problem Using Genetic Programming: A Python Implementation](../Images/7b463d16bed21ff7a97ece2d230b0111.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![使用遗传编程解决背包问题：Python 实现](../Images/7b463d16bed21ff7a97ece2d230b0111.png)'
- en: Image created with DALL•E
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 DALL•E 创建的图像
- en: '* * *'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: ''
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: ''
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: ''
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: ''
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Editor''s note:** As pointed out by reader Monem in the comments below, this
    is an example of using a **genetic algorithm** to solve the knapsack problem,
    not genetic programming. I got involved in the production of the article and made
    a very basic error that carried all the way through. For transparency, I''m leaving
    as it, with this correction note. Apologies for the confusion.'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**编辑注释：** 正如读者 Monem 在下面的评论中指出的，这是使用 **遗传算法** 来解决背包问题的一个例子，而不是遗传编程。我参与了文章的制作，并犯了一个非常基本的错误，一直延续到现在。为了透明起见，我保留了原文，并附上此更正说明。对引起的困惑表示歉意。'
- en: In this article, we will look at the knapsack problem, a classic in computer
    science. We will explain why it is difficult to solve using traditional computational
    methods, and how genetic programming can help find a "good enough" solution. Afterwards,
    we will look at a Python implementation of just such a solution to test out for
    ourselves.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将探讨背包问题，这是计算机科学中的经典问题。我们将解释为什么使用传统计算方法很难解决这一问题，以及遗传编程如何帮助找到“足够好”的解决方案。之后，我们将查看一个
    Python 实现的具体解决方案，并亲自测试一下。
- en: The Knapsack Problem
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 背包问题
- en: The knapsack problem can be used to illustrate the difficulty of solving complex
    computational problems. In its simplest form, one is given a knapsack of a certain
    capacity, a set of items with their sizes and values, and asked to maximize the
    value of the items placed in the knapsack without exceeding the capacity. The
    knapsack problem can be formulated in many ways, but it is generally considered
    to be a difficult problem to solve when employing traditional algorithms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 背包问题可以用来说明解决复杂计算问题的困难。在最简单的形式中，给定一个一定容量的背包、一组物品及其大小和价值，并要求在不超过容量的情况下最大化放入背包的物品的价值。背包问题可以有多种表述方式，但一般认为使用传统算法解决是一个困难的问题。
- en: The difficulty of the knapsack problem lies in the fact that it is an NP-complete
    problem, which means that there is no known solution that can guarantee a globally
    optimal solution. Therefore, the problem is intractable and cannot be quickly
    solved using traditional methods. The best known algorithms for solving the knapsack
    problem involve using brute force search or heuristics, which can have lengthy
    run times, and which may not guarantee an optimal solution.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 背包问题的难点在于它是一个 NP 完全问题，这意味着没有已知的解决方案可以保证全局最优解。因此，该问题难以处理，无法使用传统方法快速解决。解决背包问题的最佳已知算法涉及使用暴力搜索或启发式方法，这些方法可能会有较长的运行时间，并且可能无法保证最优解。
- en: Genetic Programming
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗传编程
- en: Genetic programming, however, can provide an alternative method for finding
    a solution to the knapsack problem. Genetic programming is a technique that uses
    evolutionary algorithms to search for solutions to complex problems. By using
    genetic programming, it is possible to quickly find a solution that is “good enough”
    for the given problem. It can also be used to optimize and improve upon solutions.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，遗传编程可以提供一种寻找背包问题解决方案的替代方法。遗传编程是一种使用进化算法来搜索复杂问题解决方案的技术。通过使用遗传编程，可以快速找到对给定问题“足够好”的解决方案。它还可以用来优化和改进解决方案。
- en: In genetic programming, a set of possible solutions (or initial generation)
    are randomly generated, and then evaluated based on a set of criteria. Those solutions
    that best fit the criteria are then selected, and genetic mutations are applied
    to create new solution variants (or subsequent generations). This new generation
    of variants is then evaluated and the process is repeated until a satisfactory
    solution is found. The process is repeated until an optimal, or best “good enough”,
    solution is found.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在遗传编程中，一组可能的解决方案（或初始生成）被随机生成，然后根据一组标准进行评估。那些最符合标准的解决方案将被选中，并应用遗传变异以创建新的解决方案变体（或后续生成）。然后评估这些新一代变体，并重复这个过程，直到找到令人满意的解决方案。该过程会重复，直到找到最佳的或“足够好”的解决方案。
- en: The advantage of using genetic programming to solve the knapsack problem is
    that a good enough solution can be found quickly without having to exhaustively
    search through all possible solutions. This makes it a much more efficient approach
    than traditional algorithms, and allows for a much faster solution to be found.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用遗传编程解决背包问题的优势在于，可以快速找到足够好的解决方案，而不需要穷举所有可能的解决方案。这使得它比传统算法更高效，能够更快地找到解决方案。
- en: Explaining the Code
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释代码
- en: Now that we have an idea of what the knapsack problem is, what genetic programming
    is, and why we would use the latter to try and solve the former, let's have a
    look at a Python implementation of what we have described above.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了背包问题是什么，遗传编程是什么，以及为什么我们要使用后者来尝试解决前者，让我们来看一下上述描述的Python实现。
- en: We will go through the important functions one by one, and then look at the
    holistic program afterwards.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐一了解重要函数，然后再查看整体程序。
- en: The program is implemented in Python, using no third party libraries.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序使用Python实现，未使用任何第三方库。
- en: Generate random population
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成随机种群
- en: This function generates a random population of a given size. It uses a for loop
    to iterate through the given size, and for each iteration it creates a chromosome.
    This chromosome is a list of 0s and 1s, which is generated using the random.choice()
    function. The chromosome is then appended to the population list. Finally, the
    function prints out a message and returns the population list. This function is
    useful for creating a population of individuals for genetic algorithms.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数生成给定大小的随机种群。它使用for循环遍历给定的大小，并为每次迭代创建一个染色体。这个染色体是由0和1组成的列表，使用random.choice()函数生成。然后将染色体附加到种群列表中。最后，函数打印出一条消息并返回种群列表。此函数对于创建遗传算法的个体种群非常有用。
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Calculate chromosome fitness
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 计算染色体适应度
- en: This function is used to calculate the fitness of a chromosome. It takes a chromosome
    as an argument and iterates through it. If the value of the chromosome at a given
    index is 1, it adds the corresponding item's weight and value to the total weight
    and total value respectively. If the total weight exceeds the maximum weight,
    the fitness is set to 0\. Otherwise, the fitness is set to the total value. This
    function is used in genetic algorithms to determine the fitness of a given chromosome.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数用于计算染色体的适应度。它以染色体作为参数，并对其进行迭代。如果染色体在给定索引处的值为1，它就将对应项的重量和值分别添加到总重量和总值中。如果总重量超过最大重量，则适应度设置为0\。否则，适应度设置为总值。该函数在遗传算法中用于确定给定染色体的适应度。
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Select chromosomes
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择染色体
- en: This function is used to select two chromosomes from a population for crossover.
    It first calculates the fitness values of each chromosome in the population using
    the calculate_fitness() function. It then normalizes the fitness values by dividing
    each value by the sum of all fitness values. Finally, it uses the random.choices()
    function to randomly select two chromosomes from the population based on the normalized
    fitness values. The two selected chromosomes are then returned as the parent chromosomes
    for crossover.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数用于从一个种群中选择两个染色体进行交叉操作。它首先使用 `calculate_fitness()` 函数计算种群中每个染色体的适应度值。然后，它通过将每个值除以所有适应度值的总和来对适应度值进行归一化。最后，它使用
    `random.choices()` 函数根据归一化的适应度值随机选择两个染色体。然后，这两个选择的染色体作为交叉操作的父代染色体返回。
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Perform crossover
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行交叉操作
- en: This function performs crossover between two chromosomes. It takes two parent
    chromosomes as input and randomly selects a crossover point. It then creates two
    child chromosomes by combining the two parent chromosomes at the crossover point.
    The first child chromosome is created by taking the first part of the first parent
    chromosome and the second part of the second parent chromosome. The second child
    chromosome is created by taking the first part of the second parent chromosome
    and the second part of the first parent chromosome. Finally, the two child chromosomes
    are returned as the output.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数在两个染色体之间执行交叉操作。它接受两个父代染色体作为输入，并随机选择一个交叉点。然后，通过在交叉点结合两个父代染色体来创建两个子代染色体。第一个子代染色体由第一个父代染色体的前半部分和第二个父代染色体的后半部分组成。第二个子代染色体由第二个父代染色体的前半部分和第一个父代染色体的后半部分组成。最后，这两个子代染色体作为输出返回。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Perform mutation
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行突变
- en: This function performs a mutation on a chromosome. It takes in a chromosome
    as an argument and uses the random module to generate a random number between
    0 and the length of the chromosome. If the value at the mutation point is 0, it
    is changed to 1, and if it is 1, it is changed to 0\. The function then prints
    a message and returns the mutated chromosome. This function can be used to simulate
    genetic mutations in a population of organisms.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数对染色体进行突变。它接受一个染色体作为参数，并使用 `random` 模块生成一个介于 0 和染色体长度之间的随机数。如果突变点的值是 0，它将被更改为
    1；如果是 1，它将被更改为 0。然后，函数打印一条消息并返回突变后的染色体。这个函数可以用来模拟生物种群中的基因突变。
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Get best chromosome
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取最佳染色体
- en: This function takes in a population of chromosomes and returns the best chromosome
    from the population. It does this by first creating a list of fitness values for
    each chromosome in the population. It then finds the maximum fitness value and
    its corresponding index in the list. Finally, it returns the chromosome at the
    index of the maximum fitness value. This function is useful for finding the best
    chromosome from a population of chromosomes in order to use it for further operations.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数接受一个染色体种群并返回种群中最好的染色体。它首先为种群中每个染色体创建一个适应度值的列表。然后，找到最大适应度值及其在列表中的对应索引。最后，返回最大适应度值索引处的染色体。这个函数用于从染色体种群中找到最佳染色体，以便进行进一步的操作。
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The control loop
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制循环
- en: This code is performing an evolutionary algorithm to evolve a population of
    chromosomes. It starts by looping through the specified number of generations.
    For each generation, two chromosomes are selected from the population, and then
    crossover is performed on them to generate two new chromosomes. Then, the two
    new chromosomes are subjected to mutation with a given probability. The new chromosomes
    are individually subject to a random genetic mutation if the randomly generated
    probability is above the predetermined threshold. Finally, the old population
    is replaced with the new population, which consists of the two new chromosomes
    and the remaining chromosomes from the old population.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码正在执行一种进化算法，以进化一组染色体。它首先循环指定的代数次数。对于每一代，从种群中选择两个染色体，然后对它们进行交叉以生成两个新的染色体。接着，这两个新的染色体会以给定的概率进行突变。如果随机生成的概率高于预定的阈值，则新的染色体会经历随机的基因突变。最后，旧的种群会被新的种群替代，新种群由这两个新染色体和旧种群中的剩余染色体组成。
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Full Python Implementation
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完整的 Python 实现
- en: If we take the above functions and control loop, add a list of item along with
    a few parameters and some output to the console, we get the following full Python
    implementation.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将上述函数和控制循环，加上一个项目列表以及一些参数和控制台输出，我们将得到以下完整的 Python 实现。
- en: Note that all of the parameters are hardcoded for simplicity; however, with
    little trouble one could instead accept command line arguments or solicit user
    input for any of them, including the number, value, and weight of available items.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有参数都是为了简便而硬编码的；不过，只需稍加修改即可接受命令行参数或请求用户输入，包括可用项目的数量、价值和重量。
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the above code to the file `knapsack_ga.py`, and then run it by typing
    `python knapsack_ga.py`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 将上述代码保存到文件`knapsack_ga.py`中，然后通过输入`python knapsack_ga.py`来运行它。
- en: 'A sample output is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例输出如下：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And there you go. You now know how to use genetic programming to solve the knapsack
    problem. With a little ingenuity, the above script could be modified to solve
    all sorts of computationally complex problems for their best "good enough" solutions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，你现在知道如何使用遗传编程解决背包问题了。通过一点创造力，上述脚本可以被修改以解决各种计算复杂的问题，获得最佳的“足够好”的解决方案。
- en: Thanks for reading!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！
- en: '*Portions of this article were plotted and/or written with the assistance of
    GPT-3.*'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '*本文的部分内容是在 GPT-3 的协助下进行规划和/或编写的。*'
- en: '**[Matthew Mayo](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    is a Data Scientist and the Editor-in-Chief of KDnuggets, the seminal online Data
    Science and Machine Learning resource. His interests lie in natural language processing,
    algorithm design and optimization, unsupervised learning, neural networks, and
    automated approaches to machine learning. Matthew holds a Master''s degree in
    computer science and a graduate diploma in data mining. He can be reached at editor1
    at kdnuggets[dot]com.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**[马修·梅奥](https://www.linkedin.com/in/mattmayo13/)** ([**@mattmayo13**](https://twitter.com/mattmayo13))
    是数据科学家，也是 KDnuggets 的主编，这是一个开创性的在线数据科学和机器学习资源。他的兴趣包括自然语言处理、算法设计与优化、无监督学习、神经网络以及机器学习的自动化方法。马修拥有计算机科学硕士学位和数据挖掘研究生文凭。他可以通过
    editor1 at kdnuggets[dot]com 联系到。'
- en: More On This Topic
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Understanding and Implementing Genetic Algorithms in Python](https://www.kdnuggets.com/understanding-and-implementing-genetic-algorithms-in-python)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 理解和实现遗传算法](https://www.kdnuggets.com/understanding-and-implementing-genetic-algorithms-in-python)'
- en: '[Genetic Algorithm Key Terms, Explained](https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[遗传算法关键术语解释](https://www.kdnuggets.com/2018/04/genetic-algorithm-key-terms-explained.html)'
- en: '[Optimizing Genes with a Genetic Algorithm](https://www.kdnuggets.com/2022/04/optimizing-genes-genetic-algorithm.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用遗传算法优化基因](https://www.kdnuggets.com/2022/04/optimizing-genes-genetic-algorithm.html)'
- en: '[The Range of NLP Applications in the Real World: A Different…](https://www.kdnuggets.com/2022/03/different-solution-problem-range-nlp-applications-real-world.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[现实世界中 NLP 应用的范围：一种不同的…](https://www.kdnuggets.com/2022/03/different-solution-problem-range-nlp-applications-real-world.html)'
- en: '[Vanishing Gradient Problem: Causes, Consequences, and Solutions](https://www.kdnuggets.com/2022/02/vanishing-gradient-problem.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[梯度消失问题：原因、后果及解决方案](https://www.kdnuggets.com/2022/02/vanishing-gradient-problem.html)'
- en: '[90% of Today''s Code is Written to Prevent Failure, and That''s a Problem](https://www.kdnuggets.com/2022/07/90-today-code-written-prevent-failure-problem.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[今天90%的代码是为了防止失败，这就是问题所在](https://www.kdnuggets.com/2022/07/90-today-code-written-prevent-failure-problem.html)'
