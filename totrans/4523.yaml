- en: Create Your Own Computer Vision Sandbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/02/computer-vision-sandbox.html](https://www.kdnuggets.com/2020/02/computer-vision-sandbox.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Waun Broderick](https://www.linkedin.com/in/waunbroderick/), CTO, Co-Founder
    @ Gyroscopic**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/a843abceab533ceaa0f49136b79823f1.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Lorenzo Herrera](https://unsplash.com/@lorenzoherrera?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'Difficulty Level: Junior ( ★ ☆ ☆ ☆ ☆)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Recommended Prerequisites:'
  prefs: []
  type: TYPE_NORMAL
- en: Working knowledge of Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic knowledge of CNNs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Development Outcomes:'
  prefs: []
  type: TYPE_NORMAL
- en: A Web Scraper
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Automated Data Augmentation Tool
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Smart CNN Ingestion pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CNN Model Trainer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Together we will be creating a CNN sandbox that can collect images, augment
    data, and easily alter architectures for quick and nimble pivoting for a variety
    of projects.
  prefs: []
  type: TYPE_NORMAL
- en: The process was written for someone with very little CNN building experience,
    so will abstract away higher-level details for the benefit of being able to get
    a macro view on some of the fundamental components. As well several non-essential
    steps have been added in order to visualize outputs and provide transparency to
    the process.
  prefs: []
  type: TYPE_NORMAL
- en: Each of these steps were written to be directly transitioned to create a model
    entirely of your choice, containing any amount of classifications; dogs vs cats,
    country flags, hotdogs vs not hotdogs. However accuracy will vary greatly dependent
    on the amount of classes and similarity between them.
  prefs: []
  type: TYPE_NORMAL
- en: '[**WaunBroderick/Search-Identify**](https://github.com/WaunBroderick/Search-Identify/blob/master/Search_N_Identify.ipynb)'
  prefs: []
  type: TYPE_NORMAL
- en: Permalink Dismiss GitHub is home to over 40 million developers working together
    to host and review code, manage…
  prefs: []
  type: TYPE_NORMAL
- en: Data Collection
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Entering the initial stages of building your CNN it is possible that you may
    not have a data-set to begin working with, that’s alright! In development, it
    is a widely adopted mantra that if it is a manual and monotonous process we can
    usually automate the task away! So Instead of scrolling through endless pages
    of images, we will start our journey by building a sub-program to do that for
    us.
  prefs: []
  type: TYPE_NORMAL
- en: However rest assured we are not creating nested problems where they did not
    exist before, rather, we are ensuring that we can create small segments that can
    be used throughout this walk through, and in other projects in your future.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/08fb74ada07424f843e64e38ce2e0ccb.png)'
  prefs: []
  type: TYPE_IMG
- en: Confused man doing mental math
  prefs: []
  type: TYPE_NORMAL
- en: To begin this process we will need a Microsoft Azure API Key (Application Programming
    Interface Key) which allows us to utilize the capability of their services to
    make this process easier. By heading to the [**Bing Image Search**](https://azure.microsoft.com/en-us/services/cognitive-services/bing-image-search-api/) page
    you can sign up for a FREE TRIAL where you will be given an API key that will
    allow you to scrape images.
  prefs: []
  type: TYPE_NORMAL
- en: Download the following python script;
  prefs: []
  type: TYPE_NORMAL
- en: '[**WaunBroderick/MSB_ImageScraper**](https://github.com/WaunBroderick/MSB_ImageScraper)'
  prefs: []
  type: TYPE_NORMAL
- en: You can’t perform that action at this time. You signed in with another tab or
    window. You signed out in another tab or…
  prefs: []
  type: TYPE_NORMAL
- en: Open the [bing_image_scraper.py](https://github.com/WaunBroderick/MSB_ImageScraper/blob/master/search_bing_api.py) file
    on your computer and alter the following lines (~L19–21) with your API Key, desired
    limits, and save it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After call the file from the cmd/terminal and pass the parameter arguments for
    the **output directory** and **search term**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Repeat this process finding all the necessary images categories you would like
    for your CNN model. The code following these steps will be dependent on each folder
    having the name of a category and all images in their respective folders.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/cac712c8a870baf25ffbc01f1ddc912d.png)'
  prefs: []
  type: TYPE_IMG
- en: Suggested photo directory structure
  prefs: []
  type: TYPE_NORMAL
- en: It is recommended that you try your best to keep the number of photos in each
    category somewhat similar to avoid your model favoring one category over another.
  prefs: []
  type: TYPE_NORMAL
- en: It’s best to skim over the images scraped, and remove the ones that don’t fit
    the search criteria. Due to its lack of strict specifications the web image scraper
    can often pick up images not directly related to your search topic, and if not
    monitored, and ultimately ‘*garbage in, garbage out*’.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/3caf83f335e300f6893ca040d6d7574c.png)'
  prefs: []
  type: TYPE_IMG
- en: Man vacuuming fire
  prefs: []
  type: TYPE_NORMAL
- en: Data Augmentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should now have a series of directories all containing their respective
    image categories. It is important that we ensure that when we are building our
    models that our data-sets are large enough to feed the model sufficient category
    information. There are many things that determine what the size of your sample
    data should be; number of features, classifiers, image characteristics, etc. For
    the sake of this tutorial however we will be multiplying our data-set by a magnitude
    of your choice, and not diving too deeply into that matter in this tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Data augmentation is a step that can be utilized in your computer vision pipeline
    to add a few degrees of noise, or variability to and otherwise homogeneous data-set,
    like; reflections, rotations, fuzzing, or distorting. This step allows you to
    not only increase your data-set but also give your CNN the opportunity to learn
    from a greater variation in data.
  prefs: []
  type: TYPE_NORMAL
- en: For this step, we will be utilizing the [*Keras*](https://keras.io/), and [*Tensorflow*](https://www.tensorflow.org/) libraries
    (*See GitHub page for all library imports*). Begin with creating a list of operations
    and assigning directory where we will instruct to perform on a complete full list
    can be found [here](https://keras.io/preprocessing/image/).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We then write the instructions on how we expect our program to traverse through
    the file structure we’ve created.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After running the script your folders should now contain the original scrapped
    images, and new images with the different transformation you selected.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/23fe7b3872cb00893b748f1ddd19aaa6.png)'
  prefs: []
  type: TYPE_IMG
- en: Identical spider mans pointing at each other
  prefs: []
  type: TYPE_NORMAL
- en: We can use this directory folder structure and function that will split categories
    on these folders, and link the respective images to those labels with ease.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Model Building**'
  prefs: []
  type: TYPE_NORMAL
- en: We then create the architecture of the CNN in it’s sequential pooling and convolutional
    layers. The variables size filters, layer structure, [regularizers](https://keras.io/regularizers/) or [core
    layers](https://keras.io/layers/core/) can also be added and altered to fit your
    project requirements. An altered version of the VGG-16 Net Architecture was used
    as a base for this project, though can be changed to whatever architecture you
    choose, or create.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/a1ecfb8bd42b7caae4c82cf45da51aa0.png)'
  prefs: []
  type: TYPE_IMG
- en: A VGG-16 Architecture
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We then fit the pieces we’ve built thus far together and feed our testing and
    training set data into the CNN architecture. In this example, the [Adams adaptive
    Learning Rate algorithm](https://machinelearningmastery.com/adam-optimization-algorithm-for-deep-learning/),
    and the [categorical cross entropy](https://gombru.github.io/2018/05/23/cross_entropy_loss/) loss
    function were used. In your own projects, you should give thought to each of your
    choices in place of either of these.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You have successfully made your first CNN Model and Data collection
    pipeline!
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ab95188455e55147d3e7f808eadf95d8.png)'
  prefs: []
  type: TYPE_IMG
- en: Woman triumphantly cheering
  prefs: []
  type: TYPE_NORMAL
- en: The following is an example of applying the model built to a new set of images
    to test its accuracy. An additional step that prints the outcomes to a text file
    was also added for ease of viewing.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can now sequentially call these pieces of your program to facilitate different
    parts of the pipeline. In the associated GitHub example there is an additional
    object detection segment that is fit between the augmentation and CNN Model building,
    to exhibit how the system can be built out in a modular manner.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you are using this code skeleton as a launchpad for future projects, make
    sure you study the variability of technical decisions made throughout the walkthrough.
    Each step has been simplified though, the deliberation and decisions made for
    each algorithm and architecture will largely affect your accuracy and overall
    project success. CNNs are not a one size fits all, and should be built to the
    specifications of each project and data set it is being applied to.
  prefs: []
  type: TYPE_NORMAL
- en: Happy Coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Waun Broderick](https://www.linkedin.com/in/waunbroderick/)** is CTO
    & Co-Founder at Gyroscopic. He is a passionate app developer, naval warfare officer,
    and community builder.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/swlh/create-your-own-computer-vision-sandbox-b7c6b8662151).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to Convert an RGB Image to Grayscale](/2019/12/convert-rgb-image-grayscale.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Convert a Picture to Numbers](/2020/01/convert-picture-numbers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Google Open Sources MobileNetV3 with New Ideas to Improve Mobile Computer
    Vision Models](/2019/12/google-open-sources-mobilenetv3-improve-mobile-computer-vision-models.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[TensorFlow for Computer Vision - Transfer Learning Made Easy](https://www.kdnuggets.com/2022/01/tensorflow-computer-vision-transfer-learning-made-easy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Applications of Computer Vision](https://www.kdnuggets.com/2022/03/5-applications-computer-vision.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Things You Need To Know About Data Management And Why It Matters…](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News March 9, 2022: Build a Machine Learning Web App in 5…](https://www.kdnuggets.com/2022/n10.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DINOv2: Self-Supervised Computer Vision Models by Meta AI](https://www.kdnuggets.com/2023/05/dinov2-selfsupervised-computer-vision-models-meta-ai.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
