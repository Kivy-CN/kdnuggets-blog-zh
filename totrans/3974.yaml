- en: Time Series Data with NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/time-series-data-with-numpy](https://www.kdnuggets.com/time-series-data-with-numpy)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Time Series Data with NumPy](../Images/a1f2c813547eec9b12d35f6be3515e78.png)[Image
    by creativeart on Freepik](https://www.freepik.com/free-photo/studio-shot-transparent-baseball-cap-falling-reflection_1078052.htm#fromView=search&page=1&position=30&uuid=fbf287ce-3030-4564-b4c5-c7e5dd7a03bf)'
  prefs: []
  type: TYPE_IMG
- en: Time series data is unique because they depend on each other sequentially. This
    is because the data is collected over time in consistent intervals, for example,
    yearly, daily, or even hourly.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Time series data are important in many analyses because can represent patterns
    for business questions like data forecasting, anomaly detection, trend analysis,
    and more.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can try to analyze the time series dataset with NumPy. NumPy
    is a powerful package for numerical and statistical calculation, but it can be
    extended into time series data.
  prefs: []
  type: TYPE_NORMAL
- en: How can we do that? Let’s try it out.
  prefs: []
  type: TYPE_NORMAL
- en: Time Series data with NumPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we need to install NumPy in our Python environment. You can do that with
    the following code if you haven’t done that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s try to initiate time series data with NumPy. As I have mentioned,
    time series data have sequential and temporal characteristics, so we would try
    to create them with NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in the code above, we set the data time series in NumPy with
    the `dtype` parameter. Without them, the data would be considered string data,
    but now it is considered time series data.
  prefs: []
  type: TYPE_NORMAL
- en: We can create the NumPy time series data without writing them individually.
    We can do that using the certain method from NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We create monthly data from 2023 to 2024, with each month's data as the values.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we can try to analyze the data based on the NumPy datetime series.
    For example, we can create random data with as much as our date range.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using the random method in NumPy, we can generate random values to simulate
    time series analysis.
  prefs: []
  type: TYPE_NORMAL
- en: For example, we can try to perform a moving average analysis with NumPy using
    the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Moving average is a simple time series analysis in which we calculate the mean
    of the subset number of the series. In the example above, we use window 12 as
    the subset. This means we take the first 12 of the series as the subset and take
    their means. Then, the subset moves by one, and we take the next mean subset.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the first subset is this subset where we takes the mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The next subset is where we slide the window by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That’s what the `np.convolve` does as the method would move and sum the series
    subset as much as the `np.ones` array number. We use the valid option only to
    return the amount that can be calculated without any padding.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, moving averages are often used to analyze time series data to
    identify the underlying pattern and as signals such as buy/sell in the financial
    field.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of patterns, we can simulate the trend data in time series with NumPy.
    The trend is a long-term and persistent directional movement in the data. Basically,
    it is the general direction of where the time series data would be.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: What happens above is we fit a linear straight line to our data above. From
    the result, we get the slope of the line (first number) and the intercept (second
    number). The slope represents how much data changes per step or temporal values
    on average, while the intercept is the data direction (positive is upward and
    negative is downward).
  prefs: []
  type: TYPE_NORMAL
- en: We can also have detrended data, which are the components after we remove the
    trend from the time series. This data type is often used to detect fluctuation
    patterns in the trend data and anomalies.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The data without their trend are shown in the output above. In a real-world
    application, we would analyze them to see which one deviates too much from the
    common pattern.
  prefs: []
  type: TYPE_NORMAL
- en: We can also try to analyze seasonality from the time series data we have. Seasonality
    is the regular and predictable patterns that occur at specific temporal intervals,
    such as every 3 months, every 6 months, and others. Seasonality is usually affected
    by external factors such as holidays, weather, events, and many others.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the code above, we calculate the average for each month and then extend the
    data to match its length. In the end, we get the average for each month in the
    two-year interval, and we can try to analyze the data to see if there is seasonality
    worth mentioning.
  prefs: []
  type: TYPE_NORMAL
- en: That’s all the basic method we can do with NumPy for time series data and analysis.
    There are many advanced methods, but the above is the basic we can do.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The time series data is a unique data set as it represents in a sequential manner
    and has temporal properties. Using NumPy, we can set the time series data while
    performing basic time series analysis such as moving averages, trend analysis,
    and seasonality analysis. data while performing basic time series analysis such
    as moving averages, trend analysis, and seasonality analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**[Cornellius Yudha
    Wijaya](https://www.linkedin.com/in/cornellius-yudha-wijaya/)**** is a data science
    assistant manager and data writer. While working full-time at Allianz Indonesia,
    he loves to share Python and data tips via social media and writing media. Cornellius
    writes on a variety of AI and machine learning topics.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Market Data and News: A Time Series Analysis](https://www.kdnuggets.com/2022/06/market-data-news-time-series-analysis.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Faster Way to Prepare Time-Series Data with the AI & Analytics Engine](https://www.kdnuggets.com/2021/12/piexchange-faster-way-prepare-timeseries-data-ai-analytics-engine.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Generate Synthetic Time-series Data with Open-source Tools](https://www.kdnuggets.com/2022/06/generate-synthetic-timeseries-data-opensource-tools.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Identify Missing Data in Time-Series Datasets](https://www.kdnuggets.com/how-to-identify-missing-data-in-timeseries-datasets)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Tractable, Feature Engineering Pipeline for Multivariate…](https://www.kdnuggets.com/2022/03/building-tractable-feature-engineering-pipeline-multivariate-time-series.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
