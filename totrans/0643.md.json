["```py\nimport cv2\nimport numpy as np\n```", "```py\ndef main(): \n frame = cv2.imread(‘6.jpg’)\n original_status = detect_face(frame)\n (h, w) = frame.shape[:2]\n # calculate the center of the image\n center = (w / 2, h / 2)\n scale = 1.0\n angle_90 = 90\n angle_180 = 180\n angle_270 = 270\n if original_status is None:\n status_90 = rotate_image(frame,center,scale,angle_90)\n   if status_90 is None:\n    status_180 = rotate_image(frame,center,scale,angle_180)\n      if status_180 is None:\n         status_270 = rotate_image(frame,center,scale, angle_270)\n```", "```py\ndef detect_face(frame):net = cv2.dnn.readNetFromCaffe(‘deploy.prototxt’,        ‘res10_300x300_ssd_iter_140000.caffemodel’)\n\n    (h, w) = frame.shape[:2]blob = cv2.dnn.blobFromImage(cv2.resize(frame,(300,300)), 1.0,   (300,300), (104.0,177.0,123.0))net.setInput(blob)faces = net.forward()for i in range(0, faces.shape[2]):\n     confidence = faces[0,0,i,2]\n\n    if confidence < 0.7:\n      continuebox = faces[0,0,i,3:7] * np.array([w,h,w,h])\n  (startX, startY, endX, endY) = box.astype(‘int’)text = “face “ + “{:.2f}%”.format(confidence * 100)cv2.imwrite(‘test.jpg’,frame)\n    return True\n```", "```py\ndef rotate_image(frame,center,scale,angle):\n (h, w) = frame.shape[:2]\n M = cv2.getRotationMatrix2D(center, angle, scale)\n frame = cv2.warpAffine(frame, M, (h, w))\n return detect_face(frame)\n```"]