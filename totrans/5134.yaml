- en: How to Optimize SQL Queries for Faster Data Retrieval
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何优化 SQL 查询以加快数据检索速度
- en: 原文：[https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/164222626d74bf6e1b3a054356161524.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/164222626d74bf6e1b3a054356161524.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者
- en: SQL (Structured Query Language), as you probably, know, helps you collect data
    from databases.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQL（结构化查询语言），如你所知，帮助你从数据库中收集数据。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能。'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT。'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: It is specifically designed for that. In other words, it works with rows and
    columns, allowing you to manipulate data from databases using SQL queries.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 它是专门为此设计的。换句话说，它处理行和列，使你能够使用 SQL 查询操作数据库中的数据。
- en: What is SQL Query?
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 SQL 查询？
- en: A SQL query is a bunch of instructions you give to the database to collect information
    from it.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 查询是一组你给数据库的指令，用以收集信息。
- en: You can collect and manipulate data from the database by using these queries.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用这些查询来收集和操作数据库中的数据。
- en: By using them, you can create reports, perform data analysis, and more.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用它们，你可以创建报告、进行数据分析等。
- en: Due to these queries' form and length, execution times might be significant,
    primarily if you work with larger data tables.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些查询的形式和长度，执行时间可能会很长，特别是当你处理更大的数据表时。
- en: Why Do We Need SQL Query Optimization?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们需要 SQL 查询优化？
- en: SQL query optimization's purpose is to make sure you efficiently use the resources.
    In plain English, it reduces execution time, saves costs, and improves performance.
    It is an important skill for developers and data analysts. It’s not only important
    to return the right data from the database. It’s also important to know how efficiently
    you do that.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 查询优化的目的是确保你有效地使用资源。简单来说，它可以减少执行时间，节省成本，并提高性能。这是开发人员和数据分析师的重要技能。不仅仅是从数据库中返回正确的数据同样重要，你还需要知道你是多么高效地做到这一点。
- en: 'You should always ask yourself: “Is there a better way to write my query?”'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该总是问自己：“有没有更好的方式来编写我的查询？”
- en: Let’s talk more in-depth about the reasons for that.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨一下原因。
- en: '**Resource efficiency**: Poorly optimized SQL queries would consume excessive
    system resources, like CPU and memory. This might lead to reduced overall system
    performance. Optimizing SQL queries ensures these resources are used efficiently.
    This, in turn, leads to better performance and scalability.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源效率：** 未优化的 SQL 查询会消耗过多的系统资源，如 CPU 和内存。这可能导致整体系统性能降低。优化 SQL 查询可以确保这些资源的高效使用，从而带来更好的性能和可扩展性。'
- en: '**Reduced execution time**: If the queries run slowly, this will negatively
    impact user experience. Or on an application performance if you have an application
    running. Optimizing queries can help reduce execution time, providing faster response
    times and a better user experience.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**减少执行时间：** 如果查询运行缓慢，这会对用户体验产生负面影响。或者如果你有一个运行中的应用程序，这也会影响应用程序性能。优化查询可以帮助减少执行时间，提供更快的响应时间和更好的用户体验。'
- en: '**Cost savings:** Optimized queries can diminish the hardware and infrastructure
    needed to support the database system. This can lead to cost savings in hardware,
    energy, and maintenance costs.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**成本节约：** 优化的查询可以减少支持数据库系统所需的硬件和基础设施。这可以导致硬件、能源和维护成本的节省。'
- en: Check out “[Best Practices to Write SQL Queries](https://www.stratascratch.com/blog/best-practices-to-write-sql-queries-how-to-structure-your-code/?utm_source=blog&utm_medium=click&utm_campaign=kdn+optimize+sql+queries)”
    that can help you find out how your code structure can be improved, even if it
    is correct.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: SQL Query Optimization Techniques
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s the overview of the SQL query optimization techniques we’ll cover in
    this article.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/19c39f9909d480fde0965e046fa9c692.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Here's the flowchart that shows the suggested steps to follow when optimizing
    the SQL query. We will follow the same approach in our examples.  It's worth noting
    that optimization tools can also help improve query performance. So, let's explore
    these techniques by beginning with the well-known SQL command, SELECT.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/83bc85102717f9785edc955128d9e1a3.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Use SELECT With Specified Fields Instead of SELECT *
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you use SELECT *, it will return all the rows and all the columns from
    the table(s). You need to ask yourself whether you really need that.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Instead of scanning the whole database, use the specific fields after SELECT.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: In the example, we will replace SELECT * with specific column names. As you
    will see, this will reduce the amount of data retrieved.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: As a result, queries run more quickly since the database must obtain and provide
    the requested columns, not all of the table's columns.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: This minimizes the I/O burden on the database, which is especially helpful when
    a table includes lots of columns or plenty of data rows.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: Below is the code before the optimization.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here is the output.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/ef37bb4735e456e630794c838950c315.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: The total query runtime is 260 msec. This can be improved.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: To show you that, I will select only 3 different columns instead of selecting
    all.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: You can select the column you need according to your project needs.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: And this is the output.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/7dd07451fedb7a309579844433ec465e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: As you can see, by defining the fields we want to select, we do not force the
    database to scan all data it has, so the run time is reduced from 260 to 79msec.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Imagine what the difference would be with millions or billions of rows. Or hundreds
    of columns.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Avoid Using SELECT DISTINCT
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SELECT DISTINCT is used to return unique values in a specified column. To do
    that, the database engine must scan the entire table and remove duplicate values.
    In many cases, using an alternative approach like GROUP BY can lead to better
    performance due to reducing the number of data processed.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here is the output.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/7fd929898ef89a5f6a0095c009b3d362.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Our code?? retrieves the unique values in the segment column from the customer
    table. The database engine must process all records in the table, identify duplicate
    values, and return only unique values. This can be costly in terms of time and
    resources, particularly for large tables.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In the alternative version, the following query retrieves the unique values
    in the segment column by using a GROUP BY clause. The GROUP BY clause groups the
    records based on the specified column(s) and returns one record for each group.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here is the output.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/0d7f498479d2c7c0f4459e52f2c1b4fc.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: In this case, the GROUP BY clause effectively groups the records by the segment
    column, resulting in the same output as the SELECT DISTINCT query.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: By avoiding SELECT DISTINCT and using GROUP BY instead, you can optimize SQL
    queries and reduce the total query time from 198 to 62 msec which is more than
    3 times faster.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Avoid Using Loops
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Loops might cause your query to be slower since they force the database to go
    through the records one by one.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: When possible, use built-in operations and SQL functions, which can take advantage
    of database engine optimizations and process data more efficiently.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Let’s define a custom function with a loop.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The code above uses a loop-based approach to calculate the sum of ages for each
    country where the customer segment is 'Corporate'.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: It first retrieves a list of distinct countries and then iterates through each
    country using a loop, calculating the sum of the ages of customers in that country.
    This approach can be slow and inefficient, as it processes the data row by row.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now run this function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here is the output.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/443a4d8bf35f207bd0056112c6d42521.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
- en: The runtime with this approach is 198 milliseconds.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Let’s see our optimized SQL code.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here is its output.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/695c2e444db041a42254006aa023cd92.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: In general, the optimized version using a single SQL query will perform better,
    as it takes advantage of the database engine's optimization capabilities.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: In order to get the same result in our first code, we use a loop in a PL/pgSQL
    function, which is often slower and less effective than doing it with a single
    SQL query. And it forces you to write much more lines of code!
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Use Wild Cards Properly
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The proper use of wildcards is vital for optimizing SQL queries, especially
    when it comes to matching strings and patterns.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Wildcards are special characters used in SQL queries to find specific patterns.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: The most common wildcards in SQL are “%” and ” _”, where “%“ represents any
    sequence of characters and “_” represents a single character.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Using wildcards wisely is important because improper usage can lead to performance
    issues, especially in large databases.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: However, using them efficiently can greatly improve the performance of string-matching
    and pattern-matching queries.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，效率地使用它们可以大大提高字符串匹配和模式匹配查询的性能。
- en: Now let’s see our example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们查看我们的例子。
- en: This query uses the RIGHT() function to extract the last three characters of
    the customer_name column and then checks if it equals 'son'.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询使用 RIGHT() 函数提取 customer_name 列的最后三个字符，然后检查它是否等于 'son'。
- en: '[PRE7]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here is the output.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/50bb79f387c0bbaf207967fd6593f3ed.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/50bb79f387c0bbaf207967fd6593f3ed.png)'
- en: Although this query achieves the desired result, it is not that efficient because
    the RIGHT() function has to be applied to every row in the table.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个查询达到了预期的结果，但效率不是很高，因为 RIGHT() 函数必须应用到表中的每一行。
- en: Let’s optimize our code by using wildcards.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用通配符来优化我们的代码。
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here is the output.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/1f4c7b3e2e885aea23bb8a9fe980f87f.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/1f4c7b3e2e885aea23bb8a9fe980f87f.png)'
- en: This optimized SQL query uses the LIKE operator and the wildcard “%” to search
    for records where the customer_name column ends with 'son'.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个优化后的 SQL 查询使用 LIKE 运算符和通配符 “%” 来查找 customer_name 列以 'son' 结尾的记录。
- en: This approach is more efficient because it takes advantage of the database engine's
    pattern-matching capabilities, and it can make better use of indexes if available.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法更高效，因为它利用了数据库引擎的模式匹配能力，如果有索引的话，它能更好地利用索引。
- en: And as we can see, the total query time is reduced from 436 msec to 62 msec,
    which is almost 7 times faster.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，总查询时间从 436 毫秒减少到 62 毫秒，几乎快了 7 倍。
- en: Use Top or LIMIT to Limit the Number of Sample Results
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 TOP 或 LIMIT 来限制样本结果的数量
- en: Using TOP or LIMIT to limit the sample results is vital for optimizing SQL queries,
    particularly when dealing with large tables.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 TOP 或 LIMIT 来限制样本结果对于优化 SQL 查询至关重要，尤其是处理大型表时。
- en: These clauses allow you to retrieve only a specified number of records from
    a table rather than all the records, which can be beneficial for performance.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些子句允许你从表中检索指定数量的记录，而不是所有记录，这对性能是有益的。
- en: Now, let’s retrieve all information from the customer table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从客户表中检索所有信息。
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here is the output.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/ef37bb4735e456e630794c838950c315.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/ef37bb4735e456e630794c838950c315.png)'
- en: When dealing with larger tables, this operation can increase I/O and network
    latency, which might decrease your SQL query performance.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理大型表时，这个操作可能增加 I/O 和网络延迟，从而降低 SQL 查询性能。
- en: Now let’s optimize our code by limiting the output to 10.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们通过限制输出为 10 条来优化代码。
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here is the output.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/408c8dcaf70162f7f10082c2592ec7b7.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/408c8dcaf70162f7f10082c2592ec7b7.png)'
- en: By limiting output, you will reduce network latency and memory usage and improve
    response time, especially with larger tables. In our example, after SQL query
    optimization, the total query runtime decreased from 260msec to 89msec.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过限制输出，你将减少网络延迟和内存使用，改善响应时间，特别是在处理大型表时。在我们的例子中，SQL 查询优化后，总查询运行时间从 260 毫秒减少到
    89 毫秒。
- en: So our query becomes almost 3 times faster.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们的查询速度变快了近 3 倍。
- en: Use Indexes
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用索引
- en: This time, we will Identify and create appropriate indexes for the columns used
    in the WHERE, JOIN, and ORDER BY clauses to improve query performance.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们将识别并创建适当的索引，用于 WHERE、JOIN 和 ORDER BY 子句中的列，以提高查询性能。
- en: By indexing frequently accessed columns, the database can quicker retrieve data.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对频繁访问的列建立索引，数据库可以更快地检索数据。
- en: Now, let’s run the following query first.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们首先运行以下查询。
- en: '[PRE11]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here is the output.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/853a5aaa0d06964a4879b13bb1bdd2da.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/853a5aaa0d06964a4879b13bb1bdd2da.png)'
- en: Our query runtime is 259 msec.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的查询运行时间为 259 毫秒。
- en: Let’s try to improve on that by creating the index.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过创建索引来进一步改进。
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Great, now let’s run our code again.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，现在我们再次运行代码。
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Here is the output.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果。
- en: '![How to Optimize SQL Queries for Faster Data Retrieval](../Images/0f64e18143aa8147cafa3574a7688843.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![如何优化 SQL 查询以加快数据检索速度](../Images/0f64e18143aa8147cafa3574a7688843.png)'
- en: By using idx_segment in INDEX(), the database engine was able to efficiently
    search through the customer table based on the segment column, making the query
    run faster – it reduced the total query time from 259 msec. to 75 msec.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Bonus Section: Use SQL Query Optimization Tools'
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Due to the complexity of long codes and highly complex queries, you might consider
    using query optimization tools.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: 'These tools can analyze your query execution plans, identify missing indexes,
    and suggest alternative query structures to help optimize your queries. Some popular
    query optimization tools include:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**SolarWinds Database Performance Analyzer**: This tool helps you keep an eye
    on and improve database performance. It shows you problems with queries and how
    they are run. It works with different database systems like SQL Server, Oracle,
    and MySQL.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can find it [here](https://www.solarwinds.com/database-performance-analyzer?CMP=KNC-TAD-GGL-SW_TK_X_PP_CPC_LD_EN_PBRDB_TIN-XDB&19231722695~147153297809_g_c_solarwinds%20database%20performance%20analyzer-e~640975433012~~p74562349021&s_kwcid=AL!11508!3!640975433012!e!!g!!solarwinds%20database%20performance%20analyzer&ds_cid=71700000103710951&ds_agid=58700008203730912&network=g&device=c&keyword=Solarwinds%20database%20performance%20analyzer&matchtype=e&creative=640975433012&feeditemid=&gad=1&gclid=CjwKCAjwjYKjBhB5EiwAiFdSfo-vO3O-Mg5UZXZDnWSnZS3KSBufeQBaDTkUv64FBjfdMqPoO4OtyBoC4kwQAvD_BwE&gclsrc=aw.ds).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL Query Tuner for SQL Diagnostic Manager**: This tool has advanced features
    for making queries work better, like performance tips, index checking, and showing
    how queries are run. It helps you make SQL queries better by finding and fixing
    issues.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**SQL Server Management Studio (SSMS)**: SSMS has built-in tools for checking
    performance and improving queries, like Activity Monitor, Execution Plan Analysis,
    and Index Tuning Wizard.'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**EverSQL:** EverSQL is an online tool that automatically improves your queries
    by looking at the database structure and how queries are run. It gives you advice
    and rewrites your SQL queries to make them work faster.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using SQL query optimization tools and resources is vital to improving your
    queries. With these tools, you can learn how your queries work, find issues, and
    use best practices to get data faster and improve your applications.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: If you want to simplify your complex SQL queries, look at this “[How to Simplify
    Complex SQL Queries](https://www.stratascratch.com/blog/how-to-simplify-complex-sql-queries-with-examples/?utm_source=blog&utm_medium=click&utm_campaign=kdn+optimize+sql+queries)”.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: Final Notes
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The changes we made by optimizing the SQL queries above might seem insignificant
    due to their scale(ms). But as the amount of data you work with grows, these milliseconds
    will increase to seconds, minutes, and possibly even hours. You’ll realize then
    that these SQL query optimization techniques are highly important.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: If you seek more, here are the [top 30 SQL Query Interview Questions](https://www.stratascratch.com/blog/top-30-sql-query-interview-questions/?utm_source=blog&utm_medium=click&utm_campaign=kdn+optimize+sql+queries),
    which will help those who want to also prepare for an interview when learning.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Thanks for reading!
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: '**[Nate Rosidi](https://www.stratascratch.com)** is a data scientist and in
    product strategy. He''s also an adjunct professor teaching analytics, and is the
    founder of [StrataScratch](https://www.stratascratch.com/), a platform helping
    data scientists prepare for their interviews with real interview questions from
    top companies. Connect with him on [Twitter: StrataScratch](https://twitter.com/StrataScratch)
    or [LinkedIn](https://www.linkedin.com/in/nathanrosidi/).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Retrieval Augmented Generation: Where Information Retrieval Meets…](https://www.kdnuggets.com/retrieval-augmented-generation-where-information-retrieval-meets-text-generation)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Optimize Dockerfile Instructions for Faster Build Times](https://www.kdnuggets.com/how-to-optimize-dockerfile-instructions-for-faster-build-times)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Retrieval Augment Generation Makes LLMs Smarter](https://www.kdnuggets.com/how-retrieval-augment-generation-makes-llms-smarter)'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Useful Intermediate SQL Queries for Data Science](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
