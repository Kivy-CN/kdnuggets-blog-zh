["```py\nmet=[ metrics.recall_score, specificity_score, \n      metrics.balanced_accuracy_score\n    ]\ncalc_metrics(met, ytest, hardpredtst_tuned_thresh)\n```", "```py\nnp.random.seed(13)\nraw_metric_samples(met, ytest, hardpredtst_tuned_thresh, \n          nboots=7).style.format('{:.2%}')  #optional #style\n```", "```py\ng = get_alpha_nboots \npd.DataFrame( [ g(0.40), g(0.20, None), g(0.10), g(), g(alpha=0.02), \n                g(alpha=0.01, nboots=None), g(0.005, nboots=None)\n              ], columns=['alpha', 'default nboots']\n            ).set_index('alpha')\n```", "```py\nreq=[(0.01,3000), (0.01,401), (0.01,2)]\nout=[get_alpha_nboots(*args) for args in req]\nmydf = lambda x: pd.DataFrame(x, columns=['alpha', 'nboots'])\npd.concat([mydf(req),mydf(out)],axis=1, keys=('Requested','Using'))\n```", "```py\nnp.random.seed(13)\nmetric_boot_histogram\\\n  (metrics.balanced_accuracy_score, ytest, hardpredtst_tuned_thresh)\n```", "```py\nnp.random.seed(13)\nci_auto( met, ytest, hardpredtst_tuned_thresh\n       ).style.format('{:.2%}')\n```"]