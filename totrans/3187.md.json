["```py\nconda create --name TensorflowEnv biopython\n```", "```py\nsource activate TensorFlowEnv\n```", "```py\npip install --upgrade pip\n```", "```py\npip install tensorflow\n```", "```py\nx = -2.0\ny = 5*x + 13\nprint y\n```", "```py\nz = tf.constant(5.2, name=\"x\", dtype=tf.float32)\n```", "```py\nk = tf.Variable(tf.zeros([1]), name=\"k\")\n```", "```py\nk = tf.Variable(tf.add(a, b), trainable=False)\n```", "```py\nimport tensorflow as tf\n\nx = tf.constant(-2.0, name=\"x\", dtype=tf.float32)\na = tf.constant(5.0, name=\"a\", dtype=tf.float32)\nb = tf.constant(13.0, name=\"b\", dtype=tf.float32)\n\ny = tf.Variable(tf.add(tf.multiply(a, x), b))\n\ninit = tf.global_variables_initializer()\n\nwith tf.Session() as session:\n    session.run(init)\n    print session.run(y)\n\n```", "```py\nplaceholder(dtype, shape=None, name=None)\n```", "```py\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'y' with dtype float\n```", "```py\nimport tensorflow as tf\n\nx = tf.placeholder(tf.float32, name=\"x\")\ny = tf.placeholder(tf.float32, name=\"y\")\n\nz = tf.multiply(x, y, name=\"z\")\n\nwith tf.Session() as session:\n    print session.run(z, feed_dict={x: 2.1, y: 3.0})\n\n```", "```py\n__init__(logdir, graph=None, max_queue=10, flush_secs=120, graph_def=None, filename_suffix=None)\n```", "```py\nimport tensorflow as tf\n\nx = tf.constant(-2.0, name=\"x\", dtype=tf.float32)\na = tf.constant(5.0, name=\"a\", dtype=tf.float32)\nb = tf.constant(13.0, name=\"b\", dtype=tf.float32)\n\ny = tf.Variable(tf.add(tf.multiply(a, x), b))\n\ninit = tf.global_variables_initializer()\n\nwith tf.Session() as session:\n    merged = tf.summary.merge_all() // new\n    writer = tf.summary.FileWriter(\"logs\", session.graph) // new\n\n    session.run(init)\n    print session.run(y)\n```", "```py\ntensorboard --logdir logs/\n```", "```py\nimport numpy as np\ntensor_1d = np.array([1.45, -1, 0.2, 102.1])\n```", "```py\n>> print tensor_1d\n[   1.45   -1\\.      0.2   102.1 ]\n\n>> print tensor_1d[0]\n1.45\n\n>> print tensor_1d[2]\n0.2\n\n>> print tensor_1d.ndim\n1\n\n>> print tensor_1d.shape\n(4,)\n\n>> print tensor_1d.dtype\nfloat64\n\n```", "```py\ntensor = tf.convert_to_tensor(tensor_1d, dtype=tf.float64)\n```", "```py\ntensor = tf.convert_to_tensor(tensor_1d, dtype=tf.float64)\n\nwith tf.Session() as session:\n    print session.run(tensor)\n    print session.run(tensor[0])\n    print session.run(tensor[1])\n\n```", "```py\n[   1.45   -1\\.      0.2   102.1 ]\n1.45\n-1.0\n\n```", "```py\ntensor_2d = np.array(np.random.rand(4, 4), dtype='float32')\ntensor_2d_1 = np.array(np.random.rand(4, 4), dtype='float32')\ntensor_2d_2 = np.array(np.random.rand(4, 4), dtype='float32')\n\nm1 = tf.convert_to_tensor(tensor_2d)\nm2 = tf.convert_to_tensor(tensor_2d_1)\nm3 = tf.convert_to_tensor(tensor_2d_2)\nmat_product = tf.matmul(m1, m2)\nmat_sum = tf.add(m2, m3)\nmat_det = tf.matrix_determinant(m3)\n\nwith tf.Session() as session:\n    print session.run(mat_product)\n    print session.run(mat_sum)\n    print session.run(mat_det)\n\n```", "```py\ntensor_1d = np.array([0, 0, 0])\ntensor = tf.convert_to_tensor(tensor_1d, dtype=tf.float64)\nwith tf.Session() as session:\n    print session.run(tf.cos(tensor))\n\n```", "```py\n[ 1\\.  1\\.  1.]\n\n```", "```py\nimport tensorflow as tf\nimport numpy as np\n\ndef convert(v, t=tf.float32):\n    return tf.convert_to_tensor(v, dtype=t)\n\nm1 = convert(np.array(np.random.rand(4, 4), dtype='float32'))\nm2 = convert(np.array(np.random.rand(4, 4), dtype='float32'))\nm3 = convert(np.array(np.random.rand(4, 4), dtype='float32'))\nm4 = convert(np.array(np.random.rand(4, 4), dtype='float32'))\nm5 = convert(np.array(np.random.rand(4, 4), dtype='float32'))\n\nm_tranpose = tf.transpose(m1)\nm_mul = tf.matmul(m1, m2)\nm_det = tf.matrix_determinant(m3)\nm_inv = tf.matrix_inverse(m4)\nm_solve = tf.matrix_solve(m5, [[1], [1], [1], [1]])\n\nwith tf.Session() as session:\n    print session.run(m_tranpose)\n    print session.run(m_mul)\n    print session.run(m_inv)\n    print session.run(m_det)\n    print session.run(m_solve)\n\n```"]