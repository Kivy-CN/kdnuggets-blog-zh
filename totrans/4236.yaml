- en: Python Data Structures Compared
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据结构比较
- en: 原文：[https://www.kdnuggets.com/2021/07/python-data-structures-compared.html](https://www.kdnuggets.com/2021/07/python-data-structures-compared.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/07/python-data-structures-compared.html](https://www.kdnuggets.com/2021/07/python-data-structures-compared.html)
- en: '[comments](#comments)![Figure](../Images/beb472629858f9167f198fa19ad0f9ce.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图示](../Images/beb472629858f9167f198fa19ad0f9ce.png)'
- en: Photo by [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    on [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Hitesh Choudhary](https://unsplash.com/@hiteshchoudhary?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
    提供，来源于 [Unsplash](https://unsplash.com/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
- en: Choosing a structure for storing your data is an important part of solving programming
    tasks and implementing solutions, yet it is often not given the attention a choice
    of such potential weight deserves. Unfortunately, in Python I often see the list
    used as a catch-all data structure. The list has its advantages, of course, but
    also its drawbacks. There are lots of other data structure options as well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 选择存储数据的结构是解决编程任务和实施解决方案的重要部分，但往往没有得到应有的关注。不幸的是，在Python中，我经常看到列表被用作万能的数据结构。列表当然有其优点，但也有其缺点。还有很多其他的数据结构选项。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前3个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织在IT方面'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Let's take a look at 5 different Python data structures and see how they could
    be used to store data we might be processing in our everyday tasks, as well as
    the relative memory they use for storage and time they take to create and access.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看5种不同的Python数据结构，看看它们如何用于存储我们在日常任务中可能处理的数据，以及它们在存储时所用的相对内存和创建及访问时所需的时间。
- en: Types of Data Structures
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据结构的类型
- en: First, let's lay out the 5 data structures we will consider herein, and provide
    some preliminary insight.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们列出我们将在此考虑的5种数据结构，并提供一些初步见解。
- en: '**Class**'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**类**'
- en: 'In this case we are talking about vanilla classes (as opposed to data classes
    below), which are described at a high level in Python [documentation](https://docs.python.org/3/tutorial/classes.html)
    as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们讨论的是普通类（与下面的数据类相对），Python [文档](https://docs.python.org/3/tutorial/classes.html)对其进行了高层次的描述：
- en: Classes provide a means of bundling data and functionality together. Creating
    a new class creates a new *type* of object, allowing new *instances* of that type
    to be made. Each class instance can have attributes attached to it for maintaining
    its state. Class instances can also have methods (defined by its class) for modifying
    its state.
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 类提供了一种将数据和功能捆绑在一起的方法。创建一个新类会创建一种新的*类型*的对象，允许创建该类型的新*实例*。每个类实例可以附加属性以维护其状态。类实例也可以具有方法（由其类定义）以修改其状态。
- en: The advantages of using classes is that they are conventional, and are well-used
    and -understood. Whether or not they are overkill in terms of relative required
    memory or time is something to look at.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类的优点在于它们是传统的，并且被广泛使用和理解。它们是否在相对需要的内存或时间上过于冗余，是需要考虑的问题。
- en: '**Data Class**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据类**'
- en: Added in Python 3.7, the [data class](https://www.python.org/dev/peps/pep-0557/)
    is a special class meant for mainly holding data, which comes with some freebie
    methods out of the box for typical functionality like instantiating and printing
    instance contents. Creating a data class is accomplished using the `@dataclass`
    decorator.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python 3.7中新增的 [数据类](https://www.python.org/dev/peps/pep-0557/) 是一种特殊的类，主要用于持有数据，提供了一些开箱即用的免费方法，用于典型功能，如实例化和打印实例内容。创建数据类是通过使用
    `@dataclass` 装饰器来实现的。
- en: 'Although they use a very different mechanism, Data Classes can be thought of
    as "mutable namedtuples with defaults". Because Data Classes use normal class
    definition syntax, you are free to use inheritance, metaclasses, docstrings, user-defined
    methods, class factories, and other Python class features. Such a class is called
    a Data Class, but there''s really nothing special about the class: the decorator
    adds generated methods to the class and returns the same class it was given.'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: As you can see, the [automatically generated methods](https://www.python.org/dev/peps/pep-0557/#id32)
    and the related time-savings are the main reason to consider data classes.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '**Named Tuple**'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Named tuples are an [elegant implementation](https://docs.python.org/3/library/collections.html#collections.namedtuple)
    of a useful data structure, essentially tuple subclasses with named fields.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Named tuples assign meaning to each position in a tuple and allow for more readable,
    self-documenting code. They can be used wherever regular tuples are used, and
    they add the ability to access fields by name instead of position index.
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: At first look, named tuples appear to be the closest thing to simple C-like
    struct types natively available in Python, making them naively attractive to many.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '**Dictionary**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: The Python [dictionary](https://python-reference.readthedocs.io/en/latest/docs/dict/)
    is a collection of key-value pairs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[Python Dictionaries](https://www.kdnuggets.com/2019/12/python-dictionary-methods.html)
    are mutable unordered collections (they do not record element position or order
    of insertion) of key-value pairs. Keys within the dictionary must be unique and
    must be hashable. That includes types like numbers, strings and tuples. Lists
    and dicts can not be used as keys since they are mutable.'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The advantage of dictionaries is that they are simple, the data within are easily
    accessible, and they are well-used and -understood.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '**List**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'Here it is, the one-size-fits-all Python data superstructure, or so lots of
    code would have you believe. Here is what the [list](https://python-reference.readthedocs.io/en/latest/docs/list/)
    really is:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Lists are mutable ordered and indexed collections of objects. The items of a
    list are arbitrary Python objects. Lists are formed by placing a comma-separated
    list of expressions in square brackets.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Why the widespread use of the list? It's very simple to understand and implement,
    and is usually the first structure one learns when picking up Python. Are there
    disadvantages related to speed and memory usage? Let's take a look.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Implementations
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: First off, let's have a look at the creation process of each of these structures
    and how they compare to one another.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The reason we might be using any of these data structures to store our data
    would vary widely, but for the unimaginative, let's imagine we are extracting
    data from a SQL database and need to store each record in one such structure in
    order to perform some processing prior to moving the data further along our pipeline.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能使用这些数据结构存储数据的原因差异很大，但对于那些缺乏想象力的人，我们可以假设我们正在从SQL数据库中提取数据，需要将每条记录存储在这种结构中，以便在将数据进一步推进到我们的管道之前进行一些处理。
- en: With that in mind, here is instantiation code for creating each of the five
    structures.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于此，以下是创建每个五种结构的实例化代码。
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Note the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下几点：
- en: The creation of an instance of the built-in types dictionary and list have been
    place inside functions
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内置类型字典和列表的实例化已放入函数中。
- en: The difference between the class and the data class implementations, in light
    of the discussion above
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上述讨论中类和数据类实现之间的区别。
- en: The (clearly subjective) elegance and simplicity of the named tuple
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命名元组的（显然主观的）优雅和简单性。
- en: Let's have a look at instantiation of these structures, and a comparison of
    the resources required to do so.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这些结构的实例化情况，并比较实现这些操作所需的资源。
- en: Testing and Results
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 测试和结果。
- en: We will create a single instance of each of the 5 structures, each housing a
    single data record. We will repeat this process using the same data fields for
    each structure 1,000,000 times to get a better sense of average time, performing
    this process on my modest Dell notebook, using an Ubuntu-derived operating system.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每种结构创建一个单独的实例，每个实例中包含一个数据记录。我们将重复这个过程，将相同的数据字段用于每种结构1,000,000次，以获得更好的平均时间，并在我的一台简朴的Dell笔记本电脑上执行此过程，使用的是基于Ubuntu的操作系统。
- en: '![Image](../Images/b4fba0e02b2ae02ceba2ec1d33b38e96.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/b4fba0e02b2ae02ceba2ec1d33b38e96.png)'
- en: Compare the code between the 5 structure instantiations below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 比较下面五种结构实例化的代码。
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'And here is the output of the above:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是上述内容的输出：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Finally, another useful piece of data would be to know the relative access times
    of values stored within our structures (in the case below, the address). The same
    retrieval will be repeated 1,000,000 times, and the average time reported below.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，另一个有用的数据是了解我们结构中存储的值的相对访问时间（在下面的例子中为地址）。相同的检索操作将重复1,000,000次，下面报告了平均时间。
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And the output:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以及输出：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The intent of this article is not to make a recommendation one way or another
    as to which data structure to use, nor is it to suggest that there is a universal
    best structure for every case. Instead, we wanted to have a look at some different
    options and their relative strength and weakness. As with all things, there are
    trade-offs to be made, and less quantitative considerations such as understandability,
    ease of use, etc. are to be taken into account when making these types of decisions.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的意图不是推荐使用哪种数据结构，也不是建议存在一个适用于所有情况的最佳结构。相反，我们想要了解一些不同的选项及其相对的优缺点。像所有事情一样，必须做出权衡，并且在做出这些决策时，诸如可理解性、易用性等定量考虑因素也需要纳入考虑。
- en: 'That said, a few things do stand out from the above analysis:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，从以上分析中有一些事情显而易见：
- en: The dictionary uses the greatest amount of storage of all the structures, in
    our case almost 3 times as much as the next greatest — though we should be careful
    about generalizing until we look at the effects of scaling and internal field
    data types
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在所有结构中，字典使用的存储量最大，在我们的例子中几乎是下一个最大结构的3倍——不过在我们查看扩展效应和内部字段数据类型之前，应该谨慎做出概括。
- en: Unsurprisingly, the list is the fastest to instantiate, yet not the fastest
    from which to retrieve an element (it's almost the slowest)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不出所料，列表的实例化速度最快，但从中检索元素的速度却不是最快（几乎是最慢的）。
- en: In our case, the named tuple is the slowest structure from which to retrieve
    an element, yet is middle of the pack for storage space
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的例子中，命名元组是检索元素时速度最慢的结构，但在存储空间方面居中。
- en: Both classes take relatively longer to instantiate (expected), but element retrieval
    and space used, in both cases, are very competitive with the other structures
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个类的实例化相对较长（这是预期的），但在元素检索和空间使用方面，两者与其他结构相比都非常具有竞争力。
- en: So not only are we not looking to recommend a single structure in every case,
    there is no clear winner that could be recommended in every case. Even taking
    the caution to generalize based on our small experiment, it is clear that priorities
    will need to be taken into account for making a decision as to which structure
    you use for a particular job. At the very least, this limited experimentation
    has provided some small window of insight into the performance of data structures
    available in Python.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们不仅不打算在每种情况下推荐单一结构，也没有明确的赢家可以在每种情况下推荐。即使基于我们的小实验谨慎地进行一般化，显然在选择用于特定工作的结构时需要考虑优先级。至少，这些有限的实验提供了一些对Python中数据结构性能的小窗口洞察。
- en: '**Related**:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关**：'
- en: '[Managing Your Reusable Python Code as a Data Scientist](/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家管理你的可重用Python代码](/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[5 Python Data Processing Tips & Code Snippets](/2021/07/python-tips-snippets-data-processing.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5个Python数据处理技巧及代码片段](/2021/07/python-tips-snippets-data-processing.html)'
- en: '[Date Processing and Feature Engineering in Python](/2021/07/date-pre-processing-feature-engineering-python.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的日期处理和特征工程](/2021/07/date-pre-processing-feature-engineering-python.html)'
- en: More On This Topic
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5步开始学习Python数据结构](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python基础：语法、数据类型和控制结构](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
- en: '[Super Study Guide: A Free Algorithms and Data Structures eBook](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超级学习指南：免费算法和数据结构电子书](https://www.kdnuggets.com/2022/06/super-study-guide-free-algorithms-data-structures-ebook.html)'
- en: '[A Starter Guide to Data Structures for AI and Machine Learning](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI和机器学习的数据结构入门指南](https://www.kdnuggets.com/guide-data-structures-ai-and-machine-learning)'
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过《快速Python数据科学》提升你的Python技能！](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化Python代码性能：深入探讨Python分析器](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
