["```py\niterations_count = round(1e7)\ndef complex_operation(input_index):\n   print(\"Complex operation. Input index: {:2d}\".format(input_index))\n   [math.exp(i) * math.sinh(i) for i in [1] * iterations_count]\n```", "```py\n@timebudget\ndef run_complex_operations(operation, input):\n   for i in input:\n      operation(i) \n\ninput = range(10)\nrun_complex_operations(complex_operation, input)\n```", "```py\nimport math\nimport numpy as np\nfrom timebudget import timebudget\nfrom multiprocessing import Pool\n\niterations_count = round(1e7)\n\ndef complex_operation(input_index):\n    print(\"Complex operation. Input index: {:2d}\\n\".format(input_index))\n    [math.exp(i) * math.sinh(i) for i in [1] * iterations_count]\n\n@timebudget\ndef run_complex_operations(operation, input, pool):\n    pool.map(operation, input)\n\nprocesses_count = 10\n\nif __name__ == '__main__':\n    processes_pool = Pool(processes_count)\n    run_complex_operations(complex_operation, range(10), processes_pool)\n```", "```py\nimport os\nprint('Number of CPUs in the system: {}'.format(os.cpu_count()))\n```", "```py\ndef complex_operation_numpy(input_index):\n      print(\"Complex operation (numpy). Input index: {:2d}\".format(input_index))\n\n      data = np.ones(iterations_count)\n      np.exp(data) * np.sinh(data)\n```", "```py\nprocesses_count = 10\ninput = range(10)\n\nif __name__ == '__main__':\n    processes_pool = Pool(processes_count)\n    print(‘Without NumPy’)\n    run_complex_operations(complex_operation, input, processes_pool)\n    print(‘NumPy’)\n    run_complex_operations(complex_operation_numpy, input, processes_pool)\n```", "```py\nipcluster start -n 10\n```", "```py\nimport math\nimport numpy as np\nfrom timebudget import timebudget\nimport ipyparallel as ipp\n\niterations_count = round(1e7)\n\ndef complex_operation(input_index):\n    print(\"Complex operation. Input index: {:2d}\".format(input_index))\n\n    [math.exp(i) * math.sinh(i) for i in [1] * iterations_count]\n\ndef complex_operation_numpy(input_index):\n    print(\"Complex operation (numpy). Input index: {:2d}\".format(input_index))\n\n    data = np.ones(iterations_count)\n    np.exp(data) * np.sinh(data)\n\n@timebudget\ndef run_complex_operations(operation, input, pool):\n    pool.map(operation, input)\n\nclient_ids = ipp.Client()\npool = client_ids[:]\n\ninput = range(10)\nprint('Without NumPy')\nrun_complex_operations(complex_operation, input, pool)\nprint('NumPy')\nrun_complex_operations(complex_operation_numpy, input, pool)\n```", "```py\nray.init() \n```", "```py\n@ray.remote\ndef complex_operation_numpy(input_index):\n   print(\"Complex operation (numpy). Input index: {:2d}\".format(input_index))\n   data = np.ones(iterations_count)\n   np.exp(data) * np.sinh(data)\n```", "```py\n@timebudget\ndef run_complex_operations(operation, input):\n   ray.get([operation.remote(i) for i in input])\n```"]