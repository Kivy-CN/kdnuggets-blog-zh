- en: How To Speed Up Python Code with Caching
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何通过缓存加速 Python 代码
- en: 原文：[https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching](https://www.kdnuggets.com/how-to-speed-up-python-code-with-caching)
- en: '![python-cache-fimg](../Images/106568a22d2fe62fa49f991f5e3224e6.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![python-cache-fimg](../Images/106568a22d2fe62fa49f991f5e3224e6.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: In Python, you can use caching to store the results of expensive function calls
    and reuse them when the function is called with the same arguments again. This
    makes your code more performant.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以使用缓存来存储昂贵函数调用的结果，并在函数使用相同参数再次调用时重复使用这些结果。这使你的代码更高效。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全领域。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: 'Python provides built-in support for caching through the `functools` module:
    the  decorators `@cache` and `@lru_cache`. And we''ll learn how to cache function
    calls in this tutorial.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了通过 `functools` 模块内建的缓存支持：`@cache` 和 `@lru_cache` 装饰器。在本教程中我们将学习如何缓存函数调用。
- en: Why Is Caching Helpful?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么缓存有帮助？
- en: 'Caching function calls can significantly improve the performance of your code.
    Here are some reasons why caching function calls can be beneficial:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存函数调用可以显著提高你代码的性能。以下是缓存函数调用可能有益的一些原因：
- en: '**Performance improvement**: When a function is called with the same arguments
    multiple times, caching the result can eliminate redundant computations. Instead
    of recalculating the result every time, the cached value can be returned, leading
    to faster execution.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能提升**：当函数使用相同参数多次调用时，缓存结果可以消除冗余计算。这样，缓存的值可以被返回，导致执行速度更快。'
- en: '**Reduction of resource usage**: Some function calls may be computationally
    intensive or require significant resources (such as database queries or network
    requests). Caching the results reduces the need to repeat these operations.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少资源使用**：一些函数调用可能计算密集或需要大量资源（如数据库查询或网络请求）。缓存结果减少了重复这些操作的需求。'
- en: '**Improved responsiveness**: In applications where responsiveness is crucial,
    such as web servers or GUI applications, caching can help reduce latency by avoiding
    repeated calculations or I/O operations.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应性改善**：在响应性至关重要的应用程序中，例如 Web 服务器或 GUI 应用程序，缓存可以通过避免重复计算或 I/O 操作来减少延迟。'
- en: Now let’s get to coding.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始编程吧。
- en: Caching with the @cache Decorator
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `@cache` 装饰器进行缓存
- en: 'Let’s code a function that computes the n-th Fibonacci number. Here''s the
    recursive implementation of the Fibonacci sequence:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编写一个计算第 n 个斐波那契数的函数。以下是斐波那契数列的递归实现：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Without caching, the recursive calls result in redundant computations. If the
    values are cached, it'd be much more efficient to look up the cached values. And
    for this, you can use the `@cache` decorator.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有缓存，递归调用会导致冗余计算。如果缓存了值，查找缓存值会更高效。为此，你可以使用 `@cache` 装饰器。
- en: 'The `@cache` decorator from the `functools` module in Python 3.9+ is used to
    cache the results of a function. It works by storing the results of expensive
    function calls and reusing them when the function is called with the same arguments.
    Now let’s wrap the function with the `@cache` decorator:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.9+ 的 `functools` 模块中的 `@cache` 装饰器用于缓存函数的结果。它通过存储昂贵函数调用的结果并在函数用相同参数调用时重复使用这些结果来工作。现在让我们用
    `@cache` 装饰器来包装函数：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We’ll get to performance comparison later. Now let’s see another way to cache
    return values from functions using the `@lru_cache` decorator.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会进行性能比较。现在让我们看看另一种使用 `@lru_cache` 装饰器缓存返回值的方法。
- en: Caching with the @lru_cache Decorator
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `@lru_cache` 装饰器进行缓存
- en: You can use the built-in `functools.lru_cache` decorator for caching as well.
    This uses the **Least Recently Used (LRU) caching mechanism** for function calls.
    In LRU caching, when the cache is full and a new item needs to be added, the least
    recently used item in the cache is removed to make room for the new item. This
    ensures that the most frequently used items are retained in the cache, while less
    frequently used items are discarded.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用内置的`functools.lru_cache`装饰器进行缓存。这使用了**最近最少使用 (LRU) 缓存机制**来处理函数调用。在 LRU
    缓存中，当缓存满时需要添加新项时，会删除缓存中最近最少使用的项，以腾出空间给新项。这确保了最常用的项保留在缓存中，而较少使用的项被丢弃。
- en: The `@lru_cache` decorator is similar to `@cache` but allows you to specify
    the maximum size—as the `maxsize` argument—of the cache. Once the cache reaches
    this size, the least recently used items are discarded. This is useful if you
    want to limit memory usage.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`@lru_cache`装饰器类似于`@cache`，但允许你指定缓存的最大大小——即`maxsize`参数。一旦缓存达到这个大小，最少使用的项会被丢弃。这在你想限制内存使用时非常有用。'
- en: 'Here, the `fibonacci` function caches up to 7 most recently computed values:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`fibonacci`函数缓存了最多 7 个最近计算的值：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the `fibonacci` function is decorated with `@lru_cache(maxsize=7)`, specifying
    that it should cache up to 7 most recent results.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`fibonacci`函数使用`@lru_cache(maxsize=7)`装饰器，这指定了它应该缓存最多 7 个最近的结果。
- en: When `fibonacci(5)` is called, the results for `fibonacci(4)`, `fibonacci(3)`,
    and `fibonacci(2)` are cached. When `fibonacci(3)` is called subsequently, `fibonacci(3)`
    is retrieved from the cache since it was one of the seven most recently computed
    values, avoiding redundant computation.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用`fibonacci(5)`时，`fibonacci(4)`、`fibonacci(3)`和`fibonacci(2)`的结果被缓存。当随后调用`fibonacci(3)`时，由于`fibonacci(3)`是最近计算的七个值之一，它会从缓存中检索，避免了重复计算。
- en: Timing Function Calls for Comparison
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较函数调用的时间
- en: 'Now let’s compare the execution times of the functions with and without caching.
    For this example, we don''t set an explicit value for `maxsize`. So `maxsize`
    will be set to the default value of 128:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们比较有缓存和没有缓存的函数的执行时间。在这个示例中，我们没有为`maxsize`设置明确的值。因此，`maxsize`将被设置为默认值 128：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To compare the execution times, we’ll use the `timeit` function from the `timeit`
    module:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了比较执行时间，我们将使用`timeit`模块中的`timeit`函数：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the above code should give a similar output:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码应该会得到类似的输出：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We see a significant difference in the execution times. The function call without
    caching takes much longer to execute, especially for larger values of `n`. While
    the cached versions (both `@cache` and `@lru_cache`) execute much faster and have
    comparable execution times.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到执行时间有显著差异。没有缓存的函数调用执行时间更长，特别是对于较大的`n`值。而缓存版本（包括`@cache`和`@lru_cache`）的执行速度要快得多，且执行时间相当。
- en: Wrapping Up
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: By using the `@cache` and `@lru_cache` decorators, you can significantly speed
    up the execution of functions that involve expensive computations or recursive
    calls. You can find the complete code [on GitHub](https://github.com/balapriyac/python-basics/tree/main/caching).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`@cache`和`@lru_cache`装饰器，你可以显著加快涉及复杂计算或递归调用的函数的执行速度。你可以在 [GitHub](https://github.com/balapriyac/python-basics/tree/main/caching)
    上找到完整的代码。
- en: If you’re looking for a comprehensive guide on best practices for using Python
    for data science, read [5 Python Best Practices for Data Science](https://www.kdnuggets.com/5-python-best-practices-for-data-science).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在寻找关于使用 Python 进行数据科学的最佳实践的全面指南，请阅读 [5 Python Best Practices for Data Science](https://www.kdnuggets.com/5-python-best-practices-for-data-science)。
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是一位来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专长领域包括DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编程和喝咖啡！目前，她正在通过撰写教程、操作指南、观点文章等方式，学习并与开发者社区分享她的知识。Bala还创建了引人入胜的资源概述和编程教程。'
- en: More On This Topic
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关话题
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加速Python代码的3种简单方法](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
- en: '[How To Speed Up SQL Queries Using Indexes [Python Edition]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何通过索引加速SQL查询[Python版]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
- en: '[How to Speed Up Python Pandas by Over 300x](https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何将Python Pandas加速超过300倍](https://www.kdnuggets.com/how-to-speed-up-python-pandas-by-over-300x)'
- en: '[5 Python Tips for Data Efficiency and Speed](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[提高数据处理效率和速度的5个Python技巧](https://www.kdnuggets.com/5-python-tips-for-data-efficiency-and-speed)'
- en: '[How to Speed Up XGBoost Model Training](https://www.kdnuggets.com/2021/12/speed-xgboost-model-training.html)'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何加速XGBoost模型训练](https://www.kdnuggets.com/2021/12/speed-xgboost-model-training.html)'
- en: '[Speed up Machine Learning with Fast Kriging (FKR)](https://www.kdnuggets.com/2022/06/vmc-speed-machine-learning-fast-kriging.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过快速克里金（FKR）加速机器学习](https://www.kdnuggets.com/2022/06/vmc-speed-machine-learning-fast-kriging.html)'
