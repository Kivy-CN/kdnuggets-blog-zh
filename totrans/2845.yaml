- en: Deployment of Machine learning models using Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/12/excelr-deployment-machine-learning-flask.html](https://www.kdnuggets.com/2019/12/excelr-deployment-machine-learning-flask.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Sponsored Post.
  prefs: []
  type: TYPE_NORMAL
- en: So, till now, we developed many data science models, produced forecasts on the
    testing data, and checked results offline. In the real world, creating predictions
    is only a part of your data science project. Let us consider a CPU/GPU using ML
    to detect spam text messages. A Naïve Bayes classifier is trained on CPU/GPU with
    spam and non-spam text messages. The trained model is deployed as a service on
    the web to general public or users.
  prefs: []
  type: TYPE_NORMAL
- en: This blog will explain us about the basics of deploying a machine learning algorithm.
    In this blog, we will focus on developing a Naïve Bayes model for spam message
    identification, and use Flask (Flask is a web service development microframework
    in python.) to create an API for model. API allows us to make use of classifying
    abilities of the algorithm via HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Flask is based on 2 components, WSGI (web server gateway interface) toolkit
    and Jinja2 template. WSGI is used for web applications and Jinja2 provides web
    pages. Flask is always used for bigger size machine learning projects. Flask can
    be used to build REST applications, email services, chat applications etc.
  prefs: []
  type: TYPE_NORMAL
- en: Here We Go!
  prefs: []
  type: TYPE_NORMAL
- en: '**For More Information related to [Data Science Course](https://www.excelr.com/data-science-course-training-in-bangalore)
    in Bangalore Follow us @ExcelR**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Step 1:**'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will use a dataset (messages.csv) to build a classifying model that
    will accurately identify which texts are spam. [The classifier model works on
    bag of word features to identify spam email](https://en.wikipedia.org/wiki/Naive_Bayes_spam_filtering).
    Once we train the model, it is advisable to save the model for future use thereafter
    reducing time to retrain. To accomplish it, we save our model as a.pkl file for
    future use. This is a pickle file which is a native python library to save and
    load python objects files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/5fda73b0870dc601a816120d9d068ac5.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Step 2:**'
  prefs: []
  type: TYPE_NORMAL
- en: Next step, we will have to develop a web application with a user-friendly web
    page consisting a form field for user input. After entering the user defined message
    into the web application, it will relay the message to be spam or not on a result
    page.
  prefs: []
  type: TYPE_NORMAL
- en: '**Step 3:**'
  prefs: []
  type: TYPE_NORMAL
- en: For developing a web application, we create a folder for this project called Spam
    Identifier on your desktop, make sure you make a directory of files within this.
    The directory branch inside folder will look like
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0] [PRE1]py      **Step 4:**    Check if this app.py file has the source
    code to be executed by the Python which runs the Flask web application, it should
    include the ML program developed (.pkl file) for classifying spam messages. This
    file is a link to HTML file and API calling the model to display the output form
    user defined inputs.      **Step 5:**    After that run the application as a single
    module to initialize a new flask instance with the argument __name__, this will
    help flask to find the html files folder (containing html files) in the same folder
    (Spam Identifier).   [PRE2]`'
  prefs: []
  type: TYPE_NORMAL
