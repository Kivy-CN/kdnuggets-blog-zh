["```py\npip install librosa\nor\nconda install -c conda-forge librosa\n```", "```py\nimport librosa\naudio_data = '/../../gruesome.wav'\nx , sr = librosa.load(audio_data)\nprint(type(x), type(sr))#<class 'numpy.ndarray'> <class 'int'>print(x.shape, sr)#(94316,) 22050\n```", "```py\nlibrosa.load(audio_data, sr=44100)\n```", "```py\nlibrosa.load(audio_path, sr=None)\n```", "```py\nimport IPython.display as ipd\nipd.Audio(audio_data)\n```", "```py\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport librosa.display\nplt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)\n```", "```py\nX = librosa.stft(x)\nXdb = librosa.amplitude_to_db(abs(X))\nplt.figure(figsize=(14, 5))\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='hz')\nplt.colorbar()\n```", "```py\nlibrosa.display.specshow(Xdb, sr=sr, x_axis='time', y_axis='log')\nplt.colorbar()\n```", "```py\nimport numpy as np\nsr = 22050 # sample rate\nT = 5.0    # seconds\nt = np.linspace(0, T, int(T*sr), endpoint=False) # time variable\nx = 0.5*np.sin(2*np.pi*220*t)# pure sine wave at 220 Hz\n#Playing the audio\nipd.Audio(x, rate=sr) # load a NumPy array\n#Saving the audio\nlibrosa.output.write_wav('tone_220.wav', x, sr)\n```", "```py\nimport sklearn\nspectral_centroids = librosa.feature.spectral_centroid(x, sr=sr)[0]\nspectral_centroids.shape\n(775,)\n# Computing the time variable for visualization\nplt.figure(figsize=(12, 4))frames = range(len(spectral_centroids))\nt = librosa.frames_to_time(frames)\n# Normalising the spectral centroid for visualisation\ndef normalize(x, axis=0):\n    return sklearn.preprocessing.minmax_scale(x, axis=axis)\n#Plotting the Spectral Centroid along the waveform\nlibrosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_centroids), color='b')\n```", "```py\nspectral_rolloff = librosa.feature.spectral_rolloff(x+0.01, sr=sr)[0]\nplt.figure(figsize=(12, 4))librosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_rolloff), color='r')\n```", "```py\nspectral_bandwidth_2 = librosa.feature.spectral_bandwidth(x+0.01, sr=sr)[0]\nspectral_bandwidth_3 = librosa.feature.spectral_bandwidth(x+0.01, sr=sr, p=3)[0]\nspectral_bandwidth_4 = librosa.feature.spectral_bandwidth(x+0.01, sr=sr, p=4)[0]\nplt.figure(figsize=(15, 9))librosa.display.waveplot(x, sr=sr, alpha=0.4)\nplt.plot(t, normalize(spectral_bandwidth_2), color='r')\nplt.plot(t, normalize(spectral_bandwidth_3), color='g')\nplt.plot(t, normalize(spectral_bandwidth_4), color='y')\nplt.legend(('p = 2', 'p = 3', 'p = 4'))\n```", "```py\nx, sr = librosa.load('/../../gruesome.wav')\n#Plot the signal:\nplt.figure(figsize=(14, 5))\nlibrosa.display.waveplot(x, sr=sr)\n# Zooming in\nn0 = 9000\nn1 = 9100\nplt.figure(figsize=(14, 5))\nplt.plot(x[n0:n1])\nplt.grid()\n```", "```py\nn0 = 9000\nn1 = 9100\nplt.figure(figsize=(14, 5))\nplt.plot(x[n0:n1])\nplt.grid()\n```", "```py\nzero_crossings = librosa.zero_crossings(x[n0:n1], pad=False)\nprint(sum(zero_crossings))#16\n```", "```py\nmfccs = librosa.feature.mfcc(x, sr=fs)\nprint(mfccs.shape)\n(20, 97)\n#Displaying  the MFCCs:\nplt.figure(figsize=(15, 7))\nlibrosa.display.specshow(mfccs, sr=sr, x_axis='time')\n```", "```py\nchromagram = librosa.feature.chroma_stft(x, sr=sr, hop_length=hop_length)\nplt.figure(figsize=(15, 5))\nlibrosa.display.specshow(chromagram, x_axis='time', y_axis='chroma', hop_length=hop_length, cmap='coolwarm')\n```", "```py\n**import** **librosa**\n**import** **pandas** **as** **pd**\n**import** **numpy** **as** **np**\n**import** **matplotlib.pyplot** **as** **plt**\n%matplotlib inline\n**import** **os**\n**from** **PIL** **import** **Image**\n**import** **pathlib**\n**import** **csv****from** **sklearn.model_selection** **import train_test_split\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler****import keras\nfrom keras import layers\nfrom keras import layers\nimport keras\nfrom keras.models import Sequential****import** **warnings**\nwarnings.filterwarnings('ignore')\n```", "```py\ncmap = plt.get_cmap('inferno')\nplt.figure(figsize=(8,8))\ngenres = 'blues classical country disco hiphop jazz metal pop reggae rock'.split()\nfor g in genres:\n    pathlib.Path(f'img_data/{g}').mkdir(parents=True, exist_ok=True)\n    for filename in os.listdir(f'./drive/My Drive/genres/{g}'):\n        songname = f'./drive/My Drive/genres/{g}/{filename}'\n        y, sr = librosa.load(songname, mono=True, duration=5)\n        plt.specgram(y, NFFT=2048, Fs=2, Fc=0, noverlap=128, cmap=cmap, sides='default', mode='default', scale='dB');\n        plt.axis('off');\n        plt.savefig(f'img_data/{g}/{filename[:-3].replace(\".\", \"\")}.png')\n        plt.clf()\n```", "```py\nheader = 'filename chroma_stft rmse spectral_centroid spectral_bandwidth rolloff zero_crossing_rate'\nfor i in range(1, 21):\n    header += f' mfcc{i}'\nheader += ' label'\nheader = header.split()\n```", "```py\nfile = open('dataset.csv', 'w', newline='')\nwith file:\n    writer = csv.writer(file)\n    writer.writerow(header)\ngenres = 'blues classical country disco hiphop jazz metal pop reggae rock'.split()\nfor g in genres:\n    for filename in os.listdir(f'./drive/My Drive/genres/{g}'):\n        songname = f'./drive/My Drive/genres/{g}/{filename}'\n        y, sr = librosa.load(songname, mono=True, duration=30)\n        rmse = librosa.feature.rmse(y=y)\n        chroma_stft = librosa.feature.chroma_stft(y=y, sr=sr)\n        spec_cent = librosa.feature.spectral_centroid(y=y, sr=sr)\n        spec_bw = librosa.feature.spectral_bandwidth(y=y, sr=sr)\n        rolloff = librosa.feature.spectral_rolloff(y=y, sr=sr)\n        zcr = librosa.feature.zero_crossing_rate(y)\n        mfcc = librosa.feature.mfcc(y=y, sr=sr)\n        to_append = f'{filename} {np.mean(chroma_stft)} {np.mean(rmse)} {np.mean(spec_cent)} {np.mean(spec_bw)} {np.mean(rolloff)} {np.mean(zcr)}'    \n        for e in mfcc:\n            to_append += f' {np.mean(e)}'\n        to_append += f' {g}'\n        file = open('dataset.csv', 'a', newline='')\n        with file:\n            writer = csv.writer(file)\n            writer.writerow(to_append.split())\n```", "```py\ndata = pd.read_csv('dataset.csv')\ndata.head()# Dropping unneccesary columns\ndata = data.drop(['filename'],axis=1)#Encoding the Labels\ngenre_list = data.iloc[:, -1]\nencoder = LabelEncoder()\ny = encoder.fit_transform(genre_list)#Scaling the Feature columns\nscaler = StandardScaler()\nX = scaler.fit_transform(np.array(data.iloc[:, :-1], dtype = float))#Dividing data into training and Testing set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n```", "```py\nmodel = Sequential()\nmodel.add(layers.Dense(256, activation='relu', input_shape=(X_train.shape[1],)))\nmodel.add(layers.Dense(128, activation='relu'))\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10, activation='softmax'))model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n```", "```py\nclassifier = model.fit(X_train,\n                    y_train,\n                    epochs=100,\n                    batch_size=128)\n```"]