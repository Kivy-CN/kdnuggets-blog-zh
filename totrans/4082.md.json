["```py\nimport numpy as np\nimport pandas as pd\nfrom math import cos, sin, acos, radians\n\ndf = pd.merge(\n    google_fit_location,\n    google_fit_location,\n    how=\"left\",\n    on=[\"user_id\", \"session_id\", \"day\"],\n    suffixes=[\"_1\", \"_2\"],\n)\n```", "```py\ndf['step_var'] = df['step_id_2'] - df['step_id_1']\n```", "```py\ndf = df.loc[\n    df[df[\"step_var\"] > 0]\n    .groupby([\"user_id\", \"session_id\", \"day\"])[\"step_var\"]\n    .idxmax()\n]\n```", "```py\ndf[\"distance_curvature\"] = pd.Series()\nfor i, r in df.iterrows():\n    df.loc[i, \"distance_curvature\"] = (\n        acos(\n            sin(radians(r[\"latitude_1\"])) * sin(radians(r[\"latitude_2\"]))\n            + cos(radians(r[\"latitude_1\"]))\n            * cos(radians(r[\"latitude_2\"]))\n            * cos(radians(r[\"longitude_1\"] - r[\"longitude_2\"]))\n        )\n        * 6371\n    )\n```", "```py\ndf[\"distance_flat\"] = pd.Series()\nfor i, r in df.iterrows():\n    df.loc[i, \"distance_flat\"] = (\n        np.sqrt(\n            (r[\"latitude_2\"] - r[\"latitude_1\"]) ** 2\n            + (r[\"longitude_2\"] - r[\"longitude_1\"]) ** 2\n        )\n        * 111\n    )\n```", "```py\nresult = pd.DataFrame()\nresult[\"avg_distance_curvature\"] = pd.Series(df[\"distance_curvature\"].mean())\nresult[\"avg_distance_flat\"] = pd.Series(df[\"distance_flat\"].mean())\nresult[\"distance_diff\"] = result[\"avg_distance_curvature\"] - result[\"avg_distance_flat\"]\nresult\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom math import cos, sin, acos, radians\n\ndf = pd.merge(\n    google_fit_location,\n    google_fit_location,\n    how=\"left\",\n    on=[\"user_id\", \"session_id\", \"day\"],\n    suffixes=[\"_1\", \"_2\"],\n)\ndf[\"step_var\"] = df[\"step_id_2\"] - df[\"step_id_1\"]\ndf = df.loc[\n    df[df[\"step_var\"] > 0]\n    .groupby([\"user_id\", \"session_id\", \"day\"])[\"step_var\"]\n    .idxmax()\n]\n\ndf[\"distance_curvature\"] = pd.Series()\nfor i, r in df.iterrows():\n    df.loc[i, \"distance_curvature\"] = (\n        acos(\n            sin(radians(r[\"latitude_1\"])) * sin(radians(r[\"latitude_2\"]))\n            + cos(radians(r[\"latitude_1\"]))\n            * cos(radians(r[\"latitude_2\"]))\n            * cos(radians(r[\"longitude_1\"] - r[\"longitude_2\"]))\n        )\n        * 6371\n    )\ndf[\"distance_flat\"] = pd.Series()\nfor i, r in df.iterrows():\n    df.loc[i, \"distance_flat\"] = (\n        np.sqrt(\n            (r[\"latitude_2\"] - r[\"latitude_1\"]) ** 2\n            + (r[\"longitude_2\"] - r[\"longitude_1\"]) ** 2\n        )\n        * 111\n    )\nresult = pd.DataFrame()\nresult[\"avg_distance_curvature\"] = pd.Series(df[\"distance_curvature\"].mean())\nresult[\"avg_distance_flat\"] = pd.Series(df[\"distance_flat\"].mean())\nresult[\"distance_diff\"] = result[\"avg_distance_curvature\"] - result[\"avg_distance_flat\"]\nresult \n```", "```py\nimport pandas as pd\nimport itertools\n\ndf = pd.DataFrame(\n    list(\n        itertools.product(\n            da_flights[\"origin\"].unique(), da_flights[\"destination\"].unique()\n        )\n    ),\n    columns=[\"origin\", \"destination\"],\n)\n```", "```py\ndf = df[df['origin'] != df['destination']]\n```", "```py\nconnections_1 = pd.merge(\n    da_flights,\n    da_flights,\n    how=\"left\",\n    left_on=\"destination\",\n    right_on=\"origin\",\n    suffixes=[\"_0\", \"_1\"],\n)\n```", "```py\nconnections_2 = pd.merge(\n    connections_1,\n    da_flights[[\"origin\", \"destination\", \"cost\"]],\n    how=\"left\",\n    left_on=\"destination_1\",\n    right_on=\"origin\",\n    suffixes=[\"\", \"_2\"],\n).fillna(0)\n```", "```py\nconnections_2.columns = [\n    \"id_0\",\n    \"origin_0\",\n    \"destination_0\",\n    \"cost_0\",\n    \"id_1\",\n    \"origin_1\",\n    \"destination_1\",\n    \"cost_1\",\n    \"origin_2\",\n    \"destination_2\",\n    \"cost_2\",\n]\nconnections_2[\"cost_v1\"] = connections_2[\"cost_0\"] + connections_2[\"cost_1\"]\nconnections_2[\"cost_v2\"] = (\n    connections_2[\"cost_0\"] + connections_2[\"cost_1\"] + connections_2[\"cost_2\"]\n)\n```", "```py\nresult = pd.merge(\n    df,\n    da_flights[[\"origin\", \"destination\", \"cost\"]],\n    how=\"left\",\n    on=[\"origin\", \"destination\"],\n)\n```", "```py\nresult = pd.merge(\n    result,\n    connections_2[[\"origin_0\", \"destination_1\", \"cost_v1\"]],\n    how=\"left\",\n    left_on=[\"origin\", \"destination\"],\n    right_on=[\"origin_0\", \"destination_1\"],\n)\n```", "```py\nresult = pd.merge(\n    result,\n    connections_2[[\"origin_0\", \"destination_2\", \"cost_v2\"]],\n    how=\"left\",\n    left_on=[\"origin\", \"destination\"],\n    right_on=[\"origin_0\", \"destination_2\"],\n)\n```", "```py\nresult[\"min_price\"] = result[[\"cost\", \"cost_v1\", \"cost_v2\"]].min(axis=1)\nresult[~result[\"min_price\"].isna()][[\"origin\", \"destination\", \"min_price\"]]\n```", "```py\nimport pandas as pd\nimport itertools\n\ndf = pd.DataFrame(\n    list(\n        itertools.product(\n            da_flights[\"origin\"].unique(), da_flights[\"destination\"].unique()\n        )\n    ),\n    columns=[\"origin\", \"destination\"],\n)\ndf = df[df[\"origin\"] != df[\"destination\"]]\n\nconnections_1 = pd.merge(\n    da_flights,\n    da_flights,\n    how=\"left\",\n    left_on=\"destination\",\n    right_on=\"origin\",\n    suffixes=[\"_0\", \"_1\"],\n)\nconnections_2 = pd.merge(\n    connections_1,\n    da_flights[[\"origin\", \"destination\", \"cost\"]],\n    how=\"left\",\n    left_on=\"destination_1\",\n    right_on=\"origin\",\n    suffixes=[\"\", \"_2\"],\n).fillna(0)\nconnections_2.columns = [\n    \"id_0\",\n    \"origin_0\",\n    \"destination_0\",\n    \"cost_0\",\n    \"id_1\",\n    \"origin_1\",\n    \"destination_1\",\n    \"cost_1\",\n    \"origin_2\",\n    \"destination_2\",\n    \"cost_2\",\n]\nconnections_2[\"cost_v1\"] = connections_2[\"cost_0\"] + connections_2[\"cost_1\"]\nconnections_2[\"cost_v2\"] = (\n    connections_2[\"cost_0\"] + connections_2[\"cost_1\"] + connections_2[\"cost_2\"]\n)\n\nresult = pd.merge(\n    df,\n    da_flights[[\"origin\", \"destination\", \"cost\"]],\n    how=\"left\",\n    on=[\"origin\", \"destination\"],\n)\n\nresult = pd.merge(\n    result,\n    connections_2[[\"origin_0\", \"destination_1\", \"cost_v1\"]],\n    how=\"left\",\n    left_on=[\"origin\", \"destination\"],\n    right_on=[\"origin_0\", \"destination_1\"],\n)\n\nresult = pd.merge(\n    result,\n    connections_2[[\"origin_0\", \"destination_2\", \"cost_v2\"]],\n    how=\"left\",\n    left_on=[\"origin\", \"destination\"],\n    right_on=[\"origin_0\", \"destination_2\"],\n)\nresult[\"min_price\"] = result[[\"cost\", \"cost_v1\", \"cost_v2\"]].min(axis=1)\nresult[~result[\"min_price\"].isna()][[\"origin\", \"destination\", \"min_price\"]] \n```", "```py\nclass Solution:\n    def maxPathSum(self, root: Optional[TreeNode]) -> int:\n        max_path = -float(\"inf\")\n\n        def gain_from_subtree(node: Optional[TreeNode]) -> int:\n            nonlocal max_path\n\n            if not node:\n                return 0\n            gain_from_left = max(gain_from_subtree(node.left), 0)\n            gain_from_right = max(gain_from_subtree(node.right), 0)\n            max_path = max(max_path, gain_from_left + gain_from_right + node.val)\n\n            return max(gain_from_left + node.val, gain_from_right + node.val)\n\n        gain_from_subtree(root)\n        return max_path\n```"]