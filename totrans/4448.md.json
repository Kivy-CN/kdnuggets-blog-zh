["```py\nimport pandas as pd\n\nsms_spam = pd.read_csv('SMSSpamCollection', sep='\\t',\nheader=None, names=['Label', 'SMS'])\n\nprint(sms_spam.shape)\nsms_spam.head()\n```", "```py\nsms_spam['Label'].value_counts(normalize=True)\n```", "```py\n# Randomize the dataset\ndata_randomized = sms_spam.sample(frac=1, random_state=1)\n\n# Calculate index for split\ntraining_test_index = round(len(data_randomized) * 0.8)\n\n# Split into training and test sets\ntraining_set = data_randomized[:training_test_index].reset_index(drop=True)\ntest_set = data_randomized[training_test_index:].reset_index(drop=True)\n\nprint(training_set.shape)\nprint(test_set.shape)\n```", "```py\ntraining_set['Label'].value_counts(normalize=True)\n```", "```py\ntest_set['Label'].value_counts(normalize=True)\n```", "```py\n# Before cleaning\ntraining_set.head(3)\n```", "```py\n# After cleaning\ntraining_set['SMS'] = training_set['SMS'].str.replace(\n   '\\W', ' ') # Removes punctuation\ntraining_set['SMS'] = training_set['SMS'].str.lower()\ntraining_set.head(3)\n```", "```py\ntraining_set['SMS'] = training_set['SMS'].str.split()\n\nvocabulary = []\nfor sms in training_set['SMS']:\n   for word in sms:\n      vocabulary.append(word)\n\nvocabulary = list(set(vocabulary))\n```", "```py\nlen(vocabulary)\n```", "```py\nword_counts_per_sms = {'secret': [2,1,1],\n                       'prize': [2,0,1],\n                       'claim': [1,0,1],\n                       'now': [1,0,1],\n                       'coming': [0,1,0],\n                       'to': [0,1,0],\n                       'my': [0,1,0],\n                       'party': [0,1,0],\n                       'winner': [0,0,1]\n                      }\n\nword_counts = pd.DataFrame(word_counts_per_sms)\nword_counts.head()\n```", "```py\nword_counts_per_sms = {unique_word: [0] * len(training_set['SMS']) for unique_word in vocabulary}\n\nfor index, sms in enumerate(training_set['SMS']):\n   for word in sms:\n      word_counts_per_sms[word][index] += 1\n```", "```py\nword_counts = pd.DataFrame(word_counts_per_sms)\nword_counts.head()\n```", "```py\ntraining_set_clean = pd.concat([training_set, word_counts], axis=1)\ntraining_set_clean.head()\n```", "```py\n# Isolating spam and ham messages first\nspam_messages = training_set_clean[training_set_clean['Label'] == 'spam']\nham_messages = training_set_clean[training_set_clean['Label'] == 'ham']\n\n# P(Spam) and P(Ham)\np_spam = len(spam_messages) / len(training_set_clean)\np_ham = len(ham_messages) / len(training_set_clean)\n\n# N_Spam\nn_words_per_spam_message = spam_messages['SMS'].apply(len)\nn_spam = n_words_per_spam_message.sum()\n\n# N_Ham\nn_words_per_ham_message = ham_messages['SMS'].apply(len)\nn_ham = n_words_per_ham_message.sum()\n\n# N_Vocabulary\nn_vocabulary = len(vocabulary)\n\n# Laplace smoothing\nalpha = 1\n```", "```py\n# Initiate parameters\nparameters_spam = {unique_word:0 for unique_word in vocabulary}\nparameters_ham = {unique_word:0 for unique_word in vocabulary}\n\n# Calculate parameters\nfor word in vocabulary:\n   n_word_given_spam = spam_messages[word].sum() # spam_messages already defined\n   p_word_given_spam = (n_word_given_spam + alpha) / (n_spam + alpha*n_vocabulary)\n   parameters_spam[word] = p_word_given_spam\n\n   n_word_given_ham = ham_messages[word].sum() # ham_messages already defined\n   p_word_given_ham = (n_word_given_ham + alpha) / (n_ham + alpha*n_vocabulary)\n   parameters_ham[word] = p_word_given_ham\n```", "```py\nimport re\n\ndef classify(message):\n   '''\n   message: a string\n   '''\n\n   message = re.sub('\\W', ' ', message)\n   message = message.lower().split()\n\n   p_spam_given_message = p_spam\n   p_ham_given_message = p_ham\n\n   for word in message:\n      if word in parameters_spam:\n         p_spam_given_message *= parameters_spam[word]\n\n      if word in parameters_ham: \n         p_ham_given_message *= parameters_ham[word]\n\n   print('P(Spam|message):', p_spam_given_message)\n   print('P(Ham|message):', p_ham_given_message)\n\n   if p_ham_given_message > p_spam_given_message:\n      print('Label: Ham')\n   elif p_ham_given_message < p_spam_given_message:\n      print('Label: Spam')\n   else:\n      print('Equal proabilities, have a human classify this!')\n```", "```py\nclassify('WINNER!! This is the secret code to unlock the money: C3421.')\n```", "```py\nclassify(\"Sounds good, Tom, then see u there\")\n```", "```py\ndef classify_test_set(message):\n   '''\n   message: a string\n   '''\n\n   message = re.sub('\\W', ' ', message)\n   message = message.lower().split()\n\n   p_spam_given_message = p_spam\n   p_ham_given_message = p_ham\n\n   for word in message:\n      if word in parameters_spam:\n         p_spam_given_message *= parameters_spam[word]\n\n      if word in parameters_ham:\n         p_ham_given_message *= parameters_ham[word]\n\n   if p_ham_given_message > p_spam_given_message:\n      return 'ham'\n   elif p_spam_given_message > p_ham_given_message:\n      return 'spam'\n   else:\n      return 'needs human classification'\n```", "```py\ntest_set['predicted'] = test_set['SMS'].apply(classify_test_set)\ntest_set.head()\n```", "```py\ncorrect = 0\ntotal = test_set.shape[0]\n\nfor row in test_set.iterrows():\n   row = row[1]\n   if row['Label'] == row['predicted']:\n      correct += 1\n\nprint('Correct:', correct)\nprint('Incorrect:', total - correct)\nprint('Accuracy:', correct/total)\n```"]