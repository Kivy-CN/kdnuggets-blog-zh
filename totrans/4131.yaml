- en: Combining Pandas DataFrames Made Simple
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化 Pandas DataFrame 的合并
- en: 原文：[https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html](https://www.kdnuggets.com/2022/09/combining-pandas-dataframes-made-simple.html)
- en: '![Combining Pandas DataFrames Made Simple](../Images/7b9ab67e85f49434e4247a4e417d520a.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![简化 Pandas DataFrame 的合并](../Images/7b9ab67e85f49434e4247a4e417d520a.png)'
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的 IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In many Real-Life Scenarios, our data is placed in different files for the sake
    of management and simplicity. We often need to combine them into a single, larger
    DataFrame for analysis. Pandas package comes to our rescue by providing us with
    various methods to combine the DataFrames like concat and merge. In addition,
    it also provides the utilities for comparison purposes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多现实场景中，我们的数据为了管理和简便被放置在不同的文件中。我们常常需要将它们合并为一个更大的 DataFrame 进行分析。Pandas 包通过提供各种合并
    DataFrame 的方法，如 concat 和 merge，来帮助我们。此外，它还提供了用于比较的工具。
- en: We will work through the examples to understand how both methods work. For this
    tutorial, we will assume that you have basic knowledge about Python and Pandas.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过示例来理解这两种方法的工作原理。对于本教程，我们假设你对 Python 和 Pandas 有基本了解。
- en: Concatenating Dataframes
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接 DataFrame
- en: If the format of the two DataFrames is the same, we opt for the **.concat()**
    method. It appends either the columns or rows from one DataFrame to another. The
    **.concat()** takes full responsibility for performing the concatenation operation
    along the axis. Before we dive into its details, let us have a quick look at the
    function syntax and its parameter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个 DataFrame 的格式相同，我们选择 **.concat()** 方法。它将一个 DataFrame 的列或行附加到另一个 DataFrame
    上。**.concat()** 负责在指定轴上执行连接操作。在我们深入了解其细节之前，先快速看一下函数语法及其参数。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Though there is much going on,  we will focus on the prime parameters only
    :'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有很多内容，但我们将重点关注主要参数：
- en: '**objs:** List of DataFrame objects or Series to be concatenated'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**objs:** 要连接的 DataFrame 对象或 Series 列表'
- en: '**axis:** axis = 0 tells the pandas to stack the second DataFrame under the
    first one (concatenating by rows) while axis =1 tells the pandas to stack the
    second DataFrame to the right of the first one (concatenating by columns). By
    default , axis = 0.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**axis:** axis = 0 告诉 pandas 将第二个 DataFrame 堆叠在第一个 DataFrame 下方（按行连接），而 axis
    = 1 告诉 pandas 将第二个 DataFrame 堆叠在第一个 DataFrame 右侧（按列连接）。默认情况下，axis = 0。'
- en: '**join:** By default join= outer, outer is used for union and inner for intersection'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**join:** 默认情况下，join=outer，outer 用于并集，inner 用于交集'
- en: '**ignore_index:** It would ignore the index axis in the concatenation process,
    and by default, it''s kept as False because they are respected in the join. However,
    if the index axis does not have meaningful information, then it is useful to ignore
    them.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ignore_index:** 在连接过程中将忽略索引轴，默认情况下保持为 False，因为它们在连接中受到尊重。然而，如果索引轴没有有意义的信息，那么忽略它们是有用的。'
- en: '**verify_integrity:** It checks for duplicates in the new concatenated axis
    but by default, it''s kept as False as it can be very expensive relative to actual
    concatenation itself.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**verify_integrity:** 它检查新连接轴中的重复项，但默认情况下保持为 False，因为相对于实际的连接操作，它可能非常昂贵。'
- en: Example
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/3ab00aa88b932891643a4b09c5d9886c.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![简化 Pandas DataFrame 的合并](../Images/3ab00aa88b932891643a4b09c5d9886c.png)'
- en: 'Scenario 1: Concatenating by Columns'
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 1：按列连接
- en: Assuming that columns A, B, C & D represent different functionalities but the
    index number refers to the same id, it makes more sense to join the C, and D rows
    to the right of df_one. Let's do it,
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 假设列 A、B、C 和 D 代表不同的功能，但索引号指的是相同的 ID，那么将 C 和 D 行合并到 df_one 的右侧更有意义。让我们来做一下，
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/e3e38ec873ee132212617dd711c1ece7.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/e3e38ec873ee132212617dd711c1ece7.png)'
- en: 'Scenario 2: Concatenating by Rows'
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 场景 2：按行拼接
- en: If we continue our above assumption and concatenate them by rows, then the resulting
    DataFrame will have a lot of missing data in form of NaN values. The reason is
    simple, let's say for index = 0 in df_two we cannot place it directly under columns
    A and B as we considered them to be separate functions for which the value is
    not present. Hence pandas will automatically create a complete row for A, B, C,
    and D with missing values in their respective columns.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们继续上述假设并按行拼接它们，那么结果 DataFrame 将会有很多 NaN 值缺失数据。原因很简单，假设在 df_two 中的索引 = 0，我们不能直接将其放置在列
    A 和 B 下，因为我们认为它们是两个不同的函数，而值不存在。因此，pandas 会自动创建一个包含 A、B、C 和 D 的完整行，并在各自的列中填充缺失值。
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/9cb34e027f6e45cf4cecdca485a04b16.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/9cb34e027f6e45cf4cecdca485a04b16.png)'
- en: Notice that we have the duplicate index in our final result. This is because
    by default ignore_index is set to False which saves the index of DataFrames as
    it is present originally. This may not be useful in our case so we will set **ignore_index
    = True**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们的最终结果中有重复的索引。这是因为默认情况下 ignore_index 设置为 False，它保留了 DataFrames 的原始索引。这在我们的情况下可能不实用，所以我们将设置
    **ignore_index = True**。
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/bfab7bcbeb018fcf4139c5bf3010f220.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/bfab7bcbeb018fcf4139c5bf3010f220.png)'
- en: If the columns in both the DataFrames represent the same thing and are just
    named differently, then we can rename the columns before concatenating.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果两个 DataFrame 中的列表示相同的内容，只是名称不同，那么我们可以在拼接之前重命名这些列。
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/e101dd738e72dbe3132c768db927712a.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/e101dd738e72dbe3132c768db927712a.png)'
- en: Merging Dataframes
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并 DataFrames
- en: 'Merging or joining the dataFrames is different from concatenating. Concatenating
    means just stacking up one dataFrame on another along the desired axis.  While
    joining works just like the joins in SQL. We can combine the dataFrames based
    on a unique column. These methods have high performance and perform significantly
    better. It is useful when one DataFrame is the “lookup Table” containing additional
    data that we want to join to the other. Let''s take a look at its syntax and parameters:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 合并或连接 DataFrames 与拼接不同。拼接仅仅是将一个 DataFrame 堆叠在另一个 DataFrame 上，沿着所需的轴。而连接就像 SQL
    中的连接一样。我们可以基于一个唯一的列合并 DataFrames。这些方法具有高性能，并表现得显著更好。当一个 DataFrame 是包含额外数据的“查找表”，我们想要将其连接到另一个
    DataFrame 时，这非常有用。让我们看看它的语法和参数：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Let''s take a look at its prime parameters and what are they for :'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它的主要参数及其用途：
- en: '**left:** Dataframe object'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**left：** DataFrame 对象'
- en: '**right:** Dataframe object'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**right：** DataFrame 对象'
- en: '**how:** Join type i.e inner, outer, left, right, etc. By default how = “inner”'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**how：** 连接类型，即 inner、outer、left、right 等。默认情况下 how = “inner”'
- en: '**on:** Column common in both DataFrame and forms the basis for join operation.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on：** 在两个 DataFrame 中都存在的列，并且构成连接操作的基础。'
- en: '**left_on:** If you are using the right_index as the column to join on then
    you must specify the column that will be used as the key.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**left_on：** 如果您使用 right_index 作为连接的列，则必须指定将用作键的列。'
- en: '**right_on:** Vice versa of left_on'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**right_on：** 左侧的反向操作'
- en: '**left_index:** if set to True, then it uses the row labels (Index) of left
    DataFrame as join key'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**left_index：** 如果设置为 True，则使用左侧 DataFrame 的行标签（索引）作为连接键。'
- en: '**right_index:** Vice Versa of left_index'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**right_index：** 左侧索引的反向操作'
- en: '**sort:** Sort the resultant dataFrame by join keys in lexicographical order
    but it is not recommended as it substantially affects the performance.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sort：** 按连接键的字典顺序对结果 DataFrame 进行排序，但不推荐这样做，因为这会显著影响性能。'
- en: '**suffixes:** If we have an overlapping column, you can assign the suffixes
    to distinguish between them. By default, it is set to (''_x'', ''_y'').'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**suffixes：** 如果我们有重叠的列，可以为它们指定后缀以区分它们。默认情况下，它设置为 (''_x'', ''_y'')。'
- en: Example
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例
- en: Consider an example of sports and a library dataFrame and assume that the **“name**”
    column in both the DataFrames is unique and can be used as the primary key.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以体育和图书馆数据框为例，假设两个 DataFrame 中的 **“name**” 列是唯一的，并可以用作主键。
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/42b17b07355c081a2e6b047336d0ef21.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/42b17b07355c081a2e6b047336d0ef21.png)'
- en: 'Scenario 1: Inner and Outer Join'
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '情景 1: 内连接和外连接'
- en: For both of them, the order in which you place the dataFrame in the .**merge()**
    method doesn’t matter as the final result would still be the same. If we consider
    the two DataFrames as the two sets then the inner join would refer to their intersection
    while the outer join to their union.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两者，你在 **.merge()** 方法中放置数据框的顺序并不重要，因为最终结果仍然是相同的。如果我们将两个 DataFrame 视为两个集合，则内连接指的是它们的交集，而外连接指的是它们的并集。
- en: '![Combining Pandas DataFrames Made Simple](../Images/9bddf553892cc1c48d64a0f3597b4f0e.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/9bddf553892cc1c48d64a0f3597b4f0e.png)'
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/b57c2f11ecedc5902abc368700e4b2a6.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/b57c2f11ecedc5902abc368700e4b2a6.png)'
- en: 'Scenario 2: Left and Right Join'
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '情景 2: 左连接和右连接'
- en: Here, the order in which we place the DataFrames matter. For example, in the
    left join, all the entries of the DataFrame object placed in the left spot will
    be displayed along with their matching entries from the right DataFrame object.
    The right join is just the opposite of what the left join does. Let us understand
    the concept from an example,
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们放置 DataFrames 的顺序是重要的。例如，在左连接中，位于左侧位置的 DataFrame 对象的所有条目将显示出来，并且其匹配的条目来自右侧
    DataFrame 对象。右连接则完全相反。让我们通过一个示例来理解这个概念，
- en: '![Combining Pandas DataFrames Made Simple](../Images/ad620c09165771ebd5597a7df4e07720.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/ad620c09165771ebd5597a7df4e07720.png)'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/d13f69f05a2609b00ee91fe799c182b6.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/d13f69f05a2609b00ee91fe799c182b6.png)'
- en: 'Scenario 3: Joining when using Index'
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '情景 3: 使用索引进行连接'
- en: Firstly, Let us modify our sports table to make the “ name” column an index
    by using the **set_index()** method.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过使用 **set_index()** 方法将“name”列修改为索引。
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/60eb93309b75987c40f2be1f2f7b0349.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/60eb93309b75987c40f2be1f2f7b0349.png)'
- en: Now we will apply the inner operation and set the value of **left_index= True**
    if we are taking sports as our left DataFrame.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将应用内连接操作，并将 **left_index= True** 设置为如果我们将体育作为左侧数据框。
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/b568af6dd6fb9ed8d02ba5bc52caf5a5.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/b568af6dd6fb9ed8d02ba5bc52caf5a5.png)'
- en: Notice that it shows the same result as we did earlier for the inner join.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，它显示了与我们之前对内连接所做的结果相同。
- en: 'Scenario 4: Suffixes Attribute'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '情景 4: 后缀属性'
- en: Let us make a small modification to our original dataFrames by changing the
    sports_id and login_id as the id. Now although the name is the same, but we are
    referring to different ids. Pandas is smart enough to identify it and it adds
    the suffixes itself. We will see later on how to customize these suffixes ourselves.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对原始数据框做一个小修改，将 sports_id 和 login_id 改为 id。现在虽然名称相同，但我们指的是不同的 id。Pandas 足够聪明，能够识别它，并自动添加后缀。稍后我们将看到如何自定义这些后缀。
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/42b17b07355c081a2e6b047336d0ef21.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/42b17b07355c081a2e6b047336d0ef21.png)'
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/f2e6ce7b393de613e1cc968f5c21c427.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/f2e6ce7b393de613e1cc968f5c21c427.png)'
- en: Here the id_x refers to the left dataFrame while id_y refers to the right one.
    Although, it does its job but for the sake of readability and cleaner code we
    customize these suffixes by using the **suffixes** attribute.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，id_x 指代左侧数据框，而 id_y 指代右侧数据框。虽然它完成了工作，但为了提高可读性和代码的简洁性，我们通过使用 **suffixes**
    属性来自定义这些后缀。
- en: '[PRE14]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![Combining Pandas DataFrames Made Simple](../Images/777258dd3015f367aa0128c63b1b029f.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![结合 Pandas DataFrames 变得简单](../Images/777258dd3015f367aa0128c63b1b029f.png)'
- en: Conclusion
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This article was intended to simplify the concept of combining the rows in Pandas.
    When you are extracting the data on a larger scale lets say from .csv files, it
    is always recommended to analyze the type and format of data before you begin
    to perform the joining operation. Pandas has some excellent methods in this regard
    too. In case of any issue, you should refer to the official documentation of Pandas.
    Last but not least, everything comes with practice so experiment with different
    DataFrames in your own time for better understanding.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本文旨在简化在 Pandas 中合并行的概念。当你从大型 .csv 文件中提取数据时，建议在执行合并操作之前先分析数据的类型和格式。Pandas 在这方面也有一些优秀的方法。如果遇到问题，你应该参考
    Pandas 的官方文档。最后但同样重要的是，一切都需要通过实践来掌握，因此在自己的时间里尝试不同的 DataFrames，以便更好地理解。
- en: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)** is aspiring
    Software Developer who believes in consistent hard work and commitment. She is
    an ambitious programmer with a keen interest in the field of Data Science and
    Machine Learning.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)** 是一位有抱负的软件开发人员，她相信持续的努力和承诺。她是一位雄心勃勃的程序员，对数据科学和机器学习领域充满浓厚兴趣。'
- en: More On This Topic
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Query Your Pandas DataFrames with SQL](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 SQL 查询 Pandas DataFrames](https://www.kdnuggets.com/2021/10/query-pandas-dataframes-sql.html)'
- en: '[Using the apply() Method with Pandas Dataframes](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 apply() 方法处理 Pandas DataFrames](https://www.kdnuggets.com/2022/07/apply-method-pandas-dataframes.html)'
- en: '[How to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/01/merge-pandas-dataframes.html)'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何合并 Pandas DataFrames](https://www.kdnuggets.com/2023/01/merge-pandas-dataframes.html)'
- en: '[3 Ways to Merge Pandas DataFrames](https://www.kdnuggets.com/2023/03/3-ways-merge-pandas-dataframes.html)'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[合并 Pandas DataFrames 的 3 种方法](https://www.kdnuggets.com/2023/03/3-ways-merge-pandas-dataframes.html)'
- en: '[Converting JSONs to Pandas DataFrames: Parsing Them the Right Way](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将 JSON 转换为 Pandas DataFrames：正确解析它们](https://www.kdnuggets.com/converting-jsons-to-pandas-dataframes-parsing-them-the-right-way)'
- en: '[How to Merge Large DataFrames Efficiently with Pandas](https://www.kdnuggets.com/how-to-merge-large-dataframes-efficiently-with-pandas)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何高效地使用 Pandas 合并大型 DataFrames](https://www.kdnuggets.com/how-to-merge-large-dataframes-efficiently-with-pandas)'
