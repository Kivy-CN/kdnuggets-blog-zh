["```py\nimport pandas as pd\nimport numpy as np\n\nmovies = pd.read_csv(\"movies.csv\")\n*# dummy encode the genre*\nmovies = movies.join(movies.genres.str.get_dummies(\"|\"))\n\n```", "```py\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n*# compute the cosine similarity* cos_sim = cosine_similarity(movies.iloc[:,3:])\n\n```", "```py\n*# Let's get the top 5 most similar films:* toystory_top5 = np.argsort(sim[0])[-5:][::-1]\n\n*# array([   0, 8219, 3568, 9430, 3000, 2809, 2355, 6194, 8927, 6948, 7760,\n#       1706, 6486, 6260, 5490])* \n```", "```py\nratings = pd.read_csv(\"ratings.csv\")\n\nmean_rating = ratings['rating'].mean() *# compute mean rating*\n\npref_matrix = ratings[['userId', 'movieId', 'rating']].pivot(index='userId', columns='movieId', values='rating')\n\npref_matrix = pref_matrix - mean_rating *# adjust by overall mean*\n\nitem_mean_rating = pref_matrix.mean(axis=0)\npref_matrix = pref_matrix - item_mean_rating *# adjust by item mean*\n\nuser_mean_rating = pref_matrix.mean(axis=1)\npref_matrix = pref_matrix - user_mean_rating\n\n```", "```py\npref_matrix.fillna(0) + user_mean_rating + item_mean_rating + mean_rating\n\n```", "```py\nmat = pref_matrix.values\nk = 0 *# use the first user*\nnp.nansum((mat - mat[k,:])**2,axis=1).reshape(-1,1)\n\n```", "```py\nnp.nansum((mat - mat[0,:])**2,axis=1)[1:].argmin() *# returns 11*\n*# check it:* np.nansum(mat[12] - mat[0]) # returns 0.0\n\n```", "```py\nnp.where(~np.isnan(mat[12]) & np.isnan(mat[0]) == True)\n*# returns (array([304, 596]),)* \nmat[12][[304, 596]]\n*# returns array([-2.13265214, -0.89476547])* \n```"]