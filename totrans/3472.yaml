- en: Why Implement Machine Learning Algorithms From Scratch?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么要从头实现机器学习算法？
- en: 原文：[https://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html](https://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html](https://www.kdnuggets.com/2016/05/implement-machine-learning-algorithms-scratch.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: 'There are several different reasons why implementing algorithms from scratch
    can be useful:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从头实现算法有几个不同的原因可能会很有用：
- en: it can help us to understand the inner works of an algorithm
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它可以帮助我们理解算法的内部工作原理。
- en: we could try to implement an algorithm more efficiently
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以尝试更高效地实现一个算法。
- en: we can add new features to an algorithm or experiment with different variations
    of the core idea
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以为算法添加新特性或实验不同的核心概念变体。
- en: we circumvent licensing issues (e.g., Linux vs. Unix) or platform restrictions
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以绕过许可问题（例如，Linux vs. Unix）或平台限制。
- en: we want to invent new algorithms or implement algorithms no one has implemented/shared
    yet
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想发明新算法或实现尚未实现/分享的算法。
- en: we are not satisfied with the API and/or we want to integrate it more "naturally"
    into an existing software library
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们对现有的 API 不满意，或者我们想将其更“自然”地集成到现有的软件库中。
- en: '![Machine learning taxonomy](../Images/757705b20ace87e918f33e32ca073999.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![机器学习分类](../Images/757705b20ace87e918f33e32ca073999.png)'
- en: Let us narrow down the phrase "implementing from scratch" a bit further in context
    of the 6 points I mentioned above. When we talk about "implementing from scratch,"
    we need to narrow down the scope to make this question really tangible. Let's
    talk about a particular algorithm, simple logistic regression, to address the
    different points using concrete examples. I'd claim that logistic regression has
    been implemented more than thousand times.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在上述六点的背景下进一步缩小“从头实现”这个短语的范围。当我们谈论“从头实现”时，我们需要缩小范围，使这个问题真正切实可行。让我们讨论一个具体的算法，简单的逻辑回归，以便用具体的例子来解决不同的点。我认为逻辑回归已经实现了不下于千次。
- en: One reason why we'd still want to implement logistic regression from scratch
    could be that we don't have the impression that we fully understand how it works;
    we read a bunch of papers, and kind of understood the core concept though. Using
    a programming language for prototyping (e.g., Python, MATLAB, R, and so forth),
    we could take the ideas from paper and try to express them in code -- step by
    step. An established library, such as scikit-learn, can help us than double-check
    the results and to see if our implementation -- our idea of how the algorithm
    is supposed to work -- is correct. Here, we don't really care about efficiency;
    although we spend so much time to implement the algorithm, we probably want to
    use an established library if we want to perform some serious analysis in our
    research lab and/or company. Established libraries are typically more trustworthy
    -- they have been battle-tested by many people, people who may have already encountered
    certain edge cases and made sure that there are no weird surprises. Furthermore,
    it is also more likely that this code was highly optimized for computational efficiency
    over time. Here, implementing from scratch simply serves the purpose of self-assessment.
    Reading about a concept is one thing, but putting it to action is a whole other
    level of understanding -- and being able to explain it to others is the icing
    on the cake.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然希望从头实现逻辑回归的一个原因可能是我们觉得自己没有完全理解它的工作原理；我们读了一些论文，虽然理解了核心概念。通过编程语言进行原型设计（例如，Python、MATLAB、R
    等），我们可以从论文中获取想法，并尝试逐步用代码表达它们。一个成熟的库，如 scikit-learn，可以帮助我们再次检查结果，看看我们的实现——我们对算法如何工作的理解——是否正确。在这里，我们并不真正关心效率；尽管我们花了很多时间实现算法，但如果我们想在研究实验室或公司中进行一些严肃的分析，我们可能还是会想使用成熟的库。成熟的库通常更值得信赖——它们经过了许多人使用的考验，可能已经遇到了一些边界情况，并确保没有奇怪的意外。此外，这些代码也更有可能随着时间的推移被高度优化以提高计算效率。在这里，从头实现的目的仅仅是为了自我评估。阅读一个概念是一回事，但将其付诸实践则是对理解的更高层次——能够向他人解释则是锦上添花。
- en: Another reason why we want to re-implement logistic regression from scratch
    may be that we are not satisfied with the "features" of other implementations.
    Let's us naively assume that other implementations don't have regularization parameters,
    or it doesn't support multi-class settings (i.e., via One-vs-All, One-vs-One,
    or softmax). Or if computational (or predictive) efficiency is an issue, maybe
    we want to implement it with another solver (e.g., Newton vs. Gradient Descent
    vs. Stochastic Gradient Descent, etc.). But improvements concerning computational
    efficiency does not necessarily need to be in terms of modifications of the algorithms,
    but we could use lower-level programming languages, for example, Scala instead
    of Python, or Fortran instead of Scala, ... this can go all down to assembly or
    machine code, or designing a chip that is optimized for running such kind of analysis.
    However, if you are a machine learning (or "data science") practitioner or researcher,
    this is probably something you should delegate to the software engineering team.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个我们可能希望从头开始重新实现逻辑回归的原因是我们对其他实现的“特性”不满意。让我们天真地假设其他实现没有正则化参数，或者不支持多类设置（即通过一对多、一对一或softmax）。或者如果计算（或预测）效率是一个问题，也许我们想使用另一种求解器（例如牛顿法与梯度下降法与随机梯度下降法等）来实现它。但是，关于计算效率的改进不一定需要通过算法的修改来实现，我们可以使用更底层的编程语言，例如使用Scala代替Python，或使用Fortran代替Scala……这可能涉及到汇编语言或机器代码，甚至设计一个优化用于运行这种分析的芯片。然而，如果你是一个机器学习（或“数据科学”）从业者或研究人员，这可能是你应该委托给软件工程团队的事情。
- en: '![Decision tree pseudocode](../Images/a6c56537d0cfda62a29f8883c70c6a7f.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![决策树伪代码](../Images/a6c56537d0cfda62a29f8883c70c6a7f.png)'
- en: 'To come back to the main question: Different people implement algorithms from
    scratch for various reasons. Personally, when I implement algorithms from scratch,
    I do it because of the learning experience.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 回到主要问题：不同的人因各种原因从头实现算法。就个人而言，当我从头实现算法时，是因为学习的体验。
- en: '**Bio: [Sebastian Raschka](https://twitter.com/rasbt)** is a ''Data Scientist''
    and Machine Learning enthusiast with a big passion for Python & open source. Author
    of ''[Python Machine Learning](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning)''.
    Michigan State University.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介： [Sebastian Raschka](https://twitter.com/rasbt)** 是一位“数据科学家”和机器学习爱好者，对Python和开源有极大热情。《[Python机器学习](https://www.packtpub.com/big-data-and-business-intelligence/python-machine-learning)》的作者。密歇根州立大学。'
- en: '[Original](https://github.com/rasbt/python-machine-learning-book/blob/master/faq/implementing-from-scratch.md).
    Reposted with permission.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://github.com/rasbt/python-machine-learning-book/blob/master/faq/implementing-from-scratch.md)。经许可转载。'
- en: '**Related:**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[When Does Deep Learning Work Better Than SVMs or Random Forests?](/2016/04/deep-learning-vs-svm-random-forest.html)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[深度学习何时优于支持向量机或随机森林？](/2016/04/deep-learning-vs-svm-random-forest.html)'
- en: '[The Development of Classification as a Learning Machine](/2016/04/development-classification-learning-machine.html)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分类发展作为学习机器](/2016/04/development-classification-learning-machine.html)'
- en: '[Top 10 Data Mining Algorithms, Explained](/2015/05/top-10-data-mining-algorithms-explained.html)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[十大数据挖掘算法解析](/2015/05/top-10-data-mining-algorithms-explained.html)'
- en: '* * *'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[How to Implement a Federated Learning Project with Healthcare Data](https://www.kdnuggets.com/2023/02/implement-federated-learning-project-healthcare-data.html)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用医疗数据实施联邦学习项目](https://www.kdnuggets.com/2023/02/implement-federated-learning-project-healthcare-data.html)'
- en: '[Machine Learning Algorithms - What, Why, and How?](https://www.kdnuggets.com/2022/09/machine-learning-algorithms.html)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习算法 - 什么、为什么以及如何？](https://www.kdnuggets.com/2022/09/machine-learning-algorithms.html)'
- en: '[A Simple to Implement End-to-End Project with HuggingFace](https://www.kdnuggets.com/a-simple-to-implement-end-to-end-project-with-huggingface)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个简单易实施的端到端项目，使用HuggingFace](https://www.kdnuggets.com/a-simple-to-implement-end-to-end-project-with-huggingface)'
- en: '[With Data Privacy learn to implement technical privacy solutions…](https://www.kdnuggets.com/2022/04/manning-data-privacy-learn-implement-technical-privacy-solutions-tools-scale.html)'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过数据隐私学习如何实施技术隐私解决方案…](https://www.kdnuggets.com/2022/04/manning-data-privacy-learn-implement-technical-privacy-solutions-tools-scale.html)'
- en: '[Learn how to design, measure and implement trustworthy A/B tests…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习如何设计、测量和实施可靠的A/B测试…](https://www.kdnuggets.com/2023/01/sphere-design-measure-implement-trustworthy-ab-tests-ronny-kohavi.html)'
- en: '[How to Implement Agentic RAG Using LangChain: Part 1](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用LangChain实现Agentic RAG：第一部分](https://www.kdnuggets.com/how-to-implement-agentic-rag-using-langchain-part-1)'
