["```py\n# create and activate a new virtual environment\nvirtualenv automl --python=python3\nsource automl/bin/activate\n# install auto-sklearn\npip install auto-sklearn\n```", "```py\ndeactivate\nvirtualenv autopt â€“-python=python3.7\nsource autopt/bin/activate\n# install auto-pytorch from the github repo\ngit clone https://github.com/automl/Auto-PyTorch.git\ncd Auto-PyTorch\npip install -e .\npip install numpy==1.20.0\npip install ipython\n```", "```py\nValueError: numpy.ndarray size changed, may indicate binary incompatibility. Expected 88 from C header, got 80 from PyObject\n```", "```py\n# (optional)\ngit checkout development\n# make sure to switch back to the primary branch for the tutorial\ngit checkout master\n```", "```py\nimport time\nimport sklearn\nimport sklearn.datasets\n\n#** load and split data **\ndata, target = sklearn.datasets.load_iris(return_X_y=True)\n\n# split\nn = int(data.shape[0] * 0.8)\n\ntrain_x = data[:n]\ntrain_y = target[:n]\ntest_x = data[n:]\ntest_y = target[n:]\n```", "```py\n# import classifiers\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# instantiate with default parameters\nknn = KNeighborsClassifier()\nmlp = MLPClassifier()\nsvm = SVC()\n```", "```py\nt0 = time.time()\nknn.fit(train_x, train_y)\nmlp.fit(train_x, train_y)\nsvm.fit(train_x, train_y)\nt1 = time.time()\n```", "```py\nknn_predict = knn.predict(test_x)\ntrain_knn_predict = knn.predict(train_x)\n\nsvm_predict = svm.predict(test_x)\ntrain_svm_predict = svm.predict(train_x)\n\nmlp_predict = mlp.predict(test_x)\ntrain_mlp_predict = mlp.predict(train_x)\n\nknn_accuracy = sklearn.metrics.accuracy_score(test_y, knn_predict)\ntrain_knn_accuracy = sklearn.metrics.accuracy_score(train_y,train_knn_predict)\n\nsvm_accuracy = sklearn.metrics.accuracy_score(test_y, svm_predict)\ntrain_svm_accuracy = sklearn.metrics.accuracy_score(train_y,train_svm_predict)\n\nmlp_accuracy = sklearn.metrics.accuracy_score(test_y, mlp_predict)\ntrain_mlp_accuracy = sklearn.metrics.accuracy_score(train_y,train_mlp_predict)\n\nprint(f\"svm, knn, mlp test accuracy: {svm_accuracy:.4f},\" \\\n           f\"{knn_accuracy:.4}, {mlp_accuracy:.4}\")\nprint(f\"svm, knn, mlp train accuracy: {train_svm_accuracy:.4f},\" \\\n           f\"{train_knn_accuracy:.4}, {train_mlp_accuracy:.4}\")\nprint(f\"time to fit: {t1-t0}\")\n```", "```py\nAutoSKlearnClassifier \n```", "```py\nautosklearn.classification \n```", "```py\nimport autosklearn\nfrom autosklearn.classification import AutoSklearnClassifier as ASC\n\nclassifier = ASC()\nclassifier.time_left_for_this_task = 300\n\nt0 = time.time()\nclassifier.fit(train_x, train_y)\nt1 = time.time()\n\nautosk_predict = classifier.predict(test_x)\ntrain_autosk_predict = classifier.predict(train_x)\n\nautosk_accuracy = sklearn.metrics.accuracy_score( \\\n           test_y, autosk_predict \\\n           )\ntrain_autosk_accuracy = sklearn.metrics.accuracy_score( \\\n           Train_y,train_autosk_predict \\\n           )\n\nprint(f\"test accuracy {autosk_2_accuracy:.4f}\")\nprint(f\"train accuracy {train_autosk_2_accuracy:.4f}\")\nprint(f\"time to fit: {t1-t0}\")\n```", "```py\nrefit\n```", "```py\nimport autoPyTorch\nfrom autoPyTorch import AutoNetClassification as ANC\n\nmodel = ANC(max_runtime=300, min_budget=30, max_budget=90, cuda=False)\n\nt0 = time.time()\nmodel.fit(train_x, train_y, validation_split=0.1)\nt1 = time.time()\n\nauto_predict = model.predict(test_x)\ntrain_auto_predict = model.predict(train_x)\n\nauto_accuracy = sklearn.metrics.accuracy_score(test_y, auto_predict)\ntrain_auto_accuracy = sklearn.metrics.accuracy_score(train_y, train_auto_predict)\n\nprint(f\"auto-pytorch test accuracy {auto_accuracy:.4}\")\nprint(f\"auto-pytorch train accuracy {train_auto_accuracy:.4}\")\n```"]