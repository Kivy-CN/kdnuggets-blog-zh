["```py\nfrom sklearn.ensemble import DecisionTreeClassifier, AdaBoostClassifier\n\nmodel = AdaBoostClassifier(\n\nDecisionTreeClassifier(),\n\nn_estimators=100,\n\nlearning_rate=1.0)\n\nmodel.fit(X_train, y_train)\n\npredictions = rad.predict(X_test)\n```", "```py\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nmodel = GradientBoostingClassifier(n_estimators=100, learning_rate=1.0, max_depth=1, random_state=0)\n\nmodel.fit(X_train, y_train)\n\nmodel.score(X_test,y_test)\n```", "```py\nxg_reg = xgb.XGBRegressor(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1, max_depth = 5, alpha = 10, n_estimators = 10)\n\nxg_reg.fit(X_train,y_train)\n\npreds = xg_reg.predict(X_test)<\n```", "```py\nimport matplotlib.pyplot as plt\n\nxgb.plot_importance(xg_reg)\n\nplt.rcParams['figure.figsize'] = [5, 5]\n\nplt.show()\n```", "```py\nimport lightgbm as lgb\n\nlgb_train = lgb.Dataset(X_train, y_train)\n\nlgb_eval = lgb.Dataset(X_test, y_test, reference=lgb_train)\n```", "```py\nparams = {'boosting_type': 'gbdt',\n\n'objective': 'binary',\n\n'num_leaves': 40,\n\n'learning_rate': 0.1,\n\n'feature_fraction': 0.9\n\n}\n\ngbm = lgb.train(params,\n\nlgb_train,\n\nnum_boost_round=200,\n\nvalid_sets=[lgb_train, lgb_eval],\n\nvalid_names=['train','valid'],\n\n)\n```", "```py\nfrom catboost import CatBoostRegressor\n\ncat = CatBoostRegressor()\n\ncat.fit(X_train,y_train,verbose=False, plot=True)\n```"]