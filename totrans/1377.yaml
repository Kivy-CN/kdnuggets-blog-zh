- en: 'Complex logic at breakneck speed: Try Julia for data science'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以极快的速度处理复杂逻辑：尝试 Julia 进行数据科学
- en: 原文：[https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html](https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html](https://www.kdnuggets.com/2020/05/complex-logic-breakneck-speed-julia-data-science.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '![](../Images/5d6555e62b617548bbed3402d2839b51.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5d6555e62b617548bbed3402d2839b51.png)'
- en: 'NOTE: I am building a Github repo with Julia fundamentals and data science
    examples. [**Check it out here**](https://github.com/tirthajyoti/Julia-data-science).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：我正在构建一个包含 Julia 基础知识和数据科学示例的 Github 仓库。[**点击这里查看**](https://github.com/tirthajyoti/Julia-data-science)。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织在 IT 方面'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: '*“Walks like Python, runs like C”* — this has been said about Julia, a modern
    programming language, **focused on scientific computing**,and having an ever-increasing
    base of followers and developers.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*“像 Python 一样行走，像 C 一样运行”*——这是对 Julia 这门现代编程语言的评价，它**专注于科学计算**，并且拥有不断增长的追随者和开发者。'
- en: Julia, a general-purpose programming language, is made specifically for scientific
    computing. It is a [**flexible**](https://docs.julialang.org/en/v1/manual/types/)[**dynamically-typed**](https://android.jlelse.eu/magic-lies-here-statically-typed-vs-dynamically-typed-languages-d151c7f95e2b) language
    with **performance comparable to traditional statically-typed languages**.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是一种通用编程语言，专门为科学计算而设计。它是一种[**灵活**](https://docs.julialang.org/en/v1/manual/types/)[**动态类型**](https://android.jlelse.eu/magic-lies-here-statically-typed-vs-dynamically-typed-languages-d151c7f95e2b)语言，其**性能与传统的静态类型语言相当**。
- en: Julia tries to provide a single environment productive enough for prototyping
    and efficient for industrial-grade applications. It is a multi-paradigm language
    encompassing both [functional](https://codeburst.io/a-beginner-friendly-intro-to-functional-programming-4f69aa109569) and
    object-oriented programming components, although the **majority of the users like
    its functional programming aspects**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 尝试提供一个足够高效的单一环境，既适合原型开发，也适用于工业级应用。它是一种多范式语言，包含了[函数式](https://codeburst.io/a-beginner-friendly-intro-to-functional-programming-4f69aa109569)和面向对象编程组件，尽管**大多数用户喜欢它的函数式编程方面**。
- en: The inception of this programming language can be traced back to 2009\. The
    lead developers Alan Edelman, Jeff Bezanson, Stefan Karpinski, and Viral Shah
    started working on creating a language that can be used for better and faster
    numerical computing. The developers were able to launch a commercial release in
    February 2012.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这门编程语言的起源可以追溯到 2009 年。首席开发者 Alan Edelman、Jeff Bezanson、Stefan Karpinski 和 Viral
    Shah 开始致力于创建一种可以用于更好、更快的数值计算的语言。开发者们在 2012 年 2 月成功发布了商业版。
- en: Why is it awesome for data science?
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么它对数据科学如此出色？
- en: '![](../Images/10599c0ed770099e3221c65b266532a5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/10599c0ed770099e3221c65b266532a5.png)'
- en: Julia is an excellent choice for data science and machine learning work, for
    much of the same reason, that it is a great choice for fast numerical computing.
    The advantages include,
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 是数据科学和机器学习工作的绝佳选择，原因之一是它在快速数值计算方面表现出色。其优势包括：
- en: '**A smooth learning curve**, and the extensive underlying functionality. Especially,
    if you are already familiar with the more popular data science languages like
    Python and R, picking up Julia will be a walk in the park.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑的学习曲线**和广泛的基础功能。尤其是，如果你已经熟悉像 Python 和 R 这样更流行的数据科学语言，那么学习 Julia 将会轻而易举。'
- en: '**Performance**: Originally, Julia is a compiled language, while Python and
    R are interpreted. This means that the Julia code is executed on the processor
    as a direct executable code.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：最初，Julia 是一种编译语言，而 Python 和 R 是解释型语言。这意味着 Julia 代码作为直接可执行的代码在处理器上执行。'
- en: '**GPU Support**: It is directly related to performance. GPU support is transparently
    controlled by some packages such as `TensorFlow.jl` and `MXNet.jl`.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU 支持**：这直接与性能相关。GPU 支持由一些包（如 `TensorFlow.jl` 和 `MXNet.jl`）透明地控制。'
- en: '**Distributed and Parallel Computing Support**: Julia supports parallel and
    distributed computing transparently using many topologies. And there is also support
    for coroutines, like in Go programming language, which are helper functions that
    work in parallel on the Multicore architecture. Extensive support for threads
    and synchronization is primarily designed to maximize performance and reduce the
    risk of race conditions.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式和并行计算支持**：Julia 透明地支持使用多种拓扑的并行和分布式计算。同时还支持协程，就像 Go 编程语言中的协程一样，这些是并行工作在多核架构上的辅助函数。对线程和同步的广泛支持主要是为了最大化性能并减少竞争条件的风险。'
- en: '**Rich data science and visualization libraries**: Julia community understands
    that it was conceived as a go-to language for data scientists and statisticians.
    Therefore, high-performance libraries focusing on data science and analytics are
    always in development.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**丰富的数据科学和可视化库**：Julia 社区理解到它被设想为数据科学家和统计学家的首选语言。因此，专注于数据科学和分析的高性能库一直在开发中。'
- en: '**Teamwork (with other languages/frameworks)**: Julia plays really really well
    with other established languages and frameworks for data science and machine learning.
    Using `PyCall` or `RCall` one can use native Python or R code inside a Julia script.
    The `Plots` package works with various backend including `Matplotlib` and `Plotly`.
    Popular machine learning libraries like `Scikit-learn` or `TensorFlow` already
    have Julia equivalent or wrappers.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与其他语言/框架的协作**：Julia 与数据科学和机器学习的其他成熟语言和框架配合得非常好。使用 `PyCall` 或 `RCall`，可以在
    Julia 脚本中使用原生 Python 或 R 代码。`Plots` 包与各种后端（包括 `Matplotlib` 和 `Plotly`）兼容。流行的机器学习库，如 `Scikit-learn` 或 `TensorFlow`，已经有
    Julia 的等效实现或封装。'
- en: Julia is an excellent choice for data science and machine learning work, for
    much of the same reason, that it is a great choice for fast numerical computing.
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Julia 是数据科学和机器学习工作的一个绝佳选择，原因之一是它也是快速数值计算的一个很好的选择。
- en: Some benchmarking with Python scripting
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一些 Python 脚本的基准测试
- en: 'There is a lot of controversy with regard to the question: “**Is Julia faster
    than Python?**”'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于“**Julia 比 Python 快吗？**”这个问题存在很多争议。
- en: Like almost anything else in life, the answer is: ***It depends.***
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像生活中的几乎所有事情一样，答案是：***这要看情况。***
- en: The official Julia language portal has some data about it, although the benchmark
    tests were done with respect to various languages other than Python.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Julia 语言门户网站提供了一些关于这方面的数据，尽管基准测试是相对于除 Python 之外的多种语言进行的。
- en: '[**The Julia Language**](https://julialang.org/benchmarks/)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Julia 语言**](https://julialang.org/benchmarks/)'
- en: In fact, the question almost always assumes that one is talking about the comparison
    between Julia and some kind of optimized/vectorized Python code (like used by
    Numpy functions). Otherwise, native Julia is almost always faster than Python
    because of compiled code execution, and [native Python is way slower than Numpy-type
    execution](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这个问题几乎总是假设我们在讨论 Julia 和某种优化/矢量化的 Python 代码（例如 Numpy 函数）的比较。否则，原生 Julia 通常比
    Python 快，因为它是编译代码执行的，且 [原生 Python 比 Numpy 类型的执行慢得多](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f)。
- en: Numpy is seriously fast. It is a library with super-optimized functions (many
    of them pre-compiled), with a dedicated focus of giving Python users (particularly
    useful for data scientists and ML engineers) near-C speed. Simple Numpy functions
    like sum or standard deviation [can match or beat equivalent Julia implementations
    closely (particularly for large input array size](https://github.com/kbarbary/website/blob/master/posts/julia-vs-numpy-arrays.rst)).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy 非常快速。它是一个具有超级优化函数的库（其中许多函数是预编译的），专注于为 Python 用户（特别是数据科学家和机器学习工程师）提供接近
    C 语言的速度。像 sum 或标准差这样的简单 Numpy 函数 [可以接近或超越等效的 Julia 实现（特别是对于大型输入数组](https://github.com/kbarbary/website/blob/master/posts/julia-vs-numpy-arrays.rst)）。
- en: However, to take full advantage of Numpy functions, you have to think in terms
    of vectorizing your code. And it is not easy at all to write complex logic in
    a program in the form vectorized code all the time.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为了充分利用 Numpy 函数，你必须以向量化的方式来思考你的代码。而且将复杂逻辑编写成向量化代码的形式并不是一件容易的事。
- en: Therefore, the speed comparison with Julia should be done for situations where
    somewhat complex logic is applied to an array for some kind of processing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，与 Julia 的速度比较应该是在对数组进行某种复杂逻辑处理的情况下进行。
- en: In this article, we will show a couple of such examples to illustrate the point.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们将展示几个这样的例子来说明这一点。
- en: However, to take full advantage of Numpy functions, you have to think in terms
    of vectorizing your code
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不过，为了充分利用 Numpy 函数，你必须以向量化的方式来思考你的代码。
- en: Julia for-loop beats Python for-loop handsomely
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Julia 的 for 循环远远胜过 Python 的 for 循环
- en: Let’s compute the sum of a million random integers to test this out.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们计算一百万个随机整数的总和来测试一下。
- en: Julia code is below. The function takes a little over **1 millisecond.**
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Julia 代码如下。这个函数的运行时间略超过**1 毫秒**。
- en: '![](../Images/f00f6dcec5f39578a8e4d64e816ea9c5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f00f6dcec5f39578a8e4d64e816ea9c5.png)'
- en: Python code is below. We kept the same functional nature of the code (Julia
    is a functional language) to keep the comparison fair and easy to verify. The
    for-loop takes **over 200 milliseconds**!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Python 代码如下。我们保持了代码的相同功能性（Julia 是一种函数式语言），以保持比较的公平性和易于验证。for 循环花费了**超过 200 毫秒**！
- en: '![](../Images/892c5d3f6b017da7b0182bd6a7a05834.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/892c5d3f6b017da7b0182bd6a7a05834.png)'
- en: But how does a Julia array compare to Numpy array?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但是，Julia 数组与 Numpy 数组相比如何呢？
- en: In the code above, we created an array variable. This is the most useful data
    structure in Julia for data science as it can be directly used for statistical
    computation or linear algebra operations, right out of the box.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了一个数组变量。这是 Julia 中数据科学最有用的数据结构，因为它可以直接用于统计计算或线性代数运算，一应俱全。
- en: No need for a separate library or anything. Julia arrays are order-of-magnitude
    faster than Python lists.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 不需要额外的库或其他东西。Julia 数组比 Python 列表快一个数量级。
- en: But, Numpy arrays are fast and let’s benchmark the same summing operation.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，Numpy 数组速度很快，我们来基准测试一下相同的求和操作。
- en: Julia code below using the `sum()` function on the array. It takes ~**451 msec** (faster
    than the for-loop approach but only half the time).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用 `sum()` 函数对数组进行求和的 Julia 代码。它花费了约**451 毫秒**（比 for 循环方法快，但时间只有一半）。
- en: '![](../Images/5cf9fb542ccb1d3cb22357d95d349654.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/5cf9fb542ccb1d3cb22357d95d349654.png)'
- en: And here is Numpy execution,
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Numpy 执行的情况，
- en: '![](../Images/d0d136a018840ab08c222a0606783be8.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d0d136a018840ab08c222a0606783be8.png)'
- en: Wow! **353 msec** which beats the Julia speed and almost 628 times faster than
    naive Python for-loop code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！**353 毫秒**，这比 Julia 的速度还快，几乎比朴素的 Python for-loop 代码快 628 倍。
- en: So, is the verdict settled in favor of Numpy array?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，裁决结果是否倾向于 Numpy 数组？
- en: Not so fast. What if we wanted to sum up only the odd numbers in the array?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 别急。如果我们只想对数组中的奇数进行求和呢？
- en: No need for a separate library. Julia arrays are order-of-magnitude faster than
    Python lists.
  id: totrans-54
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 不需要额外的库。Julia 数组比 Python 列表快一个数量级。
- en: Here comes the logic
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这里是逻辑
- en: For Julia, the code change will be fairly straightforward. We will just use
    the for-loop, check if an element of the array is divisible by 2, and if not (odd
    number), then add it to the running sum. As pedantic as one can get!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Julia，代码的改动将非常直接。我们只需使用 for 循环，检查数组的元素是否能被 2 整除，如果不能（奇数），则将其添加到运行总和中。尽可能细致！
- en: '![](../Images/120bec7547204a263b62e8657dd52363.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/120bec7547204a263b62e8657dd52363.png)'
- en: So, that ran in **close to 4 milliseconds**. Certainly slower than just the
    blind sum (using the for loop) but not too much (the for-loop plain sum too ~1.1
    milliseconds).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这个运行时间**接近 4 毫秒**。确实比盲目求和（使用 for 循环）要慢，但也不算太多（for 循环的普通求和大约 1.1 毫秒）。
- en: Now, we certainly cannot compete with this speed with a Python for-loop! We
    know how that will turn out, don’t we? So, we have to use a Numpy vectorized code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们确实无法与 Python for-loop 的速度竞争！我们知道结果会如何，对吧？所以，我们必须使用 Numpy 向量化代码。
- en: But how do we check for odd numbers and only then sum them up in case of a Numpy
    array? Fortunately, we have the `np.where()` method.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，我们如何在 Numpy 数组中检查奇数并仅对其求和呢？幸运的是，我们有 `np.where()` 方法。
- en: Here is the Python code. Not that straightforward (unless you know how to use
    the `np.where` (correctly), is it?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 代码。不太简单（除非你知道如何正确使用 `np.where`），对吧？
- en: '![](../Images/0b980fcdff9cddf459accbf33b0a8d7e.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b980fcdff9cddf459accbf33b0a8d7e.png)'
- en: But look at the speed. Even with a single-line of vectorized code using Numpy
    method, that took **16.7 milliseconds** on average.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 但看看速度。即使使用Numpy方法的单行矢量化代码，平均也需要**16.7毫秒**。
- en: Julia code was simpler and ran faster!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Julia代码更简单，运行更快！
- en: Another slightly complicated operation
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另一个稍微复杂的操作
- en: 'Let’s say we have three arrays (say ***W***, ***X***, and ***B***) with random
    floating-point numbers ranging from -2 to 2 and we want to compute a special quantity:
    product of two of these arrays, added to the third i.e. ***A***.***X***+***B*** but
    the quantity will be added to the final sum only if the element-wise linear combination
    exceeds zero***.***'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有三个数组（假设为***W***、***X***和***B***），它们包含从-2到2的随机浮点数，我们想计算一个特殊的量：这三个数组中两个的乘积加到第三个数组上，即***A***.***X***
    + ***B***，但只有当逐元素线性组合超过零时，这个量才会加到最终和中***。***
- en: Does this logic look familiar to you? It is a variation on any densely connected
    neural network (or even a single perceptron), where the linear combination of
    weight, feature, and bias vector has to exceed a certain threshold to propagate
    to the next layer.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个逻辑看起来熟悉吗？这是任何密集连接的神经网络（甚至是单个感知器）的变体，其中权重、特征和偏差向量的线性组合必须超过某个阈值才能传播到下一层。
- en: So, here is the Julia code. Again, simple and sweet. Took ~**1.8 milliseconds**.
    Note, it uses a special function called `muladd()` which multiplies two numbers
    and adds to a third.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是Julia代码。依然简单而甜美。运行时间约为**1.8毫秒**。注意，它使用了一个特殊函数`muladd()`，这个函数将两个数字相乘并加到第三个数字上。
- en: '![](../Images/87526a916a991ca9c76654020058bb2e.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/87526a916a991ca9c76654020058bb2e.png)'
- en: We tried the Python using a similar code (using for-loop), and the result was
    terrible, as expected! It took **more than a second** on average.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尝试了使用类似代码（使用for循环）的Python，结果如预期般糟糕！平均需要**超过一秒**。
- en: '![](../Images/db66467a4bdbd3e65d459946fc811de6.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/db66467a4bdbd3e65d459946fc811de6.png)'
- en: Again, we tried to be creative and use a Numpy vectorized code and the result
    was much better than the for-loop case, but worse than the Julia case ~ **14.9
    milliseconds**.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次尝试用Numpy矢量化代码，结果比for循环情况好很多，但比Julia情况还差，大约**14.9毫秒**。
- en: '![](../Images/b615c50f8439981ee85950423df97973.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b615c50f8439981ee85950423df97973.png)'
- en: So, how does it look like?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么，它是怎样的呢？
- en: At this point, the trend is becoming clear. For numerical operations, where
    complex logic needs to be checked before some mathematical operation can happen,
    Julia beats Python (even Numpy) hands down because **we can just write the logic
    in the simplest possible code in Julia and forget it**. It will still run at breakneck
    speed, thanks to the [just-in-time (JIT) compiler](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html) and
    internal type-related optimizations (Julia has an [extremely elaborate type system](https://en.wikibooks.org/wiki/Introducing_Julia/Types) to
    make programs runs fast with correct data types for each variable and optimizing
    code and memory correspondingly).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，趋势变得清晰。对于需要在数学操作之前检查复杂逻辑的数值操作，Julia完胜Python（甚至Numpy），因为**我们可以在Julia中用最简单的代码编写逻辑并忘记它**。得益于[即时编译器（JIT）](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html)和内部类型相关的优化（Julia拥有[极其复杂的类型系统](https://en.wikibooks.org/wiki/Introducing_Julia/Types)，使得程序以正确的数据类型快速运行，并相应地优化代码和内存）。
- en: Writing the same code using native Python data structures and for-loop is hopelessly
    slow. Even with a Numpy vectorized code, the speed is slower than that of Julia
    as the complexity grows.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原生Python数据结构和for循环编写相同的代码是毫无希望的慢。即使是Numpy矢量化代码，随着复杂性增加，其速度也比Julia慢。
- en: Numpy is great for the simple methods that an array already comes with such
    as `sum()` or `mean()` or `std()`, but using logic along with them is not always
    straightforward and it slows the operation down considerably.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy对于数组本身已经提供的简单方法，如`sum()`、`mean()`或`std()`，非常出色，但与逻辑结合时并不总是简单，这会显著降低操作速度。
- en: '**In Julia, there is not much headache of thinking hard to vectorize your code**.
    Even an apparently stupid-looking code, with a plain vanilla for-loop and element-by-element
    logic checking, runs amazingly fast!'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Julia中，你不必费脑筋去矢量化你的代码**。即使是看似笨拙的代码，使用普通的for循环和逐元素逻辑检查，也能运行得非常快！'
- en: For numerical operations, where complex logic needs to be checked before some
    mathematical operation can happen, Julia beats Python (even Numpy) hands down
    because we can just write the logic in the simplest possible code in Julia and
    forget it.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 对于数值运算，当复杂的逻辑需要在某些数学操作发生之前进行检查时，Julia 完胜 Python（甚至 Numpy），因为我们可以在 Julia 中用最简单的代码编写逻辑，然后就可以忘记它。
- en: Summary
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we showed some comparative benchmark of numerical computation
    between Julia and Python — both native Python code and optimized Numpy functions.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们展示了 Julia 和 Python 之间数值计算的比较基准——包括原生 Python 代码和优化的 Numpy 函数。
- en: Although in the case of straightforward functions, Numpy is on par with Julia
    in terms of speed, Julia scores higher when complex logic is introduced in the
    computing problem. Julia code is inherently simple to write without the need to
    think hard about vectorizing the functions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在简单函数的情况下，Numpy 在速度上与 Julia 相当，但在引入复杂逻辑时，Julia 的表现更好。Julia 代码本身简单，无需考虑函数的向量化。
- en: With many ongoing developments in the data science and machine learning support
    systems, Julia is one of the most exciting new languages to look forward to in
    the coming days. This is one tool, that budding data scientists should add to
    their repertoire.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 随着数据科学和机器学习支持系统的不断发展，Julia 是未来几天最令人兴奋的新语言之一。这是新兴数据科学家应加入的一个工具。
- en: I am building a Github repo with Julia fundamentals and data science examples. [**Check
    it out here**](https://github.com/tirthajyoti/Julia-data-science).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在构建一个包含 Julia 基础知识和数据科学示例的 Github 仓库。[**查看这里**](https://github.com/tirthajyoti/Julia-data-science)。
- en: '**Additional reading**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**附加阅读**'
- en: '[https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1)'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1](https://docs.julialang.org/en/v1/manual/performance-tips/#man-performance-tips-1)'
- en: '[https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html)'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html](https://agilescientific.com/blog/2014/9/4/julia-in-a-nutshell.html)'
- en: '[https://en.wikibooks.org/wiki/Introducing_Julia/Types](https://en.wikibooks.org/wiki/Introducing_Julia/Types)'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://en.wikibooks.org/wiki/Introducing_Julia/Types](https://en.wikibooks.org/wiki/Introducing_Julia/Types)'
- en: '[https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df](https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df)'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df](https://dev.to/epogrebnyak/julialang-and-surprises---what-im-learning-with-a-new-programming-language--21df)'
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com).
    Also, you can check the author’s [**GitHub**](https://github.com/tirthajyoti?tab=repositories)** repositories **for
    code, ideas, and resources in machine learning and data science. If you are, like
    me, passionate about AI/machine learning/data science, please feel free to [add
    me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/) or [follow
    me on Twitter](https://twitter.com/tirthajyotiS).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题或想法，请通过 [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com)
    联系作者。同时，你可以查看作者的 [**GitHub**](https://github.com/tirthajyoti?tab=repositories)**
    仓库**，了解机器学习和数据科学方面的代码、想法和资源。如果你和我一样，对 AI/机器学习/数据科学充满热情，请随时 [在 LinkedIn 上添加我](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)
    或 [在 Twitter 上关注我](https://twitter.com/tirthajyotiS)。
- en: '**Bio: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    is Sr Principal Engineer at ON Semiconductor.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    是 ON Semiconductor 的高级首席工程师。'
- en: '[Original](https://towardsdatascience.com/complex-logic-at-breakneck-speed-try-julia-for-data-science-bcd4dfa23541).
    Reposted with permission.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/complex-logic-at-breakneck-speed-try-julia-for-data-science-bcd4dfa23541)。已获转载许可。'
- en: '**Related:**'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关:**'
- en: '[The Guerrilla Guide to Machine Learning with Julia](/2017/07/guerrilla-guide-machine-learning-julia.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Julia 机器学习的游击指南](/2017/07/guerrilla-guide-machine-learning-julia.html)'
- en: '[The Whole Data Science World in Your Hands](/2019/06/whole-data-science-world.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握数据科学世界](/2019/06/whole-data-science-world.html)'
- en: '[Introducing Gen: MIT’s New Language That Wants to be the TensorFlow of Programmable
    Inference](/2019/07/introducing-gen-language-progammable-inference.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[介绍 Gen: MIT 的新语言，旨在成为可编程推理的 TensorFlow](/2019/07/introducing-gen-language-progammable-inference.html)'
- en: More On This Topic
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[5 Free Julia Books For Data Science](https://www.kdnuggets.com/2023/06/5-free-julia-books-data-science.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5本免费Julia数据科学书籍](https://www.kdnuggets.com/2023/06/5-free-julia-books-data-science.html)'
- en: '[3 Julia Packages for Data Visualization](https://www.kdnuggets.com/2023/02/3-julia-packages-data-visualization.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[3个用于数据可视化的Julia包](https://www.kdnuggets.com/2023/02/3-julia-packages-data-visualization.html)'
- en: '[Learn Data Analysis with Julia](https://www.kdnuggets.com/learn-data-analysis-with-julia)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Julia学习数据分析](https://www.kdnuggets.com/learn-data-analysis-with-julia)'
- en: '[Should I Learn Julia?](https://www.kdnuggets.com/2022/11/learn-julia.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[我应该学习Julia吗？](https://www.kdnuggets.com/2022/11/learn-julia.html)'
- en: '[How to Setup Julia on Jupyter Notebook](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在Jupyter Notebook中设置Julia](https://www.kdnuggets.com/2022/11/setup-julia-jupyter-notebook.html)'
- en: '[10 Simple Things to Try Before Neural Networks](https://www.kdnuggets.com/2021/12/10-simple-things-try-neural-networks.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在神经网络之前尝试的10个简单方法](https://www.kdnuggets.com/2021/12/10-simple-things-try-neural-networks.html)'
