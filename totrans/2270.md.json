["```py\nfrom sklearn import datasets\nwine_data = datasets.load_wine(as_frame=True)\ndf = wine_data.data\n```", "```py\nprint(df.shape)\nOutput >> (178, 13)\n```", "```py\nprint(df.info())\nOutput >>\n <class>RangeIndex: 178 entries, 0 to 177\nData columns (total 13 columns):\n #   Column                        Non-Null Count  Dtype  \n---  ------                        --------------  -----  \n 0   alcohol                       178 non-null    float64\n 1   malic_acid                    178 non-null    float64\n 2   ash                           178 non-null    float64\n 3   alcalinity_of_ash             178 non-null    float64\n 4   magnesium                     178 non-null    float64\n 5   total_phenols                 178 non-null    float64\n 6   flavanoids                    178 non-null    float64\n 7   nonflavanoid_phenols          178 non-null    float64\n 8   proanthocyanins               178 non-null    float64\n 9   color_intensity               178 non-null    float64\n 10  hue                           178 non-null    float64\n 11  od280/od315_of_diluted_wines  178 non-null    float64\n 12  proline                       178 non-null    float64\ndtypes: float64(13)\nmemory usage: 18.2 KB\nNone</class>\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nstd_scaler = StandardScaler()\nscaled_df = std_scaler.fit_transform(df)\n```", "```py\nfrom sklearn.decomposition import PCA\npca = PCA(n_components=3)\npca.fit_transform(scaled_df)\n```", "```py\nprint(pca.components_)\n```", "```py\nOutput >>\n[[ 0.1443294  -0.24518758 -0.00205106 -0.23932041  0.14199204  0.39466085\n   0.4229343  -0.2985331   0.31342949 -0.0886167   0.29671456  0.37616741\n   0.28675223]\n [-0.48365155 -0.22493093 -0.31606881  0.0105905  -0.299634   -0.06503951\n   0.00335981 -0.02877949 -0.03930172 -0.52999567  0.27923515  0.16449619\n  -0.36490283]\n [-0.20738262  0.08901289  0.6262239   0.61208035  0.13075693  0.14617896\n   0.1506819   0.17036816  0.14945431 -0.13730621  0.08522192  0.16600459\n  -0.12674592]]\n```", "```py\nprint(sum(pca.explained_variance_ratio_))\n```", "```py\nOutput >> 0.6652996889318527\n```", "```py\nimport numpy as np\nnums = np.arange(14)\n```", "```py\nvar_ratio = []\nfor num in nums:\n  pca = PCA(n_components=num)\n  pca.fit(scaled_df)\n  var_ratio.append(np.sum(pca.explained_variance_ratio_))\n```", "```py\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(4,2),dpi=150)\nplt.grid()\nplt.plot(nums,var_ratio,marker='o')\nplt.xlabel('n_components')\nplt.ylabel('Explained variance ratio')\nplt.title('n_components vs. Explained Variance Ratio')\n```"]