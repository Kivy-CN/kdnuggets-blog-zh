["```py\nimport pandas as pd\nimport urllib\nimport zipfile\n\n# URL of the dataset\nurl = \"https://archive.ics.uci.edu/ml/machine-learning-databases/00222/bank.zip\"\n\n# Fetch and extract the dataset\nurllib.request.urlretrieve(url, \"bank.zip\")\n\nwith zipfile.ZipFile(\"bank.zip\", \"r\") as zip_ref:\n    zip_ref.extractall()\n\n# Load the dataset into a pandas DataFrame\ndata = pd.read_csv(\"bank-full.csv\", delimiter=\";\",skipinitialspace=True)\n```", "```py\n# Display the first few rows of the dataset\nprint(data.head())\n```", "```py\n# Get the dimensions of the dataset (rows, columns)\nprint(data.shape)\n```", "```py\nOutput >>> (45211, 17)\n```", "```py\n# Get statistical summary of numerical columns\nprint(data.describe())\n```", "```py\n# Check data types of each column\nprint(data.dtypes)\n```", "```py\nOutput >>>\n\nage           int64\njob          object\nmarital      object\neducation    object\ndefault      object\nbalance       int64\nhousing      object\nloan         object\ncontact      object\nday           int64\nmonth        object\nduration      int64\ncampaign      int64\npdays         int64\nprevious      int64\npoutcome     object\ny            object\ndtype: object\n```", "```py\n# Check for missing values in each column\nmissing_values = data.isnull().sum()\nprint(missing_values)\n```", "```py\nOutput >>>\n\nage          0\njob          0\nmarital      0\neducation    0\ndefault      0\nbalance      0\nhousing      0\nloan         0\ncontact      0\nday          0\nmonth        0\nduration     0\ncampaign     0\npdays        0\nprevious     0\npoutcome     0\ny            0\ndtype: int64\n```", "```py\n# Count the number of categorical variables\ncategorical_columns = data.select_dtypes(include=['object']).columns\nprint(categorical_columns)\nnum_categorical_variables = len(categorical_columns)\n\n# Display the count\nprint(\"Number of categorical variables:\", num_categorical_variables)\n```", "```py\nOutput >>>\nIndex(['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact',\n       'month', 'poutcome', 'y'],\n      dtype='object')\nNumber of categorical variables: 10\n```", "```py\n# Get the different values and their counts for each categorical column\ncategorical_columns = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome']\nfor column in categorical_columns:\n    value_counts = data[column].value_counts()\n    print(f\"Column: {column}\")\n    print(value_counts,\"\\n\")\n```", "```py\nOutput >>>\n\nColumn: job\nblue-collar      9732\nmanagement       9458\ntechnician       7597\nadmin.           5171\nservices         4154\nretired          2264\nself-employed    1579\nentrepreneur     1487\nunemployed       1303\nhousemaid        1240\nstudent           938\nunknown           288\nName: job, dtype: int64 \n\n...\n...\n...\nColumn: poutcome\nunknown    36959\nfailure     4901\nother       1840\nsuccess     1511\nName: poutcome, dtype: int64 \n```", "```py\nimport matplotlib.pyplot as plt\n\n# Get the different values and their counts for each categorical column\ncategorical_columns = ['job', 'marital', 'education', 'default', 'housing', 'loan', 'contact', 'month', 'poutcome']\n\n# Set up the subplot grid\nfig, axes = plt.subplots(3, 3, figsize=(10,8))\n\n# Iterate over each categorical column and plot the value counts\nfor i, column in enumerate(categorical_columns):\n    row = i // 3\n    col = i % 3\n    value_counts = data[column].value_counts()\n    ax = axes[row, col]\n    value_counts.plot(kind='bar', ax=ax)\n    ax.set_xlabel(column)\n    ax.set_ylabel('Count')\n    ax.set_title(f'{column.title()} Value Counts')\n\n# Adjust spacing between subplots\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```", "```py\n# Select the categorical columns (excluding education and poutcome)\ncategorical_columns = ['job', 'marital', 'default', 'housing', 'loan', 'contact']\n\n# Perform one-hot encoding\nencoded_data = pd.get_dummies(data, columns=categorical_columns)\n```", "```py\n# Select the newly added columns\nnew_columns = encoded_data.columns.difference(data.columns)\n\n# Print the head of the newly added columns\nprint(encoded_data[new_columns].head())\n```", "```py\n# Define the custom mapping dictionary\ncustom_mapping = {\n    'category1': 'value1',\n    'category2': 'value2',\n    'category3': 'value3',\n    # Add more categories and corresponding values as needed\n}\n\n# Specify the categorical column\ncategorical_column = 'column_name'  # Replace 'column_name' with the actual column name\n\n# Perform the mapping using the custom mapping dictionary\ndata[categorical_column] = data[categorical_column].map(custom_mapping)\n```", "```py\n# Define the mapping dictionary for months\nmonth_mapping = {\n    'jan': 1,\n    'feb': 2,\n    'mar': 3,\n    'apr': 4,\n    'may': 5,\n    'jun': 6,\n    'jul': 7,\n    'aug': 8,\n    'sep': 9,\n    'oct': 10,\n    'nov': 11,\n    'dec': 12\n}\n\n# Map the values in the month column\nencoded_data['month'] = encoded_data['month'].map(month_mapping)\n```", "```py\n# Define the custom mapping for poutcome and education\npoutcome_mapping = {\n    'unknown': 0,\n    'failure': 1,\n    'other': 2,\n    'success': 3\n}\n\neducation_mapping = {\n    'unknown': 0,\n    'primary': 1,\n    'secondary': 2,\n    'tertiary': 3\n}\n\n# Perform ordinal encoding using pandas map\nencoded_data['poutcome'] = encoded_data['poutcome'].map(poutcome_mapping)\nencoded_data['education'] = encoded_data['education'].map(education_mapping)\n\n# Select the newly added columns\nnew_columns = ['month','poutcome', 'education']\n\n# Print the head of the newly added columns\nprint(encoded_data[new_columns].head(10))\n```", "```py\nencoded_data['y'] = encoded_data['y'].replace({'no': 0, 'yes': 1})\nprint(encoded_data['y'])\n```", "```py\nOutput >>>\n\n0        0\n1        0\n2        0\n3        0\n4        0\n        ..\n45206    1\n45207    1\n45208    1\n45209    0\n45210    0\nName: y, Length: 45211, dtype: int64\n```", "```py\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Plot the distribution of output labels\nsns.countplot(data=data, x='y')\nplt.xlabel('Output Label')\nplt.ylabel('Count')\nplt.title('Output Label Distribution')\nplt.show()\n```", "```py\nimport pandas as pd\n\n# Load the dataset into a DataFrame\ndata = pd.read_csv('data.csv')\n\n# Step 1: Basic Info\nprint(data.info())\n\n# Step 2: Missing Values\nmissing_values = data.isnull().sum()\nprint(missing_values)\n\n# Step 3: Handle Missing Values\n# Identify columns with missing values\ncolumns_with_missing_values = missing_values[missing_values > 0].index\n\n# Impute missing values using fillna() or other suitable method\ndata[columns_with_missing_values] = data[columns_with_missing_values].fillna(data[columns_with_missing_values].mean())\n\n# Step 4: Get Categorical Columns\ncategorical_columns = data.select_dtypes(include=['object']).columns\n\n# Step 5: Encode Categorical Columns\n# Perform ordinal encoding or one-hot encoding using pandas' get_dummies() function\nencoded_data = pd.get_dummies(data, columns=categorical_columns)\n\n# Print the encoded data\nprint(encoded_data.head())\n```"]