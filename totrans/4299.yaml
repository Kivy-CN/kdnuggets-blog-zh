- en: How to build a DAG Factory on Airflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/03/build-dag-factory-airflow.html](https://www.kdnuggets.com/2021/03/build-dag-factory-airflow.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Axel Furlan](https://www.linkedin.com/in/axelfurlan/), Data Engineer**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/a9f359d219ec76580f36b27ce2a8d4ae.png)'
  prefs: []
  type: TYPE_IMG
- en: Photo by [Chris Ried](https://unsplash.com/@cdr6934?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Why a DAG Factory?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s look at a pretty simple DAG with 2 tasks…
  prefs: []
  type: TYPE_NORMAL
- en: Isn’t it weird the amount of boilerplate code necessary in order to execute
    2 simple python scripts on Airflow? No matter how many DAGs you write, most certainly
    you will find yourself writing almost all the same variables with the slightest
    of changes in a lot of different DAGs.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that, in coding, it’s generally better to **write a piece of code that
    you can later call, instead of writing the same piece of code every time you need
    that procedure**. This is called being [**DRY**](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).
  prefs: []
  type: TYPE_NORMAL
- en: If many of your DAGs share similar values, e.g the *email address*, the *start
    date*, the *schedule interval*, the number of *retries*, and so-on, it’s probably
    better to have a piece of code that fulfills those values for you. This is what
    we try to achieve with a Factory class.
  prefs: []
  type: TYPE_NORMAL
- en: Using a DAG Factory on Airflow, we can **reduce the number of lines necessary
    to create a DAG by half**.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at the following examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here, we want a simple DAG that prints today’s date and then prints “hi”.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how it looks on Airflow:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DAG](../Images/28ce7700d8cfbc5cdf7afda622a439ab.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice how much we reduced clutter. We haven’t specified what operator we use,
    what are the tasks’ ids, the schedule interval, who created the DAG nor when was
    it created.
  prefs: []
  type: TYPE_NORMAL
- en: We can also see that we specified tasks and dependencies using a dictionary
    and that ultimately translates into the correct tasks dependencies ????
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at a slightly more complex example:'
  prefs: []
  type: TYPE_NORMAL
- en: In this DAG, I specified 2 arguments that I wanted to override from the defaults.
    Those are the DAG’s owner and its number of retries. I also specified in the `get_airflow_dag()` method
    that I wanted for the schedule to be daily.
  prefs: []
  type: TYPE_NORMAL
- en: This DAG has 3 tasks. Both `say_bye()` and `print_date()` depend on `say_hi()`.
    Let’s see how this looks like on Airflow.
  prefs: []
  type: TYPE_NORMAL
- en: '![DAG](../Images/9a353147bdd205ed61664413027c2749.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let’s look at how we can build the DAG Factory ????
  prefs: []
  type: TYPE_NORMAL
- en: How to code it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To be honest, it is pretty simple. We first create a class that will have all
    methods that we need to run in order to create a DAG with its tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Below is the full code for the DAG Factory.
  prefs: []
  type: TYPE_NORMAL
- en: The main method that we’re going to call in order to get a fully usable DAG
    is `get_airflow_dag()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This method will receive 2 mandatory parameters: the DAG’s name and the tasks
    that it should run. The rest of the parameters are optional since we can set a
    default in the function’s implementation. When implementing, feel free to make
    any of those optional parameters mandatory, depending on your use case, it may
    be useful to make the *cron* (`schedule_interval`) a mandatory parameter or even
    the DAG’s owner, for instance.'
  prefs: []
  type: TYPE_NORMAL
- en: The `default_args` parameter is going to be a dictionary that will hold any
    keys and values that you may want to override. If not specified, the default default_args
    are going to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the defaults are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The other 3 parameters are the main ones used to describe a DAG. There are more
    options so feel free to specify more.
  prefs: []
  type: TYPE_NORMAL
- en: '`get_airflow_dag()` will run `create_dag()` in order to create the DAG object
    and return it. `add_tasks_to_dag()` is a little bit more complicated since we
    want to make it easy for the user to specify a way to create dependencies on tasks
    without having to write the *Operators*.'
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we always use the *PythonOperator* for our tasks, so it made sense
    for us to assume that as the norm.
  prefs: []
  type: TYPE_NORMAL
- en: The implementation aims to facilitate the data engineer’s job, so we avoid setting
    extra things like the task’s name, we just assume it’s the same as the function’s
    name — so we use a little bit of *reflection* to figure it out.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The function first creates an auxiliary dictionary to hold a key value pair
    of task name: task object. This is done to only have one set of tasks objects
    and to use that later to set dependencies. Then for each key in the tasks dictionary
    provided originally, the dependencies get set making use of the auxiliary dictionary.'
  prefs: []
  type: TYPE_NORMAL
- en: After this is done, the DAG object is ready to be returned and used by the team
    ????.
  prefs: []
  type: TYPE_NORMAL
- en: Gotcha!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There’s a little trick in the file in order for Airflow to recognize it’s a
    proper DAG that we’re returning.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Airflow starts, the so-called DagBag process will parse all the files
    looking for DAGs. The way the current implementation works is something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The DagBag spawns different processes that look through the files of the dag
    folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The function called `process_file` [here](https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/dagbag.html) runs
    for each file to figure out if there’s a DAG there.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code runs `might_contain_dag` which returns a True depending if the file
    contains both “dag” and “airflow” in their code. Implementation [here](https://github.com/apache/airflow/blob/c61f3d45b4a1799e92ead1532d36f232ebc4686e/airflow/utils/file.py#L198).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That’s why the function `get_airflow_dag` is called like that, in order to have
    both keywords in the file that will result in the file being correctly parsed.
  prefs: []
  type: TYPE_NORMAL
- en: This was a hard thing to find, I spent many hours trying to figure out why my
    DAG factory was not working. There’s not much documentation about what to take
    into account in order to create DAGs in a non-traditional way, so this is one
    of the big gotchas that you will have to take into account when doing something
    like this.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This simple article aimed to explain how to make a Data Engineer’s life easier
    by utilizing the [Factory pattern](https://www.tutorialspoint.com/design_pattern/factory_pattern.htm) on
    Airflow.
  prefs: []
  type: TYPE_NORMAL
- en: Hope you liked it! Feel free to click on my profile to see other useful Airflow
    and Data Engineering articles! ????
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Axel Furlan](https://www.linkedin.com/in/axelfurlan/)** is a Data Engineer
    from Argentina ???????? and a software engineering student. Axel started as a
    Data Scientist and then combined both software eng and data and fell in love with
    how versatile the role can be. He is writing to make other DEs lives easier.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/how-to-build-a-dag-factory-on-airflow-9a19ab84084c).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Data Science Learning Roadmap for 2021](/2021/02/data-science-learning-roadmap-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[9 Skills You Need to Become a Data Engineer](/2021/03/9-skills-become-data-engineer.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Faster machine learning on larger graphs with NumPy and Pandas](/2020/05/faster-machine-learning-larger-graphs-numpy-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Airflow Alternatives for Data Orchestration](https://www.kdnuggets.com/5-airflow-alternatives-for-data-orchestration)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Machine Learning Web App in 5 Minutes](https://www.kdnuggets.com/2022/03/build-machine-learning-web-app-5-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Build Strong Data Science Portfolio as a Beginner](https://www.kdnuggets.com/2021/10/strong-data-science-portfolio-as-beginner.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Data Science Technologies You Need to Build Your Supply Chain Pipeline](https://www.kdnuggets.com/2022/01/6-data-science-technologies-need-build-supply-chain-pipeline.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build a Web Scraper with Python in 5 Minutes](https://www.kdnuggets.com/2022/02/build-web-scraper-python-5-minutes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Sky''s the Limit: Learn how JetBlue uses Monte Carlo and Snowflake…](https://www.kdnuggets.com/2022/12/monte-carlo-jetblue-snowflake-build-trust-improve-model-accuracy.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
