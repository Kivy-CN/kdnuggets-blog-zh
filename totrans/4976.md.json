["```py\n\nwget http://repo.continuum.io/archive/Anaconda2-4.0.0-Linux-x86_64.sh\nbash Anaconda2-4.0.0-Linux-x86_64.sh -b -p $HOME/anaconda\necho 'export PATH=\"$HOME/anaconda/bin:$PATH\"' >> ~/.bashrc\nbash\n\n```", "```py\n\nconda install -y pip\n\n```", "```py\n\nsudo apt-get install -y make g++ build-essential gfortran libatlas-base-dev liblapacke-dev python-dev python-setuptools libsm6 libxrender1\n\n```", "```py\npip install --upgrade virtualenv\n\n```", "```py\npip install xgboost\n\n```", "```py\n\npip install xgboost==0.4a30\n\n```", "```py\nimport xgboost as xgb\n\n```", "```py\nfrom sklearn import datasets\n\niris = datasets.load_iris()\nX = iris.data\ny = iris.target\n\n```", "```py\nfrom sklearn.cross_validation import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n```", "```py\nimport xgboost as xgb\n\ndtrain = xgb.DMatrix(X_train, label=y_train)\ndtest = xgb.DMatrix(X_test, label=y_test)\n\n```", "```py\nimport xgboost as xgb\nfrom sklearn.datasets import dump_svmlight_file\n\ndump_svmlight_file(X_train, y_train, 'dtrain.svm', zero_based=True)\ndump_svmlight_file(X_test, y_test, 'dtest.svm', zero_based=True)\ndtrain_svm = xgb.DMatrix('dtrain.svm')\ndtest_svm = xgb.DMatrix('dtest.svm')\n\n```", "```py\nparam = {\n    'max_depth': 3,  # the maximum depth of each tree\n    'eta': 0.3,  # the training step for each iteration\n    'silent': 1,  # logging mode - quiet\n    'objective': 'multi:softprob',  # error evaluation for multiclass training\n    'num_class': 3}  # the number of classes that exist in this datset\nnum_round = 20  # the number of training iterations\n\n```", "```py\nbst = xgb.train(param, dtrain, num_round)\n\n```", "```py\nbst.dump_model('dump.raw.txt')\n\n```", "```py\nbooster[0]:\n0:[f2<2.45] yes=1,no=2,missing=1\n    1:leaf=0.426036\n    2:leaf=-0.218845\nbooster[1]:\n0:[f2<2.45] yes=1,no=2,missing=1\n    1:leaf=-0.213018\n    2:[f3<1.75] yes=3,no=4,missing=3\n        3:[f2<4.95] yes=5,no=6,missing=5\n            5:leaf=0.409091\n            6:leaf=-9.75349e-009\n        4:[f2<4.85] yes=7,no=8,missing=7\n            7:leaf=-7.66345e-009\n            8:leaf=-0.210219\n....\n\n```", "```py\npreds = bst.predict(dtest)\n\n```", "```py\n[[ 0.00563804 0.97755206 0.01680986]\n [ 0.98254657 0.01395847 0.00349498]\n [ 0.0036375 0.00615226 0.99021029]\n [ 0.00564738 0.97917044 0.0151822 ]\n [ 0.00540075 0.93640935 0.0581899 ]\n....\n\n```", "```py\nimport numpy as np\nbest_preds = np.asarray([np.argmax(line) for line in preds])\n\n```", "```py\n[1, 0, 2, 1, 1, ...]\n\n```", "```py\nfrom sklearn.metrics import precision_score\n\nprint precision_score(y_test, best_preds, average='macro')\n# >> 1.0\n\n```", "```py\nfrom sklearn.externals import joblib\n\njoblib.dump(bst, 'bst_model.pkl', compress=True)\n# bst = joblib.load('bst_model.pkl') # load it later\n\n```"]