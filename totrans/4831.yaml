- en: Packaging and Distributing Your Python Project to PyPI for Installation Using
    pip
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的 Python 项目打包并分发到 PyPI，以便使用 pip 安装。
- en: 原文：[https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html](https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html](https://www.kdnuggets.com/2018/06/packaging-distributing-python-project-pypi-pip.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/06/packaging-distributing-python-project-pypi-pip.html?page=2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2018/06/packaging-distributing-python-project-pypi-pip.html?page=2#comments)'
- en: '![Image](../Images/e94c180ce0c478ac7d7d309180b0ba0c.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![Image](../Images/e94c180ce0c478ac7d7d309180b0ba0c.png)'
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 简介
- en: You might worked with several languages such as Java, C++, and Python and created
    a number of projects but unfortunately these projects are buried and no one knows
    about. Why not making these projects alive by making them available online? This
    tutorial will explain the steps required to package your Python projects, distribute
    them in distribution formats using steptools, upload them into the Python Package
    Index (PyPI) repository using twine, and finally installation using Python installers
    such as pip and conda.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经使用过 Java、C++ 和 Python 等多种语言，并创建了很多项目，但不幸的是这些项目被埋没了，没有人知道。为什么不通过将这些项目上线来让它们重获生机呢？本教程将解释将
    Python 项目打包、使用 steptools 以分发格式分发它们、使用 twine 上传到 Python 包索引（PyPI）库中的步骤，最后使用 pip
    和 conda 等 Python 安装程序进行安装。
- en: The platform used in this tutorial is Linux Ubuntu 18.04 with Python 3.6.5\.
    But you can still use other platforms such as Windows with little or no difference
    in the commands used.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用的平台是 Linux Ubuntu 18.04 和 Python 3.6.5。但你仍然可以使用其他平台，如 Windows，命令几乎没有差异。
- en: 'This tutorial has the following steps:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程包含以下步骤：
- en: 1\. Creating a Simple Python Project.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 创建一个简单的 Python 项目。
- en: 2. How Python Locates Libraries?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 2. Python 如何定位库？
- en: 3. Manual Installation by Copying Project Files to **site-packages.**
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 通过将项目文件复制到**site-packages**来手动安装。
- en: 4. How Python Installers Locate Libraries?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 4. Python 安装程序如何定位库？
- en: 5. Preparing the Package and its Files (**__init__.py** and **setup.py**).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 5. 准备包及其文件（**__init__.py** 和 **setup.py**）。
- en: 6. Distributing the Package.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 6. 分发包。
- en: 7. Uploading the Distribution Files Online to Test PyPI.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 7. 将分发文件上传到 Test PyPI。
- en: 8. Installing the Distributed Package from Test PyPI.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 8. 安装来自 Test PyPI 的分发包。
- en: 9. Importing and Using the Installed Package.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 9. 导入并使用已安装的包。
- en: 10\. Using PyPI rather than Test PyPI.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 10. 使用 PyPI 而不是 Test PyPI。
- en: 1\. Creating a Simple Python Project
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1. 创建一个简单的 Python 项目
- en: Let us create a very simple project and distribute it. To be able to package
    and distribute any Python project, there must be an associated folder containing
    all of the required files for the project. The folder name will be later the project
    name.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个非常简单的项目并分发它。为了能够打包和分发任何 Python 项目，必须有一个包含项目所需所有文件的关联文件夹。文件夹的名称将来就是项目名称。
- en: 'This project will have just a single level containing a single Python file.
    The project structure is as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目将只有一个包含单个 Python 文件的层级。项目结构如下：
- en: '![](../Images/539bf1e4ea7dd0312fa558c030a59721.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/539bf1e4ea7dd0312fa558c030a59721.png)'
- en: The used project/folder name is **“printmsg”** to reflect its use. That folder
    is saved into the Desktop. The Python file inside it is named **“print_msg_file.py”**.
    The Python file contains a function and a variable. The function is named **“print_msg_func”** which
    will print a message once called. The variable is named “version” which holds
    the version of the project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的项目/文件夹名称是**“printmsg”**以反映其用途。该文件夹保存在桌面上。里面的 Python 文件命名为**“print_msg_file.py”**。这个
    Python 文件包含一个函数和一个变量。函数名为**“print_msg_func”**，它会在被调用时打印一条消息。变量名为“version”，它保存项目的版本。
- en: Here is the implementation inside the **“print_msg_file.py”** file. The **“print_msg_func”**function
    prints a hello message when called. Due to the **if** statement, the file will
    automatically call the function once executed directly as the main program. But
    it will not if that file is imported into another file.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**“print_msg_file.py”**文件中的实现。**“print_msg_func”**函数在调用时会打印一条问候消息。由于**if**语句，该文件将在直接作为主程序执行时自动调用函数。但如果该文件被导入到另一个文件中，则不会调用。
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next is to execute that file to know that everything is running well such as
    Python being installed properly. A Python file is to be executed from either the
    Linux terminal or Windows Command Prompt by issuing the python command followed
    by the location of the file. Figure 1 shows how to run the Python file using both
    Windows and Ubuntu.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是执行该文件，以确保一切正常运行，例如 Python 安装是否正确。可以通过在 Linux 终端或 Windows 命令提示符下发出 python
    命令并跟上文件的位置来执行 Python 文件。图 1 显示了如何使用 Windows 和 Ubuntu 运行 Python 文件。
- en: '**Figure 1**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 1**'
- en: '![](../Images/2e0d8c743dd46d3e1727402850c5c93d.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2e0d8c743dd46d3e1727402850c5c93d.png)'
- en: The CMD/terminal are opened in the **“printmsg”** directory and its contents
    are displayed to ensure the target file **“print_msg_file.py”** is already existing.
    Then the python command is issued to run the file.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CMD/终端在 **“printmsg”** 目录中打开，并显示其内容，以确保目标文件 **“print_msg_file.py”** 已存在。然后发出
    python 命令来运行该文件。
- en: 'After making sure everything is working, it is possible to import that project
    into another Python file in order to be able to call its content. If a file to
    be imported into another, the legacy way for doing this is to create another file
    in the same directory of that file. For example, another Python file named **“second_file.py”** is
    to import the project and call its function as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 确保一切正常后，可以将该项目导入到另一个 Python 文件中，以便能够调用其内容。如果一个文件要导入到另一个文件中，传统的方法是创建一个与要导入文件在同一目录中的新文件。例如，另一个名为
    **“second_file.py”** 的 Python 文件将导入该项目并调用其函数，如下所示：
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At first, the project is imported as in line 1\. Then it is used to call its
    function in line 2\. After opening the terminal and setting its current directory
    to the printmsg folder, the new file **“inside_project.py”** can be executed as
    in figure 2\. The function got called successfully.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，项目按第 1 行的方式导入。然后，它用于调用第 2 行的函数。在打开终端并将当前目录设置为 printmsg 文件夹后，可以像图 2 中那样执行新文件
    **“inside_project.py”**。函数成功调用。
- en: '**Figure 2**'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 2**'
- en: '![](../Images/a6173b60846158410eaeab6b9b736009.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6173b60846158410eaeab6b9b736009.png)'
- en: Because the imported module is in the same directory of the script it is called
    from, the process is straightforward. Just type the name of the module in an import
    statement. There is an important question. What if the script calling the file
    is in a different directory than the module it would like to import? Let us try
    to create another Python file not located in the same directory of the imported
    module and try to import the module again. The file is named “**outside_project.py**”
    which is located into the desktop. In other words, that file is located one level
    up to the module. It has the same code used in the previous file **“inside_project.py”** After
    running this file from the terminal, the result is shown in figure 3.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为导入的模块与调用它的脚本在同一目录中，所以过程很简单。只需在 import 语句中输入模块的名称即可。有一个重要的问题。如果调用文件的脚本位于不同于要导入的模块的目录中怎么办？让我们尝试创建一个不在导入模块的同一目录中的
    Python 文件，并再次尝试导入模块。该文件名为 **“outside_project.py”**，位于桌面上。换句话说，该文件位于模块的上一级。它包含与之前的文件
    **“inside_project.py”** 相同的代码。运行此文件后，结果如图 3 所示。
- en: '**Figure 3**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 3**'
- en: '![](../Images/0685bd874fe3a6f397a84caaf0758ddb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0685bd874fe3a6f397a84caaf0758ddb.png)'
- en: 'The module is not found because the file and the module to be imported are
    in different directories. The file is located in “~/Desktop/” directory and the
    module is located in “~/Desktop/printmsg/” directory. To solve that issue, the **printmsg** is
    appended to the name of the module to make the interpreter knows where it can
    find the module. The code will be as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 模块未找到，因为文件和要导入的模块位于不同的目录中。文件位于“~/Desktop/”目录中，而模块位于“~/Desktop/printmsg/”目录中。为了解决这个问题，**printmsg**
    被附加到模块的名称中，以便解释器知道在哪里可以找到模块。代码如下：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The result of executing the “outside_project.py” file is shown in figure 4.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 **“outside_project.py”** 文件的结果如图 4 所示。
- en: '**Figure 4**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**图 4**'
- en: '![](../Images/ae2e4911577f0782b806e3f8baf4fd2e.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ae2e4911577f0782b806e3f8baf4fd2e.png)'
- en: But appending the folder name in the path from the file to the module it imports
    is tiresome specially if the file is away from the module in more than one levels.
    To solve this issue, let us have a brief overview about how Python interpreter
    locates imported libraries.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 但在文件到模块的路径中附加文件夹名称是繁琐的，特别是当文件与模块相距多个层级时。为了解决这个问题，让我们简要了解 Python 解释器如何定位导入的库。
- en: 2\. How Python Locates Libraries?
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. Python 如何定位库？
- en: When Python interpreter encounters an import statement, it searches in some
    of its directories for that imported library. If it is not found in any of those
    directories, then it will raise an error as in figure 3.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 解释器遇到导入语句时，它会在其某些目录中搜索该导入的库。如果在这些目录中都找不到，那么它会引发错误，如图3所示。
- en: 'There are multiple sources of such paths that is searched for a given library.
    For example, paths can be inside the *PYTHONHOME* or *PYTHONPATH* environment
    variables, current script directory, and the **site-packages** directory. The
    list of all directories that Python searches in are listed in the **path** property
    of the **sys** built-in module. It can be printed as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有多个来源的路径可以搜索给定的库。例如，路径可以在*PYTHONHOME*或*PYTHONPATH*环境变量中，当前脚本目录，以及**site-packages**目录中。Python
    搜索的所有目录列在**sys**内置模块的**path**属性中。可以如下打印：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The sys.path list is printed using the terminal and result is shown in figure
    5.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端打印 sys.path 列表，结果显示在图5中。
- en: '**Figure 5**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**图5**'
- en: '![](../Images/31460a56e020442c480b35ddb8d12137.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/31460a56e020442c480b35ddb8d12137.png)'
- en: In our example, the module is not located in any of the directories listed in **sys.path** and
    this is why an exception is thrown. We can fix that by moving the library into
    one of these paths. The directory that will be used is the **site-packages** directory.
    The reason is that the installed libraries using **pip** or **conda** are added
    to that directory. Let us see how to add our project into that directory.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，该模块不在**sys.path**中列出的任何目录中，这就是为什么会抛出异常的原因。我们可以通过将库移动到这些路径之一来解决此问题。将使用的目录是**site-packages**目录。原因是使用**pip**或**conda**安装的库会添加到该目录中。让我们看看如何将我们的项目添加到该目录中。
- en: 3\. Manual Installation by Copying Project Files to site-packages
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 通过将项目文件复制到 site-packages 进行手动安装
- en: In figure 5, the site-packages directory is listed as a search path for imported
    libraries. By simply copying and pasting the project directory “**printmsg**”
    inside the site-packages directory, the **print_msg_file** module can be imported.
    Figure 6 shows that the **printmsg** project is copied into site-packages.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在图5中，site-packages 目录被列为导入库的搜索路径。通过简单地将项目目录“**printmsg**”复制并粘贴到 site-packages
    目录中，**print_msg_file** 模块可以被导入。图6显示了**printmsg** 项目已被复制到 site-packages。
- en: '**Figure 6**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**图6**'
- en: '![](../Images/ece64f28293297fd0ac6c2f90c2f303a.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ece64f28293297fd0ac6c2f90c2f303a.png)'
- en: Based on the previous two lines of code listed below, the “**outside_project.py**”
    file can now successfully import the project and print the output as in figure
    4\. In this case, the imported module **print_msg_file** is prepended by the directory
    of the project “**printmsg**” but this will be valid wherever the “**outside_project.py**”
    file is located.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 根据下面列出的前两行代码，现在“**outside_project.py**”文件可以成功导入项目并打印图4中的输出。在这种情况下，被导入的模块**print_msg_file**由项目“**printmsg**”的目录前缀，但无论“**outside_project.py**”文件位于何处，这都是有效的。
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 4\. How Python Installers Locate Libraries?
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. Python 安装程序如何定位库？
- en: Up to this point, in order to import the project successfully it should be copied
    manually inside the **site-packages** directory. Before doing that, the project
    should be transferred to the machine by anyway such as being downloaded from any
    file hosting server. But all of work is manual. Some users will find such work
    is tiresome to do for every library they are to install. As a result, there is
    alternative way for installing libraries.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，为了成功导入项目，它应该被手动复制到**site-packages**目录中。在执行此操作之前，项目应通过任何方式传输到计算机，例如从任何文件托管服务器下载。但所有的工作都是手动的。一些用户会发现每安装一个库都需要做这些工作是很麻烦的。因此，存在一种替代的安装库的方法。
- en: Some installers are available to receive the library name and they take care
    of downloading and installing it automatically. **But how to make our own libraries
    accessible by these installers?** These installers searches for the libraries
    inside software repositories such as Python Package Index (PyPI). Once found,
    they download and install it automatically. So, rather than asking how to make
    our own libraries accessible by Python installers, the question should now be
    how to upload our own libraries to such repositories? This is because by uploading
    these libraries to such repositories, they will implicitly be accessible by the
    Python installers. Such software repositories accept the libraries in distribution
    formats such as Wheel built distribution. So, our question now should be how to
    prepare our project into Wheel distribution format? In order to generate the Wheel
    distribution format, there are a number of files to be packaged together. These
    files include the actual project Python files, any supplemental files required
    by those files, and also some helper files to give some sort of details about
    your project. So, the sequence to be followed is to prepare the package files,
    generate the distribution files, and upload such files to the Python package repository
    (PyPI). These points will be covered in the next sections.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 一些安装程序可以接收库名称，并自动处理下载和安装。**但如何让这些安装程序访问我们自己的库呢？** 这些安装程序在软件仓库中查找库，如 Python 包索引
    (PyPI)。一旦找到，它们会自动下载和安装。因此，问题不应是如何让我们的库被 Python 安装程序访问，而是如何将我们的库上传到这些仓库？因为通过将库上传到这些仓库，它们将被
    Python 安装程序隐式访问。这些软件仓库接受如 Wheel 构建分发等分发格式的库。因此，我们现在的问题应是如何将项目准备成 Wheel 分发格式？为了生成
    Wheel 分发格式，需要打包多个文件。这些文件包括实际的项目 Python 文件、这些文件所需的任何补充文件以及一些辅助文件，以提供有关项目的某种详细信息。因此，需遵循的顺序是准备包文件、生成分发文件，并将这些文件上传到
    Python 包仓库（PyPI）。这些要点将在接下来的部分中讲解。
- en: '* * *'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 工作'
- en: '* * *'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题
- en: '[Pip Install YOU: A Beginner''s Guide to Creating Your Python Library](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pip 安装 YOU: 创建你的 Python 库的初学者指南](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)'
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[忘记 PIP、Conda 和 requirements.txt！改用 Poetry，然后…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
- en: '[Managing Python Dependencies with Poetry vs Conda & Pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Poetry 管理 Python 依赖 vs Conda 和 Pip](https://www.kdnuggets.com/managing-python-dependencies-with-poetry-vs-conda-pip)'
- en: '[How to Create a Sampling Plan for Your Data Project](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何为你的数据项目创建抽样计划](https://www.kdnuggets.com/2022/11/create-sampling-plan-data-project.html)'
- en: '[Orchestrate a Data Science Project in Python With Prefect](https://www.kdnuggets.com/2022/02/orchestrate-data-science-project-python-prefect.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Prefect 在 Python 中协调数据科学项目](https://www.kdnuggets.com/2022/02/orchestrate-data-science-project-python-prefect.html)'
- en: '[Free Python Project Coding Course](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[免费 Python 项目编码课程](https://www.kdnuggets.com/2022/08/free-python-project-coding-course.html)'
