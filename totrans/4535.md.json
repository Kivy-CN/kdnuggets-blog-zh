["```py\nfrom keras import regularizers\n...\nlambda = 0.01\nmodel.add(Dense(64, input_dim=64,\n                kernel_regularizer=regularizers.l2(lambda)))\n```", "```py\nfrom keras import regularizers\n...\nlambda = 0.01 \nmodel.add(Dense(64, input_dim=64,\n                kernel_regularizer=regularizers.l1(lambda)))\n```", "```py\nfrom keras.layers.core import Dropout\nâ€¦\npercent_of_dropped_neurons = 0.25\nmodel = Sequential([\n   Dense(32, activation='relu', input_shape=(10,)),\n   Dropout(percent_of_dropped_neurons)\n   Dense(32, activation='relu',),\n   Dense(1, activation='linear')\n])\n```", "```py\nfrom keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n       rotation_range=40,\n       width_shift_range=0.2,\n       height_shift_range=0.2,\n       shear_range=0.2,\n       zoom_range=0.2,\n       horizontal_flip=True,\n       fill_mode='nearest')\nimg = load_img('983794168.jpg')    # load image from file system\nx = img_to_array(img)              # turn image to array and reshape\nx = x.reshape((1,) + x.shape)\ni = 0\n# the .flow() command below generates batches of randomly transformed images\n# and saves the results to the `test_data_augmentation` directory\nfor batch in datagen.flow(x, batch_size=1,\n                         save_to_dir='test_data_augmentation', save_prefix='data', save_format='jpeg'):\n   i += 1\n   if i > 20:\n       break   # generate 20 images and stop after\n```", "```py\nfrom keras.callbacks import EarlyStopping\n\nes = EarlyStopping(monitor='val_loss', mode='min')\n```", "```py\nes = EarlyStopping(monitor='val_loss', mode='min', verbose=1, patience=50)\n```", "```py\nes = EarlyStopping(monitor='val_accuracy', mode='max', min_delta=1)\n```", "```py\nmodel.fit(\nX_train,\ny_train, \nepochs=2000, \nbatch_size=32, \nvalidation_data=(X_val, y_val), \ncallbacks=[get_tensorboard_callback('baseline_pca(45)_log', True), es])\n```", "```py\nfrom keras.layers.normalization import BatchNormalization\n...\nmodel = Sequential([\n   Dense(32, activation='relu', input_shape=(10,)),\n   BatchNormalization(),\n   Dense(32, activation='relu'),\n   Dense(1, activation='linear')\n])\n```"]