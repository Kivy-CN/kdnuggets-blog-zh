- en: 10 Essential SQL Commands for Data Science
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html](https://www.kdnuggets.com/2022/10/10-essential-sql-commands-data-science.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![10 Essential SQL Commands for Data Science](../Images/93b5f1ae3a5afebae36da396cd2653c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: It is a new day to learn SQL commands that will help you in your data science
    career. You will use SQL query to extract, save, and modify the database to your
    requirements.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: So, what is stopping you from learning the most used command for extracting
    the data and performing a quick analysis on a SQL database?
  prefs: []
  type: TYPE_NORMAL
- en: 'In this post, we will learn essential SQL commands with code examples using
    [Online SQL Editor](https://www.programiz.com/sql/online-compiler/). It allows
    users to run online queries without any issues. The platform comes with an editor
    and 3 SQL tables for practice. The database consists of three tables: **Customers**,
    **Orders**, and **Shippings**.'
  prefs: []
  type: TYPE_NORMAL
- en: SELECT
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DISTINCT
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WHERE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: LIKE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ORDER BY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JOIN
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: UNION
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: GROUP BY
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CASE
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: SELECT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SELECT command allows us to extract the selective or all columns from the
    table. It is the basic building block of SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we are displaying all of the columns using `*` from the **Customer**
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Robert | Luna | 22 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | David | Robinson | 22 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | John | Reinhardt | 25 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Betty | Doe | 28 | UAE |'
  prefs: []
  type: TYPE_TB
- en: In the second example, we are displaying only three columns from the **Customers**
    table. You can type column names separated by commas “,” and end it with **FROM**
    command and the table name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '| **first_name** | **last_name** | **country** |'
  prefs: []
  type: TYPE_TB
- en: '| John | Doe | USA |'
  prefs: []
  type: TYPE_TB
- en: '| Robert | Luna | USA |'
  prefs: []
  type: TYPE_TB
- en: '| David | Robinson | UK |'
  prefs: []
  type: TYPE_TB
- en: '| John | Reinhardt | UK |'
  prefs: []
  type: TYPE_TB
- en: '| Betty | Doe | UAE |'
  prefs: []
  type: TYPE_TB
- en: DISTINCT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The DISTINCT is used to display unique values from the column. Instead of showing
    two Johns, it is now showing one John.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '| **first_name** |'
  prefs: []
  type: TYPE_TB
- en: '| John |'
  prefs: []
  type: TYPE_TB
- en: '| Robert |'
  prefs: []
  type: TYPE_TB
- en: '| David |'
  prefs: []
  type: TYPE_TB
- en: '| Betty |'
  prefs: []
  type: TYPE_TB
- en: WHERE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WHERE command is used for conditional and filtering. We will be filtering
    the table to show customers with age greater than 25\. Apart from greater than
    you can also use lesser than **<**, lesser than or equal to **<=**, greater than
    or equal to **>=**, and equal **=**.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The results show that we have only two customers with the age greater than 25.
  prefs: []
  type: TYPE_NORMAL
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Betty | Doe | 28 | UAE |'
  prefs: []
  type: TYPE_TB
- en: You can also combine two or more than two using **AND**, **OR**, **BETWEEN**,
    and **IN**. In our case, we are looking for customers based in the USA with the
    age greater than 25.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: LIKE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The LIKE command is used for string filtering. You will provide the expression
    and it will use it to find the values that are matching the expression. For example,
    if you want all the names that start with J use “J%”. To find the name that ends
    with J we will use “%J”. It is pretty simple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | John | Reinhardt | 25 | UK |'
  prefs: []
  type: TYPE_TB
- en: Let’s try finding the customer whose **first_name** starts with “J” and **last_name**
    ends with “e”. You can check out all of the other ways to create expressions for
    your particular situation by reading the [SQL LIKE Operator Examples](/2022/09/sql-like-operator-examples.html)
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | John | Reinhardt | 25 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Betty | Doe | 28 | UAE |'
  prefs: []
  type: TYPE_TB
- en: ORDER BY
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ORDER BY is used for sorting the query results. We have used ORDER BY to
    sort the result based on **first_name** in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Betty | Doe | 28 | UAE |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | David | Robinson | 22 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | John | Reinhardt | 25 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Robert | Luna | 22 | USA |'
  prefs: []
  type: TYPE_TB
- en: You can try to sort the results in decreasing order by using **DESC** at the
    end.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '| **customer_id** | **first_name** | **last_name** | **age** | **country**
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Robert | Luna | 22 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John | Doe | 31 | USA |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | John | Reinhardt | 25 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | David | Robinson | 22 | UK |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Betty | Doe | 28 | UAE |'
  prefs: []
  type: TYPE_TB
- en: AS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The AS command is used for creating aliases or renaming the column names. In
    the example below, we are renaming “customer_id” with “ID” and “first_name” with
    “Name”.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '| **ID** | **Name** |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | John |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Robert |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | David |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | John |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | Betty |'
  prefs: []
  type: TYPE_TB
- en: JOIN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will be joining multiple tables for data analysis and it is quite easy.
    Just use **LEFT JOIN**, **INNER JOIN**, **RIGHT JOIN**, or **FULL JOIN** after
    the first table. Write the second table name followed by **ON** to join tables
    on certain columns. In our case, both tables have a common column called **customer_id**.
    We will join the table using both column names with “==” sign.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '| **first_name** | **item** | **amount** |'
  prefs: []
  type: TYPE_TB
- en: '| John | Keyboard | 400 |'
  prefs: []
  type: TYPE_TB
- en: '| Robert | Mousepad | 250 |'
  prefs: []
  type: TYPE_TB
- en: '| David | Monitor | 12000 |'
  prefs: []
  type: TYPE_TB
- en: '| John | Keyboard | 400 |'
  prefs: []
  type: TYPE_TB
- en: '| John | Mouse | 300 |'
  prefs: []
  type: TYPE_TB
- en: '| Betty |  |  |'
  prefs: []
  type: TYPE_TB
- en: UNION
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: UNION is used for displaying two query results together. In the example, we
    are displaying “first_name” as “Name_item” from **Customer** table and “item”
    from **Orders** table together.
  prefs: []
  type: TYPE_NORMAL
- en: '**Note:** make sure both queries are displaying the same number of columns.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the results have both first_name from the **Customers** and
    item from **Orders**. The column is sorted from A-Z.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Name_item** |'
  prefs: []
  type: TYPE_TB
- en: '| Betty |'
  prefs: []
  type: TYPE_TB
- en: '| David |'
  prefs: []
  type: TYPE_TB
- en: '| John |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard |'
  prefs: []
  type: TYPE_TB
- en: '| Monitor |'
  prefs: []
  type: TYPE_TB
- en: '| Mouse |'
  prefs: []
  type: TYPE_TB
- en: '| Mousepad |'
  prefs: []
  type: TYPE_TB
- en: '| Robert |'
  prefs: []
  type: TYPE_TB
- en: GROUP BY
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GROUP By command is frequently used in data analytical tasks. You can group
    any columns and get a better understanding of data distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The GROUP BY requires aggregate functions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'COUNT: total number of rows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SUM: sum of all the values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MAX: maximum value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MIN: minimum value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AVG: average value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can use aggregate functions and GROUP BY to combine values into  categories
    within the columns. In the example below, we will SUM the amount and group it
    by item names.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: A single keyboard cost 400 and we have sold 2 keyboards. It has summed it to
    display 800\. I know it is a simple example, but this is a start.
  prefs: []
  type: TYPE_NORMAL
- en: '| **item** | **SUM(amount)** |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard | 800 |'
  prefs: []
  type: TYPE_TB
- en: '| Monitor | 12000 |'
  prefs: []
  type: TYPE_TB
- en: '| Mouse | 300 |'
  prefs: []
  type: TYPE_TB
- en: '| Mousepad | 250 |'
  prefs: []
  type: TYPE_TB
- en: CASE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CASE command is similar to **if-else statements** in Python or any other
    language. We will use it to create categories based on the conditions.
  prefs: []
  type: TYPE_NORMAL
- en: If the amount is less than 1000 return ‘Low’ else return ‘High’.
  prefs: []
  type: TYPE_NORMAL
- en: The command starts with **CASE** and ends with **END** and the column name.
  prefs: []
  type: TYPE_NORMAL
- en: '**If** is replaced with **WHEN** and **else** is replaced with **ELSE.**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '| **item** | **amount** | **Priority** |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard | 400 | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Mouse | 300 | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Monitor | 12000 | High |'
  prefs: []
  type: TYPE_TB
- en: '| Keyboard | 400 | Low |'
  prefs: []
  type: TYPE_TB
- en: '| Mousepad | 250 | Low |'
  prefs: []
  type: TYPE_TB
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[16 Essential DVC Commands for Data Science](https://www.kdnuggets.com/2022/07/16-essential-dvc-commands-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[14 Essential Git Commands for Data Scientists](https://www.kdnuggets.com/2022/06/14-essential-git-commands-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12 Essential Commands for Streamlit](https://www.kdnuggets.com/2023/01/12-essential-commands-streamlit.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, June 29: 20 Basic Linux Commands for Data Science…](https://www.kdnuggets.com/2022/n26.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[20 Basic Linux Commands for Data Science Beginners](https://www.kdnuggets.com/2022/06/20-basic-linux-commands-data-science-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[12 Docker Commands Every Data Scientist Should Know](https://www.kdnuggets.com/2023/01/12-docker-commands-every-data-scientist-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
