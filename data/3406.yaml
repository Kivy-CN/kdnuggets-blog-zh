- en: A Beginner’s Guide to Neural Networks with Python and SciKit Learn 0.18!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 和 SciKit Learn 0.18 的神经网络初学者指南！
- en: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html)
- en: '**By Jose Portilla, Udemy Data Science Instructor.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：Jose Portilla，Udemy 数据科学讲师。**'
- en: I'm Jose Portilla and I [teach thousands of students on Udemy](https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/?couponCode=KDNUGGETSPY) about
    Data Science and Programming and I also conduct [in-person programming and data
    science training](www.pieriandata.com). Check out the end of the article for discount
    coupons on my courses!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我是 Jose Portilla，我在 [Udemy 教授数以千计的学生](https://www.udemy.com/python-for-data-science-and-machine-learning-bootcamp/?couponCode=KDNUGGETSPY)
    数据科学和编程，并且我还进行 [现场编程和数据科学培训](www.pieriandata.com)。请查看文章末尾以获取我的课程折扣券！
- en: The most popular machine learning library for Python is [SciKit Learn](http://scikit-learn.org/).
    The newest version (0.18) was just released a few days ago and now has built in
    support for Neural Network models. In this article we will learn how Neural Networks
    work and how to implement them with the Python programming language and latest
    version of SciKit-Learn! Basic understanding of Python is necessary to understand
    this article, and it would also be helpful (but not necessary) to have some experience
    with Sci-Kit Learn.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Python 最流行的机器学习库是 [SciKit Learn](http://scikit-learn.org/)。最新版本（0.18）刚刚发布，现已内置支持神经网络模型。在本文中，我们将学习神经网络的工作原理以及如何使用
    Python 编程语言和最新版本的 SciKit-Learn 实现它们！理解 Python 的基础知识是理解本文的必要条件，如果有一些 Sci-Kit Learn
    的经验会更有帮助（但不是必须的）。
- en: '*Also as a quick side note, I wrote a sister article to this one detailing
    the same topic but in R, you can find it [here](/2016/08/begineers-guide-neural-networks-r.html).*'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*另外作为一个简短的附注，我写了一篇与这篇文章主题相同但使用 R 语言的姊妹文章，你可以在[这里](/2016/08/begineers-guide-neural-networks-r.html)找到它。*'
- en: Neural Networks
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 神经网络
- en: Neural Networks are a machine learning framework that attempts to mimic the
    learning pattern of natural biological neural networks. Biological neural networks
    have interconnected neurons with dendrites that receive inputs, then based on
    these inputs they produce an output signal through an axon to another neuron.
    We will try to mimic this process through the use of Artificial Neural Networks
    (ANN), which we will just refer to as neural networks from now on. The process
    of creating a neural network begins with the most basic form, a single perceptron.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络是一种机器学习框架，旨在模仿自然生物神经网络的学习模式。生物神经网络具有相互连接的神经元，树突接受输入，然后根据这些输入通过轴突向另一个神经元产生输出信号。我们将通过使用人工神经网络（ANN），简称神经网络，来模拟这一过程。创建神经网络的过程从最基本的形式——单一感知器开始。
- en: The Perceptron
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 感知器
- en: 'Let''s start our discussion by talking about the Perceptron! A perceptron has
    one or more inputs, a bias, an activation function, and a single output. The perceptron
    receives inputs, multiplies them by some weight, and then passes them into an
    activation function to produce an output. There are many possible activation functions
    to choose from, such as the logistic function, a trigonometric function, a step
    function etc. We also make sure to add a bias to the perceptron, this avoids issues
    where all inputs could be equal to zero (meaning no multiplicative weight would
    have an effect). Check out the diagram below for a visualization of a perceptron:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从谈论感知器开始！一个感知器有一个或多个输入，一个偏置，一个激活函数和一个输出。感知器接收输入，将其乘以某些权重，然后将其传递到激活函数中以生成输出。有很多可能的激活函数可以选择，例如逻辑函数、三角函数、阶跃函数等。我们还确保向感知器添加一个偏置，以避免所有输入都可能等于零（意味着没有乘法权重会产生效果）的问题。查看下面的图示以获得感知器的可视化：
- en: '![Perceptron](../Images/69a72f3fc8c8769ca45c4f6f4af93290.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![感知器](../Images/69a72f3fc8c8769ca45c4f6f4af93290.png)'
- en: Once we have the output we can compare it to a known label and adjust the weights
    accordingly (the weights usually start off with random initialization values).
    We keep repeating this process until we have reached a maximum number of allowed
    iterations, or an acceptable error rate.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们得到输出，就可以将其与已知标签进行比较，并相应地调整权重（权重通常以随机初始化值开始）。我们不断重复这个过程，直到达到最大允许迭代次数或可接受的误差率。
- en: 'To create a neural network, we simply begin to add layers of perceptrons together,
    creating a multi-layer perceptron model of a neural network. You''ll have an input
    layer which directly takes in your feature inputs and an output layer which will
    create the resulting outputs. Any layers in between are known as hidden layers
    because they don''t directly "see" the feature inputs or outputs. For a visualization
    of this check out the diagram below (source: Wikipedia).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个神经网络，我们只需将感知器层逐一添加在一起，形成一个多层感知器模型。你将拥有一个输入层，它直接接受特征输入，还有一个输出层，它将生成最终的输出。介于输入层和输出层之间的任何层称为隐藏层，因为它们不会直接“看到”特征输入或输出。要查看这个的可视化效果，请查看下图（来源：维基百科）。
- en: '![ANN](../Images/a2b9be4c6961af29d8ecd46eeff7b949.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![ANN](../Images/a2b9be4c6961af29d8ecd46eeff7b949.png)'
- en: Let's move on to actually creating a neural network with Python!
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来实际创建一个神经网络，使用 Python！
- en: SciKit-Learn
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SciKit-Learn
- en: In order to follow along with this tutorial, you'll need to have the latest
    version of SciKit Learn installed! It is easily installable either through pip
    or conda, but you can reference the [official installation documentation](http://scikit-learn.org/stable/install.html) for
    complete details on this.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随本教程，你需要安装最新版本的 SciKit Learn！它可以通过 pip 或 conda 轻松安装，但你可以参考[官方安装文档](http://scikit-learn.org/stable/install.html)以获取详细信息。
- en: Data
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据
- en: We'll use SciKit Learn's built in Breast Cancer Data Set which has several features
    of tumors with a labeled class indicating whether the tumor was Malignant or Benign.
    We will try to create a neural network model that can take in these features and
    attempt to predict malignant or benign labels for tumors it has not seen before.
    Let's go ahead and start by getting the data!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 SciKit Learn 内置的乳腺癌数据集，该数据集包含多个肿瘤特征，并带有标签类，指示肿瘤是恶性还是良性。我们将尝试创建一个神经网络模型，可以接受这些特征，并尝试预测之前未见过的肿瘤的恶性或良性标签。让我们开始获取数据吧！
- en: 'This object is like a dictionary, it contains a description of the data and
    the features and targets:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个对象类似于一个字典，它包含数据以及特征和目标的描述：
- en: '[PRE0]   dict_keys([''DESCR'', ''feature_names'', ''target_names'', ''target'',
    ''data''])   [PRE1]`  [PRE2]   (569, 30)   [PRE3]`'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]   dict_keys([''DESCR'', ''feature_names'', ''target_names'', ''target'',
    ''data''])   [PRE1]`  [PRE2]   (569, 30)   [PRE3]`'
