- en: Ten more random useful things in R you may not know about
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/07/ten-more-random-useful-things-r.html](https://www.kdnuggets.com/2019/07/ten-more-random-useful-things-r.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Keith McNulty](https://www.linkedin.com/in/keith-mcnulty/), McKinsey
    & Company**'
  prefs: []
  type: TYPE_NORMAL
- en: I was surprised by the positive reaction to [my article a couple of months ago](https://towardsdatascience.com/ten-random-useful-things-in-r-that-you-might-not-know-about-54b2044a3868?source=post_page---------------------------)which
    itemized ten random things in R that people might not know about.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: I had a feeling that R has developed as a language to such a degree that many
    of us are using it now in completely different ways. This means that there are
    likely to be numerous tricks, packages, functions, etc that each of us use, but
    that others are completely unaware of, and would find useful if they knew about
    them. As [Mike Kearney](https://medium.com/@kearneymw?source=post_page---------------------------) also
    pointed out, none of my list of ten had anything to do with stats, which just
    shows how far R has come in recent years.
  prefs: []
  type: TYPE_NORMAL
- en: To be honest, I struggled to keep it to ten last time, so here are ten more
    things about R that help make my work easier and which you might find useful.
    Do drop a note here or on Twitter if any of these helpful to your current work,
    or if you have further suggestions for things which others should know about.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. dbplyr
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`dbplyr` is exactly what its name implies. It allows you use `dplyr` with databases.
    If you work with databases and you’ve never heard of `dbplyr` then you are likely
    still using SQL strings in your code, which forces you to think SQL when you actually
    want to think tidy, and can be a real pain when you want to abstract your code
    to generate functions and the like.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dbplyr` allows you to create your SQL query using `dplyr`. It does this by
    establishing a database table that can be manipulated using `dplyr` functions,
    translating those functions into SQL. For example, if you have a database connection
    called `con`, and you want to manipulate a table called `CAT_DATA`within `CAT_SCHEMA` you
    can set this table up as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Then you can perform the usual manipulations such as `filter`, `mutate`, `group_by`, `summarise` etc
    on `cat_table` and all of these will be translated into a SQL query in the background.
    What’s incredibly useful is that the data is not physically downloaded into your
    R session until you use the `dplyr::collect()`function to finally grab it. This
    means you can get SQL to do all the work and collect your manipulated data at
    the end, rather than having to pull the entire database at the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: For more on `dbplyr` you can check my previous article [here](https://towardsdatascience.com/how-to-write-tidy-sql-queries-in-r-d6d6b2a3e17?source=post_page---------------------------) and
    the tutorial [here](https://dbplyr.tidyverse.org/articles/dbplyr.html?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 2\. rvest and xml2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: People say Python is much better for web scraping. That may be true. But for
    those of us who like working in the tidyverse, the `rvest` and `xml2` packages
    can make straightforward web scraping pretty easy by working with `magrittr` and
    allowing us to pipe commands. Given that HTML and XML code on webpages is usually
    heavily nested, I think its pretty intuitive to structure scraping code using `%>%`.
  prefs: []
  type: TYPE_NORMAL
- en: By initially reading the HTML code of the page of interest, these packages break
    the nested HTML and XML nodes into lists that you can progressively search and
    mine for specific nodes or attributes of interest. Using this in combination with
    Chrome’s inspect capability will allow you to quickly extract the key information
    you need from the webpage.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a quick example, I recently wrote a function to scrape the basic Billboard
    music chart at any point in history as a dataframe from [this fairly snazzy page](https://www.billboard.com/charts/hot-100?source=post_page---------------------------)using
    code as simple as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: More on this example [here](https://towardsdatascience.com/get-any-us-music-chart-listing-from-history-in-your-r-console-6bd168f192cb?source=post_page---------------------------),
    more on `rvest` [here](https://github.com/tidyverse/rvest?source=post_page---------------------------) and
    more on `xml2` [here](https://blog.rstudio.com/2015/04/21/xml2/?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 3\. k-means on long data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: k-means is an increasingly popular statistical method to cluster observations
    in data, often to simplify a large number of datapoints into a smaller number
    of clusters or archetypes. The `kml` package now allows k-means clustering to
    take place on longitudinal data, where the ‘datapoints’ are actually data series.
  prefs: []
  type: TYPE_NORMAL
- en: This is super useful where the datapoints you are studying are actually readings
    over time. This could be clinical observation of weight gain or loss in hospital
    patients, or compensation trajectories of employees.
  prefs: []
  type: TYPE_NORMAL
- en: '`kml` works by first transforming data into an object of the class `ClusterLongData`using
    the `cld` function. Then it partitions the data using a ‘hill climbing’ algorithm,
    testing several values of `k` 20 times each. Finally, the `choice()`function allows
    you to view the results of the algorithm for each `k` graphically and decide what
    you believe to be an optimal clustering.'
  prefs: []
  type: TYPE_NORMAL
- en: 4\. The connections window in RStudio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The connections window in the latest version of RStudio allows you to browse
    any remote databases without having to move into a separate environment like SQL
    developer. This convenience now offers the opportunity to fulfil dev projects
    entirely within the RStudio IDE.
  prefs: []
  type: TYPE_NORMAL
- en: By setting up your connection to a remote database in the connections window,
    you can browse inside nested schemas, tables, data types, and even view a table
    directly to see an extract of what the data looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/b40141a872f8127dae5cef165319c483.png)The connections
    window in the latest versions of RStudio'
  prefs: []
  type: TYPE_NORMAL
- en: More on the connections window [here](https://blog.rstudio.com/2017/08/16/rstudio-preview-connections/?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 5\. tidyr::complete()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default behavior in R dataframes is that if no data exists for a particular
    observation, then the row for that observation does not appear in the dataframe.
    This can cause problems when you need to use this dataframe as an input for something
    which expects to see values for all possible observations.
  prefs: []
  type: TYPE_NORMAL
- en: Typically this problem occurs when you are sending the data into some graphing
    function that is expecting to see zero values when there are no observations,
    and can’t understand that a missing row means zero values in that row. This can
    also be an issue when you are making future projections and the starting point
    has missing rows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `complete()` function within `tidyr` allows you to fill in the gaps for
    all observations that had no data. It allows you to define the observations that
    you want to complete and then declare what value to use to plug the gaps. For
    example, if you were taking counts of male and female dogs of different breeds,
    and you had some combinations for which there were no dogs in the sample, you
    could use the following to deal with it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will expand your dataframe to ensure that all possible combinations of `SEX`and `BREED` are
    included, and it will fill in missing values of `COUNT` with zeros.
  prefs: []
  type: TYPE_NORMAL
- en: 6\. gganimate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Animated graphics are all the rage at the moment, and the `gganimate` package
    allows those who use `ggplot2` (most R users I would say) to very simply extend
    their code to create animated graphics.
  prefs: []
  type: TYPE_NORMAL
- en: '`gganimate` works by taking data that exists over a series of ‘transition states’,
    usually years or some other sort of time series data. You can plot the data within
    each transition state as if it were a simple static `ggplot2` chart, and then
    use the `ease_aes()` function to create an animation that moves between the transition
    states. There are numerous options for how the transition occurs, and the `animate()` function
    allows the graphic to be rendered in a variety of forms such as an animated gif
    or an mpeg.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, here’s a gif I created that shows all time points won by entrants
    in the Eurovision Song contest from 1957 to 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/a5efb400ec073dc92024a94184b6e357.png)Using gganimate
    to show all time Eurovision Song Contest results'
  prefs: []
  type: TYPE_NORMAL
- en: For the code for this see [here](https://github.com/keithmcnulty/eurovision?source=post_page---------------------------) and
    for a nice step by step tutorial on `gganimate`which I found really helpful see [here](https://emilykuehler.github.io/bar-chart-race/?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 7\. networkD3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: D3 is an extremely powerful data visualization library for javascript. An increasing
    number of packages have started becoming available that allow R users to build
    viz in D3 such as `R2D3`, which is great not least because it allows us to admire
    one of the best hex stickers ever (see [here](https://rstudio.github.io/r2d3/?source=post_page---------------------------)).
  prefs: []
  type: TYPE_NORMAL
- en: My favourite D3 package for R is `networkD3`. It has been around for a little
    while and is fantastic for plotting graph or network data in a responsive or aesthetically
    pleasing way. In particular, it can plot force directed networks using `forceNetwork()`,
    sankey diagrams using `sankeyNetwork()` and chord diagrams using `chordNetwork()`.
    Here’s an example of a simple sankey network I created showing voting flows by
    region in the Brexit referendum.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/608887d8d381e8ada50569425c6e2e78.png)Voting flows
    in the Brexit referendum using networkD3'
  prefs: []
  type: TYPE_NORMAL
- en: More on this specific example [here](https://towardsdatascience.com/using-networkd3-in-r-to-create-simple-and-clear-sankey-diagrams-48f8ba8a4ace?source=post_page---------------------------) and
    more on networkD3 [here](https://christophergandrud.github.io/networkD3/?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 8\. Datatables in RMarkdown or Shiny using DT
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `DT` package is an interface from R to the DataTables javascript library.
    This allows very easy display of tables within a shiny app or R Markdown document
    that have a lot of in-built functionality and responsiveness. This prevents you
    from having to code separate data download functions, gives the user flexibility
    around the presentation and the ordering of the data and has a data search capability
    built-in.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a simple command such as :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Can produce something as nice as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/800cc256ff08746a4123800d143f3188.png)'
  prefs: []
  type: TYPE_IMG
- en: More on DT [here](https://rstudio.github.io/DT/?source=post_page---------------------------),
    including how to set various options to customize the layout and add data download,
    copy and print buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 9\. Pimp your RMarkdown with prettydoc
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`prettydoc` is a package by Yixuan Qiu which offers a simple set of themes
    to create a different, prettier look and feel to your RMarkdown documents. This
    is super helpful when you just want to jazz up your documents a little but don’t
    have time to get into the styling of them yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It’s really easy to use. Simple edits to the YAML header of your document can
    invoke a specific style theme throughout the document, with numerous themes available.
    For example, this will invoke a lovely clean blue coloring and style across titles,
    tables, embedded code and graphics:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: More on `prettydoc` [here](http://yixuan.cos.name/prettydoc/?source=post_page---------------------------).
  prefs: []
  type: TYPE_NORMAL
- en: 10\. Optionally hide your code in RMarkdown with code_folding
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: RMarkdown is a great way to record your work, allowing you to write a narrative
    and capture your code all in one place. But sometimes your code can be overwhelming
    and not particularly pleasant for non-coders who are trying to read just the narrative
    of your work and are not interested in the intricacies of how you conducted the
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: 'Previously the only options we had were to either set `echo = TRUE` or `echo
    = FALSE` in our `knitr` options to either show our code in the document or not.
    But now we can set an option in the YAML header that gives us the best of both
    worlds. Setting `code_folding: hide` in the YAML header will hide the code chunks
    by default, but provide little click-down boxes in the document so that the reader
    can view all the code, or particular chunks, as and when they want to, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/dcfc797f92efab73632833236163e825.png)Code folding
    drop downs in R Markdown'
  prefs: []
  type: TYPE_NORMAL
- en: So that wraps up my next ten random R tips. I hope some of these were helpful,
    and please feel free to add any of your own tips to the comments for other users
    to read.
  prefs: []
  type: TYPE_NORMAL
- en: '*Originally I was a Pure Mathematician, then I became a Psychometrician and
    a Data Scientist. I am passionate about applying the rigor of all those disciplines
    to complex people questions. I’m also a coding geek and a massive fan of Japanese
    RPGs. Find me on *[*LinkedIn*](https://www.linkedin.com/in/keith-mcnulty/?source=post_page---------------------------)* or
    on *[*Twitter*](https://twitter.com/dr_keithmcnulty?source=post_page---------------------------)*.*'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/1577c9fdbba93cb66f748894d08f0a6b.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Bio: Keith McNulty** is a Data Scientist at McKinsey & Company.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/ten-more-random-useful-things-in-r-you-may-not-know-about-56a18da41292).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ten random useful things in R that you might not know about](/2019/06/ten-useful-things-r.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Make Stunning 3D Plots for Better Storytelling](/2019/07/stunning-3d-plots-better-storytelling.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Evolution of a ggplot](/2019/07/evolution-ggplot.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ten Years of AI in Review](https://www.kdnuggets.com/2023/06/ten-years-ai-review.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ten Key Lessons of Implementing Recommendation Systems in Business](https://www.kdnuggets.com/2022/07/ten-key-lessons-implementing-recommendation-systems-business.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Things You Need To Know About Data Management And Why It Matters…](https://www.kdnuggets.com/2022/05/6-things-need-know-data-management-matters-computer-vision.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 things you didn’t know about the SAS Academy for Data Science](https://www.kdnuggets.com/2022/07/sas-3-things-didnt-know-sas-academy-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Things You Should Know When Scaling Your Web Data-Driven Product](https://www.kdnuggets.com/2023/08/things-know-scaling-web-datadriven-product.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
