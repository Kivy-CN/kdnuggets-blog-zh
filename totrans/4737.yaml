- en: Introduction to Named Entity Recognition
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名实体识别介绍
- en: 原文：[https://www.kdnuggets.com/2018/12/introduction-named-entity-recognition.html](https://www.kdnuggets.com/2018/12/introduction-named-entity-recognition.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/12/introduction-named-entity-recognition.html](https://www.kdnuggets.com/2018/12/introduction-named-entity-recognition.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2018/12/introduction-named-entity-recognition.html?page=2#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](/2018/12/introduction-named-entity-recognition.html?page=2#comments)'
- en: '**By [Suvro Banerjee](https://www.linkedin.com/in/suvro-banerjee-9345442a/),
    Machine Learning Engineer @ Juniper Networks**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Suvro Banerjee](https://www.linkedin.com/in/suvro-banerjee-9345442a/)
    提供，Juniper Networks 的机器学习工程师**'
- en: '![Figure](../Images/a2074883fe2ffcaa945e3e563d66a2ab.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/a2074883fe2ffcaa945e3e563d66a2ab.png)'
- en: '[http://www.lovejustine.com/journal/whats-in-a-name](http://www.lovejustine.com/journal/whats-in-a-name)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.lovejustine.com/journal/whats-in-a-name](http://www.lovejustine.com/journal/whats-in-a-name)'
- en: '**Introduction**'
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**介绍**'
- en: In this article we will learn what is Named Entity Recognition also known as
    NER. We will discuss some of its use-cases and then evaluate few standard Python
    libraries using which we can quickly get started and solve problems at hand.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将学习什么是命名实体识别，也称为NER。我们将讨论一些应用场景，然后评估几个标准的Python库，以便我们可以快速入门并解决手头的问题。
- en: In the next series of articles we will get under the hood of this class of algorithms,
    get more sophisticated and will create our own NER from scratch.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的系列文章中，我们将深入了解这一类算法，变得更加复杂，并从零开始创建我们自己的NER。
- en: So, let’s begin this journey.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始这段旅程吧。
- en: '**What is Named Entity Recognition?**'
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**什么是命名实体识别？**'
- en: Named Entity Recognition, also known as entity extraction classifies named entities
    that are present in a text into pre-defined categories like “individuals”, “companies”,
    “places”, “organization”, “cities”, “dates”, “product terminologies” etc. It adds
    a wealth of semantic knowledge to your content and helps you to promptly understand
    the subject of any given text.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 命名实体识别，也称为实体提取，将文本中的命名实体分类到预定义的类别中，如“个人”、“公司”、“地点”、“组织”、“城市”、“日期”、“产品术语”等。它为你的内容添加了丰富的语义知识，并帮助你快速理解任何给定文本的主题。
- en: '**Few Use-Cases of Named Entity Recognition**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**命名实体识别的几个应用场景**'
- en: '**Classifying content for news providers**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**为新闻提供商分类内容**'
- en: '![Figure](../Images/b815a87ac2716f3ddc74ea9e5b03349e.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/b815a87ac2716f3ddc74ea9e5b03349e.png)'
- en: Classifying content for news providers
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为新闻提供商分类内容
- en: Named Entity Recognition can automatically scan entire articles and reveal which
    are the major people, organizations, and places discussed in them. Knowing the
    relevant tags for each article help in automatically categorizing the articles
    in defined hierarchies and enable smooth content discovery.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 命名实体识别可以自动扫描整个文章，并揭示其中讨论的主要人物、组织和地点。了解每篇文章的相关标签有助于自动将文章分类到定义的层级中，并实现顺畅的内容发现。
- en: '![](../Images/e4e39ec6d523783ac267d5dda631934e.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4e39ec6d523783ac267d5dda631934e.png)'
- en: '[https://www.paralleldots.com/named-entity-recognition](https://www.paralleldots.com/named-entity-recognition)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.paralleldots.com/named-entity-recognition](https://www.paralleldots.com/named-entity-recognition)'
- en: '**Efficient Search Algorithms**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**高效搜索算法**'
- en: '![](../Images/622381906c105a492266d0bfb74e2074.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/622381906c105a492266d0bfb74e2074.png)'
- en: Efficient search across the brands
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 跨品牌的高效搜索
- en: Let’s suppose you are designing an internal search algorithm for an online publisher
    that has millions of articles. If for every search query the algorithm ends up
    searching all the words in millions of articles, the process will take a lot of
    time. Instead, if Named Entity Recognition can be run once on all the articles
    and the relevant entities (tags) associated with each of those articles are stored
    separately, this could speed up the search process considerably. With this approach,
    a search term will be matched with only the small list of entities discussed in
    each article leading to faster search execution.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在为一个拥有数百万篇文章的在线出版商设计内部搜索算法。如果每个搜索查询都需要在数百万篇文章中搜索所有单词，这个过程将花费大量时间。相反，如果对所有文章运行一次命名实体识别，并将每篇文章相关的实体（标签）单独存储，这将显著加快搜索过程。采用这种方法，搜索词只会与每篇文章中讨论的小列表实体匹配，从而实现更快的搜索执行。
- en: '**Customer Support**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**客户支持**'
- en: '![](../Images/eb3d5610b873e5999fede251aaea1d3d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/eb3d5610b873e5999fede251aaea1d3d.png)'
- en: Customer support on Twitter
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Twitter上的客户支持
- en: Say you are handling the customer support department of an electronic store
    with multiple branches worldwide, you go through a number mentions in your customers’
    feedback. Like this for instance.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说你在一个拥有多个全球分支的电子产品店处理客户支持部门，你会看到很多客户反馈中的提及。比如下面这个。
- en: Now, if you pass it through the Named Entity Recognition API, it pulls out the
    entities Bandra (location) and Fitbit (Product). This can be then used to categorize
    the complaint and assign it to the relevant department within the organization
    that should be handling this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你通过命名实体识别API处理它，它会提取出Bandar（地点）和Fitbit（产品）这两个实体。然后，这些信息可以用于对投诉进行分类，并将其分配到组织内应该处理该问题的相关部门。
- en: '![](../Images/55870accc39a49c91bc8dde051ff3247.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/55870accc39a49c91bc8dde051ff3247.png)'
- en: '[https://www.paralleldots.com/named-entity-recognition](https://www.paralleldots.com/named-entity-recognition)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.paralleldots.com/named-entity-recognition](https://www.paralleldots.com/named-entity-recognition)'
- en: '**Standard Libraries to use Named Entity Recognition**'
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**用于命名实体识别的标准库**'
- en: I will discuss three standard libraries which are used a lot in Python to perform
    NER. I am sure there are many more and would encourage readers to add them in
    the comment section.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我将讨论三个在Python中广泛使用的标准库来执行NER。我相信还有许多其他库，鼓励读者在评论区添加它们。
- en: Stanford NER
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 斯坦福NER
- en: spaCy
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: spaCy
- en: NLTK
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NLTK
- en: '**Stanford NER**'
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**斯坦福NER**'
- en: '![](../Images/3c0b59b2cf0ad6c0348e0188177eaa70.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/3c0b59b2cf0ad6c0348e0188177eaa70.png)'
- en: Stanford NER
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦福NER
- en: Stanford NER is a Java implementation of a Named Entity Recognizer. Stanford
    NER is also known as CRFClassifier. The software provides a general implementation
    of (arbitrary order) linear chain Conditional Random Field (CRF) sequence models.
    That is, by training your own models on labeled data, you can actually use this
    code to build sequence models for NER or any other task.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦福NER是一个Java实现的命名实体识别器。斯坦福NER也被称为CRFClassifier。该软件提供了一种通用的（任意顺序）线性链条件随机场（CRF）序列模型实现。也就是说，通过在标注数据上训练你自己的模型，你可以使用这段代码为NER或其他任何任务构建序列模型。
- en: Now NLTK (Natural Language Toolkit) is a great Python package that provides
    a set of natural languages corpora and APIs of wide varieties of NLP algorithms.
    NLTK comes along with the efficient Stanford NER implementation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在NLTK（自然语言工具包）是一个出色的Python包，提供了一组自然语言语料库和各种NLP算法的API。NLTK配有高效的斯坦福NER实现。
- en: Now with this background, let’s use Stanford NER.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些背景，让我们使用斯坦福NER。
- en: '**Install NLTK library**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装NLTK库**'
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Download Stanford NER library**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载斯坦福NER库**'
- en: Go to [https://nlp.stanford.edu/software/CRF-NER.html#Download](https://nlp.stanford.edu/software/CRF-NER.html#Download)
    and download the latest version, I am using Stanford Named Entity Recognizer version
    3.9.2.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[https://nlp.stanford.edu/software/CRF-NER.html#Download](https://nlp.stanford.edu/software/CRF-NER.html#Download)并下载最新版本，我使用的是斯坦福命名实体识别器版本3.9.2。
- en: I get a zip file which is called “stanford-ner-2018–10–16.zip” which needs to
    be unzipped and I renamed it to stanford_ner and placed it in the home folder.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到一个名为“stanford-ner-2018–10–16.zip”的压缩文件，需要解压缩，并将其重命名为stanford_ner，放置在主文件夹中。
- en: '![](../Images/b85b0cb6ac33197b453a0c056c9ae4b2.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b85b0cb6ac33197b453a0c056c9ae4b2.png)'
- en: Now the following Python code is written to perform the NER on some given text.
    The code is placed in the “bsuvro” folder, so that I can use the relative path
    to access the NER tagger engine (stanford-ner-3.9.2.jar) and NER model trained
    on the English corpus (classifiers/english.muc.7class.distsim.crf.ser.gz). You
    can see I am using 7class model which will give seven different output named entities
    like Location, Person, Organization, Money, Percent, Date, Time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在以下Python代码用于对一些给定的文本执行NER。代码放在“bsuvro”文件夹中，以便我可以使用相对路径来访问NER标记器引擎（stanford-ner-3.9.2.jar）和训练有素的英语语料库的NER模型（classifiers/english.muc.7class.distsim.crf.ser.gz）。你可以看到我使用的是7class模型，它将给出七种不同的命名实体输出，如地点、人物、组织、货币、百分比、日期、时间。
- en: You can also use —
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用—
- en: 'english.all.3class.distsim.crf.ser.gz: Location, Person and Organization'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'english.all.3class.distsim.crf.ser.gz: 地点、人物和组织'
- en: 'english.conll.4class.distsim.crf.ser.gz: Location, Person, Organization and
    Misc'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'english.conll.4class.distsim.crf.ser.gz: 地点、人物、组织和其他'
- en: Stanford Named Entity Recognition
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦福命名实体识别
- en: The output of the above code is below and you can see how the words are tagged
    as named entities. Note “O” is something which is not tagged or can be called
    as “Others”.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下，你可以看到单词被标记为命名实体。注意“O”是指未标记的内容，也可以称为“其他”。
- en: '![](../Images/0b4d2ec37f3bb1a670c628b5ab320996.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0b4d2ec37f3bb1a670c628b5ab320996.png)'
- en: Output of the Stanford NER tagger
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Stanford NER 标记器的输出
- en: Now, let’s move to the next library called spaCy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们转到下一个库，称为 spaCy。
- en: '**spaCy**'
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**spaCy**'
- en: '![](../Images/a42dc3316f0aad5df22ed590780564d8.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a42dc3316f0aad5df22ed590780564d8.png)'
- en: spaCy NER
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy NER
- en: spaCy is known for industrial-strength natural language processing library in
    Python. It has been written in Cython which is a superset of Python programming
    language with C-like performance.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy 以其工业级自然语言处理库在 Python 中而闻名。它是用 Cython 编写的，Cython 是 Python 编程语言的超集，具有类似
    C 的性能。
- en: Although I wish to go in details about spaCy as it has lot of interesting NLP
    modules, but I will focus here on the NER tagging. I will definitely have a separate
    series on exploring spaCy.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我希望详细介绍 spaCy，因为它有很多有趣的 NLP 模块，但我将在这里专注于 NER 标记。我一定会有一个单独的系列来探索 spaCy。
- en: '**Install spaCy library and download the “en” (English) model**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 spaCy 库并下载“en”（英语）模型**'
- en: '[PRE1]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: spaCy NER
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy NER
- en: The output of the above code -
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出 -
- en: '![](../Images/a6e4242a853817841cfdd160c27e16d3.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6e4242a853817841cfdd160c27e16d3.png)'
- en: Output from spaCy NER
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: spaCy NER 的输出
- en: Now this supports following Entity types-
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它支持以下实体类型 -
- en: '![](../Images/fde3bd8a3c08653096974a233087b63c.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/fde3bd8a3c08653096974a233087b63c.png)'
- en: '[https://spacy.io/api/annotation#pos-tagging](https://spacy.io/api/annotation#pos-tagging)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://spacy.io/api/annotation#pos-tagging](https://spacy.io/api/annotation#pos-tagging)'
- en: '* * *'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT 工作'
- en: '* * *'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Transfer Learning for Image Recognition and Natural Language Processing](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[图像识别和自然语言处理的迁移学习](https://www.kdnuggets.com/2022/01/transfer-learning-image-recognition-natural-language-processing.html)'
- en: '[The Evolution of Speech Recognition Metrics](https://www.kdnuggets.com/2022/10/evolution-speech-recognition-metrics.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[语音识别指标的演变](https://www.kdnuggets.com/2022/10/evolution-speech-recognition-metrics.html)'
- en: '[5 IT Jobs That Are High in Demand But Don’t Get Enough Recognition](https://www.kdnuggets.com/5-it-jobs-that-are-high-in-demand-but-dont-get-enough-recognition)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个需求量大但未受到足够认可的 IT 职业](https://www.kdnuggets.com/5-it-jobs-that-are-high-in-demand-but-dont-get-enough-recognition)'
- en: '[A Gentle Introduction to Natural Language Processing](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理的温和介绍](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
- en: '[An Introduction to Hill Climbing Algorithm in AI](https://www.kdnuggets.com/2022/07/introduction-hill-climbing-algorithm-ai.html)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AI 中的爬山算法简介](https://www.kdnuggets.com/2022/07/introduction-hill-climbing-algorithm-ai.html)'
- en: '[An Introduction to SMOTE](https://www.kdnuggets.com/2022/11/introduction-smote.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SMOTE 简介](https://www.kdnuggets.com/2022/11/introduction-smote.html)'
