- en: Five Ways to do Conditional Filtering in Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pandas中的五种条件过滤方法
- en: 原文：[https://www.kdnuggets.com/2022/12/five-ways-conditional-filtering-pandas.html](https://www.kdnuggets.com/2022/12/five-ways-conditional-filtering-pandas.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[原文](https://www.kdnuggets.com/2022/12/five-ways-conditional-filtering-pandas.html)'
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/0480a3eadb799c1eabeb5cdd573d639c.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas中的五种条件过滤方法](../Images/0480a3eadb799c1eabeb5cdd573d639c.png)'
- en: Image by Editor
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑者提供的图片
- en: When I started my journey into data science, I learned R as my first programming
    language.  I became very familiar using the dplyr package to filter data based
    on certain conditions.  Fast forward a few years to when I started using Python
    and I initially had an aversion to Pandas because of how different it was from
    dplyr.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当我开始我的数据科学之旅时，我选择了R作为我的第一个编程语言。我变得非常熟悉使用dplyr包来根据某些条件过滤数据。几年后，当我开始使用Python时，最初对Pandas感到有些排斥，因为它与dplyr的差异很大。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: As time went on, I became more comfortable using Pandas methods to filter data
    and it became less intimidating.  This blog post is a walkthrough of five ways
    to conditionally filter data using Pandas, using a single condition filter and
    then a multi-condition filter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我变得越来越习惯使用Pandas方法来过滤数据，它变得不再那么令人畏惧。本文是一个关于使用Pandas进行条件过滤的五种方法的教程，包括单条件过滤和多条件过滤。
- en: 'The filtering techniques used in this post are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本文使用的过滤技术有：
- en: Pandas filtering with selection brackets
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas的选择括号过滤
- en: 'Pandas series methods: isin(), between(), contains()'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pandas系列方法：isin()、between()、contains()
- en: Defining separate filters outside of selection bracket filtering
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在选择括号过滤之外定义单独的过滤器
- en: query()
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: query()
- en: loc[]
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: loc[]
- en: 'Bonus: Using the pandas filter() method'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加内容：使用pandas的filter()方法
- en: The Data
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据
- en: The dataset for this post comes from “The Vehicle Dataset” by Nehla Birla hosted
    on [Kaggle.com](https://www.kaggle.com/datasets/nehalbirla/vehicle-dataset-from-cardekho)
    and contains information about used cars for sale.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本文的数据集来源于Nehla Birla发布的“车辆数据集”，托管在[Kaggle.com](https://www.kaggle.com/datasets/nehalbirla/vehicle-dataset-from-cardekho)，包含有关待售二手车的信息。
- en: To begin, I import Pandas and read in the dataset.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我导入Pandas并读取数据集。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/7a7be2d09bfd9072799e7003b5a5f222.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas中的五种条件过滤方法](../Images/7a7be2d09bfd9072799e7003b5a5f222.png)'
- en: 'To get a feeling for the syntax and readability of each method, this post looks
    at two examples to filter the vehicle dataset: one simple and one with multiple
    conditions.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了感受每种方法的语法和可读性，本文使用两个示例来过滤车辆数据集：一个简单的过滤和一个多条件的过滤。
- en: 'Simple filter: find all cars from the year 2013 and newer'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单过滤：查找所有2013年及以后的车辆
- en: 'Multi-condition filter: Find all Hondas from the years 2013, 2014, and 2015
    between the prices 300000 and 450000 (inclusive).'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多条件过滤：查找所有2013年、2014年和2015年的本田车型，价格在300000到450000之间（含）。
- en: 'Filtering Method 1: Selection Brackets'
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤方法1：选择括号
- en: 'Finding all the vehicles that have a year of 2013 or newer is a fairly standard
    Pandas filtering task: select the column of the dataset to filter on, tell it
    what value to filter against, and plug that condition into brackets for the entire
    dataframe.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 查找所有2013年或更新年份的车辆是一个相当标准的Pandas过滤任务：选择要过滤的数据集列，告诉它要过滤的值，并将该条件插入整个数据框的括号中。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![Pandas中的五种条件过滤方法](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
- en: If we want to make our multi-condition search, we can put each individual filters
    inside parentheses () separated by our Boolean search criteria (& for and, | for
    or, and ~ for not).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想进行多条件搜索，我们可以将每个单独的过滤器放在括号 () 内，通过布尔搜索条件分隔（& 表示和，| 表示或，~ 表示非）。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
- en: These multiple conditions technically work, but the readability of this code
    is not great.  There are brackets and parentheses all over the place.  To clean
    up the code and use fewer conditions, pandas has various methods that we can apply
    for the same results, one of which we just used in the code chunk above, called
    str.contains().
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这些多个条件从技术上讲是有效的，但这段代码的可读性不佳。到处都是括号和圆括号。为了简化代码并使用更少的条件，pandas 提供了各种方法，我们可以使用其中之一来获得相同的结果，这里我们在上面的代码块中使用了
    str.contains()。
- en: 'Filtering Method 2: Selection Brackets with Series Functions'
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤方法 2：带有系列函数的选择括号
- en: There are numerous pandas.Series methods we can apply to our columns.  They
    are listed in the [Pandas documentation](https://pandas.pydata.org/docs/reference/api/pandas.Series.html). 
    The reason we look at series methods as we filter is because each column of our
    Pandas.DataFrame individually is a Pandas.Series element, so we can apply Pandas.Series
    methods and functionality to it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将许多 pandas.Series 方法应用于我们的列。这些方法列在[Pandas 文档](https://pandas.pydata.org/docs/reference/api/pandas.Series.html)中。我们在过滤时查看系列方法的原因是因为
    Pandas.DataFrame 的每一列都是一个 Pandas.Series 元素，因此我们可以将 Pandas.Series 方法和功能应用于它。
- en: 'There are numerous methods we could use with the vehicles dataset, but to filter
    the data with our multiple condition example, we will use:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在车辆数据集上使用许多方法，但为了使用多个条件的例子来过滤数据，我们将使用：
- en: isin() – check to see if the series values are in a given list
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: isin() – 检查系列值是否在给定列表中
- en: str.contains() – check to see if a string is in the series
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: str.contains() – 检查系列中是否包含某个字符串
- en: between() – find series value that are between two values
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: between() – 查找介于两个值之间的系列值
- en: We will use isin() to check which vehicles meet our years of interest, str.contains()
    to find which vehicles have Honda in the name, and between() to find vehicles
    in our price range.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 isin() 来检查哪些车辆符合我们感兴趣的年份，使用 str.contains() 查找哪些车辆名称中包含 Honda，以及使用 between()
    查找价格范围内的车辆。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
- en: This cleans up the code somewhat, and takes advantage of a few Pandas.Series
    methods, but the code still isn’t exactly readable.  To make this look better,
    we can drop our code across multiple lines, one line per filtering action.  The
    way to do that is by putting regular parentheses just inside our initial dataframe
    selection brackets, then inserting all conditions inside these parentheses.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这在一定程度上简化了代码，并利用了一些 Pandas.Series 方法，但代码仍然不是特别可读。为了使其看起来更好，我们可以将代码分成多行，每行一个过滤操作。这样做的方法是在初始数据框选择括号内部放入普通圆括号，然后将所有条件插入这些圆括号中。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
- en: 'Filtering Method 3: Selection Brackets with External Filters and Series Methods'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤方法 3：带有外部过滤器和系列方法的选择括号
- en: A blend of the two methods above, we can define filters outside of our selection
    brackets as variables and then call each variable inside the selection brackets. 
    This is a clean way to write each filter on its own individual line and then call
    all filters in one line of code.  It means less overall parentheses and line breaks
    throughout the code.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结合上述两种方法，我们可以将过滤器定义在选择括号外部作为变量，然后在选择括号内部调用每个变量。这是一种干净的方式，可以将每个过滤器写在单独的一行，然后在一行代码中调用所有过滤器。这意味着在整个代码中减少了总体上的括号和换行符。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
- en: 'Filtering Method 4: query()'
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤方法 4：query()
- en: 'I first heard of pandas.Series.query a year or two ago on a podcast, and I
    wasn’t a fan at first.  Over time, it has really grown on me.  A query expression
    is a great way to subset data: they can be basic and easy or complex and powerful. 
    The query expression to subset vehicles with years 2013 and newer is simple. 
    You feed your filtering parameter(s) in as a string.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一两年前，我在播客中第一次听说 pandas.Series.query，一开始我并不喜欢。但随着时间的推移，它确实让我很喜欢。查询表达式是一种很好的数据子集化方式：它们可以很基础也可以很复杂和强大。用于子集化2013年及以后的车辆的查询表达式非常简单。你将过滤参数作为字符串传递进去。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
- en: 'As you move on to multi-condition filters, you can make your query string more
    complex.  Instead of typing & or | between your filter parameters, you simply
    type and or or, respectively.  Below is the code to write a query expression for
    our multi-condition filter.  *Note: to call variables that are inside the environment
    but outside of the DataFrame/ Series you are querying, you need to use an @ before
    calling the variable.  See the use of @ immediately before calling the list “years.”'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用多条件过滤器时，查询字符串会变得更复杂。你可以用 and 或 or 来代替 & 或 | 之间的过滤参数。以下是为我们的多条件过滤器编写查询表达式的代码。*注意：要调用环境中但在
    DataFrame/Series 外部的变量，你需要在调用变量之前加上 @。请注意 @ 在调用列表“years”之前的使用。*
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
- en: This is a really neat way to subset your data!  Yet, the more query parameters
    you add, the less readable it becomes.  To overcome this problem, using query,
    we can simply add \ at the place where we want a line break and continue the query
    expression on the next line.  If we want, we can maintain the notation of putting
    one filter condition per line.![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种非常简洁的数据子集化方式！然而，添加的查询参数越多，代码的可读性就会下降。为了解决这个问题，使用 query，我们可以在想要换行的地方添加 \，并在下一行继续查询表达式。如果需要，我们可以保持每个过滤条件单独一行的表示方式。![在
    Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)
- en: 'Filtering Method 5: loc[]'
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤方法 5：loc[]
- en: I really enjoy the power that comes with using python lambda functions.  How
    can we translate lambda into filtering the vehicles dataset with our conditions? 
    With the simple, single condition filter we have been applying, we call loc off
    of our dataframe, and with lambda, we can insert our condition.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的很喜欢使用 Python lambda 函数所带来的强大功能。我们如何将 lambda 转换为用我们的条件过滤车辆数据集？对于我们一直在应用的简单单条件过滤，我们调用
    dataframe 上的 loc，并且通过 lambda，我们可以插入我们的条件。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/96259f66bca3f35ebd781ba642fdfb90.png)'
- en: If we want to add multiple conditions, we can just chain another loc off the
    results of the previous one.  However, if left on one line, there are brackets
    and periods everywhere!  It becomes very difficult to read.  To make this more
    readable, we can wrap the entire right side of our expression in parentheses and
    then can put each loc filter on its own line.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要添加多个条件，只需在前一个结果上链式调用另一个 loc。然而，如果放在一行上，会到处都是括号和句点！这变得非常难以阅读。为了提高可读性，我们可以将表达式的整个右侧括在括号中，然后将每个
    loc 过滤器放在自己的行上。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件过滤的五种方法](../Images/834a4bcc8c642370a3d9eb5b09485939.png)'
- en: 'Filtering Bonus: Use Pandas.DataFrame.filter'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤奖金：使用 Pandas.DataFrame.filter
- en: As an interesting aside, the Pandas.DataFrame method filter()does not allow
    you to filter datasets based on data inside the dataset, like the name implied
    to me originally.  Rather, the method filter() allows you to filter based on row/
    index names and/ or columns names as a way to subset data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，Pandas.DataFrame 的 filter() 方法并不允许你基于数据集中的数据来过滤数据集，尽管它的名字原本给我的印象是这样。实际上，filter()
    方法允许你基于行/索引名称和/或列名称来过滤数据，从而对数据进行子集化。
- en: Filtering the vehicle dataset that only has a few columns and the index names
    as integers does not exactly demonstrate the power of filter().  We could make
    the values inside the “name” column the index, which consists of car make and
    model.  However, there are then various rows that have the same make and model
    and would have the same index, which is not a best practice.  Therefore, to use
    make and model but also make each index unique, the current integer index is concatenated
    to the row’s make and model, and then that becomes the new index.  You may or
    may not want to do that in practice, but I wanted to do it just to demonstrate
    the method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 筛选只有少数列和整数作为索引名称的车辆数据集，并不能完全展示 filter() 的强大功能。我们可以将“name”列中的值设置为索引，这些值包括汽车的品牌和型号。然而，很多行的品牌和型号是相同的，会有相同的索引，这并不是最佳实践。因此，为了使用品牌和型号，同时使每个索引唯一，我们将当前的整数索引与行的品牌和型号连接起来，然后将其作为新索引。你在实际操作中可能会选择不这样做，但我这样做是为了演示方法。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/0075643c607d15f324d105eb346d0627.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件筛选的五种方法](../Images/0075643c607d15f324d105eb346d0627.png)'
- en: With this new index, we can use the Pandas.DataFrame method filter() to filter
    based on index name.  With filter(), we can search for particular indices using
    the input like (which is similar to str.contains() like we used before) or we
    can search for indices by using regular expressions.  To filter the data based
    on the multi-condition filter we have used throughout this post, we can return
    the same results shown in the other five techniques.  The only difference now
    is that we are using index values to help filter results.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新索引，我们可以使用 Pandas.DataFrame 方法 filter() 基于索引名称进行筛选。通过 filter()，我们可以使用类似于之前使用的
    str.contains() 的输入来搜索特定的索引，或者可以使用正则表达式来搜索索引。为了根据本篇文章中使用的多条件筛选来过滤数据，我们可以返回与其他五种技术相同的结果。唯一的区别是我们现在使用索引值来帮助筛选结果。
- en: '![Five Ways to do Conditional Filtering in Pandas](../Images/378c8e5cb3812c09022595e69afcb0a4.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![在 Pandas 中进行条件筛选的五种方法](../Images/378c8e5cb3812c09022595e69afcb0a4.png)'
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That’s it!  We have seen five techniques and one bonus technique to help slice
    and dice your data given one or multiple filtering criteria.  I’m not sure which
    one I like the best; I suppose it depends on the use case.  I can see myself using
    query() for the ease and readability of query string expressions, but I can also
    see myself using loc[] with lambda functions!
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经看到五种技术和一种额外的技术，帮助你在给定一个或多个筛选标准的情况下对数据进行切片和切块。我不确定我最喜欢哪一种；我想这取决于使用场景。我能看到自己使用
    query() 由于查询字符串表达式的简便性和可读性，但我也能看到自己使用 loc[] 和 lambda 函数！
- en: I hope this post gave you a few ideas of how you can apply some powerful Pandas
    functionality to your data!
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这篇文章能给你一些如何将强大的 Pandas 功能应用到数据中的想法！
- en: '**[Bryan Kolano](https://www.linkedin.com/in/bryan-kolano/)** is an active
    duty U.S. Army officer and data scientist living outside of Washington, D.C. When
    he is not trying to improve his Python skills, he finds himself spending time
    with his wife and four kids or studying Spanish and French.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**[布莱恩·科拉诺](https://www.linkedin.com/in/bryan-kolano/)** 是一名现役的美国陆军军官和数据科学家，居住在华盛顿特区附近。当他不在提升
    Python 技能时，他会花时间陪伴他的妻子和四个孩子，或者学习西班牙语和法语。'
- en: More On This Topic
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[5 Ways of Filtering Python Lists](https://www.kdnuggets.com/2022/11/5-ways-filtering-python-lists.html)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 列表的 5 种筛选方法](https://www.kdnuggets.com/2022/11/5-ways-filtering-python-lists.html)'
- en: '[How to Use Conditional Formatting in Pandas to Enhance Data Visualization](https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在 Pandas 中使用条件格式化来增强数据可视化](https://www.kdnuggets.com/how-to-use-conditional-formatting-in-pandas-to-enhance-data-visualization)'
- en: '[Become a Data Science Professional in Five Steps](https://www.kdnuggets.com/2022/03/become-data-science-professional-five-steps.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在五个步骤中成为数据科学专业人士](https://www.kdnuggets.com/2022/03/become-data-science-professional-five-steps.html)'
- en: '[Top Five SQL Window Functions You Should Know For Data Science Interviews](https://www.kdnuggets.com/2022/01/top-five-sql-window-functions-know-data-science-interviews.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[你应该知道的五种 SQL 窗口函数，用于数据科学面试](https://www.kdnuggets.com/2022/01/top-five-sql-window-functions-know-data-science-interviews.html)'
- en: '[KDnuggets™ News 22:n03, Jan 19: A Deep Look Into 13 Data…](https://www.kdnuggets.com/2022/n03.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets™ 新闻 22:n03，1月19日：深入了解 13 个数据…](https://www.kdnuggets.com/2022/n03.html)'
- en: '[Five Signs of an Effective Data Science Manager](https://www.kdnuggets.com/2022/06/five-signs-effective-data-science-manager.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[有效数据科学经理的五个标志](https://www.kdnuggets.com/2022/06/five-signs-effective-data-science-manager.html)'
