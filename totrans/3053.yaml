- en: 'Machine Learning Classification: A Dataset-based Pictorial'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/11/machine-learning-classification-dataset-based-pictorial.html](https://www.kdnuggets.com/2018/11/machine-learning-classification-dataset-based-pictorial.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: The concept of classification in machine learning is concerned with building
    a model that separates data into distinct classes. This model is built by inputting
    a set of training data for which the classes are pre-labeled in order for the
    algorithm to learn from. The model is then used by inputting a different dataset
    for which the classes are withheld, allowing the model to predict their class
    membership based on what it has learned from the training set. Well-known classification
    schemes include decision trees and Support Vector Machines, among a whole host
    of others. As this type of algorithm requires explicit class labeling, classification
    is a form of supervised learning.
  prefs: []
  type: TYPE_NORMAL
- en: This is, conceptually, quite intuitive and easy to understand. But the uninitiated
    may ask how this plays out in real life. In order to relate machine learning classification
    to the practical, let's see how this concept plays out, step by step, specifically
    in relation to a dataset, as we go from a single comma separated value (CSV) file
    -- a common means of storing and feeding data into a machine learning system --
    to a model which can be used to make predictions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our exercise, we will make the following assumptions:'
  prefs: []
  type: TYPE_NORMAL
- en: We will use the time-tested [**adult dataset**](https://archive.ics.uci.edu/ml/datasets/adult)
    for our example
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will omit the details of discussing any pre-processing of our dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As such, we will ignore the presence of categorical features in our dataset,
    which would need to be converted to numeric representation in real life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also ignore the presence of null values which would also need to be
    dealt with in real life
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will assume that we are interested in a conventional train/test
    split of our dataset (as opposed to some holdout method such as cross-validation)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We start with having a look at our raw dataset, which you will find in Figure
    1\. This includes all of the data which would be necessary to complete a machine
    learning task. We have taken only the top 25 lines of the CSV file for our example.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can click on all images to enlarge for a better look.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/g1LsJL/supervised-ds-illustrated-1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/397a807afe46f0fabc1e74c31da6f0a2.png)](https://image.ibb.co/g1LsJL/supervised-ds-illustrated-1.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 1: Raw adult dataset.**'
  prefs: []
  type: TYPE_NORMAL
- en: We have a set of characteristic variables, or **features**, which describe an
    instance of some observation. Rows are the observations, or instances, while columns
    are features. This is true of all columns excepts the right-most, which is our
    **target**, a set of categories which we will attempt to predict by their relevant
    feature values -- this is the essence of classification. The "other" category
    of supervised learning, regression, is almost identical, conceptually; the sole
    difference is that, while prediction is intended to learn how to predict for a
    finite set of categorical values, regression is intended to predict continuous
    numeric values.
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2 shows our dataset separated into features to the left of the red line,
    and targets to the right.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/h5NTsf/supervised-ds-illustrated-2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/1400f68317bd29d1311e64b7e6398d5c.png)](https://image.ibb.co/h5NTsf/supervised-ds-illustrated-2.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 2: Features are to the left of the red line, targets to the right.**'
  prefs: []
  type: TYPE_NORMAL
- en: Features for a particular instance are grouped together into a **feature vector**,
    an example of which is outlined in Figure 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/nsQgCf/supervised-ds-illustrated-3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/e6639666dcdf666886858d617b3f941d.png)](https://image.ibb.co/nsQgCf/supervised-ds-illustrated-3.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 3: A feature vector shown in the context of a full dataset.**'
  prefs: []
  type: TYPE_NORMAL
- en: An **instance** is made up of a feature vector and a corresponding target, as
    shown in Figure 4.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/c0p8sf/supervised-ds-illustrated-4.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/e9c289c79960e5e1e900681f6012d6c4.png)](https://image.ibb.co/c0p8sf/supervised-ds-illustrated-4.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 4: An instance (or observation) encompasses both a feature vector
    and a corresponding target.**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have defined what the full dataset is made of, we have some decisions
    to make. As we eventually want to move to modeling our data and using what is
    learned to classify other data (not the same data we used to build the model with),
    we will need to separating the dataset into **training** and **testing** datasets.
    This is usually accomplished by splitting dataset at some point, noted by the
    percentage of the dataset one would like to use for training. In this example,
    we will use 20 of our data instances for training (80%, a split which makes generally
    is in the range of what makes sense), and the remaining 5 data instances for testing
    what we have learned. This split can be shown in Figure 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/jifRdL/supervised-ds-illustrated-5.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/09503f43eba0b4f5a6928705fd0386e7.png)](https://image.ibb.co/jifRdL/supervised-ds-illustrated-5.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 5: Splitting our dataset into training (above the yellow line) and
    testing (below the yellow line) sets.**'
  prefs: []
  type: TYPE_NORMAL
- en: At this point we know enough about our single entity dataset to slice it up
    into pieces which will be useful for use in our machine learning algorithm. We
    will require a separation of features and targets in both our training and testing
    sets (we will overlook the details of ensuring a **random** split of instances).
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming we are working the Python ecosystem (with which I am familiar), such
    as split can be easily accomplished with a tool such as [Scikit-learn''s `train_test_split`
    function](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html),
    a sample of which is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After invocation, we are left with:'
  prefs: []
  type: TYPE_NORMAL
- en: Training feature matrix (**X_train**), top left (of Figure 6)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Training target vector (**y_train**), top right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing feature matrix (**X_test**), bottom left
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing target vector (**y_test**), bottom right
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/nx76dL/supervised-ds-illustrated-6.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/8dc916b75ef50568bbed112b0b12efa5.png)](https://image.ibb.co/nx76dL/supervised-ds-illustrated-6.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 6: Our training and testing splits, along with feature and target
    separation.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to learn the mapping of features to targets in our training set,
    in order to apply this mapping to our testing data to see how accurate our model
    is. This learning process results, shown conceptually in Figure 7, in a function
    which can then be used afterward. This is the essence of supervised machine learning:
    feeding in labeled data instances, learning just such a mapping **function**,
    and applying this function to data for which labels are not known (or are intentionally
    withheld).'
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/bJEmdL/supervised-ds-illustrated-7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/4e32af82d18897ccf90a657e6f422331.png)](https://image.ibb.co/bJEmdL/supervised-ds-illustrated-7.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 7: Going from raw data to useful predictive function, during modeling.**'
  prefs: []
  type: TYPE_NORMAL
- en: After training, the function can be applied to our testing set, and **predictions**
    can be made based on the features in the testing instances (shown in Figure 8).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://image.ibb.co/gxY1Cf/supervised-ds-illustrated-8.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '[![Figure](../Images/1857a6aac59aa5149ed68a50d9727ab0.png)](https://image.ibb.co/gxY1Cf/supervised-ds-illustrated-8.png)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Figure 8: Using the learned function to make predictions on the testing set.**'
  prefs: []
  type: TYPE_NORMAL
- en: The last major step would be to measure the effectiveness of our model, via
    a metric such as accuracy (note that we did not discuss testing vs. validation
    sets). Our predicted targets during the testing phase would be compared to the
    ground truth (actual) targets of the testing set, and noted. In practical terms,
    this would compare the elements of a new vector (say, **y_pred**) to the elements
    of the existing **y_test** vector. This shows us how effective our model was,
    and gives us a baseline to which we can compare future classification models (functions)
    learned using alternative algorithms, or even using the same algorithm with different
    hyperparameter settings.
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[A Concise Explanation of Learning Algorithms with the Mitchell Paradigm](/2018/10/mitchell-paradigm-concise-explanation-learning-algorithms.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Data Science Puzzle, Revisited](/2017/01/data-science-puzzle-revisited.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine Learning Algorithms: A Concise Technical Overview](/2017/08/machine-learning-algorithms-concise-technical-overview-part-1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Machine Learning Algorithms for Classification](https://www.kdnuggets.com/2022/03/machine-learning-algorithms-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Scikit-learn for Classification in Machine Learning](https://www.kdnuggets.com/getting-started-with-scikit-learn-for-classification-in-machine-learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[More Performance Evaluation Metrics for Classification Problems You…](https://www.kdnuggets.com/2020/04/performance-evaluation-metrics-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fine-Tuning BERT for Tweets Classification with HuggingFace](https://www.kdnuggets.com/2022/01/finetuning-bert-tweets-classification-ft-hugging-face.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Logistic Regression for Classification](https://www.kdnuggets.com/2022/04/logistic-regression-classification.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
