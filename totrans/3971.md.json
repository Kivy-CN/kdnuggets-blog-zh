["```py\ndata = [{'name': 'Alice', 'age': 25, 'score': 90},\n    \t{'name': 'Bob', 'age': 30, 'score': 85},\n    \t{'name': 'Charlie', 'age': 22, 'score': 95}]\n\n# Using a loop\nresult = []\nfor row in data:\n    if row['score'] > 85:\n        result.append(row['name'])\n\nprint(result)\n```", "```py\nOutput  >>> ['Alice', 'Charlie']\n```", "```py\ndata = [{'name': 'Alice', 'age': 25, 'score': 90},\n    \t{'name': 'Bob', 'age': 30, 'score': 85},\n    \t{'name': 'Charlie', 'age': 22, 'score': 95}]\n\n# Using a list comprehension\nresult = [row['name'] for row in data if row['score'] > 85]\n\nprint(result)\n```", "```py\nOutput >>> ['Alice', 'Charlie']\n```", "```py\nimport csv\nfrom typing import Generator, Dict\n\ndef read_large_csv_with_generator(file_path: str) -> Generator[Dict[str, str], None, None]:\n    with open(file_path, 'r') as file:\n        reader = csv.DictReader(file)\n        for row in reader:\n            yield row\n\n# Path to a sample CSV file\nfile_path = 'large_data.csv'\n\nfor row in read_large_csv_with_generator(file_path):\n    print(row)\n```", "```py\n from functools import cache\nfrom typing import Tuple\nimport numpy as np\n\n@cache\ndef euclidean_distance(pt1: Tuple[float, float], pt2: Tuple[float, float]) -> float:\n    return np.sqrt((pt1[0] - pt2[0]) ** 2 + (pt1[1] - pt2[1]) ** 2)\n\ndef assign_clusters(data: np.ndarray, centroids: np.ndarray) -> np.ndarray:\n    clusters = np.zeros(data.shape[0])\n    for i, point in enumerate(data):\n        distances = [euclidean_distance(tuple(point), tuple(centroid)) for centroid in centroids]\n        clusters[i] = np.argmin(distances)\n    return clusters\n```", "```py\ndata = np.array([[1.0, 2.0], [2.0, 3.0], [3.0, 4.0], [8.0, 9.0], [9.0, 10.0]])\ncentroids = np.array([[2.0, 3.0], [8.0, 9.0]])\n\nprint(assign_clusters(data, centroids))\n```", "```py\nOutputs >>> [0\\. 0\\. 0\\. 1\\. 1.]\n```", "```py\nimport sqlite3\n\ndef query_db(db_path):\n    with sqlite3.connect(db_path) as conn:\n        cursor = conn.cursor()\n        cursor.execute(query)\n        for row in cursor.fetchall():\n            yield row\n```", "```py\nquery = \"SELECT * FROM users\"\nfor row in query_database('people.db', query):\n    print(row)\n```", "```py\nimport numpy as np\n\n# Sample data\nscores_test1 = np.random.randint(0, 100, size=1000000)\nscores_test2 = np.random.randint(0, 100, size=1000000)\n\n# Using a loop\naverage_scores_loop = []\nfor i in range(len(scores_test1)):\n    average_scores_loop.append((scores_test1[i] + scores_test2[i]) / 2)\n\nprint(average_scores_loop[:10])\n```", "```py\n# Using NumPy vectorized operations\naverage_scores_vectorized = (scores_test1 + scores_test2) / 2\n\nprint(average_scores_vectorized[:10])\n```", "```py\nsetup = \"\"\"\nimport numpy as np\n\nscores_test1 = np.random.randint(0, 100, size=1000000)\nscores_test2 = np.random.randint(0, 100, size=1000000)\n\"\"\"\n\nloop_code = \"\"\"\naverage_scores_loop = []\nfor i in range(len(scores_test1)):\n    average_scores_loop.append((scores_test1[i] + scores_test2[i]) / 2)\n\"\"\"\n\nvectorized_code = \"\"\"\naverage_scores_vectorized = (scores_test1 + scores_test2) / 2\n\"\"\"\n\nloop_time = timeit.timeit(stmt=loop_code, setup=setup, number=10)\nvectorized_time = timeit.timeit(stmt=vectorized_code, setup=setup, number=10)\n\nprint(f\"Loop time: {loop_time:.6f} seconds\")\nprint(f\"Vectorized time: {vectorized_time:.6f} seconds\")\n```", "```py\nOutput >>>\nLoop time: 4.212010 seconds\nVectorized time: 0.047994 seconds\n```"]