- en: 3 More Google Colab Environment Management Tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/01/more-google-colab-environment-management-tips.html](https://www.kdnuggets.com/2019/01/more-google-colab-environment-management-tips.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: Google's Colab was greeted with all sorts of hype when it was first publicly
    released in early 2018\. After originally being quite excited about it, I wrote
    [a short post](/2018/02/essential-google-colaboratory-tips-tricks.html) with a
    few tips for new users, which covered taking advantage of the free GPU runtime,
    installing additional third-party Python libraries, and uploading and using data
    files to your Colab environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Header image](../Images/f2a5d9754f4267cd5dd86c2c0a9ed1ec.png)'
  prefs: []
  type: TYPE_IMG
- en: Well, like every novelty, Colab's excitement wore off a bit after the initial
    euphoria. However, after dipping back into the books and needing a stable notebook
    environment *which I could access and share seamlessly between my notebook, workstation,
    and Chromebook*, I decided to give Colab another look. It turned out to be a good
    decision; I have been regularly using Colab for the past few months for *all*
    of my learning-related coding.
  prefs: []
  type: TYPE_NORMAL
- en: This post is a second entry in the short-but-hopefully-useful Google Colab environment
    tips series, and includes 3 more things I've learned while managing my own Colab
    coding environment while learning. I stress that this is what I am using for my
    *learning*, no mission-critical projects, and I am primarily using Colab as I
    can switch between my various machines seamlessly, while still having access to
    GPUs for training (and even TPUs).
  prefs: []
  type: TYPE_NORMAL
- en: Note that some of these are plain vanilla Jupyter tricks, so don't @ me.
  prefs: []
  type: TYPE_NORMAL
- en: '**0\. Get Colab out of the browser**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OK, this isn't really a Colab tip, but first get Colab out of the browser. If
    you're like me, your tab situation is sub-optimal. Sullying that up any further
    with both the Colab management interface **and** a bunch of notebooks won't help,
    so run Colab as its own standalone app. This is OS-dependent, but involves having
    the Colab "app" installed in your Chrome browser, and selecting both "Open as
    window" and "Create shortcuts..." from the app context menu, after which you need
    to find the shortcut and use it to open the app in its own window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Right-click](../Images/d8a2c5bd1d585486045c441491f12d1c.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it; now you open Colab in its very own window, like in the post header
    image, from its very own icon. I know, not really on topic, but still useful.
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Download a file to local computer**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is another simple one, but important enough to mention. A use case: you
    have created a Keras model and want to visualize the model. You call `plot_model`
    to create a PNG file, but since Colab virtual machines don''t give you permanency
    in file storage, you want to download the image. The following excerpt does it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Execute the cell and a pop up dialog prompts you for a download location. Which
    leads us to...
  prefs: []
  type: TYPE_NORMAL
- en: '**1(b). Display an image inline**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yeah, it''s elementary, but it took me a few to remember that I was working
    with more or less a regular Jupyter environment with Colab. So, to display the
    above image inline, use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A quick intuitive modification will allow you to inline all sorts of other
    files as you would expect. Lesson: remember you are using a plain old Jupyter
    notebook, more or less. OK, on to Colab stuff.'
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. Access your Google Drive filesystem**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's say I want to save that model image file to my Google Drive instead of
    my local computer. There are [all sorts of ways](https://colab.research.google.com/notebooks/io.ipynb)
    to get files in and out of Google Drive. I find this is the most straightforward
    way of getting CSV data, for example, out of Google Drive.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![GDrive auth code](../Images/f996dc6b9e01900fa6d41db2e7d1e871.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the link and entering the authorization code, you can access
    your drive as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![Colab GDrive ls](../Images/b240bde1eb37c12ce6c34973ab68db04.png)'
  prefs: []
  type: TYPE_IMG
- en: Sure, it isn't permanent, but it isn't much work, and seems more straightforward
    than using any of the other options, in my view (and is no less permanent). If
    you use something like [AutoKey](https://github.com/autokey/autokey), a desktop
    automation and text expansion tool, then often-used code excerpts and commands
    like this become even more trivial anyhow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Back on topic: now you can save files to (or get files from) Google Drive.
    Easy, so long as you are comfortable in the terminal... which you should be anyways.
    Either work with the data file where it is or move or copy it up a few directory
    levels to the Colab VM root. Since it disappears from here after dropping your
    instance, however, it makes more sense to me to just read the data from where
    it sits in the CSV file in the filesystem:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Use custom libraries and modules stored in Google Drive**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, what if you have custom Python libraries or modules you want to import into
    Colab projects?
  prefs: []
  type: TYPE_NORMAL
- en: For example, I have a folder I called 'my_modules' in my Colab directory I store
    common .py files I want access to in Colab. I don't want to store them on GitHub,
    and they aren't clean files I want to otherwise have to *make* clean and share
    with others. Let's say they are simple a collection of helper modules I have gotten
    used to using myself; data loader functions, data cleaning functions, and the
    like.
  prefs: []
  type: TYPE_NORMAL
- en: Any files like this I store in a Dropbox folder with the same name which I sync
    with the Google Drive version. This way I can use the file both inside Colab and
    outside. I have direct OS access to Google Drive contents — natively on Chrome,
    and via [ocamlfuse](https://github.com/astrada/google-drive-ocamlfuse) on Ubuntu
    — and can make use of them starting with the same Google Drive filesystem access
    trick in the above point.
  prefs: []
  type: TYPE_NORMAL
- en: 'This snippet is useful. Say I have a module called `naive_sharding.py` in my
    `my_modules` directory. Since it is a number of directory levels down, here is
    the easiest way for me to leave the file where it is and import it within Colab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: That's it; the `naive_sharding.py` module has been imported, and is ready to
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying some of the above code snippets, you can see how easy it would be
    to get, say, model weights into and out of a Colab environment quite trivially.
    And so with the short notes above, and an outside-the-box thinking, you can accomplish
    quite a bit with Google Colab, despite what numerous naysayers might have you
    believe. Given there is zero setup, and Chromebook access is likewise trivial,
    I have recently found Colab to be an ideal coding tool.
  prefs: []
  type: TYPE_NORMAL
- en: Don't forget to read the [first 3 tips and tricks found here](/2018/02/essential-google-colaboratory-tips-tricks.html).
  prefs: []
  type: TYPE_NORMAL
- en: '**Related**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[3 Essential Google Colaboratory Tips & Tricks](/2018/02/essential-google-colaboratory-tips-tricks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Best Practices for Using Notebooks for Data Science](/2018/11/best-practices-notebooks-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Set Up a Free Data Science Environment on Google Cloud](/2018/08/set-up-free-data-science-environment-google-cloud.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Running Redis on Google Colab](https://www.kdnuggets.com/2022/01/running-redis-google-colab.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[From Google Colab to a Ploomber Pipeline: ML at Scale with GPUs](https://www.kdnuggets.com/2022/03/google-colab-ploomber-pipeline-ml-scale-gpus.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fine Tuning LLAMAv2 with QLora on Google Colab for Free](https://www.kdnuggets.com/fine-tuning-llamav2-with-qlora-on-google-colab-for-free)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Running Mixtral 8x7b On Google Colab For Free](https://www.kdnuggets.com/running-mixtral-8x7b-on-google-colab-for-free)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[RAPIDS cuDF for Accelerated Data Science on Google Colab](https://www.kdnuggets.com/2023/01/rapids-cudf-accelerated-data-science-google-colab.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Full End-to-End Deployment of a Machine Learning Algorithm into a…](https://www.kdnuggets.com/2021/12/deployment-machine-learning-algorithm-live-production-environment.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
