["```py\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\nfrom sklearn import tree\n```", "```py\nimport pandas as pd\nfrom sklearn.datasets import load_irisdata = load_iris()\ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf['target'] = data.target\n```", "```py\nX_train, X_test, Y_train, Y_test = train_test_split(df[data.feature_names], df['target'], random_state=0)\n```", "```py\n# **Step 1:** Import the model you want to use\n# This was already imported earlier in the notebook so commenting out\n#from sklearn.tree import DecisionTreeClassifier**# Step 2:** Make an instance of the Model\nclf = DecisionTreeClassifier(max_depth = 2, \n                             random_state = 0)**# Step 3:** Train the model on the data\nclf.fit(X_train, Y_train)**# Step 4:** Predict labels of unseen (test) data\n# Not doing this step in the tutorial\n# clf.predict(X_test)\n```", "```py\ntree.plot_tree(clf);\n```", "```py\nfn=['sepal length (cm)','sepal width (cm)','petal length (cm)','petal width (cm)']\ncn=['setosa', 'versicolor', 'virginica']fig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=300)tree.plot_tree(clf,\n               feature_names = fn, \n               class_names=cn,\n               filled = True);fig.savefig('imagename.png')\n```", "```py\ntree.export_graphviz(clf,\n                     out_file=\"tree.dot\",\n                     feature_names = fn, \n                     class_names=cn,\n                     filled = True)\n```", "```py\nconda install python-graphviz\n```", "```py\ndot -Tpng tree.dot -o tree.png\n```", "```py\nconda install python-graphviz\n```", "```py\ndot -Tpng tree.dot -o tree.png\n```", "```py\n# Load the Breast Cancer (Diagnostic) Dataset\ndata = load_breast_cancer()\ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf['target'] = data.target# Arrange Data into Features Matrix and Target Vector\nX = df.loc[:, df.columns != 'target']\ny = df.loc[:, 'target'].values# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, y, random_state=0)# Random Forests in `scikit-learn` (with N = 100)\nrf = RandomForestClassifier(n_estimators=100,\n                            random_state=0)\nrf.fit(X_train, Y_train)\n```", "```py\nrf.estimators_\n```", "```py\nfn=data.feature_names\ncn=data.target_names\nfig, axes = plt.subplots(nrows = 1,ncols = 1,figsize = (4,4), dpi=800)\ntree.plot_tree(rf.estimators_[0],\n               feature_names = fn, \n               class_names=cn,\n               filled = True);\nfig.savefig('rf_individualtree.png')\n```", "```py\n# This may not the best way to view each estimator as it is smallfn=data.feature_names\ncn=data.target_names\nfig, axes = plt.subplots(nrows = 1,ncols = 5,figsize = (10,2), dpi=3000)for index in range(0, 5):\n    tree.plot_tree(rf.estimators_[index],\n                   feature_names = fn, \n                   class_names=cn,\n                   filled = True,\n                   ax = axes[index]);\n\n    axes[index].set_title('Estimator: ' + str(index), fontsize = 11)fig.savefig('rf_5trees.png')\n```"]