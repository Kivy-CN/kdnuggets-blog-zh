- en: Introduction to Numpy and Pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/introduction-to-numpy-and-pandas](https://www.kdnuggets.com/introduction-to-numpy-and-pandas)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Introduction to Numpy and Pandas](../Images/4d9285217a1b6e8662caf239c11bade7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Illustration by Author. Source: Flaticon'
  prefs: []
  type: TYPE_NORMAL
- en: Python is the most popular language you’ll encounter in the field of data science
    for its simplicity, the large community and the huge availability of open-source
    libraries.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: If you are working on a data science project, Python packages will ease your
    life since you just need a few lines of code to do complicated operations, like
    manipulating the data and applying a machine learning/deep learning model.
  prefs: []
  type: TYPE_NORMAL
- en: 'When starting your data science journey, it’s recommended to start by learning
    two of the most useful Python packages: NumPy and Pandas. In this article, we
    are introducing these two libraries. Let’s get started!'
  prefs: []
  type: TYPE_NORMAL
- en: What is NumPy?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NumPy stands for Numerical Python and is used to operate efficient computations
    of arrays and matrices behind the scenes of machine learning models. The building
    block of Numpy is the array, which is a data structure very similar to the list,
    with the difference that it provides a huge amount of mathematical functions.
    In other words, the Numpy array is a multidimensional array object.
  prefs: []
  type: TYPE_NORMAL
- en: Create Numpy Arrays
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can define NumPy arrays using a list or list of lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Differently from a list of lists, we can visualise the matrix 3X3 with an indentation
    between each row. Moreover, NumPy provides more than 40 built-in functions for
    array creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an array filled with zeros, there is the function np.zeros , in which
    you just need to specify the shape you desire:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, we can create an array filled with ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also the possibility to create the identity matrix, which is a square
    array with 1s on the main diagonal and off-diagonal elements are 0s:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Furthermore, NumPy provides different functions to create random arrays. To
    create an array filled with random samples from a uniform distribution over [0,1],
    we just need the function np.random.rand :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly to the previous function, we can define an array with random values,
    but this time time are taken from a standard normal distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In case, we are interested on building an array with random integers that belong
    to the interval [low,high), we just need the function np.random.randint :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Indexing and Slicing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Beyond the built-in functions for array creation, another good point of NumPy
    is that it’s possible to select elements from the array using a set of square
    brackets. For example, we can try to take the first row of the matrix:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s suppose that we want to select the third element of the first row. In
    this case, we need to specify two indices, the index of the row and the index
    of the column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: An alternative is to use a1[0][2], but it’s considered inefficient because it
    first creates the array containing the first row and, then, it selects the element
    from that row.
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, we can take slices from the matrix with the syntax start:stop:step
    inside the brackets, where the stop index is not included. For example, we want
    again to select the first row, but we just take the first two elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'If we prefer to select all the rows, but we want to extract the first element
    of each row:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the integer array indexing, there is also the boolean array
    indexing to select the elements from an array. Let’s suppose that we want only
    the elements that respect the following condition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If we filter the array based on this condition, the output will show only the
    True elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Array Manipulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When working in data science projects, it often happens to reshape an array
    to a new shape without changing the data.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we start with an array of dimension 2X3\. If we are not sure of
    our array’s shape, there is the attribute shape that can helps us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'To reshape the array to the dimension 3X2, we can simply use the function reshape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Another common situation is to turn a multidimensional array into a single
    dimensional array. This is possible by specifying -1 as shape:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'It can also occur that you need to obtain a transposed array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: In the same way, you can apply the same transformation using np.transpose(a1).
  prefs: []
  type: TYPE_NORMAL
- en: Array Multiplication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you try to build machine learning algorithms from scratch, you’ll surely
    need to calculate the matrix product of two arrays. This is possible using the
    function np.matmul when the array have more than 1 dimension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '@ can be a shorter alternative to np.matmul.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you multiply a matrix with a scalar, np.dot is the best choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In this case, * is a shorter alternative to np.dot.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NumPy provides a huge variety of mathematical functions, such as the trigonometric
    functions, rounding functions, exponentials, logarithms and so on. You can find
    the full list [here](https://numpy.org/doc/stable/reference/routines.math.html).
    We are going to show the most important functions that you can apply to your problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'The exponential and the natural logarithm are surely the most popular and known
    transformations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'If we want to extract the minimum and the maximum in a single line of code,
    we just need to call the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also calculate the square-root from each element of the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: What is Pandas?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Pandas is built on Numpy and is useful for manipulating the dataset. There
    are two main data structures: **Series** and **Dataframe**. While the Series is
    a sequence of values, the dataframe is a table with rows and columns. In other
    words, the series is a column of the dataframe.'
  prefs: []
  type: TYPE_NORMAL
- en: Create Series and Dataframe
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build the Series, we can just pass the list of values to the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'We can create a Dataframe by passing a dictionary of objects, in which the
    keys correspond to the column names and the values are the entries of the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/ecf9e9823371257d8e1f15f42963a68e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the Dataframe is created, we can check the type of each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: It should be clear that columns are data structures of type Series.
  prefs: []
  type: TYPE_NORMAL
- en: Summary functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From now on, we show the potentialities of Pandas by using the bike sharing
    dataset, available on [Kaggle](https://www.kaggle.com/competitions/bike-sharing-demand/data).
    We can import the CSV file in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/0d11d85db19fc26aa564d36008ea5cc5.png)'
  prefs: []
  type: TYPE_IMG
- en: Pandas doesn’t only allow reading CSV files, but also Excel file, JSON, Parquet
    and other types of files. You can find the full list [here](https://pandas.pydata.org/docs/user_guide/io.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'From the output, we can visualise the first five rows of the dataframe. If
    we want to display the last four rows of the dataset, we use the tail() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/53ee43d7a9555e510045420dbf549c24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Few rows are not enough to have a good idea of the data we have. A good way
    of starting the analysis is by looking at the shape of the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'We have 10886 rows and 12 columns. Do you want to see the column names? It’s
    very intuitive to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/d5ded607aa035f041cf4e7328325dae0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a method that allows to visualise all this information into a unique
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/0b6daa6485f620c6173f6cc61c6c1b9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want to display the statistics of each column, we can use the describe
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/0b6daa6485f620c6173f6cc61c6c1b9a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It’s also important to extract information from the categorical fields. We
    can find the unique values and the number of unique values of the season column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the values are 1, 2, 3,4\. Then, there are four possible values.
    This verification is crucial to understand the categorical variables and prevent
    possible noise contained in the column.
  prefs: []
  type: TYPE_NORMAL
- en: 'To display the frequency of each level, we can use value_counts() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/30588d72e21e5a5a3b8da79ec6f3ab5e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The last step should be the inspection of the missing values on each column:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/1112e0adcd43a5777614d16ab161b33b.png)'
  prefs: []
  type: TYPE_IMG
- en: Luckily we don’t have any missing value in any of these fields.
  prefs: []
  type: TYPE_NORMAL
- en: Indexing and Slicing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like in Numpy, there is the index-based selection to select data from the data
    structure. There are two main methods to take entries from the dataframe:'
  prefs: []
  type: TYPE_NORMAL
- en: iloc selects the elements based on the integer position
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: loc takes the items based on labels or a boolean array.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To select the first row, iloc is the best choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/5b4c811da0db3c7c02de9e04d91ef4a1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we want instead to select all the rows and only the second column, we can
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/940e13e075bc84df46d4988047368286.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It’s also possible to select more columns at the same time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/be70da37fefd58159edef0c8d913171d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It becomes complex to select the columns based on the indices. It would be
    better to specify the column names. This is possible using loc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/b4ca1e4cc33c49bdf7e4cb96706ee049.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly to Numpy, it’s possible to filter the dataframe based on conditions.
    For example, we want to return all the rows where weather is equal to 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/1d7ea3bb858a6b861929e5c6a7e7199b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In case we want to return an output with specific columns, we can use loc:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/be08c2d2a1391b4c57ab4c85f15fc5c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Create new variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The creation of new variables has a huge impact on extracting more information
    from the data and improving the interpretability. We can create a new categorical
    variable based on the values of workingday:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/e31b23b47f15b78e19eb3c7a55685288.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If there are more than one condition, it’s better to map the values using a
    dictionary and the method map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/4825bbefe7d7360444b81e2701f00e71.png)'
  prefs: []
  type: TYPE_IMG
- en: Grouping and Sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It can happen that you want to group the data based on categorical column(s).
    This is possible using groupby:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/366b3cb7d9211cbfea8f37bb6b5edb11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For each level of the season, we can observe the median and the maximum count
    of rented bikes. This output can be confusing without ordering based on a column.
    We can do it using the sort_values() method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '![Introduction to Numpy and Pandas](../Images/eb593e2ce6bfeaea8f5adea326c27bd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the output makes more sense. We can deduce that the highest number of bikes
    rented is in summer, while winter is not a good month for renting bikes.
  prefs: []
  type: TYPE_NORMAL
- en: Final thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: That’s it! I hope you have found this guide useful to learn the basics of NumPy
    and Pandas. They are often studied separately, but it can be insightful to understand
    first NumPy and then Pandas, which is built on top of NumPy.
  prefs: []
  type: TYPE_NORMAL
- en: There are surely methods that I didn’t cover within the tutorial, but the goal
    was to cover the most important and popular methods of these two libraries. The
    code can be found on [Kaggle](https://www.kaggle.com/code/eugeniaanello/introduction-to-numpy-and-pandas).
    Thanks for reading! Have a nice day!
  prefs: []
  type: TYPE_NORMAL
- en: '**[Eugenia Anello](https://www.linkedin.com/in/eugenia-anello/)** is currently
    a research fellow at the Department of Information Engineering of the University
    of Padova, Italy. Her research project is focused on Continual Learning combined
    with Anomaly Detection.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Beyond Numpy and Pandas: Unlocking the Potential of Lesser-Known…](https://www.kdnuggets.com/2023/08/beyond-numpy-pandas-unlocking-potential-lesserknown-python-libraries.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[NumPy with Pandas for More Efficient Data Analysis](https://www.kdnuggets.com/numpy-with-pandas-for-more-efficient-data-analysis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Pandas for Data Science](https://www.kdnuggets.com/2020/06/introduction-pandas-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Select Rows and Columns in Pandas Using [ ], .loc, iloc, .at…](https://www.kdnuggets.com/2019/06/select-rows-columns-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Pandas One Liners for Data Access, Manipulation, and Management](https://www.kdnuggets.com/2023/01/pandas-one-liners-data-access-manipulation-management.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering Data Wrangling with Pandas and Python](https://www.kdnuggets.com/7-steps-to-mastering-data-wrangling-with-pandas-and-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
