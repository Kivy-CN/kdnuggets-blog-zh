- en: What is a Function?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2022/11/function.html](https://www.kdnuggets.com/2022/11/function.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![What is a Function](../Images/5970e99bf476df110baed7f39348bd07.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: The very first high-level functional programming, LISP, was developed in the
    1950s. It introduced concepts that we still use in programming today. For instance,
    Lambda functions and expressions. Even object-oriented languages such as JAVA
    and C# have borrowed notations and features from functional programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: While LISP still exists today as a family of different programming languages,
    none of them are as popular as JavaScript or Python - which are generally used
    as functional programming languages (among their other paradigms). And as the
    label suggests, functional programming languages revolve around functions.
  prefs: []
  type: TYPE_NORMAL
- en: But what is a function and how is it different from a method? Since JavaScript
    is the most popular [programming language globally](https://www.statista.com/statistics/793628/worldwide-developer-survey-most-used-languages/)
    (at least at the time of this guide’s inception), we’ll use it as an example.
    Ultimately, the concepts you will learn here are transferable to other programming
    languages that follow a functional paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: The Nature of JavaScript and why Functions Matter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Despite introducing classes in the ECMAScript 2015 specification (ES6), JavaScript
    still isn’t considered a class-based object-oriented language. That’s largely
    because you don’t have to define classes or class files to build a JavaScript
    project. You can define and call functions outside the context of classes.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, before the release of the ECMAScript 2015 specification, JavaScript
    functions followed simple but loose rules. Thus, they were straightforward to
    use compared to functions (or methods) in OO programming languages like C# and
    JAVA. As the last few annual ECMAScript specifications brought more functionality
    to JavaScript, they also made the language far more complex.
  prefs: []
  type: TYPE_NORMAL
- en: Regardless, JavaScript still stands as the most widely used programming language
    in the world due to its extensibility and portability. You can use it for client-side
    web development and server-side and desktop applications when paired with the
    right runtime and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: We can only see JavaScript adoption increase in the future as more cloud-database
    platforms (DBaaS) have begun to offer native JavaScript SDKs. Thus, programmers
    are no longer restricted to using SQL drivers for [MSSQL and MySQL](https://www.atlantic.net/hipaa-compliant-hosting/mysql-and-ms-sql-and-hipaa-compliance/)
    or their associated libraries and functions.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is worth learning and mastering – now more than ever. Functions make
    JavaScript tick, and your usage of them will determine the ultimate quality of
    your code and projects. But the behavior and structures of functions (especially
    Lambda/Arrow functions) can be difficult to grasp for beginners.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax can be particularly off-putting when JavaScript code is embedded
    in HTML. Nevertheless, if you hope to progress from a beginner to an expert, you
    must be able to construct and utilize functions effectively. And the first step
    is answering the question: “What are functions?”'
  prefs: []
  type: TYPE_NORMAL
- en: What are Functions?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript functions are [a set of instructions](https://www.w3schools.com/js/js_functions.asp)
    contained in a labeled code block. They’re important because they allow you to
    refer to these sets of instructions using a label instead of repeatedly writing
    them out every time. A call or invocation describes the process of using or referring
    to a function in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a functional programming language, JavaScript has what is known as first-class
    functions. This means that functions can be treated as objects or first-class
    citizens. They can be passed through the arguments of other functions, included
    in data structures, and assigned to variables/objects. While this adds some extensibility
    to JavaScript, it can make code harder to read and follow. Regardless, its functional
    nature is [what makes it suitable](/2022/02/data-science-programming-languages.html)
    for data science. The basic structure of a function declaration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a simple function that returns the sum of two variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The function is defined using the “*function”* keyword followed by the name
    of the function (the signature), a parameter list separated by commas and placed
    between round parentheses, and a code block. Unlike, (older versions) of C# and
    Java, you don’t have to specify a return type when defining your function. This
    also speaks to JavaScript’s loosely typed nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The function’s name/label can be a combination of alphanumeric characters,
    underscores (_), and dollar signs ($). You can invoke the above function to assign
    a value to a variable/attribute like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The values in between the rounded parentheses in an invocation are called arguments.
    Not all JavaScript functions are defined or declared by the programmer.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript has a set of built-in functions for essential tasks such as manipulating
    strings and arrays, working with HTML wrappers, handling dates, etc. JavaScript’s
    [standard library](https://devdocs.io/javascript/) isn’t as rich or fully featured
    as most General-Purpose Programming Languages (GPL). This can be advantageous
    as it lowers the learning curve and streamlines coding as you don’t have to worry
    about using the right object or data type.
  prefs: []
  type: TYPE_NORMAL
- en: Again, if you’re familiar with [OO programming languages](/2019/08/object-oriented-programming-data-scientists-estimator.html),
    you may be slightly confused. You may have noticed that JavaScript functions are
    structured and behave similarly to methods. But is there a distinction between
    methods and functions, and does JavaScript have methods?
  prefs: []
  type: TYPE_NORMAL
- en: Functions vs. Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Methods and functions are synonymous in many programming languages. However,
    JavaScript defines these terms differently; thus, functions and methods are two
    slightly different concepts. The differences are minor because they have identical
    structures and similar usages but are defined and called from different contexts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Methods are object functions as they are constructed as part of an object’s
    property list. The main difference between functions and methods is that methods
    are tied to specific objects, while functions are not. Essentially, the property
    list (including methods) gives objects class-like functionality. The syntax of
    JavaScript methods is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s a simple example of a method that returns the sum of two numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The “*this”* keyword is used to prevent [variable shadowing/hiding](https://www.wikiwand.com/en/Variable_shadowing),
    ultimately helping you control and maintain scope. You use it to reference other
    properties within the scope of the object’s declaration.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can call the method by using the object like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Function Expressions (Anonymous Functions)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned previously, you can store functions in variables or properties.
    Function expressions allow you to declare anonymous functions that assign their
    return values to variables. As you’ll see, they’re quite similar to object methods.
    The basic syntax of a function expression is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'A simple example of a function expression is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can then call the function using the variable label:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Arrow Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Arrow functions were first introduced in the ECMAScript 2015 standard (ES6).
    They’re akin to [Lambda expressions](/2020/07/3-advanced-python-features.html)
    in Python and C# as they allow you to create more concise declarations and function
    calls (and they both use arrows). However, they can be a little tricky to use
    at first. The basic syntax of an arrow function is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'When put into action, it looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Or like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also anonymize arrow expressions by negating the function signature
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Another advantage of arrow functions is how they handle the “*this”* keyword
    and scoping. If a normal function is defined outside the scope of an object, it
    refers to the object that invokes it. In a web browser environment, this could
    be a button, window, document, etc. Contrastingly, when “*this”* is used with
    arrow functions, it always references the object in which it is declared/defined.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most compelling reasons why JavaScript is beloved is its flexibility,
    although some surmise that tighter constraints and rules may simplify the coding
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: Because of its multi-paradigm nature, it embraces [various coding styles](/2022/01/r-python-human-factor-perspective.html),
    as evidenced by how it allows you to declare and use functions. This looseness
    makes it easier for developers to obfuscate their code somewhat naturally, so
    they don’t have to restrict themselves to a particular style of function.
  prefs: []
  type: TYPE_NORMAL
- en: As a beginner, if you’re not comfortable with using arrow functions yet, stick
    to simple declarations and calls. How fast you master a skill or language is highly
    dependent on your understanding of the basics.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Nahla Davies](http://nahlawrites.com/)** is a software developer and tech
    writer. Before devoting her work full time to technical writing, she managed —
    among other intriguing things — to serve as a lead programmer at an Inc. 5,000
    experiential branding organization whose clients include Samsung, Time Warner,
    Netflix, and Sony.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Concepts You Should Know About Gradient Descent and Cost Function](https://www.kdnuggets.com/2020/05/5-concepts-gradient-descent-cost-function.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 More SQL Aggregate Function Interview Questions for Data Science](https://www.kdnuggets.com/2023/01/3-sql-aggregate-function-interview-questions-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Function Arguments: A Definitive Guide](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multi-label NLP: An Analysis of Class Imbalance and Loss Function…](https://www.kdnuggets.com/2023/03/multilabel-nlp-analysis-class-imbalance-loss-function-approaches.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Use the pivot_table Function for Advanced Data Summarization…](https://www.kdnuggets.com/how-to-use-the-pivot_table-function-for-advanced-data-summarization-in-pandas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner''s Guide to Pandas Melt Function](https://www.kdnuggets.com/2023/03/beginner-guide-pandas-melt-function.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
