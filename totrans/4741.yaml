- en: Four Techniques for Outlier Detection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2018/12/four-techniques-outlier-detection.html](https://www.kdnuggets.com/2018/12/four-techniques-outlier-detection.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By Maarit Widmann, Moritz Heine, Rosaria Silipo, Data Scientists at [KNIME](http://www.knime.com)**'
  prefs: []
  type: TYPE_NORMAL
- en: Anomalies, or outliers, can be a serious issue when training machine learning
    algorithms or applying statistical techniques. They are often the result of errors
    in measurements or exceptional system conditions and therefore do not describe
    the common functioning of the underlying system. Indeed, the best practice is
    to implement an outlier removal phase before proceeding with further analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: But hold on there! In some cases, outliers can give us information about localized
    anomalies in the whole system; so the detection of outliers is a valuable process
    because of the additional information they can provide about your dataset.
  prefs: []
  type: TYPE_NORMAL
- en: There are many techniques to detect and optionally remove outliers from a dataset.
    In this blog post, we show an implementation in [KNIME Analytics Platform](http://www.knime.com)
    of four of the most frequently used - traditional and novel - techniques for outlier
    detection.
  prefs: []
  type: TYPE_NORMAL
- en: The Dataset and the Outlier Detection Problem
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The dataset we used to test and compare the proposed outlier detection techniques
    is the well known [airline dataset](http://stat-computing.org/dataexpo/2009/the-data.html).
    The dataset includes information about US domestic flights between 2007 and 2012,
    such as departure time, arrival time, origin airport, destination airport, time
    on air, delay at departure, delay on arrival, flight number, vessel number, carrier,
    and more. Some of those columns could contain anomalies, i.e. outliers.
  prefs: []
  type: TYPE_NORMAL
- en: From the original dataset we extracted a random sample of 1500 flights departing
    from Chicago O’Hare airport (ORD) in 2007 and 2008.
  prefs: []
  type: TYPE_NORMAL
- en: In order to show how the selected outlier detection techniques work, we focused
    on finding outliers in terms of average arrival delays at airports, calculated
    on all flights landing at a given airport. We are looking for those airports that
    show unusual average arrival delay times.
  prefs: []
  type: TYPE_NORMAL
- en: Four Outlier Detection Techniques
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Numeric Outlier**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the simplest, nonparametric outlier detection method in a one dimensional
    feature space. Here outliers are calculated by means of the *IQR* (InterQuartile
    Range).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first and the third [quartile](https://en.wikipedia.org/wiki/Quartile)
    (*Q1, Q3*) are calculated. An outlier is then a data point x[i] that lies outside
    the interquartile range. That is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/62c7680149465288c427662acf53d552.png)'
  prefs: []
  type: TYPE_IMG
- en: Using the interquartile multiplier value *k*=1.5, the range limits are the typical
    upper and lower whiskers of a box plot.
  prefs: []
  type: TYPE_NORMAL
- en: This technique was implemented using the Numeric Outliers node in a workflow
    built in  [KNIME Analytics Platform](http://www.knime.com) (Figure 1).
  prefs: []
  type: TYPE_NORMAL
- en: '**Z-Score**'
  prefs: []
  type: TYPE_NORMAL
- en: Z-score is a parametric outlier detection method in a one or low dimensional
    feature space.
  prefs: []
  type: TYPE_NORMAL
- en: 'This technique assumes a Gaussian distribution of the data. The outliers are
    the data points that are in the tails of the distribution and therefore far from
    the mean. How far depends on a set threshold z[thr] for the normalized data points
    z[i] calculated with the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/31c99a6ea8539fd5c01ec0d6939d396c.png)'
  prefs: []
  type: TYPE_IMG
- en: where x[i] is a data point, μ is the mean of all x[i] and is the standard deviation
    of all x[i].
  prefs: []
  type: TYPE_NORMAL
- en: 'An outlier is then a normalized data point which has an absolute value greater
    than z[thr]. That is:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Equation](../Images/d81e94630a05d13443fada38034871bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Commonly used z[thr] values are 2.5, 3.0 and 3.5.
  prefs: []
  type: TYPE_NORMAL
- en: This technique was implemented using the Row Filter node in a KNIME workflow
    (Figure 1).
  prefs: []
  type: TYPE_NORMAL
- en: '**DBSCAN**'
  prefs: []
  type: TYPE_NORMAL
- en: This technique is based on the [DBSCAN](https://en.wikipedia.org/wiki/DBSCAN)
    clustering method. DBSCAN is a non-parametric, density based outlier detection
    method in a one or multi dimensional feature space.
  prefs: []
  type: TYPE_NORMAL
- en: In the DBSCAN clustering technique, all data points are defined either as *Core
    Points*, *Border Points* or *Noise Points*.
  prefs: []
  type: TYPE_NORMAL
- en: '***Core Points*** are data points that have at least *MinPts* neighboring data
    points within a distance ℇ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Border Points*** are neighbors of a *Core Point* within the distance ℇ but
    with less than *MinPts* neighbors within the distance ℇ.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other data points are ***Noise Points****,* also identified as outliers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Outlier detection thus depends on the required number of neighbors *MinPts*,
    the distance ℇ and the selected distance measure, like Euclidean or Manhattan.
  prefs: []
  type: TYPE_NORMAL
- en: This technique was implemented using the DBSCAN node in the KNIME workflow in
    Figure 1.
  prefs: []
  type: TYPE_NORMAL
- en: '**Isolation Forest**'
  prefs: []
  type: TYPE_NORMAL
- en: This is a non-parametric method for large datasets in a one or multi dimensional
    feature space.
  prefs: []
  type: TYPE_NORMAL
- en: An important concept in this method is the isolation number.
  prefs: []
  type: TYPE_NORMAL
- en: 'The isolation number is the number of splits needed to isolate a data point.
    This number of splits is ascertained by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: A point “a” to isolate is selected randomly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A random data point “b” is selected that is between the minimum and maximum
    value and different from “a”.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the value of “b” is lower than the value of “a”, the value of “b” becomes
    the new lower limit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the value of “b” is greater than the value of “a”, the value of “b” becomes
    the new upper limit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This procedure is repeated as long as there are data points other than “a” between
    the upper and the lower limit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires fewer splits to isolate an outlier than it does to isolate a non-outlier,
    i.e. an outlier has a lower isolation number in comparison to a non-outlier point.
    A data point is therefore defined as an outlier if its isolation number is lower
    than the threshold.
  prefs: []
  type: TYPE_NORMAL
- en: The threshold is defined based on the estimated percentage of outliers in the
    data, which is the starting point of this outlier detection algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: An explanation with images of the isolation forest technique is available at
    [https://quantdare.com/isolation-forest-algorithm/](https://quantdare.com/isolation-forest-algorithm/).
  prefs: []
  type: TYPE_NORMAL
- en: This technique was implemented in the KNIME workflow in Figure 1 by using a
    few lines of Python code within a Python Script node.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Python Script node is part of the [KNIME Python Integration](https://www.knime.com/blog/setting-up-the-knime-python-extension-revisited-for-python-30-and-20),
    that allows you to write/import Python code into your KNIME workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation in a KNIME Workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KNIME Analytics Platform](http://www.knime.org) is an open source software
    for data science, covering all your data needs from data ingestion and data blending
    to data visualization, from machine learning algorithms to data wrangling, from
    reporting to deployment, and more. It is based on a Graphical User Interface for
    visual programming, which makes it very intuitive and easy to use, considerably
    reducing the learning time.'
  prefs: []
  type: TYPE_NORMAL
- en: It has been designed to be open to different data formats, data types, data
    sources, data platforms, as well as external tools, like [R](https://www.r-project.org/)
    and [Python](https://www.python.org/) for example. It also includes a number of
    extensions for the analysis of unstructured data, like texts, images, or graphs.
  prefs: []
  type: TYPE_NORMAL
- en: Computing units in KNIME Analytics Platform are small colorful blocks, named
    “nodes”. Assembling nodes in a pipeline, one after the other, implements a data
    processing application. A pipeline is called “workflow”.
  prefs: []
  type: TYPE_NORMAL
- en: Given all those characteristics - open source, visual programming, and integration
    with other data science tools - we have selected it to implement the four techniques
    for outlier detection described in this post.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final KNIME workflow implementing these four techniques for outlier detection
    is reported in Figure 1.The workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: Reads the data sample inside the Read data metanode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preprocesses the data and calculate the average arrival delay per airport inside
    the Preproc metanode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next metanode called Density of delay, it normalizes the data and plots
    the density of the normalized average arrival delays against the density of a
    standard normal distribution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Detects outliers using the four selected techniques.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visualizes the outlier airports in a map of the US in the MapViz metanode using
    the KNIME integration with Open Street Maps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure](../Images/6c3d7b752a003765f27602a2ce554c50.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Workflow implementing four outlier detection techniques: Numeric
    Outlier, Z-score, DBSCAN, Isolation Forest. This workflow is available on the
    KNIME EXAMPLES server under [02_ETL_Data_Manipulation/01_Filtering/07_Four_Techniques_Outlier_Detection/Four_Techniques_Outlier_Detection](https://www.knime.com/nodeguide/etl-data-manipulation/filtering/four-techniques-outlier-detection/techniques-outlier-detection).'
  prefs: []
  type: TYPE_NORMAL
- en: The Detected Outliers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Figures 2-5 you can see the outlier airports as detected by the different
    techniques.
  prefs: []
  type: TYPE_NORMAL
- en: The blue circles represent airports with no outlier behavior while the red squares
    represent airports with outlier behavior. The average arrival delay time defines
    the size of the markers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few airports are consistently identified as outliers by all techniques: Spokane
    International Airport (GEG), University of Illinois Willard Airport (CMI) and
    Columbia Metropolitan Airport (CAE). Spokane International Airport (GEG) is the
    biggest outlier with a very large (180 min) average arrival delay.'
  prefs: []
  type: TYPE_NORMAL
- en: A few other airports however are identified by only some of the techniques.
    For example Louis Armstrong New Orleans International Airport (MSY) has been spotted
    by only the isolation forest and DBSCAN techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for this particular problem the Z-Score technique identifies the lowest
    number of outliers, while the DBSCAN technique identifies the highest number of
    outlier airports.
  prefs: []
  type: TYPE_NORMAL
- en: Only the DBSCAN method (*MinPts*=3, ℇ=1.5, distance measure Euclidean) and the
    isolation forest technique (estimated percentage of outliers 10%) find outliers
    in the early arrival direction.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ce0e420f8e7e2dfccecdbf0b0f8bd305.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Outlier airports detected by numeric outlier technique![Figure](../Images/b291a48bac66624f6653ee6bc5bee0f8.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3: Outlier airports detected by z-score technique![Figure](../Images/8364e699f968b441ef68a2a34966d0cc.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 4: Outlier airports detected by DBSCAN technique![Figure](../Images/dc1f7a4a688b8b58a5f43bd69f17cfdf.png)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 5: Outlier airports detected by isolation forest technique'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this blog post, we have described and implemented four different outlier
    detection techniques in a one dimensional space: the average arrival delay for
    all US airports between 2007 and 2008 as described in the airline dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: The four techniques we investigated are Numeric Outlier, Z-Score, DBSCAN and
    Isolation Forest methods. Some of them work for one dimensional feature spaces,
    some for low dimensional spaces, and some extend to high dimensional spaces. Some
    of the techniques require normalization and a Gaussian distribution of the inspected
    dimension. Some require a distance measure, and some the calculation of mean and
    standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: There are three airports that all the outlier detection techniques identify
    as outliers. However, only some of the techniques (DBSCAN and Isolation Forest)
    could identify the outliers in the left tail of the distribution, i.e. those airports
    where, on average, flights arrived earlier than their scheduled arrival time.
  prefs: []
  type: TYPE_NORMAL
- en: '**References**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The theoretical basis for this blog post was taken from:'
  prefs: []
  type: TYPE_NORMAL
- en: Santoyo, Sergio. (2017, September 12). A Brief Overview of Outlier Detection
    Techniques [Blog post]. [https://towardsdatascience.com/a-brief-overview-of-outlier-detection-techniques-1e0b2c19e561](https://towardsdatascience.com/a-brief-overview-of-outlier-detection-techniques-1e0b2c19e561)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Removing Outliers Using Standard Deviation in Python](/2017/02/removing-outliers-standard-deviation-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Make Your Machine Learning Models Robust to Outliers](/2018/08/make-machine-learning-models-robust-outliers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[8 Common Pitfalls That Can Ruin Your Prediction](/2018/03/8-common-pitfalls-ruin-prediction.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Density Kernel Depth for Outlier Detection in Functional Data](https://www.kdnuggets.com/density-kernel-depth-for-outlier-detection-in-functional-data)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner''s Guide to Anomaly Detection Techniques in Data Science](https://www.kdnuggets.com/2023/05/beginner-guide-anomaly-detection-techniques-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learning Python in Four Weeks: A Roadmap](https://www.kdnuggets.com/2023/02/learning-python-four-weeks-roadmap.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Master the Power of Data Analytics: The Four Approaches to Analyzing Data](https://www.kdnuggets.com/2023/03/master-power-data-analytics-four-approaches-analyzing-data.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Analytics: The Four Approaches to Analyzing Data and How To…](https://www.kdnuggets.com/2023/04/data-analytics-four-approaches-analyzing-data-effectively.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Perform Motion Detection Using Python](https://www.kdnuggets.com/2022/08/perform-motion-detection-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
