- en: Linear Programming 101 for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/02/linear-programming-101-data-scientists.html](https://www.kdnuggets.com/2023/02/linear-programming-101-data-scientists.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Linear Programming 101 for Data Scientists](../Images/128d77e88c32676c3cafced469d59321.png)![Linear
    Programming 101 for Data Scientists](../Images/4aa7a71c42a8963ddb4e3e3af33a25d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Images from [Wikipedia](https://en.wikipedia.org/wiki/Linear_programming)
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Origins of Linear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For those more familiar with the subject, you probably know that the origins
    of linear programming began roughly around the mid-1950s, and a mathematician
    by the name of [George Dantzig](https://en.wikipedia.org/wiki/George_Dantzig)
    was involved. If that was your guess, you’d be right for the most part, but we
    all know that attributing credit for many (if not all) scientific and mathematical
    discoveries is not that simple — there is often more than one individual that
    contributed to the development of an area of research, and that is certainly the
    case for linear programming. Initial progress was made in parallel by two mathematicians
    working independently in the mid-1900s, and credit was therefore certainly due
    to more than one person.
  prefs: []
  type: TYPE_NORMAL
- en: Without getting into the history too much, let’s try to get a rough sense of
    the timeline of key advances in linear programming. The first idea for linear
    programming branched out of [Leonid Kantorovich](https://en.wikipedia.org/wiki/Leonid_Kantorovich)’s
    intent to reduce costs for his own army while increasing those of his enemy army.
    His efforts took place during World War 2 in 1939 but was neglected by the USSR
    at the time. Meanwhile, [T.C. Koopmans](https://en.wikipedia.org/wiki/Tjalling_Koopmans)
    had a similar idea as Kantorovich but was working on it independently and it was
    tailored to his own economic applications. A few years later, in 1941, Frank Lauren
    Hitchcock began working on similar ideas which, again, were tailored to his own
    transportation problems, but he developed a solution similar to what is now famously
    known as the simplex method. To cut it short, all three men were on the right
    track, but by the time the discovery merited a Nobel Prize in Economics, Hitchcock
    had died, and so [Kantorovich and Koopmans took the credit](https://www.nobelprize.org/prizes/economic-sciences/1975/summary/).
  prefs: []
  type: TYPE_NORMAL
- en: Between 1946 and 1947, George B. Dantzig developed an algorithm for the Simplex
    Method that *efficiently* tackled linear programming problems in *most cases*
    — this was an incredible achievement. Shortly thereafter, Dantzig introduced the
    theory of duality in linear programming to John Von Neumann, who had been developing
    a theory of games, and was astonished to find that Dantzig had made progress in
    an unsolved problem in linear programming. This was very exciting. (Good Will
    Hunting, anyone? Dantzig’s achievement was actually the inspiration for the storyline
    in that movie!).
  prefs: []
  type: TYPE_NORMAL
- en: '![Linear Programming 101 for Data Scientists](../Images/4193e41f74bc64abcf6e051891008f69.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Good Will Hunting](https://en.wikipedia.org/wiki/Good_Will_Hunting) ([Source](https://tenor.com/en-GB/view/figure-it-out-gif-14765862))'
  prefs: []
  type: TYPE_NORMAL
- en: Those areas are now well-studied and used heavily in important real-life applications.
    Post-WW2, Dantzig’s work has been applied to daily planning applications in many
    industries, and mathematicians soon made progress in making linear programming
    solvable in polynomial time. That was some background on its origins (and you
    can read all about it [here](https://apps.dtic.mil/sti/pdfs/ADA112060.pdf), for
    example), but for now, let us briefly get into more recent advances.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Recent Advances in Linear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More recently, research in linear programming has focused on developing algorithms
    that improve computational complexity. [This paper](https://arxiv.org/abs/2004.07470),
    for instance, discusses faster dynamic matrix inverses for faster LPs. (However,
    it is computer science-heavy, and we do not need to get into it). Overall, [there
    is a lot of research](https://arxiv.org/list/math.OC/recent) going into mathematical
    optimization today as a whole, whether it’s to speed up computations, reduce inefficiencies,
    or introduce new applications in machine learning.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Software for Applied Linear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are countless software packages to support applied linear programming
    in the industry. You have IBM’s [CPLEX](https://en.wikipedia.org/wiki/CPLEX),
    [GUROBI](https://www.gurobi.com/) proprietary optimization software, open-source
    Python packages (such [SciPy](https://docs.scipy.org/doc/scipy/reference/generated/scipy.optimize.linprog.html#scipy.optimize.linprog),
    [Pyomo](http://www.pyomo.org/), [PuLP](https://coin-or.github.io/pulp/), [GEKKO](https://gekko.readthedocs.io/en/latest/)),
    and probably much more. An interesting fact is that all these packages use what
    we call an [Algebraic Modeling Language (AML)](https://en.wikipedia.org/wiki/Algebraic_modeling_language),
    a critical paradigm that was developed in the late 1970s. All these packages are
    great at what they do for different reasons and there are many blog posts you
    can read for a good comparison between each of them — check out [this post](https://medium.com/opex-analytics/optimization-modeling-in-python-pulp-gurobi-and-cplex-83a62129807a),
    for example.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Topics in Linear Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We won’t get into the details, but let’s talk about what you should know as
    a user of linear programming theory and methodology. The theory of linear programming
    is beautiful on its own but is even more so when you can draw the connections
    between linear programming and linear algebra. Whether you’ve picked up a [textbook](https://www.sciencedirect.com/book/9780124179103/elementary-linear-programming-with-applications),
    took an [online introductory course](https://www.udemy.com/course/linear-programming-for-machine-learning/?utm_source=adwords&utm_medium=udemyads&utm_campaign=Webindex_Catchall_la.EN_cc.CA&utm_term=_._ag_119831896715_._ad_533102824920_._kw__._de_c_._dm__._pl__._ti_dsa-392284169515_._li_9000737_._pd__._&matchtype=&gclid=EAIaIQobChMI_p2at7m2_AIVOxXUAR0dMQM1EAAYAiAAEgL6jvD_BwE),
    or [learned this formally in school](https://www.youtube.com/playlist?list=PLDndWhwv4Ujo10_a2T4R4Uqng1nduvfu1),
    there’s no doubt that you’ll arrive at the same conclusion that linear programming
    is a special case of linear algebra, and probably one of the most important and
    relevant extensions of elementary linear algebra.
  prefs: []
  type: TYPE_NORMAL
- en: 'No matter what route you’ve chosen to take to learn linear programming, you’ve
    likely encountered the following (or similar) sequence of topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Components of a linear program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Forms of linear programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common linear programming problems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Duality theory and sensitivity analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specialized types of linear programs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applied linear programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Does that sound right? If I’ve missed anything, please leave a comment below.)
    If that’s the case and you’d say you’re familiar with all these topics, then I
    think you should stop reading here and call it a day (and congratulate yourself
    because you’ve just been treated to a short history of linear programming!). However,
    if at least one of the above topics sounds new to you, then I would say you should
    continue reading this article as I think it’ll be worth your time.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Common Linear Programming Problems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the sake of keeping things short and consumable, we’re going to skip the
    first two topics in the sequence, but [here is a good resource](https://towardsdatascience.com/elements-of-a-linear-programming-problem-lpp-325075688c18)
    where you can learn more about the components of a linear program and forms of
    linear programs. Similarly, we’ll omit discussion of duality theory and sensitivity
    analysis but some great resources are [here](https://towardsdatascience.com/the-sensitivity-analysis-a-powerful-yet-underused-tool-for-data-scientists-e553fa695976)
    and [here](https://machinelearninggeek.com/sensitivity-analysis-in-python/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you’re attempting to apply linear programming principles to solve a
    problem, there are likely various other classes of models that you have considered
    for your problem, and you’ve (hopefully reasonably) arrived at the conclusion
    that a linear programming model would solve your problem. If so, it may be the
    case that you’ve also thought about some classical problems that use linear programming:
    [The blending problem](https://machinelearninggeek.com/solving-blending-problem-in-python-using-gurobi/),
    [The assignment problem](https://machinelearninggeek.com/solving-assignment-problem-using-linear-programming-in-python/),
    [The transportation problem](https://machinelearninggeek.com/solving-transportation-problem-using-linear-programming-in-python/),
    [The traveling salesman problem](https://medium.com/analytics-vidhya/model-and-solution-of-the-traveling-salesman-problem-with-python-and-pyomo-db45f2631e8c),
    and so many more.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If your problem sounds roughly like any one of these problems, then we already
    know how to solve your problem and you’re good to go. If not, you’ll want to think
    deeper about your problem and figure out a way to cleverly translate it into a
    linear programming problem. Consider some questions like:'
  prefs: []
  type: TYPE_NORMAL
- en: Do you *need* a LP to solve this problem, or is there a chance that this could
    be a trivial problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is your main objective?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you only have one objective or are there many?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is it a maximization problem or a minimization problem?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are all the possible constraints you can think of?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Are your decision variables all non-negative, or do you need some special kind
    of specification?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '6\. Applied Linear Programming in Python: Case Study using Toronto-based Shelter
    Data'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I’ve done tons of explaining for now, so instead of talking some more, I’ll
    just show you what a “non-standard” applied linear programming problem might look
    like, in code. If you remember, we said there are many open-source Python packages
    available which use the AML paradigm. PuLP is one of them, so we’ll use PuLP for
    now.
  prefs: []
  type: TYPE_NORMAL
- en: This is a semi-hypothetical example with 12 real-life homeless shelters based
    in the City of Toronto — real-life addresses, real-life buildings, fake number
    of rooms/beds available (i.e., supply/capacity), fake number of new requests for
    beds (i.e., demand), fake ‘cluster’ a shelter belongs to. Grim topic, I know.
    The data was acquired from the city’s [Open Data Catalogue](https://open.toronto.ca/dataset/daily-shelter-overnight-service-occupancy-capacity/).
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: Suppose we’re looking at any random day’s snapshot of supply and demand for
    beds at homeless shelters in Toronto. The selection of homeless shelters we’re
    looking at is strategically made so that we’re looking at clusters dispersed across
    the city — some shelters are close to others, while some are far from the reach
    of others. Keep this in mind as this is relevant to the optimization problem we’ll
    be specifying. Note that demand is at the cluster level and not the shelter level.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there are costs (both monetary and temporal) associated with each
    additional bed made available in a shelter, and costs vary — sometimes by shelter,
    and sometimes by cluster. We’ll define a cluster as a group of shelters that are
    relatively close to each other — a rough “map” visual of locations relative to
    each other below.
  prefs: []
  type: TYPE_NORMAL
- en: '![XXXXX](../Images/c0cab7d88a5bc5fa383e6dfba9b8d1a1.png)'
  prefs: []
  type: TYPE_IMG
- en: In addition to monetary cost, let’s say there’s also a time cost associated
    with opening each additional bed — also sometimes by the shelter, and sometimes
    by cluster. The reasoning for this time cost is that there might be demand for
    a bed within the neighborhood/cluster, but the request has been made at a full-capacity
    location and the service user needs to be relocated.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll set this up as a [multi-objective optimization problem](https://www.supplychaindataanalytics.com/multi-objective-linear-optimization-with-pulp-in-python/)
    so our specification (in code) will need to be able to accommodate that. First,
    we minimize monetary cost, and then we minimize time costs. The coefficients in
    the second objective function correspond to the relative time increase within
    a specific shelter group (i.e., time cost for moving new users from Shelter X
    to shelter Y). Note that optimization problem specification is not unique and
    there may be more than one specification that leads to the same results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s all the code as one long script. The model specification code could
    be condensed/simplified but we’ll keep it like this so you can see all the details
    more clearly. We comment out the initial objective function since we’ve added
    it as a monetary cost constraint in step #5.'
  prefs: []
  type: TYPE_NORMAL
- en: Code by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve run this code locally, you’d see the output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Your first question might be: Isn’t this a trivial problem? And if not, how
    come? This is an important question, and it’s one that might justify not specifying
    a linear programming problem at all! However, in this case, it is a non-trivial
    problem and we do need a LP specification, think about why.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hint:** First, we minimize monetary costs, and then we minimize time costs.
    Can you think of a way to solve this problem by hand?'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[1] B. Kolman and R.E. Beck, [Elementary Linear Programming with Applications](https://www.sciencedirect.com/book/9780124179103/elementary-linear-programming-with-applications)
    (1995), ScienceDirect'
  prefs: []
  type: TYPE_NORMAL
- en: '[2] G.B. Dantzig, [Reminiscences About The Origins of Linear Programming](https://apps.dtic.mil/sti/pdfs/ADA112060.pdf)
    (1982), Department of Operations Research — Stanford University'
  prefs: []
  type: TYPE_NORMAL
- en: '[3] R. Fourer, D.M. Gay, B.W. Kenighan, [A Modeling Language for Mathematical
    Programming](https://vanderbei.princeton.edu/307/textbook/AMPLbook.pdf) (1990)'
  prefs: []
  type: TYPE_NORMAL
- en: '**[Mariam Walaa](https://www.linkedin.com/in/mariamwalaa/)** is a math major
    with over 3 years of experience as a data scientist in engineering, retail and
    academia working on a variety of problems ranging from natural language processing
    and recommendation systems to linear programming and optimization.'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n04, Jan 26: The High Paying Side Hustles…](https://www.kdnuggets.com/2022/n04.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[DataLang: A New Programming Language for Data Scientists... Created…](https://www.kdnuggets.com/2023/04/datalang-new-programming-language-data-scientists-chatgpt.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[LangChain 101: Build Your Own GPT-Powered Applications](https://www.kdnuggets.com/2023/04/langchain-101-build-gptpowered-applications.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Prompt Engineering 101: Mastering Effective LLM Communication](https://www.kdnuggets.com/prompt-engineering-101-mastering-effective-llm-communication)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets™ News 22:n06, Feb 9: Data Science Programming…](https://www.kdnuggets.com/2022/n06.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Data Science Programming Languages and When To Use Them](https://www.kdnuggets.com/2022/02/data-science-programming-languages.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
