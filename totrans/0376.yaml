- en: 7 Must-Know Python Tips for Coding Interviews
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7 个编程面试必知的 Python 技巧
- en: 原文：[https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html](https://www.kdnuggets.com/2023/03/7-mustknow-python-tips-coding-interviews.html)
- en: '![7 Must-Know Python Tips for Coding Interviews](../Images/2e1736bec8cafa934e833c784efe7d3f.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![7 个编程面试必知的 Python 技巧](../Images/2e1736bec8cafa934e833c784efe7d3f.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Almost all interviews for data science roles include up to two rounds of coding
    to test a candidate’s problem solving skills. So even if you have an impressive
    project portfolio, you’ll have to clear the initial coding interview rounds to
    progress further.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有的数据科学职位面试都包括多达两轮的编程测试，以考察候选人的问题解决能力。因此，即使你有令人印象深刻的项目组合，你仍需通过初始编程面试轮次才能进一步晋级。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Choosing a language like Python—to tackle coding interviews—can be very helpful
    as it's much simpler to learn and use than languages like C++ and Java. In this
    guide, we'll go over useful Python tips for coding interviews.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 选择像 Python 这样的语言来应对编程面试，可以非常有帮助，因为它比 C++ 和 Java 等语言更容易学习和使用。在本指南中，我们将介绍有用的 Python
    面试技巧。
- en: We’ll cover reversing and sorting arrays, customizing array sorts, list and
    dictionary comprehensions, unpacking iterables, and more. Let’s dive right in!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论反转和排序数组、自定义数组排序、列表和字典推导式、解包可迭代对象等内容。让我们深入了解吧！
- en: 1\. Reverse an Array in Place
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\. 原地反转数组
- en: 'In any coding interview, you’ll have questions on arrays. In Python, lists
    provide the same functionality as arrays. You can do the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何编程面试中，你都会遇到关于数组的问题。在 Python 中，列表提供了与数组相同的功能。你可以进行如下操作：
- en: Look up the element at a particular index in constant time.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在常数时间内查找特定索引处的元素。
- en: Append to the end of the list and  remove items from the end of the list in
    constant time.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在列表末尾添加元素，并在常数时间内从列表末尾移除项目。
- en: Insert an element at a particular index in O(n) time.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 O(n) 时间内在特定索引处插入元素。
- en: When you need to reverse a list in place, without creating a new list, you can
    call the `reverse()` method on the list. Here, we initialize the `nums` list and
    call the `reverse()` method on it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要在原地反转列表而不创建新列表时，可以调用 `reverse()` 方法。在这里，我们初始化 `nums` 列表并调用 `reverse()` 方法。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We see that the original list has been reversed:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到原始列表已被反转：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 2\. Sort Arrays and Customize Sorts
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\. 排序数组并自定义排序
- en: Another common array operation is sorting. When you need to sort a list in place,
    you can call the `sort()` method on the list object.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个常见的数组操作是排序。当你需要在原地排序列表时，可以调用列表对象的 `sort()` 方法。
- en: 'Here, `nums` is also a list of numbers, and calling the `sort()` method on
    `nums` sorts the list in place in ascending order:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`nums` 也是一个数字列表，调用 `sort()` 方法会在原地按升序对 `nums` 进行排序：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As seen, the `sort()` method sorts the list in **ascending order** by default.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如图所示，`sort()` 方法默认按**升序**对列表进行排序。
- en: 'To sort the list in descending order, you can set `reverse` to `True` in the
    `sort()` method call:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要按降序排序列表，可以在 `sort()` 方法调用中将 `reverse` 设置为 `True`：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Note**: For a list of strings (such as ["plums","cherries","grapes"]) the
    default sorting is in alphabetical order. Setting `reverse = True` sorts the list
    of strings in reverse alphabetical order.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：对于字符串列表（如 ["plums","cherries","grapes"]），默认排序为字母顺序。将 `reverse = True`
    设置为反向字母顺序排序字符串列表。'
- en: Customize Sort with Lambda
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Lambda 自定义排序
- en: Sometimes, you need more customized sorting beyond the trivial ascending and
    descending order sorts. You can customize the list `sort()` by setting the `key`
    parameter to a callable.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，你需要的排序方式不仅仅是简单的升序或降序。你可以通过将`key`参数设置为一个可调用对象来自定义`sort()`方法。
- en: As an example, let’s sort the `nums` list based on the remainder obtained on
    dividing by 7.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个示例，让我们根据除以7的余数对`nums`列表进行排序。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To check if the output is correct, let’s create a list of remainders `rem_list`:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查输出是否正确，让我们创建一个余数列表`rem_list`：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We see that 1 and 5 occur twice in `rem_list`. Let’s parse what this means:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到`rem_list`中1和5出现了两次。让我们解析一下这意味着什么：
- en: Both 13 and 78 leave a remainder of one when divided by 7\. But 13 appears before
    78 in the sorted list because it appears before 78 in the original `nums` list.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 13和78在除以7时都留下一个余数。但13在排序列表中排在78之前，因为在原始`nums`列表中它也排在78之前。
- en: Similarly, both 47%7 and 12%7 evaluate to 5\. And 47 appears before 12 in the
    sorted list because it appears before 12 in the original list, too.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 同样，47%7和12%7的结果都是5。47在排序列表中排在12之前，因为在原始列表中它也排在12之前。
- en: Therefore, `sort()` method performs a stable sort where the order of the elements
    in the original list is preserved—if two or more elements are equal under a given
    sorting criterion. In this case, the criterion is `num%7`.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，`sort()`方法执行稳定排序，即在原始列表中，如果两个或更多元素在给定排序标准下相等，它们的顺序会被保留。在此情况下，标准是`num%7`。
- en: 'You can also customize the sorting of lists of strings. Here, we sort the list
    `str_list` based on the number of occurrences of ''p'':'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以自定义字符串列表的排序。在这里，我们根据'p'的出现次数对`str_list`进行排序：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 3\. List and Dictionary Comprehensions
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3\. 列表和字典推导式
- en: Comprehensions are one of the powerful features of Python that let you write
    idiomatic code. They let you create new iterables from existing ones and can often
    be a *concise alternative to for loops*.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 推导式是Python的一项强大功能，允许你编写更具惯用性的代码。它们允许你从现有的可迭代对象创建新的可迭代对象，通常是*一种简洁的替代方案*来代替for循环。
- en: List Comprehension Example
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表推导示例
- en: 'Suppose we have the `nums` list. We’d now like to get the list of all numbers
    in `nums` that are divisible by 3\. To do so, we can use list comprehension expressions
    of the form: `[output for item in iterable if condition]`.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有`nums`列表。我们现在想要获取`nums`中所有能被3整除的数字列表。为此，我们可以使用形式为`[output for item in iterable
    if condition]`的列表推导表达式。
- en: 'Here, we filter the `nums` based on the condition `num%3==0` to get the `div_by_3`
    list:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据条件`num%3==0`过滤`nums`列表，以获得`div_by_3`列表：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Dictionary Comprehension Examples
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典推导示例
- en: Dictionary comprehension is helpful when you need to create a new dictionary
    from existing iterables instead of using for loops.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 字典推导式在你需要从现有的可迭代对象创建新的字典时非常有用，而不是使用for循环。
- en: 'These expressions are generally of the form: `{key:value for key in some_iterable}`.
    Meaning we can access the keys and create the values on the go (from the keys)!'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些表达式通常是这样的形式：`{key:value for key in some_iterable}`。这意味着我们可以在遍历过程中访问键并创建值（从键开始）！
- en: 'Suppose we want to create a Python dictionary containing the numbers 1 to 10
    as the keys and the squares of those numbers as the values. We can do it using
    dictionary comprehension like so:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想创建一个包含1到10的数字作为键以及这些数字的平方作为值的Python字典。我们可以使用字典推导式来做到这一点：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We see that we have the numbers and the squares of the numbers as key-value
    pairs:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们有了数字和这些数字的平方作为键值对：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here’s another example. From the `strings` list, we construct the `str_len`
    dictionary, where keys are the strings and values are the length of these strings:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是另一个例子。从`strings`列表中，我们构建了`str_len`字典，其中键是字符串，值是这些字符串的长度：
- en: '[PRE16]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 4\. Unpacking Iterables
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4\. 解包可迭代对象
- en: In Python, you can unpack iterables into one or more variables depending on
    how you’d like to use them. This is especially helpful when you need to use only
    a subset of the elements for further processing.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，你可以将可迭代对象解包到一个或多个变量中，具体取决于你想如何使用它们。这在你只需要使用元素的一个子集进行进一步处理时特别有用。
- en: 'Let’s create a list `list1`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个列表`list1`：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If we want to use all the four elements in `list1`, we simply assign it to
    four different variables as shown:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想使用`list1`中的所有四个元素，我们可以简单地将它们分配给四个不同的变量，如下所示：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you want only the first elements in the list in a variable, say, `num1`
    and the remaining elements (sublist) in another variable, say, `num2`, you can
    use * before the variable name so it’ll capture the remaining elements in `list1`:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想将列表中的前几个元素存储在一个变量中，比如`num1`，将其余元素（子列表）存储在另一个变量中，比如`num2`，你可以在变量名前使用*，这样它会捕捉`list1`中的剩余元素：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Similarly, if you want the first and the last elements in the list, you can
    unpack as shown below. The elements 2 and 4 are subsumed in the variable `num2`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果你想要列表中的第一个和最后一个元素，你可以像下面这样解包。元素2和4被包含在变量`num2`中：
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 5\. Join a List of Strings on a Separator
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\. 用分隔符连接字符串列表
- en: Suppose you have a list of strings and the task is to join them into a single
    string using a separator.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个字符串列表，任务是用分隔符将它们连接成一个字符串。
- en: 'You can use the `join()` string method like so: `separator.join(list)` will
    join the elements in the list using the separator.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`join()`字符串方法，像这样：`separator.join(list)`将使用分隔符连接列表中的元素。
- en: 'Here are a few examples. Consider the `fruits` list shown:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个例子。考虑下面的`fruits`列表：
- en: '[PRE23]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To join the strings in the `fruits` list using **--** as the separator,  specify
    ''--'' as the separator string:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 **--** 作为分隔符来连接`fruits`列表中的字符串，请指定'--'作为分隔符字符串：
- en: '[PRE24]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To join the strings without any white space, use an empty string as the separator:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要在没有任何空白的情况下连接字符串，请使用空字符串作为分隔符：
- en: '[PRE25]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To join the strings using a single white space, specify '' '' as the separator:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用一个空格来连接字符串，请指定' '作为分隔符：
- en: '[PRE26]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 6\. Loop Using enumerate()
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\. 使用 enumerate() 循环
- en: 'Let''s use the previous `fruits` list:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用之前的`fruits`列表：
- en: '[PRE27]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'You can use the `range` function and list index to get the items and index
    simultaneously:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`range`函数和列表索引来同时获取项目和索引：
- en: 'However, it’s convenient to use the `enumerate()` function. You can loop through
    both the index and the item at the index, simultaneously, using the `enumerate()`
    function:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用`enumerate()`函数会更方便。你可以使用`enumerate()`函数同时循环访问索引和索引处的项目：
- en: '[PRE28]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We see that we get the indices 0 to 4 along with the elements are those indices:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们得到了索引0到4，以及那些索引的元素：
- en: '[PRE29]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'By default, the index starts at zero. Sometimes you may want to start at a
    non-zero index. To do this, you can specify the start index as the second position
    argument as the second position argument in the `enumerate()` function call:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，索引从零开始。有时你可能希望从非零索引开始。要做到这一点，你可以在`enumerate()`函数调用中将起始索引指定为第二个位置参数：
- en: '[PRE30]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now the index starts at 1 index instead of zero:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在索引从1开始，而不是从零开始：
- en: '[PRE31]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Because `enumerate()` allows you to loop through iterables, you can use it inside
    list and dictionary comprehensions.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`enumerate()`允许你循环遍历可迭代对象，所以你可以在列表和字典推导式中使用它。
- en: 'For example, you can store the index and the items as keys and values in the
    dictionary using the `enumerate()` function in the dictionary comprehension expression:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以使用`enumerate()`函数在字典推导式中将索引和项目作为键和值存储在字典中：
- en: '[PRE32]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 7\. Useful Math Functions to Know
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7\. 有用的数学函数
- en: 'Python’s built-in math module comes with out-of-the-box support for common
    mathematical operations. Here are some functions that will come in handy:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Python 内置的 math 模块提供了对常见数学操作的开箱即用支持。以下是一些有用的函数：
- en: math.ceil() and math.floor()
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: math.ceil() 和 math.floor()
- en: 'You’ll often have to round down and round up numbers to the nearest integers;
    the `floor()` and `ceil()` functions in the built-in math module help you do this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常需要将数字四舍五入到最接近的整数；内置 math 模块中的`floor()`和`ceil()`函数可以帮助你做到这一点：
- en: The `floor()` function rounds down a given number to the greatest integer that
    is less than or equal to the given number. and
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`floor()`函数将给定数字向下舍入到小于或等于给定数字的最大整数。'
- en: The `ceil()` function rounds up the given number to the smallest integer that
    is greater than or equal to the given number.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ceil()`函数将给定数字四舍五入到大于或等于给定数字的最小整数。'
- en: 'Here’s an example:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个示例：
- en: '![7 Must-Know Python Tips for Coding Interviews](../Images/3c1ad7374ba4967b3093d11508a86469.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![7 个必知的 Python 编程面试技巧](../Images/3c1ad7374ba4967b3093d11508a86469.png)'
- en: Image by Author
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：作者
- en: 'As 3 is the smallest integer greater than 2.47, ceil(2.47) gives 3:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因为3是大于2.47的最小整数，所以`ceil(2.47)`的结果是3：
- en: '[PRE33]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'And as 3 is the greatest integer less than 3.97 so floor(3.97) also gives 3:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因为3是小于3.97的最大整数，所以`floor(3.97)`的结果也是3：
- en: '[PRE34]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: math.sqrt() and List Comprehension
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: math.sqrt() 和列表推导式
- en: To get the square root of a number, you can use the `sqrt()` function from the
    math module. You can use it in conjunction with comprehensions to extend functionality.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取一个数字的平方根，你可以使用来自数学模块的`sqrt()`函数。你可以将它与列表推导式结合使用，以扩展功能。
- en: Here, we use the `sqrt()` function in a list comprehension expression to generate
    the s
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在列表推导式表达式中使用`sqrt()`函数来生成平方根
- en: '[PRE35]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'For a more easily readable output, let’s round the numbers to two decimal places
    using the built-in `round()` function:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得更易读的输出，让我们使用内置的`round()`函数将数字四舍五入到小数点后两位：
- en: '[PRE36]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Wrapping Up
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: And that's a wrap! I hope you found a few useful tips to add to your Python
    toolbox.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 到此为止！希望你找到了一些有用的技巧来丰富你的 Python 工具箱。
- en: If you're looking to learn and practice Python, and are interested in integrating
    ChatGPT into your learning workflow, check out this guide on how to use [ChatGPT
    as a Python Programming Assistant](/2023/01/chatgpt-python-programming-assistant.html).
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想学习和练习 Python，并且有兴趣将 ChatGPT 集成到你的学习工作流程中，请查看这个关于如何使用[ChatGPT 作为 Python 编程助手](/2023/01/chatgpt-python-programming-assistant.html)的指南。
- en: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** is a technical
    writer who enjoys creating long-form content. Her areas of interest include math,
    programming, and data science. She shares her learning with the developer community
    by authoring tutorials, how-to guides, and more.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Bala Priya C](https://www.linkedin.com/in/bala-priya/)** 是一位技术作家，喜欢创作长篇内容。她的兴趣领域包括数学、编程和数据科学。她通过编写教程、操作指南等，分享她的学习经验与开发者社区。'
- en: More On This Topic
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[5 Free University Courses to Ace Coding Interviews](https://www.kdnuggets.com/5-free-university-courses-to-ace-coding-interviews)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 门免费的大学课程助你在编码面试中脱颖而出](https://www.kdnuggets.com/5-free-university-courses-to-ace-coding-interviews)'
- en: '[Tips for Successfully Navigating Beginner Data Science Job Interviews](https://www.kdnuggets.com/tips-for-successfully-navigating-beginner-data-science-job-interviews)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功应对初级数据科学职位面试的技巧](https://www.kdnuggets.com/tips-for-successfully-navigating-beginner-data-science-job-interviews)'
- en: '[More Tips for Successfully Navigating Beginner Data Science Job Interviews](https://www.kdnuggets.com/more-tips-for-successfully-navigating-beginner-data-science-job-interviews)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[更多成功应对初级数据科学职位面试的技巧](https://www.kdnuggets.com/more-tips-for-successfully-navigating-beginner-data-science-job-interviews)'
- en: '[Deliver a Killer Presentation in Data Science Interviews](https://www.kdnuggets.com/2022/01/deliver-killer-presentation-data-science-interviews.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在数据科学面试中进行精彩演讲](https://www.kdnuggets.com/2022/01/deliver-killer-presentation-data-science-interviews.html)'
- en: '[What it takes to crack Machine Learning Engineer interviews](https://www.kdnuggets.com/2022/10/interview-kickstart-crack-machine-learning-engineer-interviews.html)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[破解机器学习工程师面试的秘诀](https://www.kdnuggets.com/2022/10/interview-kickstart-crack-machine-learning-engineer-interviews.html)'
- en: '[SQL Interviews Preparations Material Resources](https://www.kdnuggets.com/2023/02/sql-interviews-preparations-material-resources.html)'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[SQL 面试准备资料资源](https://www.kdnuggets.com/2023/02/sql-interviews-preparations-material-resources.html)'
