["```py\nfrom sklearn import datasets\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n```", "```py\n# Load the Wine dataset\nwine = datasets.load_wine()\nX = wine.data\ny = wine.target\n```", "```py\n# Split the dataset into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=24)\n```", "```py\n# Create a baseline SVM classifier\nbaseline_svm = SVC()\nbaseline_svm.fit(X_train, y_train)\ny_pred = baseline_svm.predict(X_test)\n```", "```py\n# Evaluate the baseline model\naccuracy = accuracy_score(y_test, y_pred)\nprint(f\"Baseline SVM Accuracy: {accuracy:.2f}\")\n```", "```py\nOutput >>>\nBaseline SVM Accuracy: 0.78\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n```", "```py\n# Define the hyperparameter grid\nparam_grid = {\n    'C': [0.1, 1, 10],\n    'kernel': ['linear', 'rbf', 'poly'],\n    'gamma': [0.1, 1, 'scale', 'auto']\n}\n```", "```py\n# Create the GridSearchCV object\ngrid_search = GridSearchCV(estimator=baseline_svm, param_grid=param_grid, cv=5)\n\n# Fit the model with the grid of hyperparameters\ngrid_search.fit(X_train, y_train)\n```", "```py\n# Get the best hyperparameters and model\nbest_params = grid_search.best_params_\nbest_model = grid_search.best_estimator_\n\n# Evaluate the best model\ny_pred_best = best_model.predict(X_test)\naccuracy_best = accuracy_score(y_test, y_pred_best)\nprint(f\"Best SVM Accuracy: {accuracy_best:.2f}\")\nprint(f\"Best Hyperparameters: {best_params}\")\n```", "```py\nOutput >>>\nBest SVM Accuracy: 0.94\nBest Hyperparameters: {'C': 0.1, 'gamma': 0.1, 'kernel': 'poly'}\n```", "```py\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import uniform\n\nparam_dist = {\n    'C': uniform(0.1, 10),  # Uniform distribution between 0.1 and 10\n    'kernel': ['linear', 'rbf', 'poly'],\n    'gamma': ['scale', 'auto'] + list(np.logspace(-3, 3, 50))\n}\n```", "```py\n# Create the RandomizedSearchCV object\nrandomized_search = RandomizedSearchCV(estimator=baseline_svm, param_distributions=param_dist, n_iter=20, cv=5)\n\nrandomized_search.fit(X_train, y_train)\n```", "```py\n# Get the best hyperparameters and model\nbest_params_rand = randomized_search.best_params_\nbest_model_rand = randomized_search.best_estimator_\n\n# Evaluate the best model\ny_pred_best_rand = best_model_rand.predict(X_test)\naccuracy_best_rand = accuracy_score(y_test, y_pred_best_rand)\nprint(f\"Best SVM Accuracy: {accuracy_best_rand:.2f}\")\nprint(f\"Best Hyperparameters: {best_params_rand}\")\n```", "```py\nOutput >>>\nBest SVM Accuracy: 0.94\nBest Hyperparameters: {'C': 9.66495227534876, 'gamma': 6.25055192527397, 'kernel': 'poly'} \n```"]