- en: 5 Tips for Writing Better Python Functions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高 Python 函数质量的 5 个技巧
- en: 原文：[https://www.kdnuggets.com/5-tips-for-writing-better-python-functions](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/5-tips-for-writing-better-python-functions](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)
- en: '![py-func](../Images/4c82c40e504bc6f9c18898c93ff31efd.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![py-func](../Images/4c82c40e504bc6f9c18898c93ff31efd.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来自作者
- en: We all write functions when coding in Python. But do we necessarily write *good*
    functions? Well, let’s find out.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 Python 中编写函数时，都会写函数。但我们是否总是编写*优质*函数呢？好吧，让我们来找出答案。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Functions in Python let you write modular code. When you have a task you need
    to perform at multiple places, you can wrap the logic of the task into a Python
    function. And you can call the function every time you need to perform that specific
    task. As simple as it seems to get started with Python functions, writing maintainable
    and performant functions is not so straightforward.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的函数让你编写模块化代码。当你在多个地方需要执行一个任务时，你可以将该任务的逻辑封装到一个 Python 函数中。然后，每次需要执行该特定任务时，你可以调用这个函数。虽然开始使用
    Python 函数看起来很简单，但编写可维护且高性能的函数并非那么直接。
- en: And that’s why we’ll explore a few practices that’ll help you write cleaner
    and easy-to-maintain Python functions. Let's get started…
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么我们将探讨一些实践，帮助你编写更干净、更易维护的 Python 函数。让我们开始吧……
- en: 1\. Write Functions That Do Only One Thing
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1\. 编写只做一件事的函数
- en: When writing functions in Python, it's often tempting to put all related tasks
    into a single function. While this can help you code things up quickly, it’ll
    only make your code a pain to maintain in the near future. Not only will this
    make understanding what a function does more difficult but also leads to other
    issues such as too many parameters (more on that later!).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中编写函数时，通常会有把所有相关任务放入一个函数中的诱惑。虽然这可以帮助你快速编写代码，但它只会让你的代码在不久的将来变得难以维护。这不仅使理解函数的作用变得更加困难，还会导致其他问题，比如参数过多（稍后会详细介绍！）。
- en: As a good practice, you should always try to make your function do only one
    thing—one task—and do that well. But sometimes, for a single task, you may need
    to work through a series of subtasks. So how do you decide if and how the function
    should be refactored?
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种良好的实践，你应该始终尝试让你的函数只做一件事——一个任务——并且做到最好。但有时，对于一个任务，你可能需要通过一系列子任务来完成。那么你怎么决定函数是否以及如何重构呢？
- en: Depending on *what* the function is trying to do and how complex the task is,
    you can work out the separation of concerns between subtasks. And then identify
    a suitable level at which you can refactor the function into multiple functions—each
    focusing on a specific subtask.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 根据*函数试图做什么*和任务的复杂程度，你可以解决子任务之间的关注点分离。然后确定一个合适的层次来将函数重构成多个函数——每个函数专注于一个特定的子任务。
- en: '![refactor-func](../Images/c879e94509178e1df554d2b8d1ea3fbc.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![refactor-func](../Images/c879e94509178e1df554d2b8d1ea3fbc.png)'
- en: Refactor functions | Image by Author
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 重构函数 | 图片来自作者
- en: 'Here’s an example. Look at the function `analyze_and_report_sales`:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例。看看函数 `analyze_and_report_sales`：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'It''s quite easy to see that it can be refactored into two functions: one calculating
    the sales metrics and another on writing the sales metrics to a file like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易看出，它可以重构成两个函数：一个计算销售指标，另一个将销售指标写入文件，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now it’s easier to debug any concerns with the calculation of sales metrics
    and file operations separately. And here’s a sample function call:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在更容易分别调试销售指标计算和文件操作中的任何问题。下面是一个示例函数调用：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should be able to see the ‘sales_report.txt’ file in your working directory
    with the sales metrics. This is a simple example to get started, but this is helpful
    especially when you're working on more complex functions.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在工作目录中看到包含销售指标的‘sales_report.txt’文件。这是一个简单的示例来开始，但在处理更复杂的函数时尤其有用。
- en: 2\. Add Type Hints to Improve Maintainability
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2\. 添加类型提示以改善可维护性
- en: Python is a dynamically typed language. So you do not need to declare types
    for the variables you create. But you can add type hints to specify the expected
    data type for variables. When you define the function, you can add the expected
    data types for the parameters and the return values.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种动态类型语言。所以你不需要为创建的变量声明类型。但你可以添加类型提示来指定变量的预期数据类型。当你定义函数时，可以添加参数和返回值的预期数据类型。
- en: 'Because Python does not enforce types at runtime, adding type hints has no
    effect at runtime. But there still are benefits to using type hints, especially
    on the maintainability front:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因为 Python 在运行时不强制类型，所以添加类型提示在运行时没有效果。但使用类型提示仍然有好处，特别是在可维护性方面：
- en: Adding type hints to Python functions serves as inline documentation and gives
    a better idea of what the function does and what values it consumes and returns.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Python 函数添加类型提示作为内联文档，能够更好地了解函数的功能以及它处理和返回的值。
- en: When you add type hints to your functions, you can configure your IDE to leverage
    these type hints. So you’ll get helpful warnings if you try to pass an argument
    of invalid type in one or more function calls, implement functions whose return
    values do not match the expected type, and the like. So you can minimize errors
    upfront.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你给函数添加类型提示时，可以配置你的 IDE 以利用这些类型提示。如果你尝试传递不正确类型的参数，或实现返回值类型不匹配的函数，IDE 会给出有用的警告。这样可以提前最小化错误。
- en: You can optionally use static type checkers like [mypy](https://mypy.readthedocs.io/en/stable/)
    to catch errors earlier rather than letting type mismatches introduce subtle bugs
    that are difficult to debug.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以选择使用像 [mypy](https://mypy.readthedocs.io/en/stable/) 这样的静态类型检查器，以便及早捕捉错误，而不是让类型不匹配引入难以调试的微妙错误。
- en: 'Here’s a function that processes order details:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个处理订单详细信息的函数：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now let''s add type hints to the function like so:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们像这样给函数添加类型提示：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With the modified version, you get to know that the function takes in a list
    of dictionaries. The keys of the dictionary should all be strings and the values
    can either be integers or floating point values. The function also returns a dictionary.
    Let’s take a sample function call:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用修改后的版本，你可以知道函数接受一个字典列表。字典的键应为字符串，值可以是整数或浮点值。函数还返回一个字典。让我们看一个示例函数调用：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here''s the output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In this example, type hints help us get a better idea of how the function works.
    Going forward, we'll add type hints for all the better versions of Python functions
    we write.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，类型提示帮助我们更好地了解函数的工作原理。今后，我们将为我们编写的所有更好的 Python 函数添加类型提示。
- en: 3\. Accept Only the Arguments You Actually Need
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 3\. 只接受实际需要的参数
- en: If you are a beginner or have just started your first dev role, it’s important
    to think about the different parameters when defining the function signature.
    It's quite common to introduce additional parameters in the function signature
    that the function never actually processes.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是初学者或刚刚开始你的第一个开发角色，在定义函数签名时考虑不同的参数非常重要。函数签名中引入额外的参数，而这些参数函数实际上并未处理，是很常见的。
- en: Ensuring that the function takes in only the arguments that are actually necessary
    keeps function calls cleaner and more maintainable in general. On a related note,
    too many parameters in the function signature also make it a pain to maintain.
    **So how do you go about defining easy-to-maintain functions with the right number
    of parameters?**
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 确保函数只接受实际必要的参数，使函数调用更简洁、易于维护。相关的，函数签名中参数过多也会使维护变得困难。**那么如何定义易于维护的函数，并使用正确数量的参数呢？**
- en: 'If you find yourself writing a function signature with a growing number of
    parameters, the first step is to remove all unused parameters from the signature.
    If there are too many parameters even after this step, go back to tip #1: break
    down the task into multiple subtasks and refactor the function into multiple smaller
    functions. This will help keep the number of parameters in check.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你发现自己在编写函数签名时参数数量不断增加，第一步是从签名中删除所有未使用的参数。如果即使在这一步之后参数仍然过多，请回到提示 #1：将任务分解为多个子任务，并将函数重构为多个较小的函数。这将有助于控制参数数量。'
- en: '![num-params](../Images/65cd0ac3b46ca1f757cb75818a81e063.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![num-params](../Images/65cd0ac3b46ca1f757cb75818a81e063.png)'
- en: Keep num_params in check | Image by Author
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 保持 num_params 受控 | 作者提供的图片
- en: 'It’s time for a simple example. Here the function definition to calculate student
    grades contains the `instructor` parameter that’s never used:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是一个简单的示例。这里计算学生成绩的函数定义包含一个从未使用的 `instructor` 参数：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can rewrite the function without the `instructor` parameter like so:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以这样重写函数，去掉 `instructor` 参数：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here''s the output of the function call:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是函数调用的输出：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 4\. Enforce Keyword-Only Arguments to Minimize Errors
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 4\. 强制关键字仅参数以最小化错误
- en: 'In practice, most Python functions take in multiple arguments. You can pass
    in arguments to Python functions as positional arguments, keyword arguments, or
    a mix of both. Read [Python Function Arguments: A Definitive Guide](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)
    for a quick review of function arguments.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，大多数 Python 函数接受多个参数。你可以将参数作为位置参数、关键字参数或两者的混合传递给 Python 函数。阅读 [Python 函数参数：权威指南](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)
    以快速了解函数参数。
- en: Some arguments are naturally positional. But sometimes having function calls
    containing only positional arguments can be confusing. This is especially true
    when the function takes in multiple arguments of the same data type, some required
    and some optional.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一些参数自然是位置参数。但有时仅包含位置参数的函数调用可能会令人困惑。当函数接受多个相同数据类型的参数时，尤其如此，有些是必需的，有些是可选的。
- en: If you recall, with positional arguments, the arguments are passed to the parameters
    in the function signature in the *same* order in which they appear in the function
    call. So change in order of arguments can introduce subtle bugs and type errors.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你记得，使用位置参数时，参数按照它们在函数调用中出现的*相同*顺序传递到函数签名中的参数。因此，参数顺序的变化可能会引入微妙的错误和类型错误。
- en: It’s often helpful to make *optional* arguments *keyword-only*. This also makes
    adding optional parameters much easier—without breaking existing calls.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将*可选*参数设置为*仅限关键字*通常很有帮助。这也使添加可选参数变得更容易——而不会破坏现有的调用。
- en: 'Here’s an example. The `process_payment` function takes in an optional `description`
    string:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例。`process_payment` 函数接受一个可选的 `description` 字符串：
- en: '[PRE10]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Say you want to make the optional `description` a keyword-only argument. Here’s
    how you can do it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想将可选的 `description` 改为仅限关键字的参数。以下是你可以做到的方式：
- en: '[PRE11]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let’s take a sample function call:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来一个示例函数调用：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This outputs:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这输出：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now try passing in all arguments as positional:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在尝试将所有参数作为位置参数传递：
- en: '[PRE14]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You’ll get an error as shown:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到如示所示的错误：
- en: '[PRE15]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 5\. Don’t Return Lists From Functions; Use Generators Instead
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 5\. 不要从函数返回列表；改用生成器
- en: It's quite common to write Python functions that generate sequences such as
    a list of values. But as much as possible, you should avoid returning lists from
    Python functions. Instead you can rewrite them as generator functions. Generators
    use lazy evaluation; so they yield elements of the sequence on demand rather than
    computing all the values ahead of time. Read [Getting Started with Python Generators](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)
    for an introduction to how generators work in Python.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 编写生成序列（例如数值列表）的 Python 函数很常见。但尽可能地，你应该避免从 Python 函数返回列表。你可以将它们重写为生成器函数。生成器使用惰性求值，因此它们按需生成序列元素，而不是事先计算所有值。阅读
    [Python 生成器入门](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)
    了解生成器在 Python 中的工作原理。
- en: 'As an example, take the following function that generates the Fibonacci sequence
    up to a certain upper limit:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下生成斐波那契序列直到某个上限的函数：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'It’s a recursive implementation that’s computationally expensive and populating
    the list and returning it seems more verbose than necessary. Here’s an improved
    version of the function that uses generators:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个递归实现，计算开销较大，填充列表并返回似乎比必要的要冗长。以下是使用生成器的改进版函数：
- en: '[PRE17]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In this case, the function returns a generator object which you can then loop
    through to get the elements of the sequence:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，函数返回一个生成器对象，你可以遍历它来获取序列的元素：
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here’s the output:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是输出结果：
- en: '[PRE19]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, using generators can be much more efficient especially for large
    input sizes. Also, you can chain multiple generators together, so you can create
    efficient data processing pipelines with generators.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，使用生成器在处理大输入量时可以更加高效。此外，你可以将多个生成器链式连接，从而创建高效的数据处理管道。
- en: Wrapping Up
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'And that’s a wrap. You can find all the code [on GitHub](https://github.com/balapriyac/python-basics/tree/main/write-better-funcs).
    Here’s a review of the different tips we went over:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你可以在[GitHub](https://github.com/balapriyac/python-basics/tree/main/write-better-funcs)上找到所有的代码。以下是我们讨论的不同技巧的回顾：
- en: Write functions that do only one thing
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写只做一件事的函数。
- en: Add type hints to improve maintainability
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加类型提示以提高可维护性
- en: Accept only the arguments you actually need
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅接受实际需要的参数
- en: Enforce keyword-only arguments to minimize errors
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制使用仅关键字参数以减少错误
- en: Don't return lists from functions; use generators instead
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要从函数返回列表；使用生成器代替。
- en: I hope you found them helpful! If you aren’t already, try out these practices
    when writing Python functions. Happy coding!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你觉得这些技巧有帮助！如果你还没尝试过，写Python函数时可以尝试这些实践。祝编程愉快！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)**
    是一位来自印度的开发者和技术作家。她喜欢在数学、编程、数据科学和内容创作的交汇处工作。她的兴趣和专业领域包括DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编码和喝咖啡！目前，她正在学习并通过撰写教程、操作指南、观点文章等与开发者社区分享她的知识。Bala还创作引人入胜的资源概述和编码教程。**'
- en: More On This Topic
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关主题
- en: '[Mastering Python: 7 Strategies for Writing Clear, Organized, and…](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握Python：7种编写清晰、有组织且高效代码的策略](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
- en: '[Announcing a Blog Writing Contest, Winner Gets an NVIDIA GPU!](https://www.kdnuggets.com/2022/11/blog-writing-contest-nvidia-gpu.html)'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布博客写作比赛，获胜者将获得NVIDIA GPU！](https://www.kdnuggets.com/2022/11/blog-writing-contest-nvidia-gpu.html)'
- en: '[Statistical Functions in Python](https://www.kdnuggets.com/2022/10/statistical-functions-python.html)'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python中的统计函数](https://www.kdnuggets.com/2022/10/statistical-functions-python.html)'
- en: '[Python Lambda Functions, Explained](https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html)'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python Lambda函数解析](https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html)'
- en: '[4 Python Itertools Filter Functions You Probably Didn''t Know](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4个你可能不知道的Python itertools筛选函数](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
- en: '[10 Python Statistical Functions](https://www.kdnuggets.com/10-python-statistical-functions)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10个Python统计函数](https://www.kdnuggets.com/10-python-statistical-functions)'
