- en: The Last SQL Guide for Data Analysis You’ll Ever Need
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/10/last-sql-guide-data-analysis-ever-need.html](https://www.kdnuggets.com/2019/10/last-sql-guide-data-analysis-ever-need.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Muhsin Warfa](https://www.linkedin.com/in/muhsinwarfa/), Systems Developer/Technical
    Writer**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/487f5a9c2b02e6c40b505f658dda8f7e.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: Photo by [Tobias Fischer](https://unsplash.com/@tofi?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](https://unsplash.com/s/photos/database?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: By 2020, it’s estimated that 1.7 MB of data will be created every second for
    every person on earth. Absurd! Data is going to be the new oil of our digital
    era. The growth of data creates a need to make meaning out of it. This has spawned
    many professions which manage and analyze data to make smarter business decisions.
    Many of these professions require you to be proficient in managing data in databases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common way to manage data is with a relational database management system.
    A relational database stores data in a tabular form consisting of rows and columns.
    These databases usually consist of both data and metadata. Data is the information
    stored in the tables while metadata is the data that describes the data’s structure
    or data types within the database.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: To be able to communicate with these databases directly, we use SQL, which is
    an abbreviation for Structured Query Language. SQL is used to perform tasks such
    as creating, reading, updating, and deleting tables in a database.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: SQL is a declarative and domain-specific language mostly used by business analysts,
    software engineers, data analysts, and many other professions that make use of
    data. You don’t need to be a programmer or know programming languages such as
    Python to master SQL. SQL’s syntax is similar to English. With a little bit of
    memorization of simple syntax, you’re ready to work comfortably with database
    systems.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: “Declarative programming is where you say what you want without having to say
    how to do it. With procedural programming, you have to specify exact steps to
    get the result.” — Stack Overflow
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: My objective in this article is to get you comfortable with SQL and to cover
    SQL concepts individually while simultaneously coming up with queries to handle
    the database.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Database Setup
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this tutorial, we won’t use an RDBMS (relational database management system),
    but rather use a test database to write our own queries. We’ll edit the test database
    using W3school’s SQL editor found [here](https://www.w3schools.com/sql/trysql.asp?filename=trysql_select_all).
    It requires no installation so we can just focus on writing queries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '**Cheatsheet**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Since SQL is a declarative language, it’ll help immensely if we memorize the
    SQL statements. Having a reference guide nearby at all times will help quickly
    grasp the keywords used in querying the tables. [Here](https://docs.google.com/spreadsheets/d/1_HkCVTOpkaDPzg4dmFLJRYQhODKiVBRdX7F3GUI6O3s/edit?usp=sharing) is
    a spreadsheet of keywords that I created for reference. Remember, half the battle
    of leashing this SQL beast is memorizing/knowing the keywords.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Definition Language (DDL)**'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'Most of our queries will involve some form of *action* to be performed on a
    table. Actions fall into four categories: creating, inserting, updating and deleting
    tables.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating a table**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'When we want to create tables in a database, we use the `CREATE TABLE`statement.
    Type the following code into the editor:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This creates a table named `countries` that has four columns. The minimum that
    is required to create a table in SQL is to state the column name, the data types,
    and length. You can, of course, have more characteristics such as `Not Null` meaning
    an empty value won't be entered in the table, but these are optional attributes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Working with Tables
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Insert a table**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating a table we can insert rows by using the `INSERT INTO`method
    statement. Type in the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This statement adds `Somali` as a new country into the `countries` table. It
    is a good practice to specify the column names and values when inserting rows
    into the table.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '**Read a table**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: When we want to look up the data that we stored in the database, we use the `Select` statement.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This statement returns a table that displays the row we just inserted with our
    insert statement. The `*` wildcard means “show me all the rows in the table.”
    If you want your table to only display the `Population` column we remove the asterisk
    and replace it with its column name.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Update a table**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: If we want to modify existing records in a table we use the `UPDATE` statement
    to do so.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This statement updates the`country_name` column in the row with the `country_id` of `1` to `Kenya`.
    We have to specify which country ID, because we only want to change that row.
    If we remove the `WHERE` statement, SQL will assume that we want to update all
    the rows in the table.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**Delete records in a table**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: If we want to delete all rows in a table, we would then use a `DELETE FROM` statement.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you want to delete the table instead of all records, we use the `DROP TABLE` statement.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Note:** This removes the whole table from the database and can result in
    loss of data!'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 这将从数据库中删除整个表格，可能会导致数据丢失！'
- en: Filters
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 过滤器
- en: If we’re only interested in part of the data in the table we can filter the
    table. We have multiple statements that allow us to filter our tables. Filters
    basically select rows that match certain criteria and return the results back
    as a filtered data set. Filtering tables does not mutate the original table.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只对表中的部分数据感兴趣，我们可以对表进行过滤。我们有多种语句可以用来过滤表格。过滤器基本上是选择匹配特定条件的行，并将结果作为过滤后的数据集返回。过滤表格不会改变原始表格。
- en: '**WHERE**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**WHERE**'
- en: The `WHERE` clause is used to filter records. In our editor we have a table
    called `Customers`. If we want to filter customers that are from country `“USA”` we
    use the `WHERE` statement.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`WHERE` 子句用于过滤记录。在我们的编辑器中有一个名为 `Customers` 的表。如果我们想要过滤来自 `“USA”` 的客户，我们使用 `WHERE`
    语句。'
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**AND, OR, and NOT**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**AND, OR, 和 NOT**'
- en: In our previous example, we had only one condition which was “where country
    is USA.” We can also combine multiple conditions using `AND`, `OR`, and `NOT`.
    For example, if you want customers from the USA or Brazil, you use the `OR` statement.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，只有一个条件是“国家是 USA”。我们也可以使用 `AND`、`OR` 和 `NOT` 组合多个条件。例如，如果你想要来自 USA
    或 Brazil 的客户，你使用 `OR` 语句。
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**ORDER BY**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**ORDER BY**'
- en: Most of the time when we filter the table, the data set we get back is unsorted.
    We can sort this filtered unsorted data set using an `ORDER BY` statement.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，当我们过滤表格时，得到的数据集是未排序的。我们可以使用 `ORDER BY` 语句对这个未排序的过滤数据集进行排序。
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will order the filtered results alphabetically . If we want to sort it
    descending, we replace `ASC` with `DESC`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这将按字母顺序对过滤结果进行排序。如果我们想按降序排序，我们将 `ASC` 替换为 `DESC`。
- en: '**BETWEEN**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**BETWEEN**'
- en: Sometimes we would like to select rows whose values satisfy a specific range.
    We use the `BETWEEN` statement to select and choose the range.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们希望选择满足特定范围的行。我们使用 `BETWEEN` 语句来选择并指定范围。
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The statement above filters products whose price falls between 10 and 20.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 上述语句过滤价格在10到20之间的产品。
- en: '**Note:** In a `BETWEEN` operation, the lower bound and upper bound are both
    inclusive in nature.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意：** 在 `BETWEEN` 操作中，下限和上限都是包含在内的。'
- en: '**LIKE**'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**LIKE**'
- en: Sometimes we want to filter the table with a specific pattern in mind. To do
    so we use the `LIKE` statement.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们想要按照特定模式过滤表格。为此，我们使用 `LIKE` 语句。
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The SQL statement above filters the table to show only customers whose name
    begin with the letter A. If you bring the percentage sign forward it would filter
    customers whose name ends with the letter A.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 SQL 语句过滤表格，只显示名称以字母 A 开头的客户。如果你将百分号符号移到前面，它会过滤名称以字母 A 结尾的客户。
- en: '**GROUP BY**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**GROUP BY**'
- en: '`GROUP BY` groups the filtered result set into groups. Think of it as a summary
    group for each column data set.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`GROUP BY` 将过滤后的结果集分组。可以将其视为每列数据集的汇总组。'
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This statement counts the number of customers from each country, then groups
    it into countries. `GROUP BY` is mostly used with aggregate functions which we’ll
    talk about in detail later in the article.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句计算每个国家的客户数量，然后将其按国家分组。`GROUP BY` 通常与聚合函数一起使用，我们将在文章后面详细讨论这些函数。
- en: '**HAVING**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**HAVING**'
- en: '`HAVING` was introduced because the `WHERE` statement doesn’t work with aggregate
    functions; it only deals with direct values in the database.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`HAVING` 被引入是因为 `WHERE` 语句无法与聚合函数一起使用；它仅处理数据库中的直接值。'
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This statement does the same thing as the last example. The only difference
    is that we only include countries that have more than three customers.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这条语句与上一个例子做的事情一样。唯一的区别是我们只包含那些客户超过三位的国家。
- en: Joins
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接
- en: Imagine you’d like to know which customer ordered what products. If a database
    follows a proper database normalization technique, then products, customers, and
    orders would be in separate tables. If we want to see which customer ordered what
    products, we would then have to look at the customer ID inside the order table,
    then go to the customer table and see the products purchases, then use the product
    ID to look up the product table. As you can see, this is a huge headache if were
    to repeat it multiple times. In order to do this more easily, SQL has a statement
    called `JOIN`**.**This clause is used to combine two or more rows of tables based
    on a shared related column.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/02d6e47454a5298a90e09de2b21b7a3c.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: '**INNER JOIN**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '`INNER JOIN`, commonly known as just “`JOIN`,**”** is used to merge related
    tables at a shared column into a single table.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The statement above returns the column’s order ID and customer names. We join
    the table orders (left) and customers (right), but only rows that have matching
    customer IDs. Re-read this sentence while looking at the inner join Venn diagram
    and hopefully this will be easier to grasp.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '**LEFT JOIN**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `LEFT JOIN` statement, we join the left table (customer) and right table
    (order) returns all rows from the left table and matching records from the right
    table.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: '**RIGHT JOIN**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`RIGHT JOIN` returns all rows from the right table and matched records from
    the left table. This returns all employees and any order they might have placed.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '**OUTER JOIN**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Also known as `FULL OUTER JOIN` and is used to combine all rows from one or
    more tables. No rows will be left out, all will be included in the joined tables.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: SQL Aggregate Functions
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A function is a set of procedures that takes an input and spits out an output.
    A SQL function is basically a set of SQL statements that takes an input, performs
    SQL actions on the input, then gives back the results as an output.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: There are two types of functions in SQL:* set functions* and *value functions*.
    Any function that manipulates rows of data in a table and returns a single value
    is called a set function. Programmers usually call them aggregate functions because
    they take rows in the table and return an aggregation of information.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**MIN**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This SQL function returns the least expensive price of all the products in the
    Products table.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '**MAX**'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This SQL function returns the most expensive price of all the products in the
    Products table.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '**AVG**'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This SQL function returns the average price of all the products in the Products
    table.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '**COUNT**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This returns the number of products in the Products table.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: SUM
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This returns the sum of all the orders in the Order Details table.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Indexes
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, all the queries that we’ve looked at are basic queries. Practically
    speaking, the queries that we execute in our day to day life usually consist of
    a combination of multiple SQL statements or functions. When operations are complex,
    this will lower the execution time of the queries.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Luckily, SQL has something called *indexing* which allows for faster lookup
    time. An index is a data structure that has a pointer to the data in a table.
    Without an index, the searching data in a table would be *linear*meaning it would
    go through one row after the other. Indexing is well suited for tabular data.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '**Creating an index**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will create an index to look up data from the column quickly. It is to
    be noted that indexes are not stored in the table and are invisible to the naked
    eye. We most often use indexes when we have a lot of data retrieval on tables.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Database Transactions
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Transactions* are a collection of of SQL statements that must be executed
    for a successful operation. Transactions are all or nothing kinds of operations.
    If all but one operation fails, we consider that transaction to have failed.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: A common example of the use of transactions is transferring money from one account
    to another in a bank. In order for a transfer to be successful money must be removed
    from account A and added to account B. Otherwise, we would roll back the transaction
    to start fresh. When the transaction is complete we say that the transaction is *committed.* This
    ensures the database maintains data integrity and consistency.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: If you want to learn about database transactions in-depth, I suggest you take
    a look at [this](https://www.youtube.com/watch?v=is03uRYFgqc) excellent video
    explanation of database transactions.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Database Triggers
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not all SQL queries are individual and isolated. Sometimes we would like to
    perform an action on table A when a different event happens to another table B.
    This is where we get to use a *database trigger***.**
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: A database trigger is a bunch of SQL statements that are run when a specific
    action occurs within a database. Triggers are defined to run when changes are
    made to a table’s data, mostly before or after actions such as `DELETE`, `UPDATE`,
    and `CREATE`. The most common use case of database triggers is to validate input
    data.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Tips
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All SQL reserved words are uppercase. Everything else (tables, columns, etc.)
    is lowercase.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Divide your queries into multiple lines instead of one long statement in a single
    line.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can’t add a column at a specific position in a table, so be cautious when
    designing the tables.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Be aware when using `AS` alias statements; the columns are not being renamed
    in the table. The aliases only appear in the dataset result.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'SQL evaluates these clauses in the order: `FROM`, `WHERE`, `GROUP BY`, `HAVING`,
    and finally, `SELECT`. Therefore, each clause receives the filtered results of
    the previous filter. It would look like this:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Conclusion
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can generate powerful queries from endless permutations of the SQL statements
    we saw in this article. Remember, the best way to cement the concepts and get
    better at SQL is by practicing and solving SQL problems. Some of the examples
    above were inspired by [W3School ](https://www.w3schools.com/). You can find more
    interactive exercises in websites like [hackerrank](http://hackerrank.com/) and [LeetCode](https://leetcode.com/) which
    have engaging UI to help you study longer.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '**The more you practice the better you’ll be, the harder you train the great
    in you they’ll see.*** — Alcurtis Turner*'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Wishing you peace and prosperity!
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Muhsin Warfa](https://www.linkedin.com/in/muhsinwarfa/)** builds and
    designs full stack web software applications for your organizational needs. As
    a Software product developer, he has worked on multiple projects ranging from
    commercial apps to student in-course apps having worked on all the life cycles
    of development from conceptualization and ideas to testing and deployment of apps.
    If you like this article, feel free to [reach out and stay connected on LinkedIn](https://www.linkedin.com/in/muhsinwarfa/?locale=de_DE)
    and tune in for more articles/posts.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/better-programming/the-last-sql-guide-for-data-analysis-youll-ever-need-17ae10fa4a6f).
    Reposted with permission.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[Top Handy SQL Features for Data Scientists](/2019/08/top-handy-sql-feature-data-scientist.html)'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[7 Steps to Mastering SQL for Data Science — 2019 Edition](/2019/05/7-steps-mastering-sql-data-science-2019-edition.html)'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Is SQL needed to be a data scientist?](/2019/07/sql-needed-data-scientist.html)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
