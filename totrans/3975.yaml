- en: Organize, Search, and Back Up Files with Python’s Pathlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/organize-search-and-back-up-files-with-pythons-pathlib](https://www.kdnuggets.com/organize-search-and-back-up-files-with-pythons-pathlib)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![pathlib-examples](../Images/cf0155e2b6b24b2c3482db40b1b6e159.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Python’s built-in [pathlib module](https://docs.python.org/3/library/pathlib.html)
    makes working with filesystem paths super simple. In [How To Navigate the Filesystem
    with Python’s Pathlib](https://www.kdnuggets.com/how-to-navigate-the-filesystem-with-pythons-pathlib),
    we looked at the basics of working with path objects and navigating the filesystem.
    It’s time to go further.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this tutorial, we’ll go over three specific file management tasks using
    the capabilities of the pathlib module:'
  prefs: []
  type: TYPE_NORMAL
- en: Organizing files by extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for specific files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up important files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this tutorial, you'll have learned how to use pathlib for file
    management tasks. Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Organize Files by Extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you’re researching for and working on a project, you’ll often create ad
    hoc files and download related documents into your working directory until it's
    a clutter, and you need to organize it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a simple example where the project directory contains requirements.txt,
    config files and Python scripts. We’d like to sort the files into subdirectories—one
    for each extension. For convenience, let's choose the extensions as the name of
    the subdirectories.
  prefs: []
  type: TYPE_NORMAL
- en: '![organize-files](../Images/8375a8a21063cc3860e26869efe8fb33.png)'
  prefs: []
  type: TYPE_IMG
- en: Organize Files by Extension | Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a Python script that scans a directory, identifies files by their extensions,
    and moves them into respective subdirectories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `organize_files_by_extension()` function takes a directory path as input,
    resolves it to an absolute path, and organizes the files within that directory
    by their file extensions. It first ensures that the specified path exists and
    is a directory.
  prefs: []
  type: TYPE_NORMAL
- en: Then, it iterates over all items in the directory. For each file, it retrieves
    the file extension, creates a new directory named after the extension (if it doesn't
    already exist), and moves the file into this new directory.
  prefs: []
  type: TYPE_NORMAL
- en: After moving each file, it confirms the success of the operation by checking
    the existence of the file in the new location. If the specified path does not
    exist or is not a directory, it prints an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the output for the example function call (organizing files in the new_project
    directory):'
  prefs: []
  type: TYPE_NORMAL
- en: '![organize](../Images/fb56ab7258f4809fd98ad6ee186a31d6.png)'
  prefs: []
  type: TYPE_IMG
- en: Now try this on a project directory in your working environment. I’ve used if-else
    to account for errors. But you can as well use try-except blocks to make this
    version better.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Search for Specific Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes you may not want to organize the files by their extension into different
    subdirectories as with the previous example. But you may only want to find all
    files with a specific extension (like all image files), and for this you can use
    globbing.
  prefs: []
  type: TYPE_NORMAL
- en: Say we want to find the requirements.txt file to look at the project’s dependencies.
    Let's use the same example but after grouping the files into subdirectories by
    the extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use the `glob()` method on the path object as shown to find all text
    files (defined by the pattern ''*.txt''), you’ll see that it doesn''t find the
    text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This is because `glob()` only searches the current directory, which does not
    contain the requirements.txt file.The requirements.txt file is in the txt subdirectory.
    So you have to use **recursive globbing** with the `rglob()` method instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'So here’s the code to find the text files and print out their contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `search_and_process_text_files` function takes a directory path as input,
    resolves it to an absolute path, and searches for all `.txt` files within that
    directory *and* its subdirectories using the `rglob()` method.
  prefs: []
  type: TYPE_NORMAL
- en: For each text file found, it prints the file's path and then reads and prints
    out the file's contents. This function is useful for recursively locating and
    processing all text files within a specified directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because requirements.txt is the only text file in our example, we get the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now that you know how to use globbing and recursive globbing, try to redo the
    first task—organizing files by extension—using globbing to find and group the
    files and then move them to the target subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Back Up Important Files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Organizing files by the extension and searching for specific files are the examples
    we’ve seen thus far. But how about backing up certain important files, because
    why not?
  prefs: []
  type: TYPE_NORMAL
- en: Here we’d like to copy files from the project directory into a backup directory
    rather than move the file to another location. In addition to pathlib, we’ll also
    use the [shutil](https://docs.python.org/3/library/shutil.html) module’s copy
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a function that copies all files with a specific extension (all
    .py files) to a backup directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `back_up_files()` takes in an existing directory path and a backup directory
    path function and backs up all Python files from a specified directory and its
    subdirectories into a designated backup directory.
  prefs: []
  type: TYPE_NORMAL
- en: It creates path objects for both the source directory and the backup directory,
    and ensures that the backup directory exists by creating it and any necessary
    parent directories if they do not already exist.
  prefs: []
  type: TYPE_NORMAL
- en: The function then iterates through all `.py` files in the source directory using
    the `rglob()` method. For each Python file found, it copies the file to the backup
    directory while retaining the original filename. Essentially, this function helps
    in creating a backup of all Python files within a project directory
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the script and verifying the output, you can always check the
    contents of the backup directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![backup](../Images/19072361bcdcaf944a25088a4f8132a4.png)'
  prefs: []
  type: TYPE_IMG
- en: For your example directory, you can use `back_up_files('/path/to/directory',
    '/path/to/backup/directory')` to back up files of interest.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we've explored practical examples of using Python's pathlib
    module to organize files by extension, search for specific files, and backup important
    files. You can find all the code used in this tutorial [on GitHub](https://github.com/balapriyac/python-basics/tree/main/pathlib-examples).
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the pathlib module makes working with file paths and file management
    tasks easier and more efficient. Now, go ahead and apply these concepts in your
    own projects to handle your file management tasks better. Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Hyperparameter Tuning Using Grid Search and Random Search in Python](https://www.kdnuggets.com/2022/10/hyperparameter-tuning-grid-search-random-search-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Elevate Your Search Engine Skills with Uplimit''s Search with ML Course!](https://www.kdnuggets.com/2023/10/uplimit-elevate-your-search-engine-skills-search-with-ml-course)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a Visual Search Engine - Part 2: The Search Engine](https://www.kdnuggets.com/2022/02/building-visual-search-engine-part-2.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Navigate the Filesystem with Python''s Pathlib](https://www.kdnuggets.com/how-to-navigate-the-filesystem-with-pythons-pathlib)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[IMPACT: The Data Observability Summit is back November 8th and the…](https://www.kdnuggets.com/2023/10/monte-carlo-impact-the-data-observability-summit-is-back)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Back to Basics Week 1: Python Programming & Data Science Foundations](https://www.kdnuggets.com/back-to-basics-week-1-python-programming-data-science-foundations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
