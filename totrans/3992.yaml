- en: 'Duck, Duck, Code: An Introduction to Python’s Duck Typing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 《鸭子，鸭子，代码：Python 中的鸭子类型简介》
- en: 原文：[https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing](https://www.kdnuggets.com/duck-duck-code-an-introduction-to-pythons-duck-typing)
- en: '![Python''s Duck Typing](../Images/b04a81a6c5518af2e2a602d8f549cd17.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Python 的鸭子类型](../Images/b04a81a6c5518af2e2a602d8f549cd17.png)'
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片作者 | DALLE-3 和 Canva
- en: What is Duck Typing?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是鸭子类型？
- en: Duck typing is a concept in programming often related to dynamic languages like
    Python, that emphasizes more on the object’s behavior over its type or class.
    When you use duck typing, you check whether an object has certain methods or attributes,
    rather than checking for the exact class. The name comes from the saying,
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 鸭子类型是编程中的一个概念，通常与像 Python 这样的动态语言相关，它更注重对象的行为而非其类型或类。当你使用鸭子类型时，你会检查对象是否具有某些方法或属性，而不是检查具体的类。这个名字源于一句话，
- en: If it looks like a duck, swims like a duck, and quacks like a duck, then it
    probably is a duck.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果它看起来像一只鸭子，游泳像一只鸭子，叫声像一只鸭子，那么它可能就是一只鸭子。
- en: Duck typing brings several advantages to programming in Python. It allows for
    more flexible and reusable code and supports polymorphism, enabling different
    object types to be used interchangeably as long as they provide the required interface.
    This results in simpler and more concise code. However, duck typing also has its
    disadvantages. One major drawback is the potential for runtime errors. Additionally,
    it can make your code challenging to understand.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 鸭子类型（Duck typing）为 Python 编程带来了几个优势。它允许编写更灵活和可重用的代码，并支持多态性，使得不同的对象类型可以互换使用，只要它们提供了所需的接口。这使得代码更简洁、更简明。然而，鸭子类型也有其缺点。一个主要的缺陷是潜在的运行时错误。此外，它可能会使你的代码更难理解。
- en: Understanding Dynamic Behavior in Python
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Python 中的动态行为
- en: In dynamically typed languages, variable types are not fixed. Instead, they
    are determined at runtime based on the assigned values. In contrast, statically
    typed languages check variable types at compile time. For instance, if you attempt
    to reassign a variable to a value of a different type in static typing, you will
    encounter an error. Dynamic typing provides greater flexibility in how variables
    and objects are used.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在动态类型语言中，变量类型不是固定的。相反，它们是在运行时根据赋值确定的。与之对比，静态类型语言在编译时检查变量类型。例如，如果你尝试将一个变量重新分配为不同类型的值，在静态类型中会遇到错误。动态类型提供了更大的灵活性来使用变量和对象。
- en: Let's consider the `*` Python operator; it behaves differently based on the
    type of the object it is used with. When used between two integers, it performs
    multiplication.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一下 `*` Python 操作符；它的行为会根据与之使用的对象的类型而有所不同。当用于两个整数之间时，它会执行乘法。
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When used with a string and an integer, it repeats the string. This demonstrates
    Python’s dynamic typing system and adaptable nature.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当与字符串和整数一起使用时，它会重复字符串。这展示了 Python 的动态类型系统和适应性特征。
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How Duck Typing Works in Python?
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Python 中，鸭子类型是如何工作的？
- en: Duck typing is preferred in dynamic languages because it encourages a more natural
    coding style. Developers can focus on designing interfaces based on what objects
    can do. In duck typing, methods defined inside the class are given more importance
    than the object itself. Let’s clarify this with a basic example.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在动态语言中，鸭子类型更受欢迎，因为它鼓励更自然的编码风格。开发者可以专注于设计基于对象能够做什么的接口。在鸭子类型中，类内定义的方法比对象本身更重要。我们通过一个基本的例子来说明这一点。
- en: 'Example No: 01'
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例编号：01
- en: 'We have two classes: Duck and Person. Ducks can make a quack sound, while people
    can speak. Each class has a method called sound that prints their respective sounds.
    The function `make_it_sound` takes any object that has a sound method and calls
    it.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两个类：Duck（鸭子）和 Person（人）。鸭子可以发出呱呱声，而人类可以说话。每个类都有一个名为 sound 的方法，用于打印各自的声音。函数
    `make_it_sound` 接受任何具有 sound 方法的对象并调用它。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now, let's see how we can use duck typing to work for this example.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何利用鸭子类型来处理这个例子。
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this example, both `Duck` and `Person` classes have a `sound` method. It
    doesn't matter if the object is a Duck or a Person; as long as it has a `sound`
    method, the `make_it_sound` function will work correctly.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`Duck` 和 `Person` 类都有一个 `sound` 方法。无论对象是鸭子还是人，只要它有一个 `sound` 方法，`make_it_sound`
    函数都会正常工作。
- en: However, duck typing can lead to runtime errors. For instance, changing the
    name of the method `sound` in the class Person to speak will raise an `AttributeError`
    on runtime. This is because the function `make_it_sound` expects all the objects
    to have a sound function.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，duck typing 可能导致运行时错误。例如，将 Person 类中的 `sound` 方法的名称更改为 speak 会在运行时引发 `AttributeError`。这是因为函数
    `make_it_sound` 期望所有对象都有一个 sound 函数。
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Output:**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Example No: 02'
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '示例 No: 02'
- en: Let's explore another program that deals with calculating areas of different
    shapes without worrying about their specific types. Each shape (Rectangle, Circle,
    Triangle) has its own class with a method called area to calculate its area.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨另一个程序，该程序处理不同形状的面积计算，而不必担心它们的具体类型。每个形状（矩形、圆形、三角形）都有自己的类，其中包含一个名为 area
    的方法来计算其面积。
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Output:**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the above example, we have a `print_areas` function that takes a list of
    shapes and prints their names along with their calculated areas. Notice that we
    don't need to check the type of each shape explicitly before calculating its area.
    As the method `circumference` is only present for the `Circle` class, it gets
    implemented only once. This example shows how duck typing can be used to write
    flexible code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们有一个 `print_areas` 函数，它接受一个形状列表，并打印它们的名称以及计算出的面积。注意，我们不需要在计算面积之前显式检查每个形状的类型。由于
    `circumference` 方法仅在 `Circle` 类中存在，因此它仅实现一次。这个例子展示了 duck typing 如何用于编写灵活的代码。
- en: Final Thoughts
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最终思考
- en: Duck typing is a powerful feature of Python that makes your code more dynamic
    and versatile, enabling you to write more generic and adaptable programs. While
    it brings many benefits, such as flexibility and simplicity, it also requires
    careful documentation and testing to avoid potential errors.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Duck typing 是 Python 的一个强大特性，使你的代码更加动态和多才多艺，允许你编写更通用和适应性强的程序。尽管它带来了灵活性和简洁性等许多好处，但它也需要仔细的文档和测试以避免潜在的错误。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal 是一位机器学习工程师和技术作家，对数据科学及 AI 与医学的交汇点充满深厚的热情。她是电子书《利用 ChatGPT 最大化生产力》的共同作者。作为
    2022 年 APAC Google Generation Scholar，她倡导多样性和学术卓越。她还被认定为 Teradata Diversity in
    Tech Scholar、Mitacs Globalink Research Scholar 和 Harvard WeCode Scholar。Kanwal
    是变革的热情倡导者，创立了 FEMCodes 来赋权女性在 STEM 领域。'
- en: '* * *'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[A Brief Introduction to Papers With Code](https://www.kdnuggets.com/2022/04/brief-introduction-papers-code.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[简要介绍 Papers With Code](https://www.kdnuggets.com/2022/04/brief-introduction-papers-code.html)'
- en: '[KDnuggets News, April 27: A Brief Introduction to Papers With Code;…](https://www.kdnuggets.com/2022/n17.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，4 月 27 日：简要介绍 Papers With Code;…](https://www.kdnuggets.com/2022/n17.html)'
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[优化 Python 代码性能：深入探讨 Python 性能分析器](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[作为数据科学家管理你的可重用 Python 代码](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[宣布 PyCaret 3.0：开源、低代码的 Python 机器学习](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
