["```py\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report\nimport joblib\n\n# Load the iris dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n\n# Train a RandomForest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\nclf.fit(X_train, y_train)\n\n# Evaluate the model\ny_pred = clf.predict(X_test)\naccuracy = accuracy_score(y_test, y_pred)\nreport = classification_report(y_test, y_pred, target_names=iris.target_names)\n\nprint(f\"Model Accuracy: {accuracy}\")\nprint(\"Classification Report:\")\nprint(report)\n\n# Save the trained model to a file\njoblib.dump(clf, \"iris_model.pkl\")\n```", "```py\n$ python train_model.py\n```", "```py\nModel Accuracy: 1.0\nClassification Report:\n              precision    recall  f1-score   support\n\n      setosa       1.00      1.00      1.00        10\n  versicolor       1.00      1.00      1.00         9\n   virginica       1.00      1.00      1.00        11\n\n    accuracy                           1.00        30\n   macro avg       1.00      1.00      1.00        30\nweighted avg       1.00      1.00      1.00        30\n```", "```py\n$ pip install fastapi uvicorn\n```", "```py\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nimport joblib\nimport numpy as np\nfrom sklearn.datasets import load_iris\n\n# Load the trained model\nmodel = joblib.load(\"iris_model.pkl\")\n\napp = FastAPI()\n\nclass IrisInput(BaseModel):\n    sepal_length: float\n    sepal_width: float\n    petal_length: float\n    petal_width: float\n\nclass IrisPrediction(BaseModel):\n    predicted_class: int\n    predicted_class_name: str\n\n@app.post(\"/predict\", response_model=IrisPrediction)\ndef predict(data: IrisInput):\n    # Convert the input data to a numpy array\n    input_data = np.array(\n        [[data.sepal_length, data.sepal_width, data.petal_length, data.petal_width]]\n    )\n\n    # Make a prediction\n    predicted_class = model.predict(input_data)[0]\n    predicted_class_name = load_iris().target_names[predicted_class]\n\n    return IrisPrediction(\n        predicted_class=predicted_class, predicted_class_name=predicted_class_name\n    )\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n```", "```py\n$ python app.py\n```", "```py\nINFO:     Started server process [33828]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\n```", "```py\nfrom fastapi import FastAPI, Request, Form\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.templating import Jinja2Templates\nfrom pydantic import BaseModel\nimport joblib\nimport numpy as np\nfrom sklearn.datasets import load_iris\n\n# Load the trained model\nmodel = joblib.load(\"iris_model.pkl\")\n\n# Initialize FastAPI\napp = FastAPI()\n\n# Set up templates\ntemplates = Jinja2Templates(directory=\"templates\")\n\n# Pydantic models for input and output data\nclass IrisInput(BaseModel):\n    sepal_length: float\n    sepal_width: float\n    petal_length: float\n    petal_width: float\n\nclass IrisPrediction(BaseModel):\n    predicted_class: int\n    predicted_class_name: str\n\n@app.get(\"/\", response_class=HTMLResponse)\nasync def read_root(request: Request):\n    return templates.TemplateResponse(\"index.html\", {\"request\": request})\n\n@app.post(\"/predict\", response_model=IrisPrediction)\nasync def predict(\n    request: Request,\n    sepal_length: float = Form(...),\n    sepal_width: float = Form(...),\n    petal_length: float = Form(...),\n    petal_width: float = Form(...),\n):\n    # Convert the input data to a numpy array\n    input_data = np.array([[sepal_length, sepal_width, petal_length, petal_width]])\n\n    # Make a prediction\n    predicted_class = model.predict(input_data)[0]\n    predicted_class_name = load_iris().target_names[predicted_class]\n\n    return templates.TemplateResponse(\n        \"result.html\",\n        {\n            \"request\": request,\n            \"predicted_class\": predicted_class,\n            \"predicted_class_name\": predicted_class_name,\n            \"sepal_length\": sepal_length,\n            \"sepal_width\": sepal_width,\n            \"petal_length\": petal_length,\n            \"petal_width\": petal_width,\n        },\n    )\n\nif __name__ == \"__main__\":\n    import uvicorn\n\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n```", "```py\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Iris Flower Prediction</title>\n\n</head>\n\n<body>\n\n<h1>Predict Iris Flower Species</h1>\n\n<form action=\"/predict\" method=\"post\">\n\n<label **for**=\"sepal_length\">Sepal Length:</label>\n\n<input type=\"number\" step=\"any\" id=\"sepal_length\" name=\"sepal_length\" required><br>\n\n<label **for**=\"sepal_width\">Sepal Width:</label>\n\n<input type=\"number\" step=\"any\" id=\"sepal_width\" name=\"sepal_width\" required><br>\n\n<label **for**=\"petal_length\">Petal Length:</label>\n\n<input type=\"number\" step=\"any\" id=\"petal_length\" name=\"petal_length\" required><br>\n\n<label **for**=\"petal_width\">Petal Width:</label>\n\n<input type=\"number\" step=\"any\" id=\"petal_width\" name=\"petal_width\" required><br>\n\n<button type=\"submit\">Predict</button>\n\n</form>\n\n</body>\n\n</html>\n```", "```py\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Prediction Result</title>\n\n</head>\n\n<body>\n\n<h1>Prediction Result</h1>\n\n<p>Sepal Length: {{ sepal_length }}</p>\n\n<p>Sepal Width: {{ sepal_width }}</p>\n\n<p>Petal Length: {{ petal_length }}</p>\n\n<p>Petal Width: {{ petal_width }}</p>\n\n<h2>Predicted Class: {{ predicted_class_name }} (Class ID: {{ predicted_class }})</h2>\n\n<a href=\"/\">Predict Again</a>\n\n</body>\n\n</html>\n```", "```py\n$ python app.py \n```", "```py\nINFO:     Started server process [2932]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     127.0.0.1:63153 - \"GET / HTTP/1.1\" 200 OK\n```"]