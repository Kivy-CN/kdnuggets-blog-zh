- en: 'MarshMallow: The Sweetest Python Library for Data Serialization and Validation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 'Marshmallow: 最甜美的 Python 数据序列化与验证库'
- en: 原文：[https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation](https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation](https://www.kdnuggets.com/marshmallow-the-sweetest-python-library-for-data-serialization-and-validation)
- en: '![MarshMallow: The Sweetest Python Library for Data Serialization and Validation](../Images/b6ac43e0310a98ea737b8b8744447f8b.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Marshmallow: 最甜美的 Python 数据序列化与验证库](../Images/b6ac43e0310a98ea737b8b8744447f8b.png)'
- en: Image by Author | Leonardo AI & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供 | Leonardo AI & Canva
- en: Data serialization is a basic programming concept with great value in everyday
    programs. It refers to converting complex data objects to an intermediate format
    that can be saved and easily converted back to its original form. However, the
    common data serialization Python libraries like JSON and pickle are very limited
    in their functionality. With structured programs and object-oriented programming,
    we need stronger support to handle data classes.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 数据序列化是一个基础的编程概念，在日常程序中具有很大价值。它指的是将复杂的数据对象转换为中间格式，以便保存并可以轻松地转换回原始形式。然而，像 JSON
    和 pickle 这样的常见数据序列化 Python 库功能非常有限。随着结构化程序和面向对象编程的发展，我们需要更强的支持来处理数据类。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT 部门'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Marshmallow is one of the most famous data-handling libraries that is widely
    used by Python developers to develop robust software applications. It supports
    data serialization and provides a strong abstract solution for handling data validation
    in an object-oriented paradigm.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Marshmallow 是最著名的数据处理库之一，广泛被 Python 开发者用于开发健壮的软件应用程序。它支持数据序列化，并提供了在面向对象范式中处理数据验证的强大抽象解决方案。
- en: 'In this article, we use a running example given below to understand how to
    use Marshmallow in existing projects. The code shows three classes representing
    a simple e-commerce model: `Product`, `Customer`, and `Order`. Each class minimally
    defines its parameters. We''ll see how to save an instance of an object and ensure
    its correctness when we try to load it again in our code.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本文中，我们将通过下面给出的示例来了解如何在现有项目中使用 Marshmallow。代码展示了三个表示简单电子商务模型的类：`Product`、`Customer`
    和 `Order`。每个类都最小地定义了它的参数。我们将看到如何保存对象的实例并确保在代码中重新加载时其正确性。
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Getting Started with Marshmallow
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始使用 Marshmallow
- en: Installation
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 安装
- en: 'Marshmallow is available as a Python library at PyPI and can be easily installed
    using pip. To install or upgrade the Marshmallow dependency, run the below command:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Marshmallow 作为一个 Python 库可以在 PyPI 上找到，并且可以通过 pip 轻松安装。要安装或升级 Marshmallow 依赖项，请运行以下命令：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This installs the recent stable version of Marshmallow in the active environment.
    If you want the development version of the library with all the latest functionality,
    you can install it using the command below:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这会在活动环境中安装最新稳定版本的 Marshmallow。如果你想要包含所有最新功能的开发版本，可以使用下面的命令安装：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Creating Schemas
  id: totrans-20
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建 Schemas
- en: Let's start by adding Marshmallow functionality to the `Product` class. We need
    to create a new class that represents a schema an instance of the `Product` class
    must follow. Think of a schema like a blueprint, that defines the variables in
    the `Product` class and the datatype they belong to.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将 Marshmallow 功能添加到`Product`类中。我们需要创建一个新的类，表示`Product`类的实例必须遵循的 schema。可以把
    schema 想象成一个蓝图，定义了`Product`类中的变量及其数据类型。
- en: 'Let''s break down and understand the basic code below:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解并理解下面的基本代码：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We create a new class that inherits from the `Schema` class in Marshmallow.
    Then, we declare the same variable names as our `Product` class and define their
    field types. The fields class in Marshmallow supports various data types; here,
    we use the primitive types Int, String, and Float.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个继承自Marshmallow中的`Schema`类的新类。然后，我们声明与`Product`类相同的变量名称并定义它们的字段类型。Marshmallow中的字段类支持各种数据类型；在这里，我们使用原始类型Int、String和Float。
- en: Serialization
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 序列化
- en: 'Now that we have a schema defined for our object, we can now convert a Python
    class instance into a JSON string or a Python dictionary for serialization. Here''s
    the basic implementation:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经为对象定义了模式，我们现在可以将Python类实例转换为JSON字符串或Python字典进行序列化。这里是基本实现：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We create an object of our `ProductSchema`, which converts a Product object
    to a serializable format like JSON or dictionary.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个`ProductSchema`对象，它将`Product`对象转换为可序列化的格式，如JSON或字典。
- en: Note the difference between `dump` and `dumps` function results. One returns
    a Python dictionary object that can be saved using pickle, and the other returns
    a string object that follows the JSON format.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 注意`dump`和`dumps`函数结果之间的区别。一个返回一个可以使用pickle保存的Python字典对象，另一个返回一个遵循JSON格式的字符串对象。
- en: Deserialization
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 反序列化
- en: To reverse the serialization process, we use deserialization. An object is saved
    so it can be loaded and accessed later, and Marshmallow helps with that.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 为了逆转序列化过程，我们使用反序列化。一个对象被保存，以便以后可以加载和访问，而Marshmallow可以帮助实现这一点。
- en: 'A Python dictionary can be validated using the load function, which verifies
    the variables and their associated datatypes. The below function shows how it
    works:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Python字典可以通过load函数进行验证，该函数验证变量及其相关的数据类型。下面的函数展示了它是如何工作的：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The schema validates that the dictionary has the correct parameters and data
    types. If the validation fails, a `ValidationError` is raised so it's essential
    to wrap the `load function` in a try-except block. If it is successful, the result
    object is still a dictionary when the original argument is also a dictionary.
    Not so helpful right? What we generally want is to validate the dictionary and
    convert it back to the original object it was serialized from.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 模式验证字典是否具有正确的参数和数据类型。如果验证失败，将引发`ValidationError`，因此将`load function`封装在try-except块中是必要的。如果验证成功，结果对象仍然是一个字典，当原始参数也是字典时，这并不是很有用，对吧？我们通常希望的是验证字典并将其转换回最初序列化的原始对象。
- en: 'To achieve this, we use the `post_load` decorator provided by Marshmallow:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，我们使用Marshmallow提供的`post_load`装饰器：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We create a function in the schema class with the `post_load` decorator. This
    function takes the validated dictionary and converts it back to a Product object.
    Including `**kwargs` is important as Marshmallow may pass additional necessary
    arguments through the decorator.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在模式类中创建一个带有`post_load`装饰器的函数。这个函数接收经过验证的字典并将其转换回`Product`对象。包括`**kwargs`非常重要，因为Marshmallow可能会通过装饰器传递其他必要的参数。
- en: This modification to the load functionality ensures that after validation, the
    Python dictionary is passed to the `post_load` function, which creates a `Product`
    object from the dictionary. This makes it possible to deserialize an object using
    Marshmallow.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对load功能的这种修改确保在验证后，Python字典被传递到`post_load`函数中，该函数从字典中创建`Product`对象。这使得使用Marshmallow进行对象反序列化成为可能。
- en: Validation
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 验证
- en: Often, we need additional validation specific to our use case. While data type
    validation is essential, it doesn't cover all the validation we might need. Even
    in this simple example, extra validation is needed for our `Product` object. We
    need to ensure that the price is not below 0\. We can also define more rules,
    such as ensuring that our product name is between 3 and 128 characters. These
    rules help ensure our codebase conforms to a defined database schema.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们需要针对我们的使用案例进行额外的验证。虽然数据类型验证是必不可少的，但它并不能涵盖我们可能需要的所有验证。即使在这个简单的示例中，我们的`Product`对象也需要额外的验证。我们需要确保价格不低于0\.
    我们还可以定义更多规则，例如确保产品名称的长度在3到128个字符之间。这些规则有助于确保我们的代码库符合定义的数据库模式。
- en: 'Let us now see how we can implement this validation using Marshmallow:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何使用Marshmallow实现这种验证：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We modify the `ProductSchema` class to add two new functions. One validates
    the price parameter and the other validates the name parameter. We use the validates
    function decorator and annotate the name of the variable that the function is
    supposed to validate. The implementation of these functions is straightforward:
    if the value is incorrect, we raise a `ValidationError`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们修改了 `ProductSchema` 类，添加了两个新函数。一个用于验证价格参数，另一个用于验证名称参数。我们使用 validates 函数装饰器并标注函数要验证的变量名称。这些函数的实现很简单：如果值不正确，我们会引发
    `ValidationError`。
- en: Nested Schemas
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 嵌套模式
- en: Now, with the basic `Product` class validation, we have covered all the basic
    functionality provided by the Marshmallow library. Let us now build complexity
    and see how the other two classes will be validated.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着基本的 `Product` 类验证，我们已经涵盖了 Marshmallow 库提供的所有基本功能。现在让我们增加复杂性，看看其他两个类如何进行验证。
- en: The `Customer` class is fairly straightforward as it contains the basic attributes
    and primitive datatypes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`Customer` 类相当简单，因为它包含了基本属性和原始数据类型。'
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, defining the schema for the `Order` class forces us to learn a new
    and required concept of Nested Schemas. An order will be associated with a specific
    customer and the customer can order any number of products. This is defined in
    the class definition, and when we validate the `Order` schema, we also need to
    validate the `Product` and `Customer` objects passed to it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，为 `Order` 类定义模式迫使我们学习一个新的必需概念——嵌套模式。一个订单将关联到一个特定的客户，而客户可以订购任意数量的产品。这在类定义中得以定义，当我们验证
    `Order` 模式时，我们还需要验证传递给它的 `Product` 和 `Customer` 对象。
- en: 'Instead of redefining everything in the `OrderSchema`, we will avoid repetition
    and use nested schemas. The order schema is defined as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将避免在 `OrderSchema` 中重新定义一切，使用嵌套模式来避免重复。订单模式定义如下：
- en: '[PRE9]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Within the `Order` schema, we include the `ProductSchema` and `CustomerSchema`
    definitions. This ensures that the defined validations for these schemas are automatically
    applied, following the **DRY (Don't Repeat Yourself)** principle in programming,
    which allows the reuse of existing code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Order` 模式中，我们包括了 `ProductSchema` 和 `CustomerSchema` 定义。这确保了这些模式的定义验证被自动应用，遵循编程中的
    **DRY（不要重复自己）** 原则，从而实现现有代码的重用。
- en: Wrapping Up
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: In this article, we covered the quick start and use case of the Marshmallow
    library, one of the most popular serialization and data validation libraries in
    Python. Although similar to Pydantic, many developers prefer Marshmallow due to
    its schema definition method, which resembles validation libraries in other languages
    like JavaScript.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们介绍了 Marshmallow 库的快速入门和使用案例，这是 Python 中最受欢迎的序列化和数据验证库之一。虽然与 Pydantic
    类似，但许多开发人员更喜欢 Marshmallow，因为它的模式定义方法类似于其他语言（如 JavaScript）中的验证库。
- en: Marshmallow is easy to integrate with Python backend frameworks like FastAPI
    and Flask, making it a popular choice for web framework and data validation tasks,
    as well as for ORMs like SQLAlchemy.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Marshmallow 易于与像 FastAPI 和 Flask 这样的 Python 后端框架集成，使其成为 Web 框架和数据验证任务的热门选择，同时也适用于像
    SQLAlchemy 这样的 ORM。
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)**
    Kanwal 是一名机器学习工程师和技术作家，对数据科学以及人工智能与医学的交汇点充满热情。她共同撰写了电子书《用 ChatGPT 最大化生产力》。作为 2022
    年 APAC 地区的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认可为 Teradata 多样性技术学者、Mitacs
    Globalink 研究学者和哈佛 WeCode 学者。Kanwal 是变革的积极倡导者，她创立了 FEMCodes 以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Pydantic Tutorial: Data Validation in Python Made Simple](https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pydantic 教程：简化的 Python 数据验证](https://www.kdnuggets.com/pydantic-tutorial-data-validation-in-python-made-simple)'
- en: '[Data Validation for PySpark Applications using Pandera](https://www.kdnuggets.com/2023/08/data-validation-pyspark-applications-pandera.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Pandera 对 PySpark 应用进行数据验证](https://www.kdnuggets.com/2023/08/data-validation-pyspark-applications-pandera.html)'
- en: '[Why Use k-fold Cross Validation?](https://www.kdnuggets.com/2022/07/kfold-cross-validation.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为什么使用 k-fold 交叉验证？](https://www.kdnuggets.com/2022/07/kfold-cross-validation.html)'
- en: '[Pandas AI: The Generative AI Python Library](https://www.kdnuggets.com/2023/05/pandas-ai-generative-ai-python-library.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pandas AI：生成性 AI Python 库](https://www.kdnuggets.com/2023/05/pandas-ai-generative-ai-python-library.html)'
- en: '[Testing Like a Pro: A Step-by-Step Guide to Python''s Mock Library](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[像专业人士一样测试：Python Mock 库的逐步指南](https://www.kdnuggets.com/testing-like-a-pro-a-step-by-step-guide-to-pythons-mock-library)'
- en: '[Pip Install YOU: A Beginner''s Guide to Creating Your Python Library](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Pip 安装 YOU：创建 Python 库的初学者指南](https://www.kdnuggets.com/pip-install-you-a-beginners-guide-to-creating-your-python-library)'
