- en: Machine Learning in Power BI using PyCaret
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyCaret 在 Power BI 中进行机器学习
- en: 原文：[https://www.kdnuggets.com/2020/05/machine-learning-power-bi-pycaret.html](https://www.kdnuggets.com/2020/05/machine-learning-power-bi-pycaret.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/05/machine-learning-power-bi-pycaret.html](https://www.kdnuggets.com/2020/05/machine-learning-power-bi-pycaret.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Moez Ali](https://www.linkedin.com/in/profile-moez/)，PyCaret 创始人及作者**'
- en: '![Figure](../Images/3f5a4a9efcba98dab013359395156933.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/3f5a4a9efcba98dab013359395156933.png)'
- en: Machine Learning Meets Business Intelligence
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习与商业智能相遇
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织进行 IT 管理'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '**PyCaret 1.0.0**'
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**PyCaret 1.0.0**'
- en: Last week we announced [PyCaret](https://www.pycaret.org/), an open source machine
    learning library in Python that trains and deploys machine learning models in
    a **low-code** environment. In our [previous post](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46) we
    demonstrated how to use PyCaret in Jupyter Notebook to train and deploy machine
    learning models in Python.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 上周我们宣布了 [PyCaret](https://www.pycaret.org/)，一个开源的 Python 机器学习库，可以在**低代码**环境中训练和部署机器学习模型。在我们
    [之前的帖子](https://towardsdatascience.com/announcing-pycaret-an-open-source-low-code-machine-learning-library-in-python-4a1f1aad8d46)
    中，我们演示了如何在 Jupyter Notebook 中使用 PyCaret 训练和部署机器学习模型。
- en: In this post we present a **step-by-step tutorial** on how PyCaret can be integrated
    within [Power BI](https://powerbi.microsoft.com/en-us/), thus allowing analysts
    and data scientists to add a layer of machine learning to their Dashboards and
    Reports without any additional license or software costs. PyCaret is an open source
    and **free to use **Python library that comes with a wide range of functions that
    are exclusively built to work within Power BI.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这篇文章中，我们提供了一个**逐步教程**，介绍如何将 PyCaret 集成到 [Power BI](https://powerbi.microsoft.com/en-us/)
    中，从而允许分析师和数据科学家在其仪表板和报告中添加机器学习层，而无需额外的许可证或软件成本。PyCaret 是一个开源的**免费使用**的 Python
    库，提供了一系列专为 Power BI 设计的功能。
- en: 'By the end of this article you will learn how to implement the following in
    Power BI:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到本文结束时，你将学会如何在 Power BI 中实现以下内容：
- en: '**Clustering** — Group data points with similar characteristics.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**聚类** — 将具有相似特征的数据点分组。'
- en: '**Anomaly Detection **— Identify rare observations / outliers in the data.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异常检测** — 识别数据中的稀有观察值/异常值。'
- en: '**Natural Language Processing **— Analyze text data *via* topic modeling.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自然语言处理** — 通过主题建模分析文本数据。'
- en: '**Association Rule Mining **— Find interesting relationships in the data.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关联规则挖掘** — 发现数据中的有趣关系。'
- en: '**Classification **— Predict categorical class labels that are binary (1 or
    0).'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分类** — 预测二元（1 或 0）类别标签。'
- en: '**Regression **— Predict continuous value such as Sales, Price etc'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回归** — 预测连续值，如销售额、价格等'
- en: “PyCaret is democratizing machine learning and the use of advanced analytics
    by providing **free, open source, and low-code** machine learning solution for
    business analysts, domain experts, citizen data scientists, and experienced data
    scientists”.
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “PyCaret 正在通过提供**免费的、开源的、低代码**机器学习解决方案，让商业分析师、领域专家、公民数据科学家和经验丰富的数据科学家能够平等使用先进分析。”
- en: Microsoft Power BI
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微软 Power BI
- en: Power BI is a business analytics solution that lets you visualize your data
    and share insights across your organization, or embed them in your app or website.
    In this tutorial, we will use [Power BI Desktop](https://powerbi.microsoft.com/en-us/downloads/) for
    machine learning by importing the PyCaret library into Power BI.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Power BI 是一个业务分析解决方案，让你可以可视化数据并在组织内分享洞察，或将其嵌入到你的应用或网站中。在本教程中，我们将使用[Power BI
    Desktop](https://powerbi.microsoft.com/en-us/downloads/)通过将 PyCaret 库导入 Power
    BI 来进行机器学习。
- en: Before we start
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在我们开始之前
- en: If you have used Python before, it is likely that you already have Anaconda
    Distribution installed on your computer. If not, [click here](https://www.anaconda.com/distribution/) to
    download Anaconda Distribution with Python 3.7 or greater.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过 Python，那么你很可能已经在电脑上安装了 Anaconda Distribution。如果没有，请[点击这里](https://www.anaconda.com/distribution/)下载
    Python 3.7 或更高版本的 Anaconda Distribution。
- en: '![Figure](../Images/163b0f04e24139d2b34cd6ee02ab9391.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/163b0f04e24139d2b34cd6ee02ab9391.png)'
- en: '[https://www.anaconda.com/distribution/](https://www.anaconda.com/distribution/)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.anaconda.com/distribution/](https://www.anaconda.com/distribution/)'
- en: Setting up the Environment
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'Before we start using PyCaret’s machine learning capabilities in Power BI we
    have to create a virtual environment and install pycaret. It’s a three-step process:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始在 Power BI 中使用 PyCaret 的机器学习功能之前，我们必须创建一个虚拟环境并安装 pycaret。这是一个三步过程：
- en: ✅ **Step 1 — Create an anaconda environment**
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ✅ **步骤 1 — 创建 Anaconda 环境**
- en: 'Open **Anaconda Prompt **from start menu and run the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从开始菜单打开**Anaconda 提示符**并运行以下代码：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure](../Images/3bd6efcfa61251f8c40a82ef295b22e6.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/3bd6efcfa61251f8c40a82ef295b22e6.png)'
- en: Anaconda Prompt — Creating an environment
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Anaconda 提示符 — 创建环境
- en: ✅ **Step 2 — Install PyCaret**
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ✅ **步骤 2 — 安装 PyCaret**
- en: 'Run the following code in Anaconda Prompt:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Anaconda 提示符中运行以下代码：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installation may take 10 – 15 minutes.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 安装可能需要 10 – 15 分钟。
- en: ✅ **Step 3 — Set Python Directory in Power BI**
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: ✅ **步骤 3 — 在 Power BI 中设置 Python 目录**
- en: 'The virtual environment created must be linked with Power BI. This can be done
    using Global Settings in Power BI Desktop (File → Options → Global → Python scripting).
    Anaconda Environment by default is installed under:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的虚拟环境必须与 Power BI 关联。这可以通过 Power BI Desktop 中的全局设置完成（文件 → 选项 → 全局 → Python
    脚本）。默认情况下，Anaconda 环境安装在：
- en: C:\Users\***username***\AppData\Local\Continuum\anaconda3\envs\myenv
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: C:\Users\***username***\AppData\Local\Continuum\anaconda3\envs\myenv
- en: '![Figure](../Images/e3fdb4e0cc8d5ace7873bd23993fd46d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/e3fdb4e0cc8d5ace7873bd23993fd46d.png)'
- en: File → Options → Global → Python scripting
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 文件 → 选项 → 全局 → Python 脚本
- en: ???? Example 1 — Clustering in Power BI
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 示例 1 — 在 Power BI 中进行聚类
- en: 'Clustering is a machine learning technique that groups data points with similar
    characteristics. These groupings are useful for exploring data, identifying patterns
    and analyzing a subset of data. Some common business use cases for clustering
    are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类是一种机器学习技术，用于将具有相似特征的数据点分组。这些分组对于探索数据、识别模式和分析数据子集非常有用。一些常见的业务应用案例包括：
- en: ✔ Customer segmentation for the purpose of marketing.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 为市场营销目的进行客户细分。
- en: ✔ Customer purchasing behavior analysis for promotions and discounts.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 分析客户购买行为，以制定促销和折扣策略。
- en: ✔ Identifying geo-clusters in an epidemic outbreak such as COVID-19.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 识别 COVID-19 等流行病爆发中的地理簇。
- en: In this tutorial we will use **‘jewellery.csv’** file that is available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/jewellery.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用**‘jewellery.csv’**文件，该文件可以在 PyCaret 的[github 仓库](https://github.com/pycaret/pycaret/blob/master/datasets/jewellery.csv)中找到。你可以通过
    Web 连接器加载数据。（Power BI Desktop → 获取数据 → 来自 Web）。
- en: '**Link to csv File: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/jewellery.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/jewellery.csv)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV 文件链接：**[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/jewellery.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/jewellery.csv)'
- en: '![Figure](../Images/5edc725e8cd55d215ef4c071db06b9a1.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/5edc725e8cd55d215ef4c071db06b9a1.png)'
- en: Power BI Desktop → Get Data → Other → Web![Figure](../Images/ff97b38f2726e72632995c3d0f8be0bc.png)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Power BI Desktop → 获取数据 → 其他 → Web ![图示](../Images/ff97b38f2726e72632995c3d0f8be0bc.png)
- en: '*Sample data points from jewellery.csv*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自 jewellery.csv 的示例数据点*'
- en: '**K-Means Clustering**'
  id: totrans-55
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**K-Means 聚类**'
- en: To train a clustering model we will execute Python script in Power Query Editor
    (Power Query Editor → Transform → Run python script).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 为了训练聚类模型，我们将在 Power Query 编辑器中执行 Python 脚本（Power Query 编辑器 → 转换 → 运行 Python
    脚本）。
- en: '![Figure](../Images/4b25a7feba15824c05ba67abecc26150.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/4b25a7feba15824c05ba67abecc26150.png)'
- en: Ribbon in Power Query Editor
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query 编辑器中的功能区
- en: 'Run the following code as a Python script:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下代码作为 Python 脚本：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![Figure](../Images/7f86b0448df2bda96c4cc68ef0543abf.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/7f86b0448df2bda96c4cc68ef0543abf.png)'
- en: Power Query Editor (Transform → Run python script)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query 编辑器（转换 → 运行 Python 脚本）
- en: '**Output:**'
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/9a864907193881d33e531198caf91ed8.png)'
- en: Clustering Results (after execution of code)![Figure](../Images/4146b95c76aa1ba15323aa20d9d16f89.png)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 聚类结果（代码执行后）![图示](../Images/4146b95c76aa1ba15323aa20d9d16f89.png)
- en: Final Output (after clicking on Table)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出（点击表格后）
- en: A new column **‘Cluster’ **containing label is attached to the original table.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个包含标签的新列**‘Cluster’**被附加到原始表格中。
- en: 'Once you apply the query (Power Query Editor → Home → Close & Apply), Here
    is how you can visualize the clusters in Power BI:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用查询（Power Query 编辑器 → 首页 → 关闭 & 应用），以下是如何在 Power BI 中可视化集群：
- en: '![](../Images/d14f4b5e3aa036b0135d90551263d569.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d14f4b5e3aa036b0135d90551263d569.png)'
- en: 'By default, PyCaret trains a **K-Means** clustering model with 4 clusters (*i.e.
    all the data points in the table are categorized into 4 groups*). Default values
    can be changed easily:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PyCaret 训练一个**K-Means**聚类模型，设置为 4 个集群（*即表中的所有数据点被分为 4 个组*）。默认值可以轻松更改：
- en: To change the number of clusters you can use ***num_clusters***parameter within **get_clusters(
    ) **function.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改集群数量，你可以在**get_clusters()**函数中使用***num_clusters***参数。
- en: To change model type use ***model ***parameter within **get_clusters( )**.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改模型类型，可以在**get_clusters()**中使用***model***参数。
- en: 'See the following example code of training K-Modes model with 6 clusters:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下示例代码，训练 6 个集群的 K-Modes 模型：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'There are 9 ready-to-use clustering algorithms available in PyCaret:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 提供了 9 种现成的聚类算法：
- en: '![](../Images/899f72d5dd7f2a4f89b2e0e40fd3c9d8.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/899f72d5dd7f2a4f89b2e0e40fd3c9d8.png)'
- en: All the preprocessing tasks necessary to train a clustering model such as [missing
    value imputation](https://pycaret.org/missing-values/) (if table has any missing
    or *null* values), or [normalization](https://www.pycaret.org/normalization),
    or [one-hot-encoding](https://pycaret.org/one-hot-encoding/), they all are automatically
    performed before training a clustering model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 训练聚类模型所需的所有预处理任务，如[缺失值插补](https://pycaret.org/missing-values/)（如果表中有任何缺失或*空*值）、[归一化](https://www.pycaret.org/normalization)或[独热编码](https://pycaret.org/one-hot-encoding/)，都会在训练聚类模型之前自动执行。[点击这里](https://www.pycaret.org/preprocessing)了解更多关于
    PyCaret 预处理功能的信息。
- en: ???? In this example we have used the **get_clusters( ) **function to assign
    cluster labels in the original table. Every time the query is refreshed, clusters
    are recalculated. An alternate way to implement this would be to use the **predict_model(
    )** function to predict cluster labels using a **pre-trained model **in Python
    or in Power BI (*see Example 5 below to see how to train machine learning models
    in Power BI environment*).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 在此示例中，我们使用了**get_clusters()**函数来为原始表格分配集群标签。每次查询刷新时，集群都会重新计算。另一种实现方式是使用**predict_model()**函数，通过**预训练模型**在
    Python 或 Power BI 中预测集群标签（*请参见下面的示例 5 了解如何在 Power BI 环境中训练机器学习模型*）。
- en: ???? If you want to learn how to train a clustering model in Python using Jupyter
    Notebook, please see our [Clustering 101 Beginner’s Tutorial](https://www.pycaret.org/clu101). *(no
    coding background needed).*
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 如果你想学习如何在 Python 中使用 Jupyter Notebook 训练聚类模型，请参见我们的[聚类 101 初学者教程](https://www.pycaret.org/clu101)。*（无需编码背景）。*
- en: ???? Example 2 — Anomaly Detection in Power BI
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 示例 2 — Power BI 中的异常检测
- en: 'Anomaly Detection is a machine learning technique used for identifying **rare
    items**, **events,** **or observations **by checking for rows in the table that
    differ significantly from the majority of the rows. Typically, the anomalous items
    will translate to some kind of problem such as bank fraud, a structural defect,
    medical problem or error. Some common business use cases for anomaly detection
    are:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 异常检测是一种机器学习技术，用于通过检查表中与大多数行显著不同的行来识别**稀有项**、**事件**或**观察**。通常，异常项将转换为某种问题，如银行欺诈、结构缺陷、医疗问题或错误。一些常见的异常检测业务用例包括：
- en: ✔ Fraud detection (credit cards, insurance, etc.) using financial data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 使用财务数据进行欺诈检测（信用卡、保险等）。
- en: ✔ Intrusion detection (system security, malware) or monitoring for network traffic
    surges and drops.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 入侵检测（系统安全、恶意软件）或监测网络流量的激增和下降。
- en: ✔ Identifying multivariate outliers in the dataset.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 识别数据集中的多变量异常值。
- en: In this tutorial we will use **‘anomaly.csv’** file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/anomaly.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用PyCaret的**‘anomaly.csv’**文件，该文件可在PyCaret的[github repository](https://github.com/pycaret/pycaret/blob/master/datasets/anomaly.csv)中找到。您可以使用网络连接器加载数据。（Power
    BI Desktop → 获取数据 → 从Web获取）。
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/anomaly.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/anomaly.csv)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV文件链接：**[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/anomaly.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/anomaly.csv)'
- en: '![Figure](../Images/471fa1bd43faf4234bb72f168b363b6e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/471fa1bd43faf4234bb72f168b363b6e.png)'
- en: '*Sample data points from anomaly.csv*'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自anomaly.csv的样本数据点*'
- en: K-Nearest Neighbors Anomaly Detector
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: K-Nearest Neighbors Anomaly Detector
- en: 'Similar to clustering, we will run Python script from Power Query Editor (Transform
    → Run python script) to train an anomaly detection model. Run the following code
    as a Python script:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于聚类，我们将从Power Query编辑器（转换 → 运行Python脚本）运行Python脚本，以训练异常检测模型。以Python脚本运行以下代码：
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![Figure](../Images/3a0f137e42ed28bad716d735c66bf2d2.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/3a0f137e42ed28bad716d735c66bf2d2.png)'
- en: Power Query Editor (Transform → Run python script)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query编辑器（转换 → 运行Python脚本）
- en: '**Output:**'
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/9a864907193881d33e531198caf91ed8.png)'
- en: Anomaly Detection Results (after execution of code)![Figure](../Images/e158a6347c29c8bcc68a298b983b4051.png)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 异常检测结果（代码执行后）![图](../Images/e158a6347c29c8bcc68a298b983b4051.png)
- en: Final Output (after clicking on Table)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出（点击表格后）
- en: Two new columns are attached to the original table. Label (1 = outlier, 0 =
    inlier) and Score (data points with high scores are categorized as outlier).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 原始表格中附加了两个新列。标签（1 = 异常值，0 = 正常值）和分数（高分数据点被分类为异常值）。
- en: 'Once you apply the query, here is how you can visualize the results from anomaly
    detection in Power BI:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用查询，以下是如何在Power BI中可视化异常检测结果：
- en: '![](../Images/1f19ffddcfedac07e646344f23f5b6f9.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1f19ffddcfedac07e646344f23f5b6f9.png)'
- en: 'By default, PyCaret trains a **K-Nearest Neighbors Anomaly Detector** with
    5% fraction (i.e. 5% of the total number of rows in the table will be flagged
    as outlier). Default values can be changed easily:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PyCaret会训练一个**K-Nearest Neighbors Anomaly Detector**，其分数为5%（即表格中5%的行将被标记为异常值）。默认值可以轻松更改：
- en: To change the fraction value you can use ***fraction ***parameter within **get_outliers(
    ) **function.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改分数值，您可以在**get_outliers( )**函数中使用***fraction***参数。
- en: To change model type use ***model ***parameter within **get_outliers( )**.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改模型类型，请在**get_outliers( )**中使用***model***参数。
- en: 'See the following code for training an **Isolation Forest** model with 0.1
    fraction:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请参见以下代码，以使用0.1分数训练**Isolation Forest**模型：
- en: '[PRE5]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There are over 10 ready-to-use anomaly detection algorithms in PyCaret:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret中有超过10种现成的异常检测算法：
- en: '![](../Images/60f99e849a1c82050db0cbb2700f2311.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/60f99e849a1c82050db0cbb2700f2311.png)'
- en: All the preprocessing tasks necessary to train an anomaly detection model such
    as [missing value imputation](https://pycaret.org/missing-values/) (if table has
    any missing or *null* values), or [normalization](https://www.pycaret.org/normalization),
    or [one-hot-encoding](https://pycaret.org/one-hot-encoding/), they all are automatically
    performed before training an anomaly detection model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有训练异常检测模型所需的预处理任务，如[缺失值填补](https://pycaret.org/missing-values/)（如果表格中有任何缺失或*空*值），[归一化](https://www.pycaret.org/normalization)或[独热编码](https://pycaret.org/one-hot-encoding/)，这些都将在训练异常检测模型之前自动执行。
    [点击这里](https://www.pycaret.org/preprocessing)了解有关PyCaret预处理功能的更多信息。
- en: ???? In this example we have used the **get_outliers( ) **function to assign
    outlier label and score for analysis. Every time the query is refreshed, outliers
    are recalculated. An alternate way to implement this would be to use the **predict_model(
    )** function to predict outliers using a pre-trained model in Python or in Power
    BI (*see Example 5 below to see how to train machine learning models in Power
    BI environment*).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 在此示例中，我们使用了**get_outliers( )**函数为分析分配异常值标签和分数。每次刷新查询时，异常值都会重新计算。另一种实现方法是使用**predict_model(
    )**函数，使用 Python 或 Power BI 中的预训练模型预测异常值（*请参见下面的示例 5，了解如何在 Power BI 环境中训练机器学习模型*）。
- en: ???? If you want to learn how to train an anomaly detector in Python using Jupyter
    Notebook, please see our [Anomaly Detection 101 Beginner’s Tutorial](https://www.pycaret.org/ano101). *(no
    coding background needed).*
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 如果你想学习如何使用 Jupyter Notebook 在 Python 中训练异常检测器，请查看我们的[异常检测 101 初学者教程](https://www.pycaret.org/ano101)。*（无需编码背景）。*
- en: ???? Example 3 — Natural Language Processing
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 示例 3 — 自然语言处理
- en: Several techniques are used to analyze text data among which **Topic Modeling **is
    a popular one. A topic model is a type of statistical model for discovering the
    abstract topics in a collection of documents. Topic modeling is a frequently used
    text-mining tool for the discovery of hidden semantic structures in a text data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 分析文本数据时使用了几种技术，其中**主题建模**是一种流行的方法。主题模型是一种统计模型，用于发现文档集合中的抽象主题。主题建模是发现文本数据中隐藏语义结构的常用文本挖掘工具。
- en: In this tutorial we will usethe** ‘kiva.csv’ **file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/kiva.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 PyCaret 的**‘kiva.csv’**文件，该文件在 PyCaret 的[github 存储库](https://github.com/pycaret/pycaret/blob/master/datasets/kiva.csv)中可以找到。你可以使用
    Web 连接器加载数据。（Power BI Desktop → 获取数据 → 从 Web）。
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/kiva.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/kiva.csv)'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**csv 文件链接：**[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/kiva.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/kiva.csv)'
- en: '**Latent Dirichlet Allocation**'
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**潜在狄利克雷分配**'
- en: 'Run the following code as a Python script in Power Query Editor:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Power Query 编辑器中作为 Python 脚本运行以下代码：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure](../Images/702fe793104164afbd7fe70ed7ed5321.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![Figure](../Images/702fe793104164afbd7fe70ed7ed5321.png)'
- en: Power Query Editor (Transform → Run python script)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query 编辑器（转换 → 运行 Python 脚本）
- en: '**‘en’** is the name of the column containing text in the table **‘kiva’**.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**‘en’**是表**‘kiva’**中包含文本的列名。'
- en: 'Output:'
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
- en: Topic Modeling Results (after execution of code)![Figure](../Images/b94268f345e68e888a64c3205e01d7e4.png)
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 主题建模结果（代码执行后）![Figure](../Images/b94268f345e68e888a64c3205e01d7e4.png)
- en: Final Output (after clicking on Table)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出（点击表格后）
- en: 'Once the code is executed, new columns with weight of topics and dominant topic
    are attached to the original table. There are many ways to visualize the output
    of Topic Models in Power BI. See an example below:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦代码执行，新列将附加到原始表中，包括主题的权重和主导主题。在 Power BI 中有很多方法来可视化主题模型的输出。请参见下面的示例：
- en: '![](../Images/62689e5bc6adca6e229d5b3480a0898c.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/62689e5bc6adca6e229d5b3480a0898c.png)'
- en: 'By default, PyCaret trains a Latent Dirichlet Allocation model with 4 topics.
    Default values can be changed easily:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，PyCaret 使用 4 个主题训练潜在狄利克雷分配模型。默认值可以很容易地更改：
- en: To change the number of topics you can use the ***num_topics ***parameter within **get_topics(
    ) **function.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改主题数量，可以使用***num_topics***参数在**get_topics( )**函数中。
- en: To change model type use the ***model ***parameter within the **get_topics(
    )**.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要更改模型类型，请使用***model***参数在**get_topics( )**中。
- en: 'See the example code for training a **Non-Negative Matrix Factorization Model** with
    10 topics:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看训练**非负矩阵分解模型**的示例代码，主题数为 10：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'PyCaret has following ready-to-use algorithms for topic modeling:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 提供了以下现成的主题建模算法：
- en: '![](../Images/2939021fb3471a663f521e5373968128.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/2939021fb3471a663f521e5373968128.png)'
- en: ???? Example 4— Association Rule Mining in Power BI
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 示例 4 — Power BI 中的关联规则挖掘
- en: 'Association Rule Miningis a **rule-based machine learning **technique for discovering
    interesting relations between variables in a database. It is intended to identify
    strong rules using measures of interestingness. Some common business use cases
    for association rule mining are:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 关联规则挖掘是一种**基于规则的机器学习**技术，用于发现数据库中变量之间的有趣关系。其目的是使用有趣性度量来识别强规则。一些关联规则挖掘的常见商业用例包括：
- en: ✔ Market Basket Analysis to understand items frequently bought together.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 市场篮子分析用于了解经常一起购买的商品。
- en: ✔ Medical Diagnosis to assist physicians in determining occurrence probability
    of illness given factors and symptoms.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 医疗诊断以协助医生确定给定因素和症状下疾病发生的概率。
- en: In this tutorial we will use the **‘france.csv’** file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/france.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 PyCaret 的**‘france.csv’** 文件，文件可在 PyCaret 的 [github 仓库](https://github.com/pycaret/pycaret/blob/master/datasets/france.csv)中找到。您可以使用
    Web 连接器加载数据。（Power BI Desktop → 获取数据 → 来自 Web）。
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/france.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/france.csv)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV 文件链接：**[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/france.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/france.csv)'
- en: '![Figure](../Images/bf78797a41f6371b4558a21e94597fcc.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/bf78797a41f6371b4558a21e94597fcc.png)'
- en: '*Sample data points from france.csv*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*来自 france.csv 的样本数据点*'
- en: Apriori Algorithm
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Apriori 算法
- en: 'It should be clear by now that all PyCaret functions are executed as Python
    script in Power Query Editor (Transform → Run python script). Run the following
    code to train an association rule model using the Apriori algorithm:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该清楚，所有 PyCaret 函数都在 Power Query 编辑器中作为 Python 脚本执行（变换 → 运行 Python 脚本）。运行以下代码以使用
    Apriori 算法训练关联规则模型：
- en: '[PRE8]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![Figure](../Images/0b92da4796521d4ed23ae963558ca542.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/0b92da4796521d4ed23ae963558ca542.png)'
- en: Power Query Editor (Transform → Run python script)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query 编辑器（变换 → 运行 Python 脚本）
- en: '**‘InvoiceNo’** is the column containing transaction id and **‘Description’** contains
    the variable of interest i.e. the Product name.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**‘InvoiceNo’** 是包含交易 ID 的列，而 **‘Description’** 包含感兴趣的变量，即产品名称。'
- en: '**Output:**'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**输出：**'
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/9a864907193881d33e531198caf91ed8.png)'
- en: Association Rule Mining Results (after execution of code)![Figure](../Images/b90d6b13f0e3251dd796f4f77a0cb442.png)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 关联规则挖掘结果（代码执行后）![图像](../Images/b90d6b13f0e3251dd796f4f77a0cb442.png)
- en: Final Output (after clicking on Table)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出（点击表格后）
- en: It returns a table with antecedents and consequents with related metrics such
    as support, confidence, lift etc. [Click here](https://www.pycaret.org/association-rule) to
    learn more about Association Rules Mining in PyCaret.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一个包含前提和结论及相关度量（如支持度、置信度、提升度等）的表格。[点击这里](https://www.pycaret.org/association-rule)了解更多关于
    PyCaret 中的关联规则挖掘信息。
- en: ???? Example 5 — Classification in Power BI
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 示例 5 — Power BI 中的分类
- en: 'Classification is a supervised machine learning technique used to predict the
    categorical **class labels** (also known as binary variables). Some common business
    use case of classification are:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 分类是一种监督学习技术，用于预测类别**类标签**（也称为二元变量）。一些常见的分类商业用例包括：
- en: ✔ Predicting customer loan / credit card default.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 预测客户贷款/信用卡违约。
- en: ✔ Predicting customer churn (whether the customer will stay or leave)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 预测客户流失（客户是否会留在或离开）
- en: ✔ Predicting patient outcome (whether patient has disease or not)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: ✔ 预测患者结果（患者是否有疾病）
- en: In this tutorial we will use** ‘employee.csv’ **file available on PyCaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/employee.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 PyCaret 的**‘employee.csv’** 文件，文件可在 PyCaret 的 [github 仓库](https://github.com/pycaret/pycaret/blob/master/datasets/employee.csv)中找到。您可以使用
    Web 连接器加载数据。（Power BI Desktop → 获取数据 → 来自 Web）。
- en: '**Link to csv file: **[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/employee.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/employee.csv)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV 文件链接：**[https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/employee.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/employee.csv)'
- en: '**Objective: **The table **‘employee’** contains information of 15,000 active
    employees in a company such as time spent at the company, average monthly hours
    worked, promotion history, department etc. Based on all of these columns (also
    known as *features* in machine learning terminology) the objective is to predict
    whether the employee will leave the company or not, represented by the column
    **‘left’** (1 means yes, 0 means no).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：** 表格**‘employee’**包含了公司15,000名在职员工的信息，如在公司的时间、每月平均工作时间、晋升历史、部门等。基于这些列（在机器学习术语中也称为*特征*），目标是预测员工是否会离开公司，由**‘left’**列表示（1表示是，0表示否）。'
- en: 'Unlike Clustering, Anomaly Detection, and NLP examples which fall under the
    umbrella of unsupervised Machine Learning, Classification is a **supervised **technique
    and hence it is implemented in two parts:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 与归类、异常检测和NLP示例不同，这些示例属于无监督机器学习的范畴，分类是一种**有监督**技术，因此分为两个部分进行实现：
- en: '**Part 1: Training a Classification Model in Power BI**'
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**第1部分：在Power BI中训练分类模型**'
- en: The first step is to create a duplicate of the table **‘employee’** in Power
    Query Editor which will be used for training a model.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在Power Query编辑器中创建**‘employee’**表的副本，用于训练模型。
- en: '![Figure](../Images/12d72c5edb34e2a1b1adc63f6852db3a.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/12d72c5edb34e2a1b1adc63f6852db3a.png)'
- en: Power Query Editor → Right Click ‘employee’ → Duplicate
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query编辑器 → 右击‘employee’ → 复制
- en: 'Run the following code in the newly created duplicate table **‘employee (model
    training)’** to train a classification model:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在新创建的重复表**‘employee (model training)’**中运行以下代码来训练分类模型：
- en: '[PRE9]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '![Figure](../Images/ff70a0c29e6419e5655f0a35f125fbcc.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/ff70a0c29e6419e5655f0a35f125fbcc.png)'
- en: Power Query Editor (Transform → Run python script)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Power Query编辑器（变换 → 运行Python脚本）
- en: 'Output:'
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出：
- en: The output of this script will be a **pickle file **saved at the defined location.
    The pickle file contains the entire data transformation pipeline as well as trained
    model object.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 该脚本的输出将是一个**pickle文件**，保存在定义的位置。pickle文件包含整个数据转换管道以及训练好的模型对象。
- en: ???? An alternate to this would be to train a model in Jupyter notebook instead
    of Power BI. In this case, Power BI will only be used to generate predictions
    on the front-end using a pre-trained model in Jupyter notebook that will be imported
    as a pickle file into Power BI (follow Part 2 below). To learn more about using
    PyCaret in Python, [click here](https://www.pycaret.org/tutorial).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 替代方法是训练一个Jupyter notebook中的模型，而不是在Power BI中进行。在这种情况下，Power BI将仅用于在前端生成基于Jupyter
    notebook中预训练模型的预测，该模型将作为pickle文件导入到Power BI中（请参阅下面的第2部分）。要了解有关在Python中使用PyCaret的更多信息，
    [点击这里](https://www.pycaret.org/tutorial)。
- en: ???? If you want to learn how to train a classification model in Python using
    Jupyter Notebook, please see our [Binary Classification 101 Beginner’s Tutorial](https://www.pycaret.org/clf101). *(no
    coding background needed).*
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 如果你想学习如何在Python中使用Jupyter Notebook训练分类模型，请查看我们的 [二元分类101初学者教程](https://www.pycaret.org/clf101)。*（无需编码背景）。*
- en: 'There are 18 ready-to-use classification algorithms available in PyCaret:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret中有18种现成的分类算法可供使用：
- en: '![](../Images/0a844304999676480f56c42c145ec52f.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/0a844304999676480f56c42c145ec52f.png)'
- en: 'Part 2: Generate Predictions using Trained Model'
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2部分：使用训练模型生成预测
- en: 'We can now use the trained model on the original **‘employee’ **table to predict
    whether the employee will leave the company or not (1 or 0) and the probability
    %. Run the following code as python script to generate predictions:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用训练好的模型对原始**‘employee’**表进行预测，以判断员工是否会离开公司（1或0）及其概率%。运行以下代码作为Python脚本来生成预测：
- en: '[PRE10]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/9a864907193881d33e531198caf91ed8.png)'
- en: Classification Predictions (after execution of code)![Figure](../Images/e1ffb5e9076607e39ac8a591a04da35f.png)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 分类预测（代码执行后）![图](../Images/e1ffb5e9076607e39ac8a591a04da35f.png)
- en: Final Output (after clicking on Table)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出（点击表格后）
- en: Two new columns are attached to the original table. The **‘Label’** column indicates
    the prediction and **‘Score’** column is the probability of outcome.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在原始表格中附加了两个新列。**‘Label’**列表示预测结果，**‘Score’**列表示结果的概率。
- en: In this example we have predicted on the same data that we have used for training
    the model for demonstration purpose only. In a real setting, the **‘Left’** column
    is the actual outcome and is unknown at the time of prediction.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们在相同的数据上进行预测，这些数据用于训练模型，仅用于演示目的。在实际情况下，**‘Left’**列是实际结果，在预测时是未知的。
- en: In this tutorial we have trained an **Extreme Gradient Boosting** **(‘xgboost’)** model
    and used it to generate predictions. We have done this for simplicity only. Practically,
    you can use PyCaret to predict any type of model or chain of models.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们训练了一个 **极端梯度提升** **(‘xgboost’)** 模型并用于生成预测。为了简单起见，我们仅执行了这一步。实际上，你可以使用
    PyCaret 预测任何类型的模型或模型链。
- en: PyCaret’s **predict_model( )** function can work seamlessly with the pickle
    file created using PyCaret as it contains the entire transformation pipeline along
    with trained model object. [Click here](https://www.pycaret.org/predict-model) to
    learn more about the **predict_model **function.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 的 **predict_model( )** 函数可以与使用 PyCaret 创建的 pickle 文件无缝协作，因为它包含整个转换管道以及训练好的模型对象。 [点击这里](https://www.pycaret.org/predict-model) 了解更多关于**predict_model**函数的信息。
- en: ???? All the preprocessing tasks necessary to train a classification model such
    as [missing value imputation](https://pycaret.org/missing-values/) (if table has
    any missing or *null* values), or [one-hot-encoding](https://pycaret.org/one-hot-encoding/),
    or [target encoding](https://www.pycaret.org/one-hot-encoding), they all are automatically
    performed before training a model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 所有训练分类模型所需的预处理任务，如 [缺失值填充](https://pycaret.org/missing-values/)（如果表格中有任何缺失或*空*值），或者 [独热编码](https://pycaret.org/one-hot-encoding/)，或者 [目标编码](https://www.pycaret.org/one-hot-encoding)，这些都将在训练模型之前自动执行。 [点击这里](https://www.pycaret.org/preprocessing) 了解有关
    PyCaret 预处理功能的更多信息。
- en: ???? Example 6— Regression in Power BI
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ???? 示例 6— Power BI 中的回归
- en: '**Regression **is a supervised machine learning technique used to predict the
    a continuous outcome in the best possible way given the past data and its corresponding
    past outcomes. Unlike Classification which is used for predicting a binary outcome
    such as Yes or No (1 or 0), Regression is used for predicting continuous values
    such as Sales, Price, quantity etc.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**回归**是一种监督学习技术，用于在给定过去数据及其对应过去结果的情况下，以最佳方式预测连续结果。与用于预测二元结果（如是或否，1 或 0）的分类不同，回归用于预测连续值，如销售、价格、数量等。'
- en: In this tutorial we will use the **‘boston.csv’** file available on pycaret’s [github
    repository](https://github.com/pycaret/pycaret/blob/master/datasets/boston.csv).
    You can load the data using a web connector. (Power BI Desktop → Get Data → From
    Web).
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 PyCaret 的 **‘boston.csv’** 文件，该文件可以在 [github 仓库](https://github.com/pycaret/pycaret/blob/master/datasets/boston.csv)
    中找到。你可以使用 Web 连接器加载数据。（Power BI Desktop → 获取数据 → 从 Web）。
- en: '**Link to csv file:** [https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/boston.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/boston.csv)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSV 文件链接：** [https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/boston.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/boston.csv)'
- en: '**Objective: **The table **‘boston’** contains information on 506 houses in
    Boston such as average number of rooms, property tax rates, population etc. Based
    on these columns (also known as *features* in machine learning terminology) the
    objective is to predict the median value of house, represented by column **‘medv’**.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标：** 表格 **‘boston’** 包含了波士顿 506 套房屋的信息，如平均房间数、房产税率、人口等。基于这些列（在机器学习术语中也称为*特征*），目标是预测房屋的中位数值，由列 **‘medv’**表示。'
- en: 'Part 1: Training a Regression Model in Power BI'
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第1部分：在 Power BI 中训练回归模型
- en: The first step is to create a duplicate of the **‘boston’** table in Power Query
    Editor that will be used for training a model.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是在 Power Query 编辑器中创建一个 **‘boston’** 表的副本，该副本将用于训练模型。
- en: 'Run the following code in the new duplicate table as python script:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的副本表中运行以下代码作为 Python 脚本：
- en: '[PRE11]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Output:'
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出：
- en: The output of this script will be a **pickle file **saved at the defined location.
    The pickle file contains the entire data transformation pipeline as well as trained
    model object.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本的输出将是一个**pickle 文件**，保存在定义的位置。pickle 文件包含整个数据转换管道以及训练好的模型对象。
- en: 'There are over 20 ready-to-use regression algorithms available in PyCaret:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: PyCaret 中有超过 20 种现成可用的回归算法：
- en: '![](../Images/05cae57d061b18adfa6fbdba17dec7a8.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/05cae57d061b18adfa6fbdba17dec7a8.png)'
- en: 'Part 2: Generate Predictions using Trained Model'
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 第2部分：使用训练好的模型生成预测
- en: 'We can now use the trained model to predict the median value of houses. Run
    the following code in the original table **‘boston’**as a python script:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用训练好的模型来预测房屋的中位数值。在原始表格 **‘boston’**中运行以下代码作为 Python 脚本：
- en: '[PRE12]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Output:'
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 输出：
- en: '![Figure](../Images/9a864907193881d33e531198caf91ed8.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/9a864907193881d33e531198caf91ed8.png)'
- en: Regression Predictions (after execution of code)![Figure](../Images/87868f1bf6988f82d052fd39e65428a3.png)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 回归预测（代码执行后）![图像](../Images/87868f1bf6988f82d052fd39e65428a3.png)
- en: Final Output (after clicking on Table)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 最终输出（点击表格后）
- en: A new column** ‘Label’** that contains predictions are attached to the original
    table.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 新列**‘Label’**包含预测结果，已附加到原始表格中。
- en: In this example we have predicted on the same data that we have used for training
    the model for demonstration purpose only. In a real setting, the **‘medv’** column
    is the actual outcome and is unknown at the time of prediction.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们在用于训练模型的相同数据上进行了预测，仅用于演示目的。在实际情况下，**‘medv’**列是实际结果，并在预测时未知。
- en: ???? All the preprocessing tasks necessary to train a regression model such
    as [missing value imputation](https://pycaret.org/missing-values/) (if table has
    any missing or *null* values), or [one-hot-encoding](https://pycaret.org/one-hot-encoding/),
    or [target transformation](https://pycaret.org/transform-target/), they all are
    automatically performed before training a model. [Click here](https://www.pycaret.org/preprocessing) to
    learn more about PyCaret’s preprocessing capabilities.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ???? 所有训练回归模型所需的预处理任务，如[缺失值插补](https://pycaret.org/missing-values/)（如果表格中有缺失或*空*值），[独热编码](https://pycaret.org/one-hot-encoding/)，或[目标转换](https://pycaret.org/transform-target/)，这些都在训练模型之前自动执行。[点击这里](https://www.pycaret.org/preprocessing)了解更多关于PyCaret的预处理功能。
- en: Next Tutorial
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下一教程
- en: In the next tutorial of **Machine Learning in Power BI using PyCaret **series,
    we will go in more depth and explore advanced preprocessing features in PyCaret.
    We will also see how to productionalize a machine learning solution in Power BI
    and leverage the power of [PyCaret](https://www.pycaret.org/) on the front-end
    of Power BI.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在**使用PyCaret的Power BI中的机器学习**系列的下一个教程中，我们将深入探讨PyCaret中的高级预处理功能。我们还将了解如何在Power
    BI中生产化机器学习解决方案，并利用[PyCaret](https://www.pycaret.org/)在Power BI前端的强大功能。
- en: If you would like to learn more on this please stay connected.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多，请保持联系。
- en: Follow us on our [Linkedin](https://www.linkedin.com/company/pycaret/) page
    and subscribe to our [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g) channel.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 关注我们的[LinkedIn](https://www.linkedin.com/company/pycaret/)页面，并订阅我们的[YouTube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g)频道。
- en: 'Also see:'
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 另见：
- en: 'Beginner level Python notebooks:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 初学者级Python笔记本：
- en: '[Clustering](https://www.pycaret.org/clu101)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[聚类](https://www.pycaret.org/clu101)'
- en: '[Anomaly Detection](https://www.pycaret.org/anom101)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[异常检测](https://www.pycaret.org/anom101)'
- en: '[Natural Language Processing](https://www.pycaret.org/nlp101)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理](https://www.pycaret.org/nlp101)'
- en: '[Association Rule Mining](https://www.pycaret.org/arul101)'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关联规则挖掘](https://www.pycaret.org/arul101)'
- en: '[Regression](https://www.pycaret.org/reg101)'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归](https://www.pycaret.org/reg101)'
- en: '[Classification](https://www.pycaret.org/clf101)'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分类](https://www.pycaret.org/clf101)'
- en: What’s in the development pipeline?
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 开发计划中有哪些内容？
- en: We are actively working on improving PyCaret. Our future development pipeline
    includes a new **Time Series Forecasting **module, integration with **TensorFlow, **and
    major improvements on the scalability of PyCaret. If you would like to share your
    feedback and help us improve further, you may [fill this form](https://www.pycaret.org/feedback) on
    the website or leave a comment on our [Github ](https://www.github.com/pycaret/)or [LinkedIn](https://www.linkedin.com/company/pycaret/) page.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在积极改进PyCaret。我们未来的开发计划包括新的**时间序列预测**模块，与**TensorFlow**的集成，以及PyCaret在可扩展性方面的重大改进。如果你想分享你的反馈并帮助我们进一步改进，你可以在网站上[填写此表单](https://www.pycaret.org/feedback)或在我们的[Github](https://www.github.com/pycaret/)或[LinkedIn](https://www.linkedin.com/company/pycaret/)页面留言。
- en: Want to learn about a specific module?
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 想了解特定模块吗？
- en: As of the first release 1.0.0, PyCaret has the following modules available for
    use. Click on the links below to see the documentation and working examples in
    Python.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 自1.0.0版本首次发布以来，PyCaret提供了以下模块可供使用。点击下面的链接查看文档和Python中的工作示例。
- en: '[Classification](https://www.pycaret.org/classification)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[分类](https://www.pycaret.org/classification)'
- en: '[Regression](https://www.pycaret.org/regression)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[回归](https://www.pycaret.org/regression)'
- en: '[Clustering](https://www.pycaret.org/clustering)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[聚类](https://www.pycaret.org/clustering)'
- en: '[Anomaly Detection](https://www.pycaret.org/anomaly-detection)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[异常检测](https://www.pycaret.org/anomaly-detection)'
- en: '[Natural Language Processing](https://www.pycaret.org/nlp)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[自然语言处理](https://www.pycaret.org/nlp)'
- en: '[Association Rule Mining](https://www.pycaret.org/association-rules)'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[关联规则挖掘](https://www.pycaret.org/association-rules)'
- en: Important Links
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 重要链接
- en: '[User Guide / Documentation](https://www.pycaret.org/guide)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用户指南 / 文档](https://www.pycaret.org/guide)'
- en: '[Github Repository](https://www.github.com/pycaret/pycaret)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Github 仓库](https://www.github.com/pycaret/pycaret)'
- en: '[Install PyCaret](https://www.pycaret.org/install)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[安装 PyCaret](https://www.pycaret.org/install)'
- en: '[Notebook Tutorials](https://www.pycaret.org/tutorial)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[笔记本教程](https://www.pycaret.org/tutorial)'
- en: '[Contribute in PyCaret](https://www.pycaret.org/contribute)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为 PyCaret 贡献](https://www.pycaret.org/contribute)'
- en: Please give us ⭐️ on our [github repo](https://www.github.com/pycaret/pycaret) if
    you like PyCaret.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢 PyCaret，请在我们的 [github repo](https://www.github.com/pycaret/pycaret) 上给我们
    ⭐️。
- en: Follow me on Medium: [https://medium.com/@moez_62905/](https://medium.com/@moez_62905/machine-learning-in-power-bi-using-pycaret-34307f09394a)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Medium 上关注我：[https://medium.com/@moez_62905/](https://medium.com/@moez_62905/machine-learning-in-power-bi-using-pycaret-34307f09394a)
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**简历：[Moez Ali](https://www.linkedin.com/in/profile-moez/)** 是数据科学家，也是 PyCaret
    的创始人和作者。'
- en: '[Original](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a).
    Reposted with permission.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a)。已获得许可转载。'
- en: '**Related:**'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Announcing PyCaret 1.0.0](/2020/04/announcing-pycaret.html)'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[发布 PyCaret 1.0.0](/2020/04/announcing-pycaret.html)'
- en: '[A Key Missing Part of the Machine Learning Stack](/2020/04/missing-part-machine-learning-stack.html)'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习栈中缺失的关键部分](/2020/04/missing-part-machine-learning-stack.html)'
- en: '[Sharing your machine learning models through a common API](/2020/02/sharing-machine-learning-models-common-api.html)'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[通过公共 API 分享你的机器学习模型](/2020/02/sharing-machine-learning-models-common-api.html)'
- en: More On This Topic
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[发布 PyCaret 3.0：开源、低代码的 Python 机器学习](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 进行二分类介绍](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 PyCaret 在 Python 中进行聚类介绍](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
- en: '[Getting Started with PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
- en: '[Unlock the Power of AI - A Special Release by KDnuggets and Machine…](https://www.kdnuggets.com/2023/07/mlm-unlock-power-ai-special-release-kdnuggets-machine-learning-mastery.html)'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解锁 AI 的力量 - KDnuggets 和 Machine 的特别发布…](https://www.kdnuggets.com/2023/07/mlm-unlock-power-ai-special-release-kdnuggets-machine-learning-mastery.html)'
- en: '[3 Steps for Harnessing the Power of Data](https://www.kdnuggets.com/2022/05/3-steps-harnessing-power-data.html)'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据力量的 3 个步骤](https://www.kdnuggets.com/2022/05/3-steps-harnessing-power-data.html)'
