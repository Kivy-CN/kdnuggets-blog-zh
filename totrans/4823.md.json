["```py\nfrom keras import models\nfrom keras.layers import Dense, Dropout\nfrom keras.utils import to_categorical\nfrom keras.datasets import mnist\nfrom keras.utils.vis_utils import model_to_dot\nfrom IPython.display import SVG\n\nimport livelossplot\nplot_losses = livelossplot.PlotLossesKeras()\n\nNUM_ROWS = 28\nNUM_COLS = 28\nNUM_CLASSES = 10\nBATCH_SIZE = 128\nEPOCHS = 10\n\n```", "```py\ndef data_summary(X_train, y_train, X_test, y_test):\n    \"\"\"Summarize current state of dataset\"\"\"\n    print('Train images shape:', X_train.shape)\n    print('Train labels shape:', y_train.shape)\n    print('Test images shape:', X_test.shape)\n    print('Test labels shape:', y_test.shape)\n    print('Train labels:', y_train)\n    print('Test labels:', y_test)\n\n```", "```py\n# Load data\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Check state of dataset\ndata_summary(X_train, y_train, X_test, y_test)\n\n```", "```py\n\nTrain images shape: (60000, 28, 28)\nTrain labels shape: (60000,)\nTest images shape: (10000, 28, 28)\nTest labels shape: (10000,)\nTrain labels: [5 0 4 ... 5 6 8]\nTest labels: [7 2 1 ... 4 5 6]\n```", "```py\n# Reshape data\nX_train = X_train.reshape((X_train.shape[0], NUM_ROWS * NUM_COLS))\nX_train = X_train.astype('float32') / 255\nX_test = X_test.reshape((X_test.shape[0], NUM_ROWS * NUM_COLS))\nX_test = X_test.astype('float32') / 255\n\n# Categorically encode labels\ny_train = to_categorical(y_train, NUM_CLASSES)\ny_test = to_categorical(y_test, NUM_CLASSES)\n\n# Check state of dataset\ndata_summary(X_train, y_train, X_test, y_test)\n\n```", "```py\n\nTrain images shape: (60000, 784)\nTrain labels shape: (60000, 10)\nTest images shape: (10000, 784)\nTest labels shape: (10000, 10)\nTrain labels: [[0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [1\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n ...\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 1\\. 0.]]\nTest labels: [[0\\. 0\\. 0\\. ... 1\\. 0\\. 0.]\n [0\\. 0\\. 1\\. ... 0\\. 0\\. 0.]\n [0\\. 1\\. 0\\. ... 0\\. 0\\. 0.]\n ...\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]\n [0\\. 0\\. 0\\. ... 0\\. 0\\. 0.]]\n```", "```py\n# Build neural network\nmodel = models.Sequential()\nmodel.add(Dense(512, activation='relu', input_shape=(NUM_ROWS * NUM_COLS,)))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(10, activation='softmax'))\n\n# Compile model\nmodel.compile(optimizer='rmsprop',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train model\nmodel.fit(X_train, y_train,\n          batch_size=BATCH_SIZE,\n          epochs=EPOCHS,\n          callbacks=[plot_losses],\n          verbose=1,\n          validation_data=(X_test, y_test))\n\nscore = model.evaluate(X_test, y_test, verbose=0)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\n```", "```py\n\nTest loss: 0.09116139834111646\nTest accuracy: 0.9803\n```", "```py\n# Summary of neural network\nmodel.summary()\n\n```", "```py\n\nLayer (type)                 Output Shape              Param #   \n=================================================================\ndense_1 (Dense)              (None, 512)               401920    \n_________________________________________________________________\ndropout_1 (Dropout)          (None, 512)               0         \n_________________________________________________________________\ndense_2 (Dense)              (None, 256)               131328    \n_________________________________________________________________\ndropout_2 (Dropout)          (None, 256)               0         \n_________________________________________________________________\ndense_3 (Dense)              (None, 10)                2570      \n=================================================================\nTotal params: 535,818\nTrainable params: 535,818\nNon-trainable params: 0\n\n```", "```py\n# Output network visualization\nSVG(model_to_dot(model).create(prog='dot', format='svg'))\n\n```"]