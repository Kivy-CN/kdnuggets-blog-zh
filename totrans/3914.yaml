- en: What is Machine Learning on Code?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/11/machine-learning-code-mloncode.html](https://www.kdnuggets.com/2019/11/machine-learning-code-mloncode.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Vadim Markovtsev](https://www.linkedin.com/in/vmarkovtsev/), Lead Machine
    Learning Engineer at [source{d}](https://sourced.tech/)**'
  prefs: []
  type: TYPE_NORMAL
- en: As IT organizations grow, so does the size of their codebases and the complexity
    of their ever-changing developer toolchain. Engineering leaders have very limited
    visibility into the state of their codebases, software development processes,
    and teams. By applying modern data science and machine learning techniques to
    software development, large enterprises have the opportunity to significantly
    improve their software delivery performance and engineering effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: In the last few years, a number of large companies such as Google, Microsoft,
    Facebook and smaller companies such as Jetbrains and source{d} have been collaborating
    with academic researchers to lay the foundation for Machine Learning on Code.
  prefs: []
  type: TYPE_NORMAL
- en: What is Machine Learning on Code?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Machine Learning on Code (MLonCode) is a new interdisciplinary field of research
    related to Natural Language Processing, Programming Language Structure, and Social
    and History analysis such contributions graphs and commit time series. MLonCode
    aims to learn from large scale source code datasets in order to automatically
    perform software engineering tasks such as assisted code reviews, code deduplication,
    software expertise assessment, etc.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/50847a8c9480de4781435a9618f8121f.png)'
  prefs: []
  type: TYPE_IMG
- en: What is Machine Learning on Source Code?
  prefs: []
  type: TYPE_NORMAL
- en: Why is MLonCode hard?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some MLonCode problems require zero error rate, such as those related to code
    generation; automatic program repair is one particular example. A tiny, single
    misprediction may lead to the whole program's compilation failure.
  prefs: []
  type: TYPE_NORMAL
- en: In some other cases, the error rate must be low enough. An ideal model should
    make as few mistakes as that the signal-to-noise ratio for the users - software
    developers - stays bearable and trustworthy. Thus the model can be used the same
    way as traditional static code analysis tools. A great example of this is best
    practices mining.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the vast majority of MLonCode problems are unsupervised or at most
    weakly supervised. It can be very costly to manually label datasets, so researchers
    typically have to develop correlated heuristics. For example, there are numerous
    similarity grouping tasks, such as showing similar developers or helping to compile
    teams based on areas of expertise. Our own experience in this topic lies in [mining
    code formatting rules and applying them to fix faults](https://github.com/src-d/style-analyzer),
    similarly to what linters do but completely unsupervised. There is a related academic
    competition to predict formatting problems called [CodRep](https://github.com/KTH/codrep-2019).
  prefs: []
  type: TYPE_NORMAL
- en: MLonCode problems include a variety of data mining tasks that may be trivial
    from the theoretical point of view but still challenging technically due to the
    scale or required attention to the details. Examples are code clone detection
    and similar developer clustering. Solutions of such problems are presented at
    the annual academic conference [Mining Software Repositories](http://www.msrconf.org/).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ceff6ab1470844a142806db0139039b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Mining Software Repositories conference logo.
  prefs: []
  type: TYPE_NORMAL
- en: 'While solving an MLonCode problem, one typically represents source code in
    one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A frequency dictionary (weighted bag-of-words, BOW). Examples: identifiers
    inside a function; graphlets in a file; dependencies of a repository. The frequencies
    can be weighted by TF-IDF. This representation is the simplest and the most scalable.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/433065b836a4e9db00c8c92273ed618b.png)'
  prefs: []
  type: TYPE_IMG
- en: A sequential token stream (TS), which corresponds to the source code parsing
    sequence. That stream is often augmented with the links to the corresponding Abstract
    Syntax Tree nodes. This representation is friendly to conventional Natural Language
    Processing algorithms, including sequence-to-sequence deep learning models.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/80d96a8278350c038a87686813e3231c.png)'
  prefs: []
  type: TYPE_IMG
- en: A tree, which naturally comes out from an Abstract Syntax Tree. We perform various
    transformations after, e.g. irreversible simplification or identifier posterization.
    This is the most powerful representation, and also the most difficult to work
    with. The relevant ML models include various graph embeddings and Gated Graph
    Neural Networks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/42857597c1d4c649978d72244aaa7415.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Many of the approaches to MLonCode problems ground on the so-called Naturalness
    Hypothesis ([Hindle et.al.](https://people.inf.ethz.ch/suz/publications/natural.pdf)):'
  prefs: []
  type: TYPE_NORMAL
- en: “Programming languages, in theory, are complex, flexible and powerful, but the
    programs that real people actually write are mostly simple and rather repetitive,
    and thus they have usefully predictable statistical properties that can be captured
    in statistical language models and leveraged for software engineering tasks.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This statement justifies the usefulness of Big Code: the more source code is
    analyzed, the stronger the statistical properties emphasized, and the better the
    achieved metrics of a trained machine learning model. The underlying relations
    are the same as in e.g. the current state-of-the-art Natural Language Processing
    models: XLNet, ULMFiT, etc. Likewise, universal MLonCode models can be trained
    and leveraged in downstream tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: There are such big code datasets. The current ultimate source is open source
    repositories on GitHub. There can be technical problems with cloning hundreds
    of thousands of Git repositories, so there are downstream datasets such as [Public
    Git Archive](https://github.com/src-d/datasets/tree/master/PublicGitArchive),
    [GHTorrent](http://ghtorrent.org/), and [Software Heritage Graph](https://zenodo.org/record/2583978#.Xac1fuczb5Y).
  prefs: []
  type: TYPE_NORMAL
- en: '**Conclusion**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As software continues to eat the world, we’re accumulating billions of lines
    of code, millions of applications built from great variety of programming languages,
    frameworks, and infrastructure. Not only can MLonCode help companies streamline
    their codebase and software delivery processes, but it also helps organizations
    better understand and manage their engineering talents. By treating software artifacts
    as data and applying modern data science and machine learning techniques to software
    engineering, organizations have a unique opportunity to gain a competitive edge.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Vadim Markovtsev](https://www.linkedin.com/in/vmarkovtsev/)** ([**@vadimlearning**](https://twitter.com/vadimlearning))
    is a Google Developer Expert in Machine Learning and a Lead Machine Learning Engineer
    at **[source{d}](https://sourced.tech/)** where he works with "big" and "natural"
    code. His academic background is compiler technologies and system programming.
    He is an open-source zealot and an open data knight. Vadim is one of the creators
    of the historical distributed deep learning platform Veles (https://velesnet.ml)
    while working at Samsung. Afterward, Vadim was responsible for the machine learning
    efforts to fight email spam at Mail.Ru - the largest email service in Russia.
    In the past, Vadim was also a visiting associate professor at Moscow Institute
    of Physics and Technology, teaching about new technologies and conducting ACM-like
    internal coding competitions.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Object-oriented programming for data scientists: Build your ML estimator](/2019/08/object-oriented-programming-data-scientists-estimator.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Great Python Resources for Aspiring Data Scientists](/2019/09/10-great-python-resources-aspiring-data-scientists.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why is Machine Learning Deployment Hard?](/2019/10/machine-learning-deployment-hard.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, April 27: A Brief Introduction to Papers With Code;…](https://www.kdnuggets.com/2022/n17.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multi-modal deep learning in less than 15 lines of code](https://www.kdnuggets.com/2023/01/predibase-multi-modal-deep-learning-less-15-lines-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Managing Your Reusable Python Code as a Data Scientist](https://www.kdnuggets.com/2021/06/managing-reusable-python-code-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Tools to Track and Visualize the Execution of Your Python Code](https://www.kdnuggets.com/2021/12/3-tools-track-visualize-execution-python-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
