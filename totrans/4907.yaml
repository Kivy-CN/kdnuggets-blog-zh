- en: Why You Should Forget ‘for-loop’ for Data Science Code and Embrace Vectorization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么你应该忘记数据科学代码中的`for-loop`，而拥抱向量化
- en: 原文：[https://www.kdnuggets.com/2017/11/forget-for-loop-data-science-code-vectorization.html](https://www.kdnuggets.com/2017/11/forget-for-loop-data-science-code-vectorization.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2017/11/forget-for-loop-data-science-code-vectorization.html](https://www.kdnuggets.com/2017/11/forget-for-loop-data-science-code-vectorization.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '![](../Images/107a96e1ca28201c294f59121b2648e4.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/107a96e1ca28201c294f59121b2648e4.png)'
- en: We all have used *for-loops* for majority of the tasks which needs an iteration
    over a long list of elements. I am sure almost everybody, who is reading this
    article, wrote their first code for matrix or vector multiplication using a for-loop
    back in high-school or college. For-loop has served programming community long
    and steady.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都曾经使用*for-loops*来处理需要遍历长列表元素的大多数任务。我相信几乎所有阅读这篇文章的人，在高中或大学时，都用for-loop编写了他们的第一个矩阵或向量乘法代码。for-loop长久以来一直服务于编程社区。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: However, it comes with some baggage and is often slow in execution when it comes
    to processing large data sets (many millions of records as in this age of Big
    Data). This is particularly true for interpreted language like Python, where,
    if the body of your loop is simple, the** interpreter overhead of the loop itself
    can be a substantial amount of the overhead**.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它也带来了一些问题，当处理大型数据集（如当今大数据时代的数百万条记录）时，执行速度往往较慢。这对于像Python这样的解释型语言尤其如此，如果你的循环体很简单，**循环本身的解释器开销可能是相当大的开销**。
- en: Fortunately, in almost all major programming ecosystem there is an alternative.
    Python has a beautiful one.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在几乎所有主要编程生态系统中都有替代方案。Python有一个很棒的选择。
- en: Numpy, short for [Numerical Python](http://numpy.org/), is the fundamental package
    required for high performance scientific computing and data analysis in Python
    ecosystem. It is the foundation on which nearly all of the higher-level tools
    such as [Pandas](https://pandas.pydata.org/) and [scikit-learn](http://scikit-learn.org/) are
    built. [TensorFlow](https://www.tensorflow.org/) uses NumPy arrays as the fundamental
    building block on top of which they built their Tensor objects and graphflow for
    deep learning tasks (which makes heavy use of linear algebra operations on a long
    list/vector/matrix of numbers).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy，简写自[Numerical Python](http://numpy.org/)，是Python生态系统中进行高性能科学计算和数据分析所需的基础包。它是几乎所有更高级工具如[Pandas](https://pandas.pydata.org/)和[scikit-learn](http://scikit-learn.org/)的基础。[TensorFlow](https://www.tensorflow.org/)使用NumPy数组作为基本构建块，在此基础上构建了他们的Tensor对象和用于深度学习任务的graphflow（这在长列表/向量/矩阵数字上的线性代数操作中使用频繁）。
- en: 'Two of the most important advantages Numpy provides, are:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy提供的两个最重要的优势是：
- en: '`ndarray`, a fast and space-efficient multidimensional array providing vectorized
    arithmetic operations and sophisticated [*broadcasting* capabilities](https://towardsdatascience.com/two-cool-features-of-python-numpy-mutating-by-slicing-and-broadcasting-3b0b86e8b4c7)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndarray`，一个快速且节省空间的多维数组，提供向量化的算术操作和复杂的[*广播*功能](https://towardsdatascience.com/two-cool-features-of-python-numpy-mutating-by-slicing-and-broadcasting-3b0b86e8b4c7)'
- en: Standard mathematical functions for fast operations on entire arrays of data *without
    having to write loops*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行快速数据数组操作的标准数学函数*无需编写循环*
- en: You will often come across this assertion in the data science, machine learning,
    and Python community that Numpy is much faster due to its vectorized implementation
    and due to the fact that many of its core routines are written in C (based on [CPython
    framework](https://en.wikipedia.org/wiki/CPython)).
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 你会经常听到数据科学、机器学习和 Python 社区中的说法，即由于其向量化实现和许多核心例程用 C 编写，Numpy 的速度要快得多（基于[CPython
    框架](https://en.wikipedia.org/wiki/CPython)）。
- en: And it is indeed true ([this article is a beautiful demonstration](http://notes-on-cython.readthedocs.io/en/latest/std_dev.html) of
    various options that one can work with Numpy, even writing bare-bone C routines
    with Numpy APIs). Numpy arrays are densely packed arrays of homogeneous type.
    Python lists, by contrast, are arrays of pointers to objects, even when all of
    them are of the same type. So, you get the benefits of [locality of reference](https://en.wikipedia.org/wiki/Locality_of_reference).
    Many Numpy operations are implemented in C, avoiding the general cost of loops
    in Python, pointer indirection and per-element [dynamic type checking](https://www.sitepoint.com/typing-versus-dynamic-typing/).
    The speed boost depends on which operations you’re performing. **For data science
    and modern machine learning tasks, this is an invaluable advantage**, as often
    the data set size runs into millions if not billions of records and you do not
    want to iterate over it using a for-loop along with its associated baggage.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实是事实（[这篇文章是一个很好的演示](http://notes-on-cython.readthedocs.io/en/latest/std_dev.html)，展示了与
    Numpy 一起使用的各种选项，甚至使用 Numpy API 编写裸骨的 C 例程）。Numpy 数组是同质类型的紧密打包数组。相比之下，Python 列表是指向对象的指针数组，即使它们都是同一类型。因此，你可以获得[引用局部性](https://en.wikipedia.org/wiki/Locality_of_reference)的好处。许多
    Numpy 操作是用 C 实现的，避免了 Python 中循环的通用开销、指针间接访问以及每个元素的[动态类型检查](https://www.sitepoint.com/typing-versus-dynamic-typing/)。速度提升取决于你正在执行的操作。[**对于数据科学和现代机器学习任务，这是一个宝贵的优势**]，因为数据集的大小通常达到百万，甚至亿万记录，你不想使用
    for 循环及其相关负担来迭代处理它。
- en: How to prove it definitively with an example of a moderately sized data set?
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如何通过一个中等大小数据集的例子来明确证明这一点？
- en: Here is the [***link to my Github code***](https://github.com/tirthajyoti/PythonMachineLearning/blob/master/How%20fast%20are%20NumPy%20ops.ipynb) (Jupyter
    notebook) that shows, in a few easy lines of code, the difference in speed of
    Numpy operation from that of regular Python programming constructs like *for-loop*, [*map-function*](https://stackoverflow.com/questions/10973766/understanding-the-map-function),
    or [*list-comprehension*](http://www.pythonforbeginners.com/basics/list-comprehensions-in-python).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是[***我 Github 代码的链接***](https://github.com/tirthajyoti/PythonMachineLearning/blob/master/How%20fast%20are%20NumPy%20ops.ipynb)（Jupyter
    notebook），它展示了在几行简易代码中，Numpy 操作与常规 Python 编程构造如*for 循环*、[*map 函数*](https://stackoverflow.com/questions/10973766/understanding-the-map-function)或[*列表推导式*](http://www.pythonforbeginners.com/basics/list-comprehensions-in-python)的速度差异。
- en: 'I just outline the basic flow:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是概述基本流程：
- en: Create a list of a moderately large number of floating point numbers, preferably
    drawn from a continuous statistical distribution like a Gaussian or Uniform random.
    I chose 1 million for the demo.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个中等数量的浮点数列表，最好从类似高斯或均匀随机的连续统计分布中抽取。我选择了 100 万个作为演示。
- en: Create a `ndarray` object out of that list i.e. vectorize.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中创建一个 `ndarray` 对象，即向量化。
- en: Write short code blocks to iterate over the list and use a mathematical operation
    on the list say taking logarithm of base 10\. Use for-loop, map-function, and
    list-comprehension. Each time use `time.time()` function to determine how much
    time it takes in total to process the 1 million records.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写简短的代码块来遍历列表，并对列表执行数学操作，例如取 10 为底的对数。使用 for 循环、map 函数和列表推导式。每次使用`time.time()`函数来确定处理
    100 万条记录所需的总时间。
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Do the same operation using Numpy’s built-in mathematical method (`np.log10`)
    over the `ndarray` object. Time it.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Numpy 的内置数学方法 (`np.log10`) 对 `ndarray` 对象执行相同操作。计时。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Store the execution times in a list and plot a bar chart showing the comparative
    difference.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将执行时间存储在列表中，并绘制一个条形图以显示比较差异。
- en: Here is the result. And, you can repeat the whole process by running all the
    cells of the Jupyter notebook. Every time it will generate a new set of random
    numbers, so the exact execution time may vary a little bit but overall the trend
    will always be the same. You can try with various other mathematical functions/string
    operations or combination thereof, to check if this holds true in general.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是结果。你可以通过运行Jupyter notebook中的所有单元格重复整个过程。每次都会生成一组新的随机数字，因此确切的执行时间可能会有些许变化，但总体趋势将始终相同。你可以尝试其他数学函数/字符串操作或其组合，以检查这种情况是否普遍适用。
- en: There is an entire open-source, online book on this topic by a French neuroscience
    researcher. [Check it out here](https://www.labri.fr/perso/nrougier/from-python-to-numpy/#id7).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一本由法国神经科学研究员编写的开源在线书籍，涉及这一主题。[在这里查看](https://www.labri.fr/perso/nrougier/from-python-to-numpy/#id7)。
- en: '![](../Images/ea1ee92682120e939e9e456e256d3b47.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ea1ee92682120e939e9e456e256d3b47.png)'
- en: Bar chart of comparative speeds of execution of simple mathematical operations
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 简单数学操作的执行速度比较条形图
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com).
    Also you can check author’s [**GitHub repositories**](https://github.com/tirthajyoti)
    for other fun code snippets in Python, R, or MATLAB and machine learning resources.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有任何问题或想分享的想法，请通过[**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com)联系作者。你也可以查看作者的[**GitHub仓库**](https://github.com/tirthajyoti)，获取更多有趣的Python、R或MATLAB代码片段以及机器学习资源。
- en: '**Bio: [Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    is a semiconductor technologist, machine learning/data science zealot, Ph.D. in
    EE, blogger and writer.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[Tirthajyoti Sarkar](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/)**
    是半导体技术专家、机器学习/数据科学热衷者、电气工程博士、博客作者和作家。'
- en: '[Original](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f).
    Reposted with permission.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/why-you-should-forget-for-loop-for-data-science-code-and-embrace-vectorization-696632622d5f)。经许可转载。'
- en: '**Related:**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Working With Numpy Matrices: A Handy First Reference](/2017/03/working-numpy-matrices.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用Numpy矩阵的实用参考](/2017/03/working-numpy-matrices.html)'
- en: '[An Introduction to Scientific Python (and a Bit of the Maths Behind It) –
    NumPy](/2016/06/intro-scientific-python-numpy.html)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[科学Python简介（及其背后的数学） – NumPy](/2016/06/intro-scientific-python-numpy.html)'
- en: '[Python Data Preparation Case Files: Group-based Imputation](/2017/09/python-data-preparation-case-files-group-based-imputation.html)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python数据准备案例文件：基于组的插补](/2017/09/python-data-preparation-case-files-group-based-imputation.html)'
- en: More On This Topic
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关阅读
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写清晰的Python代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目的，并以寻找目的来…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
