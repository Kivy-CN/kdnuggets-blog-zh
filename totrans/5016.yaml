- en: A Beginner’s Guide to Neural Networks with Python and SciKit Learn 0.18!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python和SciKit Learn 0.18的神经网络初学者指南！
- en: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html/2](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html/2)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html/2](https://www.kdnuggets.com/2016/10/beginners-guide-neural-networks-python-scikit-learn.html/2)
- en: Data Preprocessing
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据预处理
- en: The neural network may have difficulty converging before the maximum number
    of iterations allowed if the data is not normalized. Multi-layer Perceptron is
    sensitive to feature scaling, so it is highly recommended to scale your data.
    Note that you must apply the same scaling to the test set for meaningful results.
    There are a lot of different methods for normalization of data, we will use the
    built-in StandardScaler for standardization.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据未归一化，神经网络可能在允许的最大迭代次数之前就无法收敛。多层感知器对特征缩放很敏感，因此强烈建议对数据进行缩放。请注意，必须对测试集应用相同的缩放，以获得有意义的结果。有很多不同的数据归一化方法，我们将使用内置的StandardScaler进行标准化。
- en: '[PRE0]   StandardScaler(copy=True, with_mean=True, with_std=True)   [PRE1]`'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE0]   StandardScaler(copy=True, with_mean=True, with_std=True)   [PRE1]`'
- en: Training the model
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 训练模型
- en: Now it is time to train our model. SciKit Learn makes this incredibly easy,
    by using estimator objects. In this case we will import our estimator (the Multi-Layer
    Perceptron Classifier model) from the neural_network library of SciKit-Learn!
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候训练我们的模型了。SciKit Learn使这一过程非常简单，通过使用估算器对象。在这个例子中，我们将从SciKit-Learn的neural_network库中导入我们的估算器（多层感知器分类器模型）！
- en: 'Next we create an instance of the model, there are a lot of parameters you
    can choose to define and customize here, we will only define the hidden_layer_sizes.
    For this parameter you pass in a tuple consisting of the number of neurons you
    want at each layer, where the nth entry in the tuple represents the number of
    neurons in the nth layer of the MLP model. There are many ways to choose these
    numbers, but for simplicity we will choose 3 layers with the same number of neurons
    as there are features in our data set:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建模型的一个实例，这里有很多参数可以选择定义和自定义，我们只会定义hidden_layer_sizes。对于这个参数，你需要传入一个元组，其中包含每一层所需的神经元数量，元组中的第n个条目表示MLP模型中第n层的神经元数量。选择这些数字有很多方法，但为了简单起见，我们将选择3层，每层的神经元数量与数据集中的特征数相同：
- en: 'Now that the model has been made we can fit the training data to our model,
    remember that this data has already been processed and scaled:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 既然模型已经建立，我们可以将训练数据拟合到模型中，记住这些数据已经过处理和缩放：
- en: '[PRE2] MLPClassifier(activation=''relu'', alpha=0.0001, batch_size=''auto'',
    beta_1=0.9,         beta_2=0.999, early_stopping=False, epsilon=1e-08,         hidden_layer_sizes=(30,
    30, 30), learning_rate=''constant'',         learning_rate_init=0.001, max_iter=200,
    momentum=0.9,         nesterovs_momentum=True, power_t=0.5, random_state=None,         shuffle=True,
    solver=''adam'', tol=0.0001, validation_fraction=0.1,         verbose=False, warm_start=False)
    [PRE3]`'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE2] MLPClassifier(activation=''relu'', alpha=0.0001, batch_size=''auto'',
    beta_1=0.9,         beta_2=0.999, early_stopping=False, epsilon=1e-08,         hidden_layer_sizes=(30,
    30, 30), learning_rate=''constant'',         learning_rate_init=0.001, max_iter=200,
    momentum=0.9,         nesterovs_momentum=True, power_t=0.5, random_state=None,         shuffle=True,
    solver=''adam'', tol=0.0001, validation_fraction=0.1,         verbose=False, warm_start=False)
    [PRE3]`'
- en: You can see the output that shows the default values of the other parameters
    in the model. I encourage you to play around with them and discover what effects
    they have on your model!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到输出显示了模型中其他参数的默认值。我鼓励你尝试不同的参数值，发现它们对模型的影响！
- en: Predictions and Evaluation
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预测与评估
- en: 'Now that we have a model it is time to use it to get predictions! We can do
    this simply with the predict() method off of our fitted model:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个模型，是时候使用它来获取预测了！我们可以通过对拟合模型调用predict()方法来轻松完成这一任务：
- en: 'Now we can use SciKit-Learn''s built in metrics such as a classification report
    and confusion matrix to evaluate how well our model performed:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以使用SciKit-Learn内置的指标，如分类报告和混淆矩阵来评估我们的模型表现如何：
- en: '[PRE4] [[50  3]   [ 0 90]] [PRE5]` [PRE6] [PRE7]``'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE4] [[50  3]   [ 0 90]] [PRE5]` [PRE6] [PRE7]``'
