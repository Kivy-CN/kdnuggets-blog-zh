["```py\nimport numpy as np\n\nfeatures = np.array([[1, 2], [3, 4], [1, 3], [0, 2]])\nlabels = np.array([0, 0, 1, 1])\n\nnew_point = np.array([1, 4])\n```", "```py\ndistances = ((features - new_point)**2).sum(axis=1)\n```", "```py\ndistances.argsort()[:3]\n```", "```py\nlabels[distances.argsort()[:3]]\n```", "```py\nimport numpy as np\nfrom sklearn.base import BaseEstimator, ClassifierMixin\nfrom sklearn.utils.validation import check_X_y, check_array, check_is_fitted\n\nclass KNNClassifier(BaseEstimator, ClassifierMixin):\n    def __init__(self, k=3):\n        self.k = k\n\n    def fit(self, X, y):\n        X, y = check_X_y(X, y)\n        self.X_ = np.copy(X)\n        self.y_ = np.copy(y)\n        self.n_classes_ = self.y_.max() + 1\n\n        return self\n\n    def predict_proba(self, X):\n        check_is_fitted(self)\n        X = check_array(X)\n\n        res = []\n        for x in X:\n            distances = ((self.X_ - x)**2).sum(axis=1)\n            smallest_distances = distances.argsort()[:self.k]\n            closest_labels = self.y_[smallest_distances]\n            count_labels = np.bincount(\n                closest_labels,\n                minlength=self.n_classes_\n            )\n\n            res.append(count_labels / count_labels.sum())\n\n        return np.array(res)\n\n    def predict(self, X):\n        check_is_fitted(self)\n        X = check_array(X)\n\n        res = self.predict_proba(X)\n\n        return res.argmax(axis=1)\n```", "```py\nfrom sklearn.datasets import make_blobs\nimport numpy as np\n\nX, y = make_blobs(n_samples=20, centers=[(0,0), (5,5), (-5, 5)], random_state=0)\nX = np.vstack([X, np.array([[2, 4], [-1, 4], [1, 6]])])\ny = np.append(y, [2, 1, 0])\n```", "```py\nmy_knn = KNNClassifier(k=3)\nmy_knn.fit(X, y)\n\nmy_knn.predict_proba([[0, 1], [0, 5], [3, 4]])\n```", "```py\narray([[1\\.        , 0\\.        , 0\\.        ],\n       [0.33333333, 0.33333333, 0.33333333],\n       [0\\.        , 0.66666667, 0.33333333]])\n```", "```py\nmy_knn.predict([[0, 1], [0, 5], [3, 4]])\n```", "```py\nfrom sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X, y)\n\nmy_knn.predict_proba([[0, 1], [0, 5], [3, 4]])\n```", "```py\narray([[1\\.        , 0\\.        , 0\\.        ],\n       [0.33333333, 0.33333333, 0.33333333],\n       [0\\.        , 0.66666667, 0.33333333]])\n```"]