["```py\nimport numpy as np\nimport pandas as pd\nfrom cvxpy import *\n\nmp = pd.read_csv(\"monthly_prices.csv\",index_col=0)\nmr = pd.DataFrame()\n\n# compute monthly returns\nfor s in mp.columns:\n    date = mp.index[0]\n    pr0 = mp[s][date] \n    for t in range(1,len(mp.index)):\n        date = mp.index[t]\n        pr1 = mp[s][date]\n        ret = (pr1-pr0)/pr0\n        mr.set_value(date,s,ret)\n        pr0 = pr1\n\n```", "```py\n# Mean return\nr = np.asarray(np.mean(return_data, axis=1))\n\n# Covariance matrix\nC = np.asmatrix(np.cov(return_data))\n\n```", "```py\n# Get symbols\nsymbols = mr.columns\n\n# Number of variables\nn = len(symbols)\n\n# The variables vector\nx = Variable(n)\n\n# The minimum return\nreq_return = 0.02\n\n# The return\nret = r.T*x\n\n# The risk in xT.Q.x format\nrisk = quad_form(x, C)\n\n# The core problem definition with the Problem class from CVXPY\nprob = Problem(Minimize(risk), [sum(x)==1, ret >= req_return, x >= 0])\n\n```", "```py\ntry:\n    prob.solve()\n    print (\"Optimal portfolio\")\n    print (\"----------------------\")\n    for s in range(len(symbols)):\n       print (\" Investment in {} : {}% of the portfolio\".format(symbols[s],round(100*x.value[s],2)))\n    print (\"----------------------\")\n    print (\"Exp ret = {}%\".format(round(100*ret.value,2)))\n    print (\"Expected risk    = {}%\".format(round(100*risk.value**0.5,2)))\nexcept:\n    print (\"Error\")\n\n```"]