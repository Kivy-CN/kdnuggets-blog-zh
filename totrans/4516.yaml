- en: Fourier Transformation for a Data Scientist
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家的傅里叶变换
- en: 原文：[https://www.kdnuggets.com/2020/02/fourier-transformation-data-scientist.html](https://www.kdnuggets.com/2020/02/fourier-transformation-data-scientist.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/02/fourier-transformation-data-scientist.html](https://www.kdnuggets.com/2020/02/fourier-transformation-data-scientist.html)
- en: '[comments](#comments)![Figure](../Images/0024c0de65cd3ac058c5d6ba49eecae0.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图示](../Images/0024c0de65cd3ac058c5d6ba49eecae0.png)'
- en: Pic Credit: [Shutterstock](https://www.shutterstock.com/image-vector/fourier-transform-formula-common-signal-transformations-1143548066)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Shutterstock](https://www.shutterstock.com/image-vector/fourier-transform-formula-common-signal-transformations-1143548066)
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织IT'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: The Fourier Transform is one of the deepest insights ever made in mathematics
    but unfortunately, the meaning is buried deep inside some ridiculous equations.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换是数学中最深刻的见解之一，但不幸的是，其意义深藏在一些荒谬的方程式中。
- en: The Fourier transform is a way of splitting something up into a bunch of sine
    waves. As usual, the name comes from some person who lived a long time ago called
    Fourier.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换是一种将某物拆分为一堆正弦波的方法。像往常一样，名字来自很久以前的一个人，傅里叶。
- en: In mathematical terms, The Fourier Transform is a technique that transforms
    a signal into its constituent components and frequencies.
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在数学术语中，傅里叶变换是一种将信号转化为其组成成分和频率的技术。
- en: 'Fourier transform is widely used not only in signal (radio, acoustic, etc.)
    processing but also in image analysis eg. edge detection, image filtering, image
    reconstruction, and image compression. One example: Fourier transform of transmission
    electron microscopy images helps to check the periodicity of the samples. periodicity
    — means pattern. Fourier transform of your data can expand accessible information
    about the analyzed sample.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换不仅广泛应用于信号（如无线电、声学等）处理，还用于图像分析，如边缘检测、图像过滤、图像重建和图像压缩。例如：傅里叶变换在透射电子显微镜图像中有助于检查样本的周期性。周期性——意味着模式。傅里叶变换可以扩展有关分析样本的信息。
- en: 'To understand it better consider a signal x(t):'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，考虑一个信号x(t)：
- en: '![](../Images/49c1501c0cf9943aec656d19ab27e8c5.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49c1501c0cf9943aec656d19ab27e8c5.png)'
- en: If we do the same for another signal and select the same moment in time and
    we measure its amplitude.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对另一个信号做同样的处理，并选择相同的时间点进行幅度测量。
- en: 'Consider another signal y(t):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个信号y(t)：
- en: '![](../Images/6570a07c33bd1ea1d1f36851d67575cd.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6570a07c33bd1ea1d1f36851d67575cd.png)'
- en: '***What happens when we emit these two signals at the same time or if we add
    them together?***'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '***当我们同时发出这两个信号或将它们加在一起时会发生什么？***'
- en: When we emit these two signals at the same moment of time, we get a new signal
    which is the *sum of the amplitude of these two signals. *This is so because these
    two signals are being added together.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在同一时间发出这两个信号时，我们得到一个新信号，即*这两个信号的幅度之和*。这是因为这两个信号被加在一起。
- en: 'Sum both the signals: z(t) = x(t) + y(t)'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个信号相加：z(t) = x(t) + y(t)
- en: '![](../Images/d1dc2d8cd837296c5d485dda93323f6e.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d1dc2d8cd837296c5d485dda93323f6e.png)'
- en: '***If we are given only one signal(which is the sum of signals x(t) and y(t)).Can
    we recover the original signals x(t) and y(t)?***'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '***如果我们只得到一个信号（即信号x(t)和y(t)的和），我们能恢复原始信号x(t)和y(t)吗？***'
- en: Yes. That’s what a Fourier transform does. It takes up a signal and decomposes
    it to the frequencies that made it up.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这就是傅里叶变换的作用。它接受一个信号并将其分解为组成它的频率。
- en: '*In our example, a Fourier transform would decompose the signal z(t) into its
    constituent frequencies like signals x(t) and y(t).*'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*在我们的例子中，傅里叶变换会将信号z(t)分解成其组成频率，就像信号x(t)和y(t)一样。*'
- en: What Fourier transform does is It kind of *moves us from the time domain to
    the frequency domain.*
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换的作用是*将我们从时间域移动到频率域。*
- en: '![Figure](../Images/cf5ef60296dc2fd98f4118c81162d216.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/cf5ef60296dc2fd98f4118c81162d216.png)'
- en: '[Source](https://www.eenewsanalog.com/content/signal-chain-basics-56-clock-jitter-demystified%E2%80%94random-jitter-and-phase-noise)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[来源](https://www.eenewsanalog.com/content/signal-chain-basics-56-clock-jitter-demystified%E2%80%94random-jitter-and-phase-noise)'
- en: '**In case, If anyone is wondering, What if we want to go back from the frequency
    domain to the time domain?**'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**如果有人想知道，我们如何从频率域返回到时间域？**'
- en: We can do so by using the *Inverse Fourier transform(IFT)*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用*逆傅里叶变换（IFT）*来实现这一点。
- en: Maths you need to know.
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你需要了解的数学知识。
- en: '*“Any ****continuous signal**** in the time domain can be represented uniquely
    and unambiguously by an ****infinite**** series of sinusoids.”*'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*“任何**连续信号**在时间域中可以通过**无限**正弦波序列唯一且明确地表示。”*'
- en: '**What does this mean?**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是什么意思？**'
- en: 'It means that, If we have a signal which is generated by some function `x(t)` then
    we can come up with another function `f(t)` such that :'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，如果我们有一个由某个函数`x(t)`生成的信号，那么我们可以得到另一个函数`f(t)`，使得：
- en: '![](../Images/6a4983847c91b035ba5921ad8a56191d.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a4983847c91b035ba5921ad8a56191d.png)'
- en: So, It doesn’t matter how strong the signal is, we can find a function like `f(t)` which
    is a *sum of an infinite series of sinusoids* that will actually represent the
    signal perfectly.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无论信号的强度如何，我们都可以找到一个函数`f(t)`，它是*无限正弦波序列的和*，能够完美地表示信号。
- en: Now, the question that arises now is, How do we find the coefficients here in
    the above equation because these are the values that would determine the shape
    of the output and thus the signal.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，提出的问题是，我们如何在上述方程中找到系数，因为这些值将决定输出的形状，从而决定信号。
- en: '![](../Images/829ccb417e04dc14a37c2424a7ff09db.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/829ccb417e04dc14a37c2424a7ff09db.png)'
- en: 'So, to get these coefficients we use Fourier transforms and the result from
    Fourier transform is a group of coefficients. So, we use `X(w)` to denote the
    Fourier coefficients and it is a function of frequency which we get by solving
    the integral such that :'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，为了获得这些系数，我们使用傅里叶变换，而傅里叶变换的结果是一组系数。因此，我们用`X(w)`表示傅里叶系数，它是频率的函数，通过解积分得到：
- en: 'The Fourier transform is represented as an indefinite integral:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换表示为不定积分：
- en: '**X(w) : Fourier Transform**'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**X(w)：傅里叶变换**'
- en: 'x(t) : Inverse Fourier transform'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: x(t)：逆傅里叶变换
- en: '![](../Images/374647e233afb67325ffced7a3f3c360.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/374647e233afb67325ffced7a3f3c360.png)'
- en: '![](../Images/92425c71212f74b899837c07e2b99c7b.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/92425c71212f74b899837c07e2b99c7b.png)'
- en: '**Fourier Transform and Inverse Fourier transform**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**傅里叶变换和逆傅里叶变换**'
- en: Also, when we actually solve the above integral, we get these complex numbers
    where `a` and `b` correspond to the coefficients that we are after.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，当我们实际计算上述积分时，会得到这些复数，其中`a`和`b`对应于我们追求的系数。
- en: 'The continuous Fourier transform converts a time-domain signal of infinite
    duration into a continuous spectrum composed of an infinite number of sinusoids.
    In practice, we deal with signals that are discretely sampled, usually at constant
    intervals, and of finite duration or periodic. For this purpose, the classical
    Fourier transform algorithm can be expressed as a Discrete Fourier transform (DFT),
    which converts a finite sequence of equally-spaced samples of a function into
    a same-length sequence of equally-spaced samples of the discrete-time Fourier
    transform:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 连续傅里叶变换将无限持续时间的时间域信号转换为由无限多个正弦波组成的连续谱。在实际应用中，我们处理的是离散采样的信号，通常在固定间隔内采样，并且具有有限持续时间或周期性。为此，经典傅里叶变换算法可以表示为离散傅里叶变换（DFT），它将函数的有限序列等间隔采样转换为离散时间傅里叶变换的等长度序列：
- en: '![](../Images/6a56a6df9c765aa440dd51fd369bc452.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6a56a6df9c765aa440dd51fd369bc452.png)'
- en: So, this is essentially the Discrete Fourier Transform. We can do this computation
    and it will produce a complex number in the form of `a + *i*b` where we have two
    coefficients for the Fourier series.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这本质上就是离散傅里叶变换。我们可以进行这种计算，它会产生一个形式为`a + *i*b`的复数，其中包含傅里叶级数的两个系数。
- en: 'Now, we know *how to sample signals* and how to *apply a Discrete Fourier Transform. *The
    last thing we would like to do is, we would like to get rid of the complex number `*i*` because
    it''s not supported in `mllib` or `systemML` by using something known as *Euler''s
    formula *which states :'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们知道*如何采样信号*和如何*应用离散傅里叶变换*。最后，我们想做的是，想要摆脱复数 `*i*`，因为它在 `mllib` 或 `systemML`
    中不被支持，可以通过一种称为*欧拉公式*的方法来实现，该公式如下：
- en: '![](../Images/a6c571416a043030b2ccc7b482800cbe.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a6c571416a043030b2ccc7b482800cbe.png)'
- en: So, If we plug Euler’s formula in the Fourier Transform equation and solve it,
    it will produce a real and imaginary part.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们将欧拉公式代入傅里叶变换方程并进行求解，它将产生实部和虚部。
- en: '![](../Images/ff33dbe7300e566ad4fbc09e5353e2f7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/ff33dbe7300e566ad4fbc09e5353e2f7.png)'
- en: As you can see X consist of a complex number of the format `a+ib` or `a-ib`.
    So if you solve the above equation you will get the Fourier coefficients **a** and **b**.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，X 由格式为 `a+ib` 或 `a-ib` 的复数组成。因此，如果你解上述方程，你将得到傅里叶系数 **a** 和 **b**。
- en: '![](../Images/85ed7391afbd4a9db0d57d0c577a2276.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/85ed7391afbd4a9db0d57d0c577a2276.png)'
- en: '![](../Images/d78889ee5d6e3020c2c8c03c8ba6eb21.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d78889ee5d6e3020c2c8c03c8ba6eb21.png)'
- en: Now if you just put the values of **a** and **b** in the equation of `f(t)`then
    you can define a signal in terms of its frequency.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在`f(t)`方程中代入**a**和**b**的值，你可以根据其频率定义一个信号。
- en: In general practice, we use Fast Fourier Transformation(FFT) algorithm which
    recursively divides the DFT in smaller DFT’s bringing down the needed computation
    time drastically. The time complexity of DFT is `2N²` while that of FFT is `2NlogN`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际操作中，我们使用快速傅里叶变换（FFT）算法，它递归地将离散傅里叶变换（DFT）分解为更小的 DFT，从而显著降低所需的计算时间。DFT 的时间复杂度是`2N²`，而
    FFT 的时间复杂度是`2NlogN`。
- en: Why are cosine and sine functions used when representing a signal?
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么在表示信号时使用余弦和正弦函数？
- en: While Sine and Cosine functions were originally defined based on right-angle
    triangles, looking at that point of view in the current scenario isn’t really
    the best thing. You might have been taught to recognize the Sine function as “opposite
    by hypotenuse”, but now it’s time to have a slightly different point of view.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管正弦和余弦函数最初是基于直角三角形定义的，但在当前情况下，考虑那个观点并不是最佳选择。你可能已经被教导识别正弦函数为“对边除以斜边”，但现在是时候换一个稍微不同的视角了。
- en: 'Consider the unit circle :'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑单位圆：
- en: '![](../Images/e5b2cda4d2f5ce0d089abed9a6f68230.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e5b2cda4d2f5ce0d089abed9a6f68230.png)'
- en: on a Cartesian plane. Suppose a line passing through the origin makes an angle
    θ with the ????-axis in a counterclockwise direction, the point of intersection
    of the line and the circle is (cos⁡θ, sin⁡θ).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在笛卡尔平面上。假设一条通过原点的直线在逆时针方向上与 ????-轴成角θ，直线与圆的交点为 (cos⁡θ, sin⁡θ)。
- en: '![](../Images/a4d32f32b00d51fa62222981d4413617.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a4d32f32b00d51fa62222981d4413617.png)'
- en: Think about it. Does this point of view correlate with the earlier one? Both
    of the definitions are the same.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想。这个观点与之前的观点相关吗？两种定义是相同的。
- en: 'Suppose we start to spin the line, by making θ increase linearly. You’d get
    something like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们开始旋转这条直线，使θ线性增加。你会得到如下结果：
- en: '![Figure](../Images/a8446ccd5b25ec8b13a2d4e9bf7695d1.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/a8446ccd5b25ec8b13a2d4e9bf7695d1.png)'
- en: '[Credits](https://physics.stackexchange.com/questions/352754/why-are-cosine-and-sine-functions-used-when-representing-a-signal-or-a-wave)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[致谢](https://physics.stackexchange.com/questions/352754/why-are-cosine-and-sine-functions-used-when-representing-a-signal-or-a-sound-wave)'
- en: 'The Sine and Cosine functions are arguably the most important periodic functions
    in several cases:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正弦函数和余弦函数在多种情况下可以说是最重要的周期函数：
- en: The periodic functions of how displacement, velocity, and acceleration change
    with time in SHM oscillators are sinusoidal functions.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SHM 振荡器中位移、速度和加速度随时间变化的周期函数是正弦函数。
- en: Every particle has a wave nature and vice versa. This is de Broglie's Wave-Particle
    duality. Waves are always sinusoidal functions of some physical quantity (such
    as Electric Field for EM Waves, and Pressure for Sound Waves).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个粒子都有波动性，反之亦然。这是德布罗意的波粒二象性。波动总是某些物理量的正弦函数（如电磁波的电场和声波的压力）。
- en: The sound itself is a pressure disturbance that propagates through material
    media capable of compressing and expanding. It’s the pressure at a point along
    with the sound wave that varies sinusoidally with time.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 声音本身是通过能够压缩和扩展的材料介质传播的压力扰动。声音波沿点的压力随时间呈正弦变化。
- en: '**Convergence in Fourier transformation**'
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '**傅里叶变换的收敛性**'
- en: If a point travels around a circle at a constant speed, its height above the
    ground traces a sine function. The speed at which the point moves corresponds
    to the frequency and the radius of the circle corresponds to the amplitude.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个点以恒定速度绕圆圈移动，它离地面的高度描绘了一个正弦函数。点移动的速度对应于频率，圆圈的半径对应于振幅。
- en: '![](../Images/908b44b455ee4c8280e8a2d07ef8294d.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/908b44b455ee4c8280e8a2d07ef8294d.png)'
- en: Add 1 more circle,
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 1 个圆圈，
- en: '![](../Images/b4670f1ae18ebb96ce8b3aeea913fc17.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b4670f1ae18ebb96ce8b3aeea913fc17.png)'
- en: Add 2 more circles,
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 2 个圆圈，
- en: '![](../Images/c531861b82cdb7ebb732bdf901f41a0a.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c531861b82cdb7ebb732bdf901f41a0a.png)'
- en: 'Add 9 more circles:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 9 个圆圈：
- en: '![](../Images/4a80e6998cc3aceb964b54cad7f3a2b7.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4a80e6998cc3aceb964b54cad7f3a2b7.png)'
- en: Almost a discrete waveform.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎是一个离散波形。
- en: Because of the Fourier theorem, we can generate any signal with circles of appropriate
    frequencies and radii.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于傅里叶定理，我们可以用适当频率和半径的圆生成任何信号。
- en: '*I used Dan Shiffman’s code from *[*coding challenge #125*](https://thecodingtrain.com/CodingChallenges/125-fourier-series.html)* to
    make the animations. You can get the javascript code from his *[*GitHub*](https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_125_Fourier_Series/P5)* and
    can try yourself.*'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '*我使用了Dan Shiffman的代码从*[*coding challenge #125*](https://thecodingtrain.com/CodingChallenges/125-fourier-series.html)*制作动画。你可以从他的*[*GitHub*](https://github.com/CodingTrain/website/tree/master/CodingChallenges/CC_125_Fourier_Series/P5)*获取JavaScript代码并自行尝试。*'
- en: Fourier Transformation in AI
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 人工智能中的傅里叶变换
- en: Fourier Transformation is a linear function, to induce non-linearity. Convolutions
    are used.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 傅里叶变换是一个线性函数，为了引入非线性，使用了卷积。
- en: '**Fourier Transformation of the product of 2 signals is the convolution of
    the 2 signals.**'
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**两个信号的乘积的傅里叶变换是这两个信号的卷积。**'
- en: Let x(t) and y(t) be two functions with convolution X(t)*Y(t), and F represents
    Fourier transformation, then
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设 x(t) 和 y(t) 为两个具有卷积 X(t)*Y(t) 的函数，F 代表傅里叶变换，那么
- en: '**F{x(t).y(t)} = X(t)*Y(t)**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**F{x(t).y(t)} = X(t)*Y(t)**'
- en: Remember the fact that aconvolution in the time domain is a multiplication in
    the frequency domain. This is how Fourier Transform is mostly used in machine
    learning and more specifically deep learning algorithms.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，在时间域中的卷积在频域中是乘法。这就是傅里叶变换在机器学习，尤其是深度学习算法中最常用的方式。
- en: I’ll take **Convolutional Neural Networks, CNNs** as an example;
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我将以**卷积神经网络，CNNs** 为例；
- en: '**90% **of computations in CNNs are convolutions and there have been many approaches
    to reduce the intensity of such computations, one of them is Fast Fourier Transform
    (FFT).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**CNNs中** 90% 的计算是卷积，并且已经有许多方法来减少这些计算的强度，其中之一就是快速傅里叶变换（FFT）。'
- en: Instead of convolutions, the input and filter matrices are converted into the
    frequency domain by FFT, to do multiplications. Then, the output is converted
    back into the time domain by *Inverse* FFT (IFFT).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 替代卷积，输入和滤波矩阵通过FFT转换到频域中进行乘法运算。然后，输出通过*反向*FFT (IFFT) 转换回时间域。
- en: '![](../Images/a67563e2a9f5d0787451683cf9ef286f.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a67563e2a9f5d0787451683cf9ef286f.png)'
- en: Another use of FFT is that it can be used for dimensionality reduction or feature
    extraction.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: FFT的另一个用途是可以用于降维或特征提取。
- en: When each sample in the dataset is a signal (time series, or images, etc.),
    it may consist of thousands of samples. But they might actually correspond to
    just a few points in the Fourier domain (especially if there is some periodicity).
    This simplifies the problem a lot.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当数据集中每个样本是一个信号（时间序列或图像等）时，它可能包含成千上万的样本。但它们实际上可能只对应傅里叶域中的几个点（尤其是如果有某种周期性）。这大大简化了问题。
- en: Or sometimes using the Fourier domain might provide translation-invariance.
    That is, even if there are lags between the signals, such variances will not affect
    their presentation in the Fourier domain.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，有时使用傅里叶域可能提供平移不变性。也就是说，即使信号之间有滞后，这些变异也不会影响它们在傅里叶域中的表现。
- en: Python implementation of Fourier Transform
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 傅里叶变换的Python实现
- en: The simplest possible implementation of FFT can be done using numpy and scipy
    python libraries.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的FFT实现可以使用numpy和scipy python库完成。
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Figure](../Images/28a0a8e79f2926d5c1e86e37781fb3ac.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/28a0a8e79f2926d5c1e86e37781fb3ac.png)'
- en: FFT plot
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 绘图
- en: Conclusion
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: The FFT is used in digital recording, sampling, [additive synthesis](https://en.wikipedia.org/wiki/Additive_synthesis) and
    pitch correction software.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 用于数字录音、采样、[加法合成](https://en.wikipedia.org/wiki/Additive_synthesis) 和音高校正软件。
- en: 'The FFT’s importance derives from the fact that it has made working in the
    frequency domain equally computationally feasible as working in the temporal or
    spatial domain. Some of the important applications of the FFT include:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: FFT 的重要性源于其使在频域工作的计算复杂度与在时间域或空间域工作的计算复杂度相当。一些 FFT 的重要应用包括：
- en: Fast large-integer and polynomial multiplication
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的大整数和多项式乘法
- en: Efficient matrix-vector multiplication for Toeplitz, circulant and other structured
    matrices
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效的Toeplitz矩阵、循环矩阵及其他结构化矩阵的矩阵-向量乘法
- en: Filtering algorithms
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤算法
- en: Fast algorithms for [discrete cosine](https://en.wikipedia.org/wiki/Discrete_cosine_transform) or [sine
    transform](https://en.wikipedia.org/wiki/Discrete_sine_transform) (e.g. Fast Discrete
    Cosine Transform used for [JPEG](https://en.wikipedia.org/wiki/JPEG) and [MPEG](https://en.wikipedia.org/wiki/MPEG)/[MP3](https://en.wikipedia.org/wiki/MP3) encoding
    and decoding).
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的[离散余弦变换](https://en.wikipedia.org/wiki/Discrete_cosine_transform)或[正弦变换](https://en.wikipedia.org/wiki/Discrete_sine_transform)（例如，用于[JPEG](https://en.wikipedia.org/wiki/JPEG)和[MPEG](https://en.wikipedia.org/wiki/MPEG)/[MP3](https://en.wikipedia.org/wiki/MP3)编码和解码的快速离散余弦变换）。
- en: Fast [Chebyshev approximation](https://en.wikipedia.org/wiki/Chebyshev_approximation).
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速的[切比雪夫逼近](https://en.wikipedia.org/wiki/Chebyshev_approximation)
- en: Solving difference equations.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解差分方程。
- en: Computation of [isotopic distributions](https://en.wikipedia.org/wiki/Mass_spectrometry).
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[同位素分布的计算](https://en.wikipedia.org/wiki/Mass_spectrometry)'
- en: Well, that’s all for this article hope you guys have enjoyed reading it and
    I’ll be glad if the article is of any help. Feel free to share your comments/thoughts/feedback
    in the comment section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，本文就到这里，希望你们喜欢阅读，如果文章对你们有帮助我会很高兴。欢迎在评论区分享你的评论/想法/反馈。
- en: Thanks for reading!!!
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢阅读！！！
- en: '**Bio: [Nagesh Singh Chauhan](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/)**
    is a Data Science enthusiast. Interested in Big Data, Python, Machine Learning.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**个人简介：[纳戈什·辛格·乔汉](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/)**
    是一名数据科学爱好者，对大数据、Python 和机器学习感兴趣。'
- en: '[Original](https://towardsdatascience.com/fourier-transformation-for-a-data-scientist-1f3731115097).
    Reposted with permission.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/fourier-transformation-for-a-data-scientist-1f3731115097)。经许可转载。'
- en: '**Related:**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[The Data Science Puzzle — 2020 Edition](/2020/02/data-science-puzzle-2020-edition.html)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学难题 — 2020版](/2020/02/data-science-puzzle-2020-edition.html)'
- en: '[The Math Behind Bayes](/2019/11/math-behind-bayes.html)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[贝叶斯背后的数学](/2019/11/math-behind-bayes.html)'
- en: '[Top 5 Data Science Trends for 2020](/2020/02/top-5-data-science-trends.html)'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2020年数据科学的5大趋势](/2020/02/top-5-data-science-trends.html)'
- en: More On This Topic
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的5个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该知道的三个R库（即使你使用Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，并通过寻找目标来……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
