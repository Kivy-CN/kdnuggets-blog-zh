- en: 'Object-oriented programming for data scientists: Build your ML estimator'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据科学家的面向对象编程：构建你的ML估算器
- en: 原文：[https://www.kdnuggets.com/2019/08/object-oriented-programming-data-scientists-estimator.html](https://www.kdnuggets.com/2019/08/object-oriented-programming-data-scientists-estimator.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2019/08/object-oriented-programming-data-scientists-estimator.html](https://www.kdnuggets.com/2019/08/object-oriented-programming-data-scientists-estimator.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**UPDATE**: You will always find the latest Python script (with the linear
    regression class definition and methods) [**HERE**](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/OOP_in_ML/Class_MyLinearRegression.py).
    Use it to build further or experiment.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**更新**：你可以在[**这里**](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/OOP_in_ML/Class_MyLinearRegression.py)找到最新的Python脚本（包含线性回归类定义和方法）。利用它进一步构建或进行实验。'
- en: What is the problem?
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 问题是什么？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持组织的IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Data scientists often come from a background which is quite far removed from
    traditional computer science/software engineering — physics, biology, statistics,
    economics, electrical engineering, etc.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 数据科学家往往来自于与传统计算机科学/软件工程相去甚远的背景——物理学、生物学、统计学、经济学、电气工程等。
- en: '![Figure](../Images/14047e07e857d9d8af0a64fd62947456.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Figure](../Images/14047e07e857d9d8af0a64fd62947456.png)'
- en: '**Source**: [“Where do Data Scientists Come From?”](https://medium.com/indeed-engineering/where-do-data-scientists-come-from-fc526023ace)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**来源**：[“数据科学家来自哪里？”](https://medium.com/indeed-engineering/where-do-data-scientists-come-from-fc526023ace)'
- en: But ultimately, they are expected to pick up a sufficient amount of programming/software
    engineering to be truly impactful for their organization and business.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终，他们预计会掌握足够的编程/软件工程知识，以对他们的组织和业务产生真正的影响。
- en: '**[Being a Data Scientist does not make you a Software Engineer!](https://towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372?source=post_page-----7da416751f64----------------------)**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**[成为数据科学家并不意味着你是软件工程师！](https://towardsdatascience.com/being-a-data-scientist-does-not-make-you-a-software-engineer-c64081526372?source=post_page-----7da416751f64----------------------)**'
- en: How to build scalable Machine Learning systems — Part 1/2
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如何构建可扩展的机器学习系统——第1部分/2部分
- en: And, what is at the heart of most modern programming languages and software
    engineering paradigms?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，大多数现代编程语言和软件工程范式的核心是什么？
- en: '[Object-oriented programming (OOP).](https://www.webopedia.com/TERM/O/object_oriented_programming_OOP.html)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[面向对象编程（OOP）。](https://www.webopedia.com/TERM/O/object_oriented_programming_OOP.html)'
- en: But the [principles of OOP](https://realpython.com/python3-object-oriented-programming/) can
    feel little alien or even intimidating to the uninitiated at first. Consequently,
    data scientists, whose background did not include formal training in computer
    programming, may find the concepts of OOP somewhat difficult to embrace in their
    day-to-day work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但[面向对象编程（OOP）](https://realpython.com/python3-object-oriented-programming/)的原理对初学者来说可能感觉陌生或甚至令人畏惧。因此，那些背景中没有计算机编程正式培训的数据科学家可能会发现面向对象编程的概念在日常工作中有些难以接受。
- en: The popular MOOCs and boot camps for data science/AI/ML do not help either.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 受欢迎的数据科学/人工智能/机器学习的MOOC和训练营也无济于事。
- en: They try to give the budding data scientists the flavor of a mixed soup of statistics,
    numerical analysis, scientific programming, machine learning (ML) algorithms,
    visualization, and perhaps even a bit of web framework to deploy those ML models.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 他们尝试为新兴的数据科学家提供一种统计学、数值分析、科学编程、机器学习（ML）算法、可视化，甚至可能还有一点用于部署这些ML模型的网络框架的混合风味。
- en: Almost all of these can be learned and practiced even without rigorously adhering
    to the principles of OOP. In fact, young data scientists, who are hungry to learn
    the latest neural network architecture or the coolest data visualization techniques,
    may even feel suffocated if bombarded with all the nitty-gritty of the OOP programming
    paradigm. So, the MOOCs don’t generally mix or emphasize it in their data science
    curriculum.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎所有这些都可以学习和实践，即使不严格遵循面向对象编程的原则。事实上，渴望学习最新神经网络架构或最酷数据可视化技术的年轻数据科学家，如果被面向对象编程范式的细节淹没，可能会感到窒息。因此，MOOCs
    通常不会在数据科学课程中混合或强调它。
- en: '![](../Images/7fd218516dbca417bf02d9ed323659c7.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7fd218516dbca417bf02d9ed323659c7.png)'
- en: A simple example (and some more…)
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个简单的例子（还有一些…）
- en: Let me give an example of this problem using Python, as it is the [fastest growing
    language for data science and machine learning tasks](https://stackoverflow.blog/2017/09/14/python-growing-quickly/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我用 Python 举个例子，因为它是[数据科学和机器学习任务中增长最快的语言](https://stackoverflow.blog/2017/09/14/python-growing-quickly/)。
- en: The arithmetic example
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 算术例子
- en: If you are asked to write a program to implement addition, subtraction, multiplication,
    and division involving a couple of numbers `a` and `b`, what will you most likely
    do?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果让你编写一个程序来实现涉及几个数字 `a` 和 `b` 的加法、减法、乘法和除法，你最有可能怎么做？
- en: You will most likely open up a Jupyter notebook and type the following in a
    cell, hit *shift-enter* and get the result.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你很可能会打开一个 Jupyter notebook，在一个单元格中输入以下内容，按 *shift-enter* 并获取结果。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you like to tidy things up by working with functions, then you may do,
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢通过使用函数来整理事物，你可以这样做，
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: But will you go as far as defining (complete with an initializer method) a Calc ***class*** and
    putting these functions inside that class as ***methods***? These are all operations
    of a similar nature and they work on similar data. Why not [encapsulate](https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/) them
    within a single higher-order object then? Why not the following code?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你会去定义一个完整的（包括初始化方法）的 Calc ***类*** 并将这些函数放入该类作为 ***方法*** 吗？这些都是类似性质的操作，并且处理相似的数据。为什么不[封装](https://stackify.com/oop-concept-for-beginners-what-is-encapsulation/)到一个更高级的对象中呢？为什么不是下面的代码？
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: No, you won’t do this. It probably does not make sense to do it for this particular
    problem either. But the idea is valid —* if you have data and functions (methods
    as they are called in the parlance of OOP), which can be combined logically, then
    they should be encapsulated in a class*.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 不，你不会这样做。对这个特定问题来说，做这样的事情可能没有意义。但这个想法是有效的——*如果你有数据和函数（在面向对象编程的术语中称为方法），可以逻辑地结合起来，那么它们应该封装在一个类中*。
- en: But it looks too much work just for getting quick answers to some simple numerical
    computations. So, what’s the point? Data scientists are often valued on whether
    they can get the right answer to the data problem, not on what elaborate objects
    they are using in the code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了快速得到一些简单的数值计算结果，这似乎工作量太大了。那么，这有什么意义？数据科学家通常的价值在于他们是否能得到数据问题的正确答案，而不是他们在代码中使用了什么复杂的对象。
- en: Data scientist’s example
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 数据科学家的例子
- en: If data scientists are not coding this way, is it not the case, that they really
    don’t need to use these elaborate programming constructs?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据科学家不是以这种方式编程，那么是否意味着他们实际上不需要使用这些复杂的编程结构？
- en: '**Wrong.**'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误。**'
- en: Without consciously being aware, data scientists make heavy use of the benefits
    of the OOP paradigm. **All the time**.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在无意识的情况下，数据科学家大量利用了面向对象编程范式的好处。**一直如此**。
- en: Remember `plt.plot` after `import matplotlib.pyplot as plt`?
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得`plt.plot`在`import matplotlib.pyplot as plt`之后吗？
- en: Those **.** symbols. You have a dash of object-oriented programming. Right there.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那些**.**符号。你有一丝面向对象编程的痕迹。就在这里。
- en: Or, do you remember being happy to learn the cool trick in the Jupyter notebook
    — hitting Tab after putting a DOT (.), thereby showing all the functions that
    can be associated with an *object*? Like this,
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你还记得在 Jupyter notebook 中学会了这个酷技巧——在输入一个点（.）后按下 Tab 键，从而显示所有可以与一个*object*关联的函数吗？像这样，
- en: '![](../Images/97c267ebc460ca2af1652a07ac458847.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/97c267ebc460ca2af1652a07ac458847.png)'
- en: What does this example show?
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这个例子展示了什么？
- en: This example shows adherence to logical consistency.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子展示了逻辑一致性的遵守。
- en: Without the OOP paradigm, we would have to name those functions as `linear_model_linear_regression_fit`,`linear_model_linear_regression_predict`,
    and so on. They won’t be grouped under a common logical unit.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有面向对象编程范式，我们就不得不将这些函数命名为`linear_model_linear_regression_fit`、`linear_model_linear_regression_predict`，等等。它们不会被归入一个共同的逻辑单元下。
- en: Why? Because they are different functions and work on a different set of data.
    While the `fit` function expects both training features and targets, `predict`needs
    only a test data set. The `fit` function is not expected to return anything, while `predict` is
    expected to return a set of predictions.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？因为它们是不同的函数，作用于不同的数据集。`fit`函数需要训练特征和目标，而`predict`只需要测试数据集。`fit`函数不期望返回任何东西，而`predict`则期望返回一组预测结果。
- en: '**So, why are they visible under the same drop-down**? In spite of being different,
    they have the commonality that *they can both be imagined to be essential parts
    of the overall linear regression process* — we expect a linear regression to fit
    some training data, and then be able to predict for future unseen data. We also
    expect the linear regression model to provide us some indication about how good
    the fit was — generally in the form of a single numeric quantity or score called
    coefficient of regression or R². As expected, we see a function `score`, which
    returns exactly that R² number, also hanging around `fit`and `predict`.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**那么，为什么它们会在同一个下拉菜单下显示**？尽管它们不同，但它们有一个共同点，即*它们都可以被想象成整体线性回归过程的重要部分*——我们期望线性回归能够适应一些训练数据，然后能够对未来未见的数据进行预测。我们还期望线性回归模型能给出一些关于拟合效果的指示——通常是一个被称为回归系数或
    R² 的数值量。正如预期的，我们看到一个函数`score`，它正好返回那个 R² 数字，也在`fit`和`predict`附近。'
- en: Neat and clean, isn’t it?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 整洁又干净，不是吗？
- en: Data, functions, and parameters are cohabitating inside a single logical unit.
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 数据、函数和参数共存于一个逻辑单元内。
- en: '![](../Images/50eb96c8a9e886ec5e8981b520522367.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/50eb96c8a9e886ec5e8981b520522367.png)'
- en: How was it made possible?
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 这是怎么做到的？
- en: It was possible because **we rose above the individual differences and thought
    about the linear regression as a high-level process** and decided what essential
    actions it should serve and what critical parameters it should inform its users
    about.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为**我们超越了个体差异，把线性回归视为一个高级过程**，并决定它应该服务于哪些基本操作以及它应该告知用户哪些关键参数。
- en: We made a high-level class called `LinearRegression` under which all those apparently
    disparate functions can be grouped together for easy book-keeping and enhanced
    usability.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个高层次的类叫做`LinearRegression`，在其中将所有这些看似不相关的函数归为一个组，以便于记录和提高可用性。
- en: Once we imported this class from the library, we just had to create an instance
    of the class — we called it `lm`. That’s it. All the functions, grouped under
    the class, became accessible to us through that newly defined instance `lm`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们从库中导入了这个类，我们只需创建一个类的实例——我们称之为`lm`。就这样。所有归入该类下的函数都通过新定义的实例`lm`对我们可用。
- en: If we are not satisfied with some of the internal implementation of the functions,
    we can work on them and re-attach them to the main class after modification. Only
    the code of the internal function changes, nothing else.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们对函数的某些内部实现不满意，我们可以修改它们并在修改后重新附加到主类上。只有内部函数的代码发生变化，其他没有改变。
- en: See, how logical and scalable it sounds?
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 看，看起来多么合逻辑且可扩展？
- en: '![](../Images/b574d609433e3dac521a60cf30c50316.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b574d609433e3dac521a60cf30c50316.png)'
- en: Create your own ML estimator
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建你自己的 ML 估算器
- en: Traditional introduction to OOP will have plenty of examples using classes such
    as — animals, sports, geometric shapes.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的面向对象编程介绍会有很多使用类的例子，比如——动物、体育、几何形状。
- en: But for data scientists, **why not illustrate the concepts using the example
    of an object they use every day in their code — a machine learning estimator**.
    Just like the `lm` object from the Scikit-learn library, shown in the picture
    above.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据科学家来说，**为什么不使用他们在代码中每天使用的对象——机器学习估算器来说明这些概念呢**？就像上面图片中显示的 Scikit-learn 库中的`lm`对象一样。
- en: A good, old Linear Regression estimator — with a twist
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个经典的线性回归估算器——带有一丝变化
- en: '[**In this Github repo**](https://github.com/tirthajyoti/Machine-Learning-with-Python/tree/master/OOP_in_ML),
    I have shown, step-by-step, how to build a simple linear regression (single or
    multivariate) estimator class following the OOP paradigm.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[**在这个 Github 仓库**](https://github.com/tirthajyoti/Machine-Learning-with-Python/tree/master/OOP_in_ML)中，我一步步展示了如何构建一个简单的线性回归（单变量或多变量）估算器类，遵循面向对象编程的范式。'
- en: Yes, it is the good old linear regression class. It has the usual `fit` and `predict`methods
    as in the `LinearRegression` class from Scikit-learn. But it has more functionalities.
    Here is a sneak peek…
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，它是那种古老的线性回归类。它具有与 Scikit-learn 的 `LinearRegression` 类相同的`fit`和`predict`方法。但它有更多功能。这里是一个简要预览……
- en: '![](../Images/8c58fd137523c1bcd9c3dd1cd79a8707.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8c58fd137523c1bcd9c3dd1cd79a8707.png)'
- en: Yes, this estimator is richer than the Scikit-learn estimator in the sense that
    it has, in addition to standard `fit`, `predict`, and R² `score` functions, **a
    host of other utilities which are essential for a linear regression modeling task**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这个估计器比 Scikit-learn 的估计器更丰富，因为它除了标准的`fit`、`predict`和 R² `score`函数外，还具有**一系列对线性回归建模任务至关重要的其他实用工具**。
- en: Especially, for data scientists and statistical modeling folks — who not only
    want to predict but also would like to
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是对于数据科学家和统计建模人员——他们不仅希望进行预测，还希望
- en: measure the [Goodness of fit](https://blog.minitab.com/blog/adventures-in-statistics-2/regression-analysis-how-do-i-interpret-r-squared-and-assess-the-goodness-of-fit),
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量[拟合优度](https://blog.minitab.com/blog/adventures-in-statistics-2/regression-analysis-how-do-i-interpret-r-squared-and-assess-the-goodness-of-fit)，
- en: verify the [assumptions of the linear regression](https://statisticsbyjim.com/regression/ols-linear-regression-assumptions/),
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证[线性回归的假设](https://statisticsbyjim.com/regression/ols-linear-regression-assumptions/)，
- en: check for [multicollinearity in the data](https://blog.minitab.com/blog/understanding-statistics/handling-multicollinearity-in-regression-analysis),
    or
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查[数据中的多重共线性](https://blog.minitab.com/blog/understanding-statistics/handling-multicollinearity-in-regression-analysis)，或者
- en: detect [outliers](https://stattrek.com/regression/influential-points.aspx).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测[离群值](https://stattrek.com/regression/influential-points.aspx)。
- en: '**[How do you check the quality of your regression model in Python?](https://towardsdatascience.com/how-do-you-check-the-quality-of-your-regression-model-in-python-fa61759ff685?source=post_page-----7da416751f64----------------------)**'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**[你如何在 Python 中检查回归模型的质量？](https://towardsdatascience.com/how-do-you-check-the-quality-of-your-regression-model-in-python-fa61759ff685?source=post_page-----7da416751f64----------------------)**'
- en: Linear regression is rooted strongly in statistical learning and therefore the
    model must be checked for the ‘goodness…
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 线性回归深深扎根于统计学习中，因此必须检查模型的‘优度……
- en: How do you start building the class?
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 你如何开始构建这个类？
- en: We start with a simple code snippet to define the class. We name it — `MyLinearRegression`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个简单的代码片段开始定义类。我们将其命名为`MyLinearRegression`。
- en: Here, `self` denotes the object itself and `__init__` is a [special function
    which is invoked when an instance of the class is created](https://micropyramid.com/blog/understand-self-and-__init__-method-in-python-class/) somewhere
    in the code. As the name suggests, `__init__` can be used to initialize the class
    with necessary parameters (if any).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`self`表示对象本身，而`__init__`是一个[在创建类的实例时会调用的特殊函数](https://micropyramid.com/blog/understand-self-and-__init__-method-in-python-class/)。顾名思义，`__init__`可以用来用必要的参数（如果有的话）初始化类。
- en: '![](../Images/70c02f5518e56cd53bb6ddc03a6d9c9a.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70c02f5518e56cd53bb6ddc03a6d9c9a.png)'
- en: We can add a simple description string to keep it honest :-)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加一个简单的描述字符串以保持诚实 :-)
- en: '![](../Images/6be0608e25d1f6584625e0e2da6593ef.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6be0608e25d1f6584625e0e2da6593ef.png)'
- en: We add the core `fit` method next. Note the [**docstring**](https://www.geeksforgeeks.org/python-docstrings/) describing
    the purpose of the method, what it does and what type of data it expects. [All
    of these are part of good OOP principles](https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加核心的`fit`方法。请注意[**文档字符串**](https://www.geeksforgeeks.org/python-docstrings/)，它描述了方法的目的、功能以及期望的数据类型。[这些都是良好面向对象编程原则的一部分](https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd)。
- en: '![](../Images/b0999e6f072e96e626a33d5bb4fee98f.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b0999e6f072e96e626a33d5bb4fee98f.png)'
- en: We can generate some random data to test our code so far. We create a linear
    function of two variables. Here are the scatter plots of the data.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以生成一些随机数据来测试到目前为止的代码。我们创建一个两个变量的线性函数。以下是数据的散点图。
- en: '![](../Images/7f6ba261575fc70a25b26bb4a2b5df46.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/7f6ba261575fc70a25b26bb4a2b5df46.png)'
- en: Now, we can create an instance of the class `MyLinearRegression` called `mlr`.
    What happens if we try to print the regression parameters?
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个名为`mlr`的`MyLinearRegression`类的实例。如果我们尝试打印回归参数，会发生什么呢？
- en: '![](../Images/050574a0011945253ffa1324d61e849f.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/050574a0011945253ffa1324d61e849f.png)'
- en: Because the `self.coef_` was set to `None`, we get the same while trying to
    print `mlr.coef_`. Note, how the self became synonymous to the instance of the
    class — `mlr` once it is created.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`self.coef_`被设置为`None`，所以在尝试打印`mlr.coef_`时得到的结果是一样的。注意，自创建`mlr`实例后，`self`变成了`mlr`的同义词。
- en: But the definition of `fit` includes setting the attributes once the fitting
    is done. Therefore, we can just call `mlr.fit()` and print out the fitted regression
    parameters.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 但是`fit`的定义包括在拟合完成后设置属性。因此，我们可以直接调用`mlr.fit()`并打印出拟合的回归参数。
- en: '![](../Images/49eef3affe2909fca466bf5317cf6d43.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/49eef3affe2909fca466bf5317cf6d43.png)'
- en: The quintessential `Predict` method
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最重要的`Predict`方法
- en: After fitting, comes prediction. We can add that method easily to our regression
    class.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 拟合之后就是预测。我们可以很容易地将该方法添加到我们的回归类中。
- en: '![](../Images/adc25f937a8be3e2e63a7dbe181fc39e.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/adc25f937a8be3e2e63a7dbe181fc39e.png)'
- en: What if we want to add a (or a few) plotting utility function?
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 如果我们想添加一个（或几个）绘图工具函数怎么办？
- en: At this point, we start expanding our regression class and **add stuff which
    is not even present in the standard scikit-learn class!** For example, we always
    want to see how the fitted values compare to the ground truth. It is easy to create
    a function for that. We will call it `plot_fitted`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们开始扩展我们的回归类，并**添加一些标准 scikit-learn 类中没有的东西！**例如，我们总是想查看拟合值与真实值的比较。为此创建一个函数很简单。我们将其命名为`plot_fitted`。
- en: Note that a [method is like a normal function](https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function/29379748).
    It can take additional arguments. Here, we have an argument`reference_line` (default
    set to `False`) which draws a 45-degree reference line on the fitted vs true plot.
    Also, note the docstring description.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，[方法类似于普通函数](https://stackoverflow.com/questions/155609/whats-the-difference-between-a-method-and-a-function/29379748)。它可以接受额外的参数。在这里，我们有一个参数`reference_line`（默认设置为`False`），它在拟合与真实图中绘制了一条45度参考线。另外，注意文档字符串的描述。
- en: '![](../Images/aa3ddeee84b3de9e4bd2fcd2c3992387.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/aa3ddeee84b3de9e4bd2fcd2c3992387.png)'
- en: We can test the method`plot_fitted` by simply doing the following,
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过简单地做以下操作来测试方法`plot_fitted`，
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Or, we can opt to draw the reference line,
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，我们可以选择绘制参考线，
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We get the following plots!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到以下图！
- en: '![](../Images/dc458160e528deab2021214f05391f73.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dc458160e528deab2021214f05391f73.png)'
- en: Once we understood that we can add any useful methods to work on the same data
    (a training set), related to the same purpose (linear regression), there is no
    bound to our imagination! How about we add the following plots to our class?
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们明白可以将任何有用的方法添加到处理相同数据（训练集）且目的相同（线性回归）的类中，我们的想象力就没有界限了！如何将以下图添加到我们的类中？
- en: '**Pairplots** (plots pairwise relation between all features and outputs, much
    like the `pairs` function in R)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对角图**（绘制所有特征和输出之间的成对关系，类似于 R 中的`pairs`函数）'
- en: '**Fitted vs. residual** plot (this falls under diagnostic plots for the linear
    regression i.e. to check the validity of the fundamental assumptions)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拟合与残差**图（这属于线性回归的诊断图，即检查基本假设的有效性）'
- en: '**Histogram** and the **quantile-quantile (Q-Q)** plot of the residuals (this
    checks for the assumption of Normality of the error distribution)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直方图**和**分位数-分位数（Q-Q）**图（这用于检查误差分布的正态性假设）'
- en: Inheritance — don’t overburden your main class
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 继承 — 不要让你的主类过于繁重
- en: As we enthusiastically plan utility methods to add to the class, we recognize
    that this approach may make the code of the main class very long and difficult
    to debug. To solve the conundrum, we can make use of another beautiful principle
    of OOP —[**inheritance**](https://www.geeksforgeeks.org/inheritance-in-python/).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们热情地规划要添加到类中的实用方法时，我们认识到这种方法可能会使主类的代码非常长且难以调试。为了解决这个难题，我们可以利用面向对象编程的另一个美丽原则——[**继承**](https://www.geeksforgeeks.org/inheritance-in-python/)。
- en: '**[Inheritance in Python - GeeksforGeeks](https://www.geeksforgeeks.org/inheritance-in-python/?source=post_page-----7da416751f64----------------------)**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Python 中的继承 - GeeksforGeeks](https://www.geeksforgeeks.org/inheritance-in-python/?source=post_page-----7da416751f64----------------------)**'
- en: Inheritance is the capability of one class to derive or inherit the properties
    from some another class. The benefits of…
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是一个类从另一个类派生或继承属性的能力。其好处…
- en: We further recognize that **all plots are not of the same type**. Pairplots
    and fitted vs. true data plots are of similar nature as they can be derived from
    the data only. Other plots are related to the goodness-of-fit and residuals.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们进一步认识到**并非所有绘图类型相同**。Pairplots和拟合与真实数据的绘图性质相似，因为它们只能从数据中推导出。其他绘图与拟合优度和残差有关。
- en: Therefore, we can create two separate classes with those plotting functions
    — `Data_plots` and `Diagnostic_plots`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以创建两个独立的类来实现这些绘图功能——`Data_plots`和`Diagnostic_plots`。
- en: And guess what! We can define our main `MyLinearRegression` class ***in terms
    of these utility classes***. That is an instance of inheritance.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 而且你猜怎么着！我们可以将我们的主`MyLinearRegression`类***定义为这些工具类的组成部分***。这就是继承的实例。
- en: '**Note**: This may seem a little different from standard parent class-child
    class inheritance practice but for the same feature of the language is used here
    for keeping the main class clean and compact while inheriting useful methods from
    other similarly constructed classes.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**：这可能与标准的父类-子类继承实践有所不同，但在这里使用了相同的语言特性，以保持主类的简洁和紧凑，同时从其他类似构建的类中继承有用的方法。'
- en: '![](../Images/dbf1bccc0045c88bdf44e7a8f63f493b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/dbf1bccc0045c88bdf44e7a8f63f493b.png)'
- en: Note the following code snippets are only for illustration. Please use the Github
    link above to see the actual code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意以下代码片段仅供说明。请使用上面的Github链接查看实际代码。
- en: '![Figure](../Images/7e6d3e16ced328bdd829de63c91082f2.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/7e6d3e16ced328bdd829de63c91082f2.png)'
- en: '`Data_plots` class![Figure](../Images/e7df0082a7f0bcc4978c3d4321977433.png)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Data_plots`类！[图](../Images/e7df0082a7f0bcc4978c3d4321977433.png)'
- en: '`Diagnostics_plots` class'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Diagnostics_plots`类'
- en: And the definition of `MyLinearregression` is changed only slightly,
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 而且`MyLinearRegression`的定义仅略有改变，
- en: '[PRE5]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By simply passing on the reference of `Data_plots` and `Diagnostics_plots` to
    the definition of `MyLinearRgression` class, we inherit all the methods and properties
    of those classes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地将`Data_plots`和`Diagnostics_plots`的引用传递给`MyLinearRegression`类的定义，我们继承了这些类的所有方法和属性。
- en: Now, to check the Normality assumptions of the error terms, we can simply fit
    the model and run those methods.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了检查误差项的正态性假设，我们可以简单地拟合模型并运行这些方法。
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We get,
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到，
- en: '![](../Images/4c438910375e2697d073be9b2086c20b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4c438910375e2697d073be9b2086c20b.png)'
- en: Again, the separation of code is at work here. You can modify and improve the
    core plotting utilities without touching the main class. Highly flexible and less
    error-prone approach!
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，代码的分离在这里发挥作用。你可以在不触及主类的情况下修改和改进核心绘图工具。高度灵活且减少错误的做法！
- en: Do more with the power of OOP
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 利用面向对象编程的强大功能做更多的事情
- en: We will not elaborate further on the various utility classes and methods we
    can add to `MyLinearRegression`. You can [**check the Github repo**](https://github.com/tirthajyoti/Machine-Learning-with-Python/tree/master/OOP_in_ML).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会进一步详细说明可以添加到`MyLinearRegression`的各种工具类和方法。你可以[**查看Github仓库**](https://github.com/tirthajyoti/Machine-Learning-with-Python/tree/master/OOP_in_ML)。
- en: Additional classes added
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加的额外类
- en: Just for completeness, we added,
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们添加了，
- en: A class `Metrics` for computing various regression metrics — SSE, SST, MSE, *R*²,
    and Adjusted *R*².
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于计算各种回归指标的类`Metrics`— SSE、SST、MSE、*R*²和调整后的*R*²。
- en: A class `Outliers` to plot Cook’s distance, leverage, and influence plots
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于绘制Cook距离、杠杆和影响图的类`Outliers`
- en: A class `Multicollinearity` to compute variance inflation factors (VIF)
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于计算方差膨胀因子（VIF）的类`Multicollinearity`
- en: All in all, the grand scheme looks like following,
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，宏观计划如下，
- en: '![](../Images/c7cd17cb8c128a37c79da2a641840506.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c7cd17cb8c128a37c79da2a641840506.png)'
- en: Is this class richer than the Scikit-learn’s LinearRegression class? You decide.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类是否比Scikit-learn的LinearRegression类更丰富？由你决定。
- en: Add syntactic sugar by creating grouped utilities
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过创建分组工具来添加语法糖
- en: Once you have inherited other classes, they behave just like the usual Python
    module you are familiar with. So, you can add utility methods to the main class
    to execute multiple methods from a sub-class together.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你继承了其他类，它们的行为就像你熟悉的普通Python模块一样。因此，你可以向主类添加工具方法，以便同时执行子类中的多个方法。
- en: For example, the following method runs all the usual diagnostics checks at once.
    Note how we are accessing the plot methods by putting a simple **.DOT** i.e. `Diagnostics_plot.histogram_resid`.
    Just like accessing a function from Pandas or NumPy library!
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下面的方法一次运行所有常见的诊断检查。注意我们是如何通过放置一个简单的**.DOT**，即`Diagnostics_plot.histogram_resid`来访问绘图方法的。就像从Pandas或NumPy库中访问函数一样！
- en: '![Figure](../Images/5d7eb84d02341a5bb80965d32df8a8bb.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/5d7eb84d02341a5bb80965d32df8a8bb.png)'
- en: '`run_diagnostics` method in the main class'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 主类中的`run_diagnostics`方法
- en: With this, we can run all the diagnostics with a single line of code after fitting
    data.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个，我们可以在数据拟合后用一行代码运行所有的诊断。
- en: '[PRE7]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/84ee9de902da24ad8cfd0c739fc0275e.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/84ee9de902da24ad8cfd0c739fc0275e.png)'
- en: Similarly, you can add all the outlier plots in a single utility method.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以将所有的异常值绘图功能添加到一个实用方法中。
- en: Modularization — import the class as a module
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块化——将类作为模块导入
- en: Although not a canonical OOP principle, the essential advantage of following
    the OOP paradigm is to [**be able to modularize your code**](https://atomicobject.com/resources/oo-programming/encapsulation-modularity).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一个经典的 OOP 原则，但遵循 OOP 范式的主要优势是[**能够模块化你的代码**](https://atomicobject.com/resources/oo-programming/encapsulation-modularity)。
- en: You can experiment and develop all this code in a standard Jupyter notebook.
    But for maximum modularity, consider converting the Notebook into a standalone
    executable Python script (with a .py extension). As a good practice, remove all
    the unnecessary comments and test code from this file and keep only the classes
    together.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在标准的 Jupyter 笔记本中试验和开发所有这些代码。但为了最大程度的模块化，考虑将笔记本转换为独立的可执行 Python 脚本（.py 扩展名）。作为良好的实践，删除文件中的所有不必要的注释和测试代码，仅保留类。
- en: '[**Here is the link to the script**](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/OOP_in_ML/Class_MyLinearRegression.py) I
    put together for this article.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[**这里是我为这篇文章整理的脚本链接**](https://github.com/tirthajyoti/Machine-Learning-with-Python/blob/master/OOP_in_ML/Class_MyLinearRegression.py)。'
- en: Once you do that, you can import the `MyLinearRgression` class from a completely
    different Notebook. This is often the **preferred way of testing your code** as
    this does not touch the core model but only tests it with various data samples
    and functional parameters.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做了，你可以从完全不同的笔记本中导入`MyLinearRegression`类。这通常是[**测试你的代码的首选方式**](https://atomicobject.com/resources/oo-programming/encapsulation-modularity)，因为这不会触及核心模型，而是仅用不同的数据样本和功能参数进行测试。
- en: '![](../Images/8abefd0c466c96cfb71776b25f19d539.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/8abefd0c466c96cfb71776b25f19d539.png)'
- en: At this point, you can consider putting this Python script on a Github, creating
    a Setup.py file, creating the proper directory structure, and [releasing it as
    a standalone linear regression package](https://towardsdatascience.com/build-your-first-open-source-python-project-53471c9942a7) which
    does fitting, prediction, plotting, diagnostics, and more.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你可以考虑将这个 Python 脚本放到 Github 上，创建一个 Setup.py 文件，建立适当的目录结构，并将其[发布为一个独立的线性回归包](https://towardsdatascience.com/build-your-first-open-source-python-project-53471c9942a7)，该包可以进行拟合、预测、绘图、诊断等操作。
- en: Of course, you have to add a lot of [docstring description](https://www.geeksforgeeks.org/python-docstrings/),
    examples of usage of a function, [assertion checks](https://airbrake.io/blog/python-exception-handling/python-assertionerror),
    and [unit tests](http://softwaretestingfundamentals.com/unit-testing/) to make
    it a good package.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，你还需要添加大量的[文档字符串描述](https://www.geeksforgeeks.org/python-docstrings/)、函数使用示例、[断言检查](https://airbrake.io/blog/python-exception-handling/python-assertionerror)和[单元测试](http://softwaretestingfundamentals.com/unit-testing/)，以使其成为一个优秀的包。
- en: But as a data scientist, now you have added a significant skill to your repertoire
    - software development following OOP principles.
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 作为数据科学家，现在你已经为自己的技能库增加了一项重要技能——遵循面向对象编程（OOP）原则的软件开发。
- en: It was not so difficult, was it?
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不难，对吧？
- en: Epilogue
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 后记
- en: Motivation and related articles
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动机与相关文章
- en: To write this post, I was inspired by [this fantastic article](https://dziganto.github.io/classes/data%20science/linear%20regression/machine%20learning/object-oriented%20programming/python/Understanding-Object-Oriented-Programming-Through-Machine-Learning/),
    which drills down to the concept of OOP in Python in more detail with a context
    of machine learning.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为撰写这篇文章，我受到[这篇精彩文章](https://dziganto.github.io/classes/data%20science/linear%20regression/machine%20learning/object-oriented%20programming/python/Understanding-Object-Oriented-Programming-Through-Machine-Learning/)的启发，这篇文章更详细地探讨了
    Python 中 OOP 的概念，并结合了机器学习的背景。
- en: '**[Understanding Object-Oriented Programming Through Machine Learning](https://dziganto.github.io/classes/data%20science/linear%20regression/machine%20learning/object-oriented%20programming/python/Understanding-Object-Oriented-Programming-Through-Machine-Learning/?source=post_page-----7da416751f64----------------------)**'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**[通过机器学习理解面向对象编程](https://dziganto.github.io/classes/data%20science/linear%20regression/machine%20learning/object-oriented%20programming/python/Understanding-Object-Oriented-Programming-Through-Machine-Learning/?source=post_page-----7da416751f64----------------------)**'
- en: Object-Oriented Programming (OOP) is not easy to wrap your head around. You
    can read tutorial after tutorial and sift…
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: I wrote a similar article, touching even more basic approaches, in the context
    of deep learning. Check it out here,
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '**[How a simple mix of object-oriented programming can sharpen your deep learning
    prototype](https://towardsdatascience.com/how-a-simple-mix-of-object-oriented-programming-can-sharpen-your-deep-learning-prototype-19893bd969bd?source=post_page-----7da416751f64----------------------)**'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: By mixing simple concepts of object-oriented programming, like functionalization
    and class inheritance, you can add…
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Courses?
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: I tried to look for relevant courses and found little if you are using Python.
    Most software engineering courses out there are taught using Java. Here are two
    which may be of help,
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[Software engineering for data scientists in Python](https://www.datacamp.com/courses/software-engineering-for-data-scientists-in-python)'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python classes and inheritance](https://www.coursera.org/learn/python-classes-inheritance/)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you have any questions or ideas to share, please contact the author at [**tirthajyoti[AT]gmail.com**](mailto:tirthajyoti@gmail.com).
    Also, you can check the author’s GitHub repositoriesfor other fun code snippets
    in Python, R, or MATLAB and machine learning resources. If you are, like me, passionate
    about machine learning/data science, please feel free to [add me on LinkedIn](https://www.linkedin.com/in/tirthajyoti-sarkar-2127aa7/) or [follow
    me on Twitter.](https://twitter.com/tirthajyotiS)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/object-oriented-programming-for-data-scientists-build-your-ml-estimator-7da416751f64).
    Reposted with permission.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[How a simple mix of object-oriented programming can sharpen your deep learning
    prototype](/2019/08/simple-mix-object-oriented-programming-sharpen-deep-learning-prototype.html)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mathematical programming —  Key Habit to Build Up for Advancing Data Science](/2019/05/mathematical-programming-key-habit-advancing-data-science.html)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimization with Python: How to make the most amount of money with the least
    amount of risk?](/2019/06/optimization-python-money-risk.html)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[建立一个稳固的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
