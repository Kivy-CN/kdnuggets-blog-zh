- en: Object-Oriented Programming Explained Simply for Data Scientists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向对象编程为数据科学家简单解释
- en: 原文：[https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html](https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html](https://www.kdnuggets.com/2020/12/object-oriented-programming-explained-simply-data-scientists.html)
- en: '[comments](#comments)![Figure](../Images/96e2f31dc1eaa9686d222cb562061d96.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)![图片](../Images/96e2f31dc1eaa9686d222cb562061d96.png)'
- en: Photo by [Jelleke Vanooteghem](https://unsplash.com/@ilumire?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Jelleke Vanooteghem](https://unsplash.com/@ilumire?utm_source=medium&utm_medium=referral)拍摄，来源于[Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 在 IT 领域支持你的组织'
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Object-Oriented Programming or OOP can be a tough concept to understand for
    beginners. And that’s mainly because it is not really explained in the right way
    in a lot of places. Normally a lot of books start by explaining OOP by talking
    about the three big terms — **Encapsulation, Inheritance and Polymorphism**. But
    the time the book can explain these topics, anyone who is just starting would
    already feel lost.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）对于初学者来说可能是一个难以理解的概念。这主要是因为很多地方并没有以正确的方式解释它。通常，很多书籍会通过讲解三个重要术语 — **封装、继承和多态**
    来开始解释 OOP。但当书籍能够解释这些主题时，任何刚入门的人可能已经感到困惑。
- en: So, I thought of making the concept a little easier for fellow programmers,
    Data Scientists and Pythonistas. The way I intend to do is by removing all the
    Jargon and going through some examples. I would start by explaining classes and
    objects. Then I would explain why classes are important in various situations
    and how they solve some fundamental problems. In this way, the reader would also
    be able to understand the three big terms by the end of the post.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我想为其他程序员、数据科学家和 Python 爱好者简化这个概念。我打算通过去除所有术语并通过一些示例来做到这一点。我将从解释类和对象开始。然后，我将解释为什么在各种情况下类很重要，以及它们如何解决一些基本问题。这样，读者在文章结束时也能理解这三个重要术语。
- en: In this series of posts named[ **Python Shorts**](https://towardsdatascience.com/tagged/python-shorts),
    I will explain some simple but very useful constructs provided by Python, some
    essential tips, and some use cases I come up with regularly in my Data Science
    work.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个名为[**Python Shorts**](https://towardsdatascience.com/tagged/python-shorts)的系列文章中，我将解释
    Python 提供的一些简单但非常有用的构造，一些基本技巧，以及我在数据科学工作中经常用到的一些使用案例。
- en: '***This post is about explaining OOP the laymen way.***'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '***这篇文章是用通俗的方式解释面向对象编程。***'
- en: What are Objects and Classes?
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 什么是对象和类？
- en: 'Put simply, everything in Python is an object and classes are a blueprint of
    objects. So when we write:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，Python 中的一切都是对象，类是对象的蓝图。所以当我们写：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We are creating an object `a` of class `int` holding the value 2 and object `b` of
    class `str` holding the value “Hello!”. In a way, these two particular classes
    are provided to us by default when we use numbers or strings.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个值为 2 的`int`类对象`a`，以及一个值为“Hello！”的`str`类对象`b`。在某种程度上，当我们使用数字或字符串时，这两个特定的类是默认提供给我们的。
- en: Apart from these a lot of us end up working with classes and objects without
    even realizing it. For example, you are actually using a class when you use any
    Scikit-Learn model.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，我们中的很多人最终在不知不觉中与类和对象打交道。例如，当你使用任何 Scikit-Learn 模型时，你实际上是在使用一个类。
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here your classifier `clf` is an object and fit is a method defined in the class `RandomForestClassifier`
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里你的分类器`clf`是一个对象，fit 是在类`RandomForestClassifier`中定义的方法
- en: But Why Classes?
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 那么，为什么要使用类？
- en: So, we use them a lot when we are working with Python. But why really. What
    is it with classes? I could do the same with functions?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当我们使用Python时，我们经常使用类。但究竟为什么呢？类有什么特别之处？我可以用函数做到这一点吗？
- en: Yes, you can. But classes really provide you with a lot of power compared to
    functions. To quote an example, the `str` class has a lot of functions defined
    for the object which we can access just by pressing tab. One could also write
    all these functions, but that way, they would not be available to use just by
    pressing the tab button.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你可以。但是，与函数相比，类确实为你提供了很多强大的功能。举个例子，`str`类为对象定义了许多函数，我们可以通过按下tab键来访问这些函数。虽然也可以编写这些函数，但那样的话，它们就无法通过按下tab键来使用了。
- en: '![Image for post](../Images/f2e2a1c598d8cac648f0e27713f03d01.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图像用于帖子](../Images/f2e2a1c598d8cac648f0e27713f03d01.png)'
- en: This property of classes is called **encapsulation. **From [Wikipedia](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming)) — ***encapsulation**** refers
    to the bundling of data with the methods that operate on that data, or the restricting
    of direct access to some of an object’s components*.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 类的这种属性被称为**封装**。来自[维基百科](https://en.wikipedia.org/wiki/Encapsulation_(computer_programming))——***封装***指的是将数据与操作这些数据的方法捆绑在一起，或限制对对象某些组件的直接访问。
- en: So here the `str` class bundles the data(“Hello!”) with all the methods that
    would operate on our data. I would explain the second part of that statement by
    the end of the post. In the same way, the `RandomForestClassifier` class bundles
    all the classifier methods (`fit`, `predict` etc.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`str`类将数据（“Hello!”）与所有操作数据的方法捆绑在一起。我会在帖子结束时解释该声明的第二部分。同样，`RandomForestClassifier`类将所有分类器方法（`fit`、`predict`等）捆绑在一起。
- en: 'Apart from this, Class usage can also help us to make the code much more modular
    and easy to maintain. So say we were to create a library like Scikit-Learn. We
    need to create many models, and each model will have a fit and predict method.
    If we don’t use classes, we will end up with a lot of functions for each of our
    different models like:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除此之外，类的使用还可以帮助我们使代码更加模块化，更容易维护。比如说我们要创建一个像Scikit-Learn这样的库。我们需要创建许多模型，每个模型都会有一个fit和predict方法。如果我们不使用类，我们最终会得到许多不同模型的函数，如下所示：
- en: '[PRE2]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This sort of a code structure is just a nightmare to work with, and hence Scikit-Learn
    defines each of the models as a class having the `fit` and `predict` methods.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代码结构简直是个噩梦，因此Scikit-Learn将每个模型定义为一个具有`fit`和`predict`方法的类。
- en: Creating a Class
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个类
- en: 'So, now we understand why to use classes and how they are so important, how
    do we really go about using them? So, creating a class is pretty simple. Below
    is a boilerplate code for any class you will end up writing:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，现在我们理解了为什么要使用类以及它们的重要性，我们到底该如何使用它们呢？创建一个类是相当简单的。下面是任何类的模板代码：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We see a lot of new keywords here. The main ones are `class`,`__init__` and `self`.
    So what are these? Again, it is easily explained by some example.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到这里有很多新关键词。主要的是`class`、`__init__`和`self`。这些是什么呢？通过一些例子可以很容易地解释。
- en: Suppose you are working at a bank that has many accounts. We can create a class
    named account that would be used to work with any account. For example, below
    I create an elementary toy class `Account` which stores data for a user — namely `account_name` and `balance`.
    It also provides us with two methods to `deposit`/`withdraw` money to/from the
    bank account. Do read through it. It follows the same structure as the code above.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在一个有很多账户的银行工作。我们可以创建一个名为`Account`的类，用于处理任何账户。例如，下面我创建了一个简单的玩具类`Account`，它存储用户的数据——即`account_name`和`balance`。它还提供了两个方法来`deposit`/`withdraw`银行账户中的资金。请仔细阅读，它遵循与上面代码相同的结构。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can create an account with a name Rahul and having an amount of 100 using:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下代码创建一个名为Rahul、金额为100的账户：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We can access the data for this account using:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下方式访问该账户的数据：
- en: '![Image for post](../Images/ab17d66ae51505be847d46b6329a25ef.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图像用于帖子](../Images/ab17d66ae51505be847d46b6329a25ef.png)'
- en: But, how are these attributes `balance` and `account_name` already set to 100,
    and “Rahul” respectively? We never did call the `__init__` method, so why did
    the object gets these attribute? The answer here is that `__init__` is a **magic
    method**(There are a lot of other magic methods which I would expand on in my
    next post on Magic Methods), which gets run whenever we create the object. So
    when we create `myAccount` , it automatically also runs the function `__init__`
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，这些属性`balance`和`account_name`怎么已经分别设置为100和“Rahul”呢？我们从未调用过`__init__`方法，那么为什么对象会得到这些属性呢？答案是`__init__`是一个**魔术方法**（还有许多其他魔术方法，我将在下一个关于魔术方法的帖子中展开讨论），每当我们创建对象时，它都会运行。因此，当我们创建`myAccount`时，它会自动运行`__init__`函数。
- en: 'So now we understand `__init__`, let us try to deposit some money into our
    account. We can do this by:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们理解了`__init__`，让我们尝试将一些钱存入我们的账户。我们可以通过以下方式来实现：
- en: '![Image for post](../Images/7d8f316ef9630bcc6180621607155e23.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图像](../Images/7d8f316ef9630bcc6180621607155e23.png)'
- en: And our balance rose to 200\. But did you notice that our function `deposit` needed
    two arguments namely `self` and `amount,` yet we only provided one, and still,
    it works.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 并且我们的余额增加到了200。你是否注意到我们的函数`deposit`需要两个参数，即`self`和`amount`，但我们只提供了一个，结果仍然能工作。
- en: '**So, what is this **`**self**`**? ** The way I like to explain self is by
    calling the same function in an albeit different way. Below, I call the same function
    deposit belonging to the class `account` and provide it with the `myAccount` object
    and the `amount`. And now the function takes two arguments as it should.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**那么，这个**`**self**`**是什么呢？** 我喜欢通过以不同的方式调用相同的函数来解释`self`。下面，我调用了属于`account`类的相同函数`deposit`，并为其提供了`myAccount`对象和`amount`。现在函数接收了两个参数，正如它应该的那样。'
- en: '![Image for post](../Images/e6fc0a58d32132bee7048b4e8e53d64d.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![帖子图像](../Images/e6fc0a58d32132bee7048b4e8e53d64d.png)'
- en: And our `myAccount` balance increases by 100 as expected. So it is the same
    function we have called. Now, that could only happen if `self` and `myAccount` are
    exactly the same object. When I call `myAccount.deposit(100)` Python provides
    the same object `myAccount` to the function call as the argument `self`. And that
    is why `self.balance` in the function definition really refers to `myAccount.balance`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`myAccount`余额按预期增加了100。因此，调用的确是同一个函数。现在，这只有在`self`和`myAccount`是完全相同的对象时才会发生。当我调用`myAccount.deposit(100)`时，Python将相同的对象`myAccount`作为`self`传递给函数调用。这就是为什么函数定义中的`self.balance`实际上指代`myAccount.balance`。
- en: But, still, some problems remain
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 但是，仍然存在一些问题
- en: '![Figure](../Images/cf04bc78e16f04728298a8bdfeb0e9d0.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/cf04bc78e16f04728298a8bdfeb0e9d0.png)'
- en: Photo by [Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：[Volodymyr Hryshchenko](https://unsplash.com/@lunarts?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: We know how to create classes, but still, there is another important problem
    that I haven’t touched upon yet.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道如何创建类，但还有一个重要的问题我还没有涉及到。
- en: 'So, suppose you are working with Apple iPhone Division, and you have to create
    a different Class for each iPhone model. For this simple example, let us say that
    our iPhone’s first version currently does a single thing only — Makes a call and
    has some memory. We can write the class as:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在与苹果iPhone部门合作，你必须为每个iPhone型号创建一个不同的类。对于这个简单的例子，假设我们的iPhone的第一个版本目前只做一件事——打电话，并且有一些内存。我们可以这样编写类：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, Apple plans to launch `iPhone1` and this `iPhone` Model introduces a new
    functionality — The ability to take a pic. One way to do this is to copy-paste
    the above code and create a new class `iPhone1` like:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，苹果计划推出`iPhone1`，这个`iPhone`型号引入了一项新功能——拍照的能力。一种实现方法是复制粘贴上述代码，并创建一个新的类`iPhone1`，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'But as you can see that is a lot of unnecessary duplication of code (shown
    in bold above) and Python has a solution for removing that code duplication. One
    good way to write our iPhone1 class is:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 但正如你所看到的，这里有很多不必要的代码重复（如上所示的粗体部分），而Python有解决这个代码重复的办法。一种良好的方式来编写我们的iPhone1类是：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: And that is the concept of inheritance. As per [Wikipedia](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)): **Inheritance** is
    the mechanism of basing an object or class upon another object or class retaining
    similar implementation. Simply put, `iPhone1` has access to all the variables
    and methods defined in class `iPhone` now.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是继承的概念。根据[维基百科](https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming))：**继承**是基于另一个对象或类的机制，并保留类似的实现。简单来说，`iPhone1`现在可以访问在`iPhone`类中定义的所有变量和方法。
- en: In this case, we don’t have to do any code duplication as we have inherited(taken)
    all the methods from our parent class iPhone. Thus we don’t have to define the `call` function
    again. Also, we don’t set the mobile_id and memory in the `__init__` function
    using super.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们不需要做任何代码重复，因为我们已经从父类iPhone继承了所有方法。因此，我们不需要重新定义`call`函数。此外，我们也不在`__init__`函数中使用super设置mobile_id和memory。
- en: '**But what is this **`**super().__init__(memory,user_id)**`**?**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**但这是什么**`**super().__init__(memory,user_id)**`**?**'
- en: In real life, your `__init__` functions won’t be these nice two-line functions.
    You would need to define a lot of variables/attributes in your class and copying
    pasting them for the child class (here iphone1) becomes cumbersome. Thus there
    exists super(). Here`**super().__init__()**`actually calls the `**__init__**`method
    of the parent `iPhone` Class here. So here when the `__init__` function of class `iPhone1` runs
    it automatically sets the `memory` and `user_id` of the class using the `__init__` function
    of the parent class.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，你的`__init__`函数不会是这些简单的两行函数。你需要在你的类中定义许多变量/属性，复制粘贴到子类（这里是iphone1）会变得很麻烦。因此，存在super()。这里`**super().__init__()**`实际上调用了父类`iPhone`的`**__init__**`方法。所以当`iPhone1`类的`__init__`函数运行时，它会自动使用父类的`__init__`函数设置类的`memory`和`user_id`。
- en: '***Where do we see this in ML/DS/DL?*** Below is how we create a [PyTorch](https://mlwhiz.com/blog/2020/09/09/pytorch_guide/) model.
    This model inherits everything from the `nn.Module` class and calls the `__init__` function
    of that class using the `super` call.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '***我们在机器学习/数据科学/深度学习中在哪里看到这个？*** 下面是我们如何创建一个[PyTorch](https://mlwhiz.com/blog/2020/09/09/pytorch_guide/)模型。该模型继承了`nn.Module`类的所有内容，并通过`super`调用了该类的`__init__`函数。'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**But what is Polymorphism? **We are getting better at understanding how classes
    work so I guess I would try to explain Polymorphism now. Look at the below class.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**但什么是多态？** 我们对类如何工作的理解越来越好，所以我想我会尝试解释一下多态。看下面的类。'
- en: 'Here we have our base `class Shape` and the other derived classes — `Rectangle` and `Circle`.
    Also, see how we use multiple levels of inheritance in the `Square` class which
    is derived from `Rectangle` which in turn is derived from `Shape`. Each of these
    classes has a function called `area` which is defined as per the shape. So the
    concept that a function with the same name can do multiple things is made possible
    through **Polymorphism** in Python. ***In fact, that is the literal meaning of
    Polymorphism: “Something that takes many forms”. ***So here our function `area`
    takes multiple forms.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有我们的基础`class Shape`和其他派生类——`Rectangle`和`Circle`。另外，请查看我们如何在`Square`类中使用多级继承，该类派生自`Rectangle`，而`Rectangle`又派生自`Shape`。这些类中的每一个都有一个名为`area`的函数，其定义依据形状而异。因此，函数同名但能做多种事情的概念是通过Python中的**多态**实现的。***实际上，这就是多态的字面意思：“多种形式的东西”。***因此，在这里我们的函数`area`具有多种形式。
- en: 'Another way that Polymorphism works with Python is with the `isinstance` of
    method. So using the above class, if we do:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多态在Python中的另一种工作方式是使用`isinstance`方法。因此，使用上述类，如果我们这样做：
- en: '![Image for post](../Images/38955b28a6cae5d8f7f03bb8724618cf.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/38955b28a6cae5d8f7f03bb8724618cf.png)'
- en: Thus, the instance type of the object `mySquare` is `Square`,
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对象`mySquare`的实例类型是`Square`，
- en: '`Rectangle` and `Shape`. And hence the object is polymorphic. This has a lot
    of good properties. For example, We can create a function that works with an `Shape` object,
    and it will totally work with any of the derived classes (`Square`, `Circle`, `Rectangle` etc.)
    by making use of Polymorphism.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rectangle`和`Shape`。因此，对象是多态的。这具有很多好的属性。例如，我们可以创建一个处理`Shape`对象的函数，它将完全适用于任何派生类（`Square`、`Circle`、`Rectangle`等），通过利用多态。'
- en: '![Image for post](../Images/479a55964aa987ef1806f878a927ac55.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图像](../Images/479a55964aa987ef1806f878a927ac55.png)'
- en: 'Some More Info:'
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多信息：
- en: Why do we see function names or attribute names starting with **Single and Double
    Underscores? **Sometimes we want to make our attributes and functions in classes
    private and not allow the user to see them. This is a part of **Encapsulation** where
    we want to “*restrict the direct access to some of an object’s components”.* For
    instance, let’s say, we don’t want to allow the user to see the memory(RAM) of
    our iPhone once it is created. In such cases, we create an attribute using underscores
    in variable names.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们看到以 **单下划线和双下划线** 开头的函数名或属性名？有时我们想将类中的属性和函数设为私有，不允许用户查看它们。这是 **封装** 的一部分，我们想“*限制对对象某些组件的直接访问*”。例如，假设我们不希望用户在创建
    iPhone 后看到内存（RAM）。在这种情况下，我们通过在变量名中使用下划线来创建属性。
- en: So when we create the `iPhone` Class in the below way, you won’t be able to
    access your phone `memory` or the `privatefunc` using Tab in your ipython notebooks
    because the attribute is made private now using _.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 所以当我们以以下方式创建 `iPhone` 类时，你将无法在 ipython 笔记本中使用 Tab 访问你的手机 `memory` 或 `privatefunc`，因为属性现在使用
    _ 被设为私有。
- en: '![Image for post](../Images/d1853feefd419827342a8318a29d0cd4.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![Image for post](../Images/d1853feefd419827342a8318a29d0cd4.png)'
- en: But you would still be able to change the variable value using (Though not recommended)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 但你仍然可以使用（尽管不推荐）更改变量值。
- en: '![Image for post](../Images/5bee417978dd83037a2eddd0405ddaef.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![Image for post](../Images/5bee417978dd83037a2eddd0405ddaef.png)'
- en: You would also be able to use the method _privatefunc using `myphone._privatefunc()`.
    If you want to avoid that you can use double underscores in front of the variable
    name. For example, below the call to `print(myphone.__memory)` throws an error.
    Also, you are not able to change the internal data of an object by using `myphone.__memory
    = 1`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用方法 _privatefunc，通过 `myphone._privatefunc()` 调用。如果你想避免这种情况，可以在变量名前使用双下划线。例如，下面调用
    `print(myphone.__memory)` 会引发错误。此外，你不能通过 `myphone.__memory = 1` 更改对象的内部数据。
- en: '![Image for post](../Images/c05f87c2f2ddd2dbfdb981150c7c9762.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![Image for post](../Images/c05f87c2f2ddd2dbfdb981150c7c9762.png)'
- en: But, as you see you can access and modify these `self.__memory` values in your
    class definition in the function `setMemory` for instance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 但如你所见，你可以在类定义中的 `setMemory` 函数中访问和修改这些 `self.__memory` 值。
- en: Conclusion
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: '![Figure](../Images/7a29c9ef2303425720d307e8d75a9347.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Figure](../Images/7a29c9ef2303425720d307e8d75a9347.png)'
- en: Photo by [Jeshoots.com](https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral) on [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源于 [Jeshoots.com](https://unsplash.com/@jeshoots?utm_source=medium&utm_medium=referral)
    在 [Unsplash](https://unsplash.com/?utm_source=medium&utm_medium=referral)
- en: 'I hope this has been useful for you to understand classes. There is still so
    much to classes that remain that I would cover in my next post on magic methods.
    Stay Tuned. Also, to summarize, in this post, we learned about OOP and creating
    classes along with the various fundamentals of OOP:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这对你理解类有所帮助。关于类还有很多内容，我将在下一篇关于魔法方法的文章中继续讨论。敬请关注。总结一下，在这篇文章中，我们学习了面向对象编程 (OOP)
    和创建类及其各种基础知识：
- en: '**Encapsulation**: Object contains all the data for itself.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**封装**：对象包含所有自身的数据。'
- en: '**Inheritance**: We can create a class hierarchy where methods from parent
    classes pass on to child classes'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**继承**：我们可以创建一个类层次结构，使得父类的方法传递给子类。'
- en: '**Polymorphism**: A function takes many forms, or the object might have multiple
    types.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多态性**：一个函数可以有多种形式，或者对象可能具有多种类型。'
- en: 'To end this post, I would be giving an exercise for you to implement as I think
    it might clear some concepts for you. ***Create a class that lets you manage 3d
    objects(sphere and cube) with volumes and surface areas***. The basic boilerplate
    code is given below:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为了结束这篇文章，我会给你一个练习，希望这可以帮助你澄清一些概念。***创建一个类，管理三维对象（球体和立方体）的体积和表面积***。基本的模板代码如下：
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: I will put the ***answer in the comments for this article.***
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我会在这篇文章的 ***评论中给出答案***。
- en: If you want to learn more about [Python](https://amzn.to/2XPSiiG), I would like
    to call out an excellent course on Learn [**Intermediate level Python**](https://bit.ly/2XshreA)
    from the University of Michigan. Do check it out.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 [Python](https://amzn.to/2XPSiiG) 的内容，我推荐密歇根大学的 [**中级 Python 课程**](https://bit.ly/2XshreA)。一定要看看。
- en: I am going to be writing more of such posts in the future too. Let me know what
    you think about the series. Follow me up at [**Medium**](https://medium.com/@rahul_agarwal) or
    Subscribe to my [**blog**](http://eepurl.com/dbQnuX) to be informed about them.
    As always, I welcome feedback and constructive criticism and can be reached on
    Twitter [@mlwhiz](https://twitter.com/MLWhiz).
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我将来也会继续写更多这样的文章。请告诉我你对这个系列的看法。关注我在[**Medium**](https://medium.com/@rahul_agarwal)或订阅我的[**博客**](http://eepurl.com/dbQnuX)以获取更新。像往常一样，我欢迎反馈和建设性的批评，你可以在Twitter上通过[@mlwhiz](https://twitter.com/MLWhiz)联系我。
- en: Also, a small disclaimer — There might be some affiliate links in this post
    to relevant resources, as sharing knowledge is never a bad idea.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，小小的免责声明——此文中可能包含一些相关资源的附属链接，因为分享知识从来不是坏主意。
- en: '**Bio: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** is Senior
    Statistical Analyst at WalmartLabs. Follow him on Twitter [@mlwhiz](https://twitter.com/MLWhiz).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [Rahul Agarwal](https://www.linkedin.com/in/rahulagwl/)** 是WalmartLabs的高级统计分析师。关注他在Twitter上的[@mlwhiz](https://twitter.com/MLWhiz)。'
- en: '[Original](https://towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d).
    Reposted with permission.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/object-oriented-programming-explained-simply-for-data-scientists-ce2c7b5db1d)。转载已获许可。'
- en: '**Related:**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[10 Underrated Python Skills](/2020/10/10-underrated-python-skills.html)'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10个被低估的Python技能](/2020/10/10-underrated-python-skills.html)'
- en: '[6 bits of advice for Data Scientists](/2019/09/advice-data-scientists.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家的6条建议](/2019/09/advice-data-scientists.html)'
- en: '[The 5 Classification Evaluation Metrics Every Data Scientist Must Know](/2019/10/5-classification-evaluation-metrics-every-data-scientist-must-know.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家必须知道的5种分类评估指标](/2019/10/5-classification-evaluation-metrics-every-data-scientist-must-know.html)'
- en: More On This Topic
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的5项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应该掌握的6种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021年最佳ETL工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让Python成为初创公司的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，寻找目标以…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Building a solid data team](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[构建一个强大的数据团队](https://www.kdnuggets.com/2021/12/build-solid-data-team.html)'
