["```py\nIG = information before splitting (parent) â€” information after splitting (children)\n```", "```py\nimport pandas as pd\nfrom sklearn.datasets import load_irisdata = load_iris()\ndf = pd.DataFrame(data.data, columns=data.feature_names)\ndf['target'] = data.target\n```", "```py\nX_train, X_test, Y_train, Y_test = train_test_split(df[data.feature_names], df['target'], random_state=0)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\n```", "```py\nclf = DecisionTreeClassifier(max_depth = 2, \n                             random_state = 0)\n```", "```py\nclf.fit(X_train, Y_train)\n```", "```py\n# Predict for 1 observation\nclf.predict(X_test.iloc[0].values.reshape(1, -1))# Predict for multiple observations\nclf.predict(X_test[0:10])\n```", "```py\n# The score method returns the accuracy of the model\nscore = clf.score(X_test, Y_test)\nprint(score)\n```", "```py\n# List of values to try for max_depth:\nmax_depth_range = list(range(1, 6))# List to store the average RMSE for each value of max_depth:\naccuracy = []for depth in max_depth_range:\n\n    clf = DecisionTreeClassifier(max_depth = depth, \n                             random_state = 0)\n    clf.fit(X_train, Y_train)    score = clf.score(X_test, Y_test)\n    accuracy.append(score)\n```", "```py\nimportances = pd.DataFrame({'feature':X_train.columns,'importance':np.round(clf.feature_importances_,3)})\nimportances = importances.sort_values('importance',ascending=False)\n```"]