["```py\nimport glob\n\n# Load all txt files in path\nfiles = glob.glob('/path/to/files/*.txt')\n\n# Concatenate files to new file\nwith open('2020_output.txt', 'w') as out_file:\n    for file_name in files:\n        with open(file_name) as in_file:\n            out_file.write(in_file.read())\n\n# Read file and print\nwith open('2020_output.txt', 'r') as new_file:\n    lines = [line.strip() for line in new_file]\nfor line in lines: print(line)\n```", "```py\nfile 1 line 1\nfile 1 line 2\nfile 1 line 3\nfile 2 line 1\nfile 2 line 2\nfile 2 line 3\nfile 3 line 1\nfile 3 line 2\nfile 3 line 3\n```", "```py\nimport pandas as pd\nimport glob\n\n# Load all csv files in path\nfiles = glob.glob('/path/to/files/*.csv')\n\n# Create a list of dataframe, one series per CSV\nfruit_list = []\nfor file_name in files:\n    df = pd.read_csv(file_name, index_col=None, header=None)\n    fruit_list.append(df)\n\n# Create combined frame out of list of individual frames\nfruit_frame = pd.concat(fruit_list, axis=0, ignore_index=True)\n\nprint(fruit_frame)\n```", "```py\n            0   1    2\n0      grapes   3  5.5\n1      banana   7  6.8\n2       apple   2  2.3\n3      orange   9  7.2\n4  blackberry  12  4.3\n5   starfruit  13  8.9\n6  strawberry   9  8.3\n7        kiwi   7  2.7\n8   blueberry   2  7.6\n```", "```py\nimport pandas as pd\n\n# Create a dataframe to use\ndf = pd.DataFrame({'col_A': ['kiwi', 'banana', 'apple'],\n\t           'col_B': ['pineapple', 'grapes', 'grapefruit'],\n\t\t   'col_C': ['blueberry', 'grapefruit', 'orange']})\n\n# Compress and save dataframe to file\ndf.to_csv('sample_dataframe.csv.zip', index=False, compression='zip')\nprint('Dataframe compressed and saved to file')\n\n# Read compressed zip file into dataframe\ndf = pd.read_csv('sample_dataframe.csv.zip',)\nprint(df)\n```", "```py\nDataframe compressed and saved to file\n\n    col_A       col_B       col_C\n0    kiwi   pineapple   blueberry\n1  banana      grapes  grapefruit\n2   apple  grapefruit      orange\n```", "```py\n# Create of list of lists (a list where all of its elements are lists)\nlist_of_lists = [['apple', 'pear', 'banana', 'grapes'], \n                 ['zebra', 'donkey', 'elephant', 'cow'],\n\t         ['vanilla', 'chocolate'], \n                 ['princess', 'prince']]\n\n# Flatten the list of lists into a single list\nflat_list = [element for sub_list in list_of_lists for element in sub_list]\n\n# Print both to compare\nprint(f'List of lists:\\n{list_of_lists}')\nprint(f'Flattened list:\\n{flat_list}')\n```", "```py\nList of lists:\n[['apple', 'pear', 'banana', 'grapes'], ['zebra', 'donkey', 'elephant', 'cow'], ['vanilla', 'chocolate'], ['princess', 'prince']]\n\nFlattened list:\n['apple', 'pear', 'banana', 'grapes', 'zebra', 'donkey', 'elephant', 'cow', 'vanilla', 'chocolate', 'princess', 'prince']\n```", "```py\n# Some paired data\npairs = [(1, 10.5), (5, 7.), (2, 12.7), (3, 9.2), (7, 11.6)]\n\n# Sort pairs by first entry\nsorted_pairs  = sorted(pairs, key=lambda x: x[0])\nprint(f'Sorted by element 0 (first element):\\n{sorted_pairs}')\n\n# Sort pairs by second entry\nsorted_pairs  = sorted(pairs, key=lambda x: x[1])\nprint(f'Sorted by element 1 (second element):\\n{sorted_pairs}')\n\n# Extend this to tuples of size n and non-numeric entries\npairs = [('banana', 3), ('apple', 11), ('pear', 1), ('watermelon', 4), ('strawberry', 2), ('kiwi', 12)]\nsorted_pairs  = sorted(pairs, key=lambda x: x[0])\nprint(f'Alphanumeric pairs sorted by element 0 (first element):\\n{sorted_pairs}')\n```", "```py\nSorted by element 0 (first element):\n[(1, 10.5), (2, 12.7), (3, 9.2), (5, 7.0), (7, 11.6)]\n\nSorted by element 1 (second element):\n[(5, 7.0), (3, 9.2), (1, 10.5), (7, 11.6), (2, 12.7)]\n\nAlphanumeric pairs sorted by element 0 (first element):\n[('apple', 11), ('banana', 3), ('kiwi', 12), ('pear', 1), ('strawberry', 2), ('watermelon', 4)]\n\n```"]