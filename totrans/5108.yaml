- en: Top SQL Queries for Data Scientists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/top-sql-queries-for-data-scientists](https://www.kdnuggets.com/top-sql-queries-for-data-scientists)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Top SQL Queries for Data Scientists](../Images/47f18f5138c392ba61fe76c096cce8fa.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Image by Author*'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'I know the word ‘Python’ is probably the most overused word in the context
    of data science. To some degree, there’s a reason for that. But, in this article,
    I want to focus on SQL, which often gets overlooked when *talking* about data
    science. I emphasize talking because, in practice, SQL is not overlooked at all.
    On the contrary, it’s one of the holy trinity of the programming languages in
    data science: SQL, Python, and R.'
  prefs: []
  type: TYPE_NORMAL
- en: SQL is made for data querying and manipulation but also has respectable data
    analysis and reporting capabilities. I’ll show some of the main SQL concepts you
    need as a data scientist and some easy examples from StrataScratch and LeetCode.
  prefs: []
  type: TYPE_NORMAL
- en: Then, I’ll provide two common business scenarios in which all or most of those
    SQL concepts must be applied.
  prefs: []
  type: TYPE_NORMAL
- en: '**Main SQL Concepts for Data Scientists**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here’s the overview of the concepts I’ll discuss.
  prefs: []
  type: TYPE_NORMAL
- en: '![Top SQL Queries for Data Scientists](../Images/eb46de3aead5f565ec06a3dd488ed709.png)'
  prefs: []
  type: TYPE_IMG
- en: '**1\. Querying and Filtering Data**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This is where your practical work as a data scientist usually starts: querying
    a database and extracting only the data you need for your task.'
  prefs: []
  type: TYPE_NORMAL
- en: This typically involves relatively simple SELECT statements with the FROM and
    WHERE clauses. To get the unique values, use DISTINCT. If you need to use several
    tables, you also add JOINs.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll often need to use ORDER BY to make your dataset more organized.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of Combining Two Tables**](https://leetcode.com/problems/combine-two-tables/description/)**:**
    You could be required to list the persons’ names and the city and state they live
    in by joining two tables and sorting the output by last name.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**2\. Working with NULLs**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: NULLs are values that data scientists are often not indifferent to – they either
    want only NULLs, they want to remove them, or they want to replace them with something
    else.
  prefs: []
  type: TYPE_NORMAL
- en: You can select data with or without NULLs using IS NULL or IS NOT NULL in WHERE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Replacing NULLs with some other values is typically done using [conditional
    expressions](https://www.postgresql.org/docs/current/functions-conditional.html):'
  prefs: []
  type: TYPE_NORMAL
- en: NULLIF()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: COALESCE()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CASE statement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Example of IS NULL**](https://leetcode.com/problems/find-customer-referee/description/)**:**
    With this query, you can find all the customers not referred by the customer with
    ID = 2.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[**Example of COALESCE()**](https://platform.stratascratch.com/coding/9620-find-searches-with-no-data-for-the-host_response_rate-column?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds):
    I can rework this example by saying I want to query all the data but also add
    a column that will show 0% as a host response rate instead of NULL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**3\. Data Type Conversion**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As a data scientist, you will convert data frequently. Data often doesn’t come
    in the desired format, so you must adapt it to your needs. This is usually done
    using CAST(), but there are also some alternatives, depending on your SQL flavor.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of Casting Data**](https://platform.stratascratch.com/coding/10056-cast-stars-column-values-to-integer-and-return-with-all-other-column-values?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds)**:**
    This query casts the star data from VARCHAR to INTEGER and removes the values
    that have non-integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '**4\. Data Aggregation**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To better understand the data they’re working with (or simply because they need
    to produce some reports), data scientists very often have to aggregate data.
  prefs: []
  type: TYPE_NORMAL
- en: 'In most cases, you must use [aggregate functions](https://www.postgresql.org/docs/9.5/functions-aggregate.html)
    and GROUP BY. Some of the common aggregate functions are:'
  prefs: []
  type: TYPE_NORMAL
- en: COUNT()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SUM()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AVG()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIN()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MAX()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to filter aggregated data, use HAVING instead of WHERE.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of Sum**](https://leetcode.com/problems/bank-account-summary-ii/description/)**:**
    You can use this query to sum the bank account for each user and show only those
    with a balance above 1,000.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**5\. Handling Dates**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Working with dates is commonplace for data scientists. Again, the dates are
    only sometimes formatted according to your taste or needs. To maximize the flexibility
    of dates, you will sometimes need to extract parts of dates or reformat them.
    To do that in PostgreSQL, you’ll most commonly use these [date/time functions](https://www.postgresql.org/docs/current/functions-datetime.html):'
  prefs: []
  type: TYPE_NORMAL
- en: EXTRACT()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DATE_PART()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DATE_TRUNC()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TO_CHAR()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the common operations with dates is to find a difference between the
    dates or to add dates. You do that by simply subtracting or adding the two values
    or by using the functions dedicated for that, depending on the database you use.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of Extracting Year**](https://platform.stratascratch.com/coding/9728-inspections-that-resulted-in-violations?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds)**:**
    The following query extracts the year from the DATETIME type column to show the
    number of violations per year for Roxanne Cafe.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[**Example of Date Formatting**](https://platform.stratascratch.com/coding/2126-account-registrations?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds):
    With the query below, you format the start date as ''YYYY-MM'' using TO_CHAR().'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**6\. Handling Text**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Apart from dates and numerical data, very often databases contain text values.
    Sometimes, these values have to be cleaned, reformatted, unified, split and merged.
    Due to these needs, every database has many text functions. In [PostgreSQL](https://www.postgresql.org/docs/9.1/functions-string.html),
    some of the more popular ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: CONCAT() or ||
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SUBSTRING()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LENGTH()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REPLACE()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TRIM()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POSITION()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UPPER() & LOWER()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REGEXP_REPLACE() & REGEXP_MATCHES() & REGEXP_SPLIT_TO_ARRAY()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LEFT() & RIGHT()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LTRIM() & RTRIM()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are usually some overlapping string functions in all databases, but each
    has some distinct functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of Finding the Length of the Text**](https://leetcode.com/problems/invalid-tweets/description/)**:**
    This query uses the LENGTH() function to find invalid tweets based on their length.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**7\. Ranking Data**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Ranking data is one of the widespread tasks in data science. For instance, it
    can be used to find the best or worst-selling products, quarters with the highest
    revenue, songs ranked by number of streams, and the highest and lowest-paid employees.
  prefs: []
  type: TYPE_NORMAL
- en: 'The ranking is done using window functions (which we’ll talk a bit more in
    the next section):'
  prefs: []
  type: TYPE_NORMAL
- en: ROW_NUMBER()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RANK()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DENSE_RANK()
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[**Example of Ranking**](https://platform.stratascratch.com/coding/10161-ranking-hosts-by-beds?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds):
    This query uses DENSE_RANK() to rank hosts based on the number of beds they have
    listed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '**8\. Window Functions**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Window functions in SQL allow you to calculate the rows related to the current
    row. This characteristic is not only used to rank data. Depending on the window
    function category, they can have many different uses. You can read more about
    them in the [window functions](https://www.stratascratch.com/blog/the-ultimate-guide-to-sql-window-functions/?utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds)
    article. However, their main characteristic is that they can show analytical and
    aggregated data at the same time. In other words, they don’t collapse individual
    rows when performing calculations.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of FIRST_VALUE() Window Function**](https://leetcode.com/problems/the-latest-login-in-2020/description/)**:**
    One window function example is to show the latest user login for a particular
    year. The FIRST_VALUE() window function makes this easier.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**9\. Subqueries & CTEs**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Subqueries and CTEs (known as tidier subqueries) allow you to reach a more advanced
    level of calculations. By knowing subqueries and CTEs, you can write [complex
    SQL queries](https://www.stratascratch.com/blog/how-to-simplify-complex-sql-queries-with-examples/?utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds),
    with subqueries or CTEs used for sub-calculations referenced in the main query.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Example of Subqueries and CTEs**](https://leetcode.com/problems/product-sales-analysis-iii/description/)**:**
    The query below uses the subquery to find the first year of the product sale.
    This data is then used in WHERE for the main query to filter data.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The code can be written using CTE instead of a subquery.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '**Business Examples of Using SQL**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s now look at a couple of business cases where data scientists can use SQL
    and apply all (or most) of the concepts we discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '**Finding Best Selling Product**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[In this example](https://platform.stratascratch.com/coding/10172-best-selling-item?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds),
    you must know subqueries, data aggregation, handling dates, ranking data using
    window functions, and filtering the output.'
  prefs: []
  type: TYPE_NORMAL
- en: The subquery calculates each product's sales for each month and ranks them by
    sales. The main query then simply selects the required columns and leaves only
    products with the first rank, i.e., best-selling products.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '**Calculating Moving Average**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The rolling or moving average is a common business calculation to which data
    scientists can apply their extensive SQL knowledge, as in [this example](https://platform.stratascratch.com/coding/10314-revenue-over-time?code_type=1&utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds).
  prefs: []
  type: TYPE_NORMAL
- en: The subquery in the code below calculates revenues by month. The main query
    then uses the AVG() window functions to calculate the 3-month rolling average
    revenue.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '**Conclusion**'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All these SQL queries show you how to use SQL in your data science tasks. While
    SQL is not made for complex statistical analysis or machine learning, it’s perfect
    for querying, manipulating, aggregating data, and performing calculations.
  prefs: []
  type: TYPE_NORMAL
- en: These example queries should help you in your job. If you don’t have a data
    science job, many of these queries will come up in your [SQL interview questions](https://www.stratascratch.com/blog/sql-interview-questions-you-must-prepare-the-ultimate-guide/?utm_source=blog&utm_medium=click&utm_campaign=kdn+sql+queries+for+ds).
  prefs: []
  type: TYPE_NORMAL
- en: '[](https://twitter.com/StrataScratch)****[Nate Rosidi](https://twitter.com/StrataScratch)****
    is a data scientist and in product strategy. He''s also an adjunct professor teaching
    analytics, and is the founder of StrataScratch, a platform helping data scientists
    prepare for their interviews with real interview questions from top companies.
    Nate writes on the latest trends in the career market, gives interview advice,
    shares data science projects, and covers everything SQL.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Useful Intermediate SQL Queries for Data Science](https://www.kdnuggets.com/2022/12/4-useful-intermediate-sql-queries-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Optimize SQL Queries for Faster Data Retrieval](https://www.kdnuggets.com/2023/06/optimize-sql-queries-faster-data-retrieval.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Tricky SQL Queries Solved](https://www.kdnuggets.com/2020/11/5-tricky-sql-queries-solved.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Solving 5 Complex SQL Problems: Tricky Queries Explained](https://www.kdnuggets.com/2022/07/5-hardest-things-sql.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How To Speed Up SQL Queries Using Indexes [Python Edition]](https://www.kdnuggets.com/2023/08/speed-sql-queries-indexes-python-edition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
