- en: How to Auto-Detect the Date/Datetime Columns and Set Their Datatype When Reading
    a CSV File in Pandas
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何在读取CSV文件时自动检测日期/日期时间列并设置其数据类型
- en: 原文：[https://www.kdnuggets.com/2021/10/auto-detect-date-datetime-columns-and-set-their-datatype-when-reading-a-csv-file-in-pandas.html](https://www.kdnuggets.com/2021/10/auto-detect-date-datetime-columns-and-set-their-datatype-when-reading-a-csv-file-in-pandas.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/10/auto-detect-date-datetime-columns-and-set-their-datatype-when-reading-a-csv-file-in-pandas.html](https://www.kdnuggets.com/2021/10/auto-detect-date-datetime-columns-and-set-their-datatype-when-reading-a-csv-file-in-pandas.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [David B Rosen (PhD)](http://linkedin.com/in/rosen1), Lead Data Scientist
    for Automated Credit Approval at IBM Global Financing**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由[David B Rosen (博士)](http://linkedin.com/in/rosen1)撰写，IBM全球融资部门自动化信贷审批首席数据科学家**'
- en: '![](../Images/4b91a88132cea774924a3f6047dfac6d.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/4b91a88132cea774924a3f6047dfac6d.png)'
- en: 'Say I have a CSV data file that I want to read into a Pandas dataframe, and
    some of its columns are dates or datetimes, but I don’t want to bother identifying/specifying
    the names of these columns in advance. Instead I would like to automatically obtain
    the datatypes shown in the `df.info()` output pictured *above,* where the appropriate
    columns have been *automatically* given a datetime datatype (green outline boxes).
    Here’s how to accomplish that:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我有一个CSV数据文件，我想将其读取到一个Pandas数据框中，其中一些列是日期或日期时间，但我不想提前识别/指定这些列的名称。相反，我希望自动获得`df.info()`输出中显示的数据类型，如*上方*所示，其中适当的列已被*自动*分配为日期时间数据类型（绿色轮廓框）。下面是实现的方法：
- en: '[PRE0]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that I did **not** invoke pd.read_csv (the Pandas version of read_csv)
    above directly. My dt_auto.read_csv function (see its code down below) has invoked
    pd.read_csv() itself and then automatically detected and converted the datatype
    of the two detected datetime columns. (The contents of this df will be shown down
    below.)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我上面**没有**直接调用pd.read_csv（Pandas版本的read_csv）。我的dt_auto.read_csv函数（见下面的代码）已经调用了pd.read_csv()本身，然后自动检测并转换了两个检测到的日期时间列的数据类型。（这个数据框的内容将在下面展示。）
- en: 'If I had used the regular Pandas pd.read_csv(), I would have obtained merely
    generic object datatypes by default as below (red outline boxes):'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我使用了常规的Pandas pd.read_csv()，我将仅获得默认的通用对象数据类型，如下所示（红色轮廓框）：
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![](../Images/b87de01b2bf2432ed25bc718e95058d6.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/b87de01b2bf2432ed25bc718e95058d6.png)'
- en: Note that the only difference from the original code is in the import statement,
    where I changed “from dt_auto” to “from pandas”. This is sufficient so long as
    you use only “=read_csv()” throughout, not qualifying it as as “=pd.read_csv()”
    or “=dt_auto.read_csv()”.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与原始代码唯一的区别在于导入语句，我将“from dt_auto”更改为“from pandas”。只要你在整个代码中仅使用“=read_csv()”，而不是将其限定为“=pd.read_csv()”或“=dt_auto.read_csv()”，这就足够了。
- en: 'Here is the contents of my `dt_auto.py` (“datetime automatic”):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的`dt_auto.py`（“日期时间自动化”）的内容：
- en: '[PRE2]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'But isn’t this risky? What if one of the columns wasn’t entirely a datetime
    column? Of course you could have some obscure strings that just happen to look
    like dates but aren’t, but there is not much risk that this code will blindly
    convert or lose non-datetime strings, for two reasons:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是有风险吗？如果其中一列并不是完全的日期时间列怎么办？当然，你可能会有一些看起来像日期但实际上不是的模糊字符串，但有两个原因说明这段代码不会盲目转换或丢失非日期时间字符串：
- en: This code will **not** convert any values in a column unless **every** non-NaN
    value in this column can successfully be parsed by pd.to_datetime and converted
    to a datetime. In other words, we will not let it ever convert a string to a pd.NaT
    (the “failure” result) because it can’t understand it as a datetime.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这段代码**不会**转换列中的任何值，除非**每个**非NaN值都能成功被pd.to_datetime解析并转换为日期时间。换句话说，我们不会让它将字符串转换为pd.NaT（“失败”结果），因为它无法将其理解为日期时间。
- en: It will **not** attempt to convert columns that have already been interpreted
    as being any type other than object, i.e. any specific type like int64 or float64,
    even though pd.to_datetime would have happily (but likely undesirably) converted
    a number like 2000 to the date 2000-01-01.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它**不会**尝试转换已经被解释为除对象以外的任何类型的列，即任何特定类型如int64或float64，即使pd.to_datetime可能会（但很可能不希望）将像2000这样的数字转换为日期2000-01-01。
- en: In my experience so far, the dt_auto.read_csv function does not take long to
    run on a typical dataframe. Even if there are a lot of non-datetime object (string)
    columns, it almost always very quickly encounters a value near the top of each
    such column that it can’t parse as a datetime and gives up and moves on to the
    next column without attempting to parse the rest of the column’s values.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，`dt_auto.read_csv` 函数在典型的数据框上运行时间不长。即使有很多非日期时间对象（字符串）列，它几乎总是很快在每个这样的列的顶部遇到一个不能被解析为日期时间的值，然后放弃并转到下一列，而不尝试解析列中其余的值。
- en: Here’s what the resulting dataframe looks like from dt_auto.read_csv(), although
    you can’t necessarily tell by looking at it that the two appropriate columns are
    indeed datetime datatypes. As it happens, the CSV file had a varying number of
    decimal places (three, none, and nine) for the seconds in Update_Timestamp, but
    the datetime datatype itself shows nine such digits regardless. Birthdate in the
    csv file in fact had only dates (no times) but was stored as a full datetime,
    with zeros for the hours, minutes, and seconds (including zero as the decimal
    part), but all of the time components in the column being zero causes Pandas to
    display only the date (year-month-day) for this column.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `dt_auto.read_csv()` 生成的数据框的样子，尽管你可能不能仅通过查看它来判断两个适当的列确实是日期时间数据类型。实际情况是，CSV
    文件在 `Update_Timestamp` 的秒数中有不同数量的小数位（有三位、没有和九位），但日期时间数据类型本身无论如何都显示九位这样的数字。CSV
    文件中的出生日期实际上只有日期（没有时间），但被存储为完整的日期时间，小时、分钟和秒都为零（包括小数部分为零），但列中的所有时间组件都是零，导致 Pandas
    仅显示日期（年-月-日）。
- en: '![](../Images/463005979bdbae23cf647a01df7dcdd6.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/463005979bdbae23cf647a01df7dcdd6.png)'
- en: Of course pd.to_datetime, and thus dt_auto.read_csv, cannot handle all possible
    date and datetime formats by default, but it will handle many common unambiguous
    (generally year month day) formats such as those written by the dataframe.to_csv
    method and many other tools, including many ISO datetime formats (which generally
    have a “T” separating the date from the time rather than a space). I haven’t experimented
    with datetimes that include timezone info because I don’t usually see data like
    that, but do please let me know in a response comment whether these could be handled
    better by further changes to the code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，`pd.to_datetime`，因此 `dt_auto.read_csv` 默认情况下不能处理所有可能的日期和日期时间格式，但它可以处理许多常见的无歧义（通常是年
    月 日）格式，例如由 `dataframe.to_csv` 方法和许多其他工具（包括许多 ISO 日期时间格式）写入的格式（这些格式通常用“ T ”将日期和时间分开，而不是用空格）。我还没有尝试包含时区信息的日期时间，因为我通常不会看到这样的数据，但请在回复评论中告知这些是否可以通过进一步修改代码来更好地处理。
- en: What do you think? Did you find this little article useful? And should Pandas
    itself add (e.g. to the pd.read_csv function itself?) the capability to optionally
    do this for us so you wouldn’t need to copy/import my dt_auto.py code above? I’d
    be happy to see your comments and questions as responses here.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你怎么看？你觉得这篇小文章有用吗？Pandas 本身是否应该添加（例如到 `pd.read_csv` 函数中？）这个功能，以便你无需复制/导入我上面提到的
    `dt_auto.py` 代码？我很乐意看到你在这里的评论和问题。
- en: Thanks to Elliot Gunn.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢 Elliot Gunn。
- en: '**Bio: [David B Rosen (PhD)](http://linkedin.com/in/rosen1)** is Lead Data
    Scientist for Automated Credit Approval at IBM Global Financing. Find more of
    David''s writing at [dabruro.medium.com](https://dabruro.medium.com/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [David B Rosen (PhD)](http://linkedin.com/in/rosen1)** 是 IBM Global Financing
    自动化信用审批的首席数据科学家。可以在 [dabruro.medium.com](https://dabruro.medium.com/) 找到更多 David
    的著作。'
- en: '[Original](https://towardsdatascience.com/auto-detect-and-set-the-date-datetime-datatypes-when-reading-csv-into-pandas-261746095361).
    Reposted with permission.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/auto-detect-and-set-the-date-datetime-datatypes-when-reading-csv-into-pandas-261746095361)。经许可转载。'
- en: '**Related:**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关内容:**'
- en: '[5 Python Data Processing Tips & Code Snippets](/2021/07/python-tips-snippets-data-processing.html)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[5 个 Python 数据处理技巧和代码片段](/2021/07/python-tips-snippets-data-processing.html)'
- en: '[CSV Files for Storage? No Thanks. There’s a Better Option](/2021/08/csv-files-storage-better-option.html)'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CSV 文件用于存储？不，谢谢。还有更好的选择](/2021/08/csv-files-storage-better-option.html)'
- en: '[How to Query Your Pandas Dataframe](/2021/08/query-pandas-dataframe.html)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何查询你的 Pandas 数据框](/2021/08/query-pandas-dataframe.html)'
- en: '* * *'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前 3 个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: '* * *'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 了解更多相关内容
- en: '[How to Select Rows and Columns in Pandas Using [ ], .loc, iloc, .at…](https://www.kdnuggets.com/2019/06/select-rows-columns-pandas.html)'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 [ ]、.loc、iloc、.at 等选择 Pandas 中的行和列](https://www.kdnuggets.com/2019/06/select-rows-columns-pandas.html)'
- en: '[4 Ways to Rename Pandas Columns](https://www.kdnuggets.com/2022/11/4-ways-rename-pandas-columns.html)'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[4 种重命名 Pandas 列的方法](https://www.kdnuggets.com/2022/11/4-ways-rename-pandas-columns.html)'
- en: '[A Step by Step Guide to Reading and Understanding SQL Queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逐步指南：阅读和理解 SQL 查询](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
- en: '[Monitor Your File System With Python’s Watchdog](https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog)'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Python 的 Watchdog 监控你的文件系统](https://www.kdnuggets.com/monitor-your-file-system-with-pythons-watchdog)'
- en: '[Parallel Processing Large File in Python](https://www.kdnuggets.com/2022/07/parallel-processing-large-file-python.html)'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中并行处理大型文件](https://www.kdnuggets.com/2022/07/parallel-processing-large-file-python.html)'
- en: '[KDnuggets News, July 20: Machine Learning Algorithms Explained in…](https://www.kdnuggets.com/2022/n29.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，7月20日：机器学习算法解释……](https://www.kdnuggets.com/2022/n29.html)'
