["```py\nconda create -n pyviz-tutorial python=3.6\nconda activate pyviz-tutorial\nconda install -c pyviz/label/dev pyviz\npyviz examples\ncd pyviz-examples\njupyter notebook\n```", "```py\nimport holoviews as hv\nhv.__version__\n```", "```py\n'1.11.0a11'\n```", "```py\nhv.extension('bokeh', 'matplotlib')\n#should see the HoloViews, Bokeh, and Matplotlib logos\n```", "```py\n#Import necessary libraries\nimport pandas\nimport datashader\nimport dask\nimport geoviews\nimport bokeh\n```", "```py\nimport pandas as pd\n```", "```py\ndiseases_data = pd.read_csv('../data/diseases.csv.gz')\ndiseases_data.head()\n```", "```py\n%matplotlib inline\n```", "```py\ndiseases_data.plot();\n```", "```py\nimport numpy as np\n```", "```py\ndiseases_by_year = diseases_data[[\"Year\",\"measles\"]].groupby(\"Year\").aggregate(np.sum)\n```", "```py\ndiseases_by_year.plot();\n```", "```py\nimport hvplot.pandas\n```", "```py\ndiseases_by_year.hvplot()\n```", "```py\nimport holoviews as hv\nvline = hv.VLine(1963).options(color='red')\n```", "```py\nvaccination_introduced = diseases_by_year.hvplot() * vline * \\\n    hv.Text(1963, 27000, \"Measles Vaccine Introduced\", halign='left')\n```", "```py\nvaccination_introduced\n```", "```py\nprint(vaccination_introduced)\nvaccination_introduced.Curve.I.data.head()\n```", "```py\nmeasles_agg = diseases_data.groupby(['Year', 'State'])['measles'].sum()\nby_state = measles_agg.hvplot('Year', groupby='State', width=500, dynamic=False)\n```", "```py\nby_state * vline\n```", "```py\nby_state[\"Alabama\"].relabel('Alabama') + by_state[\"Florida\"].relabel('Florida')\n```", "```py\nstates = ['New York', 'Alabama', 'California', 'Florida']\nmeasles_agg.loc[1980:1990, states].hvplot.bar('Year', by='State', rot=90)\n```", "```py\n#Importing the necessary libraries\n```", "```py\nimport dask.dataframe as dd, geoviews as gv, cartopy.crs as crs\nfrom colorcet import fire\nfrom holoviews.operation.datashader import datashade\nfrom geoviews.tile_sources import EsriImagery\n```", "```py\ntopts = dict(width=700, height=600, bgcolor='black', xaxis=None, yaxis=None, show_grid=False)\ntiles = EsriImagery.clone(crs=crs.GOOGLE_MERCATOR).options(**topts)\n```", "```py\ndopts = dict(width=1000, height=600, x_sampling=0.5, y_sampling=0.5)\n```", "```py\ntaxi  = dd.read_parquet('../data/nyc_taxi_wide.parq').persist()\npts   = hv.Points(taxi, ['pickup_x', 'pickup_y'])\ntrips = datashade(pts, cmap=fire, **dopts)\n```", "```py\ntiles * trips\n```", "```py\nimport param, panel as pn\nfrom colorcet import palette\n```", "```py\nclass NYCTaxi(param.Parameterized):\n    alpha = param.Magnitude(default=0.75, doc=\"Map tile opacity\")\n    cmap = param.ObjectSelector('fire', objects=['fire','bgy','bgyw','bmy','gray','kbc'])\n    location = param.ObjectSelector(default='dropoff', objects=['dropoff', 'pickup'])\n```", "```py\n def make_view(self, **kwargs):\n        pts   = hv.Points(taxi, [self.location+'_x', self.location+'_y'])\n        trips = datashade(pts, cmap=palette[self.cmap], **dopts)\n        return tiles.options(alpha=self.alpha) * trips\n```", "```py\nexplorer = NYCTaxi(name=\"Taxi explorer\")\npn.Row(explorer.param, explorer.make_view).servable()\n```"]