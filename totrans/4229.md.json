["```py\nfrom tqdm import tqdmfiles = list()\nfpaths = [\"dir1/subdir1\", \"dir2/subdir3\", ......]\n\nfor fpath in tqdm(fpaths, desc=\"Looping over fpaths\")):\n         files.extend(os.listdir(fpath))\n```", "```py\ndef update_df(**df: pd.DataFrame**, \n              **clf: str**, \n              **acc: float**,\n              **remarks: List[str] = []**\n              **split:float** = 0.5) -> **pd.DataFrame**:\n\n    new_row = {'Classifier':clf, \n               'Accuracy':acc, \n               'split_size':split,\n               'Remarks':remarks}\n\n    df = df.append(new_row, ignore_index=True)\n    return df\n```", "```py\nfrom typing import Union\ndef dummy_args(*args: list[int], option = True) -> Union[None, int]:\n\n     if option:\n\n          print(args)\n\n     else:\n\n          return 10\n```", "```py\ndef dummy_args(*args: list[int], option = True) -> None | int:\n\n     if option:\n\n          print(args)\n\n     else:\n\n          return 10\n```", "```py\ndef count_files_in_dir(project_root_dir, *fpaths: str):\n\n       for path in fpaths:\n\n            rel_path = os.path.join(project_root_dir, path)\n            print(path, \":\", len(os.listdir(rel_path)))\n```", "```py\ndef print_results(**results):\n\n     for key, val in results.items():\n        print(key, val)\n```", "```py\ndict1 = {'a':2 , 'b': 20}\ndict2 = {'c':15 , 'd': 40}\n\nmerged_dict = {**dict1, **dict2}\n\n*************************\n{'a': 2, 'b': 20, 'c': 15, 'd': 40}\n```", "```py\ndef myfunc(a, b, flag, **kwargs):\n\n       if flag:\n           a, b = do_some_computation(a,b)\n\n       actual_function(a,b, **kwargs)\n```", "```py\ndef custom_train_test_split(clf, y, *X, stratify, **split_args):    *print(\"Classifier used: \", classifier)\n    print(\"Keys:\", split_args.keys())\n    print(\"Values: \", split_args.values())\n    print(X)\n    print(y)\n    print(\"Length of passed keyword arguments: \", len(split_args))*\n\n    trainx,testx,*synthetic,trainy,testy = train_test_split(\n                                               *X,\n                                               y,\n                                               stratify=stratify,\n                                               **split_args\n                                               ) *######### OMITTED CODE SNIPPET #############\n    # Train classifier on train and synthetic ims\n    # Calculate accuracy on testx, testy\n    ############################################*\n\n    *print(\"trainx: \", trainx, \"trainy: \",trainy, '\\n',  \"testx: \", \n    testx, \"testy:\", testy)* *print(\"synthetic: \", *synthetic)*\n```", "```py\ntrain_test_split(*X, y, stratify = stratify, **split_args)\n```", "```py\ntrain_test_split(ims, synthetic_ims, y, stratify = stratify, train_size = 0.6, random_state = 50)\n```", "```py\nimage_data_dir: path/to/img/dir *# the following paths are relative to images_data_dir*\n\nfnames:\n\n      fnames_fname: fnames.txt\n\n      fnames_label: labels.txt\n\n      fnames_attr: attr.txt\n\nsynthetic:\n\n       edit_method: interface_edits\n\n       expression: smile.pkl\n\n       pose: pose.pkl\n```", "```py\n# open the yml file\n\nwith open(CONFIG_FPATH) as f:\n     dictionary = yaml.safe_load(f)\n\n# print elements in dictionary\n\nfor key, value in dictionary.items():\n     print(key + \" : \" + str(value))\n     print()\n```"]