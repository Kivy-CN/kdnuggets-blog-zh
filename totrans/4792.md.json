["```py\n\nimport warnings\nimport itertools\nimport numpy as np\nimport matplotlib.pyplot as plt\nwarnings.filterwarnings(\"ignore\")\nplt.style.use('fivethirtyeight')\nimport pandas as pd\nimport statsmodels.api as sm\nimport matplotlib\n\nmatplotlib.rcParams['axes.labelsize'] = 14\nmatplotlib.rcParams['xtick.labelsize'] = 12\nmatplotlib.rcParams['ytick.labelsize'] = 12\nmatplotlib.rcParams['text.color'] = 'k'\n\n```", "```py\ndf = pd.read_excel(\"Superstore.xls\")\nfurniture = df.loc[df['Category'] == 'Furniture']\n```", "```py\nfurniture['Order Date'].min(), furniture['Order Date'].max()\n```", "```py\ncols = ['Row ID', 'Order ID', 'Ship Date', 'Ship Mode', 'Customer ID', 'Customer Name', 'Segment', 'Country', 'City', 'State', 'Postal Code', 'Region', 'Product ID', 'Category', 'Sub-Category', 'Product Name', 'Quantity', 'Discount', 'Profit']\nfurniture.drop(cols, axis=1, inplace=True)\nfurniture = furniture.sort_values('Order Date')\n\nfurniture.isnull().sum()\n```", "```py\nfurniture = furniture.groupby('Order Date')['Sales'].sum().reset_index()\n```", "```py\nfurniture = furniture.set_index('Order Date')\nfurniture.index\n```", "```py\ny = furniture['Sales'].resample('MS').mean()\n```", "```py\ny['2017':]\n```", "```py\ny.plot(figsize=(15, 6))\nplt.show()\n```", "```py\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 18, 8\n\ndecomposition = sm.tsa.seasonal_decompose(y, model='additive')\nfig = decomposition.plot()\nplt.show()\n```", "```py\np = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]\n\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))\n```", "```py\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(y,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n\nresults = mod.fit()\n\nprint('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))\n        except:\n            continue\n```", "```py\nmod = sm.tsa.statespace.SARIMAX(y,\n                                order=(1, 1, 1),\n                                seasonal_order=(1, 1, 0, 12),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\n\nresults = mod.fit()\n\nprint(results.summary().tables[1])\n```", "```py\nresults.plot_diagnostics(figsize=(16, 8))\nplt.show()\n```", "```py\npred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)\npred_ci = pred.conf_int()\n\nax = y['2014':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\n\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\n\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\n\nplt.show()\n```", "```py\ny_forecasted = pred.predicted_mean\ny_truth = y['2017-01-01':]\n\nmse = ((y_forecasted - y_truth) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))\n```", "```py\nprint('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))\n```", "```py\npred_uc = results.get_forecast(steps=100)\npred_ci = pred_uc.conf_int()\n\nax = y.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\n\nplt.legend()\nplt.show()\n```", "```py\nfurniture = df.loc[df['Category'] == 'Furniture']\noffice = df.loc[df['Category'] == 'Office Supplies']\nfurniture.shape, office.shape\n```", "```py\ncols = ['Row ID', 'Order ID', 'Ship Date', 'Ship Mode', 'Customer ID', 'Customer Name', 'Segment', 'Country', 'City', 'State', 'Postal Code', 'Region', 'Product ID', 'Category', 'Sub-Category', 'Product Name', 'Quantity', 'Discount', 'Profit']\nfurniture.drop(cols, axis=1, inplace=True)\noffice.drop(cols, axis=1, inplace=True)\n\nfurniture = furniture.sort_values('Order Date')\noffice = office.sort_values('Order Date')\n\nfurniture = furniture.groupby('Order Date')['Sales'].sum().reset_index()\noffice = office.groupby('Order Date')['Sales'].sum().reset_index()\n\nfurniture = furniture.set_index('Order Date')\noffice = office.set_index('Order Date')\n\ny_furniture = furniture['Sales'].resample('MS').mean()\ny_office = office['Sales'].resample('MS').mean()\n\nfurniture = pd.DataFrame({'Order Date':y_furniture.index, 'Sales':y_furniture.values})\noffice = pd.DataFrame({'Order Date': y_office.index, 'Sales': y_office.values})\n\nstore = furniture.merge(office, how='inner', on='Order Date')\nstore.rename(columns={'Sales_x': 'furniture_sales', 'Sales_y': 'office_sales'}, inplace=True)\nstore.head()\n```", "```py\nplt.figure(figsize=(20, 8))\nplt.plot(store['Order Date'], store['furniture_sales'], 'b-', label = 'furniture')\nplt.plot(store['Order Date'], store['office_sales'], 'r-', label = 'office supplies')\nplt.xlabel('Date'); plt.ylabel('Sales'); plt.title('Sales of Furniture and Office Supplies')\nplt.legend();\n```", "```py\nfirst_date = store.ix[np.min(list(np.where(store['office_sales'] > store['furniture_sales'])[0])), 'Order Date']\n\nprint(\"Office supplies first time produced higher sales than furniture is {}.\".format(first_date.date()))\n```", "```py\nfrom fbprophet import Prophet\n\nfurniture = furniture.rename(columns={'Order Date': 'ds', 'Sales': 'y'})\nfurniture_model = Prophet(interval_width=0.95)\nfurniture_model.fit(furniture)\n\noffice = office.rename(columns={'Order Date': 'ds', 'Sales': 'y'})\noffice_model = Prophet(interval_width=0.95)\noffice_model.fit(office)\n\nfurniture_forecast = furniture_model.make_future_dataframe(periods=36, freq='MS')\nfurniture_forecast = furniture_model.predict(furniture_forecast)\n\noffice_forecast = office_model.make_future_dataframe(periods=36, freq='MS')\noffice_forecast = office_model.predict(office_forecast)\n\nplt.figure(figsize=(18, 6))\nfurniture_model.plot(furniture_forecast, xlabel = 'Date', ylabel = 'Sales')\nplt.title('Furniture Sales');\n```", "```py\nplt.figure(figsize=(18, 6))\noffice_model.plot(office_forecast, xlabel = 'Date', ylabel = 'Sales')\nplt.title('Office Supplies Sales');\n```", "```py\nfurniture_names = ['furniture_%s' % column for column in furniture_forecast.columns]\noffice_names = ['office_%s' % column for column in office_forecast.columns]\n\nmerge_furniture_forecast = furniture_forecast.copy()\nmerge_office_forecast = office_forecast.copy()\n\nmerge_furniture_forecast.columns = furniture_names\nmerge_office_forecast.columns = office_names\n\nforecast = pd.merge(merge_furniture_forecast, merge_office_forecast, how = 'inner', left_on = 'furniture_ds', right_on = 'office_ds')\n\nforecast = forecast.rename(columns={'furniture_ds': 'Date'}).drop('office_ds', axis=1)\nforecast.head()\n```", "```py\nplt.figure(figsize=(10, 7))\nplt.plot(forecast['Date'], forecast['furniture_trend'], 'b-')\nplt.plot(forecast['Date'], forecast['office_trend'], 'r-')\nplt.legend(); plt.xlabel('Date'); plt.ylabel('Sales')\nplt.title('Furniture vs. Office Supplies Sales Trend');\n```", "```py\nplt.figure(figsize=(10, 7))\nplt.plot(forecast['Date'], forecast['furniture_yhat'], 'b-')\nplt.plot(forecast['Date'], forecast['office_yhat'], 'r-')\nplt.legend(); plt.xlabel('Date'); plt.ylabel('Sales')\nplt.title('Furniture vs. Office Supplies Estimate');\n```", "```py\nfurniture_model.plot_components(furniture_forecast);\n```", "```py\noffice_model.plot_components(office_forecast);\n```"]