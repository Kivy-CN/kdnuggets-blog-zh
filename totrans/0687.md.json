["```py\n---------------------------------------------------------------------------\n#importing some useful packages\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport numpy as np\nimport cv2\nimport math\nimport sys\n%matplotlib inline\n\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\ndef grayscale(img):\n    \"\"\"Applies the Grayscale transform\n    This will return an image with only one color channel\n    but NOTE: to see the returned image as grayscale\n    you should call plt.imshow(gray, cmap='gray')\"\"\"\n    return cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\nimage = mpimg.imread('test_images/solidYellowCurve2.jpg')\n# grayscale the image\ngrayscaled = grayscale(image)\nplt.imshow(grayscaled, cmap='gray')\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\ndef gaussian_blur(img, kernel_size):\n    \"\"\"Applies a Gaussian Noise kernel\"\"\"\n    return cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)\n\n# apply gaussian blur\nkernelSize = 5\ngaussianBlur = gaussian_blur(grayscaled, kernelSize)\n\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\ndef canny(img, low_threshold, high_threshold):\n    \"\"\"Applies the Canny transform\"\"\"\n    return cv2.Canny(img, low_threshold, high_threshold)\n\n# canny\nminThreshold = 100\nmaxThreshold = 200\nedgeDetectedImage = canny(gaussianBlur, minThreshold, maxThreshold)\n\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\ndef region_of_interest(img, vertices):\n    \"\"\"\n    Applies an image mask.\n\n    Only keeps the region of the image defined by the polygon\n    formed from `vertices`. The rest of the image is set to black.\n    \"\"\"\n    #defining a blank mask to start with\n    mask = np.zeros_like(img)   \n\n    #defining a 3 channel or 1 channel color to fill the mask with \n    #depending on the input image\n    if len(img.shape) > 2:\n        channel_count = img.shape[2]  # i.e. 3 or 4 depending on your image\n        ignore_mask_color = (255,) * channel_count\n    else:\n        ignore_mask_color = 255\n\n    #filling pixels inside the polygon defined by \"vertices\" with the fill color    \n    cv2.fillPoly(mask, vertices, ignore_mask_color)\n\n    #returning the image only where mask pixels are nonzero\n    masked_image = cv2.bitwise_and(img, mask)\n    return masked_image\n\n#apply mask\nlowerLeftPoint = [130, 540]\nupperLeftPoint = [410, 350]\nupperRightPoint = [570, 350]\nlowerRightPoint = [915, 540]\n\npts = np.array([[lowerLeftPoint, upperLeftPoint, upperRightPoint, \nlowerRightPoint]], dtype=np.int32)\nmasked_image = region_of_interest(edgeDetectedImage, pts)\n\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\n---------------------------------------------------------------------------\n```", "```py\ndef hough_lines(img, rho, theta, threshold, min_line_len, max_line_gap):\n    \"\"\"\n    `img` should be the output of a Canny transform.\n\n    Returns an image with hough lines drawn.\n    \"\"\"\n    lines = cv2.HoughLinesP(img, rho, theta, threshold, np.array([]), \n              minLineLength=min_line_len, maxLineGap=max_line_gap)\n    line_img = np.zeros((*img.shape, 3), dtype=np.uint8)\n\n    draw_lines(line_img, lines)\n    return line_img\n\ndef draw_lines(img, lines, color=[255, 0, 0], thickness=2):\n    \"\"\"\n    This function draws `lines` with `color` and `thickness`.    \n    \"\"\"\n    for line in lines:\n        for x1,y1,x2,y2 in line:\n            cv2.line(img, (x1, y1), (x2, y2), color, thickness)\n\n#hough lines\nrho = 1\ntheta = np.pi/180\nthreshold = 30\nmin_line_len = 20 \nmax_line_gap = 20\n\nhouged = hough_lines(masked_image, rho, theta, \n                  threshold, min_line_len, max_line_gap)\n\n```", "```py\n---------------------------------------------------------------------------\n```"]