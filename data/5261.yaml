- en: 'How To Write Better SQL Queries: The Definitive Guide – Part 2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何编写更好的 SQL 查询：权威指南 – 第二部分
- en: 原文：[https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html](https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html](https://www.kdnuggets.com/2017/08/write-better-sql-queries-definitive-guide-part-2.html)
- en: '**By Karlijn Willems, Data Science Journalist & [DataCamp](https://www.datacamp.com/)
    Contributor**.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**作者：卡尔琳·威廉姆斯，数据科学记者及[DataCamp](https://www.datacamp.com/)贡献者**。'
- en: '**Editor''s note:** This post is a continuation of part one, [which was posted
    yesterday and can be found here](/2017/08/write-better-sql-queries-definitive-guide-part-1.html).
    While the content herein can be considered independent of the first, reading part
    one before moving one would most certainly be of benefit.'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**编辑注释：** 本文是第一部分的续篇，[第一部分已于昨日发布，可在此处找到](/2017/08/write-better-sql-queries-definitive-guide-part-1.html)。虽然本文内容可以被视为独立于第一部分，但在继续之前阅读第一部分将极有帮助。'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_BQ
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三名课程推荐
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业轨道'
- en: ''
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: ''
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在组织的 IT'
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '* * *'
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The introductory paragraph of the first post is shown below in order to set
    the general mood of the tutorial.
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 首篇文章的引言段落如下，以设置教程的总体氛围。
- en: Structured Query Language (SQL) is an indispensable skill in the data science
    industry and generally speaking, learning this skill is fairly easy. However,
    most forget that SQL isn’t just about writing queries, which is just the first
    step down the road. Ensuring that queries are performant or that they fit the
    context that you’re working in is a whole other thing.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 结构化查询语言（SQL）是数据科学行业中必不可少的技能，通常来说，学习这项技能相对容易。然而，大多数人忘记了SQL不仅仅是编写查询，这只是走向成功的第一步。确保查询性能良好或符合你所处的上下文是另一回事。
- en: Set-based versus Procedural Approaches to Querying
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于集合的方法与过程方法的查询
- en: What was implicit in the above anti-patterns is the fact that they actually
    boil down to the difference in set-based versus procedural approach to building
    up your queries.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上述反模式隐含的事实是，它们实际上归结为基于集合的方法与过程方法在构建查询时的区别。
- en: 'The procedural approach of querying is an approach that is much like programming:
    you tell the system what to do and how to do it.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 过程方法的查询类似于编程：你告诉系统要做什么以及如何做。
- en: An example of this is the redudant conditions in joins or cases where you abuse
    the `HAVING` clause, like in the above examples, in which you query the database
    by performing a function and then calling another function, or you use logic that
    contains loops, conditions, User Defined Functions (UDFs), cursors, … to get the
    final result. In this approach, you’ll often find yourself asking a subset of
    the data, then requesting another subset from the data and so on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这方面的一个例子是连接中的冗余条件或你滥用`HAVING`子句的情况，就像上述示例中那样，你通过执行一个函数然后调用另一个函数来查询数据库，或者你使用包含循环、条件、自定义函数（UDF）、游标等逻辑来获得最终结果。在这种方法中，你通常会发现自己先对数据的一个子集进行查询，然后再从数据中请求另一个子集，以此类推。
- en: It’s no surprise that this approach is often called “step-by-step” or “row-by-row”
    querying.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法常常被称为“逐步”或“逐行”查询，这并不奇怪。
- en: 'The other approach is the set-based approach, where you just specify what to
    do. Your role consists of specifying the conditions or requirements for the result
    set that you want to obtain from the query. How your data is retrieved, you leave
    to the internal mechanisms that determine the implementation of the query: you
    let the database engine determine the best algorithms or processing logic to execute
    your query.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是基于集合的方法，你只需指定要做的事情。你的角色是指定你希望从查询中获得的结果集的条件或要求。数据如何检索，则留给内部机制来确定查询的实现方式：你让数据库引擎确定执行查询的最佳算法或处理逻辑。
- en: Since SQL is set-based, it’s hardly a surprise that this approach will be quite
    more effective than the procedural one and it also explains why, in some cases,
    SQL can work faster than code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SQL是基于集合的，这种方法显然比过程式方法更有效，这也解释了为什么在某些情况下，SQL可能比代码运行得更快。
- en: '**Tip** the set-based approach of querying is also the one that most top employers
    in the data science industry will ask of you to master! You’ll often need to switch
    between these two types of approaches.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示** 集合方法的查询也是数据科学行业中大多数顶级雇主要求你掌握的方法！你经常需要在这两种方法之间切换。'
- en: '**Note** that if you ever find yourself with a procedural query, you should
    consider rewriting or refactoring it.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意** 如果你发现自己面对一个过程式查询，你应该考虑重写或重构它。'
- en: From Query to Execution Plans
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从查询到执行计划
- en: Knowing that anti-patterns aren’t static and evolve as you grow as an SQL developer
    and the fact that there’s a lot to consider when you’re thinking about alternatives
    also means that avoiding query anti-patterns and rewriting queries can be quite
    a difficult task. Any help can come in handy and that’s why a more structured
    approach to optimize your query with some tools might be the way to go.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 了解反模式并非静态且会随着你作为SQL开发人员的成长而演变，并且考虑替代方案时有很多因素，也意味着避免查询反模式和重写查询可能是一个相当困难的任务。任何帮助都可能派上用场，这就是为什么使用一些工具来优化查询的结构化方法可能是一个好选择。
- en: '**Note** also that some of the anti-patterns mentioned in the last section
    had roots in performance concerns, such as the `AND`, `OR` and `NOT` operators
    and their lack of index usage. Thinking about performance doesn’t only require
    a more structured approach but also a more in-depth one.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意** 此外，上一节提到的一些反模式根源于性能问题，例如`AND`、`OR`和`NOT`运算符及其缺乏索引的使用。考虑性能不仅需要更结构化的方法，还需要更深入的方法。'
- en: Be however it may, this structured and in-depth approach will mostly be based
    on the query plan, which, as you remember, is the result of the query that’s first
    parsed into a “parse tree” and defines exactly what algorithm is used for each
    operation and how the execution of operations is coordinated.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种结构化且深入的方法大多基于查询计划，正如你记得的，它是将查询首先解析为“解析树”的结果，并准确地定义了每个操作使用的算法以及操作执行的协调方式。
- en: Query Optimization
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询优化
- en: As you have read in the introduction, it could be that you need to examine and
    tune the plans that are produced by the optimizer manually. In such cases, you
    will need to analyze your query again by looking at the query plan.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如你在介绍中所读到的，可能需要手动检查和调整优化器生成的计划。在这种情况下，你需要通过查看查询计划再次分析你的查询。
- en: 'To get a hold of this plan, you will need to use the tools that your database
    management system provides to you. Some tools that you might have at your disposal
    are the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取这个计划，你需要使用你的数据库管理系统提供的工具。你可能拥有的工具包括以下几种：
- en: 'Some packages feature tools which will generate a graphical representation
    of a query plan. Take a look at this example:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些软件包提供了生成查询计划图形表示的工具。看看这个例子：
- en: '![](../Images/a67bb6d903a9f081ed2d79f225552560.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a67bb6d903a9f081ed2d79f225552560.png)'
- en: Other tools will be able to provide you with a textual description of the query
    plan. One example is the `EXPLAIN PLAN` statement in Oracle, but the name of the
    instruction varies according to the RDBMS that you’re working with. Elsewhere,
    you might find `EXPLAIN` (MySQL, PostgreSQL) or `EXPLAIN QUERY PLAN` (SQLite).
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他工具将能为你提供查询计划的文本描述。例如，Oracle中的`EXPLAIN PLAN`语句，但根据你使用的RDBMS，指令的名称会有所不同。在其他地方，你可能会找到`EXPLAIN`（MySQL、PostgreSQL）或`EXPLAIN
    QUERY PLAN`（SQLite）。
- en: '**Note** that if you’re working with PostgreSQL, you make the difference between `EXPLAIN`,
    where you just get a description that states the idea of how the plannner intends
    to execute the query without running it, while `EXPLAIN ANALYZE` actually executes
    the query and returns to you an analysis of the expected versus actual query plans.
    Generally speaking, an actual execution plan is one where you actually run the
    query, whereas an estimated execution plan works out what it would do without
    executing the query. Although logically equivalent, an actual execution plan is
    much more useful as it contains additional details and statistics about what actually
    happened when executing the query.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**，如果你在使用PostgreSQL，`EXPLAIN`和`EXPLAIN ANALYZE`的区别在于，`EXPLAIN`只会提供一个描述，说明规划者打算如何执行查询，而不实际运行查询，而`EXPLAIN
    ANALYZE`则会实际执行查询并返回期望的与实际的查询计划的分析。一般来说，实际执行计划是你实际运行查询的结果，而估算执行计划是预测它会做什么，而不执行查询。虽然在逻辑上等效，但实际执行计划要有用得多，因为它包含了关于实际执行查询时发生的额外细节和统计信息。'
- en: 'In the remainder of this section, you’ll learn more about `EXPLAIN` and `ANALYZE` and
    how you can use these two to learn more about your query plan and the possible
    performance of your query. To do this, you’ll get started with some examples in
    which you’ll work with two tables: `one_million` and `half_million`.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的剩余部分，你将学习更多关于`EXPLAIN`和`ANALYZE`的内容，以及如何使用这两个工具来深入了解查询计划和查询的可能性能。为此，你将从一些示例开始，在这些示例中，你将处理两个表：`one_million`和`half_million`。
- en: 'You can retrieve the current information of the table `one_million` with the
    help of `EXPLAIN`; Make sure to put it right on top of your query and when it’s
    run, it’ll give you back the query plan:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以借助`EXPLAIN`检索表`one_million`的当前信息；确保将其放在查询的最前面，当运行时，它会给你返回查询计划：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this case, you see that the cost of the query is `0.00..18584.82` and that
    the number of rows is `1025082`. The width of number of columns is then `36`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你会看到查询的成本是`0.00..18584.82`，行数是`1025082`。列数的宽度是`36`。
- en: Also, you can then renew your statistical information with the help of `ANALYZE`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以借助`ANALYZE`来更新统计信息。
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Besides `EXPLAIN` and `ANALYZE`, you can also retrieve the actual execution
    time with the help of `EXPLAIN ANALYZE`:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`EXPLAIN`和`ANALYZE`，你还可以通过`EXPLAIN ANALYZE`来获取实际执行时间：
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The downside of using `EXPLAIN ANALYZE` here is obviously that the query is
    actually executed, so be careful with that!
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`EXPLAIN ANALYZE`的缺点显而易见，即查询实际上会被执行，所以要小心！
- en: 'Up until now, all the algorithms you have seen is the `Seq Scan` (Sequential
    Scan) or a Full Table Scan: this is a scan made on a database where each row of
    the table under scan is read in a sequential (serial) order and the columns that
    are found are checked for whether they fulfill a condition or not. In terms of
    performance, the Sequential Scan is definitely not the best execution plan out
    there because you’re still doing a *full table* scan. However, it’s not too bad
    when the table doesn’t fit into memory: sequential reads go quite fast even with
    slow disks.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你看到的所有算法都是`Seq Scan`（顺序扫描）或全表扫描：这是在数据库上进行的扫描，其中扫描的每一行以顺序（串行）方式读取，并检查找到的列是否满足条件。从性能的角度来看，顺序扫描绝对不是最佳执行计划，因为你仍然在进行*全表*扫描。然而，当表不适合内存时，它也不是太糟：即使在慢速磁盘上，顺序读取也很快。
- en: You’ll see more on this later on when you’re talking about the index scan.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你谈论索引扫描时，你会看到更多内容。
- en: 'However, there are some other algorithms out there. Take, for an example, this
    query plan for a join:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，还有其他算法。举个例子，这里是一个连接的查询计划：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You see that the query optimizer chose for a `Hash Join` here! Remember this
    operation, as you’ll need this to estimate the time complexity of your query.
    For now, note that there is no index on `half_million.counter`, which you could
    add in the next example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到查询优化器选择了`Hash Join`！记住这个操作，因为你需要它来估算查询的时间复杂度。目前，注意`half_million.counter`上没有索引，你可以在下一个示例中添加：
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You see that, by creating the index, the query optimizer has now decided to
    go for a `Merge join` where `Index Scan`s are happening.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，通过创建索引，查询优化器现在决定使用`Merge join`，其中发生了`Index Scan`。
- en: '**Note** the difference between the index scan and the full table scan or sequential
    scan: the former, which is also called “table scan”, scans the data or index pages
    to find the appropriate records, while the latter scans each row of the table.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意** 索引扫描和完全表扫描或顺序扫描之间的区别：前者，也称为“表扫描”，扫描数据或索引页面以查找适当的记录，而后者扫描表的每一行。'
- en: You see that the total runtime has been reduced and the performance should be
    better, but there are two index scans, which makes that the memory will become
    more important here, especially if the table doesn’t fit into memory. In such
    cases, you first have to do a full index scan, which are fast sequential reads
    and pose no problem, but then you have a lot of random reads to fetch rows by
    index value. It’s those random reads that are generally orders of magnitude slower
    than sequential reads. In these cases, the full table scan is indeed faster than
    the full index scan.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到总运行时间减少了，性能应该有所提升，但仍有两个索引扫描，这使得内存变得更为重要，特别是当表不能完全加载到内存时。在这种情况下，你首先需要进行完全索引扫描，这些是快速的顺序读取，不成问题，但之后你会有大量随机读取来根据索引值获取行。正是这些随机读取通常比顺序读取慢几个数量级。在这种情况下，完全表扫描确实比完全索引扫描更快。
- en: '**Tip**: if you want to get to know more about `EXPLAIN` or see the examples
    in more detail, consider reading the book [“Understanding Explain”](http://www.dalibo.org/_media/understanding_explain.pdf),
    written by Guillaume Lelarge.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**：如果你想了解更多关于`EXPLAIN`的信息或查看更详细的示例，可以考虑阅读由 Guillaume Lelarge 编写的书籍[《Understanding
    Explain》](http://www.dalibo.org/_media/understanding_explain.pdf)。'
- en: More On This Topic
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 相关话题
- en: '[The Definitive Guide To Switching Your Career Into Data Science](https://www.kdnuggets.com/2022/05/definitive-guide-switching-career-data-science.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[转行数据科学的终极指南](https://www.kdnuggets.com/2022/05/definitive-guide-switching-career-data-science.html)'
- en: '[Python Function Arguments: A Definitive Guide](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 函数参数：终极指南](https://www.kdnuggets.com/2023/02/python-function-arguments-definitive-guide.html)'
- en: '[The Definitive Guide to Solving the Phantom Read in MySQL](https://www.kdnuggets.com/2022/06/definitive-guide-solving-phantom-read-mysql.html)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[解决 MySQL 幽灵读取的终极指南](https://www.kdnuggets.com/2022/06/definitive-guide-solving-phantom-read-mysql.html)'
- en: '[A Step by Step Guide to Reading and Understanding SQL Queries](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[逐步指南：阅读和理解 SQL 查询](https://www.kdnuggets.com/a-step-by-step-guide-to-reading-and-understanding-sql-queries)'
- en: '[How to Write SQL in Native Python](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在原生 Python 中编写 SQL](https://www.kdnuggets.com/2022/02/easy-sql-native-python.html)'
- en: '[KDnuggets News, December 7: Top 10 Data Science Myths Busted • 4…](https://www.kdnuggets.com/2022/n47.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，12月7日：破解数据科学十大误区 • 4…](https://www.kdnuggets.com/2022/n47.html)'
