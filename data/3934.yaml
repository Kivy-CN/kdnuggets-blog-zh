- en: Python Regular Expressions Cheat Sheet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 正则表达式备忘单
- en: 原文：[https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html](https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html](https://www.kdnuggets.com/2018/04/python-regular-expressions-cheat-sheet.html)
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [评论](#comments)'
- en: '**By [Alex Yang](https://twitter.com/alexalexyang), Dataquest**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Alex Yang](https://twitter.com/alexalexyang)，Dataquest**'
- en: 'This cheat sheet is based on Python 3’s [documentation on regular expressions](https://docs.python.org/3/library/re.html).
    If you''re interested in learning Python, we have a free [Python Programming:
    Beginner](https://www.dataquest.io/course/python-programming-beginner) course
    for you to try out.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本备忘单基于 Python 3 的 [正则表达式文档](https://docs.python.org/3/library/re.html)。如果你有兴趣学习
    Python，我们有一个免费的 [Python 编程：初学者](https://www.dataquest.io/course/python-programming-beginner)
    课程供你尝试。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你组织的 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '[![python-regular-expressions-cheatsheet_pic](../Images/bf77777d0f58aa462437128796d1ca94.png)](https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[![python-regular-expressions-cheatsheet_pic](../Images/bf77777d0f58aa462437128796d1ca94.png)](https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf)'
- en: '[Download the cheat sheet here](https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[在这里下载备忘单](https://www.dataquest.io/blog/large_files/python-regular-expressions-cheat-sheet.pdf)'
- en: Special Characters
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特殊字符
- en: '`^` | Matches the expression to its right at the start of a string. It matches
    every such instance before each `\n` in the string.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`^` | 匹配字符串开始处的表达式。它匹配每个字符串中每个 `\n` 之前的实例。'
- en: '`$` | Matches the expression to its left at the end of a string. It matches
    every such instance before each `\n` in the string.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`$` | 匹配字符串结尾处的表达式。它匹配每个字符串中每个 `\n` 之前的实例。'
- en: '`.` | Matches any character except line terminators like `\n`.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`.` | 匹配除了换行符（如 `\n`）以外的任何字符。'
- en: '`\` | Escapes special characters or denotes character classes.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`\` | 转义特殊字符或表示字符类。'
- en: '`A|B` | Matches expression `A` or `B`. If `A` is matched first, `B` is left
    untried.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`A|B` | 匹配表达式 `A` 或 `B`。如果 `A` 首先匹配，则 `B` 将不被尝试。'
- en: '`+` | Greedily matches the expression to its left 1 or more times.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` | 贪婪地匹配左侧表达式 1 次或多次。'
- en: '`*` | Greedily matches the expression to its left 0 or more times.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` | 贪婪地匹配左侧表达式 0 次或多次。'
- en: '`?` | Greedily matches the expression to its left 0 or 1 times. But if `?` is
    added to qualifiers (`+`, `*`, and `?` itself) it will perform matches in a non-greedy
    manner.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`?` | 贪婪地匹配左侧表达式 0 次或 1 次。但如果 `?` 被添加到限定符（`+`、`*` 和 `?` 本身），则会以非贪婪方式进行匹配。'
- en: '`{m}` | Matches the expression to its left `m` times, and not less.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`{m}` | 匹配左侧表达式 `m` 次，且不少于。'
- en: '`{m,n}` | Matches the expression to its left `m` to `n` times, and not less.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`{m,n}` | 匹配左侧表达式 `m` 到 `n` 次，且不少于。'
- en: '`{m,n}?` | Matches the expression to its left `m` times, and ignores `n`. See `?` above.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`{m,n}?` | 匹配左侧表达式 `m` 次，并忽略 `n`。见上文 `?`。'
- en: Character Classes (a.k.a. Special Sequences)
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符类（也称为特殊序列）
- en: '`\w` | Matches alphanumeric characters, which means `a-z`, `A-Z`, and `0-9`.
    It also matches the underscore, `_`.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`\w` | 匹配字母数字字符，即 `a-z`、`A-Z` 和 `0-9`。它也匹配下划线 `_`。'
- en: '`\d` | Matches digits, which means `0-9`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`\d` | 匹配数字，即 `0-9`。'
- en: '`\D` | Matches any non-digits.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`\D` | 匹配任何非数字字符。'
- en: '`\s` | Matches whitespace characters, which include the `\t`, `\n`, `\r`, and
    space characters.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`\s` | 匹配空白字符，包括 `\t`、`\n`、`\r` 和空格字符。'
- en: '`\S` | Matches non-whitespace characters.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`\S` | 匹配非空白字符。'
- en: '`\b` | Matches the boundary (or empty string) at the start and end of a word,
    that is, between `\w` and `\W`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`\b` | 匹配单词的边界（或空字符串），即 `\w` 和 `\W` 之间。'
- en: '`\B` | Matches where `\b` does not, that is, the boundary of `\w` characters.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`\B` | 匹配 `\b` 不匹配的地方，即 `\w` 字符的边界。'
- en: '`\A` | Matches the expression to its right at the absolute start of a string
    whether in single or multi-line mode.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`\A` | 匹配在单行或多行模式下的字符串绝对开头处的表达式。'
- en: '`\Z` | Matches the expression to its left at the absolute end of a string whether
    in single or multi-line mode.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`\Z` | 匹配在单行或多行模式下的字符串绝对结尾处的表达式。'
- en: Sets
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集合
- en: '`[ ]` | Contains a set of characters to match.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`[ ]` | 包含一组要匹配的字符。'
- en: '`[amk]` | Matches either `a`, `m`, or `k`. It does not match `amk`.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`[amk]` | 匹配 `a`、`m` 或 `k`。它不匹配 `amk`。'
- en: '`[a-z]` | Matches any alphabet from `a` to `z`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`[a-z]` | 匹配从 `a` 到 `z` 的任何字母。'
- en: '`[a\-z]` | Matches `a`, `-`, or `z`. It matches `-` because `\` escapes it.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`[a\-z]` | 匹配 `a`、`-` 或 `z`。它匹配 `-` 因为 `\` 使其转义。'
- en: '`[a-]` | Matches `a` or `-`, because `-` is not being used to indicate a series
    of characters.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`[a-]` | 匹配 `a` 或 `-`，因为 `-` 未被用来表示字符序列。'
- en: '`[-a]` | As above, matches `a` or `-`.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`[-a]` | 同上，匹配 `a` 或 `-`。'
- en: '`[a-z0-9]` | Matches characters from `a` to `z` and also from `0` to `9`.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`[a-z0-9]` | 匹配从 `a` 到 `z` 的字符以及从 `0` 到 `9` 的字符。'
- en: '`[(+*)]` | Special characters become literal inside a set, so this matches `(`, `+`, `*`,
    and `)`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`[(+*)]` | 在集合内，特殊字符变为字面量，因此匹配 `(`、`+`、`*` 和 `)`。'
- en: '`[^ab5]` | Adding `^` excludes any character in the set. Here, it matches characters
    that are not `a`, `b`, or `5`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`[^ab5]` | 添加 `^` 排除集合中的任何字符。这里，它匹配不是 `a`、`b` 或 `5` 的字符。'
- en: Groups
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 组
- en: '`( )` | Matches the expression inside the parentheses and groups it.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`( )` | 匹配圆括号内的表达式并将其分组。'
- en: '`(? )` | Inside parentheses like this, `?` acts as an extension notation. Its
    meaning depends on the character immediately to its right.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`(? )` | 在这样的圆括号内，`?` 作为扩展符号。其含义取决于其右边的字符。'
- en: '`(?PAB)` | Matches the expression `AB`, and it can be accessed with the group
    name.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?PAB)` | 匹配表达式 `AB`，并且可以通过组名访问它。'
- en: '`(?aiLmsux)` | Here, `a`, `i`, `L`, `m`, `s`, `u`, and `x` are flags:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?aiLmsux)` | 在这里，`a`、`i`、`L`、`m`、`s`、`u` 和 `x` 是标志：'
- en: '`a` — Matches ASCII only'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a` — 仅匹配 ASCII'
- en: '`i` — Ignore case'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`i` — 忽略大小写'
- en: '`L` — Locale dependent'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`L` — 区域依赖'
- en: '`m` — Multi-line'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m` — 多行模式'
- en: '`s` — Matches all'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s` — 匹配所有'
- en: '`u` — Matches unicode'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u` — 匹配 Unicode'
- en: '`x` — Verbose'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x` — 详细模式'
- en: '`(?:A)` | Matches the expression as represented by `A`, but unlike `(?PAB)`,
    it cannot be retrieved afterwards.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?:A)` | 匹配由 `A` 表示的表达式，但与 `(?PAB)` 不同，它无法在之后被检索。'
- en: '`(?#...)` | A comment. Contents are for us to read, not for matching.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?#...)` | 注释。内容供我们阅读，不用于匹配。'
- en: '`A(?=B)` | Lookahead assertion. This matches the expression `A` only if it
    is followed by `B`.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`A(?=B)` | 向前断言。这只在 `A` 后面跟着 `B` 时匹配表达式 `A`。'
- en: '`A(?!B)` | Negative lookahead assertion. This matches the expression `A` only
    if it is not followed by `B`.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`A(?!B)` | 负向向前断言。这只在 `A` 后面不跟 `B` 时匹配表达式 `A`。'
- en: '`(?<=B)A` | Positive lookbehind assertion. This matches the expression `A` only
    if `B` is immediately to its left. This can only matched fixed length expressions.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?<=B)A` | 正向回溯断言。这只在 `B` 紧挨着 `A` 的左边时匹配表达式 `A`。这只能匹配固定长度的表达式。'
- en: '`(?<!B)A` | Negative lookbehind assertion. This matches the expression `A` only
    if `B` is not immediately to its left. This can only matched fixed length expressions.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?<!B)A` | 负向回溯断言。这只在 `B` 不紧挨着 `A` 的左边时匹配表达式 `A`。这只能匹配固定长度的表达式。'
- en: '`(?P=name)` | Matches the expression matched by an earlier group named “name”.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`(?P=name)` | 匹配由先前名为 “name” 的组匹配的表达式。'
- en: '`(...)\1` | The number `1` corresponds to the first group to be matched. If
    we want to match more instances of the same expresion, simply use its number instead
    of writing out the whole expression again. We can use from `1` up to `99` such
    groups and their corresponding numbers.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`(...)\1` | 数字 `1` 对应第一个要匹配的组。如果我们想匹配更多相同的表达式，只需使用其编号，而不是重新书写整个表达式。我们可以使用从
    `1` 到 `99` 的组及其对应的编号。'
- en: Popular Python re module Functions
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流行的 Python re 模块函数
- en: '`re.findall(A, B)` | Matches all instances of an expression `A` in a string `B` and
    returns them in a list.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.findall(A, B)` | 匹配字符串 `B` 中的所有表达式 `A`，并将它们以列表形式返回。'
- en: '`re.search(A, B)` | Matches the first instance of an expression `A` in a string `B`,
    and returns it as a re match object.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.search(A, B)` | 匹配字符串 `B` 中的第一个表达式 `A`，并将其作为 re 匹配对象返回。'
- en: '`re.split(A, B)` | Split a string B into a list using the delimiter `A`.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.split(A, B)` | 使用分隔符 `A` 将字符串 B 分割成一个列表。'
- en: '`re.sub(A, B, C)` | Replace `A` with `B` in the string `C`.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`re.sub(A, B, C)` | 在字符串`C`中将`A`替换为`B`。'
- en: '**Useful Regular Expressions Sites for Python users**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 用户的有用正则表达式网站**'
- en: '[Python 3 re module documentation](https://docs.python.org/3/library/re.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 3 re 模块文档](https://docs.python.org/3/library/re.html)'
- en: '[Online regex tester and debugger](https://regex101.com/)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在线正则表达式测试和调试器](https://regex101.com/)'
- en: '**Bio: [Alex Yang](https://twitter.com/alexalexyang)** is a writer fascinated
    by the things code can do. He also enjoys citizen science and new media art.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介：[Alex Yang](https://twitter.com/alexalexyang)** 是一位对代码能够实现的功能充满兴趣的作家。他还喜欢公民科学和新媒体艺术。'
- en: '[Original](https://www.dataquest.io/blog/regex-cheatsheet/?utm_source=kdnuggets&utm_medium=blog).
    Reposted with permission.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.dataquest.io/blog/regex-cheatsheet/?utm_source=kdnuggets&utm_medium=blog)。经许可转载。'
- en: '**Related:**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[30 Essential Data Science, Machine Learning & Deep Learning Cheat Sheets](/2017/09/essential-data-science-machine-learning-deep-learning-cheat-sheets.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[30 个必备的数据科学、机器学习和深度学习备忘单](/2017/09/essential-data-science-machine-learning-deep-learning-cheat-sheets.html)'
- en: '[Introduction to Functional Programming in Python](/2018/02/introduction-functional-programming-python.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 函数式编程入门](/2018/02/introduction-functional-programming-python.html)'
- en: '[Text Data Preprocessing: A Walkthrough in Python](/2018/03/text-data-preprocessing-walkthrough-python.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[文本数据预处理：Python 演练](/2018/03/text-data-preprocessing-walkthrough-python.html)'
- en: More On This Topic
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Mastering Regular Expressions with Python](https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 精通正则表达式](https://www.kdnuggets.com/2023/08/mastering-regular-expressions-python.html)'
- en: '[5 Tips for Using Regular Expressions in Data Cleaning](https://www.kdnuggets.com/5-tips-for-using-regular-expressions-in-data-cleaning)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据清洗中使用正则表达式的 5 个技巧](https://www.kdnuggets.com/5-tips-for-using-regular-expressions-in-data-cleaning)'
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成为优秀数据科学家所需的 5 项关键技能](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个初学者数据科学家应该掌握的 6 种预测模型](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2021 年最佳 ETL 工具](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用管道编写干净的 Python 代码](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
