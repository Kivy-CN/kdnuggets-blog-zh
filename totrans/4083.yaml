- en: Getting Started with Python Generators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门 Python 生成器
- en: 原文：[https://www.kdnuggets.com/2023/02/getting-started-python-generators.html](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/02/getting-started-python-generators.html](https://www.kdnuggets.com/2023/02/getting-started-python-generators.html)
- en: '![Getting Started with Python Generators](../Images/becf600d7f768a14d0dbe4156ec7bdeb.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![入门 Python 生成器](../Images/becf600d7f768a14d0dbe4156ec7bdeb.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: Learning how to work with Python generators can help you write more Pythonic
    and efficient code. Using generators can be especially useful when you need to
    work with large sequences.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 学习如何使用 Python 生成器可以帮助你编写更 Pythonic 和高效的代码。当你需要处理大型序列时，使用生成器尤其有用。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT 工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In this tutorial, you’ll learn how to use generators in Python by defining generator
    functions and generator expressions. You’ll then learn how using generators can
    be a memory-efficient choice.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你将学习如何通过定义生成器函数和生成器表达式来使用 Python 生成器。然后你将了解到，使用生成器可以是一个内存高效的选择。
- en: Defining Generator Functions in Python
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 中定义生成器函数
- en: To understand how a generator function is different from a normal Python function,
    let's start with a regular Python function and then rewrite it as a generator
    function.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解生成器函数与普通 Python 函数的不同，让我们从一个常规的 Python 函数开始，然后将其重写为生成器函数。
- en: 'Consider the following function `get_cubes()`. It takes in a number `num` as
    the argument and returns the list of cubes of the numbers 0, 1, 2 up to num -1:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 请考虑以下函数 `get_cubes()`。它接受一个数字 `num` 作为参数，并返回数字 0、1、2 直到 num -1 的立方列表：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The above function works by looping through the list of numbers 0, 1, 2, up
    to num -1 and appending the cube of each number to the `cubes` list. Finally,
    it returns the `cubes` list.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数通过遍历数字 0、1、2，直到 num -1，并将每个数字的立方添加到 `cubes` 列表中。最后，它返回 `cubes` 列表。
- en: You can already tell this is not the recommended Pythonic way to create a new
    list. Instead of looping through using a for loop and using the `append()` method,
    you can use a [**list comprehension**](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)
    expression.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经可以看出，这不是创建新列表的推荐 Pythonic 方式。与其使用 for 循环并使用 `append()` 方法，你可以使用一个 [**列表推导式**](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)
    表达式。
- en: 'Here is the equivalent of the function `get_cubes()` that uses list comprehension
    instead of an explicit for loop and the `append()` method:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用列表推导式而不是显式的 for 循环和 `append()` 方法的 `get_cubes()` 函数的等效形式：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next let’s rewrite this function as a generator function. The following code
    snippet shows how the `get_cubes()` function can be rewritten as a generator function
    `get_cubes_gen()`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们将这个函数重写为生成器函数。下面的代码片段展示了如何将 `get_cubes()` 函数重写为生成器函数 `get_cubes_gen()`：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'From the function definition, you can tell the following differences:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从函数定义中，你可以看出以下区别：
- en: We have the *yield* keyword instead of the return keyword.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 *yield* 关键字，而不是 return 关键字。
- en: We are *not* returning a sequence or populating an iterable such as a Python
    list to get the sequence.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们*不*返回一个序列或填充一个可迭代对象，如 Python 列表，以获取序列。
- en: So how does the generator function work? To understand, let’s call the above-defined
    functions and take a closer look.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 那么生成器函数是如何工作的呢？为了理解，让我们调用上述定义的函数并仔细查看。
- en: Understanding Function Calls
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解函数调用
- en: Let us call the `get_cubes()` and `get_cubes_gen()` functions and see the differences
    in the respective function calls.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们调用 `get_cubes()` 和 `get_cubes_gen()` 函数，看看它们在各自函数调用中的区别。
- en: When we call the `get_cubes()` function  with the number 6 as the argument,
    we get the list of cubes as expected.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们用数字 6 作为参数调用`get_cubes()`函数时，我们得到预期的立方列表。
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now call the generator the function with the same number 6 as the argument and
    see what happens. You can call the generator function `get_cubes_gen()` just the
    way you would call a normal Python function.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用相同的数字 6 作为参数调用生成器函数，看看会发生什么。你可以像调用普通 Python 函数一样调用生成器函数`get_cubes_gen()`。
- en: '[PRE5]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If you print out the value of `cubes_gen()`, you’ll get a generator object as
    opposed to the entire resultant list that contains the cube of each of the numbers.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印出`cubes_gen()`的值，你会得到一个生成器对象，而不是包含每个数字立方的整个结果列表。
- en: '[PRE6]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**So how do you access the elements of the sequence?** To code along, start
    a Python REPL and import the generator function. Here, I have my code in the *gen_example.py*
    file, so I’m importing the `get_cubes_gen()` function from the `get_cubes_gen()`
    module.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**那么你如何访问序列中的元素呢？** 要进行编码，请启动一个 Python REPL 并导入生成器函数。在这里，我将代码放在了*gen_example.py*文件中，因此我从`get_cubes_gen()`模块中导入了`get_cubes_gen()`函数。'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can call `next()` with the generator object as the argument. Doing so returns
    0, the first element in the sequence
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用生成器对象作为参数调用`next()`。这样做会返回 0，即序列中的第一个元素。
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now when you call `next()` again, you’ll get the next element in the sequence,
    which is 1.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当你再次调用`next()`时，你会得到序列中的下一个元素，即 1。
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To access the subsequent elements in the sequence, you can continue to call
    `next()`, as shown:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问序列中的后续元素，你可以继续调用`next()`，如所示：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For `num = 6`, the resultant sequence is the cube of the numbers 0, 1, 2, 3,
    4, and 5\. Now that we’ve reached 125, the cube of 5, what happens when you call
    next again?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`num = 6`，结果序列是数字 0、1、2、3、4 和 5 的立方。现在我们已经到达了 125，5 的立方，当你再次调用 `next()` 时会发生什么？
- en: We see that a **StopIteration** exception is raised.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到**StopIteration**异常被抛出。
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Under the hood, the generator function executes until the execution reaches
    the *yield* statement, and the control returns to the call site. However, unlike
    a normal Python function that returns control to the call site once the *return*
    statement, a generator function suspends execution temporarily. And it keeps track
    of its state that helps us get the subsequent elements by calling `next()`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 从底层来看，生成器函数会执行直到遇到*yield*语句，控制权会返回到调用点。然而，与正常的 Python 函数不同，生成器函数在*return*语句之后会暂时挂起执行，并保持其状态，这有助于我们通过调用`next()`获取后续元素。
- en: You can also loop through the generator object using a for loop. The control
    exits the loop when the **StopIteration** exception is raised (that’s how for
    loops work under the hood).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 for 循环遍历生成器对象。当**StopIteration**异常被抛出时，控制会退出循环（这就是 for 循环在底层的工作原理）。
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Generator Expressions in Python
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中的生成器表达式
- en: 'Another common way to use generators is using **generator expressions**. Here’s 
    the generator expression equivalent of the `get_cubes_gen()` function:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种常见的使用生成器的方法是使用**生成器表达式**。这里是`get_cubes_gen()`函数的生成器表达式等效版本：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The above generator expression may look similar to list comprehension, except
    for the use of () in place of []. However, as discussed, the following key differences
    hold:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述生成器表达式可能看起来与列表推导类似，只是使用了()代替[]。然而，正如讨论的那样，存在以下关键差异：
- en: A list comprehension expression generates the entire list and stores it in memory.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表推导表达式生成整个列表并将其存储在内存中。
- en: The generator expression, on the other hand, yields the elements of the sequence
    on demand.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，生成器表达式按需生成序列的元素。
- en: 'Python Generators vs. Lists: Understanding Performance Improvements'
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 生成器与列表：理解性能改进
- en: In the sample function call in the previous section, we generated a sequence
    of cubes of the numbers zero through five. For such small sequences, using a generator
    may not give you significant performance gains. However, generators are certainly
    a memory-efficient choice when you work with longer sequences.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的示例函数调用中，我们生成了从零到五的数字的立方序列。对于这样的短小序列，使用生成器可能不会给你带来显著的性能提升。然而，当你处理较长的序列时，生成器无疑是一个节省内存的选择。
- en: 'To see this in action, generate the sequence of cubes for value of `num` in
    a  wider range:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看实际效果，可以生成一个更广范围内 `num` 值的立方序列：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now let us print out the size of the size in memory of the static list and
    the generator object for the when `num` changes (as in the snippet above):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们打印出静态列表和生成器对象在内存中的大小（如上面代码片段中`num`变化时）：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: From the output, we see that the generator object has a constant memory footprint
    unlike a list where the memory grows with `num`.This is because a generator performs
    *lazy evaluation* and *yields* the subsequent values in the sequence on demand.
    It does not compute all the values ahead of time.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从输出中我们看到，生成器对象具有恒定的内存占用，而列表的内存随着`num`的增加而增长。这是因为生成器执行*延迟评估*并*按需生成*序列中的后续值。它不会提前计算所有值。
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To get a better idea of how the sizes of the static list and generator change
    with change in the value of num, we can plot the values of `num` and the sizes
    of the list and the generators, as shown below:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地了解静态列表和生成器的大小如何随`num`的变化而变化，我们可以绘制`num`的值以及列表和生成器的大小，如下所示：
- en: '![Getting Started with Python Generators](../Images/6904c75748fc0fcdd820c52c9c3a5653.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![开始使用 Python 生成器](../Images/6904c75748fc0fcdd820c52c9c3a5653.png)'
- en: In the graph above, we see that when `num` increases, the size of the generator
    is constant, whereas the size of the list is prohibitively large.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，我们看到当`num`增加时，生成器的大小保持不变，而列表的大小则极为庞大。
- en: Conclusion
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: In this tutorial, you’ve learned how generators work in Python. The next time
    you need to work with a large file or dataset, you can consider using generators
    to iterate efficiently over it. When you use generators, you can iterate over
    the generator object, read in a line or a small chunk, process it or apply transformations
    as needed—without having to store the original dataset in memory. However, keep
    in mind that you cannot store such values in memory for processing at a later
    time. If you need to, you’ll have to use lists.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，你已经了解了生成器在 Python 中的工作原理。下次你需要处理大型文件或数据集时，可以考虑使用生成器来高效地进行迭代。当你使用生成器时，可以对生成器对象进行迭代，读取一行或一小块，处理或应用所需的变换，而不需要将原始数据集存储在内存中。然而，请记住，你不能将这些值存储在内存中以便以后处理。如果需要，你必须使用列表。
- en: '**[Bala Priya C](https://twitter.com/balawc27)** is a technical writer who
    enjoys creating long-form content. Her areas of interest include math, programming,
    and data science. She shares her learning with the developer community by authoring
    tutorials, how-to guides, and more.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Bala Priya C](https://twitter.com/balawc27)** 是一位技术写作人，喜欢创作长篇内容。她的兴趣领域包括数学、编程和数据科学。她通过编写教程、操作指南等形式与开发者社区分享她的学习成果。'
- en: More On This Topic
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 5 步开始 Python 数据结构](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
- en: '[Getting Started with Python for Data Science](https://www.kdnuggets.com/getting-started-with-python-for-data-science)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 Python 进行数据科学](https://www.kdnuggets.com/getting-started-with-python-for-data-science)'
- en: '[Getting Started with PyTest: Effortlessly Write and Run Tests in Python](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 PyTest：轻松编写和运行 Python 测试](https://www.kdnuggets.com/getting-started-with-pytest-effortlessly-write-and-run-tests-in-python)'
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用自动化文本摘要](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
- en: '[Getting Started Cleaning Data](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始清理数据](https://www.kdnuggets.com/2022/01/getting-started-cleaning-data.html)'
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[开始使用 SQL 备忘单](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
