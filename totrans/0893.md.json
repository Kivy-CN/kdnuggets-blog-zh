["```py\npip install pyjanitor\n```", "```py\nimport pandas as pd\ndf = pd.read_csv('train.csv')\ndf.head() \n```", "```py\nimport janitor\n\ndf.factorize_columns(column_names=[\"Sex\"]).also(\n    lambda df: print(f\"DataFrame shape after factorize is: {df.shape}\")\n).bin_numeric(from_column_name=\"Age\", to_column_name=\"Age_binned\").also(\n    lambda df: print(f\"DataFrame shape after binning is: {df.shape}\")\n).clean_names()\n```", "```py\npip install feature-engine\n```", "```py\nfrom feature_engine.imputation import MeanMedianImputer\n\n# set up the imputer\nmedian_imputer = MeanMedianImputer(imputation_method='median', variables=['Age'])\n# fit the imputer\nmedian_imputer.fit(df)\n\nmedian_imputer.transform(df) \n```", "```py\npip install cleanlab\n```", "```py\n# Selecting the features\ndf = df[[\"Survived\", \"Pclass\", \"SibSp\", \"Parch\"]]\n\n# Splitting the dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(\n    df.drop(\"Survived\", axis=1), df[\"Survived\"], random_state=42\n) \n```", "```py\n#Fit the model\nfrom sklearn.linear_model import LogisticRegression\n\nmodel = LogisticRegression(random_state = 42)\nmodel.fit(X_train, y_train)\npreds = model.predict(X_test)\n\n#Print the metrics result\nfrom sklearn.metrics import classification_report\n\nprint(classification_report(y_test, preds))\n```", "```py\nfrom cleanlab.classification import CleanLearning\n\n#initiate model with CleanLearning\ncl = CleanLearning(model, seed=42)\n\n# Fit model\ncl.fit(X_train, y_train)\n\n# Examine the label quality\ncl.get_label_issues()\n```", "```py\nclean_preds = cl.predict(X_test)\nprint(classification_report(y_test, clean_preds))\n```"]