- en: Getting Started with SQL in 5 Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/5-steps-getting-started-with-sql](https://www.kdnuggets.com/5-steps-getting-started-with-sql)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Getting Started with SQL in 5 Steps](../Images/fa59cd914bdc8e4ddf8c87a652f631d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Introduction to Structured Query Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to managing and manipulating data in relational databases, Structured
    Query Language (SQL) is the biggest name in the game. SQL is a major domain-specific
    language which serves as the cornerstone for database management, and which provides
    a standardized way to interact with databases. With data being the driving force
    behind decision-making and innovation, SQL remains an essential technology demanding
    top-level attention from data analysts, developers, and data scientists.
  prefs: []
  type: TYPE_NORMAL
- en: SQL was originally developed by IBM in the 1970s, and became standardized by
    ANSI and ISO in the late 1980s. All types of organizations — from small businesses
    to universities to major corporations — rely on SQL databases such as MySQL, SQL
    Server, and PostgreSQL to handle large-scale data. SQL's importance continues
    to grow with the expansion of data-driven industries. Its universal application
    makes it a vital skill for various professionals, in the data realm and beyond.
  prefs: []
  type: TYPE_NORMAL
- en: 'SQL allows users to perform various data-related tasks, including:'
  prefs: []
  type: TYPE_NORMAL
- en: Querying data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting new records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating existing records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and modifying tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This tutorial will offer a step-by-step walkthrough of SQL, focusing on getting
    started with extensive hands-on examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Setting Up Your SQL Environment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Choosing a SQL Database Management System (DBMS)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before diving into SQL queries, you'll need to choose a database management
    system (DBMS) that suits your project's needs. The DBMS serves as the backbone
    for your SQL activities, offering different features, performance optimizations,
    and pricing models. Your choice of a DBMS can have a significant impact on how
    you interact with your data.
  prefs: []
  type: TYPE_NORMAL
- en: '**MySQL**: Open source, widely adopted, used by Facebook and Google. Suitable
    for a variety of applications, from small projects to enterprise-level applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PostgreSQL**: Open source, robust features, used by Apple. Known for its
    performance and standards compliance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Server Express**: Microsoft''s entry-level option. Ideal for small to
    medium applications with limited requirements for scalability.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQLite**: Lightweight, serverless, and self-contained. Ideal for mobile apps
    and small projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installation Guide for MySQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the sake of this tutorial, we will focus on MySQL due to its widespread
    usage and comprehensive feature set. Installing MySQL is a straightforward process:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit [MySQL's website](https://dev.mysql.com/downloads/mysql/) and download
    the installer appropriate for your operating system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer, following the on-screen instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: During the setup, you will be prompted to create a root account. Make sure to
    remember or securely store the root password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once installation is complete, you can access the MySQL shell by opening a terminal
    and typing `mysql -u root -p`. You'll be prompted to enter the root password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After successful login, you'll be greeted with the MySQL prompt, indicating
    that your MySQL server is up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting Up a SQL IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An Integrated Development Environment (IDE) can significantly enhance your SQL
    coding experience by providing features like auto-completion, syntax highlighting,
    and database visualization. An IDE is not strictly necessary for running SQL queries,
    but it is highly recommended for more complex tasks and larger projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**[DBeaver](https://dbeaver.io/)**: Open source and supports a wide range of
    DBMS, including MySQL, PostgreSQL, SQLite, and SQL Server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**[MySQL Workbench](https://www.mysql.com/products/workbench/)**: Developed
    by Oracle, this is the official IDE for MySQL and offers comprehensive tools tailored
    for MySQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After downloading and installing your chosen IDE, you'll need to connect it
    to your MySQL server. This usually involves specifying the server's IP address
    (`localhost` if the server is on your machine), the port number (usually 3306
    for MySQL), and the credentials for an authorized database user.
  prefs: []
  type: TYPE_NORMAL
- en: Testing Your Setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s make sure that everything is working correctly. You can do this by running
    a simple SQL query to display all existing databases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If this query returns a list of databases, and no errors, then congratulations!
    Your SQL environment has been successfully set up, and you are ready to start
    SQL programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 2: Basic SQL Syntax and Commands'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Database and Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before adding or manipulating data, you will first need both a database and
    one table, at minimum. Creating a database and a table is accomplished by:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Manipulating Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you are ready for data manipulation. Let''s have a look at the basic [CRUD
    operations](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert: `INSERT INTO customers (name, email) VALUES (''John Doe'', ''john@email.com'');`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Query: `SELECT * FROM customers;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update: `UPDATE customers SET email = ''john@newemail.com'' WHERE id = 1;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete: `DELETE FROM customers WHERE id = 1;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering and Sorting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Filtering in SQL involves using conditions to selectively retrieve rows from
    a table, often using the `WHERE` clause. Sorting in SQL arranges the retrieved
    data in a specific order, typically using the `ORDER BY` clause. Pagination in
    SQL divides the result set into smaller chunks, displaying a limited number of
    rows per page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter: `SELECT * FROM customers WHERE name = ''John Doe'';`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sort: `SELECT * FROM customers ORDER BY name ASC;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Paginate: `SELECT * FROM customers LIMIT 10 OFFSET 20;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data Types and Constraints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Understanding data types and constraints is crucial for defining the structure
    of your tables. Data types specify what kind of data a column can hold, such as
    integers, text, or dates. Constraints enforce limitations to ensure data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: '**Integer Types:** INT, SMALLINT, TINYINT, etc. Used for storing whole numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Decimal Types:** FLOAT, DOUBLE, DECIMAL. Suitable for storing numbers with
    decimal places.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Character Types:** CHAR, VARCHAR, TEXT. Used for text data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Date and Time:** DATE, TIME, DATETIME, TIMESTAMP. Designed for storing date
    and time information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, the `NOT NULL` constraint ensures that a column cannot
    have a NULL value. The `UNIQUE` constraint guarantees that all values in a column
    are unique. The `CHECK` constraint validates that the salary must be greater than
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 3: More Advanced SQL Concepts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Joining Tables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Joins are used to combine rows from two or more tables based on a related column
    between them. They are essential when you want to retrieve data that is spread
    across multiple tables. Understanding joins is crucial for complex SQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'INNER JOIN: `SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LEFT JOIN: `SELECT * FROM orders LEFT JOIN customers ON orders.customer_id
    = customers.id;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RIGHT JOIN: `SELECT * FROM orders RIGHT JOIN customers ON orders.customer_id
    = customers.id;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Joins can be complex but are incredibly powerful when you need to pull data
    from multiple tables. Let's go through a detailed example to clarify how different
    types of joins work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider two tables: **Employees** and **Departments**.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explore different types of joins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the above examples, the INNER JOIN returns only the rows where there is a
    match in both tables. The LEFT JOIN returns all rows from the left table, and
    matching rows from the right table, filling with NULL if there is no match. The
    RIGHT JOIN does the opposite, returning all rows from the right table and matching
    rows from the left table.
  prefs: []
  type: TYPE_NORMAL
- en: Grouping and Aggregation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Aggregation functions perform a calculation on a set of values and return a
    single value. Aggregations are commonly used alongside GROUP BY clauses to segment
    data into categories and perform calculations on each group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Count: `SELECT customer_id, COUNT(id) AS total_orders FROM orders GROUP BY
    customer_id;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sum: `SELECT customer_id, SUM(order_amount) AS total_spent FROM orders GROUP
    BY customer_id;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Filter group: `SELECT customer_id, SUM(order_amount) AS total_spent FROM orders
    GROUP BY customer_id HAVING total_spent > 100;`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subqueries and Nested Queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subqueries allow you to perform queries within queries, providing a way to fetch
    data that will be used in the main query as a condition to further restrict the
    data that is retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Transactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Transactions are sequences of SQL operations that are executed as a single
    unit of work. They are important for maintaining the integrity of database operations,
    particularly in multi-user systems. Transactions follow the ACID principles: Atomicity,
    Consistency, Isolation, and Durability.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the above example, both UPDATE statements are wrapped within a transaction.
    Either both execute successfully, or if an error occurs, neither execute, ensuring
    data integrity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Optimization and Performance Tuning'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Query Performance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Query performance is crucial for maintaining a responsive database system.
    An inefficient query can lead to delays, affecting the overall user experience.
    Here are some key concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Execution Plans:** These plans provide a roadmap of how a query will be executed,
    allowing for analysis and optimization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottlenecks:** Identifying slow parts of a query can guide optimization efforts.
    Tools like the SQL Server Profiler can assist in this process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexing Strategies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Indexes are data structures that enhance the speed of data retrieval. They
    are vital in large databases. Here''s how they work:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Single-Column Index:** An index on a single column, often used in WHERE clauses;
    `CREATE INDEX idx_name ON customers (name);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composite Index:** An index on multiple columns, used when queries filter
    by multiple fields; `CREATE INDEX idx_name_age ON customers (name, age);`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Understanding When to Index:** Indexing improves reading speed but can slow
    down insertions and updates. Careful consideration is needed to balance these
    factors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing Joins and Subqueries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Joins and subqueries can be resource-intensive. Optimization strategies include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using Indexes:** Applying indexes on join fields improves join performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reducing Complexity:** Minimize the number of tables joined and the number
    of rows selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Database Normalization and Denormalization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Database design plays a significant role in performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Normalization:** Reduces redundancy by organizing data into related tables.
    This can make queries more complex but ensures data consistency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Denormalization:** Combines tables to improve read performance at the cost
    of potential inconsistency. It''s used when read speed is a priority.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Monitoring and Profiling Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Utilizing tools to monitor performance ensures that the database runs smoothly:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MySQL''s Performance Schema:** Offers insights into query execution and performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Server Profiler:** Allows tracking and capturing of SQL Server events,
    helping in analyzing performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best Practices in Writing Efficient SQL
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Adhering to best practices makes SQL code more maintainable and efficient:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Avoid SELECT *:** Select only required columns to reduce load.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Minimize Wildcards:** Use wildcards sparingly in LIKE queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use EXISTS Instead of COUNT:** When checking for existence, EXISTS is more
    efficient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Database Maintenance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regular maintenance ensures optimal performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Updating Statistics:** Helps the database engine make optimization decisions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rebuilding Indexes:** Over time, indexes become fragmented. Regular rebuilding
    improves performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backups:** Regular backups are essential for data integrity and recovery.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 5: Performance & Security Best Practices'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Performance Best Practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Optimizing the performance of your SQL queries and database is crucial for
    maintaining a responsive and efficient system. Here are some performance best
    practices:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Use Indexes Wisely:** Indexes speed up data retrieval but can slow down data
    modification operations like insert, update, and delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limit Results:** Use the `LIMIT` clause to retrieve only the data you need.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimize Joins:** Always join tables on indexed or primary key columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analyze Query Plans:** Understanding the query execution plan can help you
    optimize queries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Best Practices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Security is paramount when dealing with databases, as they often contain sensitive
    information. Here are some best practices for enhancing SQL security:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data Encryption:** Always encrypt sensitive data before storing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User Privileges:** Grant users the least amount of privileges they need to
    perform their tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SQL Injection Prevention:** Use parameterized queries to protect against
    SQL injection attacks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regular Audits:** Conduct regular security audits to identify vulnerabilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining Performance and Security
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Striking the right balance between performance and security is often challenging
    but necessary. For example, while indexing can speed up data retrieval, it can
    also make sensitive data more accessible. Therefore, always consider the security
    implications of your performance optimization strategies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: Secure and Efficient Query'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This example uses a parameterized query, which not only prevents SQL injection
    but also allows MySQL to cache the query, improving performance.
  prefs: []
  type: TYPE_NORMAL
- en: Moving Forward
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This getting started guide has covered the fundamental concepts and popular
    practical applications of SQL. From getting up and running to mastering complex
    queries, this guide should have provided you with the skills you need to navigate
    data management through the use of detailed examples and with a practical approach.
    As data continues to shape our world, mastering SQL opens the door to a variety
    of fields, including data analytics, machine learning, and software development.
  prefs: []
  type: TYPE_NORMAL
- en: As you progress, consider extending your SQL skill set with additional resources.
    Sites like [w3schools SQL Tutorial](https://www.w3schools.com/sql/) and [SQL Practice
    Exercises on SQLBolt](https://sqlbolt.com/) provide additional study materials
    and exercises. Additionally, [HackerRank's SQL problems](https://www.hackerrank.com/domains/sql)
    provide goal-oriented query practice. Whether you're building a complex data analytics
    platform or developing the next generation of web applications, SQL is a skill
    you will definitely be using regularly. Remember that the journey to SQL mastery
    traverses a long road, and is a journey that is enriched by consistent practice
    and learning.
  prefs: []
  type: TYPE_NORMAL
- en: '[**Matthew Mayo**](https://www.linkedin.com/in/mattmayo13/) ([**@mattmayo13**](https://twitter.com/mattmayo13))
    holds a Master''s degree in computer science and a graduate diploma in data mining.
    As Editor-in-Chief of KDnuggets, Matthew aims to make complex data science concepts
    accessible. His professional interests include natural language processing, machine
    learning algorithms, and exploring emerging AI. He is driven by a mission to democratize
    knowledge in the data science community. Matthew has been coding since he was
    6 years old.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Getting Started with SQL Cheatsheet](https://www.kdnuggets.com/2022/08/getting-started-sql-cheatsheet.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Python Data Structures in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-python-data-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Scikit-learn in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-scikit-learn)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Google Cloud Platform in 5 Steps](https://www.kdnuggets.com/5-steps-google-cloud-platform)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with PyTorch in 5 Steps](https://www.kdnuggets.com/5-steps-getting-started-pytorch)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Automated Text Summarization](https://www.kdnuggets.com/2019/11/getting-started-automated-text-summarization.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
