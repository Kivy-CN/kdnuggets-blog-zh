- en: Awesome Tricks And Best Practices From Kaggle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/04/awesome-tricks-best-practices-kaggle.html](https://www.kdnuggets.com/2021/04/awesome-tricks-best-practices-kaggle.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Bex T.](https://ibexorigin.medium.com/), Top Writer in AI**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/97af7e94710b5bab00f14161cdf8beb2.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Weekly Awesome Tricks And Best Practices From Kaggle*'
  prefs: []
  type: TYPE_NORMAL
- en: About This Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Kaggle is a wonderful place. It is a gold mine of knowledge for data scientists
    and ML engineers. There are not many platforms where you can find high-quality,
    efficient, reproducible, awesome codes brought by experts in the field all in
    the same place.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: It has hosted 164+ competitions since its launch. These competitions attract
    experts and professionals from around the world to the platform. As a result,
    there are many high-quality notebooks and scripts on each competition and for
    the massive amount of open-source datasets Kaggle provides.
  prefs: []
  type: TYPE_NORMAL
- en: At the beginning of my data science journey, I would go to Kaggle to find datasets
    to practice my skills. Whenever I looked at other kernels I would be overwhelmed
    by the complexity of the code and immediately shy away.
  prefs: []
  type: TYPE_NORMAL
- en: But now, I find myself spending a considerable amount of time reading other’s
    notebooks and making submissions to competitions. Sometimes, there are pieces
    that are worth spending your entire weekend on. And sometimes, I find simple but
    deadly effective code tricks and best practices that can only be learned by watching
    other pros.
  prefs: []
  type: TYPE_NORMAL
- en: And the rest is simple, my OCD practically forces me to spill out every single
    piece of data science knowledge I have. So here I am, writing the first edition
    of my ‘Weekly Awesome Tricks And Best Practices From Kaggle’. Throughout the series,
    you will find me writing about anything that can be useful during a typical data
    science workflow including code shortcuts related to common libraries, best practices
    that are followed by top industry experts on Kaggle, and so on, all learned by
    me during the past week. Enjoy!
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Plotting Only the Lower Part of Correlation Matrix
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A good correlation matrix can say a lot about your dataset. It is common to
    plot it to see the pairwise correlation between your features and the target variable.
    According to your needs, you can decide which features to keep and feed into your
    ML algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 'But today, datasets contain so many features that it can be overwhelming to
    look at correlation matrices like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/dafb4bbb0e274bb1a78b6d4e0da36faf.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Weekly Awesome Tricks And Best Practices From Kaggle*'
  prefs: []
  type: TYPE_NORMAL
- en: 'However nice, there is just too much information to take in. Correlation matrices
    are mostly symmetrical along the main diagonal, so they contain duplicate data.
    Also, the diagonal itself is useless. Let’s see how we can plot only the useful
    half:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/79c5d2e833b2998df164a045a217d567.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The resulting plot is much easier to interpret and free of distractions. First,
    we build the correlation matrix using the .corr method of the DataFrame. Then,
    we use `np.ones_like` function with `dtype` set to `bool` to create a matrix of
    True values with the same shape as our DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we pass it to Numpy’s `.triu` function which returns a 2D boolean mask
    that contains False values for the lower triangle of the matrix. Then, we can
    pass it to Seaborn’s heatmap function to subset the matrix according to this mask:'
  prefs: []
  type: TYPE_NORMAL
- en: I also made a few additions to make the plot a bit nicer, like adding a custom
    color palette.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Include Missing Values in value_counts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A handy little trick with value_counts is that you can see the proportion of
    missing values in any column by setting `dropna` to False:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By determining the proportion of values that are missing, you can make a decision
    as to whether to drop or impute them. However, if you want to look at the proportion
    of missing values across all columns, `value_counts` is not the best option. Instead,
    you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: First, find the proportions by dividing the number of missing values by the
    length of the DataFrame. Then, you can filter out columns with 0%, i. e. only
    choose columns with missing values.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Using Pandas DataFrame Styler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Many of us never realize the vast, untapped potential of pandas. An underrated
    and often overlooked feature of pandas is its ability to style its DataFrames.
    Using the `.style` attribute of pandas DataFrames, you can apply conditional designs
    and styles to them. As a first example, let’s see how you can change the background
    color depending on the value of each cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c6f75b89ab181bd573db3d9f57d6f3a.png)'
  prefs: []
  type: TYPE_IMG
- en: It is almost a heatmap without using Seaborn’s heatmap function. Here, we are
    counting each combination of diamond cut and clarity using `pd.crosstab` Using
    the `.style.background_gradient` with a color palette, you can easily spot which
    combinations occur the most. From the above DataFrame only, we can see that the
    majority of diamonds are of ideal cut and the largest combination is with the
    ‘VS2’ type of clarity.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even take this further by finding the average price of each diamond
    cut and clarity combination in crosstab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8c1aed936952686f242dc86cfca23b98.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This time, we are aggregating diamond prices for each cut and clarity combination.
    From the styled DataFrame, we can see that the most expensive diamonds have ‘VS2’
    clarity or premium cut. But it would be better if we could display the aggregated
    prices by rounding them. We can change that with `.style` too:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/70085e69adb7ec8a906ae2810b97f74e.png)'
  prefs: []
  type: TYPE_IMG
- en: By chaining `.format` method with a format string `{:.2f}`, we are specifying
    a precision of 2 floating points.
  prefs: []
  type: TYPE_NORMAL
- en: With `.style`, your imagination is the limit. With a little bit of knowledge
    of CSS, you can build custom styling functions for your needs. Check out the official
    pandas[ guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/style.html) for
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Configuring Global Plot Settings With Matplotlib
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When doing EDA, you will find yourself keeping some settings of Matplotlib the
    same for all of your plots. For example, you might want to apply a custom palette
    for all plots, using bigger fonts for tick labels, changing the location of legends,
    using fixed figure sizes etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifying each custom change to plots can be a pretty boring, repetitive and
    time-consuming task. Fortunately, you can use Matplotlib’s `rcParams` to set global
    configs for your plots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`rcParams` is just a plain-old Python dictionary containing default settings
    of Matplotlib:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca6a8900293c78046efcf4b71f8190b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can tweak pretty much every possible aspect of each individual plot. What
    I usually do and have seen others doing is set a fixed figure size, tick label
    font size, and a few others:'
  prefs: []
  type: TYPE_NORMAL
- en: You can avoid a lot of repetition by setting these right after you import Matplotlib.
    See all the other available settings by calling rcParams.keys().
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Configuring Global Settings of Pandas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Just like Matplotlib, pandas has global settings you can play around with.
    Of course, most of them are related to displaying options. The official user guide
    says that the entire options system of pandas can be controlled with 5 functions
    available directly from pandas namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: get_option() / set_option() — get/set the value of a single option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: reset_option() — reset one or more options to their default value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: describe_option() — print the descriptions of one or more options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: option_context() — execute a code block with a set of options that revert to
    prior settings after execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All options have case-insensitive names and are found using regex under the
    hood. You can use `pd.get_option` to see what is the default behavior and change
    it to your liking using set_option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, the above option controls the number of columns that are to be
    shown when there are many columns in a DataFrame. Today, the majority of datasets
    contain more than 20 variables and whenever you call `.head` or other display
    functions, pandas annoyingly puts ellipsis to truncate the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/2c71c3d58c4927b34dbf3bbed29c6667.png)'
  prefs: []
  type: TYPE_IMG
- en: 'I would rather see all columns by scrolling through. Let’s change this behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Above, I completely remove the limit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/ff29e6c997f27a8f31187f3a223bb219.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can revert back to the default setting with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Just like columns, you can tweak the number of default rows shown. If you set
    display.max_rows to 5, you won’t have to call `.head()` all the time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![](../Images/5d122dcb06eb944b0d920f8ea1937298.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Nowadays, plotly is becoming vastly popular, so it would be nice to set it
    as default plotting backed for pandas. By doing so, you will get interactive plotly
    diagrams whenever you call .plot on pandas DataFrames:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '***Note that you need to have plotly installed to be able to do this.***'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t want to mess up default behavior or just want to change certain
    settings temporarily, you can use `pd.option_context` as a context manager. The
    temporary behavior change will only be applied to the code block that follows
    the statement. For example, if there are large numbers, pandas has an annoying
    habit of converting them to standard notation. You can avoid this temporarily
    by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ff2ac20739694f31775bd8a6958e181b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see the list of available options in the official pandas [user guide](https://pandas.pydata.org/pandas-docs/stable/user_guide/options.html#available-options).
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Bex T.](https://ibexorigin.medium.com/)** is a Top Writer in AI, writing
    “I wish I found this earlier” posts about Data Science and Machine Learning.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdev.com/tricks-and-best-practices-from-kaggle-794a5914480f).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[8 Places for Data Professionals to Find Datasets](/2020/12/8-places-data-professionals-find-datasets.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 resources for data science self-study](/2021/02/10-resources-data-science-self-study.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Python Skills for Beginners](/2020/12/10-python-skills-beginners.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 4 tricks for competing on Kaggle and why you should start](https://www.kdnuggets.com/2022/05/packt-top-4-tricks-competing-kaggle-start.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
