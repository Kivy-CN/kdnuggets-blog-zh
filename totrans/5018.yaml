- en: A Gentle Introduction to Bloom Filter
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Bloom 过滤器的温和介绍
- en: 原文：[https://www.kdnuggets.com/2016/08/gentle-introduction-bloom-filter.html](https://www.kdnuggets.com/2016/08/gentle-introduction-bloom-filter.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2016/08/gentle-introduction-bloom-filter.html](https://www.kdnuggets.com/2016/08/gentle-introduction-bloom-filter.html)
- en: '**Bugra Akyildiz, Hinge App.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bugra Akyildiz, Hinge App.**'
- en: Bloom Filter
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bloom 过滤器
- en: Bloom filters are probabilistic space-efficient data structures. They are very
    similar to hashtables; they are used exclusively membership existence in a set.
    However, they have a very powerful property which allows to make trade-off between
    space and false-positive rate when it comes to membership existence. Since it
    can make a tradeoff between space and false positive rate, it is called probabilistic
    data structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Bloom 过滤器是概率性空间高效的数据结构。它们与哈希表非常相似；它们专门用于集合中的成员存在性检测。然而，它们具有一个非常强大的特性，即在成员存在性检测时可以在空间和假阳性率之间进行权衡。由于它可以在空间和假阳性率之间进行权衡，因此它被称为概率数据结构。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - 快速进入网络安全职业生涯的捷径。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - 提升您的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - 支持您的组织在
    IT 领域'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: '![Bloom filter](../Images/4ba62d65a42be5ff5d825ea2d494adbb.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Bloom filter](../Images/4ba62d65a42be5ff5d825ea2d494adbb.png)'
- en: Space Efficiency
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空间效率
- en: Let's detail a little bit on the space-efficiency. If you want to store a long
    list of items in a set, you could do in various ways. You could store that in
    a hashmap and then check existence in the hashmap which would allow you to insert
    and query very efficiently. However, since you will be storing the items as they
    are, it will not be very space efficient.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细说明一下空间效率。如果你想在集合中存储长列表的项目，你可以采用多种方式。你可以将其存储在哈希映射中，然后检查哈希映射中的存在性，这将使你能够非常高效地插入和查询。然而，由于你将按原样存储这些项目，它将不会非常节省空间。
- en: If we want to also be space efficient, we could `hash` the items before putting
    into a set. What else? We could use bit arrays to store hash of the items. What
    else, what else? Let's also allow hash collision in the bit array. That is pretty
    much how Bloom Filters work, they are under the hood bit arrays which allow hash
    collisions; that produces false positives. Hash collisions exist in the Bloom
    Filters by design. Otherwise, they would not be compact.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们还想提高空间效率，可以在将项目放入集合之前对其进行`hash`。还有什么呢？我们可以使用位数组来存储项目的哈希值。还有，还有什么？让我们在位数组中也允许哈希冲突。这就是
    Bloom 过滤器的工作原理，它们在底层是允许哈希冲突的位数组；这会产生假阳性。哈希冲突在 Bloom 过滤器中是设计上的一部分，否则它们不会那么紧凑。
- en: Whenever a list or set is used, and space efficiency is important and significant,
    Bloom filter should be considered.
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 每当使用列表或集合，并且空间效率重要且显著时，应考虑使用 Bloom 过滤器。
- en: Bloom Filters Basics
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Bloom 过滤器基础知识
- en: Bloom Filter is a bit array of `N` bits, where `N` is the size of the bit array.
    It has another parameter which is the number of hash functions, `k`. These hash
    functions are used to set bits in the bit array. When inserting an element `x` into
    the filter, the bits in the `k` indices `h1(x)`,`h2(x)`, ..., `hk(x)` are set,
    where the bit positions are determined by the hash functions. Note that as we
    increase the number of hash functions, the false positive rate of this probability
    goes to zero. However, it takes more time to insert and lookup as well as the
    bloom filter fills up more quickly.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Bloom 过滤器是一个`N`位的位数组，其中`N`是位数组的大小。它还有另一个参数，即哈希函数的数量，`k`。这些哈希函数用于在位数组中设置位。当将元素`x`插入过滤器时，`k`个索引`h1(x)`,`h2(x)`,
    ..., `hk(x)`中的位会被设置，这些位的位置由哈希函数确定。请注意，随着哈希函数数量的增加，这种概率的假阳性率趋近于零。然而，插入和查找所需的时间增加，同时
    Bloom 过滤器也会更快填满。
- en: In order to to membership existence in the Bloom Filter, we need to chekck if
    all of the bits are set; very similar to how we insert item into a bloom filter.
    If all of the bits are set, then it means that that item is `probably` in the
    bloom filter, where if anot all of the bits are set, then it means that the item
    is not in the Bloom Filter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在布隆过滤器中检查成员存在性，我们需要检查所有的位是否都已设置；这与我们插入项目到布隆过滤器中的方式非常相似。如果所有的位都已设置，那么这意味着该项目
    `probably` 在布隆过滤器中；如果并非所有位都设置，那么这意味着该项目不在布隆过滤器中。
- en: Basic Python Implementation
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基本的 Python 实现
- en: If we want to implement a basic bloom filter, we could easily do so.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想实现一个基本的布隆过滤器，我们可以轻松做到这一点。
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Output is in the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: As you could see the output from above, there are false positives, but there
    were not any false negatives as expected.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，上述输出中存在假阳性，但没有出现假阴性，这是预期的。
- en: Unlike this implementation of the Bloom Filter, most of the implementations
    that are available in various languages do not provide a hash function argument,
    though. This is because false-positive rate is more important than the hash function
    in terms of application and depending on the false positive rate, you could always
    adjust the number of hash functions that are going to be used. Generally, the `size` and `error_rate` which
    is actually the false positive rate of the Bloom Filter. If you decrease the `error_rate` when
    you initialize the bloom filter, they would adjust the number of hash functions
    under the hood.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 与这种布隆过滤器的实现不同，大多数在各种语言中可用的实现并不提供哈希函数参数。这是因为假阳性率在应用中比哈希函数更为重要，并且根据假阳性率，你总是可以调整要使用的哈希函数数量。通常，`size`
    和 `error_rate` 是布隆过滤器的假阳性率。如果你在初始化布隆过滤器时减少 `error_rate`，它们会在后台调整哈希函数的数量。
- en: False Positives
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 假阳性
- en: While Bloom Filters can say "definitely not in" with confidence, they will also
    say `possibly in`for some number of items. Depending on the application, this
    could be a huge downside or it could be relatively okay. If it is okay to introduce
    false positives every now and then, you should definitely consider using Bloom
    Filters for membership existence for set operations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然布隆过滤器可以有信心地说“绝对不在”，但它们也会对某些项目说 `possibly in`。根据应用的不同，这可能是一个巨大的缺点，也可能相对还可以。如果偶尔出现假阳性是可以接受的，你应该考虑使用布隆过滤器来检查集合操作中的成员存在性。
- en: Also note that if you are decreasing the false positive rate arbitrarily, you
    would increase the number of hash functions which would add latency to both insertion
    and membership existence. One more thing in this section is that, if the hash
    functions are independent each other and distribute the input space pretty uniformly,
    then the theoretic false positive rate can be satisfied. Otherwise, the false
    positive rate of the bloom filter will be worse than the theoretic false positive
    rate as hash functions correlate each other and hash collisions would occur more
    often than desired.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，如果你任意降低假阳性率，你会增加哈希函数的数量，这将增加插入和成员存在性的延迟。在这一部分中还有一点，如果哈希函数彼此独立且能够较为均匀地分布输入空间，那么理论上的假阳性率是可以得到满足的。否则，布隆过滤器的假阳性率会比理论上的假阳性率更差，因为哈希函数之间存在相关性，哈希冲突发生的频率会比预期更高。
- en: When using a Bloom filter, consider the potential effects of false positives.
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使用布隆过滤器时，要考虑假阳性的潜在影响。
- en: Deterministic
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确定性
- en: If you are using the same size and same number hash functions as well as the
    hash function, bloom filter is deterministic on which items it gives positive
    response and which items it gives negative response. For an item `x`, if it gives
    it is `probably in` to that particular item, it will give the same response as
    5 minutes later, 1 hour later, 1 day later and 1 week later. I was a little surprised
    when I found this. It was "probabilistic" so the response of the bloom filter
    should be somehow random, right? Not really. It is probabilistic in the sense
    that you cannot know which item it will say it is `probably in`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用相同的大小和相同数量的哈希函数以及哈希函数，布隆过滤器在给出正面响应和负面响应时是确定性的。对于一个项目 `x`，如果它对该特定项目给出 `probably
    in` 的响应，那么5分钟后、1小时后、1天后和1周后它将给出相同的响应。我对这一点感到有些惊讶。它是“概率性的”，所以布隆过滤器的响应应该是某种随机的，对吧？其实不然。它的概率性在于你不能知道它会说哪个项目是
    `probably in`。
- en: Otherwise, when it says that it is `probably in`, it keeps saying the same thing.
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 否则，当它说 `probably in` 时，它会一直说同样的话。
- en: Disadvantages
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缺点
- en: Not everything is so great about Bloom Filters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 布隆过滤器并非完美无缺。
- en: The size of the Bloom Filter
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 布隆过滤器的大小
- en: The size of the Bloom Filters need to be known a priori based on the number
    of items that you are going to insert. This is not so great if you do not know
    or cannot approximate the number of items. You could put an arbitrarily large
    size, but that would be a waste in terms of space which we are trying to optimize
    in the very first place and the reason why we adopt to choose Bloom Filter. This
    could be fixed to create a bloom filter dynamic to the list of items that you
    want to fit, but depending on the application, this may not be always possible.
    There is a variant called [Scalable Bloom Filter](http://gsd.di.uminho.pt/members/cbm/ps/dbloom.pdf) which
    dynamically adjusts its size for different number of items. This could mitigate
    some of its shortcomings.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 布隆过滤器的大小需要根据你要插入的项的数量事先确定。如果你不知道或无法估计项的数量，这就不是很好。你可以设置一个任意大的大小，但那将浪费空间，而我们首先尝试优化的正是这个空间，因此选择布隆过滤器。可以通过创建一个动态调整的布隆过滤器来解决这个问题，但根据应用的不同，这可能并不总是可能。有一种变体称为
    [可扩展布隆过滤器](http://gsd.di.uminho.pt/members/cbm/ps/dbloom.pdf)，它根据不同的项数量动态调整大小。这可以缓解一些缺点。
- en: Constructing and Membership Existence in Bloom Filter
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在布隆过滤器中的构建和成员存在
- en: While using the Bloom Filters, you not only accept false positive rates, but
    also you are willing to have a little bit overhead in terms of speed. Comparing
    to an hashmap, there is definitely an overhead in terms of hashing the items as
    well as constructing the bloom filter.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用布隆过滤器时，你不仅接受误报率，还愿意在速度方面有一点开销。与哈希映射相比，哈希项和构建布隆过滤器时确实存在开销。
- en: Cannot give the items that you inserted
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不能给出你插入的项
- en: Bloom Filter cannot produce a list of items that are inserted, you could only
    check if an item is in it, but never get the full item list because of hash collisions
    and hash functions. This is due to arguably the most significant advantage over
    other data structures; its space efficiency which comes with this disadvantage.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 布隆过滤器无法生成插入项的列表，你只能检查某项是否存在，但永远无法获取完整的项列表，因为哈希冲突和哈希函数。这正是布隆过滤器相较于其他数据结构的最大优势之一；它的空间效率也带来了这一劣势。
- en: Removing an element
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 删除元素
- en: Removing an element from the Bloom Filter is not possible, you cannot undo an
    insertion operation as hash results for different items can be indexed in the
    same position. If you want to do undo inserts, either you need to count the inserts
    for each index in the BloomFilter or you need to construct the BloomFilter from
    the start excluding a single item. Both methods involve an overhead and not straightforward.
    Depending on the application, one might want to try to reconstruct the bloom filter
    from the start instead of removing or deleting items from the Bloom Filter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 从布隆过滤器中删除元素是不可能的，你不能撤销插入操作，因为不同项的哈希结果可能会索引到相同的位置。如果你想撤销插入操作，你要么需要对布隆过滤器中的每个索引进行插入计数，要么需要从头开始构建布隆过滤器，排除一个单一项。这两种方法都涉及开销且并不简单。根据应用的不同，可能需要尝试从头开始重建布隆过滤器，而不是从布隆过滤器中删除或移除项。
- en: Implementations in Different Languages
  id: totrans-43
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 不同语言中的实现
- en: 'In production, you do not want to roll out your own bloom filter implementation.
    There are two reasons; one of them choosing and implementing good hash functions
    is crucially important to distribute the error rate for any number of inputs.
    Second of them, it needs to be battle-tested and should not be error prone both
    in terms of error rate and its size. There are open source implementations for
    every language, but the following for node.js and Python are pretty good in my
    experience:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，你不应自行推出布隆过滤器的实现。有两个原因：其一，选择和实现良好的哈希函数对分配错误率至关重要。其二，它需要经过实战考验，且在错误率和大小方面不应出现错误。每种语言都有开源实现，但根据我的经验，以下针对
    node.js 和 Python 的实现非常好：
- en: '[Node](https://www.npmjs.com/package/bloomfilter)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Node](https://www.npmjs.com/package/bloomfilter)'
- en: '[Python](https://github.com/jaybaird/python-bloomfilter)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python](https://github.com/jaybaird/python-bloomfilter)'
- en: There is also very fast implementation(10x faster than the above Python library
    both in terms of membership existence and adding the item into the bloom filter), [pybloomfilter](https://axiak.github.io/pybloomfiltermmap/),
    but this runs on Pypy and does not support Python 3.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Bugra Akyildiz](https://www.linkedin.com/in/bugraa)** is a Senior Machine
    Learning Engineer at Hinge App. You can find him on Twitter **[@bugraa](https://twitter.com/bugraa)**.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](http://bugra.github.io/work/notes/2016-06-05/a-gentle-introduction-to-bloom-filter/).
    Reposted with permission.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '[Would You Survive the Titanic? A Guide to Machine Learning in Python Part
    1](/2016/07/titanic-machine-learning-guide-part-1.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with Data Science – Python](/2016/07/getting-started-data-science-python.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[America’s Next Topic Model](/2016/07/americas-next-topic-model.html)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to Natural Language Processing](https://www.kdnuggets.com/2022/06/gentle-introduction-natural-language-processing.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Gentle Introduction to Support Vector Machines](https://www.kdnuggets.com/2023/07/gentle-introduction-support-vector-machines.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Filter Data with Python](https://www.kdnuggets.com/2022/02/filter-data-python.html)'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Python Itertools Filter Functions You Probably Didn''t Know](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Essential Math for Data Science: Visual Introduction to Singular…](https://www.kdnuggets.com/2022/06/essential-math-data-science-visual-introduction-singular-value-decomposition.html)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
