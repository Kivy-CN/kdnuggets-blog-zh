- en: 'Say Goodbye to Print(): Use Logging Module for Effective Debugging'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 告别`Print()`：使用日志模块进行有效调试
- en: 原文：[https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging](https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging](https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging)
- en: '![Say Goodbye to Print(): Use Logging Module](../Images/df8d7bf47fa27eaa8c487cb7ccb88789.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![告别Print()：使用日志模块](../Images/df8d7bf47fa27eaa8c487cb7ccb88789.png)'
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片 | DALLE-3 & Canva
- en: Many of us start our programming journey with YouTube videos, and for the sake
    of simplicity, they often use `print()` statements to track bugs. That's fair
    enough, but as beginners adopt this habit, it can become problematic. Although
    these statements might work for simple scripts, as your codebase expands, this
    approach becomes highly inefficient. Therefore, in this article, I will introduce
    you to Python's built-in logging module, which solves this problem. We will see
    what logging is, how it differs from the `print()` statements, and we will also
    cover a practical example to fully understand its functionality.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 许多人开始编程时会通过YouTube视频学习，为了简单起见，他们通常使用`print()`语句来跟踪错误。这是可以理解的，但随着初学者养成这个习惯，它可能会变得问题重重。虽然这些语句对于简单的脚本可能有效，但随着代码库的扩展，这种方法变得非常低效。因此，在这篇文章中，我将向你介绍Python内置的日志模块，它解决了这个问题。我们将看到什么是日志记录，它与`print()`语句的区别，以及一个实用的例子来全面了解其功能。
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析能力'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在的组织进行IT工作'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Why Use the Logging Module Instead of Print()?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么使用日志模块而不是`Print()`？
- en: When we talk about debugging, the Python logging module provides much more detailed
    information than simple `print()` statements. This includes timestamps, module
    names, log levels, and line numbers where errors occurred, etc. These extra details
    help us understand the behavior of our code more effectively. The information
    we want to log depends on the needs of the application and the developer's preference.
    So, before we proceed further, let's discuss log levels and how to set them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论调试时，Python的日志模块提供了比简单的`print()`语句更详细的信息。这包括时间戳、模块名称、日志级别以及错误发生的行号等。这些额外的细节帮助我们更有效地理解代码的行为。我们想要记录的信息取决于应用程序的需求和开发者的偏好。因此，在进一步探讨之前，我们先讨论一下日志级别及其设置方法。
- en: Logging Levels
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志级别
- en: You can control the amount of information you want to see using these log levels.
    Each log level has a numerical value that denotes its severity, with higher values
    indicating more severe events. For example, if you set your log level to `WARNING`,
    you're telling the logging module to only show you messages that are of `WARNING`
    level or higher. This means you won't see any `DEBUG`, `INFO`, or other less severe
    messages. This way, you can focus on the important events and ignore the noise
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过这些日志级别控制你想看到的信息量。每个日志级别都有一个数值，表示其严重性，数值越高表示事件越严重。例如，如果你将日志级别设置为`WARNING`，你是在告诉日志模块只显示`WARNING`级别或更高级别的消息。这意味着你将看不到`DEBUG`、`INFO`或其他较低严重性的消息。这样，你可以集中关注重要事件，忽略噪音。
- en: 'Here’s a table that shows the details of what each log level represents:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个展示每个日志级别所代表的详细信息的表格：
- en: '| Log Level | Numerical Value | Purpose |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| 日志级别 | 数值 | 目的 |'
- en: '| DEBUG | 10 | Provides detailed information for diagnosing code-related issues,
    such as printing variable values and function call traces. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| DEBUG | 10 | 提供详细的信息以诊断与代码相关的问题，例如打印变量值和函数调用跟踪。 |'
- en: '| INFO | 20 | Used to confirm that the program is working as expected, like
    displaying startup messages and progress indicators. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| INFO | 20 | 用于确认程序按预期工作，比如显示启动消息和进度指示器。 |'
- en: '| WARNING | 30 | Indicates a potential problem that may not be critical to
    interrupt the program''s execution but could cause issues later on. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| WARNING | 30 | 表示一个潜在的问题，这可能不会中断程序的执行，但可能会在以后引发问题。 |'
- en: '| ERROR | 40 | Represents an unexpected behavior of the code that impacts its
    functionality, such as exceptions, syntax errors, or out-of-memory errors. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| ERROR | 40 | 表示代码的意外行为，这影响了其功能，如异常、语法错误或内存不足错误。 |'
- en: '| CRITICAL | 50 | Denotes a severe error that can lead to the termination of
    the program, like system crashes or fatal errors. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| CRITICAL | 50 | 表示严重错误，可能导致程序终止，如系统崩溃或致命错误。 |'
- en: Setting Up the Logging Module
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置日志模块
- en: 'To use the logging module, you need to follow some steps for configuration.
    This includes creating a logger, setting the logging level, creating a formatter,
    and defining one or more handlers. A handler basically decides where to send your
    log messages, such as to the console or a file. Let''s start with a simple example.
    We''re going to set up the logging module to do two things: first, it''ll show
    messages on the console, giving us useful information (at the `INFO` level). Second,
    it''ll save more detailed messages to a file (at the `DEBUG` level). I''d love
    it if you could follow along!'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用日志模块，你需要按照一些配置步骤。这包括创建日志记录器、设置日志级别、创建格式化程序以及定义一个或多个处理器。处理器基本上决定将日志消息发送到哪里，比如控制台或文件。让我们从一个简单的例子开始。我们将设置日志模块做两件事：首先，它将在控制台上显示消息，为我们提供有用的信息（在
    `INFO` 级别）。其次，它将把更详细的消息保存到文件中（在 `DEBUG` 级别）。希望你能跟上！
- en: 1\. Setting the log level
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 设置日志级别
- en: The default level of the logger is set to `WARNING`. In our case, our two handlers
    are set to `DEBUG` and `INFO` levels. Hence, to ensure all messages are managed
    properly, we have to set the logger's level to the lowest level among all handlers,
    which, in this case, is `DEBUG`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录器的默认级别设置为 `WARNING`。在我们的例子中，我们的两个处理器被设置为 `DEBUG` 和 `INFO` 级别。因此，为了确保所有消息都得到适当处理，我们必须将日志记录器的级别设置为所有处理器中的最低级别，在这种情况下是
    `DEBUG`。
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Creating a Formatter
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 创建一个格式化程序
- en: 'You can personalize your log messages using formatters. These formatters decide
    how your log messages will look. Here, we will set up the formatter to include
    the timestamp, the log level, and the message content using the command below:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用格式化程序个性化你的日志信息。这些格式化程序决定日志信息的显示方式。在这里，我们将设置格式化程序以包含时间戳、日志级别和消息内容，使用以下命令：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3\. Creating Handlers
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 创建处理器
- en: 'As discussed previously, handlers manage where your log messages will be sent.
    We will create two handlers: a console handler to log messages to the console
    and a file handler to write log messages to a file named ''app.log''.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前讨论的，处理器管理日志信息的发送位置。我们将创建两个处理器：一个控制台处理器，用于将消息记录到控制台，一个文件处理器，用于将日志消息写入名为 'app.log'
    的文件。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both handlers are then added to the logger using the `addHandler()` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用 `addHandler()` 方法将两个处理器添加到日志记录器中。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 4\. Testing the Logging Setup
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 4\. 测试日志设置
- en: 'Now that our setup is complete, let''s test if it''s working correctly before
    moving to the real-life example. We can log some messages as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的设置完成了，在转到实际示例之前，让我们测试一下它是否正常工作。我们可以如下记录一些消息：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you run this code, you should see the log messages printed to the console
    and written to a file named ''app.log'', like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行这段代码时，你应该会看到日志信息被打印到控制台并写入名为 'app.log' 的文件中，格式如下：
- en: '**Console**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台**'
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**app.log**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**app.log**'
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Logging User Activity in a Web Application
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Web 应用程序中记录用户活动
- en: 'In this simple example, we will create a basic web application that logs user
    activity using Python''s logging module. This application will have two endpoints:
    one for logging successful login attempts and the other to document failed ones
    (`INFO` for success and `WARNING` for failures).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简单的示例中，我们将创建一个基本的网络应用程序，使用 Python 的 logging 模块记录用户活动。这个应用程序将有两个端点：一个用于记录成功的登录尝试，另一个用于记录失败的登录尝试（`INFO`
    表示成功，`WARNING` 表示失败）。
- en: 1\. Setting Up Your Environment
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 1\. 设置你的环境
- en: 'Before starting, set up your virtual environment and install Flask:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，设置你的虚拟环境并安装 Flask：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 2\. Creating a Simple Flask Application
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 2\. 创建一个简单的 Flask 应用程序
- en: When you send a POST request to the **/login** endpoint with a username and
    password parameter, the server will check if the credentials are valid. If they
    are, the logger records the event using logger.info() to signify a successful
    login attempt. However, if the credentials are invalid, the logger records the
    event as a failed login attempt using logger.error().
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向**/login**端点发送一个包含用户名和密码参数的 POST 请求时，服务器将检查凭据是否有效。如果有效，记录器会使用 logger.info()
    记录事件，以表示登录尝试成功。然而，如果凭据无效，记录器会使用 logger.error() 记录事件，标记为登录尝试失败。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 3\. Testing the Application
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 测试应用程序
- en: 'To test the application, run the Python script and access the **/login** endpoint
    using a web browser or a tool like curl. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，请运行 Python 脚本，并使用 Web 浏览器或类似 curl 的工具访问**/login**端点。例如：
- en: '**Test Case 01**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试用例 01**'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Test Case 02**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试用例 02**'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**app.log**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**app.log**'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wrapping Up
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'And that wraps up this article. I strongly suggest making logging a part of
    your coding routine. It''s a great way to keep your code clean and make debugging
    easier. If you want to dive deeper, you can explore the [Python logging documentation](https://docs.python.org/3/library/logging.html)
    for more features and advanced techniques. And if you''re eager to enhance your
    Python skills further, feel free to check out some of my other articles:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章到此为止。我强烈建议将日志记录作为你的编码常规的一部分。这是保持代码清洁和简化调试的好方法。如果你想深入了解，可以查看 [Python 日志记录文档](https://docs.python.org/3/library/logging.html)
    以获取更多功能和高级技术。如果你希望进一步提升你的 Python 技能，欢迎查阅我其他的一些文章：
- en: '[Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient
    Code](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握 Python：编写清晰、组织良好且高效代码的 7 个策略](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8 个内置 Python 装饰器，用于编写优雅代码](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)**** Kanwal 是一名机器学习工程师和技术作家，对数据科学及其与医学的交汇点充满热情。她共同撰写了电子书《利用
    ChatGPT 最大化生产力》。作为 2022 年 APAC 的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认可为
    Teradata 多样性技术学者、Mitacs Globalink 研究学者以及哈佛 WeCode 学者。Kanwal 是变革的坚定倡导者，创立了 FEMCodes
    以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[How to Handle Missing Data with Scikit-learn''s Imputer Module](https://www.kdnuggets.com/how-to-handle-missing-data-with-scikit-learns-imputer-module)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Scikit-learn 的 Imputer 模块处理缺失数据](https://www.kdnuggets.com/how-to-handle-missing-data-with-scikit-learns-imputer-module)'
- en: '[Effective Testing for Machine Learning](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习的有效测试](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)'
- en: '[Prepare Your Data for Effective Tableau & Power BI Dashboards](https://www.kdnuggets.com/2022/06/prepare-data-effective-tableau-power-bi-dashboards.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为有效的 Tableau 和 Power BI 仪表板准备数据](https://www.kdnuggets.com/2022/06/prepare-data-effective-tableau-power-bi-dashboards.html)'
- en: '[The Fast and Effective Way to Audit ML for Fairness](https://www.kdnuggets.com/2023/01/fast-effective-way-audit-ml-fairness.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[快速有效地审计机器学习公平性的方法](https://www.kdnuggets.com/2023/01/fast-effective-way-audit-ml-fairness.html)'
- en: '[Data Visualization Best Practices & Resources for Effective Communication](https://www.kdnuggets.com/2023/04/data-visualization-best-practices-resources-effective-communication.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据可视化最佳实践和有效沟通资源](https://www.kdnuggets.com/2023/04/data-visualization-best-practices-resources-effective-communication.html)'
- en: '[Beyond Guesswork: Leveraging Bayesian Statistics for Effective…](https://www.kdnuggets.com/beyond-guesswork-leveraging-bayesian-statistics-for-effective-article-title-selection)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超越猜测：利用贝叶斯统计进行有效的…](https://www.kdnuggets.com/beyond-guesswork-leveraging-bayesian-statistics-for-effective-article-title-selection)'
