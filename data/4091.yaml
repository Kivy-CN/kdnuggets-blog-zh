- en: Python String Matching Without Complex RegEx Syntax
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 没有复杂正则表达式语法的 Python 字符串匹配
- en: 原文：[https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html](https://www.kdnuggets.com/2023/02/python-string-matching-without-complex-regex-syntax.html)
- en: '![Python String Matching Without Complex RegEx Syntax](../Images/5943947bd74ec9e16ea6fb4b391f5096.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![没有复杂正则表达式语法的 Python 字符串匹配](../Images/5943947bd74ec9e16ea6fb4b391f5096.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由作者提供
- en: I have a love-and-hate relationship with regular expressions (RegEx), especially
    in Python. I love how you can extract or match strings without writing multiple
    logical functions. It is even better than the String search function.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我对正则表达式（RegEx）有一种爱恨交织的关系，尤其是在 Python 中。我喜欢你可以在不编写多个逻辑函数的情况下提取或匹配字符串。这比字符串搜索功能更好。
- en: What I don’t like is how it is hard for me to learn and understand RegEx patterns.
    I can deal with simple String matching, such as extracting all alpha-numerical
    characters and cleaning the text for NLP tasks. Things get harder when it comes
    to extracting IP addresses, emails, and IDs from junk text. You have to write
    a complex RegEx String pattern to extract the required item.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我不喜欢的是学习和理解 RegEx 模式的难度。我可以处理简单的字符串匹配，例如提取所有字母数字字符并清理 NLP 任务的文本。当涉及到从垃圾文本中提取
    IP 地址、电子邮件和 ID 时，事情变得更困难。你必须编写复杂的 RegEx 字符串模式来提取所需的项。
- en: To make complex RegEx tasks simple, we will learn about a simple Python Package
    called [pregex](https://pypi.org/project/pregex/). Furthermore, we will also look
    at a few examples of extracting dates and emails from a long string of text.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化复杂的 RegEx 任务，我们将学习一个名为 [pregex](https://pypi.org/project/pregex/) 的简单 Python
    包。此外，我们还将查看一些从长文本字符串中提取日期和电子邮件的示例。
- en: Getting Started with PRegEx
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门 PRegEx
- en: '[Pregex](https://pypi.org/project/pregex/) is a higher-level API built on top
    of the `re` module. It is a RegEx without complex RegEx patterns that make it
    easy for any programmer to understand and remember regular expressions. Moreover,
    you don’t have to group patterns or escape metacharacters, and it is modular.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Pregex](https://pypi.org/project/pregex/) 是建立在 `re` 模块之上的高级 API。它是一种没有复杂正则表达式模式的正则表达式，使任何程序员都容易理解和记住正则表达式。此外，你不必对模式进行分组或转义元字符，它是模块化的。'
- en: You can simply install the library using PIP.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以简单地使用 PIP 安装这个库。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To test the powerful functionality of PRegEx, we will use modified sample code
    from the [documentation](https://pregex.readthedocs.io/en/latest/introduction.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试 PRegEx 强大的功能，我们将使用来自 [文档](https://pregex.readthedocs.io/en/latest/introduction.html)
    的修改版示例代码。
- en: In the example below, we are extracting either HTTP URL or an IPv4 address with
    a port number. We don’t have to create complex logic for it. We can use built-in
    functions `HttpUrl` and `IPv4`.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们提取 HTTP URL 或带端口号的 IPv4 地址。我们无需为此创建复杂的逻辑。我们可以使用内置函数 `HttpUrl` 和 `IPv4`。
- en: Create a port number using AnyDigit(). The first digit of the port should not
    be zero, and the next three digits can be any number.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 AnyDigit() 创建端口号。端口的第一位数字不能为零，接下来的三位数字可以是任何数字。
- en: Use Either() to add multiple logics to extract, either HTTP URL or IP address
    with a port number.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Either() 来添加多个逻辑，以提取 HTTP URL 或带端口号的 IP 地址。
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We will use a long string of text with characters and descriptions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用包含字符和描述的长文本字符串。
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Before we extract the matching string, let’s look at the RegEx pattern.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在提取匹配的字符串之前，让我们看一下 RegEx 模式。
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Output**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: As we can see, it is hard to read or even understand what is going on. This
    is where PRegEx shines. To provide you with a human-friendly API for performing
    complex regular expression tasks.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这很难阅读，甚至难以理解发生了什么。这正是 PRegEx 发挥作用的地方。它为执行复杂的正则表达式任务提供了一个用户友好的 API。
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Just like `re.match`, we will use `.get_matches(text)` to extract the required
    string.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `re.match` 一样，我们将使用 `.get_matches(text)` 来提取所需的字符串。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Output**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: We have extracted both the IP address with port number and two web URLs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经提取了带端口号的 IP 地址和两个网页 URL。
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Example 1: Date Format'
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例 1：日期格式
- en: Let’s look at a couple of examples where we can understand the full potential
    of PRegEx.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看几个示例，了解 PRegEx 的全部潜力。
- en: In this example, we will be extracting certain kinds of date patterns from the
    text below.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将从下面的文本中提取某些类型的日期模式。
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By using Exactly() and AnyDigit(), we will create the day, month, and year of
    the date. The day and month have two digits, whereas the year has 4 digits. They
    are separated by “-” dashes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 Exactly() 和 AnyDigit()，我们将创建日期的日、月和年。日和月是两位数字，而年是四位数字。它们由“ - ”破折号分隔。
- en: After creating the pattern, we will run `get_match` to extract the matching
    String.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建模式后，我们将运行 `get_match` 以提取匹配的字符串。
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Output**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s look at the RegEx pattern by using the `get_pattern()` function.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用 `get_pattern()` 函数来查看 RegEx 模式。
- en: '[PRE10]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Output**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: As we can see, it has a simple RegEx syntax.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，它具有简单的 RegEx 语法。
- en: '[PRE11]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Example 2: Email Extraction'
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '示例 2: 电子邮件提取'
- en: The second example is a bit complex, where we will extract valid email addresses
    from junk text.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个示例有点复杂，我们将从垃圾文本中提取有效的电子邮件地址。
- en: '[PRE12]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Create a **user** pattern with `OneOrMore()`. We will use `AnyButFrom()` to
    remove “@” and space from the logic.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `OneOrMore()` 创建一个**用户**模式。我们将使用 `AnyButFrom()` 从逻辑中去除“@”和空格。
- en: Similar to a **user** pattern we create a **company** pattern by removing the
    additional character “.” from the logic.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类似于**用户**模式，我们通过从逻辑中去除额外的字符“.”来创建一个**公司**模式。
- en: For the **domain,**  we will use `MatchAtLineEnd()` to start the search from
    the end with any two or more characters except "@", space, and full stop.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于**域名**，我们将使用 `MatchAtLineEnd()` 从行尾开始搜索，匹配任意两个或更多字符，除了“@”、空格和句点。
- en: 'Combine all three to create the final pattern: **user@company.domain**.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将三者结合以创建最终模式：**user@company.domain**。
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Output**'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: As we can see, PRegEx has identified two valid email address.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，PRegEx 已经识别出两个有效的电子邮件地址。
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**Note:** both code examples are modified versions of work by [The PyCoach](https://towardsdatascience.com/pregex-regular-expressions-in-plain-english-in-python-4670425d0eb5).'
  id: totrans-53
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**注意：** 两个代码示例是 [The PyCoach](https://towardsdatascience.com/pregex-regular-expressions-in-plain-english-in-python-4670425d0eb5)
    工作的修改版本。'
- en: Conclusion
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: If you are a data scientist, analyst, or NLP enthusiast, you should use PRegEx
    to clean the text and create simple logic. It will reduce your dependency on NLP
    frameworks as most of the matching can be done using simple API.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是数据科学家、分析师或 NLP 爱好者，你应该使用 PRegEx 来清理文本并创建简单的逻辑。这将减少你对 NLP 框架的依赖，因为大部分匹配可以通过简单的
    API 完成。
- en: In this mini tutorial, we have learned about the Python package PRegEx and its
    use cases with examples. You can learn more by reading the official [documentation](https://pregex.readthedocs.io/en/latest/introduction.html)
    or solving a [wordle](https://pregex.readthedocs.io/en/latest/introduction.html#solving-wordle-with-pregex)
    problem using programmable regular expressions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个迷你教程中，我们学习了 Python 包 PRegEx 及其用例。你可以通过阅读官方 [文档](https://pregex.readthedocs.io/en/latest/introduction.html)
    或使用可编程正则表达式解决一个 [wordle](https://pregex.readthedocs.io/en/latest/introduction.html#solving-wordle-with-pregex)
    问题来了解更多。
- en: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    is a certified data scientist professional who loves building machine learning
    models. Currently, he is focusing on content creation and writing technical blogs
    on machine learning and data science technologies. Abid holds a Master''s degree
    in Technology Management and a bachelor''s degree in Telecommunication Engineering.
    His vision is to build an AI product using a graph neural network for students
    struggling with mental illness.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Abid Ali Awan](https://www.polywork.com/kingabzpro)** ([@1abidaliawan](https://twitter.com/1abidaliawan))
    是一位认证的数据科学专家，热爱构建机器学习模型。目前，他专注于内容创作和撰写关于机器学习和数据科学技术的技术博客。Abid 拥有技术管理硕士学位和电信工程学士学位。他的愿景是使用图神经网络为遭受心理疾病困扰的学生开发一个
    AI 产品。'
- en: '* * *'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三个课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google 网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速开启网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google 数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你所在的组织的 IT'
- en: '* * *'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关主题
- en: '[Python String Processing Cheatsheet](https://www.kdnuggets.com/2020/01/python-string-processing-primer.html)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 字符串处理速查表](https://www.kdnuggets.com/2020/01/python-string-processing-primer.html)'
- en: '[Python String Methods](https://www.kdnuggets.com/2022/12/python-string-methods.html)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 字符串方法](https://www.kdnuggets.com/2022/12/python-string-methods.html)'
- en: '[Convert Bytes to String in Python: A Tutorial for Beginners](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[将字节转换为 Python 字符串：初学者教程](https://www.kdnuggets.com/convert-bytes-to-string-in-python-a-tutorial-for-beginners)'
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 基础：语法、数据类型和控制结构](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
- en: '[How to Get Your First Job in Data Science without Any Work Experience](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何在没有任何工作经验的情况下获得数据科学的第一份工作](https://www.kdnuggets.com/2021/02/first-job-data-science-without-work-experience.html)'
- en: '[Find a Picture in an Image Without Marking it Up](https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在图像中找到一张图片而不做标记](https://www.kdnuggets.com/2022/09/find-picture-image-without-marking.html)'
