["```py\nlibrary(reticulate)\nvirtualenv_create(\"virtualenv\", python = \"/path/to/your/python3\")\n\ninstall.packages(“tensorflow”) #This is only done once!\n\nlibrary(tensorflow)\n\ninstall_tensorflow(envname = \"/path/to/your/virtualenv\", version = \"cpu\")\n\ninstall.packages(“keras”) #do this once!\n\nlibrary(keras)\n\ninstall_keras(envname = \"/path/to/your/virtualenv\")\n\n# confirm the installation was successful\ntf$constant(\"Hello TensorFlow!\")\n```", "```py\nlibrary(dplyr)\nlibrary(keras)\nlibrary(caTools)\n```", "```py\nurl <- “https://raw.githubusercontent.com/oyogo/salary_dashboard/master/data/salary_data_cleaned.csv”\n\nsalary_data <- read.csv(url)\n```", "```py\nsalary_data <- salary_data %>% select(age,professional_experience_years,gender,highest_edu_level,annual_salary) \n```", "```py\n# create an encoder function\nencode_ordinal <- function(x, order = unique(x)) {\n  x <- as.numeric(factor(x, levels = order, exclude = NULL))\n}\n\nsalary_data <- salary_data %>% mutate(\n  highest_edu_level = encode_ordinal(highest_edu_level, order = c(\"High School\",\"College degree\",\"Master's degree\",\"Professional degree (MD, JD, etc.)\",\"PhD\")),\n  professional_experience_years = encode_ordinal(professional_experience_years, \n  order = c(\"1 year or less\", \"2 - 4 years\",\"5-7 years\",  \"8 - 10 years\", \"11 - 20 years\", \"21 - 30 years\", \"31 - 40 years\", \"41 years or more\")),\n  age = encode_ordinal(age, order = c( \"under 18\", \"18-24\",\"25-34\", \"35-44\", \"45-54\", \"55-64\",\"65 or over\")),\n  gender = case_when(gender== \"Woman\" ~ 0,\n                 \tgender == \"Man\" ~ 1))\n```", "```py\nsalary_data <- salary_data %>%\n  mutate(categories = case_when(\n\tannual_salary <= 100000 ~ 0,\n\tannual_salary > 100000 ~ 1))\n\nsalary_data <- salary_data %>% select(-annual_salary)\n```", "```py\nset.seed(123)\n\nsample_split <- sample.split(Y = salary_data$categories, SplitRatio = 0.7)\ntrain_set <- subset(x=salary_data, sample_split == TRUE)\ntest_set <- subset(x = salary_data, sample_split == FALSE)\n\ny_train <- train_set$categories\ny_test <- test_set$categories\nx_train <- train_set %>% select(-categories)\nx_test <- test_set %>% select(-categories)\n```", "```py\nx <- as.matrix(apply(x_train, 2, function(x) (x-min(x))/(max(x) - min(x))))\n\ny <- to_categorical(y_train, num_classes = 2)\n```", "```py\nmodel = keras_model_sequential()\n```", "```py\nmodel %>%\n  layer_dense(input_shape = ncol(x), units = 10, activation = \"relu\") %>%\n  layer_dense(units = 10, activation = \"relu\") %>%\n  layer_dense(units = 2, activation = \"sigmoid\")\n```", "```py\nmodel %>%\n  compile(\n\tloss = \"binary_crossentropy\",\n\toptimizer = \"adagrad\",\n\tmetrics = \"accuracy\"\n)\n```", "```py\nfit = model %>%\n  fit(\n\tx = x,\n\ty = y,\n\tshuffle = T,\n\tvalidation_split = 0.2,\n\tepochs = 100,\n\tbatch_size = 5\n)\n```", "```py\ny_test <- to_categorical(y_test, num_classes = 2)\nmodel %>% evaluate(as.matrix(x_test),y_test)\n```", "```py\nmodel %>% predict(as.matrix(x_test))\n```"]