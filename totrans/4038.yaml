- en: Too Many Python Versions to Manage? Pyenv to the Rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Too Many Python Versions to Manage? Pyenv to the Rescue](../Images/2139531f43a05fc40e1648d1dbb6ffed.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: Want to spend your morning trying out the new features in the latest Python
    version…And your lunch break sifting through a legacy Python codebase—all without
    breaking your development environment?
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it is possible. And [Pyenv](https://github.com/pyenv/pyenv) is here to
    help. With Pyenv, you can install Python versions, switch between versions, and
    remove versions that you no longer need.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial is a quick introduction to setting up and using Pyenv. So let’s
    get started!
  prefs: []
  type: TYPE_NORMAL
- en: Installing Pyenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to install Pyenv. I use Linux: Ubuntu 23.01\. So, if you
    are on a Linux machine, the simplest way to install Pyenv is by running the following
    `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This installs Pyenv using the [pyenv-installer](https://github.com/pyenv/pyenv-installer).
  prefs: []
  type: TYPE_NORMAL
- en: 'After the installation is complete, you’ll be prompted to finish setting up
    your shell environment to use Pyenv. To do so, you can add the following command
    to your `~/.bashrc` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: And you’re all set to start using Pyenv!
  prefs: []
  type: TYPE_NORMAL
- en: '**Note**: If you are on a Mac or a Windows machine, check out these detailed
    instructions on [how to install Pyenv](https://github.com/pyenv/pyenv#installation).
    On Windows, you need to install Pyenv in the Windows Subsystem for Linux (WSL).'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Installing Python Versions with Pyenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you’ve installed Pyenv, you can install specific Python versions by
    running the `pyenv install` command like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To check the list of installed Python versions, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'I haven’t installed any new version yet, so the only version of Python is the
    system version. Which is Python 3.11 in my case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s try to install Python 3.8 and 3.12\. Try running this command to install
    Python 3.8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The first time you try to install a specific version of Python with Pyenv, you
    may probably run into errors. Because of some missing build dependencies. No worries.
    It’s easy to fix!
  prefs: []
  type: TYPE_NORMAL
- en: ⚙️ Some Troubleshooting Tips
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When trying to install Pyenv on my Linux distro using the `pyenv install` command,
    I ran into errors because of missing build dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '[This StackOverflow thread](https://stackoverflow.com/questions/60775172/pyenvs-python-is-missing-bzip2-module)
    contains helpful information on installing the required build dependencies for
    Pyenv. Run the following command to install the missing dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You should now be able to install the Python versions without any errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: When you install Python 3.x, by default, the most recent release
    is installed. But you also have more granular control and can specify 3.x.y for
    installing a specific release of a Python version. You can also run `pyenv install
    --list` to get a list of all available Python versions to install. This, however,
    is a very *long* list.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Similarly run `pyenv install` to install Python 3.12:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you run `pyenv versions` you’ll see Python 3.8 and 3.12 in addition
    to the system version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Setting Global Python Version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Pyenv, you can set a **global** Python version. As the name suggests, the
    global version is the version of Python that’s used anytime you use Python at
    the command line.
  prefs: []
  type: TYPE_NORMAL
- en: But be careful to set it to a relatively recent version to avoid errors when
    running projects that use newer Python versions.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let's see what happens if we set the global version to Python 3.8.18.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a project folder. In it, create a main.py file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'As seen, this code uses the match-case statement which was introduced in Python
    3.10\. So you need Python 3.10 or a later version for this code to run successfully.
    If you try running the script, you’ll get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In my case, the system Python is version 3.11 which is quite recent. So I can
    set the global version to the system Python version like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When you now running the same script, you should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: If your system Python is an older version, say Python 3.6 or earlier, it's helpful
    to install a more recent version of Python and set it as the global version.
  prefs: []
  type: TYPE_NORMAL
- en: Setting Local Python Version for Your Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you want to work on projects that use earlier versions of Python, you’ll
    want to install that version to avoid any errors (like method calls that are no
    longer supported).
  prefs: []
  type: TYPE_NORMAL
- en: Say you want to use Python 3.8 when working on project A, and Python 3.10 or
    later when working on project B.
  prefs: []
  type: TYPE_NORMAL
- en: '![Too Many Python Versions to Manage? Pyenv to the Rescue](../Images/784d50c72897ae279e6b24fb94dce3bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: 'In such cases, you can set the local Python version in the project A''s directory
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'You can run `python --version` to check the Python version in the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This is especially helpful when working on older Python codebases.
  prefs: []
  type: TYPE_NORMAL
- en: Uninstalling a Python Version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you no longer need a Python version, you can uninstall it by running the
    `pyenv uninstall` command. Say we don’t need Python 3.8.18 anymore, so we can
    uninstall it by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see a similar output at the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Wrapping Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'I hope you found this introductory tutorial on Pyenv helpful. Let''s review
    some of the most common commands for quick reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Command** | **Function** |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv versions` | Lists all Python versions currently installed |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv install --list` | Lists all Python versions available to install |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv install 3.x` | Installs the latest release of Python 3.x |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv install 3.x.y` | Installs release y of Python 3.x |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv global 3.x` | Sets Python 3.x as the global Python version |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv local 3.x` | Sets the local Python version for your project to 3.x
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pyenv uninstall 3.x.y` | Uninstalls release y of Python 3.x |'
  prefs: []
  type: TYPE_TB
- en: In case you’re wondering. Yes, you can [use Docker](/2023/07/docker-tutorial-data-scientists.html)
    which is an excellent option to make local development a breeze—without worrying
    about dependency conflicts. But you’d probably feel it’s overkill to use Docker
    or other containerization solutions everytime you need to work on a new project.
  prefs: []
  type: TYPE_NORMAL
- en: So I think it is still helpful to be able to install, manage, and switch between
    Python versions at the command-line. You can also explore the [pyenv-virtualenv](https://github.com/pyenv/pyenv-virtualenv)
    plug-in to create and manage virtual environments. Happy coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How To Use Docker Tags to Manage Image Versions Effectively](https://www.kdnuggets.com/how-to-use-docker-tags-to-manage-image-versions-effectively)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why Are So Many Data Scientists Quitting Their Jobs?](https://www.kdnuggets.com/2022/03/many-data-scientists-quitting-jobs.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Manage Multiple Inheritance in Python](https://www.kdnuggets.com/2022/03/manage-multiple-inheritance-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Be prepared to manage the threat with an MS in Cybersecurity from…](https://www.kdnuggets.com/2022/07/baypath-prepared-manage-threat-ms-cybersecurity.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Top 10 MLOps Tools to Optimize & Manage Machine Learning Lifecycle](https://www.kdnuggets.com/2022/10/top-10-mlops-tools-optimize-manage-machine-learning-lifecycle.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Be prepared to manage the threat with an MS in Cybersecurity from…](https://www.kdnuggets.com/2022/12/baypath-prepared-manage-threat-ms-cybersecurity.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
