- en: How (Not) To Use Python’s Walrus Operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator](https://www.kdnuggets.com/how-not-to-use-pythons-walrus-operator)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![How (Not) To Use Python''s Walrus Operator](../Images/0d9a37d36fa593592caba94c177311ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author | Created on Snappify
  prefs: []
  type: TYPE_NORMAL
- en: In Python, if you want to assign values to variables within an expression, you
    can use the Walrus operator :=. While `x = 5` is a simple variable assignment,
    `x := 5` is how you'll use the Walrus operator.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: This operator was introduced in Python 3.8 and can help you write more concise
    and potentially more readable code (in some cases). However, using it when not
    necessary or more than necessary can also make code harder to understand.
  prefs: []
  type: TYPE_NORMAL
- en: In this tutorial, we will explore both the effective and the not-so-effective
    uses of the Walrus operator with simple code examples. Let’s get started!
  prefs: []
  type: TYPE_NORMAL
- en: How and When Python’s Walrus Operator is Helpful
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s start by looking at examples where the walrus operator can make your code
    better.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. More Concise Loops
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It's quite common to have loop constructs where you read in an input to process
    within the loop and the looping condition depends on the input. In such cases,
    using the walrus operator helps you keep your loops cleaner.
  prefs: []
  type: TYPE_NORMAL
- en: '**Without Walrus Operator**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When you run the above code, you’ll be repeatedly prompted to input a value
    so long as you input a non-empty string.
  prefs: []
  type: TYPE_NORMAL
- en: Note that there is redundancy. You initially read in the input to the `data`
    variable. Within the loop, you print out the entered value and prompt the user
    for input again. The looping condition checks if the string is non-empty.
  prefs: []
  type: TYPE_NORMAL
- en: '**With Walrus Operator**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can remove the redundancy and rewrite the above version using the walrus
    operator. To do so, you can read in the input and check if it is a non-empty string—all
    within the looping condition—using the walrus operator like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now this is more concise than the first version.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Better List Comprehensions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: You’ll sometimes have function calls within list comprehensions. This can be
    inefficient if there are multiple expensive function calls. In these cases, rewriting
    using the walrus operator can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: '**Without Walrus Operator**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the following example where there are two calls to the `compute_profit`
    function in the list comprehension expression:'
  prefs: []
  type: TYPE_NORMAL
- en: To populate the new list with the profit value and
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To check if the profit value is above a specified threshold.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**With Walrus Operator**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can assign the return values from the function call to the `profit` variable
    and use that the populate the list like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This version is better if the filtering condition involves an expensive function
    call.
  prefs: []
  type: TYPE_NORMAL
- en: How Not to Use Python's Walrus Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we’ve seen a few examples of how and when you can use Python’s walrus
    operator, let’s see a few anti-patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Complex List Comprehensions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: We used the walrus operator within a list comprehension to avoid repeated function
    calls in a previous example. But overusing the walrus operator can be just as
    bad.
  prefs: []
  type: TYPE_NORMAL
- en: The following list comprehension is hard to read due to multiple nested conditions
    and assignments.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As an exercise, you can try breaking down the logic into separate steps—within
    a regular loop and if conditional statements. This will make the code much easier
    to read and maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Nested Walrus Operators
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using nested walrus operators can lead to code that is difficult to both read
    and maintain. This is particularly problematic when the logic involves multiple
    assignments and conditions within a single expression.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the nested walrus operators make it difficult to understand—requiring
    the reader to unpack multiple layers of logic within a single line, reducing readability.
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this quick tutorial, we went over how and when to and when not to use Python's
    walrus operator. You can find the code examples [on GitHub](https://github.com/balapriyac/python-basics/tree/main/walrus-operator).
  prefs: []
  type: TYPE_NORMAL
- en: If you're looking for common gotchas to avoid when programming with Python,
    read [5 Common Python Gotchas and How to Avoid Them](https://www.kdnuggets.com/5-common-python-gotchas-and-how-to-avoid-them).
  prefs: []
  type: TYPE_NORMAL
- en: Keep coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[SQL LIKE Operator Examples](https://www.kdnuggets.com/2022/09/sql-like-operator-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Why You Should Not Overuse List Comprehensions in Python](https://www.kdnuggets.com/why-you-should-not-overuse-list-comprehensions-in-python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dask DataFrame is not Pandas](https://www.kdnuggets.com/2021/11/dask-dataframe-not-pandas.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Machine learning does not produce value for my business. Why?](https://www.kdnuggets.com/2021/12/machine-learning-produce-value-business.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Not-so-Sexy SQL Concepts to Make You Stand Out](https://www.kdnuggets.com/2022/02/not-so-sexy-sql-concepts-stand-out.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Fear not, for AI coding is here to help you!](https://www.kdnuggets.com/2023/03/manning-fear-not-ai-coding-help-you.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
