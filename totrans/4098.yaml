- en: Python Lambda Functions, Explained
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html](https://www.kdnuggets.com/2023/01/python-lambda-functions-explained.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Python Lambda Functions, Explained](../Images/0ad70492b45ee5b7fe82629b3ae46a5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: Since the advent of computer programming, functions have played a key role by
    offering advantages such as reusability, readability, modularity, error reduction,
    and easy modification. Reusability is considered one of the most useful traits
    of a function but what if I tell you there are functions that are not reusable
    but still useful? To find out, read along!
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Lambda Functions and their Syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lambda function does not have a name and is an immediately invoked function.
    It can accept any number of arguments but returns only one expression, unlike
    regular functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax of the lambda function, as shown above, has three elements:'
  prefs: []
  type: TYPE_NORMAL
- en: The keyword “lambda” — it is analogous to ‘def’ in user-defined functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: parameters — analogous to arguments in normal functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: expression — it is the operation that gets evaluated to arrive at the result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike regular functions, the parameters are not surrounded by parentheses in
    lambda functions. Considering that the expression is a one-liner, it needs to
    be short but at the same time must perform the required operations over the parameters.
    A lambda function is consumed at the definition and thus cannot be reused without
    explicitly defining again.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, a lambda function is passed as an argument to a higher-order function
    such as Python built-in functions – filter(), map(), or reduce(). But what is
    a higher-order function?
  prefs: []
  type: TYPE_NORMAL
- en: A higher-order function is defined as a function that takes in other functions
    as arguments (discussed in subsequent sections).
  prefs: []
  type: TYPE_NORMAL
- en: Uses and Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are acquainted with the syntax, it’s time to understand the lambda
    functions with a simple example. Let’s say you want to find the square of a number.
    You can either define a function “square” or write a lambda function as shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The lambda function above accepts a single argument x and returns its square.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a Lambda Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Calling a lambda function is as simple as wrapping the construction of the lambda
    function first, followed by the argument in the parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Calling With Multiple Arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a lambda function with multiple arguments, the input parameters are separated
    by a comma. The corresponding arguments follow the same order at the time of execution.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Single Conditional Statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also perform conditional operations such as if-else block as shown
    the below example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Nested Conditional Statement
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because these are one-liner functions, conditional nesting is performed with
    the help of round braces rather than indentation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The user-defined function corresponding to the above lambda function looks like
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note that user-defined functions are a better choice in a nested condition scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning to a Variable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A lambda function can also be assigned to a variable and called like a user-defined
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Even though it is possible to assign the function to a variable, it is sparingly
    used as it defeats the sole purpose of a lambda function i.e. immediate invocation.
    Variable assignment is rather useful when using lambda function inside another
    function.
  prefs: []
  type: TYPE_NORMAL
- en: String Concatenation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thw following example shows how to concatenate the two strings – where you print
    a welcome message with the person’s name that is passed as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Nested Function
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Lambda function is most powerful when used inside another function.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s consider an example of a user-defined function that takes a single argument
    which is used as an exponent of any number.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Calling by an Underscore
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Time for some magic! Let’s us go through another way to call a lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: What just happened here? Once you define the lambda function which is essentially
    an anonymous function, it is called using an “_” and the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Using with map()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Lambda functions are used quite often as a map() functions argument. It maps
    a sequence to a function and doesn’t require explicit definition (especially for
    trivial operation like the one shown below)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The map() maps the sequence from 1 to 10 to the lambda function and returns
    the square of all the elements of the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Using with reduce()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A reduce function operates on all the elements of the sequence with the operation
    defined in the lambda function to return a single output value. The example multiplies
    all the elements of the sequence from 1 to 4 and computes the output as 1*2*3*4
    = 24.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Lets examine another example where reduce is used with a lambda function to
    return the greater of the two elements. When a list is passed as the second argument,
    it returns the largest number from the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Using with filter()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another great use of lambda functions is with filter(). The lambda function
    returns True if the number is odd in the following example. When used with the
    filter, it returns all odd numbers in the list.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Lambda functions are very handy and save a lot of coding effort. The post explained
    the syntax of the lambda function and how it is different from a user-defined
    function. Hope you found it useful to get started with the basics of lambda functions.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Vidhi Chugh](https://vidhi-chugh.medium.com/)** is an AI strategist and
    a digital transformation leader working at the intersection of product, sciences,
    and engineering to build scalable machine learning systems. She is an award-winning
    innovation leader, an author, and an international speaker. She is on a mission
    to democratize machine learning and break the jargon for everyone to be a part
    of this transformation.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Statistical Functions in Python](https://www.kdnuggets.com/2022/10/statistical-functions-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Python Itertools Filter Functions You Probably Didn''t Know](https://www.kdnuggets.com/2023/08/4-python-itertools-filter-functions-probably-didnt-know.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Tips for Writing Better Python Functions](https://www.kdnuggets.com/5-tips-for-writing-better-python-functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[10 Python Statistical Functions](https://www.kdnuggets.com/10-python-statistical-functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, July 20: Machine Learning Algorithms Explained in…](https://www.kdnuggets.com/2022/n29.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[What are Moment-Generating Functions?](https://www.kdnuggets.com/2022/12/momentgenerating-functions.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
