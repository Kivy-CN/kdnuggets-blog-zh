- en: How To Navigate the Filesystem with Python’s Pathlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/how-to-navigate-the-filesystem-with-pythons-pathlib](https://www.kdnuggets.com/how-to-navigate-the-filesystem-with-pythons-pathlib)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![pathlib](../Images/0cfef492124b3397208b71330312bdc2.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Author
  prefs: []
  type: TYPE_NORMAL
- en: In Python, using regular strings for filesystem paths can be a pain, especially
    if you need to perform operations on the path strings. Switching to a different
    operating system causes breaking changes to your code, too. Yes, you can use [os.path](https://docs.python.org/3/library/os.path.html)
    from the [os module](https://docs.python.org/3/library/os.html) to make things
    easier. But the [pathlib](https://docs.python.org/3/library/pathlib.html) module
    makes all of this much more intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: The pathlib module introduced in Python 3.4 (yeah, it’s been around for a while)
    allows for an OOP approach that lets you create and work with path objects, and
    comes with batteries included for common operations such as joining and manipulating
    paths, resolving paths, and more.
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial will introduce you to working with the file system using the pathlib
    module. Let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Path Objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start using pathlib, you first need to import the `Path` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Which allows you to instantiate path objects for creating and manipulating file
    system paths.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Path Objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can create a `Path` object by passing in a string representing the path
    like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create new path objects from existing paths as well. For instance,
    you can create path objects from your home directory or the current working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This should give you a similar output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Suppose you have a base directory and you want to create a path to a file within
    a subdirectory. Here’s how you can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This first creates a path object for the base directory: `/home/balapriya/Documents`.
    **Remember to replace this base path with a valid filesystem path in your working
    environment**.'
  prefs: []
  type: TYPE_NORMAL
- en: It then creates `subdirectory_path` by joining `base_path` with the subdirectories
    `projects` and `project1`. Finally, the `file_path` is created by joining `subdirectory_path`
    with the filename `report.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: As seen, you can use the `/` operator to append a directory or file name to
    the current path, creating a new path object. Notice how the overloading of the
    `/` operator provides a readable and intuitive way to join paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you run the above code, it''ll output the following paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Checking Status and Path Types
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you have a valid path object, you can call simple methods on it to check
    the status and type of the path.
  prefs: []
  type: TYPE_NORMAL
- en: 'To check if a path exists, call the `exists()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: If the path exists, it outputs `True`; else, it returns `False`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check if a path is a file or directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: An object of the `Path` class creates a concrete path for your operating
    system. But you can also use `PurePath` when you need to handle paths without
    accessing the filesystem, like working with Windows path on a Unix machine.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Navigating the Filesystem
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Navigating the filesystem is pretty straightforward with pathlib. You can iterate
    over the contents of directories, rename and resolve paths, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can call the `iterdir()` method on the path object like so to iterate over
    all the contents of a directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Renaming Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can rename files by calling the `rename()` method on the path object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we rename `test.py` in the `project1` directory to `tests.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can now `cd` into the `project1` directory to check if the file has been
    renamed.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting Files and Directories
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also delete a file and remove empty directories with the `unlink()`
    to and `rmdir()` methods, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '**Note**: Well, in case deleting empty directories got you curious about creating
    them. Yes, you can also create directories with `mkdir()` like so: `path.mkdir(parents=True,
    exist_ok=True)`. The `mkdir()` method creates a new directory. Setting `parents=True`
    allows the creation of parent directories as needed, and `exist_ok=True` prevents
    errors if the directory already exists.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Resolving Absolute Paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes, it’s easier to work with relative paths and expand to the absolute
    path when needed. You can do it with the `resolve()` method, and the syntax is
    super simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: File Globbing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Globbing is super helpful for finding files matching specific patterns. Let’s
    take a sample directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s try to find all the text files using `glob()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Surprisingly, we don’t get the text files. The list is empty:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: It’s because these text files are in the subdirectory and glob doesn’t search
    through subdirectories. Enter recursive globbing with `rglob()`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `rglob()` method performs a recursive search for all text files in the
    directory and all its subdirectories. So we should get the expected output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: And that's a wrap!
  prefs: []
  type: TYPE_NORMAL
- en: Wrapping Up
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tutorial, we've explored the pathlib module and how it makes file system
    navigation and manipulation in Python accessible. We’ve covered enough ground
    to help you create and work with filesystem paths in Python scripts.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code used in this tutorial [on GitHub](https://github.com/balapriyac/python-basics/tree/main/pathlib-tutorial).
    In the next tutorial, we’ll look at interesting practical applications. Until
    then, keep coding!
  prefs: []
  type: TYPE_NORMAL
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[How to Navigate the Filesystem Using Bash](https://www.kdnuggets.com/how-navigate-filesystem-bash)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Organize, Search, and Back Up Files with Python''s Pathlib](https://www.kdnuggets.com/organize-search-and-back-up-files-with-pythons-pathlib)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[4 Career Lessons That Helped Me Navigate the Difficult Job Market](https://www.kdnuggets.com/2023/05/4-lessons-made-difference-navigating-current-job-market.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI Con USA: Navigate the Future of AI](https://www.kdnuggets.com/2024/02/techwell-ai-con-usa-navigate-the-future-of-ai)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI Con USA: Navigate the Future of AI 2024](https://www.kdnuggets.com/2024/04/ai-con-usa-navigate-the-future-of-ai)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Optimizing Python Code Performance: A Deep Dive into Python Profilers](https://www.kdnuggets.com/2023/02/optimizing-python-code-performance-deep-dive-python-profilers.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
