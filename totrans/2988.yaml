- en: Artificial Neural Network Implementation using NumPy and Image Classification
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html/2](https://www.kdnuggets.com/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html/2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](/2019/02/artificial-neural-network-implementation-using-numpy-and-image-classification.html?page=2#comments)'
  prefs: []
  type: TYPE_IMG
- en: ANN Implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next figure visualizes the target ANN structure. There is an input layer
    with 102 inputs, 2 hidden layers with 150 and 60 neurons, and an output layer
    with 4 outputs (one for each fruit class).
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/713689ba5ab8a28eaf6a6aad078bdfe1.png)'
  prefs: []
  type: TYPE_IMG
- en: The input vector at any layer is multiplied (matrix multiplication) by the weights
    matrix connecting it to the next layer to produce an output vector. Such an output
    vector is again multiplied by the weights matrix connecting its layer to the next
    layer. The process continues until reaching the output layer. Summary of the matrix
    multiplications is in the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5877059b505795d9234a289831d0fbb4.png)'
  prefs: []
  type: TYPE_IMG
- en: The input vector of size 1x102 is to be multiplied by the weights matrix of
    the first hidden layer of size 102x150\. Remember it is matrix multiplication.
    Thus, the output array shape is 1x150\. Such output is then used as the input
    to the second hidden layer, where it is multiplied by a weights matrix of size
    150x60\. The result size is 1x60\. Finally, such output is multiplied by the weights
    between the second hidden layer and the output layer of size 60x4\. The result
    finally has a size of 1x4\. Every element in such resulted vector refers to an
    output class. The input sample is labeled according to the class with the highest
    score.
  prefs: []
  type: TYPE_NORMAL
- en: The Python code for implementing such multiplications is in listed below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After reading the previously saved features and their output labels and filtering
    the features, the weights matrices of the layers are defined. They are randomly
    given values from -0.1 to 0.1\. For example, the variable **"input_HL1_weights"**
    holds the weights matrix between the input layer and the first hidden layer. Size
    of such matrix is defined according to the number of feature elements and the
    number of neurons in the hidden layer.
  prefs: []
  type: TYPE_NORMAL
- en: After creating the weights matrices, next is to apply matrix multiplications.
    For example, the variable **"H1_outputs"** holds the output of multiplying the
    feature vector of a given sample to the weights matrix between the input layer
    and the first hidden layer.
  prefs: []
  type: TYPE_NORMAL
- en: Usually, an activation function is applied to the outputs of each hidden layer
    to create a non-linear relationship between the inputs and the outputs. For example,
    outputs of the matrix multiplications are applied to the sigmoid activation function.
  prefs: []
  type: TYPE_NORMAL
- en: After generating the output layer outputs, prediction takes place. The predicted
    class label is saved into the **"predicted_label"** variable. Such steps are repeated
    for each input sample. The complete code that works across all samples is given
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The **"weights"** variables hold all weights across the entire network. Based
    on the size of each weight matrix, the network structure is dynamically specified.
    For example, if the size of the **"input_HL1_weights"** variable is 102x80, then
    we can deduce that the first hidden layer has 80 neurons.
  prefs: []
  type: TYPE_NORMAL
- en: The **"train_network"** is the core function as it trains the network by looping
    through all samples. For each sample, the steps discussed in listing 3-6 are applied.
    It accepts the number of training iterations, feature, output labels, weights,
    learning rate, and the activation function. There are two options for the activation
    functions which are either ReLU or sigmoid. ReLU is a thresholding function that
    returns the same input as long as it is greater than zero. Otherwise, it returns
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: If the network made a false prediction for a given sample, then weights are
    updated using the **"update_weights"** function. No optimization algorithm is
    used to update the weights. Weights are simply updated according to the learning
    rate. The accuracy does not exceed 45%. For achieving better accuracy, an optimization
    algorithm is used for updating the weights. For example, you can find the gradient
    descent technique in the ANN implementation of the scikit-learn library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In my book, you can find a guide for optimizing the ANN weights using the genetic
    algorithm (GA) optimization technique which increases the classification accuracy.
    You can read more about GA from the following resources I prepared:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Optimization with Genetic Algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/](https://www.linkedin.com/pulse/introduction-optimization-genetic-algorithm-ahmed-gad/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.kdnuggets.com/2018/03/introduction-optimization-with-genetic-algorithm.html](/2018/03/introduction-optimization-with-genetic-algorithm.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b](https://towardsdatascience.com/introduction-to-optimization-with-genetic-algorithm-2f5001d9964b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.springer.com/us/book/9781484241660](https://www.springer.com/us/book/9781484241660)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Genetic Algorithm (GA) Optimization - Step-by-Step Example
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example](https://www.slideshare.net/AhmedGadFCIT/genetic-algorithm-ga-optimization-stepbystep-example)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Genetic Algorithm Implementation in Python
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/](https://www.linkedin.com/pulse/genetic-algorithm-implementation-python-ahmed-gad/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.kdnuggets.com/2018/07/genetic-algorithm-implementation-python.html](/2018/07/genetic-algorithm-implementation-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6](https://towardsdatascience.com/genetic-algorithm-implementation-in-python-5ab67bb124a6)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://github.com/ahmedfgad/GeneticAlgorithmPython](https://github.com/ahmedfgad/GeneticAlgorithmPython)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For contacting the author
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'LinkedIn: [https://www.linkedin.com/in/ahmedfgad](https://www.linkedin.com/in/ahmedfgad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Facebook: [https://www.facebook.com/ahmed.f.gadd](https://www.facebook.com/ahmed.f.gadd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Twitter: [https://twitter.com/ahmedfgad](https://twitter.com/ahmedfgad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Towards Data Science: [https://towardsdatascience.com/@ahmedfgad](https://towardsdatascience.com/@ahmedfgad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'KDnuggets: [https://www.kdnuggets.com/author/ahmed-gad](/author/ahmed-gad)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'E-mail: ahmed.f.gad@gmail.com'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Original](https://www.linkedin.com/pulse/artificial-neural-network-implementation-using-numpy-fruits360-gad/).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Neural Networks - an Intuition](https://www.kdnuggets.com/2019/02/neural-networks-intuition.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Create a Simple Neural Network in Python](https://www.kdnuggets.com/2018/10/simple-neural-network-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Building Convolutional Neural Network using NumPy from Scratch](https://www.kdnuggets.com/2018/04/building-convolutional-neural-network-numpy-scratch.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Image Classification with Convolutional Neural Networks (CNNs)](https://www.kdnuggets.com/2022/05/image-classification-convolutional-neural-networks-cnns.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
