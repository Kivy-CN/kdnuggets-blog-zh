["```py\n# processing\nimport d6tflow, d6tpipe\n\nimport pandas as pd\nimport numpy as np\nimport pathlib\n\n# viz\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nimport matplotlib\n\n# modeling\nimport statsmodels.api as sm\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.inspection import plot_partial_dependence\nfrom sklearn.model_selection import cross_validate\nimport lightgbm\nimport shap\n```", "```py\napi = d6tpipe.APIClient()\npipe = d6tpipe.Pipe(api, 'intro-stat-learning')\npipe.pull()\n```", "```py\n# preprocessing workflow\n\nclass TaskProcessRawData(d6tflow.tasks.TaskPqPandas):\n\n    def run(self):\n        df = pd.read_csv(pipe.dirpath/'Advertising.csv', usecols=[1,2,3,4])\n        self.save(df)\n\n@d6tflow.requires(TaskProcessRawData)\nclass TaskFeatures(d6tflow.tasks.TaskPqPandas):\n\n    def run(self):\n        df = self.inputLoad()\n        df['target']=df['sales']\n        df['radio']=-df['radio'] # force negative relationship\n        df['tv_radio']=df['TV']*df['radio'] # interaction effect\n        self.save(df)\n\nprint('preprocessing workflow:')\nd6tflow.preview([TaskFeatures()]) \n```", "```py\npreprocessing workflow:\n\n└─--[TaskFeatures-{} (COMPLETE)]\n   └─--[TaskProcessRawData-{} (COMPLETE)] \n```", "```py\ndf_train = TaskFeatures().outputLoad()\ncfg_col_X = ['TV', 'radio', 'newspaper'] # base features\ncfg_col_X_interact =  cfg_col_X+['tv_radio'] # includes interaction variable\ncfg_col_Y = 'target'\ndf_trainX, df_trainY = df_train[cfg_col_X], df_train[cfg_col_Y]\n```", "```py\ndfp = df_train.melt(id_vars=cfg_col_Y,value_vars=cfg_col_X)\nsns.lmplot(x=\"value\", y=\"target\", col=\"variable\", data=dfp, sharex=False);\n```", "```py\nm_lgbm = lightgbm.LGBMRegressor()\nm_lgbm.fit(df_trainX,df_trainY)\n```", "```py\nlightgbm.plot_importance(m_lgbm); \n```", "```py\nexplainer = shap.TreeExplainer(m_lgbm, df_trainX)\nshap_values = explainer.shap_values(df_trainX)\n```", "```py\nshap.summary_plot(shap_values, df_trainX, plot_size=(12,6))\n```", "```py\nfor col in cfg_col_X:\n    shap.dependence_plot(col, shap_values, df_trainX)\n```", "```py\nmatplotlib.rcParams['figure.figsize'] = (12,6)\nplot_partial_dependence(m_lgbm, df_trainX, range(df_trainX.shape[1])) \n```", "```py\nshap.force_plot(explainer.expected_value, shap_values[-1,:], df_trainX.iloc[-1,:],matplotlib=True)\n```"]