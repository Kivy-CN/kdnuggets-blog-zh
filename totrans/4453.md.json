["```py\n**class** **RMSE**(TensorMetric):\n    **def** **forward**(self, x, y):\n        **return** torch**.**sqrt(torch**.**mean(torch**.**pow(x**-**y, 2.0)))\n```", "```py\nTrainer(overfit_batches=1)\n```", "```py\nDataloader(dataset, num_workers=8)\n```", "```py\n# very fast :)\nTrainer(distributed_backend='ddp')# very slow\nTrainer(distributed_backend='ddp_spawn')\n```", "```py\nmodel = Model()\ntrainer = Trainer()\ntrainer.fit(model)# automatically loads the best weights!\ntrainer.test()\n```", "```py\nconda install pytorch-lightning -c conda-forge\n```", "```py\nckpt_callback = ModelCheckpoint(...)\ntrainer = Trainer(model_checkpoint=ckpt_callback)\ntrainer.fit(model)best_weights = ckpt_callback.best_model_path\n```", "```py\nclass LitModel(LightningModule):                    @auto_move_data                \n    def forward(self, x):                    \n        return xmodel = LitModel()\nx = torch.rand(2, 3)\nmodel = model.cuda(2)# this works!\nmodel(x)\n```", "```py\nTrainer(tpu_cores=8)\n```"]