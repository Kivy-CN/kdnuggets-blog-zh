["```py\nimport pandas as pdstock = \"AAPL.US\"\nfrom_date = \"2018-01-01\"\nto_date = \"2021-10-29\"\nperiod = \"d\"eon_url = f\"[https://eodhistoricaldata.com/api/eod/{stock}?api_token=OeAFFmMliFG5orCUuwAKQ8l4WWFQ67YX&from={from_date}&to={to_date}&period={period}&fmt=json](https://eodhistoricaldata.com/api/eod/%7Bstock%7D?api_token=OeAFFmMliFG5orCUuwAKQ8l4WWFQ67YX&from={from_date}&to={to_date}&period={period}&fmt=json)\"df = pd.read_json(eon_url)\n```", "```py\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(14, 7))col = \"adjusted_close\"\ndf.plot(x=\"date\", y=col, ax=axes[0])\ndf[col].hist(ax=axes[1])\n```", "```py\ndf_sub = df[df[\"date\"] > \"2020-01-01\"].copy().reset_index(drop=True)\n```", "```py\nfrom scipy.signal import find_peakspeaks = find_peaks(df_sub[\"adjusted_close\"])\n```", "```py\ntroughs = find_peaks(-df_sub[\"adjusted_close\"])\n```", "```py\nax = df_sub.plot(x=\"date\", y=\"adjusted_close\", figsize=(14, 7))df_sub.iloc[peaks[0]].plot.scatter(x=\"date\", y=\"adjusted_close\", ax=ax, color=\"green\")df_sub.iloc[troughs[0]].plot.scatter(x=\"date\", y=\"adjusted_close\", ax=ax, color=\"red\")\n```", "```py\nnp.random.seed(42)normal_dist = pd.DataFrame(np.random.normal(size=1000), columns=[\"value\"])\n```", "```py\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(14, 7))normal_dist[\"value\"].plot(\n    ax=axes[0],\n    title=\"Random samples drawn from a normal (Gaussian) distribution\",\n)df.plot(x=\"date\", y=\"adjusted_close\", ax=axes[1], title=\"Apple stock time series\")\n```", "```py\nnp.random.seed(42)random_walk = pd.DataFrame()\nrandom_walk.loc[:, \"random_number\"] = np.random.choice([-1, 1], size=1000, replace=True)\n```", "```py\nrandom_walk.loc[:, \"random_walk\"] = random_walk[\"random_number\"].cumsum()\n```", "```py\nrandom_walk.loc[:, \"random_walk_apple\"] = random_walk[\"random_walk\"] + 34.55\n```", "```py\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(14, 14))df[\"adjusted_close\"].plot(ax=axes[0])\nrandom_walk[\"random_walk_apple\"].plot(ax=axes[1])\n```", "```py\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(14, 14))axes[0].set_title(\"Autocorrelation plot for Apple stock time series\")\npd.plotting.autocorrelation_plot(df[\"adjusted_close\"], ax=axes[0])axes[1].set_title(\"Autocorrelation plot for random walk time series\")\npd.plotting.autocorrelation_plot(random_walk[\"random_walk_apple\"], ax=axes[1])\n```", "```py\n# applying differencing operation\n# [1:] is used to remove the first value which is nullapple_stationary = df[\"adjusted_close\"].diff()[1:]\nrandom_walk_stationary = random_walk[\"random_walk_apple\"].diff()[1:]\n```", "```py\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(14, 14))apple_stationary.plot(ax=axes[0], title=\"Differenced time series of Apple stock\")random_walk_stationary.plot(ax=axes[1], title=\"Differenced time series of Random walk\")\n```", "```py\nfig, axes = plt.subplots(nrows=2, ncols=1, figsize=(14, 14))pd.plotting.autocorrelation_plot(apple_stationary, ax=axes[0])\npd.plotting.autocorrelation_plot(random_walk_stationary, ax=axes[1])\n```"]