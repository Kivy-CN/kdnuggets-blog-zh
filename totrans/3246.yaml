- en: Visualizing Cross-validation Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2017/09/visualizing-cross-validation-code.html](https://www.kdnuggets.com/2017/09/visualizing-cross-validation-code.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**By Sagar Sharma, Machine Learning & Programming Aficionado.**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Let’s **visualize** to improve your prediction...
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Let us say, you are writing a nice and clean Machine Learning code (e.g. Linear
    Regression). You code is OK, first you divided your dataset into two parts, "Training
    Set and Testing Set" as usual with the function like *train_test_split* and with
    some *random factor.* Your prediction could be slightly under or overfit, like
    the figures below.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3425a712530bcf37a18776cbb251bf67.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
- en: 'Fig: Under and Over-Fit Prediction'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: and the results are not changing. So what can we do?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: As the name of the suggests, cross-validation is the next fun thing after learning *Linear
    Regression* because it helps to improve your prediction using the ***K-Fold ***strategy.
    What is K-Fold you asked? Everything is explained below with **Code**.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The Full Code :)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/862d13b61c24b95bfc0a83acf5c73a6b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
- en: Fig:- Cross Validation with Visualization
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Code Insight:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The above code is divided into 4 steps...
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. **Load** and **Divide target** dataset.**'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f1632785ec3286feb4acdc97ff933ff7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Fig:- Load the dataset
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: We are copying the target in dataset to *y *variable*. *To see the dataset uncomment
    the *print* line.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '**2. **Model Selection****'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/9cb3fbf0b354307a044dbc5bca9c5a6d.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: Fig:- Model Selection (LinearRegression())
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'Just to make things simple we will use Linear Regression. To learn about it
    more click on “[Linear Regression: The Easier Way](https://medium.com/@sagarsharma4244/linear-regression-the-easier-way-6f941aa471ea)”
    Post.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '****3\. Cross-Validation :)****'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3729ba9dde456765097916cadb78ec05.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
- en: Fig:- Cross Validation in sklearn
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: It is a process and also a function in the sklearn
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '***cross_val_predict(model, data, target, cv)***'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: where,
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '***model ***is the model we selected on which we want to perform cross-validation'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***data ***is the data.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***target ***is the target values w.r.t. the data.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***cv ***(optional)is the total number of folds (a.k.a. *K-Fold *).'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this process, we don’t divide the data in two sets like usual (training and
    test set) like shown below.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/5f88a1806fea090e07c8bb58ad0f2d45.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Fig:- Train set (Blue)and Test set (Red)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: But we divide the dataset into equal *K* parts (*K-Folds or ****cv***). **To
    improve the prediction and to generalize better. **Then train the model on the
    bigger dataset and test on the smaller dataset. Let us say the ***cv***is **6.**
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/03671d968ab2c91aba90fbcc318ae9d5.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
- en: Fig:- 6 equal folds or parts
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Now, the first iteration of model splitting will look something like this where
    Red is test & Blue is Train data.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/81bd5213575407cd18fe40a51372c311.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
- en: Fig:- cross_val first iteration
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: The second iteration will look like the Figure below.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/172ea1378168318c02672a14fc801c99.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Fig:- cross_val second iteration
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: and so on till the last or 6th iteration that will look something like this
    figure below.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f25ad1806f5b1daed9bbd657fa41e2c8.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
- en: Fig:- cross_val sixth iteration
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '**4. **Visualize **the Data with **Matplotlib****'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/8b2665f4af6f0f63be3678a311f73a9d.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
- en: Fig:- Visualize with Matplotlib
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: For visualisation we are importing ***matplotlib* **library. Then making a ***subplot***.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Creating ***scatter* **points with black (i.e(0,0,0)) outline or *edgecolors*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Using ***ax.plot*** to give minimum & maximum values for both axis with '***k--***'
    representing the type of line with the line width i.e. ***lw******= 4***.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: Next, giving label to x and y axis.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: '***plt.show()*** at last to show the graph.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**The Result**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ef7295dd9cec83d8ec430b26adea9f12.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: Fig:- Prediction
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: This graph represents the k- folds Cross Validation for the Boston dataset with
    Linear Regression model.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: I’m sure there many types of cross validation that people implement but K-folds
    is a good and an easy type to start from.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: To get the full code go to this github link: [Github](https://github.com/Sagarsharma4244/Cross-Validation)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Follow me on [Medium](https://medium.com/@sagarsharma4244) to get similar posts.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: I will be posting 2 posts per week so don’t miss the Code tutorial.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: Contact me on [Facebook](https://www.facebook.com/profile.php?id=100003188718299),
    [Twitter](https://twitter.com/SagarSharma4244), [Linkedin](https://www.linkedin.com/in/sagar-sharma-232a06148/),
    [Google+](https://plus.google.com/+SAGARSHARMA4244).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Any comments or if you have any question, write it in the comment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Clap it! Share it! Follow Me !
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Happy to be helpful. kudos...
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Sagar Sharma](https://medium.com/@sagarsharma4244)** ([@SagarSharma244](https://twitter.com/SagarSharma4244))
    is interested in Programming (Python, C++), Arduino, Machine learning :). He also
    likes to write stuff.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/towards-data-science/cross-validation-code-visualization-kind-of-fun-b9741baea1f8).
    Reposted with permission.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: '[Understanding the Bias-Variance Tradeoff: An Overview](/2016/08/bias-variance-tradeoff-overview.html)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Making Predictive Models Robust: Holdout vs Cross-Validation](/2017/08/dataiku-predictive-model-holdout-cross-validation.html)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Understanding overfitting: an inaccurate meme in Machine Learning](/2017/08/understanding-overfitting-meme-supervised-learning.html)'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[理解过拟合：机器学习中的一个不准确的表述](/2017/08/understanding-overfitting-meme-supervised-learning.html)'
- en: More On This Topic
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Visualizing Your Confusion Matrix in Scikit-learn](https://www.kdnuggets.com/2022/09/visualizing-confusion-matrix-scikitlearn.html)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Scikit-learn 中可视化你的混淆矩阵](https://www.kdnuggets.com/2022/09/visualizing-confusion-matrix-scikitlearn.html)'
- en: '[Visualizing Data: A Statology Primer](https://www.kdnuggets.com/visualizing-data-statology-primer)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据可视化：Statology 入门](https://www.kdnuggets.com/visualizing-data-statology-primer)'
- en: '[A Brief Introduction to Papers With Code](https://www.kdnuggets.com/2022/04/brief-introduction-papers-code.html)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[简要介绍带有代码的论文](https://www.kdnuggets.com/2022/04/brief-introduction-papers-code.html)'
- en: '[KDnuggets News, April 27: A Brief Introduction to Papers With Code;…](https://www.kdnuggets.com/2022/n17.html)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[KDnuggets 新闻，4 月 27 日：简要介绍带有代码的论文；…](https://www.kdnuggets.com/2022/n17.html)'
- en: '[7 Things You Didn''t Know You Could do with a Low Code Tool](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[7 件你不知道可以用低代码工具做的事](https://www.kdnuggets.com/2022/09/7-things-didnt-know-could-low-code-tool.html)'
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加速你的 Python 代码的 3 种简单方法](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
