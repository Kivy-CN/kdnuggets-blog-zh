["```py\n# import seaborn library\n**import seaborn as sns**# load iris dataset\n**iris = sns.load_dataset('iris')\niris.head(5)**\n```", "```py\n# separate features (X) from the target (y) variable\n**X = iris.drop('species', axis=1)\ny = iris['species']**\n```", "```py\n# number of predictors in the current dataset\n**X.shape[1]**>> 4\n```", "```py\n# import modules **from sklearn.feature_selection import SelectKBest, chi2**# select K best features\n**X_best = SelectKBest(chi2, k=3).fit_transform(X,y)** \n```", "```py\n# number of best features\n**X_best.shape[1]**>> 3\n```", "```py\n# keep 75% top features \n**X_top = SelectPercentile(chi2, percentile = 75).fit_transform(X,y)**# number of best features\n**X_top.shape[1]**>> 3\n```", "```py\n# import model\n**from sklearn.ensemble import RandomForestClassifier**# instantiate model\n**model = RandomForestClassifier(n_estimators=200, random_state=0)**# fit model\n**model.fit(X,y)**\n```", "```py\n# importance of features in the model\n**importances = model.feature_importances_****print(importances)**>> array([0.0975945 , 0.02960937, 0.43589795, 0.43689817])\n```", "```py\n# calculate standard deviation of feature importances \n**std = np.std([i.feature_importances_ for i in model.estimators_], axis=0)**# visualization**feat_with_importance  = pd.Series(importances, X.columns)****fig, ax = plt.subplots()\nfeat_with_importance.plot.bar(yerr=std, ax=ax)\nax.set_title(\"Feature importances\")\nax.set_ylabel(\"Mean decrease in impurity\")\nfig.tight_layout()**\n```", "```py\n# import the transformer\n**from sklearn.feature_selection import SelectFromModel**# instantiate and select features\n**selector = SelectFromModel(estimator = model, prefit=True)\nX_new = selector.transform(X)\nX_new.shape[1]**>> 2\n```", "```py\n# implement algorithm\n**from sklearn.svm import LinearSVC\nmodel = LinearSVC(penalty= 'l1', C = 0.002, dual=False)\nmodel.fit(X,y)**# select features using the meta transformer\n**selector = SelectFromModel(estimator = model, prefit=True)\nX_new = selector.transform(X)\nX_new.shape[1]**>> 2# names of selected features\n**feature_names = np.array(X.columns)\nfeature_names[selector.get_support()]**>> array(['sepal_length', 'petal_length'], dtype=object)\n```", "```py\n# import transformer class\n**from sklearn.feature_selection import SequentialFeatureSelector**# instantiate model\n**model = RandomForestClassifier(n_estimators=200, random_state=0)**# select features\n**selector = SequentialFeatureSelector(estimator=model, n_features_to_select=3, direction='backward')\nselector.fit_transform(X,y).shape[1]**>> 3# names of features selected\n**feature_names = np.array(X.columns)\nfeature_names[selector.get_support()]**>> array(['sepal_width', 'petal_length', 'petal_width'], dtype=object)\n```"]