- en: A Guide to Preparing OpenCV for Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/10/guide-preparing-opencv-android.html](https://www.kdnuggets.com/2020/10/guide-preparing-opencv-android.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: This tutorial guides Android developers in preparing the popular library OpenCV
    (Open Computer Vision) for use. Through a step-by-step guide, the library will
    be imported into Android Studio (the official IDE for Android).
  prefs: []
  type: TYPE_NORMAL
- en: Upon installation and setup, OpenCV can be used for performing any of the operations
    it supports, such as object detection, segmentation, tracking, and more.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of this tutorial, OpenCV is used to apply the Canny filter to an
    image. The Android Studio project associated with this is available on GitHub
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[**ahmedfgad/OpenCVAndroid**'
  prefs: []
  type: TYPE_NORMAL
- en: Using OpenCV in Android Devices. Contribute to ahmedfgad/OpenCVAndroid development
    by creating an account on GitHub.](https://github.com/ahmedfgad/OpenCVAndroid)
  prefs: []
  type: TYPE_NORMAL
- en: Overview of OpenCV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenCV is a vision library built for doing complex, real-time operations on
    images. It is a free, open source library originally written in C++. It includes
    interfaces with Python, Java, and MATLAB. With no need to write many lines of
    code to build an operation, OpenCV already supports building such operations with
    a simple interface, where the user can write just a few lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Before discussing importing OpenCV into and Android project, let’s start by
    building an Android project and make sure that the Android development environment
    is working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The points that will be covered in this tutorial are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Building an Android Studio Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the Project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing the Project to Display a Toast Message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing OpenCV in Android Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixing Possible Gradle Sync Errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding OpenCV as a Dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Native Libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using OpenCV for Filtering Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an Android Studio Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s go through the steps of building a new Android Studio project. The first
    is to create a new project from the **File** menu as illustrated in the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/09d4736825e19a6960264bbf595fcd42.png)'
  prefs: []
  type: TYPE_IMG
- en: By selecting the “**New Project**” menu item, a new window appears asking for
    a few details (e.g. app name and project directory). The app name we’ll used for
    this tutorial is **OpenCVAndroid**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/e1b850399b72094326853b8e917b8535.png)'
  prefs: []
  type: TYPE_IMG
- en: By clicking the **Next** button, another window appears asking for the target
    devices and the minimum SDK. You can select one of the SDKs available in your
    environment. You can lower the minimum SDK if you’d like to support more devices.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/63280fdcb929804425e63f772e48203f.png)'
  prefs: []
  type: TYPE_IMG
- en: By clicking **Next**, another window appears asking for whether a default activity
    is to be created within the project or not. There are a few different options.
    If no activity is to be created, you can select the top-left option “**Add No
    Activity**”.
  prefs: []
  type: TYPE_NORMAL
- en: Because we’re going to build an Android app, then there must be an Activity,
    even if empty. As a result, I selected the “**Empty Activity**” option. Note that
    this activity is not completely empty as it contains a TextView that covers the
    screen, as we’ll see later, after running the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/18f12cf75a1b78a83fa5e0f022694b06.png)'
  prefs: []
  type: TYPE_IMG
- en: By specifying that the app is to include an activity, another window appears
    asking for the **Activity Name**. This name is regarded as the class name of the
    Java file associated with this activity. After specifying the proper name of your
    choice, click **Finish** to create the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can check the “**Generate Layout File**” checkbox to create a
    layout for the activity. You can either check or uncheck the “Backwards Compatibility”
    checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/2ea57011b493983d2a2b711d0c9b5d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: After the project is created, you can select the Android project view and will
    find a Java file for the activity named **MainActivity**. It is a Java file with
    a .java extension, but it isn’t just displayed in the Android project view. There’s
    also an XML layout file named `activity_main.xml`, as illustrated in the next
    figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/a6341b1e2e219393f28a91fb6318ab34.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the Project
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Without discussing the implementation of these files, let’s run the project
    to ensure everything is working correctly. To run an Android Studio project, you
    either need an emulator (virtual device) or a real device connected via a USB
    cable.
  prefs: []
  type: TYPE_NORMAL
- en: To run the project, select the **Run ‘app’** option from the **Run** menu. A
    window appears asking whether an emulator or a USB device is used. I currently
    don’t have any USB connected devices and thus will choose the available emulator.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/fde4eee83e3b7f54895b3c9169c42171.png)'
  prefs: []
  type: TYPE_IMG
- en: After the emulator starts up, the application will install automatically and
    will appear in the app list, as shown below. Note that the app name “**OpenCV
    Android**” is what we entered previously.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/1baa3f6a84fec4b3d3990c4dae27a9d2.png)'
  prefs: []
  type: TYPE_IMG
- en: After the project runs, the app will not only install but also launch automatically.
    The screen of the app is shown below. As specified previously, the activity layout
    just contains a TextView displaying “**Hello World!**”.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/02e0d545caf94283de33bc2ddd5b50df.png)'
  prefs: []
  type: TYPE_IMG
- en: After running the project, we know that the development environment is working
    correctly. Before importing OpenCV within the project, it’s better to get familiar
    with the project. Thus, let’s see the contents of the `MainActivity.java` and `activity_main.xml` files
    and make a simple edit.
  prefs: []
  type: TYPE_NORMAL
- en: Looking for a spark to take your apps to the next level? Machine learning enables
    powerful, highly-personalized mobile experiences. [Subscribe to the Fritz AI Newsletter
    to learn how.](https://www.fritz.ai/newsletter?utm_campaign=fritzai-newsletter-scale4&utm_source=heartbeat)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Editing the Project to Display a Toast Message
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The content of the MainActivity.java file is given below. The activity name
    is MainActivity, which extends the AppCompatActivity class. It’s well-known that
    an Android activity extends the Activity class, but in this project, it actually
    extends the AppCompatActivity because we checked the “Backwards Compatibility”
    option while creating the project.
  prefs: []
  type: TYPE_NORMAL
- en: The activity has just the `onCreate()` method, which is called once the activity
    is created. It just uses the `setContentView()` method for setting the activity
    XML layout, which renders the UI of the activity when launched.
  prefs: []
  type: TYPE_NORMAL
- en: The content of the XML layout is listed below. It simply creates a layout of
    type `ConstraintLayout` with width and height covering the device screen. It just
    has a single child view, which is `TextView` as specified while building the project.
    The text of the `TextView` is set to “Hello World!”.
  prefs: []
  type: TYPE_NORMAL
- en: To get familiar with the project, let’s make a simple edit by adding a new Button
    view, which displays a Toast message when clicked. The edited layout XML file
    for adding the Button view is listed below. The Button text is set to “**Display
    Toast Message**”. When clicked, a callback method named `displayToast()` will
    be called.
  prefs: []
  type: TYPE_NORMAL
- en: The `displayToast()` method is implemented in the edited activity Java file,
    as shown below. It uses the Toast class for displaying a toast message.
  prefs: []
  type: TYPE_NORMAL
- en: After running the project again and clicking the button, the message will be
    displayed as given in the next figure. By reaching this step, we’ve made sure
    the project is running correctly, and we also have a little understanding of the
    main activity and its layout. Now, let’s start importing the OpenCV library.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/3a4e87387ca89c89d5598221b9bf5109.png)'
  prefs: []
  type: TYPE_IMG
- en: Downloading OpenCV
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For downloading OpenCV, you can use this link [https://opencv.org/releases](https://opencv.org/releases),
    which lists the OpenCV releases. Scrolling down this page, you can find OpenCV
    3.4.4, which is used in this tutorial. You can download the latest release available
    at the current time which is 4.1.0 if that’s the best option for you. Remember
    to download the Android release of the library.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/cf9a6c62fb2e24a9f7439521ef28b959.png)'
  prefs: []
  type: TYPE_IMG
- en: You will download a ZIP file, which you’ll need to extract.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/a6b720a5a454779f396df57f9dc7d205.png)'
  prefs: []
  type: TYPE_IMG
- en: The directory tree of the extracted folder is given in the next figure. The
    2 important folders we’ll use are **java** and **libs**. Bother of these files
    are subfolders of the **sdk** folder.
  prefs: []
  type: TYPE_NORMAL
- en: The **java** folder contains the java files of the OpenCV. Because not all files
    are written in Java and some are written in C++ and still needed to be used within
    Java, there’s another folder named **libs** that holds these files.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/6b12eb76232b448af384ae0034b9a802.png)'
  prefs: []
  type: TYPE_IMG
- en: Importing OpenCV in Android Studio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to import a library in Android Studio, go to the **File** menu and
    select “**Import Module**” as illustrated in the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/7e6ef1d0b64719f3c17194f02f97ec6b.png)'
  prefs: []
  type: TYPE_IMG
- en: After selecting it, a new window appears asking for the path of the module to
    be imported as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/da193accab0a57a85dfba7a1444d4ae9.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the three dots near on the right side near the “**Source Directory**”
    and navigate to the path where the **sdk** folder inside the downloaded OpenCV
    for Android exists.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/b02057dd23ab67d90334f261240491dc.png)'
  prefs: []
  type: TYPE_IMG
- en: After clicking **OK**, the “**Source Directory**” in the previous menu will
    change according to the selected path as illustrated in the figure below. The
    module name will change to reflect that Android Studio detected OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/36f79808d7fe5bfd5d42115aeeea69b7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click **Next** to go to another window shown below, where you can just click **Finish** to
    import the library. After clicking Finish, you have to wait for the Gradle Sync
    to finish.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/73d5eb18bd36b78721b722805e8cbbab.png)'
  prefs: []
  type: TYPE_IMG
- en: Fixing Possible Gradle Sync Errors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A number of errors might appear when building the project using Gradle. Here
    we’re going to discuss 3 of them.
  prefs: []
  type: TYPE_NORMAL
- en: The first one is that it’s expected to encounter a **Gradle Sync** error while
    loading the library as shown below. The problem is simply that OpenCV is using
    an SDK not installed in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/82376e5911e10ded3366b6b76bc4a89a.png)'
  prefs: []
  type: TYPE_IMG
- en: We can solve this issue in 2 ways. The first one is to install the SDK used
    by OpenCV. The second one, which will be used in this tutorial, is to change the
    SDK version used by OpenCV to one of the already available SDKs.
  prefs: []
  type: TYPE_NORMAL
- en: To change the SDK used by OpenCV, change the project view to Project and go
    to the `build.gradle` file under the imported OpenCV. Don’t forget to open the `build.gradle` file
    under the OpenCV library, not under the app.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/a1978bc6f506e343b5c5418fefe049e1.png)'
  prefs: []
  type: TYPE_IMG
- en: The content of this file is listed below. According to the `compileSdkVersion` field,
    it reflects that the SDK version used by OpenCV is 14 and hasn’t been installed.
    This error might not appear for you if SDK 14 is already installed.
  prefs: []
  type: TYPE_NORMAL
- en: If SDK 14 isn’t installed for you, you can change it to another available SDK.
    I’ll use SDK 21\. The edited `build.gradle` file of the OpenCV library is listed
    below. You can try to sync the project again after making this edit, and it’s
    expected that everything will work successfully after that.
  prefs: []
  type: TYPE_NORMAL
- en: The second issue is that the first line in the `build.gradle` file of the OpenCV
    library might be as shown below. This refers to the fact that the imported OpenCV
    is an application and not a library. I found that this line exists for OpenCV
    4.1.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Using this line returns an error while building the project. The error says:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Unable to resolve dependency for ‘**:app@debugUnitTest/compileClasspath’:
    Could not resolve project :openCVLibrary433.**`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Because OpenCV is meant to be imported as a library, the first line must be
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Changing the first line to the one above may not be enough. This is because
    if the first line in the OpenCV `build.gradle` is `apply plugin: ‘com.android.application’`,
    then it’s expected to find the `applicationId` set to `org.opencv`. It’s a problem
    to have such a field in projects imported as a library. So you have to format
    it as a comment it using // or simply delete it.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding OpenCV as a Dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Despite being imported within Android Studio, OpenCV isn’t detected inside the
    activity Java file. The project doesn’t know what `org.opencv` is. This is because
    we also have to add the library as a dependency in our project.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/b2993a9c932b5fdd5b6336df3edce3e5.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to do that, select the “**Project Structure**” menu item from the File
    menu, as shown below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/6c343185c2a62c7143a1c7ed5c457987.png)'
  prefs: []
  type: TYPE_IMG
- en: This opens another window. In the left side under the **Modules** section, click
    on **app** and then go to **Dependencies**. This opens the dependencies window.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/0b6052691684be92823648548c3d29ec.png)'
  prefs: []
  type: TYPE_IMG
- en: In order to add a new dependency, click on the green + icon on the right side
    of the screen, as shown below. A menu appears, from which we select the “**Module
    dependency**” option.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/9dff33579ab1018c55bc0cf84ddbdf32.png)'
  prefs: []
  type: TYPE_IMG
- en: A new window opens, which shows a list of modules to be selected as dependencies.
    We have just a single module for OpenCV, and thus a single item is available.
    Select it and click OK.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/b22138db6d1393154e94a4707712ad78.png)'
  prefs: []
  type: TYPE_IMG
- en: This takes you back to the dependencies window, but after OpenCV is added as
    one of the dependencies. Click OK to confirm adding OpenCV as a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/2c476007d5efed2ab8d7f099621bcd1d.png)'
  prefs: []
  type: TYPE_IMG
- en: After doing that, you’ll find that the OpenCV library is detected within the
    Java code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/7851fe97e394f0a872505b3505942e9c.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding Native Libraries
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some files within OpenCV are native. This means they aren’t written in Java
    but C++. These files are available within the **libs** folder. The folder tree
    of the downloaded OpenCV file is given again below to refresh your memory about
    the location of the **libs** folder which is **OpenCV/sdk/native/libs**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/1cc05e9135ec336509a96b28a0783efe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This folder needs to be copied into the project under this directory: OpenCVAndroid/app/src/main/.
    It’s very important to rename the copied folder to be **jnilibs**. After doing
    that, the contents of the project’s main folder are as shown in the next figure.
    After doing that, the OpenCV library is ready for use.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/7bcfae846f55d13a172726a52344633e.png)'
  prefs: []
  type: TYPE_IMG
- en: Using OpenCV for Filtering Images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After importing OpenCV successfully within Android Studio, this section of the
    tutorial uses OpenCV to apply a filter over an image. The [GitHub project](https://github.com/ahmedfgad/OpenCVAndroid) contains
    the Android Studio project in which OpenCV is already imported, and the Canny
    filter is applied to an image after clicking a button.
  prefs: []
  type: TYPE_NORMAL
- en: The layout of the previous app will be modified to add an ImageView, as listed
    below. This is not the only change, as the layout used is changed to a **LinearLayout**.
    The orientation used for this layout is vertical. Moreover, the TextView is no
    longer needed and thus removed.
  prefs: []
  type: TYPE_NORMAL
- en: The image displayed on the ImageView is a resource image named **test**. In
    order to add a resource image to the project, simply use the Android project view
    and drag and drop an image file into the **drawable** folder, as illustrated below.
    The image file is named `test.jpg`. The resource name of this image, **test**,
    is derived from the file name.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/7c975feb7e89e68cc5b04436e7e0ace7.png)'
  prefs: []
  type: TYPE_IMG
- en: The app screen after running the modified app is shown below. Next, we write
    Java code for reading the resource image displayed in the ImageView, process it
    using OpenCV, and then display the resultant image again in the ImageView.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](../Images/44dfb2dfd87b34bb78692768e20c86c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Previously, the Button view was displaying a toast message when clicked. This
    time, it will apply the Canny filter over the image. The modified Java code is
    listed below. All you have to do is to create a drawable resource with the name **test**.
  prefs: []
  type: TYPE_NORMAL
- en: After clicking the button, the resource image is read as an OpenCV Mat named
    img. Then the Mat is filtered according to the `Canny()` method inside the `Imgproc` class
    and the filtered image is stored into the `img_result` Mat.
  prefs: []
  type: TYPE_NORMAL
- en: This Mat is then converted into a bitmap image using the `matToBitmap()` method.
    Finally, the converted bitmap image is set as the image displayed on the ImageView
    using the `setImageBitmap()` method. The result after filtering the image is shown
    in the next figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image for post](../Images/d792b6881efff17e2660ba1e265b6bd0.png)'
  prefs: []
  type: TYPE_IMG
- en: And that’s it!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This tutorial discussed the detailed steps for using OpenCV in Android Studio.
    An Android Studio project is created, and after making sure it’s working properly,
    we started preparing OpenCV.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we first downloaded OpenCV from its official site. After that, we
    imported OpenCV as a module within the Android Studio project and added it as
    a dependency. We then copied the **libs** folder (within Android Studio) into
    our project, renaming it **jnilibs**. As a final step in preparing OpenCV for
    Android Studio, we initialized `OpenCVLoader` using the `onCreate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we ensured OpenCV was working properly within the project and used
    it to build a simple app in which an image is filtered using Canny.
  prefs: []
  type: TYPE_NORMAL
- en: For Contacting the Author
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E-mail: [ahmed.f.gad@gmail.com](mailto:ahmed.f.gad@gmail.com)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: LinkedIn: [https://linkedin.com/in/ahmedfgad](https://linkedin.com/in/ahmedfgad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Heartbeat: [https://heartbeat.fritz.ai/@ahmedfgad](https://heartbeat.fritz.ai/@ahmedfgad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KDnuggets: [https://www.kdnuggets.com/author/ahmed-gad](https://www.kdnuggets.com/author/ahmed-gad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TowardsDataScience: [https://towardsdatascience.com/@ahmedfgad](https://towardsdatascience.com/@ahmedfgad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GitHub: [https://github.com/ahmedfgad](https://github.com/ahmedfgad)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bio: [Ahmed Gad](https://www.linkedin.com/in/ahmedfgad/)** received his B.Sc.
    degree with excellent with honors in information technology from the Faculty of
    Computers and Information (FCI), Menoufia University, Egypt, in July 2015\. For
    being ranked first in his faculty, he was recommended to work as a teaching assistant
    in one of the Egyptian institutes in 2015 and then in 2016 to work as a teaching
    assistant and a researcher in his faculty. His current research interests include
    deep learning, machine learning, artificial intelligence, digital signal processing,
    and computer vision.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://heartbeat.fritz.ai/a-guide-to-preparing-opencv-for-android-4e9532677809).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Accelerated Computer Vision: A Free Course From Amazon](/2020/08/accelerated-computer-vision-free-course-amazon.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Computer Vision Recipes: Best Practices and Examples](/2020/09/computer-vision-recipes-best-practices-examples.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Federated Learning](/2020/08/introduction-federated-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Preparing for a Data Analyst Interview](https://www.kdnuggets.com/2022/08/datacamp-preparing-data-analyst-interview.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Discover the World of Computer Vision: Introducing MLM''s Latest…](https://www.kdnuggets.com/2024/01/mlm-discover-the-world-of-computer-vision-ebook)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner''s Guide to End to End Machine Learning](https://www.kdnuggets.com/2021/12/beginner-guide-end-end-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Simple Guide to Machine Learning Visualisations](https://www.kdnuggets.com/2022/04/simple-guide-machine-learning-visualisations.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Comprehensive Guide to the Normal Distribution](https://www.kdnuggets.com/2022/06/comprehensive-guide-normal-distribution.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Geocoding in Python: A Complete Guide](https://www.kdnuggets.com/2022/11/geocoding-python-complete-guide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
