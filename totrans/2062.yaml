- en: Mongo DB Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/06/mongo-db-basics.html](https://www.kdnuggets.com/2019/06/mongo-db-basics.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '**By [Jyoti Reddy](https://www.linkedin.com/in/jyoti-reddy11/?originalSubdomain=in),
    Data Engineer at Krones**'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/c8b6b470968084372e9dfa2f564747bc.png)'
  prefs: []
  type: TYPE_IMG
- en: Mongo DB is a document oriented NO SQL database unlike HBASE which has a wide
    column store. The advantage of Document oriented over relation type is the columns
    can be changed as an when required for each case as opposed to the same column
    name for all the rows.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Ways to operate in Mongo DB
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**1.** **To create a Database**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the command — use <desired database name>
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/5406ea4c86e3ec2cab0fce15e9d88674.png)'
  prefs: []
  type: TYPE_IMG
- en: '**2\. To list the Databases in the Mongo DB system.**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the command — show dbs
  prefs: []
  type: TYPE_NORMAL
- en: This command will show the default DB’s and the one’s created by the client.
    However If there are no collections in the DB created then it won’t be shown in
    the list. Also to check which database is currently selected then use the command-
    db. The below image shows the database which
  prefs: []
  type: TYPE_NORMAL
- en: currently being operated on.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/5bf59aa9bd5004a82c11a294f3dc8e64.png)'
  prefs: []
  type: TYPE_IMG
- en: '**3\. Drop Database**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the command — db.dropDatabase(). Follow the below commands where the databases
    are shown before and after dropping the selected Database. We cannot specify a
    selected database name. The Database which is currently selected will be automatically
    deleted. Also we have inserted some data into sampledb which is why it is appearing
    in the list. If no data was there in sampledb then would not have appeared after
    typing the command — show dbs.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/90a204088d02fdd3ddb27f5be5ed1ebb.png)'
  prefs: []
  type: TYPE_IMG
- en: '**4\. Create Collection**'
  prefs: []
  type: TYPE_NORMAL
- en: The below process shows show to create a collection in a database. In the Collection
    lies the document. Use the command — db.collectionname.insert({}). The below image
    shows only one document created in the collection ‘Country’. We can create multiple
    documents in the same collection. This collection refers to the Table for HBase
    or either a relation DBMS.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/71725ef95fe380709f6fdafc5115b949.png)'
  prefs: []
  type: TYPE_IMG
- en: The below example shows a collection having multiple documents. Notice the number
    of fields in both the documents. The 1st document does not have the suburb field
    which means we have to insert only those information which is available with us.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/25410f0b9cd3e9249168b09b5aea82b4.png)'
  prefs: []
  type: TYPE_IMG
- en: '**5\. To find the documents in the collection**'
  prefs: []
  type: TYPE_NORMAL
- en: Use the command- db.collectionname.find(). The object ID’s would be appended
    to the each document on it’s own. This would make each document unique.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/497d7e313819eb1a000dbc986b620e04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can also use AND and OR operator to find specific documents within the collection.
    For instance to find the document which has the city Mumbai use the below command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`db.country.find({city:’Mumbai’});`'
  prefs: []
  type: TYPE_NORMAL
- en: '**6\. Update the Document within the Collection**'
  prefs: []
  type: TYPE_NORMAL
- en: To update a particular field use the command-
  prefs: []
  type: TYPE_NORMAL
- en: '`db.collectionname.update({field:’old name’},{$set:{field:’new name’}})`'
  prefs: []
  type: TYPE_NORMAL
- en: '**Before Update**'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/b87acf980c3a83c2e7371db967fb8505.png)'
  prefs: []
  type: TYPE_IMG
- en: '**After Update**'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/bcf221df6f0a5f9b872476102ac17b4d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**7\. Delete a Document**'
  prefs: []
  type: TYPE_NORMAL
- en: To delete a document use the below command-
  prefs: []
  type: TYPE_NORMAL
- en: '`db.collectioname.remove({field:’Value’})`'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/af7b92c15d36d826d5105f1e543054a8.png)'
  prefs: []
  type: TYPE_IMG
- en: We can also use the command db.collectionname.remove({}) to truncate the entire
    collection and has been added in the Version 2.6\. Earlier the command db.collectionname.remove()
    used to work. This is equivalent to the truncate command in SQL.
  prefs: []
  type: TYPE_NORMAL
- en: '**8\. Projection of rows**'
  prefs: []
  type: TYPE_NORMAL
- en: To select the required fields we can use the below given command. We need to
    append either ‘1’ or ‘0’ to the field in the command. If we give a ‘1’ then all
    the rows for that field will appear and ‘0’ will give vice versa results. If the
    field name is not specified in the command then it default takes a ‘1’ for the
    Object ID field, this case does not applied for all the other field s in the list.
    The fields here correspond to the columns in RDBMS.
  prefs: []
  type: TYPE_NORMAL
- en: '`db.collectionname.find({},field:1})`'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/24d60cbbb0c283a4bb1a3826e198499c.png)'
  prefs: []
  type: TYPE_IMG
- en: '**9\. Limiting the rows**'
  prefs: []
  type: TYPE_NORMAL
- en: This is the advanced version of Projecting the rows. In Projection technique
    all the rows would appear resulting in us getting unwanted data. Here we can limit
    the columns as well as skip few of the rows. Use the command -db.collectionname.find({},{field:1
    or 0,field:1 or 0…}).limit(1).skip(1). This method will retrieve only one row.
    the number of skips determines the number of rows that will be removed from the
    result.
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/ae19b7f0fe22266d53448cae26e46d0d.png)'
  prefs: []
  type: TYPE_IMG
- en: '**10\. Sorting the rows**'
  prefs: []
  type: TYPE_NORMAL
- en: In this method we can sort the rows in the ascending or descending manner. Select
    the fields that are needed and then append a 1 or -1 to the sort command. Default
    is 1, hence in such a case the sort command need not be specified. The ascending
    or descending will be based on the column selected in the Sort command.
  prefs: []
  type: TYPE_NORMAL
- en: '`Command: db.country.find({},{state:1}).sort({state:-1})`'
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/4642240a0a81dc2b4925c7ed9641cd33.png)'
  prefs: []
  type: TYPE_IMG
- en: These are the few methods to operate with Mongo DB. The syntax are user friendly
    and simple to understand. An another advantage of this database is, we need not
    include all the fields in all the documents within the same collection. For instance,
    If one document has a field named city and the other document does not need it
    then we need not include it. This helps in saving a lot of space. Refer to the
    below example
  prefs: []
  type: TYPE_NORMAL
- en: '![figure-name](../Images/43e9038237d8178a975d7ca027b9ae06.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Bio: [Jyoti Reddy](https://www.linkedin.com/in/jyoti-reddy11/?originalSubdomain=in)**
    is a Data Engineer at Krones.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://medium.com/plumbersofdatascience/mongo-db-basics-f1a2c74b2bfe).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[7 Steps to Understanding NoSQL Databases](/2016/07/seven-steps-understanding-nosql-databases.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Data Engineering  –  Part I](/2018/01/beginners-guide-data-engineering-1.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Beginner’s Guide to Data Engineering – Part II](/2018/03/beginners-guide-data-engineering-part-2.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Back To Basics, Part Dos: Gradient Descent](https://www.kdnuggets.com/2023/03/back-basics-part-dos-gradient-descent.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Learn MLOps Basics with This Free eBook](https://www.kdnuggets.com/2023/08/learn-mlops-basics-free-ebook.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Python Basics: Syntax, Data Types, and Control Structures](https://www.kdnuggets.com/python-basics-syntax-data-types-and-control-structures)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Back to Basics Week 1: Python Programming & Data Science Foundations](https://www.kdnuggets.com/back-to-basics-week-1-python-programming-data-science-foundations)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Back to Basics Week 3: Introduction to Machine Learning](https://www.kdnuggets.com/back-to-basics-week-3-introduction-to-machine-learning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Back to Basics Week 4: Advanced Topics and Deployment](https://www.kdnuggets.com/back-to-basics-week-4-advanced-topics-and-deployment)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
