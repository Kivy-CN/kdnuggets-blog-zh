- en: 'Say Goodbye to Print(): Use Logging Module for Effective Debugging'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging](https://www.kdnuggets.com/say-goodbye-to-print-use-logging-module-for-effective-debugging)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Say Goodbye to Print(): Use Logging Module](../Images/df8d7bf47fa27eaa8c487cb7ccb88789.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
- en: Image by Author | DALLE-3 & Canva
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Many of us start our programming journey with YouTube videos, and for the sake
    of simplicity, they often use `print()` statements to track bugs. That's fair
    enough, but as beginners adopt this habit, it can become problematic. Although
    these statements might work for simple scripts, as your codebase expands, this
    approach becomes highly inefficient. Therefore, in this article, I will introduce
    you to Python's built-in logging module, which solves this problem. We will see
    what logging is, how it differs from the `print()` statements, and we will also
    cover a practical example to fully understand its functionality.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Why Use the Logging Module Instead of Print()?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we talk about debugging, the Python logging module provides much more detailed
    information than simple `print()` statements. This includes timestamps, module
    names, log levels, and line numbers where errors occurred, etc. These extra details
    help us understand the behavior of our code more effectively. The information
    we want to log depends on the needs of the application and the developer's preference.
    So, before we proceed further, let's discuss log levels and how to set them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Logging Levels
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can control the amount of information you want to see using these log levels.
    Each log level has a numerical value that denotes its severity, with higher values
    indicating more severe events. For example, if you set your log level to `WARNING`,
    you're telling the logging module to only show you messages that are of `WARNING`
    level or higher. This means you won't see any `DEBUG`, `INFO`, or other less severe
    messages. This way, you can focus on the important events and ignore the noise
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a table that shows the details of what each log level represents:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '| Log Level | Numerical Value | Purpose |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: '| DEBUG | 10 | Provides detailed information for diagnosing code-related issues,
    such as printing variable values and function call traces. |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
- en: '| INFO | 20 | Used to confirm that the program is working as expected, like
    displaying startup messages and progress indicators. |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
- en: '| WARNING | 30 | Indicates a potential problem that may not be critical to
    interrupt the program''s execution but could cause issues later on. |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
- en: '| ERROR | 40 | Represents an unexpected behavior of the code that impacts its
    functionality, such as exceptions, syntax errors, or out-of-memory errors. |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
- en: '| CRITICAL | 50 | Denotes a severe error that can lead to the termination of
    the program, like system crashes or fatal errors. |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
- en: Setting Up the Logging Module
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use the logging module, you need to follow some steps for configuration.
    This includes creating a logger, setting the logging level, creating a formatter,
    and defining one or more handlers. A handler basically decides where to send your
    log messages, such as to the console or a file. Let''s start with a simple example.
    We''re going to set up the logging module to do two things: first, it''ll show
    messages on the console, giving us useful information (at the `INFO` level). Second,
    it''ll save more detailed messages to a file (at the `DEBUG` level). I''d love
    it if you could follow along!'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Setting the log level
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default level of the logger is set to `WARNING`. In our case, our two handlers
    are set to `DEBUG` and `INFO` levels. Hence, to ensure all messages are managed
    properly, we have to set the logger's level to the lowest level among all handlers,
    which, in this case, is `DEBUG`.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 2\. Creating a Formatter
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can personalize your log messages using formatters. These formatters decide
    how your log messages will look. Here, we will set up the formatter to include
    the timestamp, the log level, and the message content using the command below:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 3\. Creating Handlers
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As discussed previously, handlers manage where your log messages will be sent.
    We will create two handlers: a console handler to log messages to the console
    and a file handler to write log messages to a file named ''app.log''.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Both handlers are then added to the logger using the `addHandler()` method.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 4\. Testing the Logging Setup
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that our setup is complete, let''s test if it''s working correctly before
    moving to the real-life example. We can log some messages as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When you run this code, you should see the log messages printed to the console
    and written to a file named ''app.log'', like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '**Console**'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**app.log**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Logging User Activity in a Web Application
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this simple example, we will create a basic web application that logs user
    activity using Python''s logging module. This application will have two endpoints:
    one for logging successful login attempts and the other to document failed ones
    (`INFO` for success and `WARNING` for failures).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Setting Up Your Environment
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before starting, set up your virtual environment and install Flask:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 2\. Creating a Simple Flask Application
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you send a POST request to the **/login** endpoint with a username and
    password parameter, the server will check if the credentials are valid. If they
    are, the logger records the event using logger.info() to signify a successful
    login attempt. However, if the credentials are invalid, the logger records the
    event as a failed login attempt using logger.error().
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你向**/login**端点发送一个包含用户名和密码参数的 POST 请求时，服务器将检查凭据是否有效。如果有效，记录器会使用 logger.info()
    记录事件，以表示登录尝试成功。然而，如果凭据无效，记录器会使用 logger.error() 记录事件，标记为登录尝试失败。
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 3\. Testing the Application
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 3\. 测试应用程序
- en: 'To test the application, run the Python script and access the **/login** endpoint
    using a web browser or a tool like curl. For example:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，请运行 Python 脚本，并使用 Web 浏览器或类似 curl 的工具访问**/login**端点。例如：
- en: '**Test Case 01**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试用例 01**'
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Output**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**Test Case 02**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试用例 02**'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**Output**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**'
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**app.log**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**app.log**'
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wrapping Up
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: 'And that wraps up this article. I strongly suggest making logging a part of
    your coding routine. It''s a great way to keep your code clean and make debugging
    easier. If you want to dive deeper, you can explore the [Python logging documentation](https://docs.python.org/3/library/logging.html)
    for more features and advanced techniques. And if you''re eager to enhance your
    Python skills further, feel free to check out some of my other articles:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这篇文章到此为止。我强烈建议将日志记录作为你的编码常规的一部分。这是保持代码清洁和简化调试的好方法。如果你想深入了解，可以查看 [Python 日志记录文档](https://docs.python.org/3/library/logging.html)
    以获取更多功能和高级技术。如果你希望进一步提升你的 Python 技能，欢迎查阅我其他的一些文章：
- en: '[Mastering Python: 7 Strategies for Writing Clear, Organized, and Efficient
    Code](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[掌握 Python：编写清晰、组织良好且高效代码的 7 个策略](https://www.kdnuggets.com/mastering-python-7-strategies-for-writing-clear-organized-and-efficient-code)'
- en: '[8 Built-in Python Decorators to Write Elegant Code](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[8 个内置 Python 装饰器，用于编写优雅代码](https://www.kdnuggets.com/8-built-in-python-decorators-to-write-elegant-code)'
- en: '**[](https://www.linkedin.com/in/kanwal-mehreen1/)**[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)****
    Kanwal is a machine learning engineer and a technical writer with a profound passion
    for data science and the intersection of AI with medicine. She co-authored the
    ebook "Maximizing Productivity with ChatGPT". As a Google Generation Scholar 2022
    for APAC, she champions diversity and academic excellence. She''s also recognized
    as a Teradata Diversity in Tech Scholar, Mitacs Globalink Research Scholar, and
    Harvard WeCode Scholar. Kanwal is an ardent advocate for change, having founded
    FEMCodes to empower women in STEM fields.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Kanwal Mehreen](https://www.linkedin.com/in/kanwal-mehreen1/)**** Kanwal 是一名机器学习工程师和技术作家，对数据科学及其与医学的交汇点充满热情。她共同撰写了电子书《利用
    ChatGPT 最大化生产力》。作为 2022 年 APAC 的 Google Generation Scholar，她倡导多样性和学术卓越。她还被认可为
    Teradata 多样性技术学者、Mitacs Globalink 研究学者以及哈佛 WeCode 学者。Kanwal 是变革的坚定倡导者，创立了 FEMCodes
    以赋能 STEM 领域的女性。'
- en: More On This Topic
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[How to Handle Missing Data with Scikit-learn''s Imputer Module](https://www.kdnuggets.com/how-to-handle-missing-data-with-scikit-learns-imputer-module)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用 Scikit-learn 的 Imputer 模块处理缺失数据](https://www.kdnuggets.com/how-to-handle-missing-data-with-scikit-learns-imputer-module)'
- en: '[Effective Testing for Machine Learning](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[机器学习的有效测试](https://www.kdnuggets.com/2022/01/effective-testing-machine-learning.html)'
- en: '[Prepare Your Data for Effective Tableau & Power BI Dashboards](https://www.kdnuggets.com/2022/06/prepare-data-effective-tableau-power-bi-dashboards.html)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[为有效的 Tableau 和 Power BI 仪表板准备数据](https://www.kdnuggets.com/2022/06/prepare-data-effective-tableau-power-bi-dashboards.html)'
- en: '[The Fast and Effective Way to Audit ML for Fairness](https://www.kdnuggets.com/2023/01/fast-effective-way-audit-ml-fairness.html)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[快速有效地审计机器学习公平性的方法](https://www.kdnuggets.com/2023/01/fast-effective-way-audit-ml-fairness.html)'
- en: '[Data Visualization Best Practices & Resources for Effective Communication](https://www.kdnuggets.com/2023/04/data-visualization-best-practices-resources-effective-communication.html)'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据可视化最佳实践和有效沟通资源](https://www.kdnuggets.com/2023/04/data-visualization-best-practices-resources-effective-communication.html)'
- en: '[Beyond Guesswork: Leveraging Bayesian Statistics for Effective…](https://www.kdnuggets.com/beyond-guesswork-leveraging-bayesian-statistics-for-effective-article-title-selection)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[超越猜测：利用贝叶斯统计进行有效的…](https://www.kdnuggets.com/beyond-guesswork-leveraging-bayesian-statistics-for-effective-article-title-selection)'
