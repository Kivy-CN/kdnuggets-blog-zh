["```py\nPAD_token = 0   # Used for padding short sentences\nSOS_token = 1   # Start-of-sentence token\nEOS_token = 2   # End-of-sentence token\n```", "```py\ndef __init__(self, name):\n  self.name = name\n  self.word2index = {}\n  self.word2count = {}\n  self.index2word = {PAD_token: \"PAD\", SOS_token: \"SOS\", EOS_token: \"EOS\"}\n  self.num_words = 3\n  self.num_sentences = 0\n  self.longest_sentence = 0\n```", "```py\ndef add_word(self, word):\n  if word not in self.word2index:\n    # First entry of word into vocabulary\n    self.word2index[word] = self.num_words\n    self.word2count[word] = 1\n    self.index2word[self.num_words] = word\n    self.num_words += 1\n  else:\n    # Word exists; increase word count\n    self.word2count[word] += 1\n```", "```py\ndef add_sentence(self, sentence):\n  sentence_len = 0\n  for word in sentence.split(' '):\n    sentence_len += 1\n    self.add_word(word)\n  if sentence_len > self.longest_sentence:\n    # This is the longest sentence\n    self.longest_sentence = sentence_len\n  # Count the number of sentences\n  self.num_sentences += 1\n```", "```py\ndef to_word(self, index):\n  return self.index2word[index]\n\ndef to_index(self, word):\n  return self.word2index[word]\n```", "```py\nvoc = Vocabulary('test')\nprint(voc)\n```", "```py\ncorpus = ['This is the first sentence.',\n          'This is the second.',\n          'There is no sentence in this corpus longer than this one.',\n          'My dog is named Patrick.']\nprint(corpus)\n```", "```py\n['This is the first sentence.',\n 'This is the second.',\n 'There is no sentence in this corpus longer than this one.',\n 'My dog is named Patrick.']\n```", "```py\nfor sent in corpus:\n  voc.add_sentence(sent)\n```", "```py\nprint('Token 4 corresponds to token:', voc.to_word(4))\nprint('Token \"this\" corresponds to index:', voc.to_index('this'))\n```", "```py\nToken 4 corresponds to token: is\nToken \"this\" corresponds to index: 13\n```", "```py\nfor word in range(voc.num_words):\n    print(voc.to_word(word))\n```", "```py\nPAD\nSOS\nEOS\nThis\nis\nthe\nfirst\nsentence.\nsecond.\nThere\nno\nsentence\nin\nthis\ncorpus\nlonger\nthan\none.\nMy\ndog\nnamed\nPatrick.\n```", "```py\nsent_tkns = []\nsent_idxs = []\nfor word in corpus[3].split(' '):\n  sent_tkns.append(word)\n  sent_idxs.append(voc.to_index(word))\nprint(sent_tkns)\nprint(sent_idxs)\n```", "```py\n['My', 'dog', 'is', 'named', 'Patrick.']\n[18, 19, 4, 20, 21]\n```"]