- en: Powerful Exploratory Data Analysis in just two lines of code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2021/02/powerful-exploratory-data-analysis-sweetviz.html](https://www.kdnuggets.com/2021/02/powerful-exploratory-data-analysis-sweetviz.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Francois Bertrand](https://medium.com/@fbertrand27), coder & designer
    for data visualization and games**.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/951735d5191cb7ce84ba5b2d91af81a3.png)'
  prefs: []
  type: TYPE_IMG
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Exploratory data analysis (EDA) is an essential early step in most data science
    projects, and it often consists of taking the same steps to characterize a dataset
    (e.g., find out data types, missing information, distribution of values, correlations,
    etc.). Given the repetitiveness and similarity of such tasks, there are a few
    libraries that automate and help kickstart the process.
  prefs: []
  type: TYPE_NORMAL
- en: One of the latest is a new open-source Python library called Sweetviz ([GitHub](https://github.com/fbdesignpro/sweetviz)),
    created by a few contributors and myself for just that purpose. It takes pandas
    dataframes and creates a self-contained HTML report.
  prefs: []
  type: TYPE_NORMAL
- en: '**It packs a powerful punch:** in addition to creating insightful and beautiful
    visualizations with just two lines of code, it provides analysis that would take
    a lot more time to generate manually, including some that no other library provides
    so quickly, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Comparison of 2 datasets**(e.g., Train vs. Test)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Visualization of the target value**against all other variables (e.g., “What
    was the survival rate of male vs. female” etc.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Here is a link to a report generated by Sweetviz for the well-known sample
    Titanic Survivor dataset](http://cooltiming.com/SWEETVIZ_REPORT.html). We will
    be analyzing this report in this article.'
  prefs: []
  type: TYPE_NORMAL
- en: EDA made... fun?!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Being able to get so much information so quickly about the target value and
    compare different areas of the dataset almost instantly transforms this initial
    step from being out all about tedium to being quicker, interesting, and even to
    some degree… fun! (to this data geek, at least!) Of course, EDA is a much longer
    process, but at least that first step is a lot smoother. Let’s see how it works
    out with the well-known sample dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing the Titanic dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For this article, we will be analyzing the sample Titanic Survivor dataset you
    can find [here](https://drive.google.com/file/d/11MgXvwics58UwiMjUSWJDAjn6hiflC-W/view?usp=sharing).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation of Sweetviz (using *pip install sweetviz*), simply load
    the pandas dataframes as you normally would, then call either *analyze()*, *compare()* or *compare_intra()* depending
    on your need (more on that below). The full documentation can be found on [GitHub](https://github.com/fbdesignpro/sweetviz).
    For now, let''s start with the case at hand, loading it as so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We now have 2 dataframes (train and test), and we would like to analyze the
    target value “Survived”. I want to point out in this case, we know the name of
    the target column in advance, but it is always optional to specify a target column.
    We can generate a report with this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this command will perform the analysis and create the report object.
    To get the output, simply use the show_html() command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'After generating the file, it will open it through your default browser and
    should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3b2b67f43dfab4520eae33fd67c3d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: There’s a lot to unpack, so let’s take it one step at a time!
  prefs: []
  type: TYPE_NORMAL
- en: '**Summary display**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/25ec3c8d030b6d65fe7afc27fb1fe0de.png)'
  prefs: []
  type: TYPE_IMG
- en: The summary shows us the characteristics of both dataframes side-by-side. We
    can immediately identify that the testing set is roughly half the size of the
    training set, but that it contains the same features. That legend at the bottom
    shows us that the training set does contain the “Survived” target variable but
    that the testing set does not.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Sweetviz does a best guess at determining the data type of each column,
    between numerical, category/boolean and text. These can be overridden—more on
    that below.
  prefs: []
  type: TYPE_NORMAL
- en: '**Associations**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hovering your mouse over the “Associations” button in the summary will make
    the Associations graph appear on the right-hand side:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/4cb0f56bdbb1e6c9d24114bae319c7d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This graph is a composite of the visuals from [Drazen Zaric: Better Heatmaps
    and Correlation Matrix Plots in Python](https://towardsdatascience.com/better-heatmaps-and-correlation-matrix-plots-in-python-41445d0f2bec) and
    concepts from [Shaked Zychlinski: The Search for Categorical Correlation](https://towardsdatascience.com/the-search-for-categorical-correlation-a1cf7f1888c9).'
  prefs: []
  type: TYPE_NORMAL
- en: Basically, in addition to showing the traditional numerical correlations, it
    unifies in a single graph both numerical correlation but also the uncertainty
    coefficient (for categorical-categorical) and correlation ratio (for categorical-numerical).
    Squares represent categorical-featured-related variables, and circles represent
    numerical-numerical correlations. Note that the trivial diagonal is left empty
    for clarity.
  prefs: []
  type: TYPE_NORMAL
- en: '*IMPORTANT: categorical-categorical associations (provided by the uncertainty
    coefficient) are ASYMMETRICAL, meaning that each row represents how much the row
    title (on the left) gives information on each column. For example, “Sex”, “Pclass”
    and “Fare” are the elements that give the most information on “Survived”. For
    the Titanic dataset, this information is rather symmetrical, but it is not always
    the case.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finally, it is worth noting these correlation/association methods shouldn’t
    be taken as gospel as they make some assumptions on the underlying distribution
    of data and relationships. However, they can be a very useful starting point.
  prefs: []
  type: TYPE_NORMAL
- en: '**Target variable**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/197556be6ef12fbe03dafb26989ffbde.png)'
  prefs: []
  type: TYPE_IMG
- en: When a target variable is specified, it will show up first, in a special black
    box.
  prefs: []
  type: TYPE_NORMAL
- en: '*IMPORTANT: only numerical and boolean features can be targets currently.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We can gather from this summary that “Survived” has no missing data in the training
    set (891, 100%), that there are 2 distinct possible values (accounting for less
    than 1% of all values), and from the graph, it can be estimated that roughly 60%
    did not survive.
  prefs: []
  type: TYPE_NORMAL
- en: '**Detail area (categorical/boolean)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you move the mouse to hover over any of the variables, an area to the
    right will showcase the details. The content of the details depends on the type
    of variable being analyzed. In the case of a categorical (or boolean) variable,
    as is the case with the target, the analysis is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/6deb752bf272697faac3a6eda2cb6068.png)'
  prefs: []
  type: TYPE_IMG
- en: '*IMPORTANT: a “widescreen” monitor is required to see the full detail area
    for the moment.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Here, we can see the exact statistics for each class, where 62% did not survive,
    and 38% survived. You also get the detail of the associations for each of the
    other features.
  prefs: []
  type: TYPE_NORMAL
- en: '**Numerical data**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/3c529f608464ca911c5a7096bfb1ad92.png)'
  prefs: []
  type: TYPE_IMG
- en: Numerical data shows more information on its summary. Here, we can see that
    in this case, about 20% of data is missing (21% in the test data, which is very
    consistent).
  prefs: []
  type: TYPE_NORMAL
- en: '**Note that the target value (“Survived” in this case) is plotted as a line
    right over the distribution graph. This enables instant analysis of the target
    distribution with regard to other variables.**'
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, we can see from the graph on the right that the survival rate
    is pretty consistent across all ages, except for the youngest, which have a higher
    survival rate. It would look like “women and children first” was not just talk.
  prefs: []
  type: TYPE_NORMAL
- en: '**Detail area (numerical)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/f09f1294ae56786f549674c0340163ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'As with the categorical data type, the numerical data type shows some extra
    information in its detail area. Noteworthy here are the buttons on top of the
    graph. These buttons change how many “bins” are shown in the graph. You can select
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Auto
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '15'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '30'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note: to get to these buttons, you need to “lock in place” the current feature
    by clicking on it. The feature then has a RED OUTLINE to show it is locked in
    place, and you can access the detail area.**'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, selecting “30” yields a much more granular graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ca321d42041614e31ff8b1188a3b9a3e.png)'
  prefs: []
  type: TYPE_IMG
- en: '**Text data**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ffacbef9dad440a7af0b9ffcb459f47d.png)'
  prefs: []
  type: TYPE_IMG
- en: For now, anything that the system does not consider numerical or categorical
    will be deemed as “text”. Text features currently only show count (percentage)
    as stats.
  prefs: []
  type: TYPE_NORMAL
- en: 'FeatureConfig: forcing data types, skipping columns'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In many cases, there are “label” columns that you may not want to analyze (although
    target analysis can provide insights on the distribution of target values based
    on labeling). In other cases, you may want to force some values to be marked as
    categorical even though they are numerical in nature.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do all this, simply create a FeatureConfig object and pass it in to the
    analyze/compare function. You can specify either a string or a list to kwargs *skip*, *force_cat, *and *force_text*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Comparing sub-populations (e.g., Male vs Female)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even if you are only looking at a single dataset, it can be very useful to
    study the characteristics of different subpopulations within that dataset. To
    do so, Sweetviz provides the *compare_intra()* function. To use it, you provide
    a boolean test that splits the population (here we try *train["Sex"] == ''male*'',
    to get a sense of the different gender populations), and give a name to each subpopulation.
    For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'yields the following analysis: (for this screenshot I used feature_config to
    skip showing the analysis of the “Sex” feature, as it is redundant)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/c3b2b67f43dfab4520eae33fd67c3d5a.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the target value (“Survived” in this case) is now plotted as separate
    lines, one for each compared dataset (e.g., male in blue, female in orange).
  prefs: []
  type: TYPE_NORMAL
- en: Putting it all together
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: EDA is a fluid, artistic process that must be uniquely adapted to each set of
    data and situation. However, a tool like Sweetviz can help kickstart the process
    and get rid of a lot of the initial minutiae of characterizing datasets to provide
    insights right off the bat. Let’s go through all the features for the Titanic
    dataset to see what that could look like.
  prefs: []
  type: TYPE_NORMAL
- en: '**Individual fields**'
  prefs: []
  type: TYPE_NORMAL
- en: '***PassengerId***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e6523e600c6d28c1cd226a19fdc87eba.png)'
  prefs: []
  type: TYPE_IMG
- en: The distribution of IDs and survivability is even and ordered as you would hope/expect,
    so no surprises here.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Sex***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/7e5c0bea0910df847577bd87210732f7.png)'
  prefs: []
  type: TYPE_IMG
- en: About twice as many males as females, but…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Females were much more likely to survive than males
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looking at the correlations, Sex is correlated with Fare, which is and isn’t
    surprising…
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar distribution between Train and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Age***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/cece85536949279157680aa39f468b24.png)'
  prefs: []
  type: TYPE_IMG
- en: 20% missing data, consistent missing data and distribution between Train and
    Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Young-adult-centric population, but ages 0–70 well-represented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surprisingly evenly distributed survivability, except for a spike at the youngest
    age
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using 30 bins in the histogram in the detail window, you can see that this survivability
    spike is really for the youngest (about <= 5 years old), as at about 10 years
    old, survivability is really low.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Age seems related to Siblings, Pclass, and Fare, and a bit more surprisingly
    to Embarked
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Name***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0005ddada7edbc6551531b57b7dcda22.png)'
  prefs: []
  type: TYPE_IMG
- en: No missing data, data seems pretty clean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All names are distinct, which is not surprising
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Pclass***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/ed63c35e570d7099e6ec349f293e1b0f.png)'
  prefs: []
  type: TYPE_IMG
- en: Survivability closely follows class (first class most likely to survive, third
    class least likely)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar distribution between Train and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***SibSp***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b501d944f082397b63aec94ee5144c22.png)'
  prefs: []
  type: TYPE_IMG
- en: There seems to be a survival spike at 1 and to some degree 2, but (looking at
    the detail pane not shown here) there is a sharp drop-off at 3 and greater. Large
    families couldn’t make it or perhaps were poorer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar distribution between Train and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Parch***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/2eb8e569651180083dc6c394aaf46cc6.png)'
  prefs: []
  type: TYPE_IMG
- en: Similar distribution between Train and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Ticket***'
  prefs: []
  type: TYPE_NORMAL
- en: ~80% distinct values, so about 1 in 5 shared tickets on average
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The highest frequency ticket was 7, which is generally consistent with the maximum
    number of siblings (8)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No missing data, data seems pretty clean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Fare***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/b08cd110c82e7784fe3019c40ef7b071.png)'
  prefs: []
  type: TYPE_IMG
- en: As expected, and as with Pclass, the higher fares survived better (although
    sample size gets pretty thin at higher levels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Correlation Ratio of 0.26 for “Survived” is relatively high, so it would tend
    to support this theory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About 30% distinct values feels a bit high as you would expect fewer set prices
    but looks like there is a lot of granularity, so that’s ok
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only 1 missing record in the Test set, data pretty consistent between Train
    and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Cabin***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/052b88ebf3919e9bba86cdea7f86627a.png)'
  prefs: []
  type: TYPE_IMG
- en: A lot of missing data (up to 78%), but consistent between Train and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximum frequency is 4, which would make sense to have 4 people maximum in a
    cabin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '***Embarked***'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/545d6329b4c4affbc74987888058f77f.png)'
  prefs: []
  type: TYPE_IMG
- en: 3 distinct values (S, C, Q)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only 2 missing rows in Train data. Data seems pretty consistent between Train
    and Test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Survivability somewhat higher at C; could this be a location with richer people?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Either way, “Embarked” shows an Uncertainty Coefficient of only 0.03 for “Survived”,
    so it may not be very significant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: General analysis
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Overall, most data is present and seems consistent and make sense; no major
    outliers or huge surprises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test versus Training data**'
  prefs: []
  type: TYPE_NORMAL
- en: Test has about 50% fewer rows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train and Test are very closely matched in the distribution of missing data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Train and Test data values are very consistent across the board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Association/correlation analysis**'
  prefs: []
  type: TYPE_NORMAL
- en: Sex, Fare, and Pclass give the most information on Survived
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As expected, Fare and Pclass are highly correlated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Age seems to tell us a good amount regarding Pclass, siblings, and to some degree,
    Fare, which would be somewhat expected. It seems to tell us a lot about “Embarked”
    which is a bit more surprising.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Missing data**'
  prefs: []
  type: TYPE_NORMAL
- en: There is no significant missing data except for Age (~20%) and Cabin (~77%)
    (and an odd one here and there on other features)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All this information from just two lines of code! Sweetviz also now supports
    notebook integration (you can insert reports inline) and new features!
  prefs: []
  type: TYPE_NORMAL
- en: Using Sweetviz easily gives me a significant jump-start when I start looking
    at a new dataset. It’s worth pointing out I also find it useful later in the analysis
    process, for example, during feature-generation, to get a quick overview of how
    new features play out. I hope you will find it as a useful tool in your own data
    analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/powerful-eda-exploratory-data-analysis-in-just-two-lines-of-code-using-sweetviz-6c943d32f34).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[Statistical and Visual Exploratory Data Analysis with One Line of Code](https://www.kdnuggets.com/2020/09/statistical-visual-exploratory-data-analysis-one-line-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Cleaner Data Analysis with Pandas Using Pipes](https://www.kdnuggets.com/2021/01/cleaner-data-analysis-pandas-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploratory Data Analysis on Steroids](https://www.kdnuggets.com/2020/07/exploratory-data-analysis-steroids.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[5 Key Skills Needed To Become a Great Data Scientist](https://www.kdnuggets.com/2021/12/5-key-skills-needed-become-great-data-scientist.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[6 Predictive Models Every Beginner Data Scientist Should Master](https://www.kdnuggets.com/2021/12/6-predictive-models-every-beginner-data-scientist-master.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[The Best ETL Tools in 2021](https://www.kdnuggets.com/2021/12/mozart-best-etl-tools-2021.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Write Clean Python Code Using Pipes](https://www.kdnuggets.com/2021/12/write-clean-python-code-pipes.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multi-modal deep learning in less than 15 lines of code](https://www.kdnuggets.com/2023/01/predibase-multi-modal-deep-learning-less-15-lines-code.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
