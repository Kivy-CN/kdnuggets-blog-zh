- en: Build Your Own AutoML Using PyCaret 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2020/08/build-automl-pycaret.html](https://www.kdnuggets.com/2020/08/build-automl-pycaret.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[comments](#comments)'
  prefs: []
  type: TYPE_NORMAL
- en: '**By [Moez Ali](https://www.linkedin.com/in/profile-moez/), Founder & Author
    of PyCaret**'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ebd6f2d3031fd2699b0b56170a71c36a.png)'
  prefs: []
  type: TYPE_IMG
- en: PyCaret — An open source, low-code machine learning library in Python
  prefs: []
  type: TYPE_NORMAL
- en: '**PyCaret 2.0**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Last week we have announced [PyCaret 2.0](https://towardsdatascience.com/announcing-pycaret-2-0-39c11014540e),
    an open source, **low-code** machine learning library in Python that automates
    machine learning workflow. It is an end-to-end machine learning and model management
    tool that speeds up machine learning experiment cycle and helps data scientists
    become more efficient and productive.
  prefs: []
  type: TYPE_NORMAL
- en: In this post we present a **step-by-step tutorial** on how PyCaret can be used
    to build an Automated Machine Learning Solution within [Power BI](https://powerbi.microsoft.com/en-us/),
    thus allowing data scientists and analysts to add a layer of machine learning
    to their Dashboards without any additional license or software costs. PyCaret
    is an open source and **free to use **Python library that comes with a wide range
    of functions that are built to work within Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this article you will learn how to implement the following in
    Power BI:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Python conda environment and install pycaret==2.0.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link the newly created conda environment with Power BI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build your first AutoML solution in Power BI and present the performance metrics
    on dashboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Productionalize / deploy your AutoML solution in Power BI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Power BI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Power BI is a business analytics solution that lets you visualize your data
    and share insights across your organization, or embed them in your app or website.
    In this tutorial, we will use [Power BI Desktop](https://powerbi.microsoft.com/en-us/downloads/) for
    machine learning by importing the PyCaret library into Power BI.
  prefs: []
  type: TYPE_NORMAL
- en: What is Automated Machine Learning?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Automated machine learning (AutoML) is the process of automating the time consuming,
    iterative tasks of machine learning. It allows data scientists and analysts to
    build machine learning models with efficiency while sustaining the model quality.
    The final goal of any AutoML solution is to finalize the best model based on some
    performance criteria.
  prefs: []
  type: TYPE_NORMAL
- en: Traditional machine learning model development process is resource-intensive,
    requiring significant domain knowledge and time to produce and compare dozens
    of models. With automated machine learning, you’ll accelerate the time it takes
    to get production-ready ML models with great ease and efficiency.
  prefs: []
  type: TYPE_NORMAL
- en: '**How Does PyCaret works?**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'PyCaret is a workflow automation tool for supervised and unsupervised machine
    learning. It is organized into six modules and each module has a set of functions
    available to perform some specific action. Each function takes an input and returns
    an output, which in most cases is a trained machine learning model. Modules available
    as of the second release are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Classification](https://www.pycaret.org/classification)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Regression](https://www.pycaret.org/regression)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Clustering](https://www.pycaret.org/clustering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://www.pycaret.org/anomaly-detection)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://www.pycaret.org/nlp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Association Rule Mining](https://www.pycaret.org/association-rules)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All modules in PyCaret supports data preparation (over 25+ essential preprocessing
    techniques, comes with a huge collection of untrained models & support for custom
    models, automatic hyperparameter tuning, model analysis and interpretability,
    automatic model selection, experiment logging and easy cloud deployment options.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f04fa31cd25523d0e3a6fa808557fbb0.png)'
  prefs: []
  type: TYPE_IMG
- en: https://www.pycaret.org/guide
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about PyCaret, [click here](https://towardsdatascience.com/announcing-pycaret-2-0-39c11014540e) to
    read our official release announcement.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to get started in Python, [click here](https://github.com/pycaret/pycaret/tree/master/examples) to
    see a gallery of example notebooks to get started.
  prefs: []
  type: TYPE_NORMAL
- en: “PyCaret is democratizing machine learning and the use of advanced analytics
    by providing free, open source, and low-code machine learning solution for business
    analysts, domain experts, citizen data scientists, and experienced data scientists”.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Before we start
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using Python for the first time, installing Anaconda Distribution
    is the easiest way to get started. [Click here](https://www.anaconda.com/distribution/) to
    download Anaconda Distribution with Python 3.7 or greater.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/c7c8ab066e516a98e8339027d3f08f0c.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we start using PyCaret’s machine learning capabilities in Power BI we
    need to create a virtual environment and install pycaret. This is a three-step
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[✅](https://fsymbols.com/signs/tick/) **Step 1 — Creating an anaconda environment**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Anaconda Prompt **from start menu and execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/ca629ea77ecd0f69afc5f6279ebf25f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Anaconda Prompt — Creating an environment
  prefs: []
  type: TYPE_NORMAL
- en: '[✅](https://fsymbols.com/signs/tick/) **Step 2 — Installing PyCaret**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following code in Anaconda Prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Installation may take 15–20 minutes. If you are having issues with installation,
    please see our [GitHub](https://www.github.com/pycaret/pycaret) page for known
    issues and resolutions.
  prefs: []
  type: TYPE_NORMAL
- en: '[✅](https://fsymbols.com/signs/tick/)**Step 3 — Setting up a Python Directory
    in Power BI**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The virtual environment created must be linked with Power BI. This can be done
    using Global Settings in Power BI Desktop (File → Options → Global → Python scripting).
    Anaconda Environment by default is installed under:'
  prefs: []
  type: TYPE_NORMAL
- en: '`C:\Users\***username***\AppData\Local\Continuum\anaconda3\envs\myenv`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/1b946ad7361f6b2dc10da9efbb2296a0.png)'
  prefs: []
  type: TYPE_IMG
- en: File → Options → Global → Python scripting
  prefs: []
  type: TYPE_NORMAL
- en: '**???? Lets get started**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Setting the Business Context
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An insurance company wants to improve its cash flow forecasting by better predicting
    the patient charges using the demographic and basic patient health risk metrics
    at the time of hospitalization.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/15cb86b37c83b7fbc80ec7c8d1b53f3c.png)'
  prefs: []
  type: TYPE_IMG
- en: '*(*[*data source*](https://www.kaggle.com/mirichoi0218/insurance#insurance.csv)*)*'
  prefs: []
  type: TYPE_NORMAL
- en: Objective
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To train and select the best performing regression model that predicts patient
    charges based on the other variables in the dataset i.e. age, sex, bmi, children,
    smoker, and region.
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 1 — Load the dataset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can load dataset directly from out GitHub by going to Power BI Desktop →
    Get Data → Web
  prefs: []
  type: TYPE_NORMAL
- en: Link to dataset: [https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/insurance.csv](https://raw.githubusercontent.com/pycaret/pycaret/master/datasets/insurance.csv)
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/7c9a9d98fe18942bb5df5adac07e96a8.png)'
  prefs: []
  type: TYPE_IMG
- en: Power BI Desktop → Get Data → Web
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a duplicate dataset in Power Query:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/b9cdb8d9f55c88017447107fcea8bf85.png)'
  prefs: []
  type: TYPE_IMG
- en: Power Query → Create a duplicate dataset
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 2— Run AutoML as Python Script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Run the following code in Power Query (Transform → Run Python script):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![Figure](../Images/cb1d217ca940b1dd5ad8481e25483e4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Script in Power Query
  prefs: []
  type: TYPE_NORMAL
- en: The first two line of code is for importing the relevant module and initializing
    the setup function. The setup function performs several imperative steps required
    in machine learning such as cleaning missing values (if any), splitting the data
    into train and test, setting up cross validation strategy, defining metrics, performing
    algorithm-specific transformations etc.
  prefs: []
  type: TYPE_NORMAL
- en: The magic function that trains multiple models, compares and evaluates performance
    metrics is **compare_models. **It returns the best model based on ‘**sort’ **parameter
    that can be defined inside compare_models. By default, it uses ‘R2’ for regression
    use-case and ‘Accuracy’ for classification use-case.
  prefs: []
  type: TYPE_NORMAL
- en: Rest of the lines are for finalizing the best model returned through compare_models
    and saving it as a pickle file in your local diretory. Last line returns the dataframe
    with details of model trained and their performance metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'Output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/1bf6f2ac6a2004416fe10d76f3b6e164.png)'
  prefs: []
  type: TYPE_IMG
- en: Output from Python Script
  prefs: []
  type: TYPE_NORMAL
- en: With just few lines we have trained over 20 models and the table presents the
    performance metrics based on 10 fold cross validation.
  prefs: []
  type: TYPE_NORMAL
- en: Top performing model **Gradient Boosting Regressor** will be saved along with
    the entire transformation pipeline as a pickle file in your local directory. This
    file can be consumed later to generate predictions on a new dataset (see step
    3 below).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/2f3d1f34f6ce81e94ad11f60a177486a.png)'
  prefs: []
  type: TYPE_IMG
- en: Transformation Pipeline and Model saved as a pickle file
  prefs: []
  type: TYPE_NORMAL
- en: 'PyCaret works on the idea of modular automation. As such if you have more resources
    and time for training you can extend the script to perform hyperparameter tuning,
    ensembling, and other available modeling techniques. See example below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: We have now returned top 5 models instead of the one highest performing model.
    We have then created a list comprehension (loop) to tune hyperparameters of top
    candidate models and then finally **automl function **selects the single best
    performing model which is then saved as a pickle file (Note that we didn’t use **finalize_model **this
    time because automl function returns the finalized model).
  prefs: []
  type: TYPE_NORMAL
- en: '**Sample Dashboard**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sample dashboard is created. PBIX file is [uploaded here](https://github.com/pycaret/pycaret-powerbi-automl).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/28d20533650eb410ff6ba82d854e0d10.png)'
  prefs: []
  type: TYPE_IMG
- en: Dashboard created using PyCaret AutoML results
  prefs: []
  type: TYPE_NORMAL
- en: ???? Step 3 — Deploy Model to generate predictions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once we have a final model saved as a pickle file we can use it to predict charges
    on the new dataset.
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading new dataset**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For demonstration purposes, we will load the same dataset again and remove
    the ‘charges’ column from the dataset. Execute the following code as a Python
    script in Power Query to get the predictions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Output :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/f8e32de1177d53c5a94f5857415a408e.png)'
  prefs: []
  type: TYPE_IMG
- en: predict_model function output in Power Query
  prefs: []
  type: TYPE_NORMAL
- en: '**Deploy on Power BI Service**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you publish a Power BI report with Python scripts to the service, these
    scripts will also be executed when your data is refreshed through the on-premises
    data gateway.
  prefs: []
  type: TYPE_NORMAL
- en: To enable this, you must ensure that the Python runtime with the dependent Python
    packages are also installed on the machine hosting your personal gateway. Note,
    Python script execution is not supported for on-premises data gateways shared
    by multiple users. [Click here](https://powerbi.microsoft.com/en-us/blog/python-visualizations-in-power-bi-service/) to
    read more about this.
  prefs: []
  type: TYPE_NORMAL
- en: PBIX files used in this tutorial is uploaded on this GitHub Repository: [https://github.com/pycaret/pycaret-powerbi-automl](https://github.com/pycaret/pycaret-powerbi-automl)
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to learn more about PyCaret 2.0, read this [announcement](https://towardsdatascience.com/announcing-pycaret-2-0-39c11014540e).
  prefs: []
  type: TYPE_NORMAL
- en: If you have used PyCaret before, you might be interested in [release notes](https://github.com/pycaret/pycaret/releases/tag/2.0) for
    current release.
  prefs: []
  type: TYPE_NORMAL
- en: There is no limit to what you can achieve using this light-weight workflow automation
    library in Python. If you find this useful, please do not forget to give us ⭐️
    on our github repo.
  prefs: []
  type: TYPE_NORMAL
- en: To hear more about PyCaret follow us on [LinkedIn](https://www.linkedin.com/company/pycaret/) and [Youtube](https://www.youtube.com/channel/UCxA1YTYJ9BEeo50lxyI_B3g).
  prefs: []
  type: TYPE_NORMAL
- en: '**You may also be interested it:**'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Machine Learning in Power BI using PyCaret](https://towardsdatascience.com/machine-learning-in-power-bi-using-pycaret-34307f09394a)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Build your first Anomaly Detector in Power BI using PyCaret](https://towardsdatascience.com/build-your-first-anomaly-detector-in-power-bi-using-pycaret-2b41b363244e)'
  prefs: []
  type: TYPE_NORMAL
- en: '[How to implement Clustering in Power BI using PyCaret](https://towardsdatascience.com/how-to-implement-clustering-in-power-bi-using-pycaret-4b5e34b1405b)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Topic Modeling in Power BI using PyCaret](https://towardsdatascience.com/topic-modeling-in-power-bi-using-pycaret-54422b4e36d6)'
  prefs: []
  type: TYPE_NORMAL
- en: Important Links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Blog](https://medium.com/@moez_62905)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Release Notes for PyCaret 2.0](https://github.com/pycaret/pycaret/releases/tag/2.0)'
  prefs: []
  type: TYPE_NORMAL
- en: '[User Guide / Documentation](https://www.pycaret.org/guide)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Github](https://www.github.com/pycaret/pycaret)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Stackoverflow](https://stackoverflow.com/questions/tagged/pycaret)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Install PyCaret](https://www.pycaret.org/install)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Notebook Tutorials](https://www.pycaret.org/tutorial)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Contribute in PyCaret](https://www.pycaret.org/contribute)'
  prefs: []
  type: TYPE_NORMAL
- en: Want to learn about a specific module?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Click on the links below to see the documentation and working examples.
  prefs: []
  type: TYPE_NORMAL
- en: '[Classification](https://www.pycaret.org/classification)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Regression](https://www.pycaret.org/regression)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Clustering](https://www.pycaret.org/clustering)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Anomaly Detection](https://www.pycaret.org/anomaly-detection)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Natural Language Processing](https://www.pycaret.org/nlp)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Association Rule Mining](https://www.pycaret.org/association-rules)'
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Moez Ali](https://www.linkedin.com/in/profile-moez/)** is a Data Scientist,
    and is Founder & Author of PyCaret.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://towardsdatascience.com/build-your-own-automl-in-power-bi-using-pycaret-8291b64181d).
    Reposted with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[GitHub is the Best AutoML You Will Ever Need](/2020/08/github-best-automl-ever-need.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[5 Things You Don’t Know About PyCaret](/2020/07/5-things-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Deploy a Machine Learning Pipeline to the Cloud Using a Docker Container](/2020/06/deploy-machine-learning-pipeline-cloud-docker.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[LangChain 101: Build Your Own GPT-Powered Applications](https://www.kdnuggets.com/2023/04/langchain-101-build-gptpowered-applications.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Build Your Own PandasAI with LlamaIndex](https://www.kdnuggets.com/build-your-own-pandasai-with-llamaindex)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Binary Classification with PyCaret](https://www.kdnuggets.com/2021/12/introduction-binary-classification-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Introduction to Clustering in Python with PyCaret](https://www.kdnuggets.com/2021/12/introduction-clustering-python-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Announcing PyCaret 3.0: Open-source, Low-code Machine Learning in Python](https://www.kdnuggets.com/2023/03/announcing-pycaret-30-opensource-lowcode-machine-learning-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Getting Started with PyCaret](https://www.kdnuggets.com/2022/11/getting-started-pycaret.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
