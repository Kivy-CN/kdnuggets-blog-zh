["```py\nimport tensorflow.keras.layers\n```", "```py\ninput_layer = tensorflow.keras.layers.Input(shape=(784), name=\"input_layer\")\n```", "```py\ndense_layer_1 = tensorflow.keras.layers.Dense(units=500, name=\"dense_layer_1\")(input_layer)\n```", "```py\nactiv_layer_1 = tensorflow.keras.layers.ReLU(name=\"activ_layer_1\")(dense_layer_1)\n```", "```py\ndense_layer_2 = tensorflow.keras.layers.Dense(units=250, name=\"dense_layer_2\")(activ_layer_1)\nactiv_layer_2 = tensorflow.keras.layers.ReLU(name=\"relu_layer_2\")(dense_layer_2)\n\ndense_layer_3 = tensorflow.keras.layers.Dense(units=20, name=\"dense_layer_3\")(activ_layer_2)\nactiv_layer_3 = tensorflow.keras.layers.ReLU(name=\"relu_layer_3\")(dense_layer_3)\n```", "```py\ndense_layer_4 = tensorflow.keras.layers.Dense(units=10, name=\"dense_layer_4\")(activ_layer_3)\n```", "```py\noutput_layer = tensorflow.keras.layers.Softmax(name=\"output_layer\")(dense_layer_4)\n```", "```py\nmodel = tensorflow.keras.models.Model(input_layer, output_layer, name=\"model\")\n```", "```py\nmodel.compile(optimizer=tensorflow.keras.optimizers.Adam(lr=0.0005), loss=\"categorical_crossentropy\")\n```", "```py\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\ninput_layer (InputLayer)     [(None, 784)]             0         \n_________________________________________________________________\ndense_layer_1 (Dense)        (None, 500)               392500    \n_________________________________________________________________\nrelu_layer_1 (ReLU)          (None, 500)               0         \n_________________________________________________________________\ndense_layer_2 (Dense)        (None, 250)               125250    \n_________________________________________________________________\nrelu_layer_2 (ReLU)          (None, 250)               0         \n_________________________________________________________________\ndense_layer_3 (Dense)        (None, 20)                12550     \n_________________________________________________________________\nrelu_layer_3 (ReLU)          (None, 20)                0         \n_________________________________________________________________\ndense_layer_4 (Dense)        (None, 10)                510       \n_________________________________________________________________\noutput_layer (Softmax)       (None, 10)                0         \n=================================================================\nTotal params: 530,810\nTrainable params: 530,810\nNon-trainable params: 0\n_________________________________________________________________\n```", "```py\n(x_train, y_train), (x_test, y_test) = tensorflow.keras.datasets.mnist.load_data()\n\nx_train = x_train.astype(numpy.float64) / 255.0\nx_test = x_test.astype(numpy.float64) / 255.0\n\nx_train = x_train.reshape((x_train.shape[0], numpy.prod(x_train.shape[1:])))\nx_test = x_test.reshape((x_test.shape[0], numpy.prod(x_test.shape[1:])))\n```", "```py\ny_test = tensorflow.keras.utils.to_categorical(y_test)\ny_train = tensorflow.keras.utils.to_categorical(y_train)\n```", "```py\nmodel.fit(x_train, y_train, epochs=20, batch_size=256, validation_data=(x_test, y_test))\n```", "```py\ndef custom_layer(tensor):\n    return tensor + 2\n```", "```py\nlambda_layer = tensorflow.keras.layers.Lambda(custom_layer, name=\"lambda_layer\")(dense_layer_3)\n```", "```py\ninput_layer = tensorflow.keras.layers.Input(shape=(784), name=\"input_layer\")\n\ndense_layer_1 = tensorflow.keras.layers.Dense(units=500, name=\"dense_layer_1\")(input_layer)\nactiv_layer_1 = tensorflow.keras.layers.ReLU(name=\"relu_layer_1\")(dense_layer_1)\n\ndense_layer_2 = tensorflow.keras.layers.Dense(units=250, name=\"dense_layer_2\")(activ_layer_1)\nactiv_layer_2 = tensorflow.keras.layers.ReLU(name=\"relu_layer_2\")(dense_layer_2)\n\ndense_layer_3 = tensorflow.keras.layers.Dense(units=20, name=\"dense_layer_3\")(activ_layer_2)\n\ndef custom_layer(tensor):\n    return tensor + 2\n\nlambda_layer = tensorflow.keras.layers.Lambda(custom_layer, name=\"lambda_layer\")(dense_layer_3)\n\nactiv_layer_3 = tensorflow.keras.layers.ReLU(name=\"relu_layer_3\")(lambda_layer)\n\ndense_layer_4 = tensorflow.keras.layers.Dense(units=10, name=\"dense_layer_4\")(activ_layer_3)\noutput_layer = tensorflow.keras.layers.Softmax(name=\"output_layer\")(dense_layer_4)\n\nmodel = tensorflow.keras.models.Model(input_layer, output_layer, name=\"model\")\n```", "```py\nbefore_lambda_model = tensorflow.keras.models.Model(input_layer, dense_layer_3, name=\"before_lambda_model\")\nafter_lambda_model = tensorflow.keras.models.Model(input_layer, lambda_layer, name=\"after_lambda_model\")\n```", "```py\nimport tensorflow.keras.layers\nimport tensorflow.keras.models\nimport tensorflow.keras.optimizers\nimport tensorflow.keras.datasets\nimport tensorflow.keras.utils\nimport tensorflow.keras.backend\nimport numpy\n\ninput_layer = tensorflow.keras.layers.Input(shape=(784), name=\"input_layer\")\n\ndense_layer_1 = tensorflow.keras.layers.Dense(units=500, name=\"dense_layer_1\")(input_layer)\nactiv_layer_1 = tensorflow.keras.layers.ReLU(name=\"relu_layer_1\")(dense_layer_1)\n\ndense_layer_2 = tensorflow.keras.layers.Dense(units=250, name=\"dense_layer_2\")(activ_layer_1)\nactiv_layer_2 = tensorflow.keras.layers.ReLU(name=\"relu_layer_2\")(dense_layer_2)\n\ndense_layer_3 = tensorflow.keras.layers.Dense(units=20, name=\"dense_layer_3\")(activ_layer_2)\n\nbefore_lambda_model = tensorflow.keras.models.Model(input_layer, dense_layer_3, name=\"before_lambda_model\")\n\ndef custom_layer(tensor):\n    return tensor + 2\n\nlambda_layer = tensorflow.keras.layers.Lambda(custom_layer, name=\"lambda_layer\")(dense_layer_3)\nafter_lambda_model = tensorflow.keras.models.Model(input_layer, lambda_layer, name=\"after_lambda_model\")\n\nactiv_layer_3 = tensorflow.keras.layers.ReLU(name=\"relu_layer_3\")(lambda_layer)\n\ndense_layer_4 = tensorflow.keras.layers.Dense(units=10, name=\"dense_layer_4\")(activ_layer_3)\noutput_layer = tensorflow.keras.layers.Softmax(name=\"output_layer\")(dense_layer_4)\n\nmodel = tensorflow.keras.models.Model(input_layer, output_layer, name=\"model\")\n\nmodel.compile(optimizer=tensorflow.keras.optimizers.Adam(lr=0.0005), loss=\"categorical_crossentropy\")\nmodel.summary()\n\n(x_train, y_train), (x_test, y_test) = tensorflow.keras.datasets.mnist.load_data()\n\nx_train = x_train.astype(numpy.float64) / 255.0\nx_test = x_test.astype(numpy.float64) / 255.0\n\nx_train = x_train.reshape((x_train.shape[0], numpy.prod(x_train.shape[1:])))\nx_test = x_test.reshape((x_test.shape[0], numpy.prod(x_test.shape[1:])))\n\ny_test = tensorflow.keras.utils.to_categorical(y_test)\ny_train = tensorflow.keras.utils.to_categorical(y_train)\n\nmodel.fit(x_train, y_train, epochs=20, batch_size=256, validation_data=(x_test, y_test))\n```", "```py\np = model.predict(x_train)\n\nm1 = before_lambda_model.predict(x_train)\nm2 = after_lambda_model.predict(x_train)\n```", "```py\nprint(m1[0, :])\nprint(m2[0, :])\n\n[ 14.420735    8.872794   25.369402    1.4622561   5.672293    2.5202641\n -14.753801   -3.8822086  -1.0581762  -6.4336205  13.342142   -3.0627508\n  -5.694006   -6.557313   -1.6567478  -3.8457105  11.891999   20.581928\n   2.669979   -8.092522 ]\n[ 16.420734    10.872794    27.369402     3.462256     7.672293\n   4.520264   -12.753801    -1.8822086    0.94182384  -4.4336205\n  15.342142    -1.0627508   -3.694006    -4.557313     0.34325218\n  -1.8457105   13.891999    22.581928     4.669979    -6.0925217 ]\n```", "```py\nlambda_layer = tensorflow.keras.layers.Lambda(custom_layer, name=\"lambda_layer\")([dense_layer_3, activ_layer_3])\n```", "```py\ndef custom_layer(tensor):\n    tensor1 = tensor[0]\n    tensor2 = tensor[1]\n    return tensor1 + tensor2\n```", "```py\nbefore_lambda_model1 = tensorflow.keras.models.Model(input_layer, dense_layer_3, name=\"before_lambda_model1\")\nbefore_lambda_model2 = tensorflow.keras.models.Model(input_layer, activ_layer_3, name=\"before_lambda_model2\")\n\nlambda_layer = tensorflow.keras.layers.Lambda(custom_layer, name=\"lambda_layer\")([dense_layer_3, activ_layer_3])\nafter_lambda_model = tensorflow.keras.models.Model(input_layer, lambda_layer, name=\"after_lambda_model\")\n```", "```py\nm1 = before_lambda_model1.predict(x_train)\nm2 = before_lambda_model2.predict(x_train)\nm3 = after_lambda_model.predict(x_train)\n\nprint(m1[0, :])\nprint(m2[0, :])\nprint(m3[0, :])\n\n[ 1.773366   -3.4378722   0.22042789 11.220362    3.4020965  14.487111\n  4.239182   -6.8589864  -6.428128   -5.477719   -8.799093    7.264849\n 17.503246   -6.809489   -6.846208   16.094025   24.483786   -7.084775\n 17.341183   20.311539  ]\n[ 1.773366    0\\.          0.22042789 11.220362    3.4020965  14.487111\n  4.239182    0\\.          0\\.          0\\.          0\\.          7.264849\n 17.503246    0\\.          0\\.         16.094025   24.483786    0.\n 17.341183   20.311539  ]\n[ 3.546732   -3.4378722   0.44085577 22.440723    6.804193   28.974222\n  8.478364   -6.8589864  -6.428128   -5.477719   -8.799093   14.529698\n 35.006493   -6.809489   -6.846208   32.18805    48.96757    -7.084775\n 34.682365   40.623077  ]\n```", "```py\nmodel.save(\"model.h5\")\n```", "```py\nloaded_model = tensorflow.keras.models.load_model(\"model.h5\")\n```", "```py\nmodel.save_weights('model_weights.h5')\n```", "```py\ninput_layer = tensorflow.keras.layers.Input(shape=(784), name=\"input_layer\")\n\ndense_layer_1 = tensorflow.keras.layers.Dense(units=500, name=\"dense_layer_1\")(input_layer)\nactiv_layer_1 = tensorflow.keras.layers.ReLU(name=\"relu_layer_1\")(dense_layer_1)\n\ndense_layer_2 = tensorflow.keras.layers.Dense(units=250, name=\"dense_layer_2\")(activ_layer_1)\nactiv_layer_2 = tensorflow.keras.layers.ReLU(name=\"relu_layer_2\")(dense_layer_2)\n\ndense_layer_3 = tensorflow.keras.layers.Dense(units=20, name=\"dense_layer_3\")(activ_layer_2)\nactiv_layer_3 = tensorflow.keras.layers.ReLU(name=\"relu_layer_3\")(dense_layer_3)\n\ndef custom_layer(tensor):\n    tensor1 = tensor[0]\n    tensor2 = tensor[1]\n\n    epsilon = tensorflow.keras.backend.random_normal(shape=tensorflow.keras.backend.shape(tensor1), mean=0.0, stddev=1.0)\n    random_sample = tensor1 + tensorflow.keras.backend.exp(tensor2/2) * epsilon\n    return random_sample\n\nlambda_layer = tensorflow.keras.layers.Lambda(custom_layer, name=\"lambda_layer\")([dense_layer_3, activ_layer_3])\n\ndense_layer_4 = tensorflow.keras.layers.Dense(units=10, name=\"dense_layer_4\")(lambda_layer)\nafter_lambda_model = tensorflow.keras.models.Model(input_layer, dense_layer_4, name=\"after_lambda_model\")\n\noutput_layer = tensorflow.keras.layers.Softmax(name=\"output_layer\")(dense_layer_4)\n\nmodel = tensorflow.keras.models.Model(input_layer, output_layer, name=\"model\")\n\nmodel.compile(optimizer=tensorflow.keras.optimizers.Adam(lr=0.0005), loss=\"categorical_crossentropy\")\n```", "```py\nmodel.load_weights('model_weights.h5')\n```"]