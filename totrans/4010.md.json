["```py\ndef sum(a: int, b: int) -> int:\n\treturn a + b \n```", "```py\nprint(sum(2,5)) # 7\n# print(sum('hello', 2)) # TypeError: can only concatenate str (not \"int\") to str\n# print(sum(3,'world')) # TypeError: unsupported operand type(s) for +: 'int' and 'str'\nprint(sum('hello', 'world')) # helloworld \n```", "```py\nfrom typing import Union, Tuple, List\nimport numpy as np\n\ndef sum(variable: Union[np.ndarray, List]) -> float:\n\ttotal = 0\n\t# function body to calculate the sum of values in iterable\n\treturn total \n```", "```py\ndef sum(variable: Union[np.ndarray, List[float]]) -> float:\n\ttotal = 0\n\t# function body to calculate the sum of values in iterable\n\treturn total \n```", "```py\ndef calculate_interest(principal, rate, years):\n\treturn principal * rate * years \n```", "```py\nfrom typing import Union\n\ndef calculate_interest(\n\tprincipal: Union[int, float],\n\trate: float,\n\tyears: int\n) -> Union[int, float]:\n\tif not isinstance(principal, (int, float)):\n    \t    raise TypeError(\"Principal must be an integer or float\")\n\tif not isinstance(rate, float):\n    \t    raise TypeError(\"Rate must be a float\")\n\tif not isinstance(years, int):\n    \t    raise TypeError(\"Years must be an integer\")\n\tif principal <= 0:\n    \t    raise ValueError(\"Principal must be positive\")\n\tif rate <= 0:\n    \t    raise ValueError(\"Rate must be positive\")\n\tif years <= 0:\n    \t    raise ValueError(\"Years must be positive\")\n\n\tinterest = principal * rate * years\n\treturn interest \n```", "```py\nimport os\n\ndef load_documents(directory):\n\tfor document_path in os.listdir(directory):\n    \t    with open(document_path) as _file:\n        \t        yield _file\n\ndef preprocess_document(document):\n\tfiltered_document = None\n\t# preprocessing code for the document stored in filtered_document\n\treturn filtered_document\n\ndirectory = \"docs/\"\nfor doc in load_documents(directory):\n\tpreprocess_document(doc) \n```", "```py\nfile_path = \"example.txt\"\nfile = None\n\ntry:\n\tfile = open(file_path, 'r')\n\n\tcontents = file.read()\n\tprint(\"File contents:\", contents)\n\nfinally:\n\tif file is not None:\n    \tfile.close() \n```", "```py\nfile_path = \"example.txt\"\nwith open(file_path, 'r') as file:\n\tcontents = file.read()\n\tprint(\"File contents:\", contents) \n```", "```py\nclass CustomContextManger:\n\tdef __enter__(self):\n    \t    # Code to create instance of resource\n    \t    return self\n\n\tdef __exit__(self, exc_type, exc_value, traceback):\n    \t    # Teardown code to close resource\n     \t    return None \n```", "```py\nwith CustomContextManger() as _cm:\n\tprint(\"Custom Context Manager Resource can be accessed here\")\n```", "```py\ndef service_request():\n\t# Function body representing complex computation\n\treturn True \n```", "```py\nimport time\n\ndef service_request():\n\tstart_time = time.time()\n\t# Function body representing complex computation\n\tprint(f\"Time Taken: {time.time() - start_time}s\")\n\treturn True \n```", "```py\ndef request_logger(func):\n\tdef wrapper(*args, **kwargs):\n    \t    start_time = time.time()\n    \t    res = func()\n    \t    print(f\"Time Taken: {time.time() - start_time}s\")\n    \t    return res\n\treturn wrapper \n```", "```py\n@request_logger\ndef service_request():\n\t# Function body representing complex computation\n\treturn True \n```", "```py\n@request_logger\ndef service_request():\n\t# Function body representing complex computation\n\treturn True\n\n@request_logger\ndef service_another_request():\n\t# Function body\n\treturn True \n```", "```py\ndef make_point_3d(pt):\n\tmatch pt:\n    \t    case (x, y):\n        \t\treturn Point3d(x, y, 0)\n    \t    case (x, y, z):\n        \t\treturn Point3d(x, y, z)\n    \t    case Point2d(x, y):\n        \t\treturn Point3d(x, y, 0)\n    \t    case Point3d(_, _, _):\n        \t\treturn pt\n    \t    case _:\n        \t\traise TypeError(\"not a point we support\") \n```", "```py\n# config.yaml\ndatabase:\n  host: localhost\n  port: 5432\n  username: myuser\n  password: mypassword\n  dbname: mydatabase \n```", "```py\nclass DatabaseConfig:\n\tdef __init__(self, host, port, username, password, dbname):\n    \t    self.host = host\n    \t    self.port = port\n    \t    self.username = username\n    \t    self.password = password\n    \t    self.dbname = dbname\n\n\t@classmethod\n\tdef from_dict(cls, config_dict):\n    \t    return cls(**config_dict) \n```", "```py\nimport yaml\n\ndef load_config(filename):\n\twith open(filename, \"r\") as file:\n    \treturn yaml.safe_load(file)\n\nconfig = load_config(\"config.yaml\")\ndb_config = DatabaseConfig.from_dict(config[\"database\"]) \n```"]