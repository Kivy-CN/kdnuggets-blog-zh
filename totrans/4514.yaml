- en: Audio Data Analysis Using Deep Learning with Python (Part 1)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行深度学习的音频数据分析（第一部分）
- en: 原文：[https://www.kdnuggets.com/2020/02/audio-data-analysis-deep-learning-python-part-1.html](https://www.kdnuggets.com/2020/02/audio-data-analysis-deep-learning-python-part-1.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2020/02/audio-data-analysis-deep-learning-python-part-1.html](https://www.kdnuggets.com/2020/02/audio-data-analysis-deep-learning-python-part-1.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: While much of the literature and buzz on deep learning concerns computer vision
    and natural language processing(NLP), audio analysis — a field that includes automatic
    speech recognition(ASR), digital signal processing, and music classification,
    tagging, and generation — is a growing subdomain of deep learning applications.
    Some of the most popular and widespread machine learning systems, virtual assistants
    Alexa, Siri, and Google Home, are largely products built atop models that can
    extract information from audio signals.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数文献和关于深度学习的讨论集中在计算机视觉和自然语言处理（NLP）上，但音频分析——包括自动语音识别（ASR）、数字信号处理以及音乐分类、标记和生成——是深度学习应用的一个不断增长的子领域。一些最受欢迎和广泛应用的机器学习系统，如虚拟助手
    Alexa、Siri 和 Google Home，大多是建立在能够从音频信号中提取信息的模型之上的产品。
- en: Audio data analysis is about analyzing and understanding audio signals captured
    by digital devices, with numerous applications in the enterprise, healthcare,
    productivity, and smart cities. Applications include customer satisfaction analysis
    from customer support calls, media content analysis and retrieval, medical diagnostic
    aids and patient monitoring, assistive technologies for people with hearing impairments,
    and audio analysis for public safety.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 音频数据分析是对数字设备捕获的音频信号进行分析和理解的过程，广泛应用于企业、医疗、生产力和智能城市等领域。应用包括从客户支持电话中分析客户满意度、媒体内容分析和检索、医学诊断辅助和患者监测、听力障碍者的辅助技术，以及公共安全的音频分析。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业的捷径。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的 IT'
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: In the first part of this article series, we will talk about all you need to
    know before getting started with the audio data analysis and extract necessary
    features from a sound/audio file. We will also build an Artificial Neural Network(ANN)
    for the music genre classification. In the second part, we will accomplish the
    same by creating the Convolutional Neural Network and will compare their accuracy.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本系列文章的第一部分，我们将讨论在开始音频数据分析之前你需要了解的所有内容，并从音频文件中提取必要的特征。我们还将建立一个用于音乐流派分类的人工神经网络（ANN）。在第二部分，我们将通过创建卷积神经网络完成相同的任务，并比较它们的准确性。
- en: Table of Contents
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目录
- en: Audio file overview
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频文件概述
- en: Applications of Audio Processing
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频处理的应用
- en: Audio Processing with Python
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 进行音频处理
- en: Spectrogram
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声谱图
- en: Feature extraction from Audio signal
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从音频信号中提取特征
- en: Genre classification using Artificial Neural Networks(ANN).
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用人工神经网络（ANN）进行流派分类。
- en: Audio file overview
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 音频文件概述
- en: The sound excerpts are digital audio files in .wav format. Sound waves are digitized
    by sampling them at discrete intervals known as the sampling rate (typically 44.1kHz
    for CD-quality audio meaning samples are taken 44,100 times per second).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 音频片段是 .wav 格式的数字音频文件。声音波通过在离散时间间隔（称为采样率，CD 质量音频通常为 44.1kHz，意味着每秒采样 44,100 次）进行采样来数字化。
- en: Each sample is the amplitude of the wave at a particular time interval, where
    the bit depth determines how detailed the sample will be also known as the dynamic
    range of the signal (typically 16bit which means a sample can range from 65,536
    amplitude values).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每个样本是特定时间间隔内波的幅度，位深度决定了样本的详细程度，也称为信号的动态范围（通常为 16bit，这意味着一个样本的幅度值范围从 65,536 到）。
- en: '**What is Sampling and Sampling frequency?**'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**In signal processing, sampling is the reduction of a continuous signal into
    a series of discrete values. The sampling frequency or rate is the number of samples
    taken over some fixed amount of time. A high sampling frequency results in less
    information loss but higher computational expense, and low sampling frequencies
    have higher information loss but are fast and cheap to compute.**'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Figure](../Images/0ae42a89ddb41474f12e1a201e47e5fc.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: A sound wave, in red, represented digitally, in blue (after sampling and 4-bit
    quantisation), with the resulting array shown on the right. Original © Aquegg
    | Wikimedia Commons
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Applications of Audio Processing
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What are the potential applications of audio processing? Here I would list
    a few of them:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Indexing music collections according to their audio features.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recommending music for radio channels
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarity search for audio files (aka Shazam)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speech processing and synthesis — generating artificial voice for conversational
    agents
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio Data Handling using Python
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sound is represented in the form of an **audio** signal having parameters such
    as frequency, bandwidth, decibel, etc. A typical audio signal can be expressed
    as a function of Amplitude and Time.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure](../Images/ab5d5b6e3239dee7c36f1c2ddf06f771.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: '[Source](https://commons.wikimedia.org/wiki/File:FFT-Time-Frequency-View.png)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: There are devices built that help you catch these sounds and represent it in
    a computer-readable format. Examples of these formats are
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: wav (Waveform Audio File) format
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mp3 (MPEG-1 Audio Layer 3) format
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WMA (Windows Media Audio) format
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A typical audio processing process involves the extraction of acoustics features
    relevant to the task at hand, followed by decision-making schemes that involve
    detection, classification, and knowledge fusion. Thankfully we have some useful
    python libraries which make this task easier.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '**Python Audio Libraries:**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Python has some great libraries for audio processing like Librosa and PyAudio.There
    are also built-in modules for some basic audio functionalities.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'We will mainly use two libraries for audio acquisition and playback:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '**1\. Librosa**'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: It is a Python module to analyze audio signals in general but geared more towards
    music. It includes the nuts and bolts to build a MIR(Music information retrieval)
    system. It has been very well [documented](https://librosa.github.io/librosa/) along
    with a lot of examples and tutorials.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '**Installation:**'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: To fuel more audio-decoding power, you can install *ffmpeg* which ships with
    many audio decoders.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: '**2\. IPython.display.Audio**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '`[**IPython.display.Audio**](https://ipython.org/ipython-doc/stable/api/generated/IPython.display.html#IPython.display.Audio)` lets
    you play audio directly in a jupyter notebook.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: I have uploaded a random audio file on the below page. Let us now load the file
    in your jupyter console.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '**[Vocaroo | Online voice recorder](https://voca.ro/iMPozIbzB8T)**'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Vocaroo is a quick and easy way to share voice messages over the interwebs.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Vocaroo 是一种快速便捷的方式来在互联网分享语音消息。
- en: '**Loading an audio file:**'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**加载音频文件：**'
- en: '[PRE1]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This returns an audio time series as a numpy array with a default sampling rate(sr)
    of 22KHZ mono. We can change this behavior by resampling at 44.1KHz.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个音频时间序列，作为默认采样率(sr)为22KHZ的numpy数组。我们可以通过以44.1KHz重采样来更改此行为。
- en: '[PRE2]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: or to disable resampling.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 或禁用重采样。
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The sample** rate** is the number of samples of audio carried per second, measured
    in Hz or kHz.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 采样**率**是每秒传输的音频样本数，以Hz或kHz为单位。
- en: '**Playing Audio:**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**播放音频：**'
- en: Using,`**IPython.display.Audio**` you can play the audio in your jupyter notebook.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`**IPython.display.Audio**`，你可以在你的jupyter notebook中播放音频。
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This returns an audio widget:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回一个音频小部件：
- en: '![](../Images/9ebc840c4cc68c9e19cfcbf4919a8526.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9ebc840c4cc68c9e19cfcbf4919a8526.png)'
- en: '**Visualizing Audio:**'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**可视化音频：**'
- en: 'We can plot the audio array using `[**librosa.display.waveplot**](https://librosa.github.io/librosa/generated/librosa.display.waveplot.html#librosa.display.waveplot)`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`[**librosa.display.waveplot**](https://librosa.github.io/librosa/generated/librosa.display.waveplot.html#librosa.display.waveplot)`绘制音频数组：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '![](../Images/f2266fe0df29e0c49b39b1bfd897d8ad.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/f2266fe0df29e0c49b39b1bfd897d8ad.png)'
- en: Here, we have the plot of the amplitude envelope of a waveform.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个波形的幅度包络图。
- en: '![Figure](../Images/d67fa2958bec711253eb0bddc6f53994.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/d67fa2958bec711253eb0bddc6f53994.png)'
- en: '[What is Amplitude, Wavelength, and Phase in a signal?](https://gfycat.com/ickyfilthybobolink)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[什么是信号中的幅度、波长和相位？](https://gfycat.com/ickyfilthybobolink)'
- en: Spectrogram
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 声谱图
- en: A spectrogram is a visual way of representing the signal strength, or “**loudness**”,
    of a signal over time at various frequencies present in a particular waveform.
    Not only can one see whether there is more or less energy at, for example, 2 Hz
    vs 10 Hz, but one can also see how energy levels vary over time.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 声谱图是一种可视化表示信号强度或“**响度**”的方式，显示了在特定波形中各种频率随时间的变化情况。人们不仅可以看到，例如，2 Hz与10 Hz之间的能量多寡，还可以看到能量水平随时间的变化。
- en: A spectrogram is usually depicted as a [heat map](https://en.wikipedia.org/wiki/Heat_map),
    i.e., as an image with the intensity shown by varying the color or brightness.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 声谱图通常被描绘为一个[热图](https://en.wikipedia.org/wiki/Heat_map)，即通过变化的颜色或亮度显示强度的图像。
- en: We can display a spectrogram using. `[**librosa.display.specshow**](https://librosa.github.io/librosa/generated/librosa.display.specshow.html)**.**`
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`[**librosa.display.specshow**](https://librosa.github.io/librosa/generated/librosa.display.specshow.html)**`显示声谱图。
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`.stft()` converts data into short term Fourier transform. [STFT](https://www.youtube.com/watch?v=g1_wcbGUcDY) converts
    signals such that we can know the amplitude of the given frequency at a given
    time. Using STFT we can determine the amplitude of various frequencies playing
    at a given time of an audio signal. `.specshow` is used to display a spectrogram.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`.stft()`将数据转换为短时傅里叶变换。 [STFT](https://www.youtube.com/watch?v=g1_wcbGUcDY)将信号转换，使我们能够知道在给定时间的给定频率的幅度。使用STFT，我们可以确定音频信号在给定时间播放的各种频率的幅度。`.specshow`用于显示声谱图。'
- en: '![](../Images/89fec857ffdd44f2d7965ca58289f224.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/89fec857ffdd44f2d7965ca58289f224.png)'
- en: The vertical axis shows frequencies (from 0 to 10kHz), and the horizontal axis
    shows the time of the clip. Since we see that all action is taking place at the
    bottom of the spectrum, we can convert the frequency axis to a logarithmic one.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直轴显示频率（从0到10kHz），水平轴显示剪辑的时间。由于我们看到所有的动作都发生在频谱的底部，我们可以将频率轴转换为对数轴。
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](../Images/c787dbd0b0a36b2375823227de8a1e86.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c787dbd0b0a36b2375823227de8a1e86.png)'
- en: '**Create an Audio Signal:**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建音频信号：**'
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Feature extraction from Audio signal
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从音频信号中提取特征
- en: Every audio signal consists of many features. However, we must extract the characteristics
    that are relevant to the problem we are trying to solve. The process of extracting
    features to use them for analysis is called feature extraction. Let us study a
    few of the features in detail.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 每个音频信号由许多特征组成。然而，我们必须提取与我们试图解决的问题相关的特征。提取特征以用于分析的过程称为特征提取。让我们详细研究一些特征。
- en: The **spectral features** (frequency-based **features**), which are obtained
    by converting the time-based signal into the frequency domain using the Fourier
    Transform, like fundamental frequency, frequency components, **spectral** centroid, **spectral** flux, **spectral** density, **spectral** roll-off,
    etc.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**频谱特征**（基于频率的**特征**），通过将时间信号转换到频域获得，例如基本频率、频率成分、**频谱**质心、**频谱**流量、**频谱**密度、**频谱**roll-off等。'
- en: '**1\. Spectral Centroid**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**1\. 频谱质心**'
- en: 'The **spectral centroid** indicates at which frequency the energy of a spectrum
    is centered upon or in other words It indicates where the ” center of mass” for
    a sound is located. This is like a weighted mean:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**频谱质心**指示频谱能量的中心频率，换句话说，它表示声音的“质心”位置。这类似于加权平均：'
- en: '![](../Images/e4ceac912fc48f96751392968eba12a0.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e4ceac912fc48f96751392968eba12a0.png)'
- en: where S(k) is the spectral magnitude at frequency bin k, f(k) is the frequency
    at bin k.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 其中S(k)是频率bin k处的频谱幅度，f(k)是bin k处的频率。
- en: '`[**librosa.feature.spectral_centroid**](https://librosa.github.io/librosa/generated/librosa.feature.spectral_centroid.html#librosa.feature.spectral_centroid)` computes
    the spectral centroid for each frame in a signal:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`[**librosa.feature.spectral_centroid**](https://librosa.github.io/librosa/generated/librosa.feature.spectral_centroid.html#librosa.feature.spectral_centroid)`计算信号中每一帧的频谱质心：'
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`.spectral_centroid` will return an array with columns equal to a number of
    frames present in your sample.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`.spectral_centroid`将返回一个数组，其列数等于样本中存在的帧数。'
- en: '![](../Images/1a685695a87a8eb9d92b23d9923c0954.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1a685695a87a8eb9d92b23d9923c0954.png)'
- en: There is a rise in the spectral centroid in the beginning.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 频谱质心在开始时有上升。
- en: '**2\. Spectral Rolloff**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**2\. 频谱roll-off**'
- en: It is a measure of the shape of the signal. It represents the frequency at which
    high frequencies decline to 0\. To obtain it, we have to calculate the fraction
    of bins in the power spectrum where 85% of its power is at lower frequencies.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这是信号形状的度量。它表示高频率衰减至0的频率。为了获得它，我们必须计算在功率谱中85%功率位于低频的频带的比例。
- en: '`[**librosa.feature.spectral_rolloff**](https://librosa.github.io/librosa/generated/librosa.feature.spectral_rolloff.html#librosa.feature.spectral_rolloff)` computes
    the rolloff frequency for each frame in a signal:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`[**librosa.feature.spectral_rolloff**](https://librosa.github.io/librosa/generated/librosa.feature.spectral_rolloff.html#librosa.feature.spectral_rolloff)`计算信号中每一帧的roll-off频率：'
- en: '[PRE10]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![](../Images/e97b4739cade77bd6cede12340dfb1a1.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e97b4739cade77bd6cede12340dfb1a1.png)'
- en: '**3\. Spectral Bandwidth**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**3\. 频谱带宽**'
- en: The spectral bandwidth is defined as the width of the band of light at one-half
    the peak maximum (or full width at half maximum [FWHM]) and is represented by
    the two vertical red lines and λSB on the wavelength axis.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 频谱带宽定义为光带在峰值最大值一半处的宽度（或半峰宽[全宽半最大值 FWHM]），由两条垂直红线和波长轴上的λSB表示。
- en: '![](../Images/c030a5676e009ed654935cebf7bb7958.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/c030a5676e009ed654935cebf7bb7958.png)'
- en: '`[**librosa.feature.spectral_bandwidth**](https://librosa.github.io/librosa/generated/librosa.feature.spectral_bandwidth.html#librosa.feature.spectral_bandwidth)` computes
    the order-p spectral bandwidth:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`[**librosa.feature.spectral_bandwidth**](https://librosa.github.io/librosa/generated/librosa.feature.spectral_bandwidth.html#librosa.feature.spectral_bandwidth)`计算顺序-p频谱带宽：'
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![](../Images/09b986ff36d794546a104b828a9f264a.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/09b986ff36d794546a104b828a9f264a.png)'
- en: '**4\. Zero-Crossing Rate**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**4\. 过零率**'
- en: A very simple way for measuring the smoothness of a signal is to calculate the
    number of zero-crossing within a segment of that signal. A voice signal oscillates
    slowly — for example, a 100 Hz signal will cross zero 100 per second — whereas
    an unvoiced fricative can have 3000 zero crossings per second.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 测量信号平滑性的一种非常简单的方法是计算信号片段内的过零次数。声音信号缓慢振荡——例如，100 Hz的信号每秒将经过零100次——而一个无声擦音每秒可以有3000次过零。
- en: '![](../Images/9a26544369f50a94654bfcd693fed828.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/9a26544369f50a94654bfcd693fed828.png)'
- en: It usually has higher values for highly percussive sounds like those in metal
    and rock. Now let us visualize it and see how we calculate zero crossing rate.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对于金属和摇滚等高打击音，通常值较高。现在让我们可视化一下，看看如何计算过零率。
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](../Images/d77c25e3494c1bfa84e9ab63d00f25fe.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/d77c25e3494c1bfa84e9ab63d00f25fe.png)'
- en: Zooming in
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 放大
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![](../Images/6d1e80fd1036c14acab145ce003597ab.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6d1e80fd1036c14acab145ce003597ab.png)'
- en: There appear to be 16 zero crossings. Let’s verify it with Librosa.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎有16个过零点。我们来用Librosa验证一下。
- en: '[PRE14]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '**5\. Mel-Frequency Cepstral Coefficients(MFCCs)**'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**5\. Mel频率倒谱系数（MFCCs）**'
- en: The Mel frequency cepstral coefficients (MFCCs) of a signal are a small set
    of features (usually about 10–20) which concisely describe the overall shape of
    a spectral envelope. It models the characteristics of the human voice.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 信号的梅尔频率倒谱系数（MFCCs）是一组小特征（通常约10-20个），它们简洁地描述了频谱包络的整体形状。它模拟了人类声音的特征。
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![](../Images/565a91d01bcff556f0ba6c0c790712d5.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/565a91d01bcff556f0ba6c0c790712d5.png)'
- en: '**6\. Chroma feature**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**6. 色度特征**'
- en: A **chroma feature or vector** is typically a 12-element feature vector indicating
    how much energy of each pitch class, {C, C#, D, D#, E, …, B}, is present in the
    signal. In short, It provides a robust way to describe a similarity measure between
    music pieces.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**色度特征或向量**通常是一个12维的特征向量，表示信号中每个音高类别{C, C#, D, D#, E, …, B}的能量含量。简而言之，它提供了一种强有力的方式来描述音乐片段之间的相似度。'
- en: '`[librosa.feature.chroma_stft](https://librosa.github.io/librosa/generated/librosa.feature.chroma_stft.html#librosa.feature.chroma_stft) `is
    used for the computation of Chroma features.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`[librosa.feature.chroma_stft](https://librosa.github.io/librosa/generated/librosa.feature.chroma_stft.html#librosa.feature.chroma_stft)`用于计算色度特征。'
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![](../Images/70f36608314cae8c29f98b34b7a505af.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/70f36608314cae8c29f98b34b7a505af.png)'
- en: Now that we understood how we can play around with audio data and extract important
    features using python. In the following section, we are going to use these features
    and build a ANN model for music genre classification.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何使用Python处理音频数据并提取重要特征。在接下来的部分中，我们将使用这些特征构建一个ANN模型用于音乐流派分类。
- en: Music genre classification using ANN
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用ANN进行音乐流派分类
- en: '![Figure](../Images/b7aba595d99d5b06b0973e10f0a11ee1.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/b7aba595d99d5b06b0973e10f0a11ee1.png)'
- en: '[Credits](http://bestanimations.com/Music/Music.html)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[鸣谢](http://bestanimations.com/Music/Music.html)'
- en: This dataset was used for the well-known paper in genre classification “Musical
    genre classification of audio signals” by G. Tzanetakis and P. Cook in IEEE Transactions
    on Audio and Speech Processing 2002.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该数据集用于G. Tzanetakis和P. Cook在IEEE Transactions on Audio and Speech Processing
    2002中发表的著名论文《音频信号的音乐流派分类》。
- en: The dataset consists of 1000 audio tracks each 30 seconds long. It contains
    10 genres, each represented by 100 tracks. The tracks are all 22050 Hz monophonic
    16-bit audio files in .wav format.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集包含1000个每个30秒长的音频轨道。它包含10种流派，每种流派由100个轨道组成。这些轨道都是22050 Hz单声道16位音频文件，格式为.wav。
- en: The dataset can be download from [marsyas website.](http://marsyas.info/downloads/datasets.html)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集可以从[marsyas网站](http://marsyas.info/downloads/datasets.html)下载。
- en: The dataset consists of 10 genres i.e
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 数据集包含10种流派，即
- en: Blues
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蓝调
- en: Classical
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 古典
- en: Country
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 乡村
- en: Disco
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迪斯科
- en: Hiphop
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嘻哈
- en: Jazz
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 爵士
- en: Metal
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金属
- en: Pop
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流行
- en: Reggae
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 雷鬼
- en: Rock
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇滚
- en: 'Each genre contains 100 songs. Total dataset: 1000 songs.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 每种流派包含100首歌曲。总数据集：1000首歌曲。
- en: Before moving ahead, I would recommend using [Google Colab](https://colab.research.google.com/notebooks/intro.ipynb#recent=true) for
    doing everything related to Neural networks because it is **free** and provides
    GPUs and TPUs as runtime environments.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，我建议使用[Google Colab](https://colab.research.google.com/notebooks/intro.ipynb#recent=true)来处理与神经网络相关的所有任务，因为它是**免费的**，并且提供GPU和TPU作为运行环境。
- en: '**Roadmap:**'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '**路线图：**'
- en: First of all, we need to convert the audio files into PNG format images(spectrograms).
    From these spectrograms, we have to extract meaningful features, i.e. MFCCs, Spectral
    Centroid, Zero Crossing Rate, Chroma Frequencies, Spectral Roll-off.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将音频文件转换为PNG格式图像（频谱图）。从这些频谱图中，我们需要提取有意义的特征，即MFCCs、频谱质心、零交叉率、色度频率、频谱滚降。
- en: Once the features have been extracted, they can be appended into a CSV file
    so that ANN can be used for classification.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦特征提取完成，它们可以被附加到CSV文件中，以便ANN可以用于分类。
- en: If we wanna work with image data instead of CSV we will use CNN(Scope of part
    2).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想处理图像数据而不是CSV，我们将使用CNN（第2部分的范围）。
- en: So let's begin.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们开始吧。
- en: 1\. Extract and load your data to google drive then mount the drive in Colab.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 提取并加载数据到Google Drive，然后在Colab中挂载驱动器。
- en: '![Figure](../Images/4e737bdbf344ad6cf3f75005ab0e2d45.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图](../Images/4e737bdbf344ad6cf3f75005ab0e2d45.png)'
- en: Google Colab directory structure after data is loaded.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 数据加载后的Google Colab目录结构。
- en: 2\. Import all the required libraries.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 2. 导入所有所需的库。
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 3\. Now convert the audio data files into PNG format images or basically extracting
    the Spectrogram for every Audio.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 现在将音频数据文件转换为PNG格式图像，或者基本上为每个音频提取频谱图。
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Sample spectrogram of a song having genre as blues.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一首具有蓝调流派的歌曲的频谱图样本。
- en: '![Figure](../Images/5cfb7af68d6c514db34bdb08572995ac.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/5cfb7af68d6c514db34bdb08572995ac.png)'
- en: spectrogram of a song having genre as Blues
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 一首蓝调风格的歌曲的谱图
- en: Now since all the audio files got converted into their respective spectrograms
    it’s easier to extract features.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于所有音频文件已转换为其各自的谱图，提取特征变得更容易。
- en: 4\. Creating a header for our CSV file.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 4\. 为我们的 CSV 文件创建一个头部。
- en: '[PRE19]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '5\. Extracting features from Spectrogram: We will extract Mel-frequency cepstral
    coefficients (MFCC), Spectral Centroid, Zero Crossing Rate, Chroma Frequencies,
    and Spectral Roll-off.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 5\. 从谱图中提取特征：我们将提取梅尔频率倒谱系数 (MFCC)、谱质心、零交叉率、色度频率和谱滚降。
- en: '[PRE20]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '6\. Data preprocessing: It involves loading CSV data, label encoding, feature
    scaling and data split into training and test set.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 6\. 数据预处理：包括加载 CSV 数据、标签编码、特征缩放和数据拆分为训练集和测试集。
- en: '[PRE21]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 7\. Building an ANN model.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 7\. 构建一个 ANN 模型。
- en: '[PRE22]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 8\. Fit the model
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 8\. 拟合模型
- en: '[PRE23]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'After 100 epochs, Accuracy: 0.67'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 经过 100 个周期，准确率：0.67
- en: Conclusion
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Well, part 1 ends here. In this article, we did a pretty good analysis of audio
    data. We understood how to extract important features and also implemented Artificial
    Neural Networks(ANN) to classify the music genre.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，第 1 部分到此结束。在本文中，我们对音频数据进行了相当好的分析。我们了解了如何提取重要特征，并实现了人工神经网络 (ANN) 来分类音乐类型。
- en: In part 2, we are going to do the same using Convolutional Neural Networks directly
    on the Spectrogram.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 2 部分，我们将直接在谱图上使用卷积神经网络进行相同的操作。
- en: I hope you guys have enjoyed reading it. Please share your thoughts/doubts in
    the comment section.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你们喜欢阅读。请在评论区分享你的想法或疑问。
- en: '[**Audio Data Analysis Using Deep Learning with Python (Part 2)**](https://levelup.gitconnected.com/audio-data-analysis-using-deep-learning-with-python-part-2-4a1f40d3708d)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '[**使用 Python 深度学习进行音频数据分析（第 2 部分）**](https://levelup.gitconnected.com/audio-data-analysis-using-deep-learning-with-python-part-2-4a1f40d3708d)'
- en: Thanks for reading.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '-   感谢阅读。'
- en: '**Bio: [Nagesh Singh Chauhan](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/)**
    is a Big data developer at CirrusLabs. He has over 4 years of working experience
    in various sectors like Telecom, Analytics, Sales, Data Science having specialisation
    in various Big data components.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介： [纳盖什·辛格·乔汉](https://www.linkedin.com/in/nagesh-singh-chauhan-6936bb13b/)**
    是 CirrusLabs 的大数据开发人员。他在电信、分析、销售、数据科学等多个领域拥有超过 4 年的工作经验，专注于各种大数据组件。'
- en: '[Original](https://levelup.gitconnected.com/audio-data-analysis-using-deep-learning-part-1-7f6e08803f60).
    Reposted with permission.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://levelup.gitconnected.com/audio-data-analysis-using-deep-learning-part-1-7f6e08803f60)。经授权转载。'
- en: '**Related:**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Audio File Processing: ECG Audio Using Python](/2020/02/audio-file-processing-ecg-audio-python.html)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[音频文件处理：使用 Python 处理 ECG 音频](/2020/02/audio-file-processing-ecg-audio-python.html)'
- en: '[Basics of Audio File Processing in R](/2020/02/basics-audio-file-processing-r.html)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[R 中音频文件处理基础](/2020/02/basics-audio-file-processing-r.html)'
- en: '[Artificial Intelligence Books to Read in 2020](/2020/01/artificial-intelligence-books-read-2020.html)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[2020 年要读的人工智能书籍](/2020/01/artificial-intelligence-books-read-2020.html)'
- en: More On This Topic
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Three R Libraries Every Data Scientist Should Know (Even if You Use Python)](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[每个数据科学家都应该了解的三个 R 库（即使你使用 Python）](https://www.kdnuggets.com/2021/12/three-r-libraries-every-data-scientist-know-even-python.html)'
- en: '[What Makes Python An Ideal Programming Language For Startups](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[是什么让 Python 成为初创企业的理想编程语言](https://www.kdnuggets.com/2021/12/makes-python-ideal-programming-language-startups.html)'
- en: '[Stop Learning Data Science to Find Purpose and Find Purpose to…](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[停止学习数据科学以寻找目标，找到目标再……](https://www.kdnuggets.com/2021/12/stop-learning-data-science-find-purpose.html)'
- en: '[Top Resources for Learning Statistics for Data Science](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[学习数据科学统计学的顶级资源](https://www.kdnuggets.com/2021/12/springboard-top-resources-learn-data-science-statistics.html)'
- en: '[The 5 Characteristics of a Successful Data Scientist](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功数据科学家的 5 个特征](https://www.kdnuggets.com/2021/12/5-characteristics-successful-data-scientist.html)'
- en: '[A $9B AI Failure, Examined](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[一个 90 亿美元的人工智能失败，进行检讨](https://www.kdnuggets.com/2021/12/9b-ai-failure-examined.html)'
