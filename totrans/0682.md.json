["```py\npic=imageio.imread('F:/demo_1.jpg')\n\nplt.figure(figsize=(10,10))\n\nplt.imshow(pic)\n\nplt.show()\n```", "```py\n\nlow_pixel=pic<20 \n\n*# to ensure of it let's check if all values \nin low_pixel are True or not* iflow_pixel.any()==True:\nprint(low_pixel.shape)\n\n(1079, 1293, 3)\n\n```", "```py\nprint(pic.shape)\n(1079,1293,3)\n\nprint(low_pixel.shape) \n(1079,1293,3)\n```", "```py\n*# randomly choose a value* \n\nimportrandom \n\n*# load the original image*\n\npic=imageio.imread('F:/demo_1.jpg') \n\n*# set value randomly range from 25 to 225 - \nthese value also randomly chosen*pic[low_pixel]=random.randint(25,225) \n\n*# display the image*\n\nplt.figure(figsize=(10,10))\n\nplt.imshow(pic)plt.show()\n![Demo figure 2](../Images/d62068daa3b8081f1ce9f4a1fbfc2e44.png) \n```", "```py\nif__name__=='__main__': \n*# load the image* pic=imageio.imread('F:/demo_1.jpg') \n*# separate the row and column values* total_row,total_col,layers=pic.shape \n'''   Create vector. \nOgrid is a compact method of creating a multidimensional-\nndarray operations in single lines.   \nfor ex: \n>>>ogrid[0:5,0:5]   \noutput: \n[array([[0],[1],[2],[3],[4]]), \narray([[0, 1, 2, 3, 4]])]    \n'''\nx,y=np.ogrid[:total_row,:total_col] \n*# get the center values of the image* cen_x,cen_y=total_row/2,total_col/2  \n'''   \nMeasure distance value from center to each border pixel.   \nTo make it easy, we can think it's like, we draw a line from center-   \nto each edge pixel value --> s**2 = (Y-y)**2 + (X-x)**2    '''\ndistance_from_the_center=np.sqrt((x-cen_x)**2+(y-cen_y)**2) \n*# Select convenient radius value* radius=(total_row/2) \n*# Using logical operator '>'* '''   logical operator to do this task which will \nreturn as a value    of True for all the index according to the \ngiven condition   '''\ncircular_pic=distance_from_the_center>radius \n'''\nlet assign value zero for all pixel value that outside \nthe circular disc.   All the pixel value outside the circular \ndisc, will be black now.   \n'''\npic[circular_pic]=0\nplt.figure(figsize=(10,10))\nplt.imshow(pic)\nplt.show()\n![Demo figure 3](../Images/30ec875b6e0ec44ee9b54ff45a372caa.png) \n```", "```py\n*# load the image* pic=imageio.imread('F:\\satimg.jpg')\nplt.figure(figsize=(10,10))\nplt.imshow(pic)\nplt.show()\n![Demo figure 4](../Images/b60ad3f098a711cf0d8b113facef85ba.png) \n```", "```py\nprint(f'Shape of the image {pic.shape}')\n\nprint(f'hieght {pic.shape[0]} pixels')\n\nprint(f'width {pic.shape[1]} pixels') \n\nShapeoftheimage(3725,4797,3)\n\nheight 3725 pixels\n\nwidth 4797 pixels \n```", "```py\n*# Only Red Pixel value , higher than 180*\n\npic=imageio.imread('F:\\satimg.jpg')\n\nred_mask=pic[:,:,0]<180 \n\npic[red_mask]=0\n\nplt.figure(figsize=(15,15))\n\nplt.imshow(pic) \n\n*# Only Green Pixel value , higher than 180*\n\npic=imageio.imread('F:\\satimg.jpg')\n\ngreen_mask=pic[:,:,1]<180 \n\npic[green_mask]=0\n\nplt.figure(figsize=(15,15))\n\nplt.imshow(pic) \n\n*# Only Blue Pixel value , higher than 180*\n\npic=imageio.imread('F:\\satimg.jpg')\n\nblue_mask=pic[:,:,2]<180 \n\npic[blue_mask]=0\n\nplt.figure(figsize=(15,15))\n\nplt.imshow(pic) \n\n*# Composite mask using logical_and*\n\npic=imageio.imread('F:\\satimg.jpg')\n\nfinal_mask=np.logical_and(red_mask,green_mask,blue_mask)\n\npic[final_mask]=40\n\nplt.figure(figsize=(15,15))\n\nplt.imshow(pic)\n```"]