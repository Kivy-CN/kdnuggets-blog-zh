["```py\n# 3rd party\nimport mmh3\n\nclass BloomFilter(set):\n\n    def __init__(self, size, hash_count):\n        super(BloomFilter, self).__init__()\n        self.bit_array = bitarray(size)\n        self.bit_array.setall(0)\n        self.size = size\n        self.hash_count = hash_count\n\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        return iter(self.bit_array)\n\n    def add(self, item):\n        for ii in range(self.hash_count):\n            index = mmh3.hash(item, ii) % self.size\n            self.bit_array[index] = 1\n\n        return self\n\n    def __contains__(self, item):\n        out = True\n        for ii in range(self.hash_count):\n            index = mmh3.hash(item, ii) % self.size\n            if self.bit_array[index] == 0:\n                out = False\n\n        return out\n\ndef main():\n    bloom = BloomFilter(100, 10)\n    animals = ['dog', 'cat', 'giraffe', 'fly', 'mosquito', 'horse', 'eagle',\n               'bird', 'bison', 'boar', 'butterfly', 'ant', 'anaconda', 'bear',\n               'chicken', 'dolphin', 'donkey', 'crow', 'crocodile']\n    # First insertion of animals into the bloom filter\n    for animal in animals:\n        bloom.add(animal)\n\n    # Membership existence for already inserted animals\n    # There should not be any false negatives\n    for animal in animals:\n        if animal in bloom:\n            print('{} is in bloom filter as expected'.format(animal))\n        else:\n            print('Something is terribly went wrong for {}'.format(animal))\n            print('FALSE NEGATIVE!')\n\n    # Membership existence for not inserted animals\n    # There could be false positives\n    other_animals = ['badger', 'cow', 'pig', 'sheep', 'bee', 'wolf', 'fox',\n                     'whale', 'shark', 'fish', 'turkey', 'duck', 'dove',\n                     'deer', 'elephant', 'frog', 'falcon', 'goat', 'gorilla',\n                     'hawk' ]\n    for other_animal in other_animals:\n        if other_animal in bloom:\n            print('{} is not in the bloom, but a false positive'.format(other_animal))\n        else:\n            print('{} is not in the bloom filter as expected'.format(other_animal))\n\nif __name__ == '__main__':\n    main()\n\n```", "```py\ndog is in bloom filter as expected\ncat is in bloom filter as expected\ngiraffe is in bloom filter as expected\nfly is in bloom filter as expected\nmosquito is in bloom filter as expected\nhorse is in bloom filter as expected\neagle is in bloom filter as expected\nbird is in bloom filter as expected\nbison is in bloom filter as expected\nboar is in bloom filter as expected\nbutterfly is in bloom filter as expected\nant is in bloom filter as expected\nanaconda is in bloom filter as expected\nbear is in bloom filter as expected\nchicken is in bloom filter as expected\ndolphin is in bloom filter as expected\ndonkey is in bloom filter as expected\ncrow is in bloom filter as expected\ncrocodile is in bloom filter as expected\n\nbadger is not in the bloom filter as expected\ncow is not in the bloom filter as expected\npig is not in the bloom filter as expected\nsheep is not in the bloom, but a false positive\nbee is not in the bloom filter as expected\nwolf is not in the bloom filter as expected\nfox is not in the bloom filter as expected\nwhale is not in the bloom filter as expected\nshark is not in the bloom, but a false positive\nfish is not in the bloom, but a false positive\nturkey is not in the bloom filter as expected\nduck is not in the bloom filter as expected\ndove is not in the bloom filter as expected\ndeer is not in the bloom filter as expected\nelephant is not in the bloom, but a false positive\nfrog is not in the bloom filter as expected\nfalcon is not in the bloom filter as expected\ngoat is not in the bloom filter as expected\ngorilla is not in the bloom filter as expected\nhawk is not in the bloom filter as expected\n```"]