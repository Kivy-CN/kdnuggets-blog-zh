- en: 'Python Patterns: max Instead of if'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2019/01/python-patterns-max-instead-if.html](https://www.kdnuggets.com/2019/01/python-patterns-max-instead-if.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![c](../Images/3d9c022da2d331bb56691a9617b91b90.png) [comments](#comments)'
  prefs: []
  type: TYPE_IMG
- en: '![Header image](../Images/79377060617d28ff134f156bb760451a.png)'
  prefs: []
  type: TYPE_IMG
- en: When writing Python, I often have to look through a set of objects, determine
    a score for each one of them, and save both the best score and object associated
    with it. For example, looking for the highest scoring word that I can make in [Scrabble](https://en.wikipedia.org/wiki/Scrabble)
    with the letters I currently have.
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: 'One way to do this is to loop over all the objects and use a placeholder to
    remember the best one seen so far, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: You have probably written this logic before in some of your own code. The code
    is not that complicated, but we can still improve its readability with a quick
    tweak.
  prefs: []
  type: TYPE_NORMAL
- en: Simplifying with `max()`
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What does `if score > best_score` remind you of? The way we might implement
    the `max()` function! Using `max()` helps us simplify the code nicely:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Storing all the data together in a single tuple means that assignment and comparison
    are now handled all at once. This makes it less likely that we will mix up one
    of the assignments, and makes it clearer what we’re doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one potential pitfall here: `max()` picks the tuple with the largest
    first element (the score in our case), which is what we want. But, if the first
    elements are the same in both tuples, `max()` continues through the remaining
    elements until the tie is broken. So if two words have the same score, `max()`
    will then compare the words next, which it does lexically.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To have `max()` only compare the first element, we can use the `key` parameter.
    The `key` parameter takes a function that is called on each object and returns
    another object to use in the comparison. We can use it to select just the first
    entry like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Even Simpler
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the above examples we wanted to save both the score and the word, but what
    if we only cared about the word that generated the highest score, not the score
    itself? Then there is an even simpler way!
  prefs: []
  type: TYPE_NORMAL
- en: 'By default `max()` uses the standard comparison operator, but we can change
    that to use our `score_word()` using the same `key` argument from above. Then
    we have:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Which gives us a very compact (and relatively fool proof) pattern, with all
    the looping and placeholders pushed into the implementation of `max()`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Bio: [Alexander Gude](https://www.linkedin.com/in/alexandergude/)** is currently
    a data scientist at Intuit using machine learning for fraud prevention. He holds
    a BA in physics from University of California, Berkeley, and a PhD in Elementary
    Particle Physics from University of Minnesota-Twin Cities.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Original](https://alexgude.com/blog/python-patterns-max-not-if/). Reposted
    with permission.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Related:**'
  prefs: []
  type: TYPE_NORMAL
- en: '[5 “Clean Code” Tips That Will Dramatically Improve Your Productivity](/2018/10/5-clean-code-tips-dramatically-improve-productivity.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How Different are Conventional Programming and Machine Learning?](/2018/12/different-conventional-programming-machine-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Get a 2–6x Speed-up on Your Data Pre-processing with Python](/2018/10/get-speed-up-data-pre-processing-python.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Stop Hard Coding in a Data Science Project - Use Config Files Instead](https://www.kdnuggets.com/2023/06/stop-hard-coding-data-science-project-config-files-instead.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[3 Reasons Why You Should Use Linear Regression Models Instead of…](https://www.kdnuggets.com/2021/08/3-reasons-linear-regression-instead-neural-networks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Forget PIP, Conda, and requirements.txt! Use Poetry Instead And…](https://www.kdnuggets.com/2023/07/forget-pip-conda-requirementstxt-poetry-instead-thank-later.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Unveiling Hidden Patterns: An Introduction to Hierarchical Clustering](https://www.kdnuggets.com/unveiling-hidden-patterns-an-introduction-to-hierarchical-clustering)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design Patterns in Machine Learning for MLOps](https://www.kdnuggets.com/2022/02/design-patterns-machine-learning-mlops.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Step up your Python game with Fast Python for Data Science!](https://www.kdnuggets.com/2022/06/manning-step-python-game-fast-python-data-science.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
