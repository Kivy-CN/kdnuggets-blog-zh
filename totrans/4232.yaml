- en: Writing Your First Distributed Python Application with Ray
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Ray 编写你的第一个分布式 Python 应用程序
- en: 原文：[https://www.kdnuggets.com/2021/08/distributed-python-application-ray.html](https://www.kdnuggets.com/2021/08/distributed-python-application-ray.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/08/distributed-python-application-ray.html](https://www.kdnuggets.com/2021/08/distributed-python-application-ray.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/), Data
    Science Professional**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)，数据科学专家**'
- en: '![Ray makes parallel and distributed computing work more like you would hope](../Images/538062b0a78f2d34aef3c6188ad7cecb.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Ray 使并行和分布式计算的工作更像你所期望的那样](../Images/538062b0a78f2d34aef3c6188ad7cecb.png)'
- en: Ray makes parallel and distributed computing work more like you would hope ([image
    source](https://www.reddit.com/r/aww/comments/2oagj8/multithreaded_programming_theory_and_practice/))
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 使并行和分布式计算的工作更像你所期望的那样 ([图片来源](https://www.reddit.com/r/aww/comments/2oagj8/multithreaded_programming_theory_and_practice/))
- en: '[Ray](https://docs.ray.io/en/master/) is a fast, simple distributed execution
    framework that makes it easy to scale your applications and to leverage state
    of the art machine learning libraries. Using Ray, you can take Python code that
    runs sequentially and transform it into a distributed application with minimal
    code changes.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ray](https://docs.ray.io/en/master/) 是一个快速、简单的分布式执行框架，便于扩展应用程序并利用最先进的机器学习库。使用
    Ray，你可以将顺序运行的 Python 代码转变为分布式应用程序，几乎不需要修改代码。'
- en: 'The goal of this tutorial is to explore the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的目标是探讨以下内容：
- en: Why should you parallelize and distribute with Ray
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么你应该使用 Ray 进行并行化和分布式
- en: How to get started with Ray
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何开始使用 Ray
- en: Trade-offs in distributed computing (compute cost, memory, I/O, etc)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式计算中的权衡（计算成本、内存、I/O 等）
- en: Why should you parallelize and distribute with Ray?
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么你应该使用 Ray 进行并行化和分布式？
- en: 'As a [previous post pointed out](https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8),
    parallel and distributed computing are a staple of modern applications. The problem
    is that taking existing Python code and trying to parallelize or distribute it
    can mean rewriting existing code, sometimes from scratch. Additionally modern
    applications have requirements that existing modules like [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) lack.
    These requirements include:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如 [之前的文章指出](https://towardsdatascience.com/modern-parallel-and-distributed-python-a-quick-tutorial-on-ray-99f8d70369b8)，并行和分布式计算是现代应用程序的基础。问题是，将现有
    Python 代码并行化或分布式化可能意味着重写现有代码，有时甚至是从头开始。此外，现代应用程序有现有模块如 [multiprocessing](https://docs.python.org/3/library/multiprocessing.html)
    缺乏的要求。这些要求包括：
- en: Running the same code on more than one machine
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多台机器上运行相同的代码
- en: Building microservices and actors that have state and can communicate
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建具有状态并能够通信的微服务和角色
- en: Graceful handling of machine failures and preemption
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器故障和抢占的优雅处理
- en: Efficient handling of large objects and numerical data
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大对象和数值数据的高效处理
- en: The Ray library satisfies these requirements and allows you to scale your applications
    without rewriting them. In order to make parallel & distributed computing simple,
    Ray takes functions and classes and translates them to the distributed setting
    as tasks and actors. The rest of this tutorial explores these concepts as well
    as some important things to consider when building parallel & distributed applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 库满足这些需求，并允许你在不重写应用程序的情况下进行扩展。为了简化并行和分布式计算，Ray 将函数和类转化为分布式环境中的任务和角色。这个教程的其余部分将深入探讨这些概念以及在构建并行和分布式应用程序时需要考虑的一些重要事项。
- en: '![Ray Ecosystem](../Images/a219e5df972dc5e1ae9dd250a6ee0a3c.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![Ray 生态系统](../Images/a219e5df972dc5e1ae9dd250a6ee0a3c.png)'
- en: While this tutorial explores how Ray makes it easy to parallelize plain Python
    code, it is important to note that Ray and its ecosystem also make it easy to
    parallelize existing libraries like [scikit-learn](https://medium.com/distributed-computing-with-ray/how-to-speed-up-scikit-learn-model-training-aaf17e2d1e1), [XGBoost](https://www.anyscale.com/blog/distributed-xgboost-training-with-ray), [LightGBM](https://www.anyscale.com/blog/introducing-distributed-lightgbm-training-with-ray), [PyTorch](https://medium.com/pytorch/getting-started-with-distributed-machine-learning-with-pytorch-and-ray-fd83c98fdead),
    and much more.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本教程探讨了 Ray 如何使并行化普通 Python 代码变得容易，但需要注意的是，Ray 及其生态系统也使得并行化现有库变得容易，例如 [scikit-learn](https://medium.com/distributed-computing-with-ray/how-to-speed-up-scikit-learn-model-training-aaf17e2d1e1)、 [XGBoost](https://www.anyscale.com/blog/distributed-xgboost-training-with-ray)、 [LightGBM](https://www.anyscale.com/blog/introducing-distributed-lightgbm-training-with-ray)、 [PyTorch](https://medium.com/pytorch/getting-started-with-distributed-machine-learning-with-pytorch-and-ray-fd83c98fdead)等。
- en: How to get started with Ray
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何开始使用 Ray
- en: Turning Python Functions into Remote Functions (Ray Tasks)
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Python 函数转换为远程函数（Ray 任务）
- en: Ray can be installed through pip.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 可以通过 pip 安装。
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s begin our Ray journey by creating a Ray task. This can be done by decorating
    a normal Python function with @ray.remote. This creates a task which can be scheduled
    across your laptop's CPU cores (or Ray cluster).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建 Ray 任务来开始 Ray 之旅。这可以通过用 @ray.remote 装饰一个普通的 Python 函数来完成。这将创建一个可以在你的笔记本电脑的
    CPU 核心（或 Ray 集群）上调度的任务。
- en: Consider the two functions below which generate Fibonacci sequences (integer
    sequence characterized by the fact that every number after the first two is the
    sum of the two preceding ones). The first is a normal python function and the
    second is a Ray task.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑下面的两个函数，它们生成斐波那契数列（一个整数序列，其特征是每个数都是前两个数的和）。第一个是普通的 Python 函数，第二个是 Ray 任务。
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are a couple of things to note regarding these two functions. First, they
    are identical except for the @ray.remote decorator on the fibonacci_distributed
    function.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这两个函数，有几点需要注意。首先，它们是相同的，只是在 fibonacci_distributed 函数上有 @ray.remote 装饰器。
- en: The second thing to note is the small return value. They are not returning the
    Fibonacci sequences themselves, but the sequence size, which is an integer.  This
    is important, because it might lessen the value of a distributed function by designing
    it so that it requires or returns a lot of data (parameters). Engineers often
    refer to this as the input/output (IO) of a distributed function.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点需要注意的是返回值较小。它们返回的不是斐波那契数列本身，而是序列大小，这是一个整数。这一点很重要，因为这可能会降低分布式函数的价值，设计时需要考虑它是否需要或返回大量数据（参数）。工程师通常将此称为分布式函数的输入/输出（IO）。
- en: Comparing Local vs Remote Performance
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 比较本地与远程性能
- en: The functions in this section will allow us to compare how long it takes to
    generate multiple long Fibonacci sequences both locally and in parallel. It is
    important to note that both functions below utilize os.cpu_count() which returns
    the number of CPUs in the system.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的函数将帮助我们比较生成多个长斐波那契数列所需的时间，无论是在本地还是并行处理。值得注意的是，下面的两个函数都使用了 os.cpu_count()，它返回系统中的
    CPU 数量。
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![os cpucount](../Images/e670d8f5a15c37da40e802f8614feb32.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![os cpucount](../Images/e670d8f5a15c37da40e802f8614feb32.png)'
- en: The machine used in this tutorial has eight CPUs which means that each function
    below will generate 8 Fibonacci sequences.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程中使用的机器有八个 CPU，这意味着下面的每个函数将生成 8 个斐波那契数列。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before getting into how the code for run_local and run_remote work, let's run
    both of these functions to see how long it takes to generate multiple 100000 number
    Fibonacci sequences both locally and remotely.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入了解 run_local 和 run_remote 的代码之前，让我们先运行这两个函数，看看生成多个 100000 数字的斐波那契数列在本地和远程的时间差异。
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![first distributed run_local run_remote](../Images/9005332b15106e8cb059a1e24ef9f1db.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![first distributed run_local run_remote](../Images/9005332b15106e8cb059a1e24ef9f1db.png)'
- en: The run_remote function parallelized the computation across multiple cpus which
    resulted in a smaller processing time (1.76s vs 4.20s).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: run_remote 函数将计算并行化到多个 CPU 上，从而减少了处理时间（1.76 秒对比 4.20 秒）。
- en: The Ray API
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ray API
- en: In order to better understand why run_remote was faster, let's briefly go over
    the code and along the way explain how the Ray API works.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解为何 run_remote 更快，我们简要回顾一下代码，并解释 Ray API 的工作原理。
- en: '![run_remote yellow](../Images/88beaa9a9ad3a237ea935e57ceabfea0.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![run_remote yellow](../Images/88beaa9a9ad3a237ea935e57ceabfea0.png)'
- en: The ray.init() command starts all of the relevant Ray processes. By default,
    Ray creates one worker process per CPU core. If you would want to run Ray on a
    cluster, you would need to pass in a cluster address with something like ray.init(address=
    'InsertAddressHere').
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`ray.init()` 命令启动所有相关的 Ray 进程。默认情况下，Ray 每个 CPU 核心创建一个工作进程。如果你想在集群上运行 Ray，你需要传入一个集群地址，例如
    `ray.init(address= ''InsertAddressHere'')`。'
- en: '![run_remote remote fibonacci_distributed.remote](../Images/bda15b087909e40f3071fa0c9c29480d.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![run_remote remote fibonacci_distributed.remote](../Images/bda15b087909e40f3071fa0c9c29480d.png)'
- en: fibonacci_distributed.remote(100000)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`fibonacci_distributed.remote(100000)`'
- en: '![fibonacci_distributed.remote(100000)](../Images/79635aab3b742035a45bb27dcd41d70a.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![fibonacci_distributed.remote(100000)](../Images/79635aab3b742035a45bb27dcd41d70a.png)'
- en: Calling fibonacci_distributed.remote(sequence_size) immediately returns a future
    and not the return value of the function. The actual function execution will take
    place in the background. Since it returns immediately, each function call can
    be executed in parallel. This makes generating those multiple 100000 long fibonacci
    sequences take less time.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `fibonacci_distributed.remote(sequence_size)` 会立即返回一个未来对象，而不是函数的返回值。实际的函数执行将会在后台进行。由于它立即返回，每个函数调用可以并行执行。这使得生成那些多个
    100000 长的 Fibonacci 序列所需的时间更少。
- en: '![ray.get](../Images/946c3b656a4b0cea11163461bf11387c.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![ray.get](../Images/946c3b656a4b0cea11163461bf11387c.png)'
- en: '![ray get results](../Images/98aa587fb84451107d8d06cc0266bef5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![ray get results](../Images/98aa587fb84451107d8d06cc0266bef5.png)'
- en: ray.get retrieves the resulting value from the task when it completes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`ray.get` 在任务完成时检索结果值。'
- en: Finally, it is important to note that when the process calling ray.init() terminates,
    the Ray runtime will also terminate. Note that if you try and run ray.init() more
    than once you may get a RuntimeError (Maybe you called ray.init twice by accident?).
    This can be solved by using `ray.shutdown()`
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，重要的是要注意，当调用 `ray.init()` 的进程终止时，Ray 运行时也将终止。注意，如果你尝试多次运行 `ray.init()`，你可能会遇到
    RuntimeError（也许你意外地调用了 `ray.init` 两次？）。可以通过使用 `ray.shutdown()` 来解决这个问题。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Ray Dashboard
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Ray 仪表盘
- en: Ray comes with a dashboard that is available at http://127.0.0.1:8265 after
    you call the ray.init function.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Ray 附带一个仪表盘，你可以在调用 `ray.init` 函数后通过 http://127.0.0.1:8265 访问。
- en: 'Among [other things](https://docs.ray.io/en/master/ray-dashboard.html#ray-dashboard),
    the dashboard lets you:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [其他内容](https://docs.ray.io/en/master/ray-dashboard.html#ray-dashboard) 中，仪表盘允许你：
- en: Understand Ray memory utilization and debug memory errors.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解 Ray 内存利用情况并调试内存错误。
- en: See per-actor resource usage, executed tasks, logs, and more.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看每个演员的资源使用情况、已执行的任务、日志等。
- en: View cluster metrics.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看集群指标。
- en: Kill actors and profile your Ray jobs.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终止演员并分析你的 Ray 作业。
- en: See errors and exceptions at a glance.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一目了然地查看错误和异常。
- en: View logs across many machines in a single pane.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单一界面中查看多个机器的日志。
- en: See [Ray Tune](https://docs.ray.io/en/master/tune/index.html) jobs and trial
    information.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看 [Ray Tune](https://docs.ray.io/en/master/tune/index.html) 作业和试验信息。
- en: The dashboard below shows the resource utilization on a per-node and per-worker
    basis after running run_remote(200000). Notice how the dashboard shows the function
    fibonacci_distributed that’s running in each worker. It’s a good idea to observe
    your distributed functions while they are running. That way, if you see one worker
    doing all the work, then you may be using the ray.get function incorrectly. Also,
    if you see your total CPU utilization getting close to 100 percent, you may be
    doing too much.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的仪表盘显示了在运行 `run_remote(200000)` 后每个节点和每个工作者的资源利用情况。注意仪表盘显示了每个工作者正在运行的 `fibonacci_distributed`
    函数。观察你的分布式函数运行的情况是个好主意。这样，如果你发现一个工作者在做所有的工作，你可能是不正确使用了 `ray.get` 函数。另外，如果你发现你的总
    CPU 利用率接近 100%，你可能做得有些过头了。
- en: '[![ray dashboard 8 core](../Images/ceb59b8475e95e39799f0d5ec6b35100.png)](https://images.ctfassets.net/xjan103pcp94/7slD3bTCoh7Wsd0LIScROV/29127717361206b65fab68981b56e59d/8CoreMichael.png)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![ray dashboard 8 core](../Images/ceb59b8475e95e39799f0d5ec6b35100.png)](https://images.ctfassets.net/xjan103pcp94/7slD3bTCoh7Wsd0LIScROV/29127717361206b65fab68981b56e59d/8CoreMichael.png)'
- en: Trade-offs in distributed computing
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分布式计算中的权衡
- en: This tutorial used Fibonacci sequences because they provide several options
    for tweaking computing and IO. You can alter the amount of computing that each
    function call requires by increasing and decreasing the sequence size. The greater
    the sequence size, the more computing you need to generate the sequence, whereas
    the smaller the sequence size, the less computing you need. If the computation
    you distribute is too small, the overhead of Ray would dominate the total processing
    time, and you wouldn’t get any value out of distributing our functions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用了斐波那契序列，因为它们提供了调整计算和IO的多种选项。你可以通过增加或减少序列大小来改变每个函数调用所需的计算量。序列大小越大，生成序列所需的计算量就越多，而序列大小越小，则所需的计算量越少。如果你分布的计算量过小，Ray的开销将主导总处理时间，你将无法从分布函数中获得任何价值。
- en: IO is also essential when distributing functions. If you modified these functions
    to return the sequences they calculate, the IO would increase as the sequence
    size increased. At some point, the time needed to transmit the data would dominate
    the total time required to complete the multiple calls to the distributed function.
    This is important if you are distributing your functions over a cluster. This
    would require the use of a network, and network calls are more costly than the
    interprocess communication used in this tutorial.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布函数时，IO也至关重要。如果你修改这些函数以返回它们计算的序列，随着序列大小的增加，IO也会增加。在某些时候，传输数据所需的时间将主导完成多个分布函数调用所需的总时间。如果你在集群中分布函数，这一点尤其重要。这将需要使用网络，而网络调用比本教程中使用的进程间通信更昂贵。
- en: Therefore, it is recommended that you try to experiment with both the distributed
    Fibonacci function and the local Fibonacci function. Try to determine the minimum
    sequence size needed to benefit from a remote function. Once you figure out the
    computing, play with the IO to see what happens to overall performance. Distributed
    architectures, regardless of the tool you use, work best when they don’t have
    to move a lot of data around.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，建议你尝试实验分布式斐波那契函数和本地斐波那契函数。尝试确定从远程函数中获益所需的最小序列大小。一旦你搞清楚了计算量，就可以调整IO以观察整体性能的变化。无论你使用什么工具，分布式架构在不需要移动大量数据时效果最佳。
- en: Fortunately, a major benefit of Ray is the ability to maintain entire objects
    remotely. This helps mitigate the IO problem. Let’s look at that next.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Ray的一个主要优点是能够远程维护整个对象。这有助于缓解IO问题。接下来我们来看看这个问题。
- en: Remote Objects as Actors
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程对象作为Actors
- en: Just as Ray translates Python functions to the distributed setting as tasks,
    Ray translates Python classes to the distributed setting as actors. Ray provides
    actors to allow you to parallelize an instance of a class. Code wise, all you
    need to add to a Python class is the @ray.remote decorator to make it an actor.
    When you make an instance of that class, Ray creates a new actor which is a process
    that runs in the cluster and holds a copy of the object.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如Ray将Python函数转化为分布式任务一样，Ray将Python类转化为分布式的actor。Ray提供了actor，以便你可以并行化一个类的实例。从代码角度看，你只需在Python类中添加`@ray.remote`装饰器，即可将其转化为一个actor。当你创建该类的一个实例时，Ray会创建一个新的actor，这是一个在集群中运行的进程，并持有对象的副本。
- en: Since they are remote objects, they can hold data, and their methods can manipulate
    that data. This helps cut down on interprocess communication. Consider using an
    actor if you find yourself writing too many tasks that return data, which in turn
    are sent to other tasks.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们是远程对象，它们可以持有数据，并且它们的方法可以操作这些数据。这有助于减少进程间通信。如果你发现自己编写了太多返回数据的任务，而这些数据又被发送到其他任务中，请考虑使用actor。
- en: Let’s now look at the actor below.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下下面的actor。
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The code above can be used to load and manipulate data from a public dataset
    known as the Global Surface Summary of the Day (GSOD). The dataset is managed
    by the National Oceanic and Atmospheric Administration (NOAA) and it is freely
    available on their [site](https://www.ncei.noaa.gov/data/global-summary-of-the-day/archive/).
    NOAA currently maintains data from over 9,000 stations worldwide and the GSOD
    dataset contains daily summary information from these stations. There is one gzip
    file for each year from 1929 to 2020\. For this tutorial, you only need to download
    the files for [1980](https://www.ncei.noaa.gov/data/global-summary-of-the-day/archive/1980.tar.gz) and [2020](https://www.ncei.noaa.gov/data/global-summary-of-the-day/archive/2020.tar.gz).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可用于加载和操作一个名为全球表面日总结（GSOD）的公共数据集。该数据集由国家海洋和大气管理局（NOAA）管理，并且可以在其 [网站](https://www.ncei.noaa.gov/data/global-summary-of-the-day/archive/) 上免费获取。NOAA目前维护来自全球超过9000个站点的数据，GSOD数据集包含这些站点的每日总结信息。从1929年到2020年，每年都有一个gzip文件。对于本教程，你只需下载 [1980](https://www.ncei.noaa.gov/data/global-summary-of-the-day/archive/1980.tar.gz) 和 [2020](https://www.ncei.noaa.gov/data/global-summary-of-the-day/archive/2020.tar.gz) 的文件。
- en: 'The goal of this actor experiment is to compute how many readings from 1980
    and 2020 were 100 degrees or greater and determine if 2020 had more extreme temperatures
    than 1980\. In order to implement a fair comparison, only stations that existed
    in both 1980 and 2020 should be considered. So, the logic of this experiment looks
    like this:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这次actor实验的目标是计算1980年和2020年中有多少次读数达到100度或更高，并确定2020年是否有比1980年更多的极端温度。为了实现公平比较，只应考虑1980年和2020年都存在的站点。因此，这次实验的逻辑如下：
- en: Load 1980 data.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载1980年的数据。
- en: Load 2020 data.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载2020年的数据。
- en: Get a list of stations that existed in 1980.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取1980年存在的站点列表。
- en: Get a list of stations that existed in 2020.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取2020年存在的站点列表。
- en: Determine the intersection of stations.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定站点的交集。
- en: Get the number of readings that were 100 degrees or greater from the intersection
    of stations during 1980.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取1980年期间交集站点中100度或以上的读数数量。
- en: Get the number of readings that were 100 degrees or greater from the intersection
    of stations during 2020.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取2020年期间交集站点中100度或以上的读数数量。
- en: Print the results.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印结果。
- en: The problem is that this logic is completely sequential; one thing only happens
    after another. With Ray, a lot of this logic can be done in parallel.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，这种逻辑完全是顺序的；一个事情只能在另一个事情之后发生。使用Ray后，这种逻辑可以在并行中完成。
- en: The table below shows a more parallelizable logic.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 下表展示了更具并行性的逻辑。
- en: '![Ray Actor Logic](../Images/2cd485e5f4ded37e80278cefebff12fe.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![Ray Actor Logic](../Images/2cd485e5f4ded37e80278cefebff12fe.png)'
- en: Writing out the logic in this fashion is an excellent way of making sure you
    are executing everything that you can in a parallelizable way. The code below
    implements this logic.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式编写逻辑是确保你以可并行的方式执行所有操作的绝佳方法。以下代码实现了这一逻辑。
- en: '[PRE7]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![compare years](../Images/5776d72c988f49612a47db2d6ea76343.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![compare years](../Images/5776d72c988f49612a47db2d6ea76343.png)'
- en: There are a couple important things to mention about the code above. First,
    putting the @ray.remote decorator at the class level enabled all class methods
    to be called remotely. Second, the code above utilizes two actor processes (gsod_y1
    and gsod_y2) which can execute methods in parallel (though each actor can only
    execute one method at a time). This is what enabled the loading and processing
    of the 1980 and 2020 data at the same time.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 关于上面的代码有几点重要事项需要提及。首先，将`@ray.remote`装饰器放置在类级别，使所有类方法都可以被远程调用。其次，上面的代码使用了两个actor进程（gsod_y1和gsod_y2），这些进程可以并行执行方法（尽管每个actor每次只能执行一个方法）。这使得1980年和2020年的数据能够同时加载和处理。
- en: Conclusion
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: '[Ray](https://github.com/ray-project/ray) is a fast, simple distributed execution
    framework that makes it easy to scale your applications and to leverage state
    of the art machine learning libraries.  This tutorial showed how using Ray makes
    it easy to take your existing Python code that runs sequentially and transform
    it into a distributed application with minimal code changes. While the experiments
    here were all performed on the same machine, [Ray also makes it easy to scale
    your Python code on every major cloud provider](https://towardsdatascience.com/how-to-scale-python-on-every-major-cloud-provider-5e5df3e88274).
    If you’re interested in learning more about Ray, check out the [Ray project on
    GitHub](https://github.com/ray-project/ray), follow [@raydistributed on twitter](https://twitter.com/raydistributed),
    and sign up for the [Ray newsletter](https://anyscale.us5.list-manage.com/subscribe?u=524b25758d03ad7ec4f64105f&id=d94e960a03).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[Ray](https://github.com/ray-project/ray) 是一个快速、简单的分布式执行框架，使得扩展应用程序并利用最先进的机器学习库变得容易。这个教程展示了如何使用
    Ray 轻松将现有的顺序 Python 代码转变为分布式应用程序，几乎无需更改代码。虽然这里的实验都在同一台机器上进行，但 [Ray 也使得在每个主要云服务提供商上扩展
    Python 代码变得容易](https://towardsdatascience.com/how-to-scale-python-on-every-major-cloud-provider-5e5df3e88274)。如果你对
    Ray 感兴趣，可以查看 [Ray 项目在 GitHub 上](https://github.com/ray-project/ray)，关注 [@raydistributed
    的推特](https://twitter.com/raydistributed)，并注册 [Ray 新闻通讯](https://anyscale.us5.list-manage.com/subscribe?u=524b25758d03ad7ec4f64105f&id=d94e960a03)。'
- en: '**Bio: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** is
    a Data Science Professional, and works in Developer Relations at Anyscale.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**简介: [Michael Galarnyk](https://www.linkedin.com/in/michaelgalarnyk/)** 是一名数据科学专家，现任
    Anyscale 开发者关系专员。'
- en: '[Original](https://www.anyscale.com/blog/writing-your-first-distributed-python-application-with-ray).
    Reposted with permission.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://www.anyscale.com/blog/writing-your-first-distributed-python-application-with-ray)。经许可转载。'
- en: '**Related:**'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[Advice for a Successful Data Science Career](/2020/03/advice-successful-data-science-career.html)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[成功的数据科学职业建议](./2020/03/advice-successful-data-science-career.html)'
- en: '[Dask and Pandas: No Such Thing as Too Much Data](/2021/03/dask-pandas-data.html)'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Dask 和 Pandas：没有过多的数据](./2021/03/dask-pandas-data.html)'
- en: '[Speeding up Scikit-Learn Model Training](/2021/03/speed-up-scikit-learn-model-training.html)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加速 Scikit-Learn 模型训练](./2021/03/speed-up-scikit-learn-model-training.html)'
- en: '* * *'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升您的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持您组织的 IT 工作'
- en: '* * *'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关内容
- en: '[8 Ways to Improve Your Search Application this Week](https://www.kdnuggets.com/2022/09/corise-8-ways-improve-search-application-week.html)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[本周提升搜索应用的8种方法](https://www.kdnuggets.com/2022/09/corise-8-ways-improve-search-application-week.html)'
- en: '[RAG vs Finetuning: Which Is the Best Tool to Boost Your LLM Application?](https://www.kdnuggets.com/rag-vs-finetuning-which-is-the-best-tool-to-boost-your-llm-application)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[RAG vs 微调：哪种工具最能提升您的 LLM 应用？](https://www.kdnuggets.com/rag-vs-finetuning-which-is-the-best-tool-to-boost-your-llm-application)'
- en: '[Creating a Web Application to Extract Topics from Audio with Python](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[创建一个用于从音频中提取主题的 Python 网络应用](https://www.kdnuggets.com/2023/01/creating-web-application-extract-topics-audio-python.html)'
- en: '[Building a Geospatial Application in Python with Google Earth…](https://www.kdnuggets.com/2022/03/building-geospatial-application-python-google-earth-engine-greppo.html)'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Google Earth 在 Python 中构建地理空间应用](https://www.kdnuggets.com/2022/03/building-geospatial-application-python-google-earth-engine-greppo.html)'
- en: '[Build An AI Application with Python in 10 Easy Steps](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用 Python 轻松构建 AI 应用的10个步骤](https://www.kdnuggets.com/build-an-ai-application-with-python-in-10-easy-steps)'
- en: '[Data Mesh & Its Distributed Data Architecture](https://www.kdnuggets.com/2022/02/data-mesh-distributed-data-architecture.html)'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据网格及其分布式数据架构](https://www.kdnuggets.com/2022/02/data-mesh-distributed-data-architecture.html)'
