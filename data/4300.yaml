- en: A Simple Way to Time Code in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 中计时代码的一种简单方法
- en: 原文：[https://www.kdnuggets.com/2021/03/simple-way-time-code-python.html](https://www.kdnuggets.com/2021/03/simple-way-time-code-python.html)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/2021/03/simple-way-time-code-python.html](https://www.kdnuggets.com/2021/03/simple-way-time-code-python.html)
- en: '[comments](#comments)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[评论](#comments)'
- en: '**By [Edward Krueger](https://www.linkedin.com/in/edkrueger/), Senior Data
    Scientist and Tech Lead & [Douglas Franklin](https://www.linkedin.com/in/dougaf/),
    Aspiring Data Scientist and Teaching Assistant**'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**由 [Edward Krueger](https://www.linkedin.com/in/edkrueger/)，高级数据科学家和技术负责人
    & [Douglas Franklin](https://www.linkedin.com/in/dougaf/)，有志数据科学家和教学助理**'
- en: '![Figure](../Images/c0d0bbae1f9f5187046476a61b4abe60.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图示](../Images/c0d0bbae1f9f5187046476a61b4abe60.png)'
- en: Photo by Brad Neathery on Unsplash
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Brad Neathery 的照片，来源于 Unsplash
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍
- en: Our goal is to create an easy way to time functions in Python. We do this by
    coding a decorator with Python’s libraries `functools` and `time`. This decorator
    will then be applied to functions whose runtime we are interested in.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是创建一种简单的方法来计时 Python 中的函数。我们通过使用 Python 的库 `functools` 和 `time` 编写一个装饰器来实现。然后将此装饰器应用于我们感兴趣的函数。
- en: 'Timing Decorator: @timefunc'
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 计时装饰器：@timefunc
- en: The code below represents a common decorator pattern that has a reusable and
    flexible structure. Notice the placement of `functool.wraps`. It is a decorator
    for our closure. This decorator preserves `func`’s metadata as it is passed to
    the closure.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码代表了一个常见的装饰器模式，具有可重用和灵活的结构。注意 `functool.wraps` 的位置。它是我们闭包的装饰器。这个装饰器保留了 `func`
    的元数据，因为它传递给了闭包。
- en: Functools becomes significant on line 16, where we access `func.__name__` in
    our print statement. If we did not use `functools.wraps` to decorate our closure,
    the wrong name would be returned.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在第16行，`functools` 在我们的打印语句中变得重要，我们访问 `func.__name__`。如果我们没有使用 `functools.wraps`
    来装饰我们的闭包，就会返回错误的名称。
- en: This decorator returns the runtime of the function passed to `timefunc()`. On
    line 13, `start `initiates timing. Then, line 14's `result `stores the value of `func(*args,
    **kwargs).`After that, `time_elapsed` is calculated. The print statement reports `func`’s
    name and execution time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个装饰器返回传递给 `timefunc()` 的函数的运行时间。在第13行，`start` 启动计时。然后，第14行的 `result` 存储 `func(*args,
    **kwargs)` 的值。之后，计算 `time_elapsed`。打印语句报告 `func` 的名称和执行时间。
- en: Applying timefunc with the @ symbol
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 @ 符号应用 timefunc
- en: In Python, decorators can be easily applied with the `@` symbol. Not all applications
    of decorators use this syntax, but all `@` symbols are an application of a decorator.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，装饰器可以很容易地通过 `@` 符号应用。并非所有装饰器的应用都使用这种语法，但所有 `@` 符号都是装饰器的应用。
- en: We decorate `single_thread `with `timefunc `using the `@ `symbol.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `@` 符号将 `single_thread` 装饰为 `timefunc`。
- en: Now that `single_thread` is decorated, when it’s called on line 13 we’ll see
    its `func.__name__` and runtime.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 `single_thread` 被装饰后，当它在第13行被调用时，我们将看到它的 `func.__name__` 和运行时间。
- en: '![](../Images/e8a5bbe7e0d544055759eacbba2ba4cf.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/e8a5bbe7e0d544055759eacbba2ba4cf.png)'
- en: Output of single_thread decorated by timefunc
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`timefunc` 装饰的 `single_thread` 的输出'
- en: If you want to know how this works, below we will go a little deeper into the
    why and how of coding a decorator to time functions.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解它是如何工作的，下面我们将深入探讨编写一个用于计时函数的装饰器的原因和方法。
- en: Why One Might Time a Function
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为什么有人可能会对一个函数进行计时
- en: The reason is relatively straightforward. Faster functions are better functions.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 原因相对简单。更快的函数就是更好的函数。
- en: Time is money, friend. — Gazlowe
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 时间就是金钱，朋友。—— Gazlowe
- en: The timing decorator shows us a function’s runtime. We can apply the decorator
    to several versions of a function, benchmark them and choose the fastest one.
    Additionally, it is useful to know how long executions will take when testing
    code. Got a five-minute runtime ahead? That's a nice window for getting up, moving
    your legs and refilling your coffee!
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 计时装饰器向我们展示函数的运行时间。我们可以将装饰器应用于多个版本的函数，对它们进行基准测试，并选择最快的一个。此外，在测试代码时，了解执行所需的时间也很有用。计划有五分钟的运行时间？这是一个不错的时间段，可以起身活动一下腿部，或者重新填充咖啡！
- en: To write decorator functions in Python we rely on `functools `and an awareness
    of scope. Let's review scope and decoration.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中编写装饰器函数时，我们依赖于 `functools` 和对作用域的了解。让我们深入了解作用域和装饰。
- en: Decoration, Closures and Scope
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 装饰、闭包和作用域
- en: Decoration is a design pattern in Python that allows you to modify the behavior
    of a function. A decorator is a function that takes in a function and returns
    a modified function.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰是 Python 中的一种设计模式，它允许你修改函数的行为。装饰器是一个接收函数并返回修改后函数的函数。
- en: When writing closures and decorators, you must keep the scope of each function
    in mind. In Python, functions define scope. Closures have access to the scope
    of the function that returns them; the decorator’s scope.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写闭包和装饰器时，你必须牢记每个函数的作用域。在Python中，函数定义作用域。闭包可以访问返回它们的函数的作用域；装饰器的作用域。
- en: It is important to preserve a decorated function's metadata as it is passed
    to a closure. Knowing our scope lets us properly decorate our closures with `functools.wraps`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在传递给闭包时，保存装饰函数的元数据非常重要。了解我们的作用域可以让我们正确地使用`functools.wraps`装饰我们的闭包。
- en: '*For more on these concepts read this three-minute piece.*'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*有关这些概念的更多信息，请阅读这篇三分钟的文章。*'
- en: '[**Decorators and Closures by Example in Python**](https://towardsdatascience.com/decorators-and-closures-by-example-in-python-382758321164)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[**Python中的装饰器和闭包实例**](https://towardsdatascience.com/decorators-and-closures-by-example-in-python-382758321164)'
- en: How to augment the behavior of a function using a decorator
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如何使用装饰器增强函数的行为
- en: On the reusability of this decorator
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 关于这个装饰器的重用性
- en: Notice that `func `is taken as an argument on line 7\. Then on line 11, we pass `*args,
    **kwargs`, into our closure. These `*args, **kwargs` are used to calculate the `result` of `func(*args,
    **kwargs)` on line 10.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`func`作为参数在第7行被传入。然后在第11行，我们将`*args, **kwargs`传递给闭包。这些`*args, **kwargs`用于计算第10行中`func(*args,
    **kwargs)`的`result`。
- en: The flexibility of `*args` and `**kwargs`allow `timefunc` to work on almost
    any function. Our closure’s print statement is designed to access the functions `__name__`, `args`, `kwargs` and `result`to
    create a useful timing output for`func`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`*args`和`**kwargs`的灵活性使得`timefunc`能够在几乎任何函数上工作。我们闭包的打印语句旨在访问函数的`__name__`、`args`、`kwargs`和`result`，以创建一个有用的计时输出。'
- en: Conclusion
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 结论
- en: Decoration is a powerful tool to augment the behavior of functions. By coding
    a decorator to time your functions, you gain an elegant, reusable pattern to track
    a function’s runtime.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰是一种增强函数行为的强大工具。通过编写一个计时装饰器，你可以获得一个优雅、可重用的模式来跟踪函数的运行时间。
- en: Feel free to copy `timefunc` into your codebase, or you can try coding your
    own timing decorator!
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 随意将`timefunc`复制到你的代码库中，或者你可以尝试编写自己的计时装饰器！
- en: '**[Edward Krueger](https://www.linkedin.com/in/edkrueger/)** is a Senior Data
    Scientist and Technical Lead at Business Laboratory and an Instructor at McCombs
    School of Business at The University of Texas at Austin.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**[爱德华·克鲁格](https://www.linkedin.com/in/edkrueger/)** 是Business Laboratory的高级数据科学家和技术主管，并且是德克萨斯大学奥斯汀分校麦库姆斯商学院的讲师。'
- en: '**[Douglas Franklin](https://www.linkedin.com/in/dougaf/)** is a Teaching Assistant
    at McCombs School of Business at The University of Texas at Austin.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**[道格拉斯·弗兰克林](https://www.linkedin.com/in/dougaf/)** 是德克萨斯大学奥斯汀分校麦库姆斯商学院的教学助理。'
- en: '[Original](https://towardsdatascience.com/a-simple-way-to-time-code-in-python-a9a175eb0172).
    Reposted with permission.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[原文](https://towardsdatascience.com/a-simple-way-to-time-code-in-python-a9a175eb0172)。经许可转载。'
- en: '**Related:**'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关：**'
- en: '[15 common mistakes data scientists make in Python (and how to fix them)](/2021/03/15-common-mistakes-python.html)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[数据科学家在Python中常犯的15个错误（及如何修复）](/2021/03/15-common-mistakes-python.html)'
- en: '[How to Speed Up Pandas with Modin](/2021/03/speed-up-pandas-modin.html)'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[如何使用Modin加速Pandas](/2021/03/speed-up-pandas-modin.html)'
- en: '[11 Essential Code Blocks for Complete EDA (Exploratory Data Analysis)](/2021/03/11-essential-code-blocks-exploratory-data-analysis.html)'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[11个完整EDA（探索性数据分析）必备代码块](/2021/03/11-essential-code-blocks-exploratory-data-analysis.html)'
- en: '* * *'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业道路。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌IT支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织的IT工作'
- en: '* * *'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: More On This Topic
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[A Faster Way to Prepare Time-Series Data with the AI & Analytics Engine](https://www.kdnuggets.com/2021/12/piexchange-faster-way-prepare-timeseries-data-ai-analytics-engine.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 AI 和分析引擎加快时间序列数据准备的方法](https://www.kdnuggets.com/2021/12/piexchange-faster-way-prepare-timeseries-data-ai-analytics-engine.html)'
- en: '[3 Simple Ways to Speed Up Your Python Code](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[加速 Python 代码的三种简单方法](https://www.kdnuggets.com/2022/10/3-simple-ways-speed-python-code.html)'
- en: '[Personalized AI Made Simple: Your No-Code Guide to Adapting GPTs](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[个性化 AI 简单实现：无代码适配 GPTs 指南](https://www.kdnuggets.com/personalized-ai-made-simple-your-no-code-guide-to-adapting-gpts)'
- en: '[The Right Way to Access Dictionaries in Python](https://www.kdnuggets.com/the-right-way-to-access-dictionaries-in-python)'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[在 Python 中正确访问字典的方法](https://www.kdnuggets.com/the-right-way-to-access-dictionaries-in-python)'
- en: '[The Easiest Way to Make Beautiful Interactive Visualizations With Pandas](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[使用 Pandas 制作美丽互动可视化的最简单方法](https://www.kdnuggets.com/2021/12/easiest-way-make-beautiful-interactive-visualizations-pandas.html)'
- en: '[A New Way of Managing Deep Learning Datasets](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[管理深度学习数据集的新方法](https://www.kdnuggets.com/2022/03/new-way-managing-deep-learning-datasets.html)'
