- en: Exploring Natural Sorting in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Python 中的自然排序
- en: 原文：[https://www.kdnuggets.com/exploring-natural-sorting-in-python](https://www.kdnuggets.com/exploring-natural-sorting-in-python)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://www.kdnuggets.com/exploring-natural-sorting-in-python](https://www.kdnuggets.com/exploring-natural-sorting-in-python)
- en: '![natsort](../Images/d6abe96d6dbba0e1997ba250e5355cd5.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![natsort](../Images/d6abe96d6dbba0e1997ba250e5355cd5.png)'
- en: Image by Author
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作者提供的图片
- en: What Is Natural Sorting, And Why Do We Need It?
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是自然排序，我们为什么需要它？
- en: '* * *'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Our Top 3 Course Recommendations
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们的前三大课程推荐
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [谷歌网络安全证书](https://www.kdnuggets.com/google-cybersecurity)
    - 快速进入网络安全职业生涯。'
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [谷歌数据分析专业证书](https://www.kdnuggets.com/google-data-analytics)
    - 提升你的数据分析技能'
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [谷歌 IT 支持专业证书](https://www.kdnuggets.com/google-itsupport)
    - 支持你的组织 IT'
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: When working with Python iterables such as lists, sorting is a common operation
    you’ll perform. To sort lists you can use the list method `sort()` to sort a list
    in place or the `sorted()` function that returns a sorted list.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理 Python 可迭代对象如列表时，排序是一项常见操作。要对列表进行排序，可以使用列表方法 `sort()` 来就地排序，或使用 `sorted()`
    函数返回排序后的列表。
- en: The `sorted()` function works fine when you have a list of numbers or strings
    containing letters. But what about strings containing alphanumeric characters,
    such as filenames, directory names, version numbers, and more? The `sorted()`
    function performs lexicographic sorting.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '`sorted()` 函数在处理数字或包含字母的字符串列表时效果很好。但是，对于包含字母数字字符的字符串，如文件名、目录名、版本号等情况呢？`sorted()`
    函数执行的是字典序排序。'
- en: 'Look at this simple example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 看这个简单的例子：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You''ll get the following output:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到如下输出：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Well, 'file10.txt' comes before 'file2.txt' in the output. Not the intuitive
    sorting order we’re hoping for. This is because the `sorted()` function uses the
    ASCII values of the characters to sort and not the numeric values. **Enter natural
    sorting**.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，'file10.txt' 出现在 'file2.txt' 之前，不是我们所期望的直观排序顺序。这是因为 `sorted()` 函数使用字符的 ASCII
    值进行排序，而不是数字值。**引入自然排序**。
- en: Natural sorting is a sorting technique that arranges elements in a way that
    reflects their natural order, particularly for alphanumeric data. Unlike lexicographic
    sorting, natural sorting interprets the numerical value of digits within strings
    and arranges them accordingly, resulting in a more meaningful and expected sequence.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自然排序是一种排序技术，它以反映元素自然顺序的方式对元素进行排列，特别是对于字母数字数据。与字典序排序不同，自然排序会解释字符串中的数字值，并据此进行排列，从而得到更有意义和符合预期的序列。
- en: In this tutorial, we’ll explore natural sorting with the Python library [natsort](https://pypi.org/project/natsort/).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 Python 库 [natsort](https://pypi.org/project/natsort/) 探索自然排序。
- en: Getting Started
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 入门
- en: 'To get started, you can install the `natsort` library using pip:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用，你可以通过 pip 安装 `natsort` 库：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As a best practice, install the required package in a virtual environment for
    the project. Because natsort requires Python 3.7 or later, make sure you’re using
    a recent Python version, preferably Python 3.11 or later. To learn how to manage
    different Python versions, read [Too Many Python Versions to Manage? Pyenv to
    the Rescue](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳实践是，在项目中使用虚拟环境安装所需的软件包。由于 natsort 需要 Python 3.7 或更高版本，请确保使用的是最新的 Python 版本，最好是
    Python 3.11 或更高版本。要了解如何管理不同的 Python 版本，请阅读 [Python 版本太多了？Pyenv 来拯救你](https://www.kdnuggets.com/too-many-python-versions-to-manage-pyenv-to-the-rescue)。
- en: Natural Sorting Basic Examples
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自然排序基础示例
- en: 'We’ll start with simple use cases where natural sorting is beneficial:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从自然排序有用的简单用例开始：
- en: 'Sorting file names: When working with file names containing digits, natural
    sorting ensures that files are ordered in the natural intuitive order.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序文件名：在处理包含数字的文件名时，自然排序确保文件按自然直观的顺序排列。
- en: 'Version sorting: Natural sorting is also helpful for ordering strings of version
    numbers, ensuring that versions are sorted based on their numerical values rather
    than their ASCII values. Which might not reflect the desired versioning sequence.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本排序：自然排序也有助于对版本号字符串进行排序，确保版本根据其数字值而非ASCII值进行排序。这可能不会反映所需的版本顺序。
- en: Now let's proceed to code these examples.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们继续编写这些示例代码。
- en: Sorting Filenames
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序文件名
- en: Now that we’ve installed the natsort library, we can import it into our Python
    script and use the different functions that the library offers.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了natsort库，可以将其导入到我们的Python脚本中，使用该库提供的不同函数。
- en: Let's revisit the first example of sorting file names (the one we saw at the
    beginning of the tutorial) where the lexicographic sorting with the function was
    not what we wanted.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重新回顾排序文件名的第一个例子（就是我们在教程开始时看到的那个），其中字典序排序的结果并不是我们想要的。
- en: 'Now let''s sort the same list using the `natsorted()` function like so:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们使用`natsorted()`函数对相同的列表进行排序，如下所示：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this example, `natsorted()` function from the natsort library is used to
    sort the list of file names naturally. As a result, the file names are arranged
    in the expected numerical order:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，来自natsort库的`natsorted()`函数被用来自然地排序文件名列表。结果是文件名按预期的数字顺序排列：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Sorting Version Numbers
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排序版本号
- en: 'Let''s take another similar example where we have strings denoting versions:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一个类似的例子，我们有表示版本的字符串：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, the `natsorted()` function is applied to sort the list of version numbers
    naturally. The resulting sorted list maintains the correct numerical order of
    the versions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`natsorted()`函数被应用于自然地排序版本号列表。结果排序列表保持了版本的正确数字顺序：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Customizing Sorting with a Key
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用键自定义排序
- en: When using the built-in `sorted()` function, you might have used the `key` parameter
    to customize. Similarly, the `sorted()` function also takes the optional `key`
    parameter which you can use to sort based on specific criteria.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用内置的`sorted()`函数时，你可能已经使用了`key`参数进行自定义。同样，`sorted()`函数也接受可选的`key`参数，你可以用它来根据特定的标准进行排序。
- en: 'Let''s take an example: we have `file_data` which is the list of tuples. The
    first element in the tuple (at index 0) is the file name and the second item (at
    index 1) is the size of the file.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子：我们有`file_data`，它是一个元组列表。元组中的第一个元素（索引0处）是文件名，第二个元素（索引1处）是文件大小。
- en: 'Say we want to sort based on the file size in ascending order. So we set the
    `key` parameter to `lambda x: x[1]` so that the file size at index 1 is used as
    the sorting key:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '假设我们想按文件大小升序排序。因此，我们将`key`参数设置为`lambda x: x[1]`，这样就使用了索引1处的文件大小作为排序键：'
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here’s the output:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是输出结果：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Case-Insensitive Sorting of Strings
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不区分大小写的字符串排序
- en: Another use case where natural sorting is helpful is when you need case-insensitive
    sorting of strings. Again the lexicographic sorting based on ASCII values will
    not give the desired results.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 自然排序还有另一个有用的场景，就是当你需要对字符串进行不区分大小写的排序时。基于ASCII值的字典序排序将不会给出期望的结果。
- en: 'To perform case-insensitive sorting, we can set `alg` to `natsort.ns.IGNORECASE`
    which will ignore the case when sorting. The `alg` key controls the algorithm
    that `natsorted()` uses:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行不区分大小写的排序，我们可以将`alg`设置为`natsort.ns.IGNORECASE`，这将在排序时忽略大小写。`alg`键控制`natsorted()`使用的算法：
- en: '[PRE9]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, the list of words with mixed case is sorted naturally with case-insensitivity:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，包含混合大小写的单词列表被自然地按不区分大小写的方式排序：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Wrapping Up
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 总结
- en: And that's a wrap! In this tutorial, we reviewed the limitations of lexicographic
    sorting and how natural sorting can be a good alternative when working with alphanumeric
    strings. You can find all the code on [GitHub](https://github.com/balapriyac/python-basics/tree/main/natural-sorting).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！在本教程中，我们回顾了字典序排序的局限性以及自然排序如何成为处理字母数字字符串的良好替代方案。你可以在[GitHub](https://github.com/balapriyac/python-basics/tree/main/natural-sorting)上找到所有代码。
- en: We started with simple examples and also looked at sorting based on custom keys
    and handling case-insensitive sorting in Python. Next, you may explore [other
    capabilities of the natsort library](https://natsort.readthedocs.io/en/5.1.0/).
    I’ll see you all soon in another Python tutorial. Until then, keep coding!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从简单的例子开始，也了解了如何基于自定义键排序以及在Python中处理不区分大小写的排序。接下来，你可以探索[natsort库的其他功能](https://natsort.readthedocs.io/en/5.1.0/)。在另一个Python教程中再见。直到那时，继续编程！
- en: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    is a developer and technical writer from India. She likes working at the intersection
    of math, programming, data science, and content creation. Her areas of interest
    and expertise include DevOps, data science, and natural language processing. She
    enjoys reading, writing, coding, and coffee! Currently, she''s working on learning
    and sharing her knowledge with the developer community by authoring tutorials,
    how-to guides, opinion pieces, and more. Bala also creates engaging resource overviews
    and coding tutorials.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**[](https://twitter.com/balawc27)**[Bala Priya C](https://www.kdnuggets.com/wp-content/uploads/bala-priya-author-image-update-230821.jpg)****
    是来自印度的开发者和技术写作人员。她喜欢在数学、编程、数据科学和内容创作的交汇点工作。她的兴趣和专长领域包括DevOps、数据科学和自然语言处理。她喜欢阅读、写作、编码和咖啡！目前，她正在通过编写教程、使用指南、意见文章等与开发者社区分享她的知识。Bala还创建了引人入胜的资源概述和编码教程。'
- en: More On This Topic
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更多相关话题
- en: '[Exploring Data Cleaning Techniques With Python](https://www.kdnuggets.com/2023/04/exploring-data-cleaning-techniques-python.html)'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用Python探索数据清理技术](https://www.kdnuggets.com/2023/04/exploring-data-cleaning-techniques-python.html)'
- en: '[Exploring Infinite Iterators in Python''s itertools](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[探索Python itertools中的无限迭代器](https://www.kdnuggets.com/exploring-infinite-iterators-in-python-itertools)'
- en: '[Exploring the OpenAI API with Python](https://www.kdnuggets.com/exploring-the-openai-api-with-python)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[用Python探索OpenAI API](https://www.kdnuggets.com/exploring-the-openai-api-with-python)'
- en: '[25 Free Books to Master SQL, Python, Data Science, Machine…](https://www.kdnuggets.com/25-free-books-to-master-sql-python-data-science-machine-learning-and-natural-language-processing)'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[25本免费书籍掌握SQL、Python、数据科学、机器学习……](https://www.kdnuggets.com/25-free-books-to-master-sql-python-data-science-machine-learning-and-natural-language-processing)'
- en: '[Exploring Tree of Thought Prompting: How AI Can Learn to Reason…](https://www.kdnuggets.com/2023/07/exploring-tree-of-thought-prompting-ai-learn-reason-through-search.html)'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[探索思维树提示：AI如何通过搜索学习推理……](https://www.kdnuggets.com/2023/07/exploring-tree-of-thought-prompting-ai-learn-reason-through-search.html)'
- en: '[Exploring the Power and Limitations of GPT-4](https://www.kdnuggets.com/2023/07/exploring-power-limitations-gpt4.html)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[探索GPT-4的力量和局限性](https://www.kdnuggets.com/2023/07/exploring-power-limitations-gpt4.html)'
