- en: Hydra Configs for Deep Learning Experiments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://www.kdnuggets.com/2023/03/hydra-configs-deep-learning-experiments.html](https://www.kdnuggets.com/2023/03/hydra-configs-deep-learning-experiments.html)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![Hydra Configs for Deep Learning Experiments](../Images/3d7fd4a04d43dda2ce0149de4fc8a75b.png)'
  prefs: []
  type: TYPE_IMG
- en: Image by Editor
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Our Top 3 Course Recommendations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 1\. [Google Cybersecurity
    Certificate](https://www.kdnuggets.com/google-cybersecurity) - Get on the fast
    track to a career in cybersecurity.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/e225c49c3c91745821c8c0368bf04711.png) 2\. [Google Data Analytics
    Professional Certificate](https://www.kdnuggets.com/google-data-analytics) - Up
    your data analytics game'
  prefs: []
  type: TYPE_NORMAL
- en: '![](../Images/0244c01ba9267c002ef39d4907e0b8fb.png) 3\. [Google IT Support
    Professional Certificate](https://www.kdnuggets.com/google-itsupport) - Support
    your organization in IT'
  prefs: []
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: '[Hydra](https://github.com/facebookresearch/hydra) library provides a flexible
    and efficient configuration management system that enables creating hierarchical
    configurations dynamically by composition and overriding through config files
    and the command line.'
  prefs: []
  type: TYPE_NORMAL
- en: This powerful tool offers a simple and efficient way to manage and organize
    various configurations in one place, constructing complex multilevel configs structures
    without any limits which can be essential in machine learning projects.
  prefs: []
  type: TYPE_NORMAL
- en: All of that enables you to switch easily between any parameters and try different
    configurations without manually updating the code. By defining the parameters
    in a flexible and modular way, it becomes much easier to iterate over new ML models
    and compare different approaches faster, which can save time and resources, and,
    besides, make the development process more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Hydra can serve as the central component in deep learning pipelines (you can
    find an example of my training pipeline template [here](https://github.com/gorodnitskiy/yet-another-lightning-hydra-template)),
    which would orchestrate all internal modules.
  prefs: []
  type: TYPE_NORMAL
- en: How to Run a Deep Learning Pipeline with Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A decorator `hydra.main` is supposed to be used to load Hydra config during
    launching of the pipeline. Here a config is being parsed by Hydra grammar parser,
    merged, composed and passed to the pipeline main function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, It could be accomplished by Hydra [Compose API](https://hydra.cc/docs/advanced/compose_api),
    using `initialize`, `initialize_config_module` or `initialize_config_dir`, instead
    of `hydra.main` decorator:'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiating Objects with Hydra
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An object can be instantiated from a config if it includes a `_target_` key
    with class or function name, for example `torchmetrics.Accuracy`. Also, the config
    might contain other parameters which should be passed to object instantiation.
    Hydra provides `hydra.utils.instantiate()` function (and its alias `hydra.utils.call()`)
    for instantiating objects and calling class or function. It is preferable to use
    `instantiate` for creating objects and `call` for invoking functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Based on this config you could simply instantiate:'
  prefs: []
  type: TYPE_NORMAL
- en: loss via `loss = hydra.utils.instantiate(config.loss)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: metric via `metric = hydra.utils.instantiate(config.metric)`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Besides, it supports multiple strategies for converting config parameters:
    `none`, `partial`, `object` and `all`. The `_convert_` attribute is intended to
    manage this option. You can find more details [here](https://hydra.cc/docs/advanced/instantiate_objects/overview/#parameter-conversion-strategies).'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, it offers a [partial instantiation](https://hydra.cc/docs/advanced/instantiate_objects/overview/#partial-instantiation),
    which can be very useful, for example for function instantiation or recursively
    object instantiation.
  prefs: []
  type: TYPE_NORMAL
- en: Command Line Operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hydra provides the command line operations for config parameters overriding:'
  prefs: []
  type: TYPE_NORMAL
- en: Existing config value can be replaced by passing a different value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A new config value that does not exist in the config can be added by using the
    `+` operator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the config already has a value, it can be overridden by using the `++` operator.
    If the value does not exist in the config, it will be added.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional Out-of-the-box Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It also brings support for various exciting features such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[Structured configs](https://hydra.cc/docs/tutorials/structured_config/schema/)
    with extended list of available primitive types, nested structure, containers
    with primitives, default values, bottom-up values overriding and so much more.
    This offers a wide range of possibilities for organizing configs in many different
    forms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coloured logs for `hydra/job_logging` and `hydra/hydra_logging`.![Hydra Configs
    for Deep Learning Experiments](../Images/348349dfcdfe88e06ca2407a380c1789.png)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hyperparameters sweepers without any additional code: [Optuna](https://hydra.cc/docs/plugins/optuna_sweeper/),
    [Nevergrad](https://hydra.cc/docs/plugins/nevergrad_sweeper/), [Ax](https://hydra.cc/docs/plugins/ax_sweeper/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Custom plugins](https://hydra.cc/docs/advanced/plugins/develop/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom Config Resolvers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra provides an opportunity to expand its functionality even more by adding
    custom resolvers via [OmegaConf](https://omegaconf.readthedocs.io/) library. It
    enables adding custom executable expressions to the config. `OmegaConf.register_new_resolver()`
    function is used to register such resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, OmegaConf supports the following resolvers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`oc.env`: returns the value of an environment variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oc.create`: may be used for dynamic generation of config nodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oc.deprecated`: it can be utilised to mark a config node as deprecated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oc.decode`: decodes a string using a given codec'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oc.select`: provides a default value to use in case the primary interpolation
    key is not found or selects keys that are otherwise illegal interpolation keys
    or handles missing values as well'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`oc.dict.{keys,value}`: analogous to the dict.keys and dict.values methods
    in plain Python dictionaries'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See more details [here](https://omegaconf.readthedocs.io/en/2.1_branch/custom_resolvers.html#built-in-resolvers).
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is a powerful tool that enables adding any custom resolvers. For
    instance, it can be tedious and time-consuming to repeatedly write loss or metric
    names in the configs in multiple places, like `early_stopping` config, `model_checkpoint`
    config, config containing scheduler params, or somewhere else. It could be solved
    by adding a custom resolver to replace `__loss__` and `__metric__` names by the
    actual loss or metric name, which is passed to the config and instantiated by
    Hydra.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: You need to register custom resolvers before `hydra.main` or [Compose
    API](https://hydra.cc/docs/advanced/compose_api) calls. Otherwise, Hydra config
    parser just doesn’t apply it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In [my template for rapid deep learning experiments](https://github.com/gorodnitskiy/yet-another-lightning-hydra-template),
    it is implemented as a decorator `[utils.register_custom_resolvers](https://github.com/gorodnitskiy/yet-another-lightning-hydra-template/blob/936e99fd6c9d033b4f407b96370fd64656566874/src/utils/utils.py#L328)`,
    which allows to register all custom resolvers in one place. It supports main Hydra’s
    command line flags, which are required to override config path, name or dir. By
    default, it allows you to replace `__loss__` to `loss.__class__.__name__` and
    `__metric__` to `metric.__class__.__name__` via such syntax: `${replace:"__metric__/valid"}`.
    Use quotes for defining internal value in `${replace:"..."}` to avoid grammar
    problems with Hydra config parser.'
  prefs: []
  type: TYPE_NORMAL
- en: See more details about `utils.register_custom_resolvers` [here](https://github.com/gorodnitskiy/yet-another-lightning-hydra-template/blob/936e99fd6c9d033b4f407b96370fd64656566874/src/utils/utils.py#L328).
    You can easily expand it for any other purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Simplify Complex Modules Configuring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This powerful tool significantly simplifies the development and configuration
    of complex pipelines, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Instantiate modules with any custom logic under the hood, eg:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instantiate the whole module with all inside submodules recursively by Hydra.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Main module and some parts of the inside submodules can be initialized by Hydra
    and the rest of them manually.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually initialize the main module and all submodules.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Package dynamic structures, like data augmentations to config, where you can
    easily set up any `transforms` classes, parameters or appropriate order for applying.
    See example of possible implementation `[TransformsWrapper](https://github.com/gorodnitskiy/yet-another-lightning-hydra-template/blob/main/src/datamodules/components/transforms.py)`
    based on [albumentations](https://albumentations.ai) library for such purpose,
    which can be easily reworked for any over augmentations package. Config example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create complex multilevel configs structure. [Here](https://github.com/gorodnitskiy/yet-another-lightning-hydra-template/tree/main/configs)
    is an outline of how configs can be organized:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Hydra Configs for Deep Learning Experiments](../Images/4eb82c6b41564e1642817c4c173dc668.png)'
  prefs: []
  type: TYPE_IMG
- en: And many other things... It has very few limitations, so you can use it for
    any custom logic you want to implement in your project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Final Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Hydra paves the way to a scalable configuration management system which gives
    you a power to expand the efficiency of your workflow and maintain the flexibility
    to make changes to your configurations as needed. The ability to easily switch
    between different configurations, simply recompose it and try out different approaches
    without manually updating the code is a key advantage of using such a system for
    solving machine learning problems, especially in deep learning related tasks,
    when additional flexibility is so critical.
  prefs: []
  type: TYPE_NORMAL
- en: '**[Alexander Gorodnitskiy](http://linkedin.com/in/gorodnitskiy/)** is a machine
    learning engineer with a deep knowledge of ML, Computer Vision and Analytics.
    I have 3+ years of experience in creating and improving products using machine
    learning.'
  prefs: []
  type: TYPE_NORMAL
- en: More On This Topic
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Versioning Machine Learning Experiments vs Tracking Them](https://www.kdnuggets.com/2021/12/versioning-machine-learning-experiments-tracking.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[How to Design Experiments for Data Collection](https://www.kdnuggets.com/2022/04/design-experiments-data-collection.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[A Solid Plan for Learning Data Science, Machine Learning, and Deep Learning](https://www.kdnuggets.com/2023/01/mwiti-solid-plan-learning-data-science-machine-learning-deep-learning.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[AI, Analytics, Machine Learning, Data Science, Deep Learning…](https://www.kdnuggets.com/2021/12/developments-predictions-ai-machine-learning-data-science-research.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[15 Free Machine Learning and Deep Learning Books](https://www.kdnuggets.com/2022/10/15-free-machine-learning-deep-learning-books.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[KDnuggets News, November 2: The Current State of Data Science…](https://www.kdnuggets.com/2022/n43.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
